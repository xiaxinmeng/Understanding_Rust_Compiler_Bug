{"sha": "11434f270fca0e403b695e99d4bf0a7212c46f14", "node_id": "C_kwDOAAsO6NoAKDExNDM0ZjI3MGZjYTBlNDAzYjY5NWU5OWQ0YmYwYTcyMTJjNDZmMTQ", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-12-01T11:39:42Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-12-01T11:55:15Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "e0750ced79b59251e18f58d38f26b64430c74264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0750ced79b59251e18f58d38f26b64430c74264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11434f270fca0e403b695e99d4bf0a7212c46f14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmOIliMACgkQHKDfKvWd\naKUKug/+NSG/mkTXqaWbF8+04N024U/LBcnTKY22DUt0XDp5aRCpflrOzrsL3xMC\nLUmgG2AUh+kfStYvtOjbcfFhHUalmrdYRa8Y3ZTynoyrj02QLZzUa2kjHOJ0tK4/\nVrOrrfUW+8camFKESftJV7ENMHrJvSOBeUb+CsFdvWeE6fLm2uJzynbS3whF14+U\nBxdtvgFjeWcx6QF3ZcpmErSzpgFEPRo2kH1cTavu9aK0uyFxkNfCGbwW3r4OFAzI\n7MT23ugEtsyOSZIz9IHce2GUQjcqhSPWW31U4Uhcg8dow+zb2phNEY/MmEmUOsMs\ncpqp6UtpOhv8TxXH3m0xMosUpBnWNitrrulasL64Vjrw2nZuFWY/TTxi2PPtLZpx\nwX/olNOXxKrOUkCi6TrU0P0OhDA5wzlb1gbbOh+DBtAU6gSd1yBAz+KgjIOulRD7\nel9h2Oo0MM4tXTbX6u+4q8zEtjjTajOyNJYw4yGutAYLrx9vvei26Q+rKnrA/6JP\np4g/8kTlVwdfysOTogacM6Qvh2fmdvjJhNyEkP/hf+SSXRH8jS9kw7b+xwN3jzH/\n91R2/RMAn8xtzm+6v8Dlyj0bQ2kaSHdocyRlbn2gQb6PQ3bO57eRmox70ZSE6sWb\nK9TtrMvTTo/B9bsnpMJEsYNZqVwBwpU1DaugmpRPdJquCIwY9+I=\n=wF6a\n-----END PGP SIGNATURE-----", "payload": "tree e0750ced79b59251e18f58d38f26b64430c74264\nparent 58100c014a815f7bc30d58f27e4283166146fbbb\nparent 641ced4eb96d07fba2284fa258ccb987f7afc8a1\nauthor Philipp Krones <hello@philkrones.com> 1669894782 +0100\ncommitter Philipp Krones <hello@philkrones.com> 1669895715 +0100\n\nMerge remote-tracking branch 'upstream/master' into rustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11434f270fca0e403b695e99d4bf0a7212c46f14", "html_url": "https://github.com/rust-lang/rust/commit/11434f270fca0e403b695e99d4bf0a7212c46f14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11434f270fca0e403b695e99d4bf0a7212c46f14/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58100c014a815f7bc30d58f27e4283166146fbbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/58100c014a815f7bc30d58f27e4283166146fbbb", "html_url": "https://github.com/rust-lang/rust/commit/58100c014a815f7bc30d58f27e4283166146fbbb"}, {"sha": "641ced4eb96d07fba2284fa258ccb987f7afc8a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/641ced4eb96d07fba2284fa258ccb987f7afc8a1", "html_url": "https://github.com/rust-lang/rust/commit/641ced4eb96d07fba2284fa258ccb987f7afc8a1"}], "stats": {"total": 6243, "additions": 4286, "deletions": 1957}, "files": [{"sha": "23912bb3ed6b16aea9a4ce27ad1cd5a1a2f50661", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -4188,6 +4188,7 @@ Released 2018-09-13\n [`misaligned_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#misaligned_transmute\n [`mismatched_target_os`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatched_target_os\n [`mismatching_type_param_order`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatching_type_param_order\n+[`misnamed_getters`]: https://rust-lang.github.io/rust-clippy/master/index.html#misnamed_getters\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n [`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n@@ -4450,6 +4451,7 @@ Released 2018-09-13\n [`unnecessary_mut_passed`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed\n [`unnecessary_operation`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation\n [`unnecessary_owned_empty_strings`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_owned_empty_strings\n+[`unnecessary_safety_comment`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_safety_comment\n [`unnecessary_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_safety_doc\n [`unnecessary_self_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_self_imports\n [`unnecessary_sort_by`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by"}, {"sha": "6bdac84ada003bd56778d3bd6c5dc569eaae9f61", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -42,6 +42,7 @@ filetime = \"0.2\"\n rustc-workspace-hack = \"1.0\"\n \n # UI test dependencies\n+clap = { version = \"3.1\", features = [\"derive\"] }\n clippy_utils = { path = \"clippy_utils\" }\n derive-new = \"0.5\"\n if_chain = \"1.0\""}, {"sha": "81254ba8b8b8f7faf163e4be75172a847cfceb4a", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -197,8 +197,8 @@ disallowed-names = [\"toto\", \"tata\", \"titi\"]\n cognitive-complexity-threshold = 30\n ```\n \n-See the [list of lints](https://rust-lang.github.io/rust-clippy/master/index.html) for more information about which\n-lints can be configured and the meaning of the variables.\n+See the [list of configurable lints](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration),\n+the lint descriptions contain the names and meanings of these configuration variables.\n \n > **Note**\n >\n@@ -224,7 +224,7 @@ in the `Cargo.toml` can be used.\n rust-version = \"1.30\"\n ```\n \n-The MSRV can also be specified as an inner attribute, like below.\n+The MSRV can also be specified as an attribute, like below.\n \n ```rust\n #![feature(custom_inner_attributes)]"}, {"sha": "1f0b8db28a152e19c48ccd93f46285036a18e9ef", "filename": "book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FSUMMARY.md?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -21,3 +21,4 @@\n         - [The Clippy Book](development/infrastructure/book.md)\n     - [Proposals](development/proposals/README.md)\n         - [Roadmap 2021](development/proposals/roadmap-2021.md)\n+        - [Syntax Tree Patterns](development/proposals/syntax-tree-patterns.md)"}, {"sha": "430ff8b739ae861785c528b749728a199f6ee72c", "filename": "book/src/configuration.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/book%2Fsrc%2Fconfiguration.md", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/book%2Fsrc%2Fconfiguration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fconfiguration.md?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -11,8 +11,8 @@ disallowed-names = [\"toto\", \"tata\", \"titi\"]\n cognitive-complexity-threshold = 30\n ```\n \n-See the [list of lints](https://rust-lang.github.io/rust-clippy/master/index.html) for more information about which\n-lints can be configured and the meaning of the variables.\n+See the [list of configurable lints](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration),\n+the lint descriptions contain the names and meanings of these configuration variables.\n \n To deactivate the \"for further information visit *lint-link*\" message you can define the `CLIPPY_DISABLE_DOCS_LINKS`\n environment variable.\n@@ -72,7 +72,7 @@ minimum supported Rust version (MSRV) in the clippy configuration file.\n msrv = \"1.30.0\"\n ```\n \n-The MSRV can also be specified as an inner attribute, like below.\n+The MSRV can also be specified as an attribute, like below.\n \n ```rust\n #![feature(custom_inner_attributes)]"}, {"sha": "8b4eee8c9d94d3b3f6ddaaa72507a59de8149d70", "filename": "book/src/development/adding_lints.md", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -443,27 +443,27 @@ value is passed to the constructor in `clippy_lints/lib.rs`.\n \n ```rust\n pub struct ManualStrip {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualStrip {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n ```\n \n The project's MSRV can then be matched against the feature MSRV in the LintPass\n-using the `meets_msrv` utility function.\n+using the `Msrv::meets` method.\n \n ``` rust\n-if !meets_msrv(self.msrv, msrvs::STR_STRIP_PREFIX) {\n+if !self.msrv.meets(msrvs::STR_STRIP_PREFIX) {\n     return;\n }\n ```\n \n-The project's MSRV can also be specified as an inner attribute, which overrides\n+The project's MSRV can also be specified as an attribute, which overrides\n the value from `clippy.toml`. This can be accounted for using the\n `extract_msrv_attr!(LintContext)` macro and passing\n `LateContext`/`EarlyContext`.\n@@ -483,19 +483,15 @@ have a case for the version below the MSRV and one with the same contents but\n for the MSRV version itself.\n \n ```rust\n-#![feature(custom_inner_attributes)]\n-\n ...\n \n+#[clippy::msrv = \"1.44\"]\n fn msrv_1_44() {\n-    #![clippy::msrv = \"1.44\"]\n-\n     /* something that would trigger the lint */\n }\n \n+#[clippy::msrv = \"1.45\"]\n fn msrv_1_45() {\n-    #![clippy::msrv = \"1.45\"]\n-\n     /* something that would trigger the lint */\n }\n ```"}, {"sha": "c5587c4bf9089eff4283f327d0029d079462df4f", "filename": "book/src/development/proposals/syntax-tree-patterns.md", "status": "added", "additions": 986, "deletions": 0, "changes": 986, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -0,0 +1,986 @@\n+- Feature Name: syntax-tree-patterns\n+- Start Date: 2019-03-12\n+- RFC PR: [#3875](https://github.com/rust-lang/rust-clippy/pull/3875)\n+\n+# Summary\n+\n+Introduce a domain-specific language (similar to regular expressions) that\n+allows to describe lints using *syntax tree patterns*.\n+\n+\n+# Motivation\n+\n+Finding parts of a syntax tree (AST, HIR, ...) that have certain properties\n+(e.g. \"*an if that has a block as its condition*\") is a major task when writing\n+lints. For non-trivial lints, it often requires nested pattern matching of AST /\n+HIR nodes. For example, testing that an expression is a boolean literal requires\n+the following checks:\n+\n+```rust\n+if let ast::ExprKind::Lit(lit) = &expr.node {\n+    if let ast::LitKind::Bool(_) = &lit.node {\n+        ...\n+    }\n+}\n+```\n+\n+Writing this kind of matching code quickly becomes a complex task and the\n+resulting code is often hard to comprehend. The code below shows a simplified\n+version of the pattern matching required by the `collapsible_if` lint:\n+\n+```rust\n+// simplified version of the collapsible_if lint\n+if let ast::ExprKind::If(check, then, None) = &expr.node {\n+    if then.stmts.len() == 1 {\n+        if let ast::StmtKind::Expr(inner) | ast::StmtKind::Semi(inner) = &then.stmts[0].node {\n+            if let ast::ExprKind::If(check_inner, content, None) = &inner.node {\n+                ...\n+            }\n+        }\n+    }\n+}\n+```\n+\n+The `if_chain` macro can improve readability by flattening the nested if\n+statements, but the resulting code is still quite hard to read:\n+\n+```rust\n+// simplified version of the collapsible_if lint\n+if_chain! {\n+    if let ast::ExprKind::If(check, then, None) = &expr.node;\n+    if then.stmts.len() == 1;\n+    if let ast::StmtKind::Expr(inner) | ast::StmtKind::Semi(inner) = &then.stmts[0].node;\n+    if let ast::ExprKind::If(check_inner, content, None) = &inner.node;\n+    then {\n+        ...\n+    }\n+}\n+```\n+\n+The code above matches if expressions that contain only another if expression\n+(where both ifs don't have an else branch). While it's easy to explain what the\n+lint does, it's hard to see that from looking at the code samples above.\n+\n+Following the motivation above, the first goal this RFC is to **simplify writing\n+and reading lints**.\n+\n+The second part of the motivation is clippy's dependence on unstable\n+compiler-internal data structures. Clippy lints are currently written against\n+the compiler's AST / HIR which means that even small changes in these data\n+structures might break a lot of lints. The second goal of this RFC is to **make\n+lints independant of the compiler's AST / HIR data structures**.\n+\n+# Approach\n+\n+A lot of complexity in writing lints currently seems to come from having to\n+manually implement the matching logic (see code samples above). It's an\n+imparative style that describes *how* to match a syntax tree node instead of\n+specifying *what* should be matched against declaratively. In other areas, it's\n+common to use declarative patterns to describe desired information and let the\n+implementation do the actual matching. A well-known example of this approach are\n+[regular expressions](https://en.wikipedia.org/wiki/Regular_expression). Instead\n+of writing code that detects certain character sequences, one can describe a\n+search pattern using a domain-specific language and search for matches using\n+that pattern. The advantage of using a declarative domain-specific language is\n+that its limited domain (e.g. matching character sequences in the case of\n+regular expressions) allows to express entities in that domain in a very natural\n+and expressive way.\n+\n+While regular expressions are very useful when searching for patterns in flat\n+character sequences, they cannot easily be applied to hierarchical data\n+structures like syntax trees. This RFC therefore proposes a pattern matching\n+system that is inspired by regular expressions and designed for hierarchical\n+syntax trees.\n+\n+# Guide-level explanation\n+\n+This proposal adds a `pattern!` macro that can be used to specify a syntax tree\n+pattern to search for. A simple pattern is shown below:\n+\n+```rust\n+pattern!{\n+    my_pattern: Expr =\n+        Lit(Bool(false))\n+}\n+```\n+\n+This macro call defines a pattern named `my_pattern` that can be matched against\n+an `Expr` syntax tree node. The actual pattern (`Lit(Bool(false))` in this case)\n+defines which syntax trees should match the pattern. This pattern matches\n+expressions that are boolean literals with value `false`.\n+\n+The pattern can then be used to implement lints in the following way:\n+\n+```rust\n+...\n+\n+impl EarlyLintPass for MyAwesomeLint {\n+    fn check_expr(&mut self, cx: &EarlyContext, expr: &syntax::ast::Expr) {\n+\n+        if my_pattern(expr).is_some() {\n+            cx.span_lint(\n+                MY_AWESOME_LINT,\n+                expr.span,\n+                \"This is a match for a simple pattern. Well done!\",\n+            );\n+        }\n+\n+    }\n+}\n+```\n+\n+The `pattern!` macro call expands to a function `my_pattern` that expects a\n+syntax tree expression as its argument and returns an `Option` that indicates\n+whether the pattern matched.\n+\n+> Note: The result type is explained in more detail in [a later\n+> section](#the-result-type). For now, it's enough to know that the result is\n+> `Some` if the pattern matched and `None` otherwise.\n+\n+## Pattern syntax\n+\n+The following examples demonstate the pattern syntax:\n+\n+\n+#### Any (`_`)\n+\n+The simplest pattern is the any pattern. It matches anything and is therefore\n+similar to regex's `*`.\n+\n+```rust\n+pattern!{\n+    // matches any expression\n+    my_pattern: Expr =\n+        _\n+}\n+```\n+\n+#### Node (`<node-name>(<args>)`)\n+\n+Nodes are used to match a specific variant of an AST node. A node has a name and\n+a number of arguments that depends on the node type. For example, the `Lit` node\n+has a single argument that describes the type of the literal. As another\n+example, the `If` node has three arguments describing the if's condition, then\n+block and else block.\n+\n+```rust\n+pattern!{\n+    // matches any expression that is a literal\n+    my_pattern: Expr =\n+        Lit(_)\n+}\n+\n+pattern!{\n+    // matches any expression that is a boolean literal\n+    my_pattern: Expr =\n+        Lit(Bool(_))\n+}\n+\n+pattern!{\n+    // matches if expressions that have a boolean literal in their condition\n+    // Note: The `_?` syntax here means that the else branch is optional and can be anything.\n+    //       This is discussed in more detail in the section `Repetition`.\n+    my_pattern: Expr =\n+        If( Lit(Bool(_)) , _, _?)\n+}\n+```\n+\n+\n+#### Literal (`<lit>`)\n+\n+A pattern can also contain Rust literals. These literals match themselves.\n+\n+```rust\n+pattern!{\n+    // matches the boolean literal false\n+    my_pattern: Expr =\n+        Lit(Bool(false))\n+}\n+\n+pattern!{\n+    // matches the character literal 'x'\n+    my_pattern: Expr =\n+        Lit(Char('x'))\n+}\n+```\n+\n+#### Alternations (`a | b`)\n+\n+```rust\n+pattern!{\n+    // matches if the literal is a boolean or integer literal\n+    my_pattern: Lit =\n+        Bool(_) | Int(_)\n+}\n+\n+pattern!{\n+    // matches if the expression is a char literal with value 'x' or 'y'\n+    my_pattern: Expr =\n+        Lit( Char('x' | 'y') )\n+}\n+```\n+\n+#### Empty (`()`)\n+\n+The empty pattern represents an empty sequence or the `None` variant of an\n+optional.\n+\n+```rust\n+pattern!{\n+    // matches if the expression is an empty array\n+    my_pattern: Expr =\n+        Array( () )\n+}\n+\n+pattern!{\n+    // matches if expressions that don't have an else clause\n+    my_pattern: Expr =\n+        If(_, _, ())\n+}\n+```\n+\n+#### Sequence (`<a> <b>`)\n+\n+```rust\n+pattern!{\n+    // matches the array [true, false]\n+    my_pattern: Expr =\n+        Array( Lit(Bool(true)) Lit(Bool(false)) )\n+}\n+```\n+\n+#### Repetition (`<a>*`, `<a>+`, `<a>?`, `<a>{n}`, `<a>{n,m}`, `<a>{n,}`)\n+\n+Elements may be repeated. The syntax for specifying repetitions is identical to\n+[regex's syntax](https://docs.rs/regex/1.1.2/regex/#repetitions).\n+\n+```rust\n+pattern!{\n+    // matches arrays that contain 2 'x's as their last or second-last elements\n+    // Examples:\n+    //     ['x', 'x']                         match\n+    //     ['x', 'x', 'y']                    match\n+    //     ['a', 'b', 'c', 'x', 'x', 'y']     match\n+    //     ['x', 'x', 'y', 'z']               no match\n+    my_pattern: Expr =\n+        Array( _* Lit(Char('x')){2} _? )\n+}\n+\n+pattern!{\n+    // matches if expressions that **may or may not** have an else block\n+    // Attn: `If(_, _, _)` matches only ifs that **have** an else block\n+    //\n+    //              | if with else block | if witout else block\n+    // If(_, _, _)  |       match        |       no match\n+    // If(_, _, _?) |       match        |        match\n+    // If(_, _, ()) |      no match      |        match\n+    my_pattern: Expr =\n+        If(_, _, _?)\n+}\n+```\n+\n+#### Named submatch (`<a>#<name>`)\n+\n+```rust\n+pattern!{\n+    // matches character literals and gives the literal the name foo\n+    my_pattern: Expr =\n+        Lit(Char(_)#foo)\n+}\n+\n+pattern!{\n+    // matches character literals and gives the char the name bar\n+    my_pattern: Expr =\n+        Lit(Char(_#bar))\n+}\n+\n+pattern!{\n+    // matches character literals and gives the expression the name baz\n+    my_pattern: Expr =\n+        Lit(Char(_))#baz\n+}\n+```\n+\n+The reason for using named submatches is described in the section [The result\n+type](#the-result-type).\n+\n+### Summary\n+\n+The following table gives an summary of the pattern syntax:\n+\n+| Syntax                  | Concept          | Examples                                   |\n+|-------------------------|------------------|--------------------------------------------|\n+|`_`                      | Any              | `_`                                        |\n+|`<node-name>(<args>)`    | Node             | `Lit(Bool(true))`, `If(_, _, _)`           |\n+|`<lit>`                  | Literal          | `'x'`, `false`, `101`                      |\n+|`<a> \\| <b>`             | Alternation      | `Char(_) \\| Bool(_)`                       |\n+|`()`                     | Empty            | `Array( () )`                              |\n+|`<a> <b>`                | Sequence         | `Tuple( Lit(Bool(_)) Lit(Int(_)) Lit(_) )` |\n+|`<a>*` <br> `<a>+` <br> `<a>?` <br> `<a>{n}` <br> `<a>{n,m}` <br> `<a>{n,}` | Repetition <br> <br> <br> <br> <br><br> | `Array( _* )`, <br> `Block( Semi(_)+ )`, <br> `If(_, _, Block(_)?)`, <br> `Array( Lit(_){10} )`, <br> `Lit(_){5,10}`, <br> `Lit(Bool(_)){10,}` |\n+|`<a>#<name>`             | Named submatch   | `Lit(Int(_))#foo` `Lit(Int(_#bar))`        |\n+\n+\n+## The result type\n+\n+A lot of lints require checks that go beyond what the pattern syntax described\n+above can express. For example, a lint might want to check whether a node was\n+created as part of a macro expansion or whether there's no comment above a node.\n+Another example would be a lint that wants to match two nodes that have the same\n+value (as needed by lints like `almost_swapped`). Instead of allowing users to\n+write these checks into the pattern directly (which might make patterns hard to\n+read), the proposed solution allows users to assign names to parts of a pattern\n+expression. When matching a pattern against a syntax tree node, the return value\n+will contain references to all nodes that were matched by these named\n+subpatterns. This is similar to capture groups in regular expressions.\n+\n+For example, given the following pattern\n+\n+```rust\n+pattern!{\n+    // matches character literals\n+    my_pattern: Expr =\n+        Lit(Char(_#val_inner)#val)#val_outer\n+}\n+```\n+\n+one could get references to the nodes that matched the subpatterns in the\n+following way:\n+\n+```rust\n+...\n+fn check_expr(expr: &syntax::ast::Expr) {\n+    if let Some(result) = my_pattern(expr) {\n+        result.val_inner  // type: &char\n+        result.val        // type: &syntax::ast::Lit\n+        result.val_outer  // type: &syntax::ast::Expr\n+    }\n+}\n+```\n+\n+The types in the `result` struct depend on the pattern. For example, the\n+following pattern\n+\n+```rust\n+pattern!{\n+    // matches arrays of character literals\n+    my_pattern_seq: Expr =\n+        Array( Lit(_)*#foo )\n+}\n+```\n+\n+matches arrays that consist of any number of literal expressions. Because those\n+expressions are named `foo`, the result struct contains a `foo` attribute which\n+is a vector of expressions:\n+\n+```rust\n+...\n+if let Some(result) = my_pattern_seq(expr) {\n+    result.foo        // type: Vec<&syntax::ast::Expr>\n+}\n+```\n+\n+Another result type occurs when a name is only defined in one branch of an\n+alternation:\n+\n+```rust\n+pattern!{\n+    // matches if expression is a boolean or integer literal\n+    my_pattern_alt: Expr =\n+        Lit( Bool(_#bar) | Int(_) )\n+}\n+```\n+\n+In the pattern above, the `bar` name is only defined if the pattern matches a\n+boolean literal. If it matches an integer literal, the name isn't set. To\n+account for this, the result struct's `bar` attribute is an option type:\n+\n+```rust\n+...\n+if let Some(result) = my_pattern_alt(expr) {\n+    result.bar        // type: Option<&bool>\n+}\n+```\n+\n+It's also possible to use a name in multiple alternation branches if they have\n+compatible types:\n+\n+```rust\n+pattern!{\n+    // matches if expression is a boolean or integer literal\n+    my_pattern_mult: Expr =\n+        Lit(_#baz) | Array( Lit(_#baz) )\n+}\n+...\n+if let Some(result) = my_pattern_mult(expr) {\n+    result.baz        // type: &syntax::ast::Lit\n+}\n+```\n+\n+Named submatches are a **flat** namespace and this is intended. In the example\n+above, two different sub-structures are assigned to a flat name. I expect that\n+for most lints, a flat namespace is sufficient and easier to work with than a\n+hierarchical one.\n+\n+#### Two stages\n+\n+Using named subpatterns, users can write lints in two stages. First, a coarse\n+selection of possible matches is produced by the pattern syntax. In the second\n+stage, the named subpattern references can be used to do additional tests like\n+asserting that a node hasn't been created as part of a macro expansion.\n+\n+## Implementing clippy lints using patterns\n+\n+As a \"real-world\" example, I re-implemented the `collapsible_if` lint using\n+patterns. The code can be found\n+[here](https://github.com/fkohlgrueber/rust-clippy-pattern/blob/039b07ecccaf96d6aa7504f5126720d2c9cceddd/clippy_lints/src/collapsible_if.rs#L88-L163).\n+The pattern-based version passes all test cases that were written for\n+`collapsible_if`.\n+\n+\n+# Reference-level explanation\n+\n+## Overview\n+\n+The following diagram shows the dependencies between the main parts of the\n+proposed solution:\n+\n+```\n+                          Pattern syntax\n+                                |\n+                                |  parsing / lowering\n+                                v\n+                           PatternTree\n+                                ^\n+                                |\n+                                |\n+                          IsMatch trait\n+                                |\n+                                |\n+             +---------------+-----------+---------+\n+             |               |           |         |\n+             v               v           v         v\n+        syntax::ast     rustc::hir      syn       ...\n+```\n+\n+The pattern syntax described in the previous section is parsed / lowered into\n+the so-called *PatternTree* data structure that represents a valid syntax tree\n+pattern. Matching a *PatternTree* against an actual syntax tree (e.g. rust ast /\n+hir or the syn ast, ...) is done using the *IsMatch* trait.\n+\n+The *PatternTree* and the *IsMatch* trait are introduced in more detail in the\n+following sections.\n+\n+## PatternTree\n+\n+The core data structure of this RFC is the **PatternTree**.\n+\n+It's a data structure similar to rust's AST / HIR, but with the following\n+differences:\n+\n+- The PatternTree doesn't contain parsing information like `Span`s\n+- The PatternTree can represent alternatives, sequences and optionals\n+\n+The code below shows a simplified version of the current PatternTree:\n+\n+> Note: The current implementation can be found\n+> [here](https://github.com/fkohlgrueber/pattern-matching/blob/dfb3bc9fbab69cec7c91e72564a63ebaa2ede638/pattern-match/src/pattern_tree.rs#L50-L96).\n+\n+\n+```rust\n+pub enum Expr {\n+    Lit(Alt<Lit>),\n+    Array(Seq<Expr>),\n+    Block_(Alt<BlockType>),\n+    If(Alt<Expr>, Alt<BlockType>, Opt<Expr>),\n+    IfLet(\n+        Alt<BlockType>,\n+        Opt<Expr>,\n+    ),\n+}\n+\n+pub enum Lit {\n+    Char(Alt<char>),\n+    Bool(Alt<bool>),\n+    Int(Alt<u128>),\n+}\n+\n+pub enum Stmt {\n+    Expr(Alt<Expr>),\n+    Semi(Alt<Expr>),\n+}\n+\n+pub enum BlockType {\n+    Block(Seq<Stmt>),\n+}\n+```\n+\n+The `Alt`, `Seq` and `Opt` structs look like these:\n+\n+> Note: The current implementation can be found\n+> [here](https://github.com/fkohlgrueber/pattern-matching/blob/dfb3bc9fbab69cec7c91e72564a63ebaa2ede638/pattern-match/src/matchers.rs#L35-L60).\n+\n+```rust\n+pub enum Alt<T> {\n+    Any,\n+    Elmt(Box<T>),\n+    Alt(Box<Self>, Box<Self>),\n+    Named(Box<Self>, ...)\n+}\n+\n+pub enum Opt<T> {\n+    Any,  // anything, but not None\n+    Elmt(Box<T>),\n+    None,\n+    Alt(Box<Self>, Box<Self>),\n+    Named(Box<Self>, ...)\n+}\n+\n+pub enum Seq<T> {\n+    Any,\n+    Empty,\n+    Elmt(Box<T>),\n+    Repeat(Box<Self>, RepeatRange),\n+    Seq(Box<Self>, Box<Self>),\n+    Alt(Box<Self>, Box<Self>),\n+    Named(Box<Self>, ...)\n+}\n+\n+pub struct RepeatRange {\n+    pub start: usize,\n+    pub end: Option<usize>  // exclusive\n+}\n+```\n+\n+## Parsing / Lowering\n+\n+The input of a `pattern!` macro call is parsed into a `ParseTree` first and then\n+lowered to a `PatternTree`.\n+\n+Valid patterns depend on the *PatternTree* definitions. For example, the pattern\n+`Lit(Bool(_)*)` isn't valid because the parameter type of the `Lit` variant of\n+the `Expr` enum is `Any<Lit>` and therefore doesn't support repetition (`*`). As\n+another example, `Array( Lit(_)* )` is a valid pattern because the parameter of\n+`Array` is of type `Seq<Expr>` which allows sequences and repetitions.\n+\n+> Note: names in the pattern syntax correspond to *PatternTree* enum\n+> **variants**. For example, the `Lit` in the pattern above refers to the `Lit`\n+> variant of the `Expr` enum (`Expr::Lit`), not the `Lit` enum.\n+\n+## The IsMatch Trait\n+\n+The pattern syntax and the *PatternTree* are independant of specific syntax tree\n+implementations (rust ast / hir, syn, ...). When looking at the different\n+pattern examples in the previous sections, it can be seen that the patterns\n+don't contain any information specific to a certain syntax tree implementation.\n+In contrast, clippy lints currently match against ast / hir syntax tree nodes\n+and therefore directly depend on their implementation.\n+\n+The connection between the *PatternTree* and specific syntax tree\n+implementations is the `IsMatch` trait. It defines how to match *PatternTree*\n+nodes against specific syntax tree nodes. A simplified implementation of the\n+`IsMatch` trait is shown below:\n+\n+```rust\n+pub trait IsMatch<O> {\n+    fn is_match(&self, other: &'o O) -> bool;\n+}\n+```\n+\n+This trait needs to be implemented on each enum of the *PatternTree* (for the\n+corresponding syntax tree types). For example, the `IsMatch` implementation for\n+matching `ast::LitKind` against the *PatternTree's* `Lit` enum might look like\n+this:\n+\n+```rust\n+impl IsMatch<ast::LitKind> for Lit {\n+    fn is_match(&self, other: &ast::LitKind) -> bool {\n+        match (self, other) {\n+            (Lit::Char(i), ast::LitKind::Char(j)) => i.is_match(j),\n+            (Lit::Bool(i), ast::LitKind::Bool(j)) => i.is_match(j),\n+            (Lit::Int(i), ast::LitKind::Int(j, _)) => i.is_match(j),\n+            _ => false,\n+        }\n+    }\n+}\n+```\n+\n+All `IsMatch` implementations for matching the current *PatternTree* against\n+`syntax::ast` can be found\n+[here](https://github.com/fkohlgrueber/pattern-matching/blob/dfb3bc9fbab69cec7c91e72564a63ebaa2ede638/pattern-match/src/ast_match.rs).\n+\n+\n+# Drawbacks\n+\n+#### Performance\n+\n+The pattern matching code is currently not optimized for performance, so it\n+might be slower than hand-written matching code. Additionally, the two-stage\n+approach (matching against the coarse pattern first and checking for additional\n+properties later) might be slower than the current practice of checking for\n+structure and additional properties in one pass. For example, the following lint\n+\n+```rust\n+pattern!{\n+    pat_if_without_else: Expr =\n+        If(\n+            _,\n+            Block(\n+                Expr( If(_, _, ())#inner )\n+                | Semi( If(_, _, ())#inner )\n+            )#then,\n+            ()\n+        )\n+}\n+...\n+fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n+    if let Some(result) = pat_if_without_else(expr) {\n+        if !block_starts_with_comment(cx, result.then) {\n+            ...\n+        }\n+}\n+```\n+\n+first matches against the pattern and then checks that the `then` block doesn't\n+start with a comment. Using clippy's current approach, it's possible to check\n+for these conditions earlier:\n+\n+```rust\n+fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n+    if_chain! {\n+        if let ast::ExprKind::If(ref check, ref then, None) = expr.node;\n+        if !block_starts_with_comment(cx, then);\n+        if let Some(inner) = expr_block(then);\n+        if let ast::ExprKind::If(ref check_inner, ref content, None) = inner.node;\n+        then {\n+            ...\n+        }\n+    }\n+}\n+```\n+\n+Whether or not this causes performance regressions depends on actual patterns.\n+If it turns out to be a problem, the pattern matching algorithms could be\n+extended to allow \"early filtering\" (see the [Early Filtering](#early-filtering)\n+section in Future Possibilities).\n+\n+That being said, I don't see any conceptual limitations regarding pattern\n+matching performance.\n+\n+#### Applicability\n+\n+Even though I'd expect that a lot of lints can be written using the proposed\n+pattern syntax, it's unlikely that all lints can be expressed using patterns. I\n+suspect that there will still be lints that need to be implemented by writing\n+custom pattern matching code. This would lead to mix within clippy's codebase\n+where some lints are implemented using patterns and others aren't. This\n+inconsistency might be considered a drawback.\n+\n+\n+# Rationale and alternatives\n+\n+Specifying lints using syntax tree patterns has a couple of advantages compared\n+to the current approach of manually writing matching code. First, syntax tree\n+patterns allow users to describe patterns in a simple and expressive way. This\n+makes it easier to write new lints for both novices and experts and also makes\n+reading / modifying existing lints simpler.\n+\n+Another advantage is that lints are independent of specific syntax tree\n+implementations (e.g. AST / HIR, ...). When these syntax tree implementations\n+change, only the `IsMatch` trait implementations need to be adapted and existing\n+lints can remain unchanged. This also means that if the `IsMatch` trait\n+implementations were integrated into the compiler, updating the `IsMatch`\n+implementations would be required for the compiler to compile successfully. This\n+could reduce the number of times clippy breaks because of changes in the\n+compiler. Another advantage of the pattern's independence is that converting an\n+`EarlyLintPass` lint into a `LatePassLint` wouldn't require rewriting the whole\n+pattern matching code. In fact, the pattern might work just fine without any\n+adaptions.\n+\n+\n+## Alternatives\n+\n+### Rust-like pattern syntax\n+\n+The proposed pattern syntax requires users to know the structure of the\n+`PatternTree` (which is very similar to the AST's / HIR's structure) and also\n+the pattern syntax. An alternative would be to introduce a pattern syntax that\n+is similar to actual Rust syntax (probably like the `quote!` macro). For\n+example, a pattern that matches `if` expressions that have `false` in their\n+condition could look like this:\n+\n+```rust\n+if false {\n+    #[*]\n+}\n+```\n+\n+#### Problems\n+\n+Extending Rust syntax (which is quite complex by itself) with additional syntax\n+needed for specifying patterns (alternations, sequences, repetisions, named\n+submatches, ...) might become difficult to read and really hard to parse\n+properly.\n+\n+For example, a pattern that matches a binary operation that has `0` on both\n+sides might look like this:\n+\n+```\n+0 #[*:BinOpKind] 0\n+```\n+\n+Now consider this slightly more complex example:\n+\n+```\n+1 + 0 #[*:BinOpKind] 0\n+```\n+\n+The parser would need to know the precedence of `#[*:BinOpKind]` because it\n+affects the structure of the resulting AST. `1 + 0 + 0` is parsed as `(1 + 0) +\n+0` while `1 + 0 * 0` is parsed as `1 + (0 * 0)`. Since the pattern could be any\n+`BinOpKind`, the precedence cannot be known in advance.\n+\n+Another example of a problem would be named submatches. Take a look at this\n+pattern:\n+\n+```rust\n+fn test() {\n+    1 #foo\n+}\n+```\n+\n+Which node is `#foo` referring to? `int`, `ast::Lit`, `ast::Expr`, `ast::Stmt`?\n+Naming subpatterns in a rust-like syntax is difficult because a lot of AST nodes\n+don't have a syntactic element that can be used to put the name tag on. In these\n+situations, the only sensible option would be to assign the name tag to the\n+outermost node (`ast::Stmt` in the example above), because the information of\n+all child nodes can be retrieved through the outermost node. The problem with\n+this then would be that accessing inner nodes (like `ast::Lit`) would again\n+require manual pattern matching.\n+\n+In general, Rust syntax contains a lot of code structure implicitly. This\n+structure is reconstructed during parsing (e.g. binary operations are\n+reconstructed using operator precedence and left-to-right) and is one of the\n+reasons why parsing is a complex task. The advantage of this approach is that\n+writing code is simpler for users.\n+\n+When writing *syntax tree patterns*, each element of the hierarchy might have\n+alternatives, repetitions, etc.. Respecting that while still allowing\n+human-friendly syntax that contains structure implicitly seems to be really\n+complex, if not impossible.\n+\n+Developing such a syntax would also require to maintain a custom parser that is\n+at least as complex as the Rust parser itself. Additionally, future changes in\n+the Rust syntax might be incompatible with such a syntax.\n+\n+In summary, I think that developing such a syntax would introduce a lot of\n+complexity to solve a relatively minor problem.\n+\n+The issue of users not knowing about the *PatternTree* structure could be solved\n+by a tool that, given a rust program, generates a pattern that matches only this\n+program (similar to the clippy author lint).\n+\n+For some simple cases (like the first example above), it might be possible to\n+successfully mix Rust and pattern syntax. This space could be further explored\n+in a future extension.\n+\n+# Prior art\n+\n+The pattern syntax is heavily inspired by regular expressions (repetitions,\n+alternatives, sequences, ...).\n+\n+From what I've seen until now, other linters also implement lints that directly\n+work on syntax tree data structures, just like clippy does currently. I would\n+therefore consider the pattern syntax to be *new*, but please correct me if I'm\n+wrong.\n+\n+# Unresolved questions\n+\n+#### How to handle multiple matches?\n+\n+When matching a syntax tree node against a pattern, there are possibly multiple\n+ways in which the pattern can be matched. A simple example of this would be the\n+following pattern:\n+\n+```rust\n+pattern!{\n+    my_pattern: Expr =\n+        Array( _* Lit(_)+#literals)\n+}\n+```\n+\n+This pattern matches arrays that end with at least one literal. Now given the\n+array `[x, 1, 2]`, should `1` be matched as part of the `_*` or the `Lit(_)+`\n+part of the pattern? The difference is important because the named submatch\n+`#literals` would contain 1 or 2 elements depending how the pattern is matched.\n+In regular expressions, this problem is solved by matching \"greedy\" by default\n+and \"non-greedy\" optionally.\n+\n+I haven't looked much into this yet because I don't know how relevant it is for\n+most lints. The current implementation simply returns the first match it finds.\n+\n+# Future possibilities\n+\n+#### Implement rest of Rust Syntax\n+\n+The current project only implements a small part of the Rust syntax. In the\n+future, this should incrementally be extended to more syntax to allow\n+implementing more lints. Implementing more of the Rust syntax requires extending\n+the `PatternTree` and `IsMatch` implementations, but should be relatively\n+straight-forward.\n+\n+#### Early filtering\n+\n+As described in the *Drawbacks/Performance* section, allowing additional checks\n+during the pattern matching might be beneficial.\n+\n+The pattern below shows how this could look like:\n+\n+```rust\n+pattern!{\n+    pat_if_without_else: Expr =\n+        If(\n+            _,\n+            Block(\n+                Expr( If(_, _, ())#inner )\n+                | Semi( If(_, _, ())#inner )\n+            )#then,\n+            ()\n+        )\n+    where\n+        !in_macro(#then.span);\n+}\n+```\n+\n+The difference compared to the currently proposed two-stage filtering is that\n+using early filtering, the condition (`!in_macro(#then.span)` in this case)\n+would be evaluated as soon as the `Block(_)#then` was matched.\n+\n+Another idea in this area would be to introduce a syntax for backreferences.\n+They could be used to require that multiple parts of a pattern should match the\n+same value. For example, the `assign_op_pattern` lint that searches for `a = a\n+op b` and recommends changing it to `a op= b` requires that both occurrances of\n+`a` are the same. Using `=#...` as syntax for backreferences, the lint could be\n+implemented like this:\n+\n+```rust\n+pattern!{\n+    assign_op_pattern: Expr =\n+        Assign(_#target, Binary(_, =#target, _)\n+}\n+```\n+\n+#### Match descendant\n+\n+A lot of lints currently implement custom visitors that check whether any\n+subtree (which might not be a direct descendant) of the current node matches\n+some properties. This cannot be expressed with the proposed pattern syntax.\n+Extending the pattern syntax to allow patterns like \"a function that contains at\n+least two return statements\" could be a practical addition.\n+\n+#### Negation operator for alternatives\n+\n+For patterns like \"a literal that is not a boolean literal\" one currently needs\n+to list all alternatives except the boolean case. Introducing a negation\n+operator that allows to write `Lit(!Bool(_))` might be a good idea. This pattern\n+would be eqivalent to `Lit( Char(_) | Int(_) )` (given that currently only three\n+literal types are implemented).\n+\n+#### Functional composition\n+\n+Patterns currently don't have any concept of composition. This leads to\n+repetitions within patterns. For example, one of the collapsible-if patterns\n+currently has to be written like this:\n+\n+```rust\n+pattern!{\n+    pat_if_else: Expr =\n+        If(\n+            _,\n+            _,\n+            Block_(\n+                Block(\n+                    Expr((If(_, _, _?) | IfLet(_, _?))#else_) |\n+                    Semi((If(_, _, _?) | IfLet(_, _?))#else_)\n+                )#block_inner\n+            )#block\n+        ) |\n+        IfLet(\n+            _,\n+            Block_(\n+                Block(\n+                    Expr((If(_, _, _?) | IfLet(_, _?))#else_) |\n+                    Semi((If(_, _, _?) | IfLet(_, _?))#else_)\n+                )#block_inner\n+            )#block\n+        )\n+}\n+```\n+\n+If patterns supported defining functions of subpatterns, the code could be\n+simplified as follows:\n+\n+```rust\n+pattern!{\n+    fn expr_or_semi(expr: Expr) -> Stmt {\n+        Expr(expr) | Semi(expr)\n+    }\n+    fn if_or_if_let(then: Block, else: Opt<Expr>) -> Expr {\n+        If(_, then, else) | IfLet(then, else)\n+    }\n+    pat_if_else: Expr =\n+        if_or_if_let(\n+            _,\n+            Block_(\n+                Block(\n+                    expr_or_semi( if_or_if_let(_, _?)#else_ )\n+                )#block_inner\n+            )#block\n+        )\n+}\n+```\n+\n+Additionally, common patterns like `expr_or_semi` could be shared between\n+different lints.\n+\n+#### Clippy Pattern Author\n+\n+Another improvement could be to create a tool that, given some valid Rust\n+syntax, generates a pattern that matches this syntax exactly. This would make\n+starting to write a pattern easier. A user could take a look at the patterns\n+generated for a couple of Rust code examples and use that information to write a\n+pattern that matches all of them.\n+\n+This is similar to clippy's author lint.\n+\n+#### Supporting other syntaxes\n+\n+Most of the proposed system is language-agnostic. For example, the pattern\n+syntax could also be used to describe patterns for other programming languages.\n+\n+In order to support other languages' syntaxes, one would need to implement\n+another `PatternTree` that sufficiently describes the languages' AST and\n+implement `IsMatch` for this `PatternTree` and the languages' AST.\n+\n+One aspect of this is that it would even be possible to write lints that work on\n+the pattern syntax itself. For example, when writing the following pattern\n+\n+\n+```rust\n+pattern!{\n+    my_pattern: Expr =\n+        Array( Lit(Bool(false)) Lit(Bool(false)) )\n+}\n+```\n+\n+a lint that works on the pattern syntax's AST could suggest using this pattern\n+instead:\n+\n+```rust\n+pattern!{\n+    my_pattern: Expr =\n+        Array( Lit(Bool(false)){2} )\n+}\n+```\n+\n+In the future, clippy could use this system to also provide lints for custom\n+syntaxes like those found in macros."}, {"sha": "ec7f1dd0d846cbe8a0f87ad50c43e733ebfec59a", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -120,7 +120,7 @@ fn add_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n \n     let new_lint = if enable_msrv {\n         format!(\n-            \"store.register_{lint_pass}_pass(move |{ctor_arg}| Box::new({module_name}::{camel_name}::new(msrv)));\\n    \",\n+            \"store.register_{lint_pass}_pass(move |{ctor_arg}| Box::new({module_name}::{camel_name}::new(msrv())));\\n    \",\n             lint_pass = lint.pass,\n             ctor_arg = if lint.pass == \"late\" { \"_\" } else { \"\" },\n             module_name = lint.name,\n@@ -238,10 +238,9 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n     result.push_str(&if enable_msrv {\n         formatdoc!(\n             r#\"\n-            use clippy_utils::msrvs;\n+            use clippy_utils::msrvs::{{self, Msrv}};\n             {pass_import}\n             use rustc_lint::{{{context_import}, {pass_type}, LintContext}};\n-            use rustc_semver::RustcVersion;\n             use rustc_session::{{declare_tool_lint, impl_lint_pass}};\n \n         \"#\n@@ -263,12 +262,12 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         formatdoc!(\n             r#\"\n             pub struct {name_camel} {{\n-                msrv: Option<RustcVersion>,\n+                msrv: Msrv,\n             }}\n \n             impl {name_camel} {{\n                 #[must_use]\n-                pub fn new(msrv: Option<RustcVersion>) -> Self {{\n+                pub fn new(msrv: Msrv) -> Self {{\n                     Self {{ msrv }}\n                 }}\n             }}\n@@ -357,15 +356,14 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n         let _ = writedoc!(\n             lint_file_contents,\n             r#\"\n-                use clippy_utils::{{meets_msrv, msrvs}};\n+                use clippy_utils::msrvs::{{self, Msrv}};\n                 use rustc_lint::{{{context_import}, LintContext}};\n-                use rustc_semver::RustcVersion;\n \n                 use super::{name_upper};\n \n                 // TODO: Adjust the parameters as necessary\n-                pub(super) fn check(cx: &{context_import}, msrv: Option<RustcVersion>) {{\n-                    if !meets_msrv(msrv, todo!(\"Add a new entry in `clippy_utils/src/msrvs`\")) {{\n+                pub(super) fn check(cx: &{context_import}, msrv: &Msrv) {{\n+                    if !msrv.meets(todo!(\"Add a new entry in `clippy_utils/src/msrvs`\")) {{\n                         return;\n                     }}\n                     todo!();"}, {"sha": "dcadd012a44d35a084f3f5924814904fcfa44ff2", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -19,7 +19,7 @@ quine-mc_cluskey = \"0.2\"\n regex-syntax = \"0.6\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = { version = \"1.0\", optional = true }\n-tempfile = { version = \"3.2\", optional = true }\n+tempfile = { version = \"3.3.0\", optional = true }\n toml = \"0.5\"\n unicode-normalization = \"0.1\"\n unicode-script = { version = \"0.5\", default-features = false }"}, {"sha": "52beaf504a4e0deb6ff0f17e5bf387d463e05d9f", "filename": "clippy_lints/src/almost_complete_letter_range.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,11 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{trim_span, walk_span_to_context};\n-use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{Expr, ExprKind, LitKind, Pat, PatKind, RangeEnd, RangeLimits};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n@@ -33,10 +32,10 @@ declare_clippy_lint! {\n impl_lint_pass!(AlmostCompleteLetterRange => [ALMOST_COMPLETE_LETTER_RANGE]);\n \n pub struct AlmostCompleteLetterRange {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n impl AlmostCompleteLetterRange {\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -46,7 +45,7 @@ impl EarlyLintPass for AlmostCompleteLetterRange {\n             let ctxt = e.span.ctxt();\n             let sugg = if let Some(start) = walk_span_to_context(start.span, ctxt)\n                 && let Some(end) = walk_span_to_context(end.span, ctxt)\n-                && meets_msrv(self.msrv, msrvs::RANGE_INCLUSIVE)\n+                && self.msrv.meets(msrvs::RANGE_INCLUSIVE)\n             {\n                 Some((trim_span(cx.sess().source_map(), start.between(end)), \"..=\"))\n             } else {\n@@ -60,7 +59,7 @@ impl EarlyLintPass for AlmostCompleteLetterRange {\n         if let PatKind::Range(Some(start), Some(end), kind) = &p.kind\n             && matches!(kind.node, RangeEnd::Excluded)\n         {\n-            let sugg = if meets_msrv(self.msrv, msrvs::RANGE_INCLUSIVE) {\n+            let sugg = if self.msrv.meets(msrvs::RANGE_INCLUSIVE) {\n                 \"..=\"\n             } else {\n                 \"...\""}, {"sha": "ccf82f132f4e42dd1af0b6a533c678dd757e2337", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::{meets_msrv, msrvs};\n+use clippy_utils::msrvs::{self, Msrv};\n use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -63,12 +63,12 @@ const KNOWN_CONSTS: [(f64, &str, usize, Option<RustcVersion>); 19] = [\n ];\n \n pub struct ApproxConstant {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ApproxConstant {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n \n@@ -87,7 +87,7 @@ impl ApproxConstant {\n         let s = s.as_str();\n         if s.parse::<f64>().is_ok() {\n             for &(constant, name, min_digits, msrv) in &KNOWN_CONSTS {\n-                if is_approx_const(constant, s, min_digits) && msrv.map_or(true, |msrv| meets_msrv(self.msrv, msrv)) {\n+                if is_approx_const(constant, s, min_digits) && msrv.map_or(true, |msrv| self.msrv.meets(msrv)) {\n                     span_lint_and_help(\n                         cx,\n                         APPROX_CONSTANT,"}, {"sha": "0710ac0bb0a72468bb8144351560972dcf53a55a", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -2,9 +2,8 @@\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::macros::{is_panic, macro_backtrace};\n-use clippy_utils::msrvs;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{first_line_of_span, is_present_in_source, snippet_opt, without_block_comments};\n-use clippy_utils::{extract_msrv_attr, meets_msrv};\n use if_chain::if_chain;\n use rustc_ast::{AttrKind, AttrStyle, Attribute, LitKind, MetaItemKind, MetaItemLit, NestedMetaItem};\n use rustc_errors::Applicability;\n@@ -14,7 +13,6 @@ use rustc_hir::{\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, Level, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -599,7 +597,7 @@ fn is_word(nmi: &NestedMetaItem, expected: Symbol) -> bool {\n }\n \n pub struct EarlyAttributes {\n-    pub msrv: Option<RustcVersion>,\n+    pub msrv: Msrv,\n }\n \n impl_lint_pass!(EarlyAttributes => [\n@@ -614,7 +612,7 @@ impl EarlyLintPass for EarlyAttributes {\n     }\n \n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &Attribute) {\n-        check_deprecated_cfg_attr(cx, attr, self.msrv);\n+        check_deprecated_cfg_attr(cx, attr, &self.msrv);\n         check_mismatched_target_os(cx, attr);\n     }\n \n@@ -654,9 +652,9 @@ fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::It\n     }\n }\n \n-fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute, msrv: Option<RustcVersion>) {\n+fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute, msrv: &Msrv) {\n     if_chain! {\n-        if meets_msrv(msrv, msrvs::TOOL_ATTRIBUTES);\n+        if msrv.meets(msrvs::TOOL_ATTRIBUTES);\n         // check cfg_attr\n         if attr.has_name(sym::cfg_attr);\n         if let Some(items) = attr.meta_item_list();"}, {"sha": "569bf27c3e716e13e3802e7e4cd6fe8bab627135", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -85,8 +85,7 @@ impl<'tcx> LateLintPass<'tcx> for BlocksInIfConditions {\n                             );\n                         }\n                     } else {\n-                        let span =\n-                            block.expr.as_ref().map_or_else(|| block.stmts[0].span, |e| e.span);\n+                        let span = block.expr.as_ref().map_or_else(|| block.stmts[0].span, |e| e.span);\n                         if span.from_expansion() || expr.span.from_expansion() {\n                             return;\n                         }"}, {"sha": "442262983337686fab42a2e0482d41cba26cdf8f", "filename": "clippy_lints/src/casts/cast_abs_to_unsigned.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,11 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n-use rustc_semver::RustcVersion;\n \n use super::CAST_ABS_TO_UNSIGNED;\n \n@@ -15,9 +14,9 @@ pub(super) fn check(\n     cast_expr: &Expr<'_>,\n     cast_from: Ty<'_>,\n     cast_to: Ty<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n-    if meets_msrv(msrv, msrvs::UNSIGNED_ABS)\n+    if msrv.meets(msrvs::UNSIGNED_ABS)\n         && let ty::Int(from) = cast_from.kind()\n         && let ty::Uint(to) = cast_to.kind()\n         && let ExprKind::MethodCall(method_path, receiver, ..) = cast_expr.kind"}, {"sha": "cf07e050ccce99e6966ae2d9b2ec55a32df8067e", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_constant;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_isize_or_usize;\n-use clippy_utils::{in_constant, meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n-use rustc_semver::RustcVersion;\n \n use super::{utils, CAST_LOSSLESS};\n \n@@ -16,7 +16,7 @@ pub(super) fn check(\n     cast_op: &Expr<'_>,\n     cast_from: Ty<'_>,\n     cast_to: Ty<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n     if !should_lint(cx, expr, cast_from, cast_to, msrv) {\n         return;\n@@ -57,13 +57,7 @@ pub(super) fn check(\n     );\n }\n \n-fn should_lint(\n-    cx: &LateContext<'_>,\n-    expr: &Expr<'_>,\n-    cast_from: Ty<'_>,\n-    cast_to: Ty<'_>,\n-    msrv: Option<RustcVersion>,\n-) -> bool {\n+fn should_lint(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>, msrv: &Msrv) -> bool {\n     // Do not suggest using From in consts/statics until it is valid to do so (see #2267).\n     if in_constant(cx, expr.hir_id) {\n         return false;\n@@ -89,7 +83,7 @@ fn should_lint(\n             };\n             !is_isize_or_usize(cast_from) && from_nbits < to_nbits\n         },\n-        (false, true) if matches!(cast_from.kind(), ty::Bool) && meets_msrv(msrv, msrvs::FROM_BOOL) => true,\n+        (false, true) if matches!(cast_from.kind(), ty::Bool) && msrv.meets(msrvs::FROM_BOOL) => true,\n         (_, _) => {\n             matches!(cast_from.kind(), ty::Float(FloatTy::F32)) && matches!(cast_to.kind(), ty::Float(FloatTy::F64))\n         },"}, {"sha": "a6376484914ba11dad3b13e0ef9fe649a9f8493c", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -118,12 +118,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n             };\n             let to_nbits = utils::int_ty_to_nbits(cast_to, cx.tcx);\n \n-            let cast_from_ptr_size = def.repr().int.map_or(true, |ty| {\n-                matches!(\n-                    ty,\n-                    IntegerType::Pointer(_),\n-                )\n-            });\n+            let cast_from_ptr_size = def.repr().int.map_or(true, |ty| matches!(ty, IntegerType::Pointer(_),));\n             let suffix = match (cast_from_ptr_size, is_isize_or_usize(cast_to)) {\n                 (false, false) if from_nbits > to_nbits => \"\",\n                 (true, false) if from_nbits > to_nbits => \"\","}, {"sha": "e862f13e69fc7059011014ad82f3310e8666ea73", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,16 +1,16 @@\n-use clippy_utils::{diagnostics::span_lint_and_then, meets_msrv, msrvs, source};\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::{diagnostics::span_lint_and_then, source};\n use if_chain::if_chain;\n use rustc_ast::Mutability;\n use rustc_hir::{Expr, ExprKind, Node};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, layout::LayoutOf, Ty, TypeAndMut};\n-use rustc_semver::RustcVersion;\n \n use super::CAST_SLICE_DIFFERENT_SIZES;\n \n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: Option<RustcVersion>) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: &Msrv) {\n     // suggestion is invalid if `ptr::slice_from_raw_parts` does not exist\n-    if !meets_msrv(msrv, msrvs::PTR_SLICE_RAW_PARTS) {\n+    if !msrv.meets(msrvs::PTR_SLICE_RAW_PARTS) {\n         return;\n     }\n "}, {"sha": "627b795d6edd8f5ea04603bfead49042878ff7c5", "filename": "clippy_lints/src/casts/cast_slice_from_raw_parts.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_from_raw_parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_from_raw_parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_from_raw_parts.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{match_def_path, meets_msrv, msrvs, paths};\n+use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{def_id::DefId, Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n-use rustc_semver::RustcVersion;\n \n use super::CAST_SLICE_FROM_RAW_PARTS;\n \n@@ -25,15 +25,9 @@ fn raw_parts_kind(cx: &LateContext<'_>, did: DefId) -> Option<RawPartsKind> {\n     }\n }\n \n-pub(super) fn check(\n-    cx: &LateContext<'_>,\n-    expr: &Expr<'_>,\n-    cast_expr: &Expr<'_>,\n-    cast_to: Ty<'_>,\n-    msrv: Option<RustcVersion>,\n-) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_to: Ty<'_>, msrv: &Msrv) {\n     if_chain! {\n-        if meets_msrv(msrv, msrvs::PTR_SLICE_RAW_PARTS);\n+        if msrv.meets(msrvs::PTR_SLICE_RAW_PARTS);\n         if let ty::RawPtr(ptrty) = cast_to.kind();\n         if let ty::Slice(_) = ptrty.ty.kind();\n         if let ExprKind::Call(fun, [ptr_arg, len_arg]) = cast_expr.peel_blocks().kind;"}, {"sha": "c6d505c4a181fc2e3b52c2be3b1d713f7123eec2", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -21,11 +21,11 @@ mod ptr_as_ptr;\n mod unnecessary_cast;\n mod utils;\n \n-use clippy_utils::{is_hir_ty_cfg_dependant, meets_msrv, msrvs};\n+use clippy_utils::is_hir_ty_cfg_dependant;\n+use clippy_utils::msrvs::{self, Msrv};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -648,12 +648,12 @@ declare_clippy_lint! {\n }\n \n pub struct Casts {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl Casts {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -686,7 +686,7 @@ impl_lint_pass!(Casts => [\n impl<'tcx> LateLintPass<'tcx> for Casts {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if !in_external_macro(cx.sess(), expr.span) {\n-            ptr_as_ptr::check(cx, expr, self.msrv);\n+            ptr_as_ptr::check(cx, expr, &self.msrv);\n         }\n \n         if expr.span.from_expansion() {\n@@ -705,7 +705,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             if unnecessary_cast::check(cx, expr, cast_expr, cast_from, cast_to) {\n                 return;\n             }\n-            cast_slice_from_raw_parts::check(cx, expr, cast_expr, cast_to, self.msrv);\n+            cast_slice_from_raw_parts::check(cx, expr, cast_expr, cast_to, &self.msrv);\n             as_ptr_cast_mut::check(cx, expr, cast_expr, cast_to);\n             fn_to_numeric_cast_any::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);\n@@ -717,25 +717,25 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                     cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n                     cast_precision_loss::check(cx, expr, cast_from, cast_to);\n                     cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n-                    cast_abs_to_unsigned::check(cx, expr, cast_expr, cast_from, cast_to, self.msrv);\n+                    cast_abs_to_unsigned::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n                     cast_nan_to_int::check(cx, expr, cast_expr, cast_from, cast_to);\n                 }\n-                cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, self.msrv);\n+                cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n                 cast_enum_constructor::check(cx, expr, cast_expr, cast_from);\n             }\n \n             as_underscore::check(cx, expr, cast_to_hir);\n \n-            if meets_msrv(self.msrv, msrvs::BORROW_AS_PTR) {\n+            if self.msrv.meets(msrvs::BORROW_AS_PTR) {\n                 borrow_as_ptr::check(cx, expr, cast_expr, cast_to_hir);\n             }\n         }\n \n         cast_ref_to_mut::check(cx, expr);\n         cast_ptr_alignment::check(cx, expr);\n         char_lit_as_u8::check(cx, expr);\n-        ptr_as_ptr::check(cx, expr, self.msrv);\n-        cast_slice_different_sizes::check(cx, expr, self.msrv);\n+        ptr_as_ptr::check(cx, expr, &self.msrv);\n+        cast_slice_different_sizes::check(cx, expr, &self.msrv);\n     }\n \n     extract_msrv_attr!(LateContext);"}, {"sha": "15ffb00da88bacd80d7bb5016cde42db203ba221", "filename": "clippy_lints/src/casts/ptr_as_ptr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,19 +1,18 @@\n use std::borrow::Cow;\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, TypeAndMut};\n-use rustc_semver::RustcVersion;\n \n use super::PTR_AS_PTR;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: Option<RustcVersion>) {\n-    if !meets_msrv(msrv, msrvs::POINTER_CAST) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: &Msrv) {\n+    if !msrv.meets(msrvs::POINTER_CAST) {\n         return;\n     }\n "}, {"sha": "7e23318076cf2e8b9aa6ec5247b39d2268c3ca38", "filename": "clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::get_parent_expr;\n use clippy_utils::numeric_literal::NumericLiteral;\n use clippy_utils::source::snippet_opt;\n+use clippy_utils::{get_parent_expr, path_to_local};\n use if_chain::if_chain;\n use rustc_ast::{LitFloatType, LitIntType, LitKind};\n use rustc_errors::Applicability;\n@@ -75,13 +75,26 @@ pub(super) fn check<'tcx>(\n     }\n \n     if cast_from.kind() == cast_to.kind() && !in_external_macro(cx.sess(), expr.span) {\n+        if let Some(id) = path_to_local(cast_expr)\n+            && let Some(span) = cx.tcx.hir().opt_span(id)\n+            && span.ctxt() != cast_expr.span.ctxt()\n+        {\n+            // Binding context is different than the identifiers context.\n+            // Weird macro wizardry could be involved here.\n+            return false;\n+        }\n+\n         span_lint_and_sugg(\n             cx,\n             UNNECESSARY_CAST,\n             expr.span,\n             &format!(\"casting to the same type is unnecessary (`{cast_from}` -> `{cast_to}`)\"),\n             \"try\",\n-            cast_str,\n+            if get_parent_expr(cx, expr).map_or(false, |e| matches!(e.kind, ExprKind::AddrOf(..))) {\n+                format!(\"{{ {cast_str} }}\")\n+            } else {\n+                cast_str\n+            },\n             Applicability::MachineApplicable,\n         );\n         return true;"}, {"sha": "9102a89e37726ab035c349a6768c25bddd0cb796", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,14 +1,14 @@\n //! lint on manually implemented checked conversions that could be transformed into `try_from`\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{in_constant, is_integer_literal, meets_msrv, msrvs, SpanlessEq};\n+use clippy_utils::{in_constant, is_integer_literal, SpanlessEq};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOp, BinOpKind, Expr, ExprKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -37,12 +37,12 @@ declare_clippy_lint! {\n }\n \n pub struct CheckedConversions {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl CheckedConversions {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -51,7 +51,7 @@ impl_lint_pass!(CheckedConversions => [CHECKED_CONVERSIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for CheckedConversions {\n     fn check_expr(&mut self, cx: &LateContext<'_>, item: &Expr<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::TRY_FROM) {\n+        if !self.msrv.meets(msrvs::TRY_FROM) {\n             return;\n         }\n "}, {"sha": "b38e09dc09f46e5d2053f8080b3e87e2f17844e4", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -160,11 +160,13 @@ fn check_collapsible_no_if_let(cx: &EarlyContext<'_>, expr: &ast::Expr, check: &\n         if let ast::ExprKind::If(ref check_inner, ref content, None) = inner.kind;\n         // Prevent triggering on `if c { if let a = b { .. } }`.\n         if !matches!(check_inner.kind, ast::ExprKind::Let(..));\n-        if expr.span.ctxt() == inner.span.ctxt();\n+        let ctxt = expr.span.ctxt();\n+        if inner.span.ctxt() == ctxt;\n         then {\n             span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this `if` statement can be collapsed\", |diag| {\n-                let lhs = Sugg::ast(cx, check, \"..\");\n-                let rhs = Sugg::ast(cx, check_inner, \"..\");\n+                let mut app = Applicability::MachineApplicable;\n+                let lhs = Sugg::ast(cx, check, \"..\", ctxt, &mut app);\n+                let rhs = Sugg::ast(cx, check_inner, \"..\", ctxt, &mut app);\n                 diag.span_suggestion(\n                     expr.span,\n                     \"collapse nested if block\",\n@@ -173,7 +175,7 @@ fn check_collapsible_no_if_let(cx: &EarlyContext<'_>, expr: &ast::Expr, check: &\n                         lhs.and(&rhs),\n                         snippet_block(cx, content.span, \"..\", Some(expr.span)),\n                     ),\n-                    Applicability::MachineApplicable, // snippet\n+                    app, // snippet\n                 );\n             });\n         }"}, {"sha": "e4d76f07d6b482b13fa7d5fbaf9cb8b6ce9923fd", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -177,6 +177,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::from_raw_with_void_ptr::FROM_RAW_WITH_VOID_PTR_INFO,\n     crate::from_str_radix_10::FROM_STR_RADIX_10_INFO,\n     crate::functions::DOUBLE_MUST_USE_INFO,\n+    crate::functions::MISNAMED_GETTERS_INFO,\n     crate::functions::MUST_USE_CANDIDATE_INFO,\n     crate::functions::MUST_USE_UNIT_INFO,\n     crate::functions::NOT_UNSAFE_PTR_ARG_DEREF_INFO,\n@@ -583,6 +584,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::types::TYPE_COMPLEXITY_INFO,\n     crate::types::VEC_BOX_INFO,\n     crate::undocumented_unsafe_blocks::UNDOCUMENTED_UNSAFE_BLOCKS_INFO,\n+    crate::undocumented_unsafe_blocks::UNNECESSARY_SAFETY_COMMENT_INFO,\n     crate::unicode::INVISIBLE_CHARACTERS_INFO,\n     crate::unicode::NON_ASCII_LITERAL_INFO,\n     crate::unicode::UNICODE_NOT_NFC_INFO,"}, {"sha": "38329659e02b76108ed46d071dd49f38c2a04650", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,12 +1,13 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n use clippy_utils::mir::{enclosing_mir, expr_local, local_assignments, used_exactly_once, PossibleBorrowerMap};\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::sugg::has_enclosing_paren;\n use clippy_utils::ty::{expr_sig, is_copy, peel_mid_ty_refs, ty_sig, variant_of_res};\n use clippy_utils::{\n-    fn_def_id, get_parent_expr, get_parent_expr_for_hir, is_lint_allowed, meets_msrv, msrvs, path_to_local,\n-    walk_to_expr_usage,\n+    fn_def_id, get_parent_expr, get_parent_expr_for_hir, is_lint_allowed, path_to_local, walk_to_expr_usage,\n };\n+\n use rustc_ast::util::parser::{PREC_POSTFIX, PREC_PREFIX};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::graph::iterate::{CycleDetector, TriColorDepthFirstSearch};\n@@ -28,7 +29,6 @@ use rustc_middle::ty::{\n     self, Binder, BoundVariableKind, Clause, EarlyBinder, FnSig, GenericArgKind, List, ParamTy, PredicateKind,\n     ProjectionPredicate, Ty, TyCtxt, TypeVisitable, TypeckResults,\n };\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt as _;\n@@ -181,12 +181,12 @@ pub struct Dereferencing<'tcx> {\n     possible_borrowers: Vec<(LocalDefId, PossibleBorrowerMap<'tcx, 'tcx>)>,\n \n     // `IntoIterator` for arrays requires Rust 1.53.\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl<'tcx> Dereferencing<'tcx> {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self {\n             msrv,\n             ..Dereferencing::default()\n@@ -286,26 +286,27 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing<'tcx> {\n         match (self.state.take(), kind) {\n             (None, kind) => {\n                 let expr_ty = typeck.expr_ty(expr);\n-                let (position, adjustments) = walk_parents(cx, &mut self.possible_borrowers, expr, self.msrv);\n+                let (position, adjustments) = walk_parents(cx, &mut self.possible_borrowers, expr, &self.msrv);\n                 match kind {\n                     RefOp::Deref => {\n+                        let sub_ty = typeck.expr_ty(sub_expr);\n                         if let Position::FieldAccess {\n                             name,\n                             of_union: false,\n                         } = position\n-                            && !ty_contains_field(typeck.expr_ty(sub_expr), name)\n+                            && !ty_contains_field(sub_ty, name)\n                         {\n                             self.state = Some((\n                                 State::ExplicitDerefField { name },\n                                 StateData { span: expr.span, hir_id: expr.hir_id, position },\n                             ));\n-                        } else if position.is_deref_stable() {\n+                        } else if position.is_deref_stable() && sub_ty.is_ref() {\n                             self.state = Some((\n                                 State::ExplicitDeref { mutability: None },\n                                 StateData { span: expr.span, hir_id: expr.hir_id, position },\n                             ));\n                         }\n-                    }\n+                    },\n                     RefOp::Method(target_mut)\n                         if !is_lint_allowed(cx, EXPLICIT_DEREF_METHODS, expr.hir_id)\n                             && position.lint_explicit_deref() =>\n@@ -320,7 +321,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing<'tcx> {\n                             StateData {\n                                 span: expr.span,\n                                 hir_id: expr.hir_id,\n-                                position\n+                                position,\n                             },\n                         ));\n                     },\n@@ -394,7 +395,11 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing<'tcx> {\n                                     msg,\n                                     snip_expr,\n                                 }),\n-                                StateData { span: expr.span, hir_id: expr.hir_id, position },\n+                                StateData {\n+                                    span: expr.span,\n+                                    hir_id: expr.hir_id,\n+                                    position,\n+                                },\n                             ));\n                         } else if position.is_deref_stable()\n                             // Auto-deref doesn't combine with other adjustments\n@@ -406,7 +411,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing<'tcx> {\n                                 StateData {\n                                     span: expr.span,\n                                     hir_id: expr.hir_id,\n-                                    position\n+                                    position,\n                                 },\n                             ));\n                         }\n@@ -698,7 +703,7 @@ fn walk_parents<'tcx>(\n     cx: &LateContext<'tcx>,\n     possible_borrowers: &mut Vec<(LocalDefId, PossibleBorrowerMap<'tcx, 'tcx>)>,\n     e: &'tcx Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) -> (Position, &'tcx [Adjustment<'tcx>]) {\n     let mut adjustments = [].as_slice();\n     let mut precedence = 0i8;\n@@ -862,7 +867,11 @@ fn walk_parents<'tcx>(\n                             } && impl_ty.is_ref()\n                             && let infcx = cx.tcx.infer_ctxt().build()\n                             && infcx\n-                                .type_implements_trait(trait_id, [impl_ty.into()].into_iter().chain(subs.iter().copied()), cx.param_env)\n+                                .type_implements_trait(\n+                                    trait_id,\n+                                    [impl_ty.into()].into_iter().chain(subs.iter().copied()),\n+                                    cx.param_env,\n+                                )\n                                 .must_apply_modulo_regions()\n                         {\n                             return Some(Position::MethodReceiverRefImpl)\n@@ -1078,7 +1087,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n     param_ty: ParamTy,\n     mut expr: &Expr<'tcx>,\n     precedence: i8,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) -> Position {\n     let destruct_trait_def_id = cx.tcx.lang_items().destruct_trait();\n     let sized_trait_def_id = cx.tcx.lang_items().sized_trait();\n@@ -1178,7 +1187,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n                 && let ty::Param(param_ty) = trait_predicate.self_ty().kind()\n                 && let GenericArgKind::Type(ty) = substs_with_referent_ty[param_ty.index as usize].unpack()\n                 && ty.is_array()\n-                && !meets_msrv(msrv, msrvs::ARRAY_INTO_ITERATOR)\n+                && !msrv.meets(msrvs::ARRAY_INTO_ITERATOR)\n             {\n                 return false;\n             }"}, {"sha": "9e596ca8157eb93b58fc827d6c4d3eda261a116c", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -14,8 +14,8 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::{\n-    self, Binder, BoundConstness, Clause, GenericParamDefKind, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate, TraitRef,\n-    Ty, TyCtxt,\n+    self, Binder, BoundConstness, Clause, GenericParamDefKind, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate,\n+    TraitRef, Ty, TyCtxt,\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;"}, {"sha": "cdc23a4d22739ef79ebc7993a88ea902de69e617", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -253,7 +253,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.66.0\"]\n     pub UNNECESSARY_SAFETY_DOC,\n-    style,\n+    restriction,\n     \"`pub fn` or `pub trait` with `# Safety` docs\"\n }\n "}, {"sha": "3543910c3b55b470cb58db75a3e8c94cad7c0e5f", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::{Closure, Expr, ExprKind, Param, PatKind, Unsafety};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n-use rustc_middle::ty::{self, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, EarlyBinder, SubstsRef, Ty, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n@@ -125,7 +125,12 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n                     if let Some(mut snippet) = snippet_opt(cx, callee.span) {\n                         if let Some(fn_mut_id) = cx.tcx.lang_items().fn_mut_trait()\n                             && let args = cx.tcx.erase_late_bound_regions(substs.as_closure().sig()).inputs()\n-                            && implements_trait(cx, callee_ty.peel_refs(), fn_mut_id, &args.iter().copied().map(Into::into).collect::<Vec<_>>())\n+                            && implements_trait(\n+                                   cx,\n+                                   callee_ty.peel_refs(),\n+                                   fn_mut_id,\n+                                   &args.iter().copied().map(Into::into).collect::<Vec<_>>(),\n+                               )\n                             && path_to_local(callee).map_or(false, |l| local_used_after_expr(cx, l, expr))\n                         {\n                                 // Mutable closure is used after current expr; we cannot consume it.\n@@ -152,7 +157,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             if check_sig(cx, closure_ty, call_ty);\n             then {\n                 span_lint_and_then(cx, REDUNDANT_CLOSURE_FOR_METHOD_CALLS, expr.span, \"redundant closure\", |diag| {\n-                    let name = get_ufcs_type_name(cx, method_def_id);\n+                    let name = get_ufcs_type_name(cx, method_def_id, substs);\n                     diag.span_suggestion(\n                         expr.span,\n                         \"replace the closure with the method itself\",\n@@ -222,7 +227,7 @@ fn check_sig<'tcx>(cx: &LateContext<'tcx>, closure_ty: Ty<'tcx>, call_ty: Ty<'tc\n     cx.tcx.erase_late_bound_regions(closure_sig) == cx.tcx.erase_late_bound_regions(call_sig)\n }\n \n-fn get_ufcs_type_name(cx: &LateContext<'_>, method_def_id: DefId) -> String {\n+fn get_ufcs_type_name<'tcx>(cx: &LateContext<'tcx>, method_def_id: DefId, substs: SubstsRef<'tcx>) -> String {\n     let assoc_item = cx.tcx.associated_item(method_def_id);\n     let def_id = assoc_item.container_id(cx.tcx);\n     match assoc_item.container {\n@@ -231,6 +236,15 @@ fn get_ufcs_type_name(cx: &LateContext<'_>, method_def_id: DefId) -> String {\n             let ty = cx.tcx.type_of(def_id);\n             match ty.kind() {\n                 ty::Adt(adt, _) => cx.tcx.def_path_str(adt.did()),\n+                ty::Array(..)\n+                | ty::Dynamic(..)\n+                | ty::Never\n+                | ty::RawPtr(_)\n+                | ty::Ref(..)\n+                | ty::Slice(_)\n+                | ty::Tuple(_) => {\n+                    format!(\"<{}>\", EarlyBinder(ty).subst(cx.tcx, substs))\n+                },\n                 _ => ty.to_string(),\n             }\n         },"}, {"sha": "9c8b0d076dfd78ff353e09f68c6c437bf2d2eadb", "filename": "clippy_lints/src/exit.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -7,21 +7,34 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// `exit()`  terminates the program and doesn't provide a\n-    /// stack trace.\n+    /// Detects calls to the `exit()` function which terminates the program.\n     ///\n     /// ### Why is this bad?\n-    /// Ideally a program is terminated by finishing\n+    /// Exit terminates the program at the location it is called. For unrecoverable\n+    /// errors `panics` should be used to provide a stacktrace and potentualy other\n+    /// information. A normal termination or one with an error code should happen in\n     /// the main function.\n     ///\n     /// ### Example\n-    /// ```ignore\n+    /// ```\n     /// std::process::exit(0)\n     /// ```\n+    ///\n+    /// Use instead:\n+    ///\n+    /// ```ignore\n+    /// // To provide a stacktrace and additional information\n+    /// panic!(\"message\");\n+    ///\n+    /// // or a main method with a return\n+    /// fn main() -> Result<(), i32> {\n+    ///     Ok(())\n+    /// }\n+    /// ```\n     #[clippy::version = \"1.41.0\"]\n     pub EXIT,\n     restriction,\n-    \"`std::process::exit` is called, terminating the program\"\n+    \"detects `std::process::exit` calls\"\n }\n \n declare_lint_pass!(Exit => [EXIT]);"}, {"sha": "f0995a81329d93f30db25ccdf800ae8467c1c787", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 66, "deletions": 34, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,19 +1,22 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::macros::FormatParamKind::{Implicit, Named, Numbered, Starred};\n+use clippy_utils::is_diag_trait_item;\n+use clippy_utils::macros::FormatParamKind::{Implicit, Named, NamedInline, Numbered, Starred};\n use clippy_utils::macros::{\n     is_format_macro, is_panic, root_macro_call, Count, FormatArg, FormatArgsExpn, FormatParam, FormatParamUsage,\n };\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n-use clippy_utils::{is_diag_trait_item, meets_msrv, msrvs};\n use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc_errors::Applicability;\n+use rustc_errors::{\n+    Applicability,\n+    SuggestionStyle::{CompletelyHidden, ShowCode},\n+};\n use rustc_hir::{Expr, ExprKind, HirId, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_middle::ty::Ty;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::DefId;\n use rustc_span::edition::Edition::Edition2021;\n@@ -103,19 +106,25 @@ declare_clippy_lint! {\n     /// format!(\"{var:.prec$}\");\n     /// ```\n     ///\n-    /// ### Known Problems\n-    ///\n-    /// There may be a false positive if the format string is expanded from certain proc macros:\n-    ///\n-    /// ```ignore\n-    /// println!(indoc!(\"{}\"), var);\n+    /// If allow-mixed-uninlined-format-args is set to false in clippy.toml,\n+    /// the following code will also trigger the lint:\n+    /// ```rust\n+    /// # let var = 42;\n+    /// format!(\"{} {}\", var, 1+2);\n     /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let var = 42;\n+    /// format!(\"{var} {}\", 1+2);\n+    /// ```\n+    ///\n+    /// ### Known Problems\n     ///\n     /// If a format string contains a numbered argument that cannot be inlined\n     /// nothing will be suggested, e.g. `println!(\"{0}={1}\", var, 1+2)`.\n     #[clippy::version = \"1.65.0\"]\n     pub UNINLINED_FORMAT_ARGS,\n-    pedantic,\n+    style,\n     \"using non-inlined variables in `format!` calls\"\n }\n \n@@ -158,13 +167,17 @@ impl_lint_pass!(FormatArgs => [\n ]);\n \n pub struct FormatArgs {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n+    ignore_mixed: bool,\n }\n \n impl FormatArgs {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n-        Self { msrv }\n+    pub fn new(msrv: Msrv, allow_mixed_uninlined_format_args: bool) -> Self {\n+        Self {\n+            msrv,\n+            ignore_mixed: allow_mixed_uninlined_format_args,\n+        }\n     }\n }\n \n@@ -188,8 +201,8 @@ impl<'tcx> LateLintPass<'tcx> for FormatArgs {\n                 check_format_in_format_args(cx, outermost_expn_data.call_site, name, arg.param.value);\n                 check_to_string_in_format_args(cx, name, arg.param.value);\n             }\n-            if meets_msrv(self.msrv, msrvs::FORMAT_ARGS_CAPTURE) {\n-                check_uninlined_args(cx, &format_args, outermost_expn_data.call_site, macro_def_id);\n+            if self.msrv.meets(msrvs::FORMAT_ARGS_CAPTURE) {\n+                check_uninlined_args(cx, &format_args, outermost_expn_data.call_site, macro_def_id, self.ignore_mixed);\n             }\n         }\n     }\n@@ -267,7 +280,13 @@ fn check_unused_format_specifier(cx: &LateContext<'_>, arg: &FormatArg<'_>) {\n     }\n }\n \n-fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_site: Span, def_id: DefId) {\n+fn check_uninlined_args(\n+    cx: &LateContext<'_>,\n+    args: &FormatArgsExpn<'_>,\n+    call_site: Span,\n+    def_id: DefId,\n+    ignore_mixed: bool,\n+) {\n     if args.format_string.span.from_expansion() {\n         return;\n     }\n@@ -282,27 +301,36 @@ fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_si\n     // we cannot remove any other arguments in the format string,\n     // because the index numbers might be wrong after inlining.\n     // Example of an un-inlinable format:  print!(\"{}{1}\", foo, 2)\n-    if !args.params().all(|p| check_one_arg(args, &p, &mut fixes)) || fixes.is_empty() {\n+    if !args.params().all(|p| check_one_arg(args, &p, &mut fixes, ignore_mixed)) || fixes.is_empty() {\n         return;\n     }\n \n-    // Temporarily ignore multiline spans: https://github.com/rust-lang/rust/pull/102729#discussion_r988704308\n-    if fixes.iter().any(|(span, _)| cx.sess().source_map().is_multiline(*span)) {\n-        return;\n-    }\n+    // multiline span display suggestion is sometimes broken: https://github.com/rust-lang/rust/pull/102729#discussion_r988704308\n+    // in those cases, make the code suggestion hidden\n+    let multiline_fix = fixes.iter().any(|(span, _)| cx.sess().source_map().is_multiline(*span));\n \n     span_lint_and_then(\n         cx,\n         UNINLINED_FORMAT_ARGS,\n         call_site,\n         \"variables can be used directly in the `format!` string\",\n         |diag| {\n-            diag.multipart_suggestion(\"change this to\", fixes, Applicability::MachineApplicable);\n+            diag.multipart_suggestion_with_style(\n+                \"change this to\",\n+                fixes,\n+                Applicability::MachineApplicable,\n+                if multiline_fix { CompletelyHidden } else { ShowCode },\n+            );\n         },\n     );\n }\n \n-fn check_one_arg(args: &FormatArgsExpn<'_>, param: &FormatParam<'_>, fixes: &mut Vec<(Span, String)>) -> bool {\n+fn check_one_arg(\n+    args: &FormatArgsExpn<'_>,\n+    param: &FormatParam<'_>,\n+    fixes: &mut Vec<(Span, String)>,\n+    ignore_mixed: bool,\n+) -> bool {\n     if matches!(param.kind, Implicit | Starred | Named(_) | Numbered)\n         && let ExprKind::Path(QPath::Resolved(None, path)) = param.value.kind\n         && let [segment] = path.segments\n@@ -317,8 +345,10 @@ fn check_one_arg(args: &FormatArgsExpn<'_>, param: &FormatParam<'_>, fixes: &mut\n         fixes.push((arg_span, String::new()));\n         true  // successful inlining, continue checking\n     } else {\n-        // if we can't inline a numbered argument, we can't continue\n-        param.kind != Numbered\n+        // Do not continue inlining (return false) in case\n+        // * if we can't inline a numbered argument, e.g. `print!(\"{0} ...\", foo.bar, ...)`\n+        // * if allow_mixed_uninlined_format_args is false and this arg hasn't been inlined already\n+        param.kind != Numbered && (!ignore_mixed || matches!(param.kind, NamedInline(_)))\n     }\n }\n \n@@ -330,12 +360,7 @@ fn outermost_expn_data(expn_data: ExpnData) -> ExpnData {\n     }\n }\n \n-fn check_format_in_format_args(\n-    cx: &LateContext<'_>,\n-    call_site: Span,\n-    name: Symbol,\n-    arg: &Expr<'_>,\n-) {\n+fn check_format_in_format_args(cx: &LateContext<'_>, call_site: Span, name: Symbol, arg: &Expr<'_>) {\n     let expn_data = arg.span.ctxt().outer_expn_data();\n     if expn_data.call_site.from_expansion() {\n         return;\n@@ -408,7 +433,10 @@ fn check_to_string_in_format_args(cx: &LateContext<'_>, name: Symbol, value: &Ex\n \n /// Returns true if `hir_id` is referred to by multiple format params\n fn is_aliased(args: &FormatArgsExpn<'_>, hir_id: HirId) -> bool {\n-    args.params().filter(|param| param.value.hir_id == hir_id).at_most_one().is_err()\n+    args.params()\n+        .filter(|param| param.value.hir_id == hir_id)\n+        .at_most_one()\n+        .is_err()\n }\n \n fn count_needed_derefs<'tcx, I>(mut ty: Ty<'tcx>, mut iter: I) -> (usize, Ty<'tcx>)\n@@ -418,7 +446,11 @@ where\n     let mut n_total = 0;\n     let mut n_needed = 0;\n     loop {\n-        if let Some(Adjustment { kind: Adjust::Deref(overloaded_deref), target }) = iter.next() {\n+        if let Some(Adjustment {\n+            kind: Adjust::Deref(overloaded_deref),\n+            target,\n+        }) = iter.next()\n+        {\n             n_total += 1;\n             if overloaded_deref.is_some() {\n                 n_needed = n_total;"}, {"sha": "8621504c1b47776ef41b3128a9144831bce3bde5", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,7 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::macros::span_is_local;\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::path_def_id;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::{meets_msrv, msrvs, path_def_id};\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_path, Visitor};\n use rustc_hir::{\n@@ -10,7 +11,6 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter::OnlyBodies;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{Span, Symbol};\n@@ -49,12 +49,12 @@ declare_clippy_lint! {\n }\n \n pub struct FromOverInto {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl FromOverInto {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         FromOverInto { msrv }\n     }\n }\n@@ -63,7 +63,7 @@ impl_lint_pass!(FromOverInto => [FROM_OVER_INTO]);\n \n impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::RE_REBALANCING_COHERENCE) || !span_is_local(item.span) {\n+        if !self.msrv.meets(msrvs::RE_REBALANCING_COHERENCE) || !span_is_local(item.span) {\n             return;\n         }\n "}, {"sha": "27acad45ccf729e00e63982d50ead26f92ec6b7b", "filename": "clippy_lints/src/functions/misnamed_getters.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -0,0 +1,125 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet;\n+use rustc_errors::Applicability;\n+use rustc_hir::{intravisit::FnKind, Body, ExprKind, FnDecl, HirId, ImplicitSelfKind, Unsafety};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::Span;\n+\n+use std::iter;\n+\n+use super::MISNAMED_GETTERS;\n+\n+pub fn check_fn(\n+    cx: &LateContext<'_>,\n+    kind: FnKind<'_>,\n+    decl: &FnDecl<'_>,\n+    body: &Body<'_>,\n+    span: Span,\n+    _hir_id: HirId,\n+) {\n+    let FnKind::Method(ref ident, sig) = kind else {\n+            return;\n+        };\n+\n+    // Takes only &(mut) self\n+    if decl.inputs.len() != 1 {\n+        return;\n+    }\n+\n+    let name = ident.name.as_str();\n+\n+    let name = match decl.implicit_self {\n+        ImplicitSelfKind::MutRef => {\n+            let Some(name) = name.strip_suffix(\"_mut\") else {\n+                    return;\n+                };\n+            name\n+        },\n+        ImplicitSelfKind::Imm | ImplicitSelfKind::Mut | ImplicitSelfKind::ImmRef => name,\n+        ImplicitSelfKind::None => return,\n+    };\n+\n+    let name = if sig.header.unsafety == Unsafety::Unsafe {\n+        name.strip_suffix(\"_unchecked\").unwrap_or(name)\n+    } else {\n+        name\n+    };\n+\n+    // Body must be &(mut) <self_data>.name\n+    // self_data is not neccessarilly self, to also lint sub-getters, etc\u2026\n+\n+    let block_expr = if_chain! {\n+        if let ExprKind::Block(block,_) = body.value.kind;\n+        if block.stmts.is_empty();\n+        if let Some(block_expr) = block.expr;\n+        then {\n+            block_expr\n+        } else {\n+            return;\n+        }\n+    };\n+    let expr_span = block_expr.span;\n+\n+    // Accept &<expr>, &mut <expr> and <expr>\n+    let expr = if let ExprKind::AddrOf(_, _, tmp) = block_expr.kind {\n+        tmp\n+    } else {\n+        block_expr\n+    };\n+    let (self_data, used_ident) = if_chain! {\n+        if let ExprKind::Field(self_data, ident) = expr.kind;\n+        if ident.name.as_str() != name;\n+        then {\n+            (self_data, ident)\n+        } else {\n+            return;\n+        }\n+    };\n+\n+    let mut used_field = None;\n+    let mut correct_field = None;\n+    let typeck_results = cx.typeck_results();\n+    for adjusted_type in iter::once(typeck_results.expr_ty(self_data))\n+        .chain(typeck_results.expr_adjustments(self_data).iter().map(|adj| adj.target))\n+    {\n+        let ty::Adt(def,_) = adjusted_type.kind() else {\n+            continue;\n+        };\n+\n+        for f in def.all_fields() {\n+            if f.name.as_str() == name {\n+                correct_field = Some(f);\n+            }\n+            if f.name == used_ident.name {\n+                used_field = Some(f);\n+            }\n+        }\n+    }\n+\n+    let Some(used_field) = used_field else {\n+        // Can happen if the field access is a tuple. We don't lint those because the getter name could not start with a number.\n+        return;\n+    };\n+\n+    let Some(correct_field) = correct_field else {\n+        // There is no field corresponding to the getter name.\n+        // FIXME: This can be a false positive if the correct field is reachable trought deeper autodereferences than used_field is\n+        return;\n+    };\n+\n+    if cx.tcx.type_of(used_field.did) == cx.tcx.type_of(correct_field.did) {\n+        let left_span = block_expr.span.until(used_ident.span);\n+        let snippet = snippet(cx, left_span, \"..\");\n+        let sugg = format!(\"{snippet}{name}\");\n+        span_lint_and_then(\n+            cx,\n+            MISNAMED_GETTERS,\n+            span,\n+            \"getter function appears to return the wrong field\",\n+            |diag| {\n+                diag.span_suggestion(expr_span, \"consider using\", sugg, Applicability::MaybeIncorrect);\n+            },\n+        );\n+    }\n+}"}, {"sha": "91e6ffe6447909d610bd14774b269c301c1eb0cf", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,3 +1,4 @@\n+mod misnamed_getters;\n mod must_use;\n mod not_unsafe_ptr_arg_deref;\n mod result;\n@@ -260,6 +261,48 @@ declare_clippy_lint! {\n     \"function returning `Result` with large `Err` type\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for getter methods that return a field that doesn't correspond\n+    /// to the name of the method, when there is a field's whose name matches that of the method.\n+    ///\n+    /// ### Why is this bad?\n+    /// It is most likely that such a  method is a bug caused by a typo or by copy-pasting.\n+    ///\n+    /// ### Example\n+\n+    /// ```rust\n+    /// struct A {\n+    ///     a: String,\n+    ///     b: String,\n+    /// }\n+    ///\n+    /// impl A {\n+    ///     fn a(&self) -> &str{\n+    ///         &self.b\n+    ///     }\n+    /// }\n+\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct A {\n+    ///     a: String,\n+    ///     b: String,\n+    /// }\n+    ///\n+    /// impl A {\n+    ///     fn a(&self) -> &str{\n+    ///         &self.a\n+    ///     }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub MISNAMED_GETTERS,\n+    suspicious,\n+    \"getter method returning the wrong field\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Functions {\n     too_many_arguments_threshold: u64,\n@@ -286,6 +329,7 @@ impl_lint_pass!(Functions => [\n     MUST_USE_CANDIDATE,\n     RESULT_UNIT_ERR,\n     RESULT_LARGE_ERR,\n+    MISNAMED_GETTERS,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Functions {\n@@ -301,6 +345,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         too_many_arguments::check_fn(cx, kind, decl, span, hir_id, self.too_many_arguments_threshold);\n         too_many_lines::check_fn(cx, kind, span, body, self.too_many_lines_threshold);\n         not_unsafe_ptr_arg_deref::check_fn(cx, kind, decl, body, hir_id);\n+        misnamed_getters::check_fn(cx, kind, decl, body, span, hir_id);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {"}, {"sha": "23da145d038257be75f38c88c8247ac55aaa169a", "filename": "clippy_lints/src/functions/result.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -94,19 +94,21 @@ fn check_result_large_err<'tcx>(cx: &LateContext<'tcx>, err_ty: Ty<'tcx>, hir_ty\n         if let hir::ItemKind::Enum(ref def, _) = item.kind;\n         then {\n             let variants_size = AdtVariantInfo::new(cx, *adt, subst);\n-            if variants_size[0].size >= large_err_threshold {\n+            if let Some((first_variant, variants)) = variants_size.split_first()\n+                && first_variant.size >= large_err_threshold\n+            {\n                 span_lint_and_then(\n                     cx,\n                     RESULT_LARGE_ERR,\n                     hir_ty_span,\n                     \"the `Err`-variant returned from this function is very large\",\n                     |diag| {\n                         diag.span_label(\n-                            def.variants[variants_size[0].ind].span,\n+                            def.variants[first_variant.ind].span,\n                             format!(\"the largest variant contains at least {} bytes\", variants_size[0].size),\n                         );\n \n-                        for variant in &variants_size[1..] {\n+                        for variant in variants {\n                             if variant.size >= large_err_threshold {\n                                 let variant_def = &def.variants[variant.ind];\n                                 diag.span_label("}, {"sha": "61934a9142633003f805f421ea4f9855451e76f3", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -91,7 +91,9 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                                 infcx\n                                     .err_ctxt()\n                                     .maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                if let PredicateKind::Clause(Clause::Trait(trait_pred)) = obligation.predicate.kind().skip_binder() {\n+                                if let PredicateKind::Clause(Clause::Trait(trait_pred)) =\n+                                    obligation.predicate.kind().skip_binder()\n+                                {\n                                     db.note(&format!(\n                                         \"`{}` doesn't implement `{}`\",\n                                         trait_pred.self_ty(),"}, {"sha": "9cadaaa493e465c0b4032f6adec143c752eb5681", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,14 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::eager_or_lazy::switch_to_eager_eval;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_macro_callsite;\n-use clippy_utils::{\n-    contains_return, higher, is_else_clause, is_res_lang_ctor, meets_msrv, msrvs, path_res, peel_blocks,\n-};\n+use clippy_utils::{contains_return, higher, is_else_clause, is_res_lang_ctor, path_res, peel_blocks};\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_hir::{Expr, ExprKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -47,12 +45,12 @@ declare_clippy_lint! {\n }\n \n pub struct IfThenSomeElseNone {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl IfThenSomeElseNone {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -61,7 +59,7 @@ impl_lint_pass!(IfThenSomeElseNone => [IF_THEN_SOME_ELSE_NONE]);\n \n impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if !meets_msrv(self.msrv, msrvs::BOOL_THEN) {\n+        if !self.msrv.meets(msrvs::BOOL_THEN) {\n             return;\n         }\n \n@@ -94,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n             } else {\n                 format!(\"{{ /* snippet */ {arg_snip} }}\")\n             };\n-            let method_name = if switch_to_eager_eval(cx, expr) && meets_msrv(self.msrv, msrvs::BOOL_THEN_SOME) {\n+            let method_name = if switch_to_eager_eval(cx, expr) && self.msrv.meets(msrvs::BOOL_THEN_SOME) {\n                 \"then_some\"\n             } else {\n                 method_body.insert_str(0, \"|| \");"}, {"sha": "cf35b1f175c602fd4fa70e677c1b202233968811", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,8 +1,9 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::higher::IfLet;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::ty::is_copy;\n-use clippy_utils::{is_expn_of, is_lint_allowed, meets_msrv, msrvs, path_to_local};\n+use clippy_utils::{is_expn_of, is_lint_allowed, path_to_local};\n use if_chain::if_chain;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_errors::Applicability;\n@@ -11,7 +12,6 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::Ident, Span};\n \n@@ -47,18 +47,17 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.59.0\"]\n     pub INDEX_REFUTABLE_SLICE,\n-    nursery,\n+    pedantic,\n     \"avoid indexing on slices which could be destructed\"\n }\n \n-#[derive(Copy, Clone)]\n pub struct IndexRefutableSlice {\n     max_suggested_slice: u64,\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl IndexRefutableSlice {\n-    pub fn new(max_suggested_slice_pattern_length: u64, msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(max_suggested_slice_pattern_length: u64, msrv: Msrv) -> Self {\n         Self {\n             max_suggested_slice: max_suggested_slice_pattern_length,\n             msrv,\n@@ -74,7 +73,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexRefutableSlice {\n             if !expr.span.from_expansion() || is_expn_of(expr.span, \"if_chain\").is_some();\n             if let Some(IfLet {let_pat, if_then, ..}) = IfLet::hir(cx, expr);\n             if !is_lint_allowed(cx, INDEX_REFUTABLE_SLICE, expr.hir_id);\n-            if meets_msrv(self.msrv, msrvs::SLICE_PATTERNS);\n+            if self.msrv.meets(msrvs::SLICE_PATTERNS);\n \n             let found_slices = find_slice_values(cx, let_pat);\n             if !found_slices.is_empty();"}, {"sha": "dd1b23e7d9d29f19a513b36efbc1468e690907b0", "filename": "clippy_lints/src/instant_subtraction.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finstant_subtraction.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,13 +1,11 @@\n-use clippy_utils::{\n-    diagnostics::{self, span_lint_and_sugg},\n-    meets_msrv, msrvs, source,\n-    sugg::Sugg,\n-    ty,\n-};\n+use clippy_utils::diagnostics::{self, span_lint_and_sugg};\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::source;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::ty;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{source_map::Spanned, sym};\n \n@@ -68,12 +66,12 @@ declare_clippy_lint! {\n }\n \n pub struct InstantSubtraction {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl InstantSubtraction {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -101,7 +99,7 @@ impl LateLintPass<'_> for InstantSubtraction {\n                 } else {\n                     if_chain! {\n                         if !expr.span.from_expansion();\n-                        if meets_msrv(self.msrv, msrvs::TRY_FROM);\n+                        if self.msrv.meets(msrvs::TRY_FROM);\n \n                         if is_an_instant(cx, lhs);\n                         if is_a_duration(cx, rhs);"}, {"sha": "7b17d8a156d5af6ddb3b9417b7990e65d2a3d5ee", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 36, "deletions": 73, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -52,10 +52,9 @@ extern crate declare_clippy_lint;\n use std::io;\n use std::path::PathBuf;\n \n-use clippy_utils::parse_msrv;\n+use clippy_utils::msrvs::Msrv;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_lint::{Lint, LintId};\n-use rustc_semver::RustcVersion;\n use rustc_session::Session;\n \n #[cfg(feature = \"internal\")]\n@@ -322,48 +321,10 @@ pub use crate::utils::conf::{lookup_conf_file, Conf};\n /// Used in `./src/driver.rs`.\n pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, sess: &Session, conf: &Conf) {\n     // NOTE: Do not add any more pre-expansion passes. These should be removed eventually.\n+    let msrv = Msrv::read(&conf.msrv, sess);\n+    let msrv = move || msrv.clone();\n \n-    let msrv = conf.msrv.as_ref().and_then(|s| {\n-        parse_msrv(s, None, None).or_else(|| {\n-            sess.err(format!(\n-                \"error reading Clippy's configuration file. `{s}` is not a valid Rust version\"\n-            ));\n-            None\n-        })\n-    });\n-\n-    store.register_pre_expansion_pass(move || Box::new(attrs::EarlyAttributes { msrv }));\n-}\n-\n-fn read_msrv(conf: &Conf, sess: &Session) -> Option<RustcVersion> {\n-    let cargo_msrv = std::env::var(\"CARGO_PKG_RUST_VERSION\")\n-        .ok()\n-        .and_then(|v| parse_msrv(&v, None, None));\n-    let clippy_msrv = conf.msrv.as_ref().and_then(|s| {\n-        parse_msrv(s, None, None).or_else(|| {\n-            sess.err(format!(\n-                \"error reading Clippy's configuration file. `{s}` is not a valid Rust version\"\n-            ));\n-            None\n-        })\n-    });\n-\n-    if let Some(cargo_msrv) = cargo_msrv {\n-        if let Some(clippy_msrv) = clippy_msrv {\n-            // if both files have an msrv, let's compare them and emit a warning if they differ\n-            if clippy_msrv != cargo_msrv {\n-                sess.warn(format!(\n-                    \"the MSRV in `clippy.toml` and `Cargo.toml` differ; using `{clippy_msrv}` from `clippy.toml`\"\n-                ));\n-            }\n-\n-            Some(clippy_msrv)\n-        } else {\n-            Some(cargo_msrv)\n-        }\n-    } else {\n-        clippy_msrv\n-    }\n+    store.register_pre_expansion_pass(move || Box::new(attrs::EarlyAttributes { msrv: msrv() }));\n }\n \n #[doc(hidden)]\n@@ -595,43 +556,44 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(non_octal_unix_permissions::NonOctalUnixPermissions));\n     store.register_early_pass(|| Box::new(unnecessary_self_imports::UnnecessarySelfImports));\n \n-    let msrv = read_msrv(conf, sess);\n+    let msrv = Msrv::read(&conf.msrv, sess);\n+    let msrv = move || msrv.clone();\n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n     let allow_expect_in_tests = conf.allow_expect_in_tests;\n     let allow_unwrap_in_tests = conf.allow_unwrap_in_tests;\n-    store.register_late_pass(move |_| Box::new(approx_const::ApproxConstant::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(approx_const::ApproxConstant::new(msrv())));\n     store.register_late_pass(move |_| {\n         Box::new(methods::Methods::new(\n             avoid_breaking_exported_api,\n-            msrv,\n+            msrv(),\n             allow_expect_in_tests,\n             allow_unwrap_in_tests,\n         ))\n     });\n-    store.register_late_pass(move |_| Box::new(matches::Matches::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(matches::Matches::new(msrv())));\n     let matches_for_let_else = conf.matches_for_let_else;\n-    store.register_late_pass(move |_| Box::new(manual_let_else::ManualLetElse::new(msrv, matches_for_let_else)));\n-    store.register_early_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustiveStruct::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(manual_non_exhaustive::ManualNonExhaustiveEnum::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(manual_strip::ManualStrip::new(msrv)));\n-    store.register_early_pass(move || Box::new(redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv)));\n-    store.register_early_pass(move || Box::new(redundant_field_names::RedundantFieldNames::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(checked_conversions::CheckedConversions::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(mem_replace::MemReplace::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(ranges::Ranges::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(from_over_into::FromOverInto::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(use_self::UseSelf::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(missing_const_for_fn::MissingConstForFn::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_let_else::ManualLetElse::new(msrv(), matches_for_let_else)));\n+    store.register_early_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustiveStruct::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(manual_non_exhaustive::ManualNonExhaustiveEnum::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(manual_strip::ManualStrip::new(msrv())));\n+    store.register_early_pass(move || Box::new(redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv())));\n+    store.register_early_pass(move || Box::new(redundant_field_names::RedundantFieldNames::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(checked_conversions::CheckedConversions::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(mem_replace::MemReplace::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(ranges::Ranges::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(from_over_into::FromOverInto::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(use_self::UseSelf::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(missing_const_for_fn::MissingConstForFn::new(msrv())));\n     store.register_late_pass(move |_| Box::new(needless_question_mark::NeedlessQuestionMark));\n-    store.register_late_pass(move |_| Box::new(casts::Casts::new(msrv)));\n-    store.register_early_pass(move || Box::new(unnested_or_patterns::UnnestedOrPatterns::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(casts::Casts::new(msrv())));\n+    store.register_early_pass(move || Box::new(unnested_or_patterns::UnnestedOrPatterns::new(msrv())));\n     store.register_late_pass(|_| Box::new(size_of_in_element_count::SizeOfInElementCount));\n     store.register_late_pass(|_| Box::new(same_name_method::SameNameMethod));\n     let max_suggested_slice_pattern_length = conf.max_suggested_slice_pattern_length;\n     store.register_late_pass(move |_| {\n         Box::new(index_refutable_slice::IndexRefutableSlice::new(\n             max_suggested_slice_pattern_length,\n-            msrv,\n+            msrv(),\n         ))\n     });\n     store.register_late_pass(|_| Box::<shadow::Shadow>::default());\n@@ -648,7 +610,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(borrow_deref_ref::BorrowDerefRef));\n     store.register_late_pass(|_| Box::new(no_effect::NoEffect));\n     store.register_late_pass(|_| Box::new(temporary_assignment::TemporaryAssignment));\n-    store.register_late_pass(move |_| Box::new(transmute::Transmute::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(transmute::Transmute::new(msrv())));\n     let cognitive_complexity_threshold = conf.cognitive_complexity_threshold;\n     store.register_late_pass(move |_| {\n         Box::new(cognitive_complexity::CognitiveComplexity::new(\n@@ -806,7 +768,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move |_| Box::new(wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports)));\n     store.register_late_pass(|_| Box::<redundant_pub_crate::RedundantPubCrate>::default());\n     store.register_late_pass(|_| Box::new(unnamed_address::UnnamedAddress));\n-    store.register_late_pass(move |_| Box::new(dereference::Dereferencing::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(dereference::Dereferencing::new(msrv())));\n     store.register_late_pass(|_| Box::new(option_if_let_else::OptionIfLetElse));\n     store.register_late_pass(|_| Box::new(future_not_send::FutureNotSend));\n     store.register_late_pass(|_| Box::new(if_let_mutex::IfLetMutex));\n@@ -840,7 +802,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::<vec_init_then_push::VecInitThenPush>::default());\n     store.register_late_pass(|_| Box::new(redundant_slicing::RedundantSlicing));\n     store.register_late_pass(|_| Box::new(from_str_radix_10::FromStrRadix10));\n-    store.register_late_pass(move |_| Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv())));\n     store.register_late_pass(|_| Box::new(bool_assert_comparison::BoolAssertComparison));\n     store.register_early_pass(move || Box::new(module_style::ModStyle));\n     store.register_late_pass(|_| Box::new(unused_async::UnusedAsync));\n@@ -865,14 +827,15 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(move |_| Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n-    store.register_late_pass(move |_| Box::new(format_args::FormatArgs::new(msrv)));\n+    let allow_mixed_uninlined = conf.allow_mixed_uninlined_format_args;\n+    store.register_late_pass(move |_| Box::new(format_args::FormatArgs::new(msrv(), allow_mixed_uninlined)));\n     store.register_late_pass(|_| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n     store.register_late_pass(|_| Box::new(needless_late_init::NeedlessLateInit));\n     store.register_late_pass(|_| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n     store.register_late_pass(|_| Box::new(init_numbered_fields::NumberedFields));\n     store.register_early_pass(|| Box::new(single_char_lifetime_names::SingleCharLifetimeNames));\n-    store.register_late_pass(move |_| Box::new(manual_bits::ManualBits::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_bits::ManualBits::new(msrv())));\n     store.register_late_pass(|_| Box::new(default_union_representation::DefaultUnionRepresentation));\n     store.register_late_pass(|_| Box::<only_used_in_recursion::OnlyUsedInRecursion>::default());\n     let allow_dbg_in_tests = conf.allow_dbg_in_tests;\n@@ -896,20 +859,20 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n     store.register_early_pass(|| Box::<duplicate_mod::DuplicateMod>::default());\n     store.register_early_pass(|| Box::new(unused_rounding::UnusedRounding));\n-    store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv)));\n+    store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv())));\n     store.register_late_pass(|_| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n     store.register_late_pass(|_| Box::new(mismatching_type_param_order::TypeParamMismatch));\n     store.register_late_pass(|_| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n     store.register_late_pass(|_| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n-    store.register_late_pass(move |_| Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(manual_retain::ManualRetain::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(manual_retain::ManualRetain::new(msrv())));\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move |_| Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n     store.register_late_pass(|_| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n     store.register_late_pass(|_| Box::<std_instead_of_core::StdReexports>::default());\n-    store.register_late_pass(move |_| Box::new(instant_subtraction::InstantSubtraction::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(instant_subtraction::InstantSubtraction::new(msrv())));\n     store.register_late_pass(|_| Box::new(partialeq_to_none::PartialeqToNone));\n-    store.register_late_pass(move |_| Box::new(manual_clamp::ManualClamp::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_clamp::ManualClamp::new(msrv())));\n     store.register_late_pass(|_| Box::new(manual_string_new::ManualStringNew));\n     store.register_late_pass(|_| Box::new(unused_peekable::UnusedPeekable));\n     store.register_early_pass(|| Box::new(multi_assignments::MultiAssignments));\n@@ -920,7 +883,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(missing_trait_methods::MissingTraitMethods));\n     store.register_late_pass(|_| Box::new(from_raw_with_void_ptr::FromRawWithVoidPtr));\n     store.register_late_pass(|_| Box::new(suspicious_xor_used_as_pow::ConfusingXorAndPow));\n-    store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv())));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "7cf1a6b8084a613b9053e2c1fe18bd2498f590d8", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::trait_ref_of_method;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::intravisit::nested_filter::{self as hir_nested_filter, NestedFilter};\n use rustc_hir::intravisit::{\n-    walk_fn_decl, walk_generic_param, walk_generics, walk_impl_item_ref, walk_item, walk_param_bound,\n+    walk_fn_decl, walk_generic_arg, walk_generic_param, walk_generics, walk_impl_item_ref, walk_item, walk_param_bound,\n     walk_poly_trait_ref, walk_trait_ref, walk_ty, Visitor,\n };\n use rustc_hir::lang_items;\n@@ -481,7 +481,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 sub_visitor.visit_fn_decl(decl);\n                 self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n             },\n-            TyKind::TraitObject(bounds, ref lt, _) => {\n+            TyKind::TraitObject(bounds, lt, _) => {\n                 if !lt.is_elided() {\n                     self.unelided_trait_object_lifetime = true;\n                 }\n@@ -497,14 +497,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         if let GenericArg::Lifetime(l) = generic_arg && let LifetimeName::Param(def_id) = l.res {\n             self.lifetime_generic_arg_spans.entry(def_id).or_insert(l.ident.span);\n         }\n-        // Replace with `walk_generic_arg` if/when https://github.com/rust-lang/rust/pull/103692 lands.\n-        // walk_generic_arg(self, generic_arg);\n-        match generic_arg {\n-            GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n-            GenericArg::Type(ty) => self.visit_ty(ty),\n-            GenericArg::Const(ct) => self.visit_anon_const(&ct.value),\n-            GenericArg::Infer(inf) => self.visit_infer(inf),\n-        }\n+        walk_generic_arg(self, generic_arg);\n     }\n }\n "}, {"sha": "f5617a905ff872992c96cfc9ad9c16b380dbce92", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -35,7 +35,8 @@ struct PathAndSpan {\n     span: Span,\n }\n \n-/// `MacroRefData` includes the name of the macro.\n+/// `MacroRefData` includes the name of the macro\n+/// and the path from `SourceMap::span_to_filename`.\n #[derive(Debug, Clone)]\n pub struct MacroRefData {\n     name: String,"}, {"sha": "462d73cf0b974ff8675b306763e8c5108446cb1f", "filename": "clippy_lints/src/manual_bits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_bits.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::get_parent_expr;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{get_parent_expr, meets_msrv, msrvs};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, GenericArg, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n@@ -34,12 +34,12 @@ declare_clippy_lint! {\n \n #[derive(Clone)]\n pub struct ManualBits {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualBits {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -48,7 +48,7 @@ impl_lint_pass!(ManualBits => [MANUAL_BITS]);\n \n impl<'tcx> LateLintPass<'tcx> for ManualBits {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::MANUAL_BITS) {\n+        if !self.msrv.meets(msrvs::MANUAL_BITS) {\n             return;\n         }\n "}, {"sha": "bb6d628af3b5061f35c3a19e7df8498481c8ad5e", "filename": "clippy_lints/src/manual_clamp.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_clamp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_clamp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_clamp.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,28 +1,25 @@\n+use clippy_utils::diagnostics::{span_lint_and_then, span_lint_hir_and_then};\n+use clippy_utils::higher::If;\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::visitors::is_const_evaluatable;\n+use clippy_utils::MaybePath;\n+use clippy_utils::{\n+    eq_expr_value, is_diag_trait_item, is_trait_method, path_res, path_to_local_id, peel_blocks, peel_blocks_with_stmt,\n+};\n use itertools::Itertools;\n+use rustc_errors::Applicability;\n use rustc_errors::Diagnostic;\n use rustc_hir::{\n     def::Res, Arm, BinOpKind, Block, Expr, ExprKind, Guard, HirId, PatKind, PathSegment, PrimTy, QPath, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::Ty;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span};\n use std::ops::Deref;\n \n-use clippy_utils::{\n-    diagnostics::{span_lint_and_then, span_lint_hir_and_then},\n-    eq_expr_value,\n-    higher::If,\n-    is_diag_trait_item, is_trait_method, meets_msrv, msrvs, path_res, path_to_local_id, peel_blocks,\n-    peel_blocks_with_stmt,\n-    sugg::Sugg,\n-    ty::implements_trait,\n-    visitors::is_const_evaluatable,\n-    MaybePath,\n-};\n-use rustc_errors::Applicability;\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Identifies good opportunities for a clamp function from std or core, and suggests using it.\n@@ -87,11 +84,11 @@ declare_clippy_lint! {\n impl_lint_pass!(ManualClamp => [MANUAL_CLAMP]);\n \n pub struct ManualClamp {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualClamp {\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -114,7 +111,7 @@ struct InputMinMax<'tcx> {\n \n impl<'tcx> LateLintPass<'tcx> for ManualClamp {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if !meets_msrv(self.msrv, msrvs::CLAMP) {\n+        if !self.msrv.meets(msrvs::CLAMP) {\n             return;\n         }\n         if !expr.span.from_expansion() {\n@@ -130,7 +127,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualClamp {\n     }\n \n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) {\n-        if !meets_msrv(self.msrv, msrvs::CLAMP) {\n+        if !self.msrv.meets(msrvs::CLAMP) {\n             return;\n         }\n         for suggestion in is_two_if_pattern(cx, block) {"}, {"sha": "5ab049d8d133fd34629227da15fbfef84c255915", "filename": "clippy_lints/src/manual_is_ascii_check.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,15 +1,12 @@\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, in_constant, macros::root_macro_call, source::snippet};\n use rustc_ast::LitKind::{Byte, Char};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, PatKind, RangeEnd};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{def_id::DefId, sym};\n \n-use clippy_utils::{\n-    diagnostics::span_lint_and_sugg, in_constant, macros::root_macro_call, meets_msrv, msrvs, source::snippet,\n-};\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Suggests to use dedicated built-in methods,\n@@ -45,12 +42,12 @@ declare_clippy_lint! {\n impl_lint_pass!(ManualIsAsciiCheck => [MANUAL_IS_ASCII_CHECK]);\n \n pub struct ManualIsAsciiCheck {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualIsAsciiCheck {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -70,11 +67,11 @@ enum CharRange {\n \n impl<'tcx> LateLintPass<'tcx> for ManualIsAsciiCheck {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::IS_ASCII_DIGIT) {\n+        if !self.msrv.meets(msrvs::IS_ASCII_DIGIT) {\n             return;\n         }\n \n-        if in_constant(cx, expr.hir_id) && !meets_msrv(self.msrv, msrvs::IS_ASCII_DIGIT_CONST) {\n+        if in_constant(cx, expr.hir_id) && !self.msrv.meets(msrvs::IS_ASCII_DIGIT_CONST) {\n             return;\n         }\n "}, {"sha": "874d36ca9f4e378704019c8ae971c046c68d898c", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,16 +1,16 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::higher::IfLetOrMatch;\n-use clippy_utils::source::snippet_opt;\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::peel_blocks;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::visitors::{for_each_expr, Descend};\n-use clippy_utils::{meets_msrv, msrvs, peel_blocks};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, MatchSource, Pat, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -50,13 +50,13 @@ declare_clippy_lint! {\n }\n \n pub struct ManualLetElse {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n     matches_behaviour: MatchLintBehaviour,\n }\n \n impl ManualLetElse {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>, matches_behaviour: MatchLintBehaviour) -> Self {\n+    pub fn new(msrv: Msrv, matches_behaviour: MatchLintBehaviour) -> Self {\n         Self {\n             msrv,\n             matches_behaviour,\n@@ -69,7 +69,7 @@ impl_lint_pass!(ManualLetElse => [MANUAL_LET_ELSE]);\n impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &'tcx Stmt<'tcx>) {\n         let if_let_or_match = if_chain! {\n-            if meets_msrv(self.msrv, msrvs::LET_ELSE);\n+            if self.msrv.meets(msrvs::LET_ELSE);\n             if !in_external_macro(cx.sess(), stmt.span);\n             if let StmtKind::Local(local) = stmt.kind;\n             if let Some(init) = local.init;\n@@ -141,20 +141,18 @@ fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat:\n             // * unused binding collision detection with existing ones\n             // * putting patterns with at the top level | inside ()\n             // for this to be machine applicable.\n-            let app = Applicability::HasPlaceholders;\n+            let mut app = Applicability::HasPlaceholders;\n+            let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n+            let (sn_expr, _) = snippet_with_context(cx, expr.span, span.ctxt(), \"\", &mut app);\n+            let (sn_else, _) = snippet_with_context(cx, else_body.span, span.ctxt(), \"\", &mut app);\n \n-            if let Some(sn_pat) = snippet_opt(cx, pat.span) &&\n-                let Some(sn_expr) = snippet_opt(cx, expr.span) &&\n-                let Some(sn_else) = snippet_opt(cx, else_body.span)\n-            {\n-                let else_bl = if matches!(else_body.kind, ExprKind::Block(..)) {\n-                    sn_else\n-                } else {\n-                    format!(\"{{ {sn_else} }}\")\n-                };\n-                let sugg = format!(\"let {sn_pat} = {sn_expr} else {else_bl};\");\n-                diag.span_suggestion(span, \"consider writing\", sugg, app);\n-            }\n+            let else_bl = if matches!(else_body.kind, ExprKind::Block(..)) {\n+                sn_else.into_owned()\n+            } else {\n+                format!(\"{{ {sn_else} }}\")\n+            };\n+            let sugg = format!(\"let {sn_pat} = {sn_expr} else {else_bl};\");\n+            diag.span_suggestion(span, \"consider writing\", sugg, app);\n         },\n     );\n }"}, {"sha": "bca193be9e711a520e3e4774c0c55a6af72559b8", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,14 +1,14 @@\n use clippy_utils::diagnostics::{span_lint_and_then, span_lint_hir_and_then};\n+use clippy_utils::is_doc_hidden;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::{is_doc_hidden, meets_msrv, msrvs};\n use rustc_ast::ast::{self, VisibilityKind};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::{self as hir, Expr, ExprKind, QPath};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::ty::DefIdTree;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::{sym, Span};\n@@ -63,12 +63,12 @@ declare_clippy_lint! {\n \n #[expect(clippy::module_name_repetitions)]\n pub struct ManualNonExhaustiveStruct {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualNonExhaustiveStruct {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -77,14 +77,14 @@ impl_lint_pass!(ManualNonExhaustiveStruct => [MANUAL_NON_EXHAUSTIVE]);\n \n #[expect(clippy::module_name_repetitions)]\n pub struct ManualNonExhaustiveEnum {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n     constructed_enum_variants: FxHashSet<(DefId, DefId)>,\n     potential_enums: Vec<(LocalDefId, LocalDefId, Span, Span)>,\n }\n \n impl ManualNonExhaustiveEnum {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self {\n             msrv,\n             constructed_enum_variants: FxHashSet::default(),\n@@ -97,7 +97,7 @@ impl_lint_pass!(ManualNonExhaustiveEnum => [MANUAL_NON_EXHAUSTIVE]);\n \n impl EarlyLintPass for ManualNonExhaustiveStruct {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n-        if !meets_msrv(self.msrv, msrvs::NON_EXHAUSTIVE) {\n+        if !self.msrv.meets(msrvs::NON_EXHAUSTIVE) {\n             return;\n         }\n \n@@ -149,7 +149,7 @@ impl EarlyLintPass for ManualNonExhaustiveStruct {\n \n impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::NON_EXHAUSTIVE) {\n+        if !self.msrv.meets(msrvs::NON_EXHAUSTIVE) {\n             return;\n         }\n "}, {"sha": "8d447c37150b8d2a01f095755e878dbf13740b08", "filename": "clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::consts::{constant_full_int, FullInt};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{in_constant, meets_msrv, msrvs, path_to_local};\n+use clippy_utils::{in_constant, path_to_local};\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, Node, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -34,12 +34,12 @@ declare_clippy_lint! {\n }\n \n pub struct ManualRemEuclid {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualRemEuclid {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -48,11 +48,11 @@ impl_lint_pass!(ManualRemEuclid => [MANUAL_REM_EUCLID]);\n \n impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::REM_EUCLID) {\n+        if !self.msrv.meets(msrvs::REM_EUCLID) {\n             return;\n         }\n \n-        if in_constant(cx, expr.hir_id) && !meets_msrv(self.msrv, msrvs::REM_EUCLID_CONST) {\n+        if in_constant(cx, expr.hir_id) && !self.msrv.meets(msrvs::REM_EUCLID_CONST) {\n             return;\n         }\n "}, {"sha": "c1e6c82487dc54d79b5e86185541108c149af35e", "filename": "clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_retain.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n use clippy_utils::{get_parent_expr, match_def_path, paths, SpanlessEq};\n-use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -50,12 +50,12 @@ declare_clippy_lint! {\n }\n \n pub struct ManualRetain {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualRetain {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -71,9 +71,9 @@ impl<'tcx> LateLintPass<'tcx> for ManualRetain {\n             && let hir::ExprKind::MethodCall(_, target_expr, [], _) = &collect_expr.kind\n             && let Some(collect_def_id) = cx.typeck_results().type_dependent_def_id(collect_expr.hir_id)\n             && match_def_path(cx, collect_def_id, &paths::CORE_ITER_COLLECT) {\n-            check_into_iter(cx, parent_expr, left_expr, target_expr, self.msrv);\n-            check_iter(cx, parent_expr, left_expr, target_expr, self.msrv);\n-            check_to_owned(cx, parent_expr, left_expr, target_expr, self.msrv);\n+            check_into_iter(cx, parent_expr, left_expr, target_expr, &self.msrv);\n+            check_iter(cx, parent_expr, left_expr, target_expr, &self.msrv);\n+            check_to_owned(cx, parent_expr, left_expr, target_expr, &self.msrv);\n         }\n     }\n \n@@ -85,7 +85,7 @@ fn check_into_iter(\n     parent_expr: &hir::Expr<'_>,\n     left_expr: &hir::Expr<'_>,\n     target_expr: &hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n     if let hir::ExprKind::MethodCall(_, into_iter_expr, [_], _) = &target_expr.kind\n         && let Some(filter_def_id) = cx.typeck_results().type_dependent_def_id(target_expr.hir_id)\n@@ -104,7 +104,7 @@ fn check_iter(\n     parent_expr: &hir::Expr<'_>,\n     left_expr: &hir::Expr<'_>,\n     target_expr: &hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n     if let hir::ExprKind::MethodCall(_, filter_expr, [], _) = &target_expr.kind\n         && let Some(copied_def_id) = cx.typeck_results().type_dependent_def_id(target_expr.hir_id)\n@@ -127,9 +127,9 @@ fn check_to_owned(\n     parent_expr: &hir::Expr<'_>,\n     left_expr: &hir::Expr<'_>,\n     target_expr: &hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n-    if meets_msrv(msrv,  msrvs::STRING_RETAIN)\n+    if msrv.meets(msrvs::STRING_RETAIN)\n         && let hir::ExprKind::MethodCall(_, filter_expr, [], _) = &target_expr.kind\n         && let Some(to_owned_def_id) = cx.typeck_results().type_dependent_def_id(target_expr.hir_id)\n         && match_def_path(cx, to_owned_def_id, &paths::TO_OWNED_METHOD)\n@@ -215,10 +215,10 @@ fn match_acceptable_def_path(cx: &LateContext<'_>, collect_def_id: DefId) -> boo\n         .any(|&method| match_def_path(cx, collect_def_id, method))\n }\n \n-fn match_acceptable_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>, msrv: Option<RustcVersion>) -> bool {\n+fn match_acceptable_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>, msrv: &Msrv) -> bool {\n     let expr_ty = cx.typeck_results().expr_ty(expr).peel_refs();\n     ACCEPTABLE_TYPES.iter().any(|(ty, acceptable_msrv)| {\n         is_type_diagnostic_item(cx, expr_ty, *ty)\n-            && acceptable_msrv.map_or(true, |acceptable_msrv| meets_msrv(msrv, acceptable_msrv))\n+            && acceptable_msrv.map_or(true, |acceptable_msrv| msrv.meets(acceptable_msrv))\n     })\n }"}, {"sha": "de166b9765f4194b6ff22e909c8a370c3200146d", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,8 +1,9 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n use clippy_utils::usage::mutated_variables;\n-use clippy_utils::{eq_expr_value, higher, match_def_path, meets_msrv, msrvs, paths};\n+use clippy_utils::{eq_expr_value, higher, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_hir::def::Res;\n@@ -11,7 +12,6 @@ use rustc_hir::BinOpKind;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n use rustc_span::Span;\n@@ -48,12 +48,12 @@ declare_clippy_lint! {\n }\n \n pub struct ManualStrip {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualStrip {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -68,7 +68,7 @@ enum StripKind {\n \n impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::STR_STRIP_PREFIX) {\n+        if !self.msrv.meets(msrvs::STR_STRIP_PREFIX) {\n             return;\n         }\n "}, {"sha": "7b15a307fecf47d66a50a013117e83eabd28602c", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -23,13 +23,13 @@ mod single_match;\n mod try_err;\n mod wild_in_or_pats;\n \n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{snippet_opt, walk_span_to_context};\n-use clippy_utils::{higher, in_constant, is_span_match, meets_msrv, msrvs};\n+use clippy_utils::{higher, in_constant, is_span_match};\n use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{Span, SpanData, SyntaxContext};\n \n@@ -930,13 +930,13 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct Matches {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n     infallible_destructuring_match_linted: bool,\n }\n \n impl Matches {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self {\n             msrv,\n             ..Matches::default()\n@@ -1000,9 +1000,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n \n             if !from_expansion && !contains_cfg_arm(cx, expr, ex, arms) {\n                 if source == MatchSource::Normal {\n-                    if !(meets_msrv(self.msrv, msrvs::MATCHES_MACRO)\n-                        && match_like_matches::check_match(cx, expr, ex, arms))\n-                    {\n+                    if !(self.msrv.meets(msrvs::MATCHES_MACRO) && match_like_matches::check_match(cx, expr, ex, arms)) {\n                         match_same_arms::check(cx, arms);\n                     }\n \n@@ -1034,7 +1032,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             collapsible_match::check_if_let(cx, if_let.let_pat, if_let.if_then, if_let.if_else);\n             if !from_expansion {\n                 if let Some(else_expr) = if_let.if_else {\n-                    if meets_msrv(self.msrv, msrvs::MATCHES_MACRO) {\n+                    if self.msrv.meets(msrvs::MATCHES_MACRO) {\n                         match_like_matches::check_if_let(\n                             cx,\n                             expr,"}, {"sha": "704c34c32bf743b39842571202e1114e5b28a750", "filename": "clippy_lints/src/matches/try_err.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{get_parent_expr, is_res_lang_ctor, match_def_path, path_res, paths};\n+use clippy_utils::{get_parent_expr, is_res_lang_ctor, path_res};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::ResultErr;\n@@ -107,7 +107,7 @@ fn result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'t\n fn poll_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     if_chain! {\n         if let ty::Adt(def, subst) = ty.kind();\n-        if match_def_path(cx, def.did(), &paths::POLL);\n+        if cx.tcx.lang_items().get(LangItem::Poll) == Some(def.did());\n         let ready_ty = subst.type_at(0);\n \n         if let ty::Adt(ready_def, ready_subst) = ready_ty.kind();\n@@ -124,7 +124,7 @@ fn poll_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<\n fn poll_option_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     if_chain! {\n         if let ty::Adt(def, subst) = ty.kind();\n-        if match_def_path(cx, def.did(), &paths::POLL);\n+        if cx.tcx.lang_items().get(LangItem::Poll) == Some(def.did());\n         let ready_ty = subst.type_at(0);\n \n         if let ty::Adt(ready_def, ready_subst) = ready_ty.kind();"}, {"sha": "35024ec1224f04053e5d6ac01c71c2c20b8c5a00", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,14 +1,14 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_non_aggregate_primitive_type;\n-use clippy_utils::{is_default_equivalent, is_res_lang_ctor, meets_msrv, msrvs, path_res};\n+use clippy_utils::{is_default_equivalent, is_res_lang_ctor, path_res};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n@@ -227,12 +227,12 @@ fn check_replace_with_default(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<\n }\n \n pub struct MemReplace {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl MemReplace {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -248,7 +248,7 @@ impl<'tcx> LateLintPass<'tcx> for MemReplace {\n             then {\n                 check_replace_option_with_none(cx, src, dest, expr.span);\n                 check_replace_with_uninit(cx, src, dest, expr.span);\n-                if meets_msrv(self.msrv, msrvs::MEM_TAKE) {\n+                if self.msrv.meets(msrvs::MEM_TAKE) {\n                     check_replace_with_default(cx, src, dest, expr.span);\n                 }\n             }"}, {"sha": "4e6ec61f6a83dab5b14f96a8c8920001a071e822", "filename": "clippy_lints/src/methods/cloned_instead_of_copied.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,25 +1,25 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::ty::{get_iterator_item_ty, is_copy};\n-use clippy_utils::{is_trait_method, meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_span::{sym, Span};\n \n use super::CLONED_INSTEAD_OF_COPIED;\n \n-pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, msrv: Option<RustcVersion>) {\n+pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, msrv: &Msrv) {\n     let recv_ty = cx.typeck_results().expr_ty_adjusted(recv);\n     let inner_ty = match recv_ty.kind() {\n         // `Option<T>` -> `T`\n         ty::Adt(adt, subst)\n-            if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) && meets_msrv(msrv, msrvs::OPTION_COPIED) =>\n+            if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) && msrv.meets(msrvs::OPTION_COPIED) =>\n         {\n             subst.type_at(0)\n         },\n-        _ if is_trait_method(cx, expr, sym::Iterator) && meets_msrv(msrv, msrvs::ITERATOR_COPIED) => {\n+        _ if is_trait_method(cx, expr, sym::Iterator) && msrv.meets(msrvs::ITERATOR_COPIED) => {\n             match get_iterator_item_ty(cx, recv_ty) {\n                 // <T as Iterator>::Item\n                 Some(ty) => ty,"}, {"sha": "ae03da0d3f9ce3296a8ee70f8712b5ffc8587e44", "filename": "clippy_lints/src/methods/err_expect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,27 +1,27 @@\n use super::ERR_EXPECT;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::ty::has_debug_impl;\n-use clippy_utils::{meets_msrv, msrvs, ty::is_type_diagnostic_item};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_middle::ty::Ty;\n-use rustc_semver::RustcVersion;\n use rustc_span::{sym, Span};\n \n pub(super) fn check(\n     cx: &LateContext<'_>,\n     _expr: &rustc_hir::Expr<'_>,\n     recv: &rustc_hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n     expect_span: Span,\n     err_span: Span,\n+    msrv: &Msrv,\n ) {\n     if_chain! {\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n         // Test the version to make sure the lint can be showed (expect_err has been\n         // introduced in rust 1.17.0 : https://github.com/rust-lang/rust/pull/38982)\n-        if meets_msrv(msrv, msrvs::EXPECT_ERR);\n+        if msrv.meets(msrvs::EXPECT_ERR);\n \n         // Grabs the `Result<T, E>` type\n         let result_type = cx.typeck_results().expr_ty(recv);"}, {"sha": "175e04f8ac061bd4d5d0305afa3c04bf01d24d44", "filename": "clippy_lints/src/methods/filter_map_next.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,10 +1,10 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::is_trait_method;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n-use clippy_utils::{is_trait_method, meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_semver::RustcVersion;\n use rustc_span::sym;\n \n use super::FILTER_MAP_NEXT;\n@@ -14,10 +14,10 @@ pub(super) fn check<'tcx>(\n     expr: &'tcx hir::Expr<'_>,\n     recv: &'tcx hir::Expr<'_>,\n     arg: &'tcx hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n     if is_trait_method(cx, expr, sym::Iterator) {\n-        if !meets_msrv(msrv, msrvs::ITERATOR_FIND_MAP) {\n+        if !msrv.meets(msrvs::ITERATOR_FIND_MAP) {\n             return;\n         }\n "}, {"sha": "5c620d0271601fb575f7c9fcfdb5c29a2bae1004", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::symbol::{Symbol, sym};\n+use rustc_span::symbol::{sym, Symbol};\n \n use super::INEFFICIENT_TO_STRING;\n "}, {"sha": "301aff5ae6ac0ba21ebba1dbc8ee98d6af2d465f", "filename": "clippy_lints/src/methods/is_digit_ascii_radix.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,23 +1,22 @@\n //! Lint for `c.is_digit(10)`\n \n use super::IS_DIGIT_ASCII_RADIX;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::{\n-    consts::constant_full_int, consts::FullInt, diagnostics::span_lint_and_sugg, meets_msrv, msrvs,\n-    source::snippet_with_applicability,\n+    consts::constant_full_int, consts::FullInt, diagnostics::span_lint_and_sugg, source::snippet_with_applicability,\n };\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_semver::RustcVersion;\n \n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx Expr<'_>,\n     self_arg: &'tcx Expr<'_>,\n     radix: &'tcx Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n-    if !meets_msrv(msrv, msrvs::IS_ASCII_DIGIT) {\n+    if !msrv.meets(msrvs::IS_ASCII_DIGIT) {\n         return;\n     }\n "}, {"sha": "52cc1e0464bf331cd3f624cfff75d725e5af9773", "filename": "clippy_lints/src/methods/map_clone.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,27 +1,21 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{is_copy, is_type_diagnostic_item};\n-use clippy_utils::{is_diag_trait_item, meets_msrv, msrvs, peel_blocks};\n+use clippy_utils::{is_diag_trait_item, peel_blocks};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::Adjust;\n-use rustc_semver::RustcVersion;\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span};\n \n use super::MAP_CLONE;\n \n-pub(super) fn check(\n-    cx: &LateContext<'_>,\n-    e: &hir::Expr<'_>,\n-    recv: &hir::Expr<'_>,\n-    arg: &hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n-) {\n+pub(super) fn check(cx: &LateContext<'_>, e: &hir::Expr<'_>, recv: &hir::Expr<'_>, arg: &hir::Expr<'_>, msrv: &Msrv) {\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id);\n         if cx.tcx.impl_of_method(method_id)\n@@ -97,10 +91,10 @@ fn lint_needless_cloning(cx: &LateContext<'_>, root: Span, receiver: Span) {\n     );\n }\n \n-fn lint_explicit_closure(cx: &LateContext<'_>, replace: Span, root: Span, is_copy: bool, msrv: Option<RustcVersion>) {\n+fn lint_explicit_closure(cx: &LateContext<'_>, replace: Span, root: Span, is_copy: bool, msrv: &Msrv) {\n     let mut applicability = Applicability::MachineApplicable;\n \n-    let (message, sugg_method) = if is_copy && meets_msrv(msrv, msrvs::ITERATOR_COPIED) {\n+    let (message, sugg_method) = if is_copy && msrv.meets(msrvs::ITERATOR_COPIED) {\n         (\"you are using an explicit closure for copying elements\", \"copied\")\n     } else {\n         (\"you are using an explicit closure for cloning elements\", \"cloned\")"}, {"sha": "3122f72ee9155ad932c50eb9e721663a0d74d1b3", "filename": "clippy_lints/src/methods/map_unwrap_or.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,12 +1,11 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::usage::mutated_variables;\n-use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_semver::RustcVersion;\n use rustc_span::symbol::sym;\n \n use super::MAP_UNWRAP_OR;\n@@ -19,13 +18,13 @@ pub(super) fn check<'tcx>(\n     recv: &'tcx hir::Expr<'_>,\n     map_arg: &'tcx hir::Expr<'_>,\n     unwrap_arg: &'tcx hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) -> bool {\n     // lint if the caller of `map()` is an `Option`\n     let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Option);\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n \n-    if is_result && !meets_msrv(msrv, msrvs::RESULT_MAP_OR_ELSE) {\n+    if is_result && !msrv.meets(msrvs::RESULT_MAP_OR_ELSE) {\n         return false;\n     }\n "}, {"sha": "d2913680cbb742a11db2439aa668aff4d0a979c0", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -104,16 +104,16 @@ mod zst_offset;\n use bind_instead_of_map::BindInsteadOfMap;\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::ty::{contains_ty_adt_constructor_opaque, implements_trait, is_copy, is_type_diagnostic_item};\n-use clippy_utils::{contains_return, is_bool, is_trait_method, iter_input_pats, meets_msrv, msrvs, return_ty};\n+use clippy_utils::{contains_return, is_bool, is_trait_method, iter_input_pats, return_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_hir::{Expr, ExprKind, TraitItem, TraitItemKind};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n \n@@ -3163,7 +3163,7 @@ declare_clippy_lint! {\n \n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n     allow_expect_in_tests: bool,\n     allow_unwrap_in_tests: bool,\n }\n@@ -3172,7 +3172,7 @@ impl Methods {\n     #[must_use]\n     pub fn new(\n         avoid_breaking_exported_api: bool,\n-        msrv: Option<RustcVersion>,\n+        msrv: Msrv,\n         allow_expect_in_tests: bool,\n         allow_unwrap_in_tests: bool,\n     ) -> Self {\n@@ -3325,7 +3325,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 single_char_add_str::check(cx, expr, receiver, args);\n                 into_iter_on_ref::check(cx, expr, method_span, method_call.ident.name, receiver);\n                 single_char_pattern::check(cx, expr, method_call.ident.name, receiver, args);\n-                unnecessary_to_owned::check(cx, expr, method_call.ident.name, receiver, args, self.msrv);\n+                unnecessary_to_owned::check(cx, expr, method_call.ident.name, receiver, args, &self.msrv);\n             },\n             hir::ExprKind::Binary(op, lhs, rhs) if op.node == hir::BinOpKind::Eq || op.node == hir::BinOpKind::Ne => {\n                 let mut info = BinaryExprInfo {\n@@ -3501,7 +3501,7 @@ impl Methods {\n                 (\"as_mut\", []) => useless_asref::check(cx, expr, \"as_mut\", recv),\n                 (\"as_ref\", []) => useless_asref::check(cx, expr, \"as_ref\", recv),\n                 (\"assume_init\", []) => uninit_assumed_init::check(cx, expr, recv),\n-                (\"cloned\", []) => cloned_instead_of_copied::check(cx, expr, recv, span, self.msrv),\n+                (\"cloned\", []) => cloned_instead_of_copied::check(cx, expr, recv, span, &self.msrv),\n                 (\"collect\", []) if is_trait_method(cx, expr, sym::Iterator) => {\n                     needless_collect::check(cx, span, expr, recv, call_span);\n                     match method_call(recv) {\n@@ -3512,7 +3512,7 @@ impl Methods {\n                             map_collect_result_unit::check(cx, expr, m_recv, m_arg);\n                         },\n                         Some((\"take\", take_self_arg, [take_arg], _, _)) => {\n-                            if meets_msrv(self.msrv, msrvs::STR_REPEAT) {\n+                            if self.msrv.meets(msrvs::STR_REPEAT) {\n                                 manual_str_repeat::check(cx, expr, recv, take_self_arg, take_arg);\n                             }\n                         },\n@@ -3539,7 +3539,7 @@ impl Methods {\n                 },\n                 (\"expect\", [_]) => match method_call(recv) {\n                     Some((\"ok\", recv, [], _, _)) => ok_expect::check(cx, expr, recv),\n-                    Some((\"err\", recv, [], err_span, _)) => err_expect::check(cx, expr, recv, self.msrv, span, err_span),\n+                    Some((\"err\", recv, [], err_span, _)) => err_expect::check(cx, expr, recv, span, err_span, &self.msrv),\n                     _ => expect_used::check(cx, expr, recv, false, self.allow_expect_in_tests),\n                 },\n                 (\"expect_err\", [_]) => expect_used::check(cx, expr, recv, true, self.allow_expect_in_tests),\n@@ -3578,7 +3578,7 @@ impl Methods {\n                     unit_hash::check(cx, expr, recv, arg);\n                 },\n                 (\"is_file\", []) => filetype_is_file::check(cx, expr, recv),\n-                (\"is_digit\", [radix]) => is_digit_ascii_radix::check(cx, expr, recv, radix, self.msrv),\n+                (\"is_digit\", [radix]) => is_digit_ascii_radix::check(cx, expr, recv, radix, &self.msrv),\n                 (\"is_none\", []) => check_is_some_is_none(cx, expr, recv, false),\n                 (\"is_some\", []) => check_is_some_is_none(cx, expr, recv, true),\n                 (\"iter\" | \"iter_mut\" | \"into_iter\", []) => {\n@@ -3601,7 +3601,7 @@ impl Methods {\n                 },\n                 (name @ (\"map\" | \"map_err\"), [m_arg]) => {\n                     if name == \"map\" {\n-                        map_clone::check(cx, expr, recv, m_arg, self.msrv);\n+                        map_clone::check(cx, expr, recv, m_arg, &self.msrv);\n                         if let Some((map_name @ (\"iter\" | \"into_iter\"), recv2, _, _, _)) = method_call(recv) {\n                             iter_kv_map::check(cx, map_name, expr, recv2, m_arg);\n                         }\n@@ -3610,8 +3610,8 @@ impl Methods {\n                     }\n                     if let Some((name, recv2, args, span2,_)) = method_call(recv) {\n                         match (name, args) {\n-                            (\"as_mut\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, true, self.msrv),\n-                            (\"as_ref\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, false, self.msrv),\n+                            (\"as_mut\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, true, &self.msrv),\n+                            (\"as_ref\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, false, &self.msrv),\n                             (\"filter\", [f_arg]) => {\n                                 filter_map::check(cx, expr, recv2, f_arg, span2, recv, m_arg, span, false);\n                             },\n@@ -3632,7 +3632,7 @@ impl Methods {\n                         match (name2, args2) {\n                             (\"cloned\", []) => iter_overeager_cloned::check(cx, expr, recv, recv2, false, false),\n                             (\"filter\", [arg]) => filter_next::check(cx, expr, recv2, arg),\n-                            (\"filter_map\", [arg]) => filter_map_next::check(cx, expr, recv2, arg, self.msrv),\n+                            (\"filter_map\", [arg]) => filter_map_next::check(cx, expr, recv2, arg, &self.msrv),\n                             (\"iter\", []) => iter_next_slice::check(cx, expr, recv2),\n                             (\"skip\", [arg]) => iter_skip_next::check(cx, expr, recv2, arg),\n                             (\"skip_while\", [_]) => skip_while_next::check(cx, expr),\n@@ -3680,10 +3680,10 @@ impl Methods {\n                     vec_resize_to_zero::check(cx, expr, count_arg, default_arg, span);\n                 },\n                 (\"seek\", [arg]) => {\n-                    if meets_msrv(self.msrv, msrvs::SEEK_FROM_CURRENT) {\n+                    if self.msrv.meets(msrvs::SEEK_FROM_CURRENT) {\n                         seek_from_current::check(cx, expr, recv, arg);\n                     }\n-                    if meets_msrv(self.msrv, msrvs::SEEK_REWIND) {\n+                    if self.msrv.meets(msrvs::SEEK_REWIND) {\n                         seek_to_start_instead_of_rewind::check(cx, expr, recv, arg, span);\n                     }\n                 },\n@@ -3699,7 +3699,7 @@ impl Methods {\n                 (\"splitn\" | \"rsplitn\", [count_arg, pat_arg]) => {\n                     if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg) {\n                         suspicious_splitn::check(cx, name, expr, recv, count);\n-                        str_splitn::check(cx, name, expr, recv, pat_arg, count, self.msrv);\n+                        str_splitn::check(cx, name, expr, recv, pat_arg, count, &self.msrv);\n                     }\n                 },\n                 (\"splitn_mut\" | \"rsplitn_mut\", [count_arg, _]) => {\n@@ -3717,7 +3717,7 @@ impl Methods {\n                 },\n                 (\"take\", []) => needless_option_take::check(cx, expr, recv),\n                 (\"then\", [arg]) => {\n-                    if !meets_msrv(self.msrv, msrvs::BOOL_THEN_SOME) {\n+                    if !self.msrv.meets(msrvs::BOOL_THEN_SOME) {\n                         return;\n                     }\n                     unnecessary_lazy_eval::check(cx, expr, recv, arg, \"then_some\");\n@@ -3760,7 +3760,7 @@ impl Methods {\n                 },\n                 (\"unwrap_or_else\", [u_arg]) => match method_call(recv) {\n                     Some((\"map\", recv, [map_arg], _, _))\n-                        if map_unwrap_or::check(cx, expr, recv, map_arg, u_arg, self.msrv) => {},\n+                        if map_unwrap_or::check(cx, expr, recv, map_arg, u_arg, &self.msrv) => {},\n                     _ => {\n                         unwrap_or_else_default::check(cx, expr, recv, u_arg);\n                         unnecessary_lazy_eval::check(cx, expr, recv, u_arg, \"unwrap_or\");"}, {"sha": "3e33f9193374e3a4c80b838624a9cddc162c30ef", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,13 +1,13 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{match_def_path, meets_msrv, msrvs, path_to_local_id, paths, peel_blocks};\n+use clippy_utils::{match_def_path, path_to_local_id, paths, peel_blocks};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_span::sym;\n \n use super::OPTION_AS_REF_DEREF;\n@@ -19,9 +19,9 @@ pub(super) fn check(\n     as_ref_recv: &hir::Expr<'_>,\n     map_arg: &hir::Expr<'_>,\n     is_mut: bool,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n-    if !meets_msrv(msrv, msrvs::OPTION_AS_DEREF) {\n+    if !msrv.meets(msrvs::OPTION_AS_DEREF) {\n         return;\n     }\n "}, {"sha": "3c01ce1fecd3a28a161625b72d63331405ff852a", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,9 +1,10 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_context;\n use clippy_utils::usage::local_used_after_expr;\n use clippy_utils::visitors::{for_each_expr_with_closures, Descend};\n-use clippy_utils::{is_diag_item_method, match_def_path, meets_msrv, msrvs, path_to_local_id, paths};\n+use clippy_utils::{is_diag_item_method, match_def_path, path_to_local_id, paths};\n use core::ops::ControlFlow;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -12,7 +13,6 @@ use rustc_hir::{\n };\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_span::{sym, Span, Symbol, SyntaxContext};\n \n use super::{MANUAL_SPLIT_ONCE, NEEDLESS_SPLITN};\n@@ -24,7 +24,7 @@ pub(super) fn check(\n     self_arg: &Expr<'_>,\n     pat_arg: &Expr<'_>,\n     count: u128,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n     if count < 2 || !cx.typeck_results().expr_ty_adjusted(self_arg).peel_refs().is_str() {\n         return;\n@@ -34,7 +34,7 @@ pub(super) fn check(\n         IterUsageKind::Nth(n) => count > n + 1,\n         IterUsageKind::NextTuple => count > 2,\n     };\n-    let manual = count == 2 && meets_msrv(msrv, msrvs::STR_SPLIT_ONCE);\n+    let manual = count == 2 && msrv.meets(msrvs::STR_SPLIT_ONCE);\n \n     match parse_iter_usage(cx, expr.span.ctxt(), cx.tcx.hir().parent_iter(expr.hir_id)) {\n         Some(usage) if needless(usage.kind) => lint_needless(cx, method_name, expr, self_arg, pat_arg),"}, {"sha": "17b0507682ae905b9e7fb438f76eef3022d317b8", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,13 +1,11 @@\n use super::implicit_clone::is_clone_like;\n use super::unnecessary_iter_cloned::{self, is_into_iter};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{get_iterator_item_ty, implements_trait, is_copy, peel_mid_ty_refs};\n use clippy_utils::visitors::find_all_ret_expressions;\n-use clippy_utils::{\n-    fn_def_id, get_parent_expr, is_diag_item_method, is_diag_trait_item, return_ty,\n-};\n-use clippy_utils::{meets_msrv, msrvs};\n+use clippy_utils::{fn_def_id, get_parent_expr, is_diag_item_method, is_diag_trait_item, return_ty};\n use rustc_errors::Applicability;\n use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, ItemKind, Node};\n use rustc_hir_typeck::{FnCtxt, Inherited};\n@@ -16,14 +14,9 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, OverloadedDeref};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n-use rustc_middle::ty::EarlyBinder;\n-use rustc_middle::ty::{self, Clause, ParamTy, PredicateKind, ProjectionPredicate, TraitPredicate, Ty};\n-use rustc_semver::RustcVersion;\n+use rustc_middle::ty::{self, Clause, EarlyBinder, ParamTy, PredicateKind, ProjectionPredicate, TraitPredicate, Ty};\n use rustc_span::{sym, Symbol};\n-use rustc_trait_selection::traits::{\n-    query::evaluate_obligation::InferCtxtExt as _, Obligation, ObligationCause,\n-};\n-use std::cmp::max;\n+use rustc_trait_selection::traits::{query::evaluate_obligation::InferCtxtExt as _, Obligation, ObligationCause};\n \n use super::UNNECESSARY_TO_OWNED;\n \n@@ -33,7 +26,7 @@ pub fn check<'tcx>(\n     method_name: Symbol,\n     receiver: &'tcx Expr<'_>,\n     args: &'tcx [Expr<'_>],\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n     if_chain! {\n         if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n@@ -204,7 +197,7 @@ fn check_into_iter_call_arg(\n     expr: &Expr<'_>,\n     method_name: Symbol,\n     receiver: &Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) -> bool {\n     if_chain! {\n         if let Some(parent) = get_parent_expr(cx, expr);\n@@ -219,7 +212,7 @@ fn check_into_iter_call_arg(\n             if unnecessary_iter_cloned::check_for_loop_iter(cx, parent, method_name, receiver, true) {\n                 return true;\n             }\n-            let cloned_or_copied = if is_copy(cx, item_ty) && meets_msrv(msrv, msrvs::ITERATOR_COPIED) {\n+            let cloned_or_copied = if is_copy(cx, item_ty) && msrv.meets(msrvs::ITERATOR_COPIED) {\n                 \"copied\"\n             } else {\n                 \"cloned\"\n@@ -267,11 +260,22 @@ fn check_other_call_arg<'tcx>(\n         if let Some(as_ref_trait_id) = cx.tcx.get_diagnostic_item(sym::AsRef);\n         if trait_predicate.def_id() == deref_trait_id || trait_predicate.def_id() == as_ref_trait_id;\n         let receiver_ty = cx.typeck_results().expr_ty(receiver);\n-        if can_change_type(cx, maybe_arg, receiver_ty);\n         // We can't add an `&` when the trait is `Deref` because `Target = &T` won't match\n         // `Target = T`.\n-        if n_refs > 0 || is_copy(cx, receiver_ty) || trait_predicate.def_id() != deref_trait_id;\n-        let n_refs = max(n_refs, usize::from(!is_copy(cx, receiver_ty)));\n+        if let Some((n_refs, receiver_ty)) = if n_refs > 0 || is_copy(cx, receiver_ty) {\n+            Some((n_refs, receiver_ty))\n+        } else if trait_predicate.def_id() != deref_trait_id {\n+            Some((1, cx.tcx.mk_ref(\n+                cx.tcx.lifetimes.re_erased,\n+                ty::TypeAndMut {\n+                    ty: receiver_ty,\n+                    mutbl: Mutability::Not,\n+                },\n+            )))\n+        } else {\n+            None\n+        };\n+        if can_change_type(cx, maybe_arg, receiver_ty);\n         if let Some(receiver_snippet) = snippet_opt(cx, receiver.span);\n         then {\n             span_lint_and_sugg(\n@@ -345,13 +349,13 @@ fn get_input_traits_and_projections<'tcx>(\n                 if trait_predicate.trait_ref.self_ty() == input {\n                     trait_predicates.push(trait_predicate);\n                 }\n-            }\n+            },\n             PredicateKind::Clause(Clause::Projection(projection_predicate)) => {\n                 if projection_predicate.projection_ty.self_ty() == input {\n                     projection_predicates.push(projection_predicate);\n                 }\n-            }\n-            _ => {}\n+            },\n+            _ => {},\n         }\n     }\n     (trait_predicates, projection_predicates)\n@@ -403,10 +407,12 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n \n                         let mut trait_predicates = cx.tcx.param_env(callee_def_id)\n                             .caller_bounds().iter().filter(|predicate| {\n-                            if let PredicateKind::Clause(Clause::Trait(trait_predicate)) =  predicate.kind().skip_binder()\n-                                && trait_predicate.trait_ref.self_ty() == *param_ty {\n-                                    true\n-                                } else {\n+                            if let PredicateKind::Clause(Clause::Trait(trait_predicate))\n+                                    = predicate.kind().skip_binder()\n+                                && trait_predicate.trait_ref.self_ty() == *param_ty\n+                            {\n+                                true\n+                            } else {\n                                 false\n                             }\n                         });\n@@ -466,12 +472,7 @@ fn is_cloned_or_copied(cx: &LateContext<'_>, method_name: Symbol, method_def_id:\n \n /// Returns true if the named method can be used to convert the receiver to its \"owned\"\n /// representation.\n-fn is_to_owned_like<'a>(\n-    cx: &LateContext<'a>,\n-    call_expr: &Expr<'a>,\n-    method_name: Symbol,\n-    method_def_id: DefId,\n-) -> bool {\n+fn is_to_owned_like<'a>(cx: &LateContext<'a>, call_expr: &Expr<'a>, method_name: Symbol, method_def_id: DefId) -> bool {\n     is_clone_like(cx, method_name.as_str(), method_def_id)\n         || is_cow_into_owned(cx, method_name, method_def_id)\n         || is_to_string_on_string_like(cx, call_expr, method_name, method_def_id)"}, {"sha": "5bc04bc17fb4f00bdf2cba1c1d9db4b08e8991a4", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,17 +1,15 @@\n use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::qualify_min_const_fn::is_min_const_fn;\n use clippy_utils::ty::has_drop;\n-use clippy_utils::{\n-    fn_has_unsatisfiable_preds, is_entrypoint_fn, is_from_proc_macro, meets_msrv, msrvs, trait_ref_of_method,\n-};\n+use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, is_from_proc_macro, trait_ref_of_method};\n use rustc_hir as hir;\n use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n@@ -75,12 +73,12 @@ declare_clippy_lint! {\n impl_lint_pass!(MissingConstForFn => [MISSING_CONST_FOR_FN]);\n \n pub struct MissingConstForFn {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl MissingConstForFn {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -95,7 +93,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if !meets_msrv(self.msrv, msrvs::CONST_IF_MATCH) {\n+        if !self.msrv.meets(msrvs::CONST_IF_MATCH) {\n             return;\n         }\n \n@@ -152,7 +150,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         let mir = cx.tcx.optimized_mir(def_id);\n \n-        if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv) {\n+        if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, &self.msrv) {\n             if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n                 cx.tcx.sess.span_err(span, err.as_ref());\n             }"}, {"sha": "9942e8115b7f87b4c439fc9e1bc2bea6d1bbca75", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -8,6 +8,7 @@\n use clippy_utils::attrs::is_doc_hidden;\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::is_from_proc_macro;\n+use if_chain::if_chain;\n use rustc_ast::ast::{self, MetaItem, MetaItemKind};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};"}, {"sha": "3ef0c6634598474189ba0b5415d733304b2d2671", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -92,10 +92,6 @@ impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n                 self.found = true;\n                 return;\n             },\n-            ExprKind::If(..) => {\n-                self.found = true;\n-                return;\n-            },\n             ExprKind::Path(_) => {\n                 if let Some(adj) = self.cx.typeck_results().adjustments().get(expr.hir_id) {\n                     if adj"}, {"sha": "2f0b7ce16e51b77541bdee6927dea53c98bdb18e", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,7 +1,9 @@\n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n use clippy_utils::ptr::get_spans;\n use clippy_utils::source::{snippet, snippet_opt};\n-use clippy_utils::ty::{implements_trait, implements_trait_with_env, is_copy, is_type_diagnostic_item, is_type_lang_item};\n+use clippy_utils::ty::{\n+    implements_trait, implements_trait_with_env, is_copy, is_type_diagnostic_item, is_type_lang_item,\n+};\n use clippy_utils::{get_trait_def_id, is_self, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n@@ -124,7 +126,9 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n                 match obligation.predicate.kind().no_bound_vars() {\n-                    Some(ty::PredicateKind::Clause(ty::Clause::Trait(pred))) if pred.def_id() != sized_trait => Some(pred),\n+                    Some(ty::PredicateKind::Clause(ty::Clause::Trait(pred))) if pred.def_id() != sized_trait => {\n+                        Some(pred)\n+                    },\n                     _ => None,\n                 }\n             })"}, {"sha": "79c1ae4861e805d8edefa6f127ef200d1ea4a97d", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -6,7 +6,8 @@ use clippy_utils::ty::has_drop;\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{is_range_literal, BinOpKind, BlockCheckMode, Expr, ExprKind, PatKind, Stmt, StmtKind, UnsafeSource};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::ops::Deref;\n \n@@ -159,8 +160,11 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n fn check_unnecessary_operation(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n     if_chain! {\n         if let StmtKind::Semi(expr) = stmt.kind;\n+        let ctxt = stmt.span.ctxt();\n+        if expr.span.ctxt() == ctxt;\n         if let Some(reduced) = reduce_expression(cx, expr);\n-        if !&reduced.iter().any(|e| e.span.from_expansion());\n+        if !in_external_macro(cx.sess(), stmt.span);\n+        if reduced.iter().all(|e| e.span.ctxt() == ctxt);\n         then {\n             if let ExprKind::Index(..) = &expr.kind {\n                 let snippet = if let (Some(arr), Some(func)) ="}, {"sha": "e395ff54cb15a00f0693e6f8007f9d4ab1585aab", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -490,7 +490,7 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                         ty_name: name.ident.name,\n                         method_renames,\n                         ref_prefix: RefPrefix {\n-                            lt: lt.clone(),\n+                            lt: *lt,\n                             mutability,\n                         },\n                         deref_ty,\n@@ -693,9 +693,10 @@ fn matches_preds<'tcx>(\n             cx.tcx,\n             ObligationCause::dummy(),\n             cx.param_env,\n-            cx.tcx.mk_predicate(Binder::dummy(\n-                PredicateKind::Clause(Clause::Projection(p.with_self_ty(cx.tcx, ty))),\n-            )),\n+            cx.tcx\n+                .mk_predicate(Binder::dummy(PredicateKind::Clause(Clause::Projection(\n+                    p.with_self_ty(cx.tcx, ty),\n+                )))),\n         )),\n         ExistentialPredicate::AutoTrait(p) => infcx\n             .type_implements_trait(p, [ty], cx.param_env)"}, {"sha": "0a1b9d173cf9409ee453de6f7085ac14b9f8ab89", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,16 +1,16 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::higher;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{snippet, snippet_opt, snippet_with_applicability};\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{get_parent_expr, in_constant, is_integer_const, meets_msrv, msrvs, path_to_local};\n+use clippy_utils::{get_parent_expr, in_constant, is_integer_const, path_to_local};\n use if_chain::if_chain;\n use rustc_ast::ast::RangeLimits;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n use std::cmp::Ordering;\n@@ -161,12 +161,12 @@ declare_clippy_lint! {\n }\n \n pub struct Ranges {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl Ranges {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -181,7 +181,7 @@ impl_lint_pass!(Ranges => [\n impl<'tcx> LateLintPass<'tcx> for Ranges {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Binary(ref op, l, r) = expr.kind {\n-            if meets_msrv(self.msrv, msrvs::RANGE_CONTAINS) {\n+            if self.msrv.meets(msrvs::RANGE_CONTAINS) {\n                 check_possible_range_contains(cx, op.node, l, r, expr, expr.span);\n             }\n         }"}, {"sha": "2a42e73488f1905c4b98cb45ea1fee522baaf567", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -81,8 +81,8 @@ impl EarlyLintPass for RedundantClosureCall {\n                         \"try not to call a closure in the expression where it is declared\",\n                         |diag| {\n                             if fn_decl.inputs.is_empty() {\n-                                let app = Applicability::MachineApplicable;\n-                                let mut hint = Sugg::ast(cx, body, \"..\");\n+                                let mut app = Applicability::MachineApplicable;\n+                                let mut hint = Sugg::ast(cx, body, \"..\", closure.span.ctxt(), &mut app);\n \n                                 if asyncness.is_async() {\n                                     // `async x` is a syntax error, so it becomes `async { x }`"}, {"sha": "61bff4a0e38d842194be07d7d8bd960436aed2fe", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,10 +1,9 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::{meets_msrv, msrvs};\n+use clippy_utils::msrvs::{self, Msrv};\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -37,12 +36,12 @@ declare_clippy_lint! {\n }\n \n pub struct RedundantFieldNames {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl RedundantFieldNames {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -51,7 +50,7 @@ impl_lint_pass!(RedundantFieldNames => [REDUNDANT_FIELD_NAMES]);\n \n impl EarlyLintPass for RedundantFieldNames {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if !meets_msrv(self.msrv, msrvs::FIELD_INIT_SHORTHAND) {\n+        if !self.msrv.meets(msrvs::FIELD_INIT_SHORTHAND) {\n             return;\n         }\n "}, {"sha": "3aa2490bc44e018fa32371b1f94e0c69a46e4892", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,10 +1,9 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n-use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{Item, ItemKind, Ty, TyKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -34,12 +33,12 @@ declare_clippy_lint! {\n }\n \n pub struct RedundantStaticLifetimes {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl RedundantStaticLifetimes {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -96,7 +95,7 @@ impl RedundantStaticLifetimes {\n \n impl EarlyLintPass for RedundantStaticLifetimes {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if !meets_msrv(self.msrv, msrvs::STATIC_IN_CONST) {\n+        if !self.msrv.meets(msrvs::STATIC_IN_CONST) {\n             return;\n         }\n "}, {"sha": "81143d7799ea8aa585f2e023b3cb9d3560dfd22f", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -12,6 +12,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::{BytePos, Pos};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -209,13 +210,14 @@ fn check_final_expr<'tcx>(\n             if cx.tcx.hir().attrs(expr.hir_id).is_empty() {\n                 let borrows = inner.map_or(false, |inner| last_statement_borrows(cx, inner));\n                 if !borrows {\n-                    emit_return_lint(\n-                        cx,\n-                        peeled_drop_expr.span,\n-                        semi_spans,\n-                        inner.as_ref().map(|i| i.span),\n-                        replacement,\n-                    );\n+                    // check if expr return nothing\n+                    let ret_span = if inner.is_none() && replacement == RetReplacement::Empty {\n+                        extend_span_to_previous_non_ws(cx, peeled_drop_expr.span)\n+                    } else {\n+                        peeled_drop_expr.span\n+                    };\n+\n+                    emit_return_lint(cx, ret_span, semi_spans, inner.as_ref().map(|i| i.span), replacement);\n                 }\n             }\n         },\n@@ -289,3 +291,16 @@ fn last_statement_borrows<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>)\n     })\n     .is_some()\n }\n+\n+// Go backwards while encountering whitespace and extend the given Span to that point.\n+fn extend_span_to_previous_non_ws(cx: &LateContext<'_>, sp: Span) -> Span {\n+    if let Ok(prev_source) = cx.sess().source_map().span_to_prev_source(sp) {\n+        let ws = [' ', '\\t', '\\n'];\n+        if let Some(non_ws_pos) = prev_source.rfind(|c| !ws.contains(&c)) {\n+            let len = prev_source.len() - non_ws_pos - 1;\n+            return sp.with_lo(sp.lo() - BytePos::from_usize(len));\n+        }\n+    }\n+\n+    sp\n+}"}, {"sha": "91326558cd8dc824e200f4b4e727f40d77acbd71", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -55,11 +55,11 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n             if matches!(cx.tcx.def_kind(id.owner_id), DefKind::Impl)\n                 && let item = cx.tcx.hir().item(id)\n                 && let ItemKind::Impl(Impl {\n-                  items,\n-                  of_trait,\n-                  self_ty,\n-                  ..\n-                                      }) = &item.kind\n+                    items,\n+                    of_trait,\n+                    self_ty,\n+                    ..\n+                }) = &item.kind\n                 && let TyKind::Path(QPath::Resolved(_, Path { res, .. })) = self_ty.kind\n             {\n                 if !map.contains_key(res) {"}, {"sha": "83e651aba8e89b15ed99db9dfcf768afece1431f", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -16,10 +16,10 @@ mod utils;\n mod wrong_transmute;\n \n use clippy_utils::in_constant;\n+use clippy_utils::msrvs::Msrv;\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;\n \n@@ -410,7 +410,7 @@ declare_clippy_lint! {\n }\n \n pub struct Transmute {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n impl_lint_pass!(Transmute => [\n     CROSSPOINTER_TRANSMUTE,\n@@ -431,7 +431,7 @@ impl_lint_pass!(Transmute => [\n ]);\n impl Transmute {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -461,7 +461,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 let linted = wrong_transmute::check(cx, e, from_ty, to_ty)\n                     | crosspointer_transmute::check(cx, e, from_ty, to_ty)\n                     | transmuting_null::check(cx, e, arg, to_ty)\n-                    | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, path, self.msrv)\n+                    | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, path, &self.msrv)\n                     | transmute_int_to_char::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ref_to_ref::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ptr_to_ptr::check(cx, e, from_ty, to_ty, arg)"}, {"sha": "3dde4eee67179fd9a394b10d5799b1d93ca04748", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,12 +1,12 @@\n use super::TRANSMUTE_PTR_TO_REF;\n use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{meets_msrv, msrvs, sugg};\n+use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, Expr, GenericArg, Mutability, Path, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty, TypeVisitable};\n-use rustc_semver::RustcVersion;\n \n /// Checks for `transmute_ptr_to_ref` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`.\n@@ -17,7 +17,7 @@ pub(super) fn check<'tcx>(\n     to_ty: Ty<'tcx>,\n     arg: &'tcx Expr<'_>,\n     path: &'tcx Path<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         (ty::RawPtr(from_ptr_ty), ty::Ref(_, to_ref_ty, mutbl)) => {\n@@ -37,7 +37,7 @@ pub(super) fn check<'tcx>(\n \n                     let sugg = if let Some(ty) = get_explicit_type(path) {\n                         let ty_snip = snippet_with_applicability(cx, ty.span, \"..\", &mut app);\n-                        if meets_msrv(msrv, msrvs::POINTER_CAST) {\n+                        if msrv.meets(msrvs::POINTER_CAST) {\n                             format!(\"{deref}{}.cast::<{ty_snip}>()\", arg.maybe_par())\n                         } else if from_ptr_ty.has_erased_regions() {\n                             sugg::make_unop(deref, arg.as_ty(format!(\"{cast} () as {cast} {ty_snip}\"))).to_string()\n@@ -46,7 +46,7 @@ pub(super) fn check<'tcx>(\n                         }\n                     } else if from_ptr_ty.ty == *to_ref_ty {\n                         if from_ptr_ty.has_erased_regions() {\n-                            if meets_msrv(msrv, msrvs::POINTER_CAST) {\n+                            if msrv.meets(msrvs::POINTER_CAST) {\n                                 format!(\"{deref}{}.cast::<{to_ref_ty}>()\", arg.maybe_par())\n                             } else {\n                                 sugg::make_unop(deref, arg.as_ty(format!(\"{cast} () as {cast} {to_ref_ty}\")))"}, {"sha": "2e1b6d8d4ea7f743a862d8088ec8554b28ba913d", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 332, "deletions": 97, "changes": 429, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,10 @@\n+use std::ops::ControlFlow;\n+\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::source::walk_span_to_context;\n+use clippy_utils::visitors::{for_each_expr_with_closures, Descend};\n use clippy_utils::{get_parent_node, is_lint_allowed};\n+use hir::HirId;\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::{Block, BlockCheckMode, ItemKind, Node, UnsafeSource};\n@@ -59,11 +63,39 @@ declare_clippy_lint! {\n     restriction,\n     \"creating an unsafe block without explaining why it is safe\"\n }\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `// SAFETY: ` comments on safe code.\n+    ///\n+    /// ### Why is this bad?\n+    /// Safe code has no safety requirements, so there is no need to\n+    /// describe safety invariants.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::ptr::NonNull;\n+    /// let a = &mut 42;\n+    ///\n+    /// // SAFETY: references are guaranteed to be non-null.\n+    /// let ptr = NonNull::new(a).unwrap();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::ptr::NonNull;\n+    /// let a = &mut 42;\n+    ///\n+    /// let ptr = NonNull::new(a).unwrap();\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub UNNECESSARY_SAFETY_COMMENT,\n+    restriction,\n+    \"annotating safe code with a safety comment\"\n+}\n \n-declare_lint_pass!(UndocumentedUnsafeBlocks => [UNDOCUMENTED_UNSAFE_BLOCKS]);\n+declare_lint_pass!(UndocumentedUnsafeBlocks => [UNDOCUMENTED_UNSAFE_BLOCKS, UNNECESSARY_SAFETY_COMMENT]);\n \n-impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n-    fn check_block(&mut self, cx: &LateContext<'_>, block: &'_ Block<'_>) {\n+impl<'tcx> LateLintPass<'tcx> for UndocumentedUnsafeBlocks {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) {\n         if block.rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided)\n             && !in_external_macro(cx.tcx.sess, block.span)\n             && !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, block.hir_id)\n@@ -87,35 +119,175 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n                 \"consider adding a safety comment on the preceding line\",\n             );\n         }\n+\n+        if let Some(tail) = block.expr\n+            && !is_lint_allowed(cx, UNNECESSARY_SAFETY_COMMENT, tail.hir_id)\n+            && !in_external_macro(cx.tcx.sess, tail.span)\n+            && let HasSafetyComment::Yes(pos) = stmt_has_safety_comment(cx, tail.span, tail.hir_id)\n+            && let Some(help_span) = expr_has_unnecessary_safety_comment(cx, tail, pos)\n+        {\n+            span_lint_and_help(\n+                cx,\n+                UNNECESSARY_SAFETY_COMMENT,\n+                tail.span,\n+                \"expression has unnecessary safety comment\",\n+                Some(help_span),\n+                \"consider removing the safety comment\",\n+            );\n+        }\n     }\n \n-    fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {\n-        if let hir::ItemKind::Impl(imple) = item.kind\n-            && imple.unsafety == hir::Unsafety::Unsafe\n-            && !in_external_macro(cx.tcx.sess, item.span)\n-            && !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, item.hir_id())\n-            && !is_unsafe_from_proc_macro(cx, item.span)\n-            && !item_has_safety_comment(cx, item)\n+    fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &hir::Stmt<'tcx>) {\n+        let (\n+            hir::StmtKind::Local(&hir::Local { init: Some(expr), .. })\n+            | hir::StmtKind::Expr(expr)\n+            | hir::StmtKind::Semi(expr)\n+        ) = stmt.kind else { return };\n+        if !is_lint_allowed(cx, UNNECESSARY_SAFETY_COMMENT, stmt.hir_id)\n+            && !in_external_macro(cx.tcx.sess, stmt.span)\n+            && let HasSafetyComment::Yes(pos) = stmt_has_safety_comment(cx, stmt.span, stmt.hir_id)\n+            && let Some(help_span) = expr_has_unnecessary_safety_comment(cx, expr, pos)\n         {\n+            span_lint_and_help(\n+                cx,\n+                UNNECESSARY_SAFETY_COMMENT,\n+                stmt.span,\n+                \"statement has unnecessary safety comment\",\n+                Some(help_span),\n+                \"consider removing the safety comment\",\n+            );\n+        }\n+    }\n+\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {\n+        if in_external_macro(cx.tcx.sess, item.span) {\n+            return;\n+        }\n+\n+        let mk_spans = |pos: BytePos| {\n             let source_map = cx.tcx.sess.source_map();\n+            let span = Span::new(pos, pos, SyntaxContext::root(), None);\n+            let help_span = source_map.span_extend_to_next_char(span, '\\n', true);\n             let span = if source_map.is_multiline(item.span) {\n                 source_map.span_until_char(item.span, '\\n')\n             } else {\n                 item.span\n             };\n+            (span, help_span)\n+        };\n \n-            span_lint_and_help(\n-                cx,\n-                UNDOCUMENTED_UNSAFE_BLOCKS,\n-                span,\n-                \"unsafe impl missing a safety comment\",\n-                None,\n-                \"consider adding a safety comment on the preceding line\",\n-            );\n+        let item_has_safety_comment = item_has_safety_comment(cx, item);\n+        match (&item.kind, item_has_safety_comment) {\n+            // lint unsafe impl without safety comment\n+            (hir::ItemKind::Impl(impl_), HasSafetyComment::No) if impl_.unsafety == hir::Unsafety::Unsafe => {\n+                if !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, item.hir_id())\n+                    && !is_unsafe_from_proc_macro(cx, item.span)\n+                {\n+                    let source_map = cx.tcx.sess.source_map();\n+                    let span = if source_map.is_multiline(item.span) {\n+                        source_map.span_until_char(item.span, '\\n')\n+                    } else {\n+                        item.span\n+                    };\n+\n+                    span_lint_and_help(\n+                        cx,\n+                        UNDOCUMENTED_UNSAFE_BLOCKS,\n+                        span,\n+                        \"unsafe impl missing a safety comment\",\n+                        None,\n+                        \"consider adding a safety comment on the preceding line\",\n+                    );\n+                }\n+            },\n+            // lint safe impl with unnecessary safety comment\n+            (hir::ItemKind::Impl(impl_), HasSafetyComment::Yes(pos)) if impl_.unsafety == hir::Unsafety::Normal => {\n+                if !is_lint_allowed(cx, UNNECESSARY_SAFETY_COMMENT, item.hir_id()) {\n+                    let (span, help_span) = mk_spans(pos);\n+\n+                    span_lint_and_help(\n+                        cx,\n+                        UNNECESSARY_SAFETY_COMMENT,\n+                        span,\n+                        \"impl has unnecessary safety comment\",\n+                        Some(help_span),\n+                        \"consider removing the safety comment\",\n+                    );\n+                }\n+            },\n+            (hir::ItemKind::Impl(_), _) => {},\n+            // const and static items only need a safety comment if their body is an unsafe block, lint otherwise\n+            (&hir::ItemKind::Const(.., body) | &hir::ItemKind::Static(.., body), HasSafetyComment::Yes(pos)) => {\n+                if !is_lint_allowed(cx, UNNECESSARY_SAFETY_COMMENT, body.hir_id) {\n+                    let body = cx.tcx.hir().body(body);\n+                    if !matches!(\n+                        body.value.kind, hir::ExprKind::Block(block, _)\n+                        if block.rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided)\n+                    ) {\n+                        let (span, help_span) = mk_spans(pos);\n+\n+                        span_lint_and_help(\n+                            cx,\n+                            UNNECESSARY_SAFETY_COMMENT,\n+                            span,\n+                            &format!(\"{} has unnecessary safety comment\", item.kind.descr()),\n+                            Some(help_span),\n+                            \"consider removing the safety comment\",\n+                        );\n+                    }\n+                }\n+            },\n+            // Aside from unsafe impls and consts/statics with an unsafe block, items in general\n+            // do not have safety invariants that need to be documented, so lint those.\n+            (_, HasSafetyComment::Yes(pos)) => {\n+                if !is_lint_allowed(cx, UNNECESSARY_SAFETY_COMMENT, item.hir_id()) {\n+                    let (span, help_span) = mk_spans(pos);\n+\n+                    span_lint_and_help(\n+                        cx,\n+                        UNNECESSARY_SAFETY_COMMENT,\n+                        span,\n+                        &format!(\"{} has unnecessary safety comment\", item.kind.descr()),\n+                        Some(help_span),\n+                        \"consider removing the safety comment\",\n+                    );\n+                }\n+            },\n+            _ => (),\n         }\n     }\n }\n \n+fn expr_has_unnecessary_safety_comment<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'tcx>,\n+    comment_pos: BytePos,\n+) -> Option<Span> {\n+    // this should roughly be the reverse of `block_parents_have_safety_comment`\n+    if for_each_expr_with_closures(cx, expr, |expr| match expr.kind {\n+        hir::ExprKind::Block(\n+            Block {\n+                rules: BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided),\n+                ..\n+            },\n+            _,\n+        ) => ControlFlow::Break(()),\n+        // statements will be handled by check_stmt itself again\n+        hir::ExprKind::Block(..) => ControlFlow::Continue(Descend::No),\n+        _ => ControlFlow::Continue(Descend::Yes),\n+    })\n+    .is_some()\n+    {\n+        return None;\n+    }\n+\n+    let source_map = cx.tcx.sess.source_map();\n+    let span = Span::new(comment_pos, comment_pos, SyntaxContext::root(), None);\n+    let help_span = source_map.span_extend_to_next_char(span, '\\n', true);\n+\n+    Some(help_span)\n+}\n+\n fn is_unsafe_from_proc_macro(cx: &LateContext<'_>, span: Span) -> bool {\n     let source_map = cx.sess().source_map();\n     let file_pos = source_map.lookup_byte_offset(span.lo());\n@@ -170,85 +342,134 @@ fn block_has_safety_comment(cx: &LateContext<'_>, span: Span) -> bool {\n     // won't work. This is to avoid dealing with where such a comment should be place relative to\n     // attributes and doc comments.\n \n-    span_from_macro_expansion_has_safety_comment(cx, span) || span_in_body_has_safety_comment(cx, span)\n+    matches!(\n+        span_from_macro_expansion_has_safety_comment(cx, span),\n+        HasSafetyComment::Yes(_)\n+    ) || span_in_body_has_safety_comment(cx, span)\n+}\n+\n+enum HasSafetyComment {\n+    Yes(BytePos),\n+    No,\n+    Maybe,\n }\n \n /// Checks if the lines immediately preceding the item contain a safety comment.\n #[allow(clippy::collapsible_match)]\n-fn item_has_safety_comment(cx: &LateContext<'_>, item: &hir::Item<'_>) -> bool {\n-    if span_from_macro_expansion_has_safety_comment(cx, item.span) {\n-        return true;\n+fn item_has_safety_comment(cx: &LateContext<'_>, item: &hir::Item<'_>) -> HasSafetyComment {\n+    match span_from_macro_expansion_has_safety_comment(cx, item.span) {\n+        HasSafetyComment::Maybe => (),\n+        has_safety_comment => return has_safety_comment,\n     }\n \n-    if item.span.ctxt() == SyntaxContext::root() {\n-        if let Some(parent_node) = get_parent_node(cx.tcx, item.hir_id()) {\n-            let comment_start = match parent_node {\n-                Node::Crate(parent_mod) => {\n-                    comment_start_before_impl_in_mod(cx, parent_mod, parent_mod.spans.inner_span, item)\n-                },\n-                Node::Item(parent_item) => {\n-                    if let ItemKind::Mod(parent_mod) = &parent_item.kind {\n-                        comment_start_before_impl_in_mod(cx, parent_mod, parent_item.span, item)\n-                    } else {\n-                        // Doesn't support impls in this position. Pretend a comment was found.\n-                        return true;\n-                    }\n-                },\n-                Node::Stmt(stmt) => {\n-                    if let Some(stmt_parent) = get_parent_node(cx.tcx, stmt.hir_id) {\n-                        match stmt_parent {\n-                            Node::Block(block) => walk_span_to_context(block.span, SyntaxContext::root()).map(Span::lo),\n-                            _ => {\n-                                // Doesn't support impls in this position. Pretend a comment was found.\n-                                return true;\n-                            },\n-                        }\n-                    } else {\n-                        // Problem getting the parent node. Pretend a comment was found.\n-                        return true;\n-                    }\n-                },\n-                _ => {\n+    if item.span.ctxt() != SyntaxContext::root() {\n+        return HasSafetyComment::No;\n+    }\n+    if let Some(parent_node) = get_parent_node(cx.tcx, item.hir_id()) {\n+        let comment_start = match parent_node {\n+            Node::Crate(parent_mod) => {\n+                comment_start_before_item_in_mod(cx, parent_mod, parent_mod.spans.inner_span, item)\n+            },\n+            Node::Item(parent_item) => {\n+                if let ItemKind::Mod(parent_mod) = &parent_item.kind {\n+                    comment_start_before_item_in_mod(cx, parent_mod, parent_item.span, item)\n+                } else {\n                     // Doesn't support impls in this position. Pretend a comment was found.\n-                    return true;\n-                },\n-            };\n+                    return HasSafetyComment::Maybe;\n+                }\n+            },\n+            Node::Stmt(stmt) => {\n+                if let Some(Node::Block(block)) = get_parent_node(cx.tcx, stmt.hir_id) {\n+                    walk_span_to_context(block.span, SyntaxContext::root()).map(Span::lo)\n+                } else {\n+                    // Problem getting the parent node. Pretend a comment was found.\n+                    return HasSafetyComment::Maybe;\n+                }\n+            },\n+            _ => {\n+                // Doesn't support impls in this position. Pretend a comment was found.\n+                return HasSafetyComment::Maybe;\n+            },\n+        };\n \n-            let source_map = cx.sess().source_map();\n-            if let Some(comment_start) = comment_start\n-                && let Ok(unsafe_line) = source_map.lookup_line(item.span.lo())\n-                && let Ok(comment_start_line) = source_map.lookup_line(comment_start)\n-                && Lrc::ptr_eq(&unsafe_line.sf, &comment_start_line.sf)\n-                && let Some(src) = unsafe_line.sf.src.as_deref()\n-            {\n-                unsafe_line.sf.lines(|lines| {\n-                    comment_start_line.line < unsafe_line.line && text_has_safety_comment(\n+        let source_map = cx.sess().source_map();\n+        if let Some(comment_start) = comment_start\n+            && let Ok(unsafe_line) = source_map.lookup_line(item.span.lo())\n+            && let Ok(comment_start_line) = source_map.lookup_line(comment_start)\n+            && Lrc::ptr_eq(&unsafe_line.sf, &comment_start_line.sf)\n+            && let Some(src) = unsafe_line.sf.src.as_deref()\n+        {\n+            return unsafe_line.sf.lines(|lines| {\n+                if comment_start_line.line >= unsafe_line.line {\n+                    HasSafetyComment::No\n+                } else {\n+                    match text_has_safety_comment(\n                         src,\n                         &lines[comment_start_line.line + 1..=unsafe_line.line],\n                         unsafe_line.sf.start_pos.to_usize(),\n-                    )\n-                })\n-            } else {\n-                // Problem getting source text. Pretend a comment was found.\n-                true\n-            }\n-        } else {\n-            // No parent node. Pretend a comment was found.\n-            true\n+                    ) {\n+                        Some(b) => HasSafetyComment::Yes(b),\n+                        None => HasSafetyComment::No,\n+                    }\n+                }\n+            });\n+        }\n+    }\n+    HasSafetyComment::Maybe\n+}\n+\n+/// Checks if the lines immediately preceding the item contain a safety comment.\n+#[allow(clippy::collapsible_match)]\n+fn stmt_has_safety_comment(cx: &LateContext<'_>, span: Span, hir_id: HirId) -> HasSafetyComment {\n+    match span_from_macro_expansion_has_safety_comment(cx, span) {\n+        HasSafetyComment::Maybe => (),\n+        has_safety_comment => return has_safety_comment,\n+    }\n+\n+    if span.ctxt() != SyntaxContext::root() {\n+        return HasSafetyComment::No;\n+    }\n+\n+    if let Some(parent_node) = get_parent_node(cx.tcx, hir_id) {\n+        let comment_start = match parent_node {\n+            Node::Block(block) => walk_span_to_context(block.span, SyntaxContext::root()).map(Span::lo),\n+            _ => return HasSafetyComment::Maybe,\n+        };\n+\n+        let source_map = cx.sess().source_map();\n+        if let Some(comment_start) = comment_start\n+            && let Ok(unsafe_line) = source_map.lookup_line(span.lo())\n+            && let Ok(comment_start_line) = source_map.lookup_line(comment_start)\n+            && Lrc::ptr_eq(&unsafe_line.sf, &comment_start_line.sf)\n+            && let Some(src) = unsafe_line.sf.src.as_deref()\n+        {\n+            return unsafe_line.sf.lines(|lines| {\n+                if comment_start_line.line >= unsafe_line.line {\n+                    HasSafetyComment::No\n+                } else {\n+                    match text_has_safety_comment(\n+                        src,\n+                        &lines[comment_start_line.line + 1..=unsafe_line.line],\n+                        unsafe_line.sf.start_pos.to_usize(),\n+                    ) {\n+                        Some(b) => HasSafetyComment::Yes(b),\n+                        None => HasSafetyComment::No,\n+                    }\n+                }\n+            });\n         }\n-    } else {\n-        false\n     }\n+    HasSafetyComment::Maybe\n }\n \n-fn comment_start_before_impl_in_mod(\n+fn comment_start_before_item_in_mod(\n     cx: &LateContext<'_>,\n     parent_mod: &hir::Mod<'_>,\n     parent_mod_span: Span,\n-    imple: &hir::Item<'_>,\n+    item: &hir::Item<'_>,\n ) -> Option<BytePos> {\n     parent_mod.item_ids.iter().enumerate().find_map(|(idx, item_id)| {\n-        if *item_id == imple.item_id() {\n+        if *item_id == item.item_id() {\n             if idx == 0 {\n                 // mod A { /* comment */ unsafe impl T {} ... }\n                 // ^------------------------------------------^ returns the start of this span\n@@ -270,11 +491,11 @@ fn comment_start_before_impl_in_mod(\n     })\n }\n \n-fn span_from_macro_expansion_has_safety_comment(cx: &LateContext<'_>, span: Span) -> bool {\n+fn span_from_macro_expansion_has_safety_comment(cx: &LateContext<'_>, span: Span) -> HasSafetyComment {\n     let source_map = cx.sess().source_map();\n     let ctxt = span.ctxt();\n     if ctxt == SyntaxContext::root() {\n-        false\n+        HasSafetyComment::Maybe\n     } else {\n         // From a macro expansion. Get the text from the start of the macro declaration to start of the\n         // unsafe block.\n@@ -286,15 +507,22 @@ fn span_from_macro_expansion_has_safety_comment(cx: &LateContext<'_>, span: Span\n             && let Some(src) = unsafe_line.sf.src.as_deref()\n         {\n             unsafe_line.sf.lines(|lines| {\n-                macro_line.line < unsafe_line.line && text_has_safety_comment(\n-                    src,\n-                    &lines[macro_line.line + 1..=unsafe_line.line],\n-                    unsafe_line.sf.start_pos.to_usize(),\n-                )\n+                if macro_line.line < unsafe_line.line {\n+                    match text_has_safety_comment(\n+                        src,\n+                        &lines[macro_line.line + 1..=unsafe_line.line],\n+                        unsafe_line.sf.start_pos.to_usize(),\n+                    ) {\n+                        Some(b) => HasSafetyComment::Yes(b),\n+                        None => HasSafetyComment::No,\n+                    }\n+                } else {\n+                    HasSafetyComment::No\n+                }\n             })\n         } else {\n             // Problem getting source text. Pretend a comment was found.\n-            true\n+            HasSafetyComment::Maybe\n         }\n     }\n }\n@@ -333,7 +561,7 @@ fn span_in_body_has_safety_comment(cx: &LateContext<'_>, span: Span) -> bool {\n                     src,\n                     &lines[body_line.line + 1..=unsafe_line.line],\n                     unsafe_line.sf.start_pos.to_usize(),\n-                )\n+                ).is_some()\n             })\n         } else {\n             // Problem getting source text. Pretend a comment was found.\n@@ -345,30 +573,34 @@ fn span_in_body_has_safety_comment(cx: &LateContext<'_>, span: Span) -> bool {\n }\n \n /// Checks if the given text has a safety comment for the immediately proceeding line.\n-fn text_has_safety_comment(src: &str, line_starts: &[BytePos], offset: usize) -> bool {\n+fn text_has_safety_comment(src: &str, line_starts: &[BytePos], offset: usize) -> Option<BytePos> {\n     let mut lines = line_starts\n         .array_windows::<2>()\n         .rev()\n         .map_while(|[start, end]| {\n             let start = start.to_usize() - offset;\n             let end = end.to_usize() - offset;\n-            src.get(start..end).map(|text| (start, text.trim_start()))\n+            let text = src.get(start..end)?;\n+            let trimmed = text.trim_start();\n+            Some((start + (text.len() - trimmed.len()), trimmed))\n         })\n         .filter(|(_, text)| !text.is_empty());\n \n     let Some((line_start, line)) = lines.next() else {\n-        return false;\n+        return None;\n     };\n     // Check for a sequence of line comments.\n     if line.starts_with(\"//\") {\n-        let mut line = line;\n+        let (mut line, mut line_start) = (line, line_start);\n         loop {\n             if line.to_ascii_uppercase().contains(\"SAFETY:\") {\n-                return true;\n+                return Some(BytePos(\n+                    u32::try_from(line_start).unwrap() + u32::try_from(offset).unwrap(),\n+                ));\n             }\n             match lines.next() {\n-                Some((_, x)) if x.starts_with(\"//\") => line = x,\n-                _ => return false,\n+                Some((s, x)) if x.starts_with(\"//\") => (line, line_start) = (x, s),\n+                _ => return None,\n             }\n         }\n     }\n@@ -377,16 +609,19 @@ fn text_has_safety_comment(src: &str, line_starts: &[BytePos], offset: usize) ->\n     let (mut line_start, mut line) = (line_start, line);\n     loop {\n         if line.starts_with(\"/*\") {\n-            let src = src[line_start..line_starts.last().unwrap().to_usize() - offset].trim_start();\n+            let src = &src[line_start..line_starts.last().unwrap().to_usize() - offset];\n             let mut tokens = tokenize(src);\n-            return src[..tokens.next().unwrap().len as usize]\n+            return (src[..tokens.next().unwrap().len as usize]\n                 .to_ascii_uppercase()\n                 .contains(\"SAFETY:\")\n-                && tokens.all(|t| t.kind == TokenKind::Whitespace);\n+                && tokens.all(|t| t.kind == TokenKind::Whitespace))\n+            .then_some(BytePos(\n+                u32::try_from(line_start).unwrap() + u32::try_from(offset).unwrap(),\n+            ));\n         }\n         match lines.next() {\n             Some(x) => (line_start, line) = x,\n-            None => return false,\n+            None => return None,\n         }\n     }\n }"}, {"sha": "7355260ae4af37bee18b3ea5ee126c3f2538ed21", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -2,14 +2,14 @@\n \n use clippy_utils::ast_utils::{eq_field_pat, eq_id, eq_maybe_qself, eq_pat, eq_path};\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::{meets_msrv, msrvs, over};\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::over;\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, Mutability, Pat, PatKind, PatKind::*, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::DUMMY_SP;\n \n@@ -45,14 +45,13 @@ declare_clippy_lint! {\n     \"unnested or-patterns, e.g., `Foo(Bar) | Foo(Baz) instead of `Foo(Bar | Baz)`\"\n }\n \n-#[derive(Clone, Copy)]\n pub struct UnnestedOrPatterns {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl UnnestedOrPatterns {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -61,27 +60,27 @@ impl_lint_pass!(UnnestedOrPatterns => [UNNESTED_OR_PATTERNS]);\n \n impl EarlyLintPass for UnnestedOrPatterns {\n     fn check_arm(&mut self, cx: &EarlyContext<'_>, a: &ast::Arm) {\n-        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n+        if self.msrv.meets(msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &a.pat);\n         }\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n+        if self.msrv.meets(msrvs::OR_PATTERNS) {\n             if let ast::ExprKind::Let(pat, _, _) = &e.kind {\n                 lint_unnested_or_patterns(cx, pat);\n             }\n         }\n     }\n \n     fn check_param(&mut self, cx: &EarlyContext<'_>, p: &ast::Param) {\n-        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n+        if self.msrv.meets(msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &p.pat);\n         }\n     }\n \n     fn check_local(&mut self, cx: &EarlyContext<'_>, l: &ast::Local) {\n-        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n+        if self.msrv.meets(msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &l.pat);\n         }\n     }"}, {"sha": "097568cd1f70037921ee4f5c6b2bc601a8aacee5", "filename": "clippy_lints/src/unused_rounding.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Funused_rounding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Funused_rounding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_rounding.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n use rustc_ast::ast::{Expr, ExprKind, MethodCall};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -29,30 +30,24 @@ declare_clippy_lint! {\n }\n declare_lint_pass!(UnusedRounding => [UNUSED_ROUNDING]);\n \n-fn is_useless_rounding(expr: &Expr) -> Option<(&str, String)> {\n+fn is_useless_rounding<'a>(cx: &EarlyContext<'_>, expr: &'a Expr) -> Option<(&'a str, String)> {\n     if let ExprKind::MethodCall(box MethodCall { seg:name_ident, receiver, .. }) = &expr.kind\n         && let method_name = name_ident.ident.name.as_str()\n         && (method_name == \"ceil\" || method_name == \"round\" || method_name == \"floor\")\n         && let ExprKind::Lit(token_lit) = &receiver.kind\n-        && token_lit.is_semantic_float() {\n-            let mut f_str = token_lit.symbol.to_string();\n-            let f = f_str.trim_end_matches('_').parse::<f64>().unwrap();\n-            if let Some(suffix) = token_lit.suffix {\n-                f_str.push_str(suffix.as_str());\n-            }\n-            if f.fract() == 0.0 {\n-                Some((method_name, f_str))\n-            } else {\n-                None\n-            }\n+        && token_lit.is_semantic_float()\n+        && let Ok(f) = token_lit.symbol.as_str().replace('_', \"\").parse::<f64>() {\n+            (f.fract() == 0.0).then(||\n+                (method_name, snippet(cx, receiver.span, \"..\").to_string())\n+            )\n         } else {\n             None\n         }\n }\n \n impl EarlyLintPass for UnusedRounding {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if let Some((method_name, float)) = is_useless_rounding(expr) {\n+        if let Some((method_name, float)) = is_useless_rounding(cx, expr) {\n             span_lint_and_sugg(\n                 cx,\n                 UNUSED_ROUNDING,"}, {"sha": "4c755d812a0e0fe93c319fc6fa534be220d71022", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_from_proc_macro;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::ty::same_type_and_consts;\n-use clippy_utils::{is_from_proc_macro, meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -14,7 +15,6 @@ use rustc_hir::{\n };\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n@@ -57,13 +57,13 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct UseSelf {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n     stack: Vec<StackItem>,\n }\n \n impl UseSelf {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self {\n             msrv,\n             ..Self::default()\n@@ -199,7 +199,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_ty(&mut self, cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) {\n         if_chain! {\n             if !hir_ty.span.from_expansion();\n-            if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if self.msrv.meets(msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check {\n                 impl_id,\n                 in_body,\n@@ -228,7 +228,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n             if !expr.span.from_expansion();\n-            if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if self.msrv.meets(msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n             if cx.typeck_results().expr_ty(expr) == cx.tcx.type_of(impl_id);\n             then {} else { return; }\n@@ -248,7 +248,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_pat(&mut self, cx: &LateContext<'_>, pat: &Pat<'_>) {\n         if_chain! {\n             if !pat.span.from_expansion();\n-            if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if self.msrv.meets(msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n             // get the path from the pattern\n             if let PatKind::Path(QPath::Resolved(_, path))"}, {"sha": "b6dc8cd7ab1197e338e653a2fa3e1d5f20442877", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -402,6 +402,10 @@ define_Conf! {\n     /// A list of paths to types that should be treated like `Arc`, i.e. ignored but\n     /// for the generic parameters for determining interior mutability\n     (ignore_interior_mutability: Vec<String> = Vec::from([\"bytes::Bytes\".into()])),\n+    /// Lint: UNINLINED_FORMAT_ARGS.\n+    ///\n+    /// Whether to allow mixed uninlined format args, e.g. `format!(\"{} {}\", a, foo.bar)`\n+    (allow_mixed_uninlined_format_args: bool = true),\n }\n \n /// Search for the configuration file."}, {"sha": "9876a8a765ccbca52ed97abc0aa2d89769ad2bab", "filename": "clippy_lints/src/utils/internal_lints/msrv_attr_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -41,7 +41,7 @@ impl LateLintPass<'_> for MsrvAttrImpl {\n                     .type_of(f.did)\n                     .walk()\n                     .filter(|t| matches!(t.unpack(), GenericArgKind::Type(_)))\n-                    .any(|t| match_type(cx, t.expect_ty(), &paths::RUSTC_VERSION))\n+                    .any(|t| match_type(cx, t.expect_ty(), &paths::MSRV))\n             });\n             if !items.iter().any(|item| item.ident.name == sym!(enter_lint_attrs));\n             then {"}, {"sha": "7987a233bdc184b960f9c53fbd4b9d2c0d0c7619", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -125,19 +125,19 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n     }\n }\n \n-pub fn get_unique_inner_attr(sess: &Session, attrs: &[ast::Attribute], name: &'static str) -> Option<ast::Attribute> {\n-    let mut unique_attr = None;\n+pub fn get_unique_attr<'a>(\n+    sess: &'a Session,\n+    attrs: &'a [ast::Attribute],\n+    name: &'static str,\n+) -> Option<&'a ast::Attribute> {\n+    let mut unique_attr: Option<&ast::Attribute> = None;\n     for attr in get_attr(sess, attrs, name) {\n-        match attr.style {\n-            ast::AttrStyle::Inner if unique_attr.is_none() => unique_attr = Some(attr.clone()),\n-            ast::AttrStyle::Inner => {\n-                sess.struct_span_err(attr.span, &format!(\"`{name}` is defined multiple times\"))\n-                    .span_note(unique_attr.as_ref().unwrap().span, \"first definition found here\")\n-                    .emit();\n-            },\n-            ast::AttrStyle::Outer => {\n-                sess.span_err(attr.span, format!(\"`{name}` cannot be an outer attribute\"));\n-            },\n+        if let Some(duplicate) = unique_attr {\n+            sess.struct_span_err(attr.span, &format!(\"`{name}` is defined multiple times\"))\n+                .span_note(duplicate.span, \"first definition found here\")\n+                .emit();\n+        } else {\n+            unique_attr = Some(attr);\n         }\n     }\n     unique_attr"}, {"sha": "96711936968b5d4ddd1f3f7fb0f3c52d33a69e9f", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -91,6 +91,16 @@ fn fn_eagerness(cx: &LateContext<'_>, fn_id: DefId, name: Symbol, have_one_arg:\n     }\n }\n \n+fn res_has_significant_drop(res: Res, cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n+    if let Res::Def(DefKind::Ctor(..) | DefKind::Variant, _) | Res::SelfCtor(_) = res {\n+        cx.typeck_results()\n+            .expr_ty(e)\n+            .has_significant_drop(cx.tcx, cx.param_env)\n+    } else {\n+        false\n+    }\n+}\n+\n #[expect(clippy::too_many_lines)]\n fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessSuggestion {\n     struct V<'cx, 'tcx> {\n@@ -113,13 +123,8 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                     },\n                     args,\n                 ) => match self.cx.qpath_res(path, hir_id) {\n-                    Res::Def(DefKind::Ctor(..) | DefKind::Variant, _) | Res::SelfCtor(_) => {\n-                        if self\n-                            .cx\n-                            .typeck_results()\n-                            .expr_ty(e)\n-                            .has_significant_drop(self.cx.tcx, self.cx.param_env)\n-                        {\n+                    res @ (Res::Def(DefKind::Ctor(..) | DefKind::Variant, _) | Res::SelfCtor(_)) => {\n+                        if res_has_significant_drop(res, self.cx, e) {\n                             self.eagerness = ForceNoChange;\n                             return;\n                         }\n@@ -147,6 +152,12 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                     self.eagerness |= NoChange;\n                     return;\n                 },\n+                ExprKind::Path(ref path) => {\n+                    if res_has_significant_drop(self.cx.qpath_res(path, e.hir_id), self.cx, e) {\n+                        self.eagerness = ForceNoChange;\n+                        return;\n+                    }\n+                },\n                 ExprKind::MethodCall(name, ..) => {\n                     self.eagerness |= self\n                         .cx\n@@ -206,7 +217,6 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 | ExprKind::Match(..)\n                 | ExprKind::Closure { .. }\n                 | ExprKind::Field(..)\n-                | ExprKind::Path(_)\n                 | ExprKind::AddrOf(..)\n                 | ExprKind::Struct(..)\n                 | ExprKind::Repeat(..)"}, {"sha": "90192f46cbfa09f416e88c94060d3962f5c9cfef", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -105,8 +105,6 @@ use rustc_middle::ty::{\n     layout::IntegerExt, BorrowKind, ClosureKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeVisitable, UpvarCapture,\n };\n use rustc_middle::ty::{FloatTy, IntTy, UintTy};\n-use rustc_semver::RustcVersion;\n-use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::SourceMap;\n use rustc_span::sym;\n@@ -118,36 +116,17 @@ use crate::consts::{constant, Constant};\n use crate::ty::{can_partially_move_ty, expr_sig, is_copy, is_recursively_primitive_type, ty_is_fn_once_param};\n use crate::visitors::for_each_expr;\n \n-pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {\n-    if let Ok(version) = RustcVersion::parse(msrv) {\n-        return Some(version);\n-    } else if let Some(sess) = sess {\n-        if let Some(span) = span {\n-            sess.span_err(span, format!(\"`{msrv}` is not a valid Rust version\"));\n-        }\n-    }\n-    None\n-}\n-\n-pub fn meets_msrv(msrv: Option<RustcVersion>, lint_msrv: RustcVersion) -> bool {\n-    msrv.map_or(true, |msrv| msrv.meets(lint_msrv))\n-}\n-\n #[macro_export]\n macro_rules! extract_msrv_attr {\n     ($context:ident) => {\n         fn enter_lint_attrs(&mut self, cx: &rustc_lint::$context<'_>, attrs: &[rustc_ast::ast::Attribute]) {\n             let sess = rustc_lint::LintContext::sess(cx);\n-            match $crate::get_unique_inner_attr(sess, attrs, \"msrv\") {\n-                Some(msrv_attr) => {\n-                    if let Some(msrv) = msrv_attr.value_str() {\n-                        self.msrv = $crate::parse_msrv(&msrv.to_string(), Some(sess), Some(msrv_attr.span));\n-                    } else {\n-                        sess.span_err(msrv_attr.span, \"bad clippy attribute\");\n-                    }\n-                },\n-                _ => (),\n-            }\n+            self.msrv.enter_lint_attrs(sess, attrs);\n+        }\n+\n+        fn exit_lint_attrs(&mut self, cx: &rustc_lint::$context<'_>, attrs: &[rustc_ast::ast::Attribute]) {\n+            let sess = rustc_lint::LintContext::sess(cx);\n+            self.msrv.exit_lint_attrs(sess, attrs);\n         }\n     };\n }"}, {"sha": "12a512f78a699eb30c92ac178b17663db424d090", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,4 +1,11 @@\n+use std::sync::OnceLock;\n+\n+use rustc_ast::Attribute;\n use rustc_semver::RustcVersion;\n+use rustc_session::Session;\n+use rustc_span::Span;\n+\n+use crate::attrs::get_unique_attr;\n \n macro_rules! msrv_aliases {\n     ($($major:literal,$minor:literal,$patch:literal {\n@@ -40,3 +47,97 @@ msrv_aliases! {\n     1,16,0 { STR_REPEAT }\n     1,55,0 { SEEK_REWIND }\n }\n+\n+fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {\n+    if let Ok(version) = RustcVersion::parse(msrv) {\n+        return Some(version);\n+    } else if let Some(sess) = sess {\n+        if let Some(span) = span {\n+            sess.span_err(span, format!(\"`{msrv}` is not a valid Rust version\"));\n+        }\n+    }\n+    None\n+}\n+\n+/// Tracks the current MSRV from `clippy.toml`, `Cargo.toml` or set via `#[clippy::msrv]`\n+#[derive(Debug, Clone, Default)]\n+pub struct Msrv {\n+    stack: Vec<RustcVersion>,\n+}\n+\n+impl Msrv {\n+    fn new(initial: Option<RustcVersion>) -> Self {\n+        Self {\n+            stack: Vec::from_iter(initial),\n+        }\n+    }\n+\n+    fn read_inner(conf_msrv: &Option<String>, sess: &Session) -> Self {\n+        let cargo_msrv = std::env::var(\"CARGO_PKG_RUST_VERSION\")\n+            .ok()\n+            .and_then(|v| parse_msrv(&v, None, None));\n+        let clippy_msrv = conf_msrv.as_ref().and_then(|s| {\n+            parse_msrv(s, None, None).or_else(|| {\n+                sess.err(format!(\n+                    \"error reading Clippy's configuration file. `{s}` is not a valid Rust version\"\n+                ));\n+                None\n+            })\n+        });\n+\n+        // if both files have an msrv, let's compare them and emit a warning if they differ\n+        if let Some(cargo_msrv) = cargo_msrv\n+            && let Some(clippy_msrv) = clippy_msrv\n+            && clippy_msrv != cargo_msrv\n+        {\n+            sess.warn(format!(\n+                \"the MSRV in `clippy.toml` and `Cargo.toml` differ; using `{clippy_msrv}` from `clippy.toml`\"\n+            ));\n+        }\n+\n+        Self::new(clippy_msrv.or(cargo_msrv))\n+    }\n+\n+    /// Set the initial MSRV from the Clippy config file or from Cargo due to the `rust-version`\n+    /// field in `Cargo.toml`\n+    ///\n+    /// Returns a `&'static Msrv` as `Copy` types are more easily passed to the\n+    /// `register_{late,early}_pass` callbacks\n+    pub fn read(conf_msrv: &Option<String>, sess: &Session) -> &'static Self {\n+        static PARSED: OnceLock<Msrv> = OnceLock::new();\n+\n+        PARSED.get_or_init(|| Self::read_inner(conf_msrv, sess))\n+    }\n+\n+    pub fn current(&self) -> Option<RustcVersion> {\n+        self.stack.last().copied()\n+    }\n+\n+    pub fn meets(&self, required: RustcVersion) -> bool {\n+        self.current().map_or(true, |version| version.meets(required))\n+    }\n+\n+    fn parse_attr(sess: &Session, attrs: &[Attribute]) -> Option<RustcVersion> {\n+        if let Some(msrv_attr) = get_unique_attr(sess, attrs, \"msrv\") {\n+            if let Some(msrv) = msrv_attr.value_str() {\n+                return parse_msrv(&msrv.to_string(), Some(sess), Some(msrv_attr.span));\n+            }\n+\n+            sess.span_err(msrv_attr.span, \"bad clippy attribute\");\n+        }\n+\n+        None\n+    }\n+\n+    pub fn enter_lint_attrs(&mut self, sess: &Session, attrs: &[Attribute]) {\n+        if let Some(version) = Self::parse_attr(sess, attrs) {\n+            self.stack.push(version);\n+        }\n+    }\n+\n+    pub fn exit_lint_attrs(&mut self, sess: &Session, attrs: &[Attribute]) {\n+        if Self::parse_attr(sess, attrs).is_some() {\n+            self.stack.pop();\n+        }\n+    }\n+}"}, {"sha": "6417f0f3c71348bb6761918cb08c7c373e7b9bc6", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -60,6 +60,8 @@ pub const LATE_LINT_PASS: [&str; 3] = [\"rustc_lint\", \"passes\", \"LateLintPass\"];\n #[cfg(feature = \"internal\")]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MEM_SWAP: [&str; 3] = [\"core\", \"mem\", \"swap\"];\n+#[cfg(feature = \"internal\")]\n+pub const MSRV: [&str; 3] = [\"clippy_utils\", \"msrvs\", \"Msrv\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OS_STRING_AS_OS_STR: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsString\", \"as_os_str\"];\n pub const OS_STR_TO_OS_STRING: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsStr\", \"to_os_string\"];\n@@ -72,7 +74,6 @@ pub const PEEKABLE: [&str; 5] = [\"core\", \"iter\", \"adapters\", \"peekable\", \"Peekab\n pub const PERMISSIONS: [&str; 3] = [\"std\", \"fs\", \"Permissions\"];\n #[cfg_attr(not(unix), allow(clippy::invalid_paths))]\n pub const PERMISSIONS_FROM_MODE: [&str; 6] = [\"std\", \"os\", \"unix\", \"fs\", \"PermissionsExt\", \"from_mode\"];\n-pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const PTR_COPY: [&str; 3] = [\"core\", \"intrinsics\", \"copy\"];\n pub const PTR_COPY_NONOVERLAPPING: [&str; 3] = [\"core\", \"intrinsics\", \"copy_nonoverlapping\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n@@ -101,8 +102,6 @@ pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n pub const REGEX_BYTES_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n pub const REGEX_NEW: [&str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n pub const REGEX_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n-#[cfg(feature = \"internal\")]\n-pub const RUSTC_VERSION: [&str; 2] = [\"rustc_semver\", \"RustcVersion\"];\n pub const SERDE_DESERIALIZE: [&str; 3] = [\"serde\", \"de\", \"Deserialize\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_FROM_RAW_PARTS: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts\"];"}, {"sha": "480e8e55cf39cc8c66b0edf209a7f609c0071ccb", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -3,6 +3,7 @@\n // of terminologies might not be relevant in the context of Clippy. Note that its behavior might\n // differ from the time of `rustc` even if the name stays the same.\n \n+use crate::msrvs::Msrv;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n@@ -18,20 +19,22 @@ use std::borrow::Cow;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n-pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: Option<RustcVersion>) -> McfResult {\n+pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv) -> McfResult {\n     let def_id = body.source.def_id();\n     let mut current = def_id;\n     loop {\n         let predicates = tcx.predicates_of(current);\n         for (predicate, _) in predicates.predicates {\n             match predicate.kind().skip_binder() {\n-                ty::PredicateKind::Clause(ty::Clause::RegionOutlives(_))\n-                | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_))\n+                ty::PredicateKind::Clause(\n+                    ty::Clause::RegionOutlives(_)\n+                    | ty::Clause::TypeOutlives(_)\n+                    | ty::Clause::Projection(_)\n+                    | ty::Clause::Trait(..),\n+                )\n                 | ty::PredicateKind::WellFormed(_)\n-                | ty::PredicateKind::Clause(ty::Clause::Projection(_))\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n-                | ty::PredicateKind::Clause(ty::Clause::Trait(..))\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {predicate:#?}\"),\n@@ -281,7 +284,7 @@ fn check_terminator<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     terminator: &Terminator<'tcx>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) -> McfResult {\n     let span = terminator.source_info.span;\n     match &terminator.kind {\n@@ -365,7 +368,7 @@ fn check_terminator<'tcx>(\n     }\n }\n \n-fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bool {\n+fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: &Msrv) -> bool {\n     tcx.is_const_fn(def_id)\n         && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n             if let rustc_attr::StabilityLevel::Stable { since, .. } = const_stab.level {\n@@ -384,15 +387,12 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bo\n \n                 let since = rustc_span::Symbol::intern(short_version);\n \n-                crate::meets_msrv(\n-                    msrv,\n-                    RustcVersion::parse(since.as_str()).unwrap_or_else(|err| {\n-                        panic!(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted: `{since}`, {err:?}\")\n-                    }),\n-                )\n+                msrv.meets(RustcVersion::parse(since.as_str()).unwrap_or_else(|err| {\n+                    panic!(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted: `{since}`, {err:?}\")\n+                }))\n             } else {\n                 // Unstable const fn with the feature enabled.\n-                msrv.is_none()\n+                msrv.current().is_none()\n             }\n         })\n }"}, {"sha": "cd5dcfdaca34b64245632331bd7707c36205adcd", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -5,6 +5,7 @@\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LintContext};\n+use rustc_session::Session;\n use rustc_span::hygiene;\n use rustc_span::source_map::{original_sp, SourceMap};\n use rustc_span::{BytePos, Pos, Span, SpanData, SyntaxContext, DUMMY_SP};\n@@ -204,11 +205,20 @@ pub fn snippet_with_applicability<'a, T: LintContext>(\n     span: Span,\n     default: &'a str,\n     applicability: &mut Applicability,\n+) -> Cow<'a, str> {\n+    snippet_with_applicability_sess(cx.sess(), span, default, applicability)\n+}\n+\n+fn snippet_with_applicability_sess<'a>(\n+    sess: &Session,\n+    span: Span,\n+    default: &'a str,\n+    applicability: &mut Applicability,\n ) -> Cow<'a, str> {\n     if *applicability != Applicability::Unspecified && span.from_expansion() {\n         *applicability = Applicability::MaybeIncorrect;\n     }\n-    snippet_opt(cx, span).map_or_else(\n+    snippet_opt_sess(sess, span).map_or_else(\n         || {\n             if *applicability == Applicability::MachineApplicable {\n                 *applicability = Applicability::HasPlaceholders;\n@@ -226,8 +236,12 @@ pub fn snippet_with_macro_callsite<'a, T: LintContext>(cx: &T, span: Span, defau\n }\n \n /// Converts a span to a code snippet. Returns `None` if not available.\n-pub fn snippet_opt<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n-    cx.sess().source_map().span_to_snippet(span).ok()\n+pub fn snippet_opt(cx: &impl LintContext, span: Span) -> Option<String> {\n+    snippet_opt_sess(cx.sess(), span)\n+}\n+\n+fn snippet_opt_sess(sess: &Session, span: Span) -> Option<String> {\n+    sess.source_map().span_to_snippet(span).ok()\n }\n \n /// Converts a span (from a block) to a code snippet if available, otherwise use default.\n@@ -277,8 +291,8 @@ pub fn snippet_block<'a, T: LintContext>(\n \n /// Same as `snippet_block`, but adapts the applicability level by the rules of\n /// `snippet_with_applicability`.\n-pub fn snippet_block_with_applicability<'a, T: LintContext>(\n-    cx: &T,\n+pub fn snippet_block_with_applicability<'a>(\n+    cx: &impl LintContext,\n     span: Span,\n     default: &'a str,\n     indent_relative_to: Option<Span>,\n@@ -299,7 +313,17 @@ pub fn snippet_block_with_applicability<'a, T: LintContext>(\n ///\n /// This will also return whether or not the snippet is a macro call.\n pub fn snippet_with_context<'a>(\n-    cx: &LateContext<'_>,\n+    cx: &impl LintContext,\n+    span: Span,\n+    outer: SyntaxContext,\n+    default: &'a str,\n+    applicability: &mut Applicability,\n+) -> (Cow<'a, str>, bool) {\n+    snippet_with_context_sess(cx.sess(), span, outer, default, applicability)\n+}\n+\n+fn snippet_with_context_sess<'a>(\n+    sess: &Session,\n     span: Span,\n     outer: SyntaxContext,\n     default: &'a str,\n@@ -318,7 +342,7 @@ pub fn snippet_with_context<'a>(\n     );\n \n     (\n-        snippet_with_applicability(cx, span, default, applicability),\n+        snippet_with_applicability_sess(sess, span, default, applicability),\n         is_macro_call,\n     )\n }"}, {"sha": "b66604f33db1799d49b8fd5fb9b3ccfaa40fa1f1", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -176,25 +176,28 @@ impl<'a> Sugg<'a> {\n     }\n \n     /// Prepare a suggestion from an expression.\n-    pub fn ast(cx: &EarlyContext<'_>, expr: &ast::Expr, default: &'a str) -> Self {\n+    pub fn ast(\n+        cx: &EarlyContext<'_>,\n+        expr: &ast::Expr,\n+        default: &'a str,\n+        ctxt: SyntaxContext,\n+        app: &mut Applicability,\n+    ) -> Self {\n         use rustc_ast::ast::RangeLimits;\n \n-        let snippet_without_expansion = |cx, span: Span, default| {\n-            if span.from_expansion() {\n-                snippet_with_macro_callsite(cx, span, default)\n-            } else {\n-                snippet(cx, span, default)\n-            }\n-        };\n-\n+        #[expect(clippy::match_wildcard_for_single_variants)]\n         match expr.kind {\n+            _ if expr.span.ctxt() != ctxt => Sugg::NonParen(snippet_with_context(cx, expr.span, ctxt, default, app).0),\n             ast::ExprKind::AddrOf(..)\n             | ast::ExprKind::Box(..)\n             | ast::ExprKind::Closure { .. }\n             | ast::ExprKind::If(..)\n             | ast::ExprKind::Let(..)\n             | ast::ExprKind::Unary(..)\n-            | ast::ExprKind::Match(..) => Sugg::MaybeParen(snippet_without_expansion(cx, expr.span, default)),\n+            | ast::ExprKind::Match(..) => match snippet_with_context(cx, expr.span, ctxt, default, app) {\n+                (snip, false) => Sugg::MaybeParen(snip),\n+                (snip, true) => Sugg::NonParen(snip),\n+            },\n             ast::ExprKind::Async(..)\n             | ast::ExprKind::Block(..)\n             | ast::ExprKind::Break(..)\n@@ -224,45 +227,49 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Array(..)\n             | ast::ExprKind::While(..)\n             | ast::ExprKind::Await(..)\n-            | ast::ExprKind::Err => Sugg::NonParen(snippet_without_expansion(cx, expr.span, default)),\n+            | ast::ExprKind::Err => Sugg::NonParen(snippet_with_context(cx, expr.span, ctxt, default, app).0),\n             ast::ExprKind::Range(ref lhs, ref rhs, RangeLimits::HalfOpen) => Sugg::BinOp(\n                 AssocOp::DotDot,\n-                lhs.as_ref()\n-                    .map_or(\"\".into(), |lhs| snippet_without_expansion(cx, lhs.span, default)),\n-                rhs.as_ref()\n-                    .map_or(\"\".into(), |rhs| snippet_without_expansion(cx, rhs.span, default)),\n+                lhs.as_ref().map_or(\"\".into(), |lhs| {\n+                    snippet_with_context(cx, lhs.span, ctxt, default, app).0\n+                }),\n+                rhs.as_ref().map_or(\"\".into(), |rhs| {\n+                    snippet_with_context(cx, rhs.span, ctxt, default, app).0\n+                }),\n             ),\n             ast::ExprKind::Range(ref lhs, ref rhs, RangeLimits::Closed) => Sugg::BinOp(\n                 AssocOp::DotDotEq,\n-                lhs.as_ref()\n-                    .map_or(\"\".into(), |lhs| snippet_without_expansion(cx, lhs.span, default)),\n-                rhs.as_ref()\n-                    .map_or(\"\".into(), |rhs| snippet_without_expansion(cx, rhs.span, default)),\n+                lhs.as_ref().map_or(\"\".into(), |lhs| {\n+                    snippet_with_context(cx, lhs.span, ctxt, default, app).0\n+                }),\n+                rhs.as_ref().map_or(\"\".into(), |rhs| {\n+                    snippet_with_context(cx, rhs.span, ctxt, default, app).0\n+                }),\n             ),\n             ast::ExprKind::Assign(ref lhs, ref rhs, _) => Sugg::BinOp(\n                 AssocOp::Assign,\n-                snippet_without_expansion(cx, lhs.span, default),\n-                snippet_without_expansion(cx, rhs.span, default),\n+                snippet_with_context(cx, lhs.span, ctxt, default, app).0,\n+                snippet_with_context(cx, rhs.span, ctxt, default, app).0,\n             ),\n             ast::ExprKind::AssignOp(op, ref lhs, ref rhs) => Sugg::BinOp(\n                 astbinop2assignop(op),\n-                snippet_without_expansion(cx, lhs.span, default),\n-                snippet_without_expansion(cx, rhs.span, default),\n+                snippet_with_context(cx, lhs.span, ctxt, default, app).0,\n+                snippet_with_context(cx, rhs.span, ctxt, default, app).0,\n             ),\n             ast::ExprKind::Binary(op, ref lhs, ref rhs) => Sugg::BinOp(\n                 AssocOp::from_ast_binop(op.node),\n-                snippet_without_expansion(cx, lhs.span, default),\n-                snippet_without_expansion(cx, rhs.span, default),\n+                snippet_with_context(cx, lhs.span, ctxt, default, app).0,\n+                snippet_with_context(cx, rhs.span, ctxt, default, app).0,\n             ),\n             ast::ExprKind::Cast(ref lhs, ref ty) => Sugg::BinOp(\n                 AssocOp::As,\n-                snippet_without_expansion(cx, lhs.span, default),\n-                snippet_without_expansion(cx, ty.span, default),\n+                snippet_with_context(cx, lhs.span, ctxt, default, app).0,\n+                snippet_with_context(cx, ty.span, ctxt, default, app).0,\n             ),\n             ast::ExprKind::Type(ref lhs, ref ty) => Sugg::BinOp(\n                 AssocOp::Colon,\n-                snippet_without_expansion(cx, lhs.span, default),\n-                snippet_without_expansion(cx, ty.span, default),\n+                snippet_with_context(cx, lhs.span, ctxt, default, app).0,\n+                snippet_with_context(cx, ty.span, ctxt, default, app).0,\n             ),\n         }\n     }"}, {"sha": "bfb2d472a393cf0525955de8f38dce24e0f270b2", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -9,7 +9,10 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, FnDecl, LangItem, TyKind, Unsafety};\n-use rustc_infer::infer::{TyCtxtInferExt, type_variable::{TypeVariableOrigin, TypeVariableOriginKind}};\n+use rustc_infer::infer::{\n+    type_variable::{TypeVariableOrigin, TypeVariableOriginKind},\n+    TyCtxtInferExt,\n+};\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n@@ -189,7 +192,13 @@ pub fn implements_trait<'tcx>(\n     trait_id: DefId,\n     ty_params: &[GenericArg<'tcx>],\n ) -> bool {\n-    implements_trait_with_env(cx.tcx, cx.param_env, ty, trait_id, ty_params.iter().map(|&arg| Some(arg)))\n+    implements_trait_with_env(\n+        cx.tcx,\n+        cx.param_env,\n+        ty,\n+        trait_id,\n+        ty_params.iter().map(|&arg| Some(arg)),\n+    )\n }\n \n /// Same as `implements_trait` but allows using a `ParamEnv` different from the lint context.\n@@ -212,7 +221,11 @@ pub fn implements_trait_with_env<'tcx>(\n         kind: TypeVariableOriginKind::MiscVariable,\n         span: DUMMY_SP,\n     };\n-    let ty_params = tcx.mk_substs(ty_params.into_iter().map(|arg| arg.unwrap_or_else(|| infcx.next_ty_var(orig).into())));\n+    let ty_params = tcx.mk_substs(\n+        ty_params\n+            .into_iter()\n+            .map(|arg| arg.unwrap_or_else(|| infcx.next_ty_var(orig).into())),\n+    );\n     infcx\n         .type_implements_trait(trait_id, [ty.into()].into_iter().chain(ty_params), param_env)\n         .must_apply_modulo_regions()\n@@ -712,7 +725,9 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n                 }\n                 inputs = Some(i);\n             },\n-            PredicateKind::Clause(ty::Clause::Projection(p)) if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output() => {\n+            PredicateKind::Clause(ty::Clause::Projection(p))\n+                if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output() =>\n+            {\n                 if output.is_some() {\n                     // Multiple different fn trait impls. Is this even allowed?\n                     return None;\n@@ -992,14 +1007,12 @@ pub fn make_projection<'tcx>(\n \n             debug_assert!(\n                 generic_count == substs.len(),\n-                \"wrong number of substs for `{:?}`: found `{}` expected `{}`.\\n\\\n+                \"wrong number of substs for `{:?}`: found `{}` expected `{generic_count}`.\\n\\\n                     note: the expected parameters are: {:#?}\\n\\\n-                    the given arguments are: `{:#?}`\",\n+                    the given arguments are: `{substs:#?}`\",\n                 assoc_item.def_id,\n                 substs.len(),\n-                generic_count,\n                 params.map(ty::GenericParamDefKind::descr).collect::<Vec<_>>(),\n-                substs,\n             );\n \n             if let Some((idx, (param, arg))) = params\n@@ -1017,14 +1030,11 @@ pub fn make_projection<'tcx>(\n             {\n                 debug_assert!(\n                     false,\n-                    \"mismatched subst type at index {}: expected a {}, found `{:?}`\\n\\\n+                    \"mismatched subst type at index {idx}: expected a {}, found `{arg:?}`\\n\\\n                         note: the expected parameters are {:#?}\\n\\\n-                        the given arguments are {:#?}\",\n-                    idx,\n+                        the given arguments are {substs:#?}\",\n                     param.descr(),\n-                    arg,\n-                    params.map(ty::GenericParamDefKind::descr).collect::<Vec<_>>(),\n-                    substs,\n+                    params.map(ty::GenericParamDefKind::descr).collect::<Vec<_>>()\n                 );\n             }\n         }"}, {"sha": "863fb60fcfca1fb09aee2de418dcd9c0743d7855", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -170,36 +170,36 @@ where\n         cb: F,\n     }\n \n-    struct WithStmtGuarg<'a, F> {\n+    struct WithStmtGuard<'a, F> {\n         val: &'a mut RetFinder<F>,\n         prev_in_stmt: bool,\n     }\n \n     impl<F> RetFinder<F> {\n-        fn inside_stmt(&mut self, in_stmt: bool) -> WithStmtGuarg<'_, F> {\n+        fn inside_stmt(&mut self, in_stmt: bool) -> WithStmtGuard<'_, F> {\n             let prev_in_stmt = std::mem::replace(&mut self.in_stmt, in_stmt);\n-            WithStmtGuarg {\n+            WithStmtGuard {\n                 val: self,\n                 prev_in_stmt,\n             }\n         }\n     }\n \n-    impl<F> std::ops::Deref for WithStmtGuarg<'_, F> {\n+    impl<F> std::ops::Deref for WithStmtGuard<'_, F> {\n         type Target = RetFinder<F>;\n \n         fn deref(&self) -> &Self::Target {\n             self.val\n         }\n     }\n \n-    impl<F> std::ops::DerefMut for WithStmtGuarg<'_, F> {\n+    impl<F> std::ops::DerefMut for WithStmtGuard<'_, F> {\n         fn deref_mut(&mut self) -> &mut Self::Target {\n             self.val\n         }\n     }\n \n-    impl<F> Drop for WithStmtGuarg<'_, F> {\n+    impl<F> Drop for WithStmtGuard<'_, F> {\n         fn drop(&mut self) {\n             self.val.in_stmt = self.prev_in_stmt;\n         }"}, {"sha": "bd49f096072630309ef3b38ab333429135ef5e6f", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -120,8 +120,8 @@ impl ClippyWarning {\n             format!(\"$CARGO_HOME/{}\", stripped.display())\n         } else {\n             format!(\n-                \"target/lintcheck/sources/{}-{}/{}\",\n-                crate_name, crate_version, span.file_name\n+                \"target/lintcheck/sources/{crate_name}-{crate_version}/{}\",\n+                span.file_name\n             )\n         };\n \n@@ -322,13 +322,13 @@ impl Crate {\n \n         if config.max_jobs == 1 {\n             println!(\n-                \"{}/{} {}% Linting {} {}\",\n-                index, total_crates_to_lint, perc, &self.name, &self.version\n+                \"{index}/{total_crates_to_lint} {perc}% Linting {} {}\",\n+                &self.name, &self.version\n             );\n         } else {\n             println!(\n-                \"{}/{} {}% Linting {} {} in target dir {:?}\",\n-                index, total_crates_to_lint, perc, &self.name, &self.version, thread_index\n+                \"{index}/{total_crates_to_lint} {perc}% Linting {} {} in target dir {thread_index:?}\",\n+                &self.name, &self.version\n             );\n         }\n \n@@ -398,8 +398,7 @@ impl Crate {\n             .output()\n             .unwrap_or_else(|error| {\n                 panic!(\n-                    \"Encountered error:\\n{:?}\\ncargo_clippy_path: {}\\ncrate path:{}\\n\",\n-                    error,\n+                    \"Encountered error:\\n{error:?}\\ncargo_clippy_path: {}\\ncrate path:{}\\n\",\n                     &cargo_clippy_path.display(),\n                     &self.path.display()\n                 );"}, {"sha": "9ec4df8e651b1bf3f7756656f8548f5c2ec8e9c0", "filename": "src/driver.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,7 @@\n #![feature(rustc_private)]\n #![feature(let_chains)]\n #![feature(once_cell)]\n+#![feature(lint_reasons)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n@@ -90,6 +91,10 @@ fn track_files(parse_sess: &mut ParseSess, conf_path_string: Option<String>) {\n \n     // During development track the `clippy-driver` executable so that cargo will re-run clippy whenever\n     // it is rebuilt\n+    #[expect(\n+        clippy::collapsible_if,\n+        reason = \"Due to a bug in let_chains this if statement can't be collapsed\"\n+    )]\n     if cfg!(debug_assertions) {\n         if let Ok(current_exe) = env::current_exe()\n             && let Some(current_exe) = current_exe.to_str()"}, {"sha": "08634063a5754a775c385ff4ce4e03b48f9a556f", "filename": "tests/ui-internal/invalid_msrv_attr_impl.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-internal%2Finvalid_msrv_attr_impl.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-internal%2Finvalid_msrv_attr_impl.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_msrv_attr_impl.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -11,9 +11,9 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate rustc_session;\n use clippy_utils::extract_msrv_attr;\n+use clippy_utils::msrvs::Msrv;\n use rustc_hir::Expr;\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n \n declare_lint! {\n     pub TEST_LINT,\n@@ -22,7 +22,7 @@ declare_lint! {\n }\n \n struct Pass {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl_lint_pass!(Pass => [TEST_LINT]);"}, {"sha": "f8af77e6d395c05201895d362eedb232a7f08108", "filename": "tests/ui-internal/invalid_msrv_attr_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-internal%2Finvalid_msrv_attr_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-internal%2Finvalid_msrv_attr_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_msrv_attr_impl.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -11,9 +11,9 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate rustc_session;\n use clippy_utils::extract_msrv_attr;\n+use clippy_utils::msrvs::Msrv;\n use rustc_hir::Expr;\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n \n declare_lint! {\n     pub TEST_LINT,\n@@ -22,7 +22,7 @@ declare_lint! {\n }\n \n struct Pass {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl_lint_pass!(Pass => [TEST_LINT]);"}, {"sha": "2a240cc249b0c768f084dab5b6f220ae53a59399", "filename": "tests/ui-internal/unnecessary_def_path_hardcoded_path.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,19 +1,11 @@\n-error: hardcoded path to a language item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n-   |\n-LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"];\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: convert all references to use `LangItem::DerefMut`\n-   = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n-\n error: hardcoded path to a diagnostic item\n   --> $DIR/unnecessary_def_path_hardcoded_path.rs:10:36\n    |\n LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: convert all references to use `sym::Deref`\n+   = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n \n error: hardcoded path to a diagnostic item\n   --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n@@ -23,5 +15,13 @@ LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\",\n    |\n    = help: convert all references to use `sym::deref_method`\n \n+error: hardcoded path to a language item\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n+   |\n+LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"];\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: convert all references to use `LangItem::DerefMut`\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "b95e806aae24fa347a6d5e9c63b96e6c4c87d6da", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fclippy.toml?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -0,0 +1 @@\n+allow-mixed-uninlined-format-args = false"}, {"sha": "aa8b45b5fe7d428bbabd2af16bf8e104aa34b385", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/uninlined_format_args.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![warn(clippy::uninlined_format_args)]\n+\n+fn main() {\n+    let local_i32 = 1;\n+    let local_f64 = 2.0;\n+    let local_opt: Option<i32> = Some(3);\n+\n+    println!(\"val='{local_i32}'\");\n+    println!(\"Hello x is {local_f64:.local_i32$}\");\n+    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+    println!(\"{local_i32}, {}\", local_opt.unwrap());\n+}"}, {"sha": "ad2e4863ee8ed3ee5dfa4e05e10889e80ace2a42", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/uninlined_format_args.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![warn(clippy::uninlined_format_args)]\n+\n+fn main() {\n+    let local_i32 = 1;\n+    let local_f64 = 2.0;\n+    let local_opt: Option<i32> = Some(3);\n+\n+    println!(\"val='{}'\", local_i32);\n+    println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+    println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+    println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n+    println!(\"{}, {}\", local_i32, local_opt.unwrap());\n+}"}, {"sha": "ee941762196151209d43f978516dc2024801d0ed", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/uninlined_format_args.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -0,0 +1,76 @@\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:9:5\n+   |\n+LL |     println!(\"val='{}'\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::uninlined-format-args` implied by `-D warnings`\n+help: change this to\n+   |\n+LL -     println!(\"val='{}'\", local_i32);\n+LL +     println!(\"val='{local_i32}'\");\n+   |\n+\n+error: literal with an empty format string\n+  --> $DIR/uninlined_format_args.rs:10:35\n+   |\n+LL |     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+   |                                   ^^^\n+   |\n+   = note: `-D clippy::print-literal` implied by `-D warnings`\n+help: try this\n+   |\n+LL -     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+LL +     println!(\"Hello x is {:.*}\", local_i32, local_f64);\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:10:5\n+   |\n+LL |     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+LL +     println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:11:5\n+   |\n+LL |     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:12:5\n+   |\n+LL |     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n+LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:13:5\n+   |\n+LL |     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n+LL +     println!(\"{local_i32}, {}\", local_opt.unwrap());\n+   |\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "01a5e962c9491ea0d52cd89707f4c1d3c3ec4e74", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,7 @@\n error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of\n            allow-dbg-in-tests\n            allow-expect-in-tests\n+           allow-mixed-uninlined-format-args\n            allow-print-in-tests\n            allow-unwrap-in-tests\n            allowed-scripts"}, {"sha": "adcbd4d5134d340180d994835720ee39ec11a9af", "filename": "tests/ui/almost_complete_letter_range.fixed", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Falmost_complete_letter_range.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Falmost_complete_letter_range.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -2,7 +2,6 @@\n // edition:2018\n // aux-build:macro_rules.rs\n \n-#![feature(custom_inner_attributes)]\n #![feature(exclusive_range_pattern)]\n #![feature(stmt_expr_attributes)]\n #![warn(clippy::almost_complete_letter_range)]\n@@ -62,16 +61,16 @@ fn main() {\n     b!();\n }\n \n+#[clippy::msrv = \"1.25\"]\n fn _under_msrv() {\n-    #![clippy::msrv = \"1.25\"]\n     let _ = match 'a' {\n         'a'...'z' => 1,\n         _ => 2,\n     };\n }\n \n+#[clippy::msrv = \"1.26\"]\n fn _meets_msrv() {\n-    #![clippy::msrv = \"1.26\"]\n     let _ = 'a'..='z';\n     let _ = match 'a' {\n         'a'..='z' => 1,"}, {"sha": "9979316eca4290a4d6718cb17182b112c7760257", "filename": "tests/ui/almost_complete_letter_range.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -2,7 +2,6 @@\n // edition:2018\n // aux-build:macro_rules.rs\n \n-#![feature(custom_inner_attributes)]\n #![feature(exclusive_range_pattern)]\n #![feature(stmt_expr_attributes)]\n #![warn(clippy::almost_complete_letter_range)]\n@@ -62,16 +61,16 @@ fn main() {\n     b!();\n }\n \n+#[clippy::msrv = \"1.25\"]\n fn _under_msrv() {\n-    #![clippy::msrv = \"1.25\"]\n     let _ = match 'a' {\n         'a'..'z' => 1,\n         _ => 2,\n     };\n }\n \n+#[clippy::msrv = \"1.26\"]\n fn _meets_msrv() {\n-    #![clippy::msrv = \"1.26\"]\n     let _ = 'a'..'z';\n     let _ = match 'a' {\n         'a'..'z' => 1,"}, {"sha": "9abf6d6c5e7d00c4fea180c6219eb7a3804a4cc2", "filename": "tests/ui/almost_complete_letter_range.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Falmost_complete_letter_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Falmost_complete_letter_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:30:17\n+  --> $DIR/almost_complete_letter_range.rs:29:17\n    |\n LL |         let _ = ('a') ..'z';\n    |                 ^^^^^^--^^^\n@@ -9,71 +9,71 @@ LL |         let _ = ('a') ..'z';\n    = note: `-D clippy::almost-complete-letter-range` implied by `-D warnings`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:31:17\n+  --> $DIR/almost_complete_letter_range.rs:30:17\n    |\n LL |         let _ = 'A' .. ('Z');\n    |                 ^^^^--^^^^^^\n    |                     |\n    |                     help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:37:13\n+  --> $DIR/almost_complete_letter_range.rs:36:13\n    |\n LL |     let _ = (b'a')..(b'z');\n    |             ^^^^^^--^^^^^^\n    |                   |\n    |                   help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:38:13\n+  --> $DIR/almost_complete_letter_range.rs:37:13\n    |\n LL |     let _ = b'A'..b'Z';\n    |             ^^^^--^^^^\n    |                 |\n    |                 help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:43:13\n+  --> $DIR/almost_complete_letter_range.rs:42:13\n    |\n LL |     let _ = a!()..'z';\n    |             ^^^^--^^^\n    |                 |\n    |                 help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:46:9\n+  --> $DIR/almost_complete_letter_range.rs:45:9\n    |\n LL |         b'a'..b'z' if true => 1,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:47:9\n+  --> $DIR/almost_complete_letter_range.rs:46:9\n    |\n LL |         b'A'..b'Z' if true => 2,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:54:9\n+  --> $DIR/almost_complete_letter_range.rs:53:9\n    |\n LL |         'a'..'z' if true => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:55:9\n+  --> $DIR/almost_complete_letter_range.rs:54:9\n    |\n LL |         'A'..'Z' if true => 2,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:23:17\n+  --> $DIR/almost_complete_letter_range.rs:22:17\n    |\n LL |         let _ = 'a'..'z';\n    |                 ^^^--^^^\n@@ -86,23 +86,23 @@ LL |     b!();\n    = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:68:9\n+  --> $DIR/almost_complete_letter_range.rs:67:9\n    |\n LL |         'a'..'z' => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `...`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:75:13\n+  --> $DIR/almost_complete_letter_range.rs:74:13\n    |\n LL |     let _ = 'a'..'z';\n    |             ^^^--^^^\n    |                |\n    |                help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:77:9\n+  --> $DIR/almost_complete_letter_range.rs:76:9\n    |\n LL |         'a'..'z' => 1,\n    |         ^^^--^^^"}, {"sha": "8676b562b4f9e864611d290253895122f2e9bf42", "filename": "tests/ui/cast_abs_to_unsigned.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcast_abs_to_unsigned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcast_abs_to_unsigned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::cast_abs_to_unsigned)]\n #![allow(clippy::uninlined_format_args, unused)]\n \n@@ -33,16 +32,14 @@ fn main() {\n     let _ = (x as i64 - y as i64).unsigned_abs() as u32;\n }\n \n+#[clippy::msrv = \"1.50\"]\n fn msrv_1_50() {\n-    #![clippy::msrv = \"1.50\"]\n-\n     let x: i32 = 10;\n     assert_eq!(10u32, x.abs() as u32);\n }\n \n+#[clippy::msrv = \"1.51\"]\n fn msrv_1_51() {\n-    #![clippy::msrv = \"1.51\"]\n-\n     let x: i32 = 10;\n     assert_eq!(10u32, x.unsigned_abs());\n }"}, {"sha": "5775af874f8fcec64593fd0915d92202f7f98238", "filename": "tests/ui/cast_abs_to_unsigned.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::cast_abs_to_unsigned)]\n #![allow(clippy::uninlined_format_args, unused)]\n \n@@ -33,16 +32,14 @@ fn main() {\n     let _ = (x as i64 - y as i64).abs() as u32;\n }\n \n+#[clippy::msrv = \"1.50\"]\n fn msrv_1_50() {\n-    #![clippy::msrv = \"1.50\"]\n-\n     let x: i32 = 10;\n     assert_eq!(10u32, x.abs() as u32);\n }\n \n+#[clippy::msrv = \"1.51\"]\n fn msrv_1_51() {\n-    #![clippy::msrv = \"1.51\"]\n-\n     let x: i32 = 10;\n     assert_eq!(10u32, x.abs() as u32);\n }"}, {"sha": "4668554f4511c2bfc2320d261b883dfcfd7c1636", "filename": "tests/ui/cast_abs_to_unsigned.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcast_abs_to_unsigned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcast_abs_to_unsigned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,109 +1,109 @@\n error: casting the result of `i32::abs()` to u32\n-  --> $DIR/cast_abs_to_unsigned.rs:9:18\n+  --> $DIR/cast_abs_to_unsigned.rs:8:18\n    |\n LL |     let y: u32 = x.abs() as u32;\n    |                  ^^^^^^^^^^^^^^ help: replace with: `x.unsigned_abs()`\n    |\n    = note: `-D clippy::cast-abs-to-unsigned` implied by `-D warnings`\n \n error: casting the result of `i32::abs()` to usize\n-  --> $DIR/cast_abs_to_unsigned.rs:13:20\n+  --> $DIR/cast_abs_to_unsigned.rs:12:20\n    |\n LL |     let _: usize = a.abs() as usize;\n    |                    ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i32::abs()` to usize\n-  --> $DIR/cast_abs_to_unsigned.rs:14:20\n+  --> $DIR/cast_abs_to_unsigned.rs:13:20\n    |\n LL |     let _: usize = a.abs() as _;\n    |                    ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i32::abs()` to usize\n-  --> $DIR/cast_abs_to_unsigned.rs:15:13\n+  --> $DIR/cast_abs_to_unsigned.rs:14:13\n    |\n LL |     let _ = a.abs() as usize;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to usize\n-  --> $DIR/cast_abs_to_unsigned.rs:18:13\n+  --> $DIR/cast_abs_to_unsigned.rs:17:13\n    |\n LL |     let _ = a.abs() as usize;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to u8\n-  --> $DIR/cast_abs_to_unsigned.rs:19:13\n+  --> $DIR/cast_abs_to_unsigned.rs:18:13\n    |\n LL |     let _ = a.abs() as u8;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to u16\n-  --> $DIR/cast_abs_to_unsigned.rs:20:13\n+  --> $DIR/cast_abs_to_unsigned.rs:19:13\n    |\n LL |     let _ = a.abs() as u16;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to u32\n-  --> $DIR/cast_abs_to_unsigned.rs:21:13\n+  --> $DIR/cast_abs_to_unsigned.rs:20:13\n    |\n LL |     let _ = a.abs() as u32;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to u64\n-  --> $DIR/cast_abs_to_unsigned.rs:22:13\n+  --> $DIR/cast_abs_to_unsigned.rs:21:13\n    |\n LL |     let _ = a.abs() as u64;\n    |             ^^^^^^^^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to u128\n-  --> $DIR/cast_abs_to_unsigned.rs:23:13\n+  --> $DIR/cast_abs_to_unsigned.rs:22:13\n    |\n LL |     let _ = a.abs() as u128;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `isize::abs()` to usize\n-  --> $DIR/cast_abs_to_unsigned.rs:26:13\n+  --> $DIR/cast_abs_to_unsigned.rs:25:13\n    |\n LL |     let _ = a.abs() as usize;\n    |             ^^^^^^^^^^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `isize::abs()` to u8\n-  --> $DIR/cast_abs_to_unsigned.rs:27:13\n+  --> $DIR/cast_abs_to_unsigned.rs:26:13\n    |\n LL |     let _ = a.abs() as u8;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `isize::abs()` to u16\n-  --> $DIR/cast_abs_to_unsigned.rs:28:13\n+  --> $DIR/cast_abs_to_unsigned.rs:27:13\n    |\n LL |     let _ = a.abs() as u16;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `isize::abs()` to u32\n-  --> $DIR/cast_abs_to_unsigned.rs:29:13\n+  --> $DIR/cast_abs_to_unsigned.rs:28:13\n    |\n LL |     let _ = a.abs() as u32;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `isize::abs()` to u64\n-  --> $DIR/cast_abs_to_unsigned.rs:30:13\n+  --> $DIR/cast_abs_to_unsigned.rs:29:13\n    |\n LL |     let _ = a.abs() as u64;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `isize::abs()` to u128\n-  --> $DIR/cast_abs_to_unsigned.rs:31:13\n+  --> $DIR/cast_abs_to_unsigned.rs:30:13\n    |\n LL |     let _ = a.abs() as u128;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to u32\n-  --> $DIR/cast_abs_to_unsigned.rs:33:13\n+  --> $DIR/cast_abs_to_unsigned.rs:32:13\n    |\n LL |     let _ = (x as i64 - y as i64).abs() as u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `(x as i64 - y as i64).unsigned_abs()`\n \n error: casting the result of `i32::abs()` to u32\n-  --> $DIR/cast_abs_to_unsigned.rs:47:23\n+  --> $DIR/cast_abs_to_unsigned.rs:44:23\n    |\n LL |     assert_eq!(10u32, x.abs() as u32);\n    |                       ^^^^^^^^^^^^^^ help: replace with: `x.unsigned_abs()`"}, {"sha": "13b3cf838c9f02c2a75ee76b362670a416e945a0", "filename": "tests/ui/cast_lossless_bool.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcast_lossless_bool.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcast_lossless_bool.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(dead_code)]\n #![warn(clippy::cast_lossless)]\n \n@@ -42,14 +41,12 @@ mod cast_lossless_in_impl {\n     }\n }\n \n+#[clippy::msrv = \"1.27\"]\n fn msrv_1_27() {\n-    #![clippy::msrv = \"1.27\"]\n-\n     let _ = true as u8;\n }\n \n+#[clippy::msrv = \"1.28\"]\n fn msrv_1_28() {\n-    #![clippy::msrv = \"1.28\"]\n-\n     let _ = u8::from(true);\n }"}, {"sha": "3eed2135562c8b7c3de500699b97cb06aa3ea50f", "filename": "tests/ui/cast_lossless_bool.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcast_lossless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcast_lossless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(dead_code)]\n #![warn(clippy::cast_lossless)]\n \n@@ -42,14 +41,12 @@ mod cast_lossless_in_impl {\n     }\n }\n \n+#[clippy::msrv = \"1.27\"]\n fn msrv_1_27() {\n-    #![clippy::msrv = \"1.27\"]\n-\n     let _ = true as u8;\n }\n \n+#[clippy::msrv = \"1.28\"]\n fn msrv_1_28() {\n-    #![clippy::msrv = \"1.28\"]\n-\n     let _ = true as u8;\n }"}, {"sha": "ce240b70f891d2624c0a7a1c4ec255106a12a68f", "filename": "tests/ui/cast_lossless_bool.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcast_lossless_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcast_lossless_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,85 +1,85 @@\n error: casting `bool` to `u8` is more cleanly stated with `u8::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:9:13\n+  --> $DIR/cast_lossless_bool.rs:8:13\n    |\n LL |     let _ = true as u8;\n    |             ^^^^^^^^^^ help: try: `u8::from(true)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting `bool` to `u16` is more cleanly stated with `u16::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:10:13\n+  --> $DIR/cast_lossless_bool.rs:9:13\n    |\n LL |     let _ = true as u16;\n    |             ^^^^^^^^^^^ help: try: `u16::from(true)`\n \n error: casting `bool` to `u32` is more cleanly stated with `u32::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:11:13\n+  --> $DIR/cast_lossless_bool.rs:10:13\n    |\n LL |     let _ = true as u32;\n    |             ^^^^^^^^^^^ help: try: `u32::from(true)`\n \n error: casting `bool` to `u64` is more cleanly stated with `u64::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:12:13\n+  --> $DIR/cast_lossless_bool.rs:11:13\n    |\n LL |     let _ = true as u64;\n    |             ^^^^^^^^^^^ help: try: `u64::from(true)`\n \n error: casting `bool` to `u128` is more cleanly stated with `u128::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:13:13\n+  --> $DIR/cast_lossless_bool.rs:12:13\n    |\n LL |     let _ = true as u128;\n    |             ^^^^^^^^^^^^ help: try: `u128::from(true)`\n \n error: casting `bool` to `usize` is more cleanly stated with `usize::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:14:13\n+  --> $DIR/cast_lossless_bool.rs:13:13\n    |\n LL |     let _ = true as usize;\n    |             ^^^^^^^^^^^^^ help: try: `usize::from(true)`\n \n error: casting `bool` to `i8` is more cleanly stated with `i8::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:16:13\n+  --> $DIR/cast_lossless_bool.rs:15:13\n    |\n LL |     let _ = true as i8;\n    |             ^^^^^^^^^^ help: try: `i8::from(true)`\n \n error: casting `bool` to `i16` is more cleanly stated with `i16::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:17:13\n+  --> $DIR/cast_lossless_bool.rs:16:13\n    |\n LL |     let _ = true as i16;\n    |             ^^^^^^^^^^^ help: try: `i16::from(true)`\n \n error: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:18:13\n+  --> $DIR/cast_lossless_bool.rs:17:13\n    |\n LL |     let _ = true as i32;\n    |             ^^^^^^^^^^^ help: try: `i32::from(true)`\n \n error: casting `bool` to `i64` is more cleanly stated with `i64::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:19:13\n+  --> $DIR/cast_lossless_bool.rs:18:13\n    |\n LL |     let _ = true as i64;\n    |             ^^^^^^^^^^^ help: try: `i64::from(true)`\n \n error: casting `bool` to `i128` is more cleanly stated with `i128::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:20:13\n+  --> $DIR/cast_lossless_bool.rs:19:13\n    |\n LL |     let _ = true as i128;\n    |             ^^^^^^^^^^^^ help: try: `i128::from(true)`\n \n error: casting `bool` to `isize` is more cleanly stated with `isize::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:21:13\n+  --> $DIR/cast_lossless_bool.rs:20:13\n    |\n LL |     let _ = true as isize;\n    |             ^^^^^^^^^^^^^ help: try: `isize::from(true)`\n \n error: casting `bool` to `u16` is more cleanly stated with `u16::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:24:13\n+  --> $DIR/cast_lossless_bool.rs:23:13\n    |\n LL |     let _ = (true | false) as u16;\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::from(true | false)`\n \n error: casting `bool` to `u8` is more cleanly stated with `u8::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:54:13\n+  --> $DIR/cast_lossless_bool.rs:51:13\n    |\n LL |     let _ = true as u8;\n    |             ^^^^^^^^^^ help: try: `u8::from(true)`"}, {"sha": "b970b1209b6546a90fb05658810e029a06a6f8a5", "filename": "tests/ui/cfg_attr_rustfmt.fixed", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcfg_attr_rustfmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcfg_attr_rustfmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg_attr_rustfmt.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![feature(stmt_expr_attributes, custom_inner_attributes)]\n+#![feature(stmt_expr_attributes)]\n \n #![allow(unused, clippy::no_effect, clippy::unnecessary_operation)]\n #![warn(clippy::deprecated_cfg_attr)]\n@@ -30,16 +30,14 @@ mod foo {\n     pub fn f() {}\n }\n \n+#[clippy::msrv = \"1.29\"]\n fn msrv_1_29() {\n-    #![clippy::msrv = \"1.29\"]\n-\n     #[cfg_attr(rustfmt, rustfmt::skip)]\n     1+29;\n }\n \n+#[clippy::msrv = \"1.30\"]\n fn msrv_1_30() {\n-    #![clippy::msrv = \"1.30\"]\n-\n     #[rustfmt::skip]\n     1+30;\n }"}, {"sha": "0a8e6a89d8a0f510a162fbe9ca3d6dcedd028c7d", "filename": "tests/ui/cfg_attr_rustfmt.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcfg_attr_rustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcfg_attr_rustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg_attr_rustfmt.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![feature(stmt_expr_attributes, custom_inner_attributes)]\n+#![feature(stmt_expr_attributes)]\n \n #![allow(unused, clippy::no_effect, clippy::unnecessary_operation)]\n #![warn(clippy::deprecated_cfg_attr)]\n@@ -30,16 +30,14 @@ mod foo {\n     pub fn f() {}\n }\n \n+#[clippy::msrv = \"1.29\"]\n fn msrv_1_29() {\n-    #![clippy::msrv = \"1.29\"]\n-\n     #[cfg_attr(rustfmt, rustfmt::skip)]\n     1+29;\n }\n \n+#[clippy::msrv = \"1.30\"]\n fn msrv_1_30() {\n-    #![clippy::msrv = \"1.30\"]\n-\n     #[cfg_attr(rustfmt, rustfmt::skip)]\n     1+30;\n }"}, {"sha": "524a2bf72484bf1d4a0d1a13dc791cd31385fb4b", "filename": "tests/ui/cfg_attr_rustfmt.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcfg_attr_rustfmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcfg_attr_rustfmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg_attr_rustfmt.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -13,7 +13,7 @@ LL | #[cfg_attr(rustfmt, rustfmt_skip)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `#[rustfmt::skip]`\n \n error: `cfg_attr` is deprecated for rustfmt and got replaced by tool attributes\n-  --> $DIR/cfg_attr_rustfmt.rs:43:5\n+  --> $DIR/cfg_attr_rustfmt.rs:41:5\n    |\n LL |     #[cfg_attr(rustfmt, rustfmt::skip)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `#[rustfmt::skip]`"}, {"sha": "e279ba3147bba3420159b3cccb6a0bc5181efda0", "filename": "tests/ui/checked_conversions.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fchecked_conversions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fchecked_conversions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(\n     clippy::cast_lossless,\n     unused,\n@@ -78,16 +77,14 @@ pub const fn issue_8898(i: u32) -> bool {\n     i <= i32::MAX as u32\n }\n \n+#[clippy::msrv = \"1.33\"]\n fn msrv_1_33() {\n-    #![clippy::msrv = \"1.33\"]\n-\n     let value: i64 = 33;\n     let _ = value <= (u32::MAX as i64) && value >= 0;\n }\n \n+#[clippy::msrv = \"1.34\"]\n fn msrv_1_34() {\n-    #![clippy::msrv = \"1.34\"]\n-\n     let value: i64 = 34;\n     let _ = u32::try_from(value).is_ok();\n }"}, {"sha": "9d7a40995c3735b82daecc483e1d566c40a8709e", "filename": "tests/ui/checked_conversions.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(\n     clippy::cast_lossless,\n     unused,\n@@ -78,16 +77,14 @@ pub const fn issue_8898(i: u32) -> bool {\n     i <= i32::MAX as u32\n }\n \n+#[clippy::msrv = \"1.33\"]\n fn msrv_1_33() {\n-    #![clippy::msrv = \"1.33\"]\n-\n     let value: i64 = 33;\n     let _ = value <= (u32::MAX as i64) && value >= 0;\n }\n \n+#[clippy::msrv = \"1.34\"]\n fn msrv_1_34() {\n-    #![clippy::msrv = \"1.34\"]\n-\n     let value: i64 = 34;\n     let _ = value <= (u32::MAX as i64) && value >= 0;\n }"}, {"sha": "273ead73bda580a27607ef7362eb3654c06efe10", "filename": "tests/ui/checked_conversions.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fchecked_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fchecked_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,103 +1,103 @@\n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:17:13\n+  --> $DIR/checked_conversions.rs:16:13\n    |\n LL |     let _ = value <= (u32::max_value() as i64) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n    |\n    = note: `-D clippy::checked-conversions` implied by `-D warnings`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:18:13\n+  --> $DIR/checked_conversions.rs:17:13\n    |\n LL |     let _ = value <= (u32::MAX as i64) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:22:13\n+  --> $DIR/checked_conversions.rs:21:13\n    |\n LL |     let _ = value <= i64::from(u16::max_value()) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:23:13\n+  --> $DIR/checked_conversions.rs:22:13\n    |\n LL |     let _ = value <= i64::from(u16::MAX) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:27:13\n+  --> $DIR/checked_conversions.rs:26:13\n    |\n LL |     let _ = value <= (u8::max_value() as isize) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:28:13\n+  --> $DIR/checked_conversions.rs:27:13\n    |\n LL |     let _ = value <= (u8::MAX as isize) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:34:13\n+  --> $DIR/checked_conversions.rs:33:13\n    |\n LL |     let _ = value <= (i32::max_value() as i64) && value >= (i32::min_value() as i64);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:35:13\n+  --> $DIR/checked_conversions.rs:34:13\n    |\n LL |     let _ = value <= (i32::MAX as i64) && value >= (i32::MIN as i64);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:39:13\n+  --> $DIR/checked_conversions.rs:38:13\n    |\n LL |     let _ = value <= i64::from(i16::max_value()) && value >= i64::from(i16::min_value());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:40:13\n+  --> $DIR/checked_conversions.rs:39:13\n    |\n LL |     let _ = value <= i64::from(i16::MAX) && value >= i64::from(i16::MIN);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:46:13\n+  --> $DIR/checked_conversions.rs:45:13\n    |\n LL |     let _ = value <= i32::max_value() as u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:47:13\n+  --> $DIR/checked_conversions.rs:46:13\n    |\n LL |     let _ = value <= i32::MAX as u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:51:13\n+  --> $DIR/checked_conversions.rs:50:13\n    |\n LL |     let _ = value <= isize::max_value() as usize && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:52:13\n+  --> $DIR/checked_conversions.rs:51:13\n    |\n LL |     let _ = value <= isize::MAX as usize && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:56:13\n+  --> $DIR/checked_conversions.rs:55:13\n    |\n LL |     let _ = value <= u16::max_value() as u32 && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:57:13\n+  --> $DIR/checked_conversions.rs:56:13\n    |\n LL |     let _ = value <= u16::MAX as u32 && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:92:13\n+  --> $DIR/checked_conversions.rs:89:13\n    |\n LL |     let _ = value <= (u32::MAX as i64) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`"}, {"sha": "ecbfc1feedf62f4f1a8d812bb270d9b9193719cb", "filename": "tests/ui/cloned_instead_of_copied.fixed", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcloned_instead_of_copied.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcloned_instead_of_copied.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcloned_instead_of_copied.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::cloned_instead_of_copied)]\n #![allow(unused)]\n \n@@ -17,23 +16,20 @@ fn main() {\n     let _ = Some(&String::new()).cloned();\n }\n \n+#[clippy::msrv = \"1.34\"]\n fn msrv_1_34() {\n-    #![clippy::msrv = \"1.34\"]\n-\n     let _ = [1].iter().cloned();\n     let _ = Some(&1).cloned();\n }\n \n+#[clippy::msrv = \"1.35\"]\n fn msrv_1_35() {\n-    #![clippy::msrv = \"1.35\"]\n-\n     let _ = [1].iter().cloned();\n     let _ = Some(&1).copied(); // Option::copied needs 1.35\n }\n \n+#[clippy::msrv = \"1.36\"]\n fn msrv_1_36() {\n-    #![clippy::msrv = \"1.36\"]\n-\n     let _ = [1].iter().copied(); // Iterator::copied needs 1.36\n     let _ = Some(&1).copied();\n }"}, {"sha": "163dc3dddce62de3e9d452c0bcc3fa0983196864", "filename": "tests/ui/cloned_instead_of_copied.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcloned_instead_of_copied.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::cloned_instead_of_copied)]\n #![allow(unused)]\n \n@@ -17,23 +16,20 @@ fn main() {\n     let _ = Some(&String::new()).cloned();\n }\n \n+#[clippy::msrv = \"1.34\"]\n fn msrv_1_34() {\n-    #![clippy::msrv = \"1.34\"]\n-\n     let _ = [1].iter().cloned();\n     let _ = Some(&1).cloned();\n }\n \n+#[clippy::msrv = \"1.35\"]\n fn msrv_1_35() {\n-    #![clippy::msrv = \"1.35\"]\n-\n     let _ = [1].iter().cloned();\n     let _ = Some(&1).cloned(); // Option::copied needs 1.35\n }\n \n+#[clippy::msrv = \"1.36\"]\n fn msrv_1_36() {\n-    #![clippy::msrv = \"1.36\"]\n-\n     let _ = [1].iter().cloned(); // Iterator::copied needs 1.36\n     let _ = Some(&1).cloned();\n }"}, {"sha": "e0361acd956072d53a704a40f10dd3de1b998f20", "filename": "tests/ui/cloned_instead_of_copied.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcloned_instead_of_copied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fcloned_instead_of_copied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcloned_instead_of_copied.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,49 +1,49 @@\n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:9:24\n+  --> $DIR/cloned_instead_of_copied.rs:8:24\n    |\n LL |     let _ = [1].iter().cloned();\n    |                        ^^^^^^ help: try: `copied`\n    |\n    = note: `-D clippy::cloned-instead-of-copied` implied by `-D warnings`\n \n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:10:31\n+  --> $DIR/cloned_instead_of_copied.rs:9:31\n    |\n LL |     let _ = vec![\"hi\"].iter().cloned();\n    |                               ^^^^^^ help: try: `copied`\n \n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:11:22\n+  --> $DIR/cloned_instead_of_copied.rs:10:22\n    |\n LL |     let _ = Some(&1).cloned();\n    |                      ^^^^^^ help: try: `copied`\n \n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:12:34\n+  --> $DIR/cloned_instead_of_copied.rs:11:34\n    |\n LL |     let _ = Box::new([1].iter()).cloned();\n    |                                  ^^^^^^ help: try: `copied`\n \n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:13:32\n+  --> $DIR/cloned_instead_of_copied.rs:12:32\n    |\n LL |     let _ = Box::new(Some(&1)).cloned();\n    |                                ^^^^^^ help: try: `copied`\n \n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:31:22\n+  --> $DIR/cloned_instead_of_copied.rs:28:22\n    |\n LL |     let _ = Some(&1).cloned(); // Option::copied needs 1.35\n    |                      ^^^^^^ help: try: `copied`\n \n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:37:24\n+  --> $DIR/cloned_instead_of_copied.rs:33:24\n    |\n LL |     let _ = [1].iter().cloned(); // Iterator::copied needs 1.36\n    |                        ^^^^^^ help: try: `copied`\n \n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:38:22\n+  --> $DIR/cloned_instead_of_copied.rs:34:22\n    |\n LL |     let _ = Some(&1).cloned();\n    |                      ^^^^^^ help: try: `copied`"}, {"sha": "c629c0e535377ebf1b2e05ccd96c2a62fb8923dc", "filename": "tests/ui/derive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,7 +1,6 @@\n #![allow(dead_code)]\n #![warn(clippy::expl_impl_clone_on_copy)]\n \n-\n #[derive(Copy)]\n struct Qux;\n "}, {"sha": "d37f7fa73319679e97a2c61f67cfae6cd3eee762", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:8:1\n+  --> $DIR/derive.rs:7:1\n    |\n LL | / impl Clone for Qux {\n LL | |     fn clone(&self) -> Self {\n@@ -9,7 +9,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:8:1\n+  --> $DIR/derive.rs:7:1\n    |\n LL | / impl Clone for Qux {\n LL | |     fn clone(&self) -> Self {\n@@ -20,7 +20,7 @@ LL | | }\n    = note: `-D clippy::expl-impl-clone-on-copy` implied by `-D warnings`\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:32:1\n+  --> $DIR/derive.rs:31:1\n    |\n LL | / impl<'a> Clone for Lt<'a> {\n LL | |     fn clone(&self) -> Self {\n@@ -30,7 +30,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:32:1\n+  --> $DIR/derive.rs:31:1\n    |\n LL | / impl<'a> Clone for Lt<'a> {\n LL | |     fn clone(&self) -> Self {\n@@ -40,7 +40,7 @@ LL | | }\n    | |_^\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:43:1\n+  --> $DIR/derive.rs:42:1\n    |\n LL | / impl Clone for BigArray {\n LL | |     fn clone(&self) -> Self {\n@@ -50,7 +50,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:43:1\n+  --> $DIR/derive.rs:42:1\n    |\n LL | / impl Clone for BigArray {\n LL | |     fn clone(&self) -> Self {\n@@ -60,7 +60,7 @@ LL | | }\n    | |_^\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:54:1\n+  --> $DIR/derive.rs:53:1\n    |\n LL | / impl Clone for FnPtr {\n LL | |     fn clone(&self) -> Self {\n@@ -70,7 +70,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:54:1\n+  --> $DIR/derive.rs:53:1\n    |\n LL | / impl Clone for FnPtr {\n LL | |     fn clone(&self) -> Self {\n@@ -80,7 +80,7 @@ LL | | }\n    | |_^\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:74:1\n+  --> $DIR/derive.rs:73:1\n    |\n LL | / impl<T: Clone> Clone for Generic2<T> {\n LL | |     fn clone(&self) -> Self {\n@@ -90,7 +90,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:74:1\n+  --> $DIR/derive.rs:73:1\n    |\n LL | / impl<T: Clone> Clone for Generic2<T> {\n LL | |     fn clone(&self) -> Self {"}, {"sha": "b63cbd8a8e6bde03c72dde203720fa44646f548f", "filename": "tests/ui/err_expect.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ferr_expect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ferr_expect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferr_expect.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(unused)]\n \n struct MyTypeNonDebug;\n@@ -16,16 +15,14 @@ fn main() {\n     test_non_debug.err().expect(\"Testing non debug type\");\n }\n \n+#[clippy::msrv = \"1.16\"]\n fn msrv_1_16() {\n-    #![clippy::msrv = \"1.16\"]\n-\n     let x: Result<u32, &str> = Ok(16);\n     x.err().expect(\"16\");\n }\n \n+#[clippy::msrv = \"1.17\"]\n fn msrv_1_17() {\n-    #![clippy::msrv = \"1.17\"]\n-\n     let x: Result<u32, &str> = Ok(17);\n     x.expect_err(\"17\");\n }"}, {"sha": "c081a745fb4069b9809a25ab53a2622c40d0ed69", "filename": "tests/ui/err_expect.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ferr_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ferr_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferr_expect.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(unused)]\n \n struct MyTypeNonDebug;\n@@ -16,16 +15,14 @@ fn main() {\n     test_non_debug.err().expect(\"Testing non debug type\");\n }\n \n+#[clippy::msrv = \"1.16\"]\n fn msrv_1_16() {\n-    #![clippy::msrv = \"1.16\"]\n-\n     let x: Result<u32, &str> = Ok(16);\n     x.err().expect(\"16\");\n }\n \n+#[clippy::msrv = \"1.17\"]\n fn msrv_1_17() {\n-    #![clippy::msrv = \"1.17\"]\n-\n     let x: Result<u32, &str> = Ok(17);\n     x.err().expect(\"17\");\n }"}, {"sha": "82c0754cfb00b20ff49202cf9f5510284edf83cf", "filename": "tests/ui/err_expect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ferr_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ferr_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferr_expect.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,13 +1,13 @@\n error: called `.err().expect()` on a `Result` value\n-  --> $DIR/err_expect.rs:13:16\n+  --> $DIR/err_expect.rs:12:16\n    |\n LL |     test_debug.err().expect(\"Testing debug type\");\n    |                ^^^^^^^^^^^^ help: try: `expect_err`\n    |\n    = note: `-D clippy::err-expect` implied by `-D warnings`\n \n error: called `.err().expect()` on a `Result` value\n-  --> $DIR/err_expect.rs:30:7\n+  --> $DIR/err_expect.rs:27:7\n    |\n LL |     x.err().expect(\"17\");\n    |       ^^^^^^^^^^^^ help: try: `expect_err`"}, {"sha": "dc129591eac4eb7e4f9e96f9dc64f739acfad0b6", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -316,3 +316,25 @@ pub fn mutable_impl_fn_mut(mut f: impl FnMut(), mut f_used_once: impl FnMut()) -\n \n     move || takes_fn_mut(&mut f_used_once)\n }\n+\n+impl dyn TestTrait + '_ {\n+    fn method_on_dyn(&self) -> bool {\n+        false\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7746\n+fn angle_brackets_and_substs() {\n+    let array_opt: Option<&[u8; 3]> = Some(&[4, 8, 7]);\n+    array_opt.map(<[u8; 3]>::as_slice);\n+\n+    let slice_opt: Option<&[u8]> = Some(b\"slice\");\n+    slice_opt.map(<[u8]>::len);\n+\n+    let ptr_opt: Option<*const usize> = Some(&487);\n+    ptr_opt.map(<*const usize>::is_null);\n+\n+    let test_struct = TestStruct { some_ref: &487 };\n+    let dyn_opt: Option<&dyn TestTrait> = Some(&test_struct);\n+    dyn_opt.map(<dyn TestTrait>::method_on_dyn);\n+}"}, {"sha": "025fd6a0b7afdf1f5995c0a9d38f314d28efbb3c", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -316,3 +316,25 @@ pub fn mutable_impl_fn_mut(mut f: impl FnMut(), mut f_used_once: impl FnMut()) -\n \n     move || takes_fn_mut(|| f_used_once())\n }\n+\n+impl dyn TestTrait + '_ {\n+    fn method_on_dyn(&self) -> bool {\n+        false\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7746\n+fn angle_brackets_and_substs() {\n+    let array_opt: Option<&[u8; 3]> = Some(&[4, 8, 7]);\n+    array_opt.map(|a| a.as_slice());\n+\n+    let slice_opt: Option<&[u8]> = Some(b\"slice\");\n+    slice_opt.map(|s| s.len());\n+\n+    let ptr_opt: Option<*const usize> = Some(&487);\n+    ptr_opt.map(|p| p.is_null());\n+\n+    let test_struct = TestStruct { some_ref: &487 };\n+    let dyn_opt: Option<&dyn TestTrait> = Some(&test_struct);\n+    dyn_opt.map(|d| d.method_on_dyn());\n+}"}, {"sha": "a521fb868607ad8de2aafb9e3085a6b6bfd12f1e", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -134,5 +134,29 @@ error: redundant closure\n LL |     move || takes_fn_mut(|| f_used_once())\n    |                          ^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut f_used_once`\n \n-error: aborting due to 22 previous errors\n+error: redundant closure\n+  --> $DIR/eta.rs:329:19\n+   |\n+LL |     array_opt.map(|a| a.as_slice());\n+   |                   ^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `<[u8; 3]>::as_slice`\n+\n+error: redundant closure\n+  --> $DIR/eta.rs:332:19\n+   |\n+LL |     slice_opt.map(|s| s.len());\n+   |                   ^^^^^^^^^^^ help: replace the closure with the method itself: `<[u8]>::len`\n+\n+error: redundant closure\n+  --> $DIR/eta.rs:335:17\n+   |\n+LL |     ptr_opt.map(|p| p.is_null());\n+   |                 ^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `<*const usize>::is_null`\n+\n+error: redundant closure\n+  --> $DIR/eta.rs:339:17\n+   |\n+LL |     dyn_opt.map(|d| d.method_on_dyn());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `<dyn TestTrait>::method_on_dyn`\n+\n+error: aborting due to 26 previous errors\n "}, {"sha": "018f875d60bfa24ec5fd1a625b84d7cb9c457e66", "filename": "tests/ui/expect_tool_lint_rfc_2383.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fexpect_tool_lint_rfc_2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fexpect_tool_lint_rfc_2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_tool_lint_rfc_2383.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -22,9 +22,9 @@ mod rustc_ok {\n \n         #[expect(illegal_floating_point_literal_pattern)]\n         match x {\n-            5.0 => {}\n-            6.0 => {}\n-            _ => {}\n+            5.0 => {},\n+            6.0 => {},\n+            _ => {},\n         }\n     }\n }\n@@ -38,9 +38,9 @@ mod rustc_warn {\n \n         #[expect(illegal_floating_point_literal_pattern)]\n         match x {\n-            5 => {}\n-            6 => {}\n-            _ => {}\n+            5 => {},\n+            6 => {},\n+            _ => {},\n         }\n     }\n }"}, {"sha": "475fae5e823b31e66a484cae692c3ed6ab0ed2b6", "filename": "tests/ui/explicit_auto_deref.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fexplicit_auto_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fexplicit_auto_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -277,4 +277,8 @@ fn main() {\n         unimplemented!()\n     }\n     let _: String = takes_assoc(&*String::new());\n+\n+    // Issue #9901\n+    fn takes_ref(_: &i32) {}\n+    takes_ref(*Box::new(&0i32));\n }"}, {"sha": "c1894258f4d84312d891f55472908489c5173aba", "filename": "tests/ui/explicit_auto_deref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fexplicit_auto_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fexplicit_auto_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -277,4 +277,8 @@ fn main() {\n         unimplemented!()\n     }\n     let _: String = takes_assoc(&*String::new());\n+\n+    // Issue #9901\n+    fn takes_ref(_: &i32) {}\n+    takes_ref(*Box::new(&0i32));\n }"}, {"sha": "462d46169fcbec0dff6c86ca1d848df8cee13e5e", "filename": "tests/ui/filter_map_next_fixable.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ffilter_map_next_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ffilter_map_next_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(unused)]\n \n@@ -11,16 +10,14 @@ fn main() {\n     assert_eq!(element, Some(1));\n }\n \n+#[clippy::msrv = \"1.29\"]\n fn msrv_1_29() {\n-    #![clippy::msrv = \"1.29\"]\n-\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n     let _: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n }\n \n+#[clippy::msrv = \"1.30\"]\n fn msrv_1_30() {\n-    #![clippy::msrv = \"1.30\"]\n-\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n     let _: Option<i32> = a.iter().find_map(|s| s.parse().ok());\n }"}, {"sha": "2ea00cf73072e6abecc95e73dc07c45d2d46da96", "filename": "tests/ui/filter_map_next_fixable.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ffilter_map_next_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ffilter_map_next_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(unused)]\n \n@@ -11,16 +10,14 @@ fn main() {\n     assert_eq!(element, Some(1));\n }\n \n+#[clippy::msrv = \"1.29\"]\n fn msrv_1_29() {\n-    #![clippy::msrv = \"1.29\"]\n-\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n     let _: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n }\n \n+#[clippy::msrv = \"1.30\"]\n fn msrv_1_30() {\n-    #![clippy::msrv = \"1.30\"]\n-\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n     let _: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n }"}, {"sha": "a9fc6abe88facbda0ab9009ee0063ed5d14a14db", "filename": "tests/ui/filter_map_next_fixable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ffilter_map_next_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ffilter_map_next_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,13 +1,13 @@\n error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead\n-  --> $DIR/filter_map_next_fixable.rs:10:32\n+  --> $DIR/filter_map_next_fixable.rs:9:32\n    |\n LL |     let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `a.iter().find_map(|s| s.parse().ok())`\n    |\n    = note: `-D clippy::filter-map-next` implied by `-D warnings`\n \n error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead\n-  --> $DIR/filter_map_next_fixable.rs:25:26\n+  --> $DIR/filter_map_next_fixable.rs:22:26\n    |\n LL |     let _: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `a.iter().find_map(|s| s.parse().ok())`"}, {"sha": "125c9a69cd3fd1fdd48f8b7a37d7672d84f18a9a", "filename": "tests/ui/from_over_into.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ffrom_over_into.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ffrom_over_into.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::from_over_into)]\n #![allow(unused)]\n \n@@ -60,9 +59,8 @@ impl From<String> for A {\n     }\n }\n \n+#[clippy::msrv = \"1.40\"]\n fn msrv_1_40() {\n-    #![clippy::msrv = \"1.40\"]\n-\n     struct FromOverInto<T>(Vec<T>);\n \n     impl<T> Into<FromOverInto<T>> for Vec<T> {\n@@ -72,9 +70,8 @@ fn msrv_1_40() {\n     }\n }\n \n+#[clippy::msrv = \"1.41\"]\n fn msrv_1_41() {\n-    #![clippy::msrv = \"1.41\"]\n-\n     struct FromOverInto<T>(Vec<T>);\n \n     impl<T> From<Vec<T>> for FromOverInto<T> {"}, {"sha": "5aa127bfabe4b792a59ab914277c7034d7e06b2b", "filename": "tests/ui/from_over_into.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::from_over_into)]\n #![allow(unused)]\n \n@@ -60,9 +59,8 @@ impl From<String> for A {\n     }\n }\n \n+#[clippy::msrv = \"1.40\"]\n fn msrv_1_40() {\n-    #![clippy::msrv = \"1.40\"]\n-\n     struct FromOverInto<T>(Vec<T>);\n \n     impl<T> Into<FromOverInto<T>> for Vec<T> {\n@@ -72,9 +70,8 @@ fn msrv_1_40() {\n     }\n }\n \n+#[clippy::msrv = \"1.41\"]\n fn msrv_1_41() {\n-    #![clippy::msrv = \"1.41\"]\n-\n     struct FromOverInto<T>(Vec<T>);\n \n     impl<T> Into<FromOverInto<T>> for Vec<T> {"}, {"sha": "a1764a5ea12ae8f5deef37156c803d244523c4f0", "filename": "tests/ui/from_over_into.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:10:1\n+  --> $DIR/from_over_into.rs:9:1\n    |\n LL | impl Into<StringWrapper> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ LL ~         StringWrapper(val)\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:18:1\n+  --> $DIR/from_over_into.rs:17:1\n    |\n LL | impl Into<SelfType> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL ~         SelfType(String::new())\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:33:1\n+  --> $DIR/from_over_into.rs:32:1\n    |\n LL | impl Into<SelfKeywords> for X {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -41,7 +41,7 @@ LL ~         let _: X = val;\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:45:1\n+  --> $DIR/from_over_into.rs:44:1\n    |\n LL | impl core::convert::Into<bool> for crate::ExplicitPaths {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL ~         val.0\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:80:5\n+  --> $DIR/from_over_into.rs:77:5\n    |\n LL |     impl<T> Into<FromOverInto<T>> for Vec<T> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "0e89fdb0dfa28c028d5c7df3edc22ff125512386", "filename": "tests/ui/if_then_some_else_none.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_some_else_none.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::if_then_some_else_none)]\n-#![feature(custom_inner_attributes)]\n \n fn main() {\n     // Should issue an error.\n@@ -66,8 +65,8 @@ fn main() {\n     let _ = if foo() { into_some(\"foo\") } else { None };\n }\n \n+#[clippy::msrv = \"1.49\"]\n fn _msrv_1_49() {\n-    #![clippy::msrv = \"1.49\"]\n     // `bool::then` was stabilized in 1.50. Do not lint this\n     let _ = if foo() {\n         println!(\"true!\");\n@@ -77,8 +76,8 @@ fn _msrv_1_49() {\n     };\n }\n \n+#[clippy::msrv = \"1.50\"]\n fn _msrv_1_50() {\n-    #![clippy::msrv = \"1.50\"]\n     let _ = if foo() {\n         println!(\"true!\");\n         Some(150)"}, {"sha": "d728a3c31a3ba95fabc9b0fa3d587946a1eb5ab3", "filename": "tests/ui/if_then_some_else_none.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fif_then_some_else_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fif_then_some_else_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_some_else_none.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n error: this could be simplified with `bool::then`\n-  --> $DIR/if_then_some_else_none.rs:6:13\n+  --> $DIR/if_then_some_else_none.rs:5:13\n    |\n LL |       let _ = if foo() {\n    |  _____________^\n@@ -14,7 +14,7 @@ LL | |     };\n    = note: `-D clippy::if-then-some-else-none` implied by `-D warnings`\n \n error: this could be simplified with `bool::then`\n-  --> $DIR/if_then_some_else_none.rs:14:13\n+  --> $DIR/if_then_some_else_none.rs:13:13\n    |\n LL |       let _ = if matches!(true, true) {\n    |  _____________^\n@@ -28,23 +28,23 @@ LL | |     };\n    = help: consider using `bool::then` like: `matches!(true, true).then(|| { /* snippet */ matches!(true, false) })`\n \n error: this could be simplified with `bool::then_some`\n-  --> $DIR/if_then_some_else_none.rs:23:28\n+  --> $DIR/if_then_some_else_none.rs:22:28\n    |\n LL |     let _ = x.and_then(|o| if o < 32 { Some(o) } else { None });\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using `bool::then_some` like: `(o < 32).then_some(o)`\n \n error: this could be simplified with `bool::then_some`\n-  --> $DIR/if_then_some_else_none.rs:27:13\n+  --> $DIR/if_then_some_else_none.rs:26:13\n    |\n LL |     let _ = if !x { Some(0) } else { None };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using `bool::then_some` like: `(!x).then_some(0)`\n \n error: this could be simplified with `bool::then`\n-  --> $DIR/if_then_some_else_none.rs:82:13\n+  --> $DIR/if_then_some_else_none.rs:81:13\n    |\n LL |       let _ = if foo() {\n    |  _____________^"}, {"sha": "f7902e6fd53893b717509873b314486a99da2c56", "filename": "tests/ui/manual_clamp.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_clamp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_clamp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_clamp.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,4 +1,3 @@\n-#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_clamp)]\n #![allow(\n     unused,\n@@ -304,9 +303,8 @@ fn cmp_min_max(input: i32) -> i32 {\n     input * 3\n }\n \n+#[clippy::msrv = \"1.49\"]\n fn msrv_1_49() {\n-    #![clippy::msrv = \"1.49\"]\n-\n     let (input, min, max) = (0, -1, 2);\n     let _ = if input < min {\n         min\n@@ -317,9 +315,8 @@ fn msrv_1_49() {\n     };\n }\n \n+#[clippy::msrv = \"1.50\"]\n fn msrv_1_50() {\n-    #![clippy::msrv = \"1.50\"]\n-\n     let (input, min, max) = (0, -1, 2);\n     let _ = if input < min {\n         min"}, {"sha": "988ad1527e837aa9528ff263f28b526ee062afb0", "filename": "tests/ui/manual_clamp.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_clamp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_clamp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_clamp.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:77:5\n+  --> $DIR/manual_clamp.rs:76:5\n    |\n LL | /     if x9 < min {\n LL | |         x9 = min;\n@@ -13,7 +13,7 @@ LL | |     }\n    = note: `-D clippy::manual-clamp` implied by `-D warnings`\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:92:5\n+  --> $DIR/manual_clamp.rs:91:5\n    |\n LL | /     if x11 > max {\n LL | |         x11 = max;\n@@ -26,7 +26,7 @@ LL | |     }\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:100:5\n+  --> $DIR/manual_clamp.rs:99:5\n    |\n LL | /     if min > x12 {\n LL | |         x12 = min;\n@@ -39,7 +39,7 @@ LL | |     }\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:108:5\n+  --> $DIR/manual_clamp.rs:107:5\n    |\n LL | /     if max < x13 {\n LL | |         x13 = max;\n@@ -52,7 +52,7 @@ LL | |     }\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:162:5\n+  --> $DIR/manual_clamp.rs:161:5\n    |\n LL | /     if max < x33 {\n LL | |         x33 = max;\n@@ -65,7 +65,7 @@ LL | |     }\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:22:14\n+  --> $DIR/manual_clamp.rs:21:14\n    |\n LL |       let x0 = if max < input {\n    |  ______________^\n@@ -80,7 +80,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:30:14\n+  --> $DIR/manual_clamp.rs:29:14\n    |\n LL |       let x1 = if input > max {\n    |  ______________^\n@@ -95,7 +95,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:38:14\n+  --> $DIR/manual_clamp.rs:37:14\n    |\n LL |       let x2 = if input < min {\n    |  ______________^\n@@ -110,7 +110,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:46:14\n+  --> $DIR/manual_clamp.rs:45:14\n    |\n LL |       let x3 = if min > input {\n    |  ______________^\n@@ -125,23 +125,23 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:54:14\n+  --> $DIR/manual_clamp.rs:53:14\n    |\n LL |     let x4 = input.max(min).min(max);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(min, max)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:56:14\n+  --> $DIR/manual_clamp.rs:55:14\n    |\n LL |     let x5 = input.min(max).max(min);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(min, max)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:58:14\n+  --> $DIR/manual_clamp.rs:57:14\n    |\n LL |       let x6 = match input {\n    |  ______________^\n@@ -154,7 +154,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:64:14\n+  --> $DIR/manual_clamp.rs:63:14\n    |\n LL |       let x7 = match input {\n    |  ______________^\n@@ -167,7 +167,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:70:14\n+  --> $DIR/manual_clamp.rs:69:14\n    |\n LL |       let x8 = match input {\n    |  ______________^\n@@ -180,7 +180,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:84:15\n+  --> $DIR/manual_clamp.rs:83:15\n    |\n LL |       let x10 = match input {\n    |  _______________^\n@@ -193,7 +193,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:115:15\n+  --> $DIR/manual_clamp.rs:114:15\n    |\n LL |       let x14 = if input > CONST_MAX {\n    |  _______________^\n@@ -208,7 +208,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:124:19\n+  --> $DIR/manual_clamp.rs:123:19\n    |\n LL |           let x15 = if input > max {\n    |  ___________________^\n@@ -224,71 +224,71 @@ LL | |         };\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:135:19\n+  --> $DIR/manual_clamp.rs:134:19\n    |\n LL |         let x16 = cmp_max(cmp_min(input, CONST_MAX), CONST_MIN);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:136:19\n+  --> $DIR/manual_clamp.rs:135:19\n    |\n LL |         let x17 = cmp_min(cmp_max(input, CONST_MIN), CONST_MAX);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:137:19\n+  --> $DIR/manual_clamp.rs:136:19\n    |\n LL |         let x18 = cmp_max(CONST_MIN, cmp_min(input, CONST_MAX));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:138:19\n+  --> $DIR/manual_clamp.rs:137:19\n    |\n LL |         let x19 = cmp_min(CONST_MAX, cmp_max(input, CONST_MIN));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:139:19\n+  --> $DIR/manual_clamp.rs:138:19\n    |\n LL |         let x20 = cmp_max(cmp_min(CONST_MAX, input), CONST_MIN);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:140:19\n+  --> $DIR/manual_clamp.rs:139:19\n    |\n LL |         let x21 = cmp_min(cmp_max(CONST_MIN, input), CONST_MAX);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:141:19\n+  --> $DIR/manual_clamp.rs:140:19\n    |\n LL |         let x22 = cmp_max(CONST_MIN, cmp_min(CONST_MAX, input));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:142:19\n+  --> $DIR/manual_clamp.rs:141:19\n    |\n LL |         let x23 = cmp_min(CONST_MAX, cmp_max(CONST_MIN, input));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:144:19\n+  --> $DIR/manual_clamp.rs:143:19\n    |\n LL |         let x24 = f64::max(f64::min(input, CONST_F64_MAX), CONST_F64_MIN);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -297,7 +297,7 @@ LL |         let x24 = f64::max(f64::min(input, CONST_F64_MAX), CONST_F64_MIN);\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:145:19\n+  --> $DIR/manual_clamp.rs:144:19\n    |\n LL |         let x25 = f64::min(f64::max(input, CONST_F64_MIN), CONST_F64_MAX);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -306,7 +306,7 @@ LL |         let x25 = f64::min(f64::max(input, CONST_F64_MIN), CONST_F64_MAX);\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:146:19\n+  --> $DIR/manual_clamp.rs:145:19\n    |\n LL |         let x26 = f64::max(CONST_F64_MIN, f64::min(input, CONST_F64_MAX));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -315,7 +315,7 @@ LL |         let x26 = f64::max(CONST_F64_MIN, f64::min(input, CONST_F64_MAX));\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:147:19\n+  --> $DIR/manual_clamp.rs:146:19\n    |\n LL |         let x27 = f64::min(CONST_F64_MAX, f64::max(input, CONST_F64_MIN));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -324,7 +324,7 @@ LL |         let x27 = f64::min(CONST_F64_MAX, f64::max(input, CONST_F64_MIN));\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:148:19\n+  --> $DIR/manual_clamp.rs:147:19\n    |\n LL |         let x28 = f64::max(f64::min(CONST_F64_MAX, input), CONST_F64_MIN);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -333,7 +333,7 @@ LL |         let x28 = f64::max(f64::min(CONST_F64_MAX, input), CONST_F64_MIN);\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:149:19\n+  --> $DIR/manual_clamp.rs:148:19\n    |\n LL |         let x29 = f64::min(f64::max(CONST_F64_MIN, input), CONST_F64_MAX);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -342,7 +342,7 @@ LL |         let x29 = f64::min(f64::max(CONST_F64_MIN, input), CONST_F64_MAX);\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:150:19\n+  --> $DIR/manual_clamp.rs:149:19\n    |\n LL |         let x30 = f64::max(CONST_F64_MIN, f64::min(CONST_F64_MAX, input));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -351,7 +351,7 @@ LL |         let x30 = f64::max(CONST_F64_MIN, f64::min(CONST_F64_MAX, input));\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:151:19\n+  --> $DIR/manual_clamp.rs:150:19\n    |\n LL |         let x31 = f64::min(CONST_F64_MAX, f64::max(CONST_F64_MIN, input));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -360,7 +360,7 @@ LL |         let x31 = f64::min(CONST_F64_MAX, f64::max(CONST_F64_MIN, input));\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:154:5\n+  --> $DIR/manual_clamp.rs:153:5\n    |\n LL | /     if x32 < min {\n LL | |         x32 = min;\n@@ -372,7 +372,7 @@ LL | |     }\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:324:13\n+  --> $DIR/manual_clamp.rs:321:13\n    |\n LL |       let _ = if input < min {\n    |  _____________^"}, {"sha": "231ba83b1426130a3b6482d8e9cb938aacfced4d", "filename": "tests/ui/manual_is_ascii_check.fixed", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_is_ascii_check.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_is_ascii_check.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(unused, dead_code)]\n #![warn(clippy::manual_is_ascii_check)]\n \n@@ -18,28 +17,26 @@ fn main() {\n     assert!(matches!('x', 'A'..='Z' | 'a'..='z' | '_'));\n }\n \n+#[clippy::msrv = \"1.23\"]\n fn msrv_1_23() {\n-    #![clippy::msrv = \"1.23\"]\n-\n     assert!(matches!(b'1', b'0'..=b'9'));\n     assert!(matches!('X', 'A'..='Z'));\n     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n }\n \n+#[clippy::msrv = \"1.24\"]\n fn msrv_1_24() {\n-    #![clippy::msrv = \"1.24\"]\n-\n     assert!(b'1'.is_ascii_digit());\n     assert!('X'.is_ascii_uppercase());\n     assert!('x'.is_ascii_alphabetic());\n }\n \n+#[clippy::msrv = \"1.46\"]\n fn msrv_1_46() {\n-    #![clippy::msrv = \"1.46\"]\n     const FOO: bool = matches!('x', '0'..='9');\n }\n \n+#[clippy::msrv = \"1.47\"]\n fn msrv_1_47() {\n-    #![clippy::msrv = \"1.47\"]\n     const FOO: bool = 'x'.is_ascii_digit();\n }"}, {"sha": "39ee6151c56f08ff53b77377e9eb916b437d00a6", "filename": "tests/ui/manual_is_ascii_check.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(unused, dead_code)]\n #![warn(clippy::manual_is_ascii_check)]\n \n@@ -18,28 +17,26 @@ fn main() {\n     assert!(matches!('x', 'A'..='Z' | 'a'..='z' | '_'));\n }\n \n+#[clippy::msrv = \"1.23\"]\n fn msrv_1_23() {\n-    #![clippy::msrv = \"1.23\"]\n-\n     assert!(matches!(b'1', b'0'..=b'9'));\n     assert!(matches!('X', 'A'..='Z'));\n     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n }\n \n+#[clippy::msrv = \"1.24\"]\n fn msrv_1_24() {\n-    #![clippy::msrv = \"1.24\"]\n-\n     assert!(matches!(b'1', b'0'..=b'9'));\n     assert!(matches!('X', 'A'..='Z'));\n     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n }\n \n+#[clippy::msrv = \"1.46\"]\n fn msrv_1_46() {\n-    #![clippy::msrv = \"1.46\"]\n     const FOO: bool = matches!('x', '0'..='9');\n }\n \n+#[clippy::msrv = \"1.47\"]\n fn msrv_1_47() {\n-    #![clippy::msrv = \"1.47\"]\n     const FOO: bool = matches!('x', '0'..='9');\n }"}, {"sha": "397cbe05c822ad7fba97b5f46d02fd569e2882fe", "filename": "tests/ui/manual_is_ascii_check.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_is_ascii_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_is_ascii_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,67 +1,67 @@\n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:8:13\n+  --> $DIR/manual_is_ascii_check.rs:7:13\n    |\n LL |     assert!(matches!('x', 'a'..='z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_lowercase()`\n    |\n    = note: `-D clippy::manual-is-ascii-check` implied by `-D warnings`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:9:13\n+  --> $DIR/manual_is_ascii_check.rs:8:13\n    |\n LL |     assert!(matches!('X', 'A'..='Z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'X'.is_ascii_uppercase()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:10:13\n+  --> $DIR/manual_is_ascii_check.rs:9:13\n    |\n LL |     assert!(matches!(b'x', b'a'..=b'z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'x'.is_ascii_lowercase()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:11:13\n+  --> $DIR/manual_is_ascii_check.rs:10:13\n    |\n LL |     assert!(matches!(b'X', b'A'..=b'Z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'X'.is_ascii_uppercase()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:14:13\n+  --> $DIR/manual_is_ascii_check.rs:13:13\n    |\n LL |     assert!(matches!(num, '0'..='9'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.is_ascii_digit()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:15:13\n+  --> $DIR/manual_is_ascii_check.rs:14:13\n    |\n LL |     assert!(matches!(b'1', b'0'..=b'9'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'1'.is_ascii_digit()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:16:13\n+  --> $DIR/manual_is_ascii_check.rs:15:13\n    |\n LL |     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_alphabetic()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:32:13\n+  --> $DIR/manual_is_ascii_check.rs:29:13\n    |\n LL |     assert!(matches!(b'1', b'0'..=b'9'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'1'.is_ascii_digit()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:33:13\n+  --> $DIR/manual_is_ascii_check.rs:30:13\n    |\n LL |     assert!(matches!('X', 'A'..='Z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'X'.is_ascii_uppercase()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:34:13\n+  --> $DIR/manual_is_ascii_check.rs:31:13\n    |\n LL |     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_alphabetic()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:44:23\n+  --> $DIR/manual_is_ascii_check.rs:41:23\n    |\n LL |     const FOO: bool = matches!('x', '0'..='9');\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_digit()`"}, {"sha": "48a162c13602ca800b3fcfd8f2392b01181b94fb", "filename": "tests/ui/manual_let_else.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -234,4 +234,18 @@ fn not_fire() {\n     // If a type annotation is present, don't lint as\n     // expressing the type might be too hard\n     let v: () = if let Some(v_some) = g() { v_some } else { panic!() };\n+\n+    // Issue 9940\n+    // Suggestion should not expand macros\n+    macro_rules! macro_call {\n+        () => {\n+            return ()\n+        };\n+    }\n+\n+    let ff = Some(1);\n+    let _ = match ff {\n+        Some(value) => value,\n+        _ => macro_call!(),\n+    };\n }"}, {"sha": "52aac6bc673d195500f6f3ddf84fccacdd9aa65b", "filename": "tests/ui/manual_let_else.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -259,5 +259,14 @@ LL |     create_binding_if_some!(w, g());\n    |\n    = note: this error originates in the macro `create_binding_if_some` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 17 previous errors\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else.rs:247:5\n+   |\n+LL | /     let _ = match ff {\n+LL | |         Some(value) => value,\n+LL | |         _ => macro_call!(),\n+LL | |     };\n+   | |______^ help: consider writing: `let Some(value) = ff else { macro_call!() };`\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "4cdc0546a7446ab6176a759ed867d6048ccb0bad", "filename": "tests/ui/manual_rem_euclid.fixed", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_rem_euclid.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_rem_euclid.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n // aux-build:macro_rules.rs\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_rem_euclid)]\n \n #[macro_use]\n@@ -55,31 +54,27 @@ pub const fn const_rem_euclid_4(num: i32) -> i32 {\n     num.rem_euclid(4)\n }\n \n+#[clippy::msrv = \"1.37\"]\n pub fn msrv_1_37() {\n-    #![clippy::msrv = \"1.37\"]\n-\n     let x: i32 = 10;\n     let _: i32 = ((x % 4) + 4) % 4;\n }\n \n+#[clippy::msrv = \"1.38\"]\n pub fn msrv_1_38() {\n-    #![clippy::msrv = \"1.38\"]\n-\n     let x: i32 = 10;\n     let _: i32 = x.rem_euclid(4);\n }\n \n // For const fns:\n+#[clippy::msrv = \"1.51\"]\n pub const fn msrv_1_51() {\n-    #![clippy::msrv = \"1.51\"]\n-\n     let x: i32 = 10;\n     let _: i32 = ((x % 4) + 4) % 4;\n }\n \n+#[clippy::msrv = \"1.52\"]\n pub const fn msrv_1_52() {\n-    #![clippy::msrv = \"1.52\"]\n-\n     let x: i32 = 10;\n     let _: i32 = x.rem_euclid(4);\n }"}, {"sha": "58a9e20f38b1375c3fba248fa4b0321af34e8270", "filename": "tests/ui/manual_rem_euclid.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n // aux-build:macro_rules.rs\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_rem_euclid)]\n \n #[macro_use]\n@@ -55,31 +54,27 @@ pub const fn const_rem_euclid_4(num: i32) -> i32 {\n     ((num % 4) + 4) % 4\n }\n \n+#[clippy::msrv = \"1.37\"]\n pub fn msrv_1_37() {\n-    #![clippy::msrv = \"1.37\"]\n-\n     let x: i32 = 10;\n     let _: i32 = ((x % 4) + 4) % 4;\n }\n \n+#[clippy::msrv = \"1.38\"]\n pub fn msrv_1_38() {\n-    #![clippy::msrv = \"1.38\"]\n-\n     let x: i32 = 10;\n     let _: i32 = ((x % 4) + 4) % 4;\n }\n \n // For const fns:\n+#[clippy::msrv = \"1.51\"]\n pub const fn msrv_1_51() {\n-    #![clippy::msrv = \"1.51\"]\n-\n     let x: i32 = 10;\n     let _: i32 = ((x % 4) + 4) % 4;\n }\n \n+#[clippy::msrv = \"1.52\"]\n pub const fn msrv_1_52() {\n-    #![clippy::msrv = \"1.52\"]\n-\n     let x: i32 = 10;\n     let _: i32 = ((x % 4) + 4) % 4;\n }"}, {"sha": "e3122a588b64d1d4a2d204eadcc06223c009a27b", "filename": "tests/ui/manual_rem_euclid.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_rem_euclid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_rem_euclid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,37 +1,37 @@\n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:20:18\n+  --> $DIR/manual_rem_euclid.rs:19:18\n    |\n LL |     let _: i32 = ((value % 4) + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n    |\n    = note: `-D clippy::manual-rem-euclid` implied by `-D warnings`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:21:18\n+  --> $DIR/manual_rem_euclid.rs:20:18\n    |\n LL |     let _: i32 = (4 + (value % 4)) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:22:18\n+  --> $DIR/manual_rem_euclid.rs:21:18\n    |\n LL |     let _: i32 = (value % 4 + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:23:18\n+  --> $DIR/manual_rem_euclid.rs:22:18\n    |\n LL |     let _: i32 = (4 + value % 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:24:22\n+  --> $DIR/manual_rem_euclid.rs:23:22\n    |\n LL |     let _: i32 = 1 + (4 + value % 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:13:22\n+  --> $DIR/manual_rem_euclid.rs:12:22\n    |\n LL |         let _: i32 = ((value % 4) + 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n@@ -42,25 +42,25 @@ LL |     internal_rem_euclid!();\n    = note: this error originates in the macro `internal_rem_euclid` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:50:5\n+  --> $DIR/manual_rem_euclid.rs:49:5\n    |\n LL |     ((num % 4) + 4) % 4\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `num.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:55:5\n+  --> $DIR/manual_rem_euclid.rs:54:5\n    |\n LL |     ((num % 4) + 4) % 4\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `num.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:69:18\n+  --> $DIR/manual_rem_euclid.rs:66:18\n    |\n LL |     let _: i32 = ((x % 4) + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^ help: consider using: `x.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:84:18\n+  --> $DIR/manual_rem_euclid.rs:79:18\n    |\n LL |     let _: i32 = ((x % 4) + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^ help: consider using: `x.rem_euclid(4)`"}, {"sha": "e5ae3cf3e5033295b16936b7f71fac65269834f7", "filename": "tests/ui/manual_retain.fixed", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_retain.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_retain.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_retain)]\n #![allow(unused)]\n use std::collections::BTreeMap;\n@@ -216,23 +215,23 @@ fn vec_deque_retain() {\n     bar = foobar.into_iter().filter(|x| x % 2 == 0).collect();\n }\n \n+#[clippy::msrv = \"1.52\"]\n fn _msrv_153() {\n-    #![clippy::msrv = \"1.52\"]\n     let mut btree_map: BTreeMap<i8, i8> = (0..8).map(|x| (x, x * 10)).collect();\n     btree_map = btree_map.into_iter().filter(|(k, _)| k % 2 == 0).collect();\n \n     let mut btree_set = BTreeSet::from([1, 2, 3, 4, 5, 6]);\n     btree_set = btree_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n }\n \n+#[clippy::msrv = \"1.25\"]\n fn _msrv_126() {\n-    #![clippy::msrv = \"1.25\"]\n     let mut s = String::from(\"foobar\");\n     s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n }\n \n+#[clippy::msrv = \"1.17\"]\n fn _msrv_118() {\n-    #![clippy::msrv = \"1.17\"]\n     let mut hash_set = HashSet::from([1, 2, 3, 4, 5, 6]);\n     hash_set = hash_set.into_iter().filter(|x| x % 2 == 0).collect();\n     let mut hash_map: HashMap<i8, i8> = (0..8).map(|x| (x, x * 10)).collect();"}, {"sha": "1021f15edd1ea9c579aa8ceff38c17f12eb22414", "filename": "tests/ui/manual_retain.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_retain)]\n #![allow(unused)]\n use std::collections::BTreeMap;\n@@ -222,23 +221,23 @@ fn vec_deque_retain() {\n     bar = foobar.into_iter().filter(|x| x % 2 == 0).collect();\n }\n \n+#[clippy::msrv = \"1.52\"]\n fn _msrv_153() {\n-    #![clippy::msrv = \"1.52\"]\n     let mut btree_map: BTreeMap<i8, i8> = (0..8).map(|x| (x, x * 10)).collect();\n     btree_map = btree_map.into_iter().filter(|(k, _)| k % 2 == 0).collect();\n \n     let mut btree_set = BTreeSet::from([1, 2, 3, 4, 5, 6]);\n     btree_set = btree_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n }\n \n+#[clippy::msrv = \"1.25\"]\n fn _msrv_126() {\n-    #![clippy::msrv = \"1.25\"]\n     let mut s = String::from(\"foobar\");\n     s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n }\n \n+#[clippy::msrv = \"1.17\"]\n fn _msrv_118() {\n-    #![clippy::msrv = \"1.17\"]\n     let mut hash_set = HashSet::from([1, 2, 3, 4, 5, 6]);\n     hash_set = hash_set.into_iter().filter(|x| x % 2 == 0).collect();\n     let mut hash_map: HashMap<i8, i8> = (0..8).map(|x| (x, x * 10)).collect();"}, {"sha": "89316ce1d99818d83c236178381da84272d8d8f8", "filename": "tests/ui/manual_retain.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_retain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_retain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,19 +1,19 @@\n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:52:5\n+  --> $DIR/manual_retain.rs:51:5\n    |\n LL |     btree_map = btree_map.into_iter().filter(|(k, _)| k % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_map.retain(|k, _| k % 2 == 0)`\n    |\n    = note: `-D clippy::manual-retain` implied by `-D warnings`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:53:5\n+  --> $DIR/manual_retain.rs:52:5\n    |\n LL |     btree_map = btree_map.into_iter().filter(|(_, v)| v % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_map.retain(|_, &mut v| v % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:54:5\n+  --> $DIR/manual_retain.rs:53:5\n    |\n LL | /     btree_map = btree_map\n LL | |         .into_iter()\n@@ -22,37 +22,37 @@ LL | |         .collect();\n    | |__________________^ help: consider calling `.retain()` instead: `btree_map.retain(|k, &mut v| (k % 2 == 0) && (v % 2 == 0))`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:76:5\n+  --> $DIR/manual_retain.rs:75:5\n    |\n LL |     btree_set = btree_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:77:5\n+  --> $DIR/manual_retain.rs:76:5\n    |\n LL |     btree_set = btree_set.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:78:5\n+  --> $DIR/manual_retain.rs:77:5\n    |\n LL |     btree_set = btree_set.into_iter().filter(|x| x % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:108:5\n+  --> $DIR/manual_retain.rs:107:5\n    |\n LL |     hash_map = hash_map.into_iter().filter(|(k, _)| k % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_map.retain(|k, _| k % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:109:5\n+  --> $DIR/manual_retain.rs:108:5\n    |\n LL |     hash_map = hash_map.into_iter().filter(|(_, v)| v % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_map.retain(|_, &mut v| v % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:110:5\n+  --> $DIR/manual_retain.rs:109:5\n    |\n LL | /     hash_map = hash_map\n LL | |         .into_iter()\n@@ -61,61 +61,61 @@ LL | |         .collect();\n    | |__________________^ help: consider calling `.retain()` instead: `hash_map.retain(|k, &mut v| (k % 2 == 0) && (v % 2 == 0))`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:131:5\n+  --> $DIR/manual_retain.rs:130:5\n    |\n LL |     hash_set = hash_set.into_iter().filter(|x| x % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:132:5\n+  --> $DIR/manual_retain.rs:131:5\n    |\n LL |     hash_set = hash_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:133:5\n+  --> $DIR/manual_retain.rs:132:5\n    |\n LL |     hash_set = hash_set.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:162:5\n+  --> $DIR/manual_retain.rs:161:5\n    |\n LL |     s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `s.retain(|c| c != 'o')`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:174:5\n+  --> $DIR/manual_retain.rs:173:5\n    |\n LL |     vec = vec.iter().filter(|&x| x % 2 == 0).copied().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:175:5\n+  --> $DIR/manual_retain.rs:174:5\n    |\n LL |     vec = vec.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:176:5\n+  --> $DIR/manual_retain.rs:175:5\n    |\n LL |     vec = vec.into_iter().filter(|x| x % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:198:5\n+  --> $DIR/manual_retain.rs:197:5\n    |\n LL |     vec_deque = vec_deque.iter().filter(|&x| x % 2 == 0).copied().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec_deque.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:199:5\n+  --> $DIR/manual_retain.rs:198:5\n    |\n LL |     vec_deque = vec_deque.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec_deque.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/manual_retain.rs:200:5\n+  --> $DIR/manual_retain.rs:199:5\n    |\n LL |     vec_deque = vec_deque.into_iter().filter(|x| x % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec_deque.retain(|x| x % 2 == 0)`"}, {"sha": "50b02019cc274f67c33d571a402c7e889f868b08", "filename": "tests/ui/manual_split_once.fixed", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_split_once.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_split_once.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_split_once.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_split_once)]\n #![allow(unused, clippy::iter_skip_next, clippy::iter_nth_zero)]\n \n@@ -127,8 +126,8 @@ fn indirect() -> Option<()> {\n     None\n }\n \n+#[clippy::msrv = \"1.51\"]\n fn _msrv_1_51() {\n-    #![clippy::msrv = \"1.51\"]\n     // `str::split_once` was stabilized in 1.52. Do not lint this\n     let _ = \"key=value\".splitn(2, '=').nth(1).unwrap();\n \n@@ -137,8 +136,8 @@ fn _msrv_1_51() {\n     let b = iter.next().unwrap();\n }\n \n+#[clippy::msrv = \"1.52\"]\n fn _msrv_1_52() {\n-    #![clippy::msrv = \"1.52\"]\n     let _ = \"key=value\".split_once('=').unwrap().1;\n \n     let (a, b) = \"a.b.c\".split_once('.').unwrap();"}, {"sha": "e1e8b71a9deff62a3b716b033e777402a732d0e9", "filename": "tests/ui/manual_split_once.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_split_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_split_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_split_once.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_split_once)]\n #![allow(unused, clippy::iter_skip_next, clippy::iter_nth_zero)]\n \n@@ -127,8 +126,8 @@ fn indirect() -> Option<()> {\n     None\n }\n \n+#[clippy::msrv = \"1.51\"]\n fn _msrv_1_51() {\n-    #![clippy::msrv = \"1.51\"]\n     // `str::split_once` was stabilized in 1.52. Do not lint this\n     let _ = \"key=value\".splitn(2, '=').nth(1).unwrap();\n \n@@ -137,8 +136,8 @@ fn _msrv_1_51() {\n     let b = iter.next().unwrap();\n }\n \n+#[clippy::msrv = \"1.52\"]\n fn _msrv_1_52() {\n-    #![clippy::msrv = \"1.52\"]\n     let _ = \"key=value\".splitn(2, '=').nth(1).unwrap();\n \n     let mut iter = \"a.b.c\".splitn(2, '.');"}, {"sha": "78da5a16cc52b69366ad355a359c6e1d587594fe", "filename": "tests/ui/manual_split_once.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_split_once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_split_once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_split_once.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,85 +1,85 @@\n error: manual implementation of `split_once`\n-  --> $DIR/manual_split_once.rs:14:13\n+  --> $DIR/manual_split_once.rs:13:13\n    |\n LL |     let _ = \"key=value\".splitn(2, '=').nth(1).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"key=value\".split_once('=').unwrap().1`\n    |\n    = note: `-D clippy::manual-split-once` implied by `-D warnings`\n \n error: manual implementation of `split_once`\n-  --> $DIR/manual_split_once.rs:15:13\n+  --> $DIR/manual_split_once.rs:14:13\n    |\n LL |     let _ = \"key=value\".splitn(2, '=').skip(1).next().unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"key=value\".split_once('=').unwrap().1`\n \n error: manual implementation of `split_once`\n-  --> $DIR/manual_split_once.rs:16:18\n+  --> $DIR/manual_split_once.rs:15:18\n    |\n LL |     let (_, _) = \"key=value\".splitn(2, '=').next_tuple().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"key=value\".split_once('=')`\n \n error: manual implementation of `split_once`\n-  --> $DIR/manual_split_once.rs:19:13\n+  --> $DIR/manual_split_once.rs:18:13\n    |\n LL |     let _ = s.splitn(2, '=').nth(1).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.split_once('=').unwrap().1`\n \n error: manual implementation of `split_once`\n-  --> $DIR/manual_split_once.rs:22:13\n+  --> $DIR/manual_split_once.rs:21:13\n    |\n LL |     let _ = s.splitn(2, '=').nth(1).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.split_once('=').unwrap().1`\n \n error: manual implementation of `split_once`\n-  --> $DIR/manual_split_once.rs:25:13\n+  --> $DIR/manual_split_once.rs:24:13\n    |\n LL |     let _ = s.splitn(2, '=').skip(1).next().unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.split_once('=').unwrap().1`\n \n error: manual implementation of `split_once`\n-  --> $DIR/manual_split_once.rs:28:17\n+  --> $DIR/manual_split_once.rs:27:17\n    |\n LL |         let _ = s.splitn(2, '=').nth(1)?;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.split_once('=')?.1`\n \n error: manual implementation of `split_once`\n-  --> $DIR/manual_split_once.rs:29:17\n+  --> $DIR/manual_split_once.rs:28:17\n    |\n LL |         let _ = s.splitn(2, '=').skip(1).next()?;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.split_once('=')?.1`\n \n error: manual implementation of `rsplit_once`\n-  --> $DIR/manual_split_once.rs:30:17\n+  --> $DIR/manual_split_once.rs:29:17\n    |\n LL |         let _ = s.rsplitn(2, '=').nth(1)?;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.rsplit_once('=')?.0`\n \n error: manual implementation of `rsplit_once`\n-  --> $DIR/manual_split_once.rs:31:17\n+  --> $DIR/manual_split_once.rs:30:17\n    |\n LL |         let _ = s.rsplitn(2, '=').skip(1).next()?;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.rsplit_once('=')?.0`\n \n error: manual implementation of `rsplit_once`\n-  --> $DIR/manual_split_once.rs:39:13\n+  --> $DIR/manual_split_once.rs:38:13\n    |\n LL |     let _ = \"key=value\".rsplitn(2, '=').nth(1).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"key=value\".rsplit_once('=').unwrap().0`\n \n error: manual implementation of `rsplit_once`\n-  --> $DIR/manual_split_once.rs:40:18\n+  --> $DIR/manual_split_once.rs:39:18\n    |\n LL |     let (_, _) = \"key=value\".rsplitn(2, '=').next_tuple().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"key=value\".rsplit_once('=').map(|(x, y)| (y, x))`\n \n error: manual implementation of `rsplit_once`\n-  --> $DIR/manual_split_once.rs:41:13\n+  --> $DIR/manual_split_once.rs:40:13\n    |\n LL |     let _ = s.rsplitn(2, '=').nth(1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.rsplit_once('=').map(|x| x.0)`\n \n error: manual implementation of `split_once`\n-  --> $DIR/manual_split_once.rs:45:5\n+  --> $DIR/manual_split_once.rs:44:5\n    |\n LL |     let mut iter = \"a.b.c\".splitn(2, '.');\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -104,7 +104,7 @@ LL +\n    |\n \n error: manual implementation of `split_once`\n-  --> $DIR/manual_split_once.rs:49:5\n+  --> $DIR/manual_split_once.rs:48:5\n    |\n LL |     let mut iter = \"a.b.c\".splitn(2, '.');\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -129,7 +129,7 @@ LL +\n    |\n \n error: manual implementation of `rsplit_once`\n-  --> $DIR/manual_split_once.rs:53:5\n+  --> $DIR/manual_split_once.rs:52:5\n    |\n LL |     let mut iter = \"a.b.c\".rsplitn(2, '.');\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -154,7 +154,7 @@ LL +\n    |\n \n error: manual implementation of `rsplit_once`\n-  --> $DIR/manual_split_once.rs:57:5\n+  --> $DIR/manual_split_once.rs:56:5\n    |\n LL |     let mut iter = \"a.b.c\".rsplitn(2, '.');\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -179,13 +179,13 @@ LL +\n    |\n \n error: manual implementation of `split_once`\n-  --> $DIR/manual_split_once.rs:142:13\n+  --> $DIR/manual_split_once.rs:141:13\n    |\n LL |     let _ = \"key=value\".splitn(2, '=').nth(1).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"key=value\".split_once('=').unwrap().1`\n \n error: manual implementation of `split_once`\n-  --> $DIR/manual_split_once.rs:144:5\n+  --> $DIR/manual_split_once.rs:143:5\n    |\n LL |     let mut iter = \"a.b.c\".splitn(2, '.');\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3d56f2a0dedb2deefbc3676374964f9bd3d3bb1d", "filename": "tests/ui/manual_str_repeat.fixed", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_str_repeat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_str_repeat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_str_repeat.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_str_repeat)]\n \n use std::borrow::Cow;\n@@ -54,13 +53,13 @@ fn main() {\n     let _: String = repeat(x).take(count).collect();\n }\n \n+#[clippy::msrv = \"1.15\"]\n fn _msrv_1_15() {\n-    #![clippy::msrv = \"1.15\"]\n     // `str::repeat` was stabilized in 1.16. Do not lint this\n     let _: String = std::iter::repeat(\"test\").take(10).collect();\n }\n \n+#[clippy::msrv = \"1.16\"]\n fn _msrv_1_16() {\n-    #![clippy::msrv = \"1.16\"]\n     let _: String = \"test\".repeat(10);\n }"}, {"sha": "e8240a949dbc248c4b2ad11dd2a67a42204a01d7", "filename": "tests/ui/manual_str_repeat.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_str_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_str_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_str_repeat.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_str_repeat)]\n \n use std::borrow::Cow;\n@@ -54,13 +53,13 @@ fn main() {\n     let _: String = repeat(x).take(count).collect();\n }\n \n+#[clippy::msrv = \"1.15\"]\n fn _msrv_1_15() {\n-    #![clippy::msrv = \"1.15\"]\n     // `str::repeat` was stabilized in 1.16. Do not lint this\n     let _: String = std::iter::repeat(\"test\").take(10).collect();\n }\n \n+#[clippy::msrv = \"1.16\"]\n fn _msrv_1_16() {\n-    #![clippy::msrv = \"1.16\"]\n     let _: String = std::iter::repeat(\"test\").take(10).collect();\n }"}, {"sha": "bdfee7cab261e197ce9abce874836ba234448b23", "filename": "tests/ui/manual_str_repeat.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_str_repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_str_repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_str_repeat.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,61 +1,61 @@\n error: manual implementation of `str::repeat` using iterators\n-  --> $DIR/manual_str_repeat.rs:10:21\n+  --> $DIR/manual_str_repeat.rs:9:21\n    |\n LL |     let _: String = std::iter::repeat(\"test\").take(10).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"test\".repeat(10)`\n    |\n    = note: `-D clippy::manual-str-repeat` implied by `-D warnings`\n \n error: manual implementation of `str::repeat` using iterators\n-  --> $DIR/manual_str_repeat.rs:11:21\n+  --> $DIR/manual_str_repeat.rs:10:21\n    |\n LL |     let _: String = std::iter::repeat('x').take(10).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"x\".repeat(10)`\n \n error: manual implementation of `str::repeat` using iterators\n-  --> $DIR/manual_str_repeat.rs:12:21\n+  --> $DIR/manual_str_repeat.rs:11:21\n    |\n LL |     let _: String = std::iter::repeat('/'').take(10).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"'\".repeat(10)`\n \n error: manual implementation of `str::repeat` using iterators\n-  --> $DIR/manual_str_repeat.rs:13:21\n+  --> $DIR/manual_str_repeat.rs:12:21\n    |\n LL |     let _: String = std::iter::repeat('\"').take(10).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"/\"\".repeat(10)`\n \n error: manual implementation of `str::repeat` using iterators\n-  --> $DIR/manual_str_repeat.rs:17:13\n+  --> $DIR/manual_str_repeat.rs:16:13\n    |\n LL |     let _ = repeat(x).take(count + 2).collect::<String>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `x.repeat(count + 2)`\n \n error: manual implementation of `str::repeat` using iterators\n-  --> $DIR/manual_str_repeat.rs:26:21\n+  --> $DIR/manual_str_repeat.rs:25:21\n    |\n LL |     let _: String = repeat(*x).take(count).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(*x).repeat(count)`\n \n error: manual implementation of `str::repeat` using iterators\n-  --> $DIR/manual_str_repeat.rs:35:21\n+  --> $DIR/manual_str_repeat.rs:34:21\n    |\n LL |     let _: String = repeat(x).take(count).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `x.repeat(count)`\n \n error: manual implementation of `str::repeat` using iterators\n-  --> $DIR/manual_str_repeat.rs:47:21\n+  --> $DIR/manual_str_repeat.rs:46:21\n    |\n LL |     let _: String = repeat(Cow::Borrowed(\"test\")).take(count).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `Cow::Borrowed(\"test\").repeat(count)`\n \n error: manual implementation of `str::repeat` using iterators\n-  --> $DIR/manual_str_repeat.rs:50:21\n+  --> $DIR/manual_str_repeat.rs:49:21\n    |\n LL |     let _: String = repeat(x).take(count).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `x.repeat(count)`\n \n error: manual implementation of `str::repeat` using iterators\n-  --> $DIR/manual_str_repeat.rs:65:21\n+  --> $DIR/manual_str_repeat.rs:64:21\n    |\n LL |     let _: String = std::iter::repeat(\"test\").take(10).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"test\".repeat(10)`"}, {"sha": "b0b1c262aeed846f9bb6e105014cf575d4eaa5eb", "filename": "tests/ui/manual_strip.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_strip.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,4 +1,3 @@\n-#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_strip)]\n \n fn main() {\n@@ -66,18 +65,16 @@ fn main() {\n     }\n }\n \n+#[clippy::msrv = \"1.44\"]\n fn msrv_1_44() {\n-    #![clippy::msrv = \"1.44\"]\n-\n     let s = \"abc\";\n     if s.starts_with('a') {\n         s[1..].to_string();\n     }\n }\n \n+#[clippy::msrv = \"1.45\"]\n fn msrv_1_45() {\n-    #![clippy::msrv = \"1.45\"]\n-\n     let s = \"abc\";\n     if s.starts_with('a') {\n         s[1..].to_string();"}, {"sha": "f592e898fc928d7e7d8b8c05f263cd6e8af401b3", "filename": "tests/ui/manual_strip.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_strip.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmanual_strip.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_strip.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,11 +1,11 @@\n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:8:24\n+  --> $DIR/manual_strip.rs:7:24\n    |\n LL |         str::to_string(&s[\"ab\".len()..]);\n    |                        ^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:7:5\n+  --> $DIR/manual_strip.rs:6:5\n    |\n LL |     if s.starts_with(\"ab\") {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -21,13 +21,13 @@ LL ~         <stripped>.to_string();\n    |\n \n error: stripping a suffix manually\n-  --> $DIR/manual_strip.rs:16:24\n+  --> $DIR/manual_strip.rs:15:24\n    |\n LL |         str::to_string(&s[..s.len() - \"bc\".len()]);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the suffix was tested here\n-  --> $DIR/manual_strip.rs:15:5\n+  --> $DIR/manual_strip.rs:14:5\n    |\n LL |     if s.ends_with(\"bc\") {\n    |     ^^^^^^^^^^^^^^^^^^^^^\n@@ -42,13 +42,13 @@ LL ~         <stripped>.to_string();\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:25:24\n+  --> $DIR/manual_strip.rs:24:24\n    |\n LL |         str::to_string(&s[1..]);\n    |                        ^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:24:5\n+  --> $DIR/manual_strip.rs:23:5\n    |\n LL |     if s.starts_with('a') {\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,13 +60,13 @@ LL ~         <stripped>.to_string();\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:32:24\n+  --> $DIR/manual_strip.rs:31:24\n    |\n LL |         str::to_string(&s[prefix.len()..]);\n    |                        ^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:31:5\n+  --> $DIR/manual_strip.rs:30:5\n    |\n LL |     if s.starts_with(prefix) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -77,13 +77,13 @@ LL ~         str::to_string(<stripped>);\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:38:24\n+  --> $DIR/manual_strip.rs:37:24\n    |\n LL |         str::to_string(&s[PREFIX.len()..]);\n    |                        ^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:37:5\n+  --> $DIR/manual_strip.rs:36:5\n    |\n LL |     if s.starts_with(PREFIX) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -95,13 +95,13 @@ LL ~         str::to_string(<stripped>);\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:45:24\n+  --> $DIR/manual_strip.rs:44:24\n    |\n LL |         str::to_string(&TARGET[prefix.len()..]);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:44:5\n+  --> $DIR/manual_strip.rs:43:5\n    |\n LL |     if TARGET.starts_with(prefix) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -112,13 +112,13 @@ LL ~         str::to_string(<stripped>);\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:51:9\n+  --> $DIR/manual_strip.rs:50:9\n    |\n LL |         s1[2..].to_uppercase();\n    |         ^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:50:5\n+  --> $DIR/manual_strip.rs:49:5\n    |\n LL |     if s1.starts_with(\"ab\") {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -129,13 +129,13 @@ LL ~         <stripped>.to_uppercase();\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:83:9\n+  --> $DIR/manual_strip.rs:80:9\n    |\n LL |         s[1..].to_string();\n    |         ^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:82:5\n+  --> $DIR/manual_strip.rs:79:5\n    |\n LL |     if s.starts_with('a') {\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "32631024ca5dca840d75fecb7487f7aceca29642", "filename": "tests/ui/map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // aux-build:option_helpers.rs\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::map_unwrap_or)]\n #![allow(clippy::uninlined_format_args, clippy::unnecessary_lazy_evaluations)]\n \n@@ -82,17 +81,15 @@ fn main() {\n     result_methods();\n }\n \n+#[clippy::msrv = \"1.40\"]\n fn msrv_1_40() {\n-    #![clippy::msrv = \"1.40\"]\n-\n     let res: Result<i32, ()> = Ok(1);\n \n     let _ = res.map(|x| x + 1).unwrap_or_else(|_e| 0);\n }\n \n+#[clippy::msrv = \"1.41\"]\n fn msrv_1_41() {\n-    #![clippy::msrv = \"1.41\"]\n-\n     let res: Result<i32, ()> = Ok(1);\n \n     let _ = res.map(|x| x + 1).unwrap_or_else(|_e| 0);"}, {"sha": "41781b050fa20a5df494c0625c2c73608d8d42d8", "filename": "tests/ui/map_unwrap_or.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmap_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmap_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:18:13\n+  --> $DIR/map_unwrap_or.rs:17:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -15,7 +15,7 @@ LL +     let _ = opt.map_or(0, |x| x + 1);\n    |\n \n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:22:13\n+  --> $DIR/map_unwrap_or.rs:21:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -33,7 +33,7 @@ LL ~     );\n    |\n \n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:26:13\n+  --> $DIR/map_unwrap_or.rs:25:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -50,7 +50,7 @@ LL ~         }, |x| x + 1);\n    |\n \n error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n-  --> $DIR/map_unwrap_or.rs:31:13\n+  --> $DIR/map_unwrap_or.rs:30:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -62,7 +62,7 @@ LL +     let _ = opt.and_then(|x| Some(x + 1));\n    |\n \n error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n-  --> $DIR/map_unwrap_or.rs:33:13\n+  --> $DIR/map_unwrap_or.rs:32:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -80,7 +80,7 @@ LL ~     );\n    |\n \n error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n-  --> $DIR/map_unwrap_or.rs:37:13\n+  --> $DIR/map_unwrap_or.rs:36:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -95,7 +95,7 @@ LL +         .and_then(|x| Some(x + 1));\n    |\n \n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:48:13\n+  --> $DIR/map_unwrap_or.rs:47:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -107,7 +107,7 @@ LL +     let _ = Some(\"prefix\").map_or(id, |p| format!(\"{}.\", p));\n    |\n \n error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:52:13\n+  --> $DIR/map_unwrap_or.rs:51:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -117,7 +117,7 @@ LL | |     ).unwrap_or_else(|| 0);\n    | |__________________________^\n \n error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:56:13\n+  --> $DIR/map_unwrap_or.rs:55:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -127,7 +127,7 @@ LL | |         );\n    | |_________^\n \n error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:68:13\n+  --> $DIR/map_unwrap_or.rs:67:13\n    |\n LL |       let _ = res.map(|x| {\n    |  _____________^\n@@ -137,7 +137,7 @@ LL | |     ).unwrap_or_else(|_e| 0);\n    | |____________________________^\n \n error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:72:13\n+  --> $DIR/map_unwrap_or.rs:71:13\n    |\n LL |       let _ = res.map(|x| x + 1)\n    |  _____________^\n@@ -147,7 +147,7 @@ LL | |         });\n    | |__________^\n \n error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:98:13\n+  --> $DIR/map_unwrap_or.rs:95:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|_e| 0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `res.map_or_else(|_e| 0, |x| x + 1)`"}, {"sha": "55cd15bd5c3858adb81df923ac8830385a5b5c48", "filename": "tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::match_like_matches_macro)]\n #![allow(\n     unreachable_patterns,\n@@ -200,17 +199,15 @@ fn main() {\n     };\n }\n \n+#[clippy::msrv = \"1.41\"]\n fn msrv_1_41() {\n-    #![clippy::msrv = \"1.41\"]\n-\n     let _y = match Some(5) {\n         Some(0) => true,\n         _ => false,\n     };\n }\n \n+#[clippy::msrv = \"1.42\"]\n fn msrv_1_42() {\n-    #![clippy::msrv = \"1.42\"]\n-\n     let _y = matches!(Some(5), Some(0));\n }"}, {"sha": "5d645e108e511859e73013037be76ffcd786e59b", "filename": "tests/ui/match_expr_like_matches_macro.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::match_like_matches_macro)]\n #![allow(\n     unreachable_patterns,\n@@ -241,18 +240,16 @@ fn main() {\n     };\n }\n \n+#[clippy::msrv = \"1.41\"]\n fn msrv_1_41() {\n-    #![clippy::msrv = \"1.41\"]\n-\n     let _y = match Some(5) {\n         Some(0) => true,\n         _ => false,\n     };\n }\n \n+#[clippy::msrv = \"1.42\"]\n fn msrv_1_42() {\n-    #![clippy::msrv = \"1.42\"]\n-\n     let _y = match Some(5) {\n         Some(0) => true,\n         _ => false,"}, {"sha": "46f67ef4900f8d6d001ccd47e07748801013bfa8", "filename": "tests/ui/match_expr_like_matches_macro.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:16:14\n+  --> $DIR/match_expr_like_matches_macro.rs:15:14\n    |\n LL |       let _y = match x {\n    |  ______________^\n@@ -11,7 +11,7 @@ LL | |     };\n    = note: `-D clippy::match-like-matches-macro` implied by `-D warnings`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:22:14\n+  --> $DIR/match_expr_like_matches_macro.rs:21:14\n    |\n LL |       let _w = match x {\n    |  ______________^\n@@ -21,7 +21,7 @@ LL | |     };\n    | |_____^ help: try this: `matches!(x, Some(_))`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/match_expr_like_matches_macro.rs:28:14\n+  --> $DIR/match_expr_like_matches_macro.rs:27:14\n    |\n LL |       let _z = match x {\n    |  ______________^\n@@ -33,7 +33,7 @@ LL | |     };\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:34:15\n+  --> $DIR/match_expr_like_matches_macro.rs:33:15\n    |\n LL |       let _zz = match x {\n    |  _______________^\n@@ -43,13 +43,13 @@ LL | |     };\n    | |_____^ help: try this: `!matches!(x, Some(r) if r == 0)`\n \n error: if let .. else expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:40:16\n+  --> $DIR/match_expr_like_matches_macro.rs:39:16\n    |\n LL |     let _zzz = if let Some(5) = x { true } else { false };\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `matches!(x, Some(5))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:64:20\n+  --> $DIR/match_expr_like_matches_macro.rs:63:20\n    |\n LL |           let _ans = match x {\n    |  ____________________^\n@@ -60,7 +60,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(x, E::A(_) | E::B(_))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:74:20\n+  --> $DIR/match_expr_like_matches_macro.rs:73:20\n    |\n LL |           let _ans = match x {\n    |  ____________________^\n@@ -73,7 +73,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(x, E::A(_) | E::B(_))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:84:20\n+  --> $DIR/match_expr_like_matches_macro.rs:83:20\n    |\n LL |           let _ans = match x {\n    |  ____________________^\n@@ -84,7 +84,7 @@ LL | |         };\n    | |_________^ help: try this: `!matches!(x, E::B(_) | E::C)`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:144:18\n+  --> $DIR/match_expr_like_matches_macro.rs:143:18\n    |\n LL |           let _z = match &z {\n    |  __________________^\n@@ -94,7 +94,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(z, Some(3))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:153:18\n+  --> $DIR/match_expr_like_matches_macro.rs:152:18\n    |\n LL |           let _z = match &z {\n    |  __________________^\n@@ -104,7 +104,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(&z, Some(3))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:170:21\n+  --> $DIR/match_expr_like_matches_macro.rs:169:21\n    |\n LL |               let _ = match &z {\n    |  _____________________^\n@@ -114,7 +114,7 @@ LL | |             };\n    | |_____________^ help: try this: `matches!(&z, AnEnum::X)`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:184:20\n+  --> $DIR/match_expr_like_matches_macro.rs:183:20\n    |\n LL |           let _res = match &val {\n    |  ____________________^\n@@ -124,7 +124,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(&val, &Some(ref _a))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:196:20\n+  --> $DIR/match_expr_like_matches_macro.rs:195:20\n    |\n LL |           let _res = match &val {\n    |  ____________________^\n@@ -134,7 +134,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(&val, &Some(ref _a))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:256:14\n+  --> $DIR/match_expr_like_matches_macro.rs:253:14\n    |\n LL |       let _y = match Some(5) {\n    |  ______________^"}, {"sha": "874d558433034d217e246dd8fcf38e17f842b4bb", "filename": "tests/ui/mem_replace.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmem_replace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmem_replace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(unused)]\n #![warn(\n     clippy::all,\n@@ -80,16 +79,14 @@ fn main() {\n     dont_lint_primitive();\n }\n \n+#[clippy::msrv = \"1.39\"]\n fn msrv_1_39() {\n-    #![clippy::msrv = \"1.39\"]\n-\n     let mut s = String::from(\"foo\");\n     let _ = std::mem::replace(&mut s, String::default());\n }\n \n+#[clippy::msrv = \"1.40\"]\n fn msrv_1_40() {\n-    #![clippy::msrv = \"1.40\"]\n-\n     let mut s = String::from(\"foo\");\n     let _ = std::mem::take(&mut s);\n }"}, {"sha": "f4f3bff514463e4a04a661ab372d36579e59ec0b", "filename": "tests/ui/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(unused)]\n #![warn(\n     clippy::all,\n@@ -80,16 +79,14 @@ fn main() {\n     dont_lint_primitive();\n }\n \n+#[clippy::msrv = \"1.39\"]\n fn msrv_1_39() {\n-    #![clippy::msrv = \"1.39\"]\n-\n     let mut s = String::from(\"foo\");\n     let _ = std::mem::replace(&mut s, String::default());\n }\n \n+#[clippy::msrv = \"1.40\"]\n fn msrv_1_40() {\n-    #![clippy::msrv = \"1.40\"]\n-\n     let mut s = String::from(\"foo\");\n     let _ = std::mem::replace(&mut s, String::default());\n }"}, {"sha": "caa127f76eeffa8a1d92b0b75437807eb2d8bac0", "filename": "tests/ui/mem_replace.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,123 +1,123 @@\n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:17:13\n+  --> $DIR/mem_replace.rs:16:13\n    |\n LL |     let _ = mem::replace(&mut an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n    |\n    = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`\n \n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:19:13\n+  --> $DIR/mem_replace.rs:18:13\n    |\n LL |     let _ = mem::replace(an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:24:13\n+  --> $DIR/mem_replace.rs:23:13\n    |\n LL |     let _ = std::mem::replace(&mut s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:27:13\n+  --> $DIR/mem_replace.rs:26:13\n    |\n LL |     let _ = std::mem::replace(s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:28:13\n+  --> $DIR/mem_replace.rs:27:13\n    |\n LL |     let _ = std::mem::replace(s, Default::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:31:13\n+  --> $DIR/mem_replace.rs:30:13\n    |\n LL |     let _ = std::mem::replace(&mut v, Vec::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:32:13\n+  --> $DIR/mem_replace.rs:31:13\n    |\n LL |     let _ = std::mem::replace(&mut v, Default::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:33:13\n+  --> $DIR/mem_replace.rs:32:13\n    |\n LL |     let _ = std::mem::replace(&mut v, Vec::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:34:13\n+  --> $DIR/mem_replace.rs:33:13\n    |\n LL |     let _ = std::mem::replace(&mut v, vec![]);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:37:13\n+  --> $DIR/mem_replace.rs:36:13\n    |\n LL |     let _ = std::mem::replace(&mut hash_map, HashMap::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut hash_map)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:40:13\n+  --> $DIR/mem_replace.rs:39:13\n    |\n LL |     let _ = std::mem::replace(&mut btree_map, BTreeMap::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut btree_map)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:43:13\n+  --> $DIR/mem_replace.rs:42:13\n    |\n LL |     let _ = std::mem::replace(&mut vd, VecDeque::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut vd)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:46:13\n+  --> $DIR/mem_replace.rs:45:13\n    |\n LL |     let _ = std::mem::replace(&mut hash_set, HashSet::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut hash_set)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:49:13\n+  --> $DIR/mem_replace.rs:48:13\n    |\n LL |     let _ = std::mem::replace(&mut btree_set, BTreeSet::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut btree_set)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:52:13\n+  --> $DIR/mem_replace.rs:51:13\n    |\n LL |     let _ = std::mem::replace(&mut list, LinkedList::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut list)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:55:13\n+  --> $DIR/mem_replace.rs:54:13\n    |\n LL |     let _ = std::mem::replace(&mut binary_heap, BinaryHeap::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut binary_heap)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:58:13\n+  --> $DIR/mem_replace.rs:57:13\n    |\n LL |     let _ = std::mem::replace(&mut tuple, (vec![], BinaryHeap::new()));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut tuple)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:61:13\n+  --> $DIR/mem_replace.rs:60:13\n    |\n LL |     let _ = std::mem::replace(&mut refstr, \"\");\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut refstr)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:64:13\n+  --> $DIR/mem_replace.rs:63:13\n    |\n LL |     let _ = std::mem::replace(&mut slice, &[]);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut slice)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:94:13\n+  --> $DIR/mem_replace.rs:91:13\n    |\n LL |     let _ = std::mem::replace(&mut s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`"}, {"sha": "955e7eb727634134ddd9df2c9ef39c8b6692e9a4", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -3,27 +3,60 @@\n \n fn main() {}\n \n+#[clippy::msrv = \"1.42.0\"]\n fn just_under_msrv() {\n-    #![clippy::msrv = \"1.42.0\"]\n     let log2_10 = 3.321928094887362;\n }\n \n+#[clippy::msrv = \"1.43.0\"]\n fn meets_msrv() {\n-    #![clippy::msrv = \"1.43.0\"]\n     let log2_10 = 3.321928094887362;\n }\n \n+#[clippy::msrv = \"1.44.0\"]\n fn just_above_msrv() {\n-    #![clippy::msrv = \"1.44.0\"]\n     let log2_10 = 3.321928094887362;\n }\n \n+#[clippy::msrv = \"1.42\"]\n fn no_patch_under() {\n-    #![clippy::msrv = \"1.42\"]\n     let log2_10 = 3.321928094887362;\n }\n \n+#[clippy::msrv = \"1.43\"]\n fn no_patch_meets() {\n+    let log2_10 = 3.321928094887362;\n+}\n+\n+fn inner_attr_under() {\n+    #![clippy::msrv = \"1.42\"]\n+    let log2_10 = 3.321928094887362;\n+}\n+\n+fn inner_attr_meets() {\n     #![clippy::msrv = \"1.43\"]\n     let log2_10 = 3.321928094887362;\n }\n+\n+// https://github.com/rust-lang/rust-clippy/issues/6920\n+fn scoping() {\n+    mod m {\n+        #![clippy::msrv = \"1.42.0\"]\n+    }\n+\n+    // Should warn\n+    let log2_10 = 3.321928094887362;\n+\n+    mod a {\n+        #![clippy::msrv = \"1.42.0\"]\n+\n+        fn should_warn() {\n+            #![clippy::msrv = \"1.43.0\"]\n+            let log2_10 = 3.321928094887362;\n+        }\n+\n+        fn should_not_warn() {\n+            let log2_10 = 3.321928094887362;\n+        }\n+    }\n+}"}, {"sha": "7e2135584efde60aa144b334f15ed722860406b0", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -23,5 +23,29 @@ LL |     let log2_10 = 3.321928094887362;\n    |\n    = help: consider using the constant directly\n \n-error: aborting due to 3 previous errors\n+error: approximate value of `f{32, 64}::consts::LOG2_10` found\n+  --> $DIR/min_rust_version_attr.rs:38:19\n+   |\n+LL |     let log2_10 = 3.321928094887362;\n+   |                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n+\n+error: approximate value of `f{32, 64}::consts::LOG2_10` found\n+  --> $DIR/min_rust_version_attr.rs:48:19\n+   |\n+LL |     let log2_10 = 3.321928094887362;\n+   |                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n+\n+error: approximate value of `f{32, 64}::consts::LOG2_10` found\n+  --> $DIR/min_rust_version_attr.rs:55:27\n+   |\n+LL |             let log2_10 = 3.321928094887362;\n+   |                           ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "675b780315251ce20f64f17b62a4ff9c1075172c", "filename": "tests/ui/min_rust_version_invalid_attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmin_rust_version_invalid_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmin_rust_version_invalid_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_invalid_attr.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -4,7 +4,7 @@ error: `invalid.version` is not a valid Rust version\n LL | #![clippy::msrv = \"invalid.version\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `msrv` cannot be an outer attribute\n+error: `invalid.version` is not a valid Rust version\n   --> $DIR/min_rust_version_invalid_attr.rs:6:1\n    |\n LL | #[clippy::msrv = \"invalid.version\"]"}, {"sha": "03e7dac7df94c4ceaaf7d29e69deb8dc80050ed3", "filename": "tests/ui/misnamed_getters.rs", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmisnamed_getters.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -0,0 +1,124 @@\n+#![allow(unused)]\n+#![warn(clippy::misnamed_getters)]\n+\n+struct A {\n+    a: u8,\n+    b: u8,\n+    c: u8,\n+}\n+\n+impl A {\n+    fn a(&self) -> &u8 {\n+        &self.b\n+    }\n+    fn a_mut(&mut self) -> &mut u8 {\n+        &mut self.b\n+    }\n+\n+    fn b(self) -> u8 {\n+        self.a\n+    }\n+\n+    fn b_mut(&mut self) -> &mut u8 {\n+        &mut self.a\n+    }\n+\n+    fn c(&self) -> &u8 {\n+        &self.b\n+    }\n+\n+    fn c_mut(&mut self) -> &mut u8 {\n+        &mut self.a\n+    }\n+}\n+\n+union B {\n+    a: u8,\n+    b: u8,\n+}\n+\n+impl B {\n+    unsafe fn a(&self) -> &u8 {\n+        &self.b\n+    }\n+    unsafe fn a_mut(&mut self) -> &mut u8 {\n+        &mut self.b\n+    }\n+\n+    unsafe fn b(self) -> u8 {\n+        self.a\n+    }\n+\n+    unsafe fn b_mut(&mut self) -> &mut u8 {\n+        &mut self.a\n+    }\n+\n+    unsafe fn c(&self) -> &u8 {\n+        &self.b\n+    }\n+\n+    unsafe fn c_mut(&mut self) -> &mut u8 {\n+        &mut self.a\n+    }\n+\n+    unsafe fn a_unchecked(&self) -> &u8 {\n+        &self.b\n+    }\n+    unsafe fn a_unchecked_mut(&mut self) -> &mut u8 {\n+        &mut self.b\n+    }\n+\n+    unsafe fn b_unchecked(self) -> u8 {\n+        self.a\n+    }\n+\n+    unsafe fn b_unchecked_mut(&mut self) -> &mut u8 {\n+        &mut self.a\n+    }\n+\n+    unsafe fn c_unchecked(&self) -> &u8 {\n+        &self.b\n+    }\n+\n+    unsafe fn c_unchecked_mut(&mut self) -> &mut u8 {\n+        &mut self.a\n+    }\n+}\n+\n+struct D {\n+    d: u8,\n+    inner: A,\n+}\n+\n+impl core::ops::Deref for D {\n+    type Target = A;\n+    fn deref(&self) -> &A {\n+        &self.inner\n+    }\n+}\n+\n+impl core::ops::DerefMut for D {\n+    fn deref_mut(&mut self) -> &mut A {\n+        &mut self.inner\n+    }\n+}\n+\n+impl D {\n+    fn a(&self) -> &u8 {\n+        &self.b\n+    }\n+    fn a_mut(&mut self) -> &mut u8 {\n+        &mut self.b\n+    }\n+\n+    fn d(&self) -> &u8 {\n+        &self.b\n+    }\n+    fn d_mut(&mut self) -> &mut u8 {\n+        &mut self.b\n+    }\n+}\n+\n+fn main() {\n+    // test code goes here\n+}"}, {"sha": "1e38a83d019a6d33e7aa82c973beedd657e9dc9b", "filename": "tests/ui/misnamed_getters.stderr", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmisnamed_getters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmisnamed_getters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmisnamed_getters.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -0,0 +1,166 @@\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:11:5\n+   |\n+LL | /     fn a(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.a`\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::misnamed-getters` implied by `-D warnings`\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:14:5\n+   |\n+LL | /     fn a_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.b\n+   | |         ----------- help: consider using: `&mut self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:18:5\n+   |\n+LL | /     fn b(self) -> u8 {\n+LL | |         self.a\n+   | |         ------ help: consider using: `self.b`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:22:5\n+   |\n+LL | /     fn b_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.a\n+   | |         ----------- help: consider using: `&mut self.b`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:26:5\n+   |\n+LL | /     fn c(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.c`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:30:5\n+   |\n+LL | /     fn c_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.a\n+   | |         ----------- help: consider using: `&mut self.c`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:41:5\n+   |\n+LL | /     unsafe fn a(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:44:5\n+   |\n+LL | /     unsafe fn a_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.b\n+   | |         ----------- help: consider using: `&mut self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:48:5\n+   |\n+LL | /     unsafe fn b(self) -> u8 {\n+LL | |         self.a\n+   | |         ------ help: consider using: `self.b`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:52:5\n+   |\n+LL | /     unsafe fn b_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.a\n+   | |         ----------- help: consider using: `&mut self.b`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:64:5\n+   |\n+LL | /     unsafe fn a_unchecked(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:67:5\n+   |\n+LL | /     unsafe fn a_unchecked_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.b\n+   | |         ----------- help: consider using: `&mut self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:71:5\n+   |\n+LL | /     unsafe fn b_unchecked(self) -> u8 {\n+LL | |         self.a\n+   | |         ------ help: consider using: `self.b`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:75:5\n+   |\n+LL | /     unsafe fn b_unchecked_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.a\n+   | |         ----------- help: consider using: `&mut self.b`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:107:5\n+   |\n+LL | /     fn a(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:110:5\n+   |\n+LL | /     fn a_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.b\n+   | |         ----------- help: consider using: `&mut self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:114:5\n+   |\n+LL | /     fn d(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.d`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:117:5\n+   |\n+LL | /     fn d_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.b\n+   | |         ----------- help: consider using: `&mut self.d`\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 18 previous errors\n+"}, {"sha": "75cace1816754e75eb17dca1d10e1063f528ac73", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -7,7 +7,6 @@\n \n #![warn(clippy::missing_const_for_fn)]\n #![feature(start)]\n-#![feature(custom_inner_attributes)]\n \n extern crate helper;\n extern crate proc_macro_with_span;\n@@ -115,9 +114,8 @@ fn unstably_const_fn() {\n     helper::unstably_const_fn()\n }\n \n+#[clippy::msrv = \"1.46.0\"]\n mod const_fn_stabilized_after_msrv {\n-    #![clippy::msrv = \"1.46.0\"]\n-\n     // Do not lint this because `u8::is_ascii_digit` is stabilized as a const function in 1.47.0.\n     fn const_fn_stabilized_after_msrv(byte: u8) {\n         byte.is_ascii_digit();"}, {"sha": "0246c8622ed3adf6b7f6c7086843b83b4049b960", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::missing_const_for_fn)]\n #![allow(incomplete_features, clippy::let_and_return)]\n-#![feature(custom_inner_attributes)]\n \n use std::mem::transmute;\n \n@@ -68,24 +67,21 @@ mod with_drop {\n     }\n }\n \n+#[clippy::msrv = \"1.47.0\"]\n mod const_fn_stabilized_before_msrv {\n-    #![clippy::msrv = \"1.47.0\"]\n-\n     // This could be const because `u8::is_ascii_digit` is a stable const function in 1.47.\n     fn const_fn_stabilized_before_msrv(byte: u8) {\n         byte.is_ascii_digit();\n     }\n }\n \n+#[clippy::msrv = \"1.45\"]\n fn msrv_1_45() -> i32 {\n-    #![clippy::msrv = \"1.45\"]\n-\n     45\n }\n \n+#[clippy::msrv = \"1.46\"]\n fn msrv_1_46() -> i32 {\n-    #![clippy::msrv = \"1.46\"]\n-\n     46\n }\n "}, {"sha": "955e1ed26340899c898c4eedcd508b384ac2c2f1", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:13:5\n+  --> $DIR/could_be_const.rs:12:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self { guess: 42 }\n@@ -9,23 +9,23 @@ LL | |     }\n    = note: `-D clippy::missing-const-for-fn` implied by `-D warnings`\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:17:5\n+  --> $DIR/could_be_const.rs:16:5\n    |\n LL | /     fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {\n LL | |         b\n LL | |     }\n    | |_____^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:23:1\n+  --> $DIR/could_be_const.rs:22:1\n    |\n LL | / fn one() -> i32 {\n LL | |     1\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:28:1\n+  --> $DIR/could_be_const.rs:27:1\n    |\n LL | / fn two() -> i32 {\n LL | |     let abc = 2;\n@@ -34,59 +34,57 @@ LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:34:1\n+  --> $DIR/could_be_const.rs:33:1\n    |\n LL | / fn string() -> String {\n LL | |     String::new()\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:39:1\n+  --> $DIR/could_be_const.rs:38:1\n    |\n LL | / unsafe fn four() -> i32 {\n LL | |     4\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:44:1\n+  --> $DIR/could_be_const.rs:43:1\n    |\n LL | / fn generic<T>(t: T) -> T {\n LL | |     t\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:52:1\n+  --> $DIR/could_be_const.rs:51:1\n    |\n LL | / fn generic_arr<T: Copy>(t: [T; 1]) -> T {\n LL | |     t[0]\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:65:9\n+  --> $DIR/could_be_const.rs:64:9\n    |\n LL | /         pub fn b(self, a: &A) -> B {\n LL | |             B\n LL | |         }\n    | |_________^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:75:5\n+  --> $DIR/could_be_const.rs:73:5\n    |\n LL | /     fn const_fn_stabilized_before_msrv(byte: u8) {\n LL | |         byte.is_ascii_digit();\n LL | |     }\n    | |_____^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:86:1\n+  --> $DIR/could_be_const.rs:84:1\n    |\n LL | / fn msrv_1_46() -> i32 {\n-LL | |     #![clippy::msrv = \"1.46\"]\n-LL | |\n LL | |     46\n LL | | }\n    | |_^"}, {"sha": "4cb7f6b687f1195c3bb429b941c8ca256f6534d3", "filename": "tests/ui/needless_borrow.fixed", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,13 +1,13 @@\n // run-rustfix\n-#![feature(custom_inner_attributes, lint_reasons)]\n-\n-#[warn(clippy::all, clippy::needless_borrow)]\n-#[allow(unused_variables)]\n-#[allow(\n+#![feature(lint_reasons)]\n+#![allow(\n+    unused,\n     clippy::uninlined_format_args,\n     clippy::unnecessary_mut_passed,\n     clippy::unnecessary_to_owned\n )]\n+#![warn(clippy::needless_borrow)]\n+\n fn main() {\n     let a = 5;\n     let ref_a = &a;\n@@ -171,14 +171,12 @@ impl<'a> Trait for &'a str {}\n \n fn h(_: &dyn Trait) {}\n \n-#[allow(dead_code)]\n fn check_expect_suppression() {\n     let a = 5;\n     #[expect(clippy::needless_borrow)]\n     let _ = x(&&a);\n }\n \n-#[allow(dead_code)]\n mod issue9160 {\n     pub struct S<F> {\n         f: F,\n@@ -267,7 +265,6 @@ where\n }\n \n // https://github.com/rust-lang/rust-clippy/pull/9136#pullrequestreview-1037379321\n-#[allow(dead_code)]\n mod copyable_iterator {\n     #[derive(Clone, Copy)]\n     struct Iter;\n@@ -287,25 +284,20 @@ mod copyable_iterator {\n     }\n }\n \n+#[clippy::msrv = \"1.52.0\"]\n mod under_msrv {\n-    #![allow(dead_code)]\n-    #![clippy::msrv = \"1.52.0\"]\n-\n     fn foo() {\n         let _ = std::process::Command::new(\"ls\").args(&[\"-a\", \"-l\"]).status().unwrap();\n     }\n }\n \n+#[clippy::msrv = \"1.53.0\"]\n mod meets_msrv {\n-    #![allow(dead_code)]\n-    #![clippy::msrv = \"1.53.0\"]\n-\n     fn foo() {\n         let _ = std::process::Command::new(\"ls\").args([\"-a\", \"-l\"]).status().unwrap();\n     }\n }\n \n-#[allow(unused)]\n fn issue9383() {\n     // Should not lint because unions need explicit deref when accessing field\n     use std::mem::ManuallyDrop;\n@@ -334,7 +326,6 @@ fn issue9383() {\n     }\n }\n \n-#[allow(dead_code)]\n fn closure_test() {\n     let env = \"env\".to_owned();\n     let arg = \"arg\".to_owned();\n@@ -348,7 +339,6 @@ fn closure_test() {\n     f(arg);\n }\n \n-#[allow(dead_code)]\n mod significant_drop {\n     #[derive(Debug)]\n     struct X;\n@@ -368,15 +358,13 @@ mod significant_drop {\n     fn debug(_: impl std::fmt::Debug) {}\n }\n \n-#[allow(dead_code)]\n mod used_exactly_once {\n     fn foo(x: String) {\n         use_x(x);\n     }\n     fn use_x(_: impl AsRef<str>) {}\n }\n \n-#[allow(dead_code)]\n mod used_more_than_once {\n     fn foo(x: String) {\n         use_x(&x);\n@@ -387,7 +375,6 @@ mod used_more_than_once {\n }\n \n // https://github.com/rust-lang/rust-clippy/issues/9111#issuecomment-1277114280\n-#[allow(dead_code)]\n mod issue_9111 {\n     struct A;\n \n@@ -409,7 +396,6 @@ mod issue_9111 {\n     }\n }\n \n-#[allow(dead_code)]\n mod issue_9710 {\n     fn main() {\n         let string = String::new();\n@@ -421,7 +407,6 @@ mod issue_9710 {\n     fn f<T: AsRef<str>>(_: T) {}\n }\n \n-#[allow(dead_code)]\n mod issue_9739 {\n     fn foo<D: std::fmt::Display>(_it: impl IntoIterator<Item = D>) {}\n \n@@ -434,7 +419,6 @@ mod issue_9739 {\n     }\n }\n \n-#[allow(dead_code)]\n mod issue_9739_method_variant {\n     struct S;\n \n@@ -451,7 +435,6 @@ mod issue_9739_method_variant {\n     }\n }\n \n-#[allow(dead_code)]\n mod issue_9782 {\n     fn foo<T: AsRef<[u8]>>(t: T) {\n         println!(\"{}\", std::mem::size_of::<T>());\n@@ -475,7 +458,6 @@ mod issue_9782 {\n     }\n }\n \n-#[allow(dead_code)]\n mod issue_9782_type_relative_variant {\n     struct S;\n \n@@ -493,7 +475,6 @@ mod issue_9782_type_relative_variant {\n     }\n }\n \n-#[allow(dead_code)]\n mod issue_9782_method_variant {\n     struct S;\n "}, {"sha": "9a01190ed8dbd585127276cde688afa19fd07730", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,13 +1,13 @@\n // run-rustfix\n-#![feature(custom_inner_attributes, lint_reasons)]\n-\n-#[warn(clippy::all, clippy::needless_borrow)]\n-#[allow(unused_variables)]\n-#[allow(\n+#![feature(lint_reasons)]\n+#![allow(\n+    unused,\n     clippy::uninlined_format_args,\n     clippy::unnecessary_mut_passed,\n     clippy::unnecessary_to_owned\n )]\n+#![warn(clippy::needless_borrow)]\n+\n fn main() {\n     let a = 5;\n     let ref_a = &a;\n@@ -171,14 +171,12 @@ impl<'a> Trait for &'a str {}\n \n fn h(_: &dyn Trait) {}\n \n-#[allow(dead_code)]\n fn check_expect_suppression() {\n     let a = 5;\n     #[expect(clippy::needless_borrow)]\n     let _ = x(&&a);\n }\n \n-#[allow(dead_code)]\n mod issue9160 {\n     pub struct S<F> {\n         f: F,\n@@ -267,7 +265,6 @@ where\n }\n \n // https://github.com/rust-lang/rust-clippy/pull/9136#pullrequestreview-1037379321\n-#[allow(dead_code)]\n mod copyable_iterator {\n     #[derive(Clone, Copy)]\n     struct Iter;\n@@ -287,25 +284,20 @@ mod copyable_iterator {\n     }\n }\n \n+#[clippy::msrv = \"1.52.0\"]\n mod under_msrv {\n-    #![allow(dead_code)]\n-    #![clippy::msrv = \"1.52.0\"]\n-\n     fn foo() {\n         let _ = std::process::Command::new(\"ls\").args(&[\"-a\", \"-l\"]).status().unwrap();\n     }\n }\n \n+#[clippy::msrv = \"1.53.0\"]\n mod meets_msrv {\n-    #![allow(dead_code)]\n-    #![clippy::msrv = \"1.53.0\"]\n-\n     fn foo() {\n         let _ = std::process::Command::new(\"ls\").args(&[\"-a\", \"-l\"]).status().unwrap();\n     }\n }\n \n-#[allow(unused)]\n fn issue9383() {\n     // Should not lint because unions need explicit deref when accessing field\n     use std::mem::ManuallyDrop;\n@@ -334,7 +326,6 @@ fn issue9383() {\n     }\n }\n \n-#[allow(dead_code)]\n fn closure_test() {\n     let env = \"env\".to_owned();\n     let arg = \"arg\".to_owned();\n@@ -348,7 +339,6 @@ fn closure_test() {\n     f(arg);\n }\n \n-#[allow(dead_code)]\n mod significant_drop {\n     #[derive(Debug)]\n     struct X;\n@@ -368,15 +358,13 @@ mod significant_drop {\n     fn debug(_: impl std::fmt::Debug) {}\n }\n \n-#[allow(dead_code)]\n mod used_exactly_once {\n     fn foo(x: String) {\n         use_x(&x);\n     }\n     fn use_x(_: impl AsRef<str>) {}\n }\n \n-#[allow(dead_code)]\n mod used_more_than_once {\n     fn foo(x: String) {\n         use_x(&x);\n@@ -387,7 +375,6 @@ mod used_more_than_once {\n }\n \n // https://github.com/rust-lang/rust-clippy/issues/9111#issuecomment-1277114280\n-#[allow(dead_code)]\n mod issue_9111 {\n     struct A;\n \n@@ -409,7 +396,6 @@ mod issue_9111 {\n     }\n }\n \n-#[allow(dead_code)]\n mod issue_9710 {\n     fn main() {\n         let string = String::new();\n@@ -421,7 +407,6 @@ mod issue_9710 {\n     fn f<T: AsRef<str>>(_: T) {}\n }\n \n-#[allow(dead_code)]\n mod issue_9739 {\n     fn foo<D: std::fmt::Display>(_it: impl IntoIterator<Item = D>) {}\n \n@@ -434,7 +419,6 @@ mod issue_9739 {\n     }\n }\n \n-#[allow(dead_code)]\n mod issue_9739_method_variant {\n     struct S;\n \n@@ -451,7 +435,6 @@ mod issue_9739_method_variant {\n     }\n }\n \n-#[allow(dead_code)]\n mod issue_9782 {\n     fn foo<T: AsRef<[u8]>>(t: T) {\n         println!(\"{}\", std::mem::size_of::<T>());\n@@ -475,7 +458,6 @@ mod issue_9782 {\n     }\n }\n \n-#[allow(dead_code)]\n mod issue_9782_type_relative_variant {\n     struct S;\n \n@@ -493,7 +475,6 @@ mod issue_9782_type_relative_variant {\n     }\n }\n \n-#[allow(dead_code)]\n mod issue_9782_method_variant {\n     struct S;\n "}, {"sha": "d26c317124b8d18d3dc900d31c8badce92e20af1", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -163,55 +163,55 @@ LL |     let _ = std::fs::write(\"x\", &\"\".to_string());\n    |                                 ^^^^^^^^^^^^^^^ help: change this to: `\"\".to_string()`\n \n error: this expression borrows a value the compiler would automatically borrow\n-  --> $DIR/needless_borrow.rs:192:13\n+  --> $DIR/needless_borrow.rs:190:13\n    |\n LL |             (&self.f)()\n    |             ^^^^^^^^^ help: change this to: `(self.f)`\n \n error: this expression borrows a value the compiler would automatically borrow\n-  --> $DIR/needless_borrow.rs:201:13\n+  --> $DIR/needless_borrow.rs:199:13\n    |\n LL |             (&mut self.f)()\n    |             ^^^^^^^^^^^^^ help: change this to: `(self.f)`\n \n error: the borrowed expression implements the required traits\n-  --> $DIR/needless_borrow.rs:286:20\n+  --> $DIR/needless_borrow.rs:283:20\n    |\n LL |         takes_iter(&mut x)\n    |                    ^^^^^^ help: change this to: `x`\n \n error: the borrowed expression implements the required traits\n-  --> $DIR/needless_borrow.rs:304:55\n+  --> $DIR/needless_borrow.rs:297:55\n    |\n LL |         let _ = std::process::Command::new(\"ls\").args(&[\"-a\", \"-l\"]).status().unwrap();\n    |                                                       ^^^^^^^^^^^^^ help: change this to: `[\"-a\", \"-l\"]`\n \n error: the borrowed expression implements the required traits\n-  --> $DIR/needless_borrow.rs:344:37\n+  --> $DIR/needless_borrow.rs:335:37\n    |\n LL |         let _ = std::fs::write(\"x\", &arg);\n    |                                     ^^^^ help: change this to: `arg`\n \n error: the borrowed expression implements the required traits\n-  --> $DIR/needless_borrow.rs:345:37\n+  --> $DIR/needless_borrow.rs:336:37\n    |\n LL |         let _ = std::fs::write(\"x\", &loc);\n    |                                     ^^^^ help: change this to: `loc`\n \n error: the borrowed expression implements the required traits\n-  --> $DIR/needless_borrow.rs:364:15\n+  --> $DIR/needless_borrow.rs:354:15\n    |\n LL |         debug(&x);\n    |               ^^ help: change this to: `x`\n \n error: the borrowed expression implements the required traits\n-  --> $DIR/needless_borrow.rs:374:15\n+  --> $DIR/needless_borrow.rs:363:15\n    |\n LL |         use_x(&x);\n    |               ^^ help: change this to: `x`\n \n error: the borrowed expression implements the required traits\n-  --> $DIR/needless_borrow.rs:474:13\n+  --> $DIR/needless_borrow.rs:457:13\n    |\n LL |         foo(&a);\n    |             ^^ help: change this to: `a`"}, {"sha": "7eaca571992f46d971bea18739e3b7c50e565381", "filename": "tests/ui/needless_question_mark.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_question_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_question_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -8,7 +8,6 @@\n     dead_code,\n     unused_must_use\n )]\n-#![feature(custom_inner_attributes)]\n \n struct TO {\n     magic: Option<usize>,"}, {"sha": "960bc7b78983f96d17d454b568f9c17eafa72aa6", "filename": "tests/ui/needless_question_mark.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -8,7 +8,6 @@\n     dead_code,\n     unused_must_use\n )]\n-#![feature(custom_inner_attributes)]\n \n struct TO {\n     magic: Option<usize>,"}, {"sha": "d1f89e326c67c3ab65b1dd7e6f31eb52e0093c01", "filename": "tests/ui/needless_question_mark.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_question_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_question_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,73 +1,73 @@\n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:23:12\n+  --> $DIR/needless_question_mark.rs:22:12\n    |\n LL |     return Some(to.magic?);\n    |            ^^^^^^^^^^^^^^^ help: try removing question mark and `Some()`: `to.magic`\n    |\n    = note: `-D clippy::needless-question-mark` implied by `-D warnings`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:31:12\n+  --> $DIR/needless_question_mark.rs:30:12\n    |\n LL |     return Some(to.magic?)\n    |            ^^^^^^^^^^^^^^^ help: try removing question mark and `Some()`: `to.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:36:5\n+  --> $DIR/needless_question_mark.rs:35:5\n    |\n LL |     Some(to.magic?)\n    |     ^^^^^^^^^^^^^^^ help: try removing question mark and `Some()`: `to.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:41:21\n+  --> $DIR/needless_question_mark.rs:40:21\n    |\n LL |     to.and_then(|t| Some(t.magic?))\n    |                     ^^^^^^^^^^^^^^ help: try removing question mark and `Some()`: `t.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:50:9\n+  --> $DIR/needless_question_mark.rs:49:9\n    |\n LL |         Some(t.magic?)\n    |         ^^^^^^^^^^^^^^ help: try removing question mark and `Some()`: `t.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:55:12\n+  --> $DIR/needless_question_mark.rs:54:12\n    |\n LL |     return Ok(tr.magic?);\n    |            ^^^^^^^^^^^^^ help: try removing question mark and `Ok()`: `tr.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:62:12\n+  --> $DIR/needless_question_mark.rs:61:12\n    |\n LL |     return Ok(tr.magic?)\n    |            ^^^^^^^^^^^^^ help: try removing question mark and `Ok()`: `tr.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:66:5\n+  --> $DIR/needless_question_mark.rs:65:5\n    |\n LL |     Ok(tr.magic?)\n    |     ^^^^^^^^^^^^^ help: try removing question mark and `Ok()`: `tr.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:70:21\n+  --> $DIR/needless_question_mark.rs:69:21\n    |\n LL |     tr.and_then(|t| Ok(t.magic?))\n    |                     ^^^^^^^^^^^^ help: try removing question mark and `Ok()`: `t.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:78:9\n+  --> $DIR/needless_question_mark.rs:77:9\n    |\n LL |         Ok(t.magic?)\n    |         ^^^^^^^^^^^^ help: try removing question mark and `Ok()`: `t.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:85:16\n+  --> $DIR/needless_question_mark.rs:84:16\n    |\n LL |         return Ok(t.magic?);\n    |                ^^^^^^^^^^^^ help: try removing question mark and `Ok()`: `t.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:120:27\n+  --> $DIR/needless_question_mark.rs:119:27\n    |\n LL |         || -> Option<_> { Some(Some($expr)?) }()\n    |                           ^^^^^^^^^^^^^^^^^^ help: try removing question mark and `Some()`: `Some($expr)`\n@@ -78,13 +78,13 @@ LL |     let _x = some_and_qmark_in_macro!(x?);\n    = note: this error originates in the macro `some_and_qmark_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:131:5\n+  --> $DIR/needless_question_mark.rs:130:5\n    |\n LL |     Some(to.magic?)\n    |     ^^^^^^^^^^^^^^^ help: try removing question mark and `Some()`: `to.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:139:5\n+  --> $DIR/needless_question_mark.rs:138:5\n    |\n LL |     Ok(s.magic?)\n    |     ^^^^^^^^^^^^ help: try removing question mark and `Ok()`: `s.magic`"}, {"sha": "4386aaec49e2437751803ac8f9ce216c17e79f07", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -59,14 +59,11 @@ fn test_macro_call() -> i32 {\n }\n \n fn test_void_fun() {\n-    \n }\n \n fn test_void_if_fun(b: bool) {\n     if b {\n-        \n     } else {\n-        \n     }\n }\n \n@@ -82,7 +79,6 @@ fn test_nested_match(x: u32) {\n         0 => (),\n         1 => {\n             let _ = 42;\n-            \n         },\n         _ => (),\n     }\n@@ -126,7 +122,6 @@ mod issue6501 {\n \n     fn test_closure() {\n         let _ = || {\n-            \n         };\n         let _ = || {};\n     }\n@@ -179,14 +174,11 @@ async fn async_test_macro_call() -> i32 {\n }\n \n async fn async_test_void_fun() {\n-    \n }\n \n async fn async_test_void_if_fun(b: bool) {\n     if b {\n-        \n     } else {\n-        \n     }\n }\n \n@@ -269,4 +261,15 @@ fn issue9503(x: usize) -> isize {\n     }\n }\n \n+mod issue9416 {\n+    pub fn with_newline() {\n+        let _ = 42;\n+    }\n+\n+    #[rustfmt::skip]\n+    pub fn oneline() {\n+        let _ = 42;\n+    }\n+}\n+\n fn main() {}"}, {"sha": "666dc54b76b412b2267e083d3d130929cc07309e", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -269,4 +269,17 @@ fn issue9503(x: usize) -> isize {\n     };\n }\n \n+mod issue9416 {\n+    pub fn with_newline() {\n+        let _ = 42;\n+\n+        return;\n+    }\n+\n+    #[rustfmt::skip]\n+    pub fn oneline() {\n+        let _ = 42; return;\n+    }\n+}\n+\n fn main() {}"}, {"sha": "a8b5d86cd5581f46a415a3c06f6e2d88cfa0ae60", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 60, "deletions": 25, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -72,26 +72,32 @@ LL |     return the_answer!();\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:62:5\n+  --> $DIR/needless_return.rs:61:21\n    |\n-LL |     return;\n-   |     ^^^^^^\n+LL |   fn test_void_fun() {\n+   |  _____________________^\n+LL | |     return;\n+   | |__________^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:67:9\n+  --> $DIR/needless_return.rs:66:11\n    |\n-LL |         return;\n-   |         ^^^^^^\n+LL |       if b {\n+   |  ___________^\n+LL | |         return;\n+   | |______________^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:69:9\n+  --> $DIR/needless_return.rs:68:13\n    |\n-LL |         return;\n-   |         ^^^^^^\n+LL |       } else {\n+   |  _____________^\n+LL | |         return;\n+   | |______________^\n    |\n    = help: remove `return`\n \n@@ -104,10 +110,12 @@ LL |         _ => return,\n    = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:85:13\n+  --> $DIR/needless_return.rs:84:24\n    |\n-LL |             return;\n-   |             ^^^^^^\n+LL |               let _ = 42;\n+   |  ________________________^\n+LL | |             return;\n+   | |__________________^\n    |\n    = help: remove `return`\n \n@@ -144,10 +152,12 @@ LL |         bar.unwrap_or_else(|_| return)\n    = help: replace `return` with an empty block\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:129:13\n+  --> $DIR/needless_return.rs:128:21\n    |\n-LL |             return;\n-   |             ^^^^^^\n+LL |           let _ = || {\n+   |  _____________________^\n+LL | |             return;\n+   | |__________________^\n    |\n    = help: remove `return`\n \n@@ -240,26 +250,32 @@ LL |     return the_answer!();\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:182:5\n+  --> $DIR/needless_return.rs:181:33\n    |\n-LL |     return;\n-   |     ^^^^^^\n+LL |   async fn async_test_void_fun() {\n+   |  _________________________________^\n+LL | |     return;\n+   | |__________^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:187:9\n+  --> $DIR/needless_return.rs:186:11\n    |\n-LL |         return;\n-   |         ^^^^^^\n+LL |       if b {\n+   |  ___________^\n+LL | |         return;\n+   | |______________^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:189:9\n+  --> $DIR/needless_return.rs:188:13\n    |\n-LL |         return;\n-   |         ^^^^^^\n+LL |       } else {\n+   |  _____________^\n+LL | |         return;\n+   | |______________^\n    |\n    = help: remove `return`\n \n@@ -351,5 +367,24 @@ LL |             return !*(x as *const isize);\n    |\n    = help: remove `return`\n \n-error: aborting due to 44 previous errors\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:274:20\n+   |\n+LL |           let _ = 42;\n+   |  ____________________^\n+LL | |\n+LL | |         return;\n+   | |______________^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:281:20\n+   |\n+LL |         let _ = 42; return;\n+   |                    ^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: aborting due to 46 previous errors\n "}, {"sha": "5496031fefabf9f9fa8335328850685a5e13621e", "filename": "tests/ui/needless_splitn.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_splitn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_splitn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_splitn.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n // edition:2018\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::needless_splitn)]\n #![allow(clippy::iter_skip_next, clippy::iter_nth_zero, clippy::manual_split_once)]\n \n@@ -40,8 +39,8 @@ fn _question_mark(s: &str) -> Option<()> {\n     Some(())\n }\n \n+#[clippy::msrv = \"1.51\"]\n fn _test_msrv() {\n-    #![clippy::msrv = \"1.51\"]\n     // `manual_split_once` MSRV shouldn't apply to `needless_splitn`\n     let _ = \"key=value\".split('=').nth(0).unwrap();\n }"}, {"sha": "35c2465bae13138f2da781f87ed30d800f84e35a", "filename": "tests/ui/needless_splitn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_splitn.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n // edition:2018\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::needless_splitn)]\n #![allow(clippy::iter_skip_next, clippy::iter_nth_zero, clippy::manual_split_once)]\n \n@@ -40,8 +39,8 @@ fn _question_mark(s: &str) -> Option<()> {\n     Some(())\n }\n \n+#[clippy::msrv = \"1.51\"]\n fn _test_msrv() {\n-    #![clippy::msrv = \"1.51\"]\n     // `manual_split_once` MSRV shouldn't apply to `needless_splitn`\n     let _ = \"key=value\".splitn(2, '=').nth(0).unwrap();\n }"}, {"sha": "f607d8e1ab5f40dd97e380dc78c55c2bf98353f1", "filename": "tests/ui/needless_splitn.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_splitn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fneedless_splitn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_splitn.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,79 +1,79 @@\n error: unnecessary use of `splitn`\n-  --> $DIR/needless_splitn.rs:15:13\n+  --> $DIR/needless_splitn.rs:14:13\n    |\n LL |     let _ = str.splitn(2, '=').next();\n    |             ^^^^^^^^^^^^^^^^^^ help: try this: `str.split('=')`\n    |\n    = note: `-D clippy::needless-splitn` implied by `-D warnings`\n \n error: unnecessary use of `splitn`\n-  --> $DIR/needless_splitn.rs:16:13\n+  --> $DIR/needless_splitn.rs:15:13\n    |\n LL |     let _ = str.splitn(2, '=').nth(0);\n    |             ^^^^^^^^^^^^^^^^^^ help: try this: `str.split('=')`\n \n error: unnecessary use of `splitn`\n-  --> $DIR/needless_splitn.rs:19:18\n+  --> $DIR/needless_splitn.rs:18:18\n    |\n LL |     let (_, _) = str.splitn(3, '=').next_tuple().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^ help: try this: `str.split('=')`\n \n error: unnecessary use of `rsplitn`\n-  --> $DIR/needless_splitn.rs:22:13\n+  --> $DIR/needless_splitn.rs:21:13\n    |\n LL |     let _ = str.rsplitn(2, '=').next();\n    |             ^^^^^^^^^^^^^^^^^^^ help: try this: `str.rsplit('=')`\n \n error: unnecessary use of `rsplitn`\n-  --> $DIR/needless_splitn.rs:23:13\n+  --> $DIR/needless_splitn.rs:22:13\n    |\n LL |     let _ = str.rsplitn(2, '=').nth(0);\n    |             ^^^^^^^^^^^^^^^^^^^ help: try this: `str.rsplit('=')`\n \n error: unnecessary use of `rsplitn`\n-  --> $DIR/needless_splitn.rs:26:18\n+  --> $DIR/needless_splitn.rs:25:18\n    |\n LL |     let (_, _) = str.rsplitn(3, '=').next_tuple().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^ help: try this: `str.rsplit('=')`\n \n error: unnecessary use of `splitn`\n-  --> $DIR/needless_splitn.rs:28:13\n+  --> $DIR/needless_splitn.rs:27:13\n    |\n LL |     let _ = str.splitn(5, '=').next();\n    |             ^^^^^^^^^^^^^^^^^^ help: try this: `str.split('=')`\n \n error: unnecessary use of `splitn`\n-  --> $DIR/needless_splitn.rs:29:13\n+  --> $DIR/needless_splitn.rs:28:13\n    |\n LL |     let _ = str.splitn(5, '=').nth(3);\n    |             ^^^^^^^^^^^^^^^^^^ help: try this: `str.split('=')`\n \n error: unnecessary use of `splitn`\n-  --> $DIR/needless_splitn.rs:35:13\n+  --> $DIR/needless_splitn.rs:34:13\n    |\n LL |     let _ = s.splitn(2, '=').next()?;\n    |             ^^^^^^^^^^^^^^^^ help: try this: `s.split('=')`\n \n error: unnecessary use of `splitn`\n-  --> $DIR/needless_splitn.rs:36:13\n+  --> $DIR/needless_splitn.rs:35:13\n    |\n LL |     let _ = s.splitn(2, '=').nth(0)?;\n    |             ^^^^^^^^^^^^^^^^ help: try this: `s.split('=')`\n \n error: unnecessary use of `rsplitn`\n-  --> $DIR/needless_splitn.rs:37:13\n+  --> $DIR/needless_splitn.rs:36:13\n    |\n LL |     let _ = s.rsplitn(2, '=').next()?;\n    |             ^^^^^^^^^^^^^^^^^ help: try this: `s.rsplit('=')`\n \n error: unnecessary use of `rsplitn`\n-  --> $DIR/needless_splitn.rs:38:13\n+  --> $DIR/needless_splitn.rs:37:13\n    |\n LL |     let _ = s.rsplitn(2, '=').nth(0)?;\n    |             ^^^^^^^^^^^^^^^^^ help: try this: `s.rsplit('=')`\n \n error: unnecessary use of `splitn`\n-  --> $DIR/needless_splitn.rs:46:13\n+  --> $DIR/needless_splitn.rs:45:13\n    |\n LL |     let _ = \"key=value\".splitn(2, '=').nth(0).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"key=value\".split('=')`"}, {"sha": "d124d133faa21ff8418703726c06ae7a941f9f35", "filename": "tests/ui/option_as_ref_deref.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Foption_as_ref_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Foption_as_ref_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(unused, clippy::redundant_clone)]\n #![warn(clippy::option_as_ref_deref)]\n \n@@ -44,16 +43,14 @@ fn main() {\n     let _ = opt.as_deref();\n }\n \n+#[clippy::msrv = \"1.39\"]\n fn msrv_1_39() {\n-    #![clippy::msrv = \"1.39\"]\n-\n     let opt = Some(String::from(\"123\"));\n     let _ = opt.as_ref().map(String::as_str);\n }\n \n+#[clippy::msrv = \"1.40\"]\n fn msrv_1_40() {\n-    #![clippy::msrv = \"1.40\"]\n-\n     let opt = Some(String::from(\"123\"));\n     let _ = opt.as_deref();\n }"}, {"sha": "86e354c6716bba5da71df2c5fa42f95d4fd42656", "filename": "tests/ui/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(unused, clippy::redundant_clone)]\n #![warn(clippy::option_as_ref_deref)]\n \n@@ -47,16 +46,14 @@ fn main() {\n     let _ = opt.as_ref().map(std::ops::Deref::deref);\n }\n \n+#[clippy::msrv = \"1.39\"]\n fn msrv_1_39() {\n-    #![clippy::msrv = \"1.39\"]\n-\n     let opt = Some(String::from(\"123\"));\n     let _ = opt.as_ref().map(String::as_str);\n }\n \n+#[clippy::msrv = \"1.40\"]\n fn msrv_1_40() {\n-    #![clippy::msrv = \"1.40\"]\n-\n     let opt = Some(String::from(\"123\"));\n     let _ = opt.as_ref().map(String::as_str);\n }"}, {"sha": "e471b56eea8170ef94c98de551e0c41e4d13736f", "filename": "tests/ui/option_as_ref_deref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Foption_as_ref_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Foption_as_ref_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,13 +1,13 @@\n error: called `.as_ref().map(Deref::deref)` on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:14:13\n+  --> $DIR/option_as_ref_deref.rs:13:13\n    |\n LL |     let _ = opt.clone().as_ref().map(Deref::deref).map(str::len);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.clone().as_deref()`\n    |\n    = note: `-D clippy::option-as-ref-deref` implied by `-D warnings`\n \n error: called `.as_ref().map(Deref::deref)` on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:17:13\n+  --> $DIR/option_as_ref_deref.rs:16:13\n    |\n LL |       let _ = opt.clone()\n    |  _____________^\n@@ -17,97 +17,97 @@ LL | |         )\n    | |_________^ help: try using as_deref instead: `opt.clone().as_deref()`\n \n error: called `.as_mut().map(DerefMut::deref_mut)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n-  --> $DIR/option_as_ref_deref.rs:23:13\n+  --> $DIR/option_as_ref_deref.rs:22:13\n    |\n LL |     let _ = opt.as_mut().map(DerefMut::deref_mut);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n error: called `.as_ref().map(String::as_str)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:25:13\n+  --> $DIR/option_as_ref_deref.rs:24:13\n    |\n LL |     let _ = opt.as_ref().map(String::as_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n error: called `.as_ref().map(|x| x.as_str())` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:26:13\n+  --> $DIR/option_as_ref_deref.rs:25:13\n    |\n LL |     let _ = opt.as_ref().map(|x| x.as_str());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n error: called `.as_mut().map(String::as_mut_str)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n-  --> $DIR/option_as_ref_deref.rs:27:13\n+  --> $DIR/option_as_ref_deref.rs:26:13\n    |\n LL |     let _ = opt.as_mut().map(String::as_mut_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n error: called `.as_mut().map(|x| x.as_mut_str())` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n-  --> $DIR/option_as_ref_deref.rs:28:13\n+  --> $DIR/option_as_ref_deref.rs:27:13\n    |\n LL |     let _ = opt.as_mut().map(|x| x.as_mut_str());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n error: called `.as_ref().map(CString::as_c_str)` on an Option value. This can be done more directly by calling `Some(CString::new(vec![]).unwrap()).as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:29:13\n+  --> $DIR/option_as_ref_deref.rs:28:13\n    |\n LL |     let _ = Some(CString::new(vec![]).unwrap()).as_ref().map(CString::as_c_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(CString::new(vec![]).unwrap()).as_deref()`\n \n error: called `.as_ref().map(OsString::as_os_str)` on an Option value. This can be done more directly by calling `Some(OsString::new()).as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:30:13\n+  --> $DIR/option_as_ref_deref.rs:29:13\n    |\n LL |     let _ = Some(OsString::new()).as_ref().map(OsString::as_os_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(OsString::new()).as_deref()`\n \n error: called `.as_ref().map(PathBuf::as_path)` on an Option value. This can be done more directly by calling `Some(PathBuf::new()).as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:31:13\n+  --> $DIR/option_as_ref_deref.rs:30:13\n    |\n LL |     let _ = Some(PathBuf::new()).as_ref().map(PathBuf::as_path);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(PathBuf::new()).as_deref()`\n \n error: called `.as_ref().map(Vec::as_slice)` on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:32:13\n+  --> $DIR/option_as_ref_deref.rs:31:13\n    |\n LL |     let _ = Some(Vec::<()>::new()).as_ref().map(Vec::as_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(Vec::<()>::new()).as_deref()`\n \n error: called `.as_mut().map(Vec::as_mut_slice)` on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref_mut()` instead\n-  --> $DIR/option_as_ref_deref.rs:33:13\n+  --> $DIR/option_as_ref_deref.rs:32:13\n    |\n LL |     let _ = Some(Vec::<()>::new()).as_mut().map(Vec::as_mut_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `Some(Vec::<()>::new()).as_deref_mut()`\n \n error: called `.as_ref().map(|x| x.deref())` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:35:13\n+  --> $DIR/option_as_ref_deref.rs:34:13\n    |\n LL |     let _ = opt.as_ref().map(|x| x.deref());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n error: called `.as_mut().map(|x| x.deref_mut())` on an Option value. This can be done more directly by calling `opt.clone().as_deref_mut()` instead\n-  --> $DIR/option_as_ref_deref.rs:36:13\n+  --> $DIR/option_as_ref_deref.rs:35:13\n    |\n LL |     let _ = opt.clone().as_mut().map(|x| x.deref_mut()).map(|x| x.len());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.clone().as_deref_mut()`\n \n error: called `.as_ref().map(|x| &**x)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:43:13\n+  --> $DIR/option_as_ref_deref.rs:42:13\n    |\n LL |     let _ = opt.as_ref().map(|x| &**x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n error: called `.as_mut().map(|x| &mut **x)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n-  --> $DIR/option_as_ref_deref.rs:44:13\n+  --> $DIR/option_as_ref_deref.rs:43:13\n    |\n LL |     let _ = opt.as_mut().map(|x| &mut **x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n error: called `.as_ref().map(std::ops::Deref::deref)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:47:13\n+  --> $DIR/option_as_ref_deref.rs:46:13\n    |\n LL |     let _ = opt.as_ref().map(std::ops::Deref::deref);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n error: called `.as_ref().map(String::as_str)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:61:13\n+  --> $DIR/option_as_ref_deref.rs:58:13\n    |\n LL |     let _ = opt.as_ref().map(String::as_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`"}, {"sha": "df36a9b842bf7f9f57066dc0c743393c397ce49a", "filename": "tests/ui/ptr_as_ptr.fixed", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fptr_as_ptr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fptr_as_ptr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -2,7 +2,6 @@\n // aux-build:macro_rules.rs\n \n #![warn(clippy::ptr_as_ptr)]\n-#![feature(custom_inner_attributes)]\n \n extern crate macro_rules;\n \n@@ -45,8 +44,8 @@ fn main() {\n     let _ = macro_rules::ptr_as_ptr_cast!(ptr);\n }\n \n+#[clippy::msrv = \"1.37\"]\n fn _msrv_1_37() {\n-    #![clippy::msrv = \"1.37\"]\n     let ptr: *const u32 = &42_u32;\n     let mut_ptr: *mut u32 = &mut 42_u32;\n \n@@ -55,8 +54,8 @@ fn _msrv_1_37() {\n     let _ = mut_ptr as *mut i32;\n }\n \n+#[clippy::msrv = \"1.38\"]\n fn _msrv_1_38() {\n-    #![clippy::msrv = \"1.38\"]\n     let ptr: *const u32 = &42_u32;\n     let mut_ptr: *mut u32 = &mut 42_u32;\n "}, {"sha": "302c66462d9b9e5ddd5f92f2d14ded1388cfe3ee", "filename": "tests/ui/ptr_as_ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -2,7 +2,6 @@\n // aux-build:macro_rules.rs\n \n #![warn(clippy::ptr_as_ptr)]\n-#![feature(custom_inner_attributes)]\n \n extern crate macro_rules;\n \n@@ -45,8 +44,8 @@ fn main() {\n     let _ = macro_rules::ptr_as_ptr_cast!(ptr);\n }\n \n+#[clippy::msrv = \"1.37\"]\n fn _msrv_1_37() {\n-    #![clippy::msrv = \"1.37\"]\n     let ptr: *const u32 = &42_u32;\n     let mut_ptr: *mut u32 = &mut 42_u32;\n \n@@ -55,8 +54,8 @@ fn _msrv_1_37() {\n     let _ = mut_ptr as *mut i32;\n }\n \n+#[clippy::msrv = \"1.38\"]\n fn _msrv_1_38() {\n-    #![clippy::msrv = \"1.38\"]\n     let ptr: *const u32 = &42_u32;\n     let mut_ptr: *mut u32 = &mut 42_u32;\n "}, {"sha": "a68e1cab6d357ecc6a2296287d643343bad2e42c", "filename": "tests/ui/ptr_as_ptr.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fptr_as_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fptr_as_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,37 +1,37 @@\n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:19:13\n+  --> $DIR/ptr_as_ptr.rs:18:13\n    |\n LL |     let _ = ptr as *const i32;\n    |             ^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<i32>()`\n    |\n    = note: `-D clippy::ptr-as-ptr` implied by `-D warnings`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:20:13\n+  --> $DIR/ptr_as_ptr.rs:19:13\n    |\n LL |     let _ = mut_ptr as *mut i32;\n    |             ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast::<i32>()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:25:17\n+  --> $DIR/ptr_as_ptr.rs:24:17\n    |\n LL |         let _ = *ptr_ptr as *const i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*ptr_ptr).cast::<i32>()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:38:25\n+  --> $DIR/ptr_as_ptr.rs:37:25\n    |\n LL |     let _: *const i32 = ptr as *const _;\n    |                         ^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:39:23\n+  --> $DIR/ptr_as_ptr.rs:38:23\n    |\n LL |     let _: *mut i32 = mut_ptr as _;\n    |                       ^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:11:9\n+  --> $DIR/ptr_as_ptr.rs:10:9\n    |\n LL |         $ptr as *const i32\n    |         ^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `$ptr.cast::<i32>()`\n@@ -42,13 +42,13 @@ LL |     let _ = cast_it!(ptr);\n    = note: this error originates in the macro `cast_it` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:63:13\n+  --> $DIR/ptr_as_ptr.rs:62:13\n    |\n LL |     let _ = ptr as *const i32;\n    |             ^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<i32>()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:64:13\n+  --> $DIR/ptr_as_ptr.rs:63:13\n    |\n LL |     let _ = mut_ptr as *mut i32;\n    |             ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast::<i32>()`"}, {"sha": "4923731fe45e8f8889f8e90ad5441e3ce81e0f4d", "filename": "tests/ui/range_contains.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Frange_contains.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Frange_contains.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_range_contains)]\n #![allow(unused)]\n #![allow(clippy::no_effect)]\n@@ -65,16 +64,14 @@ pub const fn in_range(a: i32) -> bool {\n     3 <= a && a <= 20\n }\n \n+#[clippy::msrv = \"1.34\"]\n fn msrv_1_34() {\n-    #![clippy::msrv = \"1.34\"]\n-\n     let x = 5;\n     x >= 8 && x < 34;\n }\n \n+#[clippy::msrv = \"1.35\"]\n fn msrv_1_35() {\n-    #![clippy::msrv = \"1.35\"]\n-\n     let x = 5;\n     (8..35).contains(&x);\n }"}, {"sha": "d623ccb5da636fe71874883d0f4b9ed5f6147f08", "filename": "tests/ui/range_contains.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Frange_contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Frange_contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_range_contains)]\n #![allow(unused)]\n #![allow(clippy::no_effect)]\n@@ -65,16 +64,14 @@ pub const fn in_range(a: i32) -> bool {\n     3 <= a && a <= 20\n }\n \n+#[clippy::msrv = \"1.34\"]\n fn msrv_1_34() {\n-    #![clippy::msrv = \"1.34\"]\n-\n     let x = 5;\n     x >= 8 && x < 34;\n }\n \n+#[clippy::msrv = \"1.35\"]\n fn msrv_1_35() {\n-    #![clippy::msrv = \"1.35\"]\n-\n     let x = 5;\n     x >= 8 && x < 35;\n }"}, {"sha": "ea34023a46645f14322dbf063b50e9139cd9c430", "filename": "tests/ui/range_contains.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Frange_contains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Frange_contains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,127 +1,127 @@\n error: manual `Range::contains` implementation\n-  --> $DIR/range_contains.rs:14:5\n+  --> $DIR/range_contains.rs:13:5\n    |\n LL |     x >= 8 && x < 12;\n    |     ^^^^^^^^^^^^^^^^ help: use: `(8..12).contains(&x)`\n    |\n    = note: `-D clippy::manual-range-contains` implied by `-D warnings`\n \n error: manual `Range::contains` implementation\n-  --> $DIR/range_contains.rs:15:5\n+  --> $DIR/range_contains.rs:14:5\n    |\n LL |     x < 42 && x >= 21;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `(21..42).contains(&x)`\n \n error: manual `Range::contains` implementation\n-  --> $DIR/range_contains.rs:16:5\n+  --> $DIR/range_contains.rs:15:5\n    |\n LL |     100 > x && 1 <= x;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `(1..100).contains(&x)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:19:5\n+  --> $DIR/range_contains.rs:18:5\n    |\n LL |     x >= 9 && x <= 99;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `(9..=99).contains(&x)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:20:5\n+  --> $DIR/range_contains.rs:19:5\n    |\n LL |     x <= 33 && x >= 1;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `(1..=33).contains(&x)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:21:5\n+  --> $DIR/range_contains.rs:20:5\n    |\n LL |     999 >= x && 1 <= x;\n    |     ^^^^^^^^^^^^^^^^^^ help: use: `(1..=999).contains(&x)`\n \n error: manual `!Range::contains` implementation\n-  --> $DIR/range_contains.rs:24:5\n+  --> $DIR/range_contains.rs:23:5\n    |\n LL |     x < 8 || x >= 12;\n    |     ^^^^^^^^^^^^^^^^ help: use: `!(8..12).contains(&x)`\n \n error: manual `!Range::contains` implementation\n-  --> $DIR/range_contains.rs:25:5\n+  --> $DIR/range_contains.rs:24:5\n    |\n LL |     x >= 42 || x < 21;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `!(21..42).contains(&x)`\n \n error: manual `!Range::contains` implementation\n-  --> $DIR/range_contains.rs:26:5\n+  --> $DIR/range_contains.rs:25:5\n    |\n LL |     100 <= x || 1 > x;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `!(1..100).contains(&x)`\n \n error: manual `!RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:29:5\n+  --> $DIR/range_contains.rs:28:5\n    |\n LL |     x < 9 || x > 99;\n    |     ^^^^^^^^^^^^^^^ help: use: `!(9..=99).contains(&x)`\n \n error: manual `!RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:30:5\n+  --> $DIR/range_contains.rs:29:5\n    |\n LL |     x > 33 || x < 1;\n    |     ^^^^^^^^^^^^^^^ help: use: `!(1..=33).contains(&x)`\n \n error: manual `!RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:31:5\n+  --> $DIR/range_contains.rs:30:5\n    |\n LL |     999 < x || 1 > x;\n    |     ^^^^^^^^^^^^^^^^ help: use: `!(1..=999).contains(&x)`\n \n error: manual `Range::contains` implementation\n-  --> $DIR/range_contains.rs:46:5\n+  --> $DIR/range_contains.rs:45:5\n    |\n LL |     y >= 0. && y < 1.;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `(0. ..1.).contains(&y)`\n \n error: manual `!RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:47:5\n+  --> $DIR/range_contains.rs:46:5\n    |\n LL |     y < 0. || y > 1.;\n    |     ^^^^^^^^^^^^^^^^ help: use: `!(0. ..=1.).contains(&y)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:50:5\n+  --> $DIR/range_contains.rs:49:5\n    |\n LL |     x >= -10 && x <= 10;\n    |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-10..=10).contains(&x)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:52:5\n+  --> $DIR/range_contains.rs:51:5\n    |\n LL |     y >= -3. && y <= 3.;\n    |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-3. ..=3.).contains(&y)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:57:30\n+  --> $DIR/range_contains.rs:56:30\n    |\n LL |     (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n    |                              ^^^^^^^^^^^^^^^^^^^^^ help: use: `(0..=10).contains(&z)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:57:5\n+  --> $DIR/range_contains.rs:56:5\n    |\n LL |     (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: use: `(0..=10).contains(&x)`\n \n error: manual `!Range::contains` implementation\n-  --> $DIR/range_contains.rs:58:29\n+  --> $DIR/range_contains.rs:57:29\n    |\n LL |     (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n    |                             ^^^^^^^^^^^^^^^^^^^^ help: use: `!(0..10).contains(&z)`\n \n error: manual `!Range::contains` implementation\n-  --> $DIR/range_contains.rs:58:5\n+  --> $DIR/range_contains.rs:57:5\n    |\n LL |     (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n    |     ^^^^^^^^^^^^^^^^^^^^ help: use: `!(0..10).contains(&x)`\n \n error: manual `Range::contains` implementation\n-  --> $DIR/range_contains.rs:79:5\n+  --> $DIR/range_contains.rs:76:5\n    |\n LL |     x >= 8 && x < 35;\n    |     ^^^^^^^^^^^^^^^^ help: use: `(8..35).contains(&x)`"}, {"sha": "c0e49ff4caa7472f09bc38ce817b046f1cdb10a9", "filename": "tests/ui/redundant_closure_call_fixable.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_closure_call_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_closure_call_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -25,4 +25,16 @@ fn main() {\n         x * y\n     };\n     let d = async { something().await };\n+\n+    macro_rules! m {\n+        () => {\n+            0\n+        };\n+    }\n+    macro_rules! m2 {\n+        () => {\n+            m!()\n+        };\n+    }\n+    m2!();\n }"}, {"sha": "9e6e54348a8c28f36f615a0444e86c59ef94b1f3", "filename": "tests/ui/redundant_closure_call_fixable.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_closure_call_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_closure_call_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -25,4 +25,16 @@ fn main() {\n         x * y\n     })();\n     let d = (async || something().await)();\n+\n+    macro_rules! m {\n+        () => {\n+            (|| 0)()\n+        };\n+    }\n+    macro_rules! m2 {\n+        () => {\n+            (|| m!())()\n+        };\n+    }\n+    m2!();\n }"}, {"sha": "d71bcba2a8200414b0b74b98bb6c60a588f0e649", "filename": "tests/ui/redundant_closure_call_fixable.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -52,5 +52,27 @@ error: try not to call a closure in the expression where it is declared\n LL |     let d = (async || something().await)();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try doing something like: `async { something().await }`\n \n-error: aborting due to 4 previous errors\n+error: try not to call a closure in the expression where it is declared\n+  --> $DIR/redundant_closure_call_fixable.rs:36:13\n+   |\n+LL |             (|| m!())()\n+   |             ^^^^^^^^^^^ help: try doing something like: `m!()`\n+...\n+LL |     m2!();\n+   |     ----- in this macro invocation\n+   |\n+   = note: this error originates in the macro `m2` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: try not to call a closure in the expression where it is declared\n+  --> $DIR/redundant_closure_call_fixable.rs:31:13\n+   |\n+LL |             (|| 0)()\n+   |             ^^^^^^^^ help: try doing something like: `0`\n+...\n+LL |     m2!();\n+   |     ----- in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` which comes from the expansion of the macro `m2` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "ec7f8ae923a793b3241715b68653b80f98180be6", "filename": "tests/ui/redundant_field_names.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_field_names.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_field_names.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::redundant_field_names)]\n #![allow(clippy::no_effect, dead_code, unused_variables)]\n \n@@ -72,16 +71,14 @@ fn issue_3476() {\n     S { foo: foo::<i32> };\n }\n \n+#[clippy::msrv = \"1.16\"]\n fn msrv_1_16() {\n-    #![clippy::msrv = \"1.16\"]\n-\n     let start = 0;\n     let _ = RangeFrom { start: start };\n }\n \n+#[clippy::msrv = \"1.17\"]\n fn msrv_1_17() {\n-    #![clippy::msrv = \"1.17\"]\n-\n     let start = 0;\n     let _ = RangeFrom { start };\n }"}, {"sha": "73122016cf69e9eefec777cde172735926f503ee", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::redundant_field_names)]\n #![allow(clippy::no_effect, dead_code, unused_variables)]\n \n@@ -72,16 +71,14 @@ fn issue_3476() {\n     S { foo: foo::<i32> };\n }\n \n+#[clippy::msrv = \"1.16\"]\n fn msrv_1_16() {\n-    #![clippy::msrv = \"1.16\"]\n-\n     let start = 0;\n     let _ = RangeFrom { start: start };\n }\n \n+#[clippy::msrv = \"1.17\"]\n fn msrv_1_17() {\n-    #![clippy::msrv = \"1.17\"]\n-\n     let start = 0;\n     let _ = RangeFrom { start: start };\n }"}, {"sha": "00a72c50cf7d0324cc3600fc069cc333d9158594", "filename": "tests/ui/redundant_field_names.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_field_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_field_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,49 +1,49 @@\n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:36:9\n+  --> $DIR/redundant_field_names.rs:35:9\n    |\n LL |         gender: gender,\n    |         ^^^^^^^^^^^^^^ help: replace it with: `gender`\n    |\n    = note: `-D clippy::redundant-field-names` implied by `-D warnings`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:37:9\n+  --> $DIR/redundant_field_names.rs:36:9\n    |\n LL |         age: age,\n    |         ^^^^^^^^ help: replace it with: `age`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:58:25\n+  --> $DIR/redundant_field_names.rs:57:25\n    |\n LL |     let _ = RangeFrom { start: start };\n    |                         ^^^^^^^^^^^^ help: replace it with: `start`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:59:23\n+  --> $DIR/redundant_field_names.rs:58:23\n    |\n LL |     let _ = RangeTo { end: end };\n    |                       ^^^^^^^^ help: replace it with: `end`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:60:21\n+  --> $DIR/redundant_field_names.rs:59:21\n    |\n LL |     let _ = Range { start: start, end: end };\n    |                     ^^^^^^^^^^^^ help: replace it with: `start`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:60:35\n+  --> $DIR/redundant_field_names.rs:59:35\n    |\n LL |     let _ = Range { start: start, end: end };\n    |                                   ^^^^^^^^ help: replace it with: `end`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:62:32\n+  --> $DIR/redundant_field_names.rs:61:32\n    |\n LL |     let _ = RangeToInclusive { end: end };\n    |                                ^^^^^^^^ help: replace it with: `end`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:86:25\n+  --> $DIR/redundant_field_names.rs:83:25\n    |\n LL |     let _ = RangeFrom { start: start };\n    |                         ^^^^^^^^^^^^ help: replace it with: `start`"}, {"sha": "4c5846fe837eaa8a68ed10ad585271923f0f6588", "filename": "tests/ui/redundant_static_lifetimes.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_static_lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_static_lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(unused)]\n \n #[derive(Debug)]\n@@ -56,14 +55,12 @@ impl Bar for Foo {\n     const TRAIT_VAR: &'static str = \"foo\";\n }\n \n+#[clippy::msrv = \"1.16\"]\n fn msrv_1_16() {\n-    #![clippy::msrv = \"1.16\"]\n-\n     static V: &'static u8 = &16;\n }\n \n+#[clippy::msrv = \"1.17\"]\n fn msrv_1_17() {\n-    #![clippy::msrv = \"1.17\"]\n-\n     static V: &u8 = &17;\n }"}, {"sha": "64a66be1a83c753ff8a786167759fd4f04ea52ef", "filename": "tests/ui/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![allow(unused)]\n \n #[derive(Debug)]\n@@ -56,14 +55,12 @@ impl Bar for Foo {\n     const TRAIT_VAR: &'static str = \"foo\";\n }\n \n+#[clippy::msrv = \"1.16\"]\n fn msrv_1_16() {\n-    #![clippy::msrv = \"1.16\"]\n-\n     static V: &'static u8 = &16;\n }\n \n+#[clippy::msrv = \"1.17\"]\n fn msrv_1_17() {\n-    #![clippy::msrv = \"1.17\"]\n-\n     static V: &'static u8 = &17;\n }"}, {"sha": "0938ebf783ff16888852e0be386dc22c86f1c254", "filename": "tests/ui/redundant_static_lifetimes.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_static_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fredundant_static_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,103 +1,103 @@\n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:9:17\n+  --> $DIR/redundant_static_lifetimes.rs:8:17\n    |\n LL | const VAR_ONE: &'static str = \"Test constant #1\"; // ERROR Consider removing 'static.\n    |                -^^^^^^^---- help: consider removing `'static`: `&str`\n    |\n    = note: `-D clippy::redundant-static-lifetimes` implied by `-D warnings`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:13:21\n+  --> $DIR/redundant_static_lifetimes.rs:12:21\n    |\n LL | const VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n    |                    -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:15:32\n+  --> $DIR/redundant_static_lifetimes.rs:14:32\n    |\n LL | const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n    |                               -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:15:47\n+  --> $DIR/redundant_static_lifetimes.rs:14:47\n    |\n LL | const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n    |                                              -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:17:17\n+  --> $DIR/redundant_static_lifetimes.rs:16:17\n    |\n LL | const VAR_SIX: &'static u8 = &5;\n    |                -^^^^^^^--- help: consider removing `'static`: `&u8`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:19:20\n+  --> $DIR/redundant_static_lifetimes.rs:18:20\n    |\n LL | const VAR_HEIGHT: &'static Foo = &Foo {};\n    |                   -^^^^^^^---- help: consider removing `'static`: `&Foo`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:21:19\n+  --> $DIR/redundant_static_lifetimes.rs:20:19\n    |\n LL | const VAR_SLICE: &'static [u8] = b\"Test constant #1\"; // ERROR Consider removing 'static.\n    |                  -^^^^^^^----- help: consider removing `'static`: `&[u8]`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:23:19\n+  --> $DIR/redundant_static_lifetimes.rs:22:19\n    |\n LL | const VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n    |                  -^^^^^^^--------- help: consider removing `'static`: `&(u8, u8)`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:25:19\n+  --> $DIR/redundant_static_lifetimes.rs:24:19\n    |\n LL | const VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n    |                  -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:27:25\n+  --> $DIR/redundant_static_lifetimes.rs:26:25\n    |\n LL | static STATIC_VAR_ONE: &'static str = \"Test static #1\"; // ERROR Consider removing 'static.\n    |                        -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:31:29\n+  --> $DIR/redundant_static_lifetimes.rs:30:29\n    |\n LL | static STATIC_VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n    |                            -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:33:25\n+  --> $DIR/redundant_static_lifetimes.rs:32:25\n    |\n LL | static STATIC_VAR_SIX: &'static u8 = &5;\n    |                        -^^^^^^^--- help: consider removing `'static`: `&u8`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:35:28\n+  --> $DIR/redundant_static_lifetimes.rs:34:28\n    |\n LL | static STATIC_VAR_HEIGHT: &'static Foo = &Foo {};\n    |                           -^^^^^^^---- help: consider removing `'static`: `&Foo`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:37:27\n+  --> $DIR/redundant_static_lifetimes.rs:36:27\n    |\n LL | static STATIC_VAR_SLICE: &'static [u8] = b\"Test static #3\"; // ERROR Consider removing 'static.\n    |                          -^^^^^^^----- help: consider removing `'static`: `&[u8]`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:39:27\n+  --> $DIR/redundant_static_lifetimes.rs:38:27\n    |\n LL | static STATIC_VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n    |                          -^^^^^^^--------- help: consider removing `'static`: `&(u8, u8)`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:41:27\n+  --> $DIR/redundant_static_lifetimes.rs:40:27\n    |\n LL | static STATIC_VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n    |                          -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:68:16\n+  --> $DIR/redundant_static_lifetimes.rs:65:16\n    |\n LL |     static V: &'static u8 = &17;\n    |               -^^^^^^^--- help: consider removing `'static`: `&u8`"}, {"sha": "1c12cebfd971a372480593586f63c009d5940978", "filename": "tests/ui/result_large_err.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fresult_large_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fresult_large_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_large_err.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -108,4 +108,10 @@ pub fn array_error<T, U>() -> Result<(), ArrayError<(i32, T), U>> {\n     Ok(())\n }\n \n+// Issue #10005\n+enum Empty {}\n+fn _empty_error() -> Result<(), Empty> {\n+    Ok(())\n+}\n+\n fn main() {}"}, {"sha": "1309c91b81c9830b52f9813d1bf0d75b572251e3", "filename": "tests/ui/seek_from_current.fixed", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fseek_from_current.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fseek_from_current.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_from_current.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,21 +1,20 @@\n // run-rustfix\n #![warn(clippy::seek_from_current)]\n-#![feature(custom_inner_attributes)]\n \n use std::fs::File;\n use std::io::{self, Seek, SeekFrom, Write};\n \n+#[clippy::msrv = \"1.50\"]\n fn _msrv_1_50() -> io::Result<()> {\n-    #![clippy::msrv = \"1.50\"]\n     let mut f = File::create(\"foo.txt\")?;\n     f.write_all(b\"Hi!\")?;\n     f.seek(SeekFrom::Current(0))?;\n     f.seek(SeekFrom::Current(1))?;\n     Ok(())\n }\n \n+#[clippy::msrv = \"1.51\"]\n fn _msrv_1_51() -> io::Result<()> {\n-    #![clippy::msrv = \"1.51\"]\n     let mut f = File::create(\"foo.txt\")?;\n     f.write_all(b\"Hi!\")?;\n     f.stream_position()?;"}, {"sha": "5d9b1424cf686fe5bd1ec150b86c7e8d6a7f0d3a", "filename": "tests/ui/seek_from_current.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fseek_from_current.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fseek_from_current.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_from_current.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,21 +1,20 @@\n // run-rustfix\n #![warn(clippy::seek_from_current)]\n-#![feature(custom_inner_attributes)]\n \n use std::fs::File;\n use std::io::{self, Seek, SeekFrom, Write};\n \n+#[clippy::msrv = \"1.50\"]\n fn _msrv_1_50() -> io::Result<()> {\n-    #![clippy::msrv = \"1.50\"]\n     let mut f = File::create(\"foo.txt\")?;\n     f.write_all(b\"Hi!\")?;\n     f.seek(SeekFrom::Current(0))?;\n     f.seek(SeekFrom::Current(1))?;\n     Ok(())\n }\n \n+#[clippy::msrv = \"1.51\"]\n fn _msrv_1_51() -> io::Result<()> {\n-    #![clippy::msrv = \"1.51\"]\n     let mut f = File::create(\"foo.txt\")?;\n     f.write_all(b\"Hi!\")?;\n     f.seek(SeekFrom::Current(0))?;"}, {"sha": "c079f361192928bcea5fe74a99da5e93cc521309", "filename": "tests/ui/seek_from_current.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fseek_from_current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fseek_from_current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_from_current.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n error: using `SeekFrom::Current` to start from current position\n-  --> $DIR/seek_from_current.rs:21:5\n+  --> $DIR/seek_from_current.rs:20:5\n    |\n LL |     f.seek(SeekFrom::Current(0))?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `f.stream_position()`"}, {"sha": "9d0d1124c460ed45b1b5894bd3878b18d15def72", "filename": "tests/ui/seek_to_start_instead_of_rewind.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fseek_to_start_instead_of_rewind.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fseek_to_start_instead_of_rewind.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_to_start_instead_of_rewind.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n #![allow(unused)]\n-#![feature(custom_inner_attributes)]\n #![warn(clippy::seek_to_start_instead_of_rewind)]\n \n use std::fs::OpenOptions;\n@@ -94,9 +93,8 @@ fn main() {\n     assert_eq!(&buf, hello);\n }\n \n+#[clippy::msrv = \"1.54\"]\n fn msrv_1_54() {\n-    #![clippy::msrv = \"1.54\"]\n-\n     let mut f = OpenOptions::new()\n         .write(true)\n         .read(true)\n@@ -115,9 +113,8 @@ fn msrv_1_54() {\n     assert_eq!(&buf, hello);\n }\n \n+#[clippy::msrv = \"1.55\"]\n fn msrv_1_55() {\n-    #![clippy::msrv = \"1.55\"]\n-\n     let mut f = OpenOptions::new()\n         .write(true)\n         .read(true)"}, {"sha": "c5bc57cc3a74ce617a96b4dd401a58cca895647b", "filename": "tests/ui/seek_to_start_instead_of_rewind.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fseek_to_start_instead_of_rewind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fseek_to_start_instead_of_rewind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_to_start_instead_of_rewind.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n #![allow(unused)]\n-#![feature(custom_inner_attributes)]\n #![warn(clippy::seek_to_start_instead_of_rewind)]\n \n use std::fs::OpenOptions;\n@@ -94,9 +93,8 @@ fn main() {\n     assert_eq!(&buf, hello);\n }\n \n+#[clippy::msrv = \"1.54\"]\n fn msrv_1_54() {\n-    #![clippy::msrv = \"1.54\"]\n-\n     let mut f = OpenOptions::new()\n         .write(true)\n         .read(true)\n@@ -115,9 +113,8 @@ fn msrv_1_54() {\n     assert_eq!(&buf, hello);\n }\n \n+#[clippy::msrv = \"1.55\"]\n fn msrv_1_55() {\n-    #![clippy::msrv = \"1.55\"]\n-\n     let mut f = OpenOptions::new()\n         .write(true)\n         .read(true)"}, {"sha": "6cce025359fe2918bce42ea6bdbef601d8c74948", "filename": "tests/ui/seek_to_start_instead_of_rewind.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fseek_to_start_instead_of_rewind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fseek_to_start_instead_of_rewind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_to_start_instead_of_rewind.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,19 +1,19 @@\n error: used `seek` to go to the start of the stream\n-  --> $DIR/seek_to_start_instead_of_rewind.rs:54:7\n+  --> $DIR/seek_to_start_instead_of_rewind.rs:53:7\n    |\n LL |     t.seek(SeekFrom::Start(0));\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `rewind()`\n    |\n    = note: `-D clippy::seek-to-start-instead-of-rewind` implied by `-D warnings`\n \n error: used `seek` to go to the start of the stream\n-  --> $DIR/seek_to_start_instead_of_rewind.rs:59:7\n+  --> $DIR/seek_to_start_instead_of_rewind.rs:58:7\n    |\n LL |     t.seek(SeekFrom::Start(0));\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `rewind()`\n \n error: used `seek` to go to the start of the stream\n-  --> $DIR/seek_to_start_instead_of_rewind.rs:131:7\n+  --> $DIR/seek_to_start_instead_of_rewind.rs:128:7\n    |\n LL |     f.seek(SeekFrom::Start(0));\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `rewind()`"}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "074dae5fb2868bf1906f523e3c9aa0b222427eb3", "filename": "tests/ui/transmute_ptr_to_ref.fixed", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ftransmute_ptr_to_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ftransmute_ptr_to_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::transmute_ptr_to_ref)]\n #![allow(clippy::match_single_binding)]\n \n@@ -51,8 +50,8 @@ unsafe fn _issue8924<'a, 'b, 'c>(x: *const &'a u32, y: *const &'b u32) -> &'c &'\n     }\n }\n \n+#[clippy::msrv = \"1.38\"]\n unsafe fn _meets_msrv<'a, 'b, 'c>(x: *const &'a u32) -> &'c &'b u32 {\n-    #![clippy::msrv = \"1.38\"]\n     let a = 0u32;\n     let a = &a as *const u32;\n     let _: &u32 = &*a;\n@@ -63,8 +62,8 @@ unsafe fn _meets_msrv<'a, 'b, 'c>(x: *const &'a u32) -> &'c &'b u32 {\n     }\n }\n \n+#[clippy::msrv = \"1.37\"]\n unsafe fn _under_msrv<'a, 'b, 'c>(x: *const &'a u32) -> &'c &'b u32 {\n-    #![clippy::msrv = \"1.37\"]\n     let a = 0u32;\n     let a = &a as *const u32;\n     let _: &u32 = &*a;"}, {"sha": "2edc122cf47127b1b8e364f3ce4409e72d209855", "filename": "tests/ui/transmute_ptr_to_ref.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::transmute_ptr_to_ref)]\n #![allow(clippy::match_single_binding)]\n \n@@ -51,8 +50,8 @@ unsafe fn _issue8924<'a, 'b, 'c>(x: *const &'a u32, y: *const &'b u32) -> &'c &'\n     }\n }\n \n+#[clippy::msrv = \"1.38\"]\n unsafe fn _meets_msrv<'a, 'b, 'c>(x: *const &'a u32) -> &'c &'b u32 {\n-    #![clippy::msrv = \"1.38\"]\n     let a = 0u32;\n     let a = &a as *const u32;\n     let _: &u32 = std::mem::transmute(a);\n@@ -63,8 +62,8 @@ unsafe fn _meets_msrv<'a, 'b, 'c>(x: *const &'a u32) -> &'c &'b u32 {\n     }\n }\n \n+#[clippy::msrv = \"1.37\"]\n unsafe fn _under_msrv<'a, 'b, 'c>(x: *const &'a u32) -> &'c &'b u32 {\n-    #![clippy::msrv = \"1.37\"]\n     let a = 0u32;\n     let a = &a as *const u32;\n     let _: &u32 = std::mem::transmute(a);"}, {"sha": "b3e6c09d2d7a1f2882996aa36818067edec35586", "filename": "tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,133 +1,133 @@\n error: transmute from a pointer type (`*const T`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:8:17\n+  --> $DIR/transmute_ptr_to_ref.rs:7:17\n    |\n LL |     let _: &T = std::mem::transmute(p);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*p`\n    |\n    = note: `-D clippy::transmute-ptr-to-ref` implied by `-D warnings`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:11:21\n+  --> $DIR/transmute_ptr_to_ref.rs:10:21\n    |\n LL |     let _: &mut T = std::mem::transmute(m);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *m`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:14:17\n+  --> $DIR/transmute_ptr_to_ref.rs:13:17\n    |\n LL |     let _: &T = std::mem::transmute(m);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*m`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:17:21\n+  --> $DIR/transmute_ptr_to_ref.rs:16:21\n    |\n LL |     let _: &mut T = std::mem::transmute(p as *mut T);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(p as *mut T)`\n \n error: transmute from a pointer type (`*const U`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:20:17\n+  --> $DIR/transmute_ptr_to_ref.rs:19:17\n    |\n LL |     let _: &T = std::mem::transmute(o);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(o as *const T)`\n \n error: transmute from a pointer type (`*mut U`) to a reference type (`&mut T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:23:21\n+  --> $DIR/transmute_ptr_to_ref.rs:22:21\n    |\n LL |     let _: &mut T = std::mem::transmute(om);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(om as *mut T)`\n \n error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:26:17\n+  --> $DIR/transmute_ptr_to_ref.rs:25:17\n    |\n LL |     let _: &T = std::mem::transmute(om);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(om as *const T)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<'_, u8>`)\n-  --> $DIR/transmute_ptr_to_ref.rs:36:32\n+  --> $DIR/transmute_ptr_to_ref.rs:35:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*raw.cast::<Foo<_>>()`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<'_, &u8>`)\n-  --> $DIR/transmute_ptr_to_ref.rs:38:33\n+  --> $DIR/transmute_ptr_to_ref.rs:37:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*raw.cast::<Foo<&_>>()`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n-  --> $DIR/transmute_ptr_to_ref.rs:42:14\n+  --> $DIR/transmute_ptr_to_ref.rs:41:14\n    |\n LL |     unsafe { std::mem::transmute::<_, Bar>(raw) };\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const u8)`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:47:14\n+  --> $DIR/transmute_ptr_to_ref.rs:46:14\n    |\n LL |         0 => std::mem::transmute(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:48:14\n+  --> $DIR/transmute_ptr_to_ref.rs:47:14\n    |\n LL |         1 => std::mem::transmute(y),\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*y.cast::<&u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:49:14\n+  --> $DIR/transmute_ptr_to_ref.rs:48:14\n    |\n LL |         2 => std::mem::transmute::<_, &&'b u32>(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&'b u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:50:14\n+  --> $DIR/transmute_ptr_to_ref.rs:49:14\n    |\n LL |         _ => std::mem::transmute::<_, &&'b u32>(y),\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*y.cast::<&'b u32>()`\n \n error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:58:19\n+  --> $DIR/transmute_ptr_to_ref.rs:57:19\n    |\n LL |     let _: &u32 = std::mem::transmute(a);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*a`\n \n error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:59:19\n+  --> $DIR/transmute_ptr_to_ref.rs:58:19\n    |\n LL |     let _: &u32 = std::mem::transmute::<_, &u32>(a);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*a.cast::<u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:61:14\n+  --> $DIR/transmute_ptr_to_ref.rs:60:14\n    |\n LL |         0 => std::mem::transmute(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:62:14\n+  --> $DIR/transmute_ptr_to_ref.rs:61:14\n    |\n LL |         _ => std::mem::transmute::<_, &&'b u32>(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&'b u32>()`\n \n error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:70:19\n+  --> $DIR/transmute_ptr_to_ref.rs:69:19\n    |\n LL |     let _: &u32 = std::mem::transmute(a);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*a`\n \n error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:71:19\n+  --> $DIR/transmute_ptr_to_ref.rs:70:19\n    |\n LL |     let _: &u32 = std::mem::transmute::<_, &u32>(a);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(a as *const u32)`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:73:14\n+  --> $DIR/transmute_ptr_to_ref.rs:72:14\n    |\n LL |         0 => std::mem::transmute(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(x as *const () as *const &u32)`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:74:14\n+  --> $DIR/transmute_ptr_to_ref.rs:73:14\n    |\n LL |         _ => std::mem::transmute::<_, &&'b u32>(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(x as *const () as *const &'b u32)`"}, {"sha": "c05eb447b2ebd34e50ef3db1197116eab83e7241", "filename": "tests/ui/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,6 @@\n // aux-build:proc_macro_unsafe.rs\n \n-#![warn(clippy::undocumented_unsafe_blocks)]\n+#![warn(clippy::undocumented_unsafe_blocks, clippy::unnecessary_safety_comment)]\n #![allow(clippy::let_unit_value, clippy::missing_safety_doc)]\n \n extern crate proc_macro_unsafe;"}, {"sha": "d1c1bb5ffeac85eec808031e3f97ad96d82b8425", "filename": "tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -239,6 +239,19 @@ LL |     unsafe impl TrailingComment for () {} // SAFETY:\n    |\n    = help: consider adding a safety comment on the preceding line\n \n+error: constant item has unnecessary safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:471:5\n+   |\n+LL |     const BIG_NUMBER: i32 = 1000000;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:470:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+   = note: `-D clippy::unnecessary-safety-comment` implied by `-D warnings`\n+\n error: unsafe impl missing a safety comment\n   --> $DIR/undocumented_unsafe_blocks.rs:472:5\n    |\n@@ -271,6 +284,24 @@ LL |         unsafe {};\n    |\n    = help: consider adding a safety comment on the preceding line\n \n+error: statement has unnecessary safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:501:5\n+   |\n+LL | /     let _ = {\n+LL | |         if unsafe { true } {\n+LL | |             todo!();\n+LL | |         } else {\n+...  |\n+LL | |         }\n+LL | |     };\n+   | |______^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:500:5\n+   |\n+LL |     // SAFETY: this is more than one level away, so it should warn\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: unsafe block missing a safety comment\n   --> $DIR/undocumented_unsafe_blocks.rs:502:12\n    |\n@@ -287,5 +318,5 @@ LL |             let bar = unsafe {};\n    |\n    = help: consider adding a safety comment on the preceding line\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 36 previous errors\n "}, {"sha": "9d08e80cf9a55717b7ccb7b3fd137d4a3b9b5178", "filename": "tests/ui/uninlined_format_args.fixed", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // aux-build:proc_macro_with_span.rs\n // run-rustfix\n-#![feature(custom_inner_attributes)]\n #![warn(clippy::uninlined_format_args)]\n #![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n #![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n@@ -44,9 +43,7 @@ fn tester(fn_arg: i32) {\n     println!(\"val='{local_i32}'\"); // space+tab\n     println!(\"val='{local_i32}'\"); // tab+space\n     println!(\n-        \"val='{\n-    }'\",\n-        local_i32\n+        \"val='{local_i32}'\"\n     );\n     println!(\"{local_i32}\");\n     println!(\"{fn_arg}\");\n@@ -57,11 +54,11 @@ fn tester(fn_arg: i32) {\n     println!(\"{local_i32:<3}\");\n     println!(\"{local_i32:#010x}\");\n     println!(\"{local_f64:.1}\");\n-    println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n-    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n-    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+    println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+    println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+    println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n     println!(\"{local_i32} {local_f64}\");\n-    println!(\"{local_i32}, {}\", local_opt.unwrap());\n+    println!(\"{}, {}\", local_i32, local_opt.unwrap());\n     println!(\"{val}\");\n     println!(\"{val}\");\n     println!(\"{} {1}\", local_i32, 42);\n@@ -110,8 +107,7 @@ fn tester(fn_arg: i32) {\n     println!(\"{local_f64:width$.prec$}\");\n     println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n     println!(\n-        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n-        local_i32, width, prec,\n+        \"{local_i32:width$.prec$} {local_i32:prec$.width$} {width:local_i32$.prec$} {width:prec$.local_i32$} {prec:local_i32$.width$} {prec:width$.local_i32$}\",\n     );\n     println!(\n         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$} {3}\",\n@@ -142,9 +138,7 @@ fn tester(fn_arg: i32) {\n     println!(no_param_str!(), local_i32);\n \n     println!(\n-        \"{}\",\n-        // comment with a comma , in it\n-        val,\n+        \"{val}\",\n     );\n     println!(\"{val}\");\n \n@@ -169,14 +163,14 @@ fn main() {\n     tester(42);\n }\n \n+#[clippy::msrv = \"1.57\"]\n fn _under_msrv() {\n-    #![clippy::msrv = \"1.57\"]\n     let local_i32 = 1;\n     println!(\"don't expand='{}'\", local_i32);\n }\n \n+#[clippy::msrv = \"1.58\"]\n fn _meets_msrv() {\n-    #![clippy::msrv = \"1.58\"]\n     let local_i32 = 1;\n     println!(\"expand='{local_i32}'\");\n }"}, {"sha": "35b3677a8968ffe480a4fafcf62adc979c1e17b7", "filename": "tests/ui/uninlined_format_args.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funinlined_format_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funinlined_format_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,5 @@\n // aux-build:proc_macro_with_span.rs\n // run-rustfix\n-#![feature(custom_inner_attributes)]\n #![warn(clippy::uninlined_format_args)]\n #![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n #![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n@@ -169,14 +168,14 @@ fn main() {\n     tester(42);\n }\n \n+#[clippy::msrv = \"1.57\"]\n fn _under_msrv() {\n-    #![clippy::msrv = \"1.57\"]\n     let local_i32 = 1;\n     println!(\"don't expand='{}'\", local_i32);\n }\n \n+#[clippy::msrv = \"1.58\"]\n fn _meets_msrv() {\n-    #![clippy::msrv = \"1.58\"]\n     let local_i32 = 1;\n     println!(\"expand='{}'\", local_i32);\n }"}, {"sha": "a12abf8bef8af07bb4d53ab4f8227b26e6fd9a80", "filename": "tests/ui/uninlined_format_args.stderr", "status": "modified", "additions": 97, "deletions": 116, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:41:5\n+  --> $DIR/uninlined_format_args.rs:40:5\n    |\n LL |     println!(\"val='{}'\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -12,7 +12,7 @@ LL +     println!(\"val='{local_i32}'\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:42:5\n+  --> $DIR/uninlined_format_args.rs:41:5\n    |\n LL |     println!(\"val='{   }'\", local_i32); // 3 spaces\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -24,7 +24,7 @@ LL +     println!(\"val='{local_i32}'\"); // 3 spaces\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:43:5\n+  --> $DIR/uninlined_format_args.rs:42:5\n    |\n LL |     println!(\"val='{    }'\", local_i32); // tab\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL +     println!(\"val='{local_i32}'\"); // tab\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:44:5\n+  --> $DIR/uninlined_format_args.rs:43:5\n    |\n LL |     println!(\"val='{     }'\", local_i32); // space+tab\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -48,7 +48,7 @@ LL +     println!(\"val='{local_i32}'\"); // space+tab\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:45:5\n+  --> $DIR/uninlined_format_args.rs:44:5\n    |\n LL |     println!(\"val='{     }'\", local_i32); // tab+space\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +60,17 @@ LL +     println!(\"val='{local_i32}'\"); // tab+space\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:51:5\n+  --> $DIR/uninlined_format_args.rs:45:5\n+   |\n+LL | /     println!(\n+LL | |         \"val='{\n+LL | |     }'\",\n+LL | |         local_i32\n+LL | |     );\n+   | |_____^\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:50:5\n    |\n LL |     println!(\"{}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -72,7 +82,7 @@ LL +     println!(\"{local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:52:5\n+  --> $DIR/uninlined_format_args.rs:51:5\n    |\n LL |     println!(\"{}\", fn_arg);\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n@@ -84,7 +94,7 @@ LL +     println!(\"{fn_arg}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:53:5\n+  --> $DIR/uninlined_format_args.rs:52:5\n    |\n LL |     println!(\"{:?}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -96,7 +106,7 @@ LL +     println!(\"{local_i32:?}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:54:5\n+  --> $DIR/uninlined_format_args.rs:53:5\n    |\n LL |     println!(\"{:#?}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -108,7 +118,7 @@ LL +     println!(\"{local_i32:#?}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:55:5\n+  --> $DIR/uninlined_format_args.rs:54:5\n    |\n LL |     println!(\"{:4}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +130,7 @@ LL +     println!(\"{local_i32:4}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:56:5\n+  --> $DIR/uninlined_format_args.rs:55:5\n    |\n LL |     println!(\"{:04}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -132,7 +142,7 @@ LL +     println!(\"{local_i32:04}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:57:5\n+  --> $DIR/uninlined_format_args.rs:56:5\n    |\n LL |     println!(\"{:<3}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -144,7 +154,7 @@ LL +     println!(\"{local_i32:<3}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:58:5\n+  --> $DIR/uninlined_format_args.rs:57:5\n    |\n LL |     println!(\"{:#010x}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -156,7 +166,7 @@ LL +     println!(\"{local_i32:#010x}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:59:5\n+  --> $DIR/uninlined_format_args.rs:58:5\n    |\n LL |     println!(\"{:.1}\", local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -167,45 +177,9 @@ LL -     println!(\"{:.1}\", local_f64);\n LL +     println!(\"{local_f64:.1}\");\n    |\n \n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:60:5\n-   |\n-LL |     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n-LL +     println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:61:5\n-   |\n-LL |     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n-LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n-   |\n-\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:62:5\n    |\n-LL |     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n-LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:63:5\n-   |\n LL |     println!(\"{} {}\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -218,18 +192,6 @@ LL +     println!(\"{local_i32} {local_f64}\");\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:64:5\n    |\n-LL |     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n-LL +     println!(\"{local_i32}, {}\", local_opt.unwrap());\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:65:5\n-   |\n LL |     println!(\"{}\", val);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n@@ -240,7 +202,7 @@ LL +     println!(\"{val}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:66:5\n+  --> $DIR/uninlined_format_args.rs:65:5\n    |\n LL |     println!(\"{}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -252,7 +214,7 @@ LL +     println!(\"{val}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:68:5\n+  --> $DIR/uninlined_format_args.rs:67:5\n    |\n LL |     println!(\"val='{/t }'\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -264,7 +226,7 @@ LL +     println!(\"val='{local_i32}'\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:69:5\n+  --> $DIR/uninlined_format_args.rs:68:5\n    |\n LL |     println!(\"val='{/n }'\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -276,7 +238,7 @@ LL +     println!(\"val='{local_i32}'\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:70:5\n+  --> $DIR/uninlined_format_args.rs:69:5\n    |\n LL |     println!(\"val='{local_i32}'\", local_i32 = local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -288,7 +250,7 @@ LL +     println!(\"val='{local_i32}'\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:71:5\n+  --> $DIR/uninlined_format_args.rs:70:5\n    |\n LL |     println!(\"val='{local_i32}'\", local_i32 = fn_arg);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -300,7 +262,7 @@ LL +     println!(\"val='{fn_arg}'\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:72:5\n+  --> $DIR/uninlined_format_args.rs:71:5\n    |\n LL |     println!(\"{0}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -312,7 +274,7 @@ LL +     println!(\"{local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:73:5\n+  --> $DIR/uninlined_format_args.rs:72:5\n    |\n LL |     println!(\"{0:?}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -324,7 +286,7 @@ LL +     println!(\"{local_i32:?}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:74:5\n+  --> $DIR/uninlined_format_args.rs:73:5\n    |\n LL |     println!(\"{0:#?}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -336,7 +298,7 @@ LL +     println!(\"{local_i32:#?}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:75:5\n+  --> $DIR/uninlined_format_args.rs:74:5\n    |\n LL |     println!(\"{0:04}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -348,7 +310,7 @@ LL +     println!(\"{local_i32:04}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:76:5\n+  --> $DIR/uninlined_format_args.rs:75:5\n    |\n LL |     println!(\"{0:<3}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -360,7 +322,7 @@ LL +     println!(\"{local_i32:<3}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:77:5\n+  --> $DIR/uninlined_format_args.rs:76:5\n    |\n LL |     println!(\"{0:#010x}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -372,7 +334,7 @@ LL +     println!(\"{local_i32:#010x}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:78:5\n+  --> $DIR/uninlined_format_args.rs:77:5\n    |\n LL |     println!(\"{0:.1}\", local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -384,7 +346,7 @@ LL +     println!(\"{local_f64:.1}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:79:5\n+  --> $DIR/uninlined_format_args.rs:78:5\n    |\n LL |     println!(\"{0} {0}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -396,7 +358,7 @@ LL +     println!(\"{local_i32} {local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:80:5\n+  --> $DIR/uninlined_format_args.rs:79:5\n    |\n LL |     println!(\"{1} {} {0} {}\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -408,7 +370,7 @@ LL +     println!(\"{local_f64} {local_i32} {local_i32} {local_f64}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:81:5\n+  --> $DIR/uninlined_format_args.rs:80:5\n    |\n LL |     println!(\"{0} {1}\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -420,7 +382,7 @@ LL +     println!(\"{local_i32} {local_f64}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:82:5\n+  --> $DIR/uninlined_format_args.rs:81:5\n    |\n LL |     println!(\"{1} {0}\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -432,7 +394,7 @@ LL +     println!(\"{local_f64} {local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:83:5\n+  --> $DIR/uninlined_format_args.rs:82:5\n    |\n LL |     println!(\"{1} {0} {1} {0}\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -444,7 +406,7 @@ LL +     println!(\"{local_f64} {local_i32} {local_f64} {local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:85:5\n+  --> $DIR/uninlined_format_args.rs:84:5\n    |\n LL |     println!(\"{v}\", v = local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -456,7 +418,7 @@ LL +     println!(\"{local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:86:5\n+  --> $DIR/uninlined_format_args.rs:85:5\n    |\n LL |     println!(\"{local_i32:0$}\", width);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -468,7 +430,7 @@ LL +     println!(\"{local_i32:width$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:87:5\n+  --> $DIR/uninlined_format_args.rs:86:5\n    |\n LL |     println!(\"{local_i32:w$}\", w = width);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -480,7 +442,7 @@ LL +     println!(\"{local_i32:width$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:88:5\n+  --> $DIR/uninlined_format_args.rs:87:5\n    |\n LL |     println!(\"{local_i32:.0$}\", prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -492,7 +454,7 @@ LL +     println!(\"{local_i32:.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:89:5\n+  --> $DIR/uninlined_format_args.rs:88:5\n    |\n LL |     println!(\"{local_i32:.p$}\", p = prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -504,7 +466,7 @@ LL +     println!(\"{local_i32:.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:90:5\n+  --> $DIR/uninlined_format_args.rs:89:5\n    |\n LL |     println!(\"{:0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -516,7 +478,7 @@ LL +     println!(\"{val:val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:91:5\n+  --> $DIR/uninlined_format_args.rs:90:5\n    |\n LL |     println!(\"{0:0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -528,7 +490,7 @@ LL +     println!(\"{val:val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:92:5\n+  --> $DIR/uninlined_format_args.rs:91:5\n    |\n LL |     println!(\"{:0$.0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -540,7 +502,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:93:5\n+  --> $DIR/uninlined_format_args.rs:92:5\n    |\n LL |     println!(\"{0:0$.0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -552,7 +514,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:94:5\n+  --> $DIR/uninlined_format_args.rs:93:5\n    |\n LL |     println!(\"{0:0$.v$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -564,7 +526,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:95:5\n+  --> $DIR/uninlined_format_args.rs:94:5\n    |\n LL |     println!(\"{0:v$.0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -576,7 +538,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:96:5\n+  --> $DIR/uninlined_format_args.rs:95:5\n    |\n LL |     println!(\"{v:0$.0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -588,7 +550,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:97:5\n+  --> $DIR/uninlined_format_args.rs:96:5\n    |\n LL |     println!(\"{v:v$.0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -600,7 +562,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:98:5\n+  --> $DIR/uninlined_format_args.rs:97:5\n    |\n LL |     println!(\"{v:0$.v$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -612,7 +574,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:99:5\n+  --> $DIR/uninlined_format_args.rs:98:5\n    |\n LL |     println!(\"{v:v$.v$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -624,7 +586,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:100:5\n+  --> $DIR/uninlined_format_args.rs:99:5\n    |\n LL |     println!(\"{:0$}\", width);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -636,7 +598,7 @@ LL +     println!(\"{width:width$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:101:5\n+  --> $DIR/uninlined_format_args.rs:100:5\n    |\n LL |     println!(\"{:1$}\", local_i32, width);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -648,7 +610,7 @@ LL +     println!(\"{local_i32:width$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:102:5\n+  --> $DIR/uninlined_format_args.rs:101:5\n    |\n LL |     println!(\"{:w$}\", w = width);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -660,7 +622,7 @@ LL +     println!(\"{width:width$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:103:5\n+  --> $DIR/uninlined_format_args.rs:102:5\n    |\n LL |     println!(\"{:w$}\", local_i32, w = width);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -672,7 +634,7 @@ LL +     println!(\"{local_i32:width$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:104:5\n+  --> $DIR/uninlined_format_args.rs:103:5\n    |\n LL |     println!(\"{:.0$}\", prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -684,7 +646,7 @@ LL +     println!(\"{prec:.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:105:5\n+  --> $DIR/uninlined_format_args.rs:104:5\n    |\n LL |     println!(\"{:.1$}\", local_i32, prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -696,7 +658,7 @@ LL +     println!(\"{local_i32:.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:106:5\n+  --> $DIR/uninlined_format_args.rs:105:5\n    |\n LL |     println!(\"{:.p$}\", p = prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -708,7 +670,7 @@ LL +     println!(\"{prec:.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:107:5\n+  --> $DIR/uninlined_format_args.rs:106:5\n    |\n LL |     println!(\"{:.p$}\", local_i32, p = prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -720,7 +682,7 @@ LL +     println!(\"{local_i32:.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:108:5\n+  --> $DIR/uninlined_format_args.rs:107:5\n    |\n LL |     println!(\"{:0$.1$}\", width, prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -732,7 +694,7 @@ LL +     println!(\"{width:width$.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:109:5\n+  --> $DIR/uninlined_format_args.rs:108:5\n    |\n LL |     println!(\"{:0$.w$}\", width, w = prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -744,7 +706,7 @@ LL +     println!(\"{width:width$.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:110:5\n+  --> $DIR/uninlined_format_args.rs:109:5\n    |\n LL |     println!(\"{:1$.2$}\", local_f64, width, prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -756,7 +718,7 @@ LL +     println!(\"{local_f64:width$.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:111:5\n+  --> $DIR/uninlined_format_args.rs:110:5\n    |\n LL |     println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -768,7 +730,16 @@ LL +     println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:123:5\n+  --> $DIR/uninlined_format_args.rs:111:5\n+   |\n+LL | /     println!(\n+LL | |         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n+LL | |         local_i32, width, prec,\n+LL | |     );\n+   | |_____^\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:122:5\n    |\n LL |     println!(\"Width = {}, value with width = {:0$}\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -780,7 +751,7 @@ LL +     println!(\"Width = {local_i32}, value with width = {local_f64:local_i32$\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:124:5\n+  --> $DIR/uninlined_format_args.rs:123:5\n    |\n LL |     println!(\"{:w$.p$}\", local_i32, w = width, p = prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -792,7 +763,7 @@ LL +     println!(\"{local_i32:width$.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:125:5\n+  --> $DIR/uninlined_format_args.rs:124:5\n    |\n LL |     println!(\"{:w$.p$}\", w = width, p = prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -804,7 +775,7 @@ LL +     println!(\"{width:width$.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:126:20\n+  --> $DIR/uninlined_format_args.rs:125:20\n    |\n LL |     println!(\"{}\", format!(\"{}\", local_i32));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -816,7 +787,17 @@ LL +     println!(\"{}\", format!(\"{local_i32}\"));\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:149:5\n+  --> $DIR/uninlined_format_args.rs:143:5\n+   |\n+LL | /     println!(\n+LL | |         \"{}\",\n+LL | |         // comment with a comma , in it\n+LL | |         val,\n+LL | |     );\n+   | |_____^\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:148:5\n    |\n LL |     println!(\"{}\", /* comment with a comma , in it */ val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -828,7 +809,7 @@ LL +     println!(\"{val}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:155:9\n+  --> $DIR/uninlined_format_args.rs:154:9\n    |\n LL |         panic!(\"p1 {}\", local_i32);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -840,7 +821,7 @@ LL +         panic!(\"p1 {local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:158:9\n+  --> $DIR/uninlined_format_args.rs:157:9\n    |\n LL |         panic!(\"p2 {0}\", local_i32);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -852,7 +833,7 @@ LL +         panic!(\"p2 {local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:161:9\n+  --> $DIR/uninlined_format_args.rs:160:9\n    |\n LL |         panic!(\"p3 {local_i32}\", local_i32 = local_i32);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -864,7 +845,7 @@ LL +         panic!(\"p3 {local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:181:5\n+  --> $DIR/uninlined_format_args.rs:180:5\n    |\n LL |     println!(\"expand='{}'\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -875,5 +856,5 @@ LL -     println!(\"expand='{}'\", local_i32);\n LL +     println!(\"expand='{local_i32}'\");\n    |\n \n-error: aborting due to 73 previous errors\n+error: aborting due to 72 previous errors\n "}, {"sha": "2f7e2997e739d50ec990455b60cbf898820ad2bf", "filename": "tests/ui/unnecessary_cast.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -41,6 +41,17 @@ fn main() {\n     // do not lint cast to alias type\n     1 as I32Alias;\n     &1 as &I32Alias;\n+\n+    // issue #9960\n+    macro_rules! bind_var {\n+        ($id:ident, $e:expr) => {{\n+            let $id = 0usize;\n+            let _ = $e != 0usize;\n+            let $id = 0isize;\n+            let _ = $e != 0usize;\n+        }}\n+    }\n+    bind_var!(x, (x as usize) + 1);\n }\n \n type I32Alias = i32;\n@@ -85,6 +96,9 @@ mod fixable {\n \n         let _ = 1 as I32Alias;\n         let _ = &1 as &I32Alias;\n+\n+        let x = 1i32;\n+        let _ = &{ x };\n     }\n \n     type I32Alias = i32;"}, {"sha": "54dd46ba59f104a1172d14c9363b09b08ad79627", "filename": "tests/ui/unnecessary_cast.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -41,6 +41,17 @@ fn main() {\n     // do not lint cast to alias type\n     1 as I32Alias;\n     &1 as &I32Alias;\n+\n+    // issue #9960\n+    macro_rules! bind_var {\n+        ($id:ident, $e:expr) => {{\n+            let $id = 0usize;\n+            let _ = $e != 0usize;\n+            let $id = 0isize;\n+            let _ = $e != 0usize;\n+        }}\n+    }\n+    bind_var!(x, (x as usize) + 1);\n }\n \n type I32Alias = i32;\n@@ -85,6 +96,9 @@ mod fixable {\n \n         let _ = 1 as I32Alias;\n         let _ = &1 as &I32Alias;\n+\n+        let x = 1i32;\n+        let _ = &(x as i32);\n     }\n \n     type I32Alias = i32;"}, {"sha": "fcee4ee2a65cc9fa267c65354382292421c3ede8", "filename": "tests/ui/unnecessary_cast.stderr", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -49,136 +49,142 @@ LL |     1_f32 as f32;\n    |     ^^^^^^^^^^^^ help: try: `1_f32`\n \n error: casting integer literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:53:9\n+  --> $DIR/unnecessary_cast.rs:64:9\n    |\n LL |         100 as f32;\n    |         ^^^^^^^^^^ help: try: `100_f32`\n \n error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:54:9\n+  --> $DIR/unnecessary_cast.rs:65:9\n    |\n LL |         100 as f64;\n    |         ^^^^^^^^^^ help: try: `100_f64`\n \n error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:55:9\n+  --> $DIR/unnecessary_cast.rs:66:9\n    |\n LL |         100_i32 as f64;\n    |         ^^^^^^^^^^^^^^ help: try: `100_f64`\n \n error: casting integer literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:56:17\n+  --> $DIR/unnecessary_cast.rs:67:17\n    |\n LL |         let _ = -100 as f32;\n    |                 ^^^^^^^^^^^ help: try: `-100_f32`\n \n error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:57:17\n+  --> $DIR/unnecessary_cast.rs:68:17\n    |\n LL |         let _ = -100 as f64;\n    |                 ^^^^^^^^^^^ help: try: `-100_f64`\n \n error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:58:17\n+  --> $DIR/unnecessary_cast.rs:69:17\n    |\n LL |         let _ = -100_i32 as f64;\n    |                 ^^^^^^^^^^^^^^^ help: try: `-100_f64`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:59:9\n+  --> $DIR/unnecessary_cast.rs:70:9\n    |\n LL |         100. as f32;\n    |         ^^^^^^^^^^^ help: try: `100_f32`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:60:9\n+  --> $DIR/unnecessary_cast.rs:71:9\n    |\n LL |         100. as f64;\n    |         ^^^^^^^^^^^ help: try: `100_f64`\n \n error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:72:9\n+  --> $DIR/unnecessary_cast.rs:83:9\n    |\n LL |         1 as u32;\n    |         ^^^^^^^^ help: try: `1_u32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:73:9\n+  --> $DIR/unnecessary_cast.rs:84:9\n    |\n LL |         0x10 as i32;\n    |         ^^^^^^^^^^^ help: try: `0x10_i32`\n \n error: casting integer literal to `usize` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:74:9\n+  --> $DIR/unnecessary_cast.rs:85:9\n    |\n LL |         0b10 as usize;\n    |         ^^^^^^^^^^^^^ help: try: `0b10_usize`\n \n error: casting integer literal to `u16` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:75:9\n+  --> $DIR/unnecessary_cast.rs:86:9\n    |\n LL |         0o73 as u16;\n    |         ^^^^^^^^^^^ help: try: `0o73_u16`\n \n error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:76:9\n+  --> $DIR/unnecessary_cast.rs:87:9\n    |\n LL |         1_000_000_000 as u32;\n    |         ^^^^^^^^^^^^^^^^^^^^ help: try: `1_000_000_000_u32`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:78:9\n+  --> $DIR/unnecessary_cast.rs:89:9\n    |\n LL |         1.0 as f64;\n    |         ^^^^^^^^^^ help: try: `1.0_f64`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:79:9\n+  --> $DIR/unnecessary_cast.rs:90:9\n    |\n LL |         0.5 as f32;\n    |         ^^^^^^^^^^ help: try: `0.5_f32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:83:17\n+  --> $DIR/unnecessary_cast.rs:94:17\n    |\n LL |         let _ = -1 as i32;\n    |                 ^^^^^^^^^ help: try: `-1_i32`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:84:17\n+  --> $DIR/unnecessary_cast.rs:95:17\n    |\n LL |         let _ = -1.0 as f32;\n    |                 ^^^^^^^^^^^ help: try: `-1.0_f32`\n \n+error: casting to the same type is unnecessary (`i32` -> `i32`)\n+  --> $DIR/unnecessary_cast.rs:101:18\n+   |\n+LL |         let _ = &(x as i32);\n+   |                  ^^^^^^^^^^ help: try: `{ x }`\n+\n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:93:22\n+  --> $DIR/unnecessary_cast.rs:107:22\n    |\n LL |         let _: i32 = -(1) as i32;\n    |                      ^^^^^^^^^^^ help: try: `-1_i32`\n \n error: casting integer literal to `i64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:95:22\n+  --> $DIR/unnecessary_cast.rs:109:22\n    |\n LL |         let _: i64 = -(1) as i64;\n    |                      ^^^^^^^^^^^ help: try: `-1_i64`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:102:22\n+  --> $DIR/unnecessary_cast.rs:116:22\n    |\n LL |         let _: f64 = (-8.0 as f64).exp();\n    |                      ^^^^^^^^^^^^^ help: try: `(-8.0_f64)`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:104:23\n+  --> $DIR/unnecessary_cast.rs:118:23\n    |\n LL |         let _: f64 = -(8.0 as f64).exp(); // should suggest `-8.0_f64.exp()` here not to change code behavior\n    |                       ^^^^^^^^^^^^ help: try: `8.0_f64`\n \n error: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/unnecessary_cast.rs:112:20\n+  --> $DIR/unnecessary_cast.rs:126:20\n    |\n LL |         let _num = foo() as f32;\n    |                    ^^^^^^^^^^^^ help: try: `foo()`\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 31 previous errors\n "}, {"sha": "22e9bd8bdc510f69b48e09fa5b9c45685437eecb", "filename": "tests/ui/unnecessary_lazy_eval.fixed", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_lazy_eval.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_lazy_eval.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -33,6 +33,14 @@ impl Drop for Issue9427 {\n     }\n }\n \n+struct Issue9427FollowUp;\n+\n+impl Drop for Issue9427FollowUp {\n+    fn drop(&mut self) {\n+        panic!(\"side effect drop\");\n+    }\n+}\n+\n fn main() {\n     let astronomers_pi = 10;\n     let ext_arr: [usize; 1] = [2];\n@@ -87,6 +95,7 @@ fn main() {\n \n     // Should not lint - bool\n     let _ = (0 == 1).then(|| Issue9427(0)); // Issue9427 has a significant drop\n+    let _ = false.then(|| Issue9427FollowUp); // Issue9427FollowUp has a significant drop\n \n     // should not lint, bind_instead_of_map takes priority\n     let _ = Some(10).and_then(|idx| Some(ext_arr[idx]));\n@@ -133,13 +142,13 @@ fn main() {\n     let _: Result<usize, usize> = res.or(Ok(astronomers_pi));\n     let _: Result<usize, usize> = res.or(Ok(ext_str.some_field));\n     let _: Result<usize, usize> = res.\n-        // some lines\n-        // some lines\n-        // some lines\n-        // some lines\n-        // some lines\n-        // some lines\n-        or(Ok(ext_str.some_field));\n+    // some lines\n+    // some lines\n+    // some lines\n+    // some lines\n+    // some lines\n+    // some lines\n+    or(Ok(ext_str.some_field));\n \n     // neither bind_instead_of_map nor unnecessary_lazy_eval applies here\n     let _: Result<usize, usize> = res.and_then(|x| Err(x));"}, {"sha": "8726d84a23fcfd8d438134400a1e357d8c0503df", "filename": "tests/ui/unnecessary_lazy_eval.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -33,6 +33,14 @@ impl Drop for Issue9427 {\n     }\n }\n \n+struct Issue9427FollowUp;\n+\n+impl Drop for Issue9427FollowUp {\n+    fn drop(&mut self) {\n+        panic!(\"side effect drop\");\n+    }\n+}\n+\n fn main() {\n     let astronomers_pi = 10;\n     let ext_arr: [usize; 1] = [2];\n@@ -87,6 +95,7 @@ fn main() {\n \n     // Should not lint - bool\n     let _ = (0 == 1).then(|| Issue9427(0)); // Issue9427 has a significant drop\n+    let _ = false.then(|| Issue9427FollowUp); // Issue9427FollowUp has a significant drop\n \n     // should not lint, bind_instead_of_map takes priority\n     let _ = Some(10).and_then(|idx| Some(ext_arr[idx]));\n@@ -133,13 +142,13 @@ fn main() {\n     let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n     let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n     let _: Result<usize, usize> = res.\n-        // some lines\n-        // some lines\n-        // some lines\n-        // some lines\n-        // some lines\n-        // some lines\n-        or_else(|_| Ok(ext_str.some_field));\n+    // some lines\n+    // some lines\n+    // some lines\n+    // some lines\n+    // some lines\n+    // some lines\n+    or_else(|_| Ok(ext_str.some_field));\n \n     // neither bind_instead_of_map nor unnecessary_lazy_eval applies here\n     let _: Result<usize, usize> = res.and_then(|x| Err(x));"}, {"sha": "0339755442c5a7dfd1bdb5d4ac13822f0bcd2f80", "filename": "tests/ui/unnecessary_lazy_eval.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_lazy_eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_lazy_eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:48:13\n+  --> $DIR/unnecessary_lazy_eval.rs:56:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| 2);\n    |             ^^^^--------------------\n@@ -9,275 +9,275 @@ LL |     let _ = opt.unwrap_or_else(|| 2);\n    = note: `-D clippy::unnecessary-lazy-evaluations` implied by `-D warnings`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:49:13\n+  --> $DIR/unnecessary_lazy_eval.rs:57:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| astronomers_pi);\n    |             ^^^^---------------------------------\n    |                 |\n    |                 help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:50:13\n+  --> $DIR/unnecessary_lazy_eval.rs:58:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| ext_str.some_field);\n    |             ^^^^-------------------------------------\n    |                 |\n    |                 help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:52:13\n+  --> $DIR/unnecessary_lazy_eval.rs:60:13\n    |\n LL |     let _ = opt.and_then(|_| ext_opt);\n    |             ^^^^---------------------\n    |                 |\n    |                 help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:53:13\n+  --> $DIR/unnecessary_lazy_eval.rs:61:13\n    |\n LL |     let _ = opt.or_else(|| ext_opt);\n    |             ^^^^-------------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:54:13\n+  --> $DIR/unnecessary_lazy_eval.rs:62:13\n    |\n LL |     let _ = opt.or_else(|| None);\n    |             ^^^^----------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:55:13\n+  --> $DIR/unnecessary_lazy_eval.rs:63:13\n    |\n LL |     let _ = opt.get_or_insert_with(|| 2);\n    |             ^^^^------------------------\n    |                 |\n    |                 help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:56:13\n+  --> $DIR/unnecessary_lazy_eval.rs:64:13\n    |\n LL |     let _ = opt.ok_or_else(|| 2);\n    |             ^^^^----------------\n    |                 |\n    |                 help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:57:13\n+  --> $DIR/unnecessary_lazy_eval.rs:65:13\n    |\n LL |     let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n    |             ^^^^^^^^^^^^^^^^^-------------------------------\n    |                              |\n    |                              help: use `unwrap_or(..)` instead: `unwrap_or(Some((1, 2)))`\n \n error: unnecessary closure used with `bool::then`\n-  --> $DIR/unnecessary_lazy_eval.rs:58:13\n+  --> $DIR/unnecessary_lazy_eval.rs:66:13\n    |\n LL |     let _ = cond.then(|| astronomers_pi);\n    |             ^^^^^-----------------------\n    |                  |\n    |                  help: use `then_some(..)` instead: `then_some(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:61:13\n+  --> $DIR/unnecessary_lazy_eval.rs:69:13\n    |\n LL |     let _ = Some(10).unwrap_or_else(|| 2);\n    |             ^^^^^^^^^--------------------\n    |                      |\n    |                      help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:62:13\n+  --> $DIR/unnecessary_lazy_eval.rs:70:13\n    |\n LL |     let _ = Some(10).and_then(|_| ext_opt);\n    |             ^^^^^^^^^---------------------\n    |                      |\n    |                      help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:63:28\n+  --> $DIR/unnecessary_lazy_eval.rs:71:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| ext_opt);\n    |                            ^^^^^-------------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:64:13\n+  --> $DIR/unnecessary_lazy_eval.rs:72:13\n    |\n LL |     let _ = None.get_or_insert_with(|| 2);\n    |             ^^^^^------------------------\n    |                  |\n    |                  help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:65:35\n+  --> $DIR/unnecessary_lazy_eval.rs:73:35\n    |\n LL |     let _: Result<usize, usize> = None.ok_or_else(|| 2);\n    |                                   ^^^^^----------------\n    |                                        |\n    |                                        help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:66:28\n+  --> $DIR/unnecessary_lazy_eval.rs:74:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| None);\n    |                            ^^^^^----------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:69:13\n+  --> $DIR/unnecessary_lazy_eval.rs:77:13\n    |\n LL |     let _ = deep.0.unwrap_or_else(|| 2);\n    |             ^^^^^^^--------------------\n    |                    |\n    |                    help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:70:13\n+  --> $DIR/unnecessary_lazy_eval.rs:78:13\n    |\n LL |     let _ = deep.0.and_then(|_| ext_opt);\n    |             ^^^^^^^---------------------\n    |                    |\n    |                    help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:71:13\n+  --> $DIR/unnecessary_lazy_eval.rs:79:13\n    |\n LL |     let _ = deep.0.or_else(|| None);\n    |             ^^^^^^^----------------\n    |                    |\n    |                    help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:72:13\n+  --> $DIR/unnecessary_lazy_eval.rs:80:13\n    |\n LL |     let _ = deep.0.get_or_insert_with(|| 2);\n    |             ^^^^^^^------------------------\n    |                    |\n    |                    help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:73:13\n+  --> $DIR/unnecessary_lazy_eval.rs:81:13\n    |\n LL |     let _ = deep.0.ok_or_else(|| 2);\n    |             ^^^^^^^----------------\n    |                    |\n    |                    help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:96:28\n+  --> $DIR/unnecessary_lazy_eval.rs:105:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| Some(3));\n    |                            ^^^^^-------------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:97:13\n+  --> $DIR/unnecessary_lazy_eval.rs:106:13\n    |\n LL |     let _ = deep.0.or_else(|| Some(3));\n    |             ^^^^^^^-------------------\n    |                    |\n    |                    help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:98:13\n+  --> $DIR/unnecessary_lazy_eval.rs:107:13\n    |\n LL |     let _ = opt.or_else(|| Some(3));\n    |             ^^^^-------------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:104:13\n+  --> $DIR/unnecessary_lazy_eval.rs:113:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| 2);\n    |             ^^^^^---------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:105:13\n+  --> $DIR/unnecessary_lazy_eval.rs:114:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| astronomers_pi);\n    |             ^^^^^----------------------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:106:13\n+  --> $DIR/unnecessary_lazy_eval.rs:115:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| ext_str.some_field);\n    |             ^^^^^--------------------------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:128:35\n+  --> $DIR/unnecessary_lazy_eval.rs:137:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(2));\n    |                                   ^^^^--------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:129:35\n+  --> $DIR/unnecessary_lazy_eval.rs:138:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(astronomers_pi));\n    |                                   ^^^^---------------------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:130:35\n+  --> $DIR/unnecessary_lazy_eval.rs:139:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(ext_str.some_field));\n    |                                   ^^^^-------------------------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:132:35\n+  --> $DIR/unnecessary_lazy_eval.rs:141:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(2));\n    |                                   ^^^^------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:133:35\n+  --> $DIR/unnecessary_lazy_eval.rs:142:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n    |                                   ^^^^-------------------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:134:35\n+  --> $DIR/unnecessary_lazy_eval.rs:143:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n    |                                   ^^^^-----------------------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:135:35\n+  --> $DIR/unnecessary_lazy_eval.rs:144:35\n    |\n LL |       let _: Result<usize, usize> = res.\n    |  ___________________________________^\n-LL | |         // some lines\n-LL | |         // some lines\n-LL | |         // some lines\n+LL | |     // some lines\n+LL | |     // some lines\n+LL | |     // some lines\n ...  |\n-LL | |         // some lines\n-LL | |         or_else(|_| Ok(ext_str.some_field));\n-   | |_________----------------------------------^\n-   |           |\n-   |           help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n+LL | |     // some lines\n+LL | |     or_else(|_| Ok(ext_str.some_field));\n+   | |_____----------------------------------^\n+   |       |\n+   |       help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n \n error: aborting due to 34 previous errors\n "}, {"sha": "d37163570abe07ee61fba6db3942e538e6382601", "filename": "tests/ui/unnecessary_operation.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_operation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_operation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -76,4 +76,13 @@ fn main() {\n     DropStruct { ..get_drop_struct() };\n     DropEnum::Tuple(get_number());\n     DropEnum::Struct { field: get_number() };\n+\n+    // Issue #9954\n+    fn one() -> i8 {\n+        1\n+    }\n+    macro_rules! use_expr {\n+        ($($e:expr),*) => {{ $($e;)* }}\n+    }\n+    use_expr!(isize::MIN / -(one() as isize), i8::MIN / -one());\n }"}, {"sha": "a14fd4bca0efde72bd30a1acec726665cdb6f9d8", "filename": "tests/ui/unnecessary_operation.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_operation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_operation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -80,4 +80,13 @@ fn main() {\n     DropStruct { ..get_drop_struct() };\n     DropEnum::Tuple(get_number());\n     DropEnum::Struct { field: get_number() };\n+\n+    // Issue #9954\n+    fn one() -> i8 {\n+        1\n+    }\n+    macro_rules! use_expr {\n+        ($($e:expr),*) => {{ $($e;)* }}\n+    }\n+    use_expr!(isize::MIN / -(one() as isize), i8::MIN / -one());\n }"}, {"sha": "7fefea7051d698ce92aab8e5c9dc6b48242e2564", "filename": "tests/ui/unnecessary_safety_comment.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_safety_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_safety_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_safety_comment.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -0,0 +1,51 @@\n+#![warn(clippy::undocumented_unsafe_blocks, clippy::unnecessary_safety_comment)]\n+#![allow(clippy::let_unit_value, clippy::missing_safety_doc)]\n+\n+mod unsafe_items_invalid_comment {\n+    // SAFETY:\n+    const CONST: u32 = 0;\n+    // SAFETY:\n+    static STATIC: u32 = 0;\n+    // SAFETY:\n+    struct Struct;\n+    // SAFETY:\n+    enum Enum {}\n+    // SAFETY:\n+    mod module {}\n+}\n+\n+mod unnecessary_from_macro {\n+    trait T {}\n+\n+    macro_rules! no_safety_comment {\n+        ($t:ty) => {\n+            impl T for $t {}\n+        };\n+    }\n+\n+    // FIXME: This is not caught\n+    // Safety: unnecessary\n+    no_safety_comment!(());\n+\n+    macro_rules! with_safety_comment {\n+        ($t:ty) => {\n+            // Safety: unnecessary\n+            impl T for $t {}\n+        };\n+    }\n+\n+    with_safety_comment!(i32);\n+}\n+\n+fn unnecessary_on_stmt_and_expr() -> u32 {\n+    // SAFETY: unnecessary\n+    let num = 42;\n+\n+    // SAFETY: unnecessary\n+    if num > 24 {}\n+\n+    // SAFETY: unnecessary\n+    24\n+}\n+\n+fn main() {}"}, {"sha": "7b2af67d64c7b9a7f1037dda39f4b25fc68a57ae", "filename": "tests/ui/unnecessary_safety_comment.stderr", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_safety_comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_safety_comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_safety_comment.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -0,0 +1,115 @@\n+error: constant item has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:6:5\n+   |\n+LL |     const CONST: u32 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:5:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+   = note: `-D clippy::unnecessary-safety-comment` implied by `-D warnings`\n+\n+error: static item has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:8:5\n+   |\n+LL |     static STATIC: u32 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:7:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: struct has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:10:5\n+   |\n+LL |     struct Struct;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:9:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: enum has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:12:5\n+   |\n+LL |     enum Enum {}\n+   |     ^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:11:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: module has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:14:5\n+   |\n+LL |     mod module {}\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:13:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: impl has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:33:13\n+   |\n+LL |             impl T for $t {}\n+   |             ^^^^^^^^^^^^^^^^\n+...\n+LL |     with_safety_comment!(i32);\n+   |     ------------------------- in this macro invocation\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:32:13\n+   |\n+LL |             // Safety: unnecessary\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `with_safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expression has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:48:5\n+   |\n+LL |     24\n+   |     ^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:47:5\n+   |\n+LL |     // SAFETY: unnecessary\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: statement has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:42:5\n+   |\n+LL |     let num = 42;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:41:5\n+   |\n+LL |     // SAFETY: unnecessary\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: statement has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:45:5\n+   |\n+LL |     if num > 24 {}\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:44:5\n+   |\n+LL |     // SAFETY: unnecessary\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "ddeda795f81793e8d70d7109a16c958a4821f7f0", "filename": "tests/ui/unnecessary_to_owned.fixed", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_to_owned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_to_owned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(clippy::needless_borrow, clippy::ptr_arg)]\n #![warn(clippy::unnecessary_to_owned)]\n-#![feature(custom_inner_attributes)]\n \n use std::borrow::Cow;\n use std::ffi::{CStr, CString, OsStr, OsString};\n@@ -215,14 +214,14 @@ fn get_file_path(_file_type: &FileType) -> Result<std::path::PathBuf, std::io::E\n \n fn require_string(_: &String) {}\n \n+#[clippy::msrv = \"1.35\"]\n fn _msrv_1_35() {\n-    #![clippy::msrv = \"1.35\"]\n     // `copied` was stabilized in 1.36, so clippy should use `cloned`.\n     let _ = &[\"x\"][..].iter().cloned();\n }\n \n+#[clippy::msrv = \"1.36\"]\n fn _msrv_1_36() {\n-    #![clippy::msrv = \"1.36\"]\n     let _ = &[\"x\"][..].iter().copied();\n }\n \n@@ -426,3 +425,32 @@ mod issue_9504 {\n         foo(std::path::PathBuf::new().to_string_lossy().to_string()).await;\n     }\n }\n+\n+mod issue_9771a {\n+    #![allow(dead_code)]\n+\n+    use std::marker::PhantomData;\n+\n+    pub struct Key<K: AsRef<[u8]>, V: ?Sized>(K, PhantomData<V>);\n+\n+    impl<K: AsRef<[u8]>, V: ?Sized> Key<K, V> {\n+        pub fn new(key: K) -> Key<K, V> {\n+            Key(key, PhantomData)\n+        }\n+    }\n+\n+    pub fn pkh(pkh: &[u8]) -> Key<Vec<u8>, String> {\n+        Key::new([b\"pkh-\", pkh].concat().to_vec())\n+    }\n+}\n+\n+mod issue_9771b {\n+    #![allow(dead_code)]\n+\n+    pub struct Key<K: AsRef<[u8]>>(K);\n+\n+    pub fn from(c: &[u8]) -> Key<Vec<u8>> {\n+        let v = [c].concat();\n+        Key(v.to_vec())\n+    }\n+}"}, {"sha": "95d2576733cd75ea8e42bf0ea127fb8983f7e451", "filename": "tests/ui/unnecessary_to_owned.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(clippy::needless_borrow, clippy::ptr_arg)]\n #![warn(clippy::unnecessary_to_owned)]\n-#![feature(custom_inner_attributes)]\n \n use std::borrow::Cow;\n use std::ffi::{CStr, CString, OsStr, OsString};\n@@ -215,14 +214,14 @@ fn get_file_path(_file_type: &FileType) -> Result<std::path::PathBuf, std::io::E\n \n fn require_string(_: &String) {}\n \n+#[clippy::msrv = \"1.35\"]\n fn _msrv_1_35() {\n-    #![clippy::msrv = \"1.35\"]\n     // `copied` was stabilized in 1.36, so clippy should use `cloned`.\n     let _ = &[\"x\"][..].to_vec().into_iter();\n }\n \n+#[clippy::msrv = \"1.36\"]\n fn _msrv_1_36() {\n-    #![clippy::msrv = \"1.36\"]\n     let _ = &[\"x\"][..].to_vec().into_iter();\n }\n \n@@ -426,3 +425,32 @@ mod issue_9504 {\n         foo(std::path::PathBuf::new().to_string_lossy().to_string()).await;\n     }\n }\n+\n+mod issue_9771a {\n+    #![allow(dead_code)]\n+\n+    use std::marker::PhantomData;\n+\n+    pub struct Key<K: AsRef<[u8]>, V: ?Sized>(K, PhantomData<V>);\n+\n+    impl<K: AsRef<[u8]>, V: ?Sized> Key<K, V> {\n+        pub fn new(key: K) -> Key<K, V> {\n+            Key(key, PhantomData)\n+        }\n+    }\n+\n+    pub fn pkh(pkh: &[u8]) -> Key<Vec<u8>, String> {\n+        Key::new([b\"pkh-\", pkh].concat().to_vec())\n+    }\n+}\n+\n+mod issue_9771b {\n+    #![allow(dead_code)]\n+\n+    pub struct Key<K: AsRef<[u8]>>(K);\n+\n+    pub fn from(c: &[u8]) -> Key<Vec<u8>> {\n+        let v = [c].concat();\n+        Key(v.to_vec())\n+    }\n+}"}, {"sha": "4918fe35598602f8c3b19eb45c1b6f16c2053d48", "filename": "tests/ui/unnecessary_to_owned.stderr", "status": "modified", "additions": 84, "deletions": 84, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,482 +1,482 @@\n error: redundant clone\n-  --> $DIR/unnecessary_to_owned.rs:151:64\n+  --> $DIR/unnecessary_to_owned.rs:150:64\n    |\n LL |     require_c_str(&CString::from_vec_with_nul(vec![0]).unwrap().to_owned());\n    |                                                                ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/unnecessary_to_owned.rs:151:20\n+  --> $DIR/unnecessary_to_owned.rs:150:20\n    |\n LL |     require_c_str(&CString::from_vec_with_nul(vec![0]).unwrap().to_owned());\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `-D clippy::redundant-clone` implied by `-D warnings`\n \n error: redundant clone\n-  --> $DIR/unnecessary_to_owned.rs:152:40\n+  --> $DIR/unnecessary_to_owned.rs:151:40\n    |\n LL |     require_os_str(&OsString::from(\"x\").to_os_string());\n    |                                        ^^^^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/unnecessary_to_owned.rs:152:21\n+  --> $DIR/unnecessary_to_owned.rs:151:21\n    |\n LL |     require_os_str(&OsString::from(\"x\").to_os_string());\n    |                     ^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/unnecessary_to_owned.rs:153:48\n+  --> $DIR/unnecessary_to_owned.rs:152:48\n    |\n LL |     require_path(&std::path::PathBuf::from(\"x\").to_path_buf());\n    |                                                ^^^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/unnecessary_to_owned.rs:153:19\n+  --> $DIR/unnecessary_to_owned.rs:152:19\n    |\n LL |     require_path(&std::path::PathBuf::from(\"x\").to_path_buf());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/unnecessary_to_owned.rs:154:35\n+  --> $DIR/unnecessary_to_owned.rs:153:35\n    |\n LL |     require_str(&String::from(\"x\").to_string());\n    |                                   ^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/unnecessary_to_owned.rs:154:18\n+  --> $DIR/unnecessary_to_owned.rs:153:18\n    |\n LL |     require_str(&String::from(\"x\").to_string());\n    |                  ^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/unnecessary_to_owned.rs:155:39\n+  --> $DIR/unnecessary_to_owned.rs:154:39\n    |\n LL |     require_slice(&[String::from(\"x\")].to_owned());\n    |                                       ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/unnecessary_to_owned.rs:155:20\n+  --> $DIR/unnecessary_to_owned.rs:154:20\n    |\n LL |     require_slice(&[String::from(\"x\")].to_owned());\n    |                    ^^^^^^^^^^^^^^^^^^^\n \n error: unnecessary use of `into_owned`\n-  --> $DIR/unnecessary_to_owned.rs:60:36\n+  --> $DIR/unnecessary_to_owned.rs:59:36\n    |\n LL |     require_c_str(&Cow::from(c_str).into_owned());\n    |                                    ^^^^^^^^^^^^^ help: remove this\n    |\n    = note: `-D clippy::unnecessary-to-owned` implied by `-D warnings`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:61:19\n+  --> $DIR/unnecessary_to_owned.rs:60:19\n    |\n LL |     require_c_str(&c_str.to_owned());\n    |                   ^^^^^^^^^^^^^^^^^ help: use: `c_str`\n \n error: unnecessary use of `to_os_string`\n-  --> $DIR/unnecessary_to_owned.rs:63:20\n+  --> $DIR/unnecessary_to_owned.rs:62:20\n    |\n LL |     require_os_str(&os_str.to_os_string());\n    |                    ^^^^^^^^^^^^^^^^^^^^^^ help: use: `os_str`\n \n error: unnecessary use of `into_owned`\n-  --> $DIR/unnecessary_to_owned.rs:64:38\n+  --> $DIR/unnecessary_to_owned.rs:63:38\n    |\n LL |     require_os_str(&Cow::from(os_str).into_owned());\n    |                                      ^^^^^^^^^^^^^ help: remove this\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:65:20\n+  --> $DIR/unnecessary_to_owned.rs:64:20\n    |\n LL |     require_os_str(&os_str.to_owned());\n    |                    ^^^^^^^^^^^^^^^^^^ help: use: `os_str`\n \n error: unnecessary use of `to_path_buf`\n-  --> $DIR/unnecessary_to_owned.rs:67:18\n+  --> $DIR/unnecessary_to_owned.rs:66:18\n    |\n LL |     require_path(&path.to_path_buf());\n    |                  ^^^^^^^^^^^^^^^^^^^ help: use: `path`\n \n error: unnecessary use of `into_owned`\n-  --> $DIR/unnecessary_to_owned.rs:68:34\n+  --> $DIR/unnecessary_to_owned.rs:67:34\n    |\n LL |     require_path(&Cow::from(path).into_owned());\n    |                                  ^^^^^^^^^^^^^ help: remove this\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:69:18\n+  --> $DIR/unnecessary_to_owned.rs:68:18\n    |\n LL |     require_path(&path.to_owned());\n    |                  ^^^^^^^^^^^^^^^^ help: use: `path`\n \n error: unnecessary use of `to_string`\n-  --> $DIR/unnecessary_to_owned.rs:71:17\n+  --> $DIR/unnecessary_to_owned.rs:70:17\n    |\n LL |     require_str(&s.to_string());\n    |                 ^^^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `into_owned`\n-  --> $DIR/unnecessary_to_owned.rs:72:30\n+  --> $DIR/unnecessary_to_owned.rs:71:30\n    |\n LL |     require_str(&Cow::from(s).into_owned());\n    |                              ^^^^^^^^^^^^^ help: remove this\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:73:17\n+  --> $DIR/unnecessary_to_owned.rs:72:17\n    |\n LL |     require_str(&s.to_owned());\n    |                 ^^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_string`\n-  --> $DIR/unnecessary_to_owned.rs:74:17\n+  --> $DIR/unnecessary_to_owned.rs:73:17\n    |\n LL |     require_str(&x_ref.to_string());\n    |                 ^^^^^^^^^^^^^^^^^^ help: use: `x_ref.as_ref()`\n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:76:19\n+  --> $DIR/unnecessary_to_owned.rs:75:19\n    |\n LL |     require_slice(&slice.to_vec());\n    |                   ^^^^^^^^^^^^^^^ help: use: `slice`\n \n error: unnecessary use of `into_owned`\n-  --> $DIR/unnecessary_to_owned.rs:77:36\n+  --> $DIR/unnecessary_to_owned.rs:76:36\n    |\n LL |     require_slice(&Cow::from(slice).into_owned());\n    |                                    ^^^^^^^^^^^^^ help: remove this\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:78:19\n+  --> $DIR/unnecessary_to_owned.rs:77:19\n    |\n LL |     require_slice(&array.to_owned());\n    |                   ^^^^^^^^^^^^^^^^^ help: use: `array.as_ref()`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:79:19\n+  --> $DIR/unnecessary_to_owned.rs:78:19\n    |\n LL |     require_slice(&array_ref.to_owned());\n    |                   ^^^^^^^^^^^^^^^^^^^^^ help: use: `array_ref.as_ref()`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:80:19\n+  --> $DIR/unnecessary_to_owned.rs:79:19\n    |\n LL |     require_slice(&slice.to_owned());\n    |                   ^^^^^^^^^^^^^^^^^ help: use: `slice`\n \n error: unnecessary use of `into_owned`\n-  --> $DIR/unnecessary_to_owned.rs:83:42\n+  --> $DIR/unnecessary_to_owned.rs:82:42\n    |\n LL |     require_x(&Cow::<X>::Owned(x.clone()).into_owned());\n    |                                          ^^^^^^^^^^^^^ help: remove this\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:86:25\n+  --> $DIR/unnecessary_to_owned.rs:85:25\n    |\n LL |     require_deref_c_str(c_str.to_owned());\n    |                         ^^^^^^^^^^^^^^^^ help: use: `c_str`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:87:26\n+  --> $DIR/unnecessary_to_owned.rs:86:26\n    |\n LL |     require_deref_os_str(os_str.to_owned());\n    |                          ^^^^^^^^^^^^^^^^^ help: use: `os_str`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:88:24\n+  --> $DIR/unnecessary_to_owned.rs:87:24\n    |\n LL |     require_deref_path(path.to_owned());\n    |                        ^^^^^^^^^^^^^^^ help: use: `path`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:89:23\n+  --> $DIR/unnecessary_to_owned.rs:88:23\n    |\n LL |     require_deref_str(s.to_owned());\n    |                       ^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:90:25\n+  --> $DIR/unnecessary_to_owned.rs:89:25\n    |\n LL |     require_deref_slice(slice.to_owned());\n    |                         ^^^^^^^^^^^^^^^^ help: use: `slice`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:92:30\n+  --> $DIR/unnecessary_to_owned.rs:91:30\n    |\n LL |     require_impl_deref_c_str(c_str.to_owned());\n    |                              ^^^^^^^^^^^^^^^^ help: use: `c_str`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:93:31\n+  --> $DIR/unnecessary_to_owned.rs:92:31\n    |\n LL |     require_impl_deref_os_str(os_str.to_owned());\n    |                               ^^^^^^^^^^^^^^^^^ help: use: `os_str`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:94:29\n+  --> $DIR/unnecessary_to_owned.rs:93:29\n    |\n LL |     require_impl_deref_path(path.to_owned());\n    |                             ^^^^^^^^^^^^^^^ help: use: `path`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:95:28\n+  --> $DIR/unnecessary_to_owned.rs:94:28\n    |\n LL |     require_impl_deref_str(s.to_owned());\n    |                            ^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:96:30\n+  --> $DIR/unnecessary_to_owned.rs:95:30\n    |\n LL |     require_impl_deref_slice(slice.to_owned());\n    |                              ^^^^^^^^^^^^^^^^ help: use: `slice`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:98:29\n+  --> $DIR/unnecessary_to_owned.rs:97:29\n    |\n LL |     require_deref_str_slice(s.to_owned(), slice.to_owned());\n    |                             ^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:98:43\n+  --> $DIR/unnecessary_to_owned.rs:97:43\n    |\n LL |     require_deref_str_slice(s.to_owned(), slice.to_owned());\n    |                                           ^^^^^^^^^^^^^^^^ help: use: `slice`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:99:29\n+  --> $DIR/unnecessary_to_owned.rs:98:29\n    |\n LL |     require_deref_slice_str(slice.to_owned(), s.to_owned());\n    |                             ^^^^^^^^^^^^^^^^ help: use: `slice`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:99:47\n+  --> $DIR/unnecessary_to_owned.rs:98:47\n    |\n LL |     require_deref_slice_str(slice.to_owned(), s.to_owned());\n    |                                               ^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:101:26\n+  --> $DIR/unnecessary_to_owned.rs:100:26\n    |\n LL |     require_as_ref_c_str(c_str.to_owned());\n    |                          ^^^^^^^^^^^^^^^^ help: use: `c_str`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:102:27\n+  --> $DIR/unnecessary_to_owned.rs:101:27\n    |\n LL |     require_as_ref_os_str(os_str.to_owned());\n    |                           ^^^^^^^^^^^^^^^^^ help: use: `os_str`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:103:25\n+  --> $DIR/unnecessary_to_owned.rs:102:25\n    |\n LL |     require_as_ref_path(path.to_owned());\n    |                         ^^^^^^^^^^^^^^^ help: use: `path`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:104:24\n+  --> $DIR/unnecessary_to_owned.rs:103:24\n    |\n LL |     require_as_ref_str(s.to_owned());\n    |                        ^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:105:24\n+  --> $DIR/unnecessary_to_owned.rs:104:24\n    |\n LL |     require_as_ref_str(x.to_owned());\n    |                        ^^^^^^^^^^^^ help: use: `&x`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:106:26\n+  --> $DIR/unnecessary_to_owned.rs:105:26\n    |\n LL |     require_as_ref_slice(array.to_owned());\n    |                          ^^^^^^^^^^^^^^^^ help: use: `array`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:107:26\n+  --> $DIR/unnecessary_to_owned.rs:106:26\n    |\n LL |     require_as_ref_slice(array_ref.to_owned());\n    |                          ^^^^^^^^^^^^^^^^^^^^ help: use: `array_ref`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:108:26\n+  --> $DIR/unnecessary_to_owned.rs:107:26\n    |\n LL |     require_as_ref_slice(slice.to_owned());\n    |                          ^^^^^^^^^^^^^^^^ help: use: `slice`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:110:31\n+  --> $DIR/unnecessary_to_owned.rs:109:31\n    |\n LL |     require_impl_as_ref_c_str(c_str.to_owned());\n    |                               ^^^^^^^^^^^^^^^^ help: use: `c_str`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:111:32\n+  --> $DIR/unnecessary_to_owned.rs:110:32\n    |\n LL |     require_impl_as_ref_os_str(os_str.to_owned());\n    |                                ^^^^^^^^^^^^^^^^^ help: use: `os_str`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:112:30\n+  --> $DIR/unnecessary_to_owned.rs:111:30\n    |\n LL |     require_impl_as_ref_path(path.to_owned());\n    |                              ^^^^^^^^^^^^^^^ help: use: `path`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:113:29\n+  --> $DIR/unnecessary_to_owned.rs:112:29\n    |\n LL |     require_impl_as_ref_str(s.to_owned());\n    |                             ^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:114:29\n+  --> $DIR/unnecessary_to_owned.rs:113:29\n    |\n LL |     require_impl_as_ref_str(x.to_owned());\n    |                             ^^^^^^^^^^^^ help: use: `&x`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:115:31\n+  --> $DIR/unnecessary_to_owned.rs:114:31\n    |\n LL |     require_impl_as_ref_slice(array.to_owned());\n    |                               ^^^^^^^^^^^^^^^^ help: use: `array`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:116:31\n+  --> $DIR/unnecessary_to_owned.rs:115:31\n    |\n LL |     require_impl_as_ref_slice(array_ref.to_owned());\n    |                               ^^^^^^^^^^^^^^^^^^^^ help: use: `array_ref`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:117:31\n+  --> $DIR/unnecessary_to_owned.rs:116:31\n    |\n LL |     require_impl_as_ref_slice(slice.to_owned());\n    |                               ^^^^^^^^^^^^^^^^ help: use: `slice`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:119:30\n+  --> $DIR/unnecessary_to_owned.rs:118:30\n    |\n LL |     require_as_ref_str_slice(s.to_owned(), array.to_owned());\n    |                              ^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:119:44\n+  --> $DIR/unnecessary_to_owned.rs:118:44\n    |\n LL |     require_as_ref_str_slice(s.to_owned(), array.to_owned());\n    |                                            ^^^^^^^^^^^^^^^^ help: use: `array`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:120:30\n+  --> $DIR/unnecessary_to_owned.rs:119:30\n    |\n LL |     require_as_ref_str_slice(s.to_owned(), array_ref.to_owned());\n    |                              ^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:120:44\n+  --> $DIR/unnecessary_to_owned.rs:119:44\n    |\n LL |     require_as_ref_str_slice(s.to_owned(), array_ref.to_owned());\n    |                                            ^^^^^^^^^^^^^^^^^^^^ help: use: `array_ref`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:121:30\n+  --> $DIR/unnecessary_to_owned.rs:120:30\n    |\n LL |     require_as_ref_str_slice(s.to_owned(), slice.to_owned());\n    |                              ^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:121:44\n+  --> $DIR/unnecessary_to_owned.rs:120:44\n    |\n LL |     require_as_ref_str_slice(s.to_owned(), slice.to_owned());\n    |                                            ^^^^^^^^^^^^^^^^ help: use: `slice`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:122:30\n+  --> $DIR/unnecessary_to_owned.rs:121:30\n    |\n LL |     require_as_ref_slice_str(array.to_owned(), s.to_owned());\n    |                              ^^^^^^^^^^^^^^^^ help: use: `array`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:122:48\n+  --> $DIR/unnecessary_to_owned.rs:121:48\n    |\n LL |     require_as_ref_slice_str(array.to_owned(), s.to_owned());\n    |                                                ^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:123:30\n+  --> $DIR/unnecessary_to_owned.rs:122:30\n    |\n LL |     require_as_ref_slice_str(array_ref.to_owned(), s.to_owned());\n    |                              ^^^^^^^^^^^^^^^^^^^^ help: use: `array_ref`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:123:52\n+  --> $DIR/unnecessary_to_owned.rs:122:52\n    |\n LL |     require_as_ref_slice_str(array_ref.to_owned(), s.to_owned());\n    |                                                    ^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:124:30\n+  --> $DIR/unnecessary_to_owned.rs:123:30\n    |\n LL |     require_as_ref_slice_str(slice.to_owned(), s.to_owned());\n    |                              ^^^^^^^^^^^^^^^^ help: use: `slice`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:124:48\n+  --> $DIR/unnecessary_to_owned.rs:123:48\n    |\n LL |     require_as_ref_slice_str(slice.to_owned(), s.to_owned());\n    |                                                ^^^^^^^^^^^^ help: use: `s`\n \n error: unnecessary use of `to_string`\n-  --> $DIR/unnecessary_to_owned.rs:126:20\n+  --> $DIR/unnecessary_to_owned.rs:125:20\n    |\n LL |     let _ = x.join(&x_ref.to_string());\n    |                    ^^^^^^^^^^^^^^^^^^ help: use: `x_ref`\n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:128:13\n+  --> $DIR/unnecessary_to_owned.rs:127:13\n    |\n LL |     let _ = slice.to_vec().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `slice.iter().copied()`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:129:13\n+  --> $DIR/unnecessary_to_owned.rs:128:13\n    |\n LL |     let _ = slice.to_owned().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `slice.iter().copied()`\n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:130:13\n+  --> $DIR/unnecessary_to_owned.rs:129:13\n    |\n LL |     let _ = [std::path::PathBuf::new()][..].to_vec().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `[std::path::PathBuf::new()][..].iter().cloned()`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:131:13\n+  --> $DIR/unnecessary_to_owned.rs:130:13\n    |\n LL |     let _ = [std::path::PathBuf::new()][..].to_owned().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `[std::path::PathBuf::new()][..].iter().cloned()`\n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:133:13\n+  --> $DIR/unnecessary_to_owned.rs:132:13\n    |\n LL |     let _ = IntoIterator::into_iter(slice.to_vec());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `slice.iter().copied()`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:134:13\n+  --> $DIR/unnecessary_to_owned.rs:133:13\n    |\n LL |     let _ = IntoIterator::into_iter(slice.to_owned());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `slice.iter().copied()`\n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:135:13\n+  --> $DIR/unnecessary_to_owned.rs:134:13\n    |\n LL |     let _ = IntoIterator::into_iter([std::path::PathBuf::new()][..].to_vec());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `[std::path::PathBuf::new()][..].iter().cloned()`\n \n error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:136:13\n+  --> $DIR/unnecessary_to_owned.rs:135:13\n    |\n LL |     let _ = IntoIterator::into_iter([std::path::PathBuf::new()][..].to_owned());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `[std::path::PathBuf::new()][..].iter().cloned()`\n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:198:14\n+  --> $DIR/unnecessary_to_owned.rs:197:14\n    |\n LL |     for t in file_types.to_vec() {\n    |              ^^^^^^^^^^^^^^^^^^^\n@@ -492,25 +492,25 @@ LL +         let path = match get_file_path(t) {\n    |\n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:221:14\n+  --> $DIR/unnecessary_to_owned.rs:220:14\n    |\n LL |     let _ = &[\"x\"][..].to_vec().into_iter();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `[\"x\"][..].iter().cloned()`\n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:226:14\n+  --> $DIR/unnecessary_to_owned.rs:225:14\n    |\n LL |     let _ = &[\"x\"][..].to_vec().into_iter();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `[\"x\"][..].iter().copied()`\n \n error: unnecessary use of `to_string`\n-  --> $DIR/unnecessary_to_owned.rs:273:24\n+  --> $DIR/unnecessary_to_owned.rs:272:24\n    |\n LL |         Box::new(build(y.to_string()))\n    |                        ^^^^^^^^^^^^^ help: use: `y`\n \n error: unnecessary use of `to_string`\n-  --> $DIR/unnecessary_to_owned.rs:381:12\n+  --> $DIR/unnecessary_to_owned.rs:380:12\n    |\n LL |         id(\"abc\".to_string())\n    |            ^^^^^^^^^^^^^^^^^ help: use: `\"abc\"`"}, {"sha": "c160e31afd33b82200b72515da2c6eb9e1ffa09e", "filename": "tests/ui/unnecessary_unsafety_doc.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_unsafety_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_unsafety_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_unsafety_doc.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,7 @@\n // aux-build:doc_unsafe_macros.rs\n \n #![allow(clippy::let_unit_value)]\n+#![warn(clippy::unnecessary_safety_doc)]\n \n #[macro_use]\n extern crate doc_unsafe_macros;", "previous_filename": "tests/ui/doc_unnecessary_unsafe.rs"}, {"sha": "72898c93fa11395664aca11e162e7b3757a72c85", "filename": "tests/ui/unnecessary_unsafety_doc.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_unsafety_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnecessary_unsafety_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_unsafety_doc.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,37 +1,37 @@\n error: safe function's docs have unnecessary `# Safety` section\n-  --> $DIR/doc_unnecessary_unsafe.rs:18:1\n+  --> $DIR/unnecessary_unsafety_doc.rs:19:1\n    |\n LL | pub fn apocalypse(universe: &mut ()) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unnecessary-safety-doc` implied by `-D warnings`\n \n error: safe function's docs have unnecessary `# Safety` section\n-  --> $DIR/doc_unnecessary_unsafe.rs:44:5\n+  --> $DIR/unnecessary_unsafety_doc.rs:45:5\n    |\n LL |     pub fn republished() {\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: safe function's docs have unnecessary `# Safety` section\n-  --> $DIR/doc_unnecessary_unsafe.rs:57:5\n+  --> $DIR/unnecessary_unsafety_doc.rs:58:5\n    |\n LL |     fn documented(self);\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: docs for safe trait have unnecessary `# Safety` section\n-  --> $DIR/doc_unnecessary_unsafe.rs:67:1\n+  --> $DIR/unnecessary_unsafety_doc.rs:68:1\n    |\n LL | pub trait DocumentedSafeTrait {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: safe function's docs have unnecessary `# Safety` section\n-  --> $DIR/doc_unnecessary_unsafe.rs:95:5\n+  --> $DIR/unnecessary_unsafety_doc.rs:96:5\n    |\n LL |     pub fn documented() -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: safe function's docs have unnecessary `# Safety` section\n-  --> $DIR/doc_unnecessary_unsafe.rs:122:9\n+  --> $DIR/unnecessary_unsafety_doc.rs:123:9\n    |\n LL |         pub fn drive() {\n    |         ^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ LL | very_safe!();\n    = note: this error originates in the macro `very_safe` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for safe trait have unnecessary `# Safety` section\n-  --> $DIR/doc_unnecessary_unsafe.rs:146:1\n+  --> $DIR/unnecessary_unsafety_doc.rs:147:1\n    |\n LL | pub trait DocumentedSafeTraitWithImplementationHeader {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/doc_unnecessary_unsafe.stderr"}, {"sha": "0a8e7b34dfa4fcdd622b742c45b94a1b3d7ae939", "filename": "tests/ui/unnested_or_patterns.fixed", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnested_or_patterns.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnested_or_patterns.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![feature(box_patterns, custom_inner_attributes)]\n+#![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n #![allow(clippy::cognitive_complexity, clippy::match_ref_pats, clippy::upper_case_acronyms)]\n #![allow(unreachable_patterns, irrefutable_let_patterns, unused)]\n@@ -34,14 +34,12 @@ fn main() {\n     if let S { x: 0, y, .. } | S { y, x: 1 } = (S { x: 0, y: 1 }) {}\n }\n \n+#[clippy::msrv = \"1.52\"]\n fn msrv_1_52() {\n-    #![clippy::msrv = \"1.52\"]\n-\n     if let [1] | [52] = [0] {}\n }\n \n+#[clippy::msrv = \"1.53\"]\n fn msrv_1_53() {\n-    #![clippy::msrv = \"1.53\"]\n-\n     if let [1 | 53] = [0] {}\n }"}, {"sha": "2c454adfe89db0066ebd5df473c9c0c898005524", "filename": "tests/ui/unnested_or_patterns.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![feature(box_patterns, custom_inner_attributes)]\n+#![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n #![allow(clippy::cognitive_complexity, clippy::match_ref_pats, clippy::upper_case_acronyms)]\n #![allow(unreachable_patterns, irrefutable_let_patterns, unused)]\n@@ -34,14 +34,12 @@ fn main() {\n     if let S { x: 0, y, .. } | S { y, x: 1 } = (S { x: 0, y: 1 }) {}\n }\n \n+#[clippy::msrv = \"1.52\"]\n fn msrv_1_52() {\n-    #![clippy::msrv = \"1.52\"]\n-\n     if let [1] | [52] = [0] {}\n }\n \n+#[clippy::msrv = \"1.53\"]\n fn msrv_1_53() {\n-    #![clippy::msrv = \"1.53\"]\n-\n     if let [1] | [53] = [0] {}\n }"}, {"sha": "a1f193db555ad12f26fc5729490ec59d454b5758", "filename": "tests/ui/unnested_or_patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnested_or_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funnested_or_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -176,7 +176,7 @@ LL |     if let S { x: 0 | 1, y } = (S { x: 0, y: 1 }) {}\n    |            ~~~~~~~~~~~~~~~~~\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:46:12\n+  --> $DIR/unnested_or_patterns.rs:44:12\n    |\n LL |     if let [1] | [53] = [0] {}\n    |            ^^^^^^^^^^"}, {"sha": "f6f734c05ed59e95c06401d13f7faa393c4a9051", "filename": "tests/ui/unused_rounding.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funused_rounding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funused_rounding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_rounding.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -11,4 +11,7 @@ fn main() {\n     let _ = 3.3_f32.round();\n     let _ = 3.3_f64.round();\n     let _ = 3.0_f32;\n+\n+    let _ = 3_3.0_0_f32;\n+    let _ = 3_3.0_1_f64.round();\n }"}, {"sha": "a0267d8144aabb45c462280e45bb29f46ed81d03", "filename": "tests/ui/unused_rounding.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funused_rounding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funused_rounding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_rounding.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -11,4 +11,7 @@ fn main() {\n     let _ = 3.3_f32.round();\n     let _ = 3.3_f64.round();\n     let _ = 3.0_f32.round();\n+\n+    let _ = 3_3.0_0_f32.round();\n+    let _ = 3_3.0_1_f64.round();\n }"}, {"sha": "b867996fe5763c826e375a948796bf45e9bd0b0b", "filename": "tests/ui/unused_rounding.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funused_rounding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Funused_rounding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_rounding.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -24,5 +24,11 @@ error: used the `round` method with a whole number float\n LL |     let _ = 3.0_f32.round();\n    |             ^^^^^^^^^^^^^^^ help: remove the `round` method call: `3.0_f32`\n \n-error: aborting due to 4 previous errors\n+error: used the `round` method with a whole number float\n+  --> $DIR/unused_rounding.rs:15:13\n+   |\n+LL |     let _ = 3_3.0_0_f32.round();\n+   |             ^^^^^^^^^^^^^^^^^^^ help: remove the `round` method call: `3_3.0_0_f32`\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "0a6166571ebe38c3f5c4bab85661b346f9751937", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n // aux-build:proc_macro_derive.rs\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::use_self)]\n #![allow(dead_code, unreachable_code)]\n #![allow(\n@@ -619,9 +618,8 @@ mod issue6902 {\n     }\n }\n \n+#[clippy::msrv = \"1.36\"]\n fn msrv_1_36() {\n-    #![clippy::msrv = \"1.36\"]\n-\n     enum E {\n         A,\n     }\n@@ -635,9 +633,8 @@ fn msrv_1_36() {\n     }\n }\n \n+#[clippy::msrv = \"1.37\"]\n fn msrv_1_37() {\n-    #![clippy::msrv = \"1.37\"]\n-\n     enum E {\n         A,\n     }"}, {"sha": "39c2b431f7fb95323766b0ed75ce269494881637", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n // aux-build:proc_macro_derive.rs\n \n-#![feature(custom_inner_attributes)]\n #![warn(clippy::use_self)]\n #![allow(dead_code, unreachable_code)]\n #![allow(\n@@ -619,9 +618,8 @@ mod issue6902 {\n     }\n }\n \n+#[clippy::msrv = \"1.36\"]\n fn msrv_1_36() {\n-    #![clippy::msrv = \"1.36\"]\n-\n     enum E {\n         A,\n     }\n@@ -635,9 +633,8 @@ fn msrv_1_36() {\n     }\n }\n \n+#[clippy::msrv = \"1.37\"]\n fn msrv_1_37() {\n-    #![clippy::msrv = \"1.37\"]\n-\n     enum E {\n         A,\n     }"}, {"sha": "48364c40c3b26007ca5b0d6049d9fa8168df407d", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -1,253 +1,253 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:23:21\n+  --> $DIR/use_self.rs:22:21\n    |\n LL |         fn new() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D clippy::use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:24:13\n+  --> $DIR/use_self.rs:23:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:26:22\n+  --> $DIR/use_self.rs:25:22\n    |\n LL |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:27:13\n+  --> $DIR/use_self.rs:26:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:32:25\n+  --> $DIR/use_self.rs:31:25\n    |\n LL |         fn default() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:33:13\n+  --> $DIR/use_self.rs:32:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:98:24\n+  --> $DIR/use_self.rs:97:24\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:98:55\n+  --> $DIR/use_self.rs:97:55\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                                                       ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:113:13\n+  --> $DIR/use_self.rs:112:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:148:29\n+  --> $DIR/use_self.rs:147:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:149:21\n+  --> $DIR/use_self.rs:148:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:160:21\n+  --> $DIR/use_self.rs:159:21\n    |\n LL |         fn baz() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:161:13\n+  --> $DIR/use_self.rs:160:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:178:21\n+  --> $DIR/use_self.rs:177:21\n    |\n LL |             let _ = Enum::B(42);\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:179:21\n+  --> $DIR/use_self.rs:178:21\n    |\n LL |             let _ = Enum::C { field: true };\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:180:21\n+  --> $DIR/use_self.rs:179:21\n    |\n LL |             let _ = Enum::A;\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:222:13\n+  --> $DIR/use_self.rs:221:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:223:13\n+  --> $DIR/use_self.rs:222:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:225:13\n+  --> $DIR/use_self.rs:224:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:244:13\n+  --> $DIR/use_self.rs:243:13\n    |\n LL |             TestStruct::from_something()\n    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:258:25\n+  --> $DIR/use_self.rs:257:25\n    |\n LL |         async fn g() -> S {\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:259:13\n+  --> $DIR/use_self.rs:258:13\n    |\n LL |             S {}\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:263:16\n+  --> $DIR/use_self.rs:262:16\n    |\n LL |             &p[S::A..S::B]\n    |                ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:263:22\n+  --> $DIR/use_self.rs:262:22\n    |\n LL |             &p[S::A..S::B]\n    |                      ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:286:29\n+  --> $DIR/use_self.rs:285:29\n    |\n LL |         fn foo(value: T) -> Foo<T> {\n    |                             ^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:287:13\n+  --> $DIR/use_self.rs:286:13\n    |\n LL |             Foo::<T> { value }\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:459:13\n+  --> $DIR/use_self.rs:458:13\n    |\n LL |             A::new::<submod::B>(submod::B {})\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:496:13\n+  --> $DIR/use_self.rs:495:13\n    |\n LL |             S2::new()\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:533:17\n+  --> $DIR/use_self.rs:532:17\n    |\n LL |                 Foo::Bar => unimplemented!(),\n    |                 ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:534:17\n+  --> $DIR/use_self.rs:533:17\n    |\n LL |                 Foo::Baz => unimplemented!(),\n    |                 ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:540:20\n+  --> $DIR/use_self.rs:539:20\n    |\n LL |             if let Foo::Bar = self {\n    |                    ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:564:17\n+  --> $DIR/use_self.rs:563:17\n    |\n LL |                 Something::Num(n) => *n,\n    |                 ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:565:17\n+  --> $DIR/use_self.rs:564:17\n    |\n LL |                 Something::TupleNums(n, _m) => *n,\n    |                 ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:566:17\n+  --> $DIR/use_self.rs:565:17\n    |\n LL |                 Something::StructNums { one, two: _ } => *one,\n    |                 ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:572:17\n+  --> $DIR/use_self.rs:571:17\n    |\n LL |                 crate::issue8845::Something::Num(n) => *n,\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:573:17\n+  --> $DIR/use_self.rs:572:17\n    |\n LL |                 crate::issue8845::Something::TupleNums(n, _m) => *n,\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:574:17\n+  --> $DIR/use_self.rs:573:17\n    |\n LL |                 crate::issue8845::Something::StructNums { one, two: _ } => *one,\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:590:17\n+  --> $DIR/use_self.rs:589:17\n    |\n LL |             let Foo(x) = self;\n    |                 ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:595:17\n+  --> $DIR/use_self.rs:594:17\n    |\n LL |             let crate::issue8845::Foo(x) = self;\n    |                 ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:602:17\n+  --> $DIR/use_self.rs:601:17\n    |\n LL |             let Bar { x, .. } = self;\n    |                 ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:607:17\n+  --> $DIR/use_self.rs:606:17\n    |\n LL |             let crate::issue8845::Bar { x, .. } = self;\n    |                 ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:648:17\n+  --> $DIR/use_self.rs:645:17\n    |\n LL |                 E::A => {},\n    |                 ^ help: use the applicable keyword: `Self`"}, {"sha": "acb476ee69628efc987a0785bae0ddb36ea85b46", "filename": "triagebot.toml", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/11434f270fca0e403b695e99d4bf0a7212c46f14/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/11434f270fca0e403b695e99d4bf0a7212c46f14/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=11434f270fca0e403b695e99d4bf0a7212c46f14", "patch": "@@ -4,9 +4,26 @@ allow-unauthenticated = [\n     \"good-first-issue\"\n ]\n \n-[assign]\n-\n # Allows shortcuts like `@rustbot ready`\n #\n # See https://github.com/rust-lang/triagebot/wiki/Shortcuts\n [shortcut]\n+\n+[autolabel.\"S-waiting-on-review\"]\n+new_pr = true\n+\n+[assign]\n+contributing_url = \"https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md\"\n+\n+[assign.owners]\n+\"/.github\" = [\"@flip1995\"]\n+\"*\" = [\n+    \"@flip1995\",\n+    \"@Manishearth\",\n+    \"@llogiq\",\n+    \"@giraffate\",\n+    \"@xFrednet\",\n+    \"@Alexendoo\",\n+    \"@dswij\",\n+    \"@Jarcho\",\n+]"}]}