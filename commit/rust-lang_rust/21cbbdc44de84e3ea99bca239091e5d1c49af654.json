{"sha": "21cbbdc44de84e3ea99bca239091e5d1c49af654", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxY2JiZGM0NGRlODRlM2VhOTliY2EyMzkwOTFlNWQxYzQ5YWY2NTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-13T02:46:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-13T02:46:57Z"}, "message": "Auto merge of #82045 - Dylan-DPC:rollup-244l0sb, r=Dylan-DPC\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #79775 (Fix injected errors when running doctests on a crate named after a keyword)\n - #81012 (Stabilize the partition_point feature)\n - #81479 (Allow casting mut array ref to mut ptr)\n - #81506 (HWAddressSanitizer support)\n - #81741 (Increment `self.index` before calling `Iterator::self.a.__iterator_ge\u2026)\n - #81850 (use RWlock when accessing os::env)\n - #81911 (GAT/const_generics: Allow with_opt_const_param to return GAT param def_id)\n - #82022 (Push a `char` instead of a `str` with len one into a String)\n - #82023 (Remove unnecessary lint allow attrs on example)\n - #82030 (Use `Iterator::all` instead of open-coding it)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c971608c75fc98dd65787e909375c93744b563da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c971608c75fc98dd65787e909375c93744b563da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21cbbdc44de84e3ea99bca239091e5d1c49af654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21cbbdc44de84e3ea99bca239091e5d1c49af654", "html_url": "https://github.com/rust-lang/rust/commit/21cbbdc44de84e3ea99bca239091e5d1c49af654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21cbbdc44de84e3ea99bca239091e5d1c49af654/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5aee2d5241139d808f4fdece0026603489afd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5aee2d5241139d808f4fdece0026603489afd1", "html_url": "https://github.com/rust-lang/rust/commit/3f5aee2d5241139d808f4fdece0026603489afd1"}, {"sha": "1ef566fc7c72a5e15ffd54334c744b6638b24374", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef566fc7c72a5e15ffd54334c744b6638b24374", "html_url": "https://github.com/rust-lang/rust/commit/1ef566fc7c72a5e15ffd54334c744b6638b24374"}], "stats": {"total": 570, "additions": 494, "deletions": 76}, "files": [{"sha": "26111729ba5b237235640b00f2b915dc8bcc6c00", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -53,6 +53,9 @@ pub fn sanitize(cx: &CodegenCx<'ll, '_>, no_sanitize: SanitizerSet, llfn: &'ll V\n     if enabled.contains(SanitizerSet::THREAD) {\n         llvm::Attribute::SanitizeThread.apply_llfn(Function, llfn);\n     }\n+    if enabled.contains(SanitizerSet::HWADDRESS) {\n+        llvm::Attribute::SanitizeHWAddress.apply_llfn(Function, llfn);\n+    }\n }\n \n /// Tell LLVM to emit or not emit the information necessary to unwind the stack for the function."}, {"sha": "8b737c9a2e5576fcba8e80c9240a45a8a34b46bf", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -440,6 +440,8 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n             sanitize_memory_recover: config.sanitizer_recover.contains(SanitizerSet::MEMORY),\n             sanitize_memory_track_origins: config.sanitizer_memory_track_origins as c_int,\n             sanitize_thread: config.sanitizer.contains(SanitizerSet::THREAD),\n+            sanitize_hwaddress: config.sanitizer.contains(SanitizerSet::HWADDRESS),\n+            sanitize_hwaddress_recover: config.sanitizer_recover.contains(SanitizerSet::HWADDRESS),\n         })\n     } else {\n         None\n@@ -652,6 +654,10 @@ unsafe fn add_sanitizer_passes(config: &ModuleConfig, passes: &mut Vec<&'static\n     if config.sanitizer.contains(SanitizerSet::THREAD) {\n         passes.push(llvm::LLVMRustCreateThreadSanitizerPass());\n     }\n+    if config.sanitizer.contains(SanitizerSet::HWADDRESS) {\n+        let recover = config.sanitizer_recover.contains(SanitizerSet::HWADDRESS);\n+        passes.push(llvm::LLVMRustCreateHWAddressSanitizerPass(recover));\n+    }\n }\n \n pub(crate) fn link("}, {"sha": "8c1740d8f25f0d3a5590bd5bfd5046fa4e0d59b1", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -131,6 +131,7 @@ pub enum Attribute {\n     ReturnsTwice = 25,\n     ReadNone = 26,\n     InaccessibleMemOnly = 27,\n+    SanitizeHWAddress = 28,\n }\n \n /// LLVMIntPredicate\n@@ -439,6 +440,8 @@ pub struct SanitizerOptions {\n     pub sanitize_memory_recover: bool,\n     pub sanitize_memory_track_origins: c_int,\n     pub sanitize_thread: bool,\n+    pub sanitize_hwaddress: bool,\n+    pub sanitize_hwaddress_recover: bool,\n }\n \n /// LLVMRelocMode\n@@ -2128,6 +2131,7 @@ extern \"C\" {\n         Recover: bool,\n     ) -> &'static mut Pass;\n     pub fn LLVMRustCreateThreadSanitizerPass() -> &'static mut Pass;\n+    pub fn LLVMRustCreateHWAddressSanitizerPass(Recover: bool) -> &'static mut Pass;\n     pub fn LLVMRustAddPass(PM: &PassManager<'_>, Pass: &'static mut Pass);\n     pub fn LLVMRustAddLastExtensionPasses(\n         PMB: &PassManagerBuilder,"}, {"sha": "6c58417590e695f8914eccba4138c44338f2001c", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -893,6 +893,9 @@ fn link_sanitizers(sess: &Session, crate_type: CrateType, linker: &mut dyn Linke\n     if sanitizer.contains(SanitizerSet::THREAD) {\n         link_sanitizer_runtime(sess, linker, \"tsan\");\n     }\n+    if sanitizer.contains(SanitizerSet::HWADDRESS) {\n+        link_sanitizer_runtime(sess, linker, \"hwasan\");\n+    }\n }\n \n fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {"}, {"sha": "0e3bf5615af7bc3b5ff02fe23e7338239f7b3d90", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -85,6 +85,7 @@ enum LLVMRustAttribute {\n   ReturnsTwice = 25,\n   ReadNone = 26,\n   InaccessibleMemOnly = 27,\n+  SanitizeHWAddress = 28,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "5263d5dcf3e8f2214cdfa3e9aff33e80598dcf23", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -33,6 +33,7 @@\n #include \"llvm/Support/TimeProfiler.h\"\n #include \"llvm/Transforms/Instrumentation/ThreadSanitizer.h\"\n #include \"llvm/Transforms/Instrumentation/MemorySanitizer.h\"\n+#include \"llvm/Transforms/Instrumentation/HWAddressSanitizer.h\"\n #include \"llvm/Transforms/Utils/CanonicalizeAliases.h\"\n #include \"llvm/Transforms/Utils/NameAnonGlobals.h\"\n \n@@ -133,6 +134,12 @@ extern \"C\" LLVMPassRef LLVMRustCreateThreadSanitizerPass() {\n   return wrap(createThreadSanitizerLegacyPassPass());\n }\n \n+extern \"C\" LLVMPassRef LLVMRustCreateHWAddressSanitizerPass(bool Recover) {\n+  const bool CompileKernel = false;\n+\n+  return wrap(createHWAddressSanitizerLegacyPassPass(CompileKernel, Recover));\n+}\n+\n extern \"C\" LLVMRustPassKind LLVMRustPassKind(LLVMPassRef RustPass) {\n   assert(RustPass);\n   Pass *Pass = unwrap(RustPass);\n@@ -722,6 +729,8 @@ struct LLVMRustSanitizerOptions {\n   bool SanitizeMemoryRecover;\n   int  SanitizeMemoryTrackOrigins;\n   bool SanitizeThread;\n+  bool SanitizeHWAddress;\n+  bool SanitizeHWAddressRecover;\n };\n \n extern \"C\" void\n@@ -886,6 +895,23 @@ LLVMRustOptimizeWithNewPassManager(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n         }\n       );\n+#endif\n+    }\n+    if (SanitizerOptions->SanitizeHWAddress) {\n+#if LLVM_VERSION_GE(11, 0)\n+      OptimizerLastEPCallbacks.push_back(\n+        [SanitizerOptions](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+          MPM.addPass(HWAddressSanitizerPass(\n+              /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n+        }\n+      );\n+#else\n+      PipelineStartEPCallbacks.push_back(\n+        [SanitizerOptions](ModulePassManager &MPM) {\n+          MPM.addPass(HWAddressSanitizerPass(\n+              /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n+        }\n+      );\n #endif\n     }\n   }"}, {"sha": "45835990cecbb01fb267b85dcd4d7213690640e1", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -205,6 +205,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::ReadNone;\n   case InaccessibleMemOnly:\n     return Attribute::InaccessibleMemOnly;\n+  case SanitizeHWAddress:\n+    return Attribute::SanitizeHWAddress;\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }"}, {"sha": "52b1ff3877da70fa2d43909b13f0aa08b3654fd0", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -2191,19 +2191,18 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     CastKind::Pointer(PointerCast::ArrayToPointer) => {\n                         let ty_from = op.ty(body, tcx);\n \n-                        let opt_ty_elem = match ty_from.kind() {\n-                            ty::RawPtr(ty::TypeAndMut {\n-                                mutbl: hir::Mutability::Not,\n-                                ty: array_ty,\n-                            }) => match array_ty.kind() {\n-                                ty::Array(ty_elem, _) => Some(ty_elem),\n-                                _ => None,\n-                            },\n+                        let opt_ty_elem_mut = match ty_from.kind() {\n+                            ty::RawPtr(ty::TypeAndMut { mutbl: array_mut, ty: array_ty }) => {\n+                                match array_ty.kind() {\n+                                    ty::Array(ty_elem, _) => Some((ty_elem, *array_mut)),\n+                                    _ => None,\n+                                }\n+                            }\n                             _ => None,\n                         };\n \n-                        let ty_elem = match opt_ty_elem {\n-                            Some(ty_elem) => ty_elem,\n+                        let (ty_elem, ty_mut) = match opt_ty_elem_mut {\n+                            Some(ty_elem_mut) => ty_elem_mut,\n                             None => {\n                                 span_mirbug!(\n                                     self,\n@@ -2215,11 +2214,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             }\n                         };\n \n-                        let ty_to = match ty.kind() {\n-                            ty::RawPtr(ty::TypeAndMut {\n-                                mutbl: hir::Mutability::Not,\n-                                ty: ty_to,\n-                            }) => ty_to,\n+                        let (ty_to, ty_to_mut) = match ty.kind() {\n+                            ty::RawPtr(ty::TypeAndMut { mutbl: ty_to_mut, ty: ty_to }) => {\n+                                (ty_to, *ty_to_mut)\n+                            }\n                             _ => {\n                                 span_mirbug!(\n                                     self,\n@@ -2231,6 +2229,17 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             }\n                         };\n \n+                        if ty_to_mut == Mutability::Mut && ty_mut == Mutability::Not {\n+                            span_mirbug!(\n+                                self,\n+                                rvalue,\n+                                \"ArrayToPointer cast from const {:?} to mut {:?}\",\n+                                ty,\n+                                ty_to\n+                            );\n+                            return;\n+                        }\n+\n                         if let Err(terr) = self.sub_types(\n                             ty_elem,\n                             ty_to,"}, {"sha": "210dbb0ee993929c27e832ab4e3c5e0fcefee0c0", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -43,6 +43,7 @@ bitflags! {\n         const LEAK    = 1 << 1;\n         const MEMORY  = 1 << 2;\n         const THREAD  = 1 << 3;\n+        const HWADDRESS  = 1 << 4;\n     }\n }\n \n@@ -56,6 +57,7 @@ impl fmt::Display for SanitizerSet {\n                 SanitizerSet::LEAK => \"leak\",\n                 SanitizerSet::MEMORY => \"memory\",\n                 SanitizerSet::THREAD => \"thread\",\n+                SanitizerSet::HWADDRESS => \"hwaddress\",\n                 _ => panic!(\"unrecognized sanitizer {:?}\", s),\n             };\n             if !first {\n@@ -73,12 +75,18 @@ impl IntoIterator for SanitizerSet {\n     type IntoIter = std::vec::IntoIter<SanitizerSet>;\n \n     fn into_iter(self) -> Self::IntoIter {\n-        [SanitizerSet::ADDRESS, SanitizerSet::LEAK, SanitizerSet::MEMORY, SanitizerSet::THREAD]\n-            .iter()\n-            .copied()\n-            .filter(|&s| self.contains(s))\n-            .collect::<Vec<_>>()\n-            .into_iter()\n+        [\n+            SanitizerSet::ADDRESS,\n+            SanitizerSet::LEAK,\n+            SanitizerSet::MEMORY,\n+            SanitizerSet::THREAD,\n+            SanitizerSet::HWADDRESS,\n+        ]\n+        .iter()\n+        .copied()\n+        .filter(|&s| self.contains(s))\n+        .collect::<Vec<_>>()\n+        .into_iter()\n     }\n }\n "}, {"sha": "baa0502521da748769933adf39c413e51bedfccf", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -253,7 +253,7 @@ macro_rules! options {\n         pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n         pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n         pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n-        pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `leak`, `memory` or `thread`\";\n+        pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `hwaddress`, `leak`, `memory` or `thread`\";\n         pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n         pub const parse_cfguard: &str =\n             \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n@@ -476,6 +476,7 @@ macro_rules! options {\n                         \"leak\" => SanitizerSet::LEAK,\n                         \"memory\" => SanitizerSet::MEMORY,\n                         \"thread\" => SanitizerSet::THREAD,\n+                        \"hwaddress\" => SanitizerSet::HWADDRESS,\n                         _ => return false,\n                     }\n                 }"}, {"sha": "a7ceb9e06a5192ca111f3ac9e463a0fe8eabee48", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -1126,7 +1126,8 @@ impl Session {\n         self.opts.optimize != config::OptLevel::No\n         // AddressSanitizer uses lifetimes to detect use after scope bugs.\n         // MemorySanitizer uses lifetimes to detect use of uninitialized stack variables.\n-        || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY)\n+        // HWAddressSanitizer will use lifetimes to detect use after scope bugs in the future.\n+        || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY | SanitizerSet::HWADDRESS)\n     }\n \n     pub fn link_dead_code(&self) -> bool {\n@@ -1562,6 +1563,8 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         \"x86_64-unknown-freebsd\",\n         \"x86_64-unknown-linux-gnu\",\n     ];\n+    const HWASAN_SUPPORTED_TARGETS: &[&str] =\n+        &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n \n     // Sanitizers can only be used on some tested platforms.\n     for s in sess.opts.debugging_opts.sanitizer {\n@@ -1570,6 +1573,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n             SanitizerSet::LEAK => LSAN_SUPPORTED_TARGETS,\n             SanitizerSet::MEMORY => MSAN_SUPPORTED_TARGETS,\n             SanitizerSet::THREAD => TSAN_SUPPORTED_TARGETS,\n+            SanitizerSet::HWADDRESS => HWASAN_SUPPORTED_TARGETS,\n             _ => panic!(\"unrecognized sanitizer {}\", s),\n         };\n         if !supported_targets.contains(&&*sess.opts.target_triple.triple()) {"}, {"sha": "1c37a6b2aca18a8b68feb1f532cb002b1955810c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -593,6 +593,7 @@ symbols! {\n         html_no_source,\n         html_playground_url,\n         html_root_url,\n+        hwaddress,\n         i,\n         i128,\n         i128_type,"}, {"sha": "16c344e8e2b9e2bc893bdf6051b112bf13292c90", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -765,9 +765,8 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         m_expr: ty::TypeAndMut<'tcx>,\n         m_cast: ty::TypeAndMut<'tcx>,\n     ) -> Result<CastKind, CastError> {\n-        // array-ptr-cast.\n-\n-        if m_expr.mutbl == hir::Mutability::Not && m_cast.mutbl == hir::Mutability::Not {\n+        // array-ptr-cast: allow mut-to-mut, mut-to-const, const-to-const\n+        if m_expr.mutbl == hir::Mutability::Mut || m_cast.mutbl == hir::Mutability::Not {\n             if let ty::Array(ety, _) = m_expr.ty.kind() {\n                 // Due to the limitations of LLVM global constants,\n                 // region pointers end up pointing at copies of"}, {"sha": "75cad9f21c99089f5a1648e3017d7df3bc1e7e0f", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -1211,7 +1211,7 @@ fn construct_place_string(tcx: TyCtxt<'_>, place: &Place<'tcx>) -> String {\n             ProjectionKind::Subslice => String::from(\"Subslice\"),\n         };\n         if i != 0 {\n-            projections_str.push_str(\",\");\n+            projections_str.push(',');\n         }\n         projections_str.push_str(proj.as_str());\n     }\n@@ -1382,14 +1382,8 @@ fn determine_place_ancestry_relation(\n     // Assume of length of projections_b = m\n     let projections_b = &place_b.projections;\n \n-    let mut same_initial_projections = true;\n-\n-    for (proj_a, proj_b) in projections_a.iter().zip(projections_b.iter()) {\n-        if proj_a != proj_b {\n-            same_initial_projections = false;\n-            break;\n-        }\n-    }\n+    let same_initial_projections =\n+        projections_a.iter().zip(projections_b.iter()).all(|(proj_a, proj_b)| proj_a == proj_b);\n \n     if same_initial_projections {\n         // First min(n, m) projections are the same"}, {"sha": "2598f3e38ce00b4b6b07680b0be6d984feb2fbf9", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -2709,10 +2709,12 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n                     } else if item.has_name(sym::thread) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n+                    } else if item.has_name(sym::hwaddress) {\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS;\n                     } else {\n                         tcx.sess\n                             .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n-                            .note(\"expected one of: `address`, `memory` or `thread`\")\n+                            .note(\"expected one of: `address`, `hwaddress`, `memory` or `thread`\")\n                             .emit();\n                     }\n                 }"}, {"sha": "7fa58dcd5f44f0aaf4b7bf5709be61d1bdb45559", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -29,6 +29,73 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n         let parent_node = tcx.hir().get(parent_node_id);\n \n         match parent_node {\n+            // This match arm is for when the def_id appears in a GAT whose\n+            // path can't be resolved without typechecking e.g.\n+            //\n+            // trait Foo {\n+            //   type Assoc<const N: usize>;\n+            //   fn foo() -> Self::Assoc<3>;\n+            // }\n+            //\n+            // In the above code we would call this query with the def_id of 3 and\n+            // the parent_node we match on would be the hir node for Self::Assoc<3>\n+            //\n+            // `Self::Assoc<3>` cant be resolved without typchecking here as we\n+            // didnt write <Self as Foo>::Assoc<3>. If we did then another match\n+            // arm would handle this.\n+            //\n+            // I believe this match arm is only needed for GAT but I am not 100% sure - BoxyUwU\n+            Node::Ty(hir_ty @ Ty { kind: TyKind::Path(QPath::TypeRelative(_, segment)), .. }) => {\n+                // Find the Item containing the associated type so we can create an ItemCtxt.\n+                // Using the ItemCtxt convert the HIR for the unresolved assoc type into a\n+                // ty which is a fully resolved projection.\n+                // For the code example above, this would mean converting Self::Assoc<3>\n+                // into a ty::Projection(<Self as Foo>::Assoc<3>)\n+                let item_hir_id = tcx\n+                    .hir()\n+                    .parent_iter(hir_id)\n+                    .filter(|(_, node)| matches!(node, Node::Item(_)))\n+                    .map(|(id, _)| id)\n+                    .next()\n+                    .unwrap();\n+                let item_did = tcx.hir().local_def_id(item_hir_id).to_def_id();\n+                let item_ctxt = &ItemCtxt::new(tcx, item_did) as &dyn crate::astconv::AstConv<'_>;\n+                let ty = item_ctxt.ast_ty_to_ty(hir_ty);\n+\n+                // Iterate through the generics of the projection to find the one that corresponds to\n+                // the def_id that this query was called with. We filter to only const args here as a\n+                // precaution for if it's ever allowed to elide lifetimes in GAT's. It currently isn't\n+                // but it can't hurt to be safe ^^\n+                if let ty::Projection(projection) = ty.kind() {\n+                    let generics = tcx.generics_of(projection.item_def_id);\n+\n+                    let arg_index = segment\n+                        .args\n+                        .and_then(|args| {\n+                            args.args\n+                                .iter()\n+                                .filter(|arg| arg.is_const())\n+                                .position(|arg| arg.id() == hir_id)\n+                        })\n+                        .unwrap_or_else(|| {\n+                            bug!(\"no arg matching AnonConst in segment\");\n+                        });\n+\n+                    return generics\n+                        .params\n+                        .iter()\n+                        .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const))\n+                        .nth(arg_index)\n+                        .map(|param| param.def_id);\n+                }\n+\n+                // I dont think it's possible to reach this but I'm not 100% sure - BoxyUwU\n+                tcx.sess.delay_span_bug(\n+                    tcx.def_span(def_id),\n+                    \"unexpected non-GAT usage of an anon const\",\n+                );\n+                return None;\n+            }\n             Node::Expr(&Expr {\n                 kind:\n                     ExprKind::MethodCall(segment, ..) | ExprKind::Path(QPath::TypeRelative(_, segment)),"}, {"sha": "22d95b8bcc08feace42a9ba38d465692f58a9c5f", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -56,6 +56,7 @@ This API is completely unstable and subject to change.\n */\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(bindings_after_at)]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "04033905728ab3b0bfe1abc338d82daca5c431a4", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -99,13 +99,11 @@\n //! pub struct Foo;\n //!\n //! #[no_mangle]\n-//! #[allow(improper_ctypes_definitions)]\n //! pub extern \"C\" fn foo_new() -> Box<Foo> {\n //!     Box::new(Foo)\n //! }\n //!\n //! #[no_mangle]\n-//! #[allow(improper_ctypes_definitions)]\n //! pub extern \"C\" fn foo_delete(_: Option<Box<Foo>>) {}\n //! ```\n //!"}, {"sha": "9f983534520069e6c09fc16ba73762d86137441d", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -198,12 +198,13 @@ where\n                 Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))\n             }\n         } else if A::may_have_side_effect() && self.index < self.a.size() {\n+            let i = self.index;\n+            self.index += 1;\n             // match the base implementation's potential side effects\n-            // SAFETY: we just checked that `self.index` < `self.a.len()`\n+            // SAFETY: we just checked that `i` < `self.a.len()`\n             unsafe {\n-                self.a.__iterator_get_unchecked(self.index);\n+                self.a.__iterator_get_unchecked(i);\n             }\n-            self.index += 1;\n             None\n         } else {\n             None"}, {"sha": "c99572d98ff829f3b4cb5cf0a64023253cfdfee2", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -2082,6 +2082,12 @@ impl<T> [T] {\n     /// [`Result::Err`] is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n+    /// See also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n+    ///\n+    /// [`binary_search_by`]: #method.binary_search_by\n+    /// [`binary_search_by_key`]: #method.binary_search_by_key\n+    /// [`partition_point`]: #method.partition_point\n+    ///\n     /// # Examples\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n@@ -2129,6 +2135,12 @@ impl<T> [T] {\n     /// [`Result::Err`] is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n+    /// See also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n+    ///\n+    /// [`binary_search`]: #method.binary_search\n+    /// [`binary_search_by_key`]: #method.binary_search_by_key\n+    /// [`partition_point`]: #method.partition_point\n+    ///\n     /// # Examples\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n@@ -2186,7 +2198,12 @@ impl<T> [T] {\n     /// [`Result::Err`] is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n+    /// See also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n+    ///\n     /// [`sort_by_key`]: #method.sort_by_key\n+    /// [`binary_search`]: #method.binary_search\n+    /// [`binary_search_by`]: #method.binary_search_by\n+    /// [`partition_point`]: #method.partition_point\n     ///\n     /// # Examples\n     ///\n@@ -3399,19 +3416,23 @@ impl<T> [T] {\n     /// If this slice is not partitioned, the returned result is unspecified and meaningless,\n     /// as this method performs a kind of binary search.\n     ///\n+    /// See also [`binary_search`], [`binary_search_by`], and [`binary_search_by_key`].\n+    ///\n+    /// [`binary_search`]: #method.binary_search\n+    /// [`binary_search_by`]: #method.binary_search_by\n+    /// [`binary_search_by_key`]: #method.binary_search_by_key\n+    ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(partition_point)]\n-    ///\n     /// let v = [1, 2, 3, 3, 5, 6, 7];\n     /// let i = v.partition_point(|&x| x < 5);\n     ///\n     /// assert_eq!(i, 4);\n     /// assert!(v[..i].iter().all(|&x| x < 5));\n     /// assert!(v[i..].iter().all(|&x| !(x < 5)));\n     /// ```\n-    #[unstable(feature = \"partition_point\", reason = \"new API\", issue = \"73831\")]\n+    #[stable(feature = \"partition_point\", since = \"1.52.0\")]\n     pub fn partition_point<P>(&self, mut pred: P) -> usize\n     where\n         P: FnMut(&T) -> bool,"}, {"sha": "40dc6473b7d4088358dae9738faa12a71eabb95e", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -67,7 +67,6 @@\n #![feature(option_result_unwrap_unchecked)]\n #![feature(option_unwrap_none)]\n #![feature(peekable_peek_mut)]\n-#![feature(partition_point)]\n #![feature(once_cell)]\n #![feature(unsafe_block_in_unsafe_fn)]\n #![feature(int_bits_const)]"}, {"sha": "1d1118aa694347d285a59dcbd4c45bf10f32812f", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -22,6 +22,7 @@ use crate::str;\n use crate::sys::cvt;\n use crate::sys::fd;\n use crate::sys_common::mutex::{StaticMutex, StaticMutexGuard};\n+use crate::sys_common::rwlock::{RWLockReadGuard, StaticRWLock};\n use crate::vec;\n \n use libc::{c_char, c_int, c_void};\n@@ -490,20 +491,20 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     extern \"C\" {\n         static mut environ: *const *const c_char;\n     }\n-    &mut environ\n+    ptr::addr_of_mut!(environ)\n }\n \n-pub unsafe fn env_lock() -> StaticMutexGuard {\n-    // It is UB to attempt to acquire this mutex reentrantly!\n-    static ENV_LOCK: StaticMutex = StaticMutex::new();\n-    ENV_LOCK.lock()\n+static ENV_LOCK: StaticRWLock = StaticRWLock::new();\n+\n+pub fn env_read_lock() -> RWLockReadGuard {\n+    ENV_LOCK.read_with_guard()\n }\n \n /// Returns a vector of (variable, value) byte-vector pairs for all the\n /// environment variables of the current process.\n pub fn env() -> Env {\n     unsafe {\n-        let _guard = env_lock();\n+        let _guard = env_read_lock();\n         let mut environ = *environ();\n         let mut result = Vec::new();\n         if !environ.is_null() {\n@@ -540,7 +541,7 @@ pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n     // always None as well\n     let k = CString::new(k.as_bytes())?;\n     unsafe {\n-        let _guard = env_lock();\n+        let _guard = env_read_lock();\n         let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n         let ret = if s.is_null() {\n             None\n@@ -556,7 +557,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n     let v = CString::new(v.as_bytes())?;\n \n     unsafe {\n-        let _guard = env_lock();\n+        let _guard = ENV_LOCK.write_with_guard();\n         cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(drop)\n     }\n }\n@@ -565,7 +566,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n     let nbuf = CString::new(n.as_bytes())?;\n \n     unsafe {\n-        let _guard = env_lock();\n+        let _guard = ENV_LOCK.write_with_guard();\n         cvt(libc::unsetenv(nbuf.as_ptr())).map(drop)\n     }\n }"}, {"sha": "9e82df7755e89c5d58240e4ddee91ac122c0aad1", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -47,7 +47,7 @@ impl Command {\n         // a lock any more because the parent won't do anything and the child is\n         // in its own process.\n         let result = unsafe {\n-            let _env_lock = sys::os::env_lock();\n+            let _env_lock = sys::os::env_read_lock();\n             cvt(libc::fork())?\n         };\n \n@@ -124,7 +124,7 @@ impl Command {\n                     // Similar to when forking, we want to ensure that access to\n                     // the environment is synchronized, so make sure to grab the\n                     // environment lock before we try to exec.\n-                    let _lock = sys::os::env_lock();\n+                    let _lock = sys::os::env_read_lock();\n \n                     let Err(e) = self.do_exec(theirs, envp.as_ref());\n                     e\n@@ -404,7 +404,7 @@ impl Command {\n             cvt_nz(libc::posix_spawnattr_setflags(attrs.0.as_mut_ptr(), flags as _))?;\n \n             // Make sure we synchronize access to the global `environ` resource\n-            let _env_lock = sys::os::env_lock();\n+            let _env_lock = sys::os::env_read_lock();\n             let envp = envp.map(|c| c.as_ptr()).unwrap_or_else(|| *sys::os::environ() as *const _);\n             cvt_nz(libc::posix_spawnp(\n                 &mut p.pid,"}, {"sha": "41e8ad772946388da8fafb48f1ecf66bfbc31d7b", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -86,3 +86,62 @@ impl RWLock {\n         self.0.destroy()\n     }\n }\n+\n+// the cfg annotations only exist due to dead code warnings. the code itself is portable\n+#[cfg(unix)]\n+pub struct StaticRWLock(RWLock);\n+\n+#[cfg(unix)]\n+impl StaticRWLock {\n+    pub const fn new() -> StaticRWLock {\n+        StaticRWLock(RWLock::new())\n+    }\n+\n+    /// Acquires shared access to the underlying lock, blocking the current\n+    /// thread to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn read_with_guard(&'static self) -> RWLockReadGuard {\n+        // Safety: All methods require static references, therefore self\n+        // cannot be moved between invocations.\n+        unsafe {\n+            self.0.read();\n+        }\n+        RWLockReadGuard(&self.0)\n+    }\n+\n+    /// Acquires write access to the underlying lock, blocking the current thread\n+    /// to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn write_with_guard(&'static self) -> RWLockWriteGuard {\n+        // Safety: All methods require static references, therefore self\n+        // cannot be moved between invocations.\n+        unsafe {\n+            self.0.write();\n+        }\n+        RWLockWriteGuard(&self.0)\n+    }\n+}\n+\n+#[cfg(unix)]\n+pub struct RWLockReadGuard(&'static RWLock);\n+\n+#[cfg(unix)]\n+impl Drop for RWLockReadGuard {\n+    fn drop(&mut self) {\n+        unsafe { self.0.read_unlock() }\n+    }\n+}\n+\n+#[cfg(unix)]\n+pub struct RWLockWriteGuard(&'static RWLock);\n+\n+#[cfg(unix)]\n+impl Drop for RWLockWriteGuard {\n+    fn drop(&mut self) {\n+        unsafe { self.0.write_unlock() }\n+    }\n+}"}, {"sha": "2e6e9142afe6c5a1be6a5b488d0e0c7efc79c3ce", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -51,7 +51,7 @@ def v(*args):\n o(\"ninja\", \"llvm.ninja\", \"build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\")\n o(\"locked-deps\", \"build.locked-deps\", \"force Cargo.lock to be up to date\")\n o(\"vendor\", \"build.vendor\", \"enable usage of vendored Rust crates\")\n-o(\"sanitizers\", \"build.sanitizers\", \"build the sanitizer runtimes (asan, lsan, msan, tsan)\")\n+o(\"sanitizers\", \"build.sanitizers\", \"build the sanitizer runtimes (asan, lsan, msan, tsan, hwasan)\")\n o(\"dist-src\", \"rust.dist-src\", \"when building tarballs enables building a source tarball\")\n o(\"cargo-native-static\", \"build.cargo-native-static\", \"static native libraries in cargo\")\n o(\"profiler\", \"build.profiler\", \"build the profiler runtime\")"}, {"sha": "b5a8b694c9420d14e75c937c25d734789be8633c", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -804,7 +804,7 @@ fn supported_sanitizers(\n         \"aarch64-apple-darwin\" => darwin_libs(\"osx\", &[\"asan\", \"lsan\", \"tsan\"]),\n         \"aarch64-fuchsia\" => common_libs(\"fuchsia\", \"aarch64\", &[\"asan\"]),\n         \"aarch64-unknown-linux-gnu\" => {\n-            common_libs(\"linux\", \"aarch64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n+            common_libs(\"linux\", \"aarch64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\", \"hwasan\"])\n         }\n         \"x86_64-apple-darwin\" => darwin_libs(\"osx\", &[\"asan\", \"lsan\", \"tsan\"]),\n         \"x86_64-fuchsia\" => common_libs(\"fuchsia\", \"x86_64\", &[\"asan\"]),"}, {"sha": "4f7a101d2acbd09a30404b845a46691b16bbb2a2", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 87, "deletions": 2, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -7,12 +7,15 @@ The tracking issue for this feature is: [#39699](https://github.com/rust-lang/ru\n This feature allows for use of one of following sanitizers:\n \n * [AddressSanitizer][clang-asan] a fast memory error detector.\n+* [HWAddressSanitizer][clang-hwasan] a memory error detector similar to\n+  AddressSanitizer, but based on partial hardware assistance.\n * [LeakSanitizer][clang-lsan] a run-time memory leak detector.\n * [MemorySanitizer][clang-msan] a detector of uninitialized reads.\n * [ThreadSanitizer][clang-tsan] a fast data race detector.\n \n-To enable a sanitizer compile with `-Zsanitizer=address`, `-Zsanitizer=leak`,\n-`-Zsanitizer=memory` or `-Zsanitizer=thread`.\n+To enable a sanitizer compile with `-Zsanitizer=address`,\n+`-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory` or\n+`-Zsanitizer=thread`.\n \n # AddressSanitizer\n \n@@ -174,6 +177,86 @@ Shadow byte legend (one shadow byte represents 8 application bytes):\n ==39249==ABORTING\n ```\n \n+# HWAddressSanitizer\n+\n+HWAddressSanitizer is a newer variant of AddressSanitizer that consumes much\n+less memory.\n+\n+HWAddressSanitizer is supported on the following targets:\n+\n+* `aarch64-linux-android`\n+* `aarch64-unknown-linux-gnu`\n+\n+HWAddressSanitizer requires `tagged-globals` target feature to instrument\n+globals. To enable this target feature compile with `-C\n+target-feature=+tagged-globals`\n+\n+## Example\n+\n+Heap buffer overflow:\n+\n+```rust\n+fn main() {\n+    let xs = vec![0, 1, 2, 3];\n+    let _y = unsafe { *xs.as_ptr().offset(4) };\n+}\n+```\n+\n+```shell\n+$ rustc main.rs -Zsanitizer=hwaddress -C target-feature=+tagged-globals -C\n+linker=aarch64-linux-gnu-gcc -C link-arg=-fuse-ld=lld --target\n+aarch64-unknown-linux-gnu\n+```\n+\n+```shell\n+$ ./main\n+==241==ERROR: HWAddressSanitizer: tag-mismatch on address 0xefdeffff0050 at pc 0xaaaae0ae4a98\n+READ of size 4 at 0xefdeffff0050 tags: 2c/00 (ptr/mem) in thread T0\n+    #0 0xaaaae0ae4a94  (/.../main+0x54a94)\n+    ...\n+\n+[0xefdeffff0040,0xefdeffff0060) is a small allocated heap chunk; size: 32 offset: 16\n+0xefdeffff0050 is located 0 bytes to the right of 16-byte region [0xefdeffff0040,0xefdeffff0050)\n+allocated here:\n+    #0 0xaaaae0acb80c  (/.../main+0x3b80c)\n+    ...\n+\n+Thread: T0 0xeffe00002000 stack: [0xffffc28ad000,0xffffc30ad000) sz: 8388608 tls: [0xffffaa10a020,0xffffaa10a7d0)\n+Memory tags around the buggy address (one tag corresponds to 16 bytes):\n+  0xfefcefffef80: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffef90: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefa0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefb0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefc0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefd0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefe0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffeff0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+=>0xfefceffff000: d7  d7  05  00  2c [00] 00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff010: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff020: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff030: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff040: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff050: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff060: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff070: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff080: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+Tags for short granules around the buggy address (one tag corresponds to 16 bytes):\n+  0xfefcefffeff0: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n+=>0xfefceffff000: ..  ..  8c  ..  .. [..] ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n+  0xfefceffff010: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n+See https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html#short-granules for a description of short granule tags\n+Registers where the failure occurred (pc 0xaaaae0ae4a98):\n+    x0  2c00efdeffff0050  x1  0000000000000004  x2  0000000000000004  x3  0000000000000000\n+    x4  0000fffefc30ac37  x5  000000000000005d  x6  00000ffffc30ac37  x7  0000efff00000000\n+    x8  2c00efdeffff0050  x9  0200efff00000000  x10 0000000000000000  x11 0200efff00000000\n+    x12 0200effe00000310  x13 0200effe00000310  x14 0000000000000008  x15 5d00ffffc30ac360\n+    x16 0000aaaae0ad062c  x17 0000000000000003  x18 0000000000000001  x19 0000ffffc30ac658\n+    x20 4e00ffffc30ac6e0  x21 0000aaaae0ac5e10  x22 0000000000000000  x23 0000000000000000\n+    x24 0000000000000000  x25 0000000000000000  x26 0000000000000000  x27 0000000000000000\n+    x28 0000000000000000  x29 0000ffffc30ac5a0  x30 0000aaaae0ae4a98\n+SUMMARY: HWAddressSanitizer: tag-mismatch (/.../main+0x54a94)\n+```\n+\n # LeakSanitizer\n \n LeakSanitizer is run-time memory leak detector.\n@@ -321,11 +404,13 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n \n * [Sanitizers project page](https://github.com/google/sanitizers/wiki/)\n * [AddressSanitizer in Clang][clang-asan]\n+* [HWAddressSanitizer in Clang][clang-hwasan]\n * [LeakSanitizer in Clang][clang-lsan]\n * [MemorySanitizer in Clang][clang-msan]\n * [ThreadSanitizer in Clang][clang-tsan]\n \n [clang-asan]: https://clang.llvm.org/docs/AddressSanitizer.html\n+[clang-hwasan]: https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html\n [clang-lsan]: https://clang.llvm.org/docs/LeakSanitizer.html\n [clang-msan]: https://clang.llvm.org/docs/MemorySanitizer.html\n [clang-tsan]: https://clang.llvm.org/docs/ThreadSanitizer.html"}, {"sha": "fb4774ae192466beb254ebd49921c7ed809341ba", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -546,9 +546,12 @@ crate fn make_test(\n     // compiler.\n     if !already_has_extern_crate && !opts.no_crate_inject && cratename != Some(\"std\") {\n         if let Some(cratename) = cratename {\n-            // Make sure its actually used if not included.\n+            // Don't inject `extern crate` if the crate is never used.\n+            // NOTE: this is terribly inaccurate because it doesn't actually\n+            // parse the source, but only has false positives, not false\n+            // negatives.\n             if s.contains(cratename) {\n-                prog.push_str(&format!(\"extern crate {};\\n\", cratename));\n+                prog.push_str(&format!(\"extern crate r#{};\\n\", cratename));\n                 line_offset += 1;\n             }\n         }"}, {"sha": "c49e45c0e25a0410797cbceca32165998e8b87d1", "filename": "src/librustdoc/doctest/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest%2Ftests.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -38,7 +38,7 @@ fn make_test_crate_name() {\n     let input = \"use asdf::qwop;\n assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n-extern crate asdf;\n+extern crate r#asdf;\n fn main() {\n use asdf::qwop;\n assert_eq!(2+2, 4);\n@@ -128,7 +128,7 @@ fn make_test_opts_attrs() {\n     let input = \"use asdf::qwop;\n assert_eq!(2+2, 4);\";\n     let expected = \"#![feature(sick_rad)]\n-extern crate asdf;\n+extern crate r#asdf;\n fn main() {\n use asdf::qwop;\n assert_eq!(2+2, 4);\n@@ -141,7 +141,7 @@ assert_eq!(2+2, 4);\n     opts.attrs.push(\"feature(hella_dope)\".to_string());\n     let expected = \"#![feature(sick_rad)]\n #![feature(hella_dope)]\n-extern crate asdf;\n+extern crate r#asdf;\n fn main() {\n use asdf::qwop;\n assert_eq!(2+2, 4);\n@@ -250,7 +250,7 @@ assert_eq!(asdf::foo, 4);\";\n \n     let expected = \"#![allow(unused)]\n extern crate hella_qwop;\n-extern crate asdf;\n+extern crate r#asdf;\n fn main() {\n assert_eq!(asdf::foo, 4);\n }\""}, {"sha": "dbe2297f81887128d921b68c5ce24cafaebdb5d4", "filename": "src/test/rustdoc/playground-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Frustdoc%2Fplayground-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Frustdoc%2Fplayground-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground-arg.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -11,4 +11,4 @@\n pub fn dummy() {}\n \n // ensure that `extern crate foo;` was inserted into code snips automatically:\n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://example.com/?code=%23!%5Ballow(unused)%5D%0Aextern%20crate%20foo%3B%0Afn%20main()%20%7B%0Ause%20foo%3A%3Adummy%3B%0Adummy()%3B%0A%7D&edition=2015\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://example.com/?code=%23!%5Ballow(unused)%5D%0Aextern%20crate%20r%23foo%3B%0Afn%20main()%20%7B%0Ause%20foo%3A%3Adummy%3B%0Adummy()%3B%0A%7D&edition=2015\"]' \"Run\""}, {"sha": "e8f2c71477a5fab5ce27c00d8216d441c7e1304c", "filename": "src/test/ui/array-slice-vec/vector-cast-weirdness.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-cast-weirdness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-cast-weirdness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-cast-weirdness.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -1,7 +1,11 @@\n // Issue #14893. Tests that casts from vectors don't behave strangely in the\n // presence of the `_` type shorthand notation.\n+//\n // Update: after a change to the way casts are done, we have more type information\n // around and so the errors here are no longer exactly the same.\n+//\n+// Update: With PR #81479 some of the previously rejected cases are now allowed.\n+// New test cases added.\n \n struct X {\n     y: [u8; 2],\n@@ -12,13 +16,19 @@ fn main() {\n \n     // No longer a type mismatch - the `_` can be fully resolved by type inference.\n     let p1: *const u8 = &x1.y as *const _;\n+    let p1: *mut u8 = &x1.y as *mut _;\n+    //~^ ERROR: casting `&[u8; 2]` as `*mut u8` is invalid\n     let t1: *const [u8; 2] = &x1.y as *const _;\n+    let t1: *mut [u8; 2] = &x1.y as *mut _;\n+    //~^ ERROR: casting `&[u8; 2]` as `*mut [u8; 2]` is invalid\n     let h1: *const [u8; 2] = &x1.y as *const [u8; 2];\n+    let t1: *mut [u8; 2] = &x1.y as *mut [u8; 2];\n+    //~^ ERROR: casting `&[u8; 2]` as `*mut [u8; 2]` is invalid\n \n     let mut x1 = X { y: [0, 0] };\n \n-    // This is still an error since we don't allow casts from &mut [T; n] to *mut T.\n-    let p1: *mut u8 = &mut x1.y as *mut _;  //~ ERROR casting\n+    let p1: *mut u8 = &mut x1.y as *mut _;\n+    let p2: *const u8 = &mut x1.y as *const _;\n     let t1: *mut [u8; 2] = &mut x1.y as *mut _;\n     let h1: *mut [u8; 2] = &mut x1.y as *mut [u8; 2];\n }"}, {"sha": "6fdb1ac9e3059bb26d1dd77d2a08d23d50622726", "filename": "src/test/ui/array-slice-vec/vector-cast-weirdness.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-cast-weirdness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-cast-weirdness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-cast-weirdness.stderr?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -1,9 +1,21 @@\n-error[E0606]: casting `&mut [u8; 2]` as `*mut u8` is invalid\n-  --> $DIR/vector-cast-weirdness.rs:21:23\n+error[E0606]: casting `&[u8; 2]` as `*mut u8` is invalid\n+  --> $DIR/vector-cast-weirdness.rs:19:23\n    |\n-LL |     let p1: *mut u8 = &mut x1.y as *mut _;\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+LL |     let p1: *mut u8 = &x1.y as *mut _;\n+   |                       ^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0606]: casting `&[u8; 2]` as `*mut [u8; 2]` is invalid\n+  --> $DIR/vector-cast-weirdness.rs:22:28\n+   |\n+LL |     let t1: *mut [u8; 2] = &x1.y as *mut _;\n+   |                            ^^^^^^^^^^^^^^^\n+\n+error[E0606]: casting `&[u8; 2]` as `*mut [u8; 2]` is invalid\n+  --> $DIR/vector-cast-weirdness.rs:25:28\n+   |\n+LL |     let t1: *mut [u8; 2] = &x1.y as *mut [u8; 2];\n+   |                            ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0606`."}, {"sha": "ab33ef6f2442c4c0a9777c7967054e8677ef7e35", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -0,0 +1,22 @@\n+// run-pass\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// This test unsures that with_opt_const_param returns the\n+// def_id of the N param in the Foo::Assoc GAT.\n+\n+trait Foo {\n+    type Assoc<const N: usize>;\n+    fn foo(&self) -> Self::Assoc<3>;\n+}\n+\n+impl Foo for () {\n+    type Assoc<const N: usize> = [(); N];\n+    fn foo(&self) -> Self::Assoc<3> {\n+        [(); 3]\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(().foo(), [(); 3]);\n+}"}, {"sha": "ba9a82ae721092a9a9c94ed6a3bfc8af3e534bd1", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -0,0 +1,22 @@\n+// run-pass\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// This test unsures that with_opt_const_param returns the\n+// def_id of the N param in the Foo::Assoc GAT.\n+\n+trait Foo {\n+    type Assoc<const N: usize>;\n+    fn foo<const N: usize>(&self) -> Self::Assoc<N>;\n+}\n+\n+impl Foo for () {\n+    type Assoc<const N: usize> = [(); N];\n+    fn foo<const N: usize>(&self) -> Self::Assoc<N> {\n+        [(); N]\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(().foo::<10>(), [(); 10]);\n+}"}, {"sha": "9da5334056a37e9844abbde110073fc47a82874e", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -0,0 +1,27 @@\n+// run-pass\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// This test unsures that with_opt_const_param returns the\n+// def_id of the N param in the Bar::Assoc GAT.\n+\n+trait Bar {\n+    type Assoc<const N: usize>;\n+}\n+trait Foo: Bar {\n+    fn foo(&self) -> Self::Assoc<3>;\n+}\n+\n+impl Bar for () {\n+    type Assoc<const N: usize> = [(); N];\n+}\n+\n+impl Foo for () {\n+    fn foo(&self) -> Self::Assoc<3> {\n+        [(); 3]\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(().foo(), [(); 3]);\n+}"}, {"sha": "4c0b17c7d376979eb422c9f276f4ecbbaa03b2c2", "filename": "src/test/ui/invalid/invalid-no-sanitize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -4,7 +4,7 @@ error: invalid argument for `no_sanitize`\n LL | #[no_sanitize(brontosaurus)]\n    |               ^^^^^^^^^^^^\n    |\n-   = note: expected one of: `address`, `memory` or `thread`\n+   = note: expected one of: `address`, `hwaddress`, `memory` or `thread`\n \n error: aborting due to previous error\n "}, {"sha": "ad5d0245457ec9a65b789ff07564255ed63cda41", "filename": "src/test/ui/sanitize/hwaddress.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Fsanitize%2Fhwaddress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Fsanitize%2Fhwaddress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fhwaddress.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -0,0 +1,19 @@\n+// needs-sanitizer-support\n+// needs-sanitizer-hwaddress\n+//\n+// compile-flags: -Z sanitizer=hwaddress -O -g\n+//\n+// run-fail\n+// error-pattern: HWAddressSanitizer: tag-mismatch\n+\n+#![feature(test)]\n+\n+use std::hint::black_box;\n+\n+fn main() {\n+    let xs = vec![0, 1, 2, 3];\n+    // Avoid optimizing everything out.\n+    let xs = black_box(xs.as_ptr());\n+    let code = unsafe { *xs.offset(4) };\n+    std::process::exit(code);\n+}"}, {"sha": "ff0d845be937c7102c1eb3726b4e8fb032a1b244", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -48,6 +48,7 @@ impl EarlyProps {\n         let has_lsan = util::LSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n         let has_msan = util::MSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n         let has_tsan = util::TSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n+        let has_hwasan = util::HWASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n \n         iter_header(testfile, None, rdr, &mut |ln| {\n             // we should check if any only-<platform> exists and if it exists\n@@ -101,6 +102,10 @@ impl EarlyProps {\n                     props.ignore = true;\n                 }\n \n+                if !has_hwasan && config.parse_name_directive(ln, \"needs-sanitizer-hwaddress\") {\n+                    props.ignore = true;\n+                }\n+\n                 if config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln) {\n                     props.ignore = true;\n                 }"}, {"sha": "b302953708c18d879c75a0c576a4e5c930851964", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -110,6 +110,9 @@ pub const TSAN_SUPPORTED_TARGETS: &[&str] = &[\n     \"x86_64-unknown-linux-gnu\",\n ];\n \n+pub const HWASAN_SUPPORTED_TARGETS: &[&str] =\n+    &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n+\n const BIG_ENDIAN: &[&str] = &[\n     \"aarch64_be\",\n     \"armebv7r\","}]}