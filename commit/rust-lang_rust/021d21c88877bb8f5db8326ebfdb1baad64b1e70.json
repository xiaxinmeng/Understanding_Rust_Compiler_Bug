{"sha": "021d21c88877bb8f5db8326ebfdb1baad64b1e70", "node_id": "C_kwDOAAsO6NoAKDAyMWQyMWM4ODg3N2JiOGY1ZGI4MzI2ZWJmZGIxYmFhZDY0YjFlNzA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-29T04:58:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-29T04:58:23Z"}, "message": "Rollup merge of #98549 - RalfJung:interpret-stacktraces, r=oli-obk\n\ninterpret: do not prune requires_caller_location stack frames quite so early\n\nhttps://github.com/rust-lang/rust/pull/87000 made the interpreter skip `caller_location` frames for its stacktraces and `cur_span`. However, those functions are used for much more than just panic reporting, and e.g. when Miri reports UB somewhere, it probably wants to point inside `caller_location` frames. (And if it did not, it would want to have its own logic to decide that, not be forced into it by the core interpreter engine.) This fixes some rare ICEs in Miri that say \"we should never pop more than one frame at once\".\n\nSo let's remove all `caller_location` logic from the core interpreter, and instead move it to CTFE error reporting. This does not change user-visible behavior. That's the first commit.\n\nWe might additionally want to change CTFE error reporting to treat panics differently from other errors: only prune `caller_location` frames for panics. The second commit does that. But honestly I am not sure if this is an improvement.\n\nr? ``@oli-obk``", "tree": {"sha": "8f771af4019503b233c959d674df90929c23c353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f771af4019503b233c959d674df90929c23c353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/021d21c88877bb8f5db8326ebfdb1baad64b1e70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiu9vvCRBK7hj4Ov3rIwAAGf4IAKOb4sPNo5c90QazzWMWGQZP\n95i2Y5xHVht5j0fgIGLlg+SrNqUDvZew70qP8gFVk9bNa0y0SEvVnUyvxERUNnG+\numKvyQXVb+cMEa6fdDqycByvnragag2TvFiIaKawL3Lv6lC2At0iIUAUSJIhre8d\nciYLSoArduMCBVEeioJqsMM+z9dtbdNYYsy7//Ow/u0UaE6IZKz79PeV3QugOwV2\nz8wq6CjvCUs2JLYLxYECmHTpTjLiyxzKinpy4Jqf3xjB2vv0PLGNA423S4y/XOSS\nRMl3q2UJ+jONjtFJGQFUhtxqiesr+REJu9VCER/SlA0VxytP3JimznIh1y87agM=\n=F3nR\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f771af4019503b233c959d674df90929c23c353\nparent b8bb6f9a4bdd246891758612c98c5a11d5aad76b\nparent 852a111133c86b24b190d6f9b5e19f8864e954a2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1656478703 +0530\ncommitter GitHub <noreply@github.com> 1656478703 +0530\n\nRollup merge of #98549 - RalfJung:interpret-stacktraces, r=oli-obk\n\ninterpret: do not prune requires_caller_location stack frames quite so early\n\nhttps://github.com/rust-lang/rust/pull/87000 made the interpreter skip `caller_location` frames for its stacktraces and `cur_span`. However, those functions are used for much more than just panic reporting, and e.g. when Miri reports UB somewhere, it probably wants to point inside `caller_location` frames. (And if it did not, it would want to have its own logic to decide that, not be forced into it by the core interpreter engine.) This fixes some rare ICEs in Miri that say \"we should never pop more than one frame at once\".\n\nSo let's remove all `caller_location` logic from the core interpreter, and instead move it to CTFE error reporting. This does not change user-visible behavior. That's the first commit.\n\nWe might additionally want to change CTFE error reporting to treat panics differently from other errors: only prune `caller_location` frames for panics. The second commit does that. But honestly I am not sure if this is an improvement.\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/021d21c88877bb8f5db8326ebfdb1baad64b1e70", "html_url": "https://github.com/rust-lang/rust/commit/021d21c88877bb8f5db8326ebfdb1baad64b1e70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/021d21c88877bb8f5db8326ebfdb1baad64b1e70/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8bb6f9a4bdd246891758612c98c5a11d5aad76b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8bb6f9a4bdd246891758612c98c5a11d5aad76b", "html_url": "https://github.com/rust-lang/rust/commit/b8bb6f9a4bdd246891758612c98c5a11d5aad76b"}, {"sha": "852a111133c86b24b190d6f9b5e19f8864e954a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/852a111133c86b24b190d6f9b5e19f8864e954a2", "html_url": "https://github.com/rust-lang/rust/commit/852a111133c86b24b190d6f9b5e19f8864e954a2"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "eb81f43c3fe8cbafa2b3b9fa1f70e40594b88904", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/021d21c88877bb8f5db8326ebfdb1baad64b1e70/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021d21c88877bb8f5db8326ebfdb1baad64b1e70/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=021d21c88877bb8f5db8326ebfdb1baad64b1e70", "patch": "@@ -82,12 +82,12 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         'tcx: 'mir,\n     {\n         error.print_backtrace();\n-        let stacktrace = ecx.generate_stacktrace();\n-        ConstEvalErr {\n-            error: error.into_kind(),\n-            stacktrace,\n-            span: span.unwrap_or_else(|| ecx.cur_span()),\n-        }\n+        let mut stacktrace = ecx.generate_stacktrace();\n+        // Filter out `requires_caller_location` frames.\n+        stacktrace.retain(|frame| !frame.instance.def.requires_caller_location(*ecx.tcx));\n+        // If `span` is missing, use topmost remaining frame, or else the \"root\" span from `ecx.tcx`.\n+        let span = span.or_else(|| stacktrace.first().map(|f| f.span)).unwrap_or(ecx.tcx.span);\n+        ConstEvalErr { error: error.into_kind(), stacktrace, span }\n     }\n \n     pub fn struct_error("}, {"sha": "09a2977af04033b6e2559c38f7d0a575e9077d75", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021d21c88877bb8f5db8326ebfdb1baad64b1e70/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021d21c88877bb8f5db8326ebfdb1baad64b1e70/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=021d21c88877bb8f5db8326ebfdb1baad64b1e70", "patch": "@@ -337,7 +337,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                     }\n                 };\n \n-                Err(err.report_as_error(ecx.tcx.at(ecx.cur_span()), &msg))\n+                Err(err.report_as_error(ecx.tcx.at(err.span), &msg))\n             } else {\n                 let hir_id = tcx.hir().local_def_id_to_hir_id(def.as_local().unwrap().did);\n                 Err(err.report_as_lint("}, {"sha": "66c736245017c5397775201dd6829d2285074a29", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/021d21c88877bb8f5db8326ebfdb1baad64b1e70/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021d21c88877bb8f5db8326ebfdb1baad64b1e70/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=021d21c88877bb8f5db8326ebfdb1baad64b1e70", "patch": "@@ -428,11 +428,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     #[inline(always)]\n     pub fn cur_span(&self) -> Span {\n-        self.stack()\n-            .iter()\n-            .rev()\n-            .find(|frame| !frame.instance.def.requires_caller_location(*self.tcx))\n-            .map_or(self.tcx.span, |f| f.current_span())\n+        // This deliberately does *not* honor `requires_caller_location` since it is used for much\n+        // more than just panics.\n+        self.stack().last().map_or(self.tcx.span, |f| f.current_span())\n     }\n \n     #[inline(always)]\n@@ -939,12 +937,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     #[must_use]\n     pub fn generate_stacktrace(&self) -> Vec<FrameInfo<'tcx>> {\n         let mut frames = Vec::new();\n-        for frame in self\n-            .stack()\n-            .iter()\n-            .rev()\n-            .skip_while(|frame| frame.instance.def.requires_caller_location(*self.tcx))\n-        {\n+        // This deliberately does *not* honor `requires_caller_location` since it is used for much\n+        // more than just panics.\n+        for frame in self.stack().iter().rev() {\n             let lint_root = frame.current_source_info().and_then(|source_info| {\n                 match &frame.body.source_scopes[source_info.scope].local_data {\n                     mir::ClearCrossCrate::Set(data) => Some(data.lint_root),"}]}