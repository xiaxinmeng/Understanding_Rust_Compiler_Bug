{"sha": "42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "node_id": "C_kwDOAAsO6NoAKDQyY2Y5ODU1M2E3MmY0YjZjZGFjMmM0YzYzNzgxMjFkMzBmM2JmNWY", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-04T12:20:41Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-04T12:28:14Z"}, "message": "refactor: check copied and cloned", "tree": {"sha": "6c26226af3357c70512fddfdb2d10d797c55f0ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c26226af3357c70512fddfdb2d10d797c55f0ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "html_url": "https://github.com/rust-lang/rust/commit/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "html_url": "https://github.com/rust-lang/rust/commit/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8"}], "stats": {"total": 364, "additions": 227, "deletions": 137}, "files": [{"sha": "7127d8242d810f65cf2b9d96edefa1db8e07728d", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "patch": "@@ -181,9 +181,11 @@ pub(super) fn check<'tcx>(\n }\n \n fn acceptable_methods(method: &PathSegment<'_>) -> bool {\n-    let methods: [Symbol; 6] = [\n+    let methods: [Symbol; 8] = [\n         sym::clone,\n         sym::as_ref,\n+        sym!(copied),\n+        sym!(cloned),\n         sym!(as_deref),\n         sym!(as_mut),\n         sym!(as_deref_mut),"}, {"sha": "de0d86148899d4c7be1220c597291729cec6de4a", "filename": "tests/ui/manual_filter_map.fixed", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/tests%2Fui%2Fmanual_filter_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/tests%2Fui%2Fmanual_filter_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.fixed?ref=42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "patch": "@@ -36,44 +36,52 @@ fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n \n-struct OptionFoo {\n-    field: Option<String>,\n-}\n-\n-struct ResultFoo {\n-    field: Result<String, ()>,\n+struct Issue8920<'a> {\n+    option_field: Option<String>,\n+    result_field: Result<String, ()>,\n+    ref_field: Option<&'a usize>,\n }\n \n fn issue_8920() {\n-    let vec = vec![OptionFoo {\n-        field: Some(String::from(\"str\")),\n+    let mut vec = vec![Issue8920 {\n+        option_field: Some(String::from(\"str\")),\n+        result_field: Ok(String::from(\"str\")),\n+        ref_field: Some(&1),\n     }];\n+\n     let _ = vec\n         .iter()\n-        .filter_map(|f| f.field.clone());\n+        .filter_map(|f| f.option_field.clone());\n \n-    let mut vec = vec![ResultFoo {\n-        field: Ok(String::from(\"str\")),\n-    }];\n-    let _ = vec.iter().filter_map(|f| f.field.clone().ok());\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.ref_field.cloned());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.ref_field.copied());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.result_field.clone().ok());\n \n     let _ = vec\n         .iter()\n-        .filter_map(|f| f.field.as_ref().ok());\n+        .filter_map(|f| f.result_field.as_ref().ok());\n \n     let _ = vec\n         .iter()\n-        .filter_map(|f| f.field.as_deref().ok());\n+        .filter_map(|f| f.result_field.as_deref().ok());\n \n     let _ = vec\n         .iter_mut()\n-        .filter_map(|f| f.field.as_mut().ok());\n+        .filter_map(|f| f.result_field.as_mut().ok());\n \n     let _ = vec\n         .iter_mut()\n-        .filter_map(|f| f.field.as_deref_mut().ok());\n+        .filter_map(|f| f.result_field.as_deref_mut().ok());\n \n     let _ = vec\n         .iter()\n-        .filter_map(|f| f.field.to_owned().ok());\n+        .filter_map(|f| f.result_field.to_owned().ok());\n }"}, {"sha": "bd6516f038b29f90e986931fea796df0c45d2ad1", "filename": "tests/ui/manual_filter_map.rs", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/tests%2Fui%2Fmanual_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/tests%2Fui%2Fmanual_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.rs?ref=42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "patch": "@@ -36,50 +36,61 @@ fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n \n-struct OptionFoo {\n-    field: Option<String>,\n-}\n-\n-struct ResultFoo {\n-    field: Result<String, ()>,\n+struct Issue8920<'a> {\n+    option_field: Option<String>,\n+    result_field: Result<String, ()>,\n+    ref_field: Option<&'a usize>,\n }\n \n fn issue_8920() {\n-    let vec = vec![OptionFoo {\n-        field: Some(String::from(\"str\")),\n+    let mut vec = vec![Issue8920 {\n+        option_field: Some(String::from(\"str\")),\n+        result_field: Ok(String::from(\"str\")),\n+        ref_field: Some(&1),\n     }];\n+\n     let _ = vec\n         .iter()\n-        .filter(|f| f.field.is_some())\n-        .map(|f| f.field.clone().unwrap());\n+        .filter(|f| f.option_field.is_some())\n+        .map(|f| f.option_field.clone().unwrap());\n \n-    let mut vec = vec![ResultFoo {\n-        field: Ok(String::from(\"str\")),\n-    }];\n-    let _ = vec.iter().filter(|f| f.field.is_ok()).map(|f| f.field.clone().unwrap());\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.ref_field.is_some())\n+        .map(|f| f.ref_field.cloned().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.ref_field.is_some())\n+        .map(|f| f.ref_field.copied().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.clone().unwrap());\n \n     let _ = vec\n         .iter()\n-        .filter(|f| f.field.is_ok())\n-        .map(|f| f.field.as_ref().unwrap());\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_ref().unwrap());\n \n     let _ = vec\n         .iter()\n-        .filter(|f| f.field.is_ok())\n-        .map(|f| f.field.as_deref().unwrap());\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_deref().unwrap());\n \n     let _ = vec\n         .iter_mut()\n-        .filter(|f| f.field.is_ok())\n-        .map(|f| f.field.as_mut().unwrap());\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_mut().unwrap());\n \n     let _ = vec\n         .iter_mut()\n-        .filter(|f| f.field.is_ok())\n-        .map(|f| f.field.as_deref_mut().unwrap());\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_deref_mut().unwrap());\n \n     let _ = vec\n         .iter()\n-        .filter(|f| f.field.is_ok())\n-        .map(|f| f.field.to_owned().unwrap());\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.to_owned().unwrap());\n }"}, {"sha": "465f1b1911017bed9e51509b6a46cac40c3ee744", "filename": "tests/ui/manual_filter_map.stderr", "status": "modified", "additions": 46, "deletions": 28, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/tests%2Fui%2Fmanual_filter_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/tests%2Fui%2Fmanual_filter_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.stderr?ref=42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "patch": "@@ -19,58 +19,76 @@ LL |     let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_o\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_res(a).ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:53:10\n+  --> $DIR/manual_filter_map.rs:54:10\n    |\n-LL |           .filter(|f| f.field.is_some())\n+LL |           .filter(|f| f.option_field.is_some())\n    |  __________^\n-LL | |         .map(|f| f.field.clone().unwrap());\n-   | |__________________________________________^ help: try: `filter_map(|f| f.field.clone())`\n+LL | |         .map(|f| f.option_field.clone().unwrap());\n+   | |_________________________________________________^ help: try: `filter_map(|f| f.option_field.clone())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:59:24\n+  --> $DIR/manual_filter_map.rs:59:10\n    |\n-LL |     let _ = vec.iter().filter(|f| f.field.is_ok()).map(|f| f.field.clone().unwrap());\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|f| f.field.clone().ok())`\n+LL |           .filter(|f| f.ref_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.ref_field.cloned().unwrap());\n+   | |_______________________________________________^ help: try: `filter_map(|f| f.ref_field.cloned())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:64:10\n+   |\n+LL |           .filter(|f| f.ref_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.ref_field.copied().unwrap());\n+   | |_______________________________________________^ help: try: `filter_map(|f| f.ref_field.copied())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:69:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.clone().unwrap());\n+   | |_________________________________________________^ help: try: `filter_map(|f| f.result_field.clone().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:63:10\n+  --> $DIR/manual_filter_map.rs:74:10\n    |\n-LL |           .filter(|f| f.field.is_ok())\n+LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n-LL | |         .map(|f| f.field.as_ref().unwrap());\n-   | |___________________________________________^ help: try: `filter_map(|f| f.field.as_ref().ok())`\n+LL | |         .map(|f| f.result_field.as_ref().unwrap());\n+   | |__________________________________________________^ help: try: `filter_map(|f| f.result_field.as_ref().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:68:10\n+  --> $DIR/manual_filter_map.rs:79:10\n    |\n-LL |           .filter(|f| f.field.is_ok())\n+LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n-LL | |         .map(|f| f.field.as_deref().unwrap());\n-   | |_____________________________________________^ help: try: `filter_map(|f| f.field.as_deref().ok())`\n+LL | |         .map(|f| f.result_field.as_deref().unwrap());\n+   | |____________________________________________________^ help: try: `filter_map(|f| f.result_field.as_deref().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:73:10\n+  --> $DIR/manual_filter_map.rs:84:10\n    |\n-LL |           .filter(|f| f.field.is_ok())\n+LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n-LL | |         .map(|f| f.field.as_mut().unwrap());\n-   | |___________________________________________^ help: try: `filter_map(|f| f.field.as_mut().ok())`\n+LL | |         .map(|f| f.result_field.as_mut().unwrap());\n+   | |__________________________________________________^ help: try: `filter_map(|f| f.result_field.as_mut().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:78:10\n+  --> $DIR/manual_filter_map.rs:89:10\n    |\n-LL |           .filter(|f| f.field.is_ok())\n+LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n-LL | |         .map(|f| f.field.as_deref_mut().unwrap());\n-   | |_________________________________________________^ help: try: `filter_map(|f| f.field.as_deref_mut().ok())`\n+LL | |         .map(|f| f.result_field.as_deref_mut().unwrap());\n+   | |________________________________________________________^ help: try: `filter_map(|f| f.result_field.as_deref_mut().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:83:10\n+  --> $DIR/manual_filter_map.rs:94:10\n    |\n-LL |           .filter(|f| f.field.is_ok())\n+LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n-LL | |         .map(|f| f.field.to_owned().unwrap());\n-   | |_____________________________________________^ help: try: `filter_map(|f| f.field.to_owned().ok())`\n+LL | |         .map(|f| f.result_field.to_owned().unwrap());\n+   | |____________________________________________________^ help: try: `filter_map(|f| f.result_field.to_owned().ok())`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "d69b6c1dcf3bb7b5ba84cac8d1e9fab1d0fef668", "filename": "tests/ui/manual_find_map.fixed", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/tests%2Fui%2Fmanual_find_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/tests%2Fui%2Fmanual_find_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.fixed?ref=42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "patch": "@@ -36,40 +36,52 @@ fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n \n-struct OptionFoo {\n-    field: Option<String>,\n-}\n-\n-struct ResultFoo {\n-    field: Result<String, ()>,\n+struct Issue8920<'a> {\n+    option_field: Option<String>,\n+    result_field: Result<String, ()>,\n+    ref_field: Option<&'a usize>,\n }\n \n fn issue_8920() {\n-    let vec = vec![OptionFoo {\n-        field: Some(String::from(\"str\")),\n+    let mut vec = vec![Issue8920 {\n+        option_field: Some(String::from(\"str\")),\n+        result_field: Ok(String::from(\"str\")),\n+        ref_field: Some(&1),\n     }];\n-    let _ = vec.iter().find_map(|f| f.field.clone());\n \n-    let mut vec = vec![ResultFoo {\n-        field: Ok(String::from(\"str\")),\n-    }];\n-    let _ = vec.iter().find_map(|f| f.field.clone().ok());\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.option_field.clone());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.ref_field.cloned());\n \n-    let _ = vec.iter().find_map(|f| f.field.as_ref().ok());\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.ref_field.copied());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.result_field.clone().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.result_field.as_ref().ok());\n \n     let _ = vec\n         .iter()\n-        .find_map(|f| f.field.as_deref().ok());\n+        .find_map(|f| f.result_field.as_deref().ok());\n \n     let _ = vec\n         .iter_mut()\n-        .find_map(|f| f.field.as_mut().ok());\n+        .find_map(|f| f.result_field.as_mut().ok());\n \n     let _ = vec\n         .iter_mut()\n-        .find_map(|f| f.field.as_deref_mut().ok());\n+        .find_map(|f| f.result_field.as_deref_mut().ok());\n \n     let _ = vec\n         .iter()\n-        .find_map(|f| f.field.to_owned().ok());\n+        .find_map(|f| f.result_field.to_owned().ok());\n }"}, {"sha": "1c4e18e31c8b1883fef79057675513ec717ff79a", "filename": "tests/ui/manual_find_map.rs", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/tests%2Fui%2Fmanual_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/tests%2Fui%2Fmanual_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.rs?ref=42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "patch": "@@ -36,44 +36,61 @@ fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n \n-struct OptionFoo {\n-    field: Option<String>,\n-}\n-\n-struct ResultFoo {\n-    field: Result<String, ()>,\n+struct Issue8920<'a> {\n+    option_field: Option<String>,\n+    result_field: Result<String, ()>,\n+    ref_field: Option<&'a usize>,\n }\n \n fn issue_8920() {\n-    let vec = vec![OptionFoo {\n-        field: Some(String::from(\"str\")),\n+    let mut vec = vec![Issue8920 {\n+        option_field: Some(String::from(\"str\")),\n+        result_field: Ok(String::from(\"str\")),\n+        ref_field: Some(&1),\n     }];\n-    let _ = vec.iter().find(|f| f.field.is_some()).map(|f| f.field.clone().unwrap());\n \n-    let mut vec = vec![ResultFoo {\n-        field: Ok(String::from(\"str\")),\n-    }];\n-    let _ = vec.iter().find(|f| f.field.is_ok()).map(|f| f.field.clone().unwrap());\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.option_field.is_some())\n+        .map(|f| f.option_field.clone().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.ref_field.is_some())\n+        .map(|f| f.ref_field.cloned().unwrap());\n \n-    let _ = vec.iter().find(|f| f.field.is_ok()).map(|f| f.field.as_ref().unwrap());\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.ref_field.is_some())\n+        .map(|f| f.ref_field.copied().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.clone().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_ref().unwrap());\n \n     let _ = vec\n         .iter()\n-        .find(|f| f.field.is_ok())\n-        .map(|f| f.field.as_deref().unwrap());\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_deref().unwrap());\n \n     let _ = vec\n         .iter_mut()\n-        .find(|f| f.field.is_ok())\n-        .map(|f| f.field.as_mut().unwrap());\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_mut().unwrap());\n \n     let _ = vec\n         .iter_mut()\n-        .find(|f| f.field.is_ok())\n-        .map(|f| f.field.as_deref_mut().unwrap());\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_deref_mut().unwrap());\n \n     let _ = vec\n         .iter()\n-        .find(|f| f.field.is_ok())\n-        .map(|f| f.field.to_owned().unwrap());\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.to_owned().unwrap());\n }"}, {"sha": "9dea42b76868b7d838338d55767aeef8da541a5d", "filename": "tests/ui/manual_find_map.stderr", "status": "modified", "additions": 48, "deletions": 26, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/tests%2Fui%2Fmanual_find_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f/tests%2Fui%2Fmanual_find_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.stderr?ref=42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "patch": "@@ -19,54 +19,76 @@ LL |     let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_res(a).ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:51:24\n+  --> $DIR/manual_find_map.rs:54:10\n    |\n-LL |     let _ = vec.iter().find(|f| f.field.is_some()).map(|f| f.field.clone().unwrap());\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|f| f.field.clone())`\n+LL |           .find(|f| f.option_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.option_field.clone().unwrap());\n+   | |_________________________________________________^ help: try: `find_map(|f| f.option_field.clone())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:59:10\n+   |\n+LL |           .find(|f| f.ref_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.ref_field.cloned().unwrap());\n+   | |_______________________________________________^ help: try: `find_map(|f| f.ref_field.cloned())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:56:24\n+  --> $DIR/manual_find_map.rs:64:10\n    |\n-LL |     let _ = vec.iter().find(|f| f.field.is_ok()).map(|f| f.field.clone().unwrap());\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|f| f.field.clone().ok())`\n+LL |           .find(|f| f.ref_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.ref_field.copied().unwrap());\n+   | |_______________________________________________^ help: try: `find_map(|f| f.ref_field.copied())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:58:24\n+  --> $DIR/manual_find_map.rs:69:10\n    |\n-LL |     let _ = vec.iter().find(|f| f.field.is_ok()).map(|f| f.field.as_ref().unwrap());\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|f| f.field.as_ref().ok())`\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.clone().unwrap());\n+   | |_________________________________________________^ help: try: `find_map(|f| f.result_field.clone().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:74:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_ref().unwrap());\n+   | |__________________________________________________^ help: try: `find_map(|f| f.result_field.as_ref().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:62:10\n+  --> $DIR/manual_find_map.rs:79:10\n    |\n-LL |           .find(|f| f.field.is_ok())\n+LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n-LL | |         .map(|f| f.field.as_deref().unwrap());\n-   | |_____________________________________________^ help: try: `find_map(|f| f.field.as_deref().ok())`\n+LL | |         .map(|f| f.result_field.as_deref().unwrap());\n+   | |____________________________________________________^ help: try: `find_map(|f| f.result_field.as_deref().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:67:10\n+  --> $DIR/manual_find_map.rs:84:10\n    |\n-LL |           .find(|f| f.field.is_ok())\n+LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n-LL | |         .map(|f| f.field.as_mut().unwrap());\n-   | |___________________________________________^ help: try: `find_map(|f| f.field.as_mut().ok())`\n+LL | |         .map(|f| f.result_field.as_mut().unwrap());\n+   | |__________________________________________________^ help: try: `find_map(|f| f.result_field.as_mut().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:72:10\n+  --> $DIR/manual_find_map.rs:89:10\n    |\n-LL |           .find(|f| f.field.is_ok())\n+LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n-LL | |         .map(|f| f.field.as_deref_mut().unwrap());\n-   | |_________________________________________________^ help: try: `find_map(|f| f.field.as_deref_mut().ok())`\n+LL | |         .map(|f| f.result_field.as_deref_mut().unwrap());\n+   | |________________________________________________________^ help: try: `find_map(|f| f.result_field.as_deref_mut().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:77:10\n+  --> $DIR/manual_find_map.rs:94:10\n    |\n-LL |           .find(|f| f.field.is_ok())\n+LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n-LL | |         .map(|f| f.field.to_owned().unwrap());\n-   | |_____________________________________________^ help: try: `find_map(|f| f.field.to_owned().ok())`\n+LL | |         .map(|f| f.result_field.to_owned().unwrap());\n+   | |____________________________________________________^ help: try: `find_map(|f| f.result_field.to_owned().ok())`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 12 previous errors\n "}]}