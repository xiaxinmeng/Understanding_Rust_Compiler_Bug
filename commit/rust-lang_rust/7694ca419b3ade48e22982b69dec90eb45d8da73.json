{"sha": "7694ca419b3ade48e22982b69dec90eb45d8da73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OTRjYTQxOWIzYWRlNDhlMjI5ODJiNjlkZWM5MGViNDVkOGRhNzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-23T04:34:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-28T14:45:50Z"}, "message": "Update to the `cc` crate\n\nThis is the name the `gcc` crate has moved to", "tree": {"sha": "6d6042991fef7c098f7b2ee773d5aacb66de2851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d6042991fef7c098f7b2ee773d5aacb66de2851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7694ca419b3ade48e22982b69dec90eb45d8da73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7694ca419b3ade48e22982b69dec90eb45d8da73", "html_url": "https://github.com/rust-lang/rust/commit/7694ca419b3ade48e22982b69dec90eb45d8da73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7694ca419b3ade48e22982b69dec90eb45d8da73/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "041d3550f6d963144722094edfccb3e4e3b74114", "url": "https://api.github.com/repos/rust-lang/rust/commits/041d3550f6d963144722094edfccb3e4e3b74114", "html_url": "https://github.com/rust-lang/rust/commit/041d3550f6d963144722094edfccb3e4e3b74114"}], "stats": {"total": 123, "additions": 66, "deletions": 57}, "files": [{"sha": "c77be5154d3dbad794948d7589455e9fa990062a", "filename": "src/Cargo.lock", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -42,8 +42,8 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n+ \"cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n- \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n ]\n \n@@ -136,9 +136,9 @@ name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n+ \"cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cmake 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1221,8 +1221,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"profiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n+ \"cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n- \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1628,7 +1628,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_cratesio_shim 0.0.0\",\n ]\n \n@@ -1759,8 +1759,8 @@ name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1786,7 +1786,7 @@ name = \"rustc_trans_utils\"\n version = \"0.0.0\"\n dependencies = [\n  \"ar 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -1828,8 +1828,8 @@ name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n+ \"cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"html-diff 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1998,10 +1998,10 @@ dependencies = [\n  \"alloc_jemalloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n+ \"cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n@@ -2320,6 +2320,10 @@ name = \"unicode-xid\"\n version = \"0.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unic\u00f8d\u00eb\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"unreachable\"\n version = \"0.1.1\""}, {"sha": "f4b4189e01f06a17d489b580ecae03064f91bf7d", "filename": "src/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -38,6 +38,7 @@ members = [\n   \"tools/rls/test_data/infer_custom_bin\",\n   \"tools/rls/test_data/infer_lib\",\n   \"tools/rls/test_data/omit_init_build\",\n+  \"tools/rls/test_data/unic\u00f8d\u00eb\",\n   \"tools/rls/test_data/workspace_symbol\",\n ]\n "}, {"sha": "3f1d03b187203d220a7fc26bc312460b121ceee9", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -34,7 +34,7 @@ cmake = \"0.1.23\"\n filetime = \"0.1\"\n num_cpus = \"1.0\"\n getopts = \"0.2\"\n-gcc = \"0.3.54\"\n+cc = \"1.0\"\n libc = \"0.2\"\n serde = \"1.0.8\"\n serde_derive = \"1.0.8\""}, {"sha": "8584014d48d5f5ff62161514bfab9bddf772ebad", "filename": "src/bootstrap/bin/sccache-plus-cl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate gcc;\n+extern crate cc;\n \n use std::env;\n use std::process::{self, Command};\n@@ -18,7 +18,7 @@ fn main() {\n     // Locate the actual compiler that we're invoking\n     env::remove_var(\"CC\");\n     env::remove_var(\"CXX\");\n-    let mut cfg = gcc::Build::new();\n+    let mut cfg = cc::Build::new();\n     cfg.cargo_metadata(false)\n        .out_dir(\"/\")\n        .target(&target)"}, {"sha": "08df65c7611821bce454586aa9f72a6244df3b39", "filename": "src/bootstrap/cc_detect.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -23,7 +23,7 @@\n //! 6. \"cc\"\n //!\n //! Some of this logic is implemented here, but much of it is farmed out to the\n-//! `gcc` crate itself, so we end up having the same fallbacks as there.\n+//! `cc` crate itself, so we end up having the same fallbacks as there.\n //! Similar logic is then used to find a C++ compiler, just some s/cc/c++/ is\n //! used.\n //!\n@@ -35,7 +35,7 @@ use std::process::Command;\n use std::iter;\n \n use build_helper::{cc2ar, output};\n-use gcc;\n+use cc;\n \n use Build;\n use config::Target;\n@@ -45,7 +45,7 @@ pub fn find(build: &mut Build) {\n     // For all targets we're going to need a C compiler for building some shims\n     // and such as well as for being a linker for Rust code.\n     for target in build.targets.iter().chain(&build.hosts).cloned().chain(iter::once(build.build)) {\n-        let mut cfg = gcc::Build::new();\n+        let mut cfg = cc::Build::new();\n         cfg.cargo_metadata(false).opt_level(0).warnings(false).debug(false)\n            .target(&target).host(&build.build);\n \n@@ -67,7 +67,7 @@ pub fn find(build: &mut Build) {\n \n     // For all host triples we need to find a C++ compiler as well\n     for host in build.hosts.iter().cloned().chain(iter::once(build.build)) {\n-        let mut cfg = gcc::Build::new();\n+        let mut cfg = cc::Build::new();\n         cfg.cargo_metadata(false).opt_level(0).warnings(false).debug(false).cpp(true)\n            .target(&host).host(&build.build);\n         let config = build.config.target_config.get(&host);\n@@ -82,7 +82,7 @@ pub fn find(build: &mut Build) {\n     }\n }\n \n-fn set_compiler(cfg: &mut gcc::Build,\n+fn set_compiler(cfg: &mut cc::Build,\n                 gnu_compiler: &str,\n                 target: Interned<String>,\n                 config: Option<&Target>,", "previous_filename": "src/bootstrap/cc.rs"}, {"sha": "83aa08366df7dfd6b28eef180fa25af180ccaa32", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -126,7 +126,7 @@ extern crate lazy_static;\n extern crate serde_json;\n extern crate cmake;\n extern crate filetime;\n-extern crate gcc;\n+extern crate cc;\n extern crate getopts;\n extern crate num_cpus;\n extern crate toml;\n@@ -148,7 +148,7 @@ use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppresse\n \n use util::{exe, libdir, OutputFolder, CiEnv};\n \n-mod cc;\n+mod cc_detect;\n mod channel;\n mod check;\n mod clean;\n@@ -241,9 +241,9 @@ pub struct Build {\n \n     // Runtime state filled in later on\n     // target -> (cc, ar)\n-    cc: HashMap<Interned<String>, (gcc::Tool, Option<PathBuf>)>,\n+    cc: HashMap<Interned<String>, (cc::Tool, Option<PathBuf>)>,\n     // host -> (cc, ar)\n-    cxx: HashMap<Interned<String>, gcc::Tool>,\n+    cxx: HashMap<Interned<String>, cc::Tool>,\n     crates: HashMap<Interned<String>, Crate>,\n     is_sudo: bool,\n     ci_env: CiEnv,\n@@ -350,7 +350,7 @@ impl Build {\n         }\n \n         self.verbose(\"finding compilers\");\n-        cc::find(self);\n+        cc_detect::find(self);\n         self.verbose(\"running sanity check\");\n         sanity::check(self);\n         // If local-rust is the same major.minor as the current version, then force a local-rebuild\n@@ -619,7 +619,7 @@ impl Build {\n     /// specified.\n     fn cflags(&self, target: Interned<String>) -> Vec<String> {\n         // Filter out -O and /O (the optimization flags) that we picked up from\n-        // gcc-rs because the build scripts will determine that for themselves.\n+        // cc-rs because the build scripts will determine that for themselves.\n         let mut base = self.cc[&target].0.args().iter()\n                            .map(|s| s.to_string_lossy().into_owned())\n                            .filter(|s| !s.starts_with(\"-O\") && !s.starts_with(\"/O\"))"}, {"sha": "29376ff25e4afea8eeda1ae06ea32d63dd266967", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -27,7 +27,7 @@ use std::process::Command;\n \n use build_helper::output;\n use cmake;\n-use gcc;\n+use cc;\n \n use Build;\n use util;\n@@ -289,7 +289,7 @@ impl Step for TestHelpers {\n         let _folder = build.fold_output(|| \"build_test_helpers\");\n         println!(\"Building test helpers\");\n         t!(fs::create_dir_all(&dst));\n-        let mut cfg = gcc::Build::new();\n+        let mut cfg = cc::Build::new();\n \n         // We may have found various cross-compilers a little differently due to our\n         // extra configuration, so inform gcc of these compilers. Note, though, that"}, {"sha": "a05e58e6a22706a0ba355df8d3f716ffeb1ac9f6", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -126,6 +126,10 @@ pub fn prepare_tool_cargo(\n         cargo.env(\"LIBZ_SYS_STATIC\", \"1\");\n     }\n \n+    // if tools are using lzma we want to force the build script to build its\n+    // own copy\n+    cargo.env(\"LZMA_API_STATIC\", \"1\");\n+\n     cargo.env(\"CFG_RELEASE_CHANNEL\", &build.config.channel);\n     cargo.env(\"CFG_VERSION\", build.rust_version());\n "}, {"sha": "4042c4d2d4e02de3d31687758246ea9c7c26fea7", "filename": "src/liballoc_jemalloc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fliballoc_jemalloc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fliballoc_jemalloc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2FCargo.toml?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -19,7 +19,7 @@ libc = { path = \"../rustc/libc_shim\" }\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n-gcc = \"0.3.50\"\n+cc = \"1.0\"\n \n [features]\n debug = []"}, {"sha": "7dd85ddcc796595c521fd145439bb1d0afa158f6", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -11,7 +11,7 @@\n #![deny(warnings)]\n \n extern crate build_helper;\n-extern crate gcc;\n+extern crate cc;\n \n use std::env;\n use std::path::PathBuf;\n@@ -63,7 +63,7 @@ fn main() {\n         _ => return,\n     };\n \n-    let compiler = gcc::Build::new().get_compiler();\n+    let compiler = cc::Build::new().get_compiler();\n     // only msvc returns None for ar so unwrap is okay\n     let ar = build_helper::cc2ar(compiler.path(), &target).unwrap();\n     let cflags = compiler.args()\n@@ -150,7 +150,7 @@ fn main() {\n     // sure the symbols are available.\n     if target.contains(\"androideabi\") {\n         println!(\"cargo:rerun-if-changed=pthread_atfork_dummy.c\");\n-        gcc::Build::new()\n+        cc::Build::new()\n             .flag(\"-fvisibility=hidden\")\n             .file(\"pthread_atfork_dummy.c\")\n             .compile(\"libpthread_atfork_dummy.a\");"}, {"sha": "eb31f5730d191f5c8b2d7ff0aaa710fae3aced89", "filename": "src/libprofiler_builtins/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibprofiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibprofiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2FCargo.toml?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -15,4 +15,4 @@ doc = false\n core = { path = \"../libcore\" }\n \n [build-dependencies]\n-gcc = \"0.3.50\"\n+cc = \"1.0\""}, {"sha": "8508b2dae2c56db23189b501b74058f661484c9a", "filename": "src/libprofiler_builtins/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -12,14 +12,14 @@\n //!\n //! See the build.rs for libcompiler_builtins crate for details.\n \n-extern crate gcc;\n+extern crate cc;\n \n use std::env;\n use std::path::Path;\n \n fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n-    let cfg = &mut gcc::Build::new();\n+    let cfg = &mut cc::Build::new();\n \n     let mut profile_sources = vec![\"GCDAProfiling.c\",\n                                    \"InstrProfiling.c\","}, {"sha": "b1bf893cfd8be790669fc8efe140a92aaab7eced", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -1373,20 +1373,20 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n                                  always = always colorize output;\n                                  never  = never colorize output\", \"auto|always|never\"),\n \n-        opt::flagopt(\"\", \"pretty\",\n-                     \"Pretty-print the input instead of compiling;\n-                      valid types are: `normal` (un-annotated source),\n-                      `expanded` (crates expanded), or\n-                      `expanded,identified` (fully parenthesized, AST nodes with IDs).\",\n-                     \"TYPE\"),\n-        opt::flagopt(\"\", \"unpretty\",\n-                     \"Present the input source, unstable (and less-pretty) variants;\n-                      valid types are any of the types for `--pretty`, as well as:\n-                      `flowgraph=<nodeid>` (graphviz formatted flowgraph for node),\n-                      `everybody_loops` (all function bodies replaced with `loop {}`),\n-                      `hir` (the HIR), `hir,identified`, or\n-                      `hir,typed` (HIR with types for each node).\",\n-                     \"TYPE\"),\n+        opt::opt(\"\", \"pretty\",\n+                 \"Pretty-print the input instead of compiling;\n+                  valid types are: `normal` (un-annotated source),\n+                  `expanded` (crates expanded), or\n+                  `expanded,identified` (fully parenthesized, AST nodes with IDs).\",\n+                 \"TYPE\"),\n+        opt::opt(\"\", \"unpretty\",\n+                 \"Present the input source, unstable (and less-pretty) variants;\n+                  valid types are any of the types for `--pretty`, as well as:\n+                  `flowgraph=<nodeid>` (graphviz formatted flowgraph for node),\n+                  `everybody_loops` (all function bodies replaced with `loop {}`),\n+                  `hir` (the HIR), `hir,identified`, or\n+                  `hir,typed` (HIR with types for each node).\",\n+                 \"TYPE\"),\n     ]);\n     opts\n }"}, {"sha": "de5add56b761d1afb44d9b478c06044211a874f1", "filename": "src/librustc_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustc_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustc_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2FCargo.toml?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -18,4 +18,4 @@ rustc_cratesio_shim = { path = \"../librustc_cratesio_shim\" }\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n-gcc = \"0.3.50\"\n+cc = \"1.0\""}, {"sha": "dde7a38efc7965b483f62e8fed764d82f9c4dfac", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate gcc;\n+extern crate cc;\n extern crate build_helper;\n \n use std::process::Command;\n@@ -136,7 +136,7 @@ fn main() {\n     let mut cmd = Command::new(&llvm_config);\n     cmd.arg(\"--cxxflags\");\n     let cxxflags = output(&mut cmd);\n-    let mut cfg = gcc::Build::new();\n+    let mut cfg = cc::Build::new();\n     cfg.warnings(false);\n     for flag in cxxflags.split_whitespace() {\n         // Ignore flags like `-m64` when we're doing a cross build"}, {"sha": "482350d04b5a72e539aa21c615900f9ee0cb843d", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -32,4 +32,4 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n \n [target.\"cfg(windows)\".dependencies]\n-gcc = \"0.3.50\"\n+cc = \"1.0\""}, {"sha": "39a9ccd8eb9b7a4ef210fcd6eca578553d9bbd56", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -125,7 +125,7 @@ pub fn get_linker(sess: &Session) -> (String, Command, Vec<(OsString, OsString)>\n \n #[cfg(windows)]\n pub fn msvc_link_exe_cmd(sess: &Session) -> (Command, Vec<(OsString, OsString)>) {\n-    use gcc::windows_registry;\n+    use cc::windows_registry;\n \n     let target = &sess.opts.target_triple;\n     let tool = windows_registry::find_tool(target, \"link.exe\");"}, {"sha": "796dfd4417c6ad181ec565787e0e1e018be6f5fe", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -61,7 +61,7 @@ extern crate syntax_pos;\n extern crate rustc_errors as errors;\n extern crate serialize;\n #[cfg(windows)]\n-extern crate gcc; // Used to locate MSVC, not gcc :)\n+extern crate cc; // Used to locate MSVC\n \n pub use base::trans_crate;\n "}, {"sha": "b295b414a035b1be6de36a55363f8cfc397debe0", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -18,4 +18,4 @@ html-diff = \"0.0.4\"\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n-gcc = \"0.3.50\"\n+cc = \"1.0\""}, {"sha": "97c9ca1e2d27c816e3bf58ceee6deffb9a89d87e", "filename": "src/librustdoc/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustdoc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibrustdoc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fbuild.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n extern crate build_helper;\n-extern crate gcc;\n+extern crate cc;\n \n fn main() {\n     let src_dir = std::path::Path::new(\"../rt/hoedown/src\");\n     build_helper::rerun_if_changed_anything_in_dir(src_dir);\n-    let mut cfg = gcc::Build::new();\n+    let mut cfg = cc::Build::new();\n     cfg.file(\"../rt/hoedown/src/autolink.c\")\n        .file(\"../rt/hoedown/src/buffer.c\")\n        .file(\"../rt/hoedown/src/document.c\")"}, {"sha": "fb276448ffac4d126c10f9c55e3802e411868aa2", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -36,7 +36,7 @@ rustc_tsan = { path = \"../librustc_tsan\" }\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n-gcc = \"0.3.50\"\n+cc = \"1.0\"\n \n [features]\n backtrace = []"}, {"sha": "7ca762c801a814a0e5186f2be6171a565d82c60e", "filename": "src/libstd/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7694ca419b3ade48e22982b69dec90eb45d8da73/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=7694ca419b3ade48e22982b69dec90eb45d8da73", "patch": "@@ -11,7 +11,7 @@\n #![deny(warnings)]\n \n extern crate build_helper;\n-extern crate gcc;\n+extern crate cc;\n \n use std::env;\n use std::process::Command;\n@@ -77,7 +77,7 @@ fn main() {\n fn build_libbacktrace(host: &str, target: &str) -> Result<(), ()> {\n     let native = native_lib_boilerplate(\"libbacktrace\", \"libbacktrace\", \"backtrace\", \".libs\")?;\n \n-    let compiler = gcc::Build::new().get_compiler();\n+    let compiler = cc::Build::new().get_compiler();\n     // only msvc returns None for ar so unwrap is okay\n     let ar = build_helper::cc2ar(compiler.path(), target).unwrap();\n     let mut cflags = compiler.args().iter().map(|s| s.to_str().unwrap())"}]}