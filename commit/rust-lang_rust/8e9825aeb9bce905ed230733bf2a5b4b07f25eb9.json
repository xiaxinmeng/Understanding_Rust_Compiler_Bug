{"sha": "8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOTgyNWFlYjliY2U5MDVlZDIzMDczM2JmMmE1YjRiMDdmMjVlYjk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-09-01T18:06:11Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-09-01T18:06:11Z"}, "message": "Fix overflow_check", "tree": {"sha": "72f80aea30dc415f8e3ccd1f68caec6c9334c06e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72f80aea30dc415f8e3ccd1f68caec6c9334c06e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "html_url": "https://github.com/rust-lang/rust/commit/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a0872b37efbd982aed7e29f166e4ccb095f5779", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a0872b37efbd982aed7e29f166e4ccb095f5779", "html_url": "https://github.com/rust-lang/rust/commit/4a0872b37efbd982aed7e29f166e4ccb095f5779"}], "stats": {"total": 226, "additions": 170, "deletions": 56}, "files": [{"sha": "091e68cd0669c5fae9a3a93b4cd66d2fa6b294d3", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "patch": "@@ -405,14 +405,14 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 }\n \n                 let arg = self.eval_operand(arg, source_info)?;\n-                let is_release_mode = self.tcx.sess.overflow_checks();\n+                let oflo_check = self.tcx.sess.overflow_checks();\n                 let val = self.use_ecx(source_info, |this| {\n                     let prim = this.ecx.read_immediate(arg)?;\n                     match op {\n                         UnOp::Neg => {\n-                            // We don't have to check overflow here when we already\n-                            // check it in release mode.\n-                            if is_release_mode\n+                            // We check overflow in debug mode already\n+                            // so should only check in release mode.\n+                            if !oflo_check\n                             && prim.to_bits()? == (1 << (prim.layout.size.bits() - 1)) {\n                                 throw_panic!(OverflowNeg)\n                             }\n@@ -487,9 +487,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         Scalar::from_bool(overflow).into(),\n                     )\n                 } else {\n-                    // We don't have to check overflow here when we already\n-                    // check it in release mode.\n-                    if self.tcx.sess.overflow_checks() && overflow {\n+                    // We check overflow in debug mode already\n+                    // so should only check in release mode.\n+                    if !self.tcx.sess.overflow_checks() && overflow {\n                         let err = err_panic!(Overflow(op)).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;"}, {"sha": "a5f685a159b399877af23423c15e67a4566b3009", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "patch": "@@ -13,9 +13,13 @@ fn black_box<T>(_: T) {\n \n fn main() {\n     let a = -std::i8::MIN;\n+    //~^ ERROR const_err\n     let b = 200u8 + 200u8 + 200u8;\n+    //~^ ERROR const_err\n     let c = 200u8 * 4;\n+    //~^ ERROR const_err\n     let d = 42u8 - (42u8 + 1);\n+    //~^ ERROR const_err\n     let _e = [5u8][1];\n     //~^ ERROR const_err\n     black_box(a);"}, {"sha": "659c3afc618a9c195d4601dd510c601763fd47d5", "filename": "src/test/ui/consts/const-err2.stderr", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr?ref=8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "patch": "@@ -1,14 +1,38 @@\n-error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err2.rs:19:14\n+error: this expression will panic at runtime\n+  --> $DIR/const-err2.rs:15:13\n    |\n-LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^\n+LL |     let a = -std::i8::MIN;\n+   |             ^^^^^^^^^^^^^ attempt to negate with overflow\n    |\n note: lint level defined here\n   --> $DIR/const-err2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n-error: aborting due to previous error\n+error: this expression will panic at runtime\n+  --> $DIR/const-err2.rs:17:13\n+   |\n+LL |     let b = 200u8 + 200u8 + 200u8;\n+   |             ^^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this expression will panic at runtime\n+  --> $DIR/const-err2.rs:19:13\n+   |\n+LL |     let c = 200u8 * 4;\n+   |             ^^^^^^^^^ attempt to multiply with overflow\n+\n+error: this expression will panic at runtime\n+  --> $DIR/const-err2.rs:21:13\n+   |\n+LL |     let d = 42u8 - (42u8 + 1);\n+   |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: index out of bounds: the len is 1 but the index is 1\n+  --> $DIR/const-err2.rs:23:14\n+   |\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "cd989731452b348c581473173d69447a96ef2723", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "patch": "@@ -5,6 +5,7 @@\n fn main() {\n     println!(\"{}\", 0u32 - 1);\n     let _x = 0u32 - 1;\n+    //~^ ERROR this expression will panic at runtime [const_err]\n     println!(\"{}\", 1/(1-1));\n     //~^ ERROR attempt to divide by zero [const_err]\n     //~| ERROR reaching this expression at runtime will panic or abort [const_err]"}, {"sha": "40d5c73e86679580ea8d7275c204edaf12c2ba30", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "patch": "@@ -1,56 +1,62 @@\n-error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:8:20\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:7:14\n    |\n-LL |     println!(\"{}\", 1/(1-1));\n-   |                    ^^^^^^^\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^ attempt to subtract with overflow\n    |\n note: lint level defined here\n   --> $DIR/promoted_errors.rs:3:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:9:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^\n+\n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:8:20\n+  --> $DIR/promoted_errors.rs:9:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:11:14\n+  --> $DIR/promoted_errors.rs:12:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:11:14\n+  --> $DIR/promoted_errors.rs:12:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:14:20\n+  --> $DIR/promoted_errors.rs:15:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:14:20\n+  --> $DIR/promoted_errors.rs:15:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:17:14\n+  --> $DIR/promoted_errors.rs:18:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:17:14\n+  --> $DIR/promoted_errors.rs:18:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "30b8744cb7fa79f8ed3f71786defd647f2b5f173", "filename": "src/test/ui/consts/issue-64059.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs?ref=8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "patch": "@@ -1,5 +1,4 @@\n-// run-pass\n-\n fn main() {\n     let _ = -(-0.0);\n+    //~^ ERROR: this expression will panic at runtime\n }"}, {"sha": "6f27653421bd6830639793e6d7610c5cc4a299fd", "filename": "src/test/ui/consts/issue-64059.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.stderr?ref=8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "patch": "@@ -0,0 +1,10 @@\n+error: this expression will panic at runtime\n+  --> $DIR/issue-64059.rs:2:13\n+   |\n+LL |     let _ = -(-0.0);\n+   |             ^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "611d280f774c05ef7c81cd5bcc31cf0c4c19c0ce", "filename": "src/test/ui/issues/issue-8460-const.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs?ref=8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "patch": "@@ -6,14 +6,19 @@ use std::thread;\n fn main() {\n     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n     //~| ERROR this expression will panic at runtime\n@@ -31,14 +36,19 @@ fn main() {\n     //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     //~| ERROR this expression will panic at runtime"}, {"sha": "31b1da4f804abb889e0c6bc7a4ed43729dc60ccf", "filename": "src/test/ui/issues/issue-8460-const.stderr", "status": "modified", "additions": 90, "deletions": 30, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e9825aeb9bce905ed230733bf2a5b4b07f25eb9/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr?ref=8e9825aeb9bce905ed230733bf2a5b4b07f25eb9", "patch": "@@ -10,179 +10,239 @@ note: lint level defined here\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const.rs:7:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+\n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:9:36\n+  --> $DIR/issue-8460-const.rs:10:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const.rs:10:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+\n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:11:36\n+  --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n-error: attempt to divide with overflow\n+error: this expression will panic at runtime\n   --> $DIR/issue-8460-const.rs:13:36\n    |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const.rs:16:36\n+   |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const.rs:16:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:15:36\n+  --> $DIR/issue-8460-const.rs:19:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const.rs:19:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:17:36\n+  --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:17:36\n+  --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:20:36\n+  --> $DIR/issue-8460-const.rs:25:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:20:36\n+  --> $DIR/issue-8460-const.rs:25:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:23:36\n+  --> $DIR/issue-8460-const.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:23:36\n+  --> $DIR/issue-8460-const.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:26:36\n+  --> $DIR/issue-8460-const.rs:31:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:26:36\n+  --> $DIR/issue-8460-const.rs:31:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:29:36\n+  --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:29:36\n+  --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:32:36\n+  --> $DIR/issue-8460-const.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n \n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const.rs:37:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:36:36\n+  --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const.rs:43:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:38:36\n+  --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const.rs:46:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:49:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const.rs:49:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:42:36\n+  --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:42:36\n+  --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:45:36\n+  --> $DIR/issue-8460-const.rs:55:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:45:36\n+  --> $DIR/issue-8460-const.rs:55:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:48:36\n+  --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:48:36\n+  --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:51:36\n+  --> $DIR/issue-8460-const.rs:61:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:51:36\n+  --> $DIR/issue-8460-const.rs:61:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:54:36\n+  --> $DIR/issue-8460-const.rs:64:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:54:36\n+  --> $DIR/issue-8460-const.rs:64:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 40 previous errors\n "}]}