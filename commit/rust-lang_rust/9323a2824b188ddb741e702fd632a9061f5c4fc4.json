{"sha": "9323a2824b188ddb741e702fd632a9061f5c4fc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMjNhMjgyNGIxODhkZGI3NDFlNzAyZmQ2MzJhOTA2MWY1YzRmYzQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-06-24T05:59:43Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-06-24T06:02:50Z"}, "message": "Prefer \"allow list\" structure to check a type", "tree": {"sha": "66beeff5f477f6265400e9120454bfae8e094925", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66beeff5f477f6265400e9120454bfae8e094925"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9323a2824b188ddb741e702fd632a9061f5c4fc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmDUIAoACgkQ2rpbBylh\nwYrCKA/+OdE4a1Ig92bYHi575AsfypLYZ7Wa0lOp8zvXjN7Pf9TEh1RJ0Lv5Pn0I\nMTk5ePVOG1DT+rpBfA7Wmn6nmyXgVuUNQBcBkb0QC28rPe1IidvPerh1rh9YWM+Y\nST3PkVPQtAqk72Q0MRGUuj4KwN7RDIPLP7w5xKBWoZz9STpwI1Omh2CF9J2OIk+u\nlSTiIubu9ZE8wBUJo7taL6jCPoeuWQjeBuojBQEgTqQoYkopO9VjyNySK7pYtLvR\nQeVZ/Hyyq5Dw4u2BDDBZouGkuPPAnlmx/EYnf0cPh9zSxnz0tKDKiTuXeZ1v96zW\n7qwVpZDg+ZX+X1GxnJBM9vAfFB5+ss4x9rnP9je/Hx1ugzibb5JSYdA/qQvcy7aF\nsh+HizOgnZp6oMyMc/CjcZ3wvtSWOlRC+N9ygotUYdKZ524VgA8hA6aiIMu5JJyb\nq44x42uij99z1voJ488u6YsMl2oGCoPf0hQXg0RFXVu2BRLmTgzZTbQPPBrdvfwh\nvR7JWGS8fv/hUeXEoP4XVsXUBl0wdIYVbZBo9ZhIAG0pvB9WSDQSwh8AhV0c9IBe\nLirGUMec4hQf8vI+oZ3/FzCM9oJ2/iARHhrHA7asUUvCJJldvDT1wz7vGAiA3L8E\nyWBv5xWOSrxmgb9+dpi2MUW9RwS/bgChj+Nrt9vqU0Epl1/4V7k=\n=dMhM\n-----END PGP SIGNATURE-----", "payload": "tree 66beeff5f477f6265400e9120454bfae8e094925\nparent 462c74007eea1b71a62aa5565352e82ef481a129\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1624514383 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1624514570 +0900\n\nPrefer \"allow list\" structure to check a type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9323a2824b188ddb741e702fd632a9061f5c4fc4", "html_url": "https://github.com/rust-lang/rust/commit/9323a2824b188ddb741e702fd632a9061f5c4fc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9323a2824b188ddb741e702fd632a9061f5c4fc4/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "462c74007eea1b71a62aa5565352e82ef481a129", "url": "https://api.github.com/repos/rust-lang/rust/commits/462c74007eea1b71a62aa5565352e82ef481a129", "html_url": "https://github.com/rust-lang/rust/commit/462c74007eea1b71a62aa5565352e82ef481a129"}], "stats": {"total": 26, "additions": 8, "deletions": 18}, "files": [{"sha": "77f955e93b9dd7301b5f39e616370c66b6433488", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9323a2824b188ddb741e702fd632a9061f5c4fc4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9323a2824b188ddb741e702fd632a9061f5c4fc4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9323a2824b188ddb741e702fd632a9061f5c4fc4", "patch": "@@ -43,8 +43,8 @@ use rustc_hir::definitions::Definitions;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{\n-    Constness, HirId, ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet, Node, TraitCandidate,\n-    TraitItemKind,\n+    Constness, ExprKind, HirId, ImplItemKind, ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet,\n+    Node, TraitCandidate, TraitItemKind,\n };\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n@@ -1499,24 +1499,14 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn return_type_impl_trait(self, scope_def_id: LocalDefId) -> Option<(Ty<'tcx>, Span)> {\n-        // HACK: `type_of()` will fail on these (#55796), so return `None`.\n+        // `type_of()` will fail on these (#55796, #86483), so only allow `fn`s or closures.\n         let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n         match self.hir().get(hir_id) {\n-            Node::Item(item) => {\n-                match item.kind {\n-                    ItemKind::Fn(..) => { /* `type_of()` will work */ }\n-                    _ => {\n-                        return None;\n-                    }\n-                }\n-            }\n-            Node::TraitItem(item) => {\n-                // #86483: Return early if it doesn't have a concrete type.\n-                if let TraitItemKind::Type(_, None) = item.kind {\n-                    return None;\n-                }\n-            }\n-            _ => { /* `type_of()` will work or panic */ }\n+            Node::Item(&hir::Item { kind: ItemKind::Fn(..), .. }) => {}\n+            Node::TraitItem(&hir::TraitItem { kind: TraitItemKind::Fn(..), .. }) => {}\n+            Node::ImplItem(&hir::ImplItem { kind: ImplItemKind::Fn(..), .. }) => {}\n+            Node::Expr(&hir::Expr { kind: ExprKind::Closure(..), .. }) => {}\n+            _ => return None,\n         }\n \n         let ret_ty = self.type_of(scope_def_id);"}]}