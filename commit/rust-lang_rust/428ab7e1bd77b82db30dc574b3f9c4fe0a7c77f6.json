{"sha": "428ab7e1bd77b82db30dc574b3f9c4fe0a7c77f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOGFiN2UxYmQ3N2I4MmRiMzBkYzU3NGIzZjljNGZlMGE3Yzc3ZjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-25T08:36:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-25T08:36:07Z"}, "message": "shadow as_ptr as as_mut_ptr in Vec to avoid going through Deref", "tree": {"sha": "faff51e9590bfc75c0d48acce9729943fb652db4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faff51e9590bfc75c0d48acce9729943fb652db4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/428ab7e1bd77b82db30dc574b3f9c4fe0a7c77f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/428ab7e1bd77b82db30dc574b3f9c4fe0a7c77f6", "html_url": "https://github.com/rust-lang/rust/commit/428ab7e1bd77b82db30dc574b3f9c4fe0a7c77f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/428ab7e1bd77b82db30dc574b3f9c4fe0a7c77f6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d82826e555e658680cf6ef246ae6d088f300d1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d82826e555e658680cf6ef246ae6d088f300d1d", "html_url": "https://github.com/rust-lang/rust/commit/9d82826e555e658680cf6ef246ae6d088f300d1d"}], "stats": {"total": 78, "additions": 71, "deletions": 7}, "files": [{"sha": "5cb91395b7bf75cd64cdb81e54392b61ec7140c1", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 71, "deletions": 7, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/428ab7e1bd77b82db30dc574b3f9c4fe0a7c77f6/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428ab7e1bd77b82db30dc574b3f9c4fe0a7c77f6/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=428ab7e1bd77b82db30dc574b3f9c4fe0a7c77f6", "patch": "@@ -735,6 +735,75 @@ impl<T> Vec<T> {\n         self\n     }\n \n+    /// Returns a raw pointer to the vector's buffer.\n+    ///\n+    /// The caller must ensure that the vector outlives the pointer this\n+    /// function returns, or else it will end up pointing to garbage.\n+    /// Modifying the vector may cause its buffer to be reallocated,\n+    /// which would also make any pointers to it invalid.\n+    ///\n+    /// The caller must also ensure that the memory the pointer (non-transitively) points to\n+    /// is never written to (except inside an `UnsafeCell`) using this pointer or any pointer\n+    /// derived from it. If you need to mutate the contents of the slice, use [`as_mut_ptr`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = vec![1, 2, 4];\n+    /// let x_ptr = x.as_ptr();\n+    ///\n+    /// unsafe {\n+    ///     for i in 0..x.len() {\n+    ///         assert_eq!(*x_ptr.add(i), 1 << i);\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// [`as_mut_ptr`]: #method.as_mut_ptr\n+    #[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]\n+    #[inline]\n+    pub fn as_ptr(&self) -> *const T {\n+        // We shadow the slice method of the same name to avoid going through\n+        // `deref`, which creates an intermediate reference.\n+        let ptr = self.buf.ptr();\n+        unsafe { assume(!ptr.is_null()); }\n+        ptr\n+    }\n+\n+    /// Returns an unsafe mutable pointer to the vector's buffer.\n+    ///\n+    /// The caller must ensure that the vector outlives the pointer this\n+    /// function returns, or else it will end up pointing to garbage.\n+    /// Modifying the vector may cause its buffer to be reallocated,\n+    /// which would also make any pointers to it invalid.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// // Allocate vector big enough for 4 elements.\n+    /// let size = 4;\n+    /// let mut x: Vec<i32> = Vec::with_capacity(size);\n+    /// let x_ptr = x.as_mut_ptr();\n+    ///\n+    /// // Initialize elements via raw pointer writes, then set length.\n+    /// unsafe {\n+    ///     for i in 0..size {\n+    ///         *x_ptr.add(i) = i as i32;\n+    ///     }\n+    ///     x.set_len(size);\n+    /// }\n+    /// assert_eq!(&*x, &[0,1,2,3]);\n+    /// ```\n+    #[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]\n+    #[inline]\n+    pub fn as_mut_ptr(&mut self) -> *mut T {\n+        // We shadow the slice method of the same name to avoid going through\n+        // `deref_mut`, which creates an intermediate reference.\n+        let ptr = self.buf.ptr();\n+        unsafe { assume(!ptr.is_null()); }\n+        ptr\n+    }\n+\n     /// Forces the length of the vector to `new_len`.\n     ///\n     /// This is a low-level operation that maintains none of the normal\n@@ -1706,9 +1775,7 @@ impl<T> ops::Deref for Vec<T> {\n \n     fn deref(&self) -> &[T] {\n         unsafe {\n-            let p = self.buf.ptr();\n-            assume(!p.is_null());\n-            slice::from_raw_parts(p, self.len)\n+            slice::from_raw_parts(self.as_ptr(), self.len)\n         }\n     }\n }\n@@ -1717,9 +1784,7 @@ impl<T> ops::Deref for Vec<T> {\n impl<T> ops::DerefMut for Vec<T> {\n     fn deref_mut(&mut self) -> &mut [T] {\n         unsafe {\n-            let ptr = self.buf.ptr();\n-            assume(!ptr.is_null());\n-            slice::from_raw_parts_mut(ptr, self.len)\n+            slice::from_raw_parts_mut(self.as_mut_ptr(), self.len)\n         }\n     }\n }\n@@ -1754,7 +1819,6 @@ impl<T> IntoIterator for Vec<T> {\n     fn into_iter(mut self) -> IntoIter<T> {\n         unsafe {\n             let begin = self.as_mut_ptr();\n-            assume(!begin.is_null());\n             let end = if mem::size_of::<T>() == 0 {\n                 arith_offset(begin as *const i8, self.len() as isize) as *const T\n             } else {"}]}