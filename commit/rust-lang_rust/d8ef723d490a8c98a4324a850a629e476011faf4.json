{"sha": "d8ef723d490a8c98a4324a850a629e476011faf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZWY3MjNkNDkwYThjOThhNDMyNGE4NTBhNjI5ZTQ3NjAxMWZhZjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-07T22:30:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-07T22:30:57Z"}, "message": "rustc: Replace Durable with 'static", "tree": {"sha": "75239d74e52d25fc0d132a7dfccc1dcbff95b631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75239d74e52d25fc0d132a7dfccc1dcbff95b631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8ef723d490a8c98a4324a850a629e476011faf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ef723d490a8c98a4324a850a629e476011faf4", "html_url": "https://github.com/rust-lang/rust/commit/d8ef723d490a8c98a4324a850a629e476011faf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8ef723d490a8c98a4324a850a629e476011faf4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc4c1a5e01e5bc7ea389511e906c4bb160783e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc4c1a5e01e5bc7ea389511e906c4bb160783e8", "html_url": "https://github.com/rust-lang/rust/commit/ccc4c1a5e01e5bc7ea389511e906c4bb160783e8"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "0baad7e7b7a7bb8bc08c02d3ac9be650c8b59a0c", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d8ef723d490a8c98a4324a850a629e476011faf4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ef723d490a8c98a4324a850a629e476011faf4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=d8ef723d490a8c98a4324a850a629e476011faf4", "patch": "@@ -101,7 +101,7 @@ pub fn get_region_reporting_err(\n     }\n }\n \n-pub fn ast_region_to_region<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ast_region_to_region<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     default_span: span,\n@@ -126,7 +126,7 @@ pub fn ast_region_to_region<AC:AstConv,RS:region_scope + Copy + Durable>(\n     get_region_reporting_err(self.tcx(), span, opt_lifetime, res)\n }\n \n-fn ast_path_substs<AC:AstConv,RS:region_scope + Copy + Durable>(\n+fn ast_path_substs<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     def_id: ast::def_id,\n@@ -180,7 +180,7 @@ fn ast_path_substs<AC:AstConv,RS:region_scope + Copy + Durable>(\n     substs {self_r:self_r, self_ty:self_ty, tps:tps}\n }\n \n-pub fn ast_path_to_substs_and_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ast_path_to_substs_and_ty<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     did: ast::def_id,\n@@ -197,7 +197,7 @@ pub fn ast_path_to_substs_and_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n     ty_param_substs_and_ty { substs: substs, ty: ty }\n }\n \n-pub fn ast_path_to_trait_ref<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ast_path_to_trait_ref<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     trait_def_id: ast::def_id,\n@@ -221,7 +221,7 @@ pub fn ast_path_to_trait_ref<AC:AstConv,RS:region_scope + Copy + Durable>(\n }\n \n \n-pub fn ast_path_to_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ast_path_to_ty<AC:AstConv,RS:region_scope + Copy + 'static>(\n         self: &AC,\n         rscope: &RS,\n         did: ast::def_id,\n@@ -243,10 +243,10 @@ pub static NO_TPS: uint = 2;\n // Parses the programmer's textual representation of a type into our\n // internal notion of a type. `getter` is a function that returns the type\n // corresponding to a definition ID:\n-pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n+pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + 'static>(\n     self: &AC, rscope: &RS, ast_ty: @ast::Ty) -> ty::t {\n \n-    fn ast_mt_to_mt<AC:AstConv, RS:region_scope + Copy + Durable>(\n+    fn ast_mt_to_mt<AC:AstConv, RS:region_scope + Copy + 'static>(\n         self: &AC, rscope: &RS, mt: &ast::mt) -> ty::mt {\n \n         ty::mt {ty: ast_ty_to_ty(self, rscope, mt.ty), mutbl: mt.mutbl}\n@@ -255,7 +255,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n     // Handle @, ~, and & being able to mean estrs and evecs.\n     // If a_seq_ty is a str or a vec, make it an estr/evec.\n     // Also handle first-class trait types.\n-    fn mk_pointer<AC:AstConv,RS:region_scope + Copy + Durable>(\n+    fn mk_pointer<AC:AstConv,RS:region_scope + Copy + 'static>(\n         self: &AC,\n         rscope: &RS,\n         a_seq_ty: &ast::mt,\n@@ -497,7 +497,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n }\n \n pub fn ty_of_arg<AC:AstConv,\n-                 RS:region_scope + Copy + Durable>(\n+                 RS:region_scope + Copy + 'static>(\n                  self: &AC,\n                  rscope: &RS,\n                  a: ast::arg,\n@@ -549,7 +549,7 @@ struct SelfInfo {\n     self_transform: ast::self_ty\n }\n \n-pub fn ty_of_method<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ty_of_method<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     purity: ast::purity,\n@@ -567,7 +567,7 @@ pub fn ty_of_method<AC:AstConv,RS:region_scope + Copy + Durable>(\n     (a.get(), b)\n }\n \n-pub fn ty_of_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ty_of_bare_fn<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     purity: ast::purity,\n@@ -580,7 +580,7 @@ pub fn ty_of_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n     b\n }\n \n-fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n+fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     purity: ast::purity,\n@@ -616,7 +616,7 @@ fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n                                 output: output_ty}\n             });\n \n-    fn transform_self_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n+    fn transform_self_ty<AC:AstConv,RS:region_scope + Copy + 'static>(\n         self: &AC,\n         rscope: &RS,\n         self_info: &SelfInfo) -> Option<ty::t>\n@@ -649,7 +649,7 @@ fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n     }\n }\n \n-pub fn ty_of_closure<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ty_of_closure<AC:AstConv,RS:region_scope + Copy + 'static>(\n         self: &AC,\n         rscope: &RS,\n         sigil: ast::Sigil,"}, {"sha": "13d1428c30aa49256fa2bd8001aec69b0023a1b0", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8ef723d490a8c98a4324a850a629e476011faf4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ef723d490a8c98a4324a850a629e476011faf4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=d8ef723d490a8c98a4324a850a629e476011faf4", "patch": "@@ -116,7 +116,7 @@ pub fn collect_item_types(ccx: @mut CrateCtxt, crate: @ast::crate) {\n }\n \n impl CrateCtxt {\n-    fn to_ty<RS:region_scope + Copy + Durable>(\n+    fn to_ty<RS:region_scope + Copy + 'static>(\n         &self, rs: &RS, ast_ty: @ast::Ty) -> ty::t\n     {\n         ast_ty_to_ty(self, rs, ast_ty)\n@@ -1163,7 +1163,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n          * enum consisting of a newtyped Ty or a region) to ty's\n          * notion of ty param bounds, which can either be user-defined\n          * traits, or one of the four built-in traits (formerly known\n-         * as kinds): Const, Copy, Durable, and Send.\n+         * as kinds): Const, Copy, and Send.\n          */\n \n         @ast_bounds.flat_map_to_vec(|b| {"}, {"sha": "316792f688f4692a9e50b89b349f4c3780e4df5a", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8ef723d490a8c98a4324a850a629e476011faf4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ef723d490a8c98a4324a850a629e476011faf4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=d8ef723d490a8c98a4324a850a629e476011faf4", "patch": "@@ -266,7 +266,7 @@ pub struct binding_rscope {\n     region_param_names: RegionParamNames,\n }\n \n-pub fn in_binding_rscope<RS:region_scope + Copy + Durable>(\n+pub fn in_binding_rscope<RS:region_scope + Copy + 'static>(\n         self: &RS,\n         region_param_names: RegionParamNames)\n      -> binding_rscope {"}]}