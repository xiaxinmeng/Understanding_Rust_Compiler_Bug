{"sha": "6f8d263e876106a3c05a05b93fb78a4de07b37f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOGQyNjNlODc2MTA2YTNjMDVhMDViOTNmYjc4YTRkZTA3YjM3ZjU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-01-28T23:59:34Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-01-29T09:48:12Z"}, "message": "tests: replace \"lvalue\" terminology with \"place\".", "tree": {"sha": "6b7b45b0041c9be13ff97763cad833a4622580d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b7b45b0041c9be13ff97763cad833a4622580d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f8d263e876106a3c05a05b93fb78a4de07b37f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8d263e876106a3c05a05b93fb78a4de07b37f5", "html_url": "https://github.com/rust-lang/rust/commit/6f8d263e876106a3c05a05b93fb78a4de07b37f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f8d263e876106a3c05a05b93fb78a4de07b37f5/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46a9bdda78ead362b9bcef4146a7dadb698237ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/46a9bdda78ead362b9bcef4146a7dadb698237ee", "html_url": "https://github.com/rust-lang/rust/commit/46a9bdda78ead362b9bcef4146a7dadb698237ee"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "bb02d6d8bba8a2f7ee3ce51d731cbecac0da8811", "filename": "src/test/compile-fail/regions-adjusted-lvalue-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Fcompile-fail%2Fregions-adjusted-lvalue-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Fcompile-fail%2Fregions-adjusted-lvalue-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-adjusted-lvalue-op.rs?ref=6f8d263e876106a3c05a05b93fb78a4de07b37f5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// check that we link regions in mutable lvalue ops correctly - issue #41774\n+// check that we link regions in mutable place ops correctly - issue #41774\n \n struct Data(i32);\n "}, {"sha": "466690e7ca12bea49d1cfcd979e0469eeffa0fd4", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=6f8d263e876106a3c05a05b93fb78a4de07b37f5", "patch": "@@ -404,9 +404,9 @@ pub fn value_cast(a: u32) -> i32 {\n \n \n \n-// Change l-value in assignment ------------------------------------------------\n+// Change place in assignment --------------------------------------------------\n #[cfg(cfail1)]\n-pub fn lvalue() -> i32 {\n+pub fn place() -> i32 {\n     let mut x = 10;\n     let mut y = 11;\n     x = 9;\n@@ -416,7 +416,7 @@ pub fn lvalue() -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-pub fn lvalue() -> i32 {\n+pub fn place() -> i32 {\n     let mut x = 10;\n     let mut y = 11;\n     y = 9;"}, {"sha": "2a1e55d867f72a67edf933231274d10fba38308d", "filename": "src/test/run-pass/issue-18514.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Frun-pass%2Fissue-18514.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Frun-pass%2Fissue-18514.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18514.rs?ref=6f8d263e876106a3c05a05b93fb78a4de07b37f5", "patch": "@@ -10,7 +10,7 @@\n \n // Test that we don't ICE when translating a generic impl method from\n // an extern crate that contains a match expression on a local\n-// variable lvalue where one of the match case bodies contains an\n+// variable place where one of the match case bodies contains an\n // expression that autoderefs through an overloaded generic deref\n // impl.\n "}, {"sha": "241408ddef13596d68a6969571a9ccb430f05995", "filename": "src/test/run-pass/issue-18845.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Frun-pass%2Fissue-18845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Frun-pass%2Fissue-18845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18845.rs?ref=6f8d263e876106a3c05a05b93fb78a4de07b37f5", "patch": "@@ -11,7 +11,7 @@\n // This used to generate invalid IR in that even if we took the\n // `false` branch we'd still try to free the Box from the other\n // arm. This was due to treating `*Box::new(9)` as an rvalue datum\n-// instead of as an lvalue.\n+// instead of as a place.\n \n fn test(foo: bool) -> u8 {\n     match foo {"}, {"sha": "4de8f6a7194159dafd8c68d0a0308cd69982a3dc", "filename": "src/test/run-pass/method-mut-self-modifies-mut-slice-lvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs?ref=6f8d263e876106a3c05a05b93fb78a4de07b37f5", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that an `&mut self` method, when invoked on an lvalue whose\n-// type is `&mut [u8]`, passes in a pointer to the lvalue and not a\n+// Test that an `&mut self` method, when invoked on a place whose\n+// type is `&mut [u8]`, passes in a pointer to the place and not a\n // temporary. Issue #19147.\n \n use std::slice;"}, {"sha": "7ab133bbab4e1b44fd1820e2fb3e6cdccc3d6b09", "filename": "src/test/run-pass/mir_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Frun-pass%2Fmir_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Frun-pass%2Fmir_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_drop_order.rs?ref=6f8d263e876106a3c05a05b93fb78a4de07b37f5", "patch": "@@ -41,7 +41,7 @@ fn main() {\n         // all borrows are extended - nothing has been dropped yet\n         assert_eq!(get(), vec![]);\n     }\n-    // in a let-statement, extended lvalues are dropped\n+    // in a let-statement, extended places are dropped\n     // *after* the let result (tho they have the same scope\n     // as far as scope-based borrowck goes).\n     assert_eq!(get(), vec![0, 2, 3, 1]);"}, {"sha": "18fb8e2e408f196f5d599b2954a170a251dbd1d9", "filename": "src/test/run-pass/type-ascription.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Frun-pass%2Ftype-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Frun-pass%2Ftype-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-ascription.rs?ref=6f8d263e876106a3c05a05b93fb78a4de07b37f5", "patch": "@@ -40,6 +40,6 @@ fn main() {\n     assert_eq!(b, 1: u16);\n \n     let mut v = Vec::new();\n-    v: Vec<u8> = vec![1, 2, 3]; // Lvalue type ascription\n+    v: Vec<u8> = vec![1, 2, 3]; // Place expression type ascription\n     assert_eq!(v, [1u8, 2, 3]);\n }"}, {"sha": "22751c4a37cdd0b97308047e4e0701a483fb63d1", "filename": "src/test/ui/issue-26093.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Fui%2Fissue-26093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Fui%2Fissue-26093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26093.rs?ref=6f8d263e876106a3c05a05b93fb78a4de07b37f5", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-macro_rules! not_an_lvalue {\n+macro_rules! not_a_place {\n     ($thing:expr) => {\n         $thing = 42;\n         //~^ ERROR invalid left-hand side expression\n     }\n }\n \n fn main() {\n-    not_an_lvalue!(99);\n+    not_a_place!(99);\n }"}, {"sha": "b850852623fd8ddd449c07b7a1cec039a67915d7", "filename": "src/test/ui/issue-26093.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Fui%2Fissue-26093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8d263e876106a3c05a05b93fb78a4de07b37f5/src%2Ftest%2Fui%2Fissue-26093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26093.stderr?ref=6f8d263e876106a3c05a05b93fb78a4de07b37f5", "patch": "@@ -4,8 +4,8 @@ error[E0070]: invalid left-hand side expression\n 13 |         $thing = 42;\n    |         ^^^^^^^^^^^ left-hand of expression not valid\n ...\n-19 |     not_an_lvalue!(99);\n-   |     ------------------- in this macro invocation\n+19 |     not_a_place!(99);\n+   |     ----------------- in this macro invocation\n \n error: aborting due to previous error\n "}]}