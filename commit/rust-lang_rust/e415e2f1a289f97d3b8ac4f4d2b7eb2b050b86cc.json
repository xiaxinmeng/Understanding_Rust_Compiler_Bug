{"sha": "e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc", "node_id": "C_kwDOAAsO6NoAKGU0MTVlMmYxYTI4OWY5N2QzYjhhYzRmNGQyYjdlYjJiMDUwYjg2Y2M", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-01-15T20:01:00Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-01-20T19:16:37Z"}, "message": "fix overlapping spans for `explicit_outlives_requirements` in macros\n\nalso delete trailing comma if necessary", "tree": {"sha": "0fb94372b669d3ddf6a5305167a90102b5fcd14f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fb94372b669d3ddf6a5305167a90102b5fcd14f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc", "html_url": "https://github.com/rust-lang/rust/commit/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/comments", "author": null, "committer": null, "parents": [{"sha": "31443c63b520cc97a551fb7168d77abbe160b2ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/31443c63b520cc97a551fb7168d77abbe160b2ef", "html_url": "https://github.com/rust-lang/rust/commit/31443c63b520cc97a551fb7168d77abbe160b2ef"}], "stats": {"total": 147, "additions": 135, "deletions": 12}, "files": [{"sha": "18657c94c586cd0a320dea891665f27c2959dc29", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc", "patch": "@@ -2173,13 +2173,31 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                     dropped_predicate_count += 1;\n                 }\n \n-                if drop_predicate && !in_where_clause {\n-                    lint_spans.push(predicate_span);\n-                } else if drop_predicate && i + 1 < num_predicates {\n-                    // If all the bounds on a predicate were inferable and there are\n-                    // further predicates, we want to eat the trailing comma.\n-                    let next_predicate_span = hir_generics.predicates[i + 1].span();\n-                    where_lint_spans.push(predicate_span.to(next_predicate_span.shrink_to_lo()));\n+                if drop_predicate {\n+                    if !in_where_clause {\n+                        lint_spans.push(predicate_span);\n+                    } else if predicate_span.from_expansion() {\n+                        // Don't try to extend the span if it comes from a macro expansion.\n+                        where_lint_spans.push(predicate_span);\n+                    } else if i + 1 < num_predicates {\n+                        // If all the bounds on a predicate were inferable and there are\n+                        // further predicates, we want to eat the trailing comma.\n+                        let next_predicate_span = hir_generics.predicates[i + 1].span();\n+                        if next_predicate_span.from_expansion() {\n+                            where_lint_spans.push(predicate_span);\n+                        } else {\n+                            where_lint_spans\n+                                .push(predicate_span.to(next_predicate_span.shrink_to_lo()));\n+                        }\n+                    } else {\n+                        // Eat the optional trailing comma after the last predicate.\n+                        let where_span = hir_generics.where_clause_span;\n+                        if where_span.from_expansion() {\n+                            where_lint_spans.push(predicate_span);\n+                        } else {\n+                            where_lint_spans.push(predicate_span.to(where_span.shrink_to_hi()));\n+                        }\n+                    }\n                 } else {\n                     where_lint_spans.extend(self.consolidate_outlives_bound_spans(\n                         predicate_span.shrink_to_lo(),\n@@ -2223,6 +2241,11 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                     Applicability::MaybeIncorrect\n                 };\n \n+                // Due to macros, there might be several predicates with the same span\n+                // and we only want to suggest removing them once.\n+                lint_spans.sort_unstable();\n+                lint_spans.dedup();\n+\n                 cx.emit_spanned_lint(\n                     EXPLICIT_OUTLIVES_REQUIREMENTS,\n                     lint_spans.clone(),"}, {"sha": "d2254acb33f6bc87f9e1bd6677cb1d889e1b8b9c", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives-multispan.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.rs?ref=e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc", "patch": "@@ -365,4 +365,24 @@ mod unions {\n     }\n }\n \n+// https://github.com/rust-lang/rust/issues/106870\n+mod multiple_predicates_with_same_span {\n+    macro_rules! m {\n+        ($($name:ident)+) => {\n+            struct Inline<'a, $($name: 'a,)+>(&'a ($($name,)+));\n+            //~^ ERROR: outlives requirements can be inferred\n+            struct FullWhere<'a, $($name,)+>(&'a ($($name,)+)) where $($name: 'a,)+;\n+            //~^ ERROR: outlives requirements can be inferred\n+            struct PartialWhere<'a, $($name,)+>(&'a ($($name,)+)) where (): Sized, $($name: 'a,)+;\n+            //~^ ERROR: outlives requirements can be inferred\n+            struct Interleaved<'a, $($name,)+>(&'a ($($name,)+))\n+            where\n+                (): Sized,\n+                $($name: 'a, $name: 'a, )+ //~ ERROR: outlives requirements can be inferred\n+                $($name: 'a, $name: 'a, )+;\n+        }\n+    }\n+    m!(T0 T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15);\n+}\n+\n fn main() {}"}, {"sha": "f5ec287d29132dbce156642d9f410390618b266d", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives-multispan.stderr", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.stderr?ref=e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc", "patch": "@@ -819,5 +819,61 @@ LL -     union BeeWhereAyTeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U:\n LL +     union BeeWhereAyTeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: Debug,  {\n    |\n \n-error: aborting due to 68 previous errors\n+error: outlives requirements can be inferred\n+  --> $DIR/edition-lint-infer-outlives-multispan.rs:372:38\n+   |\n+LL |             struct Inline<'a, $($name: 'a,)+>(&'a ($($name,)+));\n+   |                                      ^^^^ help: remove these bounds\n+...\n+LL |     m!(T0 T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15);\n+   |     --------------------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: outlives requirements can be inferred\n+  --> $DIR/edition-lint-infer-outlives-multispan.rs:374:64\n+   |\n+LL |             struct FullWhere<'a, $($name,)+>(&'a ($($name,)+)) where $($name: 'a,)+;\n+   |                                                                ^^^^^^^^^^^^^^^^^^ help: remove these bounds\n+...\n+LL |     m!(T0 T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15);\n+   |     --------------------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: outlives requirements can be inferred\n+  --> $DIR/edition-lint-infer-outlives-multispan.rs:376:86\n+   |\n+LL |             struct PartialWhere<'a, $($name,)+>(&'a ($($name,)+)) where (): Sized, $($name: 'a,)+;\n+   |                                                                                      ^^^^^^^^^ help: remove these bounds\n+...\n+LL |     m!(T0 T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15);\n+   |     --------------------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: outlives requirements can be inferred\n+  --> $DIR/edition-lint-infer-outlives-multispan.rs:381:19\n+   |\n+LL |                 $($name: 'a, $name: 'a, )+\n+   |                   ^^^^^^^^^  ^^^^^^^^^\n+LL |                 $($name: 'a, $name: 'a, )+;\n+   |                   ^^^^^^^^^  ^^^^^^^^^\n+...\n+LL |     m!(T0 T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15);\n+   |     ---------------------------------------------------------\n+   |     |\n+   |     in this macro invocation\n+   |     in this macro invocation\n+   |     in this macro invocation\n+   |     in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: remove these bounds\n+   |\n+LL ~                 $(, , )+\n+LL ~                 $(, , )+;\n+   |\n+\n+error: aborting due to 72 previous errors\n "}, {"sha": "868bdf2e068d807861af109f76da061301ab731d", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed?ref=e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc", "patch": "@@ -791,5 +791,14 @@ struct StaticRef<T: 'static> {\n     field: &'static T\n }\n \n+struct TrailingCommaInWhereClause<'a, T, U>\n+where\n+    T: 'a,\n+    \n+    //~^ ERROR outlives requirements can be inferred\n+{\n+    tee: T,\n+    yoo: &'a U\n+}\n \n fn main() {}"}, {"sha": "75783764ad6c9365f6bd506b99be9239218fb1d3", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs?ref=e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc", "patch": "@@ -791,5 +791,14 @@ struct StaticRef<T: 'static> {\n     field: &'static T\n }\n \n+struct TrailingCommaInWhereClause<'a, T, U>\n+where\n+    T: 'a,\n+    U: 'a,\n+    //~^ ERROR outlives requirements can be inferred\n+{\n+    tee: T,\n+    yoo: &'a U\n+}\n \n fn main() {}"}, {"sha": "e655fb4842c714613724c98205f0050669c89698", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.stderr?ref=e415e2f1a289f97d3b8ac4f4d2b7eb2b050b86cc", "patch": "@@ -1,15 +1,21 @@\n error: outlives requirements can be inferred\n-  --> $DIR/edition-lint-infer-outlives.rs:26:31\n+  --> $DIR/edition-lint-infer-outlives.rs:797:5\n    |\n-LL |     struct TeeOutlivesAy<'a, T: 'a> {\n-   |                               ^^^^ help: remove this bound\n+LL |     U: 'a,\n+   |     ^^^^^^ help: remove this bound\n    |\n note: the lint level is defined here\n   --> $DIR/edition-lint-infer-outlives.rs:4:9\n    |\n LL | #![deny(explicit_outlives_requirements)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: outlives requirements can be inferred\n+  --> $DIR/edition-lint-infer-outlives.rs:26:31\n+   |\n+LL |     struct TeeOutlivesAy<'a, T: 'a> {\n+   |                               ^^^^ help: remove this bound\n+\n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives.rs:31:40\n    |\n@@ -916,5 +922,5 @@ error: outlives requirements can be inferred\n LL |     union BeeWhereOutlivesAyTeeWhereDebug<'a, 'b, T> where 'b: 'a, T: Debug {\n    |                                                            ^^^^^^^^ help: remove this bound\n \n-error: aborting due to 152 previous errors\n+error: aborting due to 153 previous errors\n "}]}