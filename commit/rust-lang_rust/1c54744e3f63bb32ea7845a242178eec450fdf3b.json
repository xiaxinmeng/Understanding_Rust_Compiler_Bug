{"sha": "1c54744e3f63bb32ea7845a242178eec450fdf3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNTQ3NDRlM2Y2M2JiMzJlYTc4NDVhMjQyMTc4ZWVjNDUwZmRmM2I=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-01-23T11:04:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-24T06:28:25Z"}, "message": "fixing indentation", "tree": {"sha": "03e6d3aecc293c68dad112b2d4bde568c92542de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03e6d3aecc293c68dad112b2d4bde568c92542de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c54744e3f63bb32ea7845a242178eec450fdf3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c54744e3f63bb32ea7845a242178eec450fdf3b", "html_url": "https://github.com/rust-lang/rust/commit/1c54744e3f63bb32ea7845a242178eec450fdf3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c54744e3f63bb32ea7845a242178eec450fdf3b/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff9502917125f3bfb8ebad252a1c8d3a4f6e0320", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff9502917125f3bfb8ebad252a1c8d3a4f6e0320", "html_url": "https://github.com/rust-lang/rust/commit/ff9502917125f3bfb8ebad252a1c8d3a4f6e0320"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "253d6e5dfb19eb9655b3294c567f5d728f4894ec", "filename": "src/libcore/str.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1c54744e3f63bb32ea7845a242178eec450fdf3b/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c54744e3f63bb32ea7845a242178eec450fdf3b/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=1c54744e3f63bb32ea7845a242178eec450fdf3b", "patch": "@@ -363,7 +363,7 @@ Iterate over the characters in a string\n FIXME: A synonym to iter_chars\n */\n fn chars_iter(ss: str, it: fn&(char)) {\n-   iter_chars(ss, it)\n+    iter_chars(ss, it)\n }\n \n /*\n@@ -374,13 +374,13 @@ Iterate over the bytes in a string\n FIXME: Should it really include the last byte '\\0'?\n */\n fn bytes_iter(ss: str, it: fn&(u8)) {\n-   let pos = 0u;\n-   let len = byte_len(ss);\n+    let pos = 0u;\n+    let len = byte_len(ss);\n \n-   while (pos < len) {\n-      it(ss[pos]);\n-      pos += 1u;\n-   }\n+    while (pos < len) {\n+        it(ss[pos]);\n+        pos += 1u;\n+    }\n }\n \n /*\n@@ -920,7 +920,7 @@ Function: words_iter\n Apply a function to each word\n */\n fn words_iter(ss: str, ff: fn&(&&str)) {\n-   vec::iter(words(ss), ff)\n+    vec::iter(words(ss), ff)\n }\n \n /*\n@@ -1723,29 +1723,29 @@ mod tests {\n         assert(escape(\"abc\\\"def\") == \"abc\\\\\\\"def\");\n     }\n \n-   #[test]\n-   fn test_map() {\n-      assert \"\" == map(\"\", char::to_upper);\n-      assert \"YMCA\" == map(\"ymca\", char::to_upper);\n-   }\n+    #[test]\n+    fn test_map() {\n+        assert \"\" == map(\"\", char::to_upper);\n+        assert \"YMCA\" == map(\"ymca\", char::to_upper);\n+    }\n \n-   #[test]\n-   fn test_all() {\n-       assert true  == all(\"\", char::is_uppercase);\n-       assert false == all(\"ymca\", char::is_uppercase);\n-       assert true  == all(\"YMCA\", char::is_uppercase);\n-       assert false == all(\"yMCA\", char::is_uppercase);\n-       assert false == all(\"YMCy\", char::is_uppercase);\n-   }\n+    #[test]\n+    fn test_all() {\n+        assert true  == all(\"\", char::is_uppercase);\n+        assert false == all(\"ymca\", char::is_uppercase);\n+        assert true  == all(\"YMCA\", char::is_uppercase);\n+        assert false == all(\"yMCA\", char::is_uppercase);\n+        assert false == all(\"YMCy\", char::is_uppercase);\n+    }\n \n-   #[test]\n-   fn test_any() {\n-       assert false  == any(\"\", char::is_uppercase);\n-       assert false == any(\"ymca\", char::is_uppercase);\n-       assert true  == any(\"YMCA\", char::is_uppercase);\n-       assert true == any(\"yMCA\", char::is_uppercase);\n-       assert true == any(\"YMCy\", char::is_uppercase);\n-   }\n+    #[test]\n+    fn test_any() {\n+        assert false  == any(\"\", char::is_uppercase);\n+        assert false == any(\"ymca\", char::is_uppercase);\n+        assert true  == any(\"YMCA\", char::is_uppercase);\n+        assert true == any(\"yMCA\", char::is_uppercase);\n+        assert true == any(\"YMCy\", char::is_uppercase);\n+    }\n \n     #[test]\n     fn test_windowed() {"}]}