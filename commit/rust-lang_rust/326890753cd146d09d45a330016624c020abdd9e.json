{"sha": "326890753cd146d09d45a330016624c020abdd9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNjg5MDc1M2NkMTQ2ZDA5ZDQ1YTMzMDAxNjYyNGMwMjBhYmRkOWU=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T10:21:48Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T10:21:48Z"}, "message": "implement feedback from review", "tree": {"sha": "70afdb5db3d5ffb8f89c75d01e1b0e7ae98308cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70afdb5db3d5ffb8f89c75d01e1b0e7ae98308cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/326890753cd146d09d45a330016624c020abdd9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/326890753cd146d09d45a330016624c020abdd9e", "html_url": "https://github.com/rust-lang/rust/commit/326890753cd146d09d45a330016624c020abdd9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/326890753cd146d09d45a330016624c020abdd9e/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6b788a9eec347d47aa5b77cd617532e438867f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b788a9eec347d47aa5b77cd617532e438867f9", "html_url": "https://github.com/rust-lang/rust/commit/d6b788a9eec347d47aa5b77cd617532e438867f9"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "a145598c791df3dffa727db7b5433dc56cdcf59d", "filename": "crates/ide_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/326890753cd146d09d45a330016624c020abdd9e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326890753cd146d09d45a330016624c020abdd9e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=326890753cd146d09d45a330016624c020abdd9e", "patch": "@@ -5,8 +5,8 @@ use syntax::ast::{self, make, AstNode};\n use crate::{\n     assist_context::{AssistContext, Assists},\n     utils::{\n-        add_trait_assoc_items_to_impl, filter_assoc_items, gen_trait_body, render_snippet, Cursor,\n-        DefaultMethods,\n+        add_trait_assoc_items_to_impl, filter_assoc_items, gen_trait_fn_body, render_snippet,\n+        Cursor, DefaultMethods,\n     },\n     AssistId, AssistKind,\n };\n@@ -156,10 +156,10 @@ fn try_gen_trait_body(\n     trait_: &hir::Trait,\n     impl_def: &ast::Impl,\n ) -> Option<()> {\n-    let trait_path = make::path_from_text(&trait_.name(ctx.db()).to_string());\n+    let trait_path = make::ext::ident_path(&trait_.name(ctx.db()).to_string());\n     let hir_ty = ctx.sema.resolve_type(&impl_def.self_ty()?)?;\n     let adt = hir_ty.as_adt()?.source(ctx.db())?;\n-    gen_trait_body(func, &trait_path, &adt.value)\n+    gen_trait_fn_body(func, &trait_path, &adt.value)\n }\n \n #[cfg(test)]"}, {"sha": "2add705db2e8417a7796efddb2f255edf0c630db", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/326890753cd146d09d45a330016624c020abdd9e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326890753cd146d09d45a330016624c020abdd9e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=326890753cd146d09d45a330016624c020abdd9e", "patch": "@@ -7,12 +7,11 @@ use syntax::{\n     SyntaxKind::{IDENT, WHITESPACE},\n };\n \n-use crate::utils::gen_trait_body;\n use crate::{\n     assist_context::{AssistBuilder, AssistContext, Assists},\n     utils::{\n-        add_trait_assoc_items_to_impl, filter_assoc_items, generate_trait_impl_text,\n-        render_snippet, Cursor, DefaultMethods,\n+        add_trait_assoc_items_to_impl, filter_assoc_items, gen_trait_fn_body,\n+        generate_trait_impl_text, render_snippet, Cursor, DefaultMethods,\n     },\n     AssistId, AssistKind,\n };\n@@ -168,7 +167,7 @@ fn impl_def_from_trait(\n \n     // Generate a default `impl` function body for the derived trait.\n     if let ast::AssocItem::Fn(ref func) = first_assoc_item {\n-        let _ = gen_trait_body(func, trait_path, adt);\n+        let _ = gen_trait_fn_body(func, trait_path, adt);\n     };\n \n     Some((impl_def, first_assoc_item))"}, {"sha": "b4b9b6af80d04d79421eb007206c04b08de58c7c", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/326890753cd146d09d45a330016624c020abdd9e/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326890753cd146d09d45a330016624c020abdd9e/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=326890753cd146d09d45a330016624c020abdd9e", "patch": "@@ -1,7 +1,7 @@\n //! Assorted functions shared by several assists.\n \n pub(crate) mod suggest_name;\n-mod gen_trait_body;\n+mod gen_trait_fn_body;\n \n use std::ops;\n \n@@ -26,7 +26,7 @@ use syntax::{\n \n use crate::assist_context::{AssistBuilder, AssistContext};\n \n-pub(crate) use gen_trait_body::gen_trait_body;\n+pub(crate) use gen_trait_fn_body::gen_trait_fn_body;\n \n pub(crate) fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n     extract_trivial_expression(&block)"}, {"sha": "17e006a7553f33a6a67ffc6714c987aeb34b39bb", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "renamed", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/326890753cd146d09d45a330016624c020abdd9e/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326890753cd146d09d45a330016624c020abdd9e/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=326890753cd146d09d45a330016624c020abdd9e", "patch": "@@ -1,14 +1,20 @@\n //! This module contains functions to generate default trait impl function bodies where possible.\n \n-use syntax::ast::{self, edit::AstNodeEdit, make, AstNode, NameOwner};\n-use syntax::ted;\n+use syntax::{\n+    ast::{self, edit::AstNodeEdit, make, AstNode, NameOwner},\n+    ted,\n+};\n \n /// Generate custom trait bodies where possible.\n ///\n /// Returns `Option` so that we can use `?` rather than `if let Some`. Returning\n /// `None` means that generating a custom trait body failed, and the body will remain\n /// as `todo!` instead.\n-pub(crate) fn gen_trait_body(func: &ast::Fn, trait_path: &ast::Path, adt: &ast::Adt) -> Option<()> {\n+pub(crate) fn gen_trait_fn_body(\n+    func: &ast::Fn,\n+    trait_path: &ast::Path,\n+    adt: &ast::Adt,\n+) -> Option<()> {\n     match trait_path.segment()?.name_ref()?.text().as_str() {\n         \"Debug\" => gen_debug_impl(adt, func),\n         \"Default\" => gen_default_impl(adt, func),", "previous_filename": "crates/ide_assists/src/utils/gen_trait_body.rs"}, {"sha": "4e99ae67d85cd06fc7f6a05d853acc1661aaf50f", "filename": "crates/rust-analyzer/tests/slow-tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/326890753cd146d09d45a330016624c020abdd9e/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326890753cd146d09d45a330016624c020abdd9e/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs?ref=326890753cd146d09d45a330016624c020abdd9e", "patch": "@@ -280,7 +280,7 @@ fn check_todo(path: &Path, text: &str) {\n         \"ast/make.rs\",\n         // The documentation in string literals may contain anything for its own purposes\n         \"ide_db/src/helpers/generated_lints.rs\",\n-        \"ide_assists/src/utils/gen_trait_body.rs\",\n+        \"ide_assists/src/utils/gen_trait_fn_body.rs\",\n         \"ide_assists/src/tests/generated.rs\",\n     ];\n     if need_todo.iter().any(|p| path.ends_with(p)) {"}]}