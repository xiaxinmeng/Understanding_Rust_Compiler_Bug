{"sha": "b2df15d65a7baf1f8d9b8b776027a34dd6e1db10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZGYxNWQ2NWE3YmFmMWY4ZDliOGI3NzYwMjdhMzRkZDZlMWRiMTA=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-21T16:28:17Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-21T17:21:18Z"}, "message": "ptr_arg improvements (fixes #214)\n\n* do not trigger on mutable references\n* use \"real\" type from ty, not AST type", "tree": {"sha": "a8f668057f3f2b805db7c1353ca8e61eaf04eb61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8f668057f3f2b805db7c1353ca8e61eaf04eb61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2df15d65a7baf1f8d9b8b776027a34dd6e1db10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2df15d65a7baf1f8d9b8b776027a34dd6e1db10", "html_url": "https://github.com/rust-lang/rust/commit/b2df15d65a7baf1f8d9b8b776027a34dd6e1db10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2df15d65a7baf1f8d9b8b776027a34dd6e1db10/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ffe1ed3372860b7dfaa2609c7c2c9eaa5ca4041", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffe1ed3372860b7dfaa2609c7c2c9eaa5ca4041", "html_url": "https://github.com/rust-lang/rust/commit/6ffe1ed3372860b7dfaa2609c7c2c9eaa5ca4041"}], "stats": {"total": 62, "additions": 36, "deletions": 26}, "files": [{"sha": "35c61b10266e83780b3e30b3e58fbd147c29f8bd", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b2df15d65a7baf1f8d9b8b776027a34dd6e1db10/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2df15d65a7baf1f8d9b8b776027a34dd6e1db10/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=b2df15d65a7baf1f8d9b8b776027a34dd6e1db10", "patch": "@@ -4,10 +4,9 @@\n \n use rustc::lint::*;\n use syntax::ast::*;\n-use syntax::codemap::Span;\n+use rustc::middle::ty;\n \n-use types::match_ty_unwrap;\n-use utils::span_lint;\n+use utils::{span_lint, match_def_path};\n \n declare_lint! {\n     pub PTR_ARG,\n@@ -43,24 +42,32 @@ impl LintPass for PtrArg {\n     }\n }\n \n+#[allow(unused_imports)]\n fn check_fn(cx: &Context, decl: &FnDecl) {\n+    {\n+        // In case stuff gets moved around\n+        use collections::vec::Vec;\n+        use collections::string::String;\n+    }\n     for arg in &decl.inputs {\n-        match &arg.ty.node {\n-            &TyPtr(ref p) | &TyRptr(_, ref p) =>\n-                check_ptr_subtype(cx, arg.ty.span, &p.ty),\n-            _ => ()\n+        if arg.ty.node == TyInfer {  // \"self\" arguments\n+            continue;\n+        }\n+        let ref sty = cx.tcx.pat_ty(&*arg.pat).sty;\n+        if let &ty::TyRef(_, ty::TypeAndMut { ty, mutbl: MutImmutable }) = sty {\n+            if let ty::TyStruct(did, _) = ty.sty {\n+                if match_def_path(cx, did.did, &[\"collections\", \"vec\", \"Vec\"]) {\n+                    span_lint(cx, PTR_ARG, arg.ty.span,\n+                              \"writing `&Vec<_>` instead of `&[_]` involves one more reference \\\n+                               and cannot be used with non-Vec-based slices. Consider changing \\\n+                               the type to `&[...]`\");\n+                }\n+                else if match_def_path(cx, did.did, &[\"collections\", \"string\", \"String\"]) {\n+                    span_lint(cx, PTR_ARG, arg.ty.span,\n+                              \"writing `&String` instead of `&str` involves a new object \\\n+                               where a slice will do. Consider changing the type to `&str`\");\n+                }\n+            }\n         }\n     }\n }\n-\n-fn check_ptr_subtype(cx: &Context, span: Span, ty: &Ty) {\n-    match_ty_unwrap(ty, &[\"Vec\"]).map_or_else(|| match_ty_unwrap(ty,\n-        &[\"String\"]).map_or((), |_| {\n-            span_lint(cx, PTR_ARG, span,\n-                      \"writing `&String` instead of `&str` involves a new object \\\n-                       where a slice will do. Consider changing the type to `&str`\")\n-        }), |_| span_lint(cx, PTR_ARG, span,\n-                          \"writing `&Vec<_>` instead of \\\n-                           `&[_]` involves one more reference and cannot be used with \\\n-                           non-Vec-based slices. Consider changing the type to `&[...]`\"))\n-}"}, {"sha": "d0615be492b01e4d49d5ff0e8524c5cde46566e0", "filename": "tests/compile-fail/ptr_arg.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b2df15d65a7baf1f8d9b8b776027a34dd6e1db10/tests%2Fcompile-fail%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2df15d65a7baf1f8d9b8b776027a34dd6e1db10/tests%2Fcompile-fail%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_arg.rs?ref=b2df15d65a7baf1f8d9b8b776027a34dd6e1db10", "patch": "@@ -1,20 +1,23 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n+#![allow(unused)]\n+#![deny(ptr_arg)]\n \n-#[deny(ptr_arg)]\n-#[allow(unused)]\n fn do_vec(x: &Vec<i64>) { //~ERROR writing `&Vec<_>` instead of `&[_]`\n     //Nothing here\n }\n \n-#[deny(ptr_arg)]\n-#[allow(unused)]\n+fn do_vec_mut(x: &mut Vec<i64>) { // no error here\n+    //Nothing here\n+}\n+\n fn do_str(x: &String) { //~ERROR writing `&String` instead of `&str`\n     //Nothing here either\n }\n \n+fn do_str_mut(x: &mut String) { // no error here\n+    //Nothing here either\n+}\n+\n fn main() {\n-    let x = vec![1i64, 2, 3];\n-    do_vec(&x);\n-    do_str(&\"hello\".to_owned());\n }"}]}