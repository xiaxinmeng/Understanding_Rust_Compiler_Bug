{"sha": "e50c918e6b35c853813480b5c65c35813ceb6aa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MGM5MThlNmIzNWM4NTM4MTM0ODBiNWM2NWMzNTgxM2NlYjZhYTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-17T00:05:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-17T00:07:02Z"}, "message": "rustc: Implement type walking and comparison glue for unsafe pointers", "tree": {"sha": "e77b6f84000e9e4a650a1c6c528966ff047a8ed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e77b6f84000e9e4a650a1c6c528966ff047a8ed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e50c918e6b35c853813480b5c65c35813ceb6aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e50c918e6b35c853813480b5c65c35813ceb6aa1", "html_url": "https://github.com/rust-lang/rust/commit/e50c918e6b35c853813480b5c65c35813ceb6aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e50c918e6b35c853813480b5c65c35813ceb6aa1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b84fffaa4e0e672b4653a7832d75a2dc120040aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b84fffaa4e0e672b4653a7832d75a2dc120040aa", "html_url": "https://github.com/rust-lang/rust/commit/b84fffaa4e0e672b4653a7832d75a2dc120040aa"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "eced8cd9692854b51fc17d7190bb13e0fa232aa9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e50c918e6b35c853813480b5c65c35813ceb6aa1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50c918e6b35c853813480b5c65c35813ceb6aa1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e50c918e6b35c853813480b5c65c35813ceb6aa1", "patch": "@@ -2314,6 +2314,9 @@ fn make_scalar_cmp_glue(&@block_ctxt cx, ValueRef lhs, ValueRef rhs, &ty::t t,\n             trans_fail(cx, none[common::span],\n                        \"attempt to compare values of type native\");\n         }\n+        case (ty::ty_ptr(_)) {\n+            f(unsigned_int);\n+        }\n         case (_) {\n             // Should never get here, because t is scalar.\n "}, {"sha": "6823030449ac84bed0dc423aefc37b44d2db8569", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e50c918e6b35c853813480b5c65c35813ceb6aa1/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50c918e6b35c853813480b5c65c35813ceb6aa1/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=e50c918e6b35c853813480b5c65c35813ceb6aa1", "patch": "@@ -505,6 +505,7 @@ fn walk_ty(&ctxt cx, ty_walk walker, t ty) {\n         case (ty_box(?tm)) { walk_ty(cx, walker, tm.ty); }\n         case (ty_vec(?tm)) { walk_ty(cx, walker, tm.ty); }\n         case (ty_ivec(?tm)) { walk_ty(cx, walker, tm.ty); }\n+        case (ty_ptr(?tm)) { walk_ty(cx, walker, tm.ty); }\n         case (ty_port(?subty)) { walk_ty(cx, walker, subty); }\n         case (ty_chan(?subty)) { walk_ty(cx, walker, subty); }\n         case (ty_tag(?tid, ?subtys)) {\n@@ -2088,6 +2089,27 @@ mod unify {\n                     case (_) { ret ures_err(terr_mismatch); }\n                 }\n             }\n+            case (ty::ty_ptr(?expected_mt)) {\n+                alt (struct(cx.tcx, actual)) {\n+                    case (ty::ty_ptr(?actual_mt)) {\n+                        auto mut;\n+                        alt (unify_mut(expected_mt.mut, actual_mt.mut)) {\n+                            case (none) { ret ures_err(terr_vec_mutability); }\n+                            case (some(?m)) { mut = m; }\n+                        }\n+                        auto result =\n+                            unify_step(cx, expected_mt.ty, actual_mt.ty);\n+                        alt (result) {\n+                            case (ures_ok(?result_sub)) {\n+                                auto mt = rec(ty=result_sub, mut=mut);\n+                                ret ures_ok(mk_ptr(cx.tcx, mt));\n+                            }\n+                            case (_) { ret result; }\n+                        }\n+                    }\n+                    case (_) { ret ures_err(terr_mismatch); }\n+                }\n+            }\n             case (ty::ty_port(?expected_sub)) {\n                 alt (struct(cx.tcx, actual)) {\n                     case (ty::ty_port(?actual_sub)) {"}]}