{"sha": "1bdaea827ed957ce404fffee27923e9606584ce0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZGFlYTgyN2VkOTU3Y2U0MDRmZmZlZTI3OTIzZTk2MDY1ODRjZTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-06T03:14:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-10T09:37:11Z"}, "message": "Migrate all streams to synchronous closing", "tree": {"sha": "5b6331c7b312b7ee1e73740607ed8f01ed7e036c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b6331c7b312b7ee1e73740607ed8f01ed7e036c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bdaea827ed957ce404fffee27923e9606584ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bdaea827ed957ce404fffee27923e9606584ce0", "html_url": "https://github.com/rust-lang/rust/commit/1bdaea827ed957ce404fffee27923e9606584ce0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bdaea827ed957ce404fffee27923e9606584ce0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9abd998d6a5368c54162deb0bf187e94e31dc27", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9abd998d6a5368c54162deb0bf187e94e31dc27", "html_url": "https://github.com/rust-lang/rust/commit/f9abd998d6a5368c54162deb0bf187e94e31dc27"}], "stats": {"total": 46, "additions": 14, "deletions": 32}, "files": [{"sha": "28c2c4df12a0ef9260f37fea1b3fe62ff27e6649", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bdaea827ed957ce404fffee27923e9606584ce0/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bdaea827ed957ce404fffee27923e9606584ce0/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=1bdaea827ed957ce404fffee27923e9606584ce0", "patch": "@@ -313,7 +313,7 @@ impl rtio::RtioTcpStream for TcpWatcher {\n impl Drop for TcpWatcher {\n     fn drop(&mut self) {\n         let _m = self.fire_missiles();\n-        self.stream.close(true);\n+        self.stream.close();\n     }\n }\n "}, {"sha": "f79043797aedb0308ed19d428a955fe8c05752c2", "filename": "src/librustuv/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bdaea827ed957ce404fffee27923e9606584ce0/src%2Flibrustuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bdaea827ed957ce404fffee27923e9606584ce0/src%2Flibrustuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fpipe.rs?ref=1bdaea827ed957ce404fffee27923e9606584ce0", "patch": "@@ -136,7 +136,7 @@ impl HomingIO for PipeWatcher {\n impl Drop for PipeWatcher {\n     fn drop(&mut self) {\n         let _m = self.fire_missiles();\n-        self.stream.close(true); // close synchronously\n+        self.stream.close();\n     }\n }\n "}, {"sha": "745cb5a6fa090aa7231b1515737573a6fbda7e77", "filename": "src/librustuv/stream.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1bdaea827ed957ce404fffee27923e9606584ce0/src%2Flibrustuv%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bdaea827ed957ce404fffee27923e9606584ce0/src%2Flibrustuv%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fstream.rs?ref=1bdaea827ed957ce404fffee27923e9606584ce0", "patch": "@@ -10,7 +10,6 @@\n \n use std::cast;\n use std::libc::{c_int, size_t, ssize_t, c_void};\n-use std::ptr;\n use std::rt::BlockedTask;\n use std::rt::local::Local;\n use std::rt::sched::Scheduler;\n@@ -124,35 +123,23 @@ impl StreamWatcher {\n \n     // This will deallocate an internally used memory, along with closing the\n     // handle (and freeing it).\n-    //\n-    // The `synchronous` flag dictates whether this handle is closed\n-    // synchronously (the task is blocked) or asynchronously (the task is not\n-    // block, but the handle is still deallocated).\n-    pub fn close(&mut self, synchronous: bool) {\n-        if synchronous {\n-            let mut closing_task = None;\n-            unsafe {\n-                uvll::set_data_for_uv_handle(self.handle, &closing_task);\n-            }\n+    pub fn close(&mut self) {\n+        let mut closing_task = None;\n+        unsafe {\n+            uvll::set_data_for_uv_handle(self.handle, &closing_task);\n+        }\n \n-            // Wait for this stream to close because it possibly represents a remote\n-            // connection which may have consequences if we close asynchronously.\n-            let sched: ~Scheduler = Local::take();\n-            do sched.deschedule_running_task_and_then |_, task| {\n-                closing_task = Some(task);\n-                unsafe { uvll::uv_close(self.handle, close_cb) }\n-            }\n-        } else {\n-            unsafe {\n-                uvll::set_data_for_uv_handle(self.handle, ptr::null::<u8>());\n-                uvll::uv_close(self.handle, close_cb)\n-            }\n+        // Wait for this stream to close because it possibly represents a remote\n+        // connection which may have consequences if we close asynchronously.\n+        let sched: ~Scheduler = Local::take();\n+        do sched.deschedule_running_task_and_then |_, task| {\n+            closing_task = Some(task);\n+            unsafe { uvll::uv_close(self.handle, close_cb) }\n         }\n \n         extern fn close_cb(handle: *uvll::uv_handle_t) {\n             let data: *c_void = unsafe { uvll::get_data_for_uv_handle(handle) };\n             unsafe { uvll::free_handle(handle) }\n-            if data.is_null() { return }\n \n             let closing_task: &mut Option<BlockedTask> = unsafe {\n                 cast::transmute(data)"}, {"sha": "b1bc378e6176608c44dc30876ffcb2cf314ef96d", "filename": "src/librustuv/tty.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1bdaea827ed957ce404fffee27923e9606584ce0/src%2Flibrustuv%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bdaea827ed957ce404fffee27923e9606584ce0/src%2Flibrustuv%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftty.rs?ref=1bdaea827ed957ce404fffee27923e9606584ce0", "patch": "@@ -101,13 +101,8 @@ impl HomingIO for TtyWatcher {\n }\n \n impl Drop for TtyWatcher {\n-    // TTY handles are used for the logger in a task, so this destructor is run\n-    // when a task is destroyed. When a task is being destroyed, a local\n-    // scheduler isn't available, so we can't do the normal \"take the scheduler\n-    // and resume once close is done\". Instead close operations on a TTY are\n-    // asynchronous.\n     fn drop(&mut self) {\n         let _m = self.fire_missiles();\n-        self.stream.close(false);\n+        self.stream.close();\n     }\n }"}]}