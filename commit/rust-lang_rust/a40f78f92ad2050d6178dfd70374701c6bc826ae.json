{"sha": "a40f78f92ad2050d6178dfd70374701c6bc826ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MGY3OGY5MmFkMjA1MGQ2MTc4ZGZkNzAzNzQ3MDFjNmJjODI2YWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-22T15:59:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-22T16:15:34Z"}, "message": "More useful fn detail in completion\n\nDetail should be rendered as shtort one line, just dumping fn header\nthere is not useful, despite the fact that TS does this.\n\nThe fact that this is a function should be indicated by the icon, the\nsame goes for pub/const/async etc qualitfiers\n\nname is already present in the lable (and arg list should be a part of\nthat, as in idea)\n\nBut the return type is the small genuinerlly useful bit of info we can show here", "tree": {"sha": "bd1b08a23eeaecea0b2413454cca2ca0c6631bfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd1b08a23eeaecea0b2413454cca2ca0c6631bfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40f78f92ad2050d6178dfd70374701c6bc826ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40f78f92ad2050d6178dfd70374701c6bc826ae", "html_url": "https://github.com/rust-lang/rust/commit/a40f78f92ad2050d6178dfd70374701c6bc826ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40f78f92ad2050d6178dfd70374701c6bc826ae/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02a17cdffcfdea49981b4642be3027e564d28d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/02a17cdffcfdea49981b4642be3027e564d28d9b", "html_url": "https://github.com/rust-lang/rust/commit/02a17cdffcfdea49981b4642be3027e564d28d9b"}], "stats": {"total": 178, "additions": 85, "deletions": 93}, "files": [{"sha": "0880a38304e44d5154b89a078150b46a5a62006c", "filename": "crates/completion/src/completions/dot.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs?ref=a40f78f92ad2050d6178dfd70374701c6bc826ae", "patch": "@@ -83,7 +83,7 @@ fn foo(s: S) { s.$0 }\n \"#,\n             expect![[r#\"\n                 fd foo   u32\n-                me bar() fn bar(&self)\n+                me bar() -> ()\n             \"#]],\n         );\n     }\n@@ -99,7 +99,7 @@ impl S {\n \"#,\n             expect![[r#\"\n                 fd the_field (u32,)\n-                me foo()     fn foo(self)\n+                me foo()     -> ()\n             \"#]],\n         )\n     }\n@@ -115,7 +115,7 @@ impl A {\n \"#,\n             expect![[r#\"\n                 fd the_field (u32, i32)\n-                me foo()     fn foo(&self)\n+                me foo()     -> ()\n             \"#]],\n         )\n     }\n@@ -165,7 +165,7 @@ mod m {\n fn foo(a: A) { a.$0 }\n \"#,\n             expect![[r#\"\n-                me the_method() pub(crate) fn the_method(&self)\n+                me the_method() -> ()\n             \"#]],\n         );\n     }\n@@ -198,7 +198,7 @@ impl A<i32> {\n fn foo(a: A<u32>) { a.$0 }\n \"#,\n             expect![[r#\"\n-                me the_method() fn the_method(&self)\n+                me the_method() -> ()\n             \"#]],\n         )\n     }\n@@ -213,7 +213,7 @@ impl Trait for A {}\n fn foo(a: A) { a.$0 }\n \"#,\n             expect![[r#\"\n-                me the_method() fn the_method(&self)\n+                me the_method() -> ()\n             \"#]],\n         );\n     }\n@@ -228,7 +228,7 @@ impl<T> Trait for T {}\n fn foo(a: &A) { a.$0 }\n \",\n             expect![[r#\"\n-                me the_method() fn the_method(&self)\n+                me the_method() -> ()\n             \"#]],\n         );\n     }\n@@ -246,7 +246,7 @@ impl Trait for A {}\n fn foo(a: A) { a.$0 }\n \",\n             expect![[r#\"\n-                me the_method() fn the_method(&self)\n+                me the_method() -> ()\n             \"#]],\n         );\n     }\n@@ -300,7 +300,7 @@ impl T {\n }\n \"#,\n             expect![[r#\"\n-                me blah() pub fn blah(&self)\n+                me blah() -> ()\n             \"#]],\n         );\n     }\n@@ -409,7 +409,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                me the_method() pub fn the_method(&self)\n+                me the_method() -> ()\n             \"#]],\n         );\n     }\n@@ -424,7 +424,7 @@ macro_rules! make_s { () => { S }; }\n fn main() { make_s!().f$0; }\n \"#,\n             expect![[r#\"\n-                me foo() fn foo(&self)\n+                me foo() -> ()\n             \"#]],\n         )\n     }"}, {"sha": "6591127b1de8270bab106498ced4f9054467933c", "filename": "crates/completion/src/completions/flyimport.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=a40f78f92ad2050d6178dfd70374701c6bc826ae", "patch": "@@ -366,8 +366,8 @@ fn main() {\n         check(\n             fixture,\n             expect![[r#\"\n-            fn weird_function() (dep::test_mod::TestTrait) fn weird_function()\n-        \"#]],\n+                fn weird_function() (dep::test_mod::TestTrait) -> ()\n+            \"#]],\n         );\n \n         check_edit(\n@@ -459,8 +459,8 @@ fn main() {\n         check(\n             fixture,\n             expect![[r#\"\n-            me random_method() (dep::test_mod::TestTrait) fn random_method(&self)\n-        \"#]],\n+                me random_method() (dep::test_mod::TestTrait) -> ()\n+            \"#]],\n         );\n \n         check_edit(\n@@ -629,8 +629,8 @@ fn main() {\n }\n         \"#,\n             expect![[r#\"\n-                        me random_method() (dep::test_mod::TestTrait) fn random_method(&self) DEPRECATED\n-                \"#]],\n+                me random_method() (dep::test_mod::TestTrait) -> () DEPRECATED\n+            \"#]],\n         );\n \n         check(\n@@ -660,8 +660,8 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 ct SPECIAL_CONST (dep::test_mod::TestTrait) DEPRECATED\n-                fn weird_function() (dep::test_mod::TestTrait) fn weird_function() DEPRECATED\n-        \"#]],\n+                fn weird_function() (dep::test_mod::TestTrait) -> () DEPRECATED\n+            \"#]],\n         );\n     }\n }"}, {"sha": "bbeaab4965740cc5eca7b2055641f3baab372027", "filename": "crates/completion/src/completions/qualified_path.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=a40f78f92ad2050d6178dfd70374701c6bc826ae", "patch": "@@ -359,8 +359,8 @@ impl S {\n fn foo() { let _ = S::$0 }\n \"#,\n             expect![[r#\"\n-                fn a()  fn a()\n-                me b(\u2026) fn b(&self)\n+                fn a()  -> ()\n+                me b(\u2026) -> ()\n                 ct C    const C: i32 = 42;\n                 ta T    type T = i32;\n             \"#]],\n@@ -387,7 +387,7 @@ mod m {\n fn foo() { let _ = S::$0 }\n \"#,\n             expect![[r#\"\n-                fn public_method() pub(crate) fn public_method()\n+                fn public_method() -> ()\n                 ct PUBLIC_CONST    pub(crate) const PUBLIC_CONST: u32 = 1;\n                 ta PublicType      pub(crate) type PublicType = u32;\n             \"#]],\n@@ -404,7 +404,7 @@ impl E { fn m() { } }\n fn foo() { let _ = E::$0 }\n         \"#,\n             expect![[r#\"\n-                fn m() fn m()\n+                fn m() -> ()\n             \"#]],\n         );\n     }\n@@ -419,7 +419,7 @@ impl U { fn m() { } }\n fn foo() { let _ = U::$0 }\n \"#,\n             expect![[r#\"\n-                fn m() fn m()\n+                fn m() -> ()\n             \"#]],\n         );\n     }\n@@ -449,7 +449,7 @@ trait Trait { fn m(); }\n fn foo() { let _ = Trait::$0 }\n \"#,\n             expect![[r#\"\n-                fn m() fn m()\n+                fn m() -> ()\n             \"#]],\n         );\n     }\n@@ -466,7 +466,7 @@ impl Trait for S {}\n fn foo() { let _ = S::$0 }\n \"#,\n             expect![[r#\"\n-                fn m() fn m()\n+                fn m() -> ()\n             \"#]],\n         );\n     }\n@@ -483,7 +483,7 @@ impl Trait for S {}\n fn foo() { let _ = <S as Trait>::$0 }\n \"#,\n             expect![[r#\"\n-                fn m() fn m()\n+                fn m() -> ()\n             \"#]],\n         );\n     }\n@@ -512,11 +512,11 @@ fn foo<T: Sub>() { T::$0 }\n                 ta SubTy        type SubTy;\n                 ta Ty           type Ty;\n                 ct C2           const C2: ();\n-                fn subfunc()    fn subfunc()\n-                me submethod(\u2026) fn submethod(&self)\n+                fn subfunc()    -> ()\n+                me submethod(\u2026) -> ()\n                 ct CONST        const CONST: u8;\n-                fn func()       fn func()\n-                me method(\u2026)    fn method(&self)\n+                fn func()       -> ()\n+                me method(\u2026)    -> ()\n             \"#]],\n         );\n     }\n@@ -552,11 +552,11 @@ impl<T> Sub for Wrap<T> {\n                 ta SubTy        type SubTy;\n                 ta Ty           type Ty;\n                 ct CONST        const CONST: u8 = 0;\n-                fn func()       fn func()\n-                me method(\u2026)    fn method(&self)\n+                fn func()       -> ()\n+                me method(\u2026)    -> ()\n                 ct C2           const C2: () = ();\n-                fn subfunc()    fn subfunc()\n-                me submethod(\u2026) fn submethod(&self)\n+                fn subfunc()    -> ()\n+                me submethod(\u2026) -> ()\n             \"#]],\n         );\n     }\n@@ -573,8 +573,8 @@ impl T { fn bar() {} }\n fn main() { T::$0; }\n \"#,\n             expect![[r#\"\n-                fn foo() fn foo()\n-                fn bar() fn bar()\n+                fn foo() -> ()\n+                fn bar() -> ()\n             \"#]],\n         );\n     }\n@@ -589,7 +589,7 @@ macro_rules! foo { () => {} }\n fn main() { let _ = crate::$0 }\n         \"#,\n             expect![[r##\"\n-                fn main()  fn main()\n+                fn main()  -> ()\n                 ma foo!(\u2026) #[macro_export] macro_rules! foo\n             \"##]],\n         );\n@@ -633,7 +633,7 @@ mod p {\n \"#,\n             expect![[r#\"\n                 ct RIGHT_CONST\n-                fn right_fn()  fn wrong_fn()\n+                fn right_fn()  -> ()\n                 st RightType\n             \"#]],\n         );\n@@ -680,8 +680,8 @@ fn main() { m!(self::f$0); }\n fn foo() {}\n \"#,\n             expect![[r#\"\n-                fn main() fn main()\n-                fn foo()  fn foo()\n+                fn main() -> ()\n+                fn foo()  -> ()\n             \"#]],\n         );\n     }\n@@ -699,7 +699,7 @@ mod m {\n \"#,\n             expect![[r#\"\n                 md z\n-                fn z() pub fn z()\n+                fn z() -> ()\n             \"#]],\n         );\n     }\n@@ -719,7 +719,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                fn new() pub fn new() -> HashMap<K, V, RandomState>\n+                fn new() -> HashMap<K, V, RandomState>\n             \"#]],\n         );\n     }\n@@ -752,8 +752,8 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                fn main() fn main()\n-                fn foo(\u2026) fn foo(a: i32, b: i32)\n+                fn main() -> ()\n+                fn foo(\u2026) -> ()\n             \"#]],\n         );\n     }\n@@ -776,7 +776,7 @@ impl Foo {\n             expect![[r#\"\n                 ev Bar    ()\n                 ev Baz    ()\n-                me foo(\u2026) fn foo(self)\n+                me foo(\u2026) -> ()\n             \"#]],\n         );\n     }"}, {"sha": "b999540b84d6563b62fceec54449e0caeb07b858", "filename": "crates/completion/src/completions/trait_impl.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=a40f78f92ad2050d6178dfd70374701c6bc826ae", "patch": "@@ -679,11 +679,6 @@ impl Test for () {\n     #[test]\n     fn complete_without_name() {\n         let test = |completion: &str, hint: &str, completed: &str, next_sibling: &str| {\n-            println!(\n-                \"completion='{}', hint='{}', next_sibling='{}'\",\n-                completion, hint, next_sibling\n-            );\n-\n             check_edit(\n                 completion,\n                 &format!("}, {"sha": "5d62fab9743e0c5bcca7fc2163704caf6b48b062", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=a40f78f92ad2050d6178dfd70374701c6bc826ae", "patch": "@@ -167,7 +167,7 @@ fn quux(x: i32) {\n             expect![[r#\"\n                 lc y       i32\n                 lc x       i32\n-                fn quux(\u2026) fn quux(x: i32)\n+                fn quux(\u2026) -> ()\n             \"#]],\n         );\n     }\n@@ -189,7 +189,7 @@ fn quux() {\n             expect![[r#\"\n                 lc b      i32\n                 lc a\n-                fn quux() fn quux()\n+                fn quux() -> ()\n             \"#]],\n         );\n     }\n@@ -204,7 +204,7 @@ fn quux() {\n \"#,\n             expect![[r#\"\n                 lc x\n-                fn quux() fn quux()\n+                fn quux() -> ()\n             \"#]],\n         );\n     }\n@@ -235,14 +235,14 @@ fn main() {\n             r#\"fn quux<T>() { $0 }\"#,\n             expect![[r#\"\n                 tp T\n-                fn quux() fn quux<T>()\n+                fn quux() -> ()\n             \"#]],\n         );\n         check(\n             r#\"fn quux<const C: usize>() { $0 }\"#,\n             expect![[r#\"\n                 cp C\n-                fn quux() fn quux<const C: usize>()\n+                fn quux() -> ()\n             \"#]],\n         );\n     }\n@@ -253,7 +253,7 @@ fn main() {\n         check(\n             r#\"fn quux<'a>() { $0 }\"#,\n             expect![[r#\"\n-                fn quux() fn quux<'a>()\n+                fn quux() -> ()\n             \"#]],\n         );\n     }\n@@ -291,7 +291,7 @@ fn quux() { $0 }\n \"#,\n             expect![[r#\"\n                 st S\n-                fn quux() fn quux()\n+                fn quux() -> ()\n                 en E\n             \"#]],\n         );\n@@ -344,7 +344,7 @@ mod m {\n }\n \"#,\n             expect![[r#\"\n-                fn quux() fn quux()\n+                fn quux() -> ()\n                 st Bar\n             \"#]],\n         );\n@@ -359,7 +359,7 @@ fn x() -> $0\n \"#,\n             expect![[r#\"\n                 st Foo\n-                fn x() fn x()\n+                fn x() -> ()\n             \"#]],\n         );\n     }\n@@ -380,7 +380,7 @@ fn foo() {\n             expect![[r#\"\n                 lc bar   i32\n                 lc bar   i32\n-                fn foo() fn foo()\n+                fn foo() -> ()\n             \"#]],\n         );\n     }\n@@ -410,7 +410,7 @@ use prelude::*;\n mod prelude { struct Option; }\n \"#,\n             expect![[r#\"\n-                fn foo()  fn foo()\n+                fn foo()  -> ()\n                 md std\n                 st Option\n             \"#]],\n@@ -440,7 +440,7 @@ mod macros {\n }\n \"#,\n             expect![[r##\"\n-                fn f()        fn f()\n+                fn f()        -> ()\n                 ma concat!(\u2026) #[macro_export] macro_rules! concat\n                 md std\n             \"##]],\n@@ -467,7 +467,7 @@ use prelude::*;\n mod prelude { struct String; }\n \"#,\n             expect![[r#\"\n-                fn foo()  fn foo()\n+                fn foo()  -> ()\n                 md std\n                 md core\n                 st String\n@@ -498,7 +498,7 @@ fn main() { let v = $0 }\n             expect![[r##\"\n                 md m1\n                 ma baz!(\u2026) #[macro_export] macro_rules! baz\n-                fn main()  fn main()\n+                fn main()  -> ()\n                 md m2\n                 ma bar!(\u2026) macro_rules! bar\n                 ma foo!(\u2026) macro_rules! foo\n@@ -514,7 +514,7 @@ macro_rules! foo { () => {} }\n fn foo() { $0 }\n \"#,\n             expect![[r#\"\n-                fn foo()   fn foo()\n+                fn foo()   -> ()\n                 ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         );\n@@ -528,7 +528,7 @@ macro_rules! foo { () => {} }\n fn main() { let x: $0 }\n \"#,\n             expect![[r#\"\n-                fn main()  fn main()\n+                fn main()  -> ()\n                 ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         );\n@@ -542,7 +542,7 @@ macro_rules! foo { () => {} }\n fn main() { $0 }\n \"#,\n             expect![[r#\"\n-                fn main()  fn main()\n+                fn main()  -> ()\n                 ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         );\n@@ -558,8 +558,8 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                fn frobnicate() fn frobnicate()\n-                fn main()       fn main()\n+                fn frobnicate() -> ()\n+                fn main()       -> ()\n             \"#]],\n         );\n     }\n@@ -577,7 +577,7 @@ fn quux(x: i32) {\n             expect![[r#\"\n                 lc y       i32\n                 lc x       i32\n-                fn quux(\u2026) fn quux(x: i32)\n+                fn quux(\u2026) -> ()\n                 ma m!(\u2026)   macro_rules! m\n             \"#]],\n         );\n@@ -596,7 +596,7 @@ fn quux(x: i32) {\n             expect![[r#\"\n                 lc y       i32\n                 lc x       i32\n-                fn quux(\u2026) fn quux(x: i32)\n+                fn quux(\u2026) -> ()\n                 ma m!(\u2026)   macro_rules! m\n             \"#]],\n         );\n@@ -615,7 +615,7 @@ fn quux(x: i32) {\n             expect![[r#\"\n                 lc y       i32\n                 lc x       i32\n-                fn quux(\u2026) fn quux(x: i32)\n+                fn quux(\u2026) -> ()\n                 ma m!(\u2026)   macro_rules! m\n             \"#]],\n         );\n@@ -630,7 +630,7 @@ use spam::Quux;\n fn main() { $0 }\n \"#,\n             expect![[r#\"\n-                fn main() fn main()\n+                fn main() -> ()\n                 ?? Quux\n             \"#]],\n         );\n@@ -708,7 +708,7 @@ fn main() { let foo: Foo = Q$0 }\n                 ev Foo::Baz  ()\n                 ev Foo::Quux ()\n                 en Foo\n-                fn main()    fn main()\n+                fn main()    -> ()\n             \"#]],\n         )\n     }\n@@ -723,7 +723,7 @@ fn f() -> m::E { V$0 }\n             expect![[r#\"\n                 ev m::E::V ()\n                 md m\n-                fn f()     fn f() -> m::E\n+                fn f()     -> E\n             \"#]],\n         )\n     }"}, {"sha": "eeb952ec3c54e2b644227bc030d491fa78e635f4", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=a40f78f92ad2050d6178dfd70374701c6bc826ae", "patch": "@@ -398,14 +398,13 @@ impl Builder {\n         self.insert_text_format = InsertTextFormat::Snippet;\n         self.text_edit(edit)\n     }\n-    #[allow(unused)]\n     pub(crate) fn detail(self, detail: impl Into<String>) -> Builder {\n         self.set_detail(Some(detail))\n     }\n     pub(crate) fn set_detail(mut self, detail: Option<impl Into<String>>) -> Builder {\n         self.detail = detail.map(Into::into);\n         if let Some(detail) = &self.detail {\n-            if assert_never!(detail.contains('\\n'), \"multiline detail: {}\", detail) {\n+            if assert_never!(detail.contains('\\n'), \"multiline detail:\\n{}\", detail) {\n                 self.detail = Some(detail.splitn(2, '\\n').next().unwrap().to_string());\n             }\n         }"}, {"sha": "50329b4990fd5c2fe3b880353bf9833c8113a335", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=a40f78f92ad2050d6178dfd70374701c6bc826ae", "patch": "@@ -227,7 +227,7 @@ mod tests {\n                 bar.fo$0;\n             }\n             \"#,\n-            DetailAndDocumentation { detail: \"fn foo(&self)\", documentation: \"Do the foo\" },\n+            DetailAndDocumentation { detail: \"-> ()\", documentation: \"Do the foo\" },\n         );\n     }\n \n@@ -253,7 +253,7 @@ mod tests {\n                 bar.fo$0;\n             }\n             \"#,\n-            DetailAndDocumentation { detail: \"fn foo(&self)\", documentation: \" Do the foo\" },\n+            DetailAndDocumentation { detail: \"-> ()\", documentation: \" Do the foo\" },\n         );\n     }\n \n@@ -277,10 +277,7 @@ mod tests {\n                 for c in fo$0\n             }\n             \"#,\n-            DetailAndDocumentation {\n-                detail: \"fn foo() -> &'static str\",\n-                documentation: \"Do the foo\",\n-            },\n+            DetailAndDocumentation { detail: \"-> &str\", documentation: \"Do the foo\" },\n         );\n     }\n }"}, {"sha": "6eb20df2bf474b0be45bb253ed517ae1de92510a", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=a40f78f92ad2050d6178dfd70374701c6bc826ae", "patch": "@@ -523,7 +523,7 @@ fn main() { let _: m::Spam = S$0 }\n                             Function,\n                         ),\n                         lookup: \"main\",\n-                        detail: \"fn main()\",\n+                        detail: \"-> ()\",\n                     },\n                 ]\n             \"#]],\n@@ -552,7 +552,7 @@ fn main() { som$0 }\n                             Function,\n                         ),\n                         lookup: \"main\",\n-                        detail: \"fn main()\",\n+                        detail: \"-> ()\",\n                     },\n                     CompletionItem {\n                         label: \"something_deprecated()\",\n@@ -563,7 +563,7 @@ fn main() { som$0 }\n                             Function,\n                         ),\n                         lookup: \"something_deprecated\",\n-                        detail: \"fn something_deprecated()\",\n+                        detail: \"-> ()\",\n                         deprecated: true,\n                     },\n                     CompletionItem {\n@@ -575,7 +575,7 @@ fn main() { som$0 }\n                             Function,\n                         ),\n                         lookup: \"something_else_deprecated\",\n-                        detail: \"fn something_else_deprecated()\",\n+                        detail: \"-> ()\",\n                         deprecated: true,\n                     },\n                 ]\n@@ -626,7 +626,7 @@ impl S {\n                         insert: \"bar()$0\",\n                         kind: Method,\n                         lookup: \"bar\",\n-                        detail: \"fn bar(self)\",\n+                        detail: \"-> ()\",\n                         documentation: Documentation(\n                             \"Method docs\",\n                         ),\n@@ -726,7 +726,7 @@ fn foo(s: S) { s.$0 }\n                         insert: \"the_method()$0\",\n                         kind: Method,\n                         lookup: \"the_method\",\n-                        detail: \"fn the_method(&self)\",\n+                        detail: \"-> ()\",\n                     },\n                 ]\n             \"#]],"}, {"sha": "e46e21d243fb07671f4f153a0963e2dc8e62ef16", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40f78f92ad2050d6178dfd70374701c6bc826ae/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=a40f78f92ad2050d6178dfd70374701c6bc826ae", "patch": "@@ -1,8 +1,8 @@\n //! Renderer for function calls.\n \n-use hir::{HasSource, Type};\n+use hir::{HasSource, HirDisplay, Type};\n use ide_db::SymbolKind;\n-use syntax::{ast::Fn, display::function_declaration};\n+use syntax::ast::Fn;\n use test_utils::mark;\n \n use crate::{\n@@ -55,7 +55,8 @@ impl<'a> FunctionRender<'a> {\n     }\n \n     fn detail(&self) -> String {\n-        function_declaration(&self.ast_node)\n+        let ty = self.func.ret_type(self.ctx.db());\n+        format!(\"-> {}\", ty.display(self.ctx.db()))\n     }\n \n     fn add_arg(&self, arg: &str, ty: &Type) -> String {"}]}