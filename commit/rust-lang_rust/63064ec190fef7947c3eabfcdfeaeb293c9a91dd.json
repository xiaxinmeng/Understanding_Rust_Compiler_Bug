{"sha": "63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMDY0ZWMxOTBmZWY3OTQ3YzNlYWJmY2RmZWFlYjI5M2M5YTkxZGQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-14T16:00:08Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-15T22:31:06Z"}, "message": "rustc: expose monomorphic const_eval through on-demand.", "tree": {"sha": "72c3b485ac4bd11130bff681332e836f5633ae1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72c3b485ac4bd11130bff681332e836f5633ae1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "html_url": "https://github.com/rust-lang/rust/commit/63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8854164d0cda3c90f6c3c774d8acf891599e4da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8854164d0cda3c90f6c3c774d8acf891599e4da3", "html_url": "https://github.com/rust-lang/rust/commit/8854164d0cda3c90f6c3c774d8acf891599e4da3"}], "stats": {"total": 116, "additions": 61, "deletions": 55}, "files": [{"sha": "62b853480394fd5c54568bb78fd3b7e7642bd006", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -760,7 +760,6 @@ dependencies = [\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -781,7 +780,6 @@ dependencies = [\n  \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_driver 0.0.0\",\n  \"rustc_errors 0.0.0\","}, {"sha": "b4c5af9401944102f6b9b613b05e01b0259fb0c9", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -11,9 +11,12 @@\n use self::ConstVal::*;\n pub use rustc_const_math::ConstInt;\n \n+use hir;\n+use hir::def::Def;\n use hir::def_id::DefId;\n-use ty::TyCtxt;\n+use ty::{self, TyCtxt};\n use ty::subst::Substs;\n+use util::common::ErrorReported;\n use rustc_const_math::*;\n \n use graphviz::IntoCow;\n@@ -215,3 +218,35 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         self.struct_error(tcx, primary_span, primary_kind).emit();\n     }\n }\n+\n+/// Returns the value of the length-valued expression\n+pub fn eval_length(tcx: TyCtxt,\n+                   count: hir::BodyId,\n+                   reason: &str)\n+                   -> Result<usize, ErrorReported>\n+{\n+    let count_expr = &tcx.hir.body(count).value;\n+    let count_def_id = tcx.hir.body_owner_def_id(count);\n+    match ty::queries::monomorphic_const_eval::get(tcx, count_expr.span, count_def_id) {\n+        Ok(Integral(Usize(count))) => {\n+            let val = count.as_u64(tcx.sess.target.uint_type);\n+            assert_eq!(val as usize as u64, val);\n+            Ok(val as usize)\n+        },\n+        Ok(_) |\n+        Err(ConstEvalErr { kind: ErrKind::TypeckError, .. }) => Err(ErrorReported),\n+        Err(err) => {\n+            let mut diag = err.struct_error(tcx, count_expr.span, reason);\n+\n+            if let hir::ExprPath(hir::QPath::Resolved(None, ref path)) = count_expr.node {\n+                if let Def::Local(..) = path.def {\n+                    diag.note(&format!(\"`{}` is a variable\",\n+                                       tcx.hir.node_to_pretty_string(count_expr.id)));\n+                }\n+            }\n+\n+            diag.emit();\n+            Err(ErrorReported)\n+        }\n+    }\n+}"}, {"sha": "bf8085be31c44072da12e63a6b828d01fe4cee04", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 15, "deletions": 34, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -18,6 +18,7 @@ use rustc::traits;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::subst::{Substs, Subst};\n use rustc::traits::Reveal;\n@@ -163,12 +164,6 @@ pub struct ConstContext<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> ConstContext<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, body: hir::BodyId) -> Self {\n-        let def_id = tcx.hir.body_owner_def_id(body);\n-        ty::queries::mir_const_qualif::get(tcx, DUMMY_SP, def_id);\n-        ConstContext::with_tables(tcx, tcx.item_tables(def_id))\n-    }\n-\n     pub fn with_tables(tcx: TyCtxt<'a, 'tcx, 'tcx>, tables: &'a ty::TypeckTables<'tcx>) -> Self {\n         ConstContext {\n             tcx: tcx,\n@@ -799,34 +794,20 @@ impl<'a, 'tcx> ConstContext<'a, 'tcx> {\n     }\n }\n \n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        monomorphic_const_eval,\n+        ..*providers\n+    };\n+}\n \n-/// Returns the value of the length-valued expression\n-pub fn eval_length<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             count: hir::BodyId,\n-                             reason: &str)\n-                             -> Result<usize, ErrorReported>\n-{\n-    let count_expr = &tcx.hir.body(count).value;\n-    match ConstContext::new(tcx, count).eval(count_expr) {\n-        Ok(Integral(Usize(count))) => {\n-            let val = count.as_u64(tcx.sess.target.uint_type);\n-            assert_eq!(val as usize as u64, val);\n-            Ok(val as usize)\n-        },\n-        Ok(_) |\n-        Err(ConstEvalErr { kind: TypeckError, .. }) => Err(ErrorReported),\n-        Err(err) => {\n-            let mut diag = err.struct_error(tcx, count_expr.span, reason);\n-\n-            if let hir::ExprPath(hir::QPath::Resolved(None, ref path)) = count_expr.node {\n-                if let Def::Local(..) = path.def {\n-                    diag.note(&format!(\"`{}` is a variable\",\n-                                       tcx.hir.node_to_pretty_string(count_expr.id)));\n-                }\n-            }\n+fn monomorphic_const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                    def_id: DefId)\n+                                    -> EvalResult<'tcx> {\n+    ty::queries::mir_const_qualif::get(tcx, DUMMY_SP, def_id);\n+    let cx = ConstContext::with_tables(tcx, tcx.item_tables(def_id));\n \n-            diag.emit();\n-            Err(ErrorReported)\n-        }\n-    }\n+    let id = tcx.hir.as_local_node_id(def_id).unwrap();\n+    let body = tcx.hir.body_owned_by(id);\n+    cx.eval(&tcx.hir.body(body).value)\n }"}, {"sha": "c856ea505ffe891f03d8e739add478b85356d36e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -37,7 +37,7 @@ use rustc_plugin::registry::Registry;\n use rustc_plugin as plugin;\n use rustc_passes::{ast_validation, no_asm, loops, consts,\n                    static_recursion, hir_stats, mir_stats};\n-use rustc_const_eval::check_match;\n+use rustc_const_eval::{self, check_match};\n use super::Compilation;\n \n use serialize::json;\n@@ -895,6 +895,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     typeck::provide(&mut local_providers);\n     ty::provide(&mut local_providers);\n     reachable::provide(&mut local_providers);\n+    rustc_const_eval::provide(&mut local_providers);\n \n     let mut extern_providers = ty::maps::Providers::default();\n     cstore::provide(&mut extern_providers);"}, {"sha": "b7de50efe34424bb14e621b60a6d1609825638b1", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -17,7 +17,6 @@ use hair::cx::to_ref::ToRef;\n use rustc::hir::map;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::middle::const_val::ConstVal;\n-use rustc_const_eval::ConstContext;\n use rustc::ty::{self, AdtKind, VariantDef, Ty};\n use rustc::ty::cast::CastKind as TyCastKind;\n use rustc::hir;\n@@ -592,9 +591,9 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n         // Now comes the rote stuff:\n         hir::ExprRepeat(ref v, count) => {\n-            let tcx = cx.tcx.global_tcx();\n             let c = &cx.tcx.hir.body(count).value;\n-            let count = match ConstContext::new(tcx, count).eval(c) {\n+            let def_id = cx.tcx.hir.body_owner_def_id(count);\n+            let count = match ty::queries::monomorphic_const_eval::get(cx.tcx, c.span, def_id) {\n                 Ok(ConstVal::Integral(ConstInt::Usize(u))) => u,\n                 Ok(other) => bug!(\"constant evaluation of repeat count yielded {:?}\", other),\n                 Err(s) => cx.fatal_const_eval_err(&s, c.span, \"expression\")"}, {"sha": "194d37dcb81c22c40d096612aebb489c641332d4", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -16,7 +16,6 @@ arena = { path = \"../libarena\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n-rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }"}, {"sha": "9426d601dfcce3cc6b704d9e2ee5d0c85dcc408c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -12,7 +12,7 @@\n //! representation.  The main routine here is `ast_ty_to_ty()`: each use\n //! is parameterized by an instance of `AstConv`.\n \n-use rustc_const_eval::eval_length;\n+use rustc::middle::const_val::eval_length;\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n use hir;\n use hir::def::Def;\n@@ -1208,7 +1208,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 self.associated_path_def_to_ty(ast_ty.id, ast_ty.span, ty, def, segment).0\n             }\n             hir::TyArray(ref ty, length) => {\n-                if let Ok(length) = eval_length(tcx.global_tcx(), length, \"array length\") {\n+                if let Ok(length) = eval_length(tcx, length, \"array length\") {\n                     tcx.mk_array(self.ast_ty_to_ty(&ty), length)\n                 } else {\n                     self.tcx().types.err"}, {"sha": "d2c9fd119d72b5d4c66025822cd5f8f4427ba261", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -126,7 +126,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, PatKind};\n use rustc::middle::lang_items;\n use rustc_back::slice;\n-use rustc_const_eval::eval_length;\n+use rustc::middle::const_val::eval_length;\n use rustc_const_math::ConstInt;\n \n mod assoc;\n@@ -3634,7 +3634,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               tcx.mk_array(element_ty, args.len())\n           }\n           hir::ExprRepeat(ref element, count) => {\n-            let count = eval_length(self.tcx.global_tcx(), count, \"repeat count\")\n+            let count = eval_length(self.tcx, count, \"repeat count\")\n                   .unwrap_or(0);\n \n             let uty = match expected {"}, {"sha": "73e3de0cc76ddc4293f48a2196adda06b92a1aec", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -59,14 +59,12 @@ use constrained_type_params as ctp;\n use middle::lang_items::SizedTraitLangItem;\n use middle::const_val::ConstVal;\n use middle::resolve_lifetime as rl;\n-use rustc_const_eval::ConstContext;\n use rustc::ty::subst::Substs;\n use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n use rustc::dep_graph::DepNode;\n-use util::common::MemoizationMap;\n use util::nodemap::{NodeMap, FxHashMap};\n \n use rustc_const_math::ConstInt;\n@@ -600,9 +598,7 @@ fn convert_enum_variant_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let wrapped_discr = prev_discr.map_or(initial, |d| d.wrap_incr());\n         prev_discr = Some(if let Some(e) = variant.node.disr_expr {\n             let expr_did = tcx.hir.local_def_id(e.node_id);\n-            let result = tcx.maps.monomorphic_const_eval.memoize(expr_did, || {\n-                ConstContext::new(tcx, e).eval(&tcx.hir.body(e).value)\n-            });\n+            let result = ty::queries::monomorphic_const_eval::get(tcx, variant.span, expr_did);\n \n             // enum variant evaluation happens before the global constant check\n             // so we need to report the real error"}, {"sha": "e9d52c5eb98d94630d8e669f701e5a1ab8370dbb", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -94,7 +94,6 @@ extern crate fmt_macros;\n extern crate rustc_platform_intrinsics as intrinsics;\n extern crate rustc_back;\n extern crate rustc_const_math;\n-extern crate rustc_const_eval;\n extern crate rustc_data_structures;\n extern crate rustc_errors as errors;\n "}, {"sha": "e81acf7bdba82b1d109a2132b1d04053db07dac4", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -14,7 +14,6 @@ env_logger = { version = \"0.4\", default-features = false }\n log = \"0.3\"\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n-rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_driver = { path = \"../librustc_driver\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "47e1d0b7edb2ad010dd2c884e905af001520eb02", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -1715,7 +1715,7 @@ impl Clean<Type> for hir::Ty {\n             }\n             TySlice(ref ty) => Vector(box ty.clean(cx)),\n             TyArray(ref ty, length) => {\n-                use rustc_const_eval::eval_length;\n+                use rustc::middle::const_val::eval_length;\n                 let n = eval_length(cx.tcx, length, \"array length\").unwrap();\n                 FixedVector(box ty.clean(cx), n.to_string())\n             },"}, {"sha": "d5b997001bb9deed6297102df90d603fb2737c53", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63064ec190fef7947c3eabfcdfeaeb293c9a91dd/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=63064ec190fef7947c3eabfcdfeaeb293c9a91dd", "patch": "@@ -33,7 +33,6 @@ extern crate getopts;\n extern crate env_logger;\n extern crate libc;\n extern crate rustc;\n-extern crate rustc_const_eval;\n extern crate rustc_data_structures;\n extern crate rustc_trans;\n extern crate rustc_driver;"}]}