{"sha": "33cf9ea4a2aebb015e81071968659bd51218c5af", "node_id": "C_kwDOAAsO6NoAKDMzY2Y5ZWE0YTJhZWJiMDE1ZTgxMDcxOTY4NjU5YmQ1MTIxOGM1YWY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-27T21:13:13Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-27T21:15:14Z"}, "message": "Add comments, fixes for `0` sentinel", "tree": {"sha": "b9bf6d25b8cbb2e7a17b9ea954977211d8d8ed5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9bf6d25b8cbb2e7a17b9ea954977211d8d8ed5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33cf9ea4a2aebb015e81071968659bd51218c5af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33cf9ea4a2aebb015e81071968659bd51218c5af", "html_url": "https://github.com/rust-lang/rust/commit/33cf9ea4a2aebb015e81071968659bd51218c5af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33cf9ea4a2aebb015e81071968659bd51218c5af/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b54e3e6c989a2b4b95d6405fccbb2ab2dc450f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/b54e3e6c989a2b4b95d6405fccbb2ab2dc450f24", "html_url": "https://github.com/rust-lang/rust/commit/b54e3e6c989a2b4b95d6405fccbb2ab2dc450f24"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "d672f0bb5992b8017d941d7424ee1a7fd635ce77", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/33cf9ea4a2aebb015e81071968659bd51218c5af/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33cf9ea4a2aebb015e81071968659bd51218c5af/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=33cf9ea4a2aebb015e81071968659bd51218c5af", "patch": "@@ -234,7 +234,33 @@ pub(crate) fn build_index<'tcx>(\n             )?;\n             crate_data.serialize_field(\n                 \"f\",\n-                &self.items.iter().map(|item| &item.search_type).collect::<Vec<_>>(),\n+                &self\n+                    .items\n+                    .iter()\n+                    .map(|item| {\n+                        // Fake option to get `0` out as a sentinel instead of `null`.\n+                        // We want to use `0` because it's three less bytes.\n+                        enum FunctionOption<'a> {\n+                            Function(&'a IndexItemFunctionType),\n+                            None,\n+                        }\n+                        impl<'a> Serialize for FunctionOption<'a> {\n+                            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n+                            where\n+                                S: Serializer,\n+                            {\n+                                match self {\n+                                    FunctionOption::None => 0.serialize(serializer),\n+                                    FunctionOption::Function(ty) => ty.serialize(serializer),\n+                                }\n+                            }\n+                        }\n+                        match &item.search_type {\n+                            Some(ty) => FunctionOption::Function(ty),\n+                            None => FunctionOption::None,\n+                        }\n+                    })\n+                    .collect::<Vec<_>>(),\n             )?;\n             crate_data.serialize_field(\n                 \"p\","}, {"sha": "ecbe15a59da3c6ff518d110d58f76dabad8f4d12", "filename": "src/librustdoc/html/static/js/externs.js", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33cf9ea4a2aebb015e81071968659bd51218c5af/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "raw_url": "https://github.com/rust-lang/rust/raw/33cf9ea4a2aebb015e81071968659bd51218c5af/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js?ref=33cf9ea4a2aebb015e81071968659bd51218c5af", "patch": "@@ -86,6 +86,9 @@ let Results;\n  * A pair of [inputs, outputs], or 0 for null. This is stored in the search index.\n  * The JavaScript deserializes this into FunctionSearchType.\n  *\n+ * Numeric IDs are *ONE-indexed* into the paths array (`p`). Zero is used as a sentinel for `null`\n+ * because `null` is four bytes while `0` is one byte.\n+ *\n  * An input or output can be encoded as just a number if there is only one of them, AND\n  * it has no generics. The no generics rule exists to avoid ambiguity: imagine if you had\n  * a function with a single output, and that output had a single generic:\n@@ -114,6 +117,9 @@ let RawFunctionSearchType;\n  * A single function input or output type. This is either a single path ID, or a pair of\n  * [path ID, generics].\n  *\n+ * Numeric IDs are *ONE-indexed* into the paths array (`p`). Zero is used as a sentinel for `null`\n+ * because `null` is four bytes while `0` is one byte.\n+ *\n  * @typedef {number | [number, Array<RawFunctionType>]}\n  */\n let RawFunctionType;"}, {"sha": "75c7bd45a294923575e89e888548f67da87c5154", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33cf9ea4a2aebb015e81071968659bd51218c5af/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/33cf9ea4a2aebb015e81071968659bd51218c5af/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=33cf9ea4a2aebb015e81071968659bd51218c5af", "patch": "@@ -1846,9 +1846,6 @@ function initSearch(rawSearchIndex) {\n     function buildItemSearchTypeAll(types, lowercasePaths) {\n         const PATH_INDEX_DATA = 0;\n         const GENERICS_DATA = 1;\n-        if (types === null) {\n-            return [];\n-        }\n         return types.map(type => {\n             let pathIndex, generics;\n             if (typeof type === \"number\") {\n@@ -1859,6 +1856,7 @@ function initSearch(rawSearchIndex) {\n                 generics = buildItemSearchTypeAll(type[GENERICS_DATA], lowercasePaths);\n             }\n             return {\n+                // `0` is used as a sentinel because it's fewer bytes than `null`\n                 name: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].name,\n                 ty: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].ty,\n                 generics: generics,\n@@ -1884,7 +1882,8 @@ function initSearch(rawSearchIndex) {\n     function buildFunctionSearchType(functionSearchType, lowercasePaths) {\n         const INPUTS_DATA = 0;\n         const OUTPUT_DATA = 1;\n-        if (functionSearchType === 0 || functionSearchType === null) {\n+        // `0` is used as a sentinel because it's fewer bytes than `null`\n+        if (functionSearchType === 0) {\n             return null;\n         }\n         let inputs, output;"}]}