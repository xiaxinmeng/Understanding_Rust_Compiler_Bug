{"sha": "56d888689b7f58094ee5b082eaf94a0b8179ff32", "node_id": "C_kwDOAAsO6NoAKDU2ZDg4ODY4OWI3ZjU4MDk0ZWU1YjA4MmVhZjk0YTBiODE3OWZmMzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-31T08:28:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-31T08:28:12Z"}, "message": "Auto merge of #12793 - lowr:fix/12739, r=Veykril\n\nfix: sort and deduplicate auto traits in trait object types\n\nFixes #12739\n\nChalk solver doesn't sort and deduplicate auto traits in trait object types, so we need to handle them ourselves in the lowering phase, just like [`rustc`](https://github.com/rust-lang/rust/blob/880416180b0a9ee1141c07d4d17667edb77daebd/compiler/rustc_typeck/src/astconv/mod.rs#L1487-L1488) and [`chalk-integration`](https://github.com/rust-lang/chalk/blob/master/chalk-integration/src/lowering.rs#L575) do.\n\nQuoting from [the Chalk book](https://rust-lang.github.io/chalk/book/types/rust_types.html#dyn-types):\n\n> Note that -- for this purpose -- ordering of bounds is significant. That means that if you create a `dyn Foo + Send` and a `dyn Send + Foo`, chalk would consider them distinct types. The assumption is that bounds are ordered in some canonical fashion somewhere else.\n\nAlso, trait object types with more than one non-auto traits were previously allowed, but are now disallowed with this patch.", "tree": {"sha": "97c2b6a7b1f5d4b6a06ec863645d0aa208f94862", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97c2b6a7b1f5d4b6a06ec863645d0aa208f94862"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d888689b7f58094ee5b082eaf94a0b8179ff32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d888689b7f58094ee5b082eaf94a0b8179ff32", "html_url": "https://github.com/rust-lang/rust/commit/56d888689b7f58094ee5b082eaf94a0b8179ff32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d888689b7f58094ee5b082eaf94a0b8179ff32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6138965cdfc2d6b9b32fe0cc5cef9482975dc94", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6138965cdfc2d6b9b32fe0cc5cef9482975dc94", "html_url": "https://github.com/rust-lang/rust/commit/b6138965cdfc2d6b9b32fe0cc5cef9482975dc94"}, {"sha": "7ecead23c82f783665aa0bdb2f9ff6d26de545e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ecead23c82f783665aa0bdb2f9ff6d26de545e9", "html_url": "https://github.com/rust-lang/rust/commit/7ecead23c82f783665aa0bdb2f9ff6d26de545e9"}], "stats": {"total": 141, "additions": 132, "deletions": 9}, "files": [{"sha": "4a37a7945330cc2a216a3eb6582ca7bbd0db0287", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/56d888689b7f58094ee5b082eaf94a0b8179ff32/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d888689b7f58094ee5b082eaf94a0b8179ff32/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=56d888689b7f58094ee5b082eaf94a0b8179ff32", "patch": "@@ -1,8 +1,8 @@\n //! Methods for lowering the HIR to types. There are two main cases here:\n //!\n //!  - Lowering a type reference like `&usize` or `Option<foo::bar::Baz>` to a\n-//!    type: The entry point for this is `Ty::from_hir`.\n-//!  - Building the type for an item: This happens through the `type_for_def` query.\n+//!    type: The entry point for this is `TyLoweringContext::lower_ty`.\n+//!  - Building the type for an item: This happens through the `ty` query.\n //!\n //! This usually involves resolving names, collecting generic arguments etc.\n use std::{\n@@ -47,7 +47,7 @@ use crate::{\n     consteval::{intern_const_scalar, path_to_const, unknown_const, unknown_const_as_generic},\n     db::HirDatabase,\n     make_binders,\n-    mapping::ToChalk,\n+    mapping::{from_chalk_trait_id, ToChalk},\n     static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n     utils::Generics,\n     utils::{all_super_trait_refs, associated_type_by_name_including_super_traits, generics},\n@@ -982,13 +982,44 @@ impl<'a> TyLoweringContext<'a> {\n     fn lower_dyn_trait(&self, bounds: &[Interned<TypeBound>]) -> Ty {\n         let self_ty = TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0)).intern(Interner);\n         let bounds = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n-            QuantifiedWhereClauses::from_iter(\n+            let bounds =\n+                bounds.iter().flat_map(|b| ctx.lower_type_bound(b, self_ty.clone(), false));\n+\n+            let mut auto_traits = SmallVec::<[_; 8]>::new();\n+            let mut regular_traits = SmallVec::<[_; 2]>::new();\n+            let mut other_bounds = SmallVec::<[_; 8]>::new();\n+            for bound in bounds {\n+                if let Some(id) = bound.trait_id() {\n+                    if ctx.db.trait_data(from_chalk_trait_id(id)).is_auto {\n+                        auto_traits.push(bound);\n+                    } else {\n+                        regular_traits.push(bound);\n+                    }\n+                } else {\n+                    other_bounds.push(bound);\n+                }\n+            }\n+\n+            if regular_traits.len() > 1 {\n+                return None;\n+            }\n+\n+            auto_traits.sort_unstable_by_key(|b| b.trait_id().unwrap());\n+            auto_traits.dedup();\n+\n+            Some(QuantifiedWhereClauses::from_iter(\n                 Interner,\n-                bounds.iter().flat_map(|b| ctx.lower_type_bound(b, self_ty.clone(), false)),\n-            )\n+                regular_traits.into_iter().chain(other_bounds).chain(auto_traits),\n+            ))\n         });\n-        let bounds = crate::make_single_type_binders(bounds);\n-        TyKind::Dyn(DynTy { bounds, lifetime: static_lifetime() }).intern(Interner)\n+\n+        if let Some(bounds) = bounds {\n+            let bounds = crate::make_single_type_binders(bounds);\n+            TyKind::Dyn(DynTy { bounds, lifetime: static_lifetime() }).intern(Interner)\n+        } else {\n+            // FIXME: report error (additional non-auto traits)\n+            TyKind::Error.intern(Interner)\n+        }\n     }\n \n     fn lower_impl_trait("}, {"sha": "e67c27aa2db97fb4cff6fd19475fa448aa422cc9", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/56d888689b7f58094ee5b082eaf94a0b8179ff32/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d888689b7f58094ee5b082eaf94a0b8179ff32/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=56d888689b7f58094ee5b082eaf94a0b8179ff32", "patch": "@@ -3833,3 +3833,95 @@ fn test() {\n \"#,\n     )\n }\n+\n+#[test]\n+fn dyn_multiple_auto_traits_in_different_order() {\n+    check_no_mismatches(\n+        r#\"\n+auto trait Send {}\n+auto trait Sync {}\n+\n+fn f(t: &(dyn Sync + Send)) {}\n+fn g(t: &(dyn Send + Sync)) {\n+    f(t);\n+}\n+        \"#,\n+    );\n+\n+    check_no_mismatches(\n+        r#\"\n+auto trait Send {}\n+auto trait Sync {}\n+trait T {}\n+\n+fn f(t: &(dyn T + Send + Sync)) {}\n+fn g(t: &(dyn Sync + T + Send)) {\n+    f(t);\n+}\n+        \"#,\n+    );\n+\n+    check_infer_with_mismatches(\n+        r#\"\n+auto trait Send {}\n+auto trait Sync {}\n+trait T1 {}\n+trait T2 {}\n+\n+fn f(t: &(dyn T1 + T2 + Send + Sync)) {}\n+fn g(t: &(dyn Sync + T2 + T1 + Send)) {\n+    f(t);\n+}\n+        \"#,\n+        expect![[r#\"\n+            68..69 't': &{unknown}\n+            101..103 '{}': ()\n+            109..110 't': &{unknown}\n+            142..155 '{     f(t); }': ()\n+            148..149 'f': fn f(&{unknown})\n+            148..152 'f(t)': ()\n+            150..151 't': &{unknown}\n+        \"#]],\n+    );\n+\n+    check_no_mismatches(\n+        r#\"\n+auto trait Send {}\n+auto trait Sync {}\n+trait T {\n+    type Proj: Send + Sync;\n+}\n+\n+fn f(t: &(dyn T<Proj = ()>  + Send + Sync)) {}\n+fn g(t: &(dyn Sync + T<Proj = ()> + Send)) {\n+    f(t);\n+}\n+        \"#,\n+    );\n+}\n+\n+#[test]\n+fn dyn_duplicate_auto_trait() {\n+    check_no_mismatches(\n+        r#\"\n+auto trait Send {}\n+\n+fn f(t: &(dyn Send + Send)) {}\n+fn g(t: &(dyn Send)) {\n+    f(t);\n+}\n+        \"#,\n+    );\n+\n+    check_no_mismatches(\n+        r#\"\n+auto trait Send {}\n+trait T {}\n+\n+fn f(t: &(dyn T + Send + Send)) {}\n+fn g(t: &(dyn T + Send)) {\n+    f(t);\n+}\n+        \"#,\n+    );\n+}"}, {"sha": "e9034daefa8d46c1dea2afce1e07683f52f82f66", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56d888689b7f58094ee5b082eaf94a0b8179ff32/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d888689b7f58094ee5b082eaf94a0b8179ff32/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=56d888689b7f58094ee5b082eaf94a0b8179ff32", "patch": "@@ -1910,7 +1910,7 @@ impl<T> Vec<T> {\n pub struct Box<T> {}\n \n trait Display {}\n-trait Sync {}\n+auto trait Sync {}\n \n fn main() {\n     // The block expression wrapping disables the constructor hint hiding logic"}]}