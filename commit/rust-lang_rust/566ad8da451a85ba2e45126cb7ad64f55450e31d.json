{"sha": "566ad8da451a85ba2e45126cb7ad64f55450e31d", "node_id": "C_kwDOAAsO6NoAKDU2NmFkOGRhNDUxYTg1YmEyZTQ1MTI2Y2I3YWQ2NGY1NTQ1MGUzMWQ", "commit": {"author": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2021-10-19T09:09:43Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-11-23T23:49:03Z"}, "message": "Update CoverageMappingFormat Support to Version6\n\nVersion 5 adds Branch Regions which are a prerequisite for branch coverage.\nVersion 6 can use the zeroth filename as prefix for other relative files.", "tree": {"sha": "c2ac590d5f38ee42643d35a05414629825511b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2ac590d5f38ee42643d35a05414629825511b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/566ad8da451a85ba2e45126cb7ad64f55450e31d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/566ad8da451a85ba2e45126cb7ad64f55450e31d", "html_url": "https://github.com/rust-lang/rust/commit/566ad8da451a85ba2e45126cb7ad64f55450e31d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/566ad8da451a85ba2e45126cb7ad64f55450e31d/comments", "author": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b3cd075bbe309031b418650a9c32baf0b4a3276", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3cd075bbe309031b418650a9c32baf0b4a3276", "html_url": "https://github.com/rust-lang/rust/commit/7b3cd075bbe309031b418650a9c32baf0b4a3276"}], "stats": {"total": 89, "additions": 66, "deletions": 23}, "files": [{"sha": "67cd5363a7ba5ec86dbb407a2737aa82e2ec92f4", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/566ad8da451a85ba2e45126cb7ad64f55450e31d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566ad8da451a85ba2e45126cb7ad64f55450e31d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=566ad8da451a85ba2e45126cb7ad64f55450e31d", "patch": "@@ -17,10 +17,10 @@ use tracing::debug;\n \n /// Generates and exports the Coverage Map.\n ///\n-/// This Coverage Map complies with Coverage Mapping Format version 4 (zero-based encoded as 3),\n-/// as defined at [LLVM Code Coverage Mapping Format](https://github.com/rust-lang/llvm-project/blob/rustc/11.0-2020-10-12/llvm/docs/CoverageMappingFormat.rst#llvm-code-coverage-mapping-format)\n-/// and published in Rust's November 2020 fork of LLVM. This version is supported by the LLVM\n-/// coverage tools (`llvm-profdata` and `llvm-cov`) bundled with Rust's fork of LLVM.\n+/// This Coverage Map complies with Coverage Mapping Format version 5 (zero-based encoded as 4),\n+/// as defined at [LLVM Code Coverage Mapping Format](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/docs/CoverageMappingFormat.rst#llvm-code-coverage-mapping-format).\n+/// This version is supported by the LLVM coverage tools (`llvm-profdata` and `llvm-cov`)\n+/// bundled with Rust's fork of LLVM.\n ///\n /// Consequently, Rust's bundled version of Clang also generates Coverage Maps compliant with\n /// the same version. Clang's implementation of Coverage Map generation was referenced when\n@@ -30,12 +30,12 @@ use tracing::debug;\n pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n     let tcx = cx.tcx;\n \n-    // Ensure LLVM supports Coverage Map Version 4 (encoded as a zero-based value: 3).\n-    // If not, the LLVM Version must be less than 11.\n-    let version = coverageinfo::mapping_version();\n-    if version != 3 {\n-        tcx.sess.fatal(\"rustc option `-Z instrument-coverage` requires LLVM 11 or higher.\");\n-    }\n+    // While our bundled LLVM might support Coverage Map Version 6\n+    // (encoded as a zero-based value: 5), we clamp that to Version 5,\n+    // as Version 6 would require us to use the 0-th filename as a path prefix\n+    // for all other relative paths, which we don't take advantage of right now.\n+    let _version = coverageinfo::mapping_version();\n+    let version = 4;\n \n     debug!(\"Generating coverage map for CodegenUnit: `{}`\", cx.codegen_unit.name());\n "}, {"sha": "badb386b6b1d51de70813415afd50c8b49996438", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/566ad8da451a85ba2e45126cb7ad64f55450e31d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566ad8da451a85ba2e45126cb7ad64f55450e31d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=566ad8da451a85ba2e45126cb7ad64f55450e31d", "patch": "@@ -681,7 +681,7 @@ pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(&SMDiagnostic, *const c_voi\n pub mod coverageinfo {\n     use super::coverage_map;\n \n-    /// Aligns with [llvm::coverage::CounterMappingRegion::RegionKind](https://github.com/rust-lang/llvm-project/blob/rustc/11.0-2020-10-12/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L206-L222)\n+    /// Aligns with [llvm::coverage::CounterMappingRegion::RegionKind](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L209-L230)\n     #[derive(Copy, Clone, Debug)]\n     #[repr(C)]\n     pub enum RegionKind {\n@@ -700,11 +700,16 @@ pub mod coverageinfo {\n         /// A GapRegion is like a CodeRegion, but its count is only set as the\n         /// line execution count when its the only region in the line.\n         GapRegion = 3,\n+\n+        /// A BranchRegion represents leaf-level boolean expressions and is\n+        /// associated with two counters, each representing the number of times the\n+        /// expression evaluates to true or false.\n+        BranchRegion = 4,\n     }\n \n     /// This struct provides LLVM's representation of a \"CoverageMappingRegion\", encoded into the\n     /// coverage map, in accordance with the\n-    /// [LLVM Code Coverage Mapping Format](https://github.com/rust-lang/llvm-project/blob/rustc/11.0-2020-10-12/llvm/docs/CoverageMappingFormat.rst#llvm-code-coverage-mapping-format).\n+    /// [LLVM Code Coverage Mapping Format](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/docs/CoverageMappingFormat.rst#llvm-code-coverage-mapping-format).\n     /// The struct composes fields representing the `Counter` type and value(s) (injected counter\n     /// ID, or expression type and operands), the source file (an indirect index into a \"filenames\n     /// array\", encoded separately), and source location (start and end positions of the represented\n@@ -717,6 +722,10 @@ pub mod coverageinfo {\n         /// The counter type and type-dependent counter data, if any.\n         counter: coverage_map::Counter,\n \n+        /// If the `RegionKind` is a `BranchRegion`, this represents the counter\n+        /// for the false branch of the region.\n+        false_counter: coverage_map::Counter,\n+\n         /// An indirect reference to the source filename. In the LLVM Coverage Mapping Format, the\n         /// file_id is an index into a function-specific `virtual_file_mapping` array of indexes\n         /// that, in turn, are used to look up the filename for this region.\n@@ -754,6 +763,7 @@ pub mod coverageinfo {\n         ) -> Self {\n             Self {\n                 counter,\n+                false_counter: coverage_map::Counter::zero(),\n                 file_id,\n                 expanded_file_id: 0,\n                 start_line,\n@@ -764,6 +774,31 @@ pub mod coverageinfo {\n             }\n         }\n \n+        // This function might be used in the future; the LLVM API is still evolving, as is coverage\n+        // support.\n+        #[allow(dead_code)]\n+        crate fn branch_region(\n+            counter: coverage_map::Counter,\n+            false_counter: coverage_map::Counter,\n+            file_id: u32,\n+            start_line: u32,\n+            start_col: u32,\n+            end_line: u32,\n+            end_col: u32,\n+        ) -> Self {\n+            Self {\n+                counter,\n+                false_counter,\n+                file_id,\n+                expanded_file_id: 0,\n+                start_line,\n+                start_col,\n+                end_line,\n+                end_col,\n+                kind: RegionKind::BranchRegion,\n+            }\n+        }\n+\n         // This function might be used in the future; the LLVM API is still evolving, as is coverage\n         // support.\n         #[allow(dead_code)]\n@@ -777,6 +812,7 @@ pub mod coverageinfo {\n         ) -> Self {\n             Self {\n                 counter: coverage_map::Counter::zero(),\n+                false_counter: coverage_map::Counter::zero(),\n                 file_id,\n                 expanded_file_id,\n                 start_line,\n@@ -799,6 +835,7 @@ pub mod coverageinfo {\n         ) -> Self {\n             Self {\n                 counter: coverage_map::Counter::zero(),\n+                false_counter: coverage_map::Counter::zero(),\n                 file_id,\n                 expanded_file_id: 0,\n                 start_line,\n@@ -822,6 +859,7 @@ pub mod coverageinfo {\n         ) -> Self {\n             Self {\n                 counter,\n+                false_counter: coverage_map::Counter::zero(),\n                 file_id,\n                 expanded_file_id: 0,\n                 start_line,"}, {"sha": "e288760a02b186612249db0225f4ec2a42a57ee4", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/566ad8da451a85ba2e45126cb7ad64f55450e31d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566ad8da451a85ba2e45126cb7ad64f55450e31d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fffi.rs?ref=566ad8da451a85ba2e45126cb7ad64f55450e31d", "patch": "@@ -1,6 +1,6 @@\n use rustc_middle::mir::coverage::{CounterValueReference, MappedExpressionIndex};\n \n-/// Aligns with [llvm::coverage::Counter::CounterKind](https://github.com/rust-lang/llvm-project/blob/rustc/11.0-2020-10-12/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L206-L222)\n+/// Aligns with [llvm::coverage::Counter::CounterKind](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L95)\n #[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub enum CounterKind {\n@@ -17,7 +17,7 @@ pub enum CounterKind {\n ///     `instrprof.increment()`)\n ///   * For `CounterKind::Expression`, `id` is the index into the coverage map's array of\n ///     counter expressions.\n-/// Aligns with [llvm::coverage::Counter](https://github.com/rust-lang/llvm-project/blob/rustc/11.0-2020-10-12/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L99-L100)\n+/// Aligns with [llvm::coverage::Counter](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L102-L103)\n /// Important: The Rust struct layout (order and types of fields) must match its C++ counterpart.\n #[derive(Copy, Clone, Debug)]\n #[repr(C)]\n@@ -59,15 +59,15 @@ impl Counter {\n     }\n }\n \n-/// Aligns with [llvm::coverage::CounterExpression::ExprKind](https://github.com/rust-lang/llvm-project/blob/rustc/11.0-2020-10-12/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L147)\n+/// Aligns with [llvm::coverage::CounterExpression::ExprKind](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L150)\n #[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub enum ExprKind {\n     Subtract = 0,\n     Add = 1,\n }\n \n-/// Aligns with [llvm::coverage::CounterExpression](https://github.com/rust-lang/llvm-project/blob/rustc/11.0-2020-10-12/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L148-L149)\n+/// Aligns with [llvm::coverage::CounterExpression](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L151-L152)\n /// Important: The Rust struct layout (order and types of fields) must match its C++\n /// counterpart.\n #[derive(Copy, Clone, Debug)]"}, {"sha": "154f554d607dfb60af9afaa03d54952f96d4a178", "filename": "compiler/rustc_llvm/llvm-wrapper/CoverageMappingWrapper.cpp", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/566ad8da451a85ba2e45126cb7ad64f55450e31d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/566ad8da451a85ba2e45126cb7ad64f55450e31d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp?ref=566ad8da451a85ba2e45126cb7ad64f55450e31d", "patch": "@@ -10,6 +10,7 @@ using namespace llvm;\n \n struct LLVMRustCounterMappingRegion {\n   coverage::Counter Count;\n+  coverage::Counter FalseCount;\n   uint32_t FileID;\n   uint32_t ExpandedFileID;\n   uint32_t LineStart;\n@@ -53,7 +54,7 @@ extern \"C\" void LLVMRustCoverageWriteMappingToBuffer(\n   MappingRegions.reserve(NumMappingRegions);\n   for (const auto &Region : makeArrayRef(RustMappingRegions, NumMappingRegions)) {\n     MappingRegions.emplace_back(\n-        Region.Count, Region.FileID, Region.ExpandedFileID,\n+        Region.Count, Region.FalseCount, Region.FileID, Region.ExpandedFileID,\n         Region.LineStart, Region.ColumnStart, Region.LineEnd, Region.ColumnEnd,\n         Region.Kind);\n   }\n@@ -108,5 +109,9 @@ extern \"C\" void LLVMRustCoverageWriteMappingVarNameToString(RustStringRef Str) {\n }\n \n extern \"C\" uint32_t LLVMRustCoverageMappingVersion() {\n-  return coverage::CovMapVersion::Version4;\n+#if LLVM_VERSION_GE(13, 0)\n+  return coverage::CovMapVersion::Version6;\n+#else\n+  return coverage::CovMapVersion::Version5;\n+#endif\n }"}, {"sha": "640d3a5a02b0f0ae7e1efc759a9f13a9997096a5", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/566ad8da451a85ba2e45126cb7ad64f55450e31d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566ad8da451a85ba2e45126cb7ad64f55450e31d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=566ad8da451a85ba2e45126cb7ad64f55450e31d", "patch": "@@ -21,9 +21,9 @@ rustc_index::newtype_index! {\n impl ExpressionOperandId {\n     /// An expression operand for a \"zero counter\", as described in the following references:\n     ///\n-    /// * <https://github.com/rust-lang/llvm-project/blob/rustc/11.0-2020-10-12/llvm/docs/CoverageMappingFormat.rst#counter>\n-    /// * <https://github.com/rust-lang/llvm-project/blob/rustc/11.0-2020-10-12/llvm/docs/CoverageMappingFormat.rst#tag>\n-    /// * <https://github.com/rust-lang/llvm-project/blob/rustc/11.0-2020-10-12/llvm/docs/CoverageMappingFormat.rst#counter-expressions>\n+    /// * <https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/docs/CoverageMappingFormat.rst#counter>\n+    /// * <https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/docs/CoverageMappingFormat.rst#tag>\n+    /// * <https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/docs/CoverageMappingFormat.rst#counter-expressions>\n     ///\n     /// This operand can be used to count two or more separate code regions with a single counter,\n     /// if they run sequentially with no branches, by injecting the `Counter` in a `BasicBlock` for"}, {"sha": "0424ed08dafbe6a88703277b99fe8a0a88c1f298", "filename": "src/doc/unstable-book/src/compiler-flags/instrument-coverage.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/566ad8da451a85ba2e45126cb7ad64f55450e31d/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Finstrument-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/566ad8da451a85ba2e45126cb7ad64f55450e31d/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Finstrument-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Finstrument-coverage.md?ref=566ad8da451a85ba2e45126cb7ad64f55450e31d", "patch": "@@ -20,7 +20,7 @@ This document describes how to enable and use the LLVM instrumentation-based cov\n When `-Z instrument-coverage` is enabled, the Rust compiler enhances rust-based libraries and binaries by:\n \n -   Automatically injecting calls to an LLVM intrinsic ([`llvm.instrprof.increment`]), at functions and branches in compiled code, to increment counters when conditional sections of code are executed.\n--   Embedding additional information in the data section of each library and binary (using the [LLVM Code Coverage Mapping Format] _Version 4_, supported _only_ in LLVM 11 and up), to define the code regions (start and end positions in the source code) being counted.\n+-   Embedding additional information in the data section of each library and binary (using the [LLVM Code Coverage Mapping Format] _Version 5_, supported _only_ in LLVM 12 and up), to define the code regions (start and end positions in the source code) being counted.\n \n When running a coverage-instrumented program, the counter values are written to a `profraw` file at program termination. LLVM bundles tools that read the counter results, combine those results with the coverage map (embedded in the program binary), and generate coverage reports in multiple formats.\n \n@@ -123,7 +123,7 @@ If `LLVM_PROFILE_FILE` contains a path to a non-existent directory, the missing\n \n ## Installing LLVM coverage tools\n \n-LLVM's supplies two tools\u2014`llvm-profdata` and `llvm-cov`\u2014that process coverage data and generate reports. There are several ways to find and/or install these tools, but note that the coverage mapping data generated by the Rust compiler requires LLVM version 11 or higher. (`llvm-cov --version` typically shows the tool's LLVM version number.):\n+LLVM's supplies two tools\u2014`llvm-profdata` and `llvm-cov`\u2014that process coverage data and generate reports. There are several ways to find and/or install these tools, but note that the coverage mapping data generated by the Rust compiler requires LLVM version 12 or higher. (`llvm-cov --version` typically shows the tool's LLVM version number.):\n \n -   The LLVM tools may be installed (or installable) directly to your OS (such as via `apt-get`, for Linux).\n -   If you are building the Rust compiler from source, you can optionally use the bundled LLVM tools, built from source. Those tool binaries can typically be found in your build platform directory at something like: `rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-*`."}]}