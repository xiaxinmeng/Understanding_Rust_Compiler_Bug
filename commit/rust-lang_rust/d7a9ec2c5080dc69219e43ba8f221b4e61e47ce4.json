{"sha": "d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4", "node_id": "C_kwDOAAsO6NoAKGQ3YTllYzJjNTA4MGRjNjkyMTllNDNiYThmMjIxYjRlNjFlNDdjZTQ", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-09-23T10:45:24Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-01T18:04:20Z"}, "message": "Fix attribute handling", "tree": {"sha": "131ec48f7d2c0aeb6ca7ebc6a71b8ce203a91268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/131ec48f7d2c0aeb6ca7ebc6a71b8ce203a91268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4", "html_url": "https://github.com/rust-lang/rust/commit/d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4c3000e5bf254ab19895b7a62413ff0d346d337", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c3000e5bf254ab19895b7a62413ff0d346d337", "html_url": "https://github.com/rust-lang/rust/commit/e4c3000e5bf254ab19895b7a62413ff0d346d337"}], "stats": {"total": 237, "additions": 197, "deletions": 40}, "files": [{"sha": "07b50cb82740db939cedb5e3563e31953367c05c", "filename": "clippy_lints/src/non_send_field_in_send_ty.rs", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs?ref=d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note};\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::ty::{implements_trait, is_copy};\n use rustc_ast::ImplPolarity;\n use rustc_hir::{Item, ItemKind};\n@@ -39,17 +39,19 @@ declare_clippy_lint! {\n     /// ```\n     pub NON_SEND_FIELD_IN_SEND_TY,\n     nursery,\n-    \"a field in a `Send` struct does not implement `Send`\"\n+    \"there is field that does not implement `Send` in a `Send` struct\"\n }\n \n declare_lint_pass!(NonSendFieldInSendTy => [NON_SEND_FIELD_IN_SEND_TY]);\n \n impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        let send_trait = cx.tcx.get_diagnostic_item(sym::send_trait).unwrap();\n-\n-        // Check if we are in `Send` impl item\n+        // Checks if we are in `Send` impl item.\n+        // We start from `Send` impl instead of `check_field_def()` because\n+        // single `AdtDef` may have multiple `Send` impls due to generic\n+        // parameters, and the lint is much easier to implement in this way.\n         if_chain! {\n+            if let Some(send_trait) = cx.tcx.get_diagnostic_item(sym::send_trait);\n             if let ItemKind::Impl(hir_impl) = &item.kind;\n             if let Some(trait_ref) = &hir_impl.of_trait;\n             if let Some(trait_id) = trait_ref.trait_def_id();\n@@ -63,37 +65,38 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                     for field in &variant.fields {\n                         let field_ty = field.ty(cx.tcx, impl_trait_substs);\n \n-                        // TODO: substs rebase_onto\n-\n                         if raw_pointer_in_ty_def(cx, field_ty)\n                             || implements_trait(cx, field_ty, send_trait, &[])\n                             || is_copy(cx, field_ty)\n                         {\n                             continue;\n                         }\n \n-                        if let Some(field_span) = cx.tcx.hir().span_if_local(field.did) {\n-                            if is_ty_param(field_ty) {\n-                                span_lint_and_help(\n-                                    cx,\n-                                    NON_SEND_FIELD_IN_SEND_TY,\n-                                    field_span,\n-                                    \"a field in a `Send` struct does not implement `Send`\",\n-                                    Some(item.span),\n-                                    &format!(\"add `{}: Send` in `Send` impl for `{}`\", field_ty, self_ty),\n-                                )\n-                            } else {\n-                                span_lint_and_note(\n+                        if let Some(field_hir_id) = field\n+                            .did\n+                            .as_local()\n+                            .map(|local_def_id| cx.tcx.hir().local_def_id_to_hir_id(local_def_id))\n+                        {\n+                            if let Some(field_span) = cx.tcx.hir().span_if_local(field.did) {\n+                                span_lint_hir_and_then(\n                                     cx,\n                                     NON_SEND_FIELD_IN_SEND_TY,\n+                                    field_hir_id,\n                                     field_span,\n-                                    \"a field in a `Send` struct does not implement `Send`\",\n-                                    Some(item.span),\n-                                    &format!(\n-                                        \"type `{}` doesn't implement `Send` when `{}` is `Send`\",\n-                                        field_ty, self_ty\n-                                    ),\n-                                )\n+                                    \"non-`Send` field found in a `Send` struct\",\n+                                    |diag| {\n+                                        diag.span_note(\n+                                            item.span,\n+                                            &format!(\n+                                                \"type `{}` doesn't implement `Send` when `{}` is `Send`\",\n+                                                field_ty, self_ty\n+                                            ),\n+                                        );\n+                                        if is_ty_param(field_ty) {\n+                                            diag.help(&format!(\"add `{}: Send` bound\", field_ty));\n+                                        }\n+                                    },\n+                                );\n                             }\n                         }\n                     }\n@@ -121,6 +124,6 @@ fn raw_pointer_in_ty_def<'tcx>(cx: &LateContext<'tcx>, target_ty: Ty<'tcx>) -> b\n }\n \n /// Returns `true` if the type is a type parameter such as `T`.\n-fn is_ty_param<'tcx>(target_ty: Ty<'tcx>) -> bool {\n+fn is_ty_param(target_ty: Ty<'_>) -> bool {\n     matches!(target_ty.kind(), ty::Param(_))\n }"}, {"sha": "b97501aa457d02c26c9e029a510adbccee88e230", "filename": "tests/ui/non_send_field_in_send_ty.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4/tests%2Fui%2Fnon_send_field_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4/tests%2Fui%2Fnon_send_field_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_field_in_send_ty.rs?ref=d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4", "patch": "@@ -3,7 +3,7 @@\n \n use std::cell::UnsafeCell;\n use std::ptr::NonNull;\n-use std::sync::{Arc, Mutex};\n+use std::sync::{Arc, Mutex, MutexGuard};\n \n // disrustor / RUSTSEC-2020-0150\n pub struct RingBuffer<T> {\n@@ -46,6 +46,22 @@ pub struct DeviceHandle<T: UsbContext> {\n \n unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n \n+// Other basic tests\n+pub struct MultiField<T> {\n+    field1: T,\n+    field2: T,\n+    field3: T,\n+}\n+\n+unsafe impl<T> Send for MultiField<T> {}\n+\n+pub enum MyOption<T> {\n+    MySome(T),\n+    MyNone,\n+}\n+\n+unsafe impl<T> Send for MyOption<T> {}\n+\n // Raw pointers are allowed\n extern \"C\" {\n     type SomeFfiType;\n@@ -57,7 +73,7 @@ pub struct FpTest {\n \n unsafe impl Send for FpTest {}\n \n-// Check raw pointer false positive\n+// Test attributes\n #[allow(clippy::non_send_field_in_send_ty)]\n pub struct AttrTest1<T>(T);\n \n@@ -76,19 +92,15 @@ unsafe impl<T> Send for AttrTest1<T> {}\n unsafe impl<T> Send for AttrTest2<T> {}\n unsafe impl<T> Send for AttrTest3<T> {}\n \n-pub struct MultiField<T> {\n-    field1: T,\n-    field2: T,\n-    field3: T,\n+// Multiple non-overlapping `Send` for a single type\n+pub struct Complex<A, B> {\n+    field1: A,\n+    field2: B,\n }\n \n-unsafe impl<T> Send for MultiField<T> {}\n+unsafe impl<P> Send for Complex<P, u32> {}\n \n-pub enum MyOption<T> {\n-    MySome(T),\n-    MyNone,\n-}\n-\n-unsafe impl<T> Send for MyOption<T> {}\n+// `MutexGuard` is non-Send\n+unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n \n fn main() {}"}, {"sha": "3a82828e0fe49f82784d9b5cdd58a0ddcdbcaf0c", "filename": "tests/ui/non_send_field_in_send_ty.stderr", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4/tests%2Fui%2Fnon_send_field_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4/tests%2Fui%2Fnon_send_field_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_field_in_send_ty.stderr?ref=d7a9ec2c5080dc69219e43ba8f221b4e61e47ce4", "patch": "@@ -0,0 +1,142 @@\n+error: non-`Send` field found in a `Send` struct\n+  --> $DIR/non_send_field_in_send_ty.rs:10:5\n+   |\n+LL |     data: Vec<UnsafeCell<T>>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::non-send-field-in-send-ty` implied by `-D warnings`\n+note: type `std::vec::Vec<std::cell::UnsafeCell<T>>` doesn't implement `Send` when `RingBuffer<T>` is `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:15:1\n+   |\n+LL | unsafe impl<T> Send for RingBuffer<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: non-`Send` field found in a `Send` struct\n+  --> $DIR/non_send_field_in_send_ty.rs:20:5\n+   |\n+LL |     lock: Mutex<Box<T>>,\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type `std::sync::Mutex<std::boxed::Box<T>>` doesn't implement `Send` when `MvccRwLock<T>` is `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:23:1\n+   |\n+LL | unsafe impl<T> Send for MvccRwLock<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: non-`Send` field found in a `Send` struct\n+  --> $DIR/non_send_field_in_send_ty.rs:28:5\n+   |\n+LL |     head: Arc<RC>,\n+   |     ^^^^^^^^^^^^^\n+   |\n+note: type `std::sync::Arc<RC>` doesn't implement `Send` when `ArcGuard<RC, T>` is `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:31:1\n+   |\n+LL | unsafe impl<RC, T: Send> Send for ArcGuard<RC, T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: non-`Send` field found in a `Send` struct\n+  --> $DIR/non_send_field_in_send_ty.rs:43:5\n+   |\n+LL |     context: T,\n+   |     ^^^^^^^^^^\n+   |\n+note: type `T` doesn't implement `Send` when `DeviceHandle<T>` is `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:47:1\n+   |\n+LL | unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: add `T: Send` bound\n+\n+error: non-`Send` field found in a `Send` struct\n+  --> $DIR/non_send_field_in_send_ty.rs:51:5\n+   |\n+LL |     field1: T,\n+   |     ^^^^^^^^^\n+   |\n+note: type `T` doesn't implement `Send` when `MultiField<T>` is `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:56:1\n+   |\n+LL | unsafe impl<T> Send for MultiField<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: add `T: Send` bound\n+\n+error: non-`Send` field found in a `Send` struct\n+  --> $DIR/non_send_field_in_send_ty.rs:52:5\n+   |\n+LL |     field2: T,\n+   |     ^^^^^^^^^\n+   |\n+note: type `T` doesn't implement `Send` when `MultiField<T>` is `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:56:1\n+   |\n+LL | unsafe impl<T> Send for MultiField<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: add `T: Send` bound\n+\n+error: non-`Send` field found in a `Send` struct\n+  --> $DIR/non_send_field_in_send_ty.rs:53:5\n+   |\n+LL |     field3: T,\n+   |     ^^^^^^^^^\n+   |\n+note: type `T` doesn't implement `Send` when `MultiField<T>` is `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:56:1\n+   |\n+LL | unsafe impl<T> Send for MultiField<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: add `T: Send` bound\n+\n+error: non-`Send` field found in a `Send` struct\n+  --> $DIR/non_send_field_in_send_ty.rs:59:12\n+   |\n+LL |     MySome(T),\n+   |            ^\n+   |\n+note: type `T` doesn't implement `Send` when `MyOption<T>` is `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:63:1\n+   |\n+LL | unsafe impl<T> Send for MyOption<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: add `T: Send` bound\n+\n+error: non-`Send` field found in a `Send` struct\n+  --> $DIR/non_send_field_in_send_ty.rs:88:11\n+   |\n+LL |     Enum2(T),\n+   |           ^\n+   |\n+note: type `T` doesn't implement `Send` when `AttrTest3<T>` is `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:93:1\n+   |\n+LL | unsafe impl<T> Send for AttrTest3<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: add `T: Send` bound\n+\n+error: non-`Send` field found in a `Send` struct\n+  --> $DIR/non_send_field_in_send_ty.rs:97:5\n+   |\n+LL |     field1: A,\n+   |     ^^^^^^^^^\n+   |\n+note: type `P` doesn't implement `Send` when `Complex<P, u32>` is `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:101:1\n+   |\n+LL | unsafe impl<P> Send for Complex<P, u32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: add `P: Send` bound\n+\n+error: non-`Send` field found in a `Send` struct\n+  --> $DIR/non_send_field_in_send_ty.rs:98:5\n+   |\n+LL |     field2: B,\n+   |     ^^^^^^^^^\n+   |\n+note: type `std::sync::MutexGuard<'static, bool>` doesn't implement `Send` when `Complex<Q, std::sync::MutexGuard<'static, bool>>` is `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:104:1\n+   |\n+LL | unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 11 previous errors\n+"}]}