{"sha": "2f13c3bdefefb7947049ed51edde8db341994164", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMTNjM2JkZWZlZmI3OTQ3MDQ5ZWQ1MWVkZGU4ZGIzNDE5OTQxNjQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-11T21:10:40Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-11T21:10:40Z"}, "message": "Small nits on INDEXING_SLICING", "tree": {"sha": "082e4e885e84d1625c352591f72cf34fe59c654b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/082e4e885e84d1625c352591f72cf34fe59c654b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f13c3bdefefb7947049ed51edde8db341994164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f13c3bdefefb7947049ed51edde8db341994164", "html_url": "https://github.com/rust-lang/rust/commit/2f13c3bdefefb7947049ed51edde8db341994164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f13c3bdefefb7947049ed51edde8db341994164/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87ef5f4d3b300c893cb404ab1f62816b34e0ea4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ef5f4d3b300c893cb404ab1f62816b34e0ea4d", "html_url": "https://github.com/rust-lang/rust/commit/87ef5f4d3b300c893cb404ab1f62816b34e0ea4d"}], "stats": {"total": 45, "additions": 16, "deletions": 29}, "files": [{"sha": "274491b7c963bd7a6e940933da9b6fb611d0bcc6", "filename": "src/array_indexing.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2f13c3bdefefb7947049ed51edde8db341994164/src%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f13c3bdefefb7947049ed51edde8db341994164/src%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farray_indexing.rs?ref=2f13c3bdefefb7947049ed51edde8db341994164", "patch": "@@ -69,34 +69,26 @@ impl LateLintPass for ArrayIndexing {\n                 if let Ok(ConstVal::Uint(const_index)) = const_index {\n                     if size <= const_index {\n                         utils::span_lint(cx, OUT_OF_BOUNDS_INDEXING, e.span, \"const index is out of bounds\");\n-                        utils::span_lint(cx, INDEXING_SLICING, e.span, \"indexing may panic\");\n-                    } else {\n-                        // Index is within bounds\n-                        return;\n                     }\n+\n+                    return;\n                 }\n \n                 // Index is a constant range\n                 if let Some(range) = utils::unsugar_range(index) {\n                     let start = range.start.map(|start|\n-                        eval_const_expr_partial(cx.tcx, start, ExprTypeChecked, None));\n+                        eval_const_expr_partial(cx.tcx, start, ExprTypeChecked, None)).map(|v| v.ok());\n                     let end = range.end.map(|end|\n-                        eval_const_expr_partial(cx.tcx, end, ExprTypeChecked, None));\n+                        eval_const_expr_partial(cx.tcx, end, ExprTypeChecked, None)).map(|v| v.ok());\n \n                     if let Some((start, end)) = to_const_range(start, end, range.limits, size) {\n-                        if start >= size && end >= size {\n+                        if start >= size || end >= size {\n                             utils::span_lint(cx,\n                                              OUT_OF_BOUNDS_INDEXING,\n                                              e.span,\n                                              \"range is out of bounds\");\n-                            utils::span_lint(cx,\n-                                             INDEXING_SLICING,\n-                                             e.span,\n-                                             \"slicing may panic\");\n-                        } else {\n-                            // Range is within bounds\n-                            return;\n                         }\n+                        return;\n                     }\n                 }\n             }\n@@ -120,19 +112,19 @@ impl LateLintPass for ArrayIndexing {\n ///\n /// Note: we assume the start and the end of the range are unsigned, since array slicing\n /// works only on usize\n-fn to_const_range<T>(start: Option<Result<ConstVal, T>>,\n-                    end: Option<Result<ConstVal, T>>,\n+fn to_const_range(start: Option<Option<ConstVal>>,\n+                    end: Option<Option<ConstVal>>,\n                     limits: RangeLimits,\n                     array_size: u64)\n                     -> Option<(u64, u64)> {\n     let start = match start {\n-        Some(Ok(ConstVal::Uint(x))) => x,\n+        Some(Some(ConstVal::Uint(x))) => x,\n         Some(_) => return None,\n         None => 0,\n     };\n \n     let end = match end {\n-        Some(Ok(ConstVal::Uint(x))) => {\n+        Some(Some(ConstVal::Uint(x))) => {\n             if limits == RangeLimits::Closed {\n                 x\n             } else {"}, {"sha": "4b9d5d8c9c4a4832c9e20bb6e7f5e2dcf8fbdb82", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f13c3bdefefb7947049ed51edde8db341994164/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f13c3bdefefb7947049ed51edde8db341994164/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2f13c3bdefefb7947049ed51edde8db341994164", "patch": "@@ -2,7 +2,7 @@\n #![feature(rustc_private, collections)]\n #![feature(iter_arith)]\n #![feature(custom_attribute)]\n-#![allow(unknown_lints)]\n+#![allow(indexing_slicing, shadow_reuse, unknown_lints)]\n \n // this only exists to allow the \"dogfood\" integration test to work\n #[allow(dead_code)]"}, {"sha": "14f3448a9f671b24aebc10625adc3c4696ed612a", "filename": "tests/compile-fail/array_indexing.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f13c3bdefefb7947049ed51edde8db341994164/tests%2Fcompile-fail%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f13c3bdefefb7947049ed51edde8db341994164/tests%2Fcompile-fail%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farray_indexing.rs?ref=2f13c3bdefefb7947049ed51edde8db341994164", "patch": "@@ -9,20 +9,15 @@ fn main() {\n     let x = [1,2,3,4];\n     x[0];\n     x[3];\n-    x[4]; //~ERROR: indexing may panic\n-          //~^ ERROR: const index is out of bounds\n-    x[1 << 3]; //~ERROR: indexing may panic\n-               //~^ ERROR: const index is out of bounds\n-    &x[1..5]; //~ERROR: slicing may panic\n-              //~^ ERROR: range is out of bounds\n+    x[4]; //~ERROR: const index is out of bounds\n+    x[1 << 3]; //~ERROR: const index is out of bounds\n+    &x[1..5]; //~ERROR: range is out of bounds\n     &x[0..3];\n-    &x[0...4]; //~ERROR: slicing may panic\n-               //~^ ERROR: range is out of bounds\n+    &x[0...4]; //~ERROR: range is out of bounds\n     &x[..];\n     &x[1..];\n     &x[..4];\n-    &x[..5]; //~ERROR: slicing may panic\n-             //~^ ERROR: range is out of bounds\n+    &x[..5]; //~ERROR: range is out of bounds\n \n     let y = &x;\n     y[0]; //~ERROR: indexing may panic"}]}