{"sha": "fe15f7177f59f4ac9e9eb22dff727cd58a097e11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMTVmNzE3N2Y1OWY0YWM5ZTllYjIyZGZmNzI3Y2Q1OGEwOTdlMTE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-01-29T21:10:49Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-02-01T14:43:57Z"}, "message": "Move --extern-public behind -Z unstable-options", "tree": {"sha": "520cd8ae43277f407218b88482b428a66a37c7c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/520cd8ae43277f407218b88482b428a66a37c7c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe15f7177f59f4ac9e9eb22dff727cd58a097e11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlxUWy0ACgkQtAh+UQ6Y\nsWQhoxAAitrpbbcMiwgvZEi4ydGOmjbZwI2E/9HW08JVPIdFnMSsDDzGzJTbHkJ1\nAhGgI9vzHpHXhdzWCxmAXZtb8uFM7oJvmWa1iF9QkmK5MRcCiu8zS4TxrC5NoEzQ\nn5gbhweFHktALYwbR5afm9rYSv4woqQFYuRRgpnnk06EK7mfc4RUy4sgdjH6XwGL\nsiqUqQJAElE91tmpVQCFeK3L68b+R/qTVebuHYpGouvLgU7R7PQAkUyk8XewlnL/\nEHb/NYp8L2Ah9cd3Vll8zBQ9saWynjfKFyDiBKSfzls+LzrD4T5SMoB8dIgsBeob\nJXv5Amy/WO+51vFQd0tn3MdWz3rRzdWu3LAVN2AItFODoajnV/QKmIZBoGPrTMK4\n07h50hpCye+l8vXJGRNwNE0AY7+LVHNTDTW9eAPD810UphEJtRq7R6fv0g/6mS6c\nW+I3BpsdRtExNCugPvRekVYaO/fxwBPX58dbgMaYp9Em54bYRFKIlbRubaj7jL7M\npHwAnm7dqtdAmmFccsJr5hhj3OA667UOuILdl6FprmRLLkHhgn3+VLpJ4GipwI8o\nizMOEtCMPJwW6qsPRAIWvZHeXMilCHEyaN5ms3mAaJTzz2RxMFGV74Q2Yz/bAkch\nkjxZEog1OIf+nVVsL42qE8GqswSwKRWqkJ+w5j0QvEttp+ypx50=\n=BJrA\n-----END PGP SIGNATURE-----", "payload": "tree 520cd8ae43277f407218b88482b428a66a37c7c0\nparent 173f5cf1164ded2409f8c019b5cd61b53119078c\nauthor Aaron Hill <aa1ronham@gmail.com> 1548796249 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1549032237 -0500\n\nMove --extern-public behind -Z unstable-options\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe15f7177f59f4ac9e9eb22dff727cd58a097e11", "html_url": "https://github.com/rust-lang/rust/commit/fe15f7177f59f4ac9e9eb22dff727cd58a097e11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe15f7177f59f4ac9e9eb22dff727cd58a097e11/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "173f5cf1164ded2409f8c019b5cd61b53119078c", "url": "https://api.github.com/repos/rust-lang/rust/commits/173f5cf1164ded2409f8c019b5cd61b53119078c", "html_url": "https://github.com/rust-lang/rust/commit/173f5cf1164ded2409f8c019b5cd61b53119078c"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "132a5a2a62bc282097d0ceb6eaf826586fad534c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fe15f7177f59f4ac9e9eb22dff727cd58a097e11/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe15f7177f59f4ac9e9eb22dff727cd58a097e11/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=fe15f7177f59f4ac9e9eb22dff727cd58a097e11", "patch": "@@ -414,7 +414,7 @@ top_level_options!(\n \n         // The list of crates to consider public for\n         // checking leaked private dependency types in public interfaces\n-        extern_public: Vec<String> [TRACKED],\n+        extern_public: Option<Vec<String>> [TRACKED],\n     }\n );\n \n@@ -610,7 +610,7 @@ impl Default for Options {\n             cli_forced_thinlto_off: false,\n             remap_path_prefix: Vec::new(),\n             edition: DEFAULT_EDITION,\n-            extern_public: vec![]\n+            extern_public: None\n         }\n     }\n }\n@@ -1917,21 +1917,7 @@ pub fn build_session_options_and_crate_config(\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n         .unwrap_or_else(|e| early_error(error_format, &e[..]));\n \n-    if matches.opt_present(\"extern-public\") && !nightly_options::is_nightly_build() {\n-        early_error(\n-            ErrorOutputType::default(),\n-            \"'--extern-public' is unstable and only \\\n-            available for nightly builds of rustc.\"\n-        )\n-    }\n-\n-    let mut extern_public: Vec<String> = matches.opt_strs(\"extern-public\").\n-        iter().cloned().collect();\n-\n-    // FIXME - come up with a better way of handling this\n-    extern_public.push(\"core\".to_string());\n-    extern_public.push(\"std\".to_string());\n-\n+    \n     let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n     let mut debugging_opts = build_debugging_options(matches, error_format);\n@@ -1950,6 +1936,24 @@ pub fn build_session_options_and_crate_config(\n         );\n     }\n \n+    if matches.opt_present(\"extern-public\") && !debugging_opts.unstable_options {\n+        early_error(\n+            ErrorOutputType::default(),\n+            \"'--extern-public' is unstable and only \\\n+            available for nightly builds of rustc.\"\n+        )\n+    }\n+\n+    let mut extern_public: Option<Vec<String>> = matches.opt_str(\"extern-public\").\n+        map(|s| s.split(',').map(|c| (*c).to_string()).collect());\n+\n+    // FIXME - come up with a better way of handling this\n+    if let Some(p) = extern_public.as_mut() {\n+        p.push(\"core\".to_string());\n+        p.push(\"std\".to_string());\n+    }\n+\n+\n     let mut output_types = BTreeMap::new();\n     if !debugging_opts.parse_only {\n         for list in matches.opt_strs(\"emit\") {\n@@ -2488,6 +2492,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);\n     impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n+    impl_dep_tracking_hash_via_hash!(Option<Vec<String>>);\n     impl_dep_tracking_hash_via_hash!(Option<MergeFunctions>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);"}, {"sha": "f4f09db1087f486eab46bd3849773bba9a429c21", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fe15f7177f59f4ac9e9eb22dff727cd58a097e11/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe15f7177f59f4ac9e9eb22dff727cd58a097e11/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=fe15f7177f59f4ac9e9eb22dff727cd58a097e11", "patch": "@@ -1460,7 +1460,7 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n     has_pub_restricted: bool,\n     has_old_errors: bool,\n     in_assoc_ty: bool,\n-    public_crates: FxHashSet<CrateNum>\n+    public_crates: Option<FxHashSet<CrateNum>>\n }\n \n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n@@ -1538,13 +1538,13 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     /// 1. It's contained within a public type\n     /// 2. It does not come from a crate marked as public\n     fn leaks_private_dep(&self, item_id: DefId) -> bool {\n-        // Never do any leak checking if the feature is not enabled\n-        if !self.tcx.features().public_private_dependencies {\n+        // Don't do any leak checking if no public crates were specified\n+        if self.public_crates.is_none() {\n             return false\n         }\n         let ret = self.required_visibility == ty::Visibility::Public &&\n             !item_id.is_local() &&\n-            !self.public_crates.contains(&item_id.krate);\n+            !self.public_crates.as_ref().unwrap().contains(&item_id.krate);\n \n \n         debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n@@ -1563,7 +1563,7 @@ struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     has_pub_restricted: bool,\n     old_error_set: &'a NodeSet,\n-    public_crates: FxHashSet<CrateNum>\n+    public_crates: Option<FxHashSet<CrateNum>>\n }\n \n impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n@@ -1762,9 +1762,9 @@ fn privacy_access_levels<'tcx>(\n         queries::check_mod_privacy::ensure(tcx, tcx.hir().local_def_id(module));\n     }\n \n-    let public_crates: FxHashSet<CrateNum> = tcx.sess.opts.extern_public.iter().flat_map(|c| {\n+    let public_crates: Option<FxHashSet<CrateNum>> = tcx.sess.opts.extern_public.as_ref().map(|s| s.iter().flat_map(|c| {\n         tcx.crates().iter().find(|&&krate| &tcx.crate_name(krate) == c).cloned()\n-    }).collect();\n+    }).collect());\n \n \n     // Build up a set of all exported items in the AST. This is a set of all"}]}