{"sha": "a3bd57823f602164fa94fde3e7997770bd97cea8", "node_id": "C_kwDOAAsO6NoAKGEzYmQ1NzgyM2Y2MDIxNjRmYTk0ZmRlM2U3OTk3NzcwYmQ5N2NlYTg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-26T13:46:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-26T23:03:49Z"}, "message": "make Stacked Borrows retags act like data races", "tree": {"sha": "abe9904984a7dc4add834da532b582497ed9c8c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abe9904984a7dc4add834da532b582497ed9c8c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3bd57823f602164fa94fde3e7997770bd97cea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3bd57823f602164fa94fde3e7997770bd97cea8", "html_url": "https://github.com/rust-lang/rust/commit/a3bd57823f602164fa94fde3e7997770bd97cea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3bd57823f602164fa94fde3e7997770bd97cea8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7f72218c89c2af7d6303f3b8cb6bd868c0af334", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f72218c89c2af7d6303f3b8cb6bd868c0af334", "html_url": "https://github.com/rust-lang/rust/commit/a7f72218c89c2af7d6303f3b8cb6bd868c0af334"}], "stats": {"total": 209, "additions": 164, "deletions": 45}, "files": [{"sha": "5093cddfd3b50100057f711ec5cd2c203321c31e", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -874,8 +874,8 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                 // We need a frozen-sensitive reborrow.\n                 // We have to use shared references to alloc/memory_extra here since\n                 // `visit_freeze_sensitive` needs to access the global state.\n-                let extra = this.get_alloc_extra(alloc_id)?;\n-                let mut stacked_borrows = extra\n+                let alloc_extra = this.get_alloc_extra(alloc_id)?;\n+                let mut stacked_borrows = alloc_extra\n                     .stacked_borrows\n                     .as_ref()\n                     .expect(\"we should have Stacked Borrows data\")\n@@ -910,7 +910,16 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                     );\n                     stacked_borrows.for_each(range, dcx, |stack, dcx, exposed_tags| {\n                         stack.grant(orig_tag, item, access, &global, dcx, exposed_tags)\n-                    })\n+                    })?;\n+                    drop(global);\n+                    if let Some(access) = access {\n+                        assert!(access == AccessKind::Read);\n+                        // Make sure the data race model also knows about this.\n+                        if let Some(data_race) = alloc_extra.data_race.as_ref() {\n+                            data_race.read(alloc_id, range, &this.machine)?;\n+                        }\n+                    }\n+                    Ok(())\n                 })?;\n                 return Ok(Some(alloc_id));\n             }\n@@ -938,6 +947,14 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n         stacked_borrows.for_each(range, dcx, |stack, dcx, exposed_tags| {\n             stack.grant(orig_tag, item, access, &global, dcx, exposed_tags)\n         })?;\n+        drop(global);\n+        if let Some(access) = access {\n+            assert!(access == AccessKind::Write);\n+            // Make sure the data race model also knows about this.\n+            if let Some(data_race) = alloc_extra.data_race.as_mut() {\n+                data_race.write(alloc_id, range, machine)?;\n+            }\n+        }\n \n         Ok(Some(alloc_id))\n     }"}, {"sha": "6040452a166cbebfe09878abf4236b52938ac0fc", "filename": "src/tools/miri/tests/fail/data_race/alloc_read_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n #![feature(new_uninit)]\n \n use std::mem::MaybeUninit;"}, {"sha": "51d431b36f3a36af40c9ca6a128aca6bdb7fc9d9", "filename": "src/tools/miri/tests/fail/data_race/alloc_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n #![feature(new_uninit)]\n \n use std::ptr::null_mut;"}, {"sha": "79c6760b7c42af4d71177abb468fceb981d6e9b4", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::spawn;"}, {"sha": "e069ac4ad6a83319a50597248cba798ad608fa4e", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;"}, {"sha": "9c025a0153d58276cdc1152e9be746922685c1d8", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;"}, {"sha": "30b3c4863740c0202ed87cc783586d5038ec51c1", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::spawn;"}, {"sha": "02b17cc57b61a51e2f45a0e5a5b81124f45c5970", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::spawn;"}, {"sha": "b5f4966d8842af1d714480c47da531bcc558d5e2", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;"}, {"sha": "9922468e5f8424c67fecf0ecf362fba5841abb1f", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_async_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::mem;\n use std::thread::{sleep, spawn};"}, {"sha": "8c8a6ac87f3ab550a0f0a75635de4695cfbda1b0", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::mem;\n use std::thread::{sleep, spawn};"}, {"sha": "8e1216f5bf0a023008afd139efb1f268299347bd", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::thread::spawn;\n "}, {"sha": "38f76af9de1373d5661d5a9aca9df4aec327f355", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::thread::spawn;\n "}, {"sha": "665e5ce4a1706c8c98dae69655da6bc0f41f4480", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::ptr::null_mut;\n use std::sync::atomic::{AtomicPtr, Ordering};"}, {"sha": "b36c6b5ac0e45ce5a8aeba89369b6b8e6007bacf", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::thread::spawn;\n "}, {"sha": "4af8b904626d203268d6a08a52ba3ee7f9e4a4f9", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::thread::spawn;\n "}, {"sha": "f851ce95785f7e884d8ef4d8d3109409aa5882a4", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::ptr::null_mut;\n use std::sync::atomic::{AtomicPtr, Ordering};"}, {"sha": "27aa16a122f364207547836f73ad2bdb92b673bf", "filename": "src/tools/miri/tests/fail/data_race/enable_after_join_to_main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::thread::spawn;\n "}, {"sha": "4d436d51f9895ee1c68a35931a98c69cdda8a7e1", "filename": "src/tools/miri/tests/fail/data_race/fence_after_load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n use std::sync::atomic::{fence, AtomicUsize, Ordering};\n use std::sync::Arc;\n use std::thread;"}, {"sha": "b26ec6c41427aadb1d0ae01d31e5415520ab2eb5", "filename": "src/tools/miri/tests/fail/data_race/read_write_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n-// We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+// We want to control preemption here. Stacked borrows interferes by having its own accesses.\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::thread::spawn;\n "}, {"sha": "2fbac173993e4dae564949efceb43d59e7f24034", "filename": "src/tools/miri/tests/fail/data_race/read_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-disable-isolation -Zmir-opt-level=0 -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmir-opt-level=0 -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n // Note: mir-opt-level set to 0 to prevent the read of stack_var in thread 1\n // from being optimized away and preventing the detection of the data-race."}, {"sha": "24040a9496114a37ac07d01ba48afa8b9a31576f", "filename": "src/tools/miri/tests/fail/data_race/relax_acquire_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::spawn;"}, {"sha": "2d7246858e108317a6d8b95572769721d4acbace", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::{sleep, spawn};"}, {"sha": "0f974e1c56d3fd0e032c2d53e77f5ee6e123d40c", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race_same_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::spawn;"}, {"sha": "2d13da30b46393a257c2383cf06bd0c5aa4ecd6a", "filename": "src/tools/miri/tests/fail/data_race/rmw_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::spawn;"}, {"sha": "cf5c2ed81cb1d1d8e7b992c9875dda159c4046ac", "filename": "src/tools/miri/tests/fail/data_race/stack_pop_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n use std::thread;\n \n #[derive(Copy, Clone)]"}, {"sha": "60e9ac2ac6c383f0006b410e50d0b01f6ca6d543", "filename": "src/tools/miri/tests/fail/data_race/write_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,5 +1,5 @@\n // We want to control preemption here.\n-//@compile-flags: -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::thread::spawn;\n "}, {"sha": "0a29dc13cba1746f66f5af7f21b75e275f68ea28", "filename": "src/tools/miri/tests/fail/data_race/write_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0 -Zmiri-disable-stacked-borrows\n \n use std::ptr::null_mut;\n use std::sync::atomic::{AtomicPtr, Ordering};"}, {"sha": "309d7a22be64f20b3eebafe3aa9d89f0d9d09235", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_read.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -0,0 +1,31 @@\n+//! Make sure that a retag acts like a write for the data race model.\n+//@compile-flags: -Zmiri-preemption-rate=0\n+#[derive(Copy, Clone)]\n+struct SendPtr(*mut u8);\n+\n+unsafe impl Send for SendPtr {}\n+\n+fn thread_1(p: SendPtr) {\n+    let p = p.0;\n+    unsafe {\n+        let _r = &*p;\n+    }\n+}\n+\n+fn thread_2(p: SendPtr) {\n+    let p = p.0;\n+    unsafe {\n+        *p = 5; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>`\n+    }\n+}\n+\n+fn main() {\n+    let mut x = 0;\n+    let p = std::ptr::addr_of_mut!(x);\n+    let p = SendPtr(p);\n+\n+    let t1 = std::thread::spawn(move || thread_1(p));\n+    let t2 = std::thread::spawn(move || thread_2(p));\n+    let _ = t1.join();\n+    let _ = t2.join();\n+}"}, {"sha": "f25d689524d1b3c86a565ea215a7ec5034a5e03a", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_read.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+  --> $DIR/retag_data_race_read.rs:LL:CC\n+   |\n+LL |         *p = 5;\n+   |         ^^^^^^ Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: BACKTRACE:\n+   = note: inside `thread_2` at $DIR/retag_data_race_read.rs:LL:CC\n+note: inside closure at $DIR/retag_data_race_read.rs:LL:CC\n+  --> $DIR/retag_data_race_read.rs:LL:CC\n+   |\n+LL |     let t2 = std::thread::spawn(move || thread_2(p));\n+   |                                         ^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "9368a0a919eb3c9a6dc7eadffdea342b5b7efa56", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_write.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.rs?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -0,0 +1,31 @@\n+//! Make sure that a retag acts like a write for the data race model.\n+//@compile-flags: -Zmiri-preemption-rate=0\n+#[derive(Copy, Clone)]\n+struct SendPtr(*mut u8);\n+\n+unsafe impl Send for SendPtr {}\n+\n+fn thread_1(p: SendPtr) {\n+    let p = p.0;\n+    unsafe {\n+        let _r = &mut *p;\n+    }\n+}\n+\n+fn thread_2(p: SendPtr) {\n+    let p = p.0;\n+    unsafe {\n+        *p = 5; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n+    }\n+}\n+\n+fn main() {\n+    let mut x = 0;\n+    let p = std::ptr::addr_of_mut!(x);\n+    let p = SendPtr(p);\n+\n+    let t1 = std::thread::spawn(move || thread_1(p));\n+    let t2 = std::thread::spawn(move || thread_2(p));\n+    let _ = t1.join();\n+    let _ = t2.join();\n+}"}, {"sha": "f97e6bb11e9d674a7535cfef0329d4c8397f61aa", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_write.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3bd57823f602164fa94fde3e7997770bd97cea8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.stderr?ref=a3bd57823f602164fa94fde3e7997770bd97cea8", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+  --> $DIR/retag_data_race_write.rs:LL:CC\n+   |\n+LL |         *p = 5;\n+   |         ^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: BACKTRACE:\n+   = note: inside `thread_2` at $DIR/retag_data_race_write.rs:LL:CC\n+note: inside closure at $DIR/retag_data_race_write.rs:LL:CC\n+  --> $DIR/retag_data_race_write.rs:LL:CC\n+   |\n+LL |     let t2 = std::thread::spawn(move || thread_2(p));\n+   |                                         ^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}]}