{"sha": "4591a245c7eec9f70d668982b1383cd2a6854af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OTFhMjQ1YzdlZWM5ZjcwZDY2ODk4MmIxMzgzY2QyYTY4NTRhZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-22T20:38:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-22T20:38:19Z"}, "message": "Auto merge of #54188 - lqd:fallout-53695, r=nikomatsakis\n\nNLL: disallow creation of immediately unusable variables\n\nFix #53695\n\nOriginal description follows\n\n----\n\nThis WIP PR is for discussing the impact of fixing #53695 by injecting a fake read in let patterns.\n\n(Travis will fail, at least the `mir-opt` suite is failing in its current state)", "tree": {"sha": "182aea300e2792c6f042da22b652a972bf600563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/182aea300e2792c6f042da22b652a972bf600563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4591a245c7eec9f70d668982b1383cd2a6854af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4591a245c7eec9f70d668982b1383cd2a6854af5", "html_url": "https://github.com/rust-lang/rust/commit/4591a245c7eec9f70d668982b1383cd2a6854af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4591a245c7eec9f70d668982b1383cd2a6854af5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af50e3822c4ceda60445c4a2adbb3bfa480ebd39", "url": "https://api.github.com/repos/rust-lang/rust/commits/af50e3822c4ceda60445c4a2adbb3bfa480ebd39", "html_url": "https://github.com/rust-lang/rust/commit/af50e3822c4ceda60445c4a2adbb3bfa480ebd39"}, {"sha": "3bdba74ed3f8a859331ff658a6c0235855331095", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bdba74ed3f8a859331ff658a6c0235855331095", "html_url": "https://github.com/rust-lang/rust/commit/3bdba74ed3f8a859331ff658a6c0235855331095"}], "stats": {"total": 287, "additions": 185, "deletions": 102}, "files": [{"sha": "313ef054829c5adcd6e7f393d80faebf12f68350", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -238,7 +238,8 @@ for mir::StatementKind<'gcx> {\n                 place.hash_stable(hcx, hasher);\n                 rvalue.hash_stable(hcx, hasher);\n             }\n-            mir::StatementKind::ReadForMatch(ref place) => {\n+            mir::StatementKind::FakeRead(ref cause, ref place) => {\n+                cause.hash_stable(hcx, hasher);\n                 place.hash_stable(hcx, hasher);\n             }\n             mir::StatementKind::SetDiscriminant { ref place, variant_index } => {\n@@ -271,6 +272,8 @@ for mir::StatementKind<'gcx> {\n     }\n }\n \n+impl_stable_hash_for!(enum mir::FakeReadCause { ForMatch, ForLet });\n+\n impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>>\n     for mir::ValidationOperand<'gcx, T>\n     where T: HashStable<StableHashingContext<'a>>"}, {"sha": "57aa2186927a91671e02abf985ddb2371029c5f2", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -1613,8 +1613,10 @@ pub enum StatementKind<'tcx> {\n     Assign(Place<'tcx>, Rvalue<'tcx>),\n \n     /// This represents all the reading that a pattern match may do\n-    /// (e.g. inspecting constants and discriminant values).\n-    ReadForMatch(Place<'tcx>),\n+    /// (e.g. inspecting constants and discriminant values), and the\n+    /// kind of pattern it comes from. This is in order to adapt potential\n+    /// error messages to these specific patterns.\n+    FakeRead(FakeReadCause, Place<'tcx>),\n \n     /// Write the discriminant for a variant to the enum Place.\n     SetDiscriminant {\n@@ -1662,6 +1664,31 @@ pub enum StatementKind<'tcx> {\n     Nop,\n }\n \n+/// The `FakeReadCause` describes the type of pattern why a `FakeRead` statement exists.\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub enum FakeReadCause {\n+    /// Inject a fake read of the borrowed input at the start of each arm's\n+    /// pattern testing code.\n+    ///\n+    /// This should ensure that you cannot change the variant for an enum\n+    /// while you are in the midst of matching on it.\n+    ForMatch,\n+\n+    /// Officially, the semantics of\n+    ///\n+    /// `let pattern = <expr>;`\n+    ///\n+    /// is that `<expr>` is evaluated into a temporary and then this temporary is\n+    /// into the pattern.\n+    ///\n+    /// However, if we see the simple pattern `let var = <expr>`, we optimize this to\n+    /// evaluate `<expr>` directly into the variable `var`. This is mostly unobservable,\n+    /// but in some cases it can affect the borrow checker, as in #53695.\n+    /// Therefore, we insert a \"fake read\" here to ensure that we get\n+    /// appropriate errors.\n+    ForLet,\n+}\n+\n /// The `ValidationOp` describes what happens with each of the operands of a\n /// `Validate` statement.\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, PartialEq, Eq)]\n@@ -1718,7 +1745,7 @@ impl<'tcx> Debug for Statement<'tcx> {\n         use self::StatementKind::*;\n         match self.kind {\n             Assign(ref place, ref rv) => write!(fmt, \"{:?} = {:?}\", place, rv),\n-            ReadForMatch(ref place) => write!(fmt, \"ReadForMatch({:?})\", place),\n+            FakeRead(ref cause, ref place) => write!(fmt, \"FakeRead({:?}, {:?})\", cause, place),\n             // (reuse lifetime rendering policy from ppaux.)\n             EndRegion(ref ce) => write!(fmt, \"EndRegion({})\", ty::ReScope(*ce)),\n             Validate(ref op, ref places) => write!(fmt, \"Validate({:?}, {:?})\", op, places),\n@@ -2585,6 +2612,7 @@ CloneTypeFoldableAndLiftImpls! {\n     Mutability,\n     SourceInfo,\n     UpvarDecl,\n+    FakeReadCause,\n     ValidationOp,\n     SourceScope,\n     SourceScopeData,\n@@ -2651,7 +2679,7 @@ BraceStructTypeFoldableImpl! {\n EnumTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for StatementKind<'tcx> {\n         (StatementKind::Assign)(a, b),\n-        (StatementKind::ReadForMatch)(place),\n+        (StatementKind::FakeRead)(cause, place),\n         (StatementKind::SetDiscriminant) { place, variant_index },\n         (StatementKind::StorageLive)(a),\n         (StatementKind::StorageDead)(a),"}, {"sha": "91c83ecb2e23ce308852999cf78ecc891a95dfc1", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -354,7 +354,7 @@ macro_rules! make_mir_visitor {\n                                           ref $($mutability)* rvalue) => {\n                         self.visit_assign(block, place, rvalue, location);\n                     }\n-                    StatementKind::ReadForMatch(ref $($mutability)* place) => {\n+                    StatementKind::FakeRead(_, ref $($mutability)* place) => {\n                         self.visit_place(place,\n                                          PlaceContext::Inspect,\n                                          location);"}, {"sha": "1fdbf687be8f81f3c99820b1240cf0c00cb6eff0", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -1330,7 +1330,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     disable_nll_user_type_assert: bool = (false, parse_bool, [UNTRACKED],\n         \"disable user provided type assertion in NLL\"),\n     nll_dont_emit_read_for_match: bool = (false, parse_bool, [UNTRACKED],\n-        \"in match codegen, do not include ReadForMatch statements (used by mir-borrowck)\"),\n+        \"in match codegen, do not include FakeRead statements (used by mir-borrowck)\"),\n     dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n         \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting).\"),\n     polonius: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "37ef408c6bdee6dcf8631f25b2b7649b6d735e7c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -1505,7 +1505,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.emit_read_for_match()\n     }\n \n-    /// If true, make MIR codegen for `match` emit ReadForMatch\n+    /// If true, make MIR codegen for `match` emit FakeRead\n     /// statements (which simulate the maximal effect of executing the\n     /// patterns in a match arm).\n     pub fn emit_read_for_match(&self) -> bool {"}, {"sha": "b4eb7615f98b42fbf59f404c815514c3bfcd6e5c", "filename": "src/librustc_codegen_llvm/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -89,7 +89,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                 asm::codegen_inline_asm(&bx, asm, outputs, input_vals);\n                 bx\n             }\n-            mir::StatementKind::ReadForMatch(_) |\n+            mir::StatementKind::FakeRead(..) |\n             mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Validate(..) |\n             mir::StatementKind::AscribeUserType(..) |"}, {"sha": "44bfc0cf06de731588ed0ef6db55d2109a5620b0", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -12,7 +12,7 @@ use borrow_check::WriteKind;\n use rustc::middle::region::ScopeTree;\n use rustc::mir::VarBindingForm;\n use rustc::mir::{BindingForm, BorrowKind, ClearCrossCrate, Field, Local};\n-use rustc::mir::{LocalDecl, LocalKind, Location, Operand, Place};\n+use rustc::mir::{FakeReadCause, LocalDecl, LocalKind, Location, Operand, Place};\n use rustc::mir::{ProjectionElem, Rvalue, Statement, StatementKind};\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n@@ -1020,6 +1020,21 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             false\n         }\n     }\n+\n+    /// Returns the `FakeReadCause` at this location if it is a `FakeRead` statement.\n+    pub(super) fn retrieve_fake_read_cause_for_location(\n+        &self,\n+        location: &Location,\n+    ) -> Option<FakeReadCause> {\n+        let stmt = self.mir.basic_blocks()[location.block]\n+            .statements\n+            .get(location.statement_index)?;\n+        if let StatementKind::FakeRead(cause, _) = stmt.kind {\n+            Some(cause)\n+        } else {\n+            None\n+        }\n+    }\n }\n \n // The span(s) associated to a use of a place."}, {"sha": "aea0bb748b2e89cfece5c2f16e39c48a26d6bfe8", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -501,9 +501,9 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                     flow_state,\n                 );\n             }\n-            StatementKind::ReadForMatch(ref place) => {\n+            StatementKind::FakeRead(_, ref place) => {\n                 self.access_place(\n-                    ContextKind::ReadForMatch.new(location),\n+                    ContextKind::FakeRead.new(location),\n                     (place, span),\n                     (Deep, Read(ReadKind::Borrow(BorrowKind::Shared))),\n                     LocalMutationIsAllowed::No,\n@@ -2229,7 +2229,7 @@ enum ContextKind {\n     CallDest,\n     Assert,\n     Yield,\n-    ReadForMatch,\n+    FakeRead,\n     StorageDead,\n }\n "}, {"sha": "c094350757e2fcb026e1b1f1325d8117aa0f0b55", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -11,7 +11,7 @@\n use borrow_check::borrow_set::BorrowData;\n use borrow_check::nll::region_infer::Cause;\n use borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n-use rustc::mir::{Local, Location, Place, TerminatorKind};\n+use rustc::mir::{FakeReadCause, Local, Location, Place, TerminatorKind};\n use rustc_errors::DiagnosticBuilder;\n use rustc::ty::Region;\n \n@@ -142,7 +142,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     if spans.for_closure() {\n                         \"borrow later captured here by closure\"\n                     } else {\n-                        \"borrow later used here\"\n+                        // Check if the location represents a `FakeRead`, and adapt the error\n+                        // message to the `FakeReadCause` it is from: in particular,\n+                        // the ones inserted in optimized `let var = <expr>` patterns.\n+                        match self.retrieve_fake_read_cause_for_location(&location) {\n+                            Some(FakeReadCause::ForLet) => \"borrow later stored here\",\n+                            _ => \"borrow later used here\"\n+                        }\n                     }\n                 };\n                 err.span_label(spans.var_or_use(), message);"}, {"sha": "0b7fededa973236c37c7b791d1eab88553890a66", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -93,9 +93,9 @@ impl<'cg, 'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cg, 'cx, 'tc\n                     JustWrite\n                 );\n             }\n-            StatementKind::ReadForMatch(ref place) => {\n+            StatementKind::FakeRead(_, ref place) => {\n                 self.access_place(\n-                    ContextKind::ReadForMatch.new(location),\n+                    ContextKind::FakeRead.new(location),\n                     place,\n                     (Deep, Read(ReadKind::Borrow(BorrowKind::Shared))),\n                     LocalMutationIsAllowed::No,"}, {"sha": "1f12e9c747f450c86a89b102831ce5267fbacedb", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -995,7 +995,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 }\n             }\n-            StatementKind::ReadForMatch(_)\n+            StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::InlineAsm { .. }"}, {"sha": "c30dcdafdb40284ea2470600436e8e86aad92d5d", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -145,19 +145,16 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     if let (true, Some(borrow_temp)) =\n                         (tcx.emit_read_for_match(), borrowed_input_temp.clone())\n                     {\n-                        // inject a fake read of the borrowed input at\n-                        // the start of each arm's pattern testing\n-                        // code.\n-                        //\n-                        // This should ensure that you cannot change\n-                        // the variant for an enum while you are in\n-                        // the midst of matching on it.\n+                        // Inject a fake read, see comments on `FakeReadCause::ForMatch`.\n                         let pattern_source_info = self.source_info(pattern.span);\n                         self.cfg.push(\n                             *pre_binding_block,\n                             Statement {\n                                 source_info: pattern_source_info,\n-                                kind: StatementKind::ReadForMatch(borrow_temp.clone()),\n+                                kind: StatementKind::FakeRead(\n+                                    FakeReadCause::ForMatch,\n+                                    borrow_temp.clone(),\n+                                ),\n                             },\n                         );\n                     }\n@@ -264,6 +261,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let place =\n                     self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard);\n                 unpack!(block = self.into(&place, block, initializer));\n+\n+\n+                // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n+                let source_info = self.source_info(irrefutable_pat.span);\n+                self.cfg.push(\n+                    block,\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place.clone()),\n+                    },\n+                );\n+\n                 self.schedule_drop_for_binding(var, irrefutable_pat.span, OutsideGuard);\n                 block.unit()\n             }\n@@ -305,6 +314,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     },\n                 );\n \n+                // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n+                self.cfg.push(\n+                    block,\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place.clone()),\n+                    },\n+                );\n+\n                 self.schedule_drop_for_binding(var, irrefutable_pat.span, OutsideGuard);\n                 block.unit()\n             }"}, {"sha": "ed2f780baf1c29dca01f9322b81c4523daf18e5f", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -336,7 +336,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            mir::StatementKind::ReadForMatch(..) |\n+            mir::StatementKind::FakeRead(..) |\n             mir::StatementKind::SetDiscriminant { .. } |\n             mir::StatementKind::StorageLive(..) |\n             mir::StatementKind::Validate(..) |"}, {"sha": "63adcb5132a7142d183bedc7480b37bfe3bd838d", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -281,7 +281,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                 }\n                 self.gather_rvalue(rval);\n             }\n-            StatementKind::ReadForMatch(ref place) => {\n+            StatementKind::FakeRead(_, ref place) => {\n                 self.create_move_path(place);\n             }\n             StatementKind::InlineAsm { ref outputs, ref inputs, ref asm } => {"}, {"sha": "5db7e0b5eb531fa2c1be8334e6a91b5fe7988078", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -150,9 +150,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 self.deallocate_local(old_val)?;\n             }\n \n-            // No dynamic semantics attached to `ReadForMatch`; MIR\n+            // No dynamic semantics attached to `FakeRead`; MIR\n             // interpreter is solely intended for borrowck'ed code.\n-            ReadForMatch(..) => {}\n+            FakeRead(..) => {}\n \n             // Validity checks.\n             Validate(op, ref places) => {"}, {"sha": "286de52bec5cae574859100116fd81918fbc0cfc", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n         self.source_info = statement.source_info;\n         match statement.kind {\n             StatementKind::Assign(..) |\n-            StatementKind::ReadForMatch(..) |\n+            StatementKind::FakeRead(..) |\n             StatementKind::SetDiscriminant { .. } |\n             StatementKind::StorageLive(..) |\n             StatementKind::StorageDead(..) |"}, {"sha": "a997bd37c50a39a8468fc0f7afeea95154f1d51d", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -1090,7 +1090,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 StatementKind::Assign(ref place, ref rvalue) => {\n                     this.visit_assign(bb, place, rvalue, location);\n                 }\n-                StatementKind::ReadForMatch(..) |\n+                StatementKind::FakeRead(..) |\n                 StatementKind::SetDiscriminant { .. } |\n                 StatementKind::StorageLive(_) |\n                 StatementKind::StorageDead(_) |"}, {"sha": "541b3c0607de31686bb433287dd5a1411d6c26fb", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -216,7 +216,7 @@ fn check_statement(\n             check_rvalue(tcx, mir, rval, span)\n         }\n \n-        StatementKind::ReadForMatch(_) => Err((span, \"match in const fn is unstable\".into())),\n+        StatementKind::FakeRead(..) => Err((span, \"match in const fn is unstable\".into())),\n \n         // just an assignment\n         StatementKind::SetDiscriminant { .. } => Ok(()),"}, {"sha": "298e38228d3570b3e0673aa9e3159aaeeb248ef1", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -49,7 +49,7 @@ impl RemoveNoopLandingPads {\n     ) -> bool {\n         for stmt in &mir[bb].statements {\n             match stmt.kind {\n-                StatementKind::ReadForMatch(_) |\n+                StatementKind::FakeRead(..) |\n                 StatementKind::StorageLive(_) |\n                 StatementKind::StorageDead(_) |\n                 StatementKind::EndRegion(_) |"}, {"sha": "487a18f6620b2c9edfd434068f81bb5797bfab86", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -157,7 +157,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             mir::StatementKind::Assign(ref place, ref rvalue) => {\n                 (place, rvalue)\n             }\n-            mir::StatementKind::ReadForMatch(_) |\n+            mir::StatementKind::FakeRead(..) |\n             mir::StatementKind::StorageLive(_) |\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |"}, {"sha": "0b9b20d3c45398495cbe898d729a1968ac562ca6", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.record(\"Statement\", statement);\n         self.record(match statement.kind {\n             StatementKind::Assign(..) => \"StatementKind::Assign\",\n-            StatementKind::ReadForMatch(..) => \"StatementKind::ReadForMatch\",\n+            StatementKind::FakeRead(..) => \"StatementKind::FakeRead\",\n             StatementKind::EndRegion(..) => \"StatementKind::EndRegion\",\n             StatementKind::Validate(..) => \"StatementKind::Validate\",\n             StatementKind::SetDiscriminant { .. } => \"StatementKind::SetDiscriminant\","}, {"sha": "b474e1a0d6caea16936b8beee92844b2d9e10647", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -47,6 +47,7 @@ fn main() {\n //    bb0: {\n //        StorageLive(_1);\n //        _1 = const false;\n+//        FakeRead(ForLet, _1);\n //        StorageLive(_2);\n //        StorageLive(_3);\n //        _3 = _1;\n@@ -55,6 +56,7 @@ fn main() {\n //        StorageLive(_4);\n //        _4 = std::option::Option<std::boxed::Box<u32>>::None;\n //        AscribeUserType(_4, o, Canonical { variables: [], value: std::option::Option<std::boxed::Box<u32>> });\n+//        FakeRead(ForLet, _4);\n //        StorageLive(_5);\n //        StorageLive(_6);\n //        _6 = move _4;"}, {"sha": "f6877d979e0736e6ed3a71dac20f5dec953a9ebf", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -63,6 +63,7 @@ impl Drop for S {\n //\n //     bb4: {\n //         StorageDead(_2);\n+//         FakeRead(ForLet, _1);\n //         StorageLive(_4);\n //         _4 = move _1;\n //         _3 = const std::mem::drop(move _4) -> [return: bb5, unwind: bb7];"}, {"sha": "23c00c3bce1d836fd9b76ce7c1a1174ff4f6d0a7", "filename": "src/test/mir-opt/end_region_1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_1.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -29,8 +29,10 @@ fn main() {\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = const 3i32;\n+//         FakeRead(ForLet, _1);\n //         StorageLive(_2);\n //         _2 = &'10_1rs _1;\n+//         FakeRead(ForLet, _2);\n //         _0 = ();\n //         EndRegion('10_1rs);\n //         StorageDead(_2);"}, {"sha": "08de5320a2b324074840330f1dd90882aa9cf02f", "filename": "src/test/mir-opt/end_region_2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_2.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -45,8 +45,10 @@ fn main() {\n //     bb2: {\n //         StorageLive(_2);\n //         _2 = const true;\n+//         FakeRead(ForLet, _2);\n //         StorageLive(_3);\n //         _3 = &'23_1rs _2;\n+//         FakeRead(ForLet, _3);\n //         StorageLive(_5);\n //         _5 = _2;\n //         switchInt(move _5) -> [false: bb5, otherwise: bb4];\n@@ -67,6 +69,7 @@ fn main() {\n //         StorageDead(_5);\n //         StorageLive(_7);\n //         _7 = &'23_3rs _2;\n+//         FakeRead(ForLet, _7);\n //         _1 = ();\n //         EndRegion('23_3rs);\n //         StorageDead(_7);"}, {"sha": "189154332b85a8c4f6464fa8ea759b6f1ff05adb", "filename": "src/test/mir-opt/end_region_3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_3.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -49,6 +49,7 @@ fn main() {\n //         _1 = const true;\n //         StorageLive(_3);\n //         _3 = &'26_1rs _1;\n+//         FakeRead(ForLet, _3);\n //         StorageLive(_5);\n //         _5 = _1;\n //         switchInt(move _5) -> [false: bb5, otherwise: bb4];\n@@ -69,6 +70,7 @@ fn main() {\n //         StorageDead(_5);\n //         StorageLive(_7);\n //         _7 = &'26_3rs _1;\n+//         FakeRead(ForLet, _7);\n //         _2 = ();\n //         EndRegion('26_3rs);\n //         StorageDead(_7);"}, {"sha": "d5701669d2bddc6c891bd370f3052bfd0d4801d4", "filename": "src/test/mir-opt/end_region_4.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -45,10 +45,13 @@ fn foo(i: i32) {\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n+//         FakeRead(ForLet, _1);\n //         StorageLive(_2);\n //         _2 = const 0i32;\n+//         FakeRead(ForLet, _2);\n //         StorageLive(_3);\n //         _3 = &'26_2rs _2;\n+//         FakeRead(ForLet, _3);\n //         StorageLive(_5);\n //         _5 = (*_3);\n //         _4 = const foo(move _5) -> [return: bb2, unwind: bb3];\n@@ -60,6 +63,7 @@ fn foo(i: i32) {\n //         StorageDead(_5);\n //         StorageLive(_6);\n //         _6 = &'26_4rs _2;\n+//         FakeRead(ForLet, _6);\n //         _0 = ();\n //         EndRegion('26_4rs);\n //         StorageDead(_6);"}, {"sha": "7a5d71ee21b93e16961a60171ba94d80cba525dd", "filename": "src/test/mir-opt/end_region_5.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -38,6 +38,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n+//         FakeRead(ForLet, _1);\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         _4 = &'14s _1;"}, {"sha": "b9162f85fa71ea3e376c19e52e7c3051b86226da", "filename": "src/test/mir-opt/end_region_6.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -38,6 +38,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n+//         FakeRead(ForLet, _1);\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         _4 = &'19s _1;\n@@ -73,6 +74,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     bb0: {\n //         StorageLive(_2);\n //         _2 = &'16_0rs (*(_1.0: &'19s D));\n+//         FakeRead(ForLet, _2);\n //         _0 = ((*_2).0: i32);\n //         EndRegion('16_0rs);\n //         StorageDead(_2);"}, {"sha": "4deea75e56b046ea556b7cf576149f1a36307230", "filename": "src/test/mir-opt/end_region_7.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -37,6 +37,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n+//         FakeRead(ForLet, _1);\n //         StorageLive(_3);\n //         _3 = [closure@NodeId(22)] { d: move _1 };\n //         _2 = const foo(move _3) -> [return: bb2, unwind: bb4];\n@@ -74,6 +75,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     bb0: {\n //         StorageLive(_2);\n //         _2 = &'16_0rs (_1.0: D);\n+//         FakeRead(ForLet, _2);\n //         _0 = ((*_2).0: i32);\n //         EndRegion('16_0rs);\n //         StorageDead(_2);"}, {"sha": "6f899a0db15d918f39cd62ca2c0fb9806fad3ec5", "filename": "src/test/mir-opt/end_region_8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -40,8 +40,10 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //    bb0: {\n //        StorageLive(_1);\n //        _1 = D::{{constructor}}(const 0i32,);\n+//        FakeRead(ForLet, _1);\n //        StorageLive(_2);\n //        _2 = &'21_1rs _1;\n+//        FakeRead(ForLet, _2);\n //        StorageLive(_4);\n //        _4 = [closure@NodeId(22)] { r: _2 };\n //        _3 = const foo(move _4) -> [return: bb2, unwind: bb3];"}, {"sha": "b43f25e6f548c6c439494ee6ac76d19ecbf75ca9", "filename": "src/test/mir-opt/end_region_9.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_9.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -55,8 +55,10 @@ fn main() {\n //     bb0: {\n //        StorageLive(_1);\n //        _1 = const false;\n+//        FakeRead(ForLet, _1);\n //        StorageLive(_2);\n //        _2 = const 3i32;\n+//        FakeRead(ForLet, _2);\n //        falseUnwind -> [real: bb2, cleanup: bb1];\n //    }\n //    bb1: {"}, {"sha": "75cfb5c2f6239feac7efcc69c11008a84e4c62b6", "filename": "src/test/mir-opt/end_region_cyclic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -83,6 +83,7 @@ fn query() -> bool { true }\n //         StorageDead(_4);\n //         _2 = S<'36_0rs> { r: move _3 };\n //         StorageDead(_3);\n+//         FakeRead(ForLet, _2);\n //         StorageLive(_6);\n //         _6 = &'17s (_2.0: std::cell::Cell<std::option::Option<&'36_0rs S<'36_0rs>>>);\n //         StorageLive(_7);"}, {"sha": "aab432ddc8700159e7fa5dcb2bc252f0b611f1e3", "filename": "src/test/mir-opt/inline-closure-borrows-arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -40,6 +40,7 @@ fn foo<T: Copy>(_t: T, q: &i32) -> i32 {\n //     _5 = (move _6, move _7);\n //     _8 = move (_5.0: &i32);\n //     _9 = move (_5.1: &i32);\n+//     ...\n //     _0 = (*_8);\n //     ...\n //     return;"}, {"sha": "78820d7a6f5f8de50e87cbca2e873bc3a8b0d91b", "filename": "src/test/mir-opt/issue-38669.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -25,6 +25,7 @@ fn main() {\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = const false;\n+//         FakeRead(ForLet, _1);\n //         goto -> bb2;\n //     }\n //     bb1: {"}, {"sha": "3bc735bc6c5ed2efa4257d237809596d808800f6", "filename": "src/test/mir-opt/issue-49232.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -87,6 +87,7 @@ fn main() {\n //         goto -> bb6;\n //     }\n //     bb14: {\n+//         FakeRead(ForLet, _2);\n //         StorageDead(_3);\n //         StorageLive(_7);\n //         _7 = &_2;"}, {"sha": "2e526a221cc72de5794c5b34797c0b9209cbb599", "filename": "src/test/mir-opt/loop_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Floop_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Floop_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -42,6 +42,7 @@ fn main() {\n //    bb5: { // The loop body (body_block)\n //        StorageLive(_5);\n //        _5 = const 1i32;\n+//        FakeRead(ForLet, _5);\n //        StorageDead(_5);\n //        goto -> bb4;\n //    }"}, {"sha": "b9f4c239127379f03481f12f3708b8209b7f28e9", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -66,15 +66,15 @@ fn main() {\n //      goto -> bb13;\n //  }\n //  bb3: { // binding3(empty) and arm3\n-//      ReadForMatch(_4);\n+//      FakeRead(ForMatch, _4);\n //      falseEdges -> [real: bb8, imaginary: bb4]; //pre_binding1\n //  }\n //  bb4: {\n-//      ReadForMatch(_4);\n+//      FakeRead(ForMatch, _4);\n //      falseEdges -> [real: bb12, imaginary: bb5]; //pre_binding2\n //  }\n //  bb5: {\n-//      ReadForMatch(_4);\n+//      FakeRead(ForMatch, _4);\n //      falseEdges -> [real: bb2, imaginary: bb6]; //pre_binding3\n //  }\n //  bb6: {\n@@ -136,15 +136,15 @@ fn main() {\n //      goto -> bb13;\n //  }\n //  bb3: {\n-//      ReadForMatch(_4);\n+//      FakeRead(ForMatch, _4);\n //      falseEdges -> [real: bb8, imaginary: bb4]; //pre_binding1\n //  }\n //  bb4: {\n-//      ReadForMatch(_4);\n+//      FakeRead(ForMatch, _4);\n //      falseEdges -> [real: bb2, imaginary: bb5]; //pre_binding2\n //  }\n //  bb5: {\n-//      ReadForMatch(_4);\n+//      FakeRead(ForMatch, _4);\n //      falseEdges -> [real: bb12, imaginary: bb6]; //pre_binding3\n //  }\n //  bb6: {\n@@ -202,19 +202,19 @@ fn main() {\n //     resume;\n // }\n // bb2: {\n-//     ReadForMatch(_4);\n+//     FakeRead(ForMatch, _4);\n //     falseEdges -> [real: bb7, imaginary: bb3]; //pre_binding1\n // }\n // bb3: {\n-//     ReadForMatch(_4);\n+//     FakeRead(ForMatch, _4);\n //     falseEdges -> [real: bb11, imaginary: bb4]; //pre_binding2\n // }\n // bb4: {\n-//     ReadForMatch(_4);\n+//     FakeRead(ForMatch, _4);\n //     falseEdges -> [real: bb12, imaginary: bb5]; //pre_binding3\n // }\n // bb5: {\n-//     ReadForMatch(_4);\n+//     FakeRead(ForMatch, _4);\n //     falseEdges -> [real: bb16, imaginary: bb6]; //pre_binding4\n // }\n // bb6: {"}, {"sha": "2b926422b001299d176316aad35df9a287406daf", "filename": "src/test/mir-opt/nll/region-subtyping-basic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -32,9 +32,9 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#2r    | U0 | {bb2[0..=3], bb3[0..=1]}\n-// | '_#3r    | U0 | {bb2[1..=3], bb3[0..=1]}\n-// | '_#4r    | U0 | {bb2[3], bb3[0..=1]}\n+// | '_#2r    | U0 | {bb2[0..=5], bb3[0..=1]}\n+// | '_#3r    | U0 | {bb2[1..=5], bb3[0..=1]}\n+// | '_#4r    | U0 | {bb2[4..=5], bb3[0..=1]}\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n // let _6: &'_#4r usize;"}, {"sha": "203814ce949ff20d9fe491ba7de32385abf46d63", "filename": "src/test/mir-opt/storage_ranges.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -23,18 +23,21 @@ fn main() {\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = const 0i32;\n+//         FakeRead(ForLet, _1);\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         StorageLive(_5);\n //         _5 = _1;\n //         _4 = std::option::Option<i32>::Some(move _5,);\n //         StorageDead(_5);\n //         _3 = &_4;\n+//         FakeRead(ForLet, _3);\n //         _2 = ();\n //         StorageDead(_4);\n //         StorageDead(_3);\n //         StorageLive(_6);\n //         _6 = const 1i32;\n+//         FakeRead(ForLet, _6);\n //         _0 = ();\n //         StorageDead(_6);\n //         StorageDead(_1);"}, {"sha": "3ea8e99e953b44a4f3f4358635f663d029b50e87", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -67,6 +67,7 @@ fn main() {\n //         Validate(Suspend(ReScope(Remainder { block: ItemLocalId(25), first_statement_index: 0 })), [(*_2): i32]);\n //         _3 = &ReErased (*_2);\n //         Validate(Acquire, [(*_3): i32/ReScope(Remainder { block: ItemLocalId(25), first_statement_index: 0 }) (imm)]);\n+//         FakeRead(ForLet, _3);\n //         _0 = (*_3);\n //         EndRegion(ReScope(Remainder { block: ItemLocalId(25), first_statement_index: 0 }));\n //         StorageDead(_3);"}, {"sha": "0cb0b7debfaa31b63455e6feef488d0434e80f9e", "filename": "src/test/mir-opt/validate_2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -28,6 +28,7 @@ fn main() {\n //         Validate(Acquire, [_1: std::boxed::Box<[i32]>]);\n //         StorageDead(_2);\n //         StorageDead(_3);\n+//         FakeRead(ForLet, _1);\n //         _0 = ();\n //         Validate(Release, [_1: std::boxed::Box<[i32]>]);\n //         drop(_1) -> [return: bb2, unwind: bb3];"}, {"sha": "89b67bd34c83db6aa08648745652ef3870b889a0", "filename": "src/test/mir-opt/validate_3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -47,10 +47,12 @@ fn main() {\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = Test { x: const 0i32 };\n+//         FakeRead(ForLet, _1);\n //         StorageLive(_2);\n //         Validate(Suspend(ReScope(Remainder { block: ItemLocalId(20), first_statement_index: 3 })), [_1: Test]);\n //         _2 = &ReErased _1;\n //         Validate(Acquire, [(*_2): Test/ReScope(Remainder { block: ItemLocalId(20), first_statement_index: 3 }) (imm)]);\n+//         FakeRead(ForLet, _2);\n //         StorageLive(_4);\n //         StorageLive(_5);\n //         Validate(Suspend(ReScope(Node(ItemLocalId(18)))), [((*_2).0: i32): i32/ReScope(Remainder { block: ItemLocalId(20), first_statement_index: 3 }) (imm)]);"}, {"sha": "6e131ca41aa97d92995c4909dd13a7bf549fe86e", "filename": "src/test/ui/extern/extern-const.fixed", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/af50e3822c4ceda60445c4a2adbb3bfa480ebd39/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/af50e3822c4ceda60445c4a2adbb3bfa480ebd39/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed?ref=af50e3822c4ceda60445c4a2adbb3bfa480ebd39", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// run-rustfix\n-// compile-flags: -Z continue-parse-after-error\n-\n-extern \"C\" {\n-    static C: u8; //~ ERROR extern items cannot be `const`\n-}\n-\n-fn main() {\n-    // We suggest turning the (illegal) extern `const` into an extern `static`,\n-    // but this also requires `unsafe` (a deny-by-default lint at comment time,\n-    // future error; Issue #36247)\n-    unsafe {\n-        let _x = C;\n-    }\n-}"}, {"sha": "d8a167311d55c12dbe389a2187607208fceff214", "filename": "src/test/ui/extern/extern-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-rustfix\n+// FIXME(#54388): re-enable rustfix later, when this test has consistent output across targets\n // compile-flags: -Z continue-parse-after-error\n \n extern \"C\" {"}, {"sha": "2488df7772b3f08383a50f1fb21b7751069b9fc6", "filename": "src/test/ui/generator/borrowing.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -10,15 +10,16 @@ LL |     };\n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:24:9\n    |\n+LL |       let _b = {\n+   |           -- borrow later stored here\n+LL |           let a = 3;\n LL | /         || {\n LL | |             yield &a\n LL | |             //~^ ERROR: `a` does not live long enough\n LL | |         }\n    | |_________^ borrowed value does not live long enough\n LL |       };\n    |       - `a` dropped here while still borrowed\n-LL |   }\n-   |   - borrow later used here, when `_b` is dropped\n \n error: aborting due to 2 previous errors\n "}, {"sha": "538903c591868420f9cf9e1c79aa92f765f4b988", "filename": "src/test/ui/regions/regions-steal-closure.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fregions%2Fregions-steal-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fregions%2Fregions-steal-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-steal-closure.nll.stderr?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -1,14 +1,15 @@\n error[E0597]: `i` does not live long enough\n   --> $DIR/regions-steal-closure.rs:24:28\n    |\n+LL |     let mut cl_box = {\n+   |         ---------- borrow later stored here\n+LL |         let mut i = 3;\n LL |         box_it(Box::new(|| i += 1)) //~ ERROR `i` does not live long enough\n    |                         -- ^ borrowed value does not live long enough\n    |                         |\n    |                         value captured here\n LL |     };\n    |     - `i` dropped here while still borrowed\n-LL |     cl_box.cl.call_mut(());\n-   |     --------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "fe2fa2887ed4813f87ee5b110fbf17eb4fbdbb90", "filename": "src/test/ui/span/range-2.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -1,24 +1,24 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/range-2.rs:17:9\n    |\n+LL |     let r = {\n+   |         - borrow later stored here\n+...\n LL |         &a..&b\n    |         ^^ borrowed value does not live long enough\n LL |     };\n    |     - `a` dropped here while still borrowed\n-...\n-LL |     r.use_ref();\n-   |     - borrow later used here\n \n error[E0597]: `b` does not live long enough\n   --> $DIR/range-2.rs:17:13\n    |\n+LL |     let r = {\n+   |         - borrow later stored here\n+...\n LL |         &a..&b\n    |             ^^ borrowed value does not live long enough\n LL |     };\n    |     - `b` dropped here while still borrowed\n-...\n-LL |     r.use_ref();\n-   |     - borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "80e2266896fabb56f1b2fed1f7c6c1c17648eb27", "filename": "src/test/ui/span/send-is-not-static-ensures-scoping.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -1,28 +1,28 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-ensures-scoping.rs:26:17\n    |\n+LL |     let bad = {\n+   |         --- borrow later stored here\n+LL |         let x = 1;\n LL |         let y = &x;\n    |                 ^^ borrowed value does not live long enough\n ...\n LL |     };\n    |     - `x` dropped here while still borrowed\n-LL | \n-LL |     bad.join();\n-   |     --- borrow later used here\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/send-is-not-static-ensures-scoping.rs:30:22\n    |\n+LL |     let bad = {\n+   |         --- borrow later stored here\n+...\n LL |         scoped(|| {\n    |                -- value captured here\n LL |             let _z = y;\n    |                      ^ borrowed value does not live long enough\n ...\n LL |     };\n    |     - `y` dropped here while still borrowed\n-LL | \n-LL |     bad.join();\n-   |     --- borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5b79b71dda0d63d34d72754e4ac6f3541960b556", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -1,24 +1,24 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-std-sync-2.rs:21:20\n    |\n+LL |     let lock = {\n+   |         ---- borrow later stored here\n+LL |         let x = 1;\n LL |         Mutex::new(&x)\n    |                    ^^ borrowed value does not live long enough\n LL |     };\n    |     - `x` dropped here while still borrowed\n-...\n-LL |     let _dangling = *lock.lock().unwrap();\n-   |                      ---- borrow later used here\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-std-sync-2.rs:31:21\n    |\n+LL |     let lock = {\n+   |         ---- borrow later stored here\n+LL |         let x = 1;\n LL |         RwLock::new(&x)\n    |                     ^^ borrowed value does not live long enough\n LL |     };\n    |     - `x` dropped here while still borrowed\n-LL |     //~^^ ERROR `x` does not live long enough\n-LL |     let _dangling = *lock.read().unwrap();\n-   |                      ---- borrow later used here\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-std-sync-2.rs:41:25"}, {"sha": "85eb348257bbf302b14b75b89ede7014d4e1ccab", "filename": "src/test/ui/span/wf-method-late-bound-regions.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -1,13 +1,13 @@\n error[E0597]: `pointer` does not live long enough\n   --> $DIR/wf-method-late-bound-regions.rs:30:18\n    |\n+LL |     let dangling = {\n+   |         -------- borrow later stored here\n+LL |         let pointer = Box::new(42);\n LL |         f2.xmute(&pointer)\n    |                  ^^^^^^^^ borrowed value does not live long enough\n LL |     };\n    |     - `pointer` dropped here while still borrowed\n-LL |     //~^^ ERROR `pointer` does not live long enough\n-LL |     println!(\"{}\", dangling);\n-   |                    -------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "7ba06b6ffb2d7c57e63697d1957f3d1bad120aaa", "filename": "src/test/ui/unboxed-closures/unboxed-closure-region.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4591a245c7eec9f70d668982b1383cd2a6854af5/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr?ref=4591a245c7eec9f70d668982b1383cd2a6854af5", "patch": "@@ -1,14 +1,15 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/unboxed-closure-region.rs:18:12\n    |\n+LL |     let _f = {\n+   |         -- borrow later stored here\n+LL |         let x = 0;\n LL |         || x //~ ERROR `x` does not live long enough\n    |         -- ^ borrowed value does not live long enough\n    |         |\n    |         value captured here\n LL |     };\n    |     - `x` dropped here while still borrowed\n-LL |     _f;\n-   |     -- borrow later used here\n \n error: aborting due to previous error\n "}]}