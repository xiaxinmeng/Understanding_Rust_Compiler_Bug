{"sha": "90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZmNkNDQ3NmM2MzQ2ZmFkMGFhNGE5NTJkYTBlYmVjMzlmZjlkNGU=", "commit": {"author": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2018-01-12T21:41:45Z"}, "committer": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2018-01-15T18:36:52Z"}, "message": "Reexport -> re-export in error messages", "tree": {"sha": "2b0d10ec7033eb3c12fcd73835c982c77bad5c73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b0d10ec7033eb3c12fcd73835c982c77bad5c73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJMBAABCAA2FiEET6WvJ6ML0pFC5CKw0Es5psokOQIFAlpc9MQYHGNhcm9sLm5p\nY2hvbHNAZ21haWwuY29tAAoJENBLOabKJDkClhgP/3KUCyCSIwj2asnkeIifz4aY\n/S7+RfsEfspIAvstzfw/i+3nPANMVcHAtDrdeCdHbD6LgrbUNsZvcZGX1chn0LtP\nnch1eVVJyjNW9wPB7P7a72N1m5rBcM7vxfSzaeMPkK2krNEwfoMIeL3QgtOOQGyY\nWAlo6lmTXo2bKDl6Ch5JcILRZBh2a/+uQuAZLOMoaJBlVPYW/rJDw65AQQQ7YmZw\n+nJJbkLe8lTfxXvNO8pEyEtlv55aAV1da2R0p9PxxFYMi4gzEanaohP+P245FFTR\ntwCtJ2Tl7U2dUaVfXTt22YUU7zZ9ko0ISH5f7sb4IiuR51e3ZE0oc/ADU6P0iExs\nyQW8TumsomOmpiM00PJx0HNnf5aJfAQDnC1gploCGAPxnqlBi8bgsU+/vVouJg3S\nhejrNRFgT5l4FizL2shXiv4NvDzuOIEMGiNmJ463l1pO86X+n3nB/fMqOTJVG2GO\nSnnxVfk8SZ+rHXlyY76Dbd6KnpSR30Mmc9bHCnvuC5XvM1vxwPogMxCwdtZ5/GYQ\n3/T5295CmH0Ku/+J47wbURqb1etxxxHHO61yEyRM/fMVvv0VuOHqZfByvQYW8sRi\nzkMQ5WyKe+grjkfitx9t9UuH26ehIqMN3uusv6QiECGLKdWYW8dch9ib8I14G53z\nP8XazvNjl407HJ8IZcKp\n=4t3T\n-----END PGP SIGNATURE-----", "payload": "tree 2b0d10ec7033eb3c12fcd73835c982c77bad5c73\nparent c698496f8489e471024c60b3b4abc3c405ce7280\nauthor Carol (Nichols || Goulding) <carol.nichols@gmail.com> 1515793305 -0500\ncommitter Carol (Nichols || Goulding) <carol.nichols@gmail.com> 1516041412 -0500\n\nReexport -> re-export in error messages\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "html_url": "https://github.com/rust-lang/rust/commit/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/comments", "author": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c698496f8489e471024c60b3b4abc3c405ce7280", "url": "https://api.github.com/repos/rust-lang/rust/commits/c698496f8489e471024c60b3b4abc3c405ce7280", "html_url": "https://github.com/rust-lang/rust/commit/c698496f8489e471024c60b3b4abc3c405ce7280"}], "stats": {"total": 85, "additions": 44, "deletions": 41}, "files": [{"sha": "143d2c2ea28bba8361cdf48539715bb418d45d39", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -127,7 +127,7 @@ declare_lint! {\n declare_lint! {\n     pub PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n     Deny,\n-    \"detect public reexports of private extern crates\"\n+    \"detect public re-exports of private extern crates\"\n }\n \n declare_lint! {"}, {"sha": "c55bf395d71b3247b384ca990482f25dc41bdacf", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -683,7 +683,7 @@ impl<'a> Resolver<'a> {\n                 let (def, vis) = (binding.def(), binding.vis);\n                 self.macro_exports.push(Export { ident, def, vis, span, is_import: true });\n             } else {\n-                span_err!(self.session, span, E0470, \"reexported macro not found\");\n+                span_err!(self.session, span, E0470, \"re-exported macro not found\");\n             }\n         }\n         used\n@@ -729,7 +729,7 @@ impl<'a> Resolver<'a> {\n                 }\n             } else if attr.check_name(\"macro_reexport\") {\n                 let bad_macro_reexport = |this: &mut Self, span| {\n-                    span_err!(this.session, span, E0467, \"bad macro reexport\");\n+                    span_err!(this.session, span, E0467, \"bad macro re-export\");\n                 };\n                 if let Some(names) = attr.meta_item_list() {\n                     for attr in names {"}, {"sha": "3f0f1a1a4cb58ef2cd5c3e1fef2966955c3e5874", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -1374,7 +1374,7 @@ arguments.\n \"##,\n \n E0467: r##\"\n-Macro reexport declarations were empty or malformed.\n+Macro re-export declarations were empty or malformed.\n \n Erroneous code examples:\n \n@@ -1389,12 +1389,12 @@ extern crate core as other_macros_for_good;\n This is a syntax error at the level of attribute declarations.\n \n Currently, `macro_reexport` requires at least one macro name to be listed.\n-Unlike `macro_use`, listing no names does not reexport all macros from the\n+Unlike `macro_use`, listing no names does not re-export all macros from the\n given crate.\n \n Decide which macros you would like to export and list them properly.\n \n-These are proper reexport declarations:\n+These are proper re-export declarations:\n \n ```ignore (cannot-doctest-multicrate-project)\n #[macro_reexport(some_macro, another_macro)]\n@@ -1475,7 +1475,7 @@ extern crate some_crate; //ok!\n \"##,\n \n E0470: r##\"\n-A macro listed for reexport was not found.\n+A macro listed for re-export was not found.\n \n Erroneous code example:\n \n@@ -1493,7 +1493,7 @@ exported from the given crate.\n \n This could be caused by a typo. Did you misspell the macro's name?\n \n-Double-check the names of the macros listed for reexport, and that the crate\n+Double-check the names of the macros listed for re-export, and that the crate\n in question exports them.\n \n A working version:"}, {"sha": "3aedc840521665145472ba1ac061f00a9cef5c0b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -2751,7 +2751,7 @@ impl<'a> Resolver<'a> {\n                                 let lint = lint::builtin::LEGACY_CONSTRUCTOR_VISIBILITY;\n                                 self.session.buffer_lint(lint, id, span,\n                                     \"private struct constructors are not usable through \\\n-                                     reexports in outer modules\",\n+                                     re-exports in outer modules\",\n                                 );\n                                 res = Some(PathResolution::new(ctor_def));\n                             }"}, {"sha": "b5a949b30878ca7386832bdffa8b8bc8434661e0", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -803,21 +803,22 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         if !any_successful_reexport {\n             let (ns, binding) = reexport_error.unwrap();\n             if ns == TypeNS && binding.is_extern_crate() {\n-                let msg = format!(\"extern crate `{}` is private, and cannot be reexported \\\n-                                   (error E0365), consider declaring with `pub`\",\n+                let msg = format!(\"extern crate `{}` is private, and cannot be \\\n+                                   re-exported (error E0365), consider declaring with \\\n+                                   `pub`\",\n                                    ident);\n                 self.session.buffer_lint(PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n                                          directive.id,\n                                          directive.span,\n                                          &msg);\n             } else if ns == TypeNS {\n                 struct_span_err!(self.session, directive.span, E0365,\n-                                 \"`{}` is private, and cannot be reexported\", ident)\n-                    .span_label(directive.span, format!(\"reexport of private `{}`\", ident))\n+                                 \"`{}` is private, and cannot be re-exported\", ident)\n+                    .span_label(directive.span, format!(\"re-export of private `{}`\", ident))\n                     .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n                     .emit();\n             } else {\n-                let msg = format!(\"`{}` is private, and cannot be reexported\", ident);\n+                let msg = format!(\"`{}` is private, and cannot be re-exported\", ident);\n                 let note_msg =\n                     format!(\"consider marking `{}` as `pub` in the imported module\", ident);\n                 struct_span_err!(self.session, directive.span, E0364, \"{}\", &msg)\n@@ -932,12 +933,12 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         !orig_binding.vis.is_at_least(binding.vis, &*self) {\n                             let msg = match directive.subclass {\n                                 ImportDirectiveSubclass::SingleImport { .. } => {\n-                                    format!(\"variant `{}` is private and cannot be reexported\",\n+                                    format!(\"variant `{}` is private and cannot be re-exported\",\n                                             ident)\n                                 },\n                                 ImportDirectiveSubclass::GlobImport { .. } => {\n                                     let msg = \"enum is private and its variants \\\n-                                               cannot be reexported\".to_owned();\n+                                               cannot be re-exported\".to_owned();\n                                     let error_id = (DiagnosticMessageId::ErrorId(0), // no code?!\n                                                     Some(binding.span),\n                                                     msg.clone());"}, {"sha": "fb0ef2ea730a7e39d1c977e00f2a1c564db3562c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -1479,7 +1479,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ItemKind::ExternCrate(_) => {\n                 if let Some(attr) = attr::find_by_name(&i.attrs[..], \"macro_reexport\") {\n                     gate_feature_post!(&self, macro_reexport, attr.span,\n-                                       \"macros reexports are experimental \\\n+                                       \"macros re-exports are experimental \\\n                                         and possibly buggy\");\n                 }\n             }"}, {"sha": "c11f4356176a60fe05d860bd3bcc5c73023698be", "filename": "src/test/compile-fail-fulldeps/gated-macro-reexports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -16,6 +16,6 @@\n #![crate_type = \"dylib\"]\n \n #[macro_reexport(reexported)]\n-//~^ ERROR macros reexports are experimental and possibly buggy\n+//~^ ERROR macros re-exports are experimental and possibly buggy\n #[macro_use] #[no_link]\n extern crate macro_reexport_1;"}, {"sha": "18a72b0ff9a55a70361236962013d25030088914", "filename": "src/test/compile-fail/E0365.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2FE0365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2FE0365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0365.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -13,6 +13,6 @@ mod foo {\n }\n \n pub use foo as foo2;\n-//~^ ERROR `foo` is private, and cannot be reexported [E0365]\n+//~^ ERROR `foo` is private, and cannot be re-exported [E0365]\n \n fn main() {}"}, {"sha": "f50b5b0e849992ed3bb0c12e21d24d6325bf3e3d", "filename": "src/test/compile-fail/imports/reexports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -13,7 +13,7 @@ mod a {\n     mod foo {}\n \n     mod a {\n-        pub use super::foo; //~ ERROR cannot be reexported\n+        pub use super::foo; //~ ERROR cannot be re-exported\n         pub use super::*; //~ ERROR must import something with the glob's visibility\n     }\n }\n@@ -24,17 +24,17 @@ mod b {\n \n     pub mod a {\n         pub use super::foo; // This is OK since the value `foo` is visible enough.\n-        fn f(_: foo::S) {} // `foo` is imported in the type namespace (but not `pub` reexported).\n+        fn f(_: foo::S) {} // `foo` is imported in the type namespace (but not `pub` re-exported).\n     }\n \n     pub mod b {\n         pub use super::*; // This is also OK since the value `foo` is visible enough.\n-        fn f(_: foo::S) {} // Again, the module `foo` is imported (but not `pub` reexported).\n+        fn f(_: foo::S) {} // Again, the module `foo` is imported (but not `pub` re-exported).\n     }\n }\n \n mod c {\n-    // Test that `foo` is not reexported.\n+    // Test that `foo` is not re-exported.\n     use b::a::foo::S; //~ ERROR `foo`\n     use b::b::foo::S as T; //~ ERROR `foo`\n }"}, {"sha": "f5a20dd96dc902d354c33449dfdfad2dec6178df", "filename": "src/test/compile-fail/issue-46209-private-enum-variant-reexport.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -12,14 +12,14 @@\n \n mod rank {\n     pub use self::Professor::*;\n-    //~^ ERROR enum is private and its variants cannot be reexported\n+    //~^ ERROR enum is private and its variants cannot be re-exported\n     pub use self::Lieutenant::{JuniorGrade, Full};\n-    //~^ ERROR variant `JuniorGrade` is private and cannot be reexported\n-    //~| ERROR variant `Full` is private and cannot be reexported\n+    //~^ ERROR variant `JuniorGrade` is private and cannot be re-exported\n+    //~| ERROR variant `Full` is private and cannot be re-exported\n     pub use self::PettyOfficer::*;\n-    //~^ ERROR enum is private and its variants cannot be reexported\n+    //~^ ERROR enum is private and its variants cannot be re-exported\n     pub use self::Crewman::*;\n-    //~^ ERROR enum is private and its variants cannot be reexported\n+    //~^ ERROR enum is private and its variants cannot be re-exported\n \n     enum Professor {\n         Adjunct,"}, {"sha": "36a6fce00a13a05f9e6b20607ba30e727ee1606e", "filename": "src/test/compile-fail/macro-reexport-malformed-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -12,5 +12,5 @@\n #![feature(macro_reexport)]\n \n #[allow(unused_extern_crates)]\n-#[macro_reexport]  //~ ERROR bad macro reexport\n+#[macro_reexport]  //~ ERROR bad macro re-export\n extern crate std;"}, {"sha": "5f741d010de806e0d4910ad5b5887988f8e5d007", "filename": "src/test/compile-fail/macro-reexport-malformed-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -12,5 +12,5 @@\n #![feature(macro_reexport)]\n \n #[allow(unused_extern_crates)]\n-#[macro_reexport=\"foo\"]  //~ ERROR bad macro reexport\n+#[macro_reexport=\"foo\"]  //~ ERROR bad macro re-export\n extern crate std;"}, {"sha": "1a7e3b918cd966d53b8d68230f1f89556ce74a8c", "filename": "src/test/compile-fail/macro-reexport-malformed-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -12,5 +12,5 @@\n #![feature(macro_reexport)]\n \n #[allow(unused_extern_crates)]\n-#[macro_reexport(foo=\"bar\")]  //~ ERROR bad macro reexport\n+#[macro_reexport(foo=\"bar\")]  //~ ERROR bad macro re-export\n extern crate std;"}, {"sha": "50ac89e49e08ffab0b0f3590eee6f0bcd66e7c9b", "filename": "src/test/compile-fail/macro-reexport-undef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -13,7 +13,7 @@\n #![feature(macro_reexport)]\n \n #[macro_use(macro_two)]\n-#[macro_reexport(no_way)] //~ ERROR reexported macro not found\n+#[macro_reexport(no_way)] //~ ERROR re-exported macro not found\n extern crate two_macros;\n \n pub fn main() {"}, {"sha": "95144916fd7852046e6132751c8de6dcc58494e7", "filename": "src/test/compile-fail/privacy/legacy-ctor-visibility.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n #![allow(unused)]\n \n use m::S;\n@@ -19,7 +21,7 @@ mod m {\n         use S;\n         fn f() {\n             S(10);\n-            //~^ ERROR private struct constructors are not usable through reexports in outer modules\n+            //~^ ERROR private struct constructors are not usable through re-exports in outer modules\n             //~| WARN this was previously accepted\n         }\n     }"}, {"sha": "8c1d609e2446725e28259fe87fcd1f6e8b8b65a8", "filename": "src/test/compile-fail/privacy/restricted/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -28,7 +28,7 @@ mod foo {\n     fn f() {\n         use foo::bar::S;\n         pub(self) use foo::bar::f; // ok\n-        pub(super) use foo::bar::f as g; //~ ERROR cannot be reexported\n+        pub(super) use foo::bar::f as g; //~ ERROR cannot be re-exported\n         S::default().x; // ok\n         S::default().f(); // ok\n         S::g(); // ok"}, {"sha": "5d770f88155ec9f03f8b24d27d1802d2554b0b21", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -9,19 +9,19 @@\n // except according to those terms.\n \n mod m1 {\n-    pub use ::E::V; //~ ERROR variant `V` is private and cannot be reexported\n+    pub use ::E::V; //~ ERROR variant `V` is private and cannot be re-exported\n }\n \n mod m2 {\n-    pub use ::E::{V}; //~ ERROR variant `V` is private and cannot be reexported\n+    pub use ::E::{V}; //~ ERROR variant `V` is private and cannot be re-exported\n }\n \n mod m3 {\n-    pub use ::E::V::{self}; //~ ERROR variant `V` is private and cannot be reexported\n+    pub use ::E::V::{self}; //~ ERROR variant `V` is private and cannot be re-exported\n }\n \n mod m4 {\n-    pub use ::E::*; //~ ERROR enum is private and its variants cannot be reexported\n+    pub use ::E::*; //~ ERROR enum is private and its variants cannot be re-exported\n }\n \n enum E { V }"}, {"sha": "2e71e007e9eed6f011eab933fd34d33ba47c4f93", "filename": "src/test/compile-fail/pub-reexport-priv-extern-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs?ref=90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "patch": "@@ -11,23 +11,23 @@\n #![allow(unused)]\n \n extern crate core;\n-pub use core as reexported_core; //~ ERROR `core` is private, and cannot be reexported\n+pub use core as reexported_core; //~ ERROR `core` is private, and cannot be re-exported\n                                  //~^ WARN this was previously accepted\n \n mod foo1 {\n     extern crate core;\n }\n \n mod foo2 {\n-    use foo1::core; //~ ERROR `core` is private, and cannot be reexported\n+    use foo1::core; //~ ERROR `core` is private, and cannot be re-exported\n                     //~^ WARN this was previously accepted\n     pub mod bar {\n         extern crate core;\n     }\n }\n \n mod baz {\n-    pub use foo2::bar::core; //~ ERROR `core` is private, and cannot be reexported\n+    pub use foo2::bar::core; //~ ERROR `core` is private, and cannot be re-exported\n                              //~^ WARN this was previously accepted\n }\n "}]}