{"sha": "c86a7a01e27f78474ff5ce2fe7f88aa2cb14caad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NmE3YTAxZTI3Zjc4NDc0ZmY1Y2UyZmU3Zjg4YWEyY2IxNGNhYWQ=", "commit": {"author": {"name": "jD91mZM2", "email": "me@krake.one", "date": "2018-06-26T06:23:16Z"}, "committer": {"name": "jD91mZM2", "email": "me@krake.one", "date": "2018-06-26T18:31:35Z"}, "message": "Mention redox' behavior in doc comments", "tree": {"sha": "bcce0eaeb7810d12371835ef6b38b53370f96721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcce0eaeb7810d12371835ef6b38b53370f96721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c86a7a01e27f78474ff5ce2fe7f88aa2cb14caad", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEvF2uTsFosfm5TJhQMFXVRymnJmYFAlsyhocACgkQMFXVRymn\nJmYshAf+LfxPVYLzElnrmvjN8y6PCqlI+09Z5ToFN5+bsOQkOaNDewy0VUEGtsWL\nMDlpEyyR8iP3ayEX4yCgUv1iZkwgKu8kzLlKLsa+cieHg2f9tSPoAVrAOhLI5MnK\nD5WbIbqQa9cxqDkwNpA0wd/khIJ8XKbgklvRG87KWPOp3/6qjvn+Hxd03DJ2y65G\nKWwIAioYlSvfxbVsdUT+OjKk0GZFvawz77O3TIbxWWU6INJiF9Q97uirYPqTqTNt\n4vnLd2IbHPAIEy1Z3kx4K5aAV6ZmrAO9vqqtNmOHG2WwgPU8aCoxk5TPwXQ5f4wy\n0YKcJXMc0lkfqSjZdzcG/uSYRovqcA==\n=J0+r\n-----END PGP SIGNATURE-----", "payload": "tree bcce0eaeb7810d12371835ef6b38b53370f96721\nparent 4bebd24fcaa2a16ee9afcf51a7baca2a4b98b230\nauthor jD91mZM2 <me@krake.one> 1529994196 +0200\ncommitter jD91mZM2 <me@krake.one> 1530037895 +0200\n\nMention redox' behavior in doc comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c86a7a01e27f78474ff5ce2fe7f88aa2cb14caad", "html_url": "https://github.com/rust-lang/rust/commit/c86a7a01e27f78474ff5ce2fe7f88aa2cb14caad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c86a7a01e27f78474ff5ce2fe7f88aa2cb14caad/comments", "author": {"login": "jD91mZM2", "id": 12830969, "node_id": "MDQ6VXNlcjEyODMwOTY5", "avatar_url": "https://avatars.githubusercontent.com/u/12830969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jD91mZM2", "html_url": "https://github.com/jD91mZM2", "followers_url": "https://api.github.com/users/jD91mZM2/followers", "following_url": "https://api.github.com/users/jD91mZM2/following{/other_user}", "gists_url": "https://api.github.com/users/jD91mZM2/gists{/gist_id}", "starred_url": "https://api.github.com/users/jD91mZM2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jD91mZM2/subscriptions", "organizations_url": "https://api.github.com/users/jD91mZM2/orgs", "repos_url": "https://api.github.com/users/jD91mZM2/repos", "events_url": "https://api.github.com/users/jD91mZM2/events{/privacy}", "received_events_url": "https://api.github.com/users/jD91mZM2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jD91mZM2", "id": 12830969, "node_id": "MDQ6VXNlcjEyODMwOTY5", "avatar_url": "https://avatars.githubusercontent.com/u/12830969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jD91mZM2", "html_url": "https://github.com/jD91mZM2", "followers_url": "https://api.github.com/users/jD91mZM2/followers", "following_url": "https://api.github.com/users/jD91mZM2/following{/other_user}", "gists_url": "https://api.github.com/users/jD91mZM2/gists{/gist_id}", "starred_url": "https://api.github.com/users/jD91mZM2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jD91mZM2/subscriptions", "organizations_url": "https://api.github.com/users/jD91mZM2/orgs", "repos_url": "https://api.github.com/users/jD91mZM2/repos", "events_url": "https://api.github.com/users/jD91mZM2/events{/privacy}", "received_events_url": "https://api.github.com/users/jD91mZM2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bebd24fcaa2a16ee9afcf51a7baca2a4b98b230", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bebd24fcaa2a16ee9afcf51a7baca2a4b98b230", "html_url": "https://github.com/rust-lang/rust/commit/4bebd24fcaa2a16ee9afcf51a7baca2a4b98b230"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "2d791fa75cf29f2c22646481c5f2a66f76674567", "filename": "src/libstd/sys/redox/ext/net.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c86a7a01e27f78474ff5ce2fe7f88aa2cb14caad/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86a7a01e27f78474ff5ce2fe7f88aa2cb14caad/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs?ref=c86a7a01e27f78474ff5ce2fe7f88aa2cb14caad", "patch": "@@ -197,6 +197,9 @@ impl UnixStream {\n     ///     println!(\"Got error: {:?}\", err);\n     /// }\n     /// ```\n+    ///\n+    /// # Platform specific\n+    /// On Redox this always returns None.\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         Ok(None)\n     }\n@@ -400,6 +403,9 @@ impl UnixListener {\n     ///     println!(\"Got error: {:?}\", err);\n     /// }\n     /// ```\n+    ///\n+    /// # Platform specific\n+    /// On Redox this always returns None.\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         Ok(None)\n     }"}, {"sha": "55f43ccd7db4d7542e548343e4d4fcf77eb67275", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c86a7a01e27f78474ff5ce2fe7f88aa2cb14caad/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86a7a01e27f78474ff5ce2fe7f88aa2cb14caad/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=c86a7a01e27f78474ff5ce2fe7f88aa2cb14caad", "patch": "@@ -524,6 +524,9 @@ impl UnixStream {\n     ///     println!(\"Got error: {:?}\", err);\n     /// }\n     /// ```\n+    ///\n+    /// # Platform specific\n+    /// On Redox this always returns None.\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         self.0.take_error()\n@@ -846,6 +849,9 @@ impl UnixListener {\n     ///     println!(\"Got error: {:?}\", err);\n     /// }\n     /// ```\n+    ///\n+    /// # Platform specific\n+    /// On Redox this always returns None.\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         self.0.take_error()"}]}