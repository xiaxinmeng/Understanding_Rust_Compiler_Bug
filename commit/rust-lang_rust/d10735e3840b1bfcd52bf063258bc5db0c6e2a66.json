{"sha": "d10735e3840b1bfcd52bf063258bc5db0c6e2a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMDczNWUzODQwYjFiZmNkNTJiZjA2MzI1OGJjNWRiMGM2ZTJhNjY=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-16T23:03:14Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-23T16:19:44Z"}, "message": "Treat @T like ~T in borrowck\n\n`@` pointers used to have special rooting and regions management. With `@`\nmoving to standalone library, we don't need to keep that special\ntreatment around. This patch modifies the way `@` pointers are treated by\ntreating them as if they were `~` pointers\n\nRegion checker and borrow checker were modified in this patch.\n\nCloses #11586\n\n[breaking-change]", "tree": {"sha": "161a534e90dcce5c4114c292c7a9fbcd8d385941", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/161a534e90dcce5c4114c292c7a9fbcd8d385941"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d10735e3840b1bfcd52bf063258bc5db0c6e2a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d10735e3840b1bfcd52bf063258bc5db0c6e2a66", "html_url": "https://github.com/rust-lang/rust/commit/d10735e3840b1bfcd52bf063258bc5db0c6e2a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d10735e3840b1bfcd52bf063258bc5db0c6e2a66/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e80089576ecc853996a5098df0883d649db4845d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e80089576ecc853996a5098df0883d649db4845d", "html_url": "https://github.com/rust-lang/rust/commit/e80089576ecc853996a5098df0883d649db4845d"}], "stats": {"total": 80, "additions": 10, "deletions": 70}, "files": [{"sha": "4c17ddbb31f8604a44180371afa1d0e2b3d62ee8", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 63, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d10735e3840b1bfcd52bf063258bc5db0c6e2a66/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10735e3840b1bfcd52bf063258bc5db0c6e2a66/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=d10735e3840b1bfcd52bf063258bc5db0c6e2a66", "patch": "@@ -65,9 +65,6 @@ struct GuaranteeLifetimeContext<'a> {\n }\n \n impl<'a> GuaranteeLifetimeContext<'a> {\n-    fn tcx(&self) -> &'a ty::ctxt {\n-        self.bccx.tcx\n-    }\n \n     fn check(&self, cmt: &mc::cmt, discr_scope: Option<ast::NodeId>) -> R {\n         //! Main routine. Walks down `cmt` until we find the \"guarantor\".\n@@ -90,29 +87,10 @@ impl<'a> GuaranteeLifetimeContext<'a> {\n                 Ok(())\n             }\n \n-            mc::cat_deref(ref base, _, mc::GcPtr) => {\n-                let base_scope = self.scope(base);\n-\n-                // L-Deref-Managed-Imm-User-Root\n-                let omit_root =\n-                    self.bccx.is_subregion_of(self.loan_region, base_scope) &&\n-                    self.is_rvalue_or_immutable(base) &&\n-                    !self.is_moved(base);\n-\n-                if !omit_root {\n-                    // L-Deref-Managed-Imm-Compiler-Root\n-                    // L-Deref-Managed-Mut-Compiler-Root\n-                    Err(())\n-                } else {\n-                    debug!(\"omitting root, base={}, base_scope={:?}\",\n-                           base.repr(self.tcx()), base_scope);\n-                    Ok(())\n-                }\n-            }\n-\n             mc::cat_downcast(ref base) |\n             mc::cat_deref(ref base, _, mc::OwnedPtr) |     // L-Deref-Send\n-            mc::cat_interior(ref base, _) => {             // L-Field\n+            mc::cat_interior(ref base, _) |                // L-Field\n+            mc::cat_deref(ref base, _, mc::GcPtr) => {\n                 self.check(base, discr_scope)\n             }\n \n@@ -174,19 +152,6 @@ impl<'a> GuaranteeLifetimeContext<'a> {\n         }\n     }\n \n-    fn is_rvalue_or_immutable(&self,\n-                              cmt: &mc::cmt) -> bool {\n-        //! We can omit the root on an `@T` value if the location\n-        //! that holds the box is either (1) an rvalue, in which case\n-        //! it is in a non-user-accessible temporary, or (2) an immutable\n-        //! lvalue.\n-\n-        cmt.mutbl.is_immutable() || match cmt.guarantor().cat {\n-            mc::cat_rvalue(..) => true,\n-            _ => false\n-        }\n-    }\n-\n     fn check_scope(&self, max_scope: ty::Region) -> R {\n         //! Reports an error if `loan_region` is larger than `valid_scope`\n \n@@ -197,32 +162,6 @@ impl<'a> GuaranteeLifetimeContext<'a> {\n         }\n     }\n \n-    fn is_moved(&self, cmt: &mc::cmt) -> bool {\n-        //! True if `cmt` is something that is potentially moved\n-        //! out of the current stack frame.\n-\n-        match cmt.guarantor().cat {\n-            mc::cat_local(id) |\n-            mc::cat_arg(id) => {\n-                self.bccx.moved_variables_set.contains(&id)\n-            }\n-            mc::cat_rvalue(..) |\n-            mc::cat_static_item |\n-            mc::cat_copied_upvar(..) |\n-            mc::cat_deref(..) |\n-            mc::cat_upvar(..) => {\n-                false\n-            }\n-            ref r @ mc::cat_downcast(..) |\n-            ref r @ mc::cat_interior(..) |\n-            ref r @ mc::cat_discr(..) => {\n-                self.tcx().sess.span_bug(\n-                    cmt.span,\n-                    format!(\"illegal guarantor category: {:?}\", r));\n-            }\n-        }\n-    }\n-\n     fn scope(&self, cmt: &mc::cmt) -> ty::Region {\n         //! Returns the maximal region scope for the which the\n         //! lvalue `cmt` is guaranteed to be valid without any"}, {"sha": "4d0249a3011bd8369a2625b1c1d36baab76ff4db", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d10735e3840b1bfcd52bf063258bc5db0c6e2a66/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10735e3840b1bfcd52bf063258bc5db0c6e2a66/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=d10735e3840b1bfcd52bf063258bc5db0c6e2a66", "patch": "@@ -101,12 +101,18 @@ impl<'a> RestrictionsContext<'a> {\n                 self.extend(result, cmt.mutbl, LpInterior(i), restrictions)\n             }\n \n-            mc::cat_deref(cmt_base, _, pk @ mc::OwnedPtr) => {\n+            mc::cat_deref(cmt_base, _, pk @ mc::OwnedPtr) |\n+            mc::cat_deref(cmt_base, _, pk @ mc::GcPtr) => {\n                 // R-Deref-Send-Pointer\n                 //\n                 // When we borrow the interior of an owned pointer, we\n                 // cannot permit the base to be mutated, because that\n                 // would cause the unique pointer to be freed.\n+                //\n+                // For a managed pointer, the rules are basically the\n+                // same, because this could be the last ref.\n+                // Eventually we should make these non-special and\n+                // just rely on Deref<T> implementation.\n                 let result = self.restrict(\n                     cmt_base,\n                     restrictions | RESTR_MUTATE);\n@@ -134,11 +140,6 @@ impl<'a> RestrictionsContext<'a> {\n                 Safe\n             }\n \n-            mc::cat_deref(_, _, mc::GcPtr) => {\n-                // R-Deref-Imm-Managed\n-                Safe\n-            }\n-\n             mc::cat_deref(cmt_base, _, pk @ mc::BorrowedPtr(ty::MutBorrow, lt)) => {\n                 // R-Deref-Mut-Borrowed\n                 if !self.bccx.is_subregion_of(self.loan_region, lt) {"}, {"sha": "558d8298a1aee8c50f0d41870e0b2edf5ee23636", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10735e3840b1bfcd52bf063258bc5db0c6e2a66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10735e3840b1bfcd52bf063258bc5db0c6e2a66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=d10735e3840b1bfcd52bf063258bc5db0c6e2a66", "patch": "@@ -1263,12 +1263,12 @@ fn link_region(rcx: &Rcx,\n             }\n             mc::cat_discr(cmt_base, _) |\n             mc::cat_downcast(cmt_base) |\n+            mc::cat_deref(cmt_base, _, mc::GcPtr(..)) |\n             mc::cat_deref(cmt_base, _, mc::OwnedPtr) |\n             mc::cat_interior(cmt_base, _) => {\n                 // Interior or owned data requires its base to be valid\n                 cmt_borrowed = cmt_base;\n             }\n-            mc::cat_deref(_, _, mc::GcPtr(..)) |\n             mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n             mc::cat_static_item |\n             mc::cat_copied_upvar(..) |"}]}