{"sha": "acacfb20fd34162cfba5a4e7b5f1447e0403fa50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYWNmYjIwZmQzNDE2MmNmYmE1YTRlN2I1ZjE0NDdlMDQwM2ZhNTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-28T06:41:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-03T20:05:16Z"}, "message": "Various bug fixes and rebase conflicts", "tree": {"sha": "0790d82726f49abc6d37b8ac5c8ca0fbec7e0685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0790d82726f49abc6d37b8ac5c8ca0fbec7e0685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acacfb20fd34162cfba5a4e7b5f1447e0403fa50", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acacfb20fd34162cfba5a4e7b5f1447e0403fa50", "html_url": "https://github.com/rust-lang/rust/commit/acacfb20fd34162cfba5a4e7b5f1447e0403fa50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984727ff87bb8a9f345ababf473d1141f9e05c08", "url": "https://api.github.com/repos/rust-lang/rust/commits/984727ff87bb8a9f345ababf473d1141f9e05c08", "html_url": "https://github.com/rust-lang/rust/commit/984727ff87bb8a9f345ababf473d1141f9e05c08"}], "stats": {"total": 54, "additions": 24, "deletions": 30}, "files": [{"sha": "7ea98c0741a296faf8f1b825e6caf8f3accfd456", "filename": "src/libextra/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibextra%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibextra%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync%2Fmutex.rs?ref=acacfb20fd34162cfba5a4e7b5f1447e0403fa50", "patch": "@@ -89,13 +89,6 @@ pub static NATIVE_BLOCKED: uint = 1 << 2;\n /// let guard = m.lock();\n /// // do some work\n /// drop(guard); // unlock the lock\n-///\n-/// {\n-///     let _g = m.lock();\n-///     // do some work in a scope\n-/// }\n-///\n-/// // now the mutex is unlocked\n /// ```\n pub struct Mutex {\n     priv lock: StaticMutex,\n@@ -541,9 +534,9 @@ mod test {\n         let (p, c) = SharedChan::new();\n         for _ in range(0, N) {\n             let c2 = c.clone();\n-            do native::task::spawn { inc(); c2.send(()); }\n+            native::task::spawn(proc() { inc(); c2.send(()); });\n             let c2 = c.clone();\n-            do spawn { inc(); c2.send(()); }\n+            spawn(proc() { inc(); c2.send(()); });\n         }\n \n         drop(c);"}, {"sha": "826955d93e8d3834f9eb7d35b5a408e158a5e2d8", "filename": "src/libextra/sync/one.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibextra%2Fsync%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibextra%2Fsync%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync%2Fone.rs?ref=acacfb20fd34162cfba5a4e7b5f1447e0403fa50", "patch": "@@ -30,7 +30,7 @@ use sync::mutex::{StaticMutex, MUTEX_INIT};\n /// # Example\n ///\n /// ```rust\n-/// use std::unstable::mutex::{Once, ONCE_INIT};\n+/// use extra::sync::one::{Once, ONCE_INIT};\n ///\n /// static mut START: Once = ONCE_INIT;\n /// unsafe {\n@@ -140,7 +140,7 @@ mod test {\n         let (p, c) = SharedChan::new();\n         for _ in range(0, 10) {\n             let c = c.clone();\n-            do spawn {\n+            spawn(proc() {\n                 for _ in range(0, 4) { task::deschedule() }\n                 unsafe {\n                     o.doit(|| {\n@@ -150,7 +150,7 @@ mod test {\n                     assert!(run);\n                 }\n                 c.send(());\n-            }\n+            });\n         }\n \n         unsafe {"}, {"sha": "c8b84d445db2f282f6e0c6a602bc9311d058e5a8", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=acacfb20fd34162cfba5a4e7b5f1447e0403fa50", "patch": "@@ -1470,14 +1470,13 @@ mod test {\n                     LOCK.signal();   // wakeup waiting scheduler\n                     LOCK.wait();     // wait for them to grab the lock\n                     LOCK.unlock();\n-                    LOCK.destroy();  // now we're guaranteed they have no locks\n                 }\n             })));\n             drop(handle);\n \n             fin_po.recv();\n             pool.shutdown();\n         }\n-\n+        unsafe { LOCK.destroy(); }\n     }\n }"}, {"sha": "dd916c8f3c4b964fdf9fe96198be518e1a4a471a", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=acacfb20fd34162cfba5a4e7b5f1447e0403fa50", "patch": "@@ -204,17 +204,16 @@ pub fn init() {\n         use std::unstable::mutex::{Mutex, MUTEX_INIT};\n         static mut INITIALIZED: bool = false;\n         static mut LOCK: Mutex = MUTEX_INIT;\n-        unsafe {\n-            LOCK.lock();\n-            if !INITIALIZED {\n-                let mut data: WSADATA = intrinsics::init();\n-                let ret = WSAStartup(0x202,      // version 2.2\n-                                     &mut data);\n-                assert_eq!(ret, 0);\n-                INITIALIZED = true;\n-            }\n-            LOCK.unlock();\n+\n+        LOCK.lock();\n+        if !INITIALIZED {\n+            let mut data: WSADATA = intrinsics::init();\n+            let ret = WSAStartup(0x202,      // version 2.2\n+                                 &mut data);\n+            assert_eq!(ret, 0);\n+            INITIALIZED = true;\n         }\n+        LOCK.unlock();\n     }\n }\n "}, {"sha": "c00b0efadb5eea740eaaf95e39b9ebf8b039c3b1", "filename": "src/libnative/io/timer_helper.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibnative%2Fio%2Ftimer_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibnative%2Fio%2Ftimer_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_helper.rs?ref=acacfb20fd34162cfba5a4e7b5f1447e0403fa50", "patch": "@@ -22,7 +22,7 @@\n \n use std::cast;\n use std::rt;\n-use std::unstable::mutex::{Once, ONCE_INIT};\n+use std::unstable::mutex::{Mutex, MUTEX_INIT};\n \n use bookkeeping;\n use io::timer::{Req, Shutdown};\n@@ -37,10 +37,12 @@ static mut HELPER_CHAN: *mut SharedChan<Req> = 0 as *mut SharedChan<Req>;\n static mut HELPER_SIGNAL: imp::signal = 0 as imp::signal;\n \n pub fn boot(helper: fn(imp::signal, Port<Req>)) {\n-    static mut INIT: Once = ONCE_INIT;\n+    static mut LOCK: Mutex = MUTEX_INIT;\n+    static mut INITIALIZED: bool = false;\n \n     unsafe {\n-        INIT.doit(|| {\n+        LOCK.lock();\n+        if !INITIALIZED {\n             let (msgp, msgc) = SharedChan::new();\n             HELPER_CHAN = cast::transmute(~msgc);\n             let (receive, send) = imp::new();\n@@ -52,7 +54,9 @@ pub fn boot(helper: fn(imp::signal, Port<Req>)) {\n             });\n \n             rt::at_exit(proc() { shutdown() });\n-        })\n+            INITIALIZED = true;\n+        }\n+        LOCK.unlock();\n     }\n }\n "}, {"sha": "e224a06818af18f444914251bd1ec021d80645c6", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=acacfb20fd34162cfba5a4e7b5f1447e0403fa50", "patch": "@@ -96,7 +96,6 @@ pub mod write {\n     use lib::llvm::llvm;\n     use lib::llvm::{ModuleRef, TargetMachineRef, PassManagerRef};\n     use lib;\n-    use syntax::abi;\n     use util::common::time;\n     use syntax::abi;\n "}, {"sha": "fb62bed9ed0ae674fe88cba64d9381b7036b089d", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acacfb20fd34162cfba5a4e7b5f1447e0403fa50/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=acacfb20fd34162cfba5a4e7b5f1447e0403fa50", "patch": "@@ -384,7 +384,7 @@ impl<T> AtomicOption<T> {\n     }\n \n     #[cfg(stage0)]\n-    pub fn empty() -> AtomicOption<T> { AtomicOption { p: 0 as *mut c_void } }\n+    pub fn empty() -> AtomicOption<T> { AtomicOption { p: 0 as *mut u8 } }\n     #[cfg(not(stage0))]\n     pub fn empty() -> AtomicOption<T> { AtomicOption { p: 0 } }\n "}]}