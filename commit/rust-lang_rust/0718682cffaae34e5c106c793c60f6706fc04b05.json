{"sha": "0718682cffaae34e5c106c793c60f6706fc04b05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MTg2ODJjZmZhYWUzNGU1YzEwNmM3OTNjNjBmNjcwNmZjMDRiMDU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-02-04T20:33:03Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:28:10Z"}, "message": "Fix compilation of other crates", "tree": {"sha": "3c28ec7419d5dd3078e8941e0914fa6ddd3a3ab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c28ec7419d5dd3078e8941e0914fa6ddd3a3ab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0718682cffaae34e5c106c793c60f6706fc04b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0718682cffaae34e5c106c793c60f6706fc04b05", "html_url": "https://github.com/rust-lang/rust/commit/0718682cffaae34e5c106c793c60f6706fc04b05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0718682cffaae34e5c106c793c60f6706fc04b05/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5", "html_url": "https://github.com/rust-lang/rust/commit/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "63c85ca34a82f852948d5239fefafcc59a36db6e", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0718682cffaae34e5c106c793c60f6706fc04b05/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0718682cffaae34e5c106c793c60f6706fc04b05/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=0718682cffaae34e5c106c793c60f6706fc04b05", "patch": "@@ -13,6 +13,7 @@ use hir_def::{\n     AdtId, ConstId, DefWithBodyId, EnumId, FunctionId, HasModule, ImplId, LocalEnumVariantId,\n     LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n     TypeParamId, UnionId,\n+    GenericDefId\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -21,7 +22,8 @@ use hir_expand::{\n };\n use hir_ty::{\n     autoderef, display::HirFormatter, expr::ExprValidator, method_resolution, ApplicationTy,\n-    Canonical, InEnvironment, TraitEnvironment, Ty, TyDefId, TypeCtor, TypeWalk,\n+    Canonical, InEnvironment, TraitEnvironment, Ty, TyDefId, TypeCtor,\n+    Substs\n };\n use ra_db::{CrateId, Edition, FileId};\n use ra_prof::profile;\n@@ -270,7 +272,13 @@ impl StructField {\n \n     pub fn ty(&self, db: &impl HirDatabase) -> Type {\n         let var_id = self.parent.into();\n-        let ty = db.field_types(var_id)[self.id].clone();\n+        let generic_def_id: GenericDefId = match self.parent {\n+            VariantDef::Struct(it) => it.id.into(),\n+            VariantDef::Union(it) => it.id.into(),\n+            VariantDef::EnumVariant(it) => it.parent.id.into(),\n+        };\n+        let substs = Substs::type_params(db, generic_def_id);\n+        let ty = db.field_types(var_id)[self.id].clone().subst(&substs);\n         Type::new(db, self.parent.module(db).id.krate.into(), var_id, ty)\n     }\n \n@@ -789,11 +797,7 @@ impl ImplBlock {\n     pub fn target_ty(&self, db: &impl HirDatabase) -> Type {\n         let impl_data = db.impl_data(self.id);\n         let resolver = self.id.resolver(db);\n-        let ctx = hir_ty::TyLoweringContext {\n-            db,\n-            resolver: &resolver,\n-            impl_trait_mode: hir_ty::ImplTraitLoweringMode::Disallowed,\n-        };\n+        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n         let environment = TraitEnvironment::lower(db, &resolver);\n         let ty = Ty::from_hir(&ctx, &impl_data.target_type);\n         Type {\n@@ -856,9 +860,10 @@ impl Type {\n     fn from_def(\n         db: &impl HirDatabase,\n         krate: CrateId,\n-        def: impl HasResolver + Into<TyDefId>,\n+        def: impl HasResolver + Into<TyDefId> + Into<GenericDefId>,\n     ) -> Type {\n-        let ty = db.ty(def.into());\n+        let substs = Substs::type_params(db, def);\n+        let ty = db.ty(def.into()).subst(&substs);\n         Type::new(db, krate, def, ty)\n     }\n \n@@ -955,7 +960,7 @@ impl Type {\n             match a_ty.ctor {\n                 TypeCtor::Tuple { .. } => {\n                     for ty in a_ty.parameters.iter() {\n-                        let ty = ty.clone().subst(&a_ty.parameters);\n+                        let ty = ty.clone();\n                         res.push(self.derived(ty));\n                     }\n                 }"}, {"sha": "314be17b87fb41744e756d645956038cfb95ee76", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0718682cffaae34e5c106c793c60f6706fc04b05/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0718682cffaae34e5c106c793c60f6706fc04b05/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=0718682cffaae34e5c106c793c60f6706fc04b05", "patch": "@@ -361,10 +361,16 @@ impl Substs {\n     }\n \n     /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n-    pub(crate) fn type_params(generic_params: &Generics) -> Substs {\n+    pub(crate) fn type_params_for_generics(generic_params: &Generics) -> Substs {\n         Substs(generic_params.iter().map(|(id, _)| Ty::Param(id)).collect())\n     }\n \n+    /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n+    pub fn type_params(db: &impl HirDatabase, def: impl Into<GenericDefId>) -> Substs {\n+        let params = generics(db, def.into());\n+        Substs::type_params_for_generics(&params)\n+    }\n+\n     /// Return Substs that replace each parameter by a bound variable.\n     pub(crate) fn bound_vars(generic_params: &Generics) -> Substs {\n         Substs(generic_params.iter().enumerate().map(|(idx, _)| Ty::Bound(idx as u32)).collect())\n@@ -1026,7 +1032,7 @@ impl HirDisplay for Ty {\n                     TypeParamProvenance::ArgumentImplTrait => {\n                         write!(f, \"impl \")?;\n                         let bounds = f.db.generic_predicates_for_param(*id);\n-                        let substs = Substs::type_params(&generics);\n+                        let substs = Substs::type_params_for_generics(&generics);\n                         write_bounds_like_dyn_trait(&bounds.iter().map(|b| b.clone().subst(&substs)).collect::<Vec<_>>(), f)?;\n                     }\n                 }"}, {"sha": "0d4c075af481a566f06862884ce0c22faeba7e89", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0718682cffaae34e5c106c793c60f6706fc04b05/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0718682cffaae34e5c106c793c60f6706fc04b05/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=0718682cffaae34e5c106c793c60f6706fc04b05", "patch": "@@ -276,15 +276,15 @@ impl Ty {\n             TypeNs::SelfType(impl_id) => {\n                 let generics = generics(ctx.db, impl_id.into());\n                 let substs = match ctx.type_param_mode {\n-                    TypeParamLoweringMode::Placeholder => Substs::type_params(&generics),\n+                    TypeParamLoweringMode::Placeholder => Substs::type_params_for_generics(&generics),\n                     TypeParamLoweringMode::Variable => Substs::bound_vars(&generics),\n                 };\n                 ctx.db.impl_self_ty(impl_id).subst(&substs)\n             }\n             TypeNs::AdtSelfType(adt) => {\n                 let generics = generics(ctx.db, adt.into());\n                 let substs = match ctx.type_param_mode {\n-                    TypeParamLoweringMode::Placeholder => Substs::type_params(&generics),\n+                    TypeParamLoweringMode::Placeholder => Substs::type_params_for_generics(&generics),\n                     TypeParamLoweringMode::Variable => Substs::bound_vars(&generics),\n                 };\n                 ctx.db.ty(adt.into()).subst(&substs)"}]}