{"sha": "b78b15665b622cc37b25e9bd971537296403b83d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OGIxNTY2NWI2MjJjYzM3YjI1ZTliZDk3MTUzNzI5NjQwM2I4M2Q=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-26T19:07:59Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-29T16:05:35Z"}, "message": "Improve inline asm error diagnostics", "tree": {"sha": "63e4aaed856ebbf244ac375b18e421ecc3083381", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63e4aaed856ebbf244ac375b18e421ecc3083381"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b78b15665b622cc37b25e9bd971537296403b83d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b78b15665b622cc37b25e9bd971537296403b83d", "html_url": "https://github.com/rust-lang/rust/commit/b78b15665b622cc37b25e9bd971537296403b83d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b78b15665b622cc37b25e9bd971537296403b83d/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96dd4690c3aa70ec312448c3f2d50e6dc6fb87df", "url": "https://api.github.com/repos/rust-lang/rust/commits/96dd4690c3aa70ec312448c3f2d50e6dc6fb87df", "html_url": "https://github.com/rust-lang/rust/commit/96dd4690c3aa70ec312448c3f2d50e6dc6fb87df"}], "stats": {"total": 422, "additions": 365, "deletions": 57}, "files": [{"sha": "23bf7b35419db9767d20d7340bd20320dc124ca1", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -191,6 +191,11 @@ pub struct Parser<'a> {\n     append_newline: bool,\n     /// Whether this formatting string is a literal or it comes from a macro.\n     is_literal: bool,\n+    /// Start position of the current line.\n+    cur_line_start: usize,\n+    /// Start and end byte offset of every line of the format string. Excludes\n+    /// newline characters and leading whitespace.\n+    pub line_spans: Vec<InnerSpan>,\n }\n \n impl<'a> Iterator for Parser<'a> {\n@@ -235,10 +240,15 @@ impl<'a> Iterator for Parser<'a> {\n                         None\n                     }\n                 }\n-                '\\n' => Some(String(self.string(pos))),\n                 _ => Some(String(self.string(pos))),\n             }\n         } else {\n+            if self.is_literal && self.cur_line_start != self.input.len() {\n+                let start = self.to_span_index(self.cur_line_start);\n+                let end = self.to_span_index(self.input.len());\n+                self.line_spans.push(start.to(end));\n+                self.cur_line_start = self.input.len();\n+            }\n             None\n         }\n     }\n@@ -266,6 +276,8 @@ impl<'a> Parser<'a> {\n             last_opening_brace: None,\n             append_newline,\n             is_literal,\n+            cur_line_start: 0,\n+            line_spans: vec![],\n         }\n     }\n \n@@ -433,7 +445,17 @@ impl<'a> Parser<'a> {\n                 '{' | '}' => {\n                     return &self.input[start..pos];\n                 }\n+                '\\n' if self.is_literal => {\n+                    let start = self.to_span_index(self.cur_line_start);\n+                    let end = self.to_span_index(pos);\n+                    self.line_spans.push(start.to(end));\n+                    self.cur_line_start = pos + 1;\n+                    self.cur.next();\n+                }\n                 _ => {\n+                    if self.is_literal && pos == self.cur_line_start && c.is_whitespace() {\n+                        self.cur_line_start = pos + c.len_utf8();\n+                    }\n                     self.cur.next();\n                 }\n             }"}, {"sha": "efcf95ec706b811b668971d22e60f9377bc1407c", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -1252,7 +1252,7 @@ pub enum ExprKind {\n     Ret(Option<P<Expr>>),\n \n     /// Output of the `asm!()` macro.\n-    InlineAsm(InlineAsm),\n+    InlineAsm(P<InlineAsm>),\n     /// Output of the `llvm_asm!()` macro.\n     LlvmInlineAsm(P<LlvmInlineAsm>),\n \n@@ -1971,6 +1971,7 @@ pub struct InlineAsm {\n     pub template: Vec<InlineAsmTemplatePiece>,\n     pub operands: Vec<(InlineAsmOperand, Span)>,\n     pub options: InlineAsmOptions,\n+    pub line_spans: Vec<Span>,\n }\n \n /// Inline assembly dialect."}, {"sha": "fd69f5c1e5f895b20cd18f37cc59cfd2c707d28f", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -1265,7 +1265,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let operands = self.arena.alloc_from_iter(operands);\n         let template = self.arena.alloc_from_iter(asm.template.iter().cloned());\n-        let hir_asm = hir::InlineAsm { template, operands, options: asm.options };\n+        let line_spans = self.arena.alloc_slice(&asm.line_spans[..]);\n+        let hir_asm = hir::InlineAsm { template, operands, options: asm.options, line_spans };\n         hir::ExprKind::InlineAsm(self.arena.alloc(hir_asm))\n     }\n "}, {"sha": "19fae63557289bf33bea35f0a9e9c7ca381242a5", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -513,10 +513,16 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         }\n     }\n \n-    let inline_asm = ast::InlineAsm { template, operands, options: args.options };\n+    let line_spans = if parser.line_spans.is_empty() {\n+        vec![template_sp]\n+    } else {\n+        parser.line_spans.iter().map(|span| template_span.from_inner(*span)).collect()\n+    };\n+\n+    let inline_asm = ast::InlineAsm { template, operands, options: args.options, line_spans };\n     P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n-        kind: ast::ExprKind::InlineAsm(inline_asm),\n+        kind: ast::ExprKind::InlineAsm(P(inline_asm)),\n         span: sp,\n         attrs: ast::AttrVec::new(),\n         tokens: None,"}, {"sha": "f3bee85e6fc39bf275ba635543cf90dcd971d47f", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -14,7 +14,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_middle::span_bug;\n use rustc_middle::ty::layout::TyAndLayout;\n-use rustc_span::Span;\n+use rustc_span::{Pos, Span};\n use rustc_target::abi::*;\n use rustc_target::asm::*;\n \n@@ -97,7 +97,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             ia.volatile,\n             ia.alignstack,\n             ia.dialect,\n-            span,\n+            &[span],\n         );\n         if r.is_none() {\n             return false;\n@@ -119,7 +119,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         template: &[InlineAsmTemplatePiece],\n         operands: &[InlineAsmOperandRef<'tcx, Self>],\n         options: InlineAsmOptions,\n-        span: Span,\n+        line_spans: &[Span],\n     ) {\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n \n@@ -286,9 +286,9 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             volatile,\n             alignstack,\n             dialect,\n-            span,\n+            line_spans,\n         )\n-        .unwrap_or_else(|| span_bug!(span, \"LLVM asm constraint validation failed\"));\n+        .unwrap_or_else(|| span_bug!(line_spans[0], \"LLVM asm constraint validation failed\"));\n \n         if options.contains(InlineAsmOptions::PURE) {\n             if options.contains(InlineAsmOptions::NOMEM) {\n@@ -340,7 +340,7 @@ fn inline_asm_call(\n     volatile: bool,\n     alignstack: bool,\n     dia: LlvmAsmDialect,\n-    span: Span,\n+    line_spans: &[Span],\n ) -> Option<&'ll Value> {\n     let volatile = if volatile { llvm::True } else { llvm::False };\n     let alignstack = if alignstack { llvm::True } else { llvm::False };\n@@ -381,8 +381,24 @@ fn inline_asm_call(\n                 key.len() as c_uint,\n             );\n \n-            let val: &'ll Value = bx.const_i32(span.ctxt().outer_expn().as_u32() as i32);\n-            llvm::LLVMSetMetadata(call, kind, llvm::LLVMMDNodeInContext(bx.llcx, &val, 1));\n+            // srcloc contains one integer for each line of assembly code.\n+            // Unfortunately this isn't enough to encode a full span so instead\n+            // we just encode the start position of each line.\n+            // FIXME: Figure out a way to pass the entire line spans.\n+            let mut srcloc = vec![];\n+            if dia == LlvmAsmDialect::Intel && line_spans.len() > 1 {\n+                // LLVM inserts an extra line to add the \".intel_syntax\", so add\n+                // a dummy srcloc entry for it.\n+                //\n+                // Don't do this if we only have 1 line span since that may be\n+                // due to the asm template string coming from a macro. LLVM will\n+                // default to the first srcloc for lines that don't have an\n+                // associated srcloc.\n+                srcloc.push(bx.const_i32(0));\n+            }\n+            srcloc.extend(line_spans.iter().map(|span| bx.const_i32(span.lo().to_u32() as i32)));\n+            let md = llvm::LLVMMDNodeInContext(bx.llcx, srcloc.as_ptr(), srcloc.len() as u32);\n+            llvm::LLVMSetMetadata(call, kind, md);\n \n             Some(call)\n         } else {"}, {"sha": "02a9294930d2b12bb7ee652f63c7120ba6275d75", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -23,6 +23,7 @@ use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, Lto, OutputType, Passes, Sanitizer, SwitchWithOptPath};\n use rustc_session::Session;\n+use rustc_span::InnerSpan;\n use rustc_target::spec::{CodeModel, RelocModel};\n \n use libc::{c_char, c_int, c_uint, c_void, size_t};\n@@ -238,12 +239,19 @@ impl<'a> Drop for DiagnosticHandlers<'a> {\n     }\n }\n \n-unsafe extern \"C\" fn report_inline_asm(\n+fn report_inline_asm(\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n-    msg: &str,\n-    cookie: c_uint,\n+    msg: String,\n+    mut cookie: c_uint,\n+    source: Option<(String, Vec<InnerSpan>)>,\n ) {\n-    cgcx.diag_emitter.inline_asm_error(cookie as u32, msg.to_owned());\n+    // In LTO build we may get srcloc values from other crates which are invalid\n+    // since they use a different source map. To be safe we just suppress these\n+    // in LTO builds.\n+    if matches!(cgcx.lto, Lto::Fat | Lto::Thin) {\n+        cookie = 0;\n+    }\n+    cgcx.diag_emitter.inline_asm_error(cookie as u32, msg, source);\n }\n \n unsafe extern \"C\" fn inline_asm_handler(diag: &SMDiagnostic, user: *const c_void, cookie: c_uint) {\n@@ -252,10 +260,37 @@ unsafe extern \"C\" fn inline_asm_handler(diag: &SMDiagnostic, user: *const c_void\n     }\n     let (cgcx, _) = *(user as *const (&CodegenContext<LlvmCodegenBackend>, &Handler));\n \n-    let msg = llvm::build_string(|s| llvm::LLVMRustWriteSMDiagnosticToString(diag, s))\n-        .expect(\"non-UTF8 SMDiagnostic\");\n+    // Recover the post-substitution assembly code from LLVM for better\n+    // diagnostics.\n+    let mut have_source = false;\n+    let mut buffer = String::new();\n+    let mut loc = 0;\n+    let mut ranges = [0; 8];\n+    let mut num_ranges = ranges.len() / 2;\n+    let msg = llvm::build_string(|msg| {\n+        buffer = llvm::build_string(|buffer| {\n+            have_source = llvm::LLVMRustUnpackSMDiagnostic(\n+                diag,\n+                msg,\n+                buffer,\n+                &mut loc,\n+                ranges.as_mut_ptr(),\n+                &mut num_ranges,\n+            );\n+        })\n+        .expect(\"non-UTF8 inline asm\");\n+    })\n+    .expect(\"non-UTF8 SMDiagnostic\");\n+\n+    let source = have_source.then(|| {\n+        let mut spans = vec![InnerSpan::new(loc as usize, loc as usize)];\n+        for i in 0..num_ranges {\n+            spans.push(InnerSpan::new(ranges[i * 2] as usize, ranges[i * 2 + 1] as usize));\n+        }\n+        (buffer, spans)\n+    });\n \n-    report_inline_asm(cgcx, &msg, cookie);\n+    report_inline_asm(cgcx, msg, cookie, source);\n }\n \n unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void) {\n@@ -266,7 +301,7 @@ unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void\n \n     match llvm::diagnostic::Diagnostic::unpack(info) {\n         llvm::diagnostic::InlineAsm(inline) => {\n-            report_inline_asm(cgcx, &llvm::twine_to_string(inline.message), inline.cookie);\n+            report_inline_asm(cgcx, llvm::twine_to_string(inline.message), inline.cookie, None);\n         }\n \n         llvm::diagnostic::Optimization(opt) => {"}, {"sha": "759c2bf1b85f4f5cb4efcc048e8703652a1277d6", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -2070,7 +2070,14 @@ extern \"C\" {\n     );\n \n     #[allow(improper_ctypes)]\n-    pub fn LLVMRustWriteSMDiagnosticToString(d: &SMDiagnostic, s: &RustString);\n+    pub fn LLVMRustUnpackSMDiagnostic(\n+        d: &SMDiagnostic,\n+        message_out: &RustString,\n+        buffer_out: &RustString,\n+        loc_out: &mut c_uint,\n+        ranges_out: *mut c_uint,\n+        num_ranges: &mut usize,\n+    ) -> bool;\n \n     pub fn LLVMRustWriteArchive(\n         Dst: *const c_char,"}, {"sha": "cb5c95c11fad823d9e9cdc7ce0206499e357a40c", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -31,9 +31,9 @@ use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n use rustc_session::config::{self, CrateType, Lto, OutputFilenames, OutputType};\n use rustc_session::config::{Passes, Sanitizer, SwitchWithOptPath};\n use rustc_session::Session;\n-use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{BytePos, FileName, InnerSpan, Pos, Span};\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n \n use std::any::Any;\n@@ -1551,7 +1551,7 @@ fn spawn_work<B: ExtraBackendMethods>(cgcx: CodegenContext<B>, work: WorkItem<B>\n \n enum SharedEmitterMessage {\n     Diagnostic(Diagnostic),\n-    InlineAsmError(u32, String),\n+    InlineAsmError(u32, String, Option<(String, Vec<InnerSpan>)>),\n     AbortIfErrors,\n     Fatal(String),\n }\n@@ -1572,8 +1572,13 @@ impl SharedEmitter {\n         (SharedEmitter { sender }, SharedEmitterMain { receiver })\n     }\n \n-    pub fn inline_asm_error(&self, cookie: u32, msg: String) {\n-        drop(self.sender.send(SharedEmitterMessage::InlineAsmError(cookie, msg)));\n+    pub fn inline_asm_error(\n+        &self,\n+        cookie: u32,\n+        msg: String,\n+        source: Option<(String, Vec<InnerSpan>)>,\n+    ) {\n+        drop(self.sender.send(SharedEmitterMessage::InlineAsmError(cookie, msg, source)));\n     }\n \n     pub fn fatal(&self, msg: &str) {\n@@ -1626,8 +1631,30 @@ impl SharedEmitterMain {\n                     }\n                     handler.emit_diagnostic(&d);\n                 }\n-                Ok(SharedEmitterMessage::InlineAsmError(cookie, msg)) => {\n-                    sess.span_err(ExpnId::from_u32(cookie).expn_data().call_site, &msg)\n+                Ok(SharedEmitterMessage::InlineAsmError(cookie, msg, source)) => {\n+                    let msg = msg.strip_prefix(\"error: \").unwrap_or(&msg);\n+\n+                    // If the cookie is 0 then we don't have span information.\n+                    let mut err = if cookie == 0 {\n+                        sess.struct_err(&msg)\n+                    } else {\n+                        let pos = BytePos::from_u32(cookie);\n+                        let span = Span::with_root_ctxt(pos, pos);\n+                        sess.struct_span_err(span, &msg)\n+                    };\n+\n+                    // Point to the generated assembly if it is available.\n+                    if let Some((buffer, spans)) = source {\n+                        let source = sess\n+                            .source_map()\n+                            .new_source_file(FileName::inline_asm_source_code(&buffer), buffer);\n+                        let source_span = Span::with_root_ctxt(source.start_pos, source.end_pos);\n+                        let spans: Vec<_> =\n+                            spans.iter().map(|sp| source_span.from_inner(*sp)).collect();\n+                        err.span_note(spans, \"instantiated into assembly here\");\n+                    }\n+\n+                    err.emit();\n                 }\n                 Ok(SharedEmitterMessage::AbortIfErrors) => {\n                     sess.abort_if_errors();"}, {"sha": "e0c6fb451fc419ab459ae98baf80a06659ecf960", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -831,6 +831,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         template: &[ast::InlineAsmTemplatePiece],\n         operands: &[mir::InlineAsmOperand<'tcx>],\n         options: ast::InlineAsmOptions,\n+        line_spans: &[Span],\n         destination: Option<mir::BasicBlock>,\n     ) {\n         let span = terminator.source_info.span;\n@@ -931,7 +932,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             })\n             .collect();\n \n-        bx.codegen_inline_asm(template, &operands, options, span);\n+        bx.codegen_inline_asm(template, &operands, options, line_spans);\n \n         if let Some(target) = destination {\n             helper.funclet_br(self, &mut bx, target);\n@@ -1034,14 +1035,21 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 bug!(\"borrowck false edges in codegen\")\n             }\n \n-            mir::TerminatorKind::InlineAsm { template, ref operands, options, destination } => {\n+            mir::TerminatorKind::InlineAsm {\n+                template,\n+                ref operands,\n+                options,\n+                line_spans,\n+                destination,\n+            } => {\n                 self.codegen_asm_terminator(\n                     helper,\n                     bx,\n                     terminator,\n                     template,\n                     operands,\n                     options,\n+                    line_spans,\n                     destination,\n                 );\n             }"}, {"sha": "b6b57744f95b61ca02f829c7573645ec75cffb78", "filename": "src/librustc_codegen_ssa/traits/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -52,7 +52,7 @@ pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n         template: &[InlineAsmTemplatePiece],\n         operands: &[InlineAsmOperandRef<'tcx, Self>],\n         options: InlineAsmOptions,\n-        span: Span,\n+        line_spans: &[Span],\n     );\n }\n "}, {"sha": "0194dc9f90bb8dec48bd7ed0ba4c84fa6c09d356", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -2106,6 +2106,7 @@ pub struct InlineAsm<'hir> {\n     pub template: &'hir [InlineAsmTemplatePiece],\n     pub operands: &'hir [InlineAsmOperand<'hir>],\n     pub options: InlineAsmOptions,\n+    pub line_spans: &'hir [Span],\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic, PartialEq)]"}, {"sha": "f6a236d38ecc33e58150aa60384abea287d69026", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -1193,6 +1193,10 @@ pub enum TerminatorKind<'tcx> {\n         /// Miscellaneous options for the inline assembly.\n         options: InlineAsmOptions,\n \n+        /// Source spans for each line of the inline assembly code. These are\n+        /// used to map assembler errors back to the line in the source code.\n+        line_spans: &'tcx [Span],\n+\n         /// Destination block after the inline assembly returns, unless it is\n         /// diverging (InlineAsmOptions::NORETURN).\n         destination: Option<BasicBlock>,\n@@ -1595,7 +1599,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             }\n             FalseEdges { .. } => write!(fmt, \"falseEdges\"),\n             FalseUnwind { .. } => write!(fmt, \"falseUnwind\"),\n-            InlineAsm { template, ref operands, options, destination: _ } => {\n+            InlineAsm { template, ref operands, options, .. } => {\n                 write!(fmt, \"asm!(\\\"{}\\\"\", InlineAsmTemplatePiece::to_string(template))?;\n                 for op in operands {\n                     write!(fmt, \", \")?;"}, {"sha": "b0207b469fa64e61b50ae957346d12ac4abeadf1", "filename": "src/librustc_middle/mir/type_foldable.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -78,9 +78,13 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 FalseEdges { real_target, imaginary_target }\n             }\n             FalseUnwind { real_target, unwind } => FalseUnwind { real_target, unwind },\n-            InlineAsm { template, ref operands, options, destination } => {\n-                InlineAsm { template, operands: operands.fold_with(folder), options, destination }\n-            }\n+            InlineAsm { template, ref operands, options, line_spans, destination } => InlineAsm {\n+                template,\n+                operands: operands.fold_with(folder),\n+                options,\n+                line_spans,\n+                destination,\n+            },\n         };\n         Terminator { source_info: self.source_info, kind }\n     }"}, {"sha": "035e6e55a975d0dc4b49c9957c3cc83b3b9f938a", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -535,6 +535,7 @@ macro_rules! make_mir_visitor {\n                         template: _,\n                         operands,\n                         options: _,\n+                        line_spans: _,\n                         destination: _,\n                     } => {\n                         for op in operands {"}, {"sha": "0b59e29b66c748a55a45133c6fd651cb381002c1", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -183,7 +183,13 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     }\n                 }\n             }\n-            TerminatorKind::InlineAsm { template: _, ref operands, options: _, destination: _ } => {\n+            TerminatorKind::InlineAsm {\n+                template: _,\n+                ref operands,\n+                options: _,\n+                line_spans: _,\n+                destination: _,\n+            } => {\n                 for op in operands {\n                     match *op {\n                         InlineAsmOperand::In { reg: _, ref value }"}, {"sha": "525c054a7665ac18b71da696e42b147955e9efa1", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -724,7 +724,13 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n                 self.mutate_place(loc, (resume_arg, span), Deep, JustWrite, flow_state);\n             }\n \n-            TerminatorKind::InlineAsm { template: _, ref operands, options: _, destination: _ } => {\n+            TerminatorKind::InlineAsm {\n+                template: _,\n+                ref operands,\n+                options: _,\n+                line_spans: _,\n+                destination: _,\n+            } => {\n                 for op in operands {\n                     match *op {\n                         InlineAsmOperand::In { reg: _, ref value }"}, {"sha": "9e2a28853e151ceb51c98e904b9cc0942c602653", "filename": "src/librustc_mir/dataflow/framework/direction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -482,7 +482,7 @@ impl Direction for Forward {\n                 }\n             }\n \n-            InlineAsm { template: _, operands: _, options: _, destination } => {\n+            InlineAsm { template: _, operands: _, options: _, line_spans: _, destination } => {\n                 if let Some(target) = destination {\n                     propagate(target, exit_state);\n                 }"}, {"sha": "e35d853c92815611184b6c6bbb20c7d9a92478cd", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -411,7 +411,13 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                     self.gather_init(destination.as_ref(), InitKind::NonPanicPathOnly);\n                 }\n             }\n-            TerminatorKind::InlineAsm { template: _, ref operands, options: _, destination: _ } => {\n+            TerminatorKind::InlineAsm {\n+                template: _,\n+                ref operands,\n+                options: _,\n+                line_spans: _,\n+                destination: _\n+            } => {\n                 for op in operands {\n                     match *op {\n                         InlineAsmOperand::In { reg: _, ref value }"}, {"sha": "e7733deee4dd35da08c0b941c735934c9fe58794", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -310,7 +310,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 );\n                 block.unit()\n             }\n-            ExprKind::InlineAsm { template, operands, options } => {\n+            ExprKind::InlineAsm { template, operands, options, line_spans } => {\n                 use crate::hair;\n                 use rustc_middle::mir;\n                 let operands = operands\n@@ -368,6 +368,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         template,\n                         operands,\n                         options,\n+                        line_spans,\n                         destination: if options.contains(InlineAsmOptions::NORETURN) {\n                             None\n                         } else {"}, {"sha": "056cb9d98ce3bb3efb9acef11a4165fb330ae6c7", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -513,6 +513,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                 })\n                 .collect(),\n             options: asm.options,\n+            line_spans: asm.line_spans,\n         },\n \n         hir::ExprKind::LlvmInlineAsm(ref asm) => ExprKind::LlvmInlineAsm {"}, {"sha": "0a1c68e83a94c57e40f11738072e33c204df2685", "filename": "src/librustc_mir_build/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -283,6 +283,7 @@ crate enum ExprKind<'tcx> {\n         template: &'tcx [InlineAsmTemplatePiece],\n         operands: Vec<InlineAsmOperand<'tcx>>,\n         options: InlineAsmOptions,\n+        line_spans: &'tcx [Span],\n     },\n     LlvmInlineAsm {\n         asm: &'tcx hir::LlvmInlineAsmInner,"}, {"sha": "616876d4b02a81b66177f41140c2e46576f812c0", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -101,6 +101,8 @@ pub enum FileName {\n     /// Custom sources for explicit parser calls from plugins and drivers.\n     Custom(String),\n     DocTest(PathBuf, isize),\n+    /// Post-substitution inline assembly from LLVM\n+    InlineAsm(u64),\n }\n \n impl std::fmt::Display for FileName {\n@@ -116,6 +118,7 @@ impl std::fmt::Display for FileName {\n             CliCrateAttr(_) => write!(fmt, \"<crate attribute>\"),\n             Custom(ref s) => write!(fmt, \"<{}>\", s),\n             DocTest(ref path, _) => write!(fmt, \"{}\", path.display()),\n+            InlineAsm(_) => write!(fmt, \"<inline asm>\"),\n         }\n     }\n }\n@@ -139,7 +142,8 @@ impl FileName {\n             | CliCrateAttr(_)\n             | Custom(_)\n             | QuoteExpansion(_)\n-            | DocTest(_, _) => false,\n+            | DocTest(_, _)\n+            | InlineAsm(_) => false,\n         }\n     }\n \n@@ -182,6 +186,12 @@ impl FileName {\n     pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {\n         FileName::DocTest(path, line)\n     }\n+\n+    pub fn inline_asm_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::InlineAsm(hasher.finish())\n+    }\n }\n \n /// Spans represent a region of code, used for error reporting. Positions in spans"}, {"sha": "6fac2662506a175484910acfac87e7f858158671", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -1216,10 +1216,33 @@ extern \"C\" void LLVMRustSetInlineAsmDiagnosticHandler(\n   unwrap(C)->setInlineAsmDiagnosticHandler(H, CX);\n }\n \n-extern \"C\" void LLVMRustWriteSMDiagnosticToString(LLVMSMDiagnosticRef D,\n-                                                  RustStringRef Str) {\n-  RawRustStringOstream OS(Str);\n-  unwrap(D)->print(\"\", OS);\n+extern \"C\" bool LLVMRustUnpackSMDiagnostic(LLVMSMDiagnosticRef DRef,\n+                                           RustStringRef MessageOut,\n+                                           RustStringRef BufferOut,\n+                                           unsigned* LocOut,\n+                                           unsigned* RangesOut,\n+                                           size_t* NumRanges) {\n+  SMDiagnostic& D = *unwrap(DRef);\n+  RawRustStringOstream MessageOS(MessageOut);\n+  MessageOS << D.getMessage();\n+\n+  if (D.getLoc() == SMLoc())\n+    return false;\n+\n+  const SourceMgr &LSM = *D.getSourceMgr();\n+  const MemoryBuffer *LBuf = LSM.getMemoryBuffer(LSM.FindBufferContainingLoc(D.getLoc()));\n+  LLVMRustStringWriteImpl(BufferOut, LBuf->getBufferStart(), LBuf->getBufferSize());\n+\n+  *LocOut = D.getLoc().getPointer() - LBuf->getBufferStart();\n+\n+  *NumRanges = std::min(*NumRanges, D.getRanges().size());\n+  size_t LineStart = *LocOut - (size_t)D.getColumnNo();\n+  for (size_t i = 0; i < *NumRanges; i++) {\n+    RangesOut[i * 2] = LineStart + D.getRanges()[i].first;\n+    RangesOut[i * 2 + 1] = LineStart + D.getRanges()[i].second;\n+  }\n+\n+  return true;\n }\n \n extern \"C\" LLVMValueRef LLVMRustBuildCleanupPad(LLVMBuilderRef B,"}, {"sha": "7af6f620a9858cc1dce9ad963f2c508e8d4ba0ae", "filename": "src/test/ui/asm/srcloc.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Ftest%2Fui%2Fasm%2Fsrcloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Ftest%2Fui%2Fasm%2Fsrcloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fsrcloc.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -0,0 +1,41 @@\n+// no-system-llvm\n+// only-x86_64\n+// build-fail\n+\n+#![feature(asm)]\n+\n+// Checks that inline asm errors are mapped to the correct line in the source code.\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"invalid_instruction\");\n+        //~^ ERROR: invalid instruction mnemonic 'invalid_instruction'\n+\n+        asm!(\"\n+            invalid_instruction\n+        \");\n+        //~^^ ERROR: invalid instruction mnemonic 'invalid_instruction'\n+\n+        asm!(r#\"\n+            invalid_instruction\n+        \"#);\n+        //~^^ ERROR: invalid instruction mnemonic 'invalid_instruction'\n+\n+        asm!(\"\n+            mov eax, eax\n+            invalid_instruction\n+            mov eax, eax\n+        \");\n+        //~^^^ ERROR: invalid instruction mnemonic 'invalid_instruction'\n+\n+        asm!(r#\"\n+            mov eax, eax\n+            invalid_instruction\n+            mov eax, eax\n+        \"#);\n+        //~^^^ ERROR: invalid instruction mnemonic 'invalid_instruction'\n+\n+        asm!(concat!(\"invalid\", \"_\", \"instruction\"));\n+        //~^ ERROR: invalid instruction mnemonic 'invalid_instruction'\n+    }\n+}"}, {"sha": "57a4fbb974228943ec078ca114fd2ac74c04c4de", "filename": "src/test/ui/asm/srcloc.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Ftest%2Fui%2Fasm%2Fsrcloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Ftest%2Fui%2Fasm%2Fsrcloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fsrcloc.stderr?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -0,0 +1,74 @@\n+error: invalid instruction mnemonic 'invalid_instruction'\n+  --> $DIR/srcloc.rs:11:15\n+   |\n+LL |         asm!(\"invalid_instruction\");\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:2\n+   |\n+LL |     invalid_instruction\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: invalid instruction mnemonic 'invalid_instruction'\n+  --> $DIR/srcloc.rs:15:13\n+   |\n+LL |             invalid_instruction\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:3:13\n+   |\n+LL |             invalid_instruction\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: invalid instruction mnemonic 'invalid_instruction'\n+  --> $DIR/srcloc.rs:20:13\n+   |\n+LL |             invalid_instruction\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:3:13\n+   |\n+LL |             invalid_instruction\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: invalid instruction mnemonic 'invalid_instruction'\n+  --> $DIR/srcloc.rs:26:13\n+   |\n+LL |             invalid_instruction\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:4:13\n+   |\n+LL |             invalid_instruction\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: invalid instruction mnemonic 'invalid_instruction'\n+  --> $DIR/srcloc.rs:33:13\n+   |\n+LL |             invalid_instruction\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:4:13\n+   |\n+LL |             invalid_instruction\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: invalid instruction mnemonic 'invalid_instruction'\n+  --> $DIR/srcloc.rs:38:14\n+   |\n+LL |         asm!(concat!(\"invalid\", \"_\", \"instruction\"));\n+   |              ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:2\n+   |\n+LL |     invalid_instruction\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "a6500b9bb4c24668f81999db2fb1cb78845c2b48", "filename": "src/test/ui/issues/issue-23458.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -2,16 +2,19 @@ error: invalid operand in inline asm: 'int $3'\n   --> $DIR/issue-23458.rs:8:9\n    |\n LL |         llvm_asm!(\"int $3\");\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-error: <inline asm>:1:2: error: too few operands for instruction\n-        int \n-        ^\n+   |         ^\n \n+error: too few operands for instruction\n   --> $DIR/issue-23458.rs:8:9\n    |\n LL |         llvm_asm!(\"int $3\");\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+   |         ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     int \n+   |     ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "96c019b760e95ae47507e05d6bc60887e880f7f0", "filename": "src/test/ui/llvm-asm/issue-69092.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -6,5 +6,5 @@\n \n fn main() {\n     unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n-    //~^ ERROR: <inline asm>:1:9: error: expected string in '.ascii' directive\n+    //~^ ERROR: expected string in '.ascii' directive\n }"}, {"sha": "2ca86cf7c1b999284f94c5af008d0804ee97cb12", "filename": "src/test/ui/llvm-asm/issue-69092.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b78b15665b622cc37b25e9bd971537296403b83d/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b78b15665b622cc37b25e9bd971537296403b83d/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr?ref=b78b15665b622cc37b25e9bd971537296403b83d", "patch": "@@ -1,11 +1,14 @@\n-error: <inline asm>:1:9: error: expected string in '.ascii' directive\n-        .ascii \"Xen\n-               ^\n-\n+error: expected string in '.ascii' directive\n   --> $DIR/issue-69092.rs:8:14\n    |\n LL |     unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:9\n+   |\n+LL |     .ascii \"Xen\n+   |            ^\n \n error: aborting due to previous error\n "}]}