{"sha": "a457dd5c7811391223f58ca1a31e48c450200723", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NTdkZDVjNzgxMTM5MTIyM2Y1OGNhMWEzMWU0OGM0NTAyMDA3MjM=", "commit": {"author": {"name": "David Mally", "email": "djmally@gmail.com", "date": "2015-02-28T22:40:04Z"}, "committer": {"name": "David Mally", "email": "djmally@gmail.com", "date": "2015-02-28T22:40:04Z"}, "message": "Changed wording to use Result instead of Option in several places, fixed example that actually does use an Option", "tree": {"sha": "58663450b349481c926121ff39b9d965d1b1bc69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58663450b349481c926121ff39b9d965d1b1bc69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a457dd5c7811391223f58ca1a31e48c450200723", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a457dd5c7811391223f58ca1a31e48c450200723", "html_url": "https://github.com/rust-lang/rust/commit/a457dd5c7811391223f58ca1a31e48c450200723", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a457dd5c7811391223f58ca1a31e48c450200723/comments", "author": {"login": "djmally", "id": 2838865, "node_id": "MDQ6VXNlcjI4Mzg4NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2838865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djmally", "html_url": "https://github.com/djmally", "followers_url": "https://api.github.com/users/djmally/followers", "following_url": "https://api.github.com/users/djmally/following{/other_user}", "gists_url": "https://api.github.com/users/djmally/gists{/gist_id}", "starred_url": "https://api.github.com/users/djmally/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djmally/subscriptions", "organizations_url": "https://api.github.com/users/djmally/orgs", "repos_url": "https://api.github.com/users/djmally/repos", "events_url": "https://api.github.com/users/djmally/events{/privacy}", "received_events_url": "https://api.github.com/users/djmally/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djmally", "id": 2838865, "node_id": "MDQ6VXNlcjI4Mzg4NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2838865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djmally", "html_url": "https://github.com/djmally", "followers_url": "https://api.github.com/users/djmally/followers", "following_url": "https://api.github.com/users/djmally/following{/other_user}", "gists_url": "https://api.github.com/users/djmally/gists{/gist_id}", "starred_url": "https://api.github.com/users/djmally/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djmally/subscriptions", "organizations_url": "https://api.github.com/users/djmally/orgs", "repos_url": "https://api.github.com/users/djmally/repos", "events_url": "https://api.github.com/users/djmally/events{/privacy}", "received_events_url": "https://api.github.com/users/djmally/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "890293655251c372ea99694c0c9f0795e2663286", "url": "https://api.github.com/repos/rust-lang/rust/commits/890293655251c372ea99694c0c9f0795e2663286", "html_url": "https://github.com/rust-lang/rust/commit/890293655251c372ea99694c0c9f0795e2663286"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "4e7222269a8ff1954f4fcffccd2271e0762816c0", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a457dd5c7811391223f58ca1a31e48c450200723/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/a457dd5c7811391223f58ca1a31e48c450200723/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=a457dd5c7811391223f58ca1a31e48c450200723", "patch": "@@ -422,11 +422,11 @@ In this case, we say `x` is a `u32` explicitly, so Rust is able to properly\n tell `random()` what to generate. In a similar fashion, both of these work:\n \n ```{rust,ignore}\n-let input_num = \"5\".parse::<u32>(); // input_num: Option<u32>\n-let input_num: Result<u32, _> = \"5\".parse(); // input_num: Result<u32, <u32 as FromStr>::Err>\n+let input_num_option = \"5\".parse::<u32>().ok(); // input_num: Option<u32>\n+let input_num_result: Result<u32, _> = \"5\".parse(); // input_num: Result<u32, <u32 as FromStr>::Err>\n ```\n \n-Here we're converting the `Result` returned by `parse` to an `Option` by using\n+Above, we're converting the `Result` returned by `parse` to an `Option` by using\n the `ok` method as well.  Anyway, with us now converting our input to a number,\n our code looks like this:\n \n@@ -470,14 +470,14 @@ Let's try it out!\n ```bash\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n-src/main.rs:22:15: 22:24 error: mismatched types: expected `u32` but found `core::option::Option<u32>` (expected u32 but found enum core::option::Option)\n-src/main.rs:22     match cmp(input_num, secret_number) {\n+src/main.rs:21:15: 21:24 error: mismatched types: expected `u32`, found `core::result::Result<u32, core::num::ParseIntError>` (expected u32, found enum `core::result::Result`) [E0308]\n+src/main.rs:21     match cmp(input_num, secret_number) {\n                              ^~~~~~~~~\n error: aborting due to previous error\n ```\n \n-Oh yeah! Our `input_num` has the type `Option<u32>`, rather than `u32`. We\n-need to unwrap the Option. If you remember from before, `match` is a great way\n+Oh yeah! Our `input_num` has the type `Result<u32, <some error>>`, rather than `u32`. We\n+need to unwrap the Result. If you remember from before, `match` is a great way\n to do that. Try this code:\n \n ```{rust,no_run}\n@@ -500,7 +500,7 @@ fn main() {\n     let input_num: Result<u32, _> = input.parse();\n \n     let num = match input_num {\n-        Ok(num) => num,\n+        Ok(n) => n,\n         Err(_) => {\n             println!(\"Please input a number!\");\n             return;\n@@ -524,7 +524,7 @@ fn cmp(a: u32, b: u32) -> Ordering {\n }\n ```\n \n-We use a `match` to either give us the `u32` inside of the `Option`, or else\n+We use a `match` to either give us the `u32` inside of the `Result`, or else\n print an error message and return. Let's give this a shot:\n \n ```bash"}]}