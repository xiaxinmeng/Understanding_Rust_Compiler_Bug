{"sha": "8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMmU0MjYyZTg4YmVkZTQ0Y2ZjNWEzYWI1NGU1Yjg4NDQyZDZlZDI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-23T08:15:02Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-23T10:29:05Z"}, "message": "stop sorting generic params", "tree": {"sha": "8fbebbf9ccb98bfa0585ab781e6a9c0ead5467f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fbebbf9ccb98bfa0585ab781e6a9c0ead5467f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2", "html_url": "https://github.com/rust-lang/rust/commit/8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcac11993ca055bbdc7683a2f6ed7b88a838fb0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f", "html_url": "https://github.com/rust-lang/rust/commit/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f"}], "stats": {"total": 36, "additions": 6, "deletions": 30}, "files": [{"sha": "b631686324b1361ab5af0d41db156b4884aca911", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2", "patch": "@@ -936,20 +936,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 })\n             });\n \n-        let mut lowered_params: Vec<_> =\n-            lowered_generics.params.into_iter().chain(in_band_defs).collect();\n-\n-        // FIXME(const_generics): the compiler doesn't always cope with\n-        // unsorted generic parameters at the moment, so we make sure\n-        // that they're ordered correctly here for now. (When we chain\n-        // the `in_band_defs`, we might make the order unsorted.)\n-        lowered_params.sort_by_key(|param| match param.kind {\n-            hir::GenericParamKind::Lifetime { .. } => ParamKindOrd::Lifetime,\n-            hir::GenericParamKind::Type { .. } => ParamKindOrd::Type,\n-            hir::GenericParamKind::Const { .. } => ParamKindOrd::Const,\n-        });\n-\n-        lowered_generics.params = lowered_params.into();\n+        lowered_generics.params = lowered_generics.params.into_iter().chain(in_band_defs).collect();\n \n         let lowered_generics = lowered_generics.into_generics(self.arena);\n         (lowered_generics, res)"}, {"sha": "5953863cb3c3a324237c8c2f34a1a97a57f737bf", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2", "patch": "@@ -1362,13 +1362,9 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     let type_start = own_start - has_self as u32 + params.len() as u32;\n     let mut i = 0;\n \n-    // FIXME(const_generics): a few places in the compiler expect generic params\n-    // to be in the order lifetimes, then type params, then const params.\n-    //\n-    // To prevent internal errors in case const parameters are supplied before\n-    // type parameters we first add all type params, then all const params.\n-    params.extend(ast_generics.params.iter().filter_map(|param| {\n-        if let GenericParamKind::Type { ref default, synthetic, .. } = param.kind {\n+    params.extend(ast_generics.params.iter().filter_map(|param| match param.kind {\n+        GenericParamKind::Lifetime { .. } => None,\n+        GenericParamKind::Type { ref default, synthetic, .. } => {\n             if !allow_defaults && default.is_some() {\n                 if !tcx.features().default_type_parameter_fallback {\n                     tcx.struct_span_lint_hir(\n@@ -1378,7 +1374,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         |lint| {\n                             lint.build(\n                                 \"defaults for type parameters are only allowed in \\\n-                                        `struct`, `enum`, `type`, or `trait` definitions.\",\n+                                            `struct`, `enum`, `type`, or `trait` definitions.\",\n                             )\n                             .emit();\n                         },\n@@ -1403,13 +1399,8 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             };\n             i += 1;\n             Some(param_def)\n-        } else {\n-            None\n         }\n-    }));\n-\n-    params.extend(ast_generics.params.iter().filter_map(|param| {\n-        if let GenericParamKind::Const { .. } = param.kind {\n+        GenericParamKind::Const { .. } => {\n             let param_def = ty::GenericParamDef {\n                 index: type_start + i as u32,\n                 name: param.name.ident().name,\n@@ -1419,8 +1410,6 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             };\n             i += 1;\n             Some(param_def)\n-        } else {\n-            None\n         }\n     }));\n "}]}