{"sha": "af646621de928cf0f85ccc4267d4230fb0d4ea1d", "node_id": "C_kwDOAAsO6NoAKGFmNjQ2NjIxZGU5MjhjZjBmODVjY2M0MjY3ZDQyMzBmYjBkNGVhMWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-31T17:42:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-31T17:42:10Z"}, "message": "Auto merge of #12916 - Veykril:nits, r=Veykril\n\nminor: Properly cfg the `max` field of Limit", "tree": {"sha": "46d513741ea2df50fcaeb68ffa36099c6ef2c076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46d513741ea2df50fcaeb68ffa36099c6ef2c076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af646621de928cf0f85ccc4267d4230fb0d4ea1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af646621de928cf0f85ccc4267d4230fb0d4ea1d", "html_url": "https://github.com/rust-lang/rust/commit/af646621de928cf0f85ccc4267d4230fb0d4ea1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af646621de928cf0f85ccc4267d4230fb0d4ea1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0ff4befdacf187621bebba84f824d2e41ab0607", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ff4befdacf187621bebba84f824d2e41ab0607", "html_url": "https://github.com/rust-lang/rust/commit/e0ff4befdacf187621bebba84f824d2e41ab0607"}, {"sha": "3b2ecf44a0ee8437f8eb0e5b607312de6af7312a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b2ecf44a0ee8437f8eb0e5b607312de6af7312a", "html_url": "https://github.com/rust-lang/rust/commit/3b2ecf44a0ee8437f8eb0e5b607312de6af7312a"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "8a6bb929c3df7bd660e2fcd5995b8e38b61bcfc0", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/af646621de928cf0f85ccc4267d4230fb0d4ea1d/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af646621de928cf0f85ccc4267d4230fb0d4ea1d/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=af646621de928cf0f85ccc4267d4230fb0d4ea1d", "patch": "@@ -1055,7 +1055,7 @@ impl DefCollector<'_> {\n         };\n         let mut res = ReachedFixedPoint::Yes;\n         macros.retain(|directive| {\n-            let resolver2 = |path| {\n+            let resolver = |path| {\n                 let resolved_res = self.def_map.resolve_path_fp_with_macro(\n                     self.db,\n                     ResolveMode::Other,\n@@ -1068,7 +1068,7 @@ impl DefCollector<'_> {\n                     .take_macros()\n                     .map(|it| (it, macro_id_to_def_id(self.db, it)))\n             };\n-            let resolver = |path| resolver2(path).map(|(_, it)| it);\n+            let resolver_def_id = |path| resolver(path).map(|(_, it)| it);\n \n             match &directive.kind {\n                 MacroDirectiveKind::FnLike { ast_id, expand_to } => {\n@@ -1077,7 +1077,7 @@ impl DefCollector<'_> {\n                         ast_id,\n                         *expand_to,\n                         self.def_map.krate,\n-                        &resolver,\n+                        &resolver_def_id,\n                         &mut |_err| (),\n                     );\n                     if let Ok(Ok(call_id)) = call_id {\n@@ -1093,7 +1093,7 @@ impl DefCollector<'_> {\n                         *derive_attr,\n                         *derive_pos as u32,\n                         self.def_map.krate,\n-                        &resolver2,\n+                        &resolver,\n                     );\n \n                     if let Ok((macro_id, def_id, call_id)) = id {\n@@ -1158,7 +1158,7 @@ impl DefCollector<'_> {\n                         }\n                     }\n \n-                    let def = match resolver(path.clone()) {\n+                    let def = match resolver_def_id(path.clone()) {\n                         Some(def) if def.is_attribute() => def,\n                         _ => return true,\n                     };\n@@ -1292,7 +1292,8 @@ impl DefCollector<'_> {\n             true\n         });\n         // Attribute resolution can add unresolved macro invocations, so concatenate the lists.\n-        self.unresolved_macros.extend(macros);\n+        macros.extend(mem::take(&mut self.unresolved_macros));\n+        self.unresolved_macros = macros;\n \n         for (module_id, depth, container, macro_call_id) in resolved {\n             self.collect_macro_expansion(module_id, macro_call_id, depth, container);"}, {"sha": "d6a706a7cd73a82efc2dad0b97adc7ae4e9623ce", "filename": "crates/limit/src/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af646621de928cf0f85ccc4267d4230fb0d4ea1d/crates%2Flimit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af646621de928cf0f85ccc4267d4230fb0d4ea1d/crates%2Flimit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flimit%2Fsrc%2Flib.rs?ref=af646621de928cf0f85ccc4267d4230fb0d4ea1d", "patch": "@@ -2,27 +2,36 @@\n \n #![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n \n+#[cfg(feature = \"tracking\")]\n use std::sync::atomic::AtomicUsize;\n \n /// Represents a struct used to enforce a numerical limit.\n pub struct Limit {\n     upper_bound: usize,\n-    #[allow(unused)]\n+    #[cfg(feature = \"tracking\")]\n     max: AtomicUsize,\n }\n \n impl Limit {\n     /// Creates a new limit.\n     #[inline]\n     pub const fn new(upper_bound: usize) -> Self {\n-        Self { upper_bound, max: AtomicUsize::new(0) }\n+        Self {\n+            upper_bound,\n+            #[cfg(feature = \"tracking\")]\n+            max: AtomicUsize::new(0),\n+        }\n     }\n \n     /// Creates a new limit.\n     #[inline]\n     #[cfg(feature = \"tracking\")]\n     pub const fn new_tracking(upper_bound: usize) -> Self {\n-        Self { upper_bound, max: AtomicUsize::new(1) }\n+        Self {\n+            upper_bound,\n+            #[cfg(feature = \"tracking\")]\n+            max: AtomicUsize::new(1),\n+        }\n     }\n \n     /// Gets the underlying numeric limit."}]}