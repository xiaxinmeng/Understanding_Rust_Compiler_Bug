{"sha": "7a2eebde22b1013b73706a11c4a89e969c36ed2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMmVlYmRlMjJiMTAxM2I3MzcwNmExMWM0YTg5ZTk2OWMzNmVkMmI=", "commit": {"author": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-12-17T13:09:55Z"}, "committer": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-12-21T06:55:40Z"}, "message": "Add initial_contents field for CreateFile", "tree": {"sha": "ee9e1e41fb6821745b9747bfa347500945251b09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee9e1e41fb6821745b9747bfa347500945251b09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a2eebde22b1013b73706a11c4a89e969c36ed2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2eebde22b1013b73706a11c4a89e969c36ed2b", "html_url": "https://github.com/rust-lang/rust/commit/7a2eebde22b1013b73706a11c4a89e969c36ed2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a2eebde22b1013b73706a11c4a89e969c36ed2b/comments", "author": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "414576fb3059c8431f32a5bbe8fa117d4f3d83b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/414576fb3059c8431f32a5bbe8fa117d4f3d83b7", "html_url": "https://github.com/rust-lang/rust/commit/414576fb3059c8431f32a5bbe8fa117d4f3d83b7"}], "stats": {"total": 97, "additions": 47, "deletions": 50}, "files": [{"sha": "80cf9aba11f7ba31c668817702b8200c06833d6d", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a2eebde22b1013b73706a11c4a89e969c36ed2b/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2eebde22b1013b73706a11c4a89e969c36ed2b/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=7a2eebde22b1013b73706a11c4a89e969c36ed2b", "patch": "@@ -285,10 +285,9 @@ impl AssistBuilder {\n         }\n     }\n     pub(crate) fn create_file(&mut self, dst: AnchoredPathBuf, content: impl Into<String>) {\n-        let file_system_edit = FileSystemEdit::CreateFile { dst: dst.clone() };\n+        let file_system_edit =\n+            FileSystemEdit::CreateFile { dst: dst.clone(), initial_contents: content.into() };\n         self.file_system_edits.push(file_system_edit);\n-        self.edit_file(dst.anchor);\n-        self.insert(TextSize::from(0), content)\n     }\n \n     fn finish(mut self) -> SourceChange {"}, {"sha": "d18e566e61668e2f4d06ce14ad775199b55a2c40", "filename": "crates/assists/src/tests.rs", "status": "modified", "additions": 16, "deletions": 36, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7a2eebde22b1013b73706a11c4a89e969c36ed2b/crates%2Fassists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2eebde22b1013b73706a11c4a89e969c36ed2b/crates%2Fassists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests.rs?ref=7a2eebde22b1013b73706a11c4a89e969c36ed2b", "patch": "@@ -107,47 +107,27 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n                 && source_change.file_system_edits.len() == 0;\n             source_change.source_file_edits.sort_by_key(|it| it.file_id);\n \n-            let mut created_file_ids = Vec::new();\n             let mut buf = String::new();\n-            for file_system_edit in source_change.file_system_edits.clone() {\n-                match file_system_edit {\n-                    FileSystemEdit::CreateFile { dst } => {\n-                        created_file_ids.push(dst.anchor);\n-                    }\n-                    _ => (),\n+            for source_file_edit in source_change.source_file_edits {\n+                let mut text = db.file_text(source_file_edit.file_id).as_ref().to_owned();\n+                source_file_edit.edit.apply(&mut text);\n+                if !skip_header {\n+                    let sr = db.file_source_root(source_file_edit.file_id);\n+                    let sr = db.source_root(sr);\n+                    let path = sr.path_for_file(&source_file_edit.file_id).unwrap();\n+                    format_to!(buf, \"//- {}\\n\", path)\n                 }\n+                buf.push_str(&text);\n             }\n \n-            for source_file_edit in source_change.source_file_edits {\n-                if created_file_ids.contains(&source_file_edit.file_id) {\n-                    let target_dst = source_change\n-                        .file_system_edits\n-                        .iter()\n-                        .find_map(|f| match f {\n-                            FileSystemEdit::CreateFile { dst } => {\n-                                if dst.anchor == source_file_edit.file_id {\n-                                    Some(&dst.path)\n-                                } else {\n-                                    None\n-                                }\n-                            }\n-                            _ => None,\n-                        })\n-                        .unwrap();\n-                    format_to!(buf, \"//- {}\\n\", target_dst);\n-                    let mut text = String::new();\n-                    source_file_edit.edit.apply(&mut text);\n-                    buf.push_str(&text);\n-                } else {\n-                    let mut text = db.file_text(source_file_edit.file_id).as_ref().to_owned();\n-                    source_file_edit.edit.apply(&mut text);\n-                    if !skip_header {\n-                        let sr = db.file_source_root(source_file_edit.file_id);\n-                        let sr = db.source_root(sr);\n-                        let path = sr.path_for_file(&source_file_edit.file_id).unwrap();\n-                        format_to!(buf, \"//- {}\\n\", path)\n+            for file_system_edit in source_change.file_system_edits.clone() {\n+                match file_system_edit {\n+                    FileSystemEdit::CreateFile { dst, initial_contents } => {\n+                        let target_dst = dst.path;\n+                        format_to!(buf, \"//- {}\\n\", target_dst);\n+                        buf.push_str(&initial_contents);\n                     }\n-                    buf.push_str(&text);\n+                    _ => (),\n                 }\n             }\n "}, {"sha": "d79f5c17006494dc187628cd31ddf229cb80b12c", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a2eebde22b1013b73706a11c4a89e969c36ed2b/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2eebde22b1013b73706a11c4a89e969c36ed2b/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=7a2eebde22b1013b73706a11c4a89e969c36ed2b", "patch": "@@ -40,6 +40,7 @@ impl DiagnosticWithFix for UnresolvedModule {\n                     anchor: self.file.original_file(sema.db),\n                     path: self.candidate.clone(),\n                 },\n+                initial_contents: \"\".to_string(),\n             }\n             .into(),\n             unresolved_module.syntax().text_range(),"}, {"sha": "10c0abdacae55c58f30ec6b329af494633b10288", "filename": "crates/ide_db/src/source_change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2eebde22b1013b73706a11c4a89e969c36ed2b/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2eebde22b1013b73706a11c4a89e969c36ed2b/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsource_change.rs?ref=7a2eebde22b1013b73706a11c4a89e969c36ed2b", "patch": "@@ -44,7 +44,7 @@ impl From<Vec<SourceFileEdit>> for SourceChange {\n \n #[derive(Debug, Clone)]\n pub enum FileSystemEdit {\n-    CreateFile { dst: AnchoredPathBuf },\n+    CreateFile { dst: AnchoredPathBuf, initial_contents: String },\n     MoveFile { src: FileId, dst: AnchoredPathBuf },\n }\n "}, {"sha": "5a1ae96aa0951c97c2bf417ea8be944eb48b5623", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a2eebde22b1013b73706a11c4a89e969c36ed2b/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2eebde22b1013b73706a11c4a89e969c36ed2b/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=7a2eebde22b1013b73706a11c4a89e969c36ed2b", "patch": "@@ -634,30 +634,47 @@ pub(crate) fn snippet_text_document_edit(\n     Ok(lsp_ext::SnippetTextDocumentEdit { text_document, edits })\n }\n \n-pub(crate) fn resource_op(\n+pub(crate) fn snippet_text_document_ops(\n     snap: &GlobalStateSnapshot,\n     file_system_edit: FileSystemEdit,\n-) -> lsp_types::ResourceOp {\n+) -> Vec<lsp_ext::SnippetDocumentChangeOperation> {\n+    let mut ops = Vec::new();\n     match file_system_edit {\n-        FileSystemEdit::CreateFile { dst } => {\n+        FileSystemEdit::CreateFile { dst, initial_contents } => {\n             let uri = snap.anchored_path(&dst);\n-            lsp_types::ResourceOp::Create(lsp_types::CreateFile {\n-                uri,\n+            let create_file = lsp_types::ResourceOp::Create(lsp_types::CreateFile {\n+                uri: uri.clone(),\n                 options: None,\n                 annotation_id: None,\n-            })\n+            });\n+            ops.push(lsp_ext::SnippetDocumentChangeOperation::Op(create_file));\n+            if !initial_contents.is_empty() {\n+                let text_document =\n+                    lsp_types::OptionalVersionedTextDocumentIdentifier { uri, version: None };\n+                let range = range(&LineIndex::new(\"\"), TextRange::empty(TextSize::from(0)));\n+                let text_edit = lsp_ext::SnippetTextEdit {\n+                    range,\n+                    new_text: initial_contents,\n+                    insert_text_format: Some(lsp_types::InsertTextFormat::PlainText),\n+                };\n+                let edit_file =\n+                    lsp_ext::SnippetTextDocumentEdit { text_document, edits: vec![text_edit] };\n+                ops.push(lsp_ext::SnippetDocumentChangeOperation::Edit(edit_file));\n+            }\n         }\n         FileSystemEdit::MoveFile { src, dst } => {\n             let old_uri = snap.file_id_to_url(src);\n             let new_uri = snap.anchored_path(&dst);\n-            lsp_types::ResourceOp::Rename(lsp_types::RenameFile {\n+            let rename_file = lsp_types::ResourceOp::Rename(lsp_types::RenameFile {\n                 old_uri,\n                 new_uri,\n                 options: None,\n                 annotation_id: None,\n-            })\n+            });\n+            ops.push(lsp_ext::SnippetDocumentChangeOperation::Op(rename_file))\n         }\n     }\n+    ops\n }\n \n pub(crate) fn snippet_workspace_edit(\n@@ -666,8 +683,8 @@ pub(crate) fn snippet_workspace_edit(\n ) -> Result<lsp_ext::SnippetWorkspaceEdit> {\n     let mut document_changes: Vec<lsp_ext::SnippetDocumentChangeOperation> = Vec::new();\n     for op in source_change.file_system_edits {\n-        let op = resource_op(&snap, op);\n-        document_changes.push(lsp_ext::SnippetDocumentChangeOperation::Op(op));\n+        let ops = snippet_text_document_ops(snap, op);\n+        document_changes.extend_from_slice(&ops);\n     }\n     for edit in source_change.source_file_edits {\n         let edit = snippet_text_document_edit(&snap, source_change.is_snippet, edit)?;"}]}