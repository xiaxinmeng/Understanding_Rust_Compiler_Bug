{"sha": "f879ecc4ef62b5c434e85a9db845b6c1020162ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzllY2M0ZWY2MmI1YzQzNGU4NWE5ZGI4NDViNmMxMDIwMTYyY2E=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-05T15:04:24Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-05T15:04:24Z"}, "message": "Make ItemKind::ExternCrate looks like hir::ItemKind::ExternCrate to make transition over hir::ItemKind simpler", "tree": {"sha": "4aa5f00256a39e29b13800edc5a14157fab981ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aa5f00256a39e29b13800edc5a14157fab981ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f879ecc4ef62b5c434e85a9db845b6c1020162ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f879ecc4ef62b5c434e85a9db845b6c1020162ca", "html_url": "https://github.com/rust-lang/rust/commit/f879ecc4ef62b5c434e85a9db845b6c1020162ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f879ecc4ef62b5c434e85a9db845b6c1020162ca/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ccc89bc312caa65ca46b55b47492abdd5b6910a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccc89bc312caa65ca46b55b47492abdd5b6910a", "html_url": "https://github.com/rust-lang/rust/commit/8ccc89bc312caa65ca46b55b47492abdd5b6910a"}], "stats": {"total": 97, "additions": 54, "deletions": 43}, "files": [{"sha": "29eb67f023f0bde23f03e45c60c31dac4f005297", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f879ecc4ef62b5c434e85a9db845b6c1020162ca", "patch": "@@ -2129,12 +2129,12 @@ fn clean_extern_crate(\n     }\n     // FIXME: using `from_def_id_and_kind` breaks `rustdoc/masked` for some reason\n     vec![Item {\n-        name: None,\n+        name: Some(name),\n         attrs: box krate.attrs.clean(cx),\n         source: krate.span.clean(cx),\n         def_id: crate_def_id,\n         visibility: krate.vis.clean(cx),\n-        kind: box ExternCrateItem(name, orig_name),\n+        kind: box ExternCrateItem { src: orig_name },\n     }]\n }\n "}, {"sha": "e560843383ec552a6cf959b2463bc98c9b5dc5c1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=f879ecc4ef62b5c434e85a9db845b6c1020162ca", "patch": "@@ -323,7 +323,10 @@ impl Item {\n \n #[derive(Clone, Debug)]\n crate enum ItemKind {\n-    ExternCrateItem(Symbol, Option<Symbol>),\n+    ExternCrateItem {\n+        /// The crate's name, *not* the name it's imported as.\n+        src: Option<Symbol>,\n+    },\n     ImportItem(Import),\n     StructItem(Struct),\n     UnionItem(Union),\n@@ -376,7 +379,7 @@ impl ItemKind {\n             TraitItem(t) => t.items.iter(),\n             ImplItem(i) => i.items.iter(),\n             ModuleItem(m) => m.items.iter(),\n-            ExternCrateItem(_, _)\n+            ExternCrateItem { .. }\n             | ImportItem(_)\n             | FunctionItem(_)\n             | TypedefItem(_, _)"}, {"sha": "460d4b907c09a7f6f0a16ca5e1e52406d6736ab6", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=f879ecc4ef62b5c434e85a9db845b6c1020162ca", "patch": "@@ -67,7 +67,7 @@ impl<'a> From<&'a clean::Item> for ItemType {\n \n         match *kind {\n             clean::ModuleItem(..) => ItemType::Module,\n-            clean::ExternCrateItem(..) => ItemType::ExternCrate,\n+            clean::ExternCrateItem { .. } => ItemType::ExternCrate,\n             clean::ImportItem(..) => ItemType::Import,\n             clean::StructItem(..) => ItemType::Struct,\n             clean::UnionItem(..) => ItemType::Union,"}, {"sha": "0487da1e7d020c9d4f109f47c2315435cc7e1955", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=f879ecc4ef62b5c434e85a9db845b6c1020162ca", "patch": "@@ -91,7 +91,9 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n             }\n \n             cx.mod_item_out(&name)?;\n-        } else if item.name.is_some() {\n+        // FIXME: checking `item.name.is_some()` is very implicit and leads to lots of special\n+        // cases. Use an explicit match instead.\n+        } else if item.name.is_some() && !item.is_extern_crate() {\n             prof.generic_activity_with_arg(\"render_item\", &*item.name.unwrap_or(unknown).as_str())\n                 .run(|| cx.item(item))?;\n         }"}, {"sha": "6cdd3838023e62d52280c1b42335123e4d6a85a5", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=f879ecc4ef62b5c434e85a9db845b6c1020162ca", "patch": "@@ -240,7 +240,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n         }\n \n         match *myitem.kind {\n-            clean::ExternCrateItem(ref name, ref src) => {\n+            clean::ExternCrateItem { ref src } => {\n                 use crate::html::format::anchor;\n \n                 match *src {\n@@ -249,13 +249,13 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                         \"<tr><td><code>{}extern crate {} as {};\",\n                         myitem.visibility.print_with_space(cx.tcx(), myitem.def_id, cx.cache()),\n                         anchor(myitem.def_id, &*src.as_str(), cx.cache()),\n-                        name\n+                        myitem.name.as_ref().unwrap(),\n                     ),\n                     None => write!(\n                         w,\n                         \"<tr><td><code>{}extern crate {};\",\n                         myitem.visibility.print_with_space(cx.tcx(), myitem.def_id, cx.cache()),\n-                        anchor(myitem.def_id, &*name.as_str(), cx.cache())\n+                        anchor(myitem.def_id, &*myitem.name.as_ref().unwrap().as_str(), cx.cache()),\n                     ),\n                 }\n                 w.write_str(\"</code></td></tr>\");"}, {"sha": "a579b66134531694689060324fcea520259ed4b3", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=f879ecc4ef62b5c434e85a9db845b6c1020162ca", "patch": "@@ -10,6 +10,7 @@ use rustc_ast::ast;\n use rustc_hir::def::CtorKind;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc_span::symbol::Symbol;\n use rustc_span::Pos;\n \n use rustdoc_json_types::*;\n@@ -25,32 +26,37 @@ impl JsonRenderer<'_> {\n         let item_type = ItemType::from(&item);\n         let deprecation = item.deprecation(self.tcx);\n         let clean::Item { source, name, attrs, kind, visibility, def_id } = item;\n-        match *kind {\n-            clean::StrippedItem(_) => None,\n-            kind => Some(Item {\n-                id: from_def_id(def_id),\n-                crate_id: def_id.krate.as_u32(),\n-                name: name.map(|sym| sym.to_string()),\n-                source: self.convert_span(source),\n-                visibility: self.convert_visibility(visibility),\n-                docs: attrs.collapsed_doc_value(),\n-                links: attrs\n-                    .links\n-                    .into_iter()\n-                    .filter_map(|clean::ItemLink { link, did, .. }| {\n-                        did.map(|did| (link, from_def_id(did)))\n-                    })\n-                    .collect(),\n-                attrs: attrs\n-                    .other_attrs\n-                    .iter()\n-                    .map(rustc_ast_pretty::pprust::attribute_to_string)\n-                    .collect(),\n-                deprecation: deprecation.map(from_deprecation),\n-                kind: item_type.into(),\n-                inner: from_clean_item_kind(kind, self.tcx),\n-            }),\n-        }\n+        let inner = match *kind {\n+            clean::ItemKind::ExternCrateItem { ref src } => ItemEnum::ExternCrateItem {\n+                name: name.as_ref().unwrap().to_string(),\n+                rename: src.map(|x| x.to_string()),\n+            },\n+            clean::StrippedItem(_) => return None,\n+            x => from_clean_item_kind(x, self.tcx),\n+        };\n+        Some(Item {\n+            id: from_def_id(def_id),\n+            crate_id: def_id.krate.as_u32(),\n+            name: name.map(|sym| sym.to_string()),\n+            source: self.convert_span(source),\n+            visibility: self.convert_visibility(visibility),\n+            docs: attrs.collapsed_doc_value(),\n+            links: attrs\n+                .links\n+                .into_iter()\n+                .filter_map(|clean::ItemLink { link, did, .. }| {\n+                    did.map(|did| (link, from_def_id(did)))\n+                })\n+                .collect(),\n+            attrs: attrs\n+                .other_attrs\n+                .iter()\n+                .map(rustc_ast_pretty::pprust::attribute_to_string)\n+                .collect(),\n+            deprecation: deprecation.map(from_deprecation),\n+            kind: item_type.into(),\n+            inner,\n+        })\n     }\n \n     fn convert_span(&self, span: clean::Span) -> Option<Span> {\n@@ -153,9 +159,6 @@ fn from_clean_item_kind(item: clean::ItemKind, tcx: TyCtxt<'_>) -> ItemEnum {\n     use clean::ItemKind::*;\n     match item {\n         ModuleItem(m) => ItemEnum::ModuleItem(m.into()),\n-        ExternCrateItem(c, a) => {\n-            ItemEnum::ExternCrateItem { name: c.to_string(), rename: a.map(|x| x.to_string()) }\n-        }\n         ImportItem(i) => ItemEnum::ImportItem(i.into()),\n         StructItem(s) => ItemEnum::StructItem(s.into()),\n         UnionItem(u) => ItemEnum::UnionItem(u.into()),\n@@ -186,6 +189,7 @@ fn from_clean_item_kind(item: clean::ItemKind, tcx: TyCtxt<'_>) -> ItemEnum {\n         PrimitiveItem(_) | KeywordItem(_) => {\n             panic!(\"{:?} is not supported for JSON output\", item)\n         }\n+        ExternCrateItem { .. } => unreachable!(),\n     }\n }\n "}, {"sha": "863610baed4846655304b55e3d1a7d55302a9413", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=f879ecc4ef62b5c434e85a9db845b6c1020162ca", "patch": "@@ -183,7 +183,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 match &*item.kind {\n                     // These don't have names so they don't get added to the output by default\n                     ImportItem(_) => self.item(item.clone()).unwrap(),\n-                    ExternCrateItem(_, _) => self.item(item.clone()).unwrap(),\n+                    ExternCrateItem { .. } => self.item(item.clone()).unwrap(),\n                     ImplItem(i) => i.items.iter().for_each(|i| self.item(i.clone()).unwrap()),\n                     _ => {}\n                 }"}, {"sha": "0e975128628acbadfa686b6c21dcabadb79c1b71", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=f879ecc4ef62b5c434e85a9db845b6c1020162ca", "patch": "@@ -193,7 +193,7 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                 // don't count items in stripped modules\n                 return Some(i);\n             }\n-            clean::ImportItem(..) | clean::ExternCrateItem(..) => {\n+            clean::ImportItem(..) | clean::ExternCrateItem { .. } => {\n                 // docs on `use` and `extern crate` statements are not displayed, so they're not\n                 // worth counting\n                 return Some(i);"}, {"sha": "2fa9179515de1d6efb8e3c5ea1da3492947b8f3d", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=f879ecc4ef62b5c434e85a9db845b6c1020162ca", "patch": "@@ -63,7 +63,7 @@ crate fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -> boo\n                 | clean::TypedefItem(_, _)\n                 | clean::StaticItem(_)\n                 | clean::ConstantItem(_)\n-                | clean::ExternCrateItem(_, _)\n+                | clean::ExternCrateItem { .. }\n                 | clean::ImportItem(_)\n                 | clean::PrimitiveItem(_)\n                 | clean::KeywordItem(_)"}, {"sha": "44d54563f27a2715dc446d287d11a03e4ff70186", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f879ecc4ef62b5c434e85a9db845b6c1020162ca/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=f879ecc4ef62b5c434e85a9db845b6c1020162ca", "patch": "@@ -66,7 +66,7 @@ impl<'a> DocFolder for Stripper<'a> {\n             }\n \n             // handled in the `strip-priv-imports` pass\n-            clean::ExternCrateItem(..) | clean::ImportItem(..) => {}\n+            clean::ExternCrateItem { .. } | clean::ImportItem(..) => {}\n \n             clean::ImplItem(..) => {}\n \n@@ -161,7 +161,9 @@ crate struct ImportStripper;\n impl DocFolder for ImportStripper {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         match *i.kind {\n-            clean::ExternCrateItem(..) | clean::ImportItem(..) if !i.visibility.is_public() => None,\n+            clean::ExternCrateItem { .. } | clean::ImportItem(..) if !i.visibility.is_public() => {\n+                None\n+            }\n             _ => Some(self.fold_item_recur(i)),\n         }\n     }"}]}