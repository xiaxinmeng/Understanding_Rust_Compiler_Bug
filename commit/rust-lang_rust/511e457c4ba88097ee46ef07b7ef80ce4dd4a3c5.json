{"sha": "511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "node_id": "C_kwDOAAsO6NoAKDUxMWU0NTdjNGJhODgwOTdlZTQ2ZWYwN2I3ZWY4MGNlNGRkNGEzYzU", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-09-11T07:37:49Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2023-04-21T09:14:02Z"}, "message": "offset_of", "tree": {"sha": "9aed1b0210cfd3c784a7c5cc89646b8d9dad5427", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aed1b0210cfd3c784a7c5cc89646b8d9dad5427"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "html_url": "https://github.com/rust-lang/rust/commit/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b92a41c6760801a7128ca0ec69ba4ba9c9194054", "url": "https://api.github.com/repos/rust-lang/rust/commits/b92a41c6760801a7128ca0ec69ba4ba9c9194054", "html_url": "https://github.com/rust-lang/rust/commit/b92a41c6760801a7128ca0ec69ba4ba9c9194054"}], "stats": {"total": 879, "additions": 841, "deletions": 38}, "files": [{"sha": "c0fec0cf565811802e651b993725c05586988594", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -1271,6 +1271,7 @@ impl Expr {\n             ExprKind::Continue(..) => ExprPrecedence::Continue,\n             ExprKind::Ret(..) => ExprPrecedence::Ret,\n             ExprKind::InlineAsm(..) => ExprPrecedence::InlineAsm,\n+            ExprKind::OffsetOf(..) => ExprPrecedence::OffsetOf,\n             ExprKind::MacCall(..) => ExprPrecedence::Mac,\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n@@ -1469,6 +1470,9 @@ pub enum ExprKind {\n     /// Output of the `asm!()` macro.\n     InlineAsm(P<InlineAsm>),\n \n+    /// Output of the `offset_of!()` macro.\n+    OffsetOf(P<Ty>, Vec<Ident>),\n+\n     /// A macro invocation; pre-expansion.\n     MacCall(P<MacCall>),\n "}, {"sha": "7603bebb178997c474ff517aa064f899c63118af", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -1456,6 +1456,12 @@ pub fn noop_visit_expr<T: MutVisitor>(\n         }\n         ExprKind::InlineAsm(asm) => vis.visit_inline_asm(asm),\n         ExprKind::FormatArgs(fmt) => vis.visit_format_args(fmt),\n+        ExprKind::OffsetOf(container, fields) => {\n+            vis.visit_ty(container);\n+            for field in fields {\n+                vis.visit_ident(field);\n+            }\n+        }\n         ExprKind::MacCall(mac) => vis.visit_mac_call(mac),\n         ExprKind::Struct(se) => {\n             let StructExpr { qself, path, fields, rest } = se.deref_mut();"}, {"sha": "24b4bd8623f047952ba1c43577b67a51a91f8cee", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -269,6 +269,7 @@ pub enum ExprPrecedence {\n     Index,\n     Try,\n     InlineAsm,\n+    OffsetOf,\n     Mac,\n     FormatArgs,\n \n@@ -335,7 +336,8 @@ impl ExprPrecedence {\n             | ExprPrecedence::Try\n             | ExprPrecedence::InlineAsm\n             | ExprPrecedence::Mac\n-            | ExprPrecedence::FormatArgs => PREC_POSTFIX,\n+            | ExprPrecedence::FormatArgs\n+            | ExprPrecedence::OffsetOf => PREC_POSTFIX,\n \n             // Never need parens\n             ExprPrecedence::Array"}, {"sha": "8a6b5d5c9052deffc6fcee5e4dd0bccb8c2547d5", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -909,6 +909,12 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Paren(subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::InlineAsm(asm) => visitor.visit_inline_asm(asm),\n         ExprKind::FormatArgs(f) => visitor.visit_format_args(f),\n+        ExprKind::OffsetOf(container, fields) => {\n+            visitor.visit_ty(container);\n+            for &field in fields {\n+                visitor.visit_ident(field);\n+            }\n+        }\n         ExprKind::Yield(optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }"}, {"sha": "6863100d9bac099584d9af5f85ee7d4dee5ad78a", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -289,6 +289,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ExprKind::InlineAsm(self.lower_inline_asm(e.span, asm))\n                 }\n                 ExprKind::FormatArgs(fmt) => self.lower_format_args(e.span, fmt),\n+                ExprKind::OffsetOf(container, fields) => hir::ExprKind::OffsetOf(\n+                    self.lower_ty(\n+                        container,\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::OffsetOf),\n+                    ),\n+                    self.arena.alloc_from_iter(fields.iter().map(|&ident| self.lower_ident(ident))),\n+                ),\n                 ExprKind::Struct(se) => {\n                     let rest = match &se.rest {\n                         StructRest::Base(e) => Some(self.lower_expr(e)),"}, {"sha": "c969d709608102c240a51381cedea5a8f4eed597", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -283,6 +283,7 @@ enum ImplTraitPosition {\n     FieldTy,\n     Cast,\n     ImplSelf,\n+    OffsetOf,\n }\n \n impl std::fmt::Display for ImplTraitPosition {\n@@ -313,6 +314,7 @@ impl std::fmt::Display for ImplTraitPosition {\n             ImplTraitPosition::FieldTy => \"field types\",\n             ImplTraitPosition::Cast => \"cast types\",\n             ImplTraitPosition::ImplSelf => \"impl headers\",\n+            ImplTraitPosition::OffsetOf => \"`offset_of!` params\",\n         };\n \n         write!(f, \"{name}\")"}, {"sha": "d31332b3b91db272dc463b5564dcaeb0f360f921", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -549,6 +549,27 @@ impl<'a> State<'a> {\n                 self.end();\n                 self.pclose();\n             }\n+            ast::ExprKind::OffsetOf(container, fields) => {\n+                // FIXME: This should have its own syntax, distinct from a macro invocation.\n+                self.word(\"offset_of!\");\n+                self.popen();\n+                self.rbox(0, Inconsistent);\n+                self.print_type(container);\n+                self.word(\",\");\n+                self.space();\n+\n+                let (&first, rest) =\n+                    fields.split_first().expect(\"offset_of! should have at least 1 field\");\n+\n+                self.print_ident(first);\n+\n+                for &field in rest {\n+                    self.word(\".\");\n+                    self.print_ident(field);\n+                }\n+\n+                self.end();\n+            }\n             ast::ExprKind::MacCall(m) => self.print_mac(m),\n             ast::ExprKind::Paren(e) => {\n                 self.popen();"}, {"sha": "52651aa40c92c2ea06c64c52d30006718cb894f4", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -2306,7 +2306,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::AddressOf(..)\n             | Rvalue::ThreadLocalRef(..)\n             | Rvalue::Len(..)\n-            | Rvalue::Discriminant(..) => {}\n+            | Rvalue::Discriminant(..)\n+            | Rvalue::NullaryOp(NullOp::OffsetOf(..), _) => {}\n         }\n     }\n "}, {"sha": "fca6012a408c1d0223791027c28ed5348aae64aa", "filename": "compiler/rustc_builtin_macros/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_builtin_macros%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_builtin_macros%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fmessages.ftl?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -149,3 +149,6 @@ builtin_macros_format_pos_mismatch = {$n} positional {$n ->\n     [one] argument\n     *[more] arguments\n     } in format string, but {$desc}\n+builtin_macros_offset_of_expected_field = expected field\n+\n+builtin_macros_offset_of_expected_two_args = expected 2 arguments"}, {"sha": "090e00616fb4806f7ad956413a13d2125ddb25b4", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -301,6 +301,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             | ExprKind::If(_, _, _)\n             | ExprKind::IncludedBytes(..)\n             | ExprKind::InlineAsm(_)\n+            | ExprKind::OffsetOf(_, _)\n             | ExprKind::Let(_, _, _)\n             | ExprKind::Lit(_)\n             | ExprKind::Loop(_, _, _)"}, {"sha": "8f86ef44aa3ab8f6d07d8a1f19680e27b9d17ebc", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -45,6 +45,7 @@ mod format;\n mod format_foreign;\n mod global_allocator;\n mod log_syntax;\n+mod offset_of;\n mod source_util;\n mod test;\n mod trace_macros;\n@@ -92,6 +93,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n         line: source_util::expand_line,\n         log_syntax: log_syntax::expand_log_syntax,\n         module_path: source_util::expand_mod,\n+        offset_of: offset_of::expand_offset_of,\n         option_env: env::expand_option_env,\n         core_panic: edition_panic::expand_panic,\n         std_panic: edition_panic::expand_panic,"}, {"sha": "f5c04015340f0858b74f3c31e45d9b8b7a3b900d", "filename": "compiler/rustc_builtin_macros/src/offset_of.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_builtin_macros%2Fsrc%2Foffset_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_builtin_macros%2Fsrc%2Foffset_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Foffset_of.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -0,0 +1,99 @@\n+use rustc_ast as ast;\n+use rustc_ast::ptr::P;\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::TokenStream;\n+use rustc_errors::PResult;\n+use rustc_expand::base::{self, *};\n+use rustc_macros::Diagnostic;\n+use rustc_parse::parser::Parser;\n+use rustc_span::{symbol::Ident, Span};\n+\n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_offset_of_expected_field)]\n+struct ExpectedField {\n+    #[primary_span]\n+    span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_offset_of_expected_two_args)]\n+struct ExpectedTwoArgs {\n+    #[primary_span]\n+    span: Span,\n+}\n+\n+fn parse_field<'a>(cx: &ExtCtxt<'a>, p: &mut Parser<'a>) -> PResult<'a, Ident> {\n+    let token = p.token.uninterpolate();\n+    let field = match token.kind {\n+        token::Ident(name, _) => Ident::new(name, token.span),\n+        token::Literal(token::Lit { kind: token::Integer, symbol, suffix: None }) => {\n+            Ident::new(symbol, token.span)\n+        }\n+        _ => return Err(cx.create_err(ExpectedField { span: p.token.span })),\n+    };\n+\n+    p.bump();\n+\n+    Ok(field)\n+}\n+\n+fn parse_args<'a>(\n+    cx: &mut ExtCtxt<'a>,\n+    sp: Span,\n+    tts: TokenStream,\n+) -> PResult<'a, (P<ast::Ty>, Vec<Ident>)> {\n+    let mut p = cx.new_parser_from_tts(tts);\n+\n+    let container = p.parse_ty()?;\n+\n+    p.expect(&token::Comma)?;\n+\n+    if p.eat(&token::Eof) {\n+        return Err(cx.create_err(ExpectedTwoArgs { span: sp }));\n+    }\n+\n+    let mut fields = Vec::new();\n+\n+    loop {\n+        let field = parse_field(cx, &mut p)?;\n+        fields.push(field);\n+\n+        if p.eat(&token::Dot) {\n+            continue;\n+        }\n+\n+        p.eat(&token::Comma);\n+\n+        if !p.eat(&token::Eof) {\n+            return Err(cx.create_err(ExpectedTwoArgs { span: sp }));\n+        }\n+\n+        break;\n+    }\n+\n+    Ok((container, fields))\n+}\n+\n+pub fn expand_offset_of<'cx>(\n+    cx: &'cx mut ExtCtxt<'_>,\n+    sp: Span,\n+    tts: TokenStream,\n+) -> Box<dyn base::MacResult + 'cx> {\n+    match parse_args(cx, sp, tts) {\n+        Ok((container, fields)) => {\n+            let expr = P(ast::Expr {\n+                id: ast::DUMMY_NODE_ID,\n+                kind: ast::ExprKind::OffsetOf(container, fields),\n+                span: sp,\n+                attrs: ast::AttrVec::new(),\n+                tokens: None,\n+            });\n+\n+            MacEager::expr(expr)\n+        }\n+        Err(mut err) => {\n+            err.emit();\n+            DummyResult::any(sp)\n+        }\n+    }\n+}"}, {"sha": "f481290583e0678e10abe762f18b979c9fab258d", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -781,12 +781,15 @@ fn codegen_stmt<'tcx>(\n                     let operand = operand.load_scalar(fx);\n                     lval.write_cvalue(fx, CValue::by_val(operand, box_layout));\n                 }\n-                Rvalue::NullaryOp(null_op, ty) => {\n+                Rvalue::NullaryOp(ref null_op, ty) => {\n                     assert!(lval.layout().ty.is_sized(fx.tcx, ParamEnv::reveal_all()));\n                     let layout = fx.layout_of(fx.monomorphize(ty));\n                     let val = match null_op {\n                         NullOp::SizeOf => layout.size.bytes(),\n                         NullOp::AlignOf => layout.align.abi.bytes(),\n+                        NullOp::OffsetOf(fields) => {\n+                            layout.offset_of_subfield(fx, fields.iter().map(|f| f.index())).bytes()\n+                        }\n                     };\n                     let val = CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), val.into());\n                     lval.write_cvalue(fx, val);"}, {"sha": "94de19a9c2935f5e54814033bb46d6cffd9f8cdb", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -666,13 +666,16 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n \n-            mir::Rvalue::NullaryOp(null_op, ty) => {\n+            mir::Rvalue::NullaryOp(ref null_op, ty) => {\n                 let ty = self.monomorphize(ty);\n                 assert!(bx.cx().type_is_sized(ty));\n                 let layout = bx.cx().layout_of(ty);\n                 let val = match null_op {\n                     mir::NullOp::SizeOf => layout.size.bytes(),\n                     mir::NullOp::AlignOf => layout.align.abi.bytes(),\n+                    mir::NullOp::OffsetOf(fields) => {\n+                        layout.offset_of_subfield(bx.cx(), fields.iter().map(|f| f.index())).bytes()\n+                    }\n                 };\n                 let val = bx.cx().const_usize(val);\n                 let tcx = self.cx.tcx();"}, {"sha": "4ed83f1db0e969c1b3f9bfe345a1e91a96a386d2", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -280,10 +280,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_immediate(*val, &dest)?;\n             }\n \n-            NullaryOp(null_op, ty) => {\n+            NullaryOp(ref null_op, ty) => {\n                 let ty = self.subst_from_current_frame_and_normalize_erasing_regions(ty)?;\n                 let layout = self.layout_of(ty)?;\n-                if layout.is_unsized() {\n+                if let mir::NullOp::SizeOf | mir::NullOp::AlignOf = null_op && layout.is_unsized() {\n                     // FIXME: This should be a span_bug (#80742)\n                     self.tcx.sess.delay_span_bug(\n                         self.frame().current_span(),\n@@ -294,6 +294,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val = match null_op {\n                     mir::NullOp::SizeOf => layout.size.bytes(),\n                     mir::NullOp::AlignOf => layout.align.abi.bytes(),\n+                    mir::NullOp::OffsetOf(fields) => {\n+                        layout.offset_of_subfield(self, fields.iter().map(|f| f.index())).bytes()\n+                    }\n                 };\n                 self.write_scalar(Scalar::from_target_usize(val, self), &dest)?;\n             }"}, {"sha": "9d138f176f51cb95cf4dc2443acf4b85b19163b4", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -558,7 +558,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n             Rvalue::Cast(_, _, _) => {}\n \n-            Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n+            Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf | NullOp::OffsetOf(_), _) => {}\n             Rvalue::ShallowInitBox(_, _) => {}\n \n             Rvalue::UnaryOp(_, operand) => {"}, {"sha": "2ed84bddfa3ce5b7156418aa0dd1a94e336e6c47", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -514,6 +514,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n             Rvalue::NullaryOp(op, _) => match op {\n                 NullOp::SizeOf => {}\n                 NullOp::AlignOf => {}\n+                NullOp::OffsetOf(_) => {}\n             },\n \n             Rvalue::ShallowInitBox(_, _) => return Err(Unpromotable),"}, {"sha": "119fe9801e4254c6f1010d21063bd778b7e7bcd4", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -8,9 +8,10 @@ use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::visit::{NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{\n     traversal, BasicBlock, BinOp, Body, BorrowKind, CastKind, CopyNonOverlapping, Local, Location,\n-    MirPass, MirPhase, NonDivergingIntrinsic, Operand, Place, PlaceElem, PlaceRef, ProjectionElem,\n-    RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n-    TerminatorKind, UnOp, UnwindAction, VarDebugInfo, VarDebugInfoContents, START_BLOCK,\n+    MirPass, MirPhase, NonDivergingIntrinsic, NullOp, Operand, Place, PlaceElem, PlaceRef,\n+    ProjectionElem, RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind,\n+    Terminator, TerminatorKind, UnOp, UnwindAction, VarDebugInfo, VarDebugInfoContents,\n+    START_BLOCK,\n };\n use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n@@ -711,10 +712,54 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     }\n                 }\n             }\n+            Rvalue::NullaryOp(NullOp::OffsetOf(fields), container) => {\n+                let fail_out_of_bounds = |this: &Self, location, field, ty| {\n+                    this.fail(location, format!(\"Out of bounds field {field:?} for {ty:?}\"));\n+                };\n+\n+                let mut current_ty = *container;\n+\n+                for &field in fields {\n+                    match current_ty.kind() {\n+                        ty::Tuple(fields) => {\n+                            let Some(&f_ty) = fields.get(field.as_usize()) else {\n+                                fail_out_of_bounds(self, location, field, current_ty);\n+                                return;\n+                            };\n+\n+                            current_ty = self.tcx.normalize_erasing_regions(self.param_env, f_ty);\n+                        }\n+                        ty::Adt(adt_def, substs) => {\n+                            if adt_def.is_enum() {\n+                                self.fail(\n+                                    location,\n+                                    format!(\"Cannot get field offset from enum {current_ty:?}\"),\n+                                );\n+                                return;\n+                            }\n+\n+                            let Some(field) = adt_def.non_enum_variant().fields.get(field) else {\n+                                fail_out_of_bounds(self, location, field, current_ty);\n+                                return;\n+                            };\n+\n+                            let f_ty = field.ty(self.tcx, substs);\n+                            current_ty = self.tcx.normalize_erasing_regions(self.param_env, f_ty);\n+                        }\n+                        _ => {\n+                            self.fail(\n+                                location,\n+                                format!(\"Cannot get field offset from non-adt type {current_ty:?}\"),\n+                            );\n+                            return;\n+                        }\n+                    }\n+                }\n+            }\n             Rvalue::Repeat(_, _)\n             | Rvalue::ThreadLocalRef(_)\n             | Rvalue::AddressOf(_, _)\n-            | Rvalue::NullaryOp(_, _)\n+            | Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _)\n             | Rvalue::Discriminant(_) => {}\n         }\n         self.super_rvalue(rvalue, location);"}, {"sha": "52ed9660256cbf31e8e8482b7ae919aa97c70709", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -1715,6 +1715,7 @@ impl Expr<'_> {\n             ExprKind::Continue(..) => ExprPrecedence::Continue,\n             ExprKind::Ret(..) => ExprPrecedence::Ret,\n             ExprKind::InlineAsm(..) => ExprPrecedence::InlineAsm,\n+            ExprKind::OffsetOf(..) => ExprPrecedence::OffsetOf,\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n             ExprKind::Yield(..) => ExprPrecedence::Yield,\n@@ -1774,6 +1775,7 @@ impl Expr<'_> {\n             | ExprKind::Loop(..)\n             | ExprKind::Assign(..)\n             | ExprKind::InlineAsm(..)\n+            | ExprKind::OffsetOf(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::Lit(_)\n             | ExprKind::ConstBlock(..)\n@@ -1818,7 +1820,7 @@ impl Expr<'_> {\n \n     pub fn can_have_side_effects(&self) -> bool {\n         match self.peel_drop_temps().kind {\n-            ExprKind::Path(_) | ExprKind::Lit(_) => false,\n+            ExprKind::Path(_) | ExprKind::Lit(_) | ExprKind::OffsetOf(..) => false,\n             ExprKind::Type(base, _)\n             | ExprKind::Unary(_, base)\n             | ExprKind::Field(base, _)\n@@ -2022,6 +2024,9 @@ pub enum ExprKind<'hir> {\n     /// Inline assembly (from `asm!`), with its outputs and inputs.\n     InlineAsm(&'hir InlineAsm<'hir>),\n \n+    /// Field offset (`offset_of!`)\n+    OffsetOf(&'hir Ty<'hir>, &'hir [Ident]),\n+\n     /// A struct or struct-like variant literal expression.\n     ///\n     /// E.g., `Foo {x: 1, y: 2}`, or `Foo {x: 1, .. base}`,"}, {"sha": "df0047d82e12efe1660f6ddcb718ad7039d49f51", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -786,6 +786,10 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         ExprKind::InlineAsm(ref asm) => {\n             visitor.visit_inline_asm(asm, expression.hir_id);\n         }\n+        ExprKind::OffsetOf(ref container, ref fields) => {\n+            visitor.visit_ty(container);\n+            walk_list!(visitor, visit_ident, fields.iter().copied());\n+        }\n         ExprKind::Yield(ref subexpression, _) => {\n             visitor.visit_expr(subexpression);\n         }"}, {"sha": "1e05003c19ce09925b08d9d96bbab23b46bd8113", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -1551,6 +1551,24 @@ impl<'a> State<'a> {\n                 self.word(\"asm!\");\n                 self.print_inline_asm(asm);\n             }\n+            hir::ExprKind::OffsetOf(container, ref fields) => {\n+                self.word(\"offset_of!(\");\n+                self.print_type(container);\n+                self.word(\",\");\n+                self.space();\n+\n+                let (&first, rest) =\n+                    fields.split_first().expect(\"offset_of! should have at least 1 field\");\n+\n+                self.print_ident(first);\n+\n+                for &field in rest {\n+                    self.word(\".\");\n+                    self.print_ident(field);\n+                }\n+\n+                self.word(\")\");\n+            }\n             hir::ExprKind::Yield(expr, _) => {\n                 self.word_space(\"yield\");\n                 self.print_expr_maybe_paren(expr, parser::PREC_JUMP);"}, {"sha": "653f2f2886f790bb1668ed1456ce1fe4ffe020b3", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 96, "deletions": 9, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -309,6 +309,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.deferred_asm_checks.borrow_mut().push((asm, expr.hir_id));\n                 self.check_expr_asm(asm)\n             }\n+            ExprKind::OffsetOf(container, ref fields) => {\n+                self.check_offset_of(container, fields, expr)\n+            }\n             ExprKind::Break(destination, ref expr_opt) => {\n                 self.check_expr_break(destination, expr_opt.as_deref(), expr)\n             }\n@@ -2450,15 +2453,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         base_did: DefId,\n         return_ty: Option<Ty<'tcx>>,\n     ) -> ErrorGuaranteed {\n-        let struct_path = self.tcx().def_path_str(base_did);\n-        let kind_name = self.tcx().def_descr(base_did);\n-        let mut err = struct_span_err!(\n-            self.tcx().sess,\n-            field.span,\n-            E0616,\n-            \"field `{field}` of {kind_name} `{struct_path}` is private\",\n-        );\n-        err.span_label(field.span, \"private field\");\n+        let mut err = self.private_field_err(field, base_did);\n+\n         // Also check if an accessible method exists, which is often what is meant.\n         if self.method_exists(field, expr_t, expr.hir_id, false, return_ty)\n             && !self.expr_in_place(expr.hir_id)\n@@ -2698,6 +2694,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err\n     }\n \n+    fn private_field_err(\n+        &self,\n+        field: Ident,\n+        base_did: DefId,\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let struct_path = self.tcx().def_path_str(base_did);\n+        let kind_name = self.tcx().def_descr(base_did);\n+        let mut err = struct_span_err!(\n+            self.tcx().sess,\n+            field.span,\n+            E0616,\n+            \"field `{field}` of {kind_name} `{struct_path}` is private\",\n+        );\n+        err.span_label(field.span, \"private field\");\n+\n+        err\n+    }\n+\n     pub(crate) fn get_field_candidates_considering_privacy(\n         &self,\n         span: Span,\n@@ -3042,4 +3056,77 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.mk_unit()\n         }\n     }\n+\n+    fn check_offset_of(\n+        &self,\n+        container: &'tcx hir::Ty<'tcx>,\n+        fields: &[Ident],\n+        expr: &'tcx hir::Expr<'tcx>,\n+    ) -> Ty<'tcx> {\n+        let container = self.to_ty(container).normalized;\n+\n+        let mut field_indices = Vec::with_capacity(fields.len());\n+        let mut current_container = container;\n+\n+        for &field in fields {\n+            let container = self.structurally_resolved_type(expr.span, current_container);\n+\n+            match container.kind() {\n+                ty::Adt(container_def, substs) if !container_def.is_enum() => {\n+                    let block = self.tcx.hir().local_def_id_to_hir_id(self.body_id);\n+                    let (ident, def_scope) =\n+                        self.tcx.adjust_ident_and_get_scope(field, container_def.did(), block);\n+\n+                    let fields = &container_def.non_enum_variant().fields;\n+                    if let Some((index, field)) = fields\n+                        .iter_enumerated()\n+                        .find(|(_, f)| f.ident(self.tcx).normalize_to_macros_2_0() == ident)\n+                    {\n+                        let field_ty = self.field_ty(expr.span, field, substs);\n+\n+                        self.require_type_is_sized(field_ty, expr.span, traits::MiscObligation);\n+\n+                        if field.vis.is_accessible_from(def_scope, self.tcx) {\n+                            self.tcx.check_stability(field.did, Some(expr.hir_id), expr.span, None);\n+                        } else {\n+                            self.private_field_err(ident, container_def.did()).emit();\n+                        }\n+\n+                        // Save the index of all fields regardless of their visibility in case\n+                        // of error recovery.\n+                        field_indices.push(index);\n+                        current_container = field_ty;\n+\n+                        continue;\n+                    }\n+                }\n+                ty::Tuple(tys) => {\n+                    let fstr = field.as_str();\n+\n+                    if let Ok(index) = fstr.parse::<usize>() {\n+                        if fstr == index.to_string() {\n+                            if let Some(&field_ty) = tys.get(index) {\n+                                field_indices.push(index.into());\n+                                current_container = field_ty;\n+\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                }\n+                _ => (),\n+            };\n+\n+            self.no_such_field_err(field, container, expr.hir_id).emit();\n+\n+            break;\n+        }\n+\n+        self.typeck_results\n+            .borrow_mut()\n+            .offset_of_data_mut()\n+            .insert(expr.hir_id, (container, field_indices));\n+\n+        self.tcx.types.usize\n+    }\n }"}, {"sha": "94b6a0f8f47d74d24a041413375c68800ebb5b8e", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -300,6 +300,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             hir::ExprKind::Continue(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::ConstBlock(..)\n+            | hir::ExprKind::OffsetOf(..)\n             | hir::ExprKind::Err(_) => {}\n \n             hir::ExprKind::Loop(blk, ..) => {"}, {"sha": "28c44aa5703e8e6e6fee04f1ce0de03a94a93a89", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -215,6 +215,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n             | ExprKind::Continue(..)\n             | ExprKind::Ret(..)\n             | ExprKind::InlineAsm(..)\n+            | ExprKind::OffsetOf(..)\n             | ExprKind::Struct(..)\n             | ExprKind::Repeat(..)\n             | ExprKind::Yield(..)\n@@ -485,6 +486,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n             | ExprKind::Field(..)\n             | ExprKind::Index(..)\n             | ExprKind::InlineAsm(..)\n+            | ExprKind::OffsetOf(..)\n             | ExprKind::Let(..)\n             | ExprKind::Lit(..)\n             | ExprKind::Path(..)"}, {"sha": "f5fca14eca88f819eb2e3b9b561ce619762cc839", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -381,6 +381,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Repeat(..)\n             | hir::ExprKind::InlineAsm(..)\n+            | hir::ExprKind::OffsetOf(..)\n             | hir::ExprKind::Err(_) => Ok(self.cat_rvalue(expr.hir_id, expr.span, expr_ty)),\n         }\n     }"}, {"sha": "9432a5840b2766b1651e176a69e81993527a9663", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -70,6 +70,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wbcx.visit_user_provided_tys();\n         wbcx.visit_user_provided_sigs();\n         wbcx.visit_generator_interior_types();\n+        wbcx.visit_offset_of_container_types();\n \n         wbcx.typeck_results.rvalue_scopes =\n             mem::take(&mut self.typeck_results.borrow_mut().rvalue_scopes);\n@@ -295,7 +296,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n                     self.visit_field_id(field.hir_id);\n                 }\n             }\n-            hir::ExprKind::Field(..) => {\n+            hir::ExprKind::Field(..) | hir::ExprKind::OffsetOf(..) => {\n                 self.visit_field_id(e.hir_id);\n             }\n             hir::ExprKind::ConstBlock(anon_const) => {\n@@ -682,6 +683,28 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         }\n     }\n \n+    fn visit_offset_of_container_types(&mut self) {\n+        let fcx_typeck_results = self.fcx.typeck_results.borrow();\n+        assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);\n+        let common_hir_owner = fcx_typeck_results.hir_owner;\n+\n+        for (local_id, &(container, ref indices)) in\n+            fcx_typeck_results.offset_of_data().items_in_stable_order()\n+        {\n+            let hir_id = hir::HirId { owner: common_hir_owner, local_id };\n+\n+            if cfg!(debug_assertions) && container.needs_infer() {\n+                span_bug!(\n+                    hir_id.to_span(self.fcx.tcx),\n+                    \"writeback: `{:?}` has inference variables\",\n+                    container\n+                );\n+            };\n+\n+            self.typeck_results.offset_of_data_mut().insert(hir_id, (container, indices.clone()));\n+        }\n+    }\n+\n     fn resolve<T>(&mut self, x: T, span: &dyn Locatable) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>>,"}, {"sha": "6d7316a32627f2ee1930857cde665d90383fc657", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -1211,12 +1211,14 @@ pub enum AggregateKind<'tcx> {\n     Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum NullOp {\n     /// Returns the size of a value of that type\n     SizeOf,\n     /// Returns the minimum alignment of a type\n     AlignOf,\n+    /// Returns the offset of a field\n+    OffsetOf(Vec<FieldIdx>),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -1286,6 +1288,6 @@ mod size_asserts {\n     static_assert_size!(Operand<'_>, 24);\n     static_assert_size!(Place<'_>, 16);\n     static_assert_size!(PlaceElem<'_>, 24);\n-    static_assert_size!(Rvalue<'_>, 40);\n+    static_assert_size!(Rvalue<'_>, 48);\n     // tidy-alphabetical-end\n }"}, {"sha": "5ca8241344832f90bd9ce721671c0e06d4bb98aa", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -188,7 +188,9 @@ impl<'tcx> Rvalue<'tcx> {\n             }\n             Rvalue::UnaryOp(UnOp::Not | UnOp::Neg, ref operand) => operand.ty(local_decls, tcx),\n             Rvalue::Discriminant(ref place) => place.ty(local_decls, tcx).ty.discriminant_ty(tcx),\n-            Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => tcx.types.usize,\n+            Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf | NullOp::OffsetOf(..), _) => {\n+                tcx.types.usize\n+            }\n             Rvalue::Aggregate(ref ak, ref ops) => match **ak {\n                 AggregateKind::Array(ty) => tcx.mk_array(ty, ops.len() as u64),\n                 AggregateKind::Tuple => {"}, {"sha": "084446697cb1aa1e2719a9d90ba9407c1317f016", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -481,6 +481,11 @@ pub enum ExprKind<'tcx> {\n     },\n     /// Inline assembly, i.e. `asm!()`.\n     InlineAsm(Box<InlineAsmExpr<'tcx>>),\n+    /// Field offset (`offset_of!`)\n+    OffsetOf {\n+        container: Ty<'tcx>,\n+        fields: Vec<FieldIdx>,\n+    },\n     /// An expression taking a reference to a thread local.\n     ThreadLocalRef(DefId),\n     /// A `yield` expression."}, {"sha": "5c7ec31cf93d32cdcdc0e51c010889ddecc9731a", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -160,6 +160,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n                 }\n             }\n         }\n+        OffsetOf { container: _, fields: _ } => {}\n         ThreadLocalRef(_) => {}\n         Yield { value } => visitor.visit_expr(&visitor.thir()[value]),\n     }"}, {"sha": "ef8955b1d3a317a82798e3a38bbc6de1d94539f5", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -208,6 +208,9 @@ pub struct TypeckResults<'tcx> {\n     /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`\n     /// on closure size.\n     pub closure_size_eval: FxHashMap<LocalDefId, ClosureSizeProfileData<'tcx>>,\n+\n+    /// Container types and field indices of `offset_of!` expressions\n+    offset_of_data: ItemLocalMap<(Ty<'tcx>, Vec<FieldIdx>)>,\n }\n \n /// Whenever a value may be live across a generator yield, the type of that value winds up in the\n@@ -280,6 +283,7 @@ impl<'tcx> TypeckResults<'tcx> {\n             generator_interior_predicates: Default::default(),\n             treat_byte_string_as_slice: Default::default(),\n             closure_size_eval: Default::default(),\n+            offset_of_data: Default::default(),\n         }\n     }\n \n@@ -530,6 +534,14 @@ impl<'tcx> TypeckResults<'tcx> {\n     pub fn coercion_casts(&self) -> &ItemLocalSet {\n         &self.coercion_casts\n     }\n+\n+    pub fn offset_of_data(&self) -> LocalTableInContext<'_, (Ty<'tcx>, Vec<FieldIdx>)> {\n+        LocalTableInContext { hir_owner: self.hir_owner, data: &self.offset_of_data }\n+    }\n+\n+    pub fn offset_of_data_mut(&mut self) -> LocalTableInContextMut<'_, (Ty<'tcx>, Vec<FieldIdx>)> {\n+        LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.offset_of_data }\n+    }\n }\n \n /// Validate that the given HirId (respectively its `local_id` part) can be"}, {"sha": "7ec57add66b594a3ee77116cfb8cc74f9a94222a", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -557,6 +557,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::ConstBlock { .. }\n             | ExprKind::StaticRef { .. }\n             | ExprKind::InlineAsm { .. }\n+            | ExprKind::OffsetOf { .. }\n             | ExprKind::Yield { .. }\n             | ExprKind::ThreadLocalRef(_)\n             | ExprKind::Call { .. } => {"}, {"sha": "a7fdb961248ce801985874e189aad2fc5bd5c4ac", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -481,6 +481,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }))))\n             }\n \n+            ExprKind::OffsetOf { container, ref fields } => {\n+                block.and(Rvalue::NullaryOp(NullOp::OffsetOf(fields.clone()), container))\n+            }\n+\n             ExprKind::Literal { .. }\n             | ExprKind::NamedConst { .. }\n             | ExprKind::NonHirLiteral { .. }"}, {"sha": "3cc104ad96ac31c9ce8228a5a643bb6dc6fc2321", "filename": "compiler/rustc_mir_build/src/build/expr/category.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -53,8 +53,7 @@ impl Category {\n             | ExprKind::Borrow { .. }\n             | ExprKind::AddressOf { .. }\n             | ExprKind::Yield { .. }\n-            | ExprKind::Call { .. }\n-            | ExprKind::InlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n+            | ExprKind::Call { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n \n             ExprKind::Array { .. }\n             | ExprKind::Tuple { .. }\n@@ -67,7 +66,9 @@ impl Category {\n             | ExprKind::Repeat { .. }\n             | ExprKind::Assign { .. }\n             | ExprKind::AssignOp { .. }\n-            | ExprKind::ThreadLocalRef(_) => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n+            | ExprKind::ThreadLocalRef(_)\n+            | ExprKind::InlineAsm { .. }\n+            | ExprKind::OffsetOf { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n \n             ExprKind::ConstBlock { .. }\n             | ExprKind::Literal { .. }"}, {"sha": "29ff916d2cc9c1fad984d3829d4096e2b194b6b0", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -561,7 +561,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::ZstLiteral { .. }\n             | ExprKind::ConstParam { .. }\n             | ExprKind::ThreadLocalRef(_)\n-            | ExprKind::StaticRef { .. } => {\n+            | ExprKind::StaticRef { .. }\n+            | ExprKind::OffsetOf { .. } => {\n                 debug_assert!(match Category::of(&expr.kind).unwrap() {\n                     // should be handled above\n                     Category::Rvalue(RvalueFunc::Into) => false,"}, {"sha": "121ba8166afaa2df70a6c822a91911493bfe45ff", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -323,6 +323,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             | ExprKind::Box { .. }\n             | ExprKind::If { .. }\n             | ExprKind::InlineAsm { .. }\n+            | ExprKind::OffsetOf { .. }\n             | ExprKind::LogicalOp { .. }\n             | ExprKind::Use { .. } => {\n                 // We don't need to save the old value and restore it"}, {"sha": "5329f6dd9d95993ac3bb35a5fa6c063d67cf855a", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -664,6 +664,14 @@ impl<'tcx> Cx<'tcx> {\n                 line_spans: asm.line_spans,\n             })),\n \n+            hir::ExprKind::OffsetOf(_, _) => {\n+                let data = self.typeck_results.offset_of_data();\n+                let &(container, ref indices) = data.get(expr.hir_id).unwrap();\n+                let fields = indices.iter().copied().collect();\n+\n+                ExprKind::OffsetOf { container, fields }\n+            }\n+\n             hir::ExprKind::ConstBlock(ref anon_const) => {\n                 let ty = self.typeck_results().node_type(anon_const.hir_id);\n                 let did = anon_const.def_id.to_def_id();"}, {"sha": "86d20327f60f5a58ce89d5b582554c75dbe09d88", "filename": "compiler/rustc_mir_build/src/thir/print.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fprint.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -519,6 +519,19 @@ impl<'a, 'tcx> ThirPrinter<'a, 'tcx> {\n                 self.print_inline_asm_expr(&**expr, depth_lvl + 2);\n                 print_indented!(self, \"}\", depth_lvl);\n             }\n+            OffsetOf { container, fields } => {\n+                print_indented!(self, \"InlineAsm {\", depth_lvl);\n+                print_indented!(self, format!(\"container: {:?}\", container), depth_lvl + 1);\n+                print_indented!(self, \"fields: [\", depth_lvl + 1);\n+\n+                for field in fields.iter() {\n+                    print_indented!(self, format!(\"{:?}\", field), depth_lvl + 2);\n+                    print_indented!(self, \",\", depth_lvl + 1);\n+                }\n+\n+                print_indented!(self, \"]\", depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n             ThreadLocalRef(def_id) => {\n                 print_indented!(self, \"ThreadLocalRef {\", depth_lvl);\n                 print_indented!(self, format!(\"def_id: {:?}\", def_id), depth_lvl + 1);"}, {"sha": "736ca62caccccb2588609ac2a8abec55ecf84b31", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -360,7 +360,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             | Rvalue::AddressOf(..)\n             | Rvalue::Discriminant(..)\n             | Rvalue::Len(..)\n-            | Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n+            | Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf | NullOp::OffsetOf(..), _) => {}\n         }\n     }\n "}, {"sha": "2479856b727daa36fba3ab58f844192577d2b367", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -303,8 +303,7 @@ fn find_determining_place<'tcx>(\n                     | Rvalue::NullaryOp(_, _)\n                     | Rvalue::ShallowInitBox(_, _)\n                     | Rvalue::UnaryOp(_, Operand::Constant(_))\n-                    | Rvalue::Cast(_, Operand::Constant(_), _)\n-                    => return None,\n+                    | Rvalue::Cast(_, Operand::Constant(_), _) => return None,\n                 }\n             }\n "}, {"sha": "82b55df106c7ee62dfa839572f4b540c777d9f76", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -237,6 +237,39 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         }\n     }\n \n+    fn handle_offset_of(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n+        let data = self.typeck_results().offset_of_data();\n+        let &(container, ref indices) =\n+            data.get(expr.hir_id).expect(\"no offset_of_data for offset_of\");\n+\n+        let mut last_did = expr.hir_id.owner.to_def_id();\n+        let mut current_ty = container;\n+\n+        for &index in indices {\n+            match current_ty.kind() {\n+                ty::Adt(def, subst) => {\n+                    let field = &def.non_enum_variant().fields[index];\n+\n+                    self.insert_def_id(field.did);\n+                    let field_ty = field.ty(self.tcx, subst);\n+\n+                    last_did = field.did;\n+                    current_ty =\n+                        self.tcx.normalize_erasing_regions(self.tcx.param_env(field.did), field_ty);\n+                }\n+                // we don't need to mark tuple fields as live,\n+                // but we may need to mark subfields\n+                ty::Tuple(tys) => {\n+                    current_ty = self.tcx.normalize_erasing_regions(\n+                        self.tcx.param_env(last_did),\n+                        tys[index.as_usize()],\n+                    );\n+                }\n+                _ => span_bug!(expr.span, \"named field access on non-ADT\"),\n+            }\n+        }\n+    }\n+\n     fn mark_live_symbols(&mut self) {\n         let mut scanned = LocalDefIdSet::default();\n         while let Some(id) = self.worklist.pop() {\n@@ -405,6 +438,9 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n             hir::ExprKind::Closure(cls) => {\n                 self.insert_def_id(cls.def_id.to_def_id());\n             }\n+            hir::ExprKind::OffsetOf(..) => {\n+                self.handle_offset_of(expr);\n+            }\n             _ => (),\n         }\n "}, {"sha": "dc5e454074deda8d002888f88e469750869f774d", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -302,7 +302,8 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n             [\n                 ConstBlock, Array, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type,\n                 DropTemps, Let, If, Loop, Match, Closure, Block, Assign, AssignOp, Field, Index,\n-                Path, AddrOf, Break, Continue, Ret, InlineAsm, Struct, Repeat, Yield, Err\n+                Path, AddrOf, Break, Continue, Ret, InlineAsm, OffsetOf, Struct, Repeat, Yield,\n+                Err\n             ]\n         );\n         hir_visit::walk_expr(self, e)\n@@ -568,7 +569,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n                 Array, ConstBlock, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type, Let,\n                 If, While, ForLoop, Loop, Match, Closure, Block, Async, Await, TryBlock, Assign,\n                 AssignOp, Field, Index, Range, Underscore, Path, AddrOf, Break, Continue, Ret,\n-                InlineAsm, FormatArgs, MacCall, Struct, Repeat, Paren, Try, Yield, Yeet, IncludedBytes, Err\n+                InlineAsm, FormatArgs, OffsetOf, MacCall, Struct, Repeat, Paren, Try, Yield, Yeet, IncludedBytes, Err\n             ]\n         );\n         ast_visit::walk_expr(self, e)"}, {"sha": "b39a8c5598f91102e9e22f85b92e0094c7049d2c", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -473,6 +473,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Repeat(..)\n             | hir::ExprKind::InlineAsm(..)\n+            | hir::ExprKind::OffsetOf(..)\n             | hir::ExprKind::Type(..)\n             | hir::ExprKind::Err(_)\n             | hir::ExprKind::Path(hir::QPath::TypeRelative(..))\n@@ -1129,7 +1130,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Err(_)\n             | hir::ExprKind::Path(hir::QPath::TypeRelative(..))\n-            | hir::ExprKind::Path(hir::QPath::LangItem(..)) => succ,\n+            | hir::ExprKind::Path(hir::QPath::LangItem(..))\n+            | hir::ExprKind::OffsetOf(..) => succ,\n \n             // Note that labels have been resolved, so we don't need to look\n             // at the label ident\n@@ -1418,6 +1420,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         | hir::ExprKind::ConstBlock(..)\n         | hir::ExprKind::Block(..)\n         | hir::ExprKind::AddrOf(..)\n+        | hir::ExprKind::OffsetOf(..)\n         | hir::ExprKind::Struct(..)\n         | hir::ExprKind::Repeat(..)\n         | hir::ExprKind::Closure { .. }"}, {"sha": "cf8d9300a116749010bbb8a79c5048d69d5b2c72", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -203,6 +203,7 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n             | ExprKind::Break(..)\n             | ExprKind::Continue(..)\n             | ExprKind::Ret(..)\n+            | ExprKind::OffsetOf(..)\n             | ExprKind::Struct(..)\n             | ExprKind::Repeat(..)\n             | ExprKind::Yield(..) => {"}, {"sha": "9891915d076dd2bfe9eaae8d92204d5ecbd2b448", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -1037,6 +1037,7 @@ symbols! {\n         object_safe_for_dispatch,\n         of,\n         offset,\n+        offset_of,\n         omit_gdb_pretty_printer_section,\n         on,\n         on_unimplemented,"}, {"sha": "589cd3cf96b3eca9ba18a7428d47ff207df107c5", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -124,6 +124,21 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n     {\n         Ty::is_unit(self)\n     }\n+\n+    pub fn offset_of_subfield<C>(self, cx: &C, indices: impl Iterator<Item = usize>) -> Size\n+    where\n+        Ty: TyAbiInterface<'a, C>,\n+    {\n+        let mut layout = self;\n+        let mut offset = Size::ZERO;\n+\n+        for index in indices {\n+            offset += layout.fields.offset(index);\n+            layout = layout.field(cx, index);\n+        }\n+\n+        offset\n+    }\n }\n \n impl<'a, Ty> TyAndLayout<'a, Ty> {"}, {"sha": "e96df77d8598ecfee16584214e1fe6dc6dcc0b1c", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -256,6 +256,7 @@ fn recurse_build<'tcx>(\n         ExprKind::VarRef { .. }\n         | ExprKind::UpvarRef { .. }\n         | ExprKind::StaticRef { .. }\n+        | ExprKind::OffsetOf { .. }\n         | ExprKind::ThreadLocalRef(_) => {\n             error(GenericConstantTooComplexSub::OperationNotSupported(node.span))?\n         }\n@@ -347,6 +348,7 @@ impl<'a, 'tcx> IsThirPolymorphic<'a, 'tcx> {\n             | thir::ExprKind::ZstLiteral { .. }\n             | thir::ExprKind::StaticRef { .. }\n             | thir::ExprKind::InlineAsm(_)\n+            | thir::ExprKind::OffsetOf { .. }\n             | thir::ExprKind::ThreadLocalRef(_)\n             | thir::ExprKind::Yield { .. } => false,\n         }"}, {"sha": "85745334e9ff765cedc817159f0624ad340f1077", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -1279,3 +1279,45 @@ pub trait SizedTypeProperties: Sized {\n #[doc(hidden)]\n #[unstable(feature = \"sized_type_properties\", issue = \"none\")]\n impl<T> SizedTypeProperties for T {}\n+\n+/// Expands to the offset in bytes of a field from the beginning of the given type.\n+///\n+/// Only structs, unions and tuples are supported.\n+///\n+/// Nested field accesses may be used, but not array indexes like in `C`'s `offsetof`.\n+///\n+/// Note that the output of this macro is not stable, except for `#[repr(C)]` types.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(offset_of)]\n+///\n+/// use std::mem;\n+/// #[repr(C)]\n+/// struct FieldStruct {\n+///     first: u8,\n+///     second: u16,\n+///     third: u8\n+/// }\n+///\n+/// assert_eq!(mem::offset_of!(FieldStruct, first), 0);\n+/// assert_eq!(mem::offset_of!(FieldStruct, second), 2);\n+/// assert_eq!(mem::offset_of!(FieldStruct, third), 4);\n+///\n+/// #[repr(C)]\n+/// struct NestedA {\n+///     b: NestedB\n+/// }\n+///\n+/// #[repr(C)]\n+/// struct NestedB(u8);\n+///\n+/// assert_eq!(mem::offset_of!(NestedA, b.0), 0);\n+/// ```\n+#[unstable(feature = \"offset_of\", issue = \"106655\")]\n+#[rustc_builtin_macro]\n+#[cfg(not(bootstrap))]\n+pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {\n+    // ...implementation defined...\n+}"}, {"sha": "84859a54c2604134da5aef4a489f866de4aadd19", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -109,6 +109,7 @@\n #![feature(utf8_chunks)]\n #![feature(is_ascii_octdigit)]\n #![feature(get_many_mut)]\n+#![cfg_attr(not(bootstrap), feature(offset_of))]\n #![deny(unsafe_op_in_unsafe_fn)]\n #![deny(fuzzy_provenance_casts)]\n "}, {"sha": "c08fc6fd2fb1fdafead89550ad51770924e142ba", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -364,3 +364,77 @@ fn const_maybe_uninit() {\n \n     assert_eq!(FIELD_BY_FIELD, Foo { x: 1, y: 2 });\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn offset_of() {\n+    #[repr(C)]\n+    struct Foo {\n+        x: u8,\n+        y: u16,\n+        z: Bar,\n+    }\n+\n+    #[repr(C)]\n+    struct Bar(u8, u8);\n+\n+    assert_eq!(offset_of!(Foo, x), 0);\n+    assert_eq!(offset_of!(Foo, y), 2);\n+    assert_eq!(offset_of!(Foo, z.0), 4);\n+    assert_eq!(offset_of!(Foo, z.1), 5);\n+\n+    // Layout of tuples is unstable\n+    assert!(offset_of!((u8, u16), 0) <= size_of::<(u8, u16)>() - 1);\n+    assert!(offset_of!((u8, u16), 1) <= size_of::<(u8, u16)>() - 2);\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn const_offset_of() {\n+    #[repr(C)]\n+    struct Foo {\n+        x: u8,\n+        y: u16,\n+    }\n+\n+    const X_OFFSET: usize = offset_of!(Foo, x);\n+    const Y_OFFSET: usize = offset_of!(Foo, y);\n+\n+    assert_eq!(X_OFFSET, 0);\n+    assert_eq!(Y_OFFSET, 2);\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn offset_of_without_const_promotion() {\n+    #[repr(C)]\n+    struct Foo<SuppressConstPromotion> {\n+        x: u8,\n+        y: u16,\n+        _scp: SuppressConstPromotion,\n+    }\n+\n+    // Normally, offset_of is always const promoted.\n+    // The generic parameter prevents this from happening.\n+    // This is needed to test the codegen impl of offset_of\n+    fn inner<SuppressConstPromotion>() {\n+        assert_eq!(offset_of!(Foo<SuppressConstPromotion>, x), 0);\n+        assert_eq!(offset_of!(Foo<SuppressConstPromotion>, y), 2);\n+    }\n+\n+    inner::<()>();\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn offset_of_dst() {\n+    #[repr(C)]\n+    struct Foo {\n+        x: u8,\n+        y: u16,\n+        slice: [u8],\n+    }\n+\n+    assert_eq!(offset_of!(Foo, x), 0);\n+    assert_eq!(offset_of!(Foo, y), 2);\n+}"}, {"sha": "5f1fdf00be8c3fc11df5dc1a0eced013ff23f69d", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -226,7 +226,8 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n                 | InlineAsmOperand::SymStatic { .. } => NeverLoopResult::Otherwise,\n             })\n             .fold(NeverLoopResult::Otherwise, combine_seq),\n-        ExprKind::Yield(_, _)\n+        ExprKind::OffsetOf(_, _)\n+        | ExprKind::Yield(_, _)\n         | ExprKind::Closure { .. }\n         | ExprKind::Path(_)\n         | ExprKind::ConstBlock(_)"}, {"sha": "7945275393c04e5e666611c0df065b1562ae9873", "filename": "src/tools/clippy/clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -342,6 +342,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n             ExprKind::DropTemps(_) |\n             ExprKind::Err(_) |\n             ExprKind::InlineAsm(_) |\n+            ExprKind::OffsetOf(_, _) |\n             ExprKind::Let(_) |\n             ExprKind::Lit(_) |\n             ExprKind::Loop(_, _, _, _) |"}, {"sha": "01927b6b5f10d91958e6c1679bcfeac2767eb6b2", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -558,6 +558,10 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 kind!(\"InlineAsm(_)\");\n                 out!(\"// unimplemented: `ExprKind::InlineAsm` is not further destructured at the moment\");\n             },\n+            ExprKind::OffsetOf(container, ref fields) => {\n+                bind!(self, container, fields);\n+                kind!(\"OffsetOf({container}, {fields})\");\n+            }\n             ExprKind::Struct(qpath, fields, base) => {\n                 bind!(self, qpath, fields);\n                 opt_bind!(self, base);"}, {"sha": "3df40942e7b5a5ee3652514342da623f63ae3d8b", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -218,7 +218,8 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 | ExprKind::AddrOf(..)\n                 | ExprKind::Struct(..)\n                 | ExprKind::Repeat(..)\n-                | ExprKind::Block(Block { stmts: [], .. }, _) => (),\n+                | ExprKind::Block(Block { stmts: [], .. }, _)\n+                | ExprKind::OffsetOf(..) => (),\n \n                 // Assignment might be to a local defined earlier, so don't eagerly evaluate.\n                 // Blocks with multiple statements might be expensive, so don't eagerly evaluate."}, {"sha": "d972ed82c258b41bcdaed8ee73ec2d0e869c7384", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -301,6 +301,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&ExprKind::Unary(l_op, le), &ExprKind::Unary(r_op, re)) => l_op == r_op && self.eq_expr(le, re),\n             (&ExprKind::Array(l), &ExprKind::Array(r)) => self.eq_exprs(l, r),\n             (&ExprKind::DropTemps(le), &ExprKind::DropTemps(re)) => self.eq_expr(le, re),\n+            (&ExprKind::OffsetOf(l_container, ref l_fields), &ExprKind::OffsetOf(r_container, ref r_fields)) => {\n+                self.eq_ty(l_container, r_container) && over(l_fields, r_fields, |l, r| l.name == r.name)\n+            },\n             _ => false,\n         };\n         (is_eq && (!self.should_ignore(left) || !self.should_ignore(right)))\n@@ -701,6 +704,12 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     }\n                 }\n             },\n+            ExprKind::OffsetOf(container, fields) => {\n+                self.hash_ty(container);\n+                for field in fields {\n+                    self.hash_name(field.name);\n+                }\n+            },\n             ExprKind::Let(Let { pat, init, ty, .. }) => {\n                 self.hash_expr(init);\n                 if let Some(ty) = ty {"}, {"sha": "ecd712f32dc1f29fb3efa950891fe026188ab9bc", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -194,7 +194,7 @@ fn check_rvalue<'tcx>(\n                 ))\n             }\n         },\n-        Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) | Rvalue::ShallowInitBox(_, _) => Ok(()),\n+        Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf | NullOp::OffsetOf(_), _) | Rvalue::ShallowInitBox(_, _) => Ok(()),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {"}, {"sha": "e81eadceec0aa5ee53dc10bd74fb2d961fbcbe42", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -139,6 +139,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::Index(..)\n             | hir::ExprKind::InlineAsm(..)\n+            | hir::ExprKind::OffsetOf(..)\n             | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::Loop(..)\n@@ -197,6 +198,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::ForLoop(..)\n             | ast::ExprKind::Index(..)\n             | ast::ExprKind::InlineAsm(..)\n+            | ast::ExprKind::OffsetOf(..)\n             | ast::ExprKind::ConstBlock(..)\n             | ast::ExprKind::Lit(..)\n             | ast::ExprKind::IncludedBytes(..)"}, {"sha": "5dcd71cef127e4b9d0a4a23c54e0f198138862c0", "filename": "src/tools/clippy/clippy_utils/src/visitors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -662,6 +662,7 @@ pub fn for_each_unconsumed_temporary<'tcx, B>(\n             | ExprKind::Path(_)\n             | ExprKind::Continue(_)\n             | ExprKind::InlineAsm(_)\n+            | ExprKind::OffsetOf(..)\n             | ExprKind::Err(_) => (),\n         }\n         ControlFlow::Continue(())"}, {"sha": "b76e3a2a87c999b9767778b5130ce3e1060aecd7", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -345,6 +345,7 @@ pub(crate) fn format_expr(\n         // Style Guide RFC for InlineAsm variant pending\n         // https://github.com/rust-dev-tools/fmt-rfcs/issues/152\n         ast::ExprKind::InlineAsm(..) => Some(context.snippet(expr.span).to_owned()),\n+        ast::ExprKind::OffsetOf(..) => Some(context.snippet(expr.span).to_owned()),\n         ast::ExprKind::TryBlock(ref block) => {\n             if let rw @ Some(_) =\n                 rewrite_single_line_block(context, \"try \", block, Some(&expr.attrs), None, shape)"}, {"sha": "ca1716574071b61f4500a6d9d42d0d6ff3160751", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -499,6 +499,7 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Field(..)\n         | ast::ExprKind::IncludedBytes(..)\n         | ast::ExprKind::InlineAsm(..)\n+        | ast::ExprKind::OffsetOf(..)\n         | ast::ExprKind::Let(..)\n         | ast::ExprKind::Path(..)\n         | ast::ExprKind::Range(..)"}, {"sha": "0437ec81f1e02c70c875d88eef22dd56319ba98b", "filename": "tests/mir-opt/const_prop/offset_of.main.ConstProp.diff", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.main.ConstProp.diff?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -0,0 +1,43 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/offset_of.rs:+0:11: +0:11\n+      let _1: usize;                       // in scope 0 at $DIR/offset_of.rs:+1:9: +1:10\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/offset_of.rs:+1:9: +1:10\n+          let _2: usize;                   // in scope 1 at $DIR/offset_of.rs:+2:9: +2:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/offset_of.rs:+2:9: +2:10\n+              let _3: usize;               // in scope 2 at $DIR/offset_of.rs:+3:9: +3:11\n+              scope 3 {\n+                  debug z0 => _3;          // in scope 3 at $DIR/offset_of.rs:+3:9: +3:11\n+                  let _4: usize;           // in scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n+                  scope 4 {\n+                      debug z1 => _4;      // in scope 4 at $DIR/offset_of.rs:+4:9: +4:11\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/offset_of.rs:+1:9: +1:10\n+-         _1 = OffsetOf([0])(Foo);         // scope 0 at $DIR/offset_of.rs:+1:13: +1:31\n++         _1 = const 0_usize;              // scope 0 at $DIR/offset_of.rs:+1:13: +1:31\n+          StorageLive(_2);                 // scope 1 at $DIR/offset_of.rs:+2:9: +2:10\n+-         _2 = OffsetOf([1])(Foo);         // scope 1 at $DIR/offset_of.rs:+2:13: +2:31\n++         _2 = const 2_usize;              // scope 1 at $DIR/offset_of.rs:+2:13: +2:31\n+          StorageLive(_3);                 // scope 2 at $DIR/offset_of.rs:+3:9: +3:11\n+-         _3 = OffsetOf([2, 0])(Foo);      // scope 2 at $DIR/offset_of.rs:+3:14: +3:34\n++         _3 = const 4_usize;              // scope 2 at $DIR/offset_of.rs:+3:14: +3:34\n+          StorageLive(_4);                 // scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n+-         _4 = OffsetOf([2, 1])(Foo);      // scope 3 at $DIR/offset_of.rs:+4:14: +4:34\n++         _4 = const 5_usize;              // scope 3 at $DIR/offset_of.rs:+4:14: +4:34\n+          StorageDead(_4);                 // scope 3 at $DIR/offset_of.rs:+5:1: +5:2\n+          StorageDead(_3);                 // scope 2 at $DIR/offset_of.rs:+5:1: +5:2\n+          StorageDead(_2);                 // scope 1 at $DIR/offset_of.rs:+5:1: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/offset_of.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/offset_of.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "54e19890c36f007c70aea21b5d21250540d38ec2", "filename": "tests/mir-opt/const_prop/offset_of.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -0,0 +1,25 @@\n+// unit-test\n+// compile-flags: -O\n+\n+// EMIT_MIR offset_of.main.ConstProp.diff\n+\n+#![feature(offset_of)]\n+\n+use std::mem::offset_of;\n+\n+#[repr(C)]\n+struct Foo {\n+    x: u8,\n+    y: u16,\n+    z: Bar,\n+}\n+\n+#[repr(C)]\n+struct Bar(u8, u8);\n+\n+fn main() {\n+    let x = offset_of!(Foo, x);\n+    let y = offset_of!(Foo, y);\n+    let z0 = offset_of!(Foo, z.0);\n+    let z1 = offset_of!(Foo, z.1);\n+}"}, {"sha": "461f546f3eecc1015b15def120c4e7b5aa598a6b", "filename": "tests/ui/liveness/liveness-offset-of.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Fliveness%2Fliveness-offset-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Fliveness%2Fliveness-offset-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-offset-of.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -0,0 +1,26 @@\n+#![feature(offset_of)]\n+#![deny(dead_code)]\n+\n+use std::mem::offset_of;\n+\n+struct Alpha {\n+    a: (),\n+    b: (), //~ ERROR field `b` is never read\n+    c: Beta,\n+}\n+\n+struct Beta {\n+    a: (), //~ ERROR field `a` is never read\n+    b: (),\n+}\n+\n+struct Gamma {\n+    a: (), //~ ERROR field `a` is never read\n+    b: (),\n+}\n+\n+fn main() {\n+    offset_of!(Alpha, a);\n+    offset_of!(Alpha, c.b);\n+    offset_of!((Gamma,), 0.b);\n+}"}, {"sha": "32d13c8ed2cc50ee49542377b0be57d7a1ed41aa", "filename": "tests/ui/liveness/liveness-offset-of.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Fliveness%2Fliveness-offset-of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Fliveness%2Fliveness-offset-of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-offset-of.stderr?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -0,0 +1,33 @@\n+error: field `b` is never read\n+  --> $DIR/liveness-offset-of.rs:8:5\n+   |\n+LL | struct Alpha {\n+   |        ----- field in this struct\n+LL |     a: (),\n+LL |     b: (),\n+   |     ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/liveness-offset-of.rs:2:9\n+   |\n+LL | #![deny(dead_code)]\n+   |         ^^^^^^^^^\n+\n+error: field `a` is never read\n+  --> $DIR/liveness-offset-of.rs:13:5\n+   |\n+LL | struct Beta {\n+   |        ---- field in this struct\n+LL |     a: (),\n+   |     ^\n+\n+error: field `a` is never read\n+  --> $DIR/liveness-offset-of.rs:18:5\n+   |\n+LL | struct Gamma {\n+   |        ----- field in this struct\n+LL |     a: (),\n+   |     ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "09e071ec45420d6500047f485892a5ba71ca9eff", "filename": "tests/ui/macros/user-defined-macro-rules.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Fmacros%2Fuser-defined-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Fmacros%2Fuser-defined-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fuser-defined-macro-rules.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "previous_filename": "tests/ui/user-defined-macro-rules.rs"}, {"sha": "163b07454ecdf3baf8367a949e88ef6e053576f2", "filename": "tests/ui/offset-of/offset-of-arg-count.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -0,0 +1,9 @@\n+#![feature(offset_of)]\n+\n+use std::mem::offset_of;\n+\n+fn main() {\n+    offset_of!(NotEnoughArguments); //~ ERROR expected one of\n+    offset_of!(NotEnoughArgumentsWithAComma, ); //~ ERROR expected 2 arguments\n+    offset_of!(Container, field, too many arguments); //~ ERROR expected 2 arguments\n+}"}, {"sha": "ebecc982c5174c9700054088eb61d0b9a779ee76", "filename": "tests/ui/offset-of/offset-of-arg-count.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.stderr?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -0,0 +1,20 @@\n+error: expected one of `!`, `(`, `+`, `,`, `::`, or `<`, found `<eof>`\n+  --> $DIR/offset-of-arg-count.rs:6:16\n+   |\n+LL |     offset_of!(NotEnoughArguments);\n+   |                ^^^^^^^^^^^^^^^^^^ expected one of `!`, `(`, `+`, `,`, `::`, or `<`\n+\n+error: expected 2 arguments\n+  --> $DIR/offset-of-arg-count.rs:7:5\n+   |\n+LL |     offset_of!(NotEnoughArgumentsWithAComma, );\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: expected 2 arguments\n+  --> $DIR/offset-of-arg-count.rs:8:5\n+   |\n+LL |     offset_of!(Container, field, too many arguments);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "b741cad05c269b864e1830336c9b7e059306cec4", "filename": "tests/ui/offset-of/offset-of-dst-field.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -0,0 +1,14 @@\n+#![feature(offset_of)]\n+\n+use std::mem::offset_of;\n+\n+#[repr(C)]\n+struct Foo {\n+    x: u8,\n+    y: u16,\n+    slice: [u8],\n+}\n+\n+fn main() {\n+    offset_of!(Foo, slice); //~ ERROR the size for values of type\n+}"}, {"sha": "a490f384da5622c2610477191cb6518e32b1a212", "filename": "tests/ui/offset-of/offset-of-dst-field.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/offset-of-dst-field.rs:13:5\n+   |\n+LL |     offset_of!(Foo, slice);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0291b7825cabc47cc4c89abf3aa6d7a0d4bf6c7b", "filename": "tests/ui/offset-of/offset-of-private.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Foffset-of%2Foffset-of-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Foffset-of%2Foffset-of-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-private.rs?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -0,0 +1,16 @@\n+#![feature(offset_of)]\n+\n+use std::mem::offset_of;\n+\n+mod m {\n+    #[repr(C)]\n+    pub struct Foo {\n+        pub public: u8,\n+        private: u8,\n+    }\n+}\n+\n+fn main() {\n+    offset_of!(m::Foo, public);\n+    offset_of!(m::Foo, private); //~ ERROR field `private` of struct `Foo` is private\n+}"}, {"sha": "8a186dd5a02e7e862dc3a62f5bc638f98986d736", "filename": "tests/ui/offset-of/offset-of-private.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Foffset-of%2Foffset-of-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5/tests%2Fui%2Foffset-of%2Foffset-of-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-private.stderr?ref=511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "patch": "@@ -0,0 +1,9 @@\n+error[E0616]: field `private` of struct `Foo` is private\n+  --> $DIR/offset-of-private.rs:15:24\n+   |\n+LL |     offset_of!(m::Foo, private);\n+   |                        ^^^^^^^ private field\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0616`."}]}