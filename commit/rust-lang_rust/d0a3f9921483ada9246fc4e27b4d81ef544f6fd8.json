{"sha": "d0a3f9921483ada9246fc4e27b4d81ef544f6fd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYTNmOTkyMTQ4M2FkYTkyNDZmYzRlMjdiNGQ4MWVmNTQ0ZjZmZDg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-07T13:04:44Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-07T13:04:44Z"}, "message": "Introduce link module", "tree": {"sha": "7d909991093f362961fdb1aba6003cf8dde29a49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d909991093f362961fdb1aba6003cf8dde29a49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0a3f9921483ada9246fc4e27b4d81ef544f6fd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a3f9921483ada9246fc4e27b4d81ef544f6fd8", "html_url": "https://github.com/rust-lang/rust/commit/d0a3f9921483ada9246fc4e27b4d81ef544f6fd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0a3f9921483ada9246fc4e27b4d81ef544f6fd8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b76af209587ac366351c9eb470c609c4e9cf065", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b76af209587ac366351c9eb470c609c4e9cf065", "html_url": "https://github.com/rust-lang/rust/commit/0b76af209587ac366351c9eb470c609c4e9cf065"}], "stats": {"total": 152, "additions": 80, "deletions": 72}, "files": [{"sha": "912184dd8f38ae29828a125c305bc89151a1e64d", "filename": "src/lib.rs", "status": "modified", "additions": 13, "deletions": 72, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d0a3f9921483ada9246fc4e27b4d81ef544f6fd8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a3f9921483ada9246fc4e27b4d81ef544f6fd8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d0a3f9921483ada9246fc4e27b4d81ef544f6fd8", "patch": "@@ -30,7 +30,6 @@ extern crate cranelift_simplejit;\n extern crate target_lexicon;\n \n use std::any::Any;\n-use std::fs::File;\n use std::sync::mpsc;\n \n use rustc::dep_graph::DepGraph;\n@@ -59,6 +58,7 @@ mod base;\n mod common;\n mod constant;\n mod intrinsics;\n+mod link;\n mod main_shim;\n mod metadata;\n mod pretty_clif;\n@@ -119,8 +119,8 @@ impl<'tcx> Caches<'tcx> {\n \n struct CraneliftCodegenBackend;\n \n-struct OngoingCodegen {\n-    product: cranelift_faerie::FaerieProduct,\n+struct CodegenResult {\n+    artifact: faerie::Artifact,\n     metadata: Vec<u8>,\n     crate_name: Symbol,\n }\n@@ -238,8 +238,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n             faerie_module.finalize_definitions();\n \n-            return Box::new(OngoingCodegen {\n-                product: faerie_module.finish(),\n+            return Box::new(CodegenResult {\n+                artifact: faerie_module.finish().artifact,\n                 metadata: metadata.raw_data,\n                 crate_name: tcx.crate_name(LOCAL_CRATE),\n             });\n@@ -248,80 +248,21 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n     fn join_codegen_and_link(\n         &self,\n-        ongoing_codegen: Box<Any>,\n+        res: Box<Any>,\n         sess: &Session,\n         _dep_graph: &DepGraph,\n         outputs: &OutputFilenames,\n     ) -> Result<(), CompileIncomplete> {\n-        let ongoing_codegen = *ongoing_codegen\n-            .downcast::<OngoingCodegen>()\n-            .expect(\"Expected CraneliftCodegenBackend's OngoingCodegen, found Box<Any>\");\n-\n-        let artifact = ongoing_codegen.product.artifact;\n-        let metadata = ongoing_codegen.metadata;\n-\n-        /*\n-        artifact\n-            .declare_with(\n-                &metadata_name,\n-                faerie::artifact::Decl::Data {\n-                    global: true,\n-                    writable: false,\n-                },\n-                metadata.clone(),\n-            )\n-            .unwrap();\n-        */\n+        let res = *res\n+            .downcast::<CodegenResult>()\n+            .expect(\"Expected CraneliftCodegenBackend's CodegenResult, found Box<Any>\");\n \n         for &crate_type in sess.opts.crate_types.iter() {\n+            let output_name =\n+                out_filename(sess, crate_type, &outputs, &res.crate_name.as_str());\n             match crate_type {\n-                // TODO: link executable\n-                CrateType::Executable | CrateType::Rlib => {\n-                    let output_name = out_filename(\n-                        sess,\n-                        crate_type,\n-                        &outputs,\n-                        &ongoing_codegen.crate_name.as_str(),\n-                    );\n-                    let file = File::create(&output_name).unwrap();\n-                    let mut builder = ar::Builder::new(file);\n-\n-                    // Add main object file\n-                    let obj = artifact.emit().unwrap();\n-                    builder\n-                        .append(\n-                            &ar::Header::new(b\"data.o\".to_vec(), obj.len() as u64),\n-                            ::std::io::Cursor::new(obj),\n-                        )\n-                        .unwrap();\n-\n-                    // Non object files need to be added after object files, because ranlib will\n-                    // try to read the native architecture from the first file, even if it isn't\n-                    // an object file\n-                    if crate_type != CrateType::Executable {\n-                        builder\n-                            .append(\n-                                &ar::Header::new(\n-                                    metadata::METADATA_FILE.to_vec(),\n-                                    metadata.len() as u64,\n-                                ),\n-                                ::std::io::Cursor::new(metadata.clone()),\n-                            )\n-                            .unwrap();\n-                    }\n-\n-                    // Finalize archive\n-                    std::mem::drop(builder);\n-\n-                    // Run ranlib to be able to link the archive\n-                    let status = std::process::Command::new(\"ranlib\")\n-                        .arg(output_name)\n-                        .status()\n-                        .expect(\"Couldn't run ranlib\");\n-                    if !status.success() {\n-                        sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));\n-                    }\n-                }\n+                CrateType::Rlib => link::link_rlib(sess, &res, output_name),\n+                CrateType::Executable => link::link_bin(sess, &res, output_name),\n                 _ => sess.fatal(&format!(\"Unsupported crate type: {:?}\", crate_type)),\n             }\n         }"}, {"sha": "822c908da42b3e512aeb97b953972d15e024462a", "filename": "src/link.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d0a3f9921483ada9246fc4e27b4d81ef544f6fd8/src%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a3f9921483ada9246fc4e27b4d81ef544f6fd8/src%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink.rs?ref=d0a3f9921483ada9246fc4e27b4d81ef544f6fd8", "patch": "@@ -0,0 +1,67 @@\n+use std::fs::File;\n+use std::path::PathBuf;\n+\n+use rustc::session::Session;\n+\n+pub(crate) fn link_rlib(\n+    sess: &Session,\n+    res: &crate::CodegenResult,\n+    output_name: PathBuf,\n+) {\n+    let file = File::create(&output_name).unwrap();\n+    let mut builder = ar::Builder::new(file);\n+\n+    // Add main object file\n+    let obj = res.artifact.emit().unwrap();\n+    builder\n+        .append(\n+            &ar::Header::new(b\"data.o\".to_vec(), obj.len() as u64),\n+            ::std::io::Cursor::new(obj),\n+        )\n+        .unwrap();\n+\n+    // Non object files need to be added after object files, because ranlib will\n+    // try to read the native architecture from the first file, even if it isn't\n+    // an object file\n+    builder\n+        .append(\n+            &ar::Header::new(\n+                crate::metadata::METADATA_FILE.to_vec(),\n+                res.metadata.len() as u64,\n+            ),\n+            ::std::io::Cursor::new(res.metadata.clone()),\n+        )\n+        .unwrap();\n+\n+    // Finalize archive\n+    std::mem::drop(builder);\n+\n+    // Run ranlib to be able to link the archive\n+    let status = std::process::Command::new(\"ranlib\")\n+        .arg(output_name)\n+        .status()\n+        .expect(\"Couldn't run ranlib\");\n+    if !status.success() {\n+        sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));\n+    }\n+}\n+\n+pub(crate) fn link_bin(sess: &Session, res: &crate::CodegenResult, output_name: PathBuf) {\n+    // TODO: link executable\n+    let obj = res.artifact.emit().unwrap();\n+    std::fs::write(output_name, obj).unwrap();\n+}\n+\n+\n+/*\n+res.artifact\n+    .declare_with(\n+        &metadata_name,\n+        faerie::artifact::Decl::Data {\n+            global: true,\n+            writable: false,\n+        },\n+        res.metadata.clone(),\n+    )\n+    .unwrap();\n+*/"}]}