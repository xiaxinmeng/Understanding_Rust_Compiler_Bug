{"sha": "a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNTQxYWFjZDZiNDRhZTJiZDkwY2JhYTBhMGM0ZjRiY2Q0YTYyZDE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-21T09:56:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-21T09:56:10Z"}, "message": "bump rust", "tree": {"sha": "071929275d3ce280432172a1067d98fb289ebc74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071929275d3ce280432172a1067d98fb289ebc74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1", "html_url": "https://github.com/rust-lang/rust/commit/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "619d29aea6cbcaa06087cc08cd437fe21006cb8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/619d29aea6cbcaa06087cc08cd437fe21006cb8b", "html_url": "https://github.com/rust-lang/rust/commit/619d29aea6cbcaa06087cc08cd437fe21006cb8b"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "b247139d09b3657b355c148ead2438c64dfc99e5", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1", "patch": "@@ -1 +1 @@\n-527dce7137f7a3c7bf47d9a503abf25f88ea22de\n+1301422a6c2e8916560b8cc2f0564f38d8858a75"}, {"sha": "cde4da833e6caa75c9b96b0449f8a7b6fdc58c77", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1", "patch": "@@ -7,12 +7,11 @@ use syntax::source_map::DUMMY_SP;\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::layout::{LayoutOf, Size, Align};\n use rustc::hir::def_id::DefId;\n-use rustc::mir;\n \n use crate::{\n     InterpResult, InterpError, InterpCx, StackPopCleanup, struct_error,\n     Scalar, Tag, Pointer, FnVal,\n-    MemoryExtra, MiriMemoryKind, Evaluator, TlsEvalContextExt,\n+    MemoryExtra, MiriMemoryKind, Evaluator, TlsEvalContextExt, HelpersEvalContextExt,\n };\n \n /// Configuration needed to spawn a Miri instance.\n@@ -85,11 +84,11 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n \n     // First argument: pointer to `main()`.\n     let main_ptr = ecx.memory_mut().create_fn_alloc(FnVal::Instance(main_instance));\n-    let dest = ecx.eval_place(&mir::Place::Base(mir::PlaceBase::Local(args.next().unwrap())))?;\n+    let dest = ecx.local_place(args.next().unwrap())?;\n     ecx.write_scalar(Scalar::Ptr(main_ptr), dest)?;\n \n     // Second argument (argc): `1`.\n-    let dest = ecx.eval_place(&mir::Place::Base(mir::PlaceBase::Local(args.next().unwrap())))?;\n+    let dest = ecx.local_place(args.next().unwrap())?;\n     let argc = Scalar::from_uint(config.args.len() as u128, dest.layout.size);\n     ecx.write_scalar(argc, dest)?;\n     // Store argc for macOS's `_NSGetArgc`.\n@@ -100,7 +99,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     }\n \n     // Third argument (`argv`): created from `config.args`.\n-    let dest = ecx.eval_place(&mir::Place::Base(mir::PlaceBase::Local(args.next().unwrap())))?;\n+    let dest = ecx.local_place(args.next().unwrap())?;\n     // For Windows, construct a command string with all the aguments.\n     let mut cmd = String::new();\n     for arg in config.args.iter() {"}, {"sha": "19abbd6b8193bba2d440efef6a7fa0a53912c9b3", "filename": "src/helpers.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1", "patch": "@@ -2,6 +2,7 @@ use std::mem;\n \n use rustc::ty::{self, layout::{self, Size, Align}};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc::mir;\n \n use rand::RngCore;\n \n@@ -67,6 +68,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         })\n     }\n \n+    /// Get the `Place` for a local\n+    fn local_place(&mut self, local: mir::Local) -> InterpResult<'tcx, PlaceTy<'tcx, Tag>> {\n+        let this = self.eval_context_mut();\n+        let place = mir::Place { base: mir::PlaceBase::Local(local), projection: None };\n+        this.eval_place(&place)\n+    }\n+\n     /// Generate some random bytes, and write them to `dest`.\n     fn gen_random(\n         &mut self,"}, {"sha": "c2e78024105da965a9762c18eb2ffaeef12fba8b", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1", "patch": "@@ -214,12 +214,12 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n         // First argument: `size`.\n         // (`0` is allowed here -- this is expected to be handled by the lang item).\n-        let arg = ecx.eval_place(&mir::Place::Base(mir::PlaceBase::Local(args.next().unwrap())))?;\n+        let arg = ecx.local_place(args.next().unwrap())?;\n         let size = layout.size.bytes();\n         ecx.write_scalar(Scalar::from_uint(size, arg.layout.size), arg)?;\n \n         // Second argument: `align`.\n-        let arg = ecx.eval_place(&mir::Place::Base(mir::PlaceBase::Local(args.next().unwrap())))?;\n+        let arg = ecx.local_place(args.next().unwrap())?;\n         let align = layout.align.abi.bytes();\n         ecx.write_scalar(Scalar::from_uint(align, arg.layout.size), arg)?;\n "}, {"sha": "1deaf521ca66fe63dfb166b03082f6eb7b19fbe0", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1", "patch": "@@ -365,7 +365,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             .to_owned(),\n                     ),\n                 )?;\n-                let arg_dest = this.eval_place(&mir::Place::Base(mir::PlaceBase::Local(arg_local)))?;\n+                let arg_dest = this.local_place(arg_local)?;\n                 this.write_scalar(data, arg_dest)?;\n \n                 assert!(args.next().is_none(), \"__rust_maybe_catch_panic argument has more arguments than expected\");"}, {"sha": "abe6dd958693c79396504d082e80e364ae109aea", "filename": "src/shims/tls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=a2541aacd6b44ae2bd90cbaa0a0c4f4bcd4a62d1", "patch": "@@ -3,7 +3,7 @@\n use std::collections::BTreeMap;\n \n use rustc_target::abi::LayoutOf;\n-use rustc::{ty, ty::layout::HasDataLayout, mir};\n+use rustc::{ty, ty::layout::HasDataLayout};\n \n use crate::{\n     InterpResult, InterpError, StackPopCleanup,\n@@ -160,7 +160,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let arg_local = this.frame().body.args_iter().next().ok_or_else(\n                 || InterpError::AbiViolation(\"TLS dtor does not take enough arguments.\".to_owned()),\n             )?;\n-            let dest = this.eval_place(&mir::Place::Base(mir::PlaceBase::Local(arg_local)))?;\n+            let dest = this.local_place(arg_local)?;\n             this.write_scalar(ptr, dest)?;\n \n             // step until out of stackframes"}]}