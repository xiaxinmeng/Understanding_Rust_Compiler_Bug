{"sha": "aaaad5b46bd90047fce43672d7848c6c75ceea35", "node_id": "C_kwDOAAsO6NoAKGFhYWFkNWI0NmJkOTAwNDdmY2U0MzY3MmQ3ODQ4YzZjNzVjZWVhMzU", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-21T05:23:59Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-21T05:25:43Z"}, "message": "Fix bad caching of `~const Drop` bounds", "tree": {"sha": "4f825fdfa51633e57603e083c44437e38eabcf7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f825fdfa51633e57603e083c44437e38eabcf7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaaad5b46bd90047fce43672d7848c6c75ceea35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmHBZVcACgkQbQF6ltjm\nwvn6/RAAr4aV1Ri8sv3Yy7xupUiYv1Auz8CM/YU/vi6udk60xVUKc2KjTTj2O1Vz\nXCj1Vfl5Ddp5UbtN6usaae2dPDaF4RlTvY3i3wHOLqcXDjPl9VvFP3jVCM5qtcOa\nNgFgop1Ttvfv6bVw2AI1d8511XnSt4UUSVB7Pm06gPXjZ9S2GbG1R7gnmDlqK1t1\nHclKCmK8IjtUy/9FH3PX0N5dG8JSYOrIsIv1GNm0Jmkpc9el6t006V8LZI6pTcn8\nb+7YKVeiPStD5hvj0G+cx2GJm55nC4Q4zrpJuVbwh4X3Ne19LPdviKbzXHcHPY0g\n4DjbY8YOYJzQsJEuC6GJtNj0uGlyUPxEvBrGuzTqDknpEzq6UkojHPdrGbLUhecy\nJTwi32LtQXlJoObk59lIHMnulbkjPM+n3C46I+skMmzZGJ2mrujyI5/6i/ymYpqp\ndW8Wlw2pBdNV19qz4EgCCsf3lM2sw8EWVIXK13XDJyl5kfZ0jz8qe2Fn+rRntMTT\n2gLFGKUUG1Y+hlIn/y3Xc6IAA8b7I7/36OxjFtvnM1zJGnb1+9VkRG7qPWOkicXK\nWlCii8KGX8dLmf+m4FQNAJOb1encsgPRnWzwqb2NbdSstKlED8AWwFN2qHq8reiD\nYUCl82/Afw0jQw1a9mDBi9B6NhVBiK60213llDWkSlBHWHHxObs=\n=WbEP\n-----END PGP SIGNATURE-----", "payload": "tree 4f825fdfa51633e57603e083c44437e38eabcf7a\nparent 99b0799608b670be5fd6d4303489689c3d52c99c\nauthor Deadbeef <ent3rm4n@gmail.com> 1640064239 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1640064343 +0800\n\nFix bad caching of `~const Drop` bounds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaaad5b46bd90047fce43672d7848c6c75ceea35", "html_url": "https://github.com/rust-lang/rust/commit/aaaad5b46bd90047fce43672d7848c6c75ceea35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaaad5b46bd90047fce43672d7848c6c75ceea35/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b0799608b670be5fd6d4303489689c3d52c99c", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b0799608b670be5fd6d4303489689c3d52c99c", "html_url": "https://github.com/rust-lang/rust/commit/99b0799608b670be5fd6d4303489689c3d52c99c"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "37d99766da9d244af6345dab9ecd3ea08edab14e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aaaad5b46bd90047fce43672d7848c6c75ceea35/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaad5b46bd90047fce43672d7848c6c75ceea35/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=aaaad5b46bd90047fce43672d7848c6c75ceea35", "patch": "@@ -734,6 +734,15 @@ pub struct TraitPredicate<'tcx> {\n pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;\n \n impl<'tcx> TraitPredicate<'tcx> {\n+    pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {\n+        if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {\n+            // remap without changing constness of this predicate.\n+            // this is because `T: ~const Drop` has a different meaning to `T: Drop`\n+            param_env.remap_constness_with(self.constness)\n+        } else {\n+            *param_env = param_env.with_constness(self.constness.and(param_env.constness()))\n+        }\n+    }\n     pub fn def_id(self) -> DefId {\n         self.trait_ref.def_id\n     }"}, {"sha": "fa88c8ee37015f6db0e08f86c37141d16246f0b4", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aaaad5b46bd90047fce43672d7848c6c75ceea35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaad5b46bd90047fce43672d7848c6c75ceea35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=aaaad5b46bd90047fce43672d7848c6c75ceea35", "patch": "@@ -730,7 +730,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let mut param_env = obligation.param_env;\n \n         fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {\n-            param_env = param_env.with_constness(pred.constness.and(param_env.constness()));\n+            pred.remap_constness(self.tcx(), &mut param_env);\n             pred\n         });\n \n@@ -1269,7 +1269,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n         let tcx = self.tcx();\n         let mut pred = cache_fresh_trait_pred.skip_binder();\n-        param_env = param_env.with_constness(pred.constness.and(param_env.constness()));\n+        pred.remap_constness(tcx, &mut param_env);\n \n         if self.can_use_global_caches(param_env) {\n             if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {\n@@ -1322,7 +1322,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tcx = self.tcx();\n         let mut pred = cache_fresh_trait_pred.skip_binder();\n \n-        param_env = param_env.with_constness(pred.constness.and(param_env.constness()));\n+        pred.remap_constness(tcx, &mut param_env);\n \n         if !self.can_cache_candidate(&candidate) {\n             debug!(?pred, ?candidate, \"insert_candidate_cache - candidate is not cacheable\");"}, {"sha": "d30f4edd4b25c982062efdaa5b9ba73da894af09", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-92111.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aaaad5b46bd90047fce43672d7848c6c75ceea35/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92111.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaad5b46bd90047fce43672d7848c6c75ceea35/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92111.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92111.rs?ref=aaaad5b46bd90047fce43672d7848c6c75ceea35", "patch": "@@ -0,0 +1,29 @@\n+// Regression test for #92111.\n+//\n+// The issue was that we normalize trait bounds before caching\n+// results of selection. Checking that `impl NoDrop for S` requires\n+// checking `S: !Drop` because it cannot overlap with the blanket\n+// impl. Then we save the (unsatisfied) result from checking `S: Drop`.\n+// Then the call to `a` checks whether `S: ~const Drop` but we normalize\n+// it to `S: Drop` which the cache claims to be unsatisfied.\n+//\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+\n+pub trait Tr {}\n+\n+#[allow(drop_bounds)]\n+impl<T: Drop> Tr for T {}\n+\n+#[derive(Debug)]\n+pub struct S(i32);\n+\n+impl Tr for S {}\n+\n+const fn a<T: ~const Drop>(t: T) {}\n+\n+fn main() {\n+    a(S(0));\n+}"}]}