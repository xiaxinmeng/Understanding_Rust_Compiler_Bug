{"sha": "d7b2c70a1335b866a26b63bcf13da67328b0cf3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YjJjNzBhMTMzNWI4NjZhMjZiNjNiY2YxM2RhNjczMjhiMGNmM2M=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-10-06T04:38:27Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-10-06T04:49:11Z"}, "message": "rustpkg: Fix fetching remote packages\n\nCloses #9193", "tree": {"sha": "0bcf6a1c9b16b8f598465677397f5a8231fdf383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bcf6a1c9b16b8f598465677397f5a8231fdf383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7b2c70a1335b866a26b63bcf13da67328b0cf3c", "comment_count": 12, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b2c70a1335b866a26b63bcf13da67328b0cf3c", "html_url": "https://github.com/rust-lang/rust/commit/d7b2c70a1335b866a26b63bcf13da67328b0cf3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7b2c70a1335b866a26b63bcf13da67328b0cf3c/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0114ab631dadaa05f04b5bad89cfc08e673b8c4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0114ab631dadaa05f04b5bad89cfc08e673b8c4f", "html_url": "https://github.com/rust-lang/rust/commit/0114ab631dadaa05f04b5bad89cfc08e673b8c4f"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "78b5321ae13e6fd4c34bba6a2b66fd3511616d94", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d7b2c70a1335b866a26b63bcf13da67328b0cf3c/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b2c70a1335b866a26b63bcf13da67328b0cf3c/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=d7b2c70a1335b866a26b63bcf13da67328b0cf3c", "patch": "@@ -27,10 +27,8 @@ use context::{in_target, StopBefore, Link, Assemble, BuildContext};\n use package_id::PkgId;\n use package_source::PkgSrc;\n use workspace::pkg_parent_workspaces;\n-use path_util::{installed_library_in_workspace, U_RWX, rust_path, system_library, target_build_dir};\n-use messages::error;\n-use conditions::nonexistent_package::cond;\n-\n+use path_util::{installed_library_in_workspace, U_RWX, system_library, target_build_dir};\n+use path_util::default_workspace;\n pub use target::{OutputType, Main, Lib, Bench, Test, JustOne, lib_name_of, lib_crate_filename};\n use workcache_support::{digest_file_with_date, digest_only_date};\n \n@@ -432,26 +430,26 @@ impl<'self> Visitor<()> for ViewItemVisitor<'self> {\n                                lib_name.to_str());\n                         // Try to install it\n                         let pkg_id = PkgId::new(lib_name);\n+                        // Find all the workspaces in the RUST_PATH that contain this package.\n                         let workspaces = pkg_parent_workspaces(&self.context.context,\n                                                                &pkg_id);\n-                        let source_workspace = if workspaces.is_empty() {\n-                            error(format!(\"Couldn't find package {} \\\n-                                       in any of the workspaces in the RUST_PATH ({})\",\n-                                       lib_name,\n-                                       rust_path().map(|s| s.to_str()).connect(\":\")));\n-                            cond.raise((pkg_id.clone(), ~\"Dependency not found\"))\n-                        }\n-                            else {\n-                            workspaces[0]\n-                        };\n+                        // Two cases:\n+                        // (a) `workspaces` is empty. That means there's no local source\n+                        // for this package. In that case, we pass the default workspace\n+                        // into `PkgSrc::new`, so that if it exists as a remote repository,\n+                        // its sources will be fetched into it.\n+                        // (b) `workspaces` is non-empty -- we found a local source for this\n+                        // package.\n+                        let dest_workspace = if workspaces.is_empty() {\n+                            default_workspace()\n+                        } else { workspaces[0] };\n+                        let pkg_src = PkgSrc::new(dest_workspace,\n+                        // Use the rust_path_hack to search for dependencies iff\n+                        // we were already using it\n+                                                  self.context.context.use_rust_path_hack,\n+                                                  pkg_id);\n                         let (outputs_disc, inputs_disc) =\n-                            self.context.install(PkgSrc::new(source_workspace.clone(),\n-                            // Use the rust_path_hack to search for dependencies iff\n-                            // we were already using it\n-                            self.context.context.use_rust_path_hack,\n-                                                             pkg_id),\n-                                                 &JustOne(Path(\n-                                    lib_crate_filename)));\n+                            self.context.install(pkg_src, &JustOne(Path(lib_crate_filename)));\n                         debug2!(\"Installed {}, returned {:?} dependencies and \\\n                                {:?} transitive dependencies\",\n                                lib_name, outputs_disc.len(), inputs_disc.len());"}]}