{"sha": "11b937177bbad6afcffebefd7cd81934ae6b0baa", "node_id": "C_kwDOAAsO6NoAKDExYjkzNzE3N2JiYWQ2YWZjZmZlYmVmZDdjZDgxOTM0YWU2YjBiYWE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-06-01T15:58:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-06-01T15:58:08Z"}, "message": "Skip extern prelude path resolution in block def maps", "tree": {"sha": "bb47b1eff17e1cc9a6a6b3fc375efd46c1b293da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb47b1eff17e1cc9a6a6b3fc375efd46c1b293da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11b937177bbad6afcffebefd7cd81934ae6b0baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11b937177bbad6afcffebefd7cd81934ae6b0baa", "html_url": "https://github.com/rust-lang/rust/commit/11b937177bbad6afcffebefd7cd81934ae6b0baa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11b937177bbad6afcffebefd7cd81934ae6b0baa/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54e3ef658a83dea6a9af282627496114df6dd641", "url": "https://api.github.com/repos/rust-lang/rust/commits/54e3ef658a83dea6a9af282627496114df6dd641", "html_url": "https://github.com/rust-lang/rust/commit/54e3ef658a83dea6a9af282627496114df6dd641"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "e8cc2eab4617ef5ac1d7d10c54abc27c62d8cf79", "filename": "crates/hir-def/src/find_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11b937177bbad6afcffebefd7cd81934ae6b0baa/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b937177bbad6afcffebefd7cd81934ae6b0baa/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ffind_path.rs?ref=11b937177bbad6afcffebefd7cd81934ae6b0baa", "patch": "@@ -81,7 +81,7 @@ fn find_path_inner(\n     }\n \n     let def_map = from.def_map(db);\n-    let crate_root = def_map.crate_root(db);\n+    let crate_root = def_map.crate_root();\n     // - if the item is a module, jump straight to module search\n     if let ItemInNs::Types(ModuleDefId::ModuleId(module_id)) = item {\n         let mut visited_modules = FxHashSet::default();\n@@ -454,7 +454,7 @@ fn find_local_import_locations(\n         worklist.push(ancestor);\n     }\n \n-    let def_map = def_map.crate_root(db).def_map(db);\n+    let def_map = def_map.crate_root().def_map(db);\n \n     let mut seen: FxHashSet<_> = FxHashSet::default();\n "}, {"sha": "9b520bc3030f021f0e8d7365590c3199db17e58e", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11b937177bbad6afcffebefd7cd81934ae6b0baa/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b937177bbad6afcffebefd7cd81934ae6b0baa/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=11b937177bbad6afcffebefd7cd81934ae6b0baa", "patch": "@@ -431,15 +431,8 @@ impl DefMap {\n         ModuleId { krate: self.krate, local_id, block }\n     }\n \n-    pub(crate) fn crate_root(&self, db: &dyn DefDatabase) -> ModuleId {\n-        self.with_ancestor_maps(db, Self::ROOT, &mut |def_map, _module| {\n-            if def_map.block.is_none() {\n-                Some(def_map.module_id(Self::ROOT))\n-            } else {\n-                None\n-            }\n-        })\n-        .expect(\"DefMap chain without root\")\n+    pub(crate) fn crate_root(&self) -> ModuleId {\n+        ModuleId { krate: self.krate, block: None, local_id: DefMap::ROOT }\n     }\n \n     pub(crate) fn resolve_path("}, {"sha": "06542b4b1e99960c472fd7e053a50f1332af35d4", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11b937177bbad6afcffebefd7cd81934ae6b0baa/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b937177bbad6afcffebefd7cd81934ae6b0baa/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=11b937177bbad6afcffebefd7cd81934ae6b0baa", "patch": "@@ -834,11 +834,7 @@ impl DefCollector<'_> {\n     fn resolve_extern_crate(&self, name: &Name) -> Option<ModuleId> {\n         if *name == name!(self) {\n             cov_mark::hit!(extern_crate_self_as);\n-            let root = match self.def_map.block {\n-                Some(_) => self.def_map.crate_root(self.db),\n-                None => self.def_map.module_id(DefMap::ROOT),\n-            };\n-            Some(root)\n+            Some(self.def_map.crate_root())\n         } else {\n             self.deps.get(name).map(|dep| ModuleId {\n                 krate: dep.crate_id,"}, {"sha": "5f6163175a7268120097fcf81ba870b4f217d4a9", "filename": "crates/hir-def/src/nameres/path_resolution.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11b937177bbad6afcffebefd7cd81934ae6b0baa/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b937177bbad6afcffebefd7cd81934ae6b0baa/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=11b937177bbad6afcffebefd7cd81934ae6b0baa", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n-    AdtId, CrateId, EnumVariantId, LocalModuleId, ModuleDefId, ModuleId,\n+    AdtId, CrateId, EnumVariantId, LocalModuleId, ModuleDefId,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -74,17 +74,6 @@ impl PerNs {\n }\n \n impl DefMap {\n-    pub(super) fn resolve_name_in_extern_prelude(\n-        &self,\n-        db: &dyn DefDatabase,\n-        name: &Name,\n-    ) -> Option<ModuleId> {\n-        match self.block {\n-            Some(_) => self.crate_root(db).def_map(db).data.extern_prelude.get(name).copied(),\n-            None => self.data.extern_prelude.get(name).copied(),\n-        }\n-    }\n-\n     pub(crate) fn resolve_visibility(\n         &self,\n         db: &dyn DefDatabase,\n@@ -204,15 +193,15 @@ impl DefMap {\n             PathKind::DollarCrate(krate) => {\n                 if krate == self.krate {\n                     cov_mark::hit!(macro_dollar_crate_self);\n-                    PerNs::types(self.crate_root(db).into(), Visibility::Public)\n+                    PerNs::types(self.crate_root().into(), Visibility::Public)\n                 } else {\n                     let def_map = db.crate_def_map(krate);\n                     let module = def_map.module_id(Self::ROOT);\n                     cov_mark::hit!(macro_dollar_crate_other);\n                     PerNs::types(module.into(), Visibility::Public)\n                 }\n             }\n-            PathKind::Crate => PerNs::types(self.crate_root(db).into(), Visibility::Public),\n+            PathKind::Crate => PerNs::types(self.crate_root().into(), Visibility::Public),\n             // plain import or absolute path in 2015: crate-relative with\n             // fallback to extern prelude (with the simplification in\n             // rust-lang/rust#57745)\n@@ -453,6 +442,10 @@ impl DefMap {\n         };\n \n         let extern_prelude = || {\n+            if self.block.is_some() {\n+                // Don't resolve extern prelude in block `DefMap`s.\n+                return PerNs::none();\n+            }\n             self.data\n                 .extern_prelude\n                 .get(name)\n@@ -479,13 +472,20 @@ impl DefMap {\n     ) -> PerNs {\n         let from_crate_root = match self.block {\n             Some(_) => {\n-                let def_map = self.crate_root(db).def_map(db);\n+                let def_map = self.crate_root().def_map(db);\n                 def_map[Self::ROOT].scope.get(name)\n             }\n             None => self[Self::ROOT].scope.get(name),\n         };\n         let from_extern_prelude = || {\n-            self.resolve_name_in_extern_prelude(db, name)\n+            if self.block.is_some() {\n+                // Don't resolve extern prelude in block `DefMap`s.\n+                return PerNs::none();\n+            }\n+            self.data\n+                .extern_prelude\n+                .get(name)\n+                .copied()\n                 .map_or(PerNs::none(), |it| PerNs::types(it.into(), Visibility::Public))\n         };\n "}]}