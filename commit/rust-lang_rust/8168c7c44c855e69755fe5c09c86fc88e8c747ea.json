{"sha": "8168c7c44c855e69755fe5c09c86fc88e8c747ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjhjN2M0NGM4NTVlNjk3NTVmZTVjMDljODZmYzg4ZThjNzQ3ZWE=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-03-29T03:30:08Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-03-29T03:36:22Z"}, "message": "Use checked_next_power_of_two from std instead of custom method\n\nNB The custom method returned 0 on an input of 0, which is arguably\nincorrect: 0 is not a power of two; the method in `std` returns 1 in\nthat case.", "tree": {"sha": "96f828bd1c3c1ddfe8e72fcd7f1ca6a340837d4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96f828bd1c3c1ddfe8e72fcd7f1ca6a340837d4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8168c7c44c855e69755fe5c09c86fc88e8c747ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8168c7c44c855e69755fe5c09c86fc88e8c747ea", "html_url": "https://github.com/rust-lang/rust/commit/8168c7c44c855e69755fe5c09c86fc88e8c747ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8168c7c44c855e69755fe5c09c86fc88e8c747ea/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "652653374544237fda15e15bf2c351995eb8f4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/652653374544237fda15e15bf2c351995eb8f4c2", "html_url": "https://github.com/rust-lang/rust/commit/652653374544237fda15e15bf2c351995eb8f4c2"}], "stats": {"total": 40, "additions": 3, "deletions": 37}, "files": [{"sha": "d7e1fe763ef968f7295c17eba2c406a358469d4c", "filename": "src/string.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8168c7c44c855e69755fe5c09c86fc88e8c747ea/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8168c7c44c855e69755fe5c09c86fc88e8c747ea/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=8168c7c44c855e69755fe5c09c86fc88e8c747ea", "patch": "@@ -15,7 +15,6 @@ use regex::Regex;\n \n use Indent;\n use config::Config;\n-use utils::round_up_to_power_of_two;\n \n use MIN_STRING;\n \n@@ -41,7 +40,9 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n     let punctuation = \":,;.\";\n \n     let mut cur_start = 0;\n-    let mut result = String::with_capacity(round_up_to_power_of_two(stripped_str.len()));\n+    let mut result = String::with_capacity(stripped_str.len()\n+                                                       .checked_next_power_of_two()\n+                                                       .unwrap_or(usize::max_value()));\n     result.push_str(fmt.opener);\n \n     let ender_length = fmt.line_end.len();"}, {"sha": "902969b96186fa4ed2843d0e1e84472d634f5d94", "filename": "src/utils.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8168c7c44c855e69755fe5c09c86fc88e8c747ea/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8168c7c44c855e69755fe5c09c86fc88e8c747ea/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=8168c7c44c855e69755fe5c09c86fc88e8c747ea", "patch": "@@ -180,33 +180,6 @@ pub fn trim_newlines(input: &str) -> &str {\n     }\n }\n \n-#[inline]\n-#[cfg(target_pointer_width=\"64\")]\n-// Based on the trick layed out at\n-// http://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2\n-pub fn round_up_to_power_of_two(mut x: usize) -> usize {\n-    x = x.wrapping_sub(1);\n-    x |= x >> 1;\n-    x |= x >> 2;\n-    x |= x >> 4;\n-    x |= x >> 8;\n-    x |= x >> 16;\n-    x |= x >> 32;\n-    x.wrapping_add(1)\n-}\n-\n-#[inline]\n-#[cfg(target_pointer_width=\"32\")]\n-pub fn round_up_to_power_of_two(mut x: usize) -> usize {\n-    x = x.wrapping_sub(1);\n-    x |= x >> 1;\n-    x |= x >> 2;\n-    x |= x >> 4;\n-    x |= x >> 8;\n-    x |= x >> 16;\n-    x.wrapping_add(1)\n-}\n-\n // Macro for deriving implementations of Decodable for enums\n #[macro_export]\n macro_rules! impl_enum_decodable {\n@@ -344,11 +317,3 @@ fn bin_search_test() {\n     assert_eq!(Some(()), binary_search(4, 125, &closure));\n     assert_eq!(None, binary_search(6, 100, &closure));\n }\n-\n-#[test]\n-fn power_rounding() {\n-    assert_eq!(0, round_up_to_power_of_two(0));\n-    assert_eq!(1, round_up_to_power_of_two(1));\n-    assert_eq!(64, round_up_to_power_of_two(33));\n-    assert_eq!(256, round_up_to_power_of_two(256));\n-}"}]}