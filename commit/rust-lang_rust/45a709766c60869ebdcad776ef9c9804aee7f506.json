{"sha": "45a709766c60869ebdcad776ef9c9804aee7f506", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YTcwOTc2NmM2MDg2OWViZGNhZDc3NmVmOWM5ODA0YWVlN2Y1MDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-23T01:53:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-27T00:16:26Z"}, "message": "rustc: Begin eliminating ext's dependency on the session", "tree": {"sha": "525c1832c88b9a8144cdc39522b58a53fa72aa40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/525c1832c88b9a8144cdc39522b58a53fa72aa40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45a709766c60869ebdcad776ef9c9804aee7f506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45a709766c60869ebdcad776ef9c9804aee7f506", "html_url": "https://github.com/rust-lang/rust/commit/45a709766c60869ebdcad776ef9c9804aee7f506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45a709766c60869ebdcad776ef9c9804aee7f506/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a477aaba08dcb560163ffa940e34898c15d0eccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a477aaba08dcb560163ffa940e34898c15d0eccc", "html_url": "https://github.com/rust-lang/rust/commit/a477aaba08dcb560163ffa940e34898c15d0eccc"}], "stats": {"total": 121, "additions": 67, "deletions": 54}, "files": [{"sha": "42f24b79851382b9e0d1aa0edbf8634e01483338", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=45a709766c60869ebdcad776ef9c9804aee7f506", "patch": "@@ -953,25 +953,22 @@ fn new_parse_sess() -> parser::parse_sess {\n \n #[cfg(test)]\n iface fake_ext_ctxt {\n-    fn session() -> fake_session;\n+    fn cfg() -> ast::crate_cfg;\n+    fn parse_sess() -> parser::parse_sess;\n }\n \n #[cfg(test)]\n-type fake_options = {cfg: ast::crate_cfg};\n-\n-#[cfg(test)]\n-type fake_session = {opts: @fake_options,\n-                     parse_sess: parser::parse_sess};\n+type fake_session = ();\n \n #[cfg(test)]\n impl of fake_ext_ctxt for fake_session {\n-    fn session() -> fake_session {self}\n+    fn cfg() -> ast::crate_cfg { [] }\n+    fn parse_sess() -> parser::parse_sess { new_parse_sess() }\n }\n \n #[cfg(test)]\n fn mk_ctxt() -> fake_ext_ctxt {\n-    let opts : fake_options = {cfg: []};\n-    {opts: @opts, parse_sess: new_parse_sess()} as fake_ext_ctxt\n+    () as fake_ext_ctxt\n }\n \n #[cfg(test)]"}, {"sha": "defb1f7b13ce45696095d9dc192c357be89f361c", "filename": "src/rustc/syntax/ext/auto_serialize.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Frustc%2Fsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Frustc%2Fsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fext%2Fauto_serialize.rs?ref=45a709766c60869ebdcad776ef9c9804aee7f506", "patch": "@@ -70,7 +70,6 @@ node twice.\n \n */\n import base::*;\n-import driver::session::session;\n import codemap::span;\n import std::map;\n import std::map::hashmap;\n@@ -106,18 +105,16 @@ fn expand(cx: ext_ctxt,\n           }\n \n           _ {\n-            cx.session().span_err(span, \"#[auto_serialize] can only be \\\n-                                         applied to type and enum \\\n-                                         definitions\");\n+            cx.span_err(span, \"#[auto_serialize] can only be \\\n+                               applied to type and enum \\\n+                               definitions\");\n             [in_item]\n           }\n         }\n     }\n }\n \n impl helpers for ext_ctxt {\n-    fn next_id() -> ast::node_id { self.session().next_node_id() }\n-\n     fn helper_path(base_path: @ast::path,\n                    helper_name: str) -> @ast::path {\n         let head = vec::init(base_path.node.idents);\n@@ -347,7 +344,7 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n       }\n \n       ast::ty_bot {\n-        cx.session().span_err(\n+        cx.span_err(\n             ty.span, #fmt[\"Cannot serialize bottom type\"]);\n         []\n       }\n@@ -363,7 +360,7 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n       }\n \n       ast::ty_ptr(_) | ast::ty_rptr(_, _) {\n-        cx.session().span_err(\n+        cx.span_err(\n             ty.span, #fmt[\"Cannot serialize pointer types\"]);\n         []\n       }\n@@ -386,7 +383,7 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n       }\n \n       ast::ty_fn(_, _) {\n-        cx.session().span_err(\n+        cx.span_err(\n             ty.span, #fmt[\"Cannot serialize function types\"]);\n         []\n       }\n@@ -444,13 +441,13 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n       }\n \n       ast::ty_mac(_) {\n-        cx.session().span_err(\n+        cx.span_err(\n             ty.span, #fmt[\"Cannot serialize macro types\"]);\n         []\n       }\n \n       ast::ty_infer {\n-        cx.session().span_err(\n+        cx.span_err(\n             ty.span, #fmt[\"Cannot serialize inferred types\"]);\n         []\n       }"}, {"sha": "01da22e38a1620241310c3686d56a51e9d766b27", "filename": "src/rustc/syntax/ext/base.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Frustc%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Frustc%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fext%2Fbase.rs?ref=45a709766c60869ebdcad776ef9c9804aee7f506", "patch": "@@ -1,6 +1,7 @@\n import std::map::hashmap;\n-import driver::session::session;\n-import codemap::{span, expn_info, expanded_from};\n+import syntax::parse::parser;\n+import driver::diagnostic::span_handler;\n+import codemap::{codemap, span, expn_info, expanded_from};\n import std::map::str_hash;\n \n type syntax_expander_ =\n@@ -44,7 +45,10 @@ fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n }\n \n iface ext_ctxt {\n-    fn session() -> session;\n+    fn session() -> driver::session::session;\n+    fn codemap() -> codemap;\n+    fn parse_sess() -> parser::parse_sess;\n+    fn cfg() -> ast::crate_cfg;\n     fn print_backtrace();\n     fn backtrace() -> expn_info;\n     fn bt_push(ei: codemap::expn_info_);\n@@ -57,11 +61,18 @@ iface ext_ctxt {\n     fn next_id() -> ast::node_id;\n }\n \n-fn mk_ctxt(sess: session) -> ext_ctxt {\n-    type ctxt_repr = {sess: session,\n+fn mk_ctxt(session: driver::session::session,\n+           parse_sess: parser::parse_sess,\n+           cfg: ast::crate_cfg) -> ext_ctxt {\n+    type ctxt_repr = {session: driver::session::session,\n+                      parse_sess: parser::parse_sess,\n+                      cfg: ast::crate_cfg,\n                       mutable backtrace: expn_info};\n     impl of ext_ctxt for ctxt_repr {\n-        fn session() -> session { self.sess }\n+        fn session() -> driver::session::session { self.session }\n+        fn codemap() -> codemap { self.parse_sess.cm }\n+        fn parse_sess() -> parser::parse_sess { self.parse_sess }\n+        fn cfg() -> ast::crate_cfg { self.cfg }\n         fn print_backtrace() { }\n         fn backtrace() -> expn_info { self.backtrace }\n         fn bt_push(ei: codemap::expn_info_) {\n@@ -85,24 +96,34 @@ fn mk_ctxt(sess: session) -> ext_ctxt {\n         }\n         fn span_fatal(sp: span, msg: str) -> ! {\n             self.print_backtrace();\n-            self.sess.span_fatal(sp, msg);\n+            self.parse_sess.span_diagnostic.span_fatal(sp, msg);\n         }\n         fn span_err(sp: span, msg: str) {\n             self.print_backtrace();\n-            self.sess.span_err(sp, msg);\n+            self.parse_sess.span_diagnostic.span_err(sp, msg);\n         }\n         fn span_unimpl(sp: span, msg: str) -> ! {\n             self.print_backtrace();\n-            self.sess.span_unimpl(sp, msg);\n+            self.parse_sess.span_diagnostic.span_unimpl(sp, msg);\n         }\n         fn span_bug(sp: span, msg: str) -> ! {\n             self.print_backtrace();\n-            self.sess.span_bug(sp, msg);\n+            self.parse_sess.span_diagnostic.span_bug(sp, msg);\n+        }\n+        fn bug(msg: str) -> ! {\n+            self.print_backtrace();\n+            self.parse_sess.span_diagnostic.handler().bug(msg);\n+        }\n+        fn next_id() -> ast::node_id {\n+            ret parser::next_node_id(self.parse_sess);\n         }\n-        fn bug(msg: str) -> ! { self.print_backtrace(); self.sess.bug(msg); }\n-        fn next_id() -> ast::node_id { ret self.sess.next_node_id(); }\n     }\n-    let imp : ctxt_repr = {sess: sess, mutable backtrace: none};\n+    let imp : ctxt_repr = {\n+        session: session,\n+        parse_sess: parse_sess,\n+        cfg: cfg,\n+        mutable backtrace: none\n+    };\n     ret imp as ext_ctxt\n }\n "}, {"sha": "a1d2e3b4acbc525e032f1354b404bd233de9805f", "filename": "src/rustc/syntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Frustc%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Frustc%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fext%2Fexpand.rs?ref=45a709766c60869ebdcad776ef9c9804aee7f506", "patch": "@@ -122,7 +122,7 @@ fn core_macros() -> str {\n fn expand_crate(sess: session::session, c: @crate) -> @crate {\n     let exts = syntax_expander_table();\n     let afp = default_ast_fold();\n-    let cx: ext_ctxt = mk_ctxt(sess);\n+    let cx: ext_ctxt = mk_ctxt(sess, sess.parse_sess, sess.opts.cfg);\n     let f_pre =\n         {fold_expr: bind expand_expr(exts, cx, _, _, _, afp.fold_expr),\n          fold_mod: bind expand_mod_items(exts, cx, _, _, afp.fold_mod),"}, {"sha": "ce65d460f30fa6aae8422b484f9c69f2c34af5f6", "filename": "src/rustc/syntax/ext/qquote.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Frustc%2Fsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Frustc%2Fsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fext%2Fqquote.rs?ref=45a709766c60869ebdcad776ef9c9804aee7f506", "patch": "@@ -1,5 +1,3 @@\n-import driver::session;\n-\n import syntax::ast::{crate, expr_, mac_invoc,\n                      mac_aq, mac_var};\n import syntax::fold::*;\n@@ -191,13 +189,13 @@ fn finish<T: qq_helper>\n     (ecx: ext_ctxt, body: ast::mac_body_, f: fn (p: parser) -> T)\n     -> @ast::expr\n {\n-    let cm = ecx.session().parse_sess.cm;\n+    let cm = ecx.codemap();\n     let str = @codemap::span_to_snippet(body.span, cm);\n     #debug[\"qquote--str==%?\", str];\n     let fname = codemap::mk_substr_filename(cm, body.span);\n     let node = parse_from_source_str\n         (f, fname, codemap::fss_internal(body.span), str,\n-         ecx.session().opts.cfg, ecx.session().parse_sess);\n+         ecx.cfg(), ecx.parse_sess());\n     let loc = codemap::lookup_char_pos(cm, body.span.lo);\n \n     let sp = node.span();\n@@ -239,8 +237,13 @@ fn finish<T: qq_helper>\n     }\n \n     let cx = ecx;\n-    let session_call = {||\n-        mk_call_(cx, sp, mk_access(cx, sp, [\"ext_cx\"], \"session\"), [])\n+\n+    let cfg_call = {||\n+        mk_call_(cx, sp, mk_access(cx, sp, [\"ext_cx\"], \"cfg\"), [])\n+    };\n+\n+    let parse_sess_call = {||\n+        mk_call_(cx, sp, mk_access(cx, sp, [\"ext_cx\"], \"parse_sess\"), [])\n     };\n \n     let pcall = mk_call(cx,sp,\n@@ -255,10 +258,8 @@ fn finish<T: qq_helper>\n                                  mk_uint(cx,sp, loc.col)]),\n                         mk_unary(cx,sp, ast::box(ast::m_imm),\n                                  mk_str(cx,sp, str2)),\n-                        mk_access_(cx,sp,\n-                                   mk_access_(cx,sp, session_call(), \"opts\"),\n-                                   \"cfg\"),\n-                        mk_access_(cx,sp, session_call(), \"parse_sess\")]\n+                        cfg_call(),\n+                        parse_sess_call()]\n                       );\n     let mut rcall = pcall;\n     if (g_len > 0u) {"}, {"sha": "2223c5f0fd672a244742684a24527f4050b802dc", "filename": "src/rustc/syntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Frustc%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Frustc%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fext%2Fsimplext.rs?ref=45a709766c60869ebdcad776ef9c9804aee7f506", "patch": "@@ -2,7 +2,6 @@ use std;\n \n import codemap::span;\n import std::map::{hashmap, str_hash};\n-import driver::session::session;\n \n import base::*;\n \n@@ -478,7 +477,7 @@ fn p_t_s_rec(cx: ext_ctxt, m: matchable, s: selector, b: binders) {\n         }\n       }\n       _ {\n-          cx.session().bug(\"undocumented invariant in p_t_s_rec\");\n+          cx.bug(\"undocumented invariant in p_t_s_rec\");\n       }\n     }\n }"}, {"sha": "b1a95b9fff9a0a205d918f75cc2b7b0a68c601b2", "filename": "src/test/run-pass/qquote.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Ftest%2Frun-pass%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a709766c60869ebdcad776ef9c9804aee7f506/src%2Ftest%2Frun-pass%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fqquote.rs?ref=45a709766c60869ebdcad776ef9c9804aee7f506", "patch": "@@ -26,21 +26,19 @@ fn new_parse_sess() -> parser::parse_sess {\n }\n \n iface fake_ext_ctxt {\n-    fn session() -> fake_session;\n+    fn cfg() -> ast::crate_cfg;\n+    fn parse_sess() -> parser::parse_sess;\n }\n \n-type fake_options = {cfg: ast::crate_cfg};\n-\n-type fake_session = {opts: @fake_options,\n-                     parse_sess: parser::parse_sess};\n+type fake_session = ();\n \n impl of fake_ext_ctxt for fake_session {\n-    fn session() -> fake_session {self}\n+    fn cfg() -> ast::crate_cfg { [] }\n+    fn parse_sess() -> parser::parse_sess { new_parse_sess() }\n }\n \n fn mk_ctxt() -> fake_ext_ctxt {\n-    let opts : fake_options = {cfg: []};\n-    {opts: @opts, parse_sess: new_parse_sess()} as fake_ext_ctxt\n+    () as fake_ext_ctxt\n }\n \n "}]}