{"sha": "ee4392041073795f479365f34d40777eff69c378", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNDM5MjA0MTA3Mzc5NWY0NzkzNjVmMzRkNDA3NzdlZmY2OWMzNzg=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-13T04:43:13Z"}, "committer": {"name": "Jared Roesch", "email": "jroesch@MacBook.home", "date": "2015-07-26T02:57:58Z"}, "message": "Rebase fixes", "tree": {"sha": "edfce936e50e7088da7f9bb46454c2eac5cd3fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edfce936e50e7088da7f9bb46454c2eac5cd3fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee4392041073795f479365f34d40777eff69c378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee4392041073795f479365f34d40777eff69c378", "html_url": "https://github.com/rust-lang/rust/commit/ee4392041073795f479365f34d40777eff69c378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee4392041073795f479365f34d40777eff69c378/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e85787102fa6a7b27e1df845c07084f6a7d77fe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e85787102fa6a7b27e1df845c07084f6a7d77fe3", "html_url": "https://github.com/rust-lang/rust/commit/e85787102fa6a7b27e1df845c07084f6a7d77fe3"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "eaa5b6d58f8999f413d621792009e207f3cd4f60", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee4392041073795f479365f34d40777eff69c378/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee4392041073795f479365f34d40777eff69c378/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=ee4392041073795f479365f34d40777eff69c378", "patch": "@@ -73,7 +73,7 @@ pub struct InferCtxt<'a, 'tcx: 'a> {\n     // We instantiate UnificationTable with bounds<Ty> because the\n     // types that might instantiate a general type variable have an\n     // order, represented by its upper and lower bounds.\n-    pub type_variables: RefCell<type_variable::TypeVariableTable<'tcx>>,\n+    type_variables: RefCell<type_variable::TypeVariableTable<'tcx>>,\n \n     // Map from integral variable to the kind of integer it represents\n     int_unification_table: RefCell<UnificationTable<ty::IntVid>>,\n@@ -1366,19 +1366,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     pub fn report_conflicting_default_types(&self,\n-                                   span: Span,\n-                                   expected: type_variable::Default<'tcx>,\n-                                   actual: type_variable::Default<'tcx>) {\n+                                            span: Span,\n+                                            expected: type_variable::Default<'tcx>,\n+                                            actual: type_variable::Default<'tcx>) {\n         let trace = TypeTrace {\n             origin: Misc(span),\n-            values: Types(ty::expected_found {\n+            values: Types(ty::ExpectedFound {\n                 expected: expected.ty,\n                 found: actual.ty\n             })\n         };\n \n         self.report_and_explain_type_error(trace,\n-            &ty::type_err::terr_ty_param_default_mismatch(ty::expected_found {\n+            &TypeError::TyParamDefaultMismatch(ty::ExpectedFound {\n                 expected: expected,\n                 found: actual\n         }));"}, {"sha": "4945e0766e7578022ce82ab1ae6e0edb9c5c7e67", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee4392041073795f479365f34d40777eff69c378/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee4392041073795f479365f34d40777eff69c378/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ee4392041073795f479365f34d40777eff69c378", "patch": "@@ -2039,7 +2039,7 @@ pub struct ExpectedFound<T> {\n }\n \n // Data structures used in type unification\n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Debug)]\n pub enum TypeError<'tcx> {\n     Mismatch,\n     UnsafetyMismatch(ExpectedFound<ast::Unsafety>),\n@@ -2069,7 +2069,7 @@ pub enum TypeError<'tcx> {\n     ConvergenceMismatch(ExpectedFound<bool>),\n     ProjectionNameMismatched(ExpectedFound<ast::Name>),\n     ProjectionBoundsLength(ExpectedFound<usize>),\n-    TyParamDefaultMismatch(ExpectedFound<Ty<'tcx>>)\n+    TyParamDefaultMismatch(ExpectedFound<type_variable::Default<'tcx>>)\n }\n \n /// Bounds suitable for an existentially quantified type parameter\n@@ -5083,7 +5083,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                        values.expected,\n                        values.found)\n             },\n-            terr_ty_param_default_mismatch(ref values) => {\n+            TyParamDefaultMismatch(ref values) => {\n                 write!(f, \"conflicting type parameter defaults {} and {}\",\n                        values.expected.ty,\n                        values.found.ty)\n@@ -5445,7 +5445,7 @@ impl<'tcx> ctxt<'tcx> {\n                                   using it as a trait object\"));\n                 }\n             },\n-            terr_ty_param_default_mismatch(values) => {\n+            TyParamDefaultMismatch(values) => {\n                 let expected = values.expected;\n                 let found = values.found;\n                 self.sess.span_note(sp,"}, {"sha": "c9b10cec44a9754dfcc746f2f9f294308940b44d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee4392041073795f479365f34d40777eff69c378/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee4392041073795f479365f34d40777eff69c378/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ee4392041073795f479365f34d40777eff69c378", "patch": "@@ -1785,7 +1785,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // it had been solved by previously applying a default.\n \n             // We take a snapshot for use in error reporting.\n-            let snapshot = self.infcx().type_variables.borrow_mut().snapshot();\n+            let snapshot = self.infcx().start_snapshot();\n \n             for ty in &unbound_tyvars {\n                 if self.infcx().type_var_diverges(ty) {\n@@ -1815,10 +1815,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            // There were some errors to report\n+            // There are some errors to report\n             if conflicts.len() > 0 {\n-                self.infcx().type_variables.borrow_mut().rollback_to(snapshot);\n+                self.infcx().rollback_to(snapshot);\n \n+                // Loop through each conflicting default compute the conflict\n+                // and then report the error.\n                 for (conflict, default) in conflicts {\n                     let conflicting_default =\n                         self.find_conflicting_default(\n@@ -1836,7 +1838,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 default)\n                 }\n             } else {\n-                self.infcx().type_variables.borrow_mut().commit(snapshot)\n+                self.infcx().commit_from(snapshot)\n             }\n         }\n "}]}