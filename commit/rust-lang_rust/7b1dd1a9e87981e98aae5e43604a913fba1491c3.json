{"sha": "7b1dd1a9e87981e98aae5e43604a913fba1491c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMWRkMWE5ZTg3OTgxZTk4YWFlNWU0MzYwNGE5MTNmYmExNDkxYzM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-25T22:27:23Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T17:51:37Z"}, "message": "Access attrs directly from HirId in rustc_passes::check_attr.", "tree": {"sha": "6a9dddec987b27b5c30c6a982188cb146efbd043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a9dddec987b27b5c30c6a982188cb146efbd043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b1dd1a9e87981e98aae5e43604a913fba1491c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1dd1a9e87981e98aae5e43604a913fba1491c3", "html_url": "https://github.com/rust-lang/rust/commit/7b1dd1a9e87981e98aae5e43604a913fba1491c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b1dd1a9e87981e98aae5e43604a913fba1491c3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e16e1e815d2844cc59ed39ad608876ca7586c49", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e16e1e815d2844cc59ed39ad608876ca7586c49", "html_url": "https://github.com/rust-lang/rust/commit/7e16e1e815d2844cc59ed39ad608876ca7586c49"}], "stats": {"total": 63, "additions": 13, "deletions": 50}, "files": [{"sha": "c7b266f18bf8dd57138ea9e6e0caa2e21db9c7fe", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 13, "deletions": 50, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7b1dd1a9e87981e98aae5e43604a913fba1491c3/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1dd1a9e87981e98aae5e43604a913fba1491c3/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=7b1dd1a9e87981e98aae5e43604a913fba1491c3", "patch": "@@ -62,12 +62,12 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_attributes(\n         &self,\n         hir_id: HirId,\n-        attrs: &'hir [Attribute],\n         span: &Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) {\n         let mut is_valid = true;\n+        let attrs = self.tcx.hir().attrs(hir_id);\n         for attr in attrs {\n             is_valid &= if self.tcx.sess.check_name(attr, sym::inline) {\n                 self.check_inline(hir_id, attr, span, target)\n@@ -1213,61 +1213,36 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n         let target = Target::from_item(item);\n-        self.check_attributes(\n-            item.hir_id(),\n-            item.attrs,\n-            &item.span,\n-            target,\n-            Some(ItemLike::Item(item)),\n-        );\n+        self.check_attributes(item.hir_id(), &item.span, target, Some(ItemLike::Item(item)));\n         intravisit::walk_item(self, item)\n     }\n \n     fn visit_generic_param(&mut self, generic_param: &'tcx hir::GenericParam<'tcx>) {\n         let target = Target::from_generic_param(generic_param);\n-        self.check_attributes(\n-            generic_param.hir_id,\n-            generic_param.attrs,\n-            &generic_param.span,\n-            target,\n-            None,\n-        );\n+        self.check_attributes(generic_param.hir_id, &generic_param.span, target, None);\n         intravisit::walk_generic_param(self, generic_param)\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem<'tcx>) {\n         let target = Target::from_trait_item(trait_item);\n-        self.check_attributes(\n-            trait_item.hir_id(),\n-            &trait_item.attrs,\n-            &trait_item.span,\n-            target,\n-            None,\n-        );\n+        self.check_attributes(trait_item.hir_id(), &trait_item.span, target, None);\n         intravisit::walk_trait_item(self, trait_item)\n     }\n \n     fn visit_struct_field(&mut self, struct_field: &'tcx hir::StructField<'tcx>) {\n-        self.check_attributes(\n-            struct_field.hir_id,\n-            &struct_field.attrs,\n-            &struct_field.span,\n-            Target::Field,\n-            None,\n-        );\n+        self.check_attributes(struct_field.hir_id, &struct_field.span, Target::Field, None);\n         intravisit::walk_struct_field(self, struct_field);\n     }\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {\n-        self.check_attributes(arm.hir_id, &arm.attrs, &arm.span, Target::Arm, None);\n+        self.check_attributes(arm.hir_id, &arm.span, Target::Arm, None);\n         intravisit::walk_arm(self, arm);\n     }\n \n     fn visit_foreign_item(&mut self, f_item: &'tcx ForeignItem<'tcx>) {\n         let target = Target::from_foreign_item(f_item);\n         self.check_attributes(\n             f_item.hir_id(),\n-            &f_item.attrs,\n             &f_item.span,\n             target,\n             Some(ItemLike::ForeignItem(f_item)),\n@@ -1277,14 +1252,14 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         let target = target_from_impl_item(self.tcx, impl_item);\n-        self.check_attributes(impl_item.hir_id(), &impl_item.attrs, &impl_item.span, target, None);\n+        self.check_attributes(impl_item.hir_id(), &impl_item.span, target, None);\n         intravisit::walk_impl_item(self, impl_item)\n     }\n \n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {\n         // When checking statements ignore expressions, they will be checked later.\n         if let hir::StmtKind::Local(ref l) = stmt.kind {\n-            self.check_attributes(l.hir_id, &l.attrs, &stmt.span, Target::Statement, None);\n+            self.check_attributes(l.hir_id, &stmt.span, Target::Statement, None);\n         }\n         intravisit::walk_stmt(self, stmt)\n     }\n@@ -1295,7 +1270,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n             _ => Target::Expression,\n         };\n \n-        self.check_attributes(expr.hir_id, &expr.attrs, &expr.span, target, None);\n+        self.check_attributes(expr.hir_id, &expr.span, target, None);\n         intravisit::walk_expr(self, expr)\n     }\n \n@@ -1305,23 +1280,17 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         generics: &'tcx hir::Generics<'tcx>,\n         item_id: HirId,\n     ) {\n-        self.check_attributes(variant.id, variant.attrs, &variant.span, Target::Variant, None);\n+        self.check_attributes(variant.id, &variant.span, Target::Variant, None);\n         intravisit::walk_variant(self, variant, generics, item_id)\n     }\n \n     fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef<'tcx>) {\n-        self.check_attributes(\n-            macro_def.hir_id(),\n-            macro_def.attrs,\n-            &macro_def.span,\n-            Target::MacroDef,\n-            None,\n-        );\n+        self.check_attributes(macro_def.hir_id(), &macro_def.span, Target::MacroDef, None);\n         intravisit::walk_macro_def(self, macro_def);\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        self.check_attributes(param.hir_id, param.attrs, &param.span, Target::Param, None);\n+        self.check_attributes(param.hir_id, &param.span, Target::Param, None);\n \n         intravisit::walk_param(self, param);\n     }\n@@ -1389,13 +1358,7 @@ fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_exported_macros_in_krate(check_attr_visitor);\n     check_invalid_macro_level_attr(tcx, tcx.hir().krate().non_exported_macro_attrs);\n     if module_def_id.is_top_level_module() {\n-        check_attr_visitor.check_attributes(\n-            CRATE_HIR_ID,\n-            tcx.hir().krate_attrs(),\n-            &DUMMY_SP,\n-            Target::Mod,\n-            None,\n-        );\n+        check_attr_visitor.check_attributes(CRATE_HIR_ID, &DUMMY_SP, Target::Mod, None);\n         check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());\n     }\n }"}]}