{"sha": "4fd07a02a2bcbb8ff97df6d24112ee6204be362a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZDA3YTAyYTJiY2JiOGZmOTdkZjZkMjQxMTJlZTYyMDRiZTM2MmE=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-03-15T23:30:50Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-03-15T23:30:50Z"}, "message": "ra_ide: remove dead code in HoverResult", "tree": {"sha": "6ec88b175feadaa8694772d360939ab09e80057f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ec88b175feadaa8694772d360939ab09e80057f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fd07a02a2bcbb8ff97df6d24112ee6204be362a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd07a02a2bcbb8ff97df6d24112ee6204be362a", "html_url": "https://github.com/rust-lang/rust/commit/4fd07a02a2bcbb8ff97df6d24112ee6204be362a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fd07a02a2bcbb8ff97df6d24112ee6204be362a/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "html_url": "https://github.com/rust-lang/rust/commit/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd"}], "stats": {"total": 46, "additions": 5, "deletions": 41}, "files": [{"sha": "475ceadd1d399f8901d360638243a150fe85f7b1", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 5, "deletions": 41, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4fd07a02a2bcbb8ff97df6d24112ee6204be362a/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd07a02a2bcbb8ff97df6d24112ee6204be362a/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=4fd07a02a2bcbb8ff97df6d24112ee6204be362a", "patch": "@@ -1,4 +1,5 @@\n-//! FIXME: write short doc here\n+//! Logic for computing info that is displayed when the user hovers over any\n+//! source code items (e.g. function call, struct field, variable symbol...)\n \n use hir::{\n     Adt, AsAssocItem, AssocItemContainer, FieldSource, HasSource, HirDisplay, ModuleDef,\n@@ -24,35 +25,20 @@ use itertools::Itertools;\n use std::iter::once;\n \n /// Contains the results when hovering over an item\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Default)]\n pub struct HoverResult {\n     results: Vec<String>,\n-    exact: bool,\n-}\n-\n-impl Default for HoverResult {\n-    fn default() -> Self {\n-        HoverResult::new()\n-    }\n }\n \n impl HoverResult {\n     pub fn new() -> HoverResult {\n-        HoverResult {\n-            results: Vec::new(),\n-            // We assume exact by default\n-            exact: true,\n-        }\n+        Self::default()\n     }\n \n     pub fn extend(&mut self, item: Option<String>) {\n         self.results.extend(item);\n     }\n \n-    pub fn is_exact(&self) -> bool {\n-        self.exact\n-    }\n-\n     pub fn is_empty(&self) -> bool {\n         self.results.is_empty()\n     }\n@@ -72,20 +58,7 @@ impl HoverResult {\n     /// Returns the results converted into markup\n     /// for displaying in a UI\n     pub fn to_markup(&self) -> String {\n-        let mut markup = if !self.exact {\n-            let mut msg = String::from(\"Failed to exactly resolve the symbol. This is probably because rust_analyzer does not yet support traits.\");\n-            if !self.results.is_empty() {\n-                msg.push_str(\"  \\nThese items were found instead:\");\n-            }\n-            msg.push_str(\"\\n\\n---\\n\");\n-            msg\n-        } else {\n-            String::new()\n-        };\n-\n-        markup.push_str(&self.results.join(\"\\n\\n---\\n\"));\n-\n-        markup\n+        self.results.join(\"\\n\\n---\\n\")\n     }\n }\n \n@@ -595,7 +568,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"wrapper::Thing\\nfn new() -> Thing\"));\n-        assert_eq!(hover.info.is_exact(), true);\n     }\n \n     #[test]\n@@ -618,7 +590,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"const C: u32\"));\n-        assert_eq!(hover.info.is_exact(), true);\n     }\n \n     #[test]\n@@ -635,7 +606,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n-        assert_eq!(hover.info.is_exact(), true);\n \n         /* FIXME: revive these tests\n                 let (analysis, position) = single_file_with_position(\n@@ -651,7 +621,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n                 let hover = analysis.hover(position).unwrap().unwrap();\n                 assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n-                assert_eq!(hover.info.is_exact(), true);\n \n                 let (analysis, position) = single_file_with_position(\n                     \"\n@@ -665,7 +634,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 );\n                 let hover = analysis.hover(position).unwrap().unwrap();\n                 assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n-                assert_eq!(hover.info.is_exact(), true);\n \n                 let (analysis, position) = single_file_with_position(\n                     \"\n@@ -678,7 +646,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 );\n                 let hover = analysis.hover(position).unwrap().unwrap();\n                 assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n-                assert_eq!(hover.info.is_exact(), true);\n         */\n     }\n \n@@ -696,7 +663,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n-        assert_eq!(hover.info.is_exact(), true);\n     }\n \n     #[test]\n@@ -714,7 +680,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"macro_rules! foo\"));\n-        assert_eq!(hover.info.is_exact(), true);\n     }\n \n     #[test]\n@@ -726,7 +691,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n-        assert_eq!(hover.info.is_exact(), true);\n     }\n \n     #[test]"}]}