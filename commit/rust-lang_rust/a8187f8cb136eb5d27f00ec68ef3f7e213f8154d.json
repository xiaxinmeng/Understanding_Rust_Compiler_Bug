{"sha": "a8187f8cb136eb5d27f00ec68ef3f7e213f8154d", "node_id": "C_kwDOAAsO6NoAKGE4MTg3ZjhjYjEzNmViNWQyN2YwMGVjNjhlZjNmN2UyMTNmODE1NGQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-03T16:13:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-03T16:16:14Z"}, "message": "Rename hir_id to lint_root.", "tree": {"sha": "8bc4377d9cc8e667958f7ab00f2d9436f8bd33eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bc4377d9cc8e667958f7ab00f2d9436f8bd33eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8187f8cb136eb5d27f00ec68ef3f7e213f8154d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8187f8cb136eb5d27f00ec68ef3f7e213f8154d", "html_url": "https://github.com/rust-lang/rust/commit/a8187f8cb136eb5d27f00ec68ef3f7e213f8154d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8187f8cb136eb5d27f00ec68ef3f7e213f8154d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03a6ef67fe72c58d976c3e83ffab2296179ae8a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/03a6ef67fe72c58d976c3e83ffab2296179ae8a4", "html_url": "https://github.com/rust-lang/rust/commit/03a6ef67fe72c58d976c3e83ffab2296179ae8a4"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "54bcb2d62c4b096dd96a9138494ec583e831e8ff", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8187f8cb136eb5d27f00ec68ef3f7e213f8154d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8187f8cb136eb5d27f00ec68ef3f7e213f8154d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=a8187f8cb136eb5d27f00ec68ef3f7e213f8154d", "patch": "@@ -258,7 +258,7 @@ impl IntRange {\n         pcx: &PatCtxt<'_, 'p, 'tcx>,\n         pats: impl Iterator<Item = &'a DeconstructedPat<'p, 'tcx>>,\n         column_count: usize,\n-        hir_id: HirId,\n+        lint_root: HirId,\n     ) {\n         if self.is_singleton() {\n             return;\n@@ -290,7 +290,7 @@ impl IntRange {\n         if !overlap.is_empty() {\n             pcx.cx.tcx.emit_spanned_lint(\n                 lint::builtin::OVERLAPPING_RANGE_ENDPOINTS,\n-                hir_id,\n+                lint_root,\n                 pcx.span,\n                 OverlappingRangeEndpoints { overlap, range: pcx.span },\n             );"}, {"sha": "7b06498919d3fa26a2d0dfc251e6d61c268af23f", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a8187f8cb136eb5d27f00ec68ef3f7e213f8154d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8187f8cb136eb5d27f00ec68ef3f7e213f8154d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=a8187f8cb136eb5d27f00ec68ef3f7e213f8154d", "patch": "@@ -766,13 +766,13 @@ impl<'p, 'tcx> Witness<'p, 'tcx> {\n /// `is_under_guard` is used to inform if the pattern has a guard. If it\n /// has one it must not be inserted into the matrix. This shouldn't be\n /// relied on for soundness.\n-#[instrument(level = \"debug\", skip(cx, matrix, hir_id), ret)]\n+#[instrument(level = \"debug\", skip(cx, matrix, lint_root), ret)]\n fn is_useful<'p, 'tcx>(\n     cx: &MatchCheckCtxt<'p, 'tcx>,\n     matrix: &Matrix<'p, 'tcx>,\n     v: &PatStack<'p, 'tcx>,\n     witness_preference: ArmType,\n-    hir_id: HirId,\n+    lint_root: HirId,\n     is_under_guard: bool,\n     is_top_level: bool,\n ) -> Usefulness<'p, 'tcx> {\n@@ -805,7 +805,7 @@ fn is_useful<'p, 'tcx>(\n         for v in v.expand_or_pat() {\n             debug!(?v);\n             let usefulness = ensure_sufficient_stack(|| {\n-                is_useful(cx, &matrix, &v, witness_preference, hir_id, is_under_guard, false)\n+                is_useful(cx, &matrix, &v, witness_preference, lint_root, is_under_guard, false)\n             });\n             debug!(?usefulness);\n             ret.extend(usefulness);\n@@ -838,7 +838,7 @@ fn is_useful<'p, 'tcx>(\n                 pcx,\n                 matrix.heads(),\n                 matrix.column_count().unwrap_or(0),\n-                hir_id,\n+                lint_root,\n             )\n         }\n         // We split the head constructor of `v`.\n@@ -853,7 +853,15 @@ fn is_useful<'p, 'tcx>(\n             let spec_matrix = start_matrix.specialize_constructor(pcx, &ctor);\n             let v = v.pop_head_constructor(pcx, &ctor);\n             let usefulness = ensure_sufficient_stack(|| {\n-                is_useful(cx, &spec_matrix, &v, witness_preference, hir_id, is_under_guard, false)\n+                is_useful(\n+                    cx,\n+                    &spec_matrix,\n+                    &v,\n+                    witness_preference,\n+                    lint_root,\n+                    is_under_guard,\n+                    false,\n+                )\n             });\n             let usefulness = usefulness.apply_constructor(pcx, start_matrix, &ctor);\n \n@@ -897,7 +905,7 @@ fn is_useful<'p, 'tcx>(\n                 // NB: The partner lint for structs lives in `compiler/rustc_hir_analysis/src/check/pat.rs`.\n                 cx.tcx.emit_spanned_lint(\n                     NON_EXHAUSTIVE_OMITTED_PATTERNS,\n-                    hir_id,\n+                    lint_root,\n                     pcx.span,\n                     NonExhaustiveOmittedPattern {\n                         scrut_ty: pcx.ty,\n@@ -955,7 +963,7 @@ pub(crate) struct UsefulnessReport<'p, 'tcx> {\n pub(crate) fn compute_match_usefulness<'p, 'tcx>(\n     cx: &MatchCheckCtxt<'p, 'tcx>,\n     arms: &[MatchArm<'p, 'tcx>],\n-    scrut_hir_id: HirId,\n+    lint_root: HirId,\n     scrut_ty: Ty<'tcx>,\n ) -> UsefulnessReport<'p, 'tcx> {\n     let mut matrix = Matrix::empty();\n@@ -980,7 +988,7 @@ pub(crate) fn compute_match_usefulness<'p, 'tcx>(\n \n     let wild_pattern = cx.pattern_arena.alloc(DeconstructedPat::wildcard(scrut_ty));\n     let v = PatStack::from_pattern(wild_pattern);\n-    let usefulness = is_useful(cx, &matrix, &v, FakeExtraWildcard, scrut_hir_id, false, true);\n+    let usefulness = is_useful(cx, &matrix, &v, FakeExtraWildcard, lint_root, false, true);\n     let non_exhaustiveness_witnesses = match usefulness {\n         WithWitnesses(pats) => pats.into_iter().map(|w| w.single_pattern()).collect(),\n         NoWitnesses { .. } => bug!(),"}]}