{"sha": "a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YTRmODAxMmU1MjVjODE2YWVkZjViMGJjNTFlM2FkNGMxM2EwYWI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-10T08:04:49Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-10T08:04:49Z"}, "message": "Merge #773\n\n773: Crash fixes r=matklad a=flodiebold\n\nThis fixes a bunch of crashes found while running type inference on the whole rustc repo :sweat_smile: \r\n - avoid infinite recursion with ref bind patterns\r\n - avoid another infinite recursion\r\n - handle literal patterns, add a new LITERAL_PAT syntax node for this\r\n - fix an expect that's wrong on some invalid code\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "cd2cd9080114eee7c079b2120e27fb5655cdb947", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd2cd9080114eee7c079b2120e27fb5655cdb947"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "html_url": "https://github.com/rust-lang/rust/commit/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "8bcb84ea681f982946a24b5e000ddde58247adba", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bcb84ea681f982946a24b5e000ddde58247adba", "html_url": "https://github.com/rust-lang/rust/commit/8bcb84ea681f982946a24b5e000ddde58247adba"}, {"sha": "c098a3fda52ef0b02188abfa91adcd67e82c0c02", "url": "https://api.github.com/repos/rust-lang/rust/commits/c098a3fda52ef0b02188abfa91adcd67e82c0c02", "html_url": "https://github.com/rust-lang/rust/commit/c098a3fda52ef0b02188abfa91adcd67e82c0c02"}], "stats": {"total": 408, "additions": 338, "deletions": 70}, "files": [{"sha": "b30e11abb73d2846a31f96a3c479127fb8d38fe0", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -831,25 +831,26 @@ impl ExprCollector {\n                     p.field_pat_list().expect(\"every struct should have a field list\");\n                 let mut fields: Vec<_> = field_pat_list\n                     .bind_pats()\n-                    .map(|bind_pat| {\n+                    .filter_map(|bind_pat| {\n                         let ast_pat = ast::Pat::cast(bind_pat.syntax()).expect(\"bind pat is a pat\");\n                         let pat = self.collect_pat(ast_pat);\n-                        let name = bind_pat.name().expect(\"bind pat has a name\").as_name();\n-                        FieldPat { name, pat }\n+                        let name = bind_pat.name()?.as_name();\n+                        Some(FieldPat { name, pat })\n                     })\n                     .collect();\n-                let iter = field_pat_list.field_pats().map(|f| {\n-                    let ast_pat = f.pat().expect(\"field pat always contains a pattern\");\n+                let iter = field_pat_list.field_pats().filter_map(|f| {\n+                    let ast_pat = f.pat()?;\n                     let pat = self.collect_pat(ast_pat);\n-                    let name = f.name().expect(\"field pats always have a name\").as_name();\n-                    FieldPat { name, pat }\n+                    let name = f.name()?.as_name();\n+                    Some(FieldPat { name, pat })\n                 });\n                 fields.extend(iter);\n \n                 Pat::Struct { path, args: fields }\n             }\n \n             // TODO: implement\n+            ast::PatKind::LiteralPat(_) => Pat::Missing,\n             ast::PatKind::SlicePat(_) | ast::PatKind::RangePat(_) => Pat::Missing,\n         };\n         let syntax_ptr = SyntaxNodePtr::new(pat.syntax());"}, {"sha": "aba0c9968943f0f5274fe49aa8853cf29f580961", "filename": "crates/ra_hir/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmarks.rs?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -3,4 +3,5 @@ test_utils::marks!(\n     item_map_enum_importing\n     type_var_cycles_resolve_completely\n     type_var_cycles_resolve_as_possible\n+    type_var_resolves_to_int_var\n );"}, {"sha": "7203a8a10147091dedc5517df01d83a35beb0e56", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 50, "deletions": 22, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -879,11 +879,22 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ty\n     }\n \n-    fn unify_substs(&mut self, substs1: &Substs, substs2: &Substs) -> bool {\n-        substs1.0.iter().zip(substs2.0.iter()).all(|(t1, t2)| self.unify(t1, t2))\n+    fn unify_substs(&mut self, substs1: &Substs, substs2: &Substs, depth: usize) -> bool {\n+        substs1.0.iter().zip(substs2.0.iter()).all(|(t1, t2)| self.unify_inner(t1, t2, depth))\n     }\n \n     fn unify(&mut self, ty1: &Ty, ty2: &Ty) -> bool {\n+        self.unify_inner(ty1, ty2, 0)\n+    }\n+\n+    fn unify_inner(&mut self, ty1: &Ty, ty2: &Ty, depth: usize) -> bool {\n+        if depth > 1000 {\n+            // prevent stackoverflows\n+            panic!(\"infinite recursion in unification\");\n+        }\n+        if ty1 == ty2 {\n+            return true;\n+        }\n         // try to resolve type vars first\n         let ty1 = self.resolve_ty_shallow(ty1);\n         let ty2 = self.resolve_ty_shallow(ty2);\n@@ -904,13 +915,15 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             (\n                 Ty::Adt { def_id: def_id1, substs: substs1, .. },\n                 Ty::Adt { def_id: def_id2, substs: substs2, .. },\n-            ) if def_id1 == def_id2 => self.unify_substs(substs1, substs2),\n-            (Ty::Slice(t1), Ty::Slice(t2)) => self.unify(t1, t2),\n-            (Ty::RawPtr(t1, m1), Ty::RawPtr(t2, m2)) if m1 == m2 => self.unify(t1, t2),\n-            (Ty::Ref(t1, m1), Ty::Ref(t2, m2)) if m1 == m2 => self.unify(t1, t2),\n+            ) if def_id1 == def_id2 => self.unify_substs(substs1, substs2, depth + 1),\n+            (Ty::Slice(t1), Ty::Slice(t2)) => self.unify_inner(t1, t2, depth + 1),\n+            (Ty::RawPtr(t1, m1), Ty::RawPtr(t2, m2)) if m1 == m2 => {\n+                self.unify_inner(t1, t2, depth + 1)\n+            }\n+            (Ty::Ref(t1, m1), Ty::Ref(t2, m2)) if m1 == m2 => self.unify_inner(t1, t2, depth + 1),\n             (Ty::FnPtr(sig1), Ty::FnPtr(sig2)) if sig1 == sig2 => true,\n             (Ty::Tuple(ts1), Ty::Tuple(ts2)) if ts1.len() == ts2.len() => {\n-                ts1.iter().zip(ts2.iter()).all(|(t1, t2)| self.unify(t1, t2))\n+                ts1.iter().zip(ts2.iter()).all(|(t1, t2)| self.unify_inner(t1, t2, depth + 1))\n             }\n             (Ty::Infer(InferTy::TypeVar(tv1)), Ty::Infer(InferTy::TypeVar(tv2)))\n             | (Ty::Infer(InferTy::IntVar(tv1)), Ty::Infer(InferTy::IntVar(tv2)))\n@@ -989,19 +1002,30 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     /// If `ty` is a type variable with known type, returns that type;\n     /// otherwise, return ty.\n     fn resolve_ty_shallow<'b>(&mut self, ty: &'b Ty) -> Cow<'b, Ty> {\n-        match ty {\n-            Ty::Infer(tv) => {\n-                let inner = tv.to_inner();\n-                match self.var_unification_table.probe_value(inner).known() {\n-                    Some(known_ty) => {\n-                        // The known_ty can't be a type var itself\n-                        Cow::Owned(known_ty.clone())\n+        let mut ty = Cow::Borrowed(ty);\n+        // The type variable could resolve to a int/float variable. Hence try\n+        // resolving up to three times; each type of variable shouldn't occur\n+        // more than once\n+        for i in 0..3 {\n+            if i > 0 {\n+                tested_by!(type_var_resolves_to_int_var);\n+            }\n+            match &*ty {\n+                Ty::Infer(tv) => {\n+                    let inner = tv.to_inner();\n+                    match self.var_unification_table.probe_value(inner).known() {\n+                        Some(known_ty) => {\n+                            // The known_ty can't be a type var itself\n+                            ty = Cow::Owned(known_ty.clone());\n+                        }\n+                        _ => return ty,\n                     }\n-                    _ => Cow::Borrowed(ty),\n                 }\n+                _ => return ty,\n             }\n-            _ => Cow::Borrowed(ty),\n         }\n+        log::error!(\"Inference variable still not resolved: {:?}\", ty);\n+        ty\n     }\n \n     /// Resolves the type completely; type variables without known type are\n@@ -1185,17 +1209,21 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.infer_path_expr(&resolver, &path).unwrap_or(Ty::Unknown)\n             }\n             Pat::Bind { mode, name: _name, subpat } => {\n-                let subty = if let Some(subpat) = subpat {\n+                let inner_ty = if let Some(subpat) = subpat {\n                     self.infer_pat(*subpat, expected)\n                 } else {\n                     expected.clone()\n                 };\n+                let inner_ty = self.insert_type_vars_shallow(inner_ty);\n \n-                match mode {\n-                    BindingAnnotation::Ref => Ty::Ref(subty.into(), Mutability::Shared),\n-                    BindingAnnotation::RefMut => Ty::Ref(subty.into(), Mutability::Mut),\n-                    BindingAnnotation::Mutable | BindingAnnotation::Unannotated => subty,\n-                }\n+                let bound_ty = match mode {\n+                    BindingAnnotation::Ref => Ty::Ref(inner_ty.clone().into(), Mutability::Shared),\n+                    BindingAnnotation::RefMut => Ty::Ref(inner_ty.clone().into(), Mutability::Mut),\n+                    BindingAnnotation::Mutable | BindingAnnotation::Unannotated => inner_ty.clone(),\n+                };\n+                let bound_ty = self.resolve_ty_as_possible(&mut vec![], bound_ty);\n+                self.write_pat_ty(pat, bound_ty);\n+                return inner_ty;\n             }\n             _ => Ty::Unknown,\n         };"}, {"sha": "4b99788e47f97215a5463a1c5e06433fd89e5b3f", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_1.snap", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_1.snap", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_1.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_1.snap?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -0,0 +1,13 @@\n+---\n+created: \"2019-02-09T16:56:24.803326529Z\"\n+creator: insta@0.6.1\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[54; 139) '{     ...   } }': ()\n+[60; 137) 'match ...     }': ()\n+[66; 83) 'someth...nknown': Maybe<[unknown]>\n+[94; 124) 'Maybe:...thing)': Maybe<[unknown]>\n+[106; 123) 'ref mu...ething': &mut [unknown]\n+[128; 130) '()': ()\n+"}, {"sha": "fd0b39b7dc6e6d9f848370a21647ec407b7f1599", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_2.snap", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_2.snap?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -0,0 +1,14 @@\n+---\n+created: \"2019-02-09T17:03:11.974225590Z\"\n+creator: insta@0.6.1\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[23; 53) '{     ...n']; }': ()\n+[29; 50) '&[0, b...b'\\n']': &[u8]\n+[30; 50) '[0, b'...b'\\n']': [u8]\n+[31; 32) '0': u8\n+[34; 39) 'b'\\n'': u8\n+[41; 42) '1': u8\n+[44; 49) 'b'\\n'': u8\n+"}, {"sha": "d15b77e171e376b35cf64b403842590b02a72459", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_3.snap", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_3.snap", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_3.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_3.snap?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -0,0 +1,13 @@\n+---\n+created: \"2019-02-09T18:02:37.377591660Z\"\n+creator: insta@0.6.1\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[18; 102) '{     ...   } }': ()\n+[24; 100) 'match ...     }': ()\n+[42; 88) 'SizeSk...tail }': [unknown]\n+[76; 80) 'true': [unknown]\n+[82; 86) 'tail': [unknown]\n+[92; 94) '{}': ()\n+"}, {"sha": "fb31883ce8a63c8c628edc6dc3907eb07f821611", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_4.snap", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_4.snap", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_4.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_4.snap?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -0,0 +1,16 @@\n+---\n+created: \"2019-02-09T19:55:39.712470520Z\"\n+creator: insta@0.6.1\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[25; 110) '{     ...   } }': ()\n+[31; 108) 'match ...     }': ()\n+[37; 42) '*self': [unknown]\n+[38; 42) 'self': [unknown]\n+[53; 95) 'Borrow...), ..}': [unknown]\n+[74; 77) 'box': [unknown]\n+[78; 87) 'Primitive': [unknown]\n+[88; 89) 'p': [unknown]\n+[99; 101) '{}': ()\n+"}, {"sha": "6bbf59fb6dc43e97f184376c996befb8720f665c", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_5.snap", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_5.snap", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_5.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_5.snap?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -0,0 +1,30 @@\n+---\n+created: \"2019-02-09T20:28:37.294693728Z\"\n+creator: insta@0.6.1\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[27; 323) '{     ...   } }': ()\n+[33; 321) 'for co...     }': ()\n+[37; 44) 'content': &[unknown]\n+[48; 61) 'doesnt_matter': [unknown]\n+[62; 321) '{     ...     }': ()\n+[76; 80) 'name': &&[unknown]\n+[83; 167) 'if doe...     }': &&[unknown]\n+[86; 99) 'doesnt_matter': bool\n+[100; 129) '{     ...     }': &&[unknown]\n+[114; 119) 'first': &&[unknown]\n+[135; 167) '{     ...     }': &&[unknown]\n+[149; 157) '&content': &&[unknown]\n+[150; 157) 'content': &[unknown]\n+[182; 189) 'content': &&[unknown]\n+[192; 314) 'if ICE...     }': &&[unknown]\n+[195; 232) 'ICE_RE..._VALUE': [unknown]\n+[195; 248) 'ICE_RE...&name)': bool\n+[242; 247) '&name': &&&[unknown]\n+[243; 247) 'name': &&[unknown]\n+[249; 277) '{     ...     }': &&[unknown]\n+[263; 267) 'name': &&[unknown]\n+[283; 314) '{     ...     }': &[unknown]\n+[297; 304) 'content': &[unknown]\n+"}, {"sha": "e64fd27496305bde9849f5f560a3294e4791c5a6", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -630,6 +630,95 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_std_crash_1() {\n+    // caused stack overflow, taken from std\n+    check_inference(\n+        \"infer_std_crash_1\",\n+        r#\"\n+enum Maybe<T> {\n+    Real(T),\n+    Fake,\n+}\n+\n+fn write() {\n+    match something_unknown {\n+        Maybe::Real(ref mut something) => (),\n+    }\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_std_crash_2() {\n+    covers!(type_var_resolves_to_int_var);\n+    // caused \"equating two type variables, ...\", taken from std\n+    check_inference(\n+        \"infer_std_crash_2\",\n+        r#\"\n+fn test_line_buffer() {\n+    &[0, b'\\n', 1, b'\\n'];\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_std_crash_3() {\n+    // taken from rustc\n+    check_inference(\n+        \"infer_std_crash_3\",\n+        r#\"\n+pub fn compute() {\n+    match _ {\n+        SizeSkeleton::Pointer { non_zero: true, tail } => {}\n+    }\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_std_crash_4() {\n+    // taken from rustc\n+    check_inference(\n+        \"infer_std_crash_4\",\n+        r#\"\n+pub fn primitive_type() {\n+    match *self {\n+        BorrowedRef { type_: box Primitive(p), ..} => {},\n+    }\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_std_crash_5() {\n+    // taken from rustc\n+    check_inference(\n+        \"infer_std_crash_5\",\n+        r#\"\n+fn extra_compiler_flags() {\n+    for content in doesnt_matter {\n+        let name = if doesnt_matter {\n+            first\n+        } else {\n+            &content\n+        };\n+\n+        let content = if ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.contains(&name) {\n+            name\n+        } else {\n+            content\n+        };\n+    }\n+}\n+\"#,\n+    );\n+}\n+\n fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n     let source_file = db.parse(file_id);"}, {"sha": "256277609f65cb067bdf8631412db2c99821ffbb", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -1821,6 +1821,38 @@ impl LiteralExpr {\n \n impl LiteralExpr {}\n \n+// LiteralPat\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct LiteralPat {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for LiteralPat {\n+    type Repr = rowan::SyntaxNode<RaTypes>;\n+}\n+\n+impl AstNode for LiteralPat {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            LITERAL_PAT => Some(LiteralPat::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for LiteralPat {\n+    type Owned = TreeArc<LiteralPat>;\n+    fn to_owned(&self) -> TreeArc<LiteralPat> { TreeArc::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl LiteralPat {\n+    pub fn literal(&self) -> Option<&Literal> {\n+        super::child_opt(self)\n+    }\n+}\n+\n // LoopExpr\n #[derive(Debug, PartialEq, Eq, Hash)]\n #[repr(transparent)]\n@@ -2594,6 +2626,7 @@ pub enum PatKind<'a> {\n     TuplePat(&'a TuplePat),\n     SlicePat(&'a SlicePat),\n     RangePat(&'a RangePat),\n+    LiteralPat(&'a LiteralPat),\n }\n \n impl AstNode for Pat {\n@@ -2607,7 +2640,8 @@ impl AstNode for Pat {\n             | TUPLE_STRUCT_PAT\n             | TUPLE_PAT\n             | SLICE_PAT\n-            | RANGE_PAT => Some(Pat::from_repr(syntax.into_repr())),\n+            | RANGE_PAT\n+            | LITERAL_PAT => Some(Pat::from_repr(syntax.into_repr())),\n             _ => None,\n         }\n     }\n@@ -2631,6 +2665,7 @@ impl Pat {\n             TUPLE_PAT => PatKind::TuplePat(TuplePat::cast(&self.syntax).unwrap()),\n             SLICE_PAT => PatKind::SlicePat(SlicePat::cast(&self.syntax).unwrap()),\n             RANGE_PAT => PatKind::RangePat(RangePat::cast(&self.syntax).unwrap()),\n+            LITERAL_PAT => PatKind::LiteralPat(LiteralPat::cast(&self.syntax).unwrap()),\n             _ => unreachable!(),\n         }\n     }"}, {"sha": "d428bc5955d9e969b8b4c8876f42c40f87f7cbec", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -161,6 +161,7 @@ Grammar(\n         \"TUPLE_PAT\",\n         \"SLICE_PAT\",\n         \"RANGE_PAT\",\n+        \"LITERAL_PAT\",\n \n         // atoms\n         \"TUPLE_EXPR\",\n@@ -524,6 +525,7 @@ Grammar(\n         \"TuplePat\": ( collections: [[\"args\", \"Pat\"]] ),\n         \"SlicePat\": (),\n         \"RangePat\": (),\n+        \"LiteralPat\": (options: [\"Literal\"]),\n \n         \"Pat\": (\n             enum: [\n@@ -536,6 +538,7 @@ Grammar(\n                 \"TuplePat\",\n                 \"SlicePat\",\n                 \"RangePat\",\n+                \"LiteralPat\",\n             ],\n         ),\n "}, {"sha": "9d7da639d5e812828fd18428bc48c3b4d78ca11c", "filename": "crates/ra_syntax/src/grammar/patterns.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -43,21 +43,8 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n         return Some(path_pat(p));\n     }\n \n-    // test literal_pattern\n-    // fn main() {\n-    //     match () {\n-    //         -1 => (),\n-    //         92 => (),\n-    //         'c' => (),\n-    //         \"hello\" => (),\n-    //     }\n-    // }\n-    if p.at(MINUS) && (p.nth(1) == INT_NUMBER || p.nth(1) == FLOAT_NUMBER) {\n-        p.bump();\n-    }\n-\n-    if let Some(m) = expressions::literal(p) {\n-        return Some(m);\n+    if is_literal_pat_start(p) {\n+        return Some(literal_pat(p));\n     }\n \n     let m = match la0 {\n@@ -73,6 +60,30 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n     Some(m)\n }\n \n+fn is_literal_pat_start(p: &mut Parser) -> bool {\n+    p.at(MINUS) && (p.nth(1) == INT_NUMBER || p.nth(1) == FLOAT_NUMBER)\n+        || p.at_ts(expressions::LITERAL_FIRST)\n+}\n+\n+// test literal_pattern\n+// fn main() {\n+//     match () {\n+//         -1 => (),\n+//         92 => (),\n+//         'c' => (),\n+//         \"hello\" => (),\n+//     }\n+// }\n+fn literal_pat(p: &mut Parser) -> CompletedMarker {\n+    assert!(is_literal_pat_start(p));\n+    let m = p.start();\n+    if p.at(MINUS) {\n+        p.bump();\n+    }\n+    expressions::literal(p);\n+    m.complete(p, LITERAL_PAT)\n+}\n+\n // test path_part\n // fn foo() {\n //     let foo::Bar = ();"}, {"sha": "266b95bbb1964af6267c69ac73cab1d5830ef3ae", "filename": "crates/ra_syntax/src/syntax_kinds/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -157,6 +157,7 @@ pub enum SyntaxKind {\n     TUPLE_PAT,\n     SLICE_PAT,\n     RANGE_PAT,\n+    LITERAL_PAT,\n     TUPLE_EXPR,\n     ARRAY_EXPR,\n     PAREN_EXPR,\n@@ -493,6 +494,7 @@ impl SyntaxKind {\n             TUPLE_PAT => &SyntaxInfo { name: \"TUPLE_PAT\" },\n             SLICE_PAT => &SyntaxInfo { name: \"SLICE_PAT\" },\n             RANGE_PAT => &SyntaxInfo { name: \"RANGE_PAT\" },\n+            LITERAL_PAT => &SyntaxInfo { name: \"LITERAL_PAT\" },\n             TUPLE_EXPR => &SyntaxInfo { name: \"TUPLE_EXPR\" },\n             ARRAY_EXPR => &SyntaxInfo { name: \"ARRAY_EXPR\" },\n             PAREN_EXPR => &SyntaxInfo { name: \"PAREN_EXPR\" },"}, {"sha": "51c5ab7f28cccfe0baf4eb57bf2e33327560034f", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0055_literal_pattern.txt", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0055_literal_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0055_literal_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0055_literal_pattern.txt?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -22,9 +22,10 @@ SOURCE_FILE@[0; 113)\n           L_CURLY@[25; 26)\n           WHITESPACE@[26; 35)\n           MATCH_ARM@[35; 43)\n-            MINUS@[35; 36)\n-            LITERAL@[36; 37)\n-              INT_NUMBER@[36; 37) \"1\"\n+            LITERAL_PAT@[35; 37)\n+              MINUS@[35; 36)\n+              LITERAL@[36; 37)\n+                INT_NUMBER@[36; 37) \"1\"\n             WHITESPACE@[37; 38)\n             FAT_ARROW@[38; 40)\n             WHITESPACE@[40; 41)\n@@ -34,8 +35,9 @@ SOURCE_FILE@[0; 113)\n           COMMA@[43; 44)\n           WHITESPACE@[44; 53)\n           MATCH_ARM@[53; 61)\n-            LITERAL@[53; 55)\n-              INT_NUMBER@[53; 55) \"92\"\n+            LITERAL_PAT@[53; 55)\n+              LITERAL@[53; 55)\n+                INT_NUMBER@[53; 55) \"92\"\n             WHITESPACE@[55; 56)\n             FAT_ARROW@[56; 58)\n             WHITESPACE@[58; 59)\n@@ -45,8 +47,9 @@ SOURCE_FILE@[0; 113)\n           COMMA@[61; 62)\n           WHITESPACE@[62; 71)\n           MATCH_ARM@[71; 80)\n-            LITERAL@[71; 74)\n-              CHAR@[71; 74)\n+            LITERAL_PAT@[71; 74)\n+              LITERAL@[71; 74)\n+                CHAR@[71; 74)\n             WHITESPACE@[74; 75)\n             FAT_ARROW@[75; 77)\n             WHITESPACE@[77; 78)\n@@ -56,8 +59,9 @@ SOURCE_FILE@[0; 113)\n           COMMA@[80; 81)\n           WHITESPACE@[81; 90)\n           MATCH_ARM@[90; 103)\n-            LITERAL@[90; 97)\n-              STRING@[90; 97)\n+            LITERAL_PAT@[90; 97)\n+              LITERAL@[90; 97)\n+                STRING@[90; 97)\n             WHITESPACE@[97; 98)\n             FAT_ARROW@[98; 100)\n             WHITESPACE@[100; 101)"}, {"sha": "de54c49e6fa1d519697d4f467fda892f7b0ffb2f", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0058_range_pat.txt", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0058_range_pat.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0058_range_pat.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0058_range_pat.txt?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -22,13 +22,15 @@ SOURCE_FILE@[0; 112)\n           WHITESPACE@[26; 35)\n           MATCH_ARM@[35; 50)\n             RANGE_PAT@[35; 44)\n-              LITERAL@[35; 36)\n-                INT_NUMBER@[35; 36) \"0\"\n+              LITERAL_PAT@[35; 36)\n+                LITERAL@[35; 36)\n+                  INT_NUMBER@[35; 36) \"0\"\n               WHITESPACE@[36; 37)\n               DOTDOTDOT@[37; 40)\n               WHITESPACE@[40; 41)\n-              LITERAL@[41; 44)\n-                INT_NUMBER@[41; 44) \"100\"\n+              LITERAL_PAT@[41; 44)\n+                LITERAL@[41; 44)\n+                  INT_NUMBER@[41; 44) \"100\"\n             WHITESPACE@[44; 45)\n             FAT_ARROW@[45; 47)\n             WHITESPACE@[47; 48)\n@@ -39,13 +41,15 @@ SOURCE_FILE@[0; 112)\n           WHITESPACE@[51; 60)\n           MATCH_ARM@[60; 77)\n             RANGE_PAT@[60; 71)\n-              LITERAL@[60; 63)\n-                INT_NUMBER@[60; 63) \"101\"\n+              LITERAL_PAT@[60; 63)\n+                LITERAL@[60; 63)\n+                  INT_NUMBER@[60; 63) \"101\"\n               WHITESPACE@[63; 64)\n               DOTDOTEQ@[64; 67)\n               WHITESPACE@[67; 68)\n-              LITERAL@[68; 71)\n-                INT_NUMBER@[68; 71) \"200\"\n+              LITERAL_PAT@[68; 71)\n+                LITERAL@[68; 71)\n+                  INT_NUMBER@[68; 71) \"200\"\n             WHITESPACE@[71; 72)\n             FAT_ARROW@[72; 74)\n             WHITESPACE@[74; 75)\n@@ -56,13 +60,15 @@ SOURCE_FILE@[0; 112)\n           WHITESPACE@[78; 87)\n           MATCH_ARM@[87; 102)\n             RANGE_PAT@[87; 97)\n-              LITERAL@[87; 90)\n-                INT_NUMBER@[87; 90) \"200\"\n+              LITERAL_PAT@[87; 90)\n+                LITERAL@[87; 90)\n+                  INT_NUMBER@[87; 90) \"200\"\n               WHITESPACE@[90; 91)\n               DOTDOT@[91; 93)\n               WHITESPACE@[93; 94)\n-              LITERAL@[94; 97)\n-                INT_NUMBER@[94; 97) \"301\"\n+              LITERAL_PAT@[94; 97)\n+                LITERAL@[94; 97)\n+                  INT_NUMBER@[94; 97) \"301\"\n             FAT_ARROW@[97; 99)\n             WHITESPACE@[99; 100)\n             TUPLE_EXPR@[100; 102)"}, {"sha": "f3987c3b79dbb6a18fc12c1600077bf9c0446118", "filename": "crates/ra_syntax/tests/data/parser/ok/0035_weird_exprs.txt", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.txt?ref=a8a4f8012e525c816aedf5b0bc51e3ad4c13a0ab", "patch": "@@ -456,8 +456,9 @@ SOURCE_FILE@[0; 3813)\n                           L_CURLY@[930; 931)\n                           WHITESPACE@[931; 952)\n                           MATCH_ARM@[952; 1147)\n-                            LITERAL@[952; 953)\n-                              INT_NUMBER@[952; 953) \"1\"\n+                            LITERAL_PAT@[952; 953)\n+                              LITERAL@[952; 953)\n+                                INT_NUMBER@[952; 953) \"1\"\n                             WHITESPACE@[953; 954)\n                             FAT_ARROW@[954; 956)\n                             WHITESPACE@[956; 957)\n@@ -1080,8 +1081,9 @@ SOURCE_FILE@[0; 3813)\n                     L_CURLY@[1853; 1854)\n                     WHITESPACE@[1854; 1855)\n                     MATCH_ARM@[1855; 1863)\n-                      LITERAL@[1855; 1856)\n-                        INT_NUMBER@[1855; 1856) \"1\"\n+                      LITERAL_PAT@[1855; 1856)\n+                        LITERAL@[1855; 1856)\n+                          INT_NUMBER@[1855; 1856) \"1\"\n                       WHITESPACE@[1856; 1857)\n                       FAT_ARROW@[1857; 1859)\n                       WHITESPACE@[1859; 1860)"}]}