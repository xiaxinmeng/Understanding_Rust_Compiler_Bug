{"sha": "8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MDYyNDFmM2EwZGNlM2YwZDI0NzY0YTNjZTNkMTZmOTliY2I4MDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-06T20:06:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-07T06:40:31Z"}, "message": "fix how we walk functions to match new closure fmt", "tree": {"sha": "70d453fea82f951f06184de75d45f2ada8536e4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70d453fea82f951f06184de75d45f2ada8536e4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "html_url": "https://github.com/rust-lang/rust/commit/8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e89df69de47a4f944f5c3fc249a88c5934864b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e89df69de47a4f944f5c3fc249a88c5934864b2", "html_url": "https://github.com/rust-lang/rust/commit/8e89df69de47a4f944f5c3fc249a88c5934864b2"}], "stats": {"total": 171, "additions": 104, "deletions": 67}, "files": [{"sha": "9ca01837f155fd252ed41c2783c5a11dc73b1cef", "filename": "mk/target.mk", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -35,11 +35,6 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB): \\\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) --lib -o $$@ $$< && touch $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME): \\\n-\t\trt/$(2)/$$(CFG_RUNTIME)\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM): \\\n \t\trustllvm/$(2)/$$(CFG_RUSTLLVM)\n \t@$$(call E, cp: $$@)\n@@ -62,10 +57,49 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC):\t\t\\\n \n endef\n \n+# The stage0 (snapshot) compiler produces binaries that expect the\n+# snapshot runtime.  Therefore, the stage1 compiler and libraries\n+# (which are produced by stage0) should use the runtime from the\n+# snapshot.  The stage2 compiler and libraries (which are produced by\n+# stage1) will be the first that are expecting to run against the\n+# runtime as defined in the working directory.\n+#\n+# Arguments are the same as for TARGET_BASE_STAGE_N\n+define TARGET_RT_FROM_SNAPSHOT\n+\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME): \\\n+\t\t$$(HLIB$(1)_H_$(3))/$$(CFG_RUNTIME)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+endef\n+\n+# This rule copies from the runtime for the working directory.  It\n+# applies to targets produced by stage1 or later.  See comment on\n+# previous rule.\n+#\n+# Arguments are the same as for TARGET_BASE_STAGE_N\n+define TARGET_RT_FROM_WD\n+\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME): \\\n+\t\trt/$(2)/$$(CFG_RUNTIME)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+endef\n+\n # In principle, each host can build each target:\n $(foreach source,$(CFG_TARGET_TRIPLES),\t\t\t\t\t\t\\\n  $(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\t\t\\\n-  $(eval $(call TARGET_STAGE_N,0,$(source),$(target)))\t\t\\\n-  $(eval $(call TARGET_STAGE_N,1,$(source),$(target)))\t\t\\\n-  $(eval $(call TARGET_STAGE_N,2,$(source),$(target)))\t\t\\\n-  $(eval $(call TARGET_STAGE_N,3,$(source),$(target)))))\n+  $(eval $(call TARGET_STAGE_N,0,$(target),$(source)))\t\t\\\n+  $(eval $(call TARGET_STAGE_N,1,$(target),$(source)))\t\t\\\n+  $(eval $(call TARGET_STAGE_N,2,$(target),$(source)))\t\t\\\n+  $(eval $(call TARGET_STAGE_N,3,$(target),$(source)))))\n+\n+$(eval $(call TARGET_RT_FROM_SNAPSHOT,0,$(CFG_HOST_TRIPLE),$(CFG_HOST_TRIPLE)))\n+\n+$(foreach source,$(CFG_TARGET_TRIPLES),\t\t\t\t\t\t\\\n+ $(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\t\t\\\n+  $(eval $(call TARGET_RT_FROM_WD,1,$(target),$(source)))\t\\\n+  $(eval $(call TARGET_RT_FROM_WD,2,$(target),$(source)))\t\\\n+  $(eval $(call TARGET_RT_FROM_WD,3,$(target),$(source)))))"}, {"sha": "aed74da88a03c798d4c3ff287a13fb3045bea8ca", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -646,8 +646,12 @@ fn make_opaque_cbox_take_glue(\n     -> @block_ctxt {\n     // Easy cases:\n     alt ck {\n-      ty::closure_block. { ret bcx; }\n-      ty::closure_shared. { ret incr_refcnt_of_boxed(bcx, Load(bcx, cboxptr)); }\n+      ty::closure_block. {\n+        ret bcx;\n+      }\n+      ty::closure_shared. {\n+        ret incr_refcnt_of_boxed(bcx, Load(bcx, cboxptr));\n+      }\n       ty::closure_send. { /* hard case: */ }\n     }\n \n@@ -858,7 +862,8 @@ fn trans_bind_thunk(cx: @local_ctxt,\n     // Copy in the type parameters.\n     check type_is_tup_like(l_bcx, cboxptr_ty);\n     let {bcx: l_bcx, val: param_record} =\n-        GEP_tup_like(l_bcx, cboxptr_ty, llclosure, [0, abi::cbox_elt_ty_params]);\n+        GEP_tup_like(l_bcx, cboxptr_ty, llclosure,\n+                     [0, abi::cbox_elt_ty_params]);\n     let off = 0;\n     for param in param_bounds {\n         let dsc = Load(l_bcx, GEPi(l_bcx, param_record, [0, off])),"}, {"sha": "6542c7237a76ef930b17ceeb7fd94a76f25ce1b6", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -1,4 +1,5 @@\n #include \"rust_internal.h\"\n+#include \"rust_util.h\"\n #include <cstdio>\n \n struct"}, {"sha": "264e6fdb325b679e9e53240c340239a74fcfa445", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -3,6 +3,7 @@\n #include \"rust_internal.h\"\n #include \"rust_scheduler.h\"\n #include \"rust_task.h\"\n+#include \"rust_util.h\"\n \n #if !defined(__WIN32__)\n #include <sys/time.h>\n@@ -420,11 +421,6 @@ rust_get_task() {\n     return rust_scheduler::get_task();\n }\n \n-struct fn_env_pair {\n-    spawn_fn f;\n-    rust_boxed_closure *env;\n-};\n-\n extern \"C\" CDECL void\n start_task(rust_task_id id, fn_env_pair *f) {\n     rust_task *task = rust_scheduler::get_task();"}, {"sha": "b83d74f6bfe3179bb6caf38a3bc968c24459c55d", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -241,8 +241,6 @@ struct rust_timer {\n     ~rust_timer();\n };\n \n-#include \"rust_util.h\"\n-\n typedef void CDECL (glue_fn)(void *, void *,\n                              const type_desc **, void *);\n typedef void CDECL (cmp_glue_fn)(void *, void *,\n@@ -254,6 +252,30 @@ struct rust_shape_tables {\n     uint8_t *resources;\n };\n \n+struct rust_opaque_closure;\n+\n+// The type of functions that we spawn, which fall into two categories:\n+// - the main function: has a NULL environment, but uses the void* arg\n+// - unique closures of type fn~(): have a non-NULL environment, but\n+//   no arguments (and hence the final void*) is harmless\n+typedef void (*CDECL spawn_fn)(void*, rust_opaque_closure*, void *);\n+\n+// corresponds to the layout of a fn(), fn@(), fn~() etc\n+struct fn_env_pair {\n+    spawn_fn f;\n+    rust_opaque_closure *env;\n+};\n+\n+// corresponds the closures generated in trans_closure.rs\n+struct rust_opaque_closure {\n+    intptr_t ref_count;\n+    const type_desc *td;\n+    // The size/types of these will vary per closure, so they\n+    // cannot be statically expressed.  See trans_closure.rs:\n+    const type_desc *captured_tds[0];\n+    // struct bound_data;\n+};\n+\n struct type_desc {\n     // First part of type_desc is known to compiler.\n     // first_param = &descs[1] if dynamic, null if static.\n@@ -297,7 +319,6 @@ extern \"C\" type_desc *rust_clone_type_desc(type_desc*);\n // indent-tabs-mode: nil\n // c-basic-offset: 4\n // buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n // End:\n //\n "}, {"sha": "3078f6b78c4fa30cebfbaa8d8fd0eb24ee0165c6", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -1,4 +1,5 @@\n #include \"rust_internal.h\"\n+#include \"rust_util.h\"\n \n #define KLOG_(...)                              \\\n     KLOG(this, kern, __VA_ARGS__)\n@@ -216,6 +217,5 @@ rust_kernel::win32_require(LPCTSTR fn, BOOL ok) {\n // indent-tabs-mode: nil\n // c-basic-offset: 4\n // buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n // End:\n //"}, {"sha": "1df703069754466f249fe086b0420a65ae071016", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -3,6 +3,7 @@\n #include <cassert>\n #include <pthread.h>\n #include \"rust_internal.h\"\n+#include \"rust_util.h\"\n #include \"globals.h\"\n \n #ifndef _WIN32\n@@ -414,6 +415,5 @@ rust_scheduler::get_task() {\n // indent-tabs-mode: nil\n // c-basic-offset: 4\n // buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n // End:\n //"}, {"sha": "1743aaad9dd3c92ad0f6f1bce586e929e8665546", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -47,13 +47,9 @@ type_param::make(const type_desc **tydescs, unsigned n_tydescs,\n // Constructs type parameters from a function shape. This is a bit messy,\n // because it requires that the function shape have a specific format.\n type_param *\n-type_param::from_fn_shape(const uint8_t *sp, ptr dp, arena &arena) {\n-    const type_desc *tydesc = bump_dp<const type_desc *>(dp);\n-    const type_desc **tydescs = (const type_desc **)dp;\n-    unsigned n_tydescs = tydesc->n_obj_params & 0x7fffffff;\n-    for (unsigned i = 0; i < n_tydescs; i++)\n-        bump_dp<const type_desc*>(dp);\n-    return make(tydescs, n_tydescs, arena);\n+type_param::from_fn_shape(rust_opaque_closure *env, arena &arena) {\n+    unsigned n_tydescs = env->td->n_obj_params & 0x7fffffff;\n+    return make(env->captured_tds, n_tydescs, arena);\n }\n \n // Constructs type parameters from an object shape. This is also a bit messy,"}, {"sha": "af21865f828c0f0bd70864f8e12dced716b5e292", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -10,6 +10,7 @@\n \n #include <iostream>\n #include \"rust_internal.h\"\n+#include \"rust_util.h\"\n \n // ISAAC pollutes our namespace.\n #undef align\n@@ -300,7 +301,7 @@ class type_param {\n     const type_param *params;   // subparameters\n \n     // Constructs type parameters from a function shape.\n-    static type_param *from_fn_shape(const uint8_t *sp, ptr dp, arena &arena);\n+    static type_param *from_fn_shape(rust_opaque_closure *env, arena &arena);\n     // Creates type parameters from an object shape description.\n     static type_param *from_obj_shape(const uint8_t *sp, ptr dp,\n                                       arena &arena);\n@@ -952,23 +953,17 @@ data<T,U>::walk_tag(tag_info &tinfo) {\n template<typename T,typename U>\n void\n data<T,U>::walk_fn_contents(ptr &dp) {\n-    dp += sizeof(void *);   // Skip over the code pointer.\n-\n-    uint8_t *box_ptr = bump_dp<uint8_t *>(dp);\n-    if (!box_ptr)\n+    fn_env_pair pair = bump_dp<fn_env_pair>(dp);\n+    if (!pair.env)\n         return;\n \n-    type_desc *subtydesc =\n-        *reinterpret_cast<type_desc **>(box_ptr + sizeof(void *));\n-    ptr closure_dp(box_ptr + sizeof(void *));\n-\n     arena arena;\n-    type_param *params = type_param::from_fn_shape(subtydesc->shape,\n-                                                   closure_dp, arena);\n-\n-    closure_dp += sizeof(void *);\n-    T sub(*static_cast<T *>(this), subtydesc->shape, params,\n-          subtydesc->shape_tables, closure_dp);\n+    type_param *params =\n+      type_param::from_fn_shape(pair.env, arena);\n+    const type_desc *closure_td = pair.env->td;\n+    ptr closure_dp((uintptr_t)pair.env);\n+    T sub(*static_cast<T *>(this), closure_td->shape, params,\n+          closure_td->shape_tables, closure_dp);\n     sub.align = true;\n     sub.walk();\n }"}, {"sha": "79a6abdcf397a7b0d0bbf3dab79513c94532e948", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -293,7 +293,7 @@ rust_task::~rust_task()\n struct spawn_args {\n     rust_task *task;\n     spawn_fn f;\n-    rust_boxed_closure *envptr;\n+    rust_opaque_closure *envptr;\n     void *argptr;\n };\n \n@@ -347,12 +347,13 @@ void task_start_wrapper(spawn_args *a)\n         failed = true;\n     }\n \n-    rust_boxed_closure* boxed_env = (rust_boxed_closure*)a->envptr;\n-    if(boxed_env) {\n+    rust_opaque_closure* env = a->envptr;\n+    if(env) {\n         // free the environment.\n-        const type_desc *td = boxed_env->closure.td;\n-        td->drop_glue(NULL, NULL, td->first_param, &boxed_env->closure);\n-        upcall_shared_free(boxed_env);\n+        const type_desc *td = env->td;\n+        LOG(task, task, \"Freeing env %p with td %p\", env, td);\n+        td->drop_glue(NULL, NULL, td->first_param, env);\n+        upcall_shared_free(env);\n     }\n \n     // The cleanup work needs lots of stack\n@@ -364,7 +365,7 @@ void task_start_wrapper(spawn_args *a)\n \n void\n rust_task::start(spawn_fn spawnee_fn,\n-                 rust_boxed_closure *envptr,\n+                 rust_opaque_closure *envptr,\n                  void *argptr)\n {\n     LOG(this, task, \"starting task from fn 0x%\" PRIxPTR"}, {"sha": "d0e3d0e2ad6dfe76d0b75d2ff15b876643a727ae", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -21,18 +21,6 @@ struct chan_handle {\n     rust_port_id port;\n };\n \n-struct rust_closure {\n-    const type_desc *td;\n-    // ... see trans_closure.rs for full description ...\n-};\n-\n-struct rust_boxed_closure {\n-    intptr_t ref_count;\n-    rust_closure closure;\n-};\n-\n-typedef void (*CDECL spawn_fn)(void*, rust_boxed_closure*, void *);\n-\n struct rust_box;\n \n struct stk_seg {\n@@ -145,7 +133,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     ~rust_task();\n \n     void start(spawn_fn spawnee_fn,\n-               rust_boxed_closure *env,\n+               rust_opaque_closure *env,\n                void *args);\n     void start();\n     bool running();"}, {"sha": "a520770be3a2046f7fcb11d5dcc8acec2b9ede79", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -12,6 +12,7 @@\n #include \"rust_scheduler.h\"\n #include \"rust_unwind.h\"\n #include \"rust_upcall.h\"\n+#include \"rust_util.h\"\n #include <stdint.h>\n \n "}, {"sha": "37a1eb93e1dc3e9babfef37190ef5ac2ab16a889", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -210,7 +210,6 @@ make_str(rust_kernel* kernel, char* c, size_t strlen, const char* name) {\n // indent-tabs-mode: nil\n // c-basic-offset: 4\n // buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n // End:\n //\n "}, {"sha": "815d55acd868527614b2078b759fdbe57bb2f46e", "filename": "src/rt/test/rust_test_runtime.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.cpp?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -39,7 +39,7 @@ rust_domain_test::run() {\n     return true;\n }\n \n-void task_entry(void *, rust_boxed_closure *, void *) {\n+void task_entry(void *, rust_opaque_closure *, void *) {\n     printf(\"task entry\\n\");\n }\n "}, {"sha": "d1408d183d525cb4254668dcc924d5a5fa274a57", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8506241f3a0dce3f0d24764a3ce3d16f99bcb809/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=8506241f3a0dce3f0d24764a3ce3d16f99bcb809", "patch": "@@ -53,7 +53,7 @@ fn test_join_chan_fail() {\n \n #[test]\n fn spawn_polymorphic() {\n-    fn foo<send T>(x: T) { log(error, x); }\n+    fn foo<T:send>(x: T) { log(error, x); }\n     task::spawn {|| foo(true);};\n     task::spawn {|| foo(42);};\n }"}]}