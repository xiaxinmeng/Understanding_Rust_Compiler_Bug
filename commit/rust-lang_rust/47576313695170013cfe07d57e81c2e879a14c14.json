{"sha": "47576313695170013cfe07d57e81c2e879a14c14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NTc2MzEzNjk1MTcwMDEzY2ZlMDdkNTdlODFjMmU4NzlhMTRjMTQ=", "commit": {"author": {"name": "Jimmy Zelinskie", "email": "jimmyzelinskie@gmail.com", "date": "2013-09-18T11:21:57Z"}, "committer": {"name": "Jimmy Zelinskie", "email": "jimmyzelinskie@gmail.com", "date": "2013-09-18T11:34:02Z"}, "message": "Remove and replace cond! Closes #9282.", "tree": {"sha": "b85890b69477ecff135aff4f597c41166913587e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b85890b69477ecff135aff4f597c41166913587e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47576313695170013cfe07d57e81c2e879a14c14", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47576313695170013cfe07d57e81c2e879a14c14", "html_url": "https://github.com/rust-lang/rust/commit/47576313695170013cfe07d57e81c2e879a14c14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47576313695170013cfe07d57e81c2e879a14c14/comments", "author": {"login": "jzelinskie", "id": 343539, "node_id": "MDQ6VXNlcjM0MzUzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/343539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jzelinskie", "html_url": "https://github.com/jzelinskie", "followers_url": "https://api.github.com/users/jzelinskie/followers", "following_url": "https://api.github.com/users/jzelinskie/following{/other_user}", "gists_url": "https://api.github.com/users/jzelinskie/gists{/gist_id}", "starred_url": "https://api.github.com/users/jzelinskie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jzelinskie/subscriptions", "organizations_url": "https://api.github.com/users/jzelinskie/orgs", "repos_url": "https://api.github.com/users/jzelinskie/repos", "events_url": "https://api.github.com/users/jzelinskie/events{/privacy}", "received_events_url": "https://api.github.com/users/jzelinskie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jzelinskie", "id": 343539, "node_id": "MDQ6VXNlcjM0MzUzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/343539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jzelinskie", "html_url": "https://github.com/jzelinskie", "followers_url": "https://api.github.com/users/jzelinskie/followers", "following_url": "https://api.github.com/users/jzelinskie/following{/other_user}", "gists_url": "https://api.github.com/users/jzelinskie/gists{/gist_id}", "starred_url": "https://api.github.com/users/jzelinskie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jzelinskie/subscriptions", "organizations_url": "https://api.github.com/users/jzelinskie/orgs", "repos_url": "https://api.github.com/users/jzelinskie/repos", "events_url": "https://api.github.com/users/jzelinskie/events{/privacy}", "received_events_url": "https://api.github.com/users/jzelinskie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adb638f54d7d9a3bf2f66fa654a5dcd816a4b427", "url": "https://api.github.com/repos/rust-lang/rust/commits/adb638f54d7d9a3bf2f66fa654a5dcd816a4b427", "html_url": "https://github.com/rust-lang/rust/commit/adb638f54d7d9a3bf2f66fa654a5dcd816a4b427"}], "stats": {"total": 192, "additions": 55, "deletions": 137}, "files": [{"sha": "936efed94e474c2012a780db72b0789e4dd9476a", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47576313695170013cfe07d57e81c2e879a14c14/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47576313695170013cfe07d57e81c2e879a14c14/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=47576313695170013cfe07d57e81c2e879a14c14", "patch": "@@ -115,8 +115,8 @@ impl TotalOrd for BigUint {\n         if s_len > o_len { return Greater;  }\n \n         for (&self_i, &other_i) in self.data.rev_iter().zip(other.data.rev_iter()) {\n-            cond!((self_i < other_i) { return Less; }\n-                  (self_i > other_i) { return Greater; })\n+            if self_i < other_i { return Less; }\n+            if self_i > other_i { return Greater; }\n         }\n         return Equal;\n     }"}, {"sha": "431fc27a202d32d4c2da13d8b5ebe62cb89176c3", "filename": "src/libstd/char.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/47576313695170013cfe07d57e81c2e879a14c14/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47576313695170013cfe07d57e81c2e879a14c14/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=47576313695170013cfe07d57e81c2e879a14c14", "patch": "@@ -281,11 +281,11 @@ pub fn escape_unicode(c: char, f: &fn(char)) {\n     // avoid calling str::to_str_radix because we don't really need to allocate\n     // here.\n     f('\\\\');\n-    let pad = cond!(\n-        (c <= '\\xff')   { f('x'); 2 }\n-        (c <= '\\uffff') { f('u'); 4 }\n-        _               { f('U'); 8 }\n-    );\n+    let pad = match () {\n+        _ if c <= '\\xff'    => { f('x'); 2 }\n+        _ if c <= '\\uffff'  => { f('u'); 4 }\n+        _                   => { f('U'); 8 }\n+    };\n     for offset in range_step::<i32>(4 * (pad - 1), -1, -4) {\n         unsafe {\n             match ((c as i32) >> offset) & 0xf {\n@@ -329,13 +329,13 @@ pub fn len_utf8_bytes(c: char) -> uint {\n     static MAX_FOUR_B:  uint = 2097152u;\n \n     let code = c as uint;\n-    cond!(\n-        (code < MAX_ONE_B)   { 1u }\n-        (code < MAX_TWO_B)   { 2u }\n-        (code < MAX_THREE_B) { 3u }\n-        (code < MAX_FOUR_B)  { 4u }\n-        _ { fail!(\"invalid character!\") }\n-    )\n+    match () {\n+        _ if code < MAX_ONE_B   => 1u,\n+        _ if code < MAX_TWO_B   => 2u,\n+        _ if code < MAX_THREE_B => 3u,\n+        _ if code < MAX_FOUR_B  => 4u,\n+        _                       => fail!(\"invalid character!\"),\n+    }\n }\n \n impl ToStr for char {"}, {"sha": "c2babdf92db036b275a2374b723badba5a6aa75c", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/47576313695170013cfe07d57e81c2e879a14c14/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47576313695170013cfe07d57e81c2e879a14c14/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=47576313695170013cfe07d57e81c2e879a14c14", "patch": "@@ -206,35 +206,35 @@ impl Orderable for f32 {\n     /// Returns `NaN` if either of the numbers are `NaN`.\n     #[inline]\n     fn min(&self, other: &f32) -> f32 {\n-        cond!(\n-            (self.is_NaN())  { *self  }\n-            (other.is_NaN()) { *other }\n-            (*self < *other) { *self  }\n-            _                { *other }\n-        )\n+        match () {\n+            _ if self.is_NaN()  => *self,\n+            _ if other.is_NaN() => *other,\n+            _ if *self < *other => *self,\n+            _                   => *other,\n+        }\n     }\n \n     /// Returns `NaN` if either of the numbers are `NaN`.\n     #[inline]\n     fn max(&self, other: &f32) -> f32 {\n-        cond!(\n-            (self.is_NaN())  { *self  }\n-            (other.is_NaN()) { *other }\n-            (*self > *other) { *self  }\n-            _                { *other }\n-        )\n+        match () {\n+            _ if self.is_NaN()  => *self,\n+            _ if other.is_NaN() => *other,\n+            _ if *self > *other => *self,\n+            _                   => *other,\n+        }\n     }\n \n     /// Returns the number constrained within the range `mn <= self <= mx`.\n     /// If any of the numbers are `NaN` then `NaN` is returned.\n     #[inline]\n     fn clamp(&self, mn: &f32, mx: &f32) -> f32 {\n-        cond!(\n-            (self.is_NaN())   { *self }\n-            (!(*self <= *mx)) { *mx   }\n-            (!(*self >= *mn)) { *mn   }\n-            _                 { *self }\n-        )\n+        match () {\n+            _ if self.is_NaN()   => *self,\n+            _ if !(*self <= *mx) => *mx,\n+            _ if !(*self >= *mn) => *mn,\n+            _                    => *self,\n+        }\n     }\n }\n "}, {"sha": "5b2f3ac119b41f71cb1e3c6e39f46afd5790095a", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/47576313695170013cfe07d57e81c2e879a14c14/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47576313695170013cfe07d57e81c2e879a14c14/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=47576313695170013cfe07d57e81c2e879a14c14", "patch": "@@ -229,35 +229,35 @@ impl Orderable for f64 {\n     /// Returns `NaN` if either of the numbers are `NaN`.\n     #[inline]\n     fn min(&self, other: &f64) -> f64 {\n-        cond!(\n-            (self.is_NaN())  { *self  }\n-            (other.is_NaN()) { *other }\n-            (*self < *other) { *self  }\n-            _                { *other }\n-        )\n+        match () {\n+            _ if self.is_NaN()  => *self,\n+            _ if other.is_NaN() => *other,\n+            _ if *self < *other => *self,\n+            _                   => *other,\n+        }\n     }\n \n     /// Returns `NaN` if either of the numbers are `NaN`.\n     #[inline]\n     fn max(&self, other: &f64) -> f64 {\n-        cond!(\n-            (self.is_NaN())  { *self  }\n-            (other.is_NaN()) { *other }\n-            (*self > *other) { *self  }\n-            _                { *other }\n-        )\n+        match () {\n+            _ if self.is_NaN()  => *self,\n+            _ if other.is_NaN() => *other,\n+            _ if *self > *other => *self,\n+            _                   => *other,\n+        }\n     }\n \n     /// Returns the number constrained within the range `mn <= self <= mx`.\n     /// If any of the numbers are `NaN` then `NaN` is returned.\n     #[inline]\n     fn clamp(&self, mn: &f64, mx: &f64) -> f64 {\n-        cond!(\n-            (self.is_NaN())   { *self }\n-            (!(*self <= *mx)) { *mx   }\n-            (!(*self >= *mn)) { *mn   }\n-            _                 { *self }\n-        )\n+        match () {\n+            _ if self.is_NaN()   => *self,\n+            _ if !(*self <= *mx) => *mx,\n+            _ if !(*self >= *mn) => *mn,\n+            _                    => *self,\n+        }\n     }\n }\n "}, {"sha": "7cd1be7ab740620ef9336144c6b084f6278cdfc1", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47576313695170013cfe07d57e81c2e879a14c14/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47576313695170013cfe07d57e81c2e879a14c14/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=47576313695170013cfe07d57e81c2e879a14c14", "patch": "@@ -70,11 +70,11 @@ impl Orderable for $T {\n     /// Returns the number constrained within the range `mn <= self <= mx`.\n     #[inline]\n     fn clamp(&self, mn: &$T, mx: &$T) -> $T {\n-        cond!(\n-            (*self > *mx) { *mx   }\n-            (*self < *mn) { *mn   }\n-            _             { *self }\n-        )\n+        match () {\n+            _ if (*self > *mx) => *mx,\n+            _ if (*self < *mn) => *mn,\n+            _                  => *self,\n+        }\n     }\n }\n "}, {"sha": "5163642e484b8316f77b1db535567a40e58bdd2b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/47576313695170013cfe07d57e81c2e879a14c14/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47576313695170013cfe07d57e81c2e879a14c14/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=47576313695170013cfe07d57e81c2e879a14c14", "patch": "@@ -898,42 +898,6 @@ pub fn std_macros() -> @str {\n         }\n     )\n \n-    //\n-    // A scheme-style conditional that helps to improve code clarity in some instances when\n-    // the `if`, `else if`, and `else` keywords obscure predicates undesirably.\n-    //\n-    // # Example\n-    //\n-    // ~~~\n-    // let clamped =\n-    //     if x > mx { mx }\n-    //     else if x < mn { mn }\n-    //     else { x };\n-    // ~~~\n-    //\n-    // Using `cond!`, the above could be written as:\n-    //\n-    // ~~~\n-    // let clamped = cond!(\n-    //     (x > mx) { mx }\n-    //     (x < mn) { mn }\n-    //     _        { x  }\n-    // );\n-    // ~~~\n-    //\n-    // The optional default case is denoted by `_`.\n-    //\n-    macro_rules! cond (\n-        ( $(($pred:expr) $body:block)+ _ $default:block ) => (\n-            $(if $pred $body else)+\n-            $default\n-        );\n-        // for if the default case was ommitted\n-        ( $(($pred:expr) $body:block)+ ) => (\n-            $(if $pred $body)else+\n-        );\n-    )\n-\n     // NOTE(acrichto): start removing this after the next snapshot\n     macro_rules! printf (\n         ($arg:expr) => ("}, {"sha": "8bd1a772e55ed790ce20111e611a0e5728545d39", "filename": "src/test/run-pass/cond-macro-no-default.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/adb638f54d7d9a3bf2f66fa654a5dcd816a4b427/src%2Ftest%2Frun-pass%2Fcond-macro-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb638f54d7d9a3bf2f66fa654a5dcd816a4b427/src%2Ftest%2Frun-pass%2Fcond-macro-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcond-macro-no-default.rs?ref=adb638f54d7d9a3bf2f66fa654a5dcd816a4b427", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn clamp<T:Ord + Signed>(x: T, mn: T, mx: T) -> T {\n-    cond!(\n-        (x > mx) { return mx; }\n-        (x < mn) { return mn; }\n-    )\n-    return x;\n-}\n-\n-fn main() {\n-    assert_eq!(clamp(1, 2, 4), 2);\n-    assert_eq!(clamp(8, 2, 4), 4);\n-    assert_eq!(clamp(3, 2, 4), 3);\n-}"}, {"sha": "61a51b6726114de357abd4d6a5bd069997eddeca", "filename": "src/test/run-pass/cond-macro.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/adb638f54d7d9a3bf2f66fa654a5dcd816a4b427/src%2Ftest%2Frun-pass%2Fcond-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb638f54d7d9a3bf2f66fa654a5dcd816a4b427/src%2Ftest%2Frun-pass%2Fcond-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcond-macro.rs?ref=adb638f54d7d9a3bf2f66fa654a5dcd816a4b427", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn clamp<T:Ord + Signed>(x: T, mn: T, mx: T) -> T {\n-    cond!(\n-        (x > mx) { mx }\n-        (x < mn) { mn }\n-        _        { x  }\n-    )\n-}\n-\n-fn main() {\n-    assert_eq!(clamp(1, 2, 4), 2);\n-    assert_eq!(clamp(8, 2, 4), 4);\n-    assert_eq!(clamp(3, 2, 4), 3);\n-}"}]}