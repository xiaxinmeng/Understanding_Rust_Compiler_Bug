{"sha": "73a73638c0d25318608b6aba36d9e21c6e24f89e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYTczNjM4YzBkMjUzMTg2MDhiNmFiYTM2ZDllMjFjNmUyNGY4OWU=", "commit": {"author": {"name": "Phil Turnbull", "email": "philip.turnbull@gmail.com", "date": "2016-11-19T15:36:23Z"}, "committer": {"name": "Phil Turnbull", "email": "philip.turnbull@gmail.com", "date": "2016-11-19T19:55:47Z"}, "message": "Add lint for `string.extend(string.chars())`\n\nfixes #792", "tree": {"sha": "82a685cc5b83d55e2b8f281e190e7712d41afe7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82a685cc5b83d55e2b8f281e190e7712d41afe7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73a73638c0d25318608b6aba36d9e21c6e24f89e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73a73638c0d25318608b6aba36d9e21c6e24f89e", "html_url": "https://github.com/rust-lang/rust/commit/73a73638c0d25318608b6aba36d9e21c6e24f89e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73a73638c0d25318608b6aba36d9e21c6e24f89e/comments", "author": {"login": "philipturnbull", "id": 45588, "node_id": "MDQ6VXNlcjQ1NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/45588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipturnbull", "html_url": "https://github.com/philipturnbull", "followers_url": "https://api.github.com/users/philipturnbull/followers", "following_url": "https://api.github.com/users/philipturnbull/following{/other_user}", "gists_url": "https://api.github.com/users/philipturnbull/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipturnbull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipturnbull/subscriptions", "organizations_url": "https://api.github.com/users/philipturnbull/orgs", "repos_url": "https://api.github.com/users/philipturnbull/repos", "events_url": "https://api.github.com/users/philipturnbull/events{/privacy}", "received_events_url": "https://api.github.com/users/philipturnbull/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philipturnbull", "id": 45588, "node_id": "MDQ6VXNlcjQ1NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/45588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipturnbull", "html_url": "https://github.com/philipturnbull", "followers_url": "https://api.github.com/users/philipturnbull/followers", "following_url": "https://api.github.com/users/philipturnbull/following{/other_user}", "gists_url": "https://api.github.com/users/philipturnbull/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipturnbull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipturnbull/subscriptions", "organizations_url": "https://api.github.com/users/philipturnbull/orgs", "repos_url": "https://api.github.com/users/philipturnbull/repos", "events_url": "https://api.github.com/users/philipturnbull/events{/privacy}", "received_events_url": "https://api.github.com/users/philipturnbull/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa78b09fa76386e41d824fe83a176c0e641105db", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa78b09fa76386e41d824fe83a176c0e641105db", "html_url": "https://github.com/rust-lang/rust/commit/fa78b09fa76386e41d824fe83a176c0e641105db"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "db291adefaf3d3a8c8c848f3132fbe641f6a83d8", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a73638c0d25318608b6aba36d9e21c6e24f89e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/73a73638c0d25318608b6aba36d9e21c6e24f89e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=73a73638c0d25318608b6aba36d9e21c6e24f89e", "patch": "@@ -327,7 +327,7 @@ name\n [single_match_else](https://github.com/Manishearth/rust-clippy/wiki#single_match_else)                                 | allow   | a match statement with a two arms where the second arm's pattern is a wildcard instead of `if let`\n [string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                                               | allow   | using `x + ..` where x is a `String` instead of `push_str()`\n [string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                                 | allow   | using `x = x + ..` where x is a `String` instead of `push_str()`\n-[string_extend_chars](https://github.com/Manishearth/rust-clippy/wiki#string_extend_chars)                             | warn    | using `x.extend(s.chars())` where s is a `&str`\n+[string_extend_chars](https://github.com/Manishearth/rust-clippy/wiki#string_extend_chars)                             | warn    | using `x.extend(s.chars())` where s is a `&str` or `String`\n [string_lit_as_bytes](https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes)                             | warn    | calling `as_bytes` on a string literal instead of using a byte string literal\n [stutter](https://github.com/Manishearth/rust-clippy/wiki#stutter)                                                     | allow   | type names prefixed/postfixed with their containing module's name\n [suspicious_assignment_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_assignment_formatting)   | warn    | suspicious formatting of `*=`, `-=` or `!=`"}, {"sha": "9506c8e838ada02be90a27b4781692a3f02b9ce3", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/73a73638c0d25318608b6aba36d9e21c6e24f89e/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a73638c0d25318608b6aba36d9e21c6e24f89e/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=73a73638c0d25318608b6aba36d9e21c6e24f89e", "patch": "@@ -491,7 +491,7 @@ declare_lint! {\n }\n \n /// **What it does:** Checks for the use of `.extend(s.chars())` where s is a\n-/// `&str`.\n+/// `&str` or `String`.\n ///\n /// **Why is this bad?** `.push_str(s)` is clearer and faster\n ///\n@@ -500,20 +500,24 @@ declare_lint! {\n /// **Example:**\n /// ```rust\n /// let abc = \"abc\";\n+/// let def = String::from(\"def\");\n /// let mut s = String::new();\n /// s.extend(abc.chars());\n+/// s.extend(def.chars());\n /// ```\n /// The correct use would be:\n /// ```rust\n /// let abc = \"abc\";\n+/// let def = String::from(\"def\");\n /// let mut s = String::new();\n /// s.push_str(abc);\n+/// s.push_str(def.as_str());\n /// ```\n \n declare_lint! {\n     pub STRING_EXTEND_CHARS,\n     Warn,\n-    \"using `x.extend(s.chars())` where s is a `&str`\"\n+    \"using `x.extend(s.chars())` where s is a `&str` or `String`\"\n }\n \n \n@@ -839,19 +843,26 @@ fn lint_string_extend(cx: &LateContext, expr: &hir::Expr, args: &MethodArgs) {\n     if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n         let target = &arglists[0][0];\n         let (self_ty, _) = walk_ptrs_ty_depth(cx.tcx.tables().expr_ty(target));\n-        if self_ty.sty == ty::TyStr {\n-            span_lint_and_then(\n-                cx,\n-                STRING_EXTEND_CHARS,\n-                expr.span,\n-                \"calling `.extend(_.chars())`\",\n-                |db| {\n-                    db.span_suggestion(expr.span, \"try this\",\n-                            format!(\"{}.push_str({})\",\n-                                    snippet(cx, args[0].span, \"_\"),\n-                                    snippet(cx, target.span, \"_\")));\n-                });\n-        }\n+        let extra_suggestion = if self_ty.sty == ty::TyStr {\n+            \"\"\n+        } else if match_type(cx, self_ty, &paths::STRING) {\n+            \".as_str()\"\n+        } else {\n+            return;\n+        };\n+\n+        span_lint_and_then(\n+            cx,\n+            STRING_EXTEND_CHARS,\n+            expr.span,\n+            \"calling `.extend(_.chars())`\",\n+            |db| {\n+                db.span_suggestion(expr.span, \"try this\",\n+                        format!(\"{}.push_str({}{})\",\n+                                snippet(cx, args[0].span, \"_\"),\n+                                snippet(cx, target.span, \"_\"),\n+                                extra_suggestion));\n+            });\n     }\n }\n "}, {"sha": "0e30876c3e5c173302736c1c8ee2d18637fe1dc2", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/73a73638c0d25318608b6aba36d9e21c6e24f89e/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a73638c0d25318608b6aba36d9e21c6e24f89e/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=73a73638c0d25318608b6aba36d9e21c6e24f89e", "patch": "@@ -535,6 +535,7 @@ fn use_extend_from_slice() {\n \n fn str_extend_chars() {\n     let abc = \"abc\";\n+    let def = String::from(\"def\");\n     let mut s = String::new();\n \n     s.push_str(abc);\n@@ -549,6 +550,12 @@ fn str_extend_chars() {\n     //~|HELP try this\n     //~|SUGGESTION s.push_str(\"abc\")\n \n+    s.push_str(def.as_str());\n+    s.extend(def.chars());\n+    //~^ERROR calling `.extend(_.chars())`\n+    //~|HELP try this\n+    //~|SUGGESTION s.push_str(def.as_str())\n+\n     s.extend(abc.chars().skip(1));\n     s.extend(\"abc\".chars().skip(1));\n     s.extend(['a', 'b', 'c'].iter());"}]}