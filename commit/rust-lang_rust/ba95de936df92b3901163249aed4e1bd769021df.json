{"sha": "ba95de936df92b3901163249aed4e1bd769021df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOTVkZTkzNmRmOTJiMzkwMTE2MzI0OWFlZDRlMWJkNzY5MDIxZGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-22T17:10:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-22T17:10:17Z"}, "message": "Merge #1933\n\n1933: Adds \"replace with guarded return\" assist r=matklad a=mikhail-m1\n\nfirst draft for #1782. I'm pretty sure I missed something.\n\nCo-authored-by: Mikhail Modin <mikhailm1@gmail.com>", "tree": {"sha": "d41e817b741475cac2783bf8b6466acc54308472", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d41e817b741475cac2783bf8b6466acc54308472"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba95de936df92b3901163249aed4e1bd769021df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdrzf5CRBK7hj4Ov3rIwAAdHIIAKo42Rg1LqjHZtphZFe4eUyX\ndXqfzoq/wHV11foCu0hmpzmha6e3PqAGhFsZbfxjJ5FHHpGE3uO/PbZo5ifMH14R\n0nN9De7Di0e80cEcSY5xVQq5x22TTdiI1k8L0r7D/2cTaKSTMYHVWrtmx0pgSECD\nsjNy7VRvCoD4SO8yUp/Xcd2bpc7/ipZu2n9INcXlaMPZRbpKSxhbuXb0TGO1kXrt\nPE58t3eGN/Eo5tO5Oe/Js6eFJ4FVd94/KK5cTW9vjiWyvYlU/n8zmoKuaAwd9EFt\ntyRmaVdR1Rb2/4SCgXGbMqEq0babJIWOZxK6p8huKawETz1SQ1gfuejPgDAGdEY=\n=c6oQ\n-----END PGP SIGNATURE-----\n", "payload": "tree d41e817b741475cac2783bf8b6466acc54308472\nparent 2dffae6f35ce4b5824df881a5c190daabd3efd3c\nparent fb215dc192005160c70d5026bea7bfd752033292\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1571764217 +0000\ncommitter GitHub <noreply@github.com> 1571764217 +0000\n\nMerge #1933\n\n1933: Adds \"replace with guarded return\" assist r=matklad a=mikhail-m1\n\nfirst draft for #1782. I'm pretty sure I missed something.\n\nCo-authored-by: Mikhail Modin <mikhailm1@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba95de936df92b3901163249aed4e1bd769021df", "html_url": "https://github.com/rust-lang/rust/commit/ba95de936df92b3901163249aed4e1bd769021df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba95de936df92b3901163249aed4e1bd769021df/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dffae6f35ce4b5824df881a5c190daabd3efd3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dffae6f35ce4b5824df881a5c190daabd3efd3c", "html_url": "https://github.com/rust-lang/rust/commit/2dffae6f35ce4b5824df881a5c190daabd3efd3c"}, {"sha": "fb215dc192005160c70d5026bea7bfd752033292", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb215dc192005160c70d5026bea7bfd752033292", "html_url": "https://github.com/rust-lang/rust/commit/fb215dc192005160c70d5026bea7bfd752033292"}], "stats": {"total": 314, "additions": 314, "deletions": 0}, "files": [{"sha": "8c975714c81d5065fa2bbf1ebf61bc50ef84ba62", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "added", "additions": 276, "deletions": 0, "changes": 276, "blob_url": "https://github.com/rust-lang/rust/blob/ba95de936df92b3901163249aed4e1bd769021df/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba95de936df92b3901163249aed4e1bd769021df/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=ba95de936df92b3901163249aed4e1bd769021df", "patch": "@@ -0,0 +1,276 @@\n+//! FIXME: write short doc here\n+\n+use crate::{\n+    assist_ctx::{Assist, AssistCtx},\n+    AssistId,\n+};\n+use hir::db::HirDatabase;\n+use ra_syntax::{\n+    algo::replace_children,\n+    ast::edit::IndentLevel,\n+    ast::make,\n+    ast::Block,\n+    ast::ContinueExpr,\n+    ast::IfExpr,\n+    ast::ReturnExpr,\n+    AstNode,\n+    SyntaxKind::{FN_DEF, LOOP_EXPR, L_CURLY, R_CURLY, WHILE_EXPR, WHITESPACE},\n+};\n+use std::ops::RangeInclusive;\n+\n+pub(crate) fn convert_to_guarded_return(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let if_expr: IfExpr = ctx.node_at_offset()?;\n+    let expr = if_expr.condition()?.expr()?;\n+    let then_block = if_expr.then_branch()?.block()?;\n+    if if_expr.else_branch().is_some() {\n+        return None;\n+    }\n+\n+    let parent_block = if_expr.syntax().parent()?.ancestors().find_map(Block::cast)?;\n+\n+    if parent_block.expr()? != if_expr.clone().into() {\n+        return None;\n+    }\n+\n+    // check for early return and continue\n+    let first_in_then_block = then_block.syntax().first_child()?.clone();\n+    if ReturnExpr::can_cast(first_in_then_block.kind())\n+        || ContinueExpr::can_cast(first_in_then_block.kind())\n+        || first_in_then_block\n+            .children()\n+            .any(|x| ReturnExpr::can_cast(x.kind()) || ContinueExpr::can_cast(x.kind()))\n+    {\n+        return None;\n+    }\n+\n+    let parent_container = parent_block.syntax().parent()?.parent()?;\n+\n+    let early_expression = match parent_container.kind() {\n+        WHILE_EXPR | LOOP_EXPR => Some(\"continue;\"),\n+        FN_DEF => Some(\"return;\"),\n+        _ => None,\n+    }?;\n+\n+    if then_block.syntax().first_child_or_token().map(|t| t.kind() == L_CURLY).is_none() {\n+        return None;\n+    }\n+\n+    then_block.syntax().last_child_or_token().filter(|t| t.kind() == R_CURLY)?;\n+    let cursor_position = ctx.frange.range.start();\n+\n+    ctx.add_action(AssistId(\"convert_to_guarded_return\"), \"convert to guarded return\", |edit| {\n+        let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n+        let new_if_expr =\n+            if_indent_level.increase_indent(make::if_expression(&expr, early_expression));\n+        let then_block_items = IndentLevel::from(1).decrease_indent(then_block.clone());\n+        let end_of_then = then_block_items.syntax().last_child_or_token().unwrap();\n+        let end_of_then =\n+            if end_of_then.prev_sibling_or_token().map(|n| n.kind()) == Some(WHITESPACE) {\n+                end_of_then.prev_sibling_or_token().unwrap()\n+            } else {\n+                end_of_then\n+            };\n+        let mut new_if_and_then_statements = new_if_expr.syntax().children_with_tokens().chain(\n+            then_block_items\n+                .syntax()\n+                .children_with_tokens()\n+                .skip(1)\n+                .take_while(|i| *i != end_of_then),\n+        );\n+        let new_block = replace_children(\n+            &parent_block.syntax(),\n+            RangeInclusive::new(\n+                if_expr.clone().syntax().clone().into(),\n+                if_expr.syntax().clone().into(),\n+            ),\n+            &mut new_if_and_then_statements,\n+        );\n+        edit.target(if_expr.syntax().text_range());\n+        edit.replace_ast(parent_block, Block::cast(new_block).unwrap());\n+        edit.set_cursor(cursor_position);\n+    });\n+    ctx.build()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn convert_inside_fn() {\n+        check_assist(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main() {\n+                bar();\n+                if<|> true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                bar();\n+                if<|> !true {\n+                    return;\n+                }\n+                foo();\n+\n+                //comment\n+                bar();\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_inside_while() {\n+        check_assist(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main() {\n+                while true {\n+                    if<|> true {\n+                        foo();\n+                        bar();\n+                    }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                while true {\n+                    if<|> !true {\n+                        continue;\n+                    }\n+                    foo();\n+                    bar();\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_inside_loop() {\n+        check_assist(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main() {\n+                loop {\n+                    if<|> true {\n+                        foo();\n+                        bar();\n+                    }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                loop {\n+                    if<|> !true {\n+                        continue;\n+                    }\n+                    foo();\n+                    bar();\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn ignore_already_converted_if() {\n+        check_assist_not_applicable(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main() {\n+                if<|> true {\n+                    return;\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn ignore_already_converted_loop() {\n+        check_assist_not_applicable(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main() {\n+                loop {\n+                    if<|> true {\n+                        continue;\n+                    }\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn ignore_return() {\n+        check_assist_not_applicable(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main() {\n+                if<|> true {\n+                    return\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn ignore_else_branch() {\n+        check_assist_not_applicable(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main() {\n+                if<|> true {\n+                    foo();\n+                } else {\n+                    bar()\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn ignore_statements_aftert_if() {\n+        check_assist_not_applicable(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main() {\n+                if<|> true {\n+                    foo();\n+                }\n+                bar();\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn ignore_statements_inside_if() {\n+        check_assist_not_applicable(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main() {\n+                if false {\n+                    if<|> true {\n+                        foo();\n+                    }\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "ab77b46a99778071b3878f5d7ed6c1984391b0d0", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba95de936df92b3901163249aed4e1bd769021df/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba95de936df92b3901163249aed4e1bd769021df/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=ba95de936df92b3901163249aed4e1bd769021df", "patch": "@@ -108,6 +108,7 @@ mod assists {\n     mod add_missing_impl_members;\n     mod move_guard;\n     mod move_bounds;\n+    mod early_return;\n \n     pub(crate) fn all<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assist>] {\n         &[\n@@ -135,6 +136,7 @@ mod assists {\n             raw_string::make_raw_string,\n             raw_string::make_usual_string,\n             raw_string::remove_hash,\n+            early_return::convert_to_guarded_return,\n         ]\n     }\n }"}, {"sha": "47bdbb81a1a7f24cae8fb6da591c18bdf2f98dfd", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ba95de936df92b3901163249aed4e1bd769021df/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba95de936df92b3901163249aed4e1bd769021df/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=ba95de936df92b3901163249aed4e1bd769021df", "patch": "@@ -284,6 +284,34 @@ impl IndentLevel {\n             .collect();\n         algo::replace_descendants(&node, &replacements)\n     }\n+\n+    pub fn decrease_indent<N: AstNode>(self, node: N) -> N {\n+        N::cast(self._decrease_indent(node.syntax().clone())).unwrap()\n+    }\n+\n+    fn _decrease_indent(self, node: SyntaxNode) -> SyntaxNode {\n+        let replacements: FxHashMap<SyntaxElement, SyntaxElement> = node\n+            .descendants_with_tokens()\n+            .filter_map(|el| el.into_token())\n+            .filter_map(ast::Whitespace::cast)\n+            .filter(|ws| {\n+                let text = ws.syntax().text();\n+                text.contains('\\n')\n+            })\n+            .map(|ws| {\n+                (\n+                    ws.syntax().clone().into(),\n+                    make::tokens::whitespace(\n+                        &ws.syntax()\n+                            .text()\n+                            .replace(&format!(\"\\n{:1$}\", \"\", self.0 as usize * 4), \"\\n\"),\n+                    )\n+                    .into(),\n+                )\n+            })\n+            .collect();\n+        algo::replace_descendants(&node, &replacements)\n+    }\n }\n \n // FIXME: replace usages with IndentLevel above"}, {"sha": "00422ea913ac12c6d147c70f2c5e2970eca7973a", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba95de936df92b3901163249aed4e1bd769021df/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba95de936df92b3901163249aed4e1bd769021df/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=ba95de936df92b3901163249aed4e1bd769021df", "patch": "@@ -128,6 +128,14 @@ pub fn where_clause(preds: impl Iterator<Item = ast::WherePred>) -> ast::WhereCl\n     }\n }\n \n+pub fn if_expression(condition: &ast::Expr, statement: &str) -> ast::IfExpr {\n+    return ast_from_text(&format!(\n+        \"fn f() {{ if !{} {{\\n    {}\\n}}\\n}}\",\n+        condition.syntax().text(),\n+        statement\n+    ));\n+}\n+\n fn ast_from_text<N: AstNode>(text: &str) -> N {\n     let parse = SourceFile::parse(text);\n     let res = parse.tree().syntax().descendants().find_map(N::cast).unwrap();"}]}