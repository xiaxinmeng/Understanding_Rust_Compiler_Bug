{"sha": "0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZDdmZjdkZGZiNzVhMzhkY2E4MWFkM2U3NmIxZTk4NDEyOWU5Mzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-04T04:54:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-04T04:54:27Z"}, "message": "Auto merge of #72978 - matklad:ship-rust-analyzer, r=Mark-Simulacrum\n\nship rust analyzer\n\nThis successfully  builds rust-analyzer as a part of rust repo. I haven't yet added required changes to dist.rs -- seems like I just have to copy-paste quite a bit of code I don't really understand :-)", "tree": {"sha": "6c9b0805765a61b6ed95325a5168ba4dc548451c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c9b0805765a61b6ed95325a5168ba4dc548451c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "html_url": "https://github.com/rust-lang/rust/commit/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "html_url": "https://github.com/rust-lang/rust/commit/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c"}, {"sha": "058c1b60a5407d1932babe2ee5c8b32e65868567", "url": "https://api.github.com/repos/rust-lang/rust/commits/058c1b60a5407d1932babe2ee5c8b32e65868567", "html_url": "https://github.com/rust-lang/rust/commit/058c1b60a5407d1932babe2ee5c8b32e65868567"}], "stats": {"total": 158, "additions": 155, "deletions": 3}, "files": [{"sha": "5c0ab737f63dbd7da7c41695f382a9a2a275f1b6", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "patch": "@@ -41,3 +41,6 @@\n [submodule \"src/doc/embedded-book\"]\n \tpath = src/doc/embedded-book\n \turl = https://github.com/rust-embedded/book.git\n+[submodule \"src/tools/rust-analyzer\"]\n+\tpath = src/tools/rust-analyzer\n+\turl = https://github.com/rust-analyzer/rust-analyzer.git"}, {"sha": "c76a75fa07bb0361eee0acda48734f8c58c797a2", "filename": "rustfmt.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "patch": "@@ -27,6 +27,7 @@ ignore = [\n     \"src/tools/clippy\",\n     \"src/tools/miri\",\n     \"src/tools/rls\",\n+    \"src/tools/rust-analyzer\",\n     \"src/tools/rust-installer\",\n     \"src/tools/rustfmt\",\n "}, {"sha": "1dfa635c694acdc06bcb3f256e8fe267014d06d6", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "patch": "@@ -869,7 +869,7 @@ def ensure_vendored(self):\n         # the rust git repository is updated. Normal development usually does\n         # not use vendoring, so hopefully this isn't too much of a problem.\n         if self.use_vendored_sources and not os.path.exists(vendor_dir):\n-            run([self.cargo(), \"vendor\"],\n+            run([self.cargo(), \"vendor\", \"--sync=./src/tools/rust-analyzer/Cargo.toml\"],\n                 verbose=self.verbose, cwd=self.rust_root)\n \n "}, {"sha": "3cbecbbaa06cb89c7677884f8aa3fe1ed677fa03", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "patch": "@@ -368,6 +368,7 @@ impl<'a> Builder<'a> {\n                 tool::RustInstaller,\n                 tool::Cargo,\n                 tool::Rls,\n+                tool::RustAnalyzer,\n                 tool::Rustdoc,\n                 tool::Clippy,\n                 tool::CargoClippy,\n@@ -462,6 +463,7 @@ impl<'a> Builder<'a> {\n                 dist::PlainSourceTarball,\n                 dist::Cargo,\n                 dist::Rls,\n+                dist::RustAnalyzer,\n                 dist::Rustfmt,\n                 dist::Clippy,\n                 dist::Miri,\n@@ -474,6 +476,7 @@ impl<'a> Builder<'a> {\n                 install::Std,\n                 install::Cargo,\n                 install::Rls,\n+                install::RustAnalyzer,\n                 install::Rustfmt,\n                 install::Clippy,\n                 install::Miri,"}, {"sha": "5d2fcba7feabaaf16662bf7154ffcb13907bf2b5", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 121, "deletions": 1, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "patch": "@@ -30,6 +30,8 @@ pub fn pkgname(builder: &Builder<'_>, component: &str) -> String {\n         format!(\"{}-{}\", component, builder.cargo_package_vers())\n     } else if component == \"rls\" {\n         format!(\"{}-{}\", component, builder.rls_package_vers())\n+    } else if component == \"rust-analyzer\" {\n+        format!(\"{}-{}\", component, builder.rust_analyzer_package_vers())\n     } else if component == \"clippy\" {\n         format!(\"{}-{}\", component, builder.clippy_package_vers())\n     } else if component == \"miri\" {\n@@ -1107,7 +1109,10 @@ impl Step for PlainSourceTarball {\n         if builder.rust_info.is_git() {\n             // Vendor all Cargo dependencies\n             let mut cmd = Command::new(&builder.initial_cargo);\n-            cmd.arg(\"vendor\").current_dir(&plain_dst_src);\n+            cmd.arg(\"vendor\")\n+                .arg(\"--sync\")\n+                .arg(builder.src.join(\"./src/tools/rust-analyzer/Cargo.toml\"))\n+                .current_dir(&plain_dst_src);\n             builder.run(&mut cmd);\n         }\n \n@@ -1337,6 +1342,93 @@ impl Step for Rls {\n     }\n }\n \n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustAnalyzer {\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for RustAnalyzer {\n+    type Output = PathBuf;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"rust-analyzer\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(RustAnalyzer {\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+        let compiler = self.compiler;\n+        let target = self.target;\n+        assert!(builder.config.extended);\n+\n+        let src = builder.src.join(\"src/tools/rust-analyzer\");\n+        let release_num = builder.release_num(\"rust-analyzer/crates/rust-analyzer\");\n+        let name = pkgname(builder, \"rust-analyzer\");\n+        let version = builder.rust_analyzer_info.version(builder, &release_num);\n+\n+        let tmp = tmpdir(builder);\n+        let image = tmp.join(\"rust-analyzer-image\");\n+        drop(fs::remove_dir_all(&image));\n+        builder.create_dir(&image);\n+\n+        // Prepare the image directory\n+        // We expect rust-analyer to always build, as it doesn't depend on rustc internals\n+        // and doesn't have associated toolstate.\n+        let rust_analyzer = builder\n+            .ensure(tool::RustAnalyzer { compiler, target, extra_features: Vec::new() })\n+            .expect(\"rust-analyzer always builds\");\n+\n+        builder.install(&rust_analyzer, &image.join(\"bin\"), 0o755);\n+        let doc = image.join(\"share/doc/rust-analyzer\");\n+        builder.install(&src.join(\"README.md\"), &doc, 0o644);\n+        builder.install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n+        builder.install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n+\n+        // Prepare the overlay\n+        let overlay = tmp.join(\"rust-analyzer-overlay\");\n+        drop(fs::remove_dir_all(&overlay));\n+        t!(fs::create_dir_all(&overlay));\n+        builder.install(&src.join(\"README.md\"), &overlay, 0o644);\n+        builder.install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n+        builder.install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n+        builder.create(&overlay.join(\"version\"), &version);\n+\n+        // Generate the installer tarball\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+            .arg(\"--product-name=Rust\")\n+            .arg(\"--rel-manifest-dir=rustlib\")\n+            .arg(\"--success-message=rust-analyzer-ready-to-serve.\")\n+            .arg(\"--image-dir\")\n+            .arg(&image)\n+            .arg(\"--work-dir\")\n+            .arg(&tmpdir(builder))\n+            .arg(\"--output-dir\")\n+            .arg(&distdir(builder))\n+            .arg(\"--non-installed-overlay\")\n+            .arg(&overlay)\n+            .arg(format!(\"--package-name={}-{}\", name, target))\n+            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+            .arg(\"--component-name=rust-analyzer-preview\");\n+\n+        builder.info(&format!(\"Dist rust-analyzer stage{} ({})\", compiler.stage, target));\n+        let _time = timeit(builder);\n+        builder.run(&mut cmd);\n+        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n+    }\n+}\n+\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Clippy {\n     pub compiler: Compiler,\n@@ -1656,6 +1748,7 @@ impl Step for Extended {\n         let cargo_installer = builder.ensure(Cargo { compiler, target });\n         let rustfmt_installer = builder.ensure(Rustfmt { compiler, target });\n         let rls_installer = builder.ensure(Rls { compiler, target });\n+        let rust_analyzer_installer = builder.ensure(RustAnalyzer { compiler, target });\n         let llvm_tools_installer = builder.ensure(LlvmTools { target });\n         let clippy_installer = builder.ensure(Clippy { compiler, target });\n         let miri_installer = builder.ensure(Miri { compiler, target });\n@@ -1690,6 +1783,7 @@ impl Step for Extended {\n         tarballs.push(rustc_installer);\n         tarballs.push(cargo_installer);\n         tarballs.extend(rls_installer.clone());\n+        tarballs.push(rust_analyzer_installer.clone());\n         tarballs.push(clippy_installer);\n         tarballs.extend(miri_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n@@ -1767,6 +1861,7 @@ impl Step for Extended {\n             if rls_installer.is_none() {\n                 contents = filter(&contents, \"rls\");\n             }\n+            contents = filter(&contents, \"rust-analyzer\");\n             if miri_installer.is_none() {\n                 contents = filter(&contents, \"miri\");\n             }\n@@ -1813,6 +1908,7 @@ impl Step for Extended {\n             if rls_installer.is_some() {\n                 prepare(\"rls\");\n             }\n+            prepare(\"rust-analyzer\");\n             if miri_installer.is_some() {\n                 prepare(\"miri\");\n             }\n@@ -1846,6 +1942,8 @@ impl Step for Extended {\n                     format!(\"{}-{}\", name, target)\n                 } else if name == \"rls\" {\n                     \"rls-preview\".to_string()\n+                } else if name == \"rust-analyzer\" {\n+                    \"rust-analyzer-preview\".to_string()\n                 } else if name == \"clippy\" {\n                     \"clippy-preview\".to_string()\n                 } else if name == \"miri\" {\n@@ -1868,6 +1966,7 @@ impl Step for Extended {\n             if rls_installer.is_some() {\n                 prepare(\"rls\");\n             }\n+            prepare(\"rust-analyzer\");\n             if miri_installer.is_some() {\n                 prepare(\"miri\");\n             }\n@@ -1967,6 +2066,23 @@ impl Step for Extended {\n                         .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n                 );\n             }\n+            builder.run(\n+                Command::new(&heat)\n+                    .current_dir(&exe)\n+                    .arg(\"dir\")\n+                    .arg(\"rust-analyzer\")\n+                    .args(&heat_flags)\n+                    .arg(\"-cg\")\n+                    .arg(\"RustAnalyzerGroup\")\n+                    .arg(\"-dr\")\n+                    .arg(\"RustAnalyzer\")\n+                    .arg(\"-var\")\n+                    .arg(\"var.RustAnalyzerDir\")\n+                    .arg(\"-out\")\n+                    .arg(exe.join(\"RustAnalyzerGroup.wxs\"))\n+                    .arg(\"-t\")\n+                    .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n+            );\n             builder.run(\n                 Command::new(&heat)\n                     .current_dir(&exe)\n@@ -2060,6 +2176,7 @@ impl Step for Extended {\n                 if rls_installer.is_some() {\n                     cmd.arg(\"-dRlsDir=rls\");\n                 }\n+                cmd.arg(\"-dRustAnalyzerDir=rust-analyzer\");\n                 if miri_installer.is_some() {\n                     cmd.arg(\"-dMiriDir=miri\");\n                 }\n@@ -2079,6 +2196,7 @@ impl Step for Extended {\n             if rls_installer.is_some() {\n                 candle(\"RlsGroup.wxs\".as_ref());\n             }\n+            candle(\"RustAnalyzerGroup.wxs\".as_ref());\n             if miri_installer.is_some() {\n                 candle(\"MiriGroup.wxs\".as_ref());\n             }\n@@ -2116,6 +2234,7 @@ impl Step for Extended {\n             if rls_installer.is_some() {\n                 cmd.arg(\"RlsGroup.wixobj\");\n             }\n+            cmd.arg(\"RustAnalyzerGroup.wixobj\");\n             if miri_installer.is_some() {\n                 cmd.arg(\"MiriGroup.wixobj\");\n             }\n@@ -2209,6 +2328,7 @@ impl Step for HashSign {\n         cmd.arg(addr);\n         cmd.arg(builder.package_vers(&builder.release_num(\"cargo\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rls\")));\n+        cmd.arg(builder.package_vers(&builder.release_num(\"rust-analyzer/crates/rust-analyzer\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"clippy\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"miri\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rustfmt\")));"}, {"sha": "7026b25d1b98467d821f5fd2981c263bcddb8de3", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "patch": "@@ -32,6 +32,9 @@ pub fn install_cargo(builder: &Builder<'_>, stage: u32, host: Interned<String>)\n pub fn install_rls(builder: &Builder<'_>, stage: u32, host: Interned<String>) {\n     install_sh(builder, \"rls\", \"rls\", stage, Some(host));\n }\n+pub fn install_rust_analyzer(builder: &Builder<'_>, stage: u32, host: Interned<String>) {\n+    install_sh(builder, \"rust-analyzer\", \"rust-analyzer\", stage, Some(host));\n+}\n pub fn install_clippy(builder: &Builder<'_>, stage: u32, host: Interned<String>) {\n     install_sh(builder, \"clippy\", \"clippy\", stage, Some(host));\n }\n@@ -216,6 +219,16 @@ install!((self, builder, _config),\n             );\n         }\n     };\n+    RustAnalyzer, \"rust-analyzer\", Self::should_build(_config), only_hosts: true, {\n+        builder.ensure(dist::RustAnalyzer { compiler: self.compiler, target: self.target });\n+        if Self::should_install(builder) {\n+            install_rust_analyzer(builder, self.compiler.stage, self.target);\n+        } else {\n+            builder.info(\n+                &format!(\"skipping Install rust-analyzer stage{} ({})\", self.compiler.stage, self.target),\n+            );\n+        }\n+    };\n     Clippy, \"clippy\", Self::should_build(_config), only_hosts: true, {\n         builder.ensure(dist::Clippy { compiler: self.compiler, target: self.target });\n         if Self::should_install(builder) {"}, {"sha": "b973889448651328836cb2ab40629772041609e2", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "patch": "@@ -225,6 +225,7 @@ pub struct Build {\n     rust_info: channel::GitInfo,\n     cargo_info: channel::GitInfo,\n     rls_info: channel::GitInfo,\n+    rust_analyzer_info: channel::GitInfo,\n     clippy_info: channel::GitInfo,\n     miri_info: channel::GitInfo,\n     rustfmt_info: channel::GitInfo,\n@@ -349,6 +350,8 @@ impl Build {\n         let rust_info = channel::GitInfo::new(ignore_git, &src);\n         let cargo_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/cargo\"));\n         let rls_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/rls\"));\n+        let rust_analyzer_info =\n+            channel::GitInfo::new(ignore_git, &src.join(\"src/tools/rust-analyzer\"));\n         let clippy_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/clippy\"));\n         let miri_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/miri\"));\n         let rustfmt_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/rustfmt\"));\n@@ -405,6 +408,7 @@ impl Build {\n             rust_info,\n             cargo_info,\n             rls_info,\n+            rust_analyzer_info,\n             clippy_info,\n             miri_info,\n             rustfmt_info,\n@@ -1034,6 +1038,11 @@ impl Build {\n         self.package_vers(&self.release_num(\"rls\"))\n     }\n \n+    /// Returns the value of `package_vers` above for rust-analyzer\n+    fn rust_analyzer_package_vers(&self) -> String {\n+        self.package_vers(&self.release_num(\"rust-analyzer/crates/rust-analyzer\"))\n+    }\n+\n     /// Returns the value of `package_vers` above for clippy\n     fn clippy_package_vers(&self) -> String {\n         self.package_vers(&self.release_num(\"clippy\"))"}, {"sha": "450b534d5dfdbe378ab8d2b26ab975b14fb36193", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "patch": "@@ -641,7 +641,7 @@ macro_rules! tool_extended {\n     }\n }\n \n-// Note: tools need to be also added to `Builder::get_step_descriptions` in `build.rs`\n+// Note: tools need to be also added to `Builder::get_step_descriptions` in `builder.rs`\n // to make `./x.py build <tool>` work.\n tool_extended!((self, builder),\n     Cargofmt, rustfmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true, {};\n@@ -658,6 +658,7 @@ tool_extended!((self, builder),\n         self.extra_features.push(\"clippy\".to_owned());\n     };\n     Rustfmt, rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, {};\n+    RustAnalyzer, rust_analyzer, \"src/tools/rust-analyzer/crates/rust-analyzer\", \"rust-analyzer\", stable=false, {};\n );\n \n impl<'a> Builder<'a> {"}, {"sha": "f5a4a4b46e706697abe4bd136503ecc09aa23b61", "filename": "src/tools/rust-analyzer", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "patch": "@@ -0,0 +1 @@\n+Subproject commit f5a4a4b46e706697abe4bd136503ecc09aa23b61"}, {"sha": "b4aafb815fc6b6b169a0caa91aa21de9a8c5b8dc", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "patch": "@@ -56,6 +56,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/tools/clippy\",\n         \"src/tools/miri\",\n         \"src/tools/rls\",\n+        \"src/tools/rust-analyzer\",\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n         \"src/doc/book\","}]}