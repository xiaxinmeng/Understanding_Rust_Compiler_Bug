{"sha": "c97c1f7dc3b8c2e5e1c40681094c45cf55be5832", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5N2MxZjdkYzNiOGMyZTVlMWM0MDY4MTA5NGM0NWNmNTViZTU4MzI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-12-22T18:29:16Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-20T10:09:23Z"}, "message": "Mark Unique as perma-unstable, with the feature renamed to ptr_internals.", "tree": {"sha": "c68d1d7a879bf617792f219040fc0fc63ad1e8ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c68d1d7a879bf617792f219040fc0fc63ad1e8ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832", "html_url": "https://github.com/rust-lang/rust/commit/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2f878a084c8000dd1dcacc02cae5ebc5603fe72", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f878a084c8000dd1dcacc02cae5ebc5603fe72", "html_url": "https://github.com/rust-lang/rust/commit/a2f878a084c8000dd1dcacc02cae5ebc5603fe72"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "fec3182d0b0a3cf8122e192b3270064a5b19be5b", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=c97c1f7dc3b8c2e5e1c40681094c45cf55be5832", "patch": "@@ -1 +1 @@\n-Subproject commit 2f7b05fd5939aa49d52c4ab309b9a47776ba7bd8\n+Subproject commit fec3182d0b0a3cf8122e192b3270064a5b19be5b"}, {"sha": "07e4ccc45a9b3ced4826de35398d3120c1fd2a9b", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c97c1f7dc3b8c2e5e1c40681094c45cf55be5832", "patch": "@@ -110,6 +110,7 @@\n #![feature(pattern)]\n #![feature(placement_in_syntax)]\n #![feature(placement_new_protocol)]\n+#![feature(ptr_internals)]\n #![feature(rustc_attrs)]\n #![feature(slice_get_slice)]\n #![feature(slice_patterns)]\n@@ -120,7 +121,6 @@\n #![feature(trusted_len)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(unique)]\n #![feature(unsize)]\n #![feature(allocator_internals)]\n #![feature(on_unimplemented)]"}, {"sha": "e39c520880a661b74c353cd50372acb6054735b4", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=c97c1f7dc3b8c2e5e1c40681094c45cf55be5832", "patch": "@@ -2330,8 +2330,9 @@ impl<T: ?Sized> PartialOrd for *mut T {\n ///\n /// Unlike `*mut T`, `Unique<T>` is covariant over `T`. This should always be correct\n /// for any type which upholds Unique's aliasing requirements.\n-#[unstable(feature = \"unique\", reason = \"needs an RFC to flesh out design\",\n-           issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\",\n+           reason = \"use NonNull instead and consider PhantomData<T> \\\n+                     (if you also use #[may_dangle]), Send, and/or Sync\")]\n pub struct Unique<T: ?Sized> {\n     pointer: NonZero<*const T>,\n     // NOTE: this marker has no consequences for variance, but is necessary\n@@ -2342,7 +2343,7 @@ pub struct Unique<T: ?Sized> {\n     _marker: PhantomData<T>,\n }\n \n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> fmt::Debug for Unique<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{:p}\", self.as_ptr())\n@@ -2353,17 +2354,17 @@ impl<T: ?Sized> fmt::Debug for Unique<T> {\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `Unique` must enforce it.\n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n unsafe impl<T: Send + ?Sized> Send for Unique<T> { }\n \n /// `Unique` pointers are `Sync` if `T` is `Sync` because the data they\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `Unique` must enforce it.\n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n unsafe impl<T: Sync + ?Sized> Sync for Unique<T> { }\n \n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: Sized> Unique<T> {\n     /// Creates a new `Unique` that is dangling, but well-aligned.\n     ///\n@@ -2377,14 +2378,13 @@ impl<T: Sized> Unique<T> {\n     }\n }\n \n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique`.\n     ///\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n-    #[unstable(feature = \"unique\", issue = \"27730\")]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         Unique { pointer: NonZero::new_unchecked(ptr), _marker: PhantomData }\n     }\n@@ -2418,41 +2418,41 @@ impl<T: ?Sized> Unique<T> {\n     }\n }\n \n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> Clone for Unique<T> {\n     fn clone(&self) -> Self {\n         *self\n     }\n }\n \n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> Copy for Unique<T> { }\n \n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> { }\n \n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> fmt::Pointer for Unique<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n \n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n         Unique { pointer: NonZero::from(reference), _marker: PhantomData }\n     }\n }\n \n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n         Unique { pointer: NonZero::from(reference), _marker: PhantomData }\n     }\n }\n \n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n     fn from(p: NonNull<T>) -> Self {\n         Unique { pointer: p.pointer, _marker: PhantomData }"}, {"sha": "bc7052d676d0c6b6c0e210d076cb1992c237036a", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=c97c1f7dc3b8c2e5e1c40681094c45cf55be5832", "patch": "@@ -27,6 +27,7 @@\n #![feature(iterator_try_fold)]\n #![feature(iter_rfind)]\n #![feature(iter_rfold)]\n+#![feature(nonnull)]\n #![feature(nonzero)]\n #![feature(pattern)]\n #![feature(raw)]\n@@ -41,7 +42,6 @@\n #![feature(trusted_len)]\n #![feature(try_from)]\n #![feature(try_trait)]\n-#![feature(unique)]\n #![feature(exact_chunks)]\n \n extern crate core;"}, {"sha": "00f87336f3c80c863f2b3bdff684d429e9b50411", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=c97c1f7dc3b8c2e5e1c40681094c45cf55be5832", "patch": "@@ -249,9 +249,9 @@ fn test_set_memory() {\n }\n \n #[test]\n-fn test_unsized_unique() {\n+fn test_unsized_nonnull() {\n     let xs: &[i32] = &[1, 2, 3];\n-    let ptr = unsafe { Unique::new_unchecked(xs as *const [i32] as *mut [i32]) };\n+    let ptr = unsafe { NonNull::new_unchecked(xs as *const [i32] as *mut [i32]) };\n     let ys = unsafe { ptr.as_ref() };\n     let zs: &[i32] = &[1, 2, 3];\n     assert!(ys == zs);"}, {"sha": "9f65d61658cea4378a155fd534d63049191bc6d3", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c97c1f7dc3b8c2e5e1c40681094c45cf55be5832", "patch": "@@ -294,6 +294,7 @@\n #![feature(placement_in_syntax)]\n #![feature(placement_new_protocol)]\n #![feature(prelude_import)]\n+#![feature(ptr_internals)]\n #![feature(rand)]\n #![feature(raw)]\n #![feature(repr_align)]\n@@ -315,7 +316,6 @@\n #![feature(try_from)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(unique)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(vec_push_all)]"}, {"sha": "6f7d8ddb7706e7f45df3516a784e208ca0d19a6b", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=c97c1f7dc3b8c2e5e1c40681094c45cf55be5832", "patch": "@@ -196,7 +196,7 @@ impl<'a, T: RefUnwindSafe + ?Sized> UnwindSafe for &'a T {}\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *const T {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *mut T {}\n-#[unstable(feature = \"unique\", issue = \"27730\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: UnwindSafe + ?Sized> UnwindSafe for Unique<T> {}\n #[unstable(feature = \"nonnull\", issue = \"27730\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for NonNull<T> {}"}, {"sha": "37cc1b134c3b912b10dc6bcda3f9328c9497a05f", "filename": "src/test/run-pass/issue-23433.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Ftest%2Frun-pass%2Fissue-23433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c1f7dc3b8c2e5e1c40681094c45cf55be5832/src%2Ftest%2Frun-pass%2Fissue-23433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23433.rs?ref=c97c1f7dc3b8c2e5e1c40681094c45cf55be5832", "patch": "@@ -10,13 +10,13 @@\n \n // Don't fail if we encounter a NonZero<*T> where T is an unsized type\n \n-#![feature(unique)]\n+#![feature(nonnull)]\n \n-use std::ptr::Unique;\n+use std::ptr::NonNull;\n \n fn main() {\n     let mut a = [0u8; 5];\n-    let b: Option<Unique<[u8]>> = Some(Unique::from(&mut a));\n+    let b: Option<NonNull<[u8]>> = Some(NonNull::from(&mut a));\n     match b {\n         Some(_) => println!(\"Got `Some`\"),\n         None => panic!(\"Unexpected `None`\"),"}]}