{"sha": "d902a1157571cc9c34fff14f927b805bb18f6a53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MDJhMTE1NzU3MWNjOWMzNGZmZjE0ZjkyN2I4MDViYjE4ZjZhNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-15T07:36:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-15T07:36:42Z"}, "message": "Auto merge of #975 - christianpoveda:clock-shim, r=RalfJung\n\nAdd clock_gettime shim\n\nr? @oli-obk\n\nI think there is no way to do proper testing of this other than checking that miri does not crash when calling `clock_gettime`.", "tree": {"sha": "2a15b57364b165143bfdfacade3748efdedfe908", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a15b57364b165143bfdfacade3748efdedfe908"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d902a1157571cc9c34fff14f927b805bb18f6a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d902a1157571cc9c34fff14f927b805bb18f6a53", "html_url": "https://github.com/rust-lang/rust/commit/d902a1157571cc9c34fff14f927b805bb18f6a53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d902a1157571cc9c34fff14f927b805bb18f6a53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2adc39f27b7fd2d06b3d1d470827928766731a1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2adc39f27b7fd2d06b3d1d470827928766731a1d", "html_url": "https://github.com/rust-lang/rust/commit/2adc39f27b7fd2d06b3d1d470827928766731a1d"}, {"sha": "f9c768864a7784c518b6ac1af6515950c6eff6ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c768864a7784c518b6ac1af6515950c6eff6ec", "html_url": "https://github.com/rust-lang/rust/commit/f9c768864a7784c518b6ac1af6515950c6eff6ec"}], "stats": {"total": 161, "additions": 160, "deletions": 1}, "files": [{"sha": "9107958e010ce9e25e83930e8c02c39408b23ef7", "filename": "src/helpers.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d902a1157571cc9c34fff14f927b805bb18f6a53/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902a1157571cc9c34fff14f927b805bb18f6a53/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=d902a1157571cc9c34fff14f927b805bb18f6a53", "patch": "@@ -1,8 +1,11 @@\n use std::mem;\n \n-use rustc::ty::{self, layout::{self, Size, Align}};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::mir;\n+use rustc::ty::{\n+    self,\n+    layout::{self, Align, LayoutOf, Size, TyLayout},\n+};\n \n use rand::RngCore;\n \n@@ -304,4 +307,36 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn eval_libc_i32(&mut self, name: &str) -> InterpResult<'tcx, i32> {\n         self.eval_libc(name)?.to_i32()\n     }\n+\n+    /// Helper function to get the `TyLayout` of a `libc` type\n+    fn libc_ty_layout(&mut self, name: &str) -> InterpResult<'tcx, TyLayout<'tcx>> {\n+        let this = self.eval_context_mut();\n+        let tcx = &{ this.tcx.tcx };\n+        let ty = this.resolve_path(&[\"libc\", name])?.ty(*tcx);\n+        this.layout_of(ty)\n+    }\n+\n+    // Writes several `ImmTy`s contiguosly into memory. This is useful when you have to pack\n+    // different values into a struct.\n+    fn write_packed_immediates(\n+        &mut self,\n+        place: &MPlaceTy<'tcx, Tag>,\n+        imms: &[ImmTy<'tcx, Tag>],\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+\n+        let tcx = &{ this.tcx.tcx };\n+\n+        let mut offset = Size::from_bytes(0);\n+\n+        for &imm in imms {\n+            this.write_immediate_to_mplace(\n+                *imm,\n+                place.offset(offset, None, imm.layout, tcx)?,\n+            )?;\n+            offset += imm.layout.size;\n+        }\n+\n+        Ok(())\n+    }\n }"}, {"sha": "06ec33a914bf751f232d2b04cee2cfb60e880eb8", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d902a1157571cc9c34fff14f927b805bb18f6a53/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902a1157571cc9c34fff14f927b805bb18f6a53/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d902a1157571cc9c34fff14f927b805bb18f6a53", "patch": "@@ -32,6 +32,7 @@ pub use crate::shims::{EvalContextExt as ShimsEvalContextExt};\n pub use crate::shims::foreign_items::EvalContextExt as ForeignItemsEvalContextExt;\n pub use crate::shims::intrinsics::EvalContextExt as IntrinsicsEvalContextExt;\n pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n+pub use crate::shims::time::{EvalContextExt as TimeEvalContextExt};\n pub use crate::shims::dlsym::{Dlsym, EvalContextExt as DlsymEvalContextExt};\n pub use crate::shims::env::{EnvVars, EvalContextExt as EnvEvalContextExt};\n pub use crate::shims::fs::{FileHandler, EvalContextExt as FileEvalContextExt};"}, {"sha": "f6195961ba0640525ce763510818a6ff3bf0a1d3", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d902a1157571cc9c34fff14f927b805bb18f6a53/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902a1157571cc9c34fff14f927b805bb18f6a53/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=d902a1157571cc9c34fff14f927b805bb18f6a53", "patch": "@@ -507,6 +507,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"clock_gettime\" => {\n+                let result = this.clock_gettime(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"gettimeofday\" => {\n+                let result = this.gettimeofday(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"strlen\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let n = this.memory().read_c_str(ptr)?.len();"}, {"sha": "95bb8b70370f1dfcb02b4b5f70e96cae87cc5b4e", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d902a1157571cc9c34fff14f927b805bb18f6a53/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902a1157571cc9c34fff14f927b805bb18f6a53/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=d902a1157571cc9c34fff14f927b805bb18f6a53", "patch": "@@ -4,6 +4,7 @@ pub mod foreign_items;\n pub mod intrinsics;\n pub mod tls;\n pub mod fs;\n+pub mod time;\n \n use rustc::{mir, ty};\n "}, {"sha": "0153c1a912df53b8a0f501c386dec3c10dccc898", "filename": "src/shims/time.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/d902a1157571cc9c34fff14f927b805bb18f6a53/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902a1157571cc9c34fff14f927b805bb18f6a53/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=d902a1157571cc9c34fff14f927b805bb18f6a53", "patch": "@@ -0,0 +1,104 @@\n+use std::time::{Duration, SystemTime};\n+\n+use rustc::ty::layout::TyLayout;\n+\n+use crate::stacked_borrows::Tag;\n+use crate::*;\n+\n+// Returns the time elapsed between now and the unix epoch as a `Duration` and the sign of the time\n+// interval\n+fn get_time<'tcx>() -> InterpResult<'tcx, Duration> {\n+    SystemTime::now()\n+        .duration_since(SystemTime::UNIX_EPOCH)\n+        .map_err(|_| err_unsup_format!(\"Times before the Unix epoch are not supported\").into())\n+}\n+\n+fn int_to_immty_checked<'tcx>(\n+    int: i128,\n+    layout: TyLayout<'tcx>,\n+) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n+    // If `int` does not fit in `size` bits, we error instead of letting\n+    // `ImmTy::from_int` panic.\n+    let size = layout.size;\n+    let truncated = truncate(int as u128, size);\n+    if sign_extend(truncated, size) as i128 != int {\n+        throw_unsup_format!(\n+            \"Signed value {:#x} does not fit in {} bits\",\n+            int,\n+            size.bits()\n+        )\n+    }\n+    Ok(ImmTy::from_int(int, layout))\n+}\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    // Foreign function used by linux\n+    fn clock_gettime(\n+        &mut self,\n+        clk_id_op: OpTy<'tcx, Tag>,\n+        tp_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        if !this.machine.communicate {\n+            throw_unsup_format!(\"`clock_gettime` not available when isolation is enabled\")\n+        }\n+\n+        let clk_id = this.read_scalar(clk_id_op)?.to_i32()?;\n+        if clk_id != this.eval_libc_i32(\"CLOCK_REALTIME\")? {\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n+            return Ok(-1);\n+        }\n+\n+        let tp = this.deref_operand(tp_op)?;\n+\n+        let duration = get_time()?;\n+        let tv_sec = duration.as_secs() as i128;\n+        let tv_nsec = duration.subsec_nanos() as i128;\n+\n+        let imms = [\n+            int_to_immty_checked(tv_sec, this.libc_ty_layout(\"time_t\")?)?,\n+            int_to_immty_checked(tv_nsec, this.libc_ty_layout(\"c_long\")?)?,\n+        ];\n+\n+        this.write_packed_immediates(&tp, &imms)?;\n+\n+        Ok(0)\n+    }\n+    // Foreign function used by generic unix (in particular macOS)\n+    fn gettimeofday(\n+        &mut self,\n+        tv_op: OpTy<'tcx, Tag>,\n+        tz_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        if !this.machine.communicate {\n+            throw_unsup_format!(\"`gettimeofday` not available when isolation is enabled\")\n+        }\n+        // Using tz is obsolete and should always be null\n+        let tz = this.read_scalar(tz_op)?.not_undef()?;\n+        if !this.is_null(tz)? {\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n+            return Ok(-1);\n+        }\n+\n+        let tv = this.deref_operand(tv_op)?;\n+\n+        let duration = get_time()?;\n+        let tv_sec = duration.as_secs() as i128;\n+        let tv_usec = duration.subsec_micros() as i128;\n+\n+        let imms = [\n+            int_to_immty_checked(tv_sec, this.libc_ty_layout(\"time_t\")?)?,\n+            int_to_immty_checked(tv_usec, this.libc_ty_layout(\"suseconds_t\")?)?,\n+        ];\n+\n+        this.write_packed_immediates(&tv, &imms)?;\n+\n+        Ok(0)\n+    }\n+}"}, {"sha": "23f45f91ada14dd5d1c066ac8c782fc1a9731425", "filename": "tests/run-pass/clock.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d902a1157571cc9c34fff14f927b805bb18f6a53/tests%2Frun-pass%2Fclock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902a1157571cc9c34fff14f927b805bb18f6a53/tests%2Frun-pass%2Fclock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fclock.rs?ref=d902a1157571cc9c34fff14f927b805bb18f6a53", "patch": "@@ -0,0 +1,8 @@\n+// ignore-windows: TODO clock shims are not implemented on Windows\n+// compile-flags: -Zmiri-disable-isolation\n+\n+use std::time::SystemTime;\n+\n+fn main() {\n+   let _now = SystemTime::now();\n+}"}]}