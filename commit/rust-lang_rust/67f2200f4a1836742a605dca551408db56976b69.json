{"sha": "67f2200f4a1836742a605dca551408db56976b69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZjIyMDBmNGExODM2NzQyYTYwNWRjYTU1MTQwOGRiNTY5NzZiNjk=", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2019-11-03T20:53:21Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2019-11-04T18:47:31Z"}, "message": "Minor style improvements\n\nCo-Authored-By: Ralf Jung <post@ralfj.de>", "tree": {"sha": "262d55ec51ed4feec9806ae62c6c16241a2ff709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/262d55ec51ed4feec9806ae62c6c16241a2ff709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67f2200f4a1836742a605dca551408db56976b69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67f2200f4a1836742a605dca551408db56976b69", "html_url": "https://github.com/rust-lang/rust/commit/67f2200f4a1836742a605dca551408db56976b69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67f2200f4a1836742a605dca551408db56976b69/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9087cb388c00ec9a53f7a3049afb2ce00ce56fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9087cb388c00ec9a53f7a3049afb2ce00ce56fa", "html_url": "https://github.com/rust-lang/rust/commit/d9087cb388c00ec9a53f7a3049afb2ce00ce56fa"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "51ba260589f622832aed220ad2d8ff173f5c19db", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/67f2200f4a1836742a605dca551408db56976b69/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f2200f4a1836742a605dca551408db56976b69/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=67f2200f4a1836742a605dca551408db56976b69", "patch": "@@ -527,19 +527,15 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// ```rust\n     /// #![feature(maybe_uninit_ref)]\n-    /// use ::std::mem::MaybeUninit;\n+    /// use std::mem::MaybeUninit;\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n     /// // Initialize `x`:\n     /// unsafe { x.as_mut_ptr().write(vec![1, 2, 3]); }\n-    /// /* The above line can also be done without unsafe:\n-    /// x = MaybeUninit::new(vec![1, 2, 3]); // */\n     /// // Now that our `MaybeUninit<_>` is known to be initialized, it is okay to\n     /// // create a shared reference to it:\n     /// let x: &Vec<u32> = unsafe {\n-    ///     // # Safety\n-    ///     //\n-    ///     //   - `x` has been initialized.\n+    ///     // Safety: `x` has been initialized.\n     ///     x.get_ref()\n     /// };\n     /// assert_eq!(x, &vec![1, 2, 3]);\n@@ -594,27 +590,25 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// ```rust\n     /// #![feature(maybe_uninit_ref)]\n-    /// use ::std::mem::MaybeUninit;\n+    /// use std::mem::MaybeUninit;\n     ///\n-    /// # unsafe extern \"C\" fn initialize_buffer (buf: *mut [u8; 2048]) { *buf = [0; 2048] }\n+    /// # unsafe extern \"C\" fn initialize_buffer(buf: *mut [u8; 2048]) { *buf = [0; 2048] }\n     /// # #[cfg(FALSE)]\n     /// extern \"C\" {\n     ///     /// Initializes *all* the bytes of the input buffer.\n-    ///     fn initialize_buffer (buf: *mut [u8; 2048]);\n+    ///     fn initialize_buffer(buf: *mut [u8; 2048]);\n     /// }\n     ///\n     /// let mut buf = MaybeUninit::<[u8; 2048]>::uninit();\n     ///\n     /// // Initialize `buf`:\n     /// unsafe { initialize_buffer(buf.as_mut_ptr()); }\n-    /// // Now we know that `buf` has been initialized; so we could `.assume_init()` it.\n+    /// // Now we know that `buf` has been initialized, so we could `.assume_init()` it.\n     /// // However, using `.assume_init()` may trigger a `memcpy` of the 2048 bytes.\n     /// // To assert our buffer has been initialized without copying it, we upgrade\n     /// // the `&mut MaybeUninit<[u8; 2048]>` to a `&mut [u8; 2048]`:\n     /// let buf: &mut [u8; 2048] = unsafe {\n-    ///     // # Safety\n-    ///     //\n-    ///     //   - `buf` has been initialized.\n+    ///     // Safety: `buf` has been initialized.\n     ///     buf.get_mut()\n     /// };\n     ///"}]}