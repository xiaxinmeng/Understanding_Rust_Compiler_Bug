{"sha": "62ff543c36fbfccf152fc3869c26767f908995c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZmY1NDNjMzZmYmZjY2YxNTJmYzM4NjljMjY3NjdmOTA4OTk1Yzc=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-14T21:09:32Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:41:35Z"}, "message": "Simplify register name output for x86", "tree": {"sha": "b44446d34f82bc5f985cf8c9182f0f102808b73c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b44446d34f82bc5f985cf8c9182f0f102808b73c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62ff543c36fbfccf152fc3869c26767f908995c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62ff543c36fbfccf152fc3869c26767f908995c7", "html_url": "https://github.com/rust-lang/rust/commit/62ff543c36fbfccf152fc3869c26767f908995c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62ff543c36fbfccf152fc3869c26767f908995c7/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a20f396727a6f5713f9f6ffa7f0ed18b296558a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a20f396727a6f5713f9f6ffa7f0ed18b296558a", "html_url": "https://github.com/rust-lang/rust/commit/5a20f396727a6f5713f9f6ffa7f0ed18b296558a"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "ed51b526414d138bf78af559094348bfffd95ea5", "filename": "src/librustc_target/asm/x86.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/62ff543c36fbfccf152fc3869c26767f908995c7/src%2Flibrustc_target%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ff543c36fbfccf152fc3869c26767f908995c7/src%2Flibrustc_target%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fx86.rs?ref=62ff543c36fbfccf152fc3869c26767f908995c7", "patch": "@@ -297,7 +297,7 @@ impl X86InlineAsmReg {\n                 _ => unreachable!(),\n             }\n         } else if self as u32 <= Self::di as u32 {\n-            let root = [\"si\", \"di\"][self as usize - Self::si as usize];\n+            let root = self.name();\n             match modifier.unwrap_or(reg_default_modifier) {\n                 'l' => write!(out, \"{}l\", root),\n                 'x' => write!(out, \"{}\", root),\n@@ -306,12 +306,12 @@ impl X86InlineAsmReg {\n                 _ => unreachable!(),\n             }\n         } else if self as u32 <= Self::r15 as u32 {\n-            let index = self as u32 - Self::r8 as u32 + 8;\n+            let root = self.name();\n             match modifier.unwrap_or(reg_default_modifier) {\n-                'l' => write!(out, \"r{}b\", index),\n-                'x' => write!(out, \"r{}w\", index),\n-                'e' => write!(out, \"r{}d\", index),\n-                'r' => write!(out, \"r{}\", index),\n+                'l' => write!(out, \"{}b\", root),\n+                'x' => write!(out, \"{}w\", root),\n+                'e' => write!(out, \"{}d\", root),\n+                'r' => out.write_str(root),\n                 _ => unreachable!(),\n             }\n         } else if self as u32 <= Self::r15b as u32 {\n@@ -329,8 +329,7 @@ impl X86InlineAsmReg {\n             let index = self as u32 - Self::zmm0 as u32;\n             write!(out, \"{}{}\", prefix, index)\n         } else {\n-            let index = self as u32 - Self::k1 as u32 + 1;\n-            write!(out, \"k{}\", index)\n+            out.write_str(self.name())\n         }\n     }\n "}]}