{"sha": "beac68a88711a90346ec8b68e3baefbec62b3b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYWM2OGE4ODcxMWE5MDM0NmVjOGI2OGUzYmFlZmJlYzYyYjNiMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-01T17:39:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-01T17:39:05Z"}, "message": "Auto merge of #69612 - Dylan-DPC:rollup-f180gcc, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #69504 (Use assert_ne in hash tests)\n - #69554 (Cleanup e0374)\n - #69568 (Clarify explanation of Vec<T> 'fn resize')\n - #69569 (simplify boolean expressions)\n - #69577 (Clean up E0375 explanation)\n - #69598 (rustdoc: HTML escape crate version)\n - #69607 (Clean up E0376 explanation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "1b259905fed71996a78fd2f9c2e48310151c31c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b259905fed71996a78fd2f9c2e48310151c31c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beac68a88711a90346ec8b68e3baefbec62b3b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beac68a88711a90346ec8b68e3baefbec62b3b0d", "html_url": "https://github.com/rust-lang/rust/commit/beac68a88711a90346ec8b68e3baefbec62b3b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beac68a88711a90346ec8b68e3baefbec62b3b0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "360e42de82152c4e1a6e70d2f228dd3748c50c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/360e42de82152c4e1a6e70d2f228dd3748c50c8d", "html_url": "https://github.com/rust-lang/rust/commit/360e42de82152c4e1a6e70d2f228dd3748c50c8d"}, {"sha": "d3a5a5d20bb128dd08ac37717f6415baf80d5039", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3a5a5d20bb128dd08ac37717f6415baf80d5039", "html_url": "https://github.com/rust-lang/rust/commit/d3a5a5d20bb128dd08ac37717f6415baf80d5039"}], "stats": {"total": 97, "additions": 55, "deletions": 42}, "files": [{"sha": "9908a3049763a1eca04e6b8fbf3b3cf191e6b0e2", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -536,7 +536,7 @@ impl<T: Ord> BinaryHeap<T> {\n             while child < end {\n                 let right = child + 1;\n                 // compare with the greater of the two children\n-                if right < end && !(hole.get(child) > hole.get(right)) {\n+                if right < end && hole.get(child) <= hole.get(right) {\n                     child = right;\n                 }\n                 // if we are already in order, stop.\n@@ -568,7 +568,7 @@ impl<T: Ord> BinaryHeap<T> {\n             while child < end {\n                 let right = child + 1;\n                 // compare with the greater of the two children\n-                if right < end && !(hole.get(child) > hole.get(right)) {\n+                if right < end && hole.get(child) <= hole.get(right) {\n                     child = right;\n                 }\n                 hole.move_to(child);"}, {"sha": "3fd7be06fd4fcdc2da1f0add25cee5c78b0d924a", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -1476,8 +1476,9 @@ impl<T: Clone> Vec<T> {\n     /// difference, with each additional slot filled with `value`.\n     /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n     ///\n-    /// This method requires [`Clone`] to be able clone the passed value. If\n-    /// you need more flexibility (or want to rely on [`Default`] instead of\n+    /// This method requires `T` to implement [`Clone`],\n+    /// in order to be able to clone the passed value.\n+    /// If you need more flexibility (or want to rely on [`Default`] instead of\n     /// [`Clone`]), use [`resize_with`].\n     ///\n     /// # Examples"}, {"sha": "5c0e114e93c158098ea579352ab50fc9c208fa82", "filename": "src/libcore/tests/hash/sip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -298,7 +298,6 @@ fn test_hash_no_concat_alias() {\n     let t = (\"aabb\", \"\");\n     let u = (\"a\", \"abb\");\n \n-    assert!(s != t && t != u);\n     assert_ne!(s, t);\n     assert_ne!(t, u);\n     assert_ne!(hash(&s), hash(&t));"}, {"sha": "3916653eb1d767cd217036b359e3bca647f91632", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -2135,7 +2135,7 @@ fn set_members_of_composite_type(\n /// Computes the type parameters for a type, if any, for the given metadata.\n fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> Option<&'ll DIArray> {\n     if let ty::Adt(def, substs) = ty.kind {\n-        if !substs.types().next().is_none() {\n+        if substs.types().next().is_some() {\n             let generics = cx.tcx.generics_of(def.did);\n             let names = get_parameter_names(cx, generics);\n             let template_params: Vec<_> = substs"}, {"sha": "2dc1405f4e438358c000b67973b98e8ff243c39b", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -48,7 +48,7 @@ pub struct DebugScope<D> {\n \n impl<D> DebugScope<D> {\n     pub fn is_valid(&self) -> bool {\n-        !self.scope_metadata.is_none()\n+        self.scope_metadata.is_some()\n     }\n }\n \n@@ -304,7 +304,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     ) -> Option<IndexVec<mir::Local, Vec<PerLocalVarDebugInfo<'tcx, Bx::DIVariable>>>> {\n         let full_debug_info = self.cx.sess().opts.debuginfo == DebugInfo::Full;\n \n-        if !(full_debug_info || !self.cx.sess().fewer_names()) {\n+        if !full_debug_info && self.cx.sess().fewer_names() {\n             return None;\n         }\n "}, {"sha": "6d7dc88823c9926fb7dce082397d4995ab6059af", "filename": "src/librustc_error_codes/error_codes/E0374.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0374.md", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0374.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0374.md?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -1,9 +1,5 @@\n-A struct without a field containing an unsized type cannot implement\n-`CoerceUnsized`. An [unsized type][1] is any type that the compiler\n-doesn't know the length or alignment of at compile time. Any struct\n-containing an unsized type is also unsized.\n-\n-[1]: https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n+`CoerceUnsized` was implemented on a struct which does not contain a field with\n+an unsized type.\n \n Example of erroneous code:\n \n@@ -20,6 +16,12 @@ impl<T, U> CoerceUnsized<Foo<U>> for Foo<T>\n     where T: CoerceUnsized<U> {}\n ```\n \n+An [unsized type][1] is any type where the compiler does not know the length or\n+alignment of at compile time. Any struct containing an unsized type is also\n+unsized.\n+\n+[1]: https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n+\n `CoerceUnsized` is used to coerce one struct containing an unsized type\n into another struct containing a different unsized type. If the struct\n doesn't have any fields of unsized types then you don't need explicit"}, {"sha": "71e530571650b53357047ff647ec0337e7327315", "filename": "src/librustc_error_codes/error_codes/E0375.md", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0375.md", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0375.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0375.md?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -1,12 +1,7 @@\n-A struct with more than one field containing an unsized type cannot implement\n-`CoerceUnsized`. This only occurs when you are trying to coerce one of the\n-types in your struct to another type in the struct. In this case we try to\n-impl `CoerceUnsized` from `T` to `U` which are both types that the struct\n-takes. An [unsized type][1] is any type that the compiler doesn't know the\n-length or alignment of at compile time. Any struct containing an unsized type\n-is also unsized.\n+`CoerceUnsized` was implemented on a struct which contains more than one field\n+with an unsized type.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0375\n #![feature(coerce_unsized)]\n@@ -22,6 +17,14 @@ struct Foo<T: ?Sized, U: ?Sized> {\n impl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {}\n ```\n \n+A struct with more than one field containing an unsized type cannot implement\n+`CoerceUnsized`. This only occurs when you are trying to coerce one of the\n+types in your struct to another type in the struct. In this case we try to\n+impl `CoerceUnsized` from `T` to `U` which are both types that the struct\n+takes. An [unsized type][1] is any type that the compiler doesn't know the\n+length or alignment of at compile time. Any struct containing an unsized type\n+is also unsized.\n+\n `CoerceUnsized` only allows for coercion from a structure with a single\n unsized type field to another struct with a single unsized type field.\n In fact Rust only allows for a struct to have one unsized type in a struct"}, {"sha": "50de15bd30f09ac87544ec01d2ce362af83b0439", "filename": "src/librustc_error_codes/error_codes/E0376.md", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0376.md", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0376.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0376.md?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -1,14 +1,6 @@\n-The type you are trying to impl `CoerceUnsized` for is not a struct.\n-`CoerceUnsized` can only be implemented for a struct. Unsized types are\n-already able to be coerced without an implementation of `CoerceUnsized`\n-whereas a struct containing an unsized type needs to know the unsized type\n-field it's containing is able to be coerced. An [unsized type][1]\n-is any type that the compiler doesn't know the length or alignment of at\n-compile time. Any struct containing an unsized type is also unsized.\n-\n-[1]: https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n+`CoerceUnsized` was implemented on something that isn't a struct.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0376\n #![feature(coerce_unsized)]\n@@ -22,6 +14,15 @@ struct Foo<T: ?Sized> {\n impl<T, U> CoerceUnsized<U> for Foo<T> {}\n ```\n \n+`CoerceUnsized` can only be implemented for a struct. Unsized types are\n+already able to be coerced without an implementation of `CoerceUnsized`\n+whereas a struct containing an unsized type needs to know the unsized type\n+field it's containing is able to be coerced. An [unsized type][1]\n+is any type that the compiler doesn't know the length or alignment of at\n+compile time. Any struct containing an unsized type is also unsized.\n+\n+[1]: https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n+\n The `CoerceUnsized` trait takes a struct type. Make sure the type you are\n providing to `CoerceUnsized` is a struct with only the last field containing an\n unsized type."}, {"sha": "f7141c56199d79e0401c179334fd4bb4c125256e", "filename": "src/librustc_infer/infer/freshen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -143,9 +143,9 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.needs_infer()\n-            && !t.has_erasable_regions()\n-            && !(t.has_closure_types() && self.infcx.in_progress_tables.is_some())\n+        if !(t.needs_infer()\n+            || t.has_erasable_regions()\n+            || (t.has_closure_types() && self.infcx.in_progress_tables.is_some()))\n         {\n             return t;\n         }"}, {"sha": "36572826ae4a326107c48404d5d804df44d42655", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -1484,7 +1484,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         // Even if the type may have no inference variables, during\n         // type-checking closure types are in local tables only.\n-        if !self.in_progress_tables.is_some() || !ty.has_closure_types() {\n+        if self.in_progress_tables.is_none() || !ty.has_closure_types() {\n             if !(param_env, ty).has_local_value() {\n                 return ty.is_copy_modulo_regions(self.tcx, param_env, span);\n             }"}, {"sha": "f075385ae18b9ac18baf1e8f9cccd58dd3446537", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -551,7 +551,7 @@ impl Visitor<'tcx> for Checker<'tcx> {\n                     .emit();\n                 } else {\n                     let param_env = self.tcx.param_env(def_id);\n-                    if !can_type_implement_copy(self.tcx, param_env, ty).is_ok() {\n+                    if can_type_implement_copy(self.tcx, param_env, ty).is_err() {\n                         feature_err(\n                             &self.tcx.sess.parse_sess,\n                             sym::untagged_unions,"}, {"sha": "2f84e9813663f82cae5f714e2aa9c10afa4596f5", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -313,9 +313,9 @@ impl<'a> Resolver<'a> {\n                             }\n                         }\n \n-                        if !self.is_accessible_from(binding.vis, parent_scope.module) &&\n+                        if !(self.is_accessible_from(binding.vis, parent_scope.module) ||\n                        // Remove this together with `PUB_USE_OF_PRIVATE_EXTERN_CRATE`\n-                       !(self.last_import_segment && binding.is_extern_crate())\n+                       (self.last_import_segment && binding.is_extern_crate()))\n                         {\n                             self.privacy_errors.push(PrivacyError {\n                                 ident,"}, {"sha": "4dd2a6562a4cdcde5cf2f54c32f2d341d6f7ab39", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -1313,7 +1313,8 @@ impl Context {\n                          <p>Version {}</p>\\\n                      </div>\\\n                      <a id='all-types' href='index.html'><p>Back to index</p></a>\",\n-                crate_name, version\n+                crate_name,\n+                Escape(version),\n             )\n         } else {\n             String::new()\n@@ -3974,7 +3975,7 @@ fn print_sidebar(cx: &Context, it: &clean::Item, buffer: &mut Buffer) {\n                 \"<div class='block version'>\\\n                     <p>Version {}</p>\\\n                     </div>\",\n-                version\n+                Escape(version)\n             );\n         }\n     }"}, {"sha": "3f38ee5471081afeac9354c8c89dff56abd45876", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -206,7 +206,7 @@ impl<'a> Parser<'a> {\n         }\n \n         // read `::` if previous code parsed less than 8 groups\n-        if !self.read_given_char(':').is_some() || !self.read_given_char(':').is_some() {\n+        if self.read_given_char(':').is_none() || self.read_given_char(':').is_none() {\n             return None;\n         }\n "}, {"sha": "2f91eea339b39afd6133b2aff753751717f90bb2", "filename": "src/test/rustdoc/crate-version-escape.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Ftest%2Frustdoc%2Fcrate-version-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beac68a88711a90346ec8b68e3baefbec62b3b0d/src%2Ftest%2Frustdoc%2Fcrate-version-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcrate-version-escape.rs?ref=beac68a88711a90346ec8b68e3baefbec62b3b0d", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: --crate-version=<script>alert(\"hi\")</script> -Z unstable-options\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/index.html' '//div[@class=\"block version\"]/p' 'Version <script>alert(\"hi\")</script>'\n+// @has 'foo/all.html' '//div[@class=\"block version\"]/p' 'Version <script>alert(\"hi\")</script>'"}]}