{"sha": "fe1975448cf180a39393104a7b424291975998d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMTk3NTQ0OGNmMTgwYTM5MzkzMTA0YTdiNDI0MjkxOTc1OTk4ZDQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-11T21:39:32Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-03-15T01:04:20Z"}, "message": "Suggest using `move` when trying to share `...::channel::{Receiver, Sender}`\n\nExtend `rustc_on_unimplemented` to match on ADT without evaluating type\narguments.", "tree": {"sha": "cb25d1191fee804b2d64786e50bb1b5b563bf30e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb25d1191fee804b2d64786e50bb1b5b563bf30e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe1975448cf180a39393104a7b424291975998d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1975448cf180a39393104a7b424291975998d4", "html_url": "https://github.com/rust-lang/rust/commit/fe1975448cf180a39393104a7b424291975998d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe1975448cf180a39393104a7b424291975998d4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d8a1739805fa81b6baa8c86efc3e79920ecb306", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8a1739805fa81b6baa8c86efc3e79920ecb306", "html_url": "https://github.com/rust-lang/rust/commit/6d8a1739805fa81b6baa8c86efc3e79920ecb306"}], "stats": {"total": 95, "additions": 81, "deletions": 14}, "files": [{"sha": "51d2e29e6b15a2c1a7c46696a9338f85147fb7a5", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe1975448cf180a39393104a7b424291975998d4/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1975448cf180a39393104a7b424291975998d4/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=fe1975448cf180a39393104a7b424291975998d4", "patch": "@@ -344,6 +344,14 @@ pub trait Copy : Clone {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sync\"]\n #[rustc_on_unimplemented(\n+    on(\n+        _Self=\"std::sync::mpsc::Receiver<T>\",\n+        label=\"`{Self}` cannot be shared safely, if using a closure consider marking it `move`\"\n+    ),\n+    on(\n+        _Self=\"std::sync::mpsc::Sender<T>\",\n+        label=\"`{Self}` cannot be shared safely, if using a closure consider marking it `move`\"\n+    ),\n     message=\"`{Self}` cannot be shared between threads safely\",\n     label=\"`{Self}` cannot be shared between threads safely\"\n )]"}, {"sha": "9cdab856b05eca0bacc171ebe7e1e56a634add29", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fe1975448cf180a39393104a7b424291975998d4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1975448cf180a39393104a7b424291975998d4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=fe1975448cf180a39393104a7b424291975998d4", "patch": "@@ -338,18 +338,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             .unwrap_or(trait_ref.def_id());\n         let trait_ref = *trait_ref.skip_binder();\n \n-        let desugaring;\n-        let method;\n         let mut flags = vec![];\n-        let direct = match obligation.cause.code {\n+        match obligation.cause.code {\n             ObligationCauseCode::BuiltinDerivedObligation(..) |\n-            ObligationCauseCode::ImplDerivedObligation(..) => false,\n-            _ => true\n-        };\n-        if direct {\n-            // this is a \"direct\", user-specified, rather than derived,\n-            // obligation.\n-            flags.push((\"direct\".to_string(), None));\n+            ObligationCauseCode::ImplDerivedObligation(..) => {}\n+            _ => {\n+                // this is a \"direct\", user-specified, rather than derived,\n+                // obligation.\n+                flags.push((\"direct\".to_string(), None));\n+            }\n         }\n \n         if let ObligationCauseCode::ItemObligation(item) = obligation.cause.code {\n@@ -359,21 +356,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             //\n             // Currently I'm leaving it for what I need for `try`.\n             if self.tcx.trait_of_item(item) == Some(trait_ref.def_id) {\n-                method = self.tcx.item_name(item);\n+                let method = self.tcx.item_name(item);\n                 flags.push((\"from_method\".to_string(), None));\n                 flags.push((\"from_method\".to_string(), Some(method.to_string())));\n             }\n         }\n \n         if let Some(k) = obligation.cause.span.compiler_desugaring_kind() {\n-            desugaring = k.as_symbol().as_str();\n+            let desugaring = k.as_symbol().as_str();\n             flags.push((\"from_desugaring\".to_string(), None));\n             flags.push((\"from_desugaring\".to_string(), Some(desugaring.to_string())));\n         }\n         let generics = self.tcx.generics_of(def_id);\n         let self_ty = trait_ref.self_ty();\n-        let self_ty_str = self_ty.to_string();\n-        flags.push((\"_Self\".to_string(), Some(self_ty_str.clone())));\n+        // This is also included through the generics list as `Self`,\n+        // but the parser won't allow you to use it\n+        flags.push((\"_Self\".to_string(), Some(self_ty.to_string())));\n+        if let Some(def) = self_ty.ty_adt_def() {\n+            // We also want to be able to select self's original\n+            // signature with no type arguments resolved\n+            flags.push((\"_Self\".to_string(), Some(self.tcx.type_of(def.did).to_string())));\n+        }\n \n         for param in generics.types.iter() {\n             let name = param.name.as_str().to_string();"}, {"sha": "e096e7ca3a06bd3ea15c5aa7da3e2f8d890f5122", "filename": "src/test/ui/closure-move-sync.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fe1975448cf180a39393104a7b424291975998d4/src%2Ftest%2Fui%2Fclosure-move-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1975448cf180a39393104a7b424291975998d4/src%2Ftest%2Fui%2Fclosure-move-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-move-sync.rs?ref=fe1975448cf180a39393104a7b424291975998d4", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::thread;\n+use std::sync::mpsc::channel;\n+\n+fn bar() {\n+    let (send, recv) = channel();\n+    let t = thread::spawn(|| {\n+        recv.recv().unwrap();\n+        //~^^ ERROR `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n+    });\n+\n+    send.send(());\n+\n+    t.join().unwrap();\n+}\n+\n+fn foo() {\n+    let (tx, _rx) = channel();\n+    thread::spawn(|| tx.send(()).unwrap());\n+    //~^ ERROR `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n+}\n+\n+fn main() {}"}, {"sha": "fc53deeeef7ad8bacd075dc3f96cdef8abd5b2a0", "filename": "src/test/ui/closure-move-sync.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fe1975448cf180a39393104a7b424291975998d4/src%2Ftest%2Fui%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe1975448cf180a39393104a7b424291975998d4/src%2Ftest%2Fui%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-move-sync.stderr?ref=fe1975448cf180a39393104a7b424291975998d4", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n+  --> $DIR/closure-move-sync.rs:16:13\n+   |\n+16 |     let t = thread::spawn(|| {\n+   |             ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<()>` cannot be shared safely, if using a closure consider marking it `move`\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Receiver<()>`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:16:27: 19:6 recv:&std::sync::mpsc::Receiver<()>]`\n+   = note: required by `std::thread::spawn`\n+\n+error[E0277]: `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n+  --> $DIR/closure-move-sync.rs:28:5\n+   |\n+28 |     thread::spawn(|| tx.send(()).unwrap());\n+   |     ^^^^^^^^^^^^^ `std::sync::mpsc::Sender<()>` cannot be shared safely, if using a closure consider marking it `move`\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<()>`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Sender<()>`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:28:19: 28:42 tx:&std::sync::mpsc::Sender<()>]`\n+   = note: required by `std::thread::spawn`\n+\n+error: aborting due to 2 previous errors\n+"}]}