{"sha": "32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNDcxZjdlYTRjYTVhOTIxOGQ4NmNmOGIxZDhmODU5MTlkYzA5NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-19T00:46:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-19T00:46:12Z"}, "message": "Auto merge of #58503 - varkor:const-generics-hir, r=petrochenkov\n\nAdd const generics to the HIR\n\nSplit out from https://github.com/rust-lang/rust/pull/53645.\n\ncc @yodaldevoid\n\nr? @eddyb", "tree": {"sha": "86f31bae8b69f77d189822f3e68c67c6eb6f54f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f31bae8b69f77d189822f3e68c67c6eb6f54f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "html_url": "https://github.com/rust-lang/rust/commit/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c61b92beaa544b4e24ea63380d2ef5c93ed8fc9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c61b92beaa544b4e24ea63380d2ef5c93ed8fc9c", "html_url": "https://github.com/rust-lang/rust/commit/c61b92beaa544b4e24ea63380d2ef5c93ed8fc9c"}, {"sha": "727e20410c61293f38b7f7984a469dc7daad632a", "url": "https://api.github.com/repos/rust-lang/rust/commits/727e20410c61293f38b7f7984a469dc7daad632a", "html_url": "https://github.com/rust-lang/rust/commit/727e20410c61293f38b7f7984a469dc7daad632a"}], "stats": {"total": 581, "additions": 390, "deletions": 191}, "files": [{"sha": "f6d864f5b404dc82a0cc1023f96557b64290efdf", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -52,13 +52,13 @@ pub enum Def {\n     AssociatedExistential(DefId),\n     PrimTy(hir::PrimTy),\n     TyParam(DefId),\n-    ConstParam(DefId),\n     SelfTy(Option<DefId> /* trait */, Option<DefId> /* impl */),\n     ToolMod, // e.g., `rustfmt` in `#[rustfmt::skip]`\n \n     // Value namespace\n     Fn(DefId),\n     Const(DefId),\n+    ConstParam(DefId),\n     Static(DefId, bool /* is_mutbl */),\n     StructCtor(DefId, CtorKind), // `DefId` refers to `NodeId` of the struct's constructor\n     VariantCtor(DefId, CtorKind), // `DefId` refers to the enum variant"}, {"sha": "94b036fded5a156e68431ea26de2e2ff7ca562b6", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -334,6 +334,7 @@ pub trait Visitor<'v> : Sized {\n         match generic_arg {\n             GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n             GenericArg::Type(ty) => self.visit_ty(ty),\n+            GenericArg::Const(ct) => self.visit_anon_const(&ct.value),\n         }\n     }\n     fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n@@ -752,6 +753,7 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n     match param.kind {\n         GenericParamKind::Lifetime { .. } => {}\n         GenericParamKind::Type { ref default, .. } => walk_list!(visitor, visit_ty, default),\n+        GenericParamKind::Const { ref ty } => visitor.visit_ty(ty),\n     }\n     walk_list!(visitor, visit_param_bound, &param.bounds);\n }"}, {"sha": "52c3eb26d61805eaa6406b4d32b04bcb834f7218", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -36,7 +36,7 @@ use crate::hir::HirVec;\n use crate::hir::map::{DefKey, DefPathData, Definitions};\n use crate::hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n use crate::hir::def::{Def, PathResolution, PerNS};\n-use crate::hir::GenericArg;\n+use crate::hir::{GenericArg, ConstArg};\n use crate::lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n                     ELIDED_LIFETIMES_IN_PATHS};\n use crate::middle::cstore::CrateStore;\n@@ -1172,13 +1172,10 @@ impl<'a> LoweringContext<'a> {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n             ast::GenericArg::Type(ty) => GenericArg::Type(self.lower_ty_direct(&ty, itctx)),\n             ast::GenericArg::Const(ct) => {\n-                // FIXME(const_generics): const generics are not yet defined in the HIR.\n-                self.sess.struct_span_err(\n-                    ct.value.span,\n-                    \"const generics in any position are currently unsupported\",\n-                ).emit();\n-                self.sess.abort_if_errors();\n-                bug!();\n+                GenericArg::Const(ConstArg {\n+                    value: self.lower_anon_const(&ct),\n+                    span: ct.value.span,\n+                })\n             }\n         }\n     }\n@@ -2520,14 +2517,10 @@ impl<'a> LoweringContext<'a> {\n \n                 (hir::ParamName::Plain(ident), kind)\n             }\n-            GenericParamKind::Const { .. } => {\n-                // FIXME(const_generics): const generics are not yet defined in the HIR.\n-                self.sess.struct_span_err(\n-                    param.ident.span,\n-                    \"const generics in any position are currently unsupported\",\n-                ).emit();\n-                self.sess.abort_if_errors();\n-                bug!();\n+            GenericParamKind::Const { ref ty } => {\n+                (hir::ParamName::Plain(param.ident), hir::GenericParamKind::Const {\n+                    ty: self.lower_ty(&ty, ImplTraitContext::disallowed()),\n+                })\n             }\n         };\n "}, {"sha": "e933e4b7180c49c525460f394a28a4f6c206e17b", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -398,6 +398,7 @@ impl<'hir> Map<'hir> {\n                 Some(match param.kind {\n                     GenericParamKind::Lifetime { .. } => Def::Local(param.id),\n                     GenericParamKind::Type { .. } => Def::TyParam(self.local_def_id(param.id)),\n+                    GenericParamKind::Const { .. } => Def::ConstParam(self.local_def_id(param.id)),\n                 })\n             }\n         }"}, {"sha": "d7d56ef659afb8f6bdafc2ae7e3b2aaae38c1fea", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -389,24 +389,33 @@ impl PathSegment {\n     }\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct ConstArg {\n+    pub value: AnonConst,\n+    pub span: Span,\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericArg {\n     Lifetime(Lifetime),\n     Type(Ty),\n+    Const(ConstArg),\n }\n \n impl GenericArg {\n     pub fn span(&self) -> Span {\n         match self {\n             GenericArg::Lifetime(l) => l.span,\n             GenericArg::Type(t) => t.span,\n+            GenericArg::Const(c) => c.span,\n         }\n     }\n \n     pub fn id(&self) -> NodeId {\n         match self {\n             GenericArg::Lifetime(l) => l.id,\n             GenericArg::Type(t) => t.id,\n+            GenericArg::Const(c) => c.value.id,\n         }\n     }\n }\n@@ -448,6 +457,7 @@ impl GenericArgs {\n                         }\n                         break;\n                     }\n+                    GenericArg::Const(_) => {}\n                 }\n             }\n         }\n@@ -464,6 +474,7 @@ impl GenericArgs {\n             match arg {\n                 GenericArg::Lifetime(_) => own_counts.lifetimes += 1,\n                 GenericArg::Type(_) => own_counts.types += 1,\n+                GenericArg::Const(_) => own_counts.consts += 1,\n             };\n         }\n \n@@ -528,6 +539,9 @@ pub enum GenericParamKind {\n     Type {\n         default: Option<P<Ty>>,\n         synthetic: Option<SyntheticTyParamKind>,\n+    },\n+    Const {\n+        ty: P<Ty>,\n     }\n }\n \n@@ -548,6 +562,7 @@ pub struct GenericParam {\n pub struct GenericParamCount {\n     pub lifetimes: usize,\n     pub types: usize,\n+    pub consts: usize,\n }\n \n /// Represents lifetimes and type parameters attached to a declaration\n@@ -582,6 +597,7 @@ impl Generics {\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => own_counts.lifetimes += 1,\n                 GenericParamKind::Type { .. } => own_counts.types += 1,\n+                GenericParamKind::Const { .. } => own_counts.consts += 1,\n             };\n         }\n \n@@ -1302,7 +1318,7 @@ impl BodyOwnerKind {\n /// These are usually found nested inside types (e.g., array lengths)\n /// or expressions (e.g., repeat counts), and also used to define\n /// explicit discriminant values for enum variants.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n pub struct AnonConst {\n     pub id: NodeId,\n     pub hir_id: HirId,"}, {"sha": "312351ab850c2ee1a5ac76c07b4699b153e688b5", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -64,19 +64,6 @@ impl hir::Pat {\n         }\n     }\n \n-    pub fn is_const(&self) -> bool {\n-        match self.node {\n-            PatKind::Path(hir::QPath::TypeRelative(..)) => true,\n-            PatKind::Path(hir::QPath::Resolved(_, ref path)) => {\n-                match path.def {\n-                    Def::Const(..) | Def::AssociatedConst(..) => true,\n-                    _ => false\n-                }\n-            }\n-            _ => false\n-        }\n-    }\n-\n     /// Call `f` on every \"binding\" in a pattern, e.g., on `a` in\n     /// `match foo() { Some(a) => (), None => () }`\n     pub fn each_binding<F>(&self, mut f: F)"}, {"sha": "031b3a3233d6f2cc57899ed45d2f1edaa068a5fc", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -1711,31 +1711,25 @@ impl<'a> State<'a> {\n                 }\n             };\n \n-            let mut types = vec![];\n-            let mut elide_lifetimes = true;\n-            for arg in &generic_args.args {\n-                match arg {\n-                    GenericArg::Lifetime(lt) => {\n-                        if !lt.is_elided() {\n-                            elide_lifetimes = false;\n-                        }\n-                    }\n-                    GenericArg::Type(ty) => {\n-                        types.push(ty);\n-                    }\n+            let mut nonelided_generic_args: bool = false;\n+            let elide_lifetimes = generic_args.args.iter().all(|arg| match arg {\n+                GenericArg::Lifetime(lt) => lt.is_elided(),\n+                _ => {\n+                    nonelided_generic_args = true;\n+                    true\n                 }\n-            }\n-            if !elide_lifetimes {\n+            });\n+\n+            if nonelided_generic_args {\n                 start_or_comma(self)?;\n                 self.commasep(Inconsistent, &generic_args.args, |s, generic_arg| {\n                     match generic_arg {\n-                        GenericArg::Lifetime(lt) => s.print_lifetime(lt),\n+                        GenericArg::Lifetime(lt) if !elide_lifetimes => s.print_lifetime(lt),\n+                        GenericArg::Lifetime(_) => Ok(()),\n                         GenericArg::Type(ty) => s.print_type(ty),\n+                        GenericArg::Const(ct) => s.print_anon_const(&ct.value),\n                     }\n                 })?;\n-            } else if !types.is_empty() {\n-                start_or_comma(self)?;\n-                self.commasep(Inconsistent, &types, |s, ty| s.print_type(&ty))?;\n             }\n \n             // FIXME(eddyb) This would leak into error messages, e.g.:\n@@ -2106,7 +2100,12 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_generic_param(&mut self, param: &GenericParam) -> io::Result<()> {\n+        if let GenericParamKind::Const { .. } = param.kind {\n+            self.word_space(\"const\")?;\n+        }\n+\n         self.print_ident(param.name.ident())?;\n+\n         match param.kind {\n             GenericParamKind::Lifetime { .. } => {\n                 let mut sep = \":\";\n@@ -2133,6 +2132,10 @@ impl<'a> State<'a> {\n                     _ => Ok(()),\n                 }\n             }\n+            GenericParamKind::Const { ref ty } => {\n+                self.word_space(\":\")?;\n+                self.print_type(ty)\n+            }\n         }\n     }\n "}, {"sha": "727c441b0e8dba59e462567d577b13bcc00dc993", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -179,9 +179,15 @@ impl_stable_hash_for!(struct hir::PathSegment {\n     args\n });\n \n+impl_stable_hash_for!(struct hir::ConstArg {\n+    value,\n+    span,\n+});\n+\n impl_stable_hash_for!(enum hir::GenericArg {\n     Lifetime(lt),\n-    Type(ty)\n+    Type(ty),\n+    Const(ct),\n });\n \n impl_stable_hash_for!(struct hir::GenericArgs {\n@@ -231,6 +237,9 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::GenericParamKind {\n                 default.hash_stable(hcx, hasher);\n                 synthetic.hash_stable(hcx, hasher);\n             }\n+            hir::GenericParamKind::Const { ref ty } => {\n+                ty.hash_stable(hcx, hasher);\n+            }\n         }\n     }\n }"}, {"sha": "56e7d789356989f7ab1027209686df687657b329", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -704,7 +704,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                hir_id, expr_ty, def);\n \n         match def {\n-            Def::StructCtor(..) | Def::VariantCtor(..) | Def::Const(..) |\n+            Def::StructCtor(..) | Def::VariantCtor(..) | Def::Const(..) | Def::ConstParam(..) |\n             Def::AssociatedConst(..) | Def::Fn(..) | Def::Method(..) | Def::SelfCtor(..) => {\n                 Ok(self.cat_rvalue_node(hir_id, span, expr_ty))\n             }"}, {"sha": "0562fddb2b5233926bed78a1950cc5d766bcdf5a", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -315,8 +315,11 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             Node::Ty(_) |\n             Node::MacroDef(_) => {}\n             _ => {\n-                bug!(\"found unexpected thingy in worklist: {}\",\n-                     self.tcx.hir().node_to_string(search_item))\n+                bug!(\n+                    \"found unexpected node kind in worklist: {} ({:?})\",\n+                    self.tcx.hir().node_to_string(search_item),\n+                    node,\n+                );\n             }\n         }\n     }"}, {"sha": "08da74f47d450eed321978173dc969e7c38e5659", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 83, "deletions": 82, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -527,23 +527,20 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 } else {\n                     0\n                 };\n-                let mut type_count = 0;\n-                let lifetimes = generics\n-                    .params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir(), &mut index, param))\n-                        }\n-                        GenericParamKind::Type { .. } => {\n-                            type_count += 1;\n-                            None\n-                        }\n-                    })\n-                    .collect();\n+                let mut non_lifetime_count = 0;\n+                let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {\n+                        Some(Region::early(&self.tcx.hir(), &mut index, param))\n+                    }\n+                    GenericParamKind::Type { .. } |\n+                    GenericParamKind::Const { .. } => {\n+                        non_lifetime_count += 1;\n+                        None\n+                    }\n+                }).collect();\n                 let scope = Scope::Binder {\n                     lifetimes,\n-                    next_early_index: index + type_count,\n+                    next_early_index: index + non_lifetime_count,\n                     abstract_type_parent: true,\n                     track_lifetime_uses,\n                     s: ROOT_SCOPE,\n@@ -708,7 +705,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n                 let mut elision = None;\n                 let mut lifetimes = FxHashMap::default();\n-                let mut type_count = 0;\n+                let mut non_lifetime_count = 0;\n                 for param in &generics.params {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n@@ -725,12 +722,13 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 lifetimes.insert(name, reg);\n                             }\n                         }\n-                        GenericParamKind::Type { .. } => {\n-                            type_count += 1;\n+                        GenericParamKind::Type { .. } |\n+                        GenericParamKind::Const { .. } => {\n+                            non_lifetime_count += 1;\n                         }\n                     }\n                 }\n-                let next_early_index = index + type_count;\n+                let next_early_index = index + non_lifetime_count;\n \n                 if let Some(elision_region) = elision {\n                     let scope = Scope::Elision {\n@@ -788,23 +786,20 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let generics = &trait_item.generics;\n                 let mut index = self.next_early_index();\n                 debug!(\"visit_ty: index = {}\", index);\n-                let mut type_count = 0;\n-                let lifetimes = generics\n-                    .params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir(), &mut index, param))\n-                        }\n-                        GenericParamKind::Type { .. } => {\n-                            type_count += 1;\n-                            None\n-                        }\n-                    })\n-                    .collect();\n+                let mut non_lifetime_count = 0;\n+                let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {\n+                        Some(Region::early(&self.tcx.hir(), &mut index, param))\n+                    }\n+                    GenericParamKind::Type { .. } |\n+                    GenericParamKind::Const { .. } => {\n+                        non_lifetime_count += 1;\n+                        None\n+                    }\n+                }).collect();\n                 let scope = Scope::Binder {\n                     lifetimes,\n-                    next_early_index: index + type_count,\n+                    next_early_index: index + non_lifetime_count,\n                     s: self.scope,\n                     track_lifetime_uses: true,\n                     abstract_type_parent: true,\n@@ -842,24 +837,21 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             Type(ref ty) => {\n                 let generics = &impl_item.generics;\n                 let mut index = self.next_early_index();\n-                let mut next_early_index = index;\n+                let mut non_lifetime_count = 0;\n                 debug!(\"visit_ty: index = {}\", index);\n-                let lifetimes = generics\n-                    .params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir(), &mut index, param))\n-                        }\n-                        GenericParamKind::Type { .. } => {\n-                            next_early_index += 1;\n-                            None\n-                        }\n-                    })\n-                    .collect();\n+                let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {\n+                        Some(Region::early(&self.tcx.hir(), &mut index, param))\n+                    }\n+                    GenericParamKind::Const { .. } |\n+                    GenericParamKind::Type { .. } => {\n+                        non_lifetime_count += 1;\n+                        None\n+                    }\n+                }).collect();\n                 let scope = Scope::Binder {\n                     lifetimes,\n-                    next_early_index,\n+                    next_early_index: index + non_lifetime_count,\n                     s: self.scope,\n                     track_lifetime_uses: true,\n                     abstract_type_parent: true,\n@@ -874,19 +866,19 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let mut index = self.next_early_index();\n                 let mut next_early_index = index;\n                 debug!(\"visit_ty: index = {}\", index);\n-                let lifetimes = generics\n-                    .params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir(), &mut index, param))\n-                        }\n-                        GenericParamKind::Type { .. } => {\n-                            next_early_index += 1;\n-                            None\n-                        }\n-                    })\n-                    .collect();\n+                let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {\n+                        Some(Region::early(&self.tcx.hir(), &mut index, param))\n+                    }\n+                    GenericParamKind::Type { .. } => {\n+                        next_early_index += 1;\n+                        None\n+                    }\n+                    GenericParamKind::Const { .. } => {\n+                        next_early_index += 1;\n+                        None\n+                    }\n+                }).collect();\n \n                 let scope = Scope::Binder {\n                     lifetimes,\n@@ -950,6 +942,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         self.visit_ty(&ty);\n                     }\n                 }\n+                GenericParamKind::Const { ref ty, .. } => {\n+                    walk_list!(self, visit_param_bound, &param.bounds);\n+                    self.visit_ty(&ty);\n+                }\n             }\n         }\n         for predicate in &generics.where_clause.predicates {\n@@ -1395,6 +1391,10 @@ fn object_lifetime_defaults_for_item(\n                     Set1::Many => Set1::Many,\n                 })\n             }\n+            GenericParamKind::Const { .. } => {\n+                // Generic consts don't impose any constraints.\n+                None\n+            }\n         })\n         .collect()\n }\n@@ -1703,25 +1703,22 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n \n-        let mut type_count = 0;\n-        let lifetimes = generics\n-            .params\n-            .iter()\n-            .filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { .. } => {\n-                    if self.map.late_bound.contains(&param.id) {\n-                        Some(Region::late(&self.tcx.hir(), param))\n-                    } else {\n-                        Some(Region::early(&self.tcx.hir(), &mut index, param))\n-                    }\n-                }\n-                GenericParamKind::Type { .. } => {\n-                    type_count += 1;\n-                    None\n+        let mut non_lifetime_count = 0;\n+        let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+            GenericParamKind::Lifetime { .. } => {\n+                if self.map.late_bound.contains(&param.id) {\n+                    Some(Region::late(&self.tcx.hir(), param))\n+                } else {\n+                    Some(Region::early(&self.tcx.hir(), &mut index, param))\n                 }\n-            })\n-            .collect();\n-        let next_early_index = index + type_count;\n+            }\n+            GenericParamKind::Type { .. } |\n+            GenericParamKind::Const { .. } => {\n+                non_lifetime_count += 1;\n+                None\n+            }\n+        }).collect();\n+        let next_early_index = index + non_lifetime_count;\n \n         let scope = Scope::Binder {\n             lifetimes,\n@@ -2011,6 +2008,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     }\n                     i += 1;\n                 }\n+                GenericArg::Const(ct) => {\n+                    self.visit_anon_const(&ct.value);\n+                }\n             }\n         }\n \n@@ -2768,8 +2768,9 @@ fn insert_late_bound_lifetimes(\n         match param.kind {\n             hir::GenericParamKind::Lifetime { .. } => { /* fall through */ }\n \n-            // Types are not late-bound.\n-            hir::GenericParamKind::Type { .. } => continue,\n+            // Neither types nor consts are late-bound.\n+            hir::GenericParamKind::Type { .. }\n+            | hir::GenericParamKind::Const { .. } => continue,\n         }\n \n         let lt_name = hir::LifetimeName::Param(param.name.modern());"}, {"sha": "925cde5b5cc8b3d48057b3399ca707bacda789fe", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -907,11 +907,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                     for param in &generics.params {\n                         match param.kind {\n                             GenericParamKind::Lifetime { .. } => {}\n-                            GenericParamKind::Type { .. } => {\n-                                let mut err = cx.struct_span_lint(NO_MANGLE_GENERIC_ITEMS,\n-                                                                  it.span,\n-                                                                  \"functions generic over \\\n-                                                                   types must be mangled\");\n+                            GenericParamKind::Type { .. } |\n+                            GenericParamKind::Const { .. } => {\n+                                let mut err = cx.struct_span_lint(\n+                                    NO_MANGLE_GENERIC_ITEMS,\n+                                    it.span,\n+                                    \"functions generic over types or consts must be mangled\",\n+                                );\n                                 err.span_suggestion_short(\n                                     no_mangle_attr.span,\n                                     \"remove this attribute\",\n@@ -1791,14 +1793,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n \n             for param in &generics.params {\n                 let param_name = match param.kind {\n-                    hir::GenericParamKind::Lifetime { .. } => { continue; },\n+                    hir::GenericParamKind::Lifetime { .. } => continue,\n                     hir::GenericParamKind::Type { .. } => {\n                         match param.name {\n-                            hir::ParamName::Fresh(_) => { continue; },\n-                            hir::ParamName::Error => { continue; },\n-                            hir::ParamName::Plain(name) => name.to_string()\n+                            hir::ParamName::Fresh(_) => continue,\n+                            hir::ParamName::Error => continue,\n+                            hir::ParamName::Plain(name) => name.to_string(),\n                         }\n                     }\n+                    hir::GenericParamKind::Const { .. } => continue,\n                 };\n                 let bound_spans = self.collect_outlives_bound_spans(\n                     cx, def_id, &param_name, &param.bounds, infer_static"}, {"sha": "7c66289703ac8f88eb6c0a5589d329a52fbf0da5", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -455,6 +455,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n             }\n         }\n     }\n+\n+    fn check_generic_param(&mut self, cx: &LateContext<'_, '_>, param: &hir::GenericParam) {\n+        if let GenericParamKind::Const { .. } = param.kind {\n+            NonUpperCaseGlobals::check_upper_case(\n+                cx,\n+                \"const parameter\",\n+                &param.name.ident(),\n+            );\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "776adc077fc085a934c654edf6a4f4ed4b540c54", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -1331,6 +1331,29 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         }\n     }\n \n+    fn encode_info_for_const_param(&mut self, def_id: DefId) -> Entry<'tcx> {\n+        debug!(\"IsolatedEncoder::encode_info_for_const_param({:?})\", def_id);\n+        let tcx = self.tcx;\n+        Entry {\n+            kind: EntryKind::Type,\n+            visibility: self.lazy(&ty::Visibility::Public),\n+            span: self.lazy(&tcx.def_span(def_id)),\n+            attributes: LazySeq::empty(),\n+            children: LazySeq::empty(),\n+            stability: None,\n+            deprecation: None,\n+\n+            ty: Some(self.encode_item_type(def_id)),\n+            inherent_impls: LazySeq::empty(),\n+            variances: LazySeq::empty(),\n+            generics: None,\n+            predicates: None,\n+            predicates_defined_on: None,\n+\n+            mir: None,\n+        }\n+    }\n+\n     fn encode_info_for_closure(&mut self, def_id: DefId) -> Entry<'tcx> {\n         debug!(\"IsolatedEncoder::encode_info_for_closure({:?})\", def_id);\n         let tcx = self.tcx;\n@@ -1684,6 +1707,11 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n                     let encode_info = IsolatedEncoder::encode_info_for_ty_param;\n                     self.record(def_id, encode_info, (def_id, has_default));\n                 }\n+                hir::GenericParamKind::Const { .. } => {\n+                    let def_id = self.tcx.hir().local_def_id(param.id);\n+                    let encode_info = IsolatedEncoder::encode_info_for_const_param;\n+                    self.record(def_id, encode_info, def_id);\n+                }\n             }\n         }\n     }"}, {"sha": "e68702bfe3ae028ba0cec8ca948dd173c8741487", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -1090,7 +1090,10 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             for param in &generics.params {\n                 match param.kind {\n                     hir::GenericParamKind::Lifetime { .. } => {}\n-                    hir::GenericParamKind::Type { .. } => return,\n+                    hir::GenericParamKind::Type { .. } |\n+                    hir::GenericParamKind::Const { .. } => {\n+                        return\n+                    }\n                 }\n             }\n "}, {"sha": "cde6eb22bb8aed7cd1e28555b9c9cae1b52230cb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -500,19 +500,20 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                                 args.next();\n                                 params.next();\n                             }\n-                            (GenericArg::Lifetime(_), GenericParamDefKind::Type { .. }) => {\n-                                // We expected a type argument, but got a lifetime\n-                                // argument. This is an error, but we need to handle it\n-                                // gracefully so we can report sensible errors. In this\n-                                // case, we're simply going to infer this argument.\n-                                args.next();\n-                            }\n-                            (GenericArg::Type(_), GenericParamDefKind::Lifetime) => {\n-                                // We expected a lifetime argument, but got a type\n+                            (GenericArg::Type(_), GenericParamDefKind::Lifetime)\n+                            | (GenericArg::Const(_), GenericParamDefKind::Lifetime) => {\n+                                // We expected a lifetime argument, but got a type or const\n                                 // argument. That means we're inferring the lifetimes.\n                                 substs.push(inferred_kind(None, param, infer_types));\n                                 params.next();\n                             }\n+                            (_, _) => {\n+                                // We expected one kind of parameter, but the user provided\n+                                // another. This is an error, but we need to handle it\n+                                // gracefully so we can report sensible errors.\n+                                // In this case, we're simply going to infer this argument.\n+                                args.next();\n+                            }\n                         }\n                     }\n                     (Some(_), None) => {\n@@ -524,12 +525,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                     (None, Some(&param)) => {\n                         // If there are fewer arguments than parameters, it means\n                         // we're inferring the remaining arguments.\n-                        match param.kind {\n-                            GenericParamDefKind::Lifetime | GenericParamDefKind::Type { .. } => {\n-                                let kind = inferred_kind(Some(&substs), param, infer_types);\n-                                substs.push(kind);\n-                            }\n-                        }\n+                        substs.push(inferred_kind(Some(&substs), param, infer_types));\n                         args.next();\n                         params.next();\n                     }\n@@ -1459,9 +1455,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let mut has_err = false;\n         for segment in segments {\n             segment.with_generic_args(|generic_args| {\n-                let (mut err_for_lt, mut err_for_ty) = (false, false);\n+                let (mut err_for_lt, mut err_for_ty, mut err_for_ct) = (false, false, false);\n                 for arg in &generic_args.args {\n                     let (mut span_err, span, kind) = match arg {\n+                        // FIXME(varkor): unify E0109, E0110 and E0111.\n                         hir::GenericArg::Lifetime(lt) => {\n                             if err_for_lt { continue }\n                             err_for_lt = true;\n@@ -1480,10 +1477,18 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                              ty.span,\n                              \"type\")\n                         }\n+                        hir::GenericArg::Const(ct) => {\n+                            if err_for_ct { continue }\n+                            err_for_ct = true;\n+                            (struct_span_err!(self.tcx().sess, ct.span, E0111,\n+                                              \"const parameters are not allowed on this type\"),\n+                             ct.span,\n+                             \"const\")\n+                        }\n                     };\n                     span_err.span_label(span, format!(\"{} argument not allowed\", kind))\n                             .emit();\n-                    if err_for_lt && err_for_ty {\n+                    if err_for_lt && err_for_ty && err_for_ct {\n                         break;\n                     }\n                 }"}, {"sha": "5f1c2efb6a457cec6510611b842c60a0cdbe4547", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -840,7 +840,8 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         let bounds = impl_m.generics.params.iter().find_map(|param| {\n                             match param.kind {\n                                 GenericParamKind::Lifetime { .. } => None,\n-                                GenericParamKind::Type { .. } => {\n+                                GenericParamKind::Type { .. } |\n+                                GenericParamKind::Const { .. } => {\n                                     if param.hir_id == impl_hir_id {\n                                         Some(&param.bounds)\n                                     } else {"}, {"sha": "84de38beafad9dde00490d6eb1d0b20c87a8c8b4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -132,6 +132,10 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n                     self.tcx.type_of(def_id);\n                 }\n                 hir::GenericParamKind::Type { .. } => {}\n+                hir::GenericParamKind::Const { .. } => {\n+                    let def_id = self.tcx.hir().local_def_id(param.id);\n+                    self.tcx.type_of(def_id);\n+                }\n             }\n         }\n         intravisit::walk_generics(self, generics);\n@@ -1041,6 +1045,22 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n                     i += 1;\n                     Some(ty_param)\n                 }\n+                GenericParamKind::Const { .. } => {\n+                    if param.name.ident().name == keywords::SelfUpper.name() {\n+                        span_bug!(\n+                            param.span,\n+                            \"`Self` should not be the name of a regular parameter\",\n+                        );\n+                    }\n+\n+                    // Emit an error, but skip the parameter rather than aborting to\n+                    // continue to get other errors.\n+                    tcx.sess.struct_span_err(\n+                        param.span,\n+                        \"const generics in any position are currently unsupported\",\n+                    ).emit();\n+                    None\n+                }\n                 _ => None,\n             }),\n     );\n@@ -1301,10 +1321,10 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n         },\n \n         Node::GenericParam(param) => match &param.kind {\n-            hir::GenericParamKind::Type {\n-                default: Some(ref ty),\n-                ..\n-            } => icx.to_ty(ty),\n+            hir::GenericParamKind::Type { default: Some(ref ty), .. } |\n+            hir::GenericParamKind::Const { ref ty, .. } => {\n+                icx.to_ty(ty)\n+            }\n             x => bug!(\"unexpected non-type Node::GenericParam: {:?}\", x),\n         },\n "}, {"sha": "3c4a0760f3ee2ca4ef1f434bfa70aa4dc068156f", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -1326,6 +1326,10 @@ type X = u32; // ok!\n ```\n \"##,\n \n+E0111: r##\"\n+You tried to give a const parameter to a type which doesn't need it.\n+\"##,\n+\n E0116: r##\"\n You can only define an inherent implementation for a type in the same crate\n where the type was defined. For example, an `impl` block as below is not allowed"}, {"sha": "8796cfa01e0ea282a5c39b113c3f7e7ef1ff9091", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -773,6 +773,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     }\n                 }\n                 GenericParamDefKind::Lifetime => {}\n+                GenericParamDefKind::Const { .. } => {}\n             }\n         }\n "}, {"sha": "ea9034ae3a1e02718949aad9576bcef90c42f3a9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -1258,6 +1258,15 @@ impl Clean<Lifetime> for hir::GenericParam {\n     }\n }\n \n+impl Clean<Constant> for hir::ConstArg {\n+    fn clean(&self, cx: &DocContext) -> Constant {\n+        Constant {\n+            type_: cx.tcx.type_of(cx.tcx.hir().body_owner_def_id(self.value.body)).clean(cx),\n+            expr: print_const_expr(cx, self.value.body),\n+        }\n+    }\n+}\n+\n impl<'tcx> Clean<Lifetime> for ty::GenericParamDef {\n     fn clean(&self, _cx: &DocContext) -> Lifetime {\n         Lifetime(self.name.to_string())\n@@ -1423,6 +1432,10 @@ pub enum GenericParamDefKind {\n         default: Option<Type>,\n         synthetic: Option<hir::SyntheticTyParamKind>,\n     },\n+    Const {\n+        did: DefId,\n+        ty: Type,\n+    },\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n@@ -1435,7 +1448,10 @@ pub struct GenericParamDef {\n impl GenericParamDef {\n     pub fn is_synthetic_type_param(&self) -> bool {\n         match self.kind {\n-            GenericParamDefKind::Lifetime => false,\n+            GenericParamDefKind::Lifetime |\n+            GenericParamDefKind::Const { .. } => {\n+                false\n+            }\n             GenericParamDefKind::Type { ref synthetic, .. } => synthetic.is_some(),\n         }\n     }\n@@ -1491,14 +1507,20 @@ impl Clean<GenericParamDef> for hir::GenericParam {\n                 };\n                 (name, GenericParamDefKind::Lifetime)\n             }\n-            hir::GenericParamKind::Type { ref default, synthetic, .. } => {\n+            hir::GenericParamKind::Type { ref default, synthetic } => {\n                 (self.name.ident().name.clean(cx), GenericParamDefKind::Type {\n                     did: cx.tcx.hir().local_def_id(self.id),\n                     bounds: self.bounds.clean(cx),\n                     default: default.clean(cx),\n                     synthetic: synthetic,\n                 })\n             }\n+            hir::GenericParamKind::Const { ref ty } => {\n+                (self.name.ident().name.clean(cx), GenericParamDefKind::Const {\n+                    did: cx.tcx.hir().local_def_id(self.id),\n+                    ty: ty.clean(cx),\n+                })\n+            }\n         };\n \n         GenericParamDef {\n@@ -1538,6 +1560,7 @@ impl Clean<Generics> for hir::Generics {\n                     GenericParamDefKind::Type { did, ref bounds, .. } => {\n                         cx.impl_trait_bounds.borrow_mut().insert(did, bounds.clone());\n                     }\n+                    GenericParamDefKind::Const { .. } => unreachable!(),\n                 }\n                 param\n             })\n@@ -1571,6 +1594,7 @@ impl Clean<Generics> for hir::Generics {\n                                         break\n                                     }\n                                 }\n+                                GenericParamDefKind::Const { .. } => {}\n                             }\n                         }\n                     }\n@@ -2549,6 +2573,7 @@ impl Clean<Type> for hir::Ty {\n                     let provided_params = &path.segments.last().expect(\"segments were empty\");\n                     let mut ty_substs = FxHashMap::default();\n                     let mut lt_substs = FxHashMap::default();\n+                    let mut const_substs = FxHashMap::default();\n                     provided_params.with_generic_args(|generic_args| {\n                         let mut indices: GenericParamCount = Default::default();\n                         for param in generics.params.iter() {\n@@ -2557,7 +2582,7 @@ impl Clean<Type> for hir::Ty {\n                                     let mut j = 0;\n                                     let lifetime = generic_args.args.iter().find_map(|arg| {\n                                         match arg {\n-                                            GenericArg::Lifetime(lt) => {\n+                                            hir::GenericArg::Lifetime(lt) => {\n                                                 if indices.lifetimes == j {\n                                                     return Some(lt);\n                                                 }\n@@ -2582,7 +2607,7 @@ impl Clean<Type> for hir::Ty {\n                                     let mut j = 0;\n                                     let type_ = generic_args.args.iter().find_map(|arg| {\n                                         match arg {\n-                                            GenericArg::Type(ty) => {\n+                                            hir::GenericArg::Type(ty) => {\n                                                 if indices.types == j {\n                                                     return Some(ty);\n                                                 }\n@@ -2600,10 +2625,32 @@ impl Clean<Type> for hir::Ty {\n                                     }\n                                     indices.types += 1;\n                                 }\n+                                hir::GenericParamKind::Const { .. } => {\n+                                    let const_param_def =\n+                                        Def::ConstParam(cx.tcx.hir().local_def_id(param.id));\n+                                    let mut j = 0;\n+                                    let const_ = generic_args.args.iter().find_map(|arg| {\n+                                        match arg {\n+                                            hir::GenericArg::Const(ct) => {\n+                                                if indices.consts == j {\n+                                                    return Some(ct);\n+                                                }\n+                                                j += 1;\n+                                                None\n+                                            }\n+                                            _ => None,\n+                                        }\n+                                    });\n+                                    if let Some(ct) = const_.cloned() {\n+                                        const_substs.insert(const_param_def, ct.clean(cx));\n+                                    }\n+                                    // FIXME(const_generics:defaults)\n+                                    indices.consts += 1;\n+                                }\n                             }\n                         }\n                     });\n-                    return cx.enter_alias(ty_substs, lt_substs, || ty.clean(cx));\n+                    return cx.enter_alias(ty_substs, lt_substs, const_substs, || ty.clean(cx));\n                 }\n                 resolve_type(cx, path.clean(cx), self.id)\n             }\n@@ -3195,6 +3242,9 @@ impl Clean<GenericArgs> for hir::GenericArgs {\n                     GenericArg::Type(ty) => {\n                         types.push(ty.clean(cx));\n                     }\n+                    GenericArg::Const(..) => {\n+                        unimplemented!() // FIXME(const_generics)\n+                    }\n                 }\n             }\n             GenericArgs::AngleBracketed {"}, {"sha": "59820e4e5d1aeebe33358731a1a0c13975b915b8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -65,6 +65,8 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     pub ty_substs: RefCell<FxHashMap<Def, clean::Type>>,\n     /// Table `NodeId` of lifetime parameter definition -> substituted lifetime\n     pub lt_substs: RefCell<FxHashMap<DefId, clean::Lifetime>>,\n+    /// Table node id of const parameter definition -> substituted const\n+    pub ct_substs: RefCell<FxHashMap<Def, clean::Constant>>,\n     /// Table DefId of `impl Trait` in argument position -> bounds\n     pub impl_trait_bounds: RefCell<FxHashMap<DefId, Vec<clean::GenericBound>>>,\n     pub send_trait: Option<DefId>,\n@@ -85,14 +87,18 @@ impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n     pub fn enter_alias<F, R>(&self,\n                              ty_substs: FxHashMap<Def, clean::Type>,\n                              lt_substs: FxHashMap<DefId, clean::Lifetime>,\n+                             ct_substs: FxHashMap<Def, clean::Constant>,\n                              f: F) -> R\n     where F: FnOnce() -> R {\n-        let (old_tys, old_lts) =\n-            (mem::replace(&mut *self.ty_substs.borrow_mut(), ty_substs),\n-             mem::replace(&mut *self.lt_substs.borrow_mut(), lt_substs));\n+        let (old_tys, old_lts, old_cts) = (\n+            mem::replace(&mut *self.ty_substs.borrow_mut(), ty_substs),\n+            mem::replace(&mut *self.lt_substs.borrow_mut(), lt_substs),\n+            mem::replace(&mut *self.ct_substs.borrow_mut(), ct_substs),\n+        );\n         let r = f();\n         *self.ty_substs.borrow_mut() = old_tys;\n         *self.lt_substs.borrow_mut() = old_lts;\n+        *self.ct_substs.borrow_mut() = old_cts;\n         r\n     }\n \n@@ -212,7 +218,7 @@ impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n                         name: hir::LifetimeName::Param(name),\n                     }));\n                 }\n-                ty::GenericParamDefKind::Type {..} => {\n+                ty::GenericParamDefKind::Type { .. } => {\n                     args.push(hir::GenericArg::Type(self.ty_param_to_ty(param.clone())));\n                 }\n             }\n@@ -527,6 +533,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 renderinfo: RefCell::new(renderinfo),\n                 ty_substs: Default::default(),\n                 lt_substs: Default::default(),\n+                ct_substs: Default::default(),\n                 impl_trait_bounds: Default::default(),\n                 send_trait: send_trait,\n                 fake_def_ids: Default::default(),"}, {"sha": "4fbbaf0f2e183604b3a1befe88949d19f968ee13", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -138,6 +138,16 @@ impl fmt::Display for clean::GenericParamDef {\n \n                 Ok(())\n             }\n+            clean::GenericParamDefKind::Const { ref ty, .. } => {\n+                f.write_str(\"const \")?;\n+                f.write_str(&self.name)?;\n+\n+                if f.alternate() {\n+                    write!(f, \": {:#}\", ty)\n+                } else {\n+                    write!(f, \":&nbsp;{}\", ty)\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "91ec88652cfe99f614e9741c3d964709bccba929", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -1750,7 +1750,8 @@ impl<'a> Cache {\n         for param in &generics.params {\n             match param.kind {\n                 clean::GenericParamDefKind::Lifetime => {}\n-                clean::GenericParamDefKind::Type { did, .. } => {\n+                clean::GenericParamDefKind::Type { did, .. } |\n+                clean::GenericParamDefKind::Const { did, .. } => {\n                     self.typarams.insert(did, param.name.clone());\n                 }\n             }"}, {"sha": "47f826789e03e2d75b6494e8c142d8d1982aa0b3", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -8,6 +8,7 @@ fn foo<const X: (), T>(_: T) {\n \n fn bar<const X: (), 'a>(_: &'a ()) {\n     //~^ ERROR lifetime parameters must be declared prior to const parameters\n+    //~^^ ERROR const generics in any position are currently unsupported\n }\n \n fn main() {}"}, {"sha": "a43415d0e5a43227cb1201632793c712e7e43e53", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -22,5 +22,11 @@ error: const generics in any position are currently unsupported\n LL | fn foo<const X: (), T>(_: T) {\n    |              ^\n \n-error: aborting due to 3 previous errors\n+error: const generics in any position are currently unsupported\n+  --> $DIR/const-param-before-other-params.rs:9:14\n+   |\n+LL | fn bar<const X: (), 'a>(_: &'a ()) {\n+   |              ^\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "37fe9af98b3df4a6f39f5304912d375f86a759fa", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -0,0 +1,8 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+#![deny(non_upper_case_globals)]\n+\n+fn noop<const x: u32>() {\n+    //~^ ERROR const generics in any position are currently unsupported\n+}"}, {"sha": "9683e91cef30c05bb44d516f557ee8949e049b49", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-parameter-uppercase-lint.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0601]: `main` function not found in crate `const_parameter_uppercase_lint`\n+   |\n+   = note: consider adding a `main` function to `$DIR/const-parameter-uppercase-lint.rs`\n+\n+error: const generics in any position are currently unsupported\n+  --> $DIR/const-parameter-uppercase-lint.rs:6:15\n+   |\n+LL | fn noop<const x: u32>() {\n+   |               ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "907e00b11e556de804542779b70276ce5ccf75a2", "filename": "src/test/ui/feature-gates/feature-gate-const_generics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -2,5 +2,6 @@ fn foo<const X: ()>() {} //~ ERROR const generics are unstable\n //~^ const generics in any position are currently unsupported\n \n struct Foo<const X: usize>([(); X]); //~ ERROR const generics are unstable\n+//~^ const generics in any position are currently unsupported\n \n fn main() {}"}, {"sha": "3ab1aa2367f1c637eecf4d3428f6204da7d6492b", "filename": "src/test/ui/feature-gates/feature-gate-const_generics.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -20,6 +20,12 @@ error: const generics in any position are currently unsupported\n LL | fn foo<const X: ()>() {} //~ ERROR const generics are unstable\n    |              ^\n \n-error: aborting due to 3 previous errors\n+error: const generics in any position are currently unsupported\n+  --> $DIR/feature-gate-const_generics.rs:4:18\n+   |\n+LL | struct Foo<const X: usize>([(); X]); //~ ERROR const generics are unstable\n+   |                  ^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "994aebc7f6e3e9082f14bb7ab93e1394e6f862a3", "filename": "src/test/ui/generic/generic-no-mangle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -1,10 +1,10 @@\n #![deny(no_mangle_generic_items)]\n \n #[no_mangle]\n-pub fn foo<T>() {} //~ ERROR functions generic over types must be mangled\n+pub fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n \n #[no_mangle]\n-pub extern fn bar<T>() {} //~ ERROR functions generic over types must be mangled\n+pub extern fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n \n #[no_mangle]\n pub fn baz(x: &i32) -> &i32 { x }"}, {"sha": "3da39f1dc17cbe8f028a5bde5bd3323b65fda82e", "filename": "src/test/ui/generic/generic-no-mangle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.stderr?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -1,9 +1,9 @@\n-error: functions generic over types must be mangled\n+error: functions generic over types or consts must be mangled\n   --> $DIR/generic-no-mangle.rs:4:1\n    |\n LL | #[no_mangle]\n    | ------------ help: remove this attribute\n-LL | pub fn foo<T>() {} //~ ERROR functions generic over types must be mangled\n+LL | pub fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n    | ^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n@@ -12,12 +12,12 @@ note: lint level defined here\n LL | #![deny(no_mangle_generic_items)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: functions generic over types must be mangled\n+error: functions generic over types or consts must be mangled\n   --> $DIR/generic-no-mangle.rs:7:1\n    |\n LL | #[no_mangle]\n    | ------------ help: remove this attribute\n-LL | pub extern fn bar<T>() {} //~ ERROR functions generic over types must be mangled\n+LL | pub extern fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "67bd6dd501bd8f6b3c3ed458c861caf860026def", "filename": "src/test/ui/lint/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -10,7 +10,7 @@\n #[no_mangle]\n //~^ HELP remove this attribute\n pub fn defiant<T>(_t: T) {}\n-//~^ WARN functions generic over types must be mangled\n+//~^ WARN functions generic over types or consts must be mangled\n \n #[no_mangle]\n fn rio_grande() {}\n@@ -23,15 +23,15 @@ mod badlands {\n     //~^ ERROR const items should never be #[no_mangle]\n     //~| HELP try a static value\n     #[no_mangle] pub fn val_jean<T>() {}\n-    //~^ WARN functions generic over types must be mangled\n+    //~^ WARN functions generic over types or consts must be mangled\n     //~| HELP remove this attribute\n \n     // ... but we can suggest just-`pub` instead of restricted\n     #[no_mangle] pub(crate) const VETAR: bool = true;\n     //~^ ERROR const items should never be #[no_mangle]\n     //~| HELP try a static value\n     #[no_mangle] pub(crate) fn crossfield<T>() {}\n-    //~^ WARN functions generic over types must be mangled\n+    //~^ WARN functions generic over types or consts must be mangled\n     //~| HELP remove this attribute\n }\n "}, {"sha": "1e4eabc9db0f76a08deedb6dce6a37e70090d3a6", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "patch": "@@ -54,7 +54,7 @@ LL | #[no_mangle] const DISCOVERY: usize = 1;\n    |\n    = note: #[deny(no_mangle_const_items)] on by default\n \n-warning: functions generic over types must be mangled\n+warning: functions generic over types or consts must be mangled\n   --> $DIR/suggestions.rs:12:1\n    |\n LL | #[no_mangle]\n@@ -73,7 +73,7 @@ LL |     #[no_mangle] pub const DAUNTLESS: bool = true;\n    |                  |\n    |                  help: try a static value: `pub static`\n \n-warning: functions generic over types must be mangled\n+warning: functions generic over types or consts must be mangled\n   --> $DIR/suggestions.rs:25:18\n    |\n LL |     #[no_mangle] pub fn val_jean<T>() {}\n@@ -89,7 +89,7 @@ LL |     #[no_mangle] pub(crate) const VETAR: bool = true;\n    |                  |\n    |                  help: try a static value: `pub static`\n \n-warning: functions generic over types must be mangled\n+warning: functions generic over types or consts must be mangled\n   --> $DIR/suggestions.rs:33:18\n    |\n LL |     #[no_mangle] pub(crate) fn crossfield<T>() {}"}]}