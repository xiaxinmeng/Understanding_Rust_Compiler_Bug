{"sha": "907db6c8344a4df070ee2b21479062a63c3ae2be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwN2RiNmM4MzQ0YTRkZjA3MGVlMmIyMTQ3OTA2MmE2M2MzYWUyYmU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:18:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:18:07Z"}, "message": "rollup merge of #21444: petrochenkov/null\n\nConflicts:\n\tsrc/libstd/sync/mpsc/select.rs", "tree": {"sha": "b4950d1359d2d30a866039946cf4ff96ba8d6019", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4950d1359d2d30a866039946cf4ff96ba8d6019"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907db6c8344a4df070ee2b21479062a63c3ae2be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907db6c8344a4df070ee2b21479062a63c3ae2be", "html_url": "https://github.com/rust-lang/rust/commit/907db6c8344a4df070ee2b21479062a63c3ae2be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907db6c8344a4df070ee2b21479062a63c3ae2be/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "html_url": "https://github.com/rust-lang/rust/commit/b5de8333b3ef29fe3d0952d9207fd275c45da9f2"}, {"sha": "2c2480df5d340f4c7b2deeef0177e4fd22f2b03a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2480df5d340f4c7b2deeef0177e4fd22f2b03a", "html_url": "https://github.com/rust-lang/rust/commit/2c2480df5d340f4c7b2deeef0177e4fd22f2b03a"}], "stats": {"total": 117, "additions": 63, "deletions": 54}, "files": [{"sha": "44be0503bc2cfc9221cbfc0f5a7c41a8a84a2b10", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -280,7 +280,7 @@ mod imp {\n         if align <= MIN_ALIGN {\n             libc::malloc(size as libc::size_t) as *mut u8\n         } else {\n-            let mut out = 0 as *mut libc::c_void;\n+            let mut out = ptr::null();\n             let ret = posix_memalign(&mut out,\n                                      align as libc::size_t,\n                                      size as libc::size_t);"}, {"sha": "644f08930cbd266661ab935b6fb44597ec968c21", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -180,6 +180,7 @@ use std::io::LineBufferedWriter;\n use std::io;\n use std::mem;\n use std::os;\n+use std::ptr;\n use std::rt;\n use std::slice;\n use std::sync::{Once, ONCE_INIT};\n@@ -437,11 +438,11 @@ fn init() {\n             assert!(!DIRECTIVES.is_null());\n             let _directives: Box<Vec<directive::LogDirective>> =\n                 mem::transmute(DIRECTIVES);\n-            DIRECTIVES = 0 as *const Vec<directive::LogDirective>;\n+            DIRECTIVES = ptr::null();\n \n             if !FILTER.is_null() {\n                 let _filter: Box<Regex> = mem::transmute(FILTER);\n-                FILTER = 0 as *const _;\n+                FILTER = ptr::null();\n             }\n         });\n     }"}, {"sha": "db2a569cdeffa0edbae0f09bf8914215c00fa1a3", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -14,6 +14,7 @@ pub use self::OptimizationDiagnosticKind::*;\n pub use self::Diagnostic::*;\n \n use libc::c_char;\n+use std::ptr;\n \n use {ValueRef, TwineRef, DebugLocRef, DiagnosticInfoRef};\n \n@@ -52,10 +53,10 @@ impl OptimizationDiagnostic {\n \n         let mut opt = OptimizationDiagnostic {\n             kind: kind,\n-            pass_name: 0 as *const c_char,\n-            function: 0 as ValueRef,\n-            debug_loc: 0 as DebugLocRef,\n-            message: 0 as TwineRef,\n+            pass_name: ptr::null(),\n+            function: ptr::null_mut(),\n+            debug_loc: ptr::null_mut(),\n+            message: ptr::null_mut(),\n         };\n \n         super::LLVMUnpackOptimizationDiagnostic(di,"}, {"sha": "eded88bb62e74cbcac4ad2a972fed7cac2177860", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -53,7 +53,7 @@ pub use self::Linkage::*;\n \n use std::ffi::CString;\n use std::cell::RefCell;\n-use std::{raw, mem};\n+use std::{raw, mem, ptr};\n use libc::{c_uint, c_ushort, uint64_t, c_int, size_t, c_char};\n use libc::{c_longlong, c_ulonglong, c_void};\n use debuginfo::{DIBuilderRef, DIDescriptor,\n@@ -2262,19 +2262,18 @@ pub unsafe fn static_link_hack_this_sucks() {\n     LLVMInitializePowerPCAsmPrinter();\n     LLVMInitializePowerPCAsmParser();\n \n-    LLVMRustSetLLVMOptions(0 as c_int,\n-                                       0 as *const _);\n+    LLVMRustSetLLVMOptions(0 as c_int, ptr::null());\n \n-    LLVMPassManagerBuilderPopulateModulePassManager(0 as *mut _, 0 as *mut _);\n-    LLVMPassManagerBuilderPopulateLTOPassManager(0 as *mut _, 0 as *mut _, False, False);\n-    LLVMPassManagerBuilderPopulateFunctionPassManager(0 as *mut _, 0 as *mut _);\n-    LLVMPassManagerBuilderSetOptLevel(0 as *mut _, 0 as c_uint);\n-    LLVMPassManagerBuilderUseInlinerWithThreshold(0 as *mut _, 0 as c_uint);\n-    LLVMWriteBitcodeToFile(0 as *mut _, 0 as *const _);\n+    LLVMPassManagerBuilderPopulateModulePassManager(ptr::null_mut(), ptr::null_mut());\n+    LLVMPassManagerBuilderPopulateLTOPassManager(ptr::null_mut(), ptr::null_mut(), False, False);\n+    LLVMPassManagerBuilderPopulateFunctionPassManager(ptr::null_mut(), ptr::null_mut());\n+    LLVMPassManagerBuilderSetOptLevel(ptr::null_mut(), 0 as c_uint);\n+    LLVMPassManagerBuilderUseInlinerWithThreshold(ptr::null_mut(), 0 as c_uint);\n+    LLVMWriteBitcodeToFile(ptr::null_mut(), ptr::null());\n     LLVMPassManagerBuilderCreate();\n-    LLVMPassManagerBuilderDispose(0 as *mut _);\n+    LLVMPassManagerBuilderDispose(ptr::null_mut());\n \n-    LLVMRustLinkInExternalBitcode(0 as *mut _, 0 as *const _, 0 as size_t);\n+    LLVMRustLinkInExternalBitcode(ptr::null_mut(), ptr::null(), 0 as size_t);\n \n     LLVMLinkInMCJIT();\n     LLVMLinkInInterpreter();"}, {"sha": "9640443f4f7a642265898dd1e40fe630c2993a30", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -21,6 +21,7 @@ use syntax::ast;\n \n use std::ffi::CString;\n use std::mem;\n+use std::ptr;\n use std::cell::RefCell;\n use std::iter::repeat;\n \n@@ -295,7 +296,7 @@ impl Type {\n             if n_elts == 0 {\n                 return Vec::new();\n             }\n-            let mut elts: Vec<_> = repeat(Type { rf: 0 as TypeRef }).take(n_elts).collect();\n+            let mut elts: Vec<_> = repeat(Type { rf: ptr::null_mut() }).take(n_elts).collect();\n             llvm::LLVMGetStructElementTypes(self.to_ref(),\n                                             elts.as_mut_ptr() as *mut TypeRef);\n             elts\n@@ -309,7 +310,7 @@ impl Type {\n     pub fn func_params(&self) -> Vec<Type> {\n         unsafe {\n             let n_args = llvm::LLVMCountParamTypes(self.to_ref()) as uint;\n-            let mut args: Vec<_> = repeat(Type { rf: 0 as TypeRef }).take(n_args).collect();\n+            let mut args: Vec<_> = repeat(Type { rf: ptr::null_mut() }).take(n_args).collect();\n             llvm::LLVMGetParamTypes(self.to_ref(),\n                                     args.as_mut_ptr() as *mut TypeRef);\n             args"}, {"sha": "a5664b9f013776000187bec2d2b5acf7674effe7", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -40,6 +40,7 @@ use mem;\n use option::Option;\n use option::Option::{Some, None};\n use ops::{Deref, DerefMut, FnOnce};\n+use ptr;\n use result::Result::{Ok, Err};\n use rt;\n use slice::SliceExt;\n@@ -238,7 +239,7 @@ pub fn stdin() -> StdinReader {\n             // Make sure to free it at exit\n             rt::at_exit(|| {\n                 mem::transmute::<_, Box<StdinReader>>(STDIN);\n-                STDIN = 0 as *const _;\n+                STDIN = ptr::null();\n             });\n         });\n "}, {"sha": "ea81ed30a9c603b6b72e2ca1473c920444916cf4", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -46,6 +46,7 @@ use core::prelude::*;\n \n use alloc::boxed::Box;\n use core::mem;\n+use core::ptr;\n use core::cell::UnsafeCell;\n \n use sync::atomic::{AtomicPtr, Ordering};\n@@ -82,7 +83,7 @@ unsafe impl<T:Send> Sync for Queue<T> { }\n impl<T> Node<T> {\n     unsafe fn new(v: Option<T>) -> *mut Node<T> {\n         mem::transmute(box Node {\n-            next: AtomicPtr::new(0 as *mut Node<T>),\n+            next: AtomicPtr::new(ptr::null_mut()),\n             value: v,\n         })\n     }"}, {"sha": "f5bacbb8ce2a784f822a8b749c0d9883c4cc835a", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -59,6 +59,7 @@ use core::prelude::*;\n use core::cell::Cell;\n use core::marker;\n use core::mem;\n+use core::ptr;\n use core::uint;\n \n use sync::mpsc::{Receiver, RecvError};\n@@ -109,16 +110,15 @@ pub trait Packet {\n }\n \n impl Select {\n-\n     /// Creates a new selection structure. This set is initially empty and\n     /// `wait` will panic!() if called.\n     ///\n     /// Usage of this struct directly can sometimes be burdensome, and usage is\n     /// rather much easier through the `select!` macro.\n     pub fn new() -> Select {\n         Select {\n-            head: 0 as *mut Handle<'static, ()>,\n-            tail: 0 as *mut Handle<'static, ()>,\n+            head: ptr::null_mut(),\n+            tail: ptr::null_mut(),\n             next_id: Cell::new(1),\n         }\n     }\n@@ -132,8 +132,8 @@ impl Select {\n         Handle {\n             id: id,\n             selector: self,\n-            next: 0 as *mut Handle<'static, ()>,\n-            prev: 0 as *mut Handle<'static, ()>,\n+            next: ptr::null_mut(),\n+            prev: ptr::null_mut(),\n             added: false,\n             rx: rx,\n             packet: rx,\n@@ -298,8 +298,8 @@ impl<'rx, T: Send> Handle<'rx, T> {\n             (*self.next).prev = self.prev;\n         }\n \n-        self.next = 0 as *mut Handle<'static, ()>;\n-        self.prev = 0 as *mut Handle<'static, ()>;\n+        self.next = ptr::null_mut();\n+        self.prev = ptr::null_mut();\n \n         self.added = false;\n     }"}, {"sha": "8cd88cedf6b7dccfc03a8e23eb861ae823f7f3b5", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -39,6 +39,7 @@ use core::prelude::*;\n \n use alloc::boxed::Box;\n use core::mem;\n+use core::ptr;\n use core::cell::UnsafeCell;\n \n use sync::atomic::{AtomicPtr, AtomicUsize, Ordering};\n@@ -82,7 +83,7 @@ impl<T: Send> Node<T> {\n         unsafe {\n             mem::transmute(box Node {\n                 value: None,\n-                next: AtomicPtr::new(0 as *mut Node<T>),\n+                next: AtomicPtr::new(ptr::null_mut::<Node<T>>()),\n             })\n         }\n     }\n@@ -131,7 +132,7 @@ impl<T: Send> Queue<T> {\n             let n = self.alloc();\n             assert!((*n).value.is_none());\n             (*n).value = Some(t);\n-            (*n).next.store(0 as *mut Node<T>, Ordering::Relaxed);\n+            (*n).next.store(ptr::null_mut(), Ordering::Relaxed);\n             (**self.head.get()).next.store(n, Ordering::Release);\n             *self.head.get() = n;\n         }"}, {"sha": "d38f14a91302fa6fde9b19dfcd819025f739dd68", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -40,6 +40,7 @@ use self::Blocker::*;\n \n use vec::Vec;\n use core::mem;\n+use core::ptr;\n \n use sync::atomic::{Ordering, AtomicUsize};\n use sync::mpsc::blocking::{self, WaitToken, SignalToken};\n@@ -145,8 +146,8 @@ impl<T: Send> Packet<T> {\n                 cap: cap,\n                 canceled: None,\n                 queue: Queue {\n-                    head: 0 as *mut Node,\n-                    tail: 0 as *mut Node,\n+                    head: ptr::null_mut(),\n+                    tail: ptr::null_mut(),\n                 },\n                 buf: Buffer {\n                     buf: range(0, cap + if cap == 0 {1} else {0}).map(|_| None).collect(),\n@@ -160,7 +161,7 @@ impl<T: Send> Packet<T> {\n     // wait until a send slot is available, returning locked access to\n     // the channel state.\n     fn acquire_send_slot(&self) -> MutexGuard<State<T>> {\n-        let mut node = Node { token: None, next: 0 as *mut Node };\n+        let mut node = Node { token: None, next: ptr::null_mut() };\n         loop {\n             let mut guard = self.lock.lock().unwrap();\n             // are we ready to go?\n@@ -343,8 +344,8 @@ impl<T: Send> Packet<T> {\n             Vec::new()\n         };\n         let mut queue = mem::replace(&mut guard.queue, Queue {\n-            head: 0 as *mut Node,\n-            tail: 0 as *mut Node,\n+            head: ptr::null_mut(),\n+            tail: ptr::null_mut(),\n         });\n \n         let waiter = match mem::replace(&mut guard.blocker, NoneBlocked) {\n@@ -453,7 +454,7 @@ impl Queue {\n     fn enqueue(&mut self, node: &mut Node) -> WaitToken {\n         let (wait_token, signal_token) = blocking::tokens();\n         node.token = Some(signal_token);\n-        node.next = 0 as *mut Node;\n+        node.next = ptr::null_mut();\n \n         if self.tail.is_null() {\n             self.head = node as *mut Node;\n@@ -475,10 +476,10 @@ impl Queue {\n         let node = self.head;\n         self.head = unsafe { (*node).next };\n         if self.head.is_null() {\n-            self.tail = 0 as *mut Node;\n+            self.tail = ptr::null_mut();\n         }\n         unsafe {\n-            (*node).next = 0 as *mut Node;\n+            (*node).next = ptr::null_mut();\n             Some((*node).token.take().unwrap())\n         }\n     }"}, {"sha": "6f6179a436e914c3c77de9384be7e6b41799ea02", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -24,6 +24,7 @@ use prelude::v1::*;\n \n use cell::UnsafeCell;\n use mem;\n+use ptr;\n use rt;\n use sync::{StaticMutex, StaticCondvar};\n use sync::mpsc::{channel, Sender, Receiver};\n@@ -132,7 +133,7 @@ impl<M: Send> Helper<M> {\n \n             // Close the channel by destroying it\n             let chan: Box<Sender<M>> = mem::transmute(*self.chan.get());\n-            *self.chan.get() = 0 as *mut Sender<M>;\n+            *self.chan.get() = ptr::null_mut();\n             drop(chan);\n             helper_signal::signal(*self.signal.get() as helper_signal::signal);\n "}, {"sha": "cb2edf50ebd3ea4ba3bb1ffb14abee25e7f91e8c", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -353,7 +353,7 @@ fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n     if state.is_null() {\n         return output(w, idx, addr, None)\n     }\n-    let mut data = 0 as *const libc::c_char;\n+    let mut data = ptr::null();\n     let data_addr = &mut data as *mut *const libc::c_char;\n     let ret = unsafe {\n         backtrace_syminfo(state, addr as libc::uintptr_t,"}, {"sha": "3bc414731526300d15d5fa0d0716b132c7d892f6", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -10,6 +10,7 @@\n \n use cell::UnsafeCell;\n use libc;\n+use ptr;\n use std::option::Option::{Some, None};\n use sys::mutex::{self, Mutex};\n use sys::time;\n@@ -62,7 +63,7 @@ impl Condvar {\n         // time.\n         let mut sys_now = libc::timeval { tv_sec: 0, tv_usec: 0 };\n         let stable_now = time::SteadyTime::now();\n-        let r = ffi::gettimeofday(&mut sys_now, 0 as *mut _);\n+        let r = ffi::gettimeofday(&mut sys_now, ptr::null_mut());\n         debug_assert_eq!(r, 0);\n \n         let seconds = NumCast::from(dur.num_seconds());"}, {"sha": "dd478347f819b36d1cd0bc5a7f1632916e75675c", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -19,6 +19,7 @@ use io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n use io;\n use libc::{self, c_int, c_void};\n use mem;\n+use ptr;\n use sys::retry;\n use sys_common::{keep_going, eof, mkerr_libc};\n \n@@ -207,7 +208,7 @@ pub fn readdir(p: &Path) -> IoResult<Vec<Path>> {\n \n     if dir_ptr as uint != 0 {\n         let mut paths = vec!();\n-        let mut entry_ptr = 0 as *mut dirent_t;\n+        let mut entry_ptr = ptr::null_mut();\n         while unsafe { readdir_r(dir_ptr, ptr, &mut entry_ptr) == 0 } {\n             if entry_ptr.is_null() { break }\n             paths.push(unsafe {"}, {"sha": "2c25af055ee1c66c0b1cf46d35fbe2dc1b01545a", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -143,7 +143,7 @@ pub unsafe fn get_env_pairs() -> Vec<Vec<u8>> {\n                os::last_os_error());\n     }\n     let mut result = Vec::new();\n-    while *environ != 0 as *const _ {\n+    while *environ != ptr::null() {\n         let env_pair = ffi::c_str_to_bytes(&*environ).to_vec();\n         result.push(env_pair);\n         environ = environ.offset(1);"}, {"sha": "0eab27de43a9f08e995a56e4ad25d555f670d127", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -251,7 +251,7 @@ impl Process {\n                             fn setgroups(ngroups: libc::c_int,\n                                          ptr: *const libc::c_void) -> libc::c_int;\n                         }\n-                        let _ = setgroups(0, 0 as *const libc::c_void);\n+                        let _ = setgroups(0, ptr::null());\n \n                         if libc::setuid(u as libc::uid_t) != 0 {\n                             fail(&mut output);"}, {"sha": "2561b1bebb5d27a12712f4c023c6e06f6381e0b8", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -327,18 +327,18 @@ pub fn write(w: &mut Writer) -> IoResult<()> {\n     let image = arch::init_frame(&mut frame, &context);\n \n     // Initialize this process's symbols\n-    let ret = SymInitialize(process, 0 as *mut libc::c_void, libc::TRUE);\n+    let ret = SymInitialize(process, ptr::null_mut(), libc::TRUE);\n     if ret != libc::TRUE { return Ok(()) }\n     let _c = Cleanup { handle: process, SymCleanup: SymCleanup };\n \n     // And now that we're done with all the setup, do the stack walking!\n     let mut i = 0i;\n     try!(write!(w, \"stack backtrace:\\n\"));\n     while StackWalk64(image, process, thread, &mut frame, &mut context,\n-                      0 as *mut libc::c_void,\n-                      0 as *mut libc::c_void,\n-                      0 as *mut libc::c_void,\n-                      0 as *mut libc::c_void) == libc::TRUE{\n+                      ptr::null_mut(),\n+                      ptr::null_mut(),\n+                      ptr::null_mut(),\n+                      ptr::null_mut()) == libc::TRUE{\n         let addr = frame.AddrPC.Offset;\n         if addr == frame.AddrReturn.Offset || addr == 0 ||\n            frame.AddrReturn.Offset == 0 { break }"}, {"sha": "83c116e9b05b7c6fb43acae9bf0f71bccc6f45b0", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -137,7 +137,7 @@ unsafe fn init_dtors() {\n     rt::at_exit(move|| {\n         DTOR_LOCK.lock();\n         let dtors = DTORS;\n-        DTORS = 0 as *mut _;\n+        DTORS = ptr::null_mut();\n         mem::transmute::<_, Box<Vec<(Key, Dtor)>>>(dtors);\n         assert!(DTORS.is_null()); // can't re-init after destructing\n         DTOR_LOCK.unlock();\n@@ -250,7 +250,7 @@ unsafe fn run_dtors() {\n         for &(key, dtor) in dtors.iter() {\n             let ptr = TlsGetValue(key);\n             if !ptr.is_null() {\n-                TlsSetValue(key, 0 as *mut _);\n+                TlsSetValue(key, ptr::null_mut());\n                 dtor(ptr as *mut _);\n                 any_run = true;\n             }"}, {"sha": "24e46d8d88e0d1546fb4f902a70d53ee8757bb3c", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907db6c8344a4df070ee2b21479062a63c3ae2be/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=907db6c8344a4df070ee2b21479062a63c3ae2be", "patch": "@@ -425,7 +425,7 @@ mod imp {\n                     dtor(ptr);\n                 }\n                 ptr = DTORS.get();\n-                DTORS.set(0 as *mut _);\n+                DTORS.set(ptr::null_mut());\n             }\n         }\n     }\n@@ -522,7 +522,7 @@ mod imp {\n         let key = ptr.key;\n         key.os.set(1 as *mut u8);\n         drop(ptr);\n-        key.os.set(0 as *mut u8);\n+        key.os.set(ptr::null_mut());\n     }\n }\n "}]}