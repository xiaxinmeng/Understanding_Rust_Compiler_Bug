{"sha": "bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYzM3ZTY5ZDc3Y2E2YzhhZDc4YTUzNjcyZTliZTZmNWI0YzY5ZGQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-15T11:24:15Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-15T11:24:15Z"}, "message": "Merge branch 'wip'", "tree": {"sha": "f4b88b15d8b4958aa250f414bcec98d8a9551519", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4b88b15d8b4958aa250f414bcec98d8a9551519"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd", "html_url": "https://github.com/rust-lang/rust/commit/bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b24edd6a231bd2fdfbb7df9c7658da7a1cc7ae65", "url": "https://api.github.com/repos/rust-lang/rust/commits/b24edd6a231bd2fdfbb7df9c7658da7a1cc7ae65", "html_url": "https://github.com/rust-lang/rust/commit/b24edd6a231bd2fdfbb7df9c7658da7a1cc7ae65"}, {"sha": "16f778ad207650c0c9f4e049953f5dda2c48ec12", "url": "https://api.github.com/repos/rust-lang/rust/commits/16f778ad207650c0c9f4e049953f5dda2c48ec12", "html_url": "https://github.com/rust-lang/rust/commit/16f778ad207650c0c9f4e049953f5dda2c48ec12"}], "stats": {"total": 88, "additions": 60, "deletions": 28}, "files": [{"sha": "36dfd71c48237fbb089aa516cc73ffd9209afdda", "filename": "src/bin/miri.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd", "patch": "@@ -78,7 +78,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n \n fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {\n     let frame = ecx.stack().last().expect(\"stackframe was empty\");\n-    let block = &frame.mir.basic_blocks()[frame.next_block];\n+    let block = &frame.mir.basic_blocks()[frame.block];\n     let span = if frame.stmt < block.statements.len() {\n         block.statements[frame.stmt].source_info.span\n     } else {\n@@ -101,12 +101,6 @@ fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {\n     err.emit();\n }\n \n-fn main() {\n-    init_logger();\n-    let args: Vec<String> = std::env::args().collect();\n-    rustc_driver::run_compiler(&args, &mut MiriCompilerCalls);\n-}\n-\n fn init_logger() {\n     const NSPACES: usize = 40;\n     let format = |record: &log::LogRecord| {\n@@ -130,3 +124,28 @@ fn init_logger() {\n \n     builder.init().unwrap();\n }\n+\n+fn find_sysroot() -> String {\n+    // Taken from https://github.com/Manishearth/rust-clippy/pull/911.\n+    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+    match (home, toolchain) {\n+        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n+        _ => option_env!(\"RUST_SYSROOT\")\n+            .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n+            .to_owned(),\n+    }\n+}\n+\n+fn main() {\n+    init_logger();\n+    let mut args: Vec<String> = std::env::args().collect();\n+\n+    let sysroot_flag = String::from(\"--sysroot\");\n+    if !args.contains(&sysroot_flag) {\n+        args.push(sysroot_flag);\n+        args.push(find_sysroot());\n+    }\n+\n+    rustc_driver::run_compiler(&args, &mut MiriCompilerCalls);\n+}"}, {"sha": "213f813529f5f32534d385ae81ab31fc6767595e", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd", "patch": "@@ -42,7 +42,7 @@ pub struct EvalContext<'a, 'tcx: 'a> {\n     /// The virtual memory system.\n     memory: Memory<'tcx>,\n \n-    /// Precomputed statics, constants and promoteds\n+    /// Precomputed statics, constants and promoteds.\n     statics: HashMap<ConstantId<'tcx>, Pointer>,\n \n     /// The virtual call stack.\n@@ -51,20 +51,25 @@ pub struct EvalContext<'a, 'tcx: 'a> {\n \n /// A stack frame.\n pub struct Frame<'a, 'tcx: 'a> {\n-    /// The def_id of the current function\n-    pub def_id: DefId,\n+    ////////////////////////////////////////////////////////////////////////////////\n+    // Function and callsite information\n+    ////////////////////////////////////////////////////////////////////////////////\n \n-    /// The span of the call site\n-    pub span: codemap::Span,\n+    /// The MIR for the function called on this frame.\n+    pub mir: CachedMir<'a, 'tcx>,\n+\n+    /// The def_id of the current function.\n+    pub def_id: DefId,\n \n-    /// type substitutions for the current function invocation\n+    /// type substitutions for the current function invocation.\n     pub substs: &'tcx Substs<'tcx>,\n \n-    /// The MIR for the function called on this frame.\n-    pub mir: CachedMir<'a, 'tcx>,\n+    /// The span of the call site.\n+    pub span: codemap::Span,\n \n-    /// The block that is currently executed (or will be executed after the above call stacks return)\n-    pub next_block: mir::BasicBlock,\n+    ////////////////////////////////////////////////////////////////////////////////\n+    // Return pointer and local allocations\n+    ////////////////////////////////////////////////////////////////////////////////\n \n     /// A pointer for writing the return value of the current call if it's not a diverging call.\n     pub return_ptr: Option<Pointer>,\n@@ -80,7 +85,15 @@ pub struct Frame<'a, 'tcx: 'a> {\n     /// The offset of the first temporary in `self.locals`.\n     pub temp_offset: usize,\n \n-    /// The index of the currently evaluated statment\n+    ////////////////////////////////////////////////////////////////////////////////\n+    // Current position within the function\n+    ////////////////////////////////////////////////////////////////////////////////\n+\n+    /// The block that is currently executed (or will be executed after the above call stacks\n+    /// return).\n+    pub block: mir::BasicBlock,\n+\n+    /// The index of the currently evaluated statment.\n     pub stmt: usize,\n }\n \n@@ -353,7 +366,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         self.stack.push(Frame {\n             mir: mir.clone(),\n-            next_block: mir::START_BLOCK,\n+            block: mir::START_BLOCK,\n             return_ptr: return_ptr,\n             locals: locals,\n             var_offset: num_args,\n@@ -378,13 +391,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Return => self.pop_stack_frame(),\n \n             Goto { target } => {\n-                self.frame_mut().next_block = target;\n+                self.frame_mut().block = target;\n             },\n \n             If { ref cond, targets: (then_target, else_target) } => {\n                 let cond_ptr = self.eval_operand(cond)?;\n                 let cond_val = self.memory.read_bool(cond_ptr)?;\n-                self.frame_mut().next_block = if cond_val { then_target } else { else_target };\n+                self.frame_mut().block = if cond_val { then_target } else { else_target };\n             }\n \n             SwitchInt { ref discr, ref values, ref targets, .. } => {\n@@ -407,7 +420,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n                 }\n \n-                self.frame_mut().next_block = target_block;\n+                self.frame_mut().block = target_block;\n             }\n \n             Switch { ref discr, ref targets, adt_def } => {\n@@ -419,7 +432,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                 match matching {\n                     Some(i) => {\n-                        self.frame_mut().next_block = targets[i];\n+                        self.frame_mut().block = targets[i];\n                     },\n                     None => return Err(EvalError::InvalidDiscriminant),\n                 }\n@@ -428,7 +441,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Call { ref func, ref args, ref destination, .. } => {\n                 let mut return_ptr = None;\n                 if let Some((ref lv, target)) = *destination {\n-                    self.frame_mut().next_block = target;\n+                    self.frame_mut().block = target;\n                     return_ptr = Some(self.eval_lvalue(lv)?.to_ptr());\n                 }\n \n@@ -458,14 +471,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let ptr = self.eval_lvalue(location)?.to_ptr();\n                 let ty = self.lvalue_ty(location);\n                 self.drop(ptr, ty)?;\n-                self.frame_mut().next_block = target;\n+                self.frame_mut().block = target;\n             }\n \n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n                 let actual_ptr = self.eval_operand(cond)?;\n                 let actual = self.memory.read_bool(actual_ptr)?;\n                 if actual == expected {\n-                    self.frame_mut().next_block = target;\n+                    self.frame_mut().block = target;\n                 } else {\n                     panic!(\"unimplemented: jump to {:?} and print {:?}\", cleanup, msg);\n                 }"}, {"sha": "f1dfcd6cfcd738d545e76df45cb41ffb96a9d566", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=bac37e69d77ca6c8ad78a53672e9be6f5b4c69dd", "patch": "@@ -37,7 +37,7 @@ impl<'ecx, 'a, 'tcx> Stepper<'ecx, 'a, 'tcx> {\n         trace!(\"{:?}\", terminator.kind);\n         self.ecx.eval_terminator(terminator)?;\n         if !self.ecx.stack.is_empty() {\n-            trace!(\"// {:?}\", self.ecx.frame().next_block);\n+            trace!(\"// {:?}\", self.ecx.frame().block);\n         }\n         Ok(())\n     }\n@@ -48,7 +48,7 @@ impl<'ecx, 'a, 'tcx> Stepper<'ecx, 'a, 'tcx> {\n             return Ok(false);\n         }\n \n-        let block = self.ecx.frame().next_block;\n+        let block = self.ecx.frame().block;\n         let stmt = self.ecx.frame().stmt;\n         let mir = self.ecx.mir();\n         let basic_block = &mir.basic_blocks()[block];"}]}