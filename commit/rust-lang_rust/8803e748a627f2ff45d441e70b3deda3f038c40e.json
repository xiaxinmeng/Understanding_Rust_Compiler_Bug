{"sha": "8803e748a627f2ff45d441e70b3deda3f038c40e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MDNlNzQ4YTYyN2YyZmY0NWQ0NDFlNzBiM2RlZGEzZjAzOGM0MGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-05T17:25:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-05T17:25:52Z"}, "message": "Merge #4166\n\n4166: Defining a default target to support cross-compilation targets  r=matklad a=FuriouZz\n\nRelated to #4163 \n\nCo-authored-by: Christophe MASSOLIN <christophe.massolin@gmail.com>", "tree": {"sha": "7bf401e386cc5939bc6548aad91d7f652ea2e5be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bf401e386cc5939bc6548aad91d7f652ea2e5be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8803e748a627f2ff45d441e70b3deda3f038c40e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesaGgCRBK7hj4Ov3rIwAAdHIIALGSXst5av698jJKZJXON86e\nbqNaxDdxySYLRmR98KGmeMktDRTVXyhPSHR4odDHExF23AhROHCOhwc7hBJRjiun\nnfpyT4jr4ipYftVZzprGUkdSFE8Xpt5M2wW2Wgii7rwnXWV5OP26Uz1ZAvPbmRj8\nBp8r1z06ssPVC2QLVYsiNp9C/7hWn1C6id6WIVqgVhNOvGnKyaJ2Phth9p7ots98\nFz2N83T61iPXakP8nAhqbOv/VeLlp5HkCljiJCrewGxQMMguWH/Q3mU9cqO2u1RY\nA3i//teQju4Ei4W1nB529x8AZq2gFO0Gv3uEeEOv/kApJ759AJfp/ObhQBAXdIs=\n=pmU1\n-----END PGP SIGNATURE-----\n", "payload": "tree 7bf401e386cc5939bc6548aad91d7f652ea2e5be\nparent df7b59081fabd96c6ee5599aad58c941cfb6beb7\nparent 04e32fbffca22e632594218e8dfafdc39281c6f7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588699552 +0000\ncommitter GitHub <noreply@github.com> 1588699552 +0000\n\nMerge #4166\n\n4166: Defining a default target to support cross-compilation targets  r=matklad a=FuriouZz\n\nRelated to #4163 \n\nCo-authored-by: Christophe MASSOLIN <christophe.massolin@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8803e748a627f2ff45d441e70b3deda3f038c40e", "html_url": "https://github.com/rust-lang/rust/commit/8803e748a627f2ff45d441e70b3deda3f038c40e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8803e748a627f2ff45d441e70b3deda3f038c40e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df7b59081fabd96c6ee5599aad58c941cfb6beb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/df7b59081fabd96c6ee5599aad58c941cfb6beb7", "html_url": "https://github.com/rust-lang/rust/commit/df7b59081fabd96c6ee5599aad58c941cfb6beb7"}, {"sha": "04e32fbffca22e632594218e8dfafdc39281c6f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/04e32fbffca22e632594218e8dfafdc39281c6f7", "html_url": "https://github.com/rust-lang/rust/commit/04e32fbffca22e632594218e8dfafdc39281c6f7"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "59f46a2a05e5b061dd5cd8467d6b84ae6f62ead6", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8803e748a627f2ff45d441e70b3deda3f038c40e/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8803e748a627f2ff45d441e70b3deda3f038c40e/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=8803e748a627f2ff45d441e70b3deda3f038c40e", "patch": "@@ -56,6 +56,9 @@ pub struct CargoConfig {\n \n     /// Runs cargo check on launch to figure out the correct values of OUT_DIR\n     pub load_out_dirs_from_check: bool,\n+\n+    /// rustc target\n+    pub target: Option<String>,\n }\n \n impl Default for CargoConfig {\n@@ -65,6 +68,7 @@ impl Default for CargoConfig {\n             all_features: true,\n             features: Vec::new(),\n             load_out_dirs_from_check: false,\n+            target: None,\n         }\n     }\n }\n@@ -160,6 +164,9 @@ impl CargoWorkspace {\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent);\n         }\n+        if let Some(target) = cargo_features.target.as_ref() {\n+            meta.other_options(&[String::from(\"--filter-platform\"), target.clone()]);\n+        }\n         let meta = meta.exec().with_context(|| {\n             format!(\"Failed to run `cargo metadata --manifest-path {}`\", cargo_toml.display())\n         })?;"}, {"sha": "c2b33c1dcaf1b576e3eb4359bb195ca0f5b80b4b", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8803e748a627f2ff45d441e70b3deda3f038c40e/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8803e748a627f2ff45d441e70b3deda3f038c40e/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=8803e748a627f2ff45d441e70b3deda3f038c40e", "patch": "@@ -543,7 +543,7 @@ impl ProjectWorkspace {\n     }\n }\n \n-pub fn get_rustc_cfg_options() -> CfgOptions {\n+pub fn get_rustc_cfg_options(target: Option<&String>) -> CfgOptions {\n     let mut cfg_options = CfgOptions::default();\n \n     // Some nightly-only cfgs, which are required for stdlib\n@@ -558,10 +558,12 @@ pub fn get_rustc_cfg_options() -> CfgOptions {\n \n     match (|| -> Result<String> {\n         // `cfg(test)` and `cfg(debug_assertion)` are handled outside, so we suppress them here.\n-        let output = Command::new(\"rustc\")\n-            .args(&[\"--print\", \"cfg\", \"-O\"])\n-            .output()\n-            .context(\"Failed to get output from rustc --print cfg -O\")?;\n+        let mut cmd = Command::new(\"rustc\");\n+        cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n+        if let Some(target) = target {\n+            cmd.args(&[\"--target\", target.as_str()]);\n+        }\n+        let output = cmd.output().context(\"Failed to get output from rustc --print cfg -O\")?;\n         if !output.status.success() {\n             bail!(\n                 \"rustc --print cfg -O exited with exit code ({})\","}, {"sha": "023ced6cfb9f02f135d5614559ef24117057211e", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8803e748a627f2ff45d441e70b3deda3f038c40e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8803e748a627f2ff45d441e70b3deda3f038c40e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=8803e748a627f2ff45d441e70b3deda3f038c40e", "patch": "@@ -149,7 +149,7 @@ pub(crate) fn load(\n \n     // FIXME: cfg options?\n     let default_cfg_options = {\n-        let mut opts = get_rustc_cfg_options();\n+        let mut opts = get_rustc_cfg_options(None);\n         opts.insert_atom(\"test\".into());\n         opts.insert_atom(\"debug_assertion\".into());\n         opts"}, {"sha": "8d85c60cf92a08e370e572b7389a5f1b97b9d2b4", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8803e748a627f2ff45d441e70b3deda3f038c40e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8803e748a627f2ff45d441e70b3deda3f038c40e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=8803e748a627f2ff45d441e70b3deda3f038c40e", "patch": "@@ -131,6 +131,7 @@ impl Config {\n         set(value, \"/cargo/allFeatures\", &mut self.cargo.all_features);\n         set(value, \"/cargo/features\", &mut self.cargo.features);\n         set(value, \"/cargo/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n+        set(value, \"/cargo/target\", &mut self.cargo.target);\n \n         match get(value, \"/procMacro/enable\") {\n             Some(true) => {"}, {"sha": "16020648df68aefab0b75dabc17eebd5241fa71f", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8803e748a627f2ff45d441e70b3deda3f038c40e/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8803e748a627f2ff45d441e70b3deda3f038c40e/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=8803e748a627f2ff45d441e70b3deda3f038c40e", "patch": "@@ -131,7 +131,7 @@ impl WorldState {\n \n         // FIXME: Read default cfgs from config\n         let default_cfg_options = {\n-            let mut opts = get_rustc_cfg_options();\n+            let mut opts = get_rustc_cfg_options(config.cargo.target.as_ref());\n             opts.insert_atom(\"test\".into());\n             opts.insert_atom(\"debug_assertion\".into());\n             opts"}, {"sha": "a05a697526b144dfe98700a39daca45939744bbc", "filename": "editors/code/package.json", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8803e748a627f2ff45d441e70b3deda3f038c40e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/8803e748a627f2ff45d441e70b3deda3f038c40e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=8803e748a627f2ff45d441e70b3deda3f038c40e", "patch": "@@ -233,6 +233,14 @@\n                     \"default\": false,\n                     \"markdownDescription\": \"Run `cargo check` on startup to get the correct value for package OUT_DIRs\"\n                 },\n+                \"rust-analyzer.cargo.target\": {\n+                    \"type\": [\n+                        \"null\",\n+                        \"string\"\n+                    ],\n+                    \"default\": null,\n+                    \"description\": \"Specify the compilation target\"\n+                },\n                 \"rust-analyzer.rustfmt.extraArgs\": {\n                     \"type\": \"array\",\n                     \"items\": {"}]}