{"sha": "107f14d2cac563608d31f08819380e4ed47e120a", "node_id": "C_kwDOAAsO6NoAKDEwN2YxNGQyY2FjNTYzNjA4ZDMxZjA4ODE5MzgwZTRlZDQ3ZTEyMGE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-16T05:27:05Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-17T11:24:34Z"}, "message": "Replace more `mk_foo` calls with `infer_foo`.", "tree": {"sha": "34105fb90ab927e5949e7e0f45a4a8928cf5e28e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34105fb90ab927e5949e7e0f45a4a8928cf5e28e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/107f14d2cac563608d31f08819380e4ed47e120a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/107f14d2cac563608d31f08819380e4ed47e120a", "html_url": "https://github.com/rust-lang/rust/commit/107f14d2cac563608d31f08819380e4ed47e120a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/107f14d2cac563608d31f08819380e4ed47e120a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "html_url": "https://github.com/rust-lang/rust/commit/2017aeff8887617fb7eef66d4b8dc81ca6e925c5"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "5e77cfa39f6df87652fa07899fc3846aa0425652", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=107f14d2cac563608d31f08819380e4ed47e120a", "patch": "@@ -1608,7 +1608,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .collect::<SmallVec<[_; 8]>>();\n         v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));\n         v.dedup();\n-        let existential_predicates = tcx.mk_poly_existential_predicates(v.into_iter());\n+        let existential_predicates = tcx.intern_poly_existential_predicates(&v);\n \n         // Use explicitly-specified region bound.\n         let region_bound = if !lifetime.is_elided() {"}, {"sha": "5e25a4554ed41015251bf93715f87c7178741a31", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=107f14d2cac563608d31f08819380e4ed47e120a", "patch": "@@ -1936,7 +1936,7 @@ pub(super) fn check_type_bounds<'tcx>(\n             .into()\n         }\n     });\n-    let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n+    let bound_vars = tcx.intern_bound_variable_kinds(&bound_vars);\n     let impl_ty_substs = tcx.intern_substs(&substs);\n     let container_id = impl_ty.container_id(tcx);\n "}, {"sha": "4720fea8ef4ab261f30de1e9d7cdb6541ee44d69", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=107f14d2cac563608d31f08819380e4ed47e120a", "patch": "@@ -137,14 +137,10 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let intrinsic_name = tcx.item_name(intrinsic_id);\n     let name_str = intrinsic_name.as_str();\n \n-    let bound_vars = tcx.mk_bound_variable_kinds(\n-        [\n-            ty::BoundVariableKind::Region(ty::BrAnon(0, None)),\n-            ty::BoundVariableKind::Region(ty::BrEnv),\n-        ]\n-        .iter()\n-        .copied(),\n-    );\n+    let bound_vars = tcx.intern_bound_variable_kinds(&[\n+        ty::BoundVariableKind::Region(ty::BrAnon(0, None)),\n+        ty::BoundVariableKind::Region(ty::BrEnv),\n+    ]);\n     let mk_va_list_ty = |mutbl| {\n         tcx.lang_items().va_list().map(|did| {\n             let region = tcx.mk_re_late_bound("}, {"sha": "14e3ba83b103721e154df45424ae6c5836656db4", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=107f14d2cac563608d31f08819380e4ed47e120a", "patch": "@@ -312,7 +312,7 @@ pub fn resolve_interior<'a, 'tcx>(\n \n     // Extract type components to build the witness type.\n     let type_list = fcx.tcx.mk_type_list(type_causes.iter().map(|cause| cause.ty));\n-    let bound_vars = fcx.tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n+    let bound_vars = fcx.tcx.intern_bound_variable_kinds(&bound_vars);\n     let witness =\n         fcx.tcx.mk_generator_witness(ty::Binder::bind_with_vars(type_list, bound_vars.clone()));\n "}, {"sha": "e2f32cdca3ca3c90088d5a16343ef3911ffb1c47", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=107f14d2cac563608d31f08819380e4ed47e120a", "patch": "@@ -2399,13 +2399,13 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {\n-        self.mk_bound_variable_kinds(\n-            self.late_bound_vars_map(id.owner)\n+        self.intern_bound_variable_kinds(\n+            &self\n+                .late_bound_vars_map(id.owner)\n                 .and_then(|map| map.get(&id.local_id).cloned())\n                 .unwrap_or_else(|| {\n                     bug!(\"No bound vars found for {}\", self.hir().node_to_string(id))\n-                })\n-                .into_iter(),\n+                }),\n         )\n     }\n "}, {"sha": "74c35ef0fc241059e273a2e53ff0260fc1e91dc1", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=107f14d2cac563608d31f08819380e4ed47e120a", "patch": "@@ -133,9 +133,9 @@ impl<'tcx> Cx<'tcx> {\n                     bug!(\"closure expr does not have closure type: {:?}\", closure_ty);\n                 };\n \n-                let bound_vars = self.tcx.mk_bound_variable_kinds(std::iter::once(\n-                    ty::BoundVariableKind::Region(ty::BrEnv),\n-                ));\n+                let bound_vars = self\n+                    .tcx\n+                    .intern_bound_variable_kinds(&[ty::BoundVariableKind::Region(ty::BrEnv)]);\n                 let br = ty::BoundRegion {\n                     var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                     kind: ty::BrEnv,"}, {"sha": "60a78e642c38220bd6107977ce99de93348d024d", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f14d2cac563608d31f08819380e4ed47e120a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=107f14d2cac563608d31f08819380e4ed47e120a", "patch": "@@ -564,10 +564,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 .into()\n                             }\n                         });\n-                        let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n+                        let bound_vars = tcx.intern_bound_variable_kinds(&bound_vars);\n                         let assoc_ty_substs = tcx.intern_substs(&substs);\n \n-                        let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n+                        let bound_vars = tcx.intern_bound_variable_kinds(&bound_vars);\n                         let bound =\n                             bound.map_bound(|b| b.kind().skip_binder()).subst(tcx, assoc_ty_substs);\n                         tcx.mk_predicate(ty::Binder::bind_with_vars(bound, bound_vars))"}, {"sha": "398329e455bfaad443fbbd01bda5bf397657681d", "filename": "src/tools/clippy/clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/107f14d2cac563608d31f08819380e4ed47e120a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f14d2cac563608d31f08819380e4ed47e120a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=107f14d2cac563608d31f08819380e4ed47e120a", "patch": "@@ -11,8 +11,6 @@ use rustc_middle::ty::adjustment::{Adjust, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::subst::GenericArg;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use std::iter;\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for redundant slicing expressions which use the full range, and\n@@ -136,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n                 } else if let Some(target_id) = cx.tcx.lang_items().deref_target() {\n                     if let Ok(deref_ty) = cx.tcx.try_normalize_erasing_regions(\n                         cx.param_env,\n-                        cx.tcx.mk_projection(target_id, cx.tcx.mk_substs(iter::once(GenericArg::from(indexed_ty)))),\n+                        cx.tcx.mk_projection(target_id, cx.tcx.intern_substs(&[GenericArg::from(indexed_ty)])),\n                     ) {\n                         if deref_ty == expr_ty {\n                             let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;"}, {"sha": "ebb71b57ae395fa3da5a148c218afdba86e399d4", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/107f14d2cac563608d31f08819380e4ed47e120a/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f14d2cac563608d31f08819380e4ed47e120a/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=107f14d2cac563608d31f08819380e4ed47e120a", "patch": "@@ -363,7 +363,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n                 tcx,\n                 ty::ParamEnv::reveal_all(),\n                 start_id,\n-                tcx.mk_substs(::std::iter::once(ty::subst::GenericArg::from(main_ret_ty))),\n+                tcx.intern_substs(&[ty::subst::GenericArg::from(main_ret_ty)]),\n             )\n             .unwrap()\n             .unwrap();"}]}