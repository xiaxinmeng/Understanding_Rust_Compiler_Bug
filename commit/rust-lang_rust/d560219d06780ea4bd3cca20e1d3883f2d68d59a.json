{"sha": "d560219d06780ea4bd3cca20e1d3883f2d68d59a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NjAyMTlkMDY3ODBlYTRiZDNjY2EyMGUxZDM4ODNmMmQ2OGQ1OWE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-03T17:45:58Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-04T17:38:20Z"}, "message": "Fixed bug in ExpandedRangeMap", "tree": {"sha": "2b04974d06009dcd1487b93ac159204faa38c09f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b04974d06009dcd1487b93ac159204faa38c09f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d560219d06780ea4bd3cca20e1d3883f2d68d59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d560219d06780ea4bd3cca20e1d3883f2d68d59a", "html_url": "https://github.com/rust-lang/rust/commit/d560219d06780ea4bd3cca20e1d3883f2d68d59a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d560219d06780ea4bd3cca20e1d3883f2d68d59a/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae609d7953297b355616c7862b8deefe74a8f95f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae609d7953297b355616c7862b8deefe74a8f95f", "html_url": "https://github.com/rust-lang/rust/commit/ae609d7953297b355616c7862b8deefe74a8f95f"}], "stats": {"total": 50, "additions": 16, "deletions": 34}, "files": [{"sha": "4965f9c33b647ec18daa365ab427587fc96a35e4", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d560219d06780ea4bd3cca20e1d3883f2d68d59a/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d560219d06780ea4bd3cca20e1d3883f2d68d59a/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=d560219d06780ea4bd3cca20e1d3883f2d68d59a", "patch": "@@ -157,15 +157,16 @@ impl ExpandedRangeMap {\n         self.ranges.push((relative_range, token_id.clone()))\n     }\n \n-    pub fn ranges(&self, to: &TokenMap) -> Vec<(TextRange, TextRange)> {\n+    pub fn ranges(&self, to: &TokenMap, start: TextUnit) -> Vec<(TextRange, TextRange)> {\n+        dbg!(&self.ranges);\n         self.ranges\n             .iter()\n             .filter_map(|(r, tid)| {\n-                if to.map_id == tid.map_id() {\n+                if to.map_id != tid.map_id() {\n                     return None;\n                 }\n                 if let Some(to_range) = to.relative_range_of(*tid) {\n-                    Some((*r, to_range))\n+                    Some((*r, TextRange::from_to(to_range.start() + start, to_range.end() + start)))\n                 } else {\n                     None\n                 }\n@@ -320,7 +321,6 @@ struct TtTreeSink<'a> {\n     cursor: Cursor<'a>,\n     text_pos: TextUnit,\n     inner: SyntaxTreeBuilder,\n-    range_marker: Option<(TextRange, tt::TokenId)>,\n     range_map: &'a mut ExpandedRangeMap,\n \n     // Number of roots\n@@ -337,7 +337,6 @@ impl<'a> TtTreeSink<'a> {\n             inner: SyntaxTreeBuilder::default(),\n             roots: smallvec::SmallVec::new(),\n             range_map,\n-            range_marker: None,\n         }\n     }\n }\n@@ -362,21 +361,27 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n             return;\n         }\n \n-        let mut last_ident = None;\n-\n         for _ in 0..n_tokens {\n             if self.cursor.eof() {\n                 break;\n             }\n \n             match self.cursor.token_tree() {\n                 Some(tt::TokenTree::Leaf(leaf)) => {\n-                    self.cursor = self.cursor.bump();\n-                    self.buf += &format!(\"{}\", leaf);\n-\n+                    // Mark the range if needed\n                     if let tt::Leaf::Ident(ident) = leaf {\n-                        last_ident = Some(ident);\n+                        if kind == IDENT {\n+                            let range = TextRange::offset_len(\n+                                self.text_pos + TextUnit::of_str(&self.buf),\n+                                TextUnit::of_str(&ident.text),\n+                            );\n+                            let token_id = ident.id;\n+                            self.range_map.set(range, &token_id);\n+                        }\n                     }\n+\n+                    self.cursor = self.cursor.bump();\n+                    self.buf += &format!(\"{}\", leaf);\n                 }\n                 Some(tt::TokenTree::Subtree(subtree)) => {\n                     self.cursor = self.cursor.subtree().unwrap();\n@@ -396,14 +401,6 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n         self.buf.clear();\n         self.inner.token(kind, text);\n \n-        // Mark the range if needed\n-        if let Some((range, token_id)) = self.range_marker.as_mut() {\n-            if let Some(ident) = last_ident {\n-                *range = TextRange::offset_len(range.start(), TextUnit::of_str(&ident.text));\n-                *token_id = ident.id;\n-            }\n-        }\n-\n         // Add whitespace between adjoint puncts\n         let next = self.cursor.bump();\n         if let (\n@@ -421,15 +418,6 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n     fn start_node(&mut self, kind: SyntaxKind) {\n         self.inner.start_node(kind);\n \n-        self.range_marker = if kind == IDENT {\n-            Some((\n-                TextRange::offset_len(self.text_pos, TextUnit::from_usize(0)),\n-                tt::TokenId::unspecified(),\n-            ))\n-        } else {\n-            None\n-        };\n-\n         match self.roots.last_mut() {\n             None | Some(0) => self.roots.push(1),\n             Some(ref mut n) => **n += 1,\n@@ -439,12 +427,6 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n     fn finish_node(&mut self) {\n         self.inner.finish_node();\n         *self.roots.last_mut().unwrap() -= 1;\n-\n-        if let Some(range) = self.range_marker {\n-            if range.1 != tt::TokenId::unspecified() {\n-                self.range_map.set(range.0, &range.1)\n-            }\n-        }\n     }\n \n     fn error(&mut self, error: ParseError) {"}]}