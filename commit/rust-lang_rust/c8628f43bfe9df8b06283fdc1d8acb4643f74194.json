{"sha": "c8628f43bfe9df8b06283fdc1d8acb4643f74194", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NjI4ZjQzYmZlOWRmOGIwNjI4M2ZkYzFkOGFjYjQ2NDNmNzQxOTQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-07T17:01:56Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-16T04:18:59Z"}, "message": "Take sys/vxworks/stack_overflow from sys/unix instead.", "tree": {"sha": "b207599a24da10d6e52dd34804e11c55c18c3b9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b207599a24da10d6e52dd34804e11c55c18c3b9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8628f43bfe9df8b06283fdc1d8acb4643f74194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8628f43bfe9df8b06283fdc1d8acb4643f74194", "html_url": "https://github.com/rust-lang/rust/commit/c8628f43bfe9df8b06283fdc1d8acb4643f74194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8628f43bfe9df8b06283fdc1d8acb4643f74194/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1947628b568c1d59048288486e68d917709f4d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1947628b568c1d59048288486e68d917709f4d4", "html_url": "https://github.com/rust-lang/rust/commit/d1947628b568c1d59048288486e68d917709f4d4"}], "stats": {"total": 41, "additions": 2, "deletions": 39}, "files": [{"sha": "d84742053524eb95950a1727b60dcf94b9c79c23", "filename": "library/std/src/sys/unix/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8628f43bfe9df8b06283fdc1d8acb4643f74194/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8628f43bfe9df8b06283fdc1d8acb4643f74194/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs?ref=c8628f43bfe9df8b06283fdc1d8acb4643f74194", "patch": "@@ -219,7 +219,7 @@ mod imp {\n     target_os = \"solaris\",\n     target_os = \"illumos\",\n     all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n-    target_os = \"openbsd\"\n+    target_os = \"openbsd\",\n )))]\n mod imp {\n     pub unsafe fn init() {}"}, {"sha": "362c2a4cc02e1c12f7d368e35a8e76d60ef4f773", "filename": "library/std/src/sys/vxworks/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8628f43bfe9df8b06283fdc1d8acb4643f74194/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8628f43bfe9df8b06283fdc1d8acb4643f74194/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs?ref=c8628f43bfe9df8b06283fdc1d8acb4643f74194", "patch": "@@ -28,6 +28,7 @@ pub mod process;\n pub mod rand;\n #[path = \"../unix/rwlock.rs\"]\n pub mod rwlock;\n+#[path = \"../unix/stack_overflow.rs\"]\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;"}, {"sha": "7b58c83193bf3579d484798a21d6c125a378d6d9", "filename": "library/std/src/sys/vxworks/stack_overflow.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d1947628b568c1d59048288486e68d917709f4d4/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1947628b568c1d59048288486e68d917709f4d4/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fstack_overflow.rs?ref=d1947628b568c1d59048288486e68d917709f4d4", "patch": "@@ -1,38 +0,0 @@\n-#![cfg_attr(test, allow(dead_code))]\n-\n-use self::imp::{drop_handler, make_handler};\n-\n-pub use self::imp::cleanup;\n-pub use self::imp::init;\n-\n-pub struct Handler {\n-    _data: *mut libc::c_void,\n-}\n-\n-impl Handler {\n-    pub unsafe fn new() -> Handler {\n-        make_handler()\n-    }\n-}\n-\n-impl Drop for Handler {\n-    fn drop(&mut self) {\n-        unsafe {\n-            drop_handler(self);\n-        }\n-    }\n-}\n-\n-mod imp {\n-    use crate::ptr;\n-\n-    pub unsafe fn init() {}\n-\n-    pub unsafe fn cleanup() {}\n-\n-    pub unsafe fn make_handler() -> super::Handler {\n-        super::Handler { _data: ptr::null_mut() }\n-    }\n-\n-    pub unsafe fn drop_handler(_handler: &mut super::Handler) {}\n-}"}]}