{"sha": "127a83df6615d09cda6ed9b53f7daba2d78c925d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyN2E4M2RmNjYxNWQwOWNkYTZlZDliNTNmN2RhYmEyZDc4YzkyNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-23T14:01:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-23T14:01:41Z"}, "message": "Auto merge of #37937 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\n- Successful merges: #37442, #37760, #37836, #37851, #37859, #37913, #37925\n- Failed merges:", "tree": {"sha": "eb600c4fd14fbd8ce216d84874396ee7b15440d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb600c4fd14fbd8ce216d84874396ee7b15440d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/127a83df6615d09cda6ed9b53f7daba2d78c925d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/127a83df6615d09cda6ed9b53f7daba2d78c925d", "html_url": "https://github.com/rust-lang/rust/commit/127a83df6615d09cda6ed9b53f7daba2d78c925d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/127a83df6615d09cda6ed9b53f7daba2d78c925d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fba8df2115141173ad60837f129f18e74424531", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fba8df2115141173ad60837f129f18e74424531", "html_url": "https://github.com/rust-lang/rust/commit/9fba8df2115141173ad60837f129f18e74424531"}, {"sha": "d2c600a2c9bc0e180e6cef0920fd75e00ae03bfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c600a2c9bc0e180e6cef0920fd75e00ae03bfd", "html_url": "https://github.com/rust-lang/rust/commit/d2c600a2c9bc0e180e6cef0920fd75e00ae03bfd"}], "stats": {"total": 436, "additions": 415, "deletions": 21}, "files": [{"sha": "71dfcf0b067ec2395b45fb0652b36036d1dd6e7f", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=127a83df6615d09cda6ed9b53f7daba2d78c925d", "patch": "@@ -17,7 +17,7 @@ the language.\n \n [**The Rust Reference**][ref]. While Rust does not have a\n specification, the reference tries to describe its working in\n-detail. It tends to be out of date.\n+detail. It is accurate, but not necessarily complete.\n \n [**Standard Library API Reference**][api]. Documentation for the\n standard library."}, {"sha": "ebf8c96def7cc1472d55b682d958b05a3253f91d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=127a83df6615d09cda6ed9b53f7daba2d78c925d", "patch": "@@ -48,6 +48,7 @@ use syntax::symbol::{Symbol, InternedString};\n use syntax_pos::{DUMMY_SP, Span};\n \n use rustc_const_math::ConstInt;\n+use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n \n use hir;\n use hir::itemlikevisit::ItemLikeVisitor;\n@@ -1887,7 +1888,7 @@ impl<'tcx> TyS<'tcx> {\n     /// Iterator that walks the immediate children of `self`.  Hence\n     /// `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]`\n     /// (but not `i32`, like `walk`).\n-    pub fn walk_shallow(&'tcx self) -> IntoIter<Ty<'tcx>> {\n+    pub fn walk_shallow(&'tcx self) -> AccIntoIter<walk::TypeWalkerArray<'tcx>> {\n         walk::walk_shallow(self)\n     }\n "}, {"sha": "2f9468dbe5887e532203a67afb07be4c64d16e98", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=127a83df6615d09cda6ed9b53f7daba2d78c925d", "patch": "@@ -12,17 +12,22 @@\n //! WARNING: this does not keep track of the region depth.\n \n use ty::{self, Ty};\n-use std::iter::Iterator;\n-use std::vec::IntoIter;\n+use rustc_data_structures::small_vec::SmallVec;\n+use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n+\n+// The TypeWalker's stack is hot enough that it's worth going to some effort to\n+// avoid heap allocations.\n+pub type TypeWalkerArray<'tcx> = [Ty<'tcx>; 8];\n+pub type TypeWalkerStack<'tcx> = SmallVec<TypeWalkerArray<'tcx>>;\n \n pub struct TypeWalker<'tcx> {\n-    stack: Vec<Ty<'tcx>>,\n+    stack: TypeWalkerStack<'tcx>,\n     last_subtree: usize,\n }\n \n impl<'tcx> TypeWalker<'tcx> {\n     pub fn new(ty: Ty<'tcx>) -> TypeWalker<'tcx> {\n-        TypeWalker { stack: vec![ty], last_subtree: 1, }\n+        TypeWalker { stack: SmallVec::one(ty), last_subtree: 1, }\n     }\n \n     /// Skips the subtree of types corresponding to the last type\n@@ -61,8 +66,8 @@ impl<'tcx> Iterator for TypeWalker<'tcx> {\n     }\n }\n \n-pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> IntoIter<Ty<'tcx>> {\n-    let mut stack = vec![];\n+pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> AccIntoIter<TypeWalkerArray<'tcx>> {\n+    let mut stack = SmallVec::new();\n     push_subtypes(&mut stack, ty);\n     stack.into_iter()\n }\n@@ -73,7 +78,7 @@ pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> IntoIter<Ty<'tcx>> {\n // known to be significant to any code, but it seems like the\n // natural order one would expect (basically, the order of the\n // types as they are written).\n-fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n+fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n     match parent_ty.sty {\n         ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n         ty::TyStr | ty::TyInfer(_) | ty::TyParam(_) | ty::TyNever | ty::TyError => {\n@@ -112,7 +117,7 @@ fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n     }\n }\n \n-fn push_sig_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, sig: &ty::PolyFnSig<'tcx>) {\n+fn push_sig_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, sig: &ty::PolyFnSig<'tcx>) {\n     stack.push(sig.0.output);\n     stack.extend(sig.0.inputs.iter().cloned().rev());\n }"}, {"sha": "4e2b3786021026bf85b6821724ee0cfe3612201b", "filename": "src/librustc_data_structures/small_vec.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsmall_vec.rs?ref=127a83df6615d09cda6ed9b53f7daba2d78c925d", "patch": "@@ -130,6 +130,18 @@ impl<A: Array> SmallVec<A> {\n             self.set_len(len + 1);\n         }\n     }\n+\n+    pub fn truncate(&mut self, len: usize) {\n+        unsafe {\n+            while len < self.len() {\n+                // Decrement len before the drop_in_place(), so a panic on Drop\n+                // doesn't re-drop the just-failed value.\n+                let newlen = self.len() - 1;\n+                self.set_len(newlen);\n+                ::std::ptr::drop_in_place(self.get_unchecked_mut(newlen));\n+            }\n+        }\n+    }\n }\n \n impl<A: Array> Deref for SmallVec<A> {"}, {"sha": "5839c606566c31c73ea834d54d3615d7f840a755", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=127a83df6615d09cda6ed9b53f7daba2d78c925d", "patch": "@@ -102,6 +102,7 @@ enum CastError {\n     /// Cast of thin to fat raw ptr (eg. `*const () as *const [u8]`)\n     SizedUnsizedCast,\n     IllegalCast,\n+    NeedDeref,\n     NeedViaPtr,\n     NeedViaThinPtr,\n     NeedViaInt,\n@@ -138,6 +139,25 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n \n     fn report_cast_error(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>, e: CastError) {\n         match e {\n+            CastError::NeedDeref => {\n+                let cast_ty = fcx.ty_to_string(self.cast_ty);\n+                let mut err = fcx.type_error_struct(self.cast_span,\n+                                       |actual| {\n+                                           format!(\"casting `{}` as `{}` is invalid\",\n+                                                   actual,\n+                                                   cast_ty)\n+                                       },\n+                                       self.expr_ty);\n+                err.span_label(self.expr.span,\n+                               &format!(\"cannot cast `{}` as `{}`\",\n+                                        fcx.ty_to_string(self.expr_ty),\n+                                        cast_ty));\n+                if let Ok(snippet) = fcx.sess().codemap().span_to_snippet(self.expr.span) {\n+                    err.span_label(self.expr.span,\n+                                   &format!(\"did you mean `*{}`?\", snippet));\n+                }\n+                err.emit();\n+            }\n             CastError::NeedViaThinPtr |\n             CastError::NeedViaPtr => {\n                 let mut err = fcx.type_error_struct(self.span,\n@@ -390,8 +410,28 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             (Ptr(m_e), Ptr(m_c)) => self.check_ptr_ptr_cast(fcx, m_e, m_c), // ptr-ptr-cast\n             (Ptr(m_expr), Int(_)) => self.check_ptr_addr_cast(fcx, m_expr), // ptr-addr-cast\n             (FnPtr, Int(_)) => Ok(CastKind::FnPtrAddrCast),\n-            (RPtr(_), Int(_)) |\n-            (RPtr(_), Float) => Err(CastError::NeedViaPtr),\n+            (RPtr(p), Int(_)) |\n+            (RPtr(p), Float) => {\n+                match p.ty.sty {\n+                    ty::TypeVariants::TyInt(_) |\n+                    ty::TypeVariants::TyUint(_) |\n+                    ty::TypeVariants::TyFloat(_) => {\n+                        Err(CastError::NeedDeref)\n+                    }\n+                    ty::TypeVariants::TyInfer(t) => {\n+                        match t {\n+                            ty::InferTy::IntVar(_) |\n+                            ty::InferTy::FloatVar(_) |\n+                            ty::InferTy::FreshIntTy(_) |\n+                            ty::InferTy::FreshFloatTy(_) => {\n+                                Err(CastError::NeedDeref)\n+                            }\n+                            _ => Err(CastError::NeedViaPtr),\n+                        }\n+                    }\n+                    _ => Err(CastError::NeedViaPtr),\n+                }\n+            }\n             // * -> ptr\n             (Int(_), Ptr(mt)) => self.check_addr_ptr_cast(fcx, mt), // addr-ptr-cast\n             (FnPtr, Ptr(mt)) => self.check_fptr_ptr_cast(fcx, mt),"}, {"sha": "baa2b5d2846220c3ea41e1e3622f267cc43a3804", "filename": "src/libstd/env.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=127a83df6615d09cda6ed9b53f7daba2d78c925d", "patch": "@@ -546,17 +546,23 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     os_imp::current_exe()\n }\n \n-/// An iterator over the arguments of a process, yielding a `String` value\n+/// An iterator over the arguments of a process, yielding a [`String`] value\n /// for each argument.\n ///\n-/// This structure is created through the `std::env::args` method.\n+/// This structure is created through the [`std::env::args`] method.\n+///\n+/// [`String`]: ../string/struct.String.html\n+/// [`std::env::args`]: ./fn.args.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Args { inner: ArgsOs }\n \n-/// An iterator over the arguments of a process, yielding an `OsString` value\n+/// An iterator over the arguments of a process, yielding an [`OsString`] value\n /// for each argument.\n ///\n-/// This structure is created through the `std::env::args_os` method.\n+/// This structure is created through the [`std::env::args_os`] method.\n+///\n+/// [`OsString`]: ../ffi/struct.OsString.html\n+/// [`std::env::args_os`]: ./fn.args_os.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct ArgsOs { inner: sys::args::Args }\n \n@@ -571,7 +577,7 @@ pub struct ArgsOs { inner: sys::args::Args }\n ///\n /// The returned iterator will panic during iteration if any argument to the\n /// process is not valid unicode. If this is not desired,\n-/// use the `args_os` function instead.\n+/// use the [`args_os`] function instead.\n ///\n /// # Examples\n ///\n@@ -583,6 +589,8 @@ pub struct ArgsOs { inner: sys::args::Args }\n ///     println!(\"{}\", argument);\n /// }\n /// ```\n+///\n+/// [`args_os`]: ./fn.args_os.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn args() -> Args {\n     Args { inner: args_os() }"}, {"sha": "0328012ee57269a4411c6499da22de23907ff027", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=127a83df6615d09cda6ed9b53f7daba2d78c925d", "patch": "@@ -194,6 +194,14 @@ impl SocketAddr {\n \n impl SocketAddrV4 {\n     /// Creates a new socket address from the (ip, port) pair.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV4, Ipv4Addr};\n+    ///\n+    /// let socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(ip: Ipv4Addr, port: u16) -> SocketAddrV4 {\n         SocketAddrV4 {\n@@ -207,6 +215,15 @@ impl SocketAddrV4 {\n     }\n \n     /// Returns the IP address associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV4, Ipv4Addr};\n+    ///\n+    /// let socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n+    /// assert_eq!(socket.ip(), &Ipv4Addr::new(127, 0, 0, 1));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn ip(&self) -> &Ipv4Addr {\n         unsafe {\n@@ -215,18 +232,47 @@ impl SocketAddrV4 {\n     }\n \n     /// Change the IP address associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV4, Ipv4Addr};\n+    ///\n+    /// let mut socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n+    /// socket.set_ip(Ipv4Addr::new(192, 168, 0, 1));\n+    /// assert_eq!(socket.ip(), &Ipv4Addr::new(192, 168, 0, 1));\n+    /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_ip(&mut self, new_ip: Ipv4Addr) {\n         self.inner.sin_addr = *new_ip.as_inner()\n     }\n \n     /// Returns the port number associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV4, Ipv4Addr};\n+    ///\n+    /// let socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n+    /// assert_eq!(socket.port(), 8080);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn port(&self) -> u16 {\n         ntoh(self.inner.sin_port)\n     }\n \n     /// Change the port number associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV4, Ipv4Addr};\n+    ///\n+    /// let mut socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n+    /// socket.set_port(4242);\n+    /// assert_eq!(socket.port(), 4242);\n+    /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_port(&mut self, new_port: u16) {\n         self.inner.sin_port = hton(new_port);"}, {"sha": "b98f464c902278443f7ecec8231ea4efc6c6508b", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=127a83df6615d09cda6ed9b53f7daba2d78c925d", "patch": "@@ -115,4 +115,9 @@ fn main()\n     let _ = cf as *const Bar;\n     //~^ ERROR casting\n     //~^^ NOTE vtable kinds\n+\n+    vec![0.0].iter().map(|s| s as f32).collect::<Vec<f32>>();\n+    //~^ ERROR casting `&{float}` as `f32` is invalid\n+    //~| NOTE cannot cast `&{float}` as `f32`\n+    //~| NOTE did you mean `*s`?\n }"}, {"sha": "c4366ea11e3f648acfc9a93f06f1436756316a19", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/rust-lang/rust/blob/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=127a83df6615d09cda6ed9b53f7daba2d78c925d", "patch": "@@ -0,0 +1,254 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for struct constructor expressions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+struct RegularStruct {\n+    x: i32,\n+    y: i64,\n+    z: i16,\n+}\n+\n+// Change field value (regular struct) -----------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_value_regular_struct() -> RegularStruct {\n+    RegularStruct {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_value_regular_struct() -> RegularStruct {\n+    RegularStruct {\n+        x: 0,\n+        y: 2,\n+        z: 2,\n+    }\n+}\n+\n+\n+\n+// Change field order (regular struct) -----------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_order_regular_struct() -> RegularStruct {\n+    RegularStruct {\n+        x: 3,\n+        y: 4,\n+        z: 5,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_order_regular_struct() -> RegularStruct {\n+    RegularStruct {\n+        y: 4,\n+        x: 3,\n+        z: 5,\n+    }\n+}\n+\n+\n+\n+// Add field (regular struct) --------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_field_regular_struct() -> RegularStruct {\n+    let struct1 = RegularStruct {\n+        x: 3,\n+        y: 4,\n+        z: 5,\n+    };\n+\n+    RegularStruct {\n+        x: 7,\n+        .. struct1\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_field_regular_struct() -> RegularStruct {\n+    let struct1 = RegularStruct {\n+        x: 3,\n+        y: 4,\n+        z: 5,\n+    };\n+\n+    RegularStruct {\n+        x: 7,\n+        y: 8,\n+        .. struct1\n+    }\n+}\n+\n+\n+\n+// Change field label (regular struct) -----------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_label_regular_struct() -> RegularStruct {\n+    let struct1 = RegularStruct {\n+        x: 3,\n+        y: 4,\n+        z: 5,\n+    };\n+\n+    RegularStruct {\n+        x: 7,\n+        y: 9,\n+        .. struct1\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_label_regular_struct() -> RegularStruct {\n+    let struct1 = RegularStruct {\n+        x: 3,\n+        y: 4,\n+        z: 5,\n+    };\n+\n+    RegularStruct {\n+        x: 7,\n+        z: 9,\n+        .. struct1\n+    }\n+}\n+\n+\n+\n+struct RegularStruct2 {\n+    x: i8,\n+    y: i8,\n+    z: i8,\n+}\n+\n+// Change constructor path (regular struct) ------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_path_regular_struct() {\n+    let _ = RegularStruct {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    };\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_path_regular_struct() {\n+    let _ = RegularStruct2 {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    };\n+}\n+\n+\n+\n+// Change constructor path indirectly (regular struct) -------------------------\n+mod change_constructor_path_indirectly_regular_struct {\n+    #[cfg(cfail1)]\n+    use super::RegularStruct as Struct;\n+    #[cfg(not(cfail1))]\n+    use super::RegularStruct2 as Struct;\n+\n+    fn function() -> Struct {\n+        Struct {\n+            x: 0,\n+            y: 1,\n+            z: 2,\n+        }\n+    }\n+}\n+\n+\n+\n+struct TupleStruct(i32, i64, i16);\n+\n+// Change field value (tuple struct) -------------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_value_tuple_struct() -> TupleStruct {\n+    TupleStruct(0, 1, 2)\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_value_tuple_struct() -> TupleStruct {\n+    TupleStruct(0, 1, 3)\n+}\n+\n+\n+\n+struct TupleStruct2(u16, u16, u16);\n+\n+// Change constructor path (tuple struct) --------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_path_tuple_struct() {\n+    let _ = TupleStruct(0, 1, 2);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_path_tuple_struct() {\n+    let _ = TupleStruct2(0, 1, 2);\n+}\n+\n+\n+\n+// Change constructor path indirectly (tuple struct) ---------------------------\n+mod change_constructor_path_indirectly_tuple_struct {\n+    #[cfg(cfail1)]\n+    use super::TupleStruct as Struct;\n+    #[cfg(not(cfail1))]\n+    use super::TupleStruct2 as Struct;\n+\n+    fn function() -> Struct {\n+        Struct(0, 1, 2)\n+    }\n+}"}, {"sha": "a946ec635b29ffdccbdc8a56a4d959d9229230e7", "filename": "src/test/run-pass-fulldeps/myriad-closures.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Ftest%2Frun-pass-fulldeps%2Fmyriad-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Ftest%2Frun-pass-fulldeps%2Fmyriad-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmyriad-closures.rs?ref=127a83df6615d09cda6ed9b53f7daba2d78c925d", "patch": "@@ -13,6 +13,9 @@\n // toolchain.\n // See https://github.com/rust-lang/rust/issues/34793 for more information.\n \n+// Make sure we don't optimize anything away:\n+// compile-flags: -C no-prepopulate-passes\n+\n // Expand something exponentially\n macro_rules! go_bacterial {\n     ($mac:ident) => ($mac!());\n@@ -23,10 +26,7 @@ macro_rules! go_bacterial {\n }\n \n macro_rules! mk_closure {\n-    () => ({\n-        let c = |a: u32| a + 4;\n-        let _ = c(2);\n-    })\n+    () => ((move || {})())\n }\n \n macro_rules! mk_fn {", "previous_filename": "src/test/run-pass/myriad-closures.rs"}, {"sha": "1909be4df7ba201f9e2e8e9189fe6f26b703e2ba", "filename": "src/test/run-pass/issue-23699.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Ftest%2Frun-pass%2Fissue-23699.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127a83df6615d09cda6ed9b53f7daba2d78c925d/src%2Ftest%2Frun-pass%2Fissue-23699.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23699.rs?ref=127a83df6615d09cda6ed9b53f7daba2d78c925d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn gimme_a_raw_pointer<T>(_: *const T) { }\n+\n+fn test<T>(t: T) { }\n+\n+fn main() {\n+    // Clearly `pointer` must be of type `*const ()`.\n+    let pointer = &() as *const _;\n+    gimme_a_raw_pointer(pointer);\n+\n+    let t = test as fn (i32);\n+    t(0i32);\n+}\n+"}]}