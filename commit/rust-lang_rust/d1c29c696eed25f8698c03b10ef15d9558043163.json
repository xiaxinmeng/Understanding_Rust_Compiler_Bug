{"sha": "d1c29c696eed25f8698c03b10ef15d9558043163", "node_id": "C_kwDOAAsO6NoAKGQxYzI5YzY5NmVlZDI1Zjg2OThjMDNiMTBlZjE1ZDk1NTgwNDMxNjM", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-10-22T19:46:45Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-10-22T19:46:45Z"}, "message": "Revert def_id addition from clean::Function, add test for\nscrape-examples options", "tree": {"sha": "ae8564ea0bff6d7e092be2016413a14a713d549b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae8564ea0bff6d7e092be2016413a14a713d549b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1c29c696eed25f8698c03b10ef15d9558043163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c29c696eed25f8698c03b10ef15d9558043163", "html_url": "https://github.com/rust-lang/rust/commit/d1c29c696eed25f8698c03b10ef15d9558043163", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1c29c696eed25f8698c03b10ef15d9558043163/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f80d86d85ca88e69f423eae88db3adc1e277f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f80d86d85ca88e69f423eae88db3adc1e277f24", "html_url": "https://github.com/rust-lang/rust/commit/8f80d86d85ca88e69f423eae88db3adc1e277f24"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "51f365be922fa3225746cccbfa4e6c2723389819", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=d1c29c696eed25f8698c03b10ef15d9558043163", "patch": "@@ -458,7 +458,13 @@ Calculating code examples follows these rules:\n \n ### `--with-examples`: include examples of uses of items as documentation\n \n-This option, combined with `--scrape-examples-target-crate` and `--scrape-examples-output-path`, is used to implement the functionality in [RFC #3123](https://github.com/rust-lang/rfcs/pull/3123). Uses of an item (currently functions / call-sites) are found in a crate and its reverse-dependencies, and then the uses are included as documentation for that item. This feature is intended to be used via `cargo doc --scrape-examples`, but the rustdoc-only workflow looks like:\n+This option, combined with `--scrape-examples-target-crate` and\n+`--scrape-examples-output-path`, is used to implement the functionality in [RFC\n+#3123](https://github.com/rust-lang/rfcs/pull/3123). Uses of an item (currently\n+functions / call-sites) are found in a crate and its reverse-dependencies, and\n+then the uses are included as documentation for that item. This feature is\n+intended to be used via `cargo doc --scrape-examples`, but the rustdoc-only\n+workflow looks like:\n \n ```bash\n $ rustdoc examples/ex.rs -Z unstable-options \\\n@@ -468,4 +474,8 @@ $ rustdoc examples/ex.rs -Z unstable-options \\\n $ rustdoc src/lib.rs -Z unstable-options --with-examples output.calls\n ```\n \n-First, the library must be checked to generate an `rmeta`. Then a reverse-dependency like `examples/ex.rs` is given to rustdoc with the target crate being documented (`foobar`) and a path to output the calls (`output.calls`). Then, the generated calls file can be passed via `--with-examples` to the subsequent documentation of `foobar`.\n+First, the library must be checked to generate an `rmeta`. Then a\n+reverse-dependency like `examples/ex.rs` is given to rustdoc with the target\n+crate being documented (`foobar`) and a path to output the calls\n+(`output.calls`). Then, the generated calls file can be passed via\n+`--with-examples` to the subsequent documentation of `foobar`."}, {"sha": "4a888b22332ee98fa18b915f27de6a52ebe0a3ec", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d1c29c696eed25f8698c03b10ef15d9558043163", "patch": "@@ -235,7 +235,6 @@ fn build_external_function(cx: &mut DocContext<'_>, did: DefId) -> clean::Functi\n         decl,\n         generics,\n         header: hir::FnHeader { unsafety: sig.unsafety(), abi: sig.abi(), constness, asyncness },\n-        def_id: did,\n     }\n }\n "}, {"sha": "23307eb48c6cd72b30e3b29a257d49ccbc97e8ca", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d1c29c696eed25f8698c03b10ef15d9558043163", "patch": "@@ -801,8 +801,7 @@ impl<'a> Clean<Function> for (&'a hir::FnSig<'a>, &'a hir::Generics<'a>, hir::Bo\n     fn clean(&self, cx: &mut DocContext<'_>) -> Function {\n         let (generics, decl) =\n             enter_impl_trait(cx, |cx| (self.1.clean(cx), (&*self.0.decl, self.2).clean(cx)));\n-        let def_id = self.2.hir_id.owner.to_def_id();\n-        Function { decl, generics, header: self.0.header, def_id }\n+        Function { decl, generics, header: self.0.header }\n     }\n }\n \n@@ -934,8 +933,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                     let (generics, decl) = enter_impl_trait(cx, |cx| {\n                         (self.generics.clean(cx), (&*sig.decl, &names[..]).clean(cx))\n                     });\n-                    let def_id = self.def_id.to_def_id();\n-                    let mut t = Function { header: sig.header, decl, generics, def_id };\n+                    let mut t = Function { header: sig.header, decl, generics };\n                     if t.header.constness == hir::Constness::Const\n                         && is_unstable_const_fn(cx.tcx, local_did).is_some()\n                     {\n@@ -1069,7 +1067,6 @@ impl Clean<Item> for ty::AssocItem {\n                                 constness,\n                                 asyncness,\n                             },\n-                            def_id: self.def_id,\n                         },\n                         defaultness,\n                     )\n@@ -1083,7 +1080,6 @@ impl Clean<Item> for ty::AssocItem {\n                             constness: hir::Constness::NotConst,\n                             asyncness: hir::IsAsync::NotAsync,\n                         },\n-                        def_id: self.def_id,\n                     })\n                 }\n             }\n@@ -2103,7 +2099,6 @@ impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n                             constness: hir::Constness::NotConst,\n                             asyncness: hir::IsAsync::NotAsync,\n                         },\n-                        def_id,\n                     })\n                 }\n                 hir::ForeignItemKind::Static(ref ty, mutability) => {"}, {"sha": "0e78fe7aec357f001ff0900d79ef75c3df4c3268", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d1c29c696eed25f8698c03b10ef15d9558043163", "patch": "@@ -1254,7 +1254,6 @@ crate struct Function {\n     crate decl: FnDecl,\n     crate generics: Generics,\n     crate header: hir::FnHeader,\n-    crate def_id: DefId,\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]"}, {"sha": "25ec28302f7c72cf3d1e0a92db3c87c249c7b81c", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d1c29c696eed25f8698c03b10ef15d9558043163", "patch": "@@ -597,11 +597,10 @@ fn document_full_inner(\n         clean::ItemKind::StrippedItem(box kind) | kind => kind,\n     };\n \n-    match kind {\n-        clean::ItemKind::FunctionItem(f) | clean::ItemKind::MethodItem(f, _) => {\n-            render_call_locations(w, cx, f.def_id, item);\n+    if let clean::ItemKind::FunctionItem(..) | clean::ItemKind::MethodItem(..) = kind {\n+        if let Some(def_id) = item.def_id.as_def_id() {\n+            render_call_locations(w, cx, def_id, item);\n         }\n-        _ => {}\n     }\n }\n "}, {"sha": "731fc4ff3ce00623469485a6c7d5447d9694d1ce", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=d1c29c696eed25f8698c03b10ef15d9558043163", "patch": "@@ -289,7 +289,7 @@ crate fn from_fn_header(header: &rustc_hir::FnHeader) -> HashSet<Qualifiers> {\n \n impl FromWithTcx<clean::Function> for Function {\n     fn from_tcx(function: clean::Function, tcx: TyCtxt<'_>) -> Self {\n-        let clean::Function { decl, generics, header, def_id: _ } = function;\n+        let clean::Function { decl, generics, header } = function;\n         Function {\n             decl: decl.into_tcx(tcx),\n             generics: generics.into_tcx(tcx),\n@@ -530,7 +530,7 @@ crate fn from_function_method(\n     has_body: bool,\n     tcx: TyCtxt<'_>,\n ) -> Method {\n-    let clean::Function { header, decl, generics, def_id: _ } = function;\n+    let clean::Function { header, decl, generics } = function;\n     Method {\n         decl: decl.into_tcx(tcx),\n         generics: generics.into_tcx(tcx),"}, {"sha": "a1f005c32ee0fa837ee3d1e64d4f3f832122e785", "filename": "src/test/rustdoc-ui/scrape-examples-wrong-options-1.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-1.rs?ref=d1c29c696eed25f8698c03b10ef15d9558043163", "patch": "@@ -0,0 +1 @@\n+// compile-flags: -Z unstable-options --scrape-examples-target-crate foobar"}, {"sha": "eb8e9f799681fee13b718594e5c336713dbb0fd2", "filename": "src/test/rustdoc-ui/scrape-examples-wrong-options-1.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-1.stderr?ref=d1c29c696eed25f8698c03b10ef15d9558043163", "patch": "@@ -0,0 +1,2 @@\n+error: must use --scrape-examples-output-path and --scrape-examples-target-crate together\n+"}, {"sha": "4aacec7f09493fc8816b01007e2c4c17455f3935", "filename": "src/test/rustdoc-ui/scrape-examples-wrong-options-2.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-2.rs?ref=d1c29c696eed25f8698c03b10ef15d9558043163", "patch": "@@ -0,0 +1 @@\n+// compile-flags: -Z unstable-options --scrape-examples-output-path ex.calls"}, {"sha": "eb8e9f799681fee13b718594e5c336713dbb0fd2", "filename": "src/test/rustdoc-ui/scrape-examples-wrong-options-2.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1c29c696eed25f8698c03b10ef15d9558043163/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-2.stderr?ref=d1c29c696eed25f8698c03b10ef15d9558043163", "patch": "@@ -0,0 +1,2 @@\n+error: must use --scrape-examples-output-path and --scrape-examples-target-crate together\n+"}, {"sha": "b18d4715453e60acfe39b9fb1015918140689a6b", "filename": "src/test/rustdoc-ui/scrape-examples-wrong-options.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f80d86d85ca88e69f423eae88db3adc1e277f24/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f80d86d85ca88e69f423eae88db3adc1e277f24/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options.rs?ref=8f80d86d85ca88e69f423eae88db3adc1e277f24", "patch": "@@ -1 +0,0 @@\n-// compile-flags: --scrape-examples-target-crate foobar"}, {"sha": "b4ad28f92dad5270535d0f46fa7a8554ca996fbb", "filename": "src/test/rustdoc-ui/scrape-examples-wrong-options.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f80d86d85ca88e69f423eae88db3adc1e277f24/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f80d86d85ca88e69f423eae88db3adc1e277f24/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options.stderr?ref=8f80d86d85ca88e69f423eae88db3adc1e277f24", "patch": "@@ -1,2 +0,0 @@\n-error: the `-Z unstable-options` flag must also be passed to enable the flag `scrape-examples-target-crate`\n-"}]}