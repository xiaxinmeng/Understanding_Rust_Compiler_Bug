{"sha": "63916d6f0429718112661e47fac37b2fcfea338e", "node_id": "C_kwDOAAsO6NoAKDYzOTE2ZDZmMDQyOTcxODExMjY2MWU0N2ZhYzM3YjJmY2ZlYTMzOGU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-06T09:53:52Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-08T15:55:37Z"}, "message": "Document all the things", "tree": {"sha": "3d075a38bb4dfabe03930a340bcc60e8e898160c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d075a38bb4dfabe03930a340bcc60e8e898160c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63916d6f0429718112661e47fac37b2fcfea338e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63916d6f0429718112661e47fac37b2fcfea338e", "html_url": "https://github.com/rust-lang/rust/commit/63916d6f0429718112661e47fac37b2fcfea338e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63916d6f0429718112661e47fac37b2fcfea338e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54b6b034104ce81a8d02800b9fc7d5181389b4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/54b6b034104ce81a8d02800b9fc7d5181389b4df", "html_url": "https://github.com/rust-lang/rust/commit/54b6b034104ce81a8d02800b9fc7d5181389b4df"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "fef2c6d44ba6af43667f063f7a6eb1574b3a90f7", "filename": "ui_test/README.md", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/63916d6f0429718112661e47fac37b2fcfea338e/ui_test%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/63916d6f0429718112661e47fac37b2fcfea338e/ui_test%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FREADME.md?ref=63916d6f0429718112661e47fac37b2fcfea338e", "patch": "@@ -7,25 +7,37 @@ A smaller version of compiletest-rs\n \n ## Supported magic comment annotations\n \n-* `// ignore-XXX` avoids running the test on targets whose triple contains `XXX`\n+If your test tests for failure, you need to add a `//~` annotation where the error is happening\n+to make sure that the test will always keep failing with a specific message at the annotated line.\n+\n+`//~ ERROR: XXX` make sure the stderr output contains `XXX` for an error in the line where this comment is written\n+\n+* Also supports `HELP`, `WARN` or `NOTE` for different kind of message\n+    * if one of those levels is specified explicitly, *all* diagnostics of this level or higher need an annotation. If you want to avoid this, just leave out the all caps level note entirely.\n+* If the all caps note is left out, a message of any level is matched. Leaving it out is not allowed for `ERROR` levels.\n+* This checks the output *before* normalization, so you can check things that get normalized away, but need to\n+    be careful not to accidentally have a pattern that differs between platforms.\n+\n+In order to change how a single test is tested, you can add various `//@` comments to the test.\n+Any other comments will be ignored, and all `//@` comments must be formatted precisely as\n+their command specifies, or the test will fail without even being run.\n+\n+* `//@ignore-XXX` avoids running the test on targets whose triple contains `XXX`\n     * `XXX` can also be one of `64bit`, `32bit` or `16bit`\n-* `// only-XXX` avoids running the test on targets whose triple **does not** contain `XXX`\n+* `//@only-XXX` avoids running the test on targets whose triple **does not** contain `XXX`\n     * `XXX` can also be one of `64bit`, `32bit` or `16bit`\n-* `// stderr-per-bitwidth` produces one stderr file per bitwidth, as they may differ significantly sometimes\n+* `//@stderr-per-bitwidth` produces one stderr file per bitwidth, as they may differ significantly sometimes\n * `//@error-pattern: XXX` make sure the stderr output contains `XXX`\n-* `//~ ERROR: XXX` make sure the stderr output contains `XXX` for an error in the line where this comment is written\n-    * Also supports `HELP`, `WARN` or `NOTE` for different kind of message\n-        * if one of those levels is specified explicitly, *all* diagnostics of this level or higher need an annotation. If you want to avoid this, just leave out the all caps level note entirely.\n-    * If the all caps note is left out, a message of any level is matched. Leaving it out is not allowed for `ERROR` levels.\n-    * This checks the output *before* normalization, so you can check things that get normalized away, but need to\n-      be careful not to accidentally have a pattern that differs between platforms.\n-* `// revisions: XXX YYY` runs the test once for each space separated name in the list\n+* `//@revisions: XXX YYY` runs the test once for each space separated name in the list\n     * emits one stderr file per revision\n     * `//~` comments can be restricted to specific revisions by adding the revision name before the `~` in square brackets: `//[XXX]~`\n-* `// compile-flags: XXX` appends `XXX` to the command line arguments passed to the rustc driver\n-* `// rustc-env: XXX=YYY` sets the env var `XXX` to `YYY` for the rustc driver execution.\n+* `//@compile-flags: XXX` appends `XXX` to the command line arguments passed to the rustc driver\n+    * you can specify this multiple times, and all the flags will accumulate\n+* `//@rustc-env: XXX=YYY` sets the env var `XXX` to `YYY` for the rustc driver execution.\n     * for Miri these env vars are used during compilation via rustc and during the emulation of the program\n-* `// normalize-stderr-test: \"REGEX\" -> \"REPLACEMENT\"` replaces all matches of `REGEX` in the stderr with `REPLACEMENT`. The replacement may specify `$1` and similar backreferences to paste captures.\n+    * you can specify this multiple times, accumulating all the env vars\n+* `//@normalize-stderr-test: \"REGEX\" -> \"REPLACEMENT\"` replaces all matches of `REGEX` in the stderr with `REPLACEMENT`. The replacement may specify `$1` and similar backreferences to paste captures.\n+    * you can specify multiple such commands, there is no need to create a single regex that handles multiple replacements that you want to perform.\n \n ## Significant differences to compiletest-rs\n "}, {"sha": "dd6ca9581ab2d09c3f9ec3cbf96ada1c8a097b9d", "filename": "ui_test/src/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63916d6f0429718112661e47fac37b2fcfea338e/ui_test%2Fsrc%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63916d6f0429718112661e47fac37b2fcfea338e/ui_test%2Fsrc%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fcomments.rs?ref=63916d6f0429718112661e47fac37b2fcfea338e", "patch": "@@ -75,7 +75,7 @@ impl Comments {\n     /// Parse comments in `content`.\n     /// `path` is only used to emit diagnostics if parsing fails.\n     ///\n-    /// This function will only parse `//@` and `//~` style comments\n+    /// This function will only parse `//@` and `//~` style comments (and the `//[xxx]~` variant)\n     /// and ignore all others\n     fn parse_checked(path: &Path, content: &str) -> Result<Self> {\n         let mut this = Self::default();"}]}