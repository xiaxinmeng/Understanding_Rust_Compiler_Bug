{"sha": "988cd5d50c203d5d37da8e0e047381fbebf53b8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OGNkNWQ1MGMyMDNkNWQzN2RhOGUwZTA0NzM4MWZiZWJmNTNiOGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-15T12:34:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-15T12:34:01Z"}, "message": "Rollup merge of #63306 - RalfJung:retag, r=varkor\n\nAdapt AddRetag for shallow retagging\n\nWith https://github.com/rust-lang/miri/pull/872, Miri only retags \"bare\" references, not those nested in compound types. This adjust `Retag` statement generation to don't emit retags if they are definitely not a bare reference.\n\nI also expanded the mir-opt test to cover the `Retag` in the drop shim, which had previously not been tested.", "tree": {"sha": "92553547582d4ba767f3696d04fb826a2bbafb48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92553547582d4ba767f3696d04fb826a2bbafb48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/988cd5d50c203d5d37da8e0e047381fbebf53b8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVVE5CRBK7hj4Ov3rIwAAdHIIADqGjrxjx6MiQjUbFXzBSfs9\nj9HObxi8O4NsUEF4SEdCDVCUd/gveEng/1wYTT7nCmtMtwAU5RZxmleCDrxZ0KA4\nfFawYte4smqPcd2Jw4uBSLpyYLmlBWG4jA815cZkRz4pQawG9CSw/ITV1ZUtkSGI\nDdlXvEcKQ/4+1m0A8KMpfXGSSO3xIY6YtzOVHY5eU5PJPxR3YFJ3pRp9KrKVQCqA\na3+rYCDy63hD0y+CmapqnT7TS8zOMBxsogoytDfjOgLWSvJygvqbaj5S2xDG93BZ\n8fTLtWpb6KIwSqiuCG7anDezkZXL2thkzS2LOVJqczYmFZVroB5WyuofcKGCg/k=\n=OaOx\n-----END PGP SIGNATURE-----\n", "payload": "tree 92553547582d4ba767f3696d04fb826a2bbafb48\nparent 7e9682559e5b5fc5a37b25e8e6500cddf743081b\nparent 2122fe4611d194534e2c60b0b0bb7e86c63e68b0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565872441 +0200\ncommitter GitHub <noreply@github.com> 1565872441 +0200\n\nRollup merge of #63306 - RalfJung:retag, r=varkor\n\nAdapt AddRetag for shallow retagging\n\nWith https://github.com/rust-lang/miri/pull/872, Miri only retags \"bare\" references, not those nested in compound types. This adjust `Retag` statement generation to don't emit retags if they are definitely not a bare reference.\n\nI also expanded the mir-opt test to cover the `Retag` in the drop shim, which had previously not been tested.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/988cd5d50c203d5d37da8e0e047381fbebf53b8d", "html_url": "https://github.com/rust-lang/rust/commit/988cd5d50c203d5d37da8e0e047381fbebf53b8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/988cd5d50c203d5d37da8e0e047381fbebf53b8d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e9682559e5b5fc5a37b25e8e6500cddf743081b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9682559e5b5fc5a37b25e8e6500cddf743081b", "html_url": "https://github.com/rust-lang/rust/commit/7e9682559e5b5fc5a37b25e8e6500cddf743081b"}, {"sha": "2122fe4611d194534e2c60b0b0bb7e86c63e68b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2122fe4611d194534e2c60b0b0bb7e86c63e68b0", "html_url": "https://github.com/rust-lang/rust/commit/2122fe4611d194534e2c60b0b0bb7e86c63e68b0"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "524a19e3434f3c8f3f8b0ace4862113517db23b1", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/988cd5d50c203d5d37da8e0e047381fbebf53b8d/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988cd5d50c203d5d37da8e0e047381fbebf53b8d/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=988cd5d50c203d5d37da8e0e047381fbebf53b8d", "patch": "@@ -42,9 +42,8 @@ fn is_stable(\n     }\n }\n \n-/// Determine whether this type may have a reference in it, recursing below compound types but\n-/// not below references.\n-fn may_have_reference<'tcx>(ty: Ty<'tcx>, tcx: TyCtxt<'tcx>) -> bool {\n+/// Determine whether this type may be a reference (or box), and thus needs retagging.\n+fn may_be_reference<'tcx>(ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n         // Primitive types that are not references\n         ty::Bool | ty::Char |\n@@ -55,15 +54,12 @@ fn may_have_reference<'tcx>(ty: Ty<'tcx>, tcx: TyCtxt<'tcx>) -> bool {\n         // References\n         ty::Ref(..) => true,\n         ty::Adt(..) if ty.is_box() => true,\n-        // Compound types\n-        ty::Array(ty, ..) | ty::Slice(ty) =>\n-            may_have_reference(ty, tcx),\n-        ty::Tuple(tys) =>\n-            tys.iter().any(|ty| may_have_reference(ty.expect_ty(), tcx)),\n-        ty::Adt(adt, substs) =>\n-            adt.variants.iter().any(|v| v.fields.iter().any(|f|\n-                may_have_reference(f.ty(tcx, substs), tcx)\n-            )),\n+        // Compound types are not references\n+        ty::Array(..) |\n+        ty::Slice(..) |\n+        ty::Tuple(..) |\n+        ty::Adt(..) =>\n+            false,\n         // Conservative fallback\n         _ => true,\n     }\n@@ -80,7 +76,7 @@ impl MirPass for AddRetag {\n             // FIXME: Instead of giving up for unstable places, we should introduce\n             // a temporary and retag on that.\n             is_stable(place.as_ref())\n-                && may_have_reference(place.ty(&*local_decls, tcx).ty, tcx)\n+                && may_be_reference(place.ty(&*local_decls, tcx).ty)\n         };\n \n         // PART 1"}, {"sha": "db36a1fab5f2104f48e2dc3a3dedea1532753d86", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/988cd5d50c203d5d37da8e0e047381fbebf53b8d/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988cd5d50c203d5d37da8e0e047381fbebf53b8d/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=988cd5d50c203d5d37da8e0e047381fbebf53b8d", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32-bare compiled with panic=abort by default\n // ignore-tidy-linelength\n // compile-flags: -Z mir-emit-retag -Z mir-opt-level=0 -Z span_free_formats\n \n@@ -11,6 +12,10 @@ impl Test {\n     fn foo_shr<'x>(&self, x: &'x i32) -> &'x i32 { x }\n }\n \n+impl Drop for Test {\n+    fn drop(&mut self) {}\n+}\n+\n fn main() {\n     let mut x = 0;\n     {\n@@ -60,10 +65,12 @@ fn main() {\n //     ...\n //     bb0: {\n //         ...\n-//         _3 = const Test::foo(move _4, move _6) -> bb1;\n+//         _3 = const Test::foo(move _4, move _6) -> [return: bb2, unwind: bb3];\n //     }\n //\n-//     bb1: {\n+//     ...\n+//\n+//     bb2: {\n //         Retag(_3);\n //         ...\n //         _9 = move _3;\n@@ -80,25 +87,20 @@ fn main() {\n //         _12 = move _13 as *mut i32 (Misc);\n //         Retag([raw] _12);\n //         ...\n-//         _16 = move _17(move _18) -> bb2;\n+//         _16 = move _17(move _18) -> bb5;\n //     }\n //\n-//     bb2: {\n+//     bb5: {\n //         Retag(_16);\n //         ...\n-//         _20 = const Test::foo_shr(move _21, move _23) -> bb3;\n-//     }\n-//\n-//     bb3: {\n-//         ...\n-//         return;\n+//         _20 = const Test::foo_shr(move _21, move _23) -> [return: bb6, unwind: bb7];\n //     }\n //\n //     ...\n // }\n // END rustc.main.EraseRegions.after.mir\n // START rustc.main-{{closure}}.EraseRegions.after.mir\n-// fn main::{{closure}}#0(_1: &[closure@HirId { owner: DefIndex(20), local_id: 72 }], _2: &i32) -> &i32 {\n+// fn main::{{closure}}#0(_1: &[closure@HirId { owner: DefIndex(22), local_id: 72 }], _2: &i32) -> &i32 {\n //     ...\n //     bb0: {\n //         Retag([fn entry] _1);\n@@ -113,3 +115,17 @@ fn main() {\n //     }\n // }\n // END rustc.main-{{closure}}.EraseRegions.after.mir\n+// START rustc.ptr-real_drop_in_place.Test.SimplifyCfg-make_shim.after.mir\n+// fn  std::ptr::real_drop_in_place(_1: &mut Test) -> () {\n+//     ...\n+//     bb0: {\n+//         Retag([raw] _1);\n+//         _2 = &mut (*_1);\n+//         _3 = const <Test as std::ops::Drop>::drop(move _2) -> bb1;\n+//     }\n+//\n+//     bb1: {\n+//         return;\n+//     }\n+// }\n+// END rustc.ptr-real_drop_in_place.Test.SimplifyCfg-make_shim.after.mir"}]}