{"sha": "97d2b44f8749479fdf1ba92d1cada6ae8594cf54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZDJiNDRmODc0OTQ3OWZkZjFiYTkyZDFjYWRhNmFlODU5NGNmNTQ=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-08-22T02:11:30Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-08-22T17:52:11Z"}, "message": "Substitute into the impl method rather than the trait method when emitting vtables. Closes #8601.", "tree": {"sha": "5aae6c1bd96ca564b2a9f4cdf94eb99c99cf4c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aae6c1bd96ca564b2a9f4cdf94eb99c99cf4c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d2b44f8749479fdf1ba92d1cada6ae8594cf54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d2b44f8749479fdf1ba92d1cada6ae8594cf54", "html_url": "https://github.com/rust-lang/rust/commit/97d2b44f8749479fdf1ba92d1cada6ae8594cf54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d2b44f8749479fdf1ba92d1cada6ae8594cf54/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a9cddad7ad5d43235d4b3e4fa9af2c572d52317", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9cddad7ad5d43235d4b3e4fa9af2c572d52317", "html_url": "https://github.com/rust-lang/rust/commit/8a9cddad7ad5d43235d4b3e4fa9af2c572d52317"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "c0534b89f79adfeb8db5ae4c97a3a856002b70f4", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97d2b44f8749479fdf1ba92d1cada6ae8594cf54/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d2b44f8749479fdf1ba92d1cada6ae8594cf54/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=97d2b44f8749479fdf1ba92d1cada6ae8594cf54", "patch": "@@ -577,20 +577,23 @@ fn emit_vtable_methods(bcx: @mut Block,\n \n     let trait_method_def_ids = ty::trait_method_def_ids(tcx, trt_id);\n     do trait_method_def_ids.map |method_def_id| {\n-        let im = ty::method(tcx, *method_def_id);\n+        let ident = ty::method(tcx, *method_def_id).ident;\n+        // The substitutions we have are on the impl, so we grab\n+        // the method type from the impl to substitute into.\n+        let m_id = method_with_name(ccx, impl_id, ident);\n+        let m = ty::method(tcx, m_id);\n+        debug!(\"(making impl vtable) emitting method %s at subst %s\",\n+               m.repr(tcx),\n+               substs.repr(tcx));\n         let fty = ty::subst_tps(tcx,\n                                 substs,\n                                 None,\n-                                ty::mk_bare_fn(tcx, im.fty.clone()));\n-        if im.generics.has_type_params() || ty::type_has_self(fty) {\n+                                ty::mk_bare_fn(tcx, m.fty.clone()));\n+        if m.generics.has_type_params() || ty::type_has_self(fty) {\n             debug!(\"(making impl vtable) method has self or type params: %s\",\n-                   tcx.sess.str_of(im.ident));\n+                   tcx.sess.str_of(ident));\n             C_null(Type::nil().ptr_to())\n         } else {\n-            debug!(\"(making impl vtable) adding method to vtable: %s\",\n-                   tcx.sess.str_of(im.ident));\n-            let m_id = method_with_name(ccx, impl_id, im.ident);\n-\n             trans_fn_ref_with_vtables(bcx, m_id, 0,\n                                       substs, Some(vtables)).llfn\n         }"}, {"sha": "7bee660410dfcba75e4f9598305e4b3c4f9b21db", "filename": "src/test/run-pass/trait-object-generics.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/97d2b44f8749479fdf1ba92d1cada6ae8594cf54/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d2b44f8749479fdf1ba92d1cada6ae8594cf54/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs?ref=97d2b44f8749479fdf1ba92d1cada6ae8594cf54", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// test for #8601\n+\n+enum Type<T> { Constant }\n+\n+trait Trait<K,V> {\n+    fn method(&self,Type<(K,V)>) -> int;\n+}\n+\n+impl<V> Trait<u8,V> for () {\n+    fn method(&self, _x: Type<(u8,V)>) -> int { 0 }\n+}\n+\n+fn main () {\n+    let a = @() as @Trait<u8, u8>;\n+    assert_eq!(a.method(Constant), 0);\n+}"}]}