{"sha": "d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NWJlZjlkYjYyYTA3OTdjNmRkM2IwNmUyMWRiMWEwYWNkOGNmZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-13T11:54:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-13T11:54:02Z"}, "message": "Auto merge of #57568 - Centril:rollup, r=Centril\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #57351 (Don't actually create a full MIR stack frame when not needed)\n - #57353 (Optimise floating point `is_finite` (2x) and `is_infinite` (1.6x).)\n - #57412 (Improve the wording)\n - #57436 (save-analysis: use a fallback when access levels couldn't be computed)\n - #57453 (lldb_batchmode.py: try `import _thread` for Python 3)\n - #57454 (Some cleanups for core::fmt)\n - #57461 (Change `String` to `&'static str` in `ParseResult::Failure`.)\n - #57473 (std: Render large exit codes as hex on Windows)\n - #57474 (save-analysis: Get path def from parent in case there's no def for the path itself.)\n - #57494 (Speed up item_bodies for large match statements involving regions)\n - #57496 (re-do docs for core::cmp)\n - #57508 (rustdoc: Allow inlining of reexported crates and crate items)\n - #57547 (Use `ptr::eq` where applicable)\n - #57557 (resolve: Mark extern crate items as used in more cases)\n - #57560 (hygiene: Do not treat `Self` ctor as a local variable)\n - #57564 (Update the const fn tracking issue to the new metabug)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9f4db2eaa683312f8f56d066078fce73e78947e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f4db2eaa683312f8f56d066078fce73e78947e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "html_url": "https://github.com/rust-lang/rust/commit/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5012d7fb53d9f1e489c1ae1a081347fddbbffe5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5012d7fb53d9f1e489c1ae1a081347fddbbffe5f", "html_url": "https://github.com/rust-lang/rust/commit/5012d7fb53d9f1e489c1ae1a081347fddbbffe5f"}, {"sha": "3e2dcf95ce0c19d8ea77e565322ba6885196efda", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2dcf95ce0c19d8ea77e565322ba6885196efda", "html_url": "https://github.com/rust-lang/rust/commit/3e2dcf95ce0c19d8ea77e565322ba6885196efda"}], "stats": {"total": 539, "additions": 353, "deletions": 186}, "files": [{"sha": "50dbbaf56743c6142a0869506faf904203603a96", "filename": "src/doc/unstable-book/src/language-features/const-fn.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -1,8 +1,8 @@\n # `const_fn`\n \n-The tracking issue for this feature is: [#24111]\n+The tracking issue for this feature is: [#57563]\n \n-[#24111]: https://github.com/rust-lang/rust/issues/24111\n+[#57563]: https://github.com/rust-lang/rust/issues/57563\n \n ------------------------\n "}, {"sha": "537b419b3279f5096f6473b2b0f30a907994e3d5", "filename": "src/etc/lldb_batchmode.py", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Fetc%2Flldb_batchmode.py", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Fetc%2Flldb_batchmode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_batchmode.py?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -18,10 +18,15 @@\n import os\n import sys\n import threading\n-import thread\n import re\n import time\n \n+try:\n+    import thread\n+except ModuleNotFoundError:\n+    # The `thread` module was renamed to `_thread` in Python 3.\n+    import _thread as thread\n+\n # Set this to True for additional output\n DEBUG_OUTPUT = False\n "}, {"sha": "86f28a957cd2cf8c2d583f1e3737e8de3c0d7c5f", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -1,27 +1,22 @@\n //! Functionality for ordering and comparison.\n //!\n-//! This module defines both [`PartialOrd`] and [`PartialEq`] traits which are used\n-//! by the compiler to implement comparison operators. Rust programs may\n-//! implement [`PartialOrd`] to overload the `<`, `<=`, `>`, and `>=` operators,\n-//! and may implement [`PartialEq`] to overload the `==` and `!=` operators.\n+//! This module contains various tools for ordering and comparing values. In\n+//! summary:\n //!\n-//! [`PartialOrd`]: trait.PartialOrd.html\n-//! [`PartialEq`]: trait.PartialEq.html\n+//! * [`Eq`] and [`PartialEq`] are traits that allow you to define total and\n+//!   partial equality between values, respectively. Implementing them overloads\n+//!   the `==` and `!=` operators.\n+//! * [`Ord`] and [`PartialOrd`] are traits that allow you to define total and\n+//!   partial orderings between values, respectively. Implementing them overloads\n+//!   the `<`, `<=`, `>`, and `>=` operators.\n+//! * [`Ordering`][cmp::Ordering] is an enum returned by the\n+//!   main functions of [`Ord`] and [`PartialOrd`], and describes an ordering.\n+//! * [`Reverse`][cmp::Reverse] is a struct that allows you to easily reverse\n+//!   an ordering.\n+//! * [`max`][cmp::max] and [`min`][cmp::min] are functions that build off of\n+//!   [`Ord`] and allow you to find the maximum or minimum of two values.\n //!\n-//! # Examples\n-//!\n-//! ```\n-//! let x: u32 = 0;\n-//! let y: u32 = 1;\n-//!\n-//! // these two lines are equivalent\n-//! assert_eq!(x < y, true);\n-//! assert_eq!(x.lt(&y), true);\n-//!\n-//! // these two lines are also equivalent\n-//! assert_eq!(x == y, false);\n-//! assert_eq!(x.eq(&y), false);\n-//! ```\n+//! For more details, see the respective documentation of each item in the list.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "214b5d3a84f24c4bb3f88af4cb8063eea18545a0", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 9, "deletions": 38, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -191,29 +191,8 @@ pub trait Write {\n     /// assert_eq!(&buf, \"world\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn write_fmt(&mut self, args: Arguments) -> Result {\n-        // This Adapter is needed to allow `self` (of type `&mut\n-        // Self`) to be cast to a Write (below) without\n-        // requiring a `Sized` bound.\n-        struct Adapter<'a,T: ?Sized +'a>(&'a mut T);\n-\n-        impl<T: ?Sized> Write for Adapter<'_, T>\n-            where T: Write\n-        {\n-            fn write_str(&mut self, s: &str) -> Result {\n-                self.0.write_str(s)\n-            }\n-\n-            fn write_char(&mut self, c: char) -> Result {\n-                self.0.write_char(c)\n-            }\n-\n-            fn write_fmt(&mut self, args: Arguments) -> Result {\n-                self.0.write_fmt(args)\n-            }\n-        }\n-\n-        write(&mut Adapter(self), args)\n+    fn write_fmt(mut self: &mut Self, args: Arguments) -> Result {\n+        write(&mut self, args)\n     }\n }\n \n@@ -268,7 +247,7 @@ struct Void {\n /// family of functions. It contains a function to format the given value. At\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n            issue = \"0\")]\n@@ -278,14 +257,6 @@ pub struct ArgumentV1<'a> {\n     formatter: fn(&Void, &mut Formatter) -> Result,\n }\n \n-#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n-           issue = \"0\")]\n-impl Clone for ArgumentV1<'_> {\n-    fn clone(&self) -> Self {\n-        *self\n-    }\n-}\n-\n impl<'a> ArgumentV1<'a> {\n     #[inline(never)]\n     fn show_usize(x: &usize, f: &mut Formatter) -> Result {\n@@ -1105,7 +1076,7 @@ impl<'a> Formatter<'a> {\n                 self.args[i].as_usize()\n             }\n             rt::v1::Count::NextParam => {\n-                self.curarg.next().and_then(|arg| arg.as_usize())\n+                self.curarg.next()?.as_usize()\n             }\n         }\n     }\n@@ -1171,15 +1142,15 @@ impl<'a> Formatter<'a> {\n             sign = Some('+'); width += 1;\n         }\n \n-        let mut prefixed = false;\n-        if self.alternate() {\n-            prefixed = true; width += prefix.chars().count();\n+        let prefixed = self.alternate();\n+        if prefixed {\n+            width += prefix.chars().count();\n         }\n \n         // Writes the sign if it exists, and then the prefix if it was requested\n         let write_prefix = |f: &mut Formatter| {\n             if let Some(c) = sign {\n-                f.buf.write_str(c.encode_utf8(&mut [0; 4]))?;\n+                f.buf.write_char(c)?;\n             }\n             if prefixed { f.buf.write_str(prefix) }\n             else { Ok(()) }\n@@ -1341,7 +1312,7 @@ impl<'a> Formatter<'a> {\n \n                 // remove the sign from the formatted parts\n                 formatted.sign = b\"\";\n-                width = if width < sign.len() { 0 } else { width - sign.len() };\n+                width = width.saturating_sub(sign.len());\n                 align = rt::v1::Alignment::Right;\n                 self.fill = '0';\n                 self.align = rt::v1::Alignment::Right;"}, {"sha": "68da79135d3a33ee76d4b52c718e2ee0e646ee84", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -161,6 +161,14 @@ impl f32 {\n         self != self\n     }\n \n+    // FIXME(#50145): `abs` is publicly unavailable in libcore due to\n+    // concerns about portability, so this implementation is for\n+    // private use internally.\n+    #[inline]\n+    fn abs_private(self) -> f32 {\n+        f32::from_bits(self.to_bits() & 0x7fff_ffff)\n+    }\n+\n     /// Returns `true` if this value is positive infinity or negative infinity and\n     /// false otherwise.\n     ///\n@@ -181,7 +189,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_infinite(self) -> bool {\n-        self == INFINITY || self == NEG_INFINITY\n+        self.abs_private() == INFINITY\n     }\n \n     /// Returns `true` if this number is neither infinite nor `NaN`.\n@@ -203,7 +211,9 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_finite(self) -> bool {\n-        !(self.is_nan() || self.is_infinite())\n+        // There's no need to handle NaN separately: if self is NaN,\n+        // the comparison is not true, exactly as desired.\n+        self.abs_private() < INFINITY\n     }\n \n     /// Returns `true` if the number is neither zero, infinite,"}, {"sha": "b677391548146ec4c69e26ef18f21ed9ecdbea79", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -161,6 +161,14 @@ impl f64 {\n         self != self\n     }\n \n+    // FIXME(#50145): `abs` is publicly unavailable in libcore due to\n+    // concerns about portability, so this implementation is for\n+    // private use internally.\n+    #[inline]\n+    fn abs_private(self) -> f64 {\n+        f64::from_bits(self.to_bits() & 0x7fff_ffff_ffff_ffff)\n+    }\n+\n     /// Returns `true` if this value is positive infinity or negative infinity and\n     /// false otherwise.\n     ///\n@@ -181,7 +189,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_infinite(self) -> bool {\n-        self == INFINITY || self == NEG_INFINITY\n+        self.abs_private() == INFINITY\n     }\n \n     /// Returns `true` if this number is neither infinite nor `NaN`.\n@@ -203,7 +211,9 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_finite(self) -> bool {\n-        !(self.is_nan() || self.is_infinite())\n+        // There's no need to handle NaN separately: if self is NaN,\n+        // the comparison is not true, exactly as desired.\n+        self.abs_private() < INFINITY\n     }\n \n     /// Returns `true` if the number is neither zero, infinite,"}, {"sha": "55a7ba181e5271d5a4e7f8188ba3714934e765d1", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -425,8 +425,7 @@ impl<'a> Pattern<'a> for char {\n     #[inline]\n     fn into_searcher(self, haystack: &'a str) -> Self::Searcher {\n         let mut utf8_encoded = [0; 4];\n-        self.encode_utf8(&mut utf8_encoded);\n-        let utf8_size = self.len_utf8();\n+        let utf8_size = self.encode_utf8(&mut utf8_encoded).len();\n         CharSearcher {\n             haystack,\n             finger: 0,"}, {"sha": "39ce8cc621b49d9215de6dfe3998085a937eead7", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -13,6 +13,7 @@ use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use smallvec::SmallVec;\n use std::fmt;\n use std::u32;\n use ty::fold::TypeFoldable;\n@@ -190,19 +191,24 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n             match *constraint {\n                 Constraint::RegSubVar(a_region, b_vid) => {\n                     let b_data = var_values.value_mut(b_vid);\n-                    self.expand_node(a_region, b_vid, b_data)\n+                    (self.expand_node(a_region, b_vid, b_data), false)\n                 }\n                 Constraint::VarSubVar(a_vid, b_vid) => match *var_values.value(a_vid) {\n-                    VarValue::ErrorValue => false,\n+                    VarValue::ErrorValue => (false, false),\n                     VarValue::Value(a_region) => {\n                         let b_node = var_values.value_mut(b_vid);\n-                        self.expand_node(a_region, b_vid, b_node)\n+                        let changed = self.expand_node(a_region, b_vid, b_node);\n+                        let retain = match *b_node {\n+                            VarValue::Value(ReStatic) | VarValue::ErrorValue => false,\n+                            _ => true\n+                        };\n+                        (changed, retain)\n                     }\n                 },\n                 Constraint::RegSubReg(..) | Constraint::VarSubReg(..) => {\n                     // These constraints are checked after expansion\n                     // is done, in `collect_errors`.\n-                    false\n+                    (false, false)\n                 }\n             }\n         })\n@@ -268,6 +274,13 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n \n     fn lub_concrete_regions(&self, a: Region<'tcx>, b: Region<'tcx>) -> Region<'tcx> {\n         let tcx = self.tcx();\n+\n+        // Equal scopes can show up quite often, if the fixed point\n+        // iteration converges slowly, skip them\n+        if a == b {\n+            return a;\n+        }\n+\n         match (a, b) {\n             (&ty::ReClosureBound(..), _)\n             | (_, &ty::ReClosureBound(..))\n@@ -710,21 +723,23 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n \n     fn iterate_until_fixed_point<F>(&self, tag: &str, mut body: F)\n     where\n-        F: FnMut(&Constraint<'tcx>, &SubregionOrigin<'tcx>) -> bool,\n+        F: FnMut(&Constraint<'tcx>, &SubregionOrigin<'tcx>) -> (bool, bool),\n     {\n+        let mut constraints: SmallVec<[_; 16]> = self.data.constraints.iter().collect();\n         let mut iteration = 0;\n         let mut changed = true;\n         while changed {\n             changed = false;\n             iteration += 1;\n             debug!(\"---- {} Iteration {}{}\", \"#\", tag, iteration);\n-            for (constraint, origin) in &self.data.constraints {\n-                let edge_changed = body(constraint, origin);\n+            constraints.retain(|(constraint, origin)| {\n+                let (edge_changed, retain) = body(constraint, origin);\n                 if edge_changed {\n                     debug!(\"Updated due to constraint {:?}\", constraint);\n                     changed = true;\n                 }\n-            }\n+                retain\n+            });\n         }\n         debug!(\"---- {} Complete after {} iteration(s)\", tag, iteration);\n     }"}, {"sha": "032a1621fe60b8e127bddfe231ab38f97b55f832", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -59,6 +59,7 @@ use std::hash::{Hash, Hasher};\n use std::fmt;\n use std::mem;\n use std::ops::{Deref, Bound};\n+use std::ptr;\n use std::iter;\n use std::sync::mpsc;\n use std::sync::Arc;\n@@ -168,7 +169,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n \n                 // Make sure we don't end up with inference\n                 // types/regions in the global interner\n-                if local as *const _ as usize == global as *const _ as usize {\n+                if ptr::eq(local, global) {\n                     bug!(\"Attempted to intern `{:?}` which contains \\\n                         inference types/regions in the global type context\",\n                         &ty_struct);\n@@ -1135,9 +1136,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Returns true if self is the same as self.global_tcx().\n     fn is_global(self) -> bool {\n-        let local = self.interners as *const _;\n-        let global = &self.global_interners as *const _;\n-        local as usize == global as usize\n+        ptr::eq(self.interners, &self.global_interners)\n     }\n \n     /// Create a type context and call the closure with a `TyCtxt` reference\n@@ -1787,6 +1786,7 @@ pub mod tls {\n     use std::fmt;\n     use std::mem;\n     use std::marker::PhantomData;\n+    use std::ptr;\n     use syntax_pos;\n     use ty::query;\n     use errors::{Diagnostic, TRACK_DIAGNOSTICS};\n@@ -2021,8 +2021,7 @@ pub mod tls {\n     {\n         with_context(|context| {\n             unsafe {\n-                let gcx = tcx.gcx as *const _ as usize;\n-                assert!(context.tcx.gcx as *const _ as usize == gcx);\n+                assert!(ptr::eq(context.tcx.gcx, tcx.gcx));\n                 let context: &ImplicitCtxt<'_, '_, '_> = mem::transmute(context);\n                 f(context)\n             }\n@@ -2040,10 +2039,8 @@ pub mod tls {\n     {\n         with_context(|context| {\n             unsafe {\n-                let gcx = tcx.gcx as *const _ as usize;\n-                let interners = tcx.interners as *const _ as usize;\n-                assert!(context.tcx.gcx as *const _ as usize == gcx);\n-                assert!(context.tcx.interners as *const _ as usize == interners);\n+                assert!(ptr::eq(context.tcx.gcx, tcx.gcx));\n+                assert!(ptr::eq(context.tcx.interners, tcx.interners));\n                 let context: &ImplicitCtxt<'_, '_, '_> = mem::transmute(context);\n                 f(context)\n             }"}, {"sha": "6deedd0b5ea33c38e28b1fd582b4393bce3a78b5", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -47,7 +47,7 @@ use syntax_pos::{self, Span, FileName};\n \n impl PartialEq for llvm::Metadata {\n     fn eq(&self, other: &Self) -> bool {\n-        self as *const _ == other as *const _\n+        ptr::eq(self, other)\n     }\n }\n "}, {"sha": "958e00506d62a266f192d23eed05cc83328062fb", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -20,12 +20,13 @@ use abi::{LlvmType, FnTypeExt};\n \n use std::fmt;\n use std::cell::RefCell;\n+use std::ptr;\n \n use libc::c_uint;\n \n impl PartialEq for Type {\n     fn eq(&self, other: &Self) -> bool {\n-        self as *const _ == other as *const _\n+        ptr::eq(self, other)\n     }\n }\n "}, {"sha": "3ad1521be9393bb487ed6c476f43f621418b2a24", "filename": "src/librustc_codegen_llvm/value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fvalue.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,10 +4,11 @@ use llvm;\n \n use std::fmt;\n use std::hash::{Hash, Hasher};\n+use std::ptr;\n \n impl PartialEq for Value {\n     fn eq(&self, other: &Self) -> bool {\n-        self as *const _ == other as *const _\n+        ptr::eq(self, other)\n     }\n }\n "}, {"sha": "f5f40481679385eae8372f11e161f48ae8132ccb", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -35,6 +35,16 @@ const STEPS_UNTIL_DETECTOR_ENABLED: isize = 1_000_000;\n /// Should be a power of two for performance reasons.\n const DETECTOR_SNAPSHOT_PERIOD: isize = 256;\n \n+/// Warning: do not use this function if you expect to start interpreting the given `Mir`.\n+/// The `EvalContext` is only meant to be used to query values from constants and statics.\n+///\n+/// This function is used during const propagation. We cannot use `mk_eval_cx`, because copy\n+/// propagation happens *during* the computation of the MIR of the current function. So if we\n+/// tried to call the `optimized_mir` query, we'd get a cycle error because we are (transitively)\n+/// inside the `optimized_mir` query of the `Instance` given.\n+///\n+/// Since we are looking at the MIR of the function in an abstract manner, we don't have a\n+/// `ParamEnv` available to us. This function creates a `ParamEnv` for the given instance.\n pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     instance: Instance<'tcx>,\n@@ -43,9 +53,22 @@ pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n ) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'mir, 'tcx>> {\n     debug!(\"mk_borrowck_eval_cx: {:?}\", instance);\n     let param_env = tcx.param_env(instance.def_id());\n+    mk_eval_cx_inner(tcx, instance, mir, span, param_env)\n+}\n+\n+/// This is just a helper function to reduce code duplication between `mk_borrowck_eval_cx` and\n+/// `mk_eval_cx`. Do not call this function directly.\n+fn mk_eval_cx_inner<'a, 'mir, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    instance: Instance<'tcx>,\n+    mir: &'mir mir::Mir<'tcx>,\n+    span: Span,\n+    param_env: ty::ParamEnv<'tcx>,\n+) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'mir, 'tcx>> {\n     let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new());\n-    // insert a stack frame so any queries have the correct substs\n-    // cannot use `push_stack_frame`; if we do `const_prop` explodes\n+    // Insert a stack frame so any queries have the correct substs.\n+    // We also avoid all the extra work performed by push_stack_frame,\n+    // like initializing local variables\n     ecx.stack.push(interpret::Frame {\n         block: mir::START_BLOCK,\n         locals: IndexVec::new(),\n@@ -60,24 +83,23 @@ pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n     Ok(ecx)\n }\n \n-pub fn mk_eval_cx<'a, 'tcx>(\n+/// Warning: do not use this function if you expect to start interpreting the given `Mir`.\n+/// The `EvalContext` is only meant to be used to do field and index projections into constants for\n+/// `simd_shuffle` and const patterns in match arms.\n+///\n+/// The function containing the `match` that is currently being analyzed may have generic bounds\n+/// that inform us about the generic bounds of the constant. E.g. using an associated constant\n+/// of a function's generic parameter will require knowledge about the bounds on the generic\n+/// parameter. These bounds are passed to `mk_eval_cx` via the `ParamEnv` argument.\n+fn mk_eval_cx<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     instance: Instance<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'tcx, 'tcx>> {\n     debug!(\"mk_eval_cx: {:?}, {:?}\", instance, param_env);\n     let span = tcx.def_span(instance.def_id());\n-    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new());\n-    let mir = ecx.load_mir(instance.def)?;\n-    // insert a stack frame so any queries have the correct substs\n-    ecx.push_stack_frame(\n-        instance,\n-        mir.span,\n-        mir,\n-        None,\n-        StackPopCleanup::Goto(None), // never pop\n-    )?;\n-    Ok(ecx)\n+    let mir = tcx.optimized_mir(instance.def.def_id());\n+    mk_eval_cx_inner(tcx, instance, mir, span, param_env)\n }\n \n pub(crate) fn eval_promoted<'a, 'mir, 'tcx>("}, {"sha": "ea9e19c75c215473058f94a889116a58cd4c4253", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -573,7 +573,7 @@ const Y: i32 = A;\n ```\n \"##,\n \n-// FIXME(#24111) Change the language here when const fn stabilizes\n+// FIXME(#57563) Change the language here when const fn stabilizes\n E0015: r##\"\n The only functions that can be called in static or constant expressions are\n `const` functions, and struct/enum constructors. `const` functions are only"}, {"sha": "78cf7153500c9d19251e74e34fd964bcd1413f5e", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -901,7 +901,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                         err.emit();\n                                     }\n                                 } else {\n-                                    // FIXME(#24111): remove this check when const fn stabilizes.\n+                                    // FIXME(#57563): remove this check when const fn stabilizes.\n                                     let (msg, note) = if let UnstableFeatures::Disallow =\n                                             self.tcx.sess.opts.unstable_features {\n                                         (format!(\"calls in {}s are limited to \\"}, {"sha": "39be3cb7440801ce873411a3d37c2e9495d8912f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -2017,16 +2017,14 @@ impl<'a> Resolver<'a> {\n         if ident.name == keywords::Invalid.name() {\n             return Some(LexicalScopeBinding::Def(Def::Err));\n         }\n-        if ns == TypeNS {\n-            ident.span = if ident.name == keywords::SelfUpper.name() {\n-                // FIXME(jseyfried) improve `Self` hygiene\n-                ident.span.with_ctxt(SyntaxContext::empty())\n-            } else {\n-                ident.span.modern()\n-            }\n+        ident.span = if ident.name == keywords::SelfUpper.name() {\n+            // FIXME(jseyfried) improve `Self` hygiene\n+            ident.span.with_ctxt(SyntaxContext::empty())\n+        } else if ns == TypeNS {\n+            ident.span.modern()\n         } else {\n-            ident = ident.modern_and_legacy();\n-        }\n+            ident.span.modern_and_legacy()\n+        };\n \n         // Walk backwards up the ribs in scope.\n         let record_used = record_used_id.is_some();\n@@ -5112,6 +5110,9 @@ impl<'a> Resolver<'a> {\n         }\n         self.extern_prelude.get(&ident.modern()).cloned().and_then(|entry| {\n             if let Some(binding) = entry.extern_crate_item {\n+                if !speculative && entry.introduced_by_item {\n+                    self.record_use(ident, TypeNS, binding, false);\n+                }\n                 Some(binding)\n             } else {\n                 let crate_id = if !speculative {"}, {"sha": "0c9e443efe0dbca27081c15d8b38167771dcdcda", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -14,7 +14,7 @@\n //! recording the output.\n \n use rustc::hir::def::Def as HirDef;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::DefId;\n use rustc::session::config::Input;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -56,14 +56,14 @@ macro_rules! access_from {\n     ($save_ctxt:expr, $vis:expr, $id:expr) => {\n         Access {\n             public: $vis.node.is_pub(),\n-            reachable: $save_ctxt.tcx.privacy_access_levels(LOCAL_CRATE).is_reachable($id),\n+            reachable: $save_ctxt.access_levels.is_reachable($id),\n         }\n     };\n \n     ($save_ctxt:expr, $item:expr) => {\n         Access {\n             public: $item.vis.node.is_pub(),\n-            reachable: $save_ctxt.tcx.privacy_access_levels(LOCAL_CRATE).is_reachable($item.id),\n+            reachable: $save_ctxt.access_levels.is_reachable($item.id),\n         }\n     };\n }"}, {"sha": "132bd4f1430a061803e8c0133963af39fe79747a", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -35,11 +35,13 @@ use rustc::hir;\n use rustc::hir::def::Def as HirDef;\n use rustc::hir::Node;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::middle::privacy::AccessLevels;\n use rustc::middle::cstore::ExternCrate;\n use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n+use rustc_data_structures::sync::Lrc;\n \n use std::cell::Cell;\n use std::default::Default;\n@@ -68,6 +70,7 @@ use rls_data::config::Config;\n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     tables: &'l ty::TypeckTables<'tcx>,\n+    access_levels: &'l AccessLevels,\n     analysis: &'l ty::CrateAnalysis,\n     span_utils: SpanUtils<'tcx>,\n     config: Config,\n@@ -622,9 +625,11 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Node::Visibility(&Spanned {\n                 node: hir::VisibilityKind::Restricted { ref path, .. }, .. }) => path.def,\n \n-            Node::PathSegment(seg) => match seg.def {\n-                Some(def) => def,\n-                None => HirDef::Err,\n+            Node::PathSegment(seg) => {\n+                match seg.def {\n+                    Some(def) if def != HirDef::Err => def,\n+                    _ => self.get_path_def(self.tcx.hir().get_parent_node(id)),\n+                }\n             },\n             Node::Expr(&hir::Expr {\n                 node: hir::ExprKind::Struct(ref qpath, ..),\n@@ -1126,10 +1131,18 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n \n         info!(\"Dumping crate {}\", cratename);\n \n+        // Privacy checking requires and is done after type checking; use a\n+        // fallback in case the access levels couldn't have been correctly computed.\n+        let access_levels = match tcx.sess.compile_status() {\n+            Ok(..) => tcx.privacy_access_levels(LOCAL_CRATE),\n+            Err(..) => Lrc::new(AccessLevels::default()),\n+        };\n+\n         let save_ctxt = SaveContext {\n             tcx,\n             tables: &ty::TypeckTables::empty(None),\n             analysis,\n+            access_levels: &access_levels,\n             span_utils: SpanUtils::new(&tcx.sess),\n             config: find_config(config),\n             impl_counter: Cell::new(0),"}, {"sha": "2df137c3f5094db5ca60181e61c7dc0bea910b31", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -40,7 +40,7 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                                      \"only traits defined in the current crate can be \\\n                                       implemented for arbitrary types\")\n                         .span_label(sp, \"impl doesn't use types inside crate\")\n-                        .note(\"the impl does not reference any types defined in this crate\")\n+                        .note(\"the impl does not reference only types defined in this crate\")\n                         .note(\"define and implement a trait or new type instead\")\n                         .emit();\n                     return;"}, {"sha": "6eea95b61c99051e5652a028c4639bebcc283c37", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -587,7 +587,7 @@ impl Clean<Item> for doctree::Module {\n         let attrs = self.attrs.clean(cx);\n \n         let mut items: Vec<Item> = vec![];\n-        items.extend(self.extern_crates.iter().map(|x| x.clean(cx)));\n+        items.extend(self.extern_crates.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.imports.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.structs.iter().map(|x| x.clean(cx)));\n         items.extend(self.unions.iter().map(|x| x.clean(cx)));\n@@ -3503,9 +3503,30 @@ fn build_deref_target_impls(cx: &DocContext,\n     }\n }\n \n-impl Clean<Item> for doctree::ExternCrate {\n-    fn clean(&self, cx: &DocContext) -> Item {\n-        Item {\n+impl Clean<Vec<Item>> for doctree::ExternCrate {\n+    fn clean(&self, cx: &DocContext) -> Vec<Item> {\n+\n+        let please_inline = self.vis.node.is_pub() && self.attrs.iter().any(|a| {\n+            a.name() == \"doc\" && match a.meta_item_list() {\n+                Some(l) => attr::list_contains_name(&l, \"inline\"),\n+                None => false,\n+            }\n+        });\n+\n+        if please_inline {\n+            let mut visited = FxHashSet::default();\n+\n+            let def = Def::Mod(DefId {\n+                krate: self.cnum,\n+                index: CRATE_DEF_INDEX,\n+            });\n+\n+            if let Some(items) = inline::try_inline(cx, def, self.name, &mut visited) {\n+                return items;\n+            }\n+        }\n+\n+        vec![Item {\n             name: None,\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n@@ -3514,7 +3535,7 @@ impl Clean<Item> for doctree::ExternCrate {\n             stability: None,\n             deprecation: None,\n             inner: ExternCrateItem(self.name.clean(cx), self.path.clone())\n-        }\n+        }]\n     }\n }\n "}, {"sha": "08a166bd8c50425f3c86f0963e78ec9c70514e5b", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -393,7 +393,16 @@ impl From<c::DWORD> for ExitStatus {\n \n impl fmt::Display for ExitStatus {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"exit code: {}\", self.0)\n+        // Windows exit codes with the high bit set typically mean some form of\n+        // unhandled exception or warning. In this scenario printing the exit\n+        // code in decimal doesn't always make sense because it's a very large\n+        // and somewhat gibberish number. The hex code is a bit more\n+        // recognizable and easier to search for, so print that.\n+        if self.0 & 0x80000000 != 0 {\n+            write!(f, \"exit code: {:#x}\", self.0)\n+        } else {\n+            write!(f, \"exit code: {}\", self.0)\n+        }\n     }\n }\n "}, {"sha": "b4003ac729addf611bc7130f38be8804568ea61d", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -271,7 +271,7 @@ pub enum ParseResult<T> {\n     Success(T),\n     /// Arm failed to match. If the second parameter is `token::Eof`, it indicates an unexpected\n     /// end of macro invocation. Otherwise, it indicates that no rules expected the given token.\n-    Failure(syntax_pos::Span, Token, String),\n+    Failure(syntax_pos::Span, Token, &'static str),\n     /// Fatal error (malformed macro?). Abort compilation.\n     Error(syntax_pos::Span, String),\n }\n@@ -721,7 +721,7 @@ pub fn parse(\n                         sess.source_map().next_point(parser.span)\n                     },\n                     token::Eof,\n-                    \"missing tokens in macro arguments\".to_string(),\n+                    \"missing tokens in macro arguments\",\n                 );\n             }\n         }\n@@ -760,7 +760,7 @@ pub fn parse(\n             return Failure(\n                 parser.span,\n                 parser.token,\n-                \"no rules expected this token in macro call\".to_string(),\n+                \"no rules expected this token in macro call\",\n             );\n         }\n         // Dump all possible `next_items` into `cur_items` for the next iteration."}, {"sha": "24202ca8fbdc08774ccf38079239d2bf4fe24a57", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -202,7 +202,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n     let best_fail_msg = parse_failure_msg(best_fail_tok.expect(\"ran no matchers\"));\n     let span = best_fail_spot.substitute_dummy(sp);\n     let mut err = cx.struct_span_err(span, &best_fail_msg);\n-    err.span_label(span, best_fail_text.unwrap_or(best_fail_msg));\n+    err.span_label(span, best_fail_text.unwrap_or(&best_fail_msg));\n     if let Some(sp) = def_span {\n         if cx.source_map().span_to_filename(sp).is_real() && !sp.is_dummy() {\n             err.span_label(cx.source_map().def_span(sp), \"when calling this macro\");"}, {"sha": "9b4231d8803a33a6e5d3fd3e39c5c2e224e22adb", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -191,7 +191,7 @@ declare_features! (\n     (active, slice_patterns, \"1.0.0\", Some(23121), None),\n \n     // Allows the definition of `const` functions with some advanced features.\n-    (active, const_fn, \"1.2.0\", Some(24111), None),\n+    (active, const_fn, \"1.2.0\", Some(57563), None),\n \n     // Allows accessing fields of unions inside `const` functions.\n     (active, const_fn_union, \"1.27.0\", Some(51909), None),"}, {"sha": "8c89c8d6c76c55b4d1d7d235bc98e537e7c13e0e", "filename": "src/test/rustdoc/auxiliary/pub-extern-crate.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Frustdoc%2Fauxiliary%2Fpub-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Frustdoc%2Fauxiliary%2Fpub-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fpub-extern-crate.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -0,0 +1,2 @@\n+#![crate_name = \"inner\"]\n+pub struct SomeStruct;"}, {"sha": "26747a4d1aca5f12b19319ba7c0dee4cb7349659", "filename": "src/test/rustdoc/pub-extern-crate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Frustdoc%2Fpub-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Frustdoc%2Fpub-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-extern-crate.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -0,0 +1,9 @@\n+// aux-build:pub-extern-crate.rs\n+\n+// @has pub_extern_crate/index.html\n+// @!has - '//code' 'pub extern crate inner'\n+// @has - '//a/@href' 'inner/index.html'\n+// @has pub_extern_crate/inner/index.html\n+// @has pub_extern_crate/inner/struct.SomeStruct.html\n+#[doc(inline)]\n+pub extern crate inner;"}, {"sha": "b0ec55a9bc578cda297d39aaee4ef08388d18d85", "filename": "src/test/ui/coherence/coherence-cow.re_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T> Remote for Pair<T,Cover<T>> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "ce2611270938d8c08b1c09bf799bf7221f2030e9", "filename": "src/test/ui/coherence/coherence-cow.re_b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T> Remote for Pair<Cover<T>,T> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "1c2030d8dfea8fdb4b661097bfb196a75e4c84cf", "filename": "src/test/ui/coherence/coherence-cow.re_c.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "2d1247e831ec4a943c55e34447a3cad3e6be918e", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Misc for dyn Fundamental<Local> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "2d1247e831ec4a943c55e34447a3cad3e6be918e", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Misc for dyn Fundamental<Local> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "e870c267ce141e120d82b6e571e44ae43912ba87", "filename": "src/test/ui/coherence/coherence-impls-copy.old.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -51,7 +51,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for i32 {}\n    | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -60,7 +60,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -69,7 +69,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -78,7 +78,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 10 previous errors"}, {"sha": "e870c267ce141e120d82b6e571e44ae43912ba87", "filename": "src/test/ui/coherence/coherence-impls-copy.re.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -51,7 +51,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for i32 {}\n    | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -60,7 +60,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -69,7 +69,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -78,7 +78,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 10 previous errors"}, {"sha": "3ede8363d119e4a7cf11d72df92d016350881d0e", "filename": "src/test/ui/coherence/coherence-impls-send.old.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | unsafe impl Send for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n@@ -19,7 +19,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | unsafe impl Send for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -28,7 +28,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | unsafe impl Send for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 4 previous errors"}, {"sha": "3ede8363d119e4a7cf11d72df92d016350881d0e", "filename": "src/test/ui/coherence/coherence-impls-send.re.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | unsafe impl Send for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n@@ -19,7 +19,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | unsafe impl Send for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -28,7 +28,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | unsafe impl Send for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 4 previous errors"}, {"sha": "86a0996554d419e8d5be7f59925ad338f7d2b68c", "filename": "src/test/ui/coherence/coherence-impls-sized.old.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -40,7 +40,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Sized for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -49,7 +49,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Sized for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -58,7 +58,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Sized for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 9 previous errors"}, {"sha": "86a0996554d419e8d5be7f59925ad338f7d2b68c", "filename": "src/test/ui/coherence/coherence-impls-sized.re.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -40,7 +40,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Sized for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -49,7 +49,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Sized for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -58,7 +58,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Sized for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 9 previous errors"}, {"sha": "e6dc17d95a24118e2c230e4763b4288604efbcf7", "filename": "src/test/ui/coherence/coherence-orphan.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl TheTrait<usize> for isize { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -13,7 +13,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl !Send for Vec<isize> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "e6dc17d95a24118e2c230e4763b4288604efbcf7", "filename": "src/test/ui/coherence/coherence-orphan.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl TheTrait<usize> for isize { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -13,7 +13,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl !Send for Vec<isize> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "a6fa609deb21449209d5f008a5af098c7b093680", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T> Remote for lib::Pair<T,Foo> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "e45cd78363ca72c11dbd28ad6ac61a3766870735", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "54d5f3058a85cba7b38a765f3b35108a041fc9f5", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "6992aa7a0bdc641f7fc99a20cb227dbf9cff82c7", "filename": "src/test/ui/coherence/coherence-vec-local-2.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T> Remote for Vec<Local<T>> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "b35e7a8ba8bed60207a65f3c0c8d08e2438f8d3c", "filename": "src/test/ui/coherence/coherence-vec-local.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Remote for Vec<Local> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "b35e7a8ba8bed60207a65f3c0c8d08e2438f8d3c", "filename": "src/test/ui/coherence/coherence-vec-local.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Remote for Vec<Local> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "e1f651493f67c1a6b03fbd085b09fcf4b66ec32c", "filename": "src/test/ui/coherence/coherence_local_err_struct.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "e1f651493f67c1a6b03fbd085b09fcf4b66ec32c", "filename": "src/test/ui/coherence/coherence_local_err_struct.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "171daa54861fed56635848940afccba179305802", "filename": "src/test/ui/coherence/coherence_local_err_tuple.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl lib::MyCopy for (MyType,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "171daa54861fed56635848940afccba179305802", "filename": "src/test/ui/coherence/coherence_local_err_tuple.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl lib::MyCopy for (MyType,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "6b670d5d434e4782693758be99e7da73ee29a05c", "filename": "src/test/ui/dropck/drop-on-non-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -10,7 +10,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<'a> Drop for &'a mut isize {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "b007ca05ab2cf9f3b0118b9064b0bc941821f7e2", "filename": "src/test/ui/error-codes/E0117.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -10,7 +10,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Drop for u32 {} //~ ERROR E0117\n    | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "a0c4b0149a09994b05f18dbf2d3f39f8e8e017df", "filename": "src/test/ui/error-codes/E0206.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -16,7 +16,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for Foo { }\n    | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 3 previous errors"}, {"sha": "be5237fbfcf3b1d798501902783e117ffd1746ef", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -16,15 +16,15 @@ error[E0379]: trait fns cannot be declared const\n LL |     const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n    |     ^^^^^ trait fns cannot be const\n \n-error[E0658]: const fn is unstable (see issue #24111)\n+error[E0658]: const fn is unstable (see issue #57563)\n   --> $DIR/feature-gate-const_fn.rs:6:5\n    |\n LL |     const fn foo() -> u32; //~ ERROR const fn is unstable\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0658]: const fn is unstable (see issue #24111)\n+error[E0658]: const fn is unstable (see issue #57563)\n   --> $DIR/feature-gate-const_fn.rs:8:5\n    |\n LL |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable"}, {"sha": "056e33111f0dfcfcb5bfe56d559a3968684c6572", "filename": "src/test/ui/feature-gates/feature-gate-min_const_fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -16,15 +16,15 @@ error[E0379]: trait fns cannot be declared const\n LL |     const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n    |     ^^^^^ trait fns cannot be const\n \n-error[E0658]: const fn is unstable (see issue #24111)\n+error[E0658]: const fn is unstable (see issue #57563)\n   --> $DIR/feature-gate-min_const_fn.rs:6:5\n    |\n LL |     const fn foo() -> u32; //~ ERROR const fn is unstable\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0658]: const fn is unstable (see issue #24111)\n+error[E0658]: const fn is unstable (see issue #57563)\n   --> $DIR/feature-gate-min_const_fn.rs:8:5\n    |\n LL |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable"}, {"sha": "2d91cbc00f27d492bb11387582a0bd4b829c35c4", "filename": "src/test/ui/imports/extern-crate-used.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fimports%2Fextern-crate-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fimports%2Fextern-crate-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-used.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -0,0 +1,28 @@\n+// Extern crate items are marked as used if they are used\n+// through extern prelude entries introduced by them.\n+\n+// edition:2018\n+\n+#![deny(unused_extern_crates)]\n+\n+extern crate core as iso1; //~ ERROR `extern crate` is not idiomatic in the new edition\n+extern crate core as iso2; //~ ERROR `extern crate` is not idiomatic in the new edition\n+extern crate core as iso3; //~ ERROR `extern crate` is not idiomatic in the new edition\n+extern crate core as iso4; //~ ERROR `extern crate` is not idiomatic in the new edition\n+\n+// Doesn't introduce its extern prelude entry, so it's still considered unused.\n+extern crate core; //~ ERROR unused extern crate\n+\n+mod m {\n+    use iso1::any as are_you_okay1;\n+    use ::iso2::any as are_you_okay2;\n+    type AreYouOkay1 = iso3::any::Any;\n+    type AreYouOkay2 = ::iso4::any::Any;\n+\n+    use core::any as are_you_okay3;\n+    use ::core::any as are_you_okay4;\n+    type AreYouOkay3 = core::any::Any;\n+    type AreYouOkay4 = ::core::any::Any;\n+}\n+\n+fn main() {}"}, {"sha": "3f9aab9dc79cb44bf7ae4a37b585d0bcc806c6c7", "filename": "src/test/ui/imports/extern-crate-used.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fimports%2Fextern-crate-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fimports%2Fextern-crate-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-used.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -0,0 +1,38 @@\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/extern-crate-used.rs:8:1\n+   |\n+LL | extern crate core as iso1; //~ ERROR `extern crate` is not idiomatic in the new edition\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `use`\n+   |\n+note: lint level defined here\n+  --> $DIR/extern-crate-used.rs:6:9\n+   |\n+LL | #![deny(unused_extern_crates)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/extern-crate-used.rs:9:1\n+   |\n+LL | extern crate core as iso2; //~ ERROR `extern crate` is not idiomatic in the new edition\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `use`\n+\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/extern-crate-used.rs:10:1\n+   |\n+LL | extern crate core as iso3; //~ ERROR `extern crate` is not idiomatic in the new edition\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `use`\n+\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/extern-crate-used.rs:11:1\n+   |\n+LL | extern crate core as iso4; //~ ERROR `extern crate` is not idiomatic in the new edition\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `use`\n+\n+error: unused extern crate\n+  --> $DIR/extern-crate-used.rs:14:1\n+   |\n+LL | extern crate core; //~ ERROR unused extern crate\n+   | ^^^^^^^^^^^^^^^^^^ help: remove it\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "c2a2f28254226a40672eb15e83cf55c55534b982", "filename": "src/test/ui/resolve/issue-57523.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fresolve%2Fissue-57523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Fresolve%2Fissue-57523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-57523.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -0,0 +1,21 @@\n+// compile-pass\n+\n+struct S(u8);\n+\n+impl S {\n+    fn method1() -> Self {\n+        Self(0)\n+    }\n+}\n+\n+macro_rules! define_method { () => {\n+    impl S {\n+        fn method2() -> Self {\n+            Self(0) // OK\n+        }\n+    }\n+}}\n+\n+define_method!();\n+\n+fn main() {}"}, {"sha": "2bfb4110603f5a73411095d0caa37d71a502f0e9", "filename": "src/test/ui/typeck/typeck-default-trait-impl-cross-crate-coherence.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl DefaultedTrait for (A,) { } //~ ERROR E0117\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -13,7 +13,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl !DefaultedTrait for (B,) { } //~ ERROR E0117\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `lib::DefaultedTrait`, can only be implemented for a struct/enum type defined in the current crate\n@@ -28,7 +28,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl DefaultedTrait for lib::Something<C> { } //~ ERROR E0117\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n-   = note: the impl does not reference any types defined in this crate\n+   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 4 previous errors"}, {"sha": "2435a0cfd4e3892b968290c2ac647db4f9a7f908", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=d45bef9db62a0797c6dd3b06e21db1a0acd8cfe7", "patch": "@@ -336,12 +336,11 @@ fn map_lib_features(base_src_path: &Path,\n                     level: Status::Unstable,\n                     since: \"None\".to_owned(),\n                     has_gate_test: false,\n-                    // Whether there is a common tracking issue\n-                    // for these feature gates remains an open question\n-                    // https://github.com/rust-lang/rust/issues/24111#issuecomment-340283184\n-                    // But we take 24111 otherwise they will be shown as\n-                    // \"internal to the compiler\" which they are not.\n-                    tracking_issue: Some(24111),\n+                    // FIXME(#57563): #57563 is now used as a common tracking issue,\n+                    // although we would like to have specific tracking\n+                    // issues for each `rustc_const_unstable` in the\n+                    // future.\n+                    tracking_issue: Some(57563),\n                 };\n                 mf(Ok((feature_name, feature)), file, i + 1);\n                 continue;"}]}