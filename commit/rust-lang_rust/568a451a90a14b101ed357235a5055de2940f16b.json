{"sha": "568a451a90a14b101ed357235a5055de2940f16b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2OGE0NTFhOTBhMTRiMTAxZWQzNTcyMzVhNTA1NWRlMjk0MGYxNmI=", "commit": {"author": {"name": "S\u00e9bastien Marie", "email": "semarie@users.noreply.github.com", "date": "2015-01-30T07:15:28Z"}, "committer": {"name": "S\u00e9bastien Marie", "email": "semarie@users.noreply.github.com", "date": "2015-02-01T13:41:40Z"}, "message": "openbsd: incoporate remarks\n\n- consolidate target_record_sp_limit and target_get_sp_limit functions\n  for aarch64, powerpc, arm-ios and openbsd as there are all without\n  segmented stacks (no need to duplicate functions).\n\n- rename __load_self function to rust_load_self\n\n- use a mutex inner load_self() as underline implementation is not thread-safe", "tree": {"sha": "f82c25a1c787d485021e37e895a613da209fa9c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f82c25a1c787d485021e37e895a613da209fa9c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/568a451a90a14b101ed357235a5055de2940f16b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/568a451a90a14b101ed357235a5055de2940f16b", "html_url": "https://github.com/rust-lang/rust/commit/568a451a90a14b101ed357235a5055de2940f16b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/568a451a90a14b101ed357235a5055de2940f16b/comments", "author": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3096784a3b1dd7d20bc67f19d4ccd61ae497a7de", "url": "https://api.github.com/repos/rust-lang/rust/commits/3096784a3b1dd7d20bc67f19d4ccd61ae497a7de", "html_url": "https://github.com/rust-lang/rust/commit/3096784a3b1dd7d20bc67f19d4ccd61ae497a7de"}], "stats": {"total": 67, "additions": 27, "deletions": 40}, "files": [{"sha": "8dd2f154fa8e3028fd5c0cd31cbc71060cca6b93", "filename": "src/libstd/sys/common/stack.rs", "status": "modified", "additions": 17, "deletions": 37, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/568a451a90a14b101ed357235a5055de2940f16b/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568a451a90a14b101ed357235a5055de2940f16b/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs?ref=568a451a90a14b101ed357235a5055de2940f16b", "patch": "@@ -227,24 +227,14 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     }\n \n     // aarch64 - FIXME(AARCH64): missing...\n-    #[cfg(target_arch = \"aarch64\")]\n-    unsafe fn target_record_sp_limit(_: uint) {\n-    }\n-\n     // powerpc - FIXME(POWERPC): missing...\n-    #[cfg(target_arch = \"powerpc\")]\n-    unsafe fn target_record_sp_limit(_: uint) {\n-    }\n-\n-\n-    // iOS segmented stack is disabled for now, see related notes\n-    #[cfg(all(target_arch = \"arm\", target_os = \"ios\"))] #[inline(always)]\n-    unsafe fn target_record_sp_limit(_: uint) {\n-    }\n-\n-    #[cfg(target_os = \"openbsd\")] #[inline(always)]\n+    // arm-ios - iOS segmented stack is disabled for now, see related notes\n+    // openbsd - segmented stack is disabled\n+    #[cfg(any(target_arch = \"aarch64\",\n+              target_arch = \"powerpc\",\n+              all(target_arch = \"arm\", target_os = \"ios\"),\n+              target_os = \"openbsd\"))]\n     unsafe fn target_record_sp_limit(_: uint) {\n-        // segmented stack is disabled\n     }\n }\n \n@@ -332,28 +322,18 @@ pub unsafe fn get_sp_limit() -> uint {\n     }\n \n     // aarch64 - FIXME(AARCH64): missing...\n-    #[cfg(target_arch = \"aarch64\")]\n-    unsafe fn target_get_sp_limit() -> uint {\n-        1024\n-    }\n-\n-    // powepc - FIXME(POWERPC): missing...\n-    #[cfg(target_arch = \"powerpc\")]\n-    unsafe fn target_get_sp_limit() -> uint {\n-        1024\n-    }\n-\n-    // iOS doesn't support segmented stacks yet. This function might\n-    // be called by runtime though so it is unsafe to mark it as\n-    // unreachable, let's return a fixed constant.\n-    #[cfg(all(target_arch = \"arm\", target_os = \"ios\"))] #[inline(always)]\n-    unsafe fn target_get_sp_limit() -> uint {\n-        1024\n-    }\n-\n-    #[cfg(target_os = \"openbsd\")] #[inline(always)]\n+    // powerpc - FIXME(POWERPC): missing...\n+    // arm-ios - iOS doesn't support segmented stacks yet.\n+    // openbsd - OpenBSD doesn't support segmented stacks.\n+    //\n+    // This function might be called by runtime though\n+    // so it is unsafe to unreachable, let's return a fixed constant.\n+    #[cfg(any(target_arch = \"aarch64\",\n+              target_arch = \"powerpc\",\n+              all(target_arch = \"arm\", target_os = \"ios\"),\n+              target_os = \"openbsd\"))]\n+    #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n-        // segmented stack is disabled\n         1024\n     }\n }"}, {"sha": "9faa4a038ba23c6bf0071d3d6adb1eeb9a3f875c", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/568a451a90a14b101ed357235a5055de2940f16b/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568a451a90a14b101ed357235a5055de2940f16b/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=568a451a90a14b101ed357235a5055de2940f16b", "patch": "@@ -217,11 +217,18 @@ pub fn load_self() -> Option<Vec<u8>> {\n \n #[cfg(target_os = \"openbsd\")]\n pub fn load_self() -> Option<Vec<u8>> {\n+    use sync::{StaticMutex, MUTEX_INIT};\n+\n+    static LOCK: StaticMutex = MUTEX_INIT;\n+\n     extern {\n-        fn __load_self() -> *const c_char;\n+        fn rust_load_self() -> *const c_char;\n     }\n+\n+    let _guard = LOCK.lock();\n+\n     unsafe {\n-        let v = __load_self();\n+        let v = rust_load_self();\n         if v.is_null() {\n             None\n         } else {"}, {"sha": "382cbf0d5d129e5849ca9714f809626ba6d4c5d4", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/568a451a90a14b101ed357235a5055de2940f16b/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/568a451a90a14b101ed357235a5055de2940f16b/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=568a451a90a14b101ed357235a5055de2940f16b", "patch": "@@ -204,7 +204,7 @@ int *__dfly_error(void) { return __error(); }\n #include <sys/sysctl.h>\n #include <limits.h>\n \n-const char * __load_self() {\n+const char * rust_load_self() {\n     static char *self = NULL;\n \n     if (self == NULL) {"}]}