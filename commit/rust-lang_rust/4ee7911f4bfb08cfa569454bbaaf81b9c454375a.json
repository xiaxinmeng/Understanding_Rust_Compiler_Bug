{"sha": "4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZTc5MTFmNGJmYjA4Y2ZhNTY5NDU0YmJhYWY4MWI5YzQ1NDM3NWE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-12-14T19:53:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-14T19:53:48Z"}, "message": "Merge pull request #2271 from topecongiro/refactorings\n\nRefactorings from cargo clippy etc.", "tree": {"sha": "2c77c7c8c96277fa815cb78f56368321ce39b171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c77c7c8c96277fa815cb78f56368321ce39b171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaMtbMCRBK7hj4Ov3rIwAAdHIIAAJO15OxmoiZixwcFJMdv2dA\nEhdWdsKjbzGk9kTLiLAmaWRDzJJ+1pn8vA9yyD3sjtOT0oOfhuUmlipsZ0Hjiaka\npg+IXwLeHzcvATWkRECYkV32QgrqHFOaeg8pmR4CpQUsvP2wuc6BnMqglnVgEwUl\nSicPEf09AugLl2zChrqR0faOeLALEZ4W3yZh6KgFfvqolA4hiulMRFr+M9sI9KqK\nYPstXgknTmaNBe7vmTRegnQBlIjFucg56CkDi6mddS01vSYPNj+xNIDgHuF0+vwN\nPtgAPAs6/ik123UjtbncchUC2lSjIEt1PE1nXN5BKDMtVF20JCrJof40A7hn8L0=\n=6IXi\n-----END PGP SIGNATURE-----\n", "payload": "tree 2c77c7c8c96277fa815cb78f56368321ce39b171\nparent 2a7ac4aa415e9e10864fd9f2fc3a548edb02dc56\nparent efb68ee21a2680794dd1179ed071b245ade9c91e\nauthor Nick Cameron <nrc@ncameron.org> 1513281228 +1300\ncommitter GitHub <noreply@github.com> 1513281228 +1300\n\nMerge pull request #2271 from topecongiro/refactorings\n\nRefactorings from cargo clippy etc."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "html_url": "https://github.com/rust-lang/rust/commit/4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a7ac4aa415e9e10864fd9f2fc3a548edb02dc56", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7ac4aa415e9e10864fd9f2fc3a548edb02dc56", "html_url": "https://github.com/rust-lang/rust/commit/2a7ac4aa415e9e10864fd9f2fc3a548edb02dc56"}, {"sha": "efb68ee21a2680794dd1179ed071b245ade9c91e", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb68ee21a2680794dd1179ed071b245ade9c91e", "html_url": "https://github.com/rust-lang/rust/commit/efb68ee21a2680794dd1179ed071b245ade9c91e"}], "stats": {"total": 406, "additions": 187, "deletions": 219}, "files": [{"sha": "3916b52fe5fcdc2c75ad7a07ded7365c92533e10", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "patch": "@@ -54,7 +54,7 @@ fn execute() -> i32 {\n     // If there is any invalid argument passed to `cargo fmt`, return without formatting.\n     let mut is_package_arg = false;\n     for arg in env::args().skip(2).take_while(|a| a != \"--\") {\n-        if arg.starts_with(\"-\") {\n+        if arg.starts_with('-') {\n             is_package_arg = arg.starts_with(\"--package\");\n         } else if !is_package_arg {\n             print_usage_to_stderr(&opts, &format!(\"Invalid argument: `{}`.\", arg));\n@@ -215,7 +215,7 @@ impl CargoFmtStrategy {\n     }\n }\n \n-/// Based on the specified CargoFmtStrategy, returns a set of main source files.\n+/// Based on the specified `CargoFmtStrategy`, returns a set of main source files.\n fn get_targets(strategy: &CargoFmtStrategy) -> Result<HashSet<Target>, io::Error> {\n     let mut targets = HashSet::new();\n \n@@ -228,7 +228,7 @@ fn get_targets(strategy: &CargoFmtStrategy) -> Result<HashSet<Target>, io::Error\n     if targets.is_empty() {\n         Err(io::Error::new(\n             io::ErrorKind::Other,\n-            format!(\"Failed to find targets\"),\n+            \"Failed to find targets\".to_owned(),\n         ))\n     } else {\n         Ok(targets)\n@@ -310,7 +310,7 @@ fn get_targets_with_hitlist(\n \n fn add_targets(target_paths: &[cargo_metadata::Target], targets: &mut HashSet<Target>) {\n     for target in target_paths {\n-        targets.insert(Target::from_target(&target));\n+        targets.insert(Target::from_target(target));\n     }\n }\n "}, {"sha": "439a7f6a05f32c1cfea3d19c4f117f89fbb8c575", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "patch": "@@ -930,7 +930,7 @@ pub fn recover_comment_removed(\n     context: &RewriteContext,\n ) -> Option<String> {\n     let snippet = context.snippet(span);\n-    if snippet != new && changed_comment_content(&snippet, &new) {\n+    if snippet != new && changed_comment_content(snippet, &new) {\n         // We missed some comments. Keep the original text.\n         Some(snippet.to_owned())\n     } else {"}, {"sha": "8ef55b1716cd878acd628c41f34732da7d09dd1d", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "patch": "@@ -304,7 +304,7 @@ pub fn format_expr(\n         })\n }\n \n-#[derive(new)]\n+#[derive(new, Clone, Copy)]\n pub struct PairParts<'a> {\n     prefix: &'a str,\n     infix: &'a str,\n@@ -729,7 +729,7 @@ struct ControlFlow<'a> {\n     span: Span,\n }\n \n-fn to_control_flow<'a>(expr: &'a ast::Expr, expr_type: ExprType) -> Option<ControlFlow<'a>> {\n+fn to_control_flow(expr: &ast::Expr, expr_type: ExprType) -> Option<ControlFlow> {\n     match expr.node {\n         ast::ExprKind::If(ref cond, ref if_block, ref else_block) => Some(ControlFlow::new_if(\n             cond,\n@@ -2122,16 +2122,12 @@ fn is_every_args_simple<T: ToExpr>(lists: &[&T]) -> bool {\n \n /// In case special-case style is required, returns an offset from which we start horizontal layout.\n fn maybe_get_args_offset<T: ToExpr>(callee_str: &str, args: &[&T]) -> Option<usize> {\n-    if FORMAT_LIKE_WHITELIST\n-        .iter()\n-        .find(|s| **s == callee_str)\n-        .is_some() && args.len() >= 1 && is_every_args_simple(args)\n+    if FORMAT_LIKE_WHITELIST.iter().any(|s| *s == callee_str) && args.len() >= 1\n+        && is_every_args_simple(args)\n     {\n         Some(1)\n-    } else if WRITE_LIKE_WHITELIST\n-        .iter()\n-        .find(|s| **s == callee_str)\n-        .is_some() && args.len() >= 2 && is_every_args_simple(args)\n+    } else if WRITE_LIKE_WHITELIST.iter().any(|s| *s == callee_str) && args.len() >= 2\n+        && is_every_args_simple(args)\n     {\n         Some(2)\n     } else {"}, {"sha": "c7fa5e2f1efddcbbbffa125205cedd11e6b00ab5", "filename": "src/filemap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "patch": "@@ -45,7 +45,7 @@ where\n }\n \n // Prints all newlines either as `\\n` or as `\\r\\n`.\n-pub fn write_system_newlines<T>(writer: T, text: &String, config: &Config) -> Result<(), io::Error>\n+pub fn write_system_newlines<T>(writer: T, text: &str, config: &Config) -> Result<(), io::Error>\n where\n     T: Write,\n {\n@@ -79,7 +79,7 @@ where\n }\n \n pub fn write_file<T>(\n-    text: &String,\n+    text: &str,\n     filename: &str,\n     out: &mut T,\n     config: &Config,\n@@ -88,7 +88,7 @@ where\n     T: Write,\n {\n     fn source_and_formatted_text(\n-        text: &String,\n+        text: &str,\n         filename: &str,\n         config: &Config,\n     ) -> Result<(String, String), io::Error> {\n@@ -103,7 +103,7 @@ where\n \n     fn create_diff(\n         filename: &str,\n-        text: &String,\n+        text: &str,\n         config: &Config,\n     ) -> Result<Vec<Mismatch>, io::Error> {\n         let (ori, fmt) = source_and_formatted_text(text, filename, config)?;"}, {"sha": "53ccd67b79283e84131f5972fccc7a5f2e24f540", "filename": "src/imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "patch": "@@ -108,10 +108,10 @@ fn compare_use_trees(a: &ast::UseTree, b: &ast::UseTree, nested: bool) -> Orderi\n fn compare_use_items(context: &RewriteContext, a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n     match (&a.node, &b.node) {\n         (&ast::ItemKind::Use(ref a_tree), &ast::ItemKind::Use(ref b_tree)) => {\n-            Some(compare_use_trees(&a_tree, &b_tree, false))\n+            Some(compare_use_trees(a_tree, b_tree, false))\n         }\n         (&ast::ItemKind::ExternCrate(..), &ast::ItemKind::ExternCrate(..)) => {\n-            Some(context.snippet(a.span).cmp(&context.snippet(b.span)))\n+            Some(context.snippet(a.span).cmp(context.snippet(b.span)))\n         }\n         _ => None,\n     }\n@@ -141,7 +141,7 @@ impl Rewrite for ast::UseTree {\n             ast::UseTreeKind::Glob => {\n                 let prefix_shape = shape.sub_width(3)?;\n \n-                if self.prefix.segments.len() > 0 {\n+                if !self.prefix.segments.is_empty() {\n                     let path_str = rewrite_prefix(&self.prefix, context, prefix_shape)?;\n                     Some(format!(\"{}::*\", path_str))\n                 } else {\n@@ -476,7 +476,7 @@ fn rewrite_nested_use_tree(\n         let mut items = vec![ListItem::from_str(\"\")];\n         let iter = itemize_list(\n             context.codemap,\n-            trees.iter().map(|ref tree| &tree.0),\n+            trees.iter().map(|tree| &tree.0),\n             \"}\",\n             \",\",\n             |tree| tree.span.lo(),"}, {"sha": "7771344f3dbfea382ec6718db566279856d6b132", "filename": "src/items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "patch": "@@ -239,8 +239,8 @@ impl<'a> FnSig<'a> {\n }\n \n impl<'a> FmtVisitor<'a> {\n-    fn format_item(&mut self, item: Item) {\n-        self.push_str(&item.abi);\n+    fn format_item(&mut self, item: &Item) {\n+        self.buffer.push_str(&item.abi);\n \n         let snippet = self.snippet(item.span);\n         let brace_pos = snippet.find_uncommented(\"{\").unwrap();\n@@ -279,7 +279,7 @@ impl<'a> FmtVisitor<'a> {\n \n     pub fn format_foreign_mod(&mut self, fm: &ast::ForeignMod, span: Span) {\n         let item = Item::from_foreign_mod(fm, span, self.config);\n-        self.format_item(item);\n+        self.format_item(&item);\n     }\n \n     fn format_foreign_item(&mut self, item: &ast::ForeignItem) {\n@@ -950,7 +950,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n                 .span_after(item.span, &format!(\"{}\", item.ident));\n             let bound_hi = type_param_bounds.last().unwrap().span().hi();\n             let snippet = context.snippet(mk_sp(ident_hi, bound_hi));\n-            if contains_comment(&snippet) {\n+            if contains_comment(snippet) {\n                 return None;\n             }\n         }\n@@ -1175,7 +1175,7 @@ pub fn format_struct_struct(\n             result.push('\\n');\n             result.push_str(&offset.to_string(context.config));\n         } else {\n-            result.push_str(&snippet);\n+            result.push_str(snippet);\n         }\n         result.push('}');\n         return Some(result);\n@@ -1307,7 +1307,7 @@ fn format_tuple_struct(\n             result.push('\\n');\n             result.push_str(&offset.to_string(context.config));\n         } else {\n-            result.push_str(&snippet);\n+            result.push_str(snippet);\n         }\n         result.push(')');\n     } else {\n@@ -2718,7 +2718,7 @@ fn format_header(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> S\n     format!(\"{}{}{}\", format_visibility(vis), item_name, ident)\n }\n \n-#[derive(PartialEq, Eq)]\n+#[derive(PartialEq, Eq, Clone, Copy)]\n enum BracePos {\n     None,\n     Auto,"}, {"sha": "9c32e7f62befe3703e9498bbf261f5da808f9ad5", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "patch": "@@ -144,7 +144,7 @@ pub fn rewrite_macro(\n     };\n \n     let ts: TokenStream = mac.node.stream();\n-    if ts.is_empty() && !contains_comment(&context.snippet(mac.span)) {\n+    if ts.is_empty() && !contains_comment(context.snippet(mac.span)) {\n         return match style {\n             MacroStyle::Parens if position == MacroPosition::Item => {\n                 Some(format!(\"{}();\", macro_name))"}, {"sha": "4e1f2a37ef4476def67c2a06f888ae6f2903e7b5", "filename": "src/missed_spans.rs", "status": "modified", "additions": 151, "deletions": 178, "changes": 329, "blob_url": "https://github.com/rust-lang/rust/blob/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "patch": "@@ -20,9 +20,28 @@ use shape::{Indent, Shape};\n use utils::{count_newlines, last_line_width, mk_sp};\n use visitor::FmtVisitor;\n \n+struct SnippetStatus {\n+    /// An offset to the current line from the beginnig of the original snippet.\n+    line_start: usize,\n+    /// A length of trailing whitespaces on the current line.\n+    last_wspace: Option<usize>,\n+    /// The current line number.\n+    cur_line: usize,\n+}\n+\n+impl SnippetStatus {\n+    fn new(cur_line: usize) -> Self {\n+        SnippetStatus {\n+            line_start: 0,\n+            last_wspace: None,\n+            cur_line,\n+        }\n+    }\n+}\n+\n impl<'a> FmtVisitor<'a> {\n     fn output_at_start(&self) -> bool {\n-        self.buffer.len() == 0\n+        self.buffer.is_empty()\n     }\n \n     // TODO these format_missing methods are ugly. Refactor and add unit tests\n@@ -77,20 +96,16 @@ impl<'a> FmtVisitor<'a> {\n         let snippet = self.snippet(span);\n         if snippet.trim().is_empty() && !out_of_file_lines_range!(self, span) {\n             // Keep vertical spaces within range.\n-            self.push_vertical_spaces(count_newlines(&snippet));\n-            process_last_snippet(self, \"\", &snippet);\n+            self.push_vertical_spaces(count_newlines(snippet));\n+            process_last_snippet(self, \"\", snippet);\n         } else {\n             self.write_snippet(span, &process_last_snippet);\n         }\n     }\n \n     fn push_vertical_spaces(&mut self, mut newline_count: usize) {\n         // The buffer already has a trailing newline.\n-        let offset = if last_line_width(&self.buffer) == 0 {\n-            0\n-        } else {\n-            1\n-        };\n+        let offset = if self.buffer.ends_with('\\n') { 0 } else { 1 };\n         let newline_upper_bound = self.config.blank_lines_upper_bound() + offset;\n         let newline_lower_bound = self.config.blank_lines_lower_bound() + offset;\n         if newline_count > newline_upper_bound {\n@@ -121,86 +136,7 @@ impl<'a> FmtVisitor<'a> {\n \n         debug!(\"write_snippet `{}`\", snippet);\n \n-        self.write_snippet_inner(big_snippet, big_diff, &snippet, span, process_last_snippet);\n-    }\n-\n-    fn process_comment(\n-        &mut self,\n-        status: &mut SnippetStatus,\n-        snippet: &str,\n-        big_snippet: &str,\n-        offset: usize,\n-        big_diff: usize,\n-        subslice: &str,\n-        file_name: &str,\n-    ) -> bool {\n-        let last_char = big_snippet[..(offset + big_diff)]\n-            .chars()\n-            .rev()\n-            .skip_while(|rev_c| [' ', '\\t'].contains(rev_c))\n-            .next();\n-\n-        let fix_indent = last_char.map_or(true, |rev_c| ['{', '\\n'].contains(&rev_c));\n-\n-        let subslice_num_lines = count_newlines(subslice);\n-        let skip_this_range = !self.config.file_lines().intersects_range(\n-            file_name,\n-            status.cur_line,\n-            status.cur_line + subslice_num_lines,\n-        );\n-\n-        if status.rewrite_next_comment && skip_this_range {\n-            status.rewrite_next_comment = false;\n-        }\n-\n-        if status.rewrite_next_comment {\n-            let comment_indent = if fix_indent {\n-                if let Some('{') = last_char {\n-                    self.push_str(\"\\n\");\n-                }\n-                let indent_str = self.block_indent.to_string(self.config);\n-                self.push_str(&indent_str);\n-                self.block_indent\n-            } else {\n-                self.push_str(\" \");\n-                Indent::from_width(self.config, last_line_width(&self.buffer))\n-            };\n-            let comment_width = ::std::cmp::min(\n-                self.config.comment_width(),\n-                self.config.max_width() - self.block_indent.width(),\n-            );\n-            let comment_shape = Shape::legacy(comment_width, comment_indent);\n-            let comment_str = rewrite_comment(subslice, false, comment_shape, self.config)\n-                .unwrap_or_else(|| String::from(subslice));\n-            self.push_str(&comment_str);\n-\n-            status.last_wspace = None;\n-            status.line_start = offset + subslice.len();\n-\n-            if let Some('/') = subslice.chars().nth(1) {\n-                // check that there are no contained block comments\n-                if !subslice\n-                    .split('\\n')\n-                    .map(|s| s.trim_left())\n-                    .any(|s| s.len() >= 2 && &s[0..2] == \"/*\")\n-                {\n-                    // Add a newline after line comments\n-                    self.push_str(\"\\n\");\n-                }\n-            } else if status.line_start <= snippet.len() {\n-                // For other comments add a newline if there isn't one at the end already\n-                match snippet[status.line_start..].chars().next() {\n-                    Some('\\n') | Some('\\r') => (),\n-                    _ => self.push_str(\"\\n\"),\n-                }\n-            }\n-\n-            status.cur_line += subslice_num_lines;\n-            true\n-        } else {\n-            status.rewrite_next_comment = false;\n-            false\n-        }\n+        self.write_snippet_inner(big_snippet, big_diff, snippet, span, process_last_snippet);\n     }\n \n     fn write_snippet_inner<F>(\n@@ -220,19 +156,6 @@ impl<'a> FmtVisitor<'a> {\n         let file_name = &char_pos.file.name;\n         let mut status = SnippetStatus::new(char_pos.line);\n \n-        fn replace_chars<'a>(string: &'a str) -> Cow<'a, str> {\n-            if string.contains(char::is_whitespace) {\n-                Cow::from(\n-                    string\n-                        .chars()\n-                        .map(|ch| if ch.is_whitespace() { ch } else { 'X' })\n-                        .collect::<String>(),\n-                )\n-            } else {\n-                Cow::from(string)\n-            }\n-        }\n-\n         let snippet = &*match self.config.write_mode() {\n             WriteMode::Coverage => replace_chars(old_snippet),\n             _ => Cow::from(old_snippet),\n@@ -241,98 +164,148 @@ impl<'a> FmtVisitor<'a> {\n         for (kind, offset, subslice) in CommentCodeSlices::new(snippet) {\n             debug!(\"{:?}: {:?}\", kind, subslice);\n \n-            if let CodeCharKind::Comment = kind {\n-                if self.process_comment(\n+            let newline_count = count_newlines(subslice);\n+            let within_file_lines_range = self.config.file_lines().intersects_range(\n+                file_name,\n+                status.cur_line,\n+                status.cur_line + newline_count,\n+            );\n+\n+            if CodeCharKind::Comment == kind && within_file_lines_range {\n+                // 1: comment.\n+                self.process_comment(\n                     &mut status,\n                     snippet,\n-                    big_snippet,\n+                    &big_snippet[..(offset + big_diff)],\n                     offset,\n-                    big_diff,\n                     subslice,\n-                    file_name,\n-                ) {\n-                    continue;\n-                }\n-            }\n-\n-            let newline_count = count_newlines(&subslice);\n-            if subslice.trim().is_empty() && newline_count > 0\n-                && self.config.file_lines().intersects_range(\n-                    file_name,\n-                    status.cur_line,\n-                    status.cur_line + newline_count,\n-                ) {\n+                );\n+            } else if subslice.trim().is_empty() && newline_count > 0 && within_file_lines_range {\n+                // 2: blank lines.\n                 self.push_vertical_spaces(newline_count);\n                 status.cur_line += newline_count;\n-                status.rewrite_next_comment = true;\n                 status.line_start = offset + newline_count;\n             } else {\n-                for (mut i, c) in subslice.char_indices() {\n-                    i += offset;\n-\n-                    if c == '\\n' {\n-                        if !self.config\n-                            .file_lines()\n-                            .contains_line(file_name, status.cur_line)\n-                        {\n-                            status.last_wspace = None;\n-                        }\n-\n-                        if let Some(lw) = status.last_wspace {\n-                            self.push_str(&snippet[status.line_start..lw]);\n-                            self.push_str(\"\\n\");\n-                        } else {\n-                            self.push_str(&snippet[status.line_start..i + 1]);\n-                        }\n-\n-                        status.cur_line += 1;\n-                        status.line_start = i + 1;\n-                        status.last_wspace = None;\n-                        status.rewrite_next_comment = true;\n-                    } else if c.is_whitespace() {\n-                        if status.last_wspace.is_none() {\n-                            status.last_wspace = Some(i);\n-                        }\n-                    } else if c == ';' {\n-                        if status.last_wspace.is_some() {\n-                            status.line_start = i;\n-                        }\n-\n-                        status.rewrite_next_comment = true;\n-                        status.last_wspace = None;\n-                    } else {\n-                        status.rewrite_next_comment = true;\n-                        status.last_wspace = None;\n-                    }\n-                }\n-\n-                let remaining = snippet[status.line_start..subslice.len() + offset].trim();\n-                if !remaining.is_empty() {\n-                    self.push_str(remaining);\n-                    status.line_start = subslice.len() + offset;\n-                    status.rewrite_next_comment = true;\n-                }\n+                // 3: code which we failed to format or which is not within file-lines range.\n+                self.process_missing_code(&mut status, snippet, subslice, offset, file_name);\n             }\n         }\n \n         process_last_snippet(self, &snippet[status.line_start..], snippet);\n     }\n-}\n \n-struct SnippetStatus {\n-    line_start: usize,\n-    last_wspace: Option<usize>,\n-    rewrite_next_comment: bool,\n-    cur_line: usize,\n-}\n+    fn process_comment(\n+        &mut self,\n+        status: &mut SnippetStatus,\n+        snippet: &str,\n+        big_snippet: &str,\n+        offset: usize,\n+        subslice: &str,\n+    ) {\n+        let last_char = big_snippet\n+            .chars()\n+            .rev()\n+            .skip_while(|rev_c| [' ', '\\t'].contains(rev_c))\n+            .next();\n \n-impl SnippetStatus {\n-    fn new(cur_line: usize) -> Self {\n-        SnippetStatus {\n-            line_start: 0,\n-            last_wspace: None,\n-            rewrite_next_comment: true,\n-            cur_line,\n+        let fix_indent = last_char.map_or(true, |rev_c| ['{', '\\n'].contains(&rev_c));\n+\n+        if fix_indent {\n+            if let Some('{') = last_char {\n+                self.push_str(\"\\n\");\n+            }\n+            let indent_str = self.block_indent.to_string(self.config);\n+            self.push_str(&indent_str);\n+        } else {\n+            self.push_str(\" \");\n+        }\n+\n+        let comment_width = ::std::cmp::min(\n+            self.config.comment_width(),\n+            self.config.max_width() - self.block_indent.width(),\n+        );\n+        let comment_indent = Indent::from_width(self.config, last_line_width(&self.buffer));\n+        let comment_shape = Shape::legacy(comment_width, comment_indent);\n+        let comment_str = rewrite_comment(subslice, false, comment_shape, self.config)\n+            .unwrap_or_else(|| String::from(subslice));\n+        self.push_str(&comment_str);\n+\n+        status.last_wspace = None;\n+        status.line_start = offset + subslice.len();\n+\n+        if let Some('/') = subslice.chars().nth(1) {\n+            // check that there are no contained block comments\n+            if !subslice\n+                .split('\\n')\n+                .map(|s| s.trim_left())\n+                .any(|s| s.len() >= 2 && &s[0..2] == \"/*\")\n+            {\n+                // Add a newline after line comments\n+                self.push_str(\"\\n\");\n+            }\n+        } else if status.line_start <= snippet.len() {\n+            // For other comments add a newline if there isn't one at the end already\n+            match snippet[status.line_start..].chars().next() {\n+                Some('\\n') | Some('\\r') => (),\n+                _ => self.push_str(\"\\n\"),\n+            }\n         }\n+\n+        status.cur_line += count_newlines(subslice);\n     }\n+\n+    fn process_missing_code(\n+        &mut self,\n+        status: &mut SnippetStatus,\n+        snippet: &str,\n+        subslice: &str,\n+        offset: usize,\n+        file_name: &str,\n+    ) {\n+        for (mut i, c) in subslice.char_indices() {\n+            i += offset;\n+\n+            if c == '\\n' {\n+                let skip_this_line = !self.config\n+                    .file_lines()\n+                    .contains_line(file_name, status.cur_line);\n+                if skip_this_line {\n+                    status.last_wspace = None;\n+                }\n+\n+                if let Some(lw) = status.last_wspace {\n+                    self.push_str(&snippet[status.line_start..lw]);\n+                    self.push_str(\"\\n\");\n+                    status.last_wspace = None;\n+                } else {\n+                    self.push_str(&snippet[status.line_start..i + 1]);\n+                }\n+\n+                status.cur_line += 1;\n+                status.line_start = i + 1;\n+            } else if c.is_whitespace() && status.last_wspace.is_none() {\n+                status.last_wspace = Some(i);\n+            } else if c == ';' && status.last_wspace.is_some() {\n+                status.line_start = i;\n+                status.last_wspace = None;\n+            } else {\n+                status.last_wspace = None;\n+            }\n+        }\n+\n+        let remaining = snippet[status.line_start..subslice.len() + offset].trim();\n+        if !remaining.is_empty() {\n+            self.push_str(remaining);\n+            status.line_start = subslice.len() + offset;\n+        }\n+    }\n+}\n+\n+fn replace_chars(string: &str) -> Cow<str> {\n+    Cow::from(\n+        string\n+            .chars()\n+            .map(|ch| if ch.is_whitespace() { ch } else { 'X' })\n+            .collect::<String>(),\n+    )\n }"}, {"sha": "73ee80dac851370d49c5c69abb92b9b7359be8b0", "filename": "src/summary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsummary.rs?ref=4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "patch": "@@ -1,5 +1,5 @@\n #[must_use]\n-#[derive(Debug, Default, Clone)]\n+#[derive(Debug, Default, Clone, Copy)]\n pub struct Summary {\n     // Encountered e.g. an IO error.\n     has_operational_errors: bool,"}, {"sha": "8f6cab0e2dfe9d1ca172566c94abfe450a62dd95", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee7911f4bfb08cfa569454bbaaf81b9c454375a/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=4ee7911f4bfb08cfa569454bbaaf81b9c454375a", "patch": "@@ -166,7 +166,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     self.last_pos,\n                     attr_lo.unwrap_or(first_stmt.span.lo()),\n                 ));\n-                let len = CommentCodeSlices::new(&snippet)\n+                let len = CommentCodeSlices::new(snippet)\n                     .nth(0)\n                     .and_then(|(kind, _, s)| {\n                         if kind == CodeCharKind::Normal {\n@@ -212,7 +212,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     stmt.span.hi(),\n                     source!(self, b.span).hi() - brace_compensation,\n                 ));\n-                let len = CommentCodeSlices::new(&snippet)\n+                let len = CommentCodeSlices::new(snippet)\n                     .last()\n                     .and_then(|(kind, _, s)| {\n                         if kind == CodeCharKind::Normal && s.trim().is_empty() {\n@@ -430,7 +430,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             }\n             ast::ItemKind::MacroDef(..) => {\n                 // FIXME(#1539): macros 2.0\n-                let mac_snippet = Some(remove_trailing_white_spaces(&self.snippet(item.span)));\n+                let mac_snippet = Some(remove_trailing_white_spaces(self.snippet(item.span)));\n                 self.push_rewrite(item.span, mac_snippet);\n             }\n         }\n@@ -684,9 +684,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         // Extract leading `use ...;`.\n         let items: Vec<_> = stmts\n             .iter()\n-            .take_while(|stmt| to_stmt_item(stmt).is_some())\n+            .take_while(|stmt| to_stmt_item(stmt).map_or(false, is_use_item))\n             .filter_map(|stmt| to_stmt_item(stmt))\n-            .take_while(|item| is_use_item(item))\n             .collect();\n \n         if items.is_empty() {\n@@ -779,7 +778,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             use_block: false,\n             is_if_else_block: false,\n             force_one_line_chain: false,\n-            snippet_provider: &self.snippet_provider,\n+            snippet_provider: self.snippet_provider,\n         }\n     }\n }\n@@ -888,7 +887,7 @@ where\n             // Extract comments between two attributes.\n             let span_between_attr = mk_sp(attr.span.hi(), next_attr.span.lo());\n             let snippet = context.snippet(span_between_attr);\n-            if count_newlines(&snippet) >= 2 || snippet.contains('/') {\n+            if count_newlines(snippet) >= 2 || snippet.contains('/') {\n                 break;\n             }\n         }\n@@ -974,7 +973,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n             // Preserve an empty line before/after doc comments.\n             if self[0].is_sugared_doc || self[first_group_len].is_sugared_doc {\n                 let snippet = context.snippet(missing_span);\n-                let (mla, mlb) = has_newlines_before_after_comment(&snippet);\n+                let (mla, mlb) = has_newlines_before_after_comment(snippet);\n                 let comment = ::comment::recover_missing_comment_in_span(\n                     missing_span,\n                     shape.with_max_width(context.config),\n@@ -1068,7 +1067,7 @@ fn get_derive_args<'a>(context: &'a RewriteContext, attr: &ast::Attribute) -> Op\n pub fn rewrite_extern_crate(context: &RewriteContext, item: &ast::Item) -> Option<String> {\n     assert!(is_extern_crate(item));\n     let new_str = context.snippet(item.span);\n-    Some(if contains_comment(&new_str) {\n+    Some(if contains_comment(new_str) {\n         new_str.to_owned()\n     } else {\n         let no_whitespace = &new_str.split_whitespace().collect::<Vec<&str>>().join(\" \");"}]}