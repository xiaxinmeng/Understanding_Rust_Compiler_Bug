{"sha": "173b8567ee7055de80debec1067d441a9909345b", "node_id": "C_kwDOAAsO6NoAKDE3M2I4NTY3ZWU3MDU1ZGU4MGRlYmVjMTA2N2Q0NDFhOTkwOTM0NWI", "commit": {"author": {"name": "Alex Chi", "email": "iskyzh@gmail.com", "date": "2023-03-18T03:21:01Z"}, "committer": {"name": "Alex Chi", "email": "iskyzh@gmail.com", "date": "2023-04-14T15:39:35Z"}, "message": "use param instead of ty\n\nSigned-off-by: Alex Chi <iskyzh@gmail.com>", "tree": {"sha": "de94d1683ecbae2b3bd2c1d7c4dcfffc0ab8a11d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de94d1683ecbae2b3bd2c1d7c4dcfffc0ab8a11d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/173b8567ee7055de80debec1067d441a9909345b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/173b8567ee7055de80debec1067d441a9909345b", "html_url": "https://github.com/rust-lang/rust/commit/173b8567ee7055de80debec1067d441a9909345b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/173b8567ee7055de80debec1067d441a9909345b/comments", "author": {"login": "skyzh", "id": 4198311, "node_id": "MDQ6VXNlcjQxOTgzMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4198311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skyzh", "html_url": "https://github.com/skyzh", "followers_url": "https://api.github.com/users/skyzh/followers", "following_url": "https://api.github.com/users/skyzh/following{/other_user}", "gists_url": "https://api.github.com/users/skyzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/skyzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skyzh/subscriptions", "organizations_url": "https://api.github.com/users/skyzh/orgs", "repos_url": "https://api.github.com/users/skyzh/repos", "events_url": "https://api.github.com/users/skyzh/events{/privacy}", "received_events_url": "https://api.github.com/users/skyzh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "skyzh", "id": 4198311, "node_id": "MDQ6VXNlcjQxOTgzMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4198311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skyzh", "html_url": "https://github.com/skyzh", "followers_url": "https://api.github.com/users/skyzh/followers", "following_url": "https://api.github.com/users/skyzh/following{/other_user}", "gists_url": "https://api.github.com/users/skyzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/skyzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skyzh/subscriptions", "organizations_url": "https://api.github.com/users/skyzh/orgs", "repos_url": "https://api.github.com/users/skyzh/repos", "events_url": "https://api.github.com/users/skyzh/events{/privacy}", "received_events_url": "https://api.github.com/users/skyzh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54c11a688f38a979e789fa50592088654ed56680", "url": "https://api.github.com/repos/rust-lang/rust/commits/54c11a688f38a979e789fa50592088654ed56680", "html_url": "https://github.com/rust-lang/rust/commit/54c11a688f38a979e789fa50592088654ed56680"}], "stats": {"total": 138, "additions": 63, "deletions": 75}, "files": [{"sha": "473ce3d635de08b912696d62f824ebf9c154f32b", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/173b8567ee7055de80debec1067d441a9909345b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173b8567ee7055de80debec1067d441a9909345b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=173b8567ee7055de80debec1067d441a9909345b", "patch": "@@ -547,7 +547,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         diag: &mut Diagnostic,\n     ) {\n         // 0. Extract fn_decl from hir\n-        let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(hir::Closure { fn_decl, .. }), .. }) = hir else { return; };\n+        let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(hir::Closure { body, fn_decl, .. }), .. }) = hir else { return; };\n+        let hir::Body { params, .. } = self.tcx.hir().body(*body);\n \n         // 1. Get the substs of the closure.\n         // 2. Assume exp_found is FnOnce / FnMut / Fn, we can extract function parameters from [1].\n@@ -565,7 +566,10 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             let mut is_first = true;\n             let mut has_suggestion = false;\n \n-            for ((expected, found), arg_hir) in expected.iter().zip(found.iter()).zip(fn_decl.inputs.iter()) {\n+            for (((expected, found), param_hir), arg_hir) in expected.iter()\n+                .zip(found.iter())\n+                .zip(params.iter())\n+                .zip(fn_decl.inputs.iter()) {\n                 if is_first {\n                     is_first = false;\n                 } else {\n@@ -579,11 +583,19 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     let hir::TyKind::Infer = arg_hir.kind {\n                     // If the expected region is late bound, the found region is not, and users are asking compiler\n                     // to infer the type, we can suggest adding `: &_`.\n-                    let Ok(arg) = self.tcx.sess.source_map().span_to_snippet(arg_hir.span) else { return; };\n-                    suggestion += &format!(\"{}: &_\", arg);\n+                    if param_hir.pat.span == param_hir.ty_span {\n+                        // for `|x|`, `|_|`, `|x: impl Foo|`\n+                        let Ok(pat) = self.tcx.sess.source_map().span_to_snippet(param_hir.pat.span) else { return; };\n+                        suggestion += &format!(\"{}: &_\", pat);\n+                    } else {\n+                        // for `|x: ty|`, `|_: ty|`\n+                        let Ok(pat) = self.tcx.sess.source_map().span_to_snippet(param_hir.pat.span) else { return; };\n+                        let Ok(ty) = self.tcx.sess.source_map().span_to_snippet(param_hir.ty_span) else { return; };\n+                        suggestion += &format!(\"{}: &{}\", pat, ty);\n+                    }\n                     has_suggestion = true;\n                 } else {\n-                    let Ok(arg) = self.tcx.sess.source_map().span_to_snippet(arg_hir.span) else { return; };\n+                    let Ok(arg) = self.tcx.sess.source_map().span_to_snippet(param_hir.span) else { return; };\n                     // Otherwise, keep it as-is.\n                     suggestion += &arg;\n                 }"}, {"sha": "58d8be8b65f78822428412150801cca9cb682e20", "filename": "tests/ui/lifetimes/issue-105675.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/173b8567ee7055de80debec1067d441a9909345b/tests%2Fui%2Flifetimes%2Fissue-105675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173b8567ee7055de80debec1067d441a9909345b/tests%2Fui%2Flifetimes%2Fissue-105675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-105675.rs?ref=173b8567ee7055de80debec1067d441a9909345b", "patch": "@@ -1,13 +1,11 @@\n-fn thing(x: impl FnOnce(&u32, &u32)) {}\n+fn thing(x: impl FnOnce(&u32, &u32, u32)) {}\n \n fn main() {\n-    let f = |_, _| ();\n+    let f = | _ , y: &u32 , z | ();\n     thing(f);\n     //~^ ERROR mismatched types\n     //~^^ ERROR mismatched types\n-    //~^^^ ERROR implementation of `FnOnce` is not general enough\n-    //~^^^^ ERROR implementation of `FnOnce` is not general enough\n-    let f = |x, y| ();\n+    let f = | x, y: _  , z: u32 | ();\n     thing(f);\n     //~^ ERROR mismatched types\n     //~^^ ERROR mismatched types"}, {"sha": "66415f72bcb453537a5a19fba75edfcee58666e6", "filename": "tests/ui/lifetimes/issue-105675.stderr", "status": "modified", "additions": 41, "deletions": 63, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/173b8567ee7055de80debec1067d441a9909345b/tests%2Fui%2Flifetimes%2Fissue-105675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/173b8567ee7055de80debec1067d441a9909345b/tests%2Fui%2Flifetimes%2Fissue-105675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-105675.stderr?ref=173b8567ee7055de80debec1067d441a9909345b", "patch": "@@ -4,128 +4,106 @@ error[E0308]: mismatched types\n LL |     thing(f);\n    |     ^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'a, 'b> FnOnce<(&'a u32, &'b u32)>`\n-              found trait `FnOnce<(&u32, &u32)>`\n+   = note: expected trait `for<'a, 'b> FnOnce<(&'a u32, &'b u32, u32)>`\n+              found trait `for<'a> FnOnce<(&u32, &'a u32, u32)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-105675.rs:4:13\n    |\n-LL |     let f = |_, _| ();\n-   |             ^^^^^^\n+LL |     let f = | _ , y: &u32 , z | ();\n+   |             ^^^^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n   --> $DIR/issue-105675.rs:1:18\n    |\n-LL | fn thing(x: impl FnOnce(&u32, &u32)) {}\n-   |                  ^^^^^^^^^^^^^^^^^^\n+LL | fn thing(x: impl FnOnce(&u32, &u32, u32)) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider specifying the type of the closure parameters\n    |\n-LL |     let f = |_: &_, _: &_| ();\n-   |             ~~~~~~~~~~~~~~\n+LL |     let f = |_: &_, y: &u32, z| ();\n+   |             ~~~~~~~~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/issue-105675.rs:5:5\n    |\n LL |     thing(f);\n    |     ^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'a, 'b> FnOnce<(&'a u32, &'b u32)>`\n-              found trait `FnOnce<(&u32, &u32)>`\n+   = note: expected trait `for<'a, 'b> FnOnce<(&'a u32, &'b u32, u32)>`\n+              found trait `for<'a> FnOnce<(&u32, &'a u32, u32)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-105675.rs:4:13\n    |\n-LL |     let f = |_, _| ();\n-   |             ^^^^^^\n+LL |     let f = | _ , y: &u32 , z | ();\n+   |             ^^^^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n   --> $DIR/issue-105675.rs:1:18\n    |\n-LL | fn thing(x: impl FnOnce(&u32, &u32)) {}\n-   |                  ^^^^^^^^^^^^^^^^^^\n-help: consider specifying the type of the closure parameters\n-   |\n-LL |     let f = |_: &_, _: &_| ();\n-   |             ~~~~~~~~~~~~~~\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-105675.rs:5:5\n-   |\n-LL |     thing(f);\n-   |     ^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 u32, &u32)` must implement `FnOnce<(&'1 u32, &u32)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 u32, &u32)>`, for some specific lifetime `'2`\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-105675.rs:5:5\n-   |\n-LL |     thing(f);\n-   |     ^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&u32, &'2 u32)` must implement `FnOnce<(&u32, &'1 u32)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&u32, &'2 u32)>`, for some specific lifetime `'2`\n+LL | fn thing(x: impl FnOnce(&u32, &u32, u32)) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-105675.rs:11:5\n+  --> $DIR/issue-105675.rs:9:5\n    |\n LL |     thing(f);\n    |     ^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'a, 'b> FnOnce<(&'a u32, &'b u32)>`\n-              found trait `FnOnce<(&u32, &u32)>`\n+   = note: expected trait `for<'a, 'b> FnOnce<(&'a u32, &'b u32, u32)>`\n+              found trait `FnOnce<(&u32, &u32, u32)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-105675.rs:10:13\n+  --> $DIR/issue-105675.rs:8:13\n    |\n-LL |     let f = |x, y| ();\n-   |             ^^^^^^\n+LL |     let f = | x, y: _  , z: u32 | ();\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n   --> $DIR/issue-105675.rs:1:18\n    |\n-LL | fn thing(x: impl FnOnce(&u32, &u32)) {}\n-   |                  ^^^^^^^^^^^^^^^^^^\n+LL | fn thing(x: impl FnOnce(&u32, &u32, u32)) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider specifying the type of the closure parameters\n    |\n-LL |     let f = |x: &_, y: &_| ();\n-   |             ~~~~~~~~~~~~~~\n+LL |     let f = |x: &_, y: &_, z: u32| ();\n+   |             ~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-105675.rs:11:5\n+  --> $DIR/issue-105675.rs:9:5\n    |\n LL |     thing(f);\n    |     ^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'a, 'b> FnOnce<(&'a u32, &'b u32)>`\n-              found trait `FnOnce<(&u32, &u32)>`\n+   = note: expected trait `for<'a, 'b> FnOnce<(&'a u32, &'b u32, u32)>`\n+              found trait `FnOnce<(&u32, &u32, u32)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-105675.rs:10:13\n+  --> $DIR/issue-105675.rs:8:13\n    |\n-LL |     let f = |x, y| ();\n-   |             ^^^^^^\n+LL |     let f = | x, y: _  , z: u32 | ();\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n   --> $DIR/issue-105675.rs:1:18\n    |\n-LL | fn thing(x: impl FnOnce(&u32, &u32)) {}\n-   |                  ^^^^^^^^^^^^^^^^^^\n+LL | fn thing(x: impl FnOnce(&u32, &u32, u32)) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider specifying the type of the closure parameters\n    |\n-LL |     let f = |x: &_, y: &_| ();\n-   |             ~~~~~~~~~~~~~~\n+LL |     let f = |x: &_, y: &_, z: u32| ();\n+   |             ~~~~~~~~~~~~~~~~~~~~~~\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-105675.rs:11:5\n+  --> $DIR/issue-105675.rs:9:5\n    |\n LL |     thing(f);\n    |     ^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: closure with signature `fn(&'2 u32, &u32)` must implement `FnOnce<(&'1 u32, &u32)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 u32, &u32)>`, for some specific lifetime `'2`\n+   = note: closure with signature `fn(&'2 u32, &u32, u32)` must implement `FnOnce<(&'1 u32, &u32, u32)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 u32, &u32, u32)>`, for some specific lifetime `'2`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-105675.rs:11:5\n+  --> $DIR/issue-105675.rs:9:5\n    |\n LL |     thing(f);\n    |     ^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: closure with signature `fn(&u32, &'2 u32)` must implement `FnOnce<(&u32, &'1 u32)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&u32, &'2 u32)>`, for some specific lifetime `'2`\n+   = note: closure with signature `fn(&u32, &'2 u32, u32)` must implement `FnOnce<(&u32, &'1 u32, u32)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&u32, &'2 u32, u32)>`, for some specific lifetime `'2`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "75fd87b3fe9b3090df12bbb72908efdba24ef1ef", "filename": "tests/ui/lifetimes/issue-79187-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/173b8567ee7055de80debec1067d441a9909345b/tests%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/173b8567ee7055de80debec1067d441a9909345b/tests%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-79187-2.stderr?ref=173b8567ee7055de80debec1067d441a9909345b", "patch": "@@ -43,9 +43,9 @@ note: the lifetime requirement is introduced here\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^\n-help: consider changing the type of the closure parameters\n+help: consider specifying the type of the closure parameters\n    |\n-LL |     take_foo(|_: &_| a);\n+LL |     take_foo(|a: &_| a);\n    |              ~~~~~~~\n \n error[E0308]: mismatched types"}]}