{"sha": "69bded2493c964cb1d5cce4f708d221e242aff41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YmRlZDI0OTNjOTY0Y2IxZDVjY2U0ZjcwOGQyMjFlMjQyYWZmNDE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-24T19:22:25Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-26T20:28:33Z"}, "message": "Add union justifications to conflicting borrows.\n\nThis commit adds justifications to error messages for conflicting\nborrows of union fields.\n\nWhere previously an error message would say\n``cannot borrow `u.b` as mutable..``, it now says\n``cannot borrow `u` (via `u.b`) as mutable..``.", "tree": {"sha": "a455e7e165379bd1c17ef07e5480e0d92ed3d643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a455e7e165379bd1c17ef07e5480e0d92ed3d643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69bded2493c964cb1d5cce4f708d221e242aff41", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlwj5HEACgkQAXYLT59T\n8VTp6RAApb+A9Cj+ooPONB/j425rmCD+8hEo/iTNo2CyiL8/87tEBUTrIH+rEetL\nuSEhinlIrz9bdS5WEXPHRyUazKdyc9wRSy8y7bMOPEJyb98s6sRxNf2o9kNouYsJ\nrwh7a+ZmeglKjnsYwKxqMAMQE1rRmj7huh8PE0vhoK45D+KLjLU95m/dfkEnhUrn\nBFz7mBhkGPrrHJOMY7I8pJyvgx7m7UdAPZG+1YsFIqsRQj5c87EpLDo+X9BHVAiy\nfsw5Fhz2ws8E+E8fp1uAmOpUE8pNHMrf0FdRvOxK4zoaPPE9FJxoKz6RwwKGAxGb\nqgnGTLDUaRdsD+9NkSKXCsdh//s0tEZGHM3NpjALNjlhkLhjiGN/WHHGnD1zOpR9\niRYQB5I6t5UJyQp0l0P/JeVXG2BPhjPviASK28M4bchVCyQOCU7nnHYC93bQ5Q6V\nPmlfh/BdCrkUCOLswuUQ1Ed7KNU3LQ7ncur6hpOaShAyMbhA6AePm6BVPik4/W0l\nWjRYqGTI4vqrSNkwYGUMfTd7/YFOL52WbnQ6HK2MwcGiDPPowEPmmCr6Yt7OZMiw\nUjJwwFjD5U5HoyG8ca18x86O5/tSq/774CaNg25dGjSP1It40zdbRr4L0cg5Y8Md\n/wJ/MMHcZoj3xj0hjePAcCJjCmcUea6aQ0jOEZQR00lJf+jWIAs=\n=b12T\n-----END PGP SIGNATURE-----", "payload": "tree a455e7e165379bd1c17ef07e5480e0d92ed3d643\nparent 79d8a0fcefa5134db2a94739b1d18daa01fc6e9f\nauthor David Wood <david@davidtw.co> 1545679345 +0100\ncommitter David Wood <david@davidtw.co> 1545856113 +0100\n\nAdd union justifications to conflicting borrows.\n\nThis commit adds justifications to error messages for conflicting\nborrows of union fields.\n\nWhere previously an error message would say\n``cannot borrow `u.b` as mutable..``, it now says\n``cannot borrow `u` (via `u.b`) as mutable..``.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69bded2493c964cb1d5cce4f708d221e242aff41", "html_url": "https://github.com/rust-lang/rust/commit/69bded2493c964cb1d5cce4f708d221e242aff41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69bded2493c964cb1d5cce4f708d221e242aff41/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d8a0fcefa5134db2a94739b1d18daa01fc6e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f", "html_url": "https://github.com/rust-lang/rust/commit/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f"}], "stats": {"total": 268, "additions": 141, "deletions": 127}, "files": [{"sha": "6f12ff994c4b2976c36723b434c730fb5877b1fe", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 48, "deletions": 10, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=69bded2493c964cb1d5cce4f708d221e242aff41", "patch": "@@ -329,10 +329,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             \"closure\"\n         };\n \n-        let desc_place = self.describe_place(place).unwrap_or_else(|| \"_\".to_owned());\n-        let tcx = self.infcx.tcx;\n-\n-        let first_borrow_desc;\n+        let (desc_place, msg_place, msg_borrow) = if issued_borrow.borrowed_place == *place {\n+            let desc_place = self.describe_place(place).unwrap_or_else(|| \"_\".to_owned());\n+            (desc_place, \"\".to_string(), \"\".to_string())\n+        } else {\n+            let (desc_place, msg_place) = self.describe_place_for_conflicting_borrow(place);\n+            let (_, msg_borrow) = self.describe_place_for_conflicting_borrow(\n+                &issued_borrow.borrowed_place\n+            );\n+            (desc_place, msg_place, msg_borrow)\n+        };\n \n         let explanation = self.explain_why_borrow_contains_point(context, issued_borrow, None);\n         let second_borrow_desc = if explanation.is_explained() {\n@@ -342,6 +348,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         };\n \n         // FIXME: supply non-\"\" `opt_via` when appropriate\n+        let tcx = self.infcx.tcx;\n+        let first_borrow_desc;\n         let mut err = match (\n             gen_borrow_kind,\n             \"immutable\",\n@@ -355,12 +363,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 tcx.cannot_reborrow_already_borrowed(\n                     span,\n                     &desc_place,\n-                    \"\",\n+                    &msg_place,\n                     lft,\n                     issued_span,\n                     \"it\",\n                     rgt,\n-                    \"\",\n+                    &msg_borrow,\n                     None,\n                     Origin::Mir,\n                 )\n@@ -370,12 +378,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 tcx.cannot_reborrow_already_borrowed(\n                     span,\n                     &desc_place,\n-                    \"\",\n+                    &msg_place,\n                     lft,\n                     issued_span,\n                     \"it\",\n                     rgt,\n-                    \"\",\n+                    &msg_borrow,\n                     None,\n                     Origin::Mir,\n                 )\n@@ -386,9 +394,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 tcx.cannot_mutably_borrow_multiply(\n                     span,\n                     &desc_place,\n-                    \"\",\n+                    &msg_place,\n                     issued_span,\n-                    \"\",\n+                    &msg_borrow,\n                     None,\n                     Origin::Mir,\n                 )\n@@ -518,6 +526,36 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err.buffer(&mut self.errors_buffer);\n     }\n \n+    /// Returns a description of a place and an associated message for the purposes of conflicting\n+    /// borrow diagnostics.\n+    ///\n+    /// If the borrow is of the field `b` of a union `u`, then the return value will be\n+    /// `(\"u\", \" (via \\`u.b\\`)\")`. Otherwise, for some variable `a`, the return value will be\n+    /// `(\"a\", \"\")`.\n+    pub(super) fn describe_place_for_conflicting_borrow(\n+        &self,\n+        place: &Place<'tcx>,\n+    ) -> (String, String) {\n+        place.base_local()\n+            .filter(|local| {\n+                // Filter out non-unions.\n+                self.mir.local_decls[*local].ty\n+                    .ty_adt_def()\n+                    .map(|adt| adt.is_union())\n+                    .unwrap_or(false)\n+            })\n+            .and_then(|local| {\n+                let desc_base = self.describe_place(&Place::Local(local))\n+                    .unwrap_or_else(|| \"_\".to_owned());\n+                let desc_original = self.describe_place(place)\n+                    .unwrap_or_else(|| \"_\".to_owned());\n+                return Some((desc_base, format!(\" (via `{}`)\", desc_original)));\n+            })\n+            .unwrap_or_else(|| {\n+                (self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()), \"\".to_string())\n+            })\n+    }\n+\n     /// Reports StorageDeadOrDrop of `place` conflicts with `borrow`.\n     ///\n     /// This means that some data referenced by `borrow` needs to live"}, {"sha": "ef5dcef04b074ce8bb15b5170c13850c1904f8a3", "filename": "src/test/ui/borrowck/borrowck-union-borrow.nll.stderr", "status": "renamed", "additions": 34, "deletions": 45, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.nll.stderr?ref=69bded2493c964cb1d5cce4f708d221e242aff41", "patch": "@@ -1,132 +1,121 @@\n error[E0502]: cannot borrow `u.a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-union-borrow.rs:27:23\n+  --> $DIR/borrowck-union-borrow.rs:25:23\n    |\n LL |             let ra = &u.a;\n    |                      ---- immutable borrow occurs here\n-LL |             let rma = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n+LL |             let rma = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n    |                       ^^^^^^^^ mutable borrow occurs here\n-LL |                                 //[mir]~^ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n LL |             drop(ra);\n    |                  -- immutable borrow later used here\n \n error[E0506]: cannot assign to `u.a` because it is borrowed\n-  --> $DIR/borrowck-union-borrow.rs:33:13\n+  --> $DIR/borrowck-union-borrow.rs:30:13\n    |\n LL |             let ra = &u.a;\n    |                      ---- borrow of `u.a` occurs here\n-LL |             u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n+LL |             u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n    |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n-LL |                      //[mir]~^ ERROR cannot assign to `u.a` because it is borrowed\n LL |             drop(ra);\n    |                  -- borrow later used here\n \n-error[E0502]: cannot borrow `u.b` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-union-borrow.rs:50:23\n+error[E0502]: cannot borrow `u` (via `u.b`) as mutable because it is also borrowed as immutable (via `u.a`)\n+  --> $DIR/borrowck-union-borrow.rs:46:23\n    |\n LL |             let ra = &u.a;\n-   |                      ---- immutable borrow occurs here\n-LL |             let rmb = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n-   |                       ^^^^^^^^ mutable borrow occurs here\n-LL |                                 //[mir]~^ ERROR cannot borrow `u.b` as mutable because it is also borrowed as immutable\n+   |                      ---- immutable borrow occurs here (via `u.a`)\n+LL |             let rmb = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n+   |                       ^^^^^^^^ mutable borrow occurs here (via `u.b`)\n LL |             drop(ra);\n    |                  -- immutable borrow later used here\n \n error[E0506]: cannot assign to `u.b` because it is borrowed\n-  --> $DIR/borrowck-union-borrow.rs:56:13\n+  --> $DIR/borrowck-union-borrow.rs:51:13\n    |\n LL |             let ra = &u.a;\n    |                      ---- borrow of `u.b` occurs here\n-LL |             u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n+LL |             u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n-LL |                      //[mir]~^ ERROR cannot assign to `u.b` because it is borrowed\n LL |             drop(ra);\n    |                  -- borrow later used here\n \n error[E0502]: cannot borrow `u.a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-union-borrow.rs:63:22\n+  --> $DIR/borrowck-union-borrow.rs:57:22\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- mutable borrow occurs here\n-LL |             let ra = &u.a; //[ast]~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n+LL |             let ra = &u.a; //~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n    |                      ^^^^ immutable borrow occurs here\n-LL |                          //[mir]~^ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n LL |             drop(rma);\n    |                  --- mutable borrow later used here\n \n error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-union-borrow.rs:69:21\n+  --> $DIR/borrowck-union-borrow.rs:62:21\n    |\n LL |             let ra = &mut u.a;\n    |                      -------- borrow of `u.a` occurs here\n-LL |             let a = u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |             let a = u.a; //~ ERROR cannot use `u.a` because it was mutably borrowed\n    |                     ^^^ use of borrowed `u.a`\n-LL |                          //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed\n LL |             drop(ra);\n    |                  -- borrow later used here\n \n error[E0499]: cannot borrow `u.a` as mutable more than once at a time\n-  --> $DIR/borrowck-union-borrow.rs:75:24\n+  --> $DIR/borrowck-union-borrow.rs:67:24\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- first mutable borrow occurs here\n-LL |             let rma2 = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable more than once at a time\n+LL |             let rma2 = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable more than once at a time\n    |                        ^^^^^^^^ second mutable borrow occurs here\n-LL |                                  //[mir]~^ ERROR cannot borrow `u.a` as mutable more than once at a time\n LL |             drop(rma);\n    |                  --- first borrow later used here\n \n error[E0506]: cannot assign to `u.a` because it is borrowed\n-  --> $DIR/borrowck-union-borrow.rs:81:13\n+  --> $DIR/borrowck-union-borrow.rs:72:13\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- borrow of `u.a` occurs here\n-LL |             u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n+LL |             u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n    |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n-LL |                      //[mir]~^ ERROR cannot assign to `u.a` because it is borrowed\n LL |             drop(rma);\n    |                  --- borrow later used here\n \n-error[E0502]: cannot borrow `u.b` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-union-borrow.rs:88:22\n+error[E0502]: cannot borrow `u` (via `u.b`) as immutable because it is also borrowed as mutable (via `u.a`)\n+  --> $DIR/borrowck-union-borrow.rs:78:22\n    |\n LL |             let rma = &mut u.a;\n-   |                       -------- mutable borrow occurs here\n-LL |             let rb = &u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n-   |                      ^^^^ immutable borrow occurs here\n-LL |                            //[mir]~^ ERROR cannot borrow `u.b` as immutable because it is also borrowed as mutable\n+   |                       -------- mutable borrow occurs here (via `u.a`)\n+LL |             let rb = &u.b; //~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n+   |                      ^^^^ immutable borrow occurs here (via `u.b`)\n LL |             drop(rma);\n    |                  --- mutable borrow later used here\n \n error[E0503]: cannot use `u.b` because it was mutably borrowed\n-  --> $DIR/borrowck-union-borrow.rs:94:21\n+  --> $DIR/borrowck-union-borrow.rs:83:21\n    |\n LL |             let ra = &mut u.a;\n    |                      -------- borrow of `u.a` occurs here\n-LL |             let b = u.b; //[ast]~ ERROR cannot use `u.b` because it was mutably borrowed\n+LL |             let b = u.b; //~ ERROR cannot use `u.b` because it was mutably borrowed\n    |                     ^^^ use of borrowed `u.a`\n-...\n+LL | \n LL |             drop(ra);\n    |                  -- borrow later used here\n \n-error[E0499]: cannot borrow `u.b` as mutable more than once at a time\n-  --> $DIR/borrowck-union-borrow.rs:101:24\n+error[E0499]: cannot borrow `u` (via `u.b`) as mutable more than once at a time\n+  --> $DIR/borrowck-union-borrow.rs:89:24\n    |\n LL |             let rma = &mut u.a;\n-   |                       -------- first mutable borrow occurs here\n-LL |             let rmb2 = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n-   |                        ^^^^^^^^ second mutable borrow occurs here\n-LL |                                  //[mir]~^ ERROR cannot borrow `u.b` as mutable more than once at a time\n+   |                       -------- first mutable borrow occurs here (via `u.a`)\n+LL |             let rmb2 = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n+   |                        ^^^^^^^^ second mutable borrow occurs here (via `u.b`)\n LL |             drop(rma);\n    |                  --- first borrow later used here\n \n error[E0506]: cannot assign to `u.b` because it is borrowed\n-  --> $DIR/borrowck-union-borrow.rs:107:13\n+  --> $DIR/borrowck-union-borrow.rs:94:13\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- borrow of `u.b` occurs here\n-LL |             u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n+LL |             u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n-LL |                      //[mir]~^ ERROR cannot assign to `u.b` because it is borrowed\n LL |             drop(rma);\n    |                  --- borrow later used here\n ", "previous_filename": "src/test/ui/borrowck/borrowck-union-borrow.ast.nll.stderr"}, {"sha": "8afc0be8b55c523800d0fc0cd3000a1f6cb71a74", "filename": "src/test/ui/borrowck/borrowck-union-borrow.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.rs?ref=69bded2493c964cb1d5cce4f708d221e242aff41", "patch": "@@ -1,6 +1,4 @@\n // ignore-tidy-linelength\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n \n #[derive(Clone, Copy)]\n union U {\n@@ -24,14 +22,12 @@ fn main() {\n         }\n         {\n             let ra = &u.a;\n-            let rma = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n-                                //[mir]~^ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n+            let rma = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n             drop(ra);\n         }\n         {\n             let ra = &u.a;\n-            u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n-                     //[mir]~^ ERROR cannot assign to `u.a` because it is borrowed\n+            u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n             drop(ra);\n         }\n         // Imm borrow, other field\n@@ -47,65 +43,55 @@ fn main() {\n         }\n         {\n             let ra = &u.a;\n-            let rmb = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n-                                //[mir]~^ ERROR cannot borrow `u.b` as mutable because it is also borrowed as immutable\n+            let rmb = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n             drop(ra);\n         }\n         {\n             let ra = &u.a;\n-            u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n-                     //[mir]~^ ERROR cannot assign to `u.b` because it is borrowed\n+            u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n             drop(ra);\n         }\n         // Mut borrow, same field\n         {\n             let rma = &mut u.a;\n-            let ra = &u.a; //[ast]~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n-                         //[mir]~^ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n+            let ra = &u.a; //~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n             drop(rma);\n         }\n         {\n             let ra = &mut u.a;\n-            let a = u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n-                         //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed\n+            let a = u.a; //~ ERROR cannot use `u.a` because it was mutably borrowed\n             drop(ra);\n         }\n         {\n             let rma = &mut u.a;\n-            let rma2 = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable more than once at a time\n-                                 //[mir]~^ ERROR cannot borrow `u.a` as mutable more than once at a time\n+            let rma2 = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable more than once at a time\n             drop(rma);\n         }\n         {\n             let rma = &mut u.a;\n-            u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n-                     //[mir]~^ ERROR cannot assign to `u.a` because it is borrowed\n+            u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n             drop(rma);\n         }\n         // Mut borrow, other field\n         {\n             let rma = &mut u.a;\n-            let rb = &u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n-                           //[mir]~^ ERROR cannot borrow `u.b` as immutable because it is also borrowed as mutable\n+            let rb = &u.b; //~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n             drop(rma);\n         }\n         {\n             let ra = &mut u.a;\n-            let b = u.b; //[ast]~ ERROR cannot use `u.b` because it was mutably borrowed\n-                         //[mir]~^ ERROR cannot use `u.b` because it was mutably borrowed\n+            let b = u.b; //~ ERROR cannot use `u.b` because it was mutably borrowed\n \n             drop(ra);\n         }\n         {\n             let rma = &mut u.a;\n-            let rmb2 = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n-                                 //[mir]~^ ERROR cannot borrow `u.b` as mutable more than once at a time\n+            let rmb2 = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n             drop(rma);\n         }\n         {\n             let rma = &mut u.a;\n-            u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n-                     //[mir]~^ ERROR cannot assign to `u.b` because it is borrowed\n+            u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n             drop(rma);\n         }\n     }"}, {"sha": "f9010d3bf08c4d4e2daec45fcaa1c9e1efda8889", "filename": "src/test/ui/borrowck/borrowck-union-borrow.stderr", "status": "renamed", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr?ref=69bded2493c964cb1d5cce4f708d221e242aff41", "patch": "@@ -1,115 +1,115 @@\n error[E0502]: cannot borrow `u.a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-union-borrow.rs:27:28\n+  --> $DIR/borrowck-union-borrow.rs:25:28\n    |\n LL |             let ra = &u.a;\n    |                       --- immutable borrow occurs here\n-LL |             let rma = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n+LL |             let rma = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n    |                            ^^^ mutable borrow occurs here\n-...\n+LL |             drop(ra);\n LL |         }\n    |         - immutable borrow ends here\n \n error[E0506]: cannot assign to `u.a` because it is borrowed\n-  --> $DIR/borrowck-union-borrow.rs:33:13\n+  --> $DIR/borrowck-union-borrow.rs:30:13\n    |\n LL |             let ra = &u.a;\n    |                       --- borrow of `u.a` occurs here\n-LL |             u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n+LL |             u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n    |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n \n error[E0502]: cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n-  --> $DIR/borrowck-union-borrow.rs:50:28\n+  --> $DIR/borrowck-union-borrow.rs:46:28\n    |\n LL |             let ra = &u.a;\n    |                       --- immutable borrow occurs here (via `u.a`)\n-LL |             let rmb = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n+LL |             let rmb = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n    |                            ^^^ mutable borrow occurs here (via `u.b`)\n-...\n+LL |             drop(ra);\n LL |         }\n    |         - immutable borrow ends here\n \n error[E0506]: cannot assign to `u.b` because it is borrowed\n-  --> $DIR/borrowck-union-borrow.rs:56:13\n+  --> $DIR/borrowck-union-borrow.rs:51:13\n    |\n LL |             let ra = &u.a;\n    |                       --- borrow of `u.b` occurs here\n-LL |             u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n+LL |             u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n \n error[E0502]: cannot borrow `u.a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-union-borrow.rs:63:23\n+  --> $DIR/borrowck-union-borrow.rs:57:23\n    |\n LL |             let rma = &mut u.a;\n    |                            --- mutable borrow occurs here\n-LL |             let ra = &u.a; //[ast]~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n+LL |             let ra = &u.a; //~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n    |                       ^^^ immutable borrow occurs here\n-...\n+LL |             drop(rma);\n LL |         }\n    |         - mutable borrow ends here\n \n error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-union-borrow.rs:69:17\n+  --> $DIR/borrowck-union-borrow.rs:62:17\n    |\n LL |             let ra = &mut u.a;\n    |                           --- borrow of `u.a` occurs here\n-LL |             let a = u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |             let a = u.a; //~ ERROR cannot use `u.a` because it was mutably borrowed\n    |                 ^ use of borrowed `u.a`\n \n error[E0499]: cannot borrow `u.a` as mutable more than once at a time\n-  --> $DIR/borrowck-union-borrow.rs:75:29\n+  --> $DIR/borrowck-union-borrow.rs:67:29\n    |\n LL |             let rma = &mut u.a;\n    |                            --- first mutable borrow occurs here\n-LL |             let rma2 = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable more than once at a time\n+LL |             let rma2 = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable more than once at a time\n    |                             ^^^ second mutable borrow occurs here\n-...\n+LL |             drop(rma);\n LL |         }\n    |         - first borrow ends here\n \n error[E0506]: cannot assign to `u.a` because it is borrowed\n-  --> $DIR/borrowck-union-borrow.rs:81:13\n+  --> $DIR/borrowck-union-borrow.rs:72:13\n    |\n LL |             let rma = &mut u.a;\n    |                            --- borrow of `u.a` occurs here\n-LL |             u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n+LL |             u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n    |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n \n error[E0502]: cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n-  --> $DIR/borrowck-union-borrow.rs:88:23\n+  --> $DIR/borrowck-union-borrow.rs:78:23\n    |\n LL |             let rma = &mut u.a;\n    |                            --- mutable borrow occurs here (via `u.a`)\n-LL |             let rb = &u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n+LL |             let rb = &u.b; //~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n    |                       ^^^ immutable borrow occurs here (via `u.b`)\n-...\n+LL |             drop(rma);\n LL |         }\n    |         - mutable borrow ends here\n \n error[E0503]: cannot use `u.b` because it was mutably borrowed\n-  --> $DIR/borrowck-union-borrow.rs:94:17\n+  --> $DIR/borrowck-union-borrow.rs:83:17\n    |\n LL |             let ra = &mut u.a;\n    |                           --- borrow of `u.a` occurs here\n-LL |             let b = u.b; //[ast]~ ERROR cannot use `u.b` because it was mutably borrowed\n+LL |             let b = u.b; //~ ERROR cannot use `u.b` because it was mutably borrowed\n    |                 ^ use of borrowed `u.a`\n \n error[E0499]: cannot borrow `u` (via `u.b`) as mutable more than once at a time\n-  --> $DIR/borrowck-union-borrow.rs:101:29\n+  --> $DIR/borrowck-union-borrow.rs:89:29\n    |\n LL |             let rma = &mut u.a;\n    |                            --- first mutable borrow occurs here (via `u.a`)\n-LL |             let rmb2 = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n+LL |             let rmb2 = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n    |                             ^^^ second mutable borrow occurs here (via `u.b`)\n-...\n+LL |             drop(rma);\n LL |         }\n    |         - first borrow ends here\n \n error[E0506]: cannot assign to `u.b` because it is borrowed\n-  --> $DIR/borrowck-union-borrow.rs:107:13\n+  --> $DIR/borrowck-union-borrow.rs:94:13\n    |\n LL |             let rma = &mut u.a;\n    |                            --- borrow of `u.b` occurs here\n-LL |             u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n+LL |             u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n \n error: aborting due to 12 previous errors", "previous_filename": "src/test/ui/borrowck/borrowck-union-borrow.ast.stderr"}, {"sha": "22ea254a769e842d64dc1a690031127a43267dbe", "filename": "src/test/ui/issues/issue-45157.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Ftest%2Fui%2Fissues%2Fissue-45157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Ftest%2Fui%2Fissues%2Fissue-45157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45157.rs?ref=69bded2493c964cb1d5cce4f708d221e242aff41", "patch": "@@ -1,6 +1,8 @@\n #![allow(unused)]\n #![feature(nll)]\n \n+// ignore-tidy-linelength\n+\n #[derive(Clone, Copy, Default)]\n struct S {\n     a: u8,\n@@ -25,8 +27,7 @@ fn main() {\n         *mref = 22;\n \n         let nref = &u.z.c;\n-        //~^ ERROR cannot borrow `u.z.c` as immutable because it is also borrowed as mutable [E0502]\n+        //~^ ERROR cannot borrow `u` (via `u.z.c`) as immutable because it is also borrowed as mutable (via `u.s.a`) [E0502]\n         println!(\"{} {}\", mref, nref)\n     }\n }\n-"}, {"sha": "eadbd608699be73565d01b0885b2c01478ecb199", "filename": "src/test/ui/issues/issue-45157.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Ftest%2Fui%2Fissues%2Fissue-45157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Ftest%2Fui%2Fissues%2Fissue-45157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45157.stderr?ref=69bded2493c964cb1d5cce4f708d221e242aff41", "patch": "@@ -1,12 +1,12 @@\n-error[E0502]: cannot borrow `u.z.c` as immutable because it is also borrowed as mutable\n-  --> $DIR/issue-45157.rs:27:20\n+error[E0502]: cannot borrow `u` (via `u.z.c`) as immutable because it is also borrowed as mutable (via `u.s.a`)\n+  --> $DIR/issue-45157.rs:29:20\n    |\n LL |         let mref = &mut u.s.a;\n-   |                    ---------- mutable borrow occurs here\n+   |                    ---------- mutable borrow occurs here (via `u.s.a`)\n ...\n LL |         let nref = &u.z.c;\n-   |                    ^^^^^^ immutable borrow occurs here\n-LL |         //~^ ERROR cannot borrow `u.z.c` as immutable because it is also borrowed as mutable [E0502]\n+   |                    ^^^^^^ immutable borrow occurs here (via `u.z.c`)\n+LL |         //~^ ERROR cannot borrow `u` (via `u.z.c`) as immutable because it is also borrowed as mutable (via `u.s.a`) [E0502]\n LL |         println!(\"{} {}\", mref, nref)\n    |                           ---- mutable borrow later used here\n "}, {"sha": "4bf3b6286aa724735555ef6aa34c14bfebdf2d9e", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69bded2493c964cb1d5cce4f708d221e242aff41/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr?ref=69bded2493c964cb1d5cce4f708d221e242aff41", "patch": "@@ -1,10 +1,10 @@\n-error[E0502]: cannot borrow `u.y` as immutable because it is also borrowed as mutable\n+error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0`)\n   --> $DIR/union-borrow-move-parent-sibling.rs:15:13\n    |\n LL |     let a = &mut u.x.0;\n-   |             ---------- mutable borrow occurs here\n+   |             ---------- mutable borrow occurs here (via `u.x.0`)\n LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n-   |             ^^^^ immutable borrow occurs here\n+   |             ^^^^ immutable borrow occurs here (via `u.y`)\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n \n@@ -18,13 +18,13 @@ LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n-error[E0502]: cannot borrow `u.y` as immutable because it is also borrowed as mutable\n+error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0.0`)\n   --> $DIR/union-borrow-move-parent-sibling.rs:28:13\n    |\n LL |     let a = &mut (u.x.0).0;\n-   |             -------------- mutable borrow occurs here\n+   |             -------------- mutable borrow occurs here (via `u.x.0.0`)\n LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n-   |             ^^^^ immutable borrow occurs here\n+   |             ^^^^ immutable borrow occurs here (via `u.y`)\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n \n@@ -38,13 +38,13 @@ LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n-error[E0502]: cannot borrow `u.x` as immutable because it is also borrowed as mutable\n+error[E0502]: cannot borrow `u` (via `u.x`) as immutable because it is also borrowed as mutable (via `*u.y`)\n   --> $DIR/union-borrow-move-parent-sibling.rs:41:13\n    |\n LL |     let a = &mut *u.y;\n-   |             --------- mutable borrow occurs here\n+   |             --------- mutable borrow occurs here (via `*u.y`)\n LL |     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n-   |             ^^^^ immutable borrow occurs here\n+   |             ^^^^ immutable borrow occurs here (via `u.x`)\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n "}]}