{"sha": "bdc9508bb6e227979045c5ba3937151635a32ec0", "node_id": "C_kwDOAAsO6NoAKGJkYzk1MDhiYjZlMjI3OTc5MDQ1YzViYTM5MzcxNTE2MzVhMzJlYzA", "commit": {"author": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2022-02-09T05:34:27Z"}, "committer": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2022-02-10T01:21:39Z"}, "message": "kmc-solid: Fix wait queue manipulation errors in the `Condvar` implementation", "tree": {"sha": "67087b9a331cd372a2b8c62ab0acc5fb6857aa9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67087b9a331cd372a2b8c62ab0acc5fb6857aa9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdc9508bb6e227979045c5ba3937151635a32ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc9508bb6e227979045c5ba3937151635a32ec0", "html_url": "https://github.com/rust-lang/rust/commit/bdc9508bb6e227979045c5ba3937151635a32ec0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdc9508bb6e227979045c5ba3937151635a32ec0/comments", "author": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a5a961be97f405e751dd2cf966e1cdb80a612c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5a961be97f405e751dd2cf966e1cdb80a612c2", "html_url": "https://github.com/rust-lang/rust/commit/9a5a961be97f405e751dd2cf966e1cdb80a612c2"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "84b0f4c866ab2b1453ca6d82126d54c36b67ac14", "filename": "library/std/src/sys/itron/condvar.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bdc9508bb6e227979045c5ba3937151635a32ec0/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc9508bb6e227979045c5ba3937151635a32ec0/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs?ref=bdc9508bb6e227979045c5ba3937151635a32ec0", "patch": "@@ -15,10 +15,12 @@ unsafe impl Sync for Condvar {}\n pub type MovableCondvar = Condvar;\n \n impl Condvar {\n+    #[inline]\n     pub const fn new() -> Condvar {\n         Condvar { waiters: SpinMutex::new(waiter_queue::WaiterQueue::new()) }\n     }\n \n+    #[inline]\n     pub unsafe fn init(&mut self) {}\n \n     pub unsafe fn notify_one(&self) {\n@@ -206,14 +208,16 @@ mod waiter_queue {\n \n                     if let Some(mut insert_after) = insert_after {\n                         // Insert `waiter` after `insert_after`\n-                        let insert_before = insert_after.as_ref().prev;\n+                        let insert_before = insert_after.as_ref().next;\n \n                         waiter.prev = Some(insert_after);\n                         insert_after.as_mut().next = Some(waiter_ptr);\n \n                         waiter.next = insert_before;\n                         if let Some(mut insert_before) = insert_before {\n                             insert_before.as_mut().prev = Some(waiter_ptr);\n+                        } else {\n+                            head.last = waiter_ptr;\n                         }\n                     } else {\n                         // Insert `waiter` to the front\n@@ -240,11 +244,11 @@ mod waiter_queue {\n                     match (waiter.prev, waiter.next) {\n                         (Some(mut prev), Some(mut next)) => {\n                             prev.as_mut().next = Some(next);\n-                            next.as_mut().next = Some(prev);\n+                            next.as_mut().prev = Some(prev);\n                         }\n                         (None, Some(mut next)) => {\n                             head.first = next;\n-                            next.as_mut().next = None;\n+                            next.as_mut().prev = None;\n                         }\n                         (Some(mut prev), None) => {\n                             prev.as_mut().next = None;\n@@ -271,6 +275,7 @@ mod waiter_queue {\n             unsafe { waiter.as_ref().task != 0 }\n         }\n \n+        #[inline]\n         pub fn pop_front(&mut self) -> Option<abi::ID> {\n             unsafe {\n                 let head = self.head.as_mut()?;"}]}