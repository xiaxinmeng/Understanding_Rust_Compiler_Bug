{"sha": "9ad20442e8af42815fde41c03188764ac516cf18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZDIwNDQyZThhZjQyODE1ZmRlNDFjMDMxODg3NjRhYzUxNmNmMTg=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-11-28T10:38:27Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-03T07:30:19Z"}, "message": "Start enabling empty types in pattern matching.\n\nRemove the assumption at the start of is_useful that any suitably-long array of\nwildcard patterns is useful relative the any empty vector. Instead we just\ncontinue to recurse column-wise over the matrix.\n\nThis assumption is false in the presence of empty types.\neg. in the simplest case:\n\nlet x: ! = ...;\nmatch x {\n    // This pattern should not be considered useful by the algorithm\n    _   => ...\n}", "tree": {"sha": "0b42ea4f4bd4b5783f2ff5cc051b5fc1fcfcc77a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b42ea4f4bd4b5783f2ff5cc051b5fc1fcfcc77a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ad20442e8af42815fde41c03188764ac516cf18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad20442e8af42815fde41c03188764ac516cf18", "html_url": "https://github.com/rust-lang/rust/commit/9ad20442e8af42815fde41c03188764ac516cf18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ad20442e8af42815fde41c03188764ac516cf18/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1659d65e0323707646854d6993da31690f855f0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1659d65e0323707646854d6993da31690f855f0e", "html_url": "https://github.com/rust-lang/rust/commit/1659d65e0323707646854d6993da31690f855f0e"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "e18945446572c566850f868942afa84730571982", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9ad20442e8af42815fde41c03188764ac516cf18/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad20442e8af42815fde41c03188764ac516cf18/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=9ad20442e8af42815fde41c03188764ac516cf18", "patch": "@@ -510,19 +510,24 @@ pub fn is_useful<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                            -> Usefulness<'tcx> {\n     let &Matrix(ref rows) = matrix;\n     debug!(\"is_useful({:?}, {:?})\", matrix, v);\n-    if rows.is_empty() {\n-        return match witness {\n-            ConstructWitness => UsefulWithWitness(vec![Witness(\n-                repeat(cx.wild_pattern).take(v.len()).cloned().collect()\n-            )]),\n-            LeaveOutWitness => Useful\n-        };\n-    }\n-    if rows[0].is_empty() {\n-        return NotUseful;\n-    }\n \n-    let &Matrix(ref rows) = matrix;\n+    // The base case. We are pattern-matching on () and the return value is\n+    // based on whether our matrix has a row or not.\n+    // NOTE: This could potentially be optimized by checking rows.is_empty()\n+    // first and then, if v is non-empty, the return value is based on whether\n+    // the type of the tuple we're checking is inhabited or not.\n+    if v.is_empty() {\n+        return if rows.is_empty() {\n+            match witness {\n+                ConstructWitness => UsefulWithWitness(vec![Witness(vec![])]),\n+                LeaveOutWitness => Useful,\n+            }\n+        }\n+        else {\n+            NotUseful\n+        }\n+    };\n+\n     assert!(rows.iter().all(|r| r.len() == v.len()));\n \n "}]}