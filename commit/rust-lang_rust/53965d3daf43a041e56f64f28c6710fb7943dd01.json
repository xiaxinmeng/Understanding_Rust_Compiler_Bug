{"sha": "53965d3daf43a041e56f64f28c6710fb7943dd01", "node_id": "C_kwDOAAsO6NoAKDUzOTY1ZDNkYWY0M2EwNDFlNTZmNjRmMjhjNjcxMGZiNzk0M2RkMDE", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2022-02-06T22:03:55Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2022-05-02T19:33:01Z"}, "message": "add build metrics, to gather ci stats from x.py\n\nThis tool will generate a JSON file with statistics about each\nindividual step to disk. It will be used in rust-lang/rust's CI to\nreplace the mix of scripts and log scraping we currently have to gather\nthis data.", "tree": {"sha": "ba9432a82d2d215de2adfc49cd8250555085742a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba9432a82d2d215de2adfc49cd8250555085742a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53965d3daf43a041e56f64f28c6710fb7943dd01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAmJwMe0ACgkQPgar6Auq\n8ZwWeQ/+NPN0Mk1/QC7rFzxwo0hNiWFUkKxhYryjN1TxmVCoFylqDEGNiJtq7h57\n+Ju2+4EiyNqAD3v5GFeoNqWmmr+UnbtYFaNSKnYyEvtF+CD/8P/TfL6V3QLdZ0Li\naHbFcoTBuH5E2aUs607MryBxnuGbYyjYeDrVOgXQYsKaFbGRaHbKCMFAr0igPZ7a\ndBFcR/GXA01Kjor3t7+c7l6FkikOFewanoHmQilWE5DvsU1UugU5SrJFxB+FLvPb\nP2w5w6Mvl+DqWz4khpurBcAuOp80x8U2npU/U2cgUO8ml2/CRaPi4tulXR7o955t\nzeKITFcJ0trviwJvti33AeJId2qSX8uNfkCdwulPP1LNtTts5wGmvL8+iFP3nCRq\ngE8b5c/HLAg7moY1NSSNUq1PxnGitkqlrhilxEKW8CU0HV1Q+z41riEf1ZzMcdgL\nifqF1jVO2HZIEVe9178duGj+ykYU8xMZL3vyzlVbiAkDwdY9Eu67QhlaVhdNZaEF\nXzgOZM8ewxLG4NBaJ333L7u5AaWYUd5Hgy5sAGgIDhN86xhyG1IChAhOfnE2rCkR\nIUveU9A1lgz0f/FiwGCR8sLHvDfZLXBA80LUOiWBd7GzuJrDnks5NxFgcZNobn2n\nXXiz2hhyuvXt19Nz8Rp9qV3ArDQRGt5REjX2TG8vd1BoGrv+hc8=\n=rb8X\n-----END PGP SIGNATURE-----", "payload": "tree ba9432a82d2d215de2adfc49cd8250555085742a\nparent f75d884046e07bb26edeaba9b8c982dc97485fd5\nauthor Pietro Albini <pietro@pietroalbini.org> 1644185035 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1651519981 +0200\n\nadd build metrics, to gather ci stats from x.py\n\nThis tool will generate a JSON file with statistics about each\nindividual step to disk. It will be used in rust-lang/rust's CI to\nreplace the mix of scripts and log scraping we currently have to gather\nthis data.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53965d3daf43a041e56f64f28c6710fb7943dd01", "html_url": "https://github.com/rust-lang/rust/commit/53965d3daf43a041e56f64f28c6710fb7943dd01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53965d3daf43a041e56f64f28c6710fb7943dd01/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f75d884046e07bb26edeaba9b8c982dc97485fd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f75d884046e07bb26edeaba9b8c982dc97485fd5", "html_url": "https://github.com/rust-lang/rust/commit/f75d884046e07bb26edeaba9b8c982dc97485fd5"}], "stats": {"total": 258, "additions": 258, "deletions": 0}, "files": [{"sha": "6c46be14e4ee66e0f67347f3895c9b522a815523", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53965d3daf43a041e56f64f28c6710fb7943dd01/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/53965d3daf43a041e56f64f28c6710fb7943dd01/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=53965d3daf43a041e56f64f28c6710fb7943dd01", "patch": "@@ -223,6 +223,7 @@ dependencies = [\n  \"pretty_assertions\",\n  \"serde\",\n  \"serde_json\",\n+ \"sysinfo\",\n  \"tar\",\n  \"toml\",\n  \"winapi\",\n@@ -5057,6 +5058,21 @@ dependencies = [\n  \"unicode-xid\",\n ]\n \n+[[package]]\n+name = \"sysinfo\"\n+version = \"0.23.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3bf915673a340ee41f2fc24ad1286c75ea92026f04b65a0d0e5132d80b95fc61\"\n+dependencies = [\n+ \"cfg-if 1.0.0\",\n+ \"core-foundation-sys\",\n+ \"libc\",\n+ \"ntapi\",\n+ \"once_cell\",\n+ \"rayon\",\n+ \"winapi\",\n+]\n+\n [[package]]\n name = \"tar\"\n version = \"0.4.37\""}, {"sha": "bfeea3f2cfda70d7136891b109cdfaec5c132510", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53965d3daf43a041e56f64f28c6710fb7943dd01/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/53965d3daf43a041e56f64f28c6710fb7943dd01/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=53965d3daf43a041e56f64f28c6710fb7943dd01", "patch": "@@ -328,6 +328,12 @@ changelog-seen = 2\n # a Nix toolchain on non-NixOS distributions.\n #patch-binaries-for-nix = false\n \n+# Collect information and statistics about the current build and writes it to\n+# disk. Enabling this or not has no impact on the resulting build output. The\n+# schema of the file generated by the build metrics feature is unstable, and\n+# this is not intended to be used during local development.\n+#metrics = false\n+\n # =============================================================================\n # General install configuration options\n # ============================================================================="}, {"sha": "d4c6f927df084202ef5c110fe8b1ad427a0efffb", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53965d3daf43a041e56f64f28c6710fb7943dd01/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/53965d3daf43a041e56f64f28c6710fb7943dd01/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=53965d3daf43a041e56f64f28c6710fb7943dd01", "patch": "@@ -49,6 +49,9 @@ opener = \"0.5\"\n once_cell = \"1.7.2\"\n xz2 = \"0.1\"\n \n+# Dependencies needed by the build-metrics feature\n+sysinfo = { version = \"0.23.0\", optional = true }\n+\n [target.'cfg(windows)'.dependencies.winapi]\n version = \"0.3\"\n features = [\n@@ -64,3 +67,6 @@ features = [\n \n [dev-dependencies]\n pretty_assertions = \"0.7\"\n+\n+[features]\n+build-metrics = [\"sysinfo\"]"}, {"sha": "7403b61033186b33054c2388e89b30e4da06e7e8", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53965d3daf43a041e56f64f28c6710fb7943dd01/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/53965d3daf43a041e56f64f28c6710fb7943dd01/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=53965d3daf43a041e56f64f28c6710fb7943dd01", "patch": "@@ -896,6 +896,9 @@ def build_bootstrap(self):\n             args.append(\"--locked\")\n         if self.use_vendored_sources:\n             args.append(\"--frozen\")\n+        if self.get_toml(\"metrics\", \"build\"):\n+            args.append(\"--features\")\n+            args.append(\"build-metrics\")\n         run(args, env=env, verbose=self.verbose)\n \n     def build_triple(self):"}, {"sha": "b7b3761b4399499692539304d2e253431b2faf47", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53965d3daf43a041e56f64f28c6710fb7943dd01/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53965d3daf43a041e56f64f28c6710fb7943dd01/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=53965d3daf43a041e56f64f28c6710fb7943dd01", "patch": "@@ -1757,6 +1757,9 @@ impl<'a> Builder<'a> {\n             stack.push(Box::new(step.clone()));\n         }\n \n+        #[cfg(feature = \"build-metrics\")]\n+        self.metrics.enter_step(&step);\n+\n         let (out, dur) = {\n             let start = Instant::now();\n             let zero = Duration::new(0, 0);\n@@ -1780,6 +1783,9 @@ impl<'a> Builder<'a> {\n             );\n         }\n \n+        #[cfg(feature = \"build-metrics\")]\n+        self.metrics.exit_step();\n+\n         {\n             let mut stack = self.stack.borrow_mut();\n             let cur_step = stack.pop().expect(\"step stack empty\");"}, {"sha": "bf46f664de16a00036b22e6a33eec9990e3c04f9", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53965d3daf43a041e56f64f28c6710fb7943dd01/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53965d3daf43a041e56f64f28c6710fb7943dd01/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=53965d3daf43a041e56f64f28c6710fb7943dd01", "patch": "@@ -544,6 +544,7 @@ define_config! {\n         dist_stage: Option<u32> = \"dist-stage\",\n         bench_stage: Option<u32> = \"bench-stage\",\n         patch_binaries_for_nix: Option<bool> = \"patch-binaries-for-nix\",\n+        metrics: Option<bool> = \"metrics\",\n     }\n }\n "}, {"sha": "4c76b5e78ddd22c4365b54cbf1fbe5167d6f6a4c", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53965d3daf43a041e56f64f28c6710fb7943dd01/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53965d3daf43a041e56f64f28c6710fb7943dd01/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=53965d3daf43a041e56f64f28c6710fb7943dd01", "patch": "@@ -149,6 +149,9 @@ mod tool;\n mod toolstate;\n pub mod util;\n \n+#[cfg(feature = \"build-metrics\")]\n+mod metrics;\n+\n #[cfg(windows)]\n mod job;\n \n@@ -311,6 +314,9 @@ pub struct Build {\n     prerelease_version: Cell<Option<u32>>,\n     tool_artifacts:\n         RefCell<HashMap<TargetSelection, HashMap<String, (&'static str, PathBuf, Vec<String>)>>>,\n+\n+    #[cfg(feature = \"build-metrics\")]\n+    metrics: metrics::BuildMetrics,\n }\n \n #[derive(Debug)]\n@@ -500,6 +506,9 @@ impl Build {\n             delayed_failures: RefCell::new(Vec::new()),\n             prerelease_version: Cell::new(None),\n             tool_artifacts: Default::default(),\n+\n+            #[cfg(feature = \"build-metrics\")]\n+            metrics: metrics::BuildMetrics::init(),\n         };\n \n         build.verbose(\"finding compilers\");\n@@ -692,6 +701,9 @@ impl Build {\n             }\n             process::exit(1);\n         }\n+\n+        #[cfg(feature = \"build-metrics\")]\n+        self.metrics.persist(self);\n     }\n \n     /// Clear out `dir` if `input` is newer."}, {"sha": "56a79e99b7c25ec53a9e07e1c21acbc2537da78a", "filename": "src/bootstrap/metrics.rs", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/53965d3daf43a041e56f64f28c6710fb7943dd01/src%2Fbootstrap%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53965d3daf43a041e56f64f28c6710fb7943dd01/src%2Fbootstrap%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetrics.rs?ref=53965d3daf43a041e56f64f28c6710fb7943dd01", "patch": "@@ -0,0 +1,208 @@\n+//! This module is responsible for collecting metrics profiling information for the current build\n+//! and dumping it to disk as JSON, to aid investigations on build and CI performance.\n+//!\n+//! As this module requires additional dependencies not present during local builds, it's cfg'd\n+//! away whenever the `build.metrics` config option is not set to `true`.\n+\n+use crate::builder::Step;\n+use crate::util::t;\n+use crate::Build;\n+use serde::{Deserialize, Serialize};\n+use std::cell::RefCell;\n+use std::fs::File;\n+use std::io::BufWriter;\n+use std::time::{Duration, Instant};\n+use sysinfo::{ProcessorExt, System, SystemExt};\n+\n+pub(crate) struct BuildMetrics {\n+    state: RefCell<MetricsState>,\n+}\n+\n+impl BuildMetrics {\n+    pub(crate) fn init() -> Self {\n+        let state = RefCell::new(MetricsState {\n+            finished_steps: Vec::new(),\n+            running_steps: Vec::new(),\n+\n+            system_info: System::new(),\n+            timer_start: None,\n+            invocation_timer_start: Instant::now(),\n+        });\n+\n+        BuildMetrics { state }\n+    }\n+\n+    pub(crate) fn enter_step<S: Step>(&self, step: &S) {\n+        let mut state = self.state.borrow_mut();\n+\n+        // Consider all the stats gathered so far as the parent's.\n+        if !state.running_steps.is_empty() {\n+            self.collect_stats(&mut *state);\n+        }\n+\n+        state.system_info.refresh_cpu();\n+        state.timer_start = Some(Instant::now());\n+\n+        state.running_steps.push(StepMetrics {\n+            type_: std::any::type_name::<S>().into(),\n+            debug_repr: format!(\"{step:?}\"),\n+\n+            cpu_usage_time_sec: 0.0,\n+            duration_excluding_children_sec: Duration::ZERO,\n+\n+            children: Vec::new(),\n+        });\n+    }\n+\n+    pub(crate) fn exit_step(&self) {\n+        let mut state = self.state.borrow_mut();\n+\n+        self.collect_stats(&mut *state);\n+\n+        let step = state.running_steps.pop().unwrap();\n+        if state.running_steps.is_empty() {\n+            state.finished_steps.push(step);\n+            state.timer_start = None;\n+        } else {\n+            state.running_steps.last_mut().unwrap().children.push(step);\n+\n+            // Start collecting again for the parent step.\n+            state.system_info.refresh_cpu();\n+            state.timer_start = Some(Instant::now());\n+        }\n+    }\n+\n+    fn collect_stats(&self, state: &mut MetricsState) {\n+        let step = state.running_steps.last_mut().unwrap();\n+\n+        let elapsed = state.timer_start.unwrap().elapsed();\n+        step.duration_excluding_children_sec += elapsed;\n+\n+        state.system_info.refresh_cpu();\n+        let cpu = state.system_info.processors().iter().map(|p| p.cpu_usage()).sum::<f32>();\n+        step.cpu_usage_time_sec += cpu as f64 / 100.0 * elapsed.as_secs_f64();\n+    }\n+\n+    pub(crate) fn persist(&self, build: &Build) {\n+        let mut state = self.state.borrow_mut();\n+        assert!(state.running_steps.is_empty(), \"steps are still executing\");\n+\n+        let dest = build.out.join(\"metrics.json\");\n+\n+        let mut system = System::new();\n+        system.refresh_cpu();\n+        system.refresh_memory();\n+\n+        let system_stats = JsonInvocationSystemStats {\n+            cpu_threads_count: system.processors().len(),\n+            cpu_model: system.processors()[0].brand().into(),\n+\n+            memory_total_bytes: system.total_memory() * 1024,\n+        };\n+        let steps = std::mem::take(&mut state.finished_steps);\n+\n+        // Some of our CI builds consist of multiple independent CI invocations. Ensure all the\n+        // previous invocations are still present in the resulting file.\n+        let mut invocations = match std::fs::read(&dest) {\n+            Ok(contents) => t!(serde_json::from_slice::<JsonRoot>(&contents)).invocations,\n+            Err(err) => {\n+                if err.kind() != std::io::ErrorKind::NotFound {\n+                    panic!(\"failed to open existing metrics file at {}: {err}\", dest.display());\n+                }\n+                Vec::new()\n+            }\n+        };\n+        invocations.push(JsonInvocation {\n+            duration_including_children_sec: state.invocation_timer_start.elapsed().as_secs_f64(),\n+            children: steps.into_iter().map(|step| self.prepare_json_step(step)).collect(),\n+        });\n+\n+        let json = JsonRoot { system_stats, invocations };\n+\n+        t!(std::fs::create_dir_all(dest.parent().unwrap()));\n+        let mut file = BufWriter::new(t!(File::create(&dest)));\n+        t!(serde_json::to_writer(&mut file, &json));\n+    }\n+\n+    fn prepare_json_step(&self, step: StepMetrics) -> JsonNode {\n+        JsonNode::RustbuildStep {\n+            type_: step.type_,\n+            debug_repr: step.debug_repr,\n+\n+            duration_excluding_children_sec: step.duration_excluding_children_sec.as_secs_f64(),\n+            system_stats: JsonStepSystemStats {\n+                cpu_utilization_percent: step.cpu_usage_time_sec * 100.0\n+                    / step.duration_excluding_children_sec.as_secs_f64(),\n+            },\n+\n+            children: step\n+                .children\n+                .into_iter()\n+                .map(|child| self.prepare_json_step(child))\n+                .collect(),\n+        }\n+    }\n+}\n+\n+struct MetricsState {\n+    finished_steps: Vec<StepMetrics>,\n+    running_steps: Vec<StepMetrics>,\n+\n+    system_info: System,\n+    timer_start: Option<Instant>,\n+    invocation_timer_start: Instant,\n+}\n+\n+struct StepMetrics {\n+    type_: String,\n+    debug_repr: String,\n+\n+    cpu_usage_time_sec: f64,\n+    duration_excluding_children_sec: Duration,\n+\n+    children: Vec<StepMetrics>,\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+struct JsonRoot {\n+    system_stats: JsonInvocationSystemStats,\n+    invocations: Vec<JsonInvocation>,\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+struct JsonInvocation {\n+    duration_including_children_sec: f64,\n+    children: Vec<JsonNode>,\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(tag = \"kind\", rename_all = \"snake_case\")]\n+enum JsonNode {\n+    RustbuildStep {\n+        #[serde(rename = \"type\")]\n+        type_: String,\n+        debug_repr: String,\n+\n+        duration_excluding_children_sec: f64,\n+        system_stats: JsonStepSystemStats,\n+\n+        children: Vec<JsonNode>,\n+    },\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+struct JsonInvocationSystemStats {\n+    cpu_threads_count: usize,\n+    cpu_model: String,\n+\n+    memory_total_bytes: u64,\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+struct JsonStepSystemStats {\n+    cpu_utilization_percent: f64,\n+}"}]}