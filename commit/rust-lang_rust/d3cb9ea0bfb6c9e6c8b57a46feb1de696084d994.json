{"sha": "d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzY2I5ZWEwYmZiNmM5ZTZjOGI1N2E0NmZlYjFkZTY5NjA4NGQ5OTQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-04-17T20:48:29Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-04-17T22:01:09Z"}, "message": "Fix another crash from wrong binders\n\nBasically, if we had something like `dyn Trait<T>` (where `T` is a type\nparameter) in an impl we lowered that to `dyn Trait<^0.0>`, when it should be\n`dyn Trait<^1.0>` because the `dyn` introduces a new binder. With one type\nparameter, that's just wrong, with two, it'll lead to crashes.", "tree": {"sha": "dec68fc67c90737820b81da02f4f03028d12b43d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dec68fc67c90737820b81da02f4f03028d12b43d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994", "html_url": "https://github.com/rust-lang/rust/commit/d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4cda3efbbabe4c6129de4dc095953fe858d7d3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cda3efbbabe4c6129de4dc095953fe858d7d3f", "html_url": "https://github.com/rust-lang/rust/commit/a4cda3efbbabe4c6129de4dc095953fe858d7d3f"}], "stats": {"total": 119, "additions": 92, "deletions": 27}, "files": [{"sha": "a4b8d66837ccd10c528a6707914d438857b43445", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994", "patch": "@@ -396,12 +396,12 @@ impl Substs {\n     }\n \n     /// Return Substs that replace each parameter by a bound variable.\n-    pub(crate) fn bound_vars(generic_params: &Generics) -> Substs {\n+    pub(crate) fn bound_vars(generic_params: &Generics, debruijn: DebruijnIndex) -> Substs {\n         Substs(\n             generic_params\n                 .iter()\n                 .enumerate()\n-                .map(|(idx, _)| Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, idx)))\n+                .map(|(idx, _)| Ty::Bound(BoundVar::new(debruijn, idx)))\n                 .collect(),\n         )\n     }"}, {"sha": "c2812e1783e64422fa6221699b2f253a4debad49", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 49, "deletions": 20, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994", "patch": "@@ -39,6 +39,7 @@ use crate::{\n pub struct TyLoweringContext<'a> {\n     pub db: &'a dyn HirDatabase,\n     pub resolver: &'a Resolver,\n+    in_binders: DebruijnIndex,\n     /// Note: Conceptually, it's thinkable that we could be in a location where\n     /// some type params should be represented as placeholders, and others\n     /// should be converted to variables. I think in practice, this isn't\n@@ -53,7 +54,27 @@ impl<'a> TyLoweringContext<'a> {\n         let impl_trait_counter = std::cell::Cell::new(0);\n         let impl_trait_mode = ImplTraitLoweringMode::Disallowed;\n         let type_param_mode = TypeParamLoweringMode::Placeholder;\n-        Self { db, resolver, impl_trait_mode, impl_trait_counter, type_param_mode }\n+        let in_binders = DebruijnIndex::INNERMOST;\n+        Self { db, resolver, in_binders, impl_trait_mode, impl_trait_counter, type_param_mode }\n+    }\n+\n+    pub fn with_shifted_in<T>(\n+        &self,\n+        debruijn: DebruijnIndex,\n+        f: impl FnOnce(&TyLoweringContext) -> T,\n+    ) -> T {\n+        let new_ctx = Self {\n+            in_binders: self.in_binders.shifted_in_from(debruijn),\n+            impl_trait_counter: std::cell::Cell::new(self.impl_trait_counter.get()),\n+            ..*self\n+        };\n+        let result = f(&new_ctx);\n+        self.impl_trait_counter.set(new_ctx.impl_trait_counter.get());\n+        result\n+    }\n+\n+    pub fn shifted_in(self, debruijn: DebruijnIndex) -> Self {\n+        Self { in_binders: self.in_binders.shifted_in_from(debruijn), ..self }\n     }\n \n     pub fn with_impl_trait_mode(self, impl_trait_mode: ImplTraitLoweringMode) -> Self {\n@@ -134,22 +155,26 @@ impl Ty {\n             }\n             TypeRef::DynTrait(bounds) => {\n                 let self_ty = Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0));\n-                let predicates = bounds\n-                    .iter()\n-                    .flat_map(|b| GenericPredicate::from_type_bound(ctx, b, self_ty.clone()))\n-                    .collect();\n+                let predicates = ctx.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n+                    bounds\n+                        .iter()\n+                        .flat_map(|b| GenericPredicate::from_type_bound(ctx, b, self_ty.clone()))\n+                        .collect()\n+                });\n                 Ty::Dyn(predicates)\n             }\n             TypeRef::ImplTrait(bounds) => {\n                 match ctx.impl_trait_mode {\n                     ImplTraitLoweringMode::Opaque => {\n                         let self_ty = Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0));\n-                        let predicates = bounds\n-                            .iter()\n-                            .flat_map(|b| {\n-                                GenericPredicate::from_type_bound(ctx, b, self_ty.clone())\n-                            })\n-                            .collect();\n+                        let predicates = ctx.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n+                            bounds\n+                                .iter()\n+                                .flat_map(|b| {\n+                                    GenericPredicate::from_type_bound(ctx, b, self_ty.clone())\n+                                })\n+                                .collect()\n+                        });\n                         Ty::Opaque(predicates)\n                     }\n                     ImplTraitLoweringMode::Param => {\n@@ -180,7 +205,7 @@ impl Ty {\n                                 (0, 0, 0, 0)\n                             };\n                         Ty::Bound(BoundVar::new(\n-                            DebruijnIndex::INNERMOST,\n+                            ctx.in_binders,\n                             idx as usize + parent_params + self_params + list_params,\n                         ))\n                     }\n@@ -293,7 +318,7 @@ impl Ty {\n                     TypeParamLoweringMode::Placeholder => Ty::Placeholder(param_id),\n                     TypeParamLoweringMode::Variable => {\n                         let idx = generics.param_idx(param_id).expect(\"matching generics\");\n-                        Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, idx))\n+                        Ty::Bound(BoundVar::new(ctx.in_binders, idx))\n                     }\n                 }\n             }\n@@ -303,7 +328,9 @@ impl Ty {\n                     TypeParamLoweringMode::Placeholder => {\n                         Substs::type_params_for_generics(&generics)\n                     }\n-                    TypeParamLoweringMode::Variable => Substs::bound_vars(&generics),\n+                    TypeParamLoweringMode::Variable => {\n+                        Substs::bound_vars(&generics, ctx.in_binders)\n+                    }\n                 };\n                 ctx.db.impl_self_ty(impl_id).subst(&substs)\n             }\n@@ -313,7 +340,9 @@ impl Ty {\n                     TypeParamLoweringMode::Placeholder => {\n                         Substs::type_params_for_generics(&generics)\n                     }\n-                    TypeParamLoweringMode::Variable => Substs::bound_vars(&generics),\n+                    TypeParamLoweringMode::Variable => {\n+                        Substs::bound_vars(&generics, ctx.in_binders)\n+                    }\n                 };\n                 ctx.db.ty(adt.into()).subst(&substs)\n             }\n@@ -797,7 +826,7 @@ fn fn_sig_for_fn(db: &dyn HirDatabase, def: FunctionId) -> PolyFnSig {\n /// function body.\n fn type_for_fn(db: &dyn HirDatabase, def: FunctionId) -> Binders<Ty> {\n     let generics = generics(db.upcast(), def.into());\n-    let substs = Substs::bound_vars(&generics);\n+    let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n     Binders::new(substs.len(), Ty::apply(TypeCtor::FnDef(def.into()), substs))\n }\n \n@@ -851,7 +880,7 @@ fn type_for_struct_constructor(db: &dyn HirDatabase, def: StructId) -> Binders<T\n         return type_for_adt(db, def.into());\n     }\n     let generics = generics(db.upcast(), def.into());\n-    let substs = Substs::bound_vars(&generics);\n+    let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n     Binders::new(substs.len(), Ty::apply(TypeCtor::FnDef(def.into()), substs))\n }\n \n@@ -876,13 +905,13 @@ fn type_for_enum_variant_constructor(db: &dyn HirDatabase, def: EnumVariantId) -\n         return type_for_adt(db, def.parent.into());\n     }\n     let generics = generics(db.upcast(), def.parent.into());\n-    let substs = Substs::bound_vars(&generics);\n+    let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n     Binders::new(substs.len(), Ty::apply(TypeCtor::FnDef(def.into()), substs))\n }\n \n fn type_for_adt(db: &dyn HirDatabase, adt: AdtId) -> Binders<Ty> {\n     let generics = generics(db.upcast(), adt.into());\n-    let substs = Substs::bound_vars(&generics);\n+    let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n     Binders::new(substs.len(), Ty::apply(TypeCtor::Adt(adt), substs))\n }\n \n@@ -892,7 +921,7 @@ fn type_for_type_alias(db: &dyn HirDatabase, t: TypeAliasId) -> Binders<Ty> {\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n     let type_ref = &db.type_alias_data(t).type_ref;\n-    let substs = Substs::bound_vars(&generics);\n+    let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n     let inner = Ty::from_hir(&ctx, type_ref.as_ref().unwrap_or(&TypeRef::Error));\n     Binders::new(substs.len(), inner)\n }"}, {"sha": "36f53b264d013cb0dad29bb5d561fa3d1f31aeee", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994", "patch": "@@ -1210,6 +1210,42 @@ fn test(x: dyn Trait<u64>, y: &dyn Trait<u64>) {\n     );\n }\n \n+#[test]\n+fn dyn_trait_in_impl() {\n+    assert_snapshot!(\n+        infer(r#\"\n+trait Trait<T, U> {\n+    fn foo(&self) -> (T, U);\n+}\n+struct S<T, U> {}\n+impl<T, U> S<T, U> {\n+    fn bar(&self) -> &dyn Trait<T, U> { loop {} }\n+}\n+trait Trait2<T, U> {\n+    fn baz(&self) -> (T, U);\n+}\n+impl<T, U> Trait2<T, U> for dyn Trait<T, U> { }\n+\n+fn test(s: S<u32, i32>) {\n+    s.bar().baz();\n+}\n+\"#),\n+        @r###\"\n+    [33; 37) 'self': &Self\n+    [103; 107) 'self': &S<T, U>\n+    [129; 140) '{ loop {} }': &dyn Trait<T, U>\n+    [131; 138) 'loop {}': !\n+    [136; 138) '{}': ()\n+    [176; 180) 'self': &Self\n+    [252; 253) 's': S<u32, i32>\n+    [268; 290) '{     ...z(); }': ()\n+    [274; 275) 's': S<u32, i32>\n+    [274; 281) 's.bar()': &dyn Trait<u32, i32>\n+    [274; 287) 's.bar().baz()': (u32, i32)\n+    \"###\n+    );\n+}\n+\n #[test]\n fn dyn_trait_bare() {\n     assert_snapshot!("}, {"sha": "e00a82db2a895feefb934b60546b31f0778db2fa", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=d3cb9ea0bfb6c9e6c8b57a46feb1de696084d994", "patch": "@@ -17,7 +17,7 @@ use ra_db::{\n use super::{builtin, AssocTyValue, Canonical, ChalkContext, Impl, Obligation};\n use crate::{\n     db::HirDatabase, display::HirDisplay, method_resolution::TyFingerprint, utils::generics,\n-    ApplicationTy, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n+    ApplicationTy, DebruijnIndex, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n };\n \n pub(super) mod tls;\n@@ -815,7 +815,7 @@ pub(crate) fn associated_ty_data_query(\n     // Lower bounds -- we could/should maybe move this to a separate query in `lower`\n     let type_alias_data = db.type_alias_data(type_alias);\n     let generic_params = generics(db.upcast(), type_alias.into());\n-    let bound_vars = Substs::bound_vars(&generic_params);\n+    let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n     let resolver = hir_def::resolver::HasResolver::resolver(type_alias, db.upcast());\n     let ctx = crate::TyLoweringContext::new(db, &resolver)\n         .with_type_param_mode(crate::lower::TypeParamLoweringMode::Variable);\n@@ -849,7 +849,7 @@ pub(crate) fn trait_datum_query(\n     let trait_data = db.trait_data(trait_);\n     debug!(\"trait {:?} = {:?}\", trait_id, trait_data.name);\n     let generic_params = generics(db.upcast(), trait_.into());\n-    let bound_vars = Substs::bound_vars(&generic_params);\n+    let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n     let flags = chalk_rust_ir::TraitFlags {\n         auto: trait_data.auto,\n         upstream: trait_.lookup(db.upcast()).container.module(db.upcast()).krate != krate,\n@@ -888,7 +888,7 @@ pub(crate) fn struct_datum_query(\n         .as_generic_def()\n         .map(|generic_def| {\n             let generic_params = generics(db.upcast(), generic_def);\n-            let bound_vars = Substs::bound_vars(&generic_params);\n+            let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n             convert_where_clauses(db, generic_def, &bound_vars)\n         })\n         .unwrap_or_else(Vec::new);\n@@ -934,7 +934,7 @@ fn impl_def_datum(\n     let impl_data = db.impl_data(impl_id);\n \n     let generic_params = generics(db.upcast(), impl_id.into());\n-    let bound_vars = Substs::bound_vars(&generic_params);\n+    let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n     let trait_ = trait_ref.trait_;\n     let impl_type = if impl_id.lookup(db.upcast()).container.module(db.upcast()).krate == krate {\n         chalk_rust_ir::ImplType::Local"}]}