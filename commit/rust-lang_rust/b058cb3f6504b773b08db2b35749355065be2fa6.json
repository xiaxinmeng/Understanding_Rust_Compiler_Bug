{"sha": "b058cb3f6504b773b08db2b35749355065be2fa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNThjYjNmNjUwNGI3NzNiMDhkYjJiMzU3NDkzNTUwNjViZTJmYTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-09T09:18:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-09T09:18:42Z"}, "message": "Merge #8440\n\n8440: Fix crash on syn involving lifetimes returned by Chalk r=flodiebold a=flodiebold\n\nIf we get lifetime variables back in autoderef, just immediately replace them by static lifetimes for now. Method resolution doesn't really deal correctly with new variables being introduced (this needs to be fixed more properly).\r\n\r\nThis fixes `rust-analyzer analysis-stats --with-deps` crashing in the RA repo.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "664e370487dae360665746ab32986b87e65b22a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/664e370487dae360665746ab32986b87e65b22a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b058cb3f6504b773b08db2b35749355065be2fa6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgcBvyCRBK7hj4Ov3rIwAAdHIIAFUA2gVhoEhVD8vQqUZTruq6\nD6ZJlASBdyBiiTPr1oqyvL1k+ItP3uwS7uMrHIF/aslo+bRtOD8u2IXbh3lFUOfn\n8+spP+ogCT/A/oMJ9KukO1qDAxbv0EwutWUSVpFlOzukBX4pDfaL5qj3iXqUTOH1\nLab/JqPk2xsGvOAI9KdpJgTObvSssTZkTsmNtKWb3c/VKPW2tI3VKbOwmrOvxHpe\njqWFoMDnJwxkBfstkSwuuCiAtcM8N/tXlZfTw8zMpbx5AqOEiSauI5ZzkYTd7vp7\nGgAxHGTK1BqMHVNx12vB9QQB8Bf9FRnzfWwss/hYHOI1p0VbmFiJl7KVPZtXEeE=\n=32K9\n-----END PGP SIGNATURE-----\n", "payload": "tree 664e370487dae360665746ab32986b87e65b22a6\nparent 354151df3556c5e2989746aa01a5aeb620ee9baa\nparent 272a8dce4f603b38e7755bcd2dc8abb6437e6e64\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617959922 +0000\ncommitter GitHub <noreply@github.com> 1617959922 +0000\n\nMerge #8440\n\n8440: Fix crash on syn involving lifetimes returned by Chalk r=flodiebold a=flodiebold\n\nIf we get lifetime variables back in autoderef, just immediately replace them by static lifetimes for now. Method resolution doesn't really deal correctly with new variables being introduced (this needs to be fixed more properly).\r\n\r\nThis fixes `rust-analyzer analysis-stats --with-deps` crashing in the RA repo.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b058cb3f6504b773b08db2b35749355065be2fa6", "html_url": "https://github.com/rust-lang/rust/commit/b058cb3f6504b773b08db2b35749355065be2fa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b058cb3f6504b773b08db2b35749355065be2fa6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "354151df3556c5e2989746aa01a5aeb620ee9baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/354151df3556c5e2989746aa01a5aeb620ee9baa", "html_url": "https://github.com/rust-lang/rust/commit/354151df3556c5e2989746aa01a5aeb620ee9baa"}, {"sha": "272a8dce4f603b38e7755bcd2dc8abb6437e6e64", "url": "https://api.github.com/repos/rust-lang/rust/commits/272a8dce4f603b38e7755bcd2dc8abb6437e6e64", "html_url": "https://github.com/rust-lang/rust/commit/272a8dce4f603b38e7755bcd2dc8abb6437e6e64"}], "stats": {"total": 83, "additions": 77, "deletions": 6}, "files": [{"sha": "71bc436e6f042168b2257b15b942cf856660b003", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b058cb3f6504b773b08db2b35749355065be2fa6/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b058cb3f6504b773b08db2b35749355065be2fa6/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=b058cb3f6504b773b08db2b35749355065be2fa6", "patch": "@@ -6,14 +6,15 @@\n use std::iter::successors;\n \n use base_db::CrateId;\n-use chalk_ir::cast::Cast;\n+use chalk_ir::{cast::Cast, fold::Fold, interner::HasInterner, VariableKind};\n use hir_def::lang_item::LangItemTarget;\n use hir_expand::name::name;\n use log::{info, warn};\n \n use crate::{\n-    db::HirDatabase, AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex,\n-    InEnvironment, Interner, ProjectionTyExt, Solution, Ty, TyBuilder, TyKind,\n+    db::HirDatabase, static_lifetime, AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds,\n+    DebruijnIndex, InEnvironment, Interner, ProjectionTyExt, Solution, Substitution, Ty, TyBuilder,\n+    TyKind,\n };\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n@@ -103,7 +104,7 @@ fn deref_by_trait(\n         binders: CanonicalVarKinds::from_iter(\n             &Interner,\n             ty.goal.binders.iter(&Interner).cloned().chain(Some(chalk_ir::WithKind::new(\n-                chalk_ir::VariableKind::Ty(chalk_ir::TyVariableKind::General),\n+                VariableKind::Ty(chalk_ir::TyVariableKind::General),\n                 chalk_ir::UniverseIndex::ROOT,\n             ))),\n         ),\n@@ -136,19 +137,50 @@ fn deref_by_trait(\n                     return None;\n                 }\n             }\n-            Some(Canonical {\n+            // FIXME: we remove lifetime variables here since they can confuse\n+            // the method resolution code later\n+            Some(fixup_lifetime_variables(Canonical {\n                 value: vars\n                     .value\n                     .subst\n                     .at(&Interner, vars.value.subst.len(&Interner) - 1)\n                     .assert_ty_ref(&Interner)\n                     .clone(),\n                 binders: vars.binders.clone(),\n-            })\n+            }))\n         }\n         Solution::Ambig(_) => {\n             info!(\"Ambiguous solution for derefing {:?}: {:?}\", ty.goal, solution);\n             None\n         }\n     }\n }\n+\n+fn fixup_lifetime_variables<T: Fold<Interner, Result = T> + HasInterner<Interner = Interner>>(\n+    c: Canonical<T>,\n+) -> Canonical<T> {\n+    // Removes lifetime variables from the Canonical, replacing them by static lifetimes.\n+    let mut i = 0;\n+    let subst = Substitution::from_iter(\n+        &Interner,\n+        c.binders.iter(&Interner).map(|vk| match vk.kind {\n+            VariableKind::Ty(_) => {\n+                let index = i;\n+                i += 1;\n+                BoundVar::new(DebruijnIndex::INNERMOST, index).to_ty(&Interner).cast(&Interner)\n+            }\n+            VariableKind::Lifetime => static_lifetime().cast(&Interner),\n+            VariableKind::Const(_) => unimplemented!(),\n+        }),\n+    );\n+    let binders = CanonicalVarKinds::from_iter(\n+        &Interner,\n+        c.binders.iter(&Interner).filter(|vk| match vk.kind {\n+            VariableKind::Ty(_) => true,\n+            VariableKind::Lifetime => false,\n+            VariableKind::Const(_) => true,\n+        }),\n+    );\n+    let value = subst.apply(c.value, &Interner);\n+    Canonical { binders, value }\n+}"}, {"sha": "1b60cb72795b414816a7515a7e6a7abfca85116a", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b058cb3f6504b773b08db2b35749355065be2fa6/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b058cb3f6504b773b08db2b35749355065be2fa6/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=b058cb3f6504b773b08db2b35749355065be2fa6", "patch": "@@ -609,6 +609,7 @@ fn iterate_trait_method_candidates(\n                 }\n             }\n             known_implemented = true;\n+            // FIXME: we shouldn't be ignoring the binders here\n             if callback(&self_ty.value, *item) {\n                 return true;\n             }"}, {"sha": "9cd9f473d74f0bdff0119cb81d0ea8003186f462", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b058cb3f6504b773b08db2b35749355065be2fa6/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b058cb3f6504b773b08db2b35749355065be2fa6/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=b058cb3f6504b773b08db2b35749355065be2fa6", "patch": "@@ -974,3 +974,41 @@ fn param_overrides_fn() {\n         \"#,\n     )\n }\n+\n+#[test]\n+fn lifetime_from_chalk_during_deref() {\n+    check_types(\n+        r#\"\n+        #[lang = \"deref\"]\n+        pub trait Deref {\n+            type Target;\n+        }\n+\n+        struct Box<T: ?Sized> {}\n+        impl<T> Deref for Box<T> {\n+            type Target = T;\n+\n+            fn deref(&self) -> &Self::Target {\n+                loop {}\n+            }\n+        }\n+\n+        trait Iterator {\n+            type Item;\n+        }\n+\n+        pub struct Iter<'a, T: 'a> {\n+            inner: Box<dyn IterTrait<'a, T, Item = &'a T> + 'a>,\n+        }\n+\n+        trait IterTrait<'a, T: 'a>: Iterator<Item = &'a T> {\n+            fn clone_box(&self);\n+        }\n+\n+        fn clone_iter<T>(s: Iter<T>) {\n+            s.inner.clone_box();\n+          //^^^^^^^^^^^^^^^^^^^ ()\n+        }\n+        \"#,\n+    )\n+}"}]}