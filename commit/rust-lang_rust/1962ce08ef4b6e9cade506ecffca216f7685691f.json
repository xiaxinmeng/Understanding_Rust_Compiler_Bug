{"sha": "1962ce08ef4b6e9cade506ecffca216f7685691f", "node_id": "C_kwDOAAsO6NoAKDE5NjJjZTA4ZWY0YjZlOWNhZGU1MDZlY2ZmY2EyMTZmNzY4NTY5MWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-19T14:54:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-19T14:54:12Z"}, "message": "Auto merge of #8146 - GuillaumeGomez:must-use-self, r=xFrednet\n\nDon't emit RETURN_SELF_NOT_MUST_USE lint if `Self` already is marked as `#[must_use]`\n\nNew bug discovered with this lint. Hopefully, this is the last one.\n\n---\n\nchangelog: none", "tree": {"sha": "5b7b7c09ad7dbf118b283da70394cda9f37a4dc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b7b7c09ad7dbf118b283da70394cda9f37a4dc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1962ce08ef4b6e9cade506ecffca216f7685691f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1962ce08ef4b6e9cade506ecffca216f7685691f", "html_url": "https://github.com/rust-lang/rust/commit/1962ce08ef4b6e9cade506ecffca216f7685691f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1962ce08ef4b6e9cade506ecffca216f7685691f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25e90ec1ab24464e67b9b77323f51b87fc45b879", "url": "https://api.github.com/repos/rust-lang/rust/commits/25e90ec1ab24464e67b9b77323f51b87fc45b879", "html_url": "https://github.com/rust-lang/rust/commit/25e90ec1ab24464e67b9b77323f51b87fc45b879"}, {"sha": "07a00efe61fcb1e52103c2acb6f921ced6d11749", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a00efe61fcb1e52103c2acb6f921ced6d11749", "html_url": "https://github.com/rust-lang/rust/commit/07a00efe61fcb1e52103c2acb6f921ced6d11749"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "b57ec96bc7e6d101a41d53aa1622bca70cd473cf", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1962ce08ef4b6e9cade506ecffca216f7685691f/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962ce08ef4b6e9cade506ecffca216f7685691f/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=1962ce08ef4b6e9cade506ecffca216f7685691f", "patch": "@@ -1,4 +1,5 @@\n-use clippy_utils::{diagnostics::span_lint, must_use_attr, nth_arg, return_ty};\n+use clippy_utils::ty::is_must_use_ty;\n+use clippy_utils::{diagnostics::span_lint, nth_arg, return_ty};\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId, TraitItem, TraitItemKind};\n@@ -50,16 +51,18 @@ fn check_method(cx: &LateContext<'tcx>, decl: &'tcx FnDecl<'tcx>, fn_def: LocalD\n         if decl.implicit_self.has_implicit_self();\n         // We only show this warning for public exported methods.\n         if cx.access_levels.is_exported(fn_def);\n+        // We don't want to emit this lint if the `#[must_use]` attribute is already there.\n+        if !cx.tcx.hir().attrs(hir_id).iter().any(|attr| attr.has_name(sym::must_use));\n         if cx.tcx.visibility(fn_def.to_def_id()).is_public();\n-        // No need to warn if the attribute is already present.\n-        if must_use_attr(cx.tcx.hir().attrs(hir_id)).is_none();\n         let ret_ty = return_ty(cx, hir_id);\n         let self_arg = nth_arg(cx, hir_id, 0);\n         // If `Self` has the same type as the returned type, then we want to warn.\n         //\n         // For this check, we don't want to remove the reference on the returned type because if\n         // there is one, we shouldn't emit a warning!\n         if self_arg.peel_refs() == ret_ty;\n+        // If `Self` is already marked as `#[must_use]`, no need for the attribute here.\n+        if !is_must_use_ty(cx, ret_ty);\n \n         then {\n             span_lint(\n@@ -86,8 +89,6 @@ impl<'tcx> LateLintPass<'tcx> for ReturnSelfNotMustUse {\n             // We are only interested in methods, not in functions or associated functions.\n             if matches!(kind, FnKind::Method(_, _, _));\n             if let Some(fn_def) = cx.tcx.hir().opt_local_def_id(hir_id);\n-            // We don't want to emit this lint if the `#[must_use]` attribute is already there.\n-            if !cx.tcx.hir().attrs(hir_id).iter().any(|attr| attr.has_name(sym::must_use));\n             if let Some(impl_def) = cx.tcx.impl_of_method(fn_def.to_def_id());\n             // We don't want this method to be te implementation of a trait because the\n             // `#[must_use]` should be put on the trait definition directly."}, {"sha": "7dd5742dae9f213d5038af6d0422b6b201342db6", "filename": "tests/ui/return_self_not_must_use.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1962ce08ef4b6e9cade506ecffca216f7685691f/tests%2Fui%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962ce08ef4b6e9cade506ecffca216f7685691f/tests%2Fui%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn_self_not_must_use.rs?ref=1962ce08ef4b6e9cade506ecffca216f7685691f", "patch": "@@ -45,3 +45,13 @@ impl Whatever for Bar {\n         self\n     }\n }\n+\n+#[must_use]\n+pub struct Foo;\n+\n+impl Foo {\n+    // There should be no warning here! (`Foo` already implements `#[must_use]`)\n+    fn foo(&self) -> Self {\n+        Self\n+    }\n+}"}]}