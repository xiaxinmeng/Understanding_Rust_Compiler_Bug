{"sha": "fa0794db239d588b5822233d32fa7aa82bd17069", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDc5NGRiMjM5ZDU4OGI1ODIyMjMzZDMyZmE3YWE4MmJkMTcwNjk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-07T09:38:44Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-16T08:46:27Z"}, "message": "Remove Q parameter from JobOwner.", "tree": {"sha": "d72fc851df814840d0006dfa783ef365c01c01e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d72fc851df814840d0006dfa783ef365c01c01e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa0794db239d588b5822233d32fa7aa82bd17069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0794db239d588b5822233d32fa7aa82bd17069", "html_url": "https://github.com/rust-lang/rust/commit/fa0794db239d588b5822233d32fa7aa82bd17069", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa0794db239d588b5822233d32fa7aa82bd17069/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d125bbb12b9b1839068706834d350acf5a91244c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d125bbb12b9b1839068706834d350acf5a91244c", "html_url": "https://github.com/rust-lang/rust/commit/d125bbb12b9b1839068706834d350acf5a91244c"}], "stats": {"total": 61, "additions": 43, "deletions": 18}, "files": [{"sha": "9228e569f558628d01ed42a6692ec86c48acd627", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fa0794db239d588b5822233d32fa7aa82bd17069/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0794db239d588b5822233d32fa7aa82bd17069/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=fa0794db239d588b5822233d32fa7aa82bd17069", "patch": "@@ -20,6 +20,7 @@ use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, FatalError, H\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::Span;\n use std::collections::hash_map::Entry;\n+use std::fmt::Debug;\n use std::hash::{Hash, Hasher};\n use std::mem;\n use std::num::NonZeroU32;\n@@ -132,13 +133,28 @@ pub(crate) struct QueryLookupImpl<'tcx, QSS> {\n \n /// A type representing the responsibility to execute the job in the `job` field.\n /// This will poison the relevant query if dropped.\n-pub(super) struct JobOwner<'tcx, Q: QueryDescription<'tcx>> {\n-    tcx: TyCtxt<'tcx>,\n-    key: Q::Key,\n+pub(super) type JobOwner<'tcx, Q> = JobOwnerImpl<\n+    'tcx,\n+    <Q as QueryConfig<'tcx>>::Key,\n+    <Q as QueryConfig<'tcx>>::Value,\n+    <Q as QueryAccessors<'tcx>>::Cache,\n+>;\n+\n+pub(super) struct JobOwnerImpl<'tcx, K, V, C: QueryCache<K, V>>\n+where\n+    K: Eq + Hash + Clone + Debug,\n+    V: Clone,\n+{\n+    state: &'tcx QueryStateImpl<'tcx, K, V, C>,\n+    key: K,\n     id: QueryJobId,\n }\n \n-impl<'tcx, Q: QueryDescription<'tcx> + 'tcx> JobOwner<'tcx, Q> {\n+impl<'tcx, K, V, C: QueryCache<K, V>> JobOwnerImpl<'tcx, K, V, C>\n+where\n+    K: Eq + Hash + Clone + Debug,\n+    V: Clone,\n+{\n     /// Either gets a `JobOwner` corresponding the query, allowing us to\n     /// start executing the query, or returns with the result of the query.\n     /// This function assumes that `try_get_cached` is already called and returned `lookup`.\n@@ -148,12 +164,17 @@ impl<'tcx, Q: QueryDescription<'tcx> + 'tcx> JobOwner<'tcx, Q> {\n     /// This function is inlined because that results in a noticeable speed-up\n     /// for some compile-time benchmarks.\n     #[inline(always)]\n-    pub(super) fn try_start(\n+    pub(super) fn try_start<Q>(\n         tcx: TyCtxt<'tcx>,\n         span: Span,\n-        key: &Q::Key,\n+        key: &K,\n         mut lookup: QueryLookup<'tcx, Q>,\n-    ) -> TryGetJob<'tcx, Q> {\n+    ) -> TryGetJob<'tcx, Q>\n+    where\n+        K: Eq + Hash + Clone + Debug,\n+        V: Clone,\n+        Q: QueryDescription<'tcx, Key = K, Value = V, Cache = C> + 'tcx,\n+    {\n         let lock = &mut *lookup.lock;\n \n         let (latch, mut _query_blocked_prof_timer) = match lock.active.entry((*key).clone()) {\n@@ -191,7 +212,8 @@ impl<'tcx, Q: QueryDescription<'tcx> + 'tcx> JobOwner<'tcx, Q> {\n \n                 entry.insert(QueryResult::Started(job));\n \n-                let owner = JobOwner { tcx, id: global_id, key: (*key).clone() };\n+                let owner =\n+                    JobOwnerImpl { state: Q::query_state(tcx), id: global_id, key: (*key).clone() };\n                 return TryGetJob::NotYetStarted(owner);\n             }\n         };\n@@ -231,16 +253,15 @@ impl<'tcx, Q: QueryDescription<'tcx> + 'tcx> JobOwner<'tcx, Q> {\n     /// Completes the query by updating the query cache with the `result`,\n     /// signals the waiter and forgets the JobOwner, so it won't poison the query\n     #[inline(always)]\n-    pub(super) fn complete(self, result: &Q::Value, dep_node_index: DepNodeIndex) {\n+    pub(super) fn complete(self, tcx: TyCtxt<'tcx>, result: &V, dep_node_index: DepNodeIndex) {\n         // We can move out of `self` here because we `mem::forget` it below\n         let key = unsafe { ptr::read(&self.key) };\n-        let tcx = self.tcx;\n+        let state = self.state;\n \n         // Forget ourself so our destructor won't poison the query\n         mem::forget(self);\n \n         let job = {\n-            let state = Q::query_state(tcx);\n             let result = result.clone();\n             let mut lock = state.shards.get_shard_by_value(&key).lock();\n             let job = match lock.active.remove(&key).unwrap() {\n@@ -265,12 +286,16 @@ where\n     (result, diagnostics.into_inner())\n }\n \n-impl<'tcx, Q: QueryDescription<'tcx>> Drop for JobOwner<'tcx, Q> {\n+impl<'tcx, K, V, C: QueryCache<K, V>> Drop for JobOwnerImpl<'tcx, K, V, C>\n+where\n+    K: Eq + Hash + Clone + Debug,\n+    V: Clone,\n+{\n     #[inline(never)]\n     #[cold]\n     fn drop(&mut self) {\n         // Poison the query so jobs waiting on it panic.\n-        let state = Q::query_state(self.tcx);\n+        let state = self.state;\n         let shard = state.shards.get_shard_by_value(&self.key);\n         let job = {\n             let mut shard = shard.lock();\n@@ -492,7 +517,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         key: Q::Key,\n         lookup: QueryLookup<'tcx, Q>,\n     ) -> Q::Value {\n-        let job = match JobOwner::try_start(self, span, &key, lookup) {\n+        let job = match JobOwnerImpl::try_start::<Q>(self, span, &key, lookup) {\n             TryGetJob::NotYetStarted(job) => job,\n             TryGetJob::Cycle(result) => return result,\n             #[cfg(parallel_compiler)]\n@@ -528,7 +553,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     .store_diagnostics_for_anon_node(dep_node_index, diagnostics);\n             }\n \n-            job.complete(&result, dep_node_index);\n+            job.complete(self, &result, dep_node_index);\n \n             return result;\n         }\n@@ -554,7 +579,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 })\n             });\n             if let Some((result, dep_node_index)) = loaded {\n-                job.complete(&result, dep_node_index);\n+                job.complete(self, &result, dep_node_index);\n                 return result;\n             }\n         }\n@@ -696,7 +721,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n         }\n \n-        job.complete(&result, dep_node_index);\n+        job.complete(self, &result, dep_node_index);\n \n         (result, dep_node_index)\n     }\n@@ -751,7 +776,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 // Cache hit, do nothing\n             },\n             |key, lookup| {\n-                let job = match JobOwner::try_start(self, span, &key, lookup) {\n+                let job = match JobOwnerImpl::try_start::<Q>(self, span, &key, lookup) {\n                     TryGetJob::NotYetStarted(job) => job,\n                     TryGetJob::Cycle(_) => return,\n                     #[cfg(parallel_compiler)]"}]}