{"sha": "0e8a1a40f2c81c2318230c4d9c1947310578cbe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOGExYTQwZjJjODFjMjMxODIzMGM0ZDljMTk0NzMxMDU3OGNiZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-03T06:36:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-03T06:36:15Z"}, "message": "Auto merge of #1294 - JOE1994:windows_instant, r=RalfJung\n\nAdd support for 'std::time::Instant' in Windows\n\nAdd support for creating `std::time::Instant` in Windows\n\nIncludes shims for `QueryPerformanceCounter` & `QueryPerformanceFrequency` in Windows, which are both called in Windows when `std::time::Instant` is created.\n\nWindows docs page [\"Acquiring high-resolution time stamps\"](https://docs.microsoft.com/en-us/windows/win32/sysinfo/acquiring-high-resolution-time-stamps) was helpful in learning how `QueryPerformanceCounter` & `QueryPerformanceFrequency` work.\n\ncloses #1291", "tree": {"sha": "f2628e0bfd998e4e4e4eaca3cc5de45cc376f0b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2628e0bfd998e4e4e4eaca3cc5de45cc376f0b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e8a1a40f2c81c2318230c4d9c1947310578cbe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8a1a40f2c81c2318230c4d9c1947310578cbe0", "html_url": "https://github.com/rust-lang/rust/commit/0e8a1a40f2c81c2318230c4d9c1947310578cbe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e8a1a40f2c81c2318230c4d9c1947310578cbe0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "147ea8f400de3ca529abcb5eb7b65f84a4896ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/147ea8f400de3ca529abcb5eb7b65f84a4896ae9", "html_url": "https://github.com/rust-lang/rust/commit/147ea8f400de3ca529abcb5eb7b65f84a4896ae9"}, {"sha": "d5de67a5a0719daffc9e5ed6d434c9feaf093fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5de67a5a0719daffc9e5ed6d434c9feaf093fe7", "html_url": "https://github.com/rust-lang/rust/commit/d5de67a5a0719daffc9e5ed6d434c9feaf093fe7"}], "stats": {"total": 74, "additions": 53, "deletions": 21}, "files": [{"sha": "cfc94bfd9b71d8dc2ce884d2cbaa1d25c4f318c0", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0e8a1a40f2c81c2318230c4d9c1947310578cbe0/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8a1a40f2c81c2318230c4d9c1947310578cbe0/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=0e8a1a40f2c81c2318230c4d9c1947310578cbe0", "patch": "@@ -26,27 +26,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.GetEnvironmentVariableW(args[0], args[1], args[2])?;\n                 this.write_scalar(Scalar::from_u32(result), dest)?;\n             }\n-\n             \"SetEnvironmentVariableW\" => {\n                 let result = this.SetEnvironmentVariableW(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-\n             \"GetEnvironmentStringsW\" => {\n                 let result = this.GetEnvironmentStringsW()?;\n                 this.write_scalar(result, dest)?;\n             }\n-\n             \"FreeEnvironmentStringsW\" => {\n                 let result = this.FreeEnvironmentStringsW(args[0])?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-\n             \"GetCurrentDirectoryW\" => {\n                 let result = this.GetCurrentDirectoryW(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_u32(result), dest)?;\n             }\n-\n             \"SetCurrentDirectoryW\" => {\n                 let result = this.SetCurrentDirectoryW(args[0])?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n@@ -173,6 +168,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"GetSystemTimeAsFileTime\" => {\n                 this.GetSystemTimeAsFileTime(args[0])?;\n             }\n+            \"QueryPerformanceCounter\" => {\n+                let result = this.QueryPerformanceCounter(args[0])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n+            \"QueryPerformanceFrequency\" => {\n+                let result = this.QueryPerformanceFrequency(args[0])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n \n             // Miscellaneous\n             \"SystemFunction036\" => {"}, {"sha": "0d7a4929e4e0538b7d0444b6b5f52a6b62f1de71", "filename": "src/shims/time.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0e8a1a40f2c81c2318230c4d9c1947310578cbe0/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8a1a40f2c81c2318230c4d9c1947310578cbe0/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=0e8a1a40f2c81c2318230c4d9c1947310578cbe0", "patch": "@@ -115,6 +115,38 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(())\n     }\n \n+    #[allow(non_snake_case)]\n+    fn QueryPerformanceCounter(&mut self, lpPerformanceCount_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.assert_target_os(\"windows\", \"QueryPerformanceCounter\");\n+        this.check_no_isolation(\"QueryPerformanceCounter\")?;\n+\n+        // QueryPerformanceCounter uses a hardware counter as its basis.\n+        // Miri will emulate a counter with a resolution of 1 nanosecond.\n+        let duration = Instant::now().duration_since(this.machine.time_anchor);\n+        let qpc = i64::try_from(duration.as_nanos())\n+            .map_err(|_| err_unsup_format!(\"programs running longer than 2^63 nanoseconds are not supported\"))?;\n+        this.write_scalar(Scalar::from_i64(qpc), this.deref_operand(lpPerformanceCount_op)?.into())?;\n+        Ok(-1) // return non-zero on success\n+    }\n+\n+    #[allow(non_snake_case)]\n+    fn QueryPerformanceFrequency(&mut self, lpFrequency_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.assert_target_os(\"windows\", \"QueryPerformanceFrequency\");\n+        this.check_no_isolation(\"QueryPerformanceFrequency\")?;\n+\n+        // Retrieves the frequency of the hardware performance counter.\n+        // The frequency of the performance counter is fixed at system boot and\n+        // is consistent across all processors.\n+        // Miri emulates a \"hardware\" performance counter with a resolution of 1ns,\n+        // and thus 10^9 counts per second.\n+        this.write_scalar(Scalar::from_i64(1_000_000_000), this.deref_operand(lpFrequency_op)?.into())?;\n+        Ok(-1) // Return non-zero on success\n+    }\n+\n     fn mach_absolute_time(&self) -> InterpResult<'tcx, u64> {\n         let this = self.eval_context_ref();\n "}, {"sha": "aa02ac15388e56f8a320a0a1ac294cb3a88536fe", "filename": "tests/run-pass/time.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0e8a1a40f2c81c2318230c4d9c1947310578cbe0/tests%2Frun-pass%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8a1a40f2c81c2318230c4d9c1947310578cbe0/tests%2Frun-pass%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftime.rs?ref=0e8a1a40f2c81c2318230c4d9c1947310578cbe0", "patch": "@@ -19,22 +19,19 @@ fn main() {\n     assert!(2020 <= year && year < 2100);\n \n     // Check `Instant`.\n-    #[cfg(not(windows))] // `Instant` shims not yet implemented on Windows\n-    {\n-        let now1 = Instant::now();\n-        // Do some work to make time pass.\n-        for _ in 0..10 { drop(vec![42]); }\n-        let now2 = Instant::now();\n-        assert!(now2 > now1);\n+    let now1 = Instant::now();\n+    // Do some work to make time pass.\n+    for _ in 0..10 { drop(vec![42]); }\n+    let now2 = Instant::now();\n+    assert!(now2 > now1);\n \n-        #[cfg(target_os = \"linux\")] // TODO: macOS does not support Instant subtraction\n-        {\n-            let diff = now2.duration_since(now1);\n-            assert_eq!(now1 + diff, now2);\n-            assert_eq!(now2 - diff, now1);\n-            // Sanity-check the difference we got.\n-            assert!(diff.as_micros() > 1);\n-            assert!(diff.as_micros() < 1_000_000);\n-        }\n+    #[cfg(not(target_os = \"macos\"))] // TODO: macOS does not support Instant subtraction\n+    {\n+        let diff = now2.duration_since(now1);\n+        assert_eq!(now1 + diff, now2);\n+        assert_eq!(now2 - diff, now1);\n+        // Sanity-check the difference we got.\n+        assert!(diff.as_micros() > 1);\n+        assert!(diff.as_micros() < 1_000_000);\n     }\n }"}]}