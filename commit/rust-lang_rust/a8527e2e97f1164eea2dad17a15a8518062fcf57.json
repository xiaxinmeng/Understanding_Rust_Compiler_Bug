{"sha": "a8527e2e97f1164eea2dad17a15a8518062fcf57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NTI3ZTJlOTdmMTE2NGVlYTJkYWQxN2ExNWE4NTE4MDYyZmNmNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-21T01:27:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-21T01:27:48Z"}, "message": "auto merge of #5456 : graydon/rust/fixups, r=pcwalton\n\nStage markers for stage3 and a trivial prelude fix.", "tree": {"sha": "2acfd73f8071d5e384f13ae2df44da480520a062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2acfd73f8071d5e384f13ae2df44da480520a062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8527e2e97f1164eea2dad17a15a8518062fcf57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8527e2e97f1164eea2dad17a15a8518062fcf57", "html_url": "https://github.com/rust-lang/rust/commit/a8527e2e97f1164eea2dad17a15a8518062fcf57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8527e2e97f1164eea2dad17a15a8518062fcf57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b12714eff5dd2ccde118c520444990216739e006", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12714eff5dd2ccde118c520444990216739e006", "html_url": "https://github.com/rust-lang/rust/commit/b12714eff5dd2ccde118c520444990216739e006"}, {"sha": "9350d14ecb025f963198e9baa39679f808496785", "url": "https://api.github.com/repos/rust-lang/rust/commits/9350d14ecb025f963198e9baa39679f808496785", "html_url": "https://github.com/rust-lang/rust/commit/9350d14ecb025f963198e9baa39679f808496785"}], "stats": {"total": 67, "additions": 39, "deletions": 28}, "files": [{"sha": "255e1966f378e682cea5ce313b9eb94ddbeccdd8", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=a8527e2e97f1164eea2dad17a15a8518062fcf57", "patch": "@@ -110,6 +110,7 @@ pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n // required.\n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n pub impl<T: Owned> Chan<T> {\n     fn send(&self, x: T) { chan_send(self, x) }\n     fn try_send(&self, x: T) -> bool { chan_try_send(self, x) }\n@@ -149,6 +150,7 @@ fn chan_try_send<T:Owned>(self: &Chan<T>, x: T) -> bool {\n // Use an inherent impl so that imports are not required:\n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n pub impl<T: Owned> Port<T> {\n     fn recv(&self) -> T { port_recv(self) }\n     fn try_recv(&self) -> Option<T> { port_try_recv(self) }\n@@ -226,6 +228,7 @@ pub fn PortSet<T: Owned>() -> PortSet<T>{\n // Use an inherent impl so that imports are not required:\n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n pub impl<T:Owned> PortSet<T> {\n     fn recv(&self) -> T { port_set_recv(self) }\n     fn try_recv(&self) -> Option<T> { port_set_try_recv(self) }\n@@ -301,6 +304,7 @@ pub type SharedChan<T> = unstable::Exclusive<Chan<T>>;\n \n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n pub impl<T: Owned> SharedChan<T> {\n     fn send(&self, x: T) { shared_chan_send(self, x) }\n     fn try_send(&self, x: T) -> bool { shared_chan_try_send(self, x) }"}, {"sha": "3c1687efee55185cc7d471449ae13b08111f0751", "filename": "src/libcore/io.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=a8527e2e97f1164eea2dad17a15a8518062fcf57", "patch": "@@ -21,7 +21,9 @@ use libc;\n use libc::{c_int, c_long, c_uint, c_void, size_t, ssize_t};\n use libc::consts::os::posix88::*;\n use os;\n-use prelude::*;\n+use cast;\n+use path::Path;\n+use ops::Drop;\n use ptr;\n use result;\n use str;\n@@ -75,6 +77,7 @@ pub trait Reader {\n \n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n impl Reader for @Reader {\n     fn read(&self, bytes: &mut [u8], len: uint) -> uint {\n         self.read(bytes, len)\n@@ -657,6 +660,7 @@ pub trait Writer {\n \n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n impl Writer for @Writer {\n     fn write(&self, v: &[const u8]) { self.write(v) }\n     fn seek(&self, a: int, b: SeekStyle) { self.seek(a, b) }"}, {"sha": "430195741aba847b87236b5849f4b56b67baba5b", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=a8527e2e97f1164eea2dad17a15a8518062fcf57", "patch": "@@ -43,6 +43,7 @@ pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n pub use vec::{CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n pub use vec::{OwnedVector, OwnedCopyableVector};\n+pub use io::{Reader, ReaderUtil, Writer, WriterUtil};\n \n /* Reexported runtime types */\n pub use comm::{stream, Port, Chan, GenericChan, GenericSmartChan, GenericPort, Peekable};"}, {"sha": "8b08f5e45320770316db8b14b765230861a68e46", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=a8527e2e97f1164eea2dad17a15a8518062fcf57", "patch": "@@ -369,6 +369,7 @@ fn mk_tests(cx: &TestCtxt) -> @ast::item {\n \n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n fn mk_tests(cx: &TestCtxt) -> @ast::item {\n \n     let ext_cx = cx.ext_cx;"}, {"sha": "6cb840fb93770c1e6016c27bab153a429e50d134", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=a8527e2e97f1164eea2dad17a15a8518062fcf57", "patch": "@@ -127,7 +127,7 @@ fn write_page(ctxt: &Ctxt, page: &doc::Page) {\n         write_item_no_header(ctxt, doc);\n       }\n     }\n-    ctxt.w.write_done();\n+    ctxt.w.put_done();\n }\n \n #[test]\n@@ -146,8 +146,8 @@ fn should_request_new_writer_for_each_page() {\n }\n \n fn write_title(ctxt: &Ctxt, page: doc::Page) {\n-    ctxt.w.write_line(fmt!(\"%% %s\", make_title(page)));\n-    ctxt.w.write_line(~\"\");\n+    ctxt.w.put_line(fmt!(\"%% %s\", make_title(page)));\n+    ctxt.w.put_line(~\"\");\n }\n \n fn make_title(page: doc::Page) -> ~str {\n@@ -198,8 +198,8 @@ fn write_header(ctxt: &Ctxt, lvl: Hlvl, doc: doc::ItemTag) {\n \n fn write_header_(ctxt: &Ctxt, lvl: Hlvl, title: ~str) {\n     let hashes = str::from_chars(vec::from_elem(lvl as uint, '#'));\n-    ctxt.w.write_line(fmt!(\"%s %s\", hashes, title));\n-    ctxt.w.write_line(~\"\");\n+    ctxt.w.put_line(fmt!(\"%s %s\", hashes, title));\n+    ctxt.w.put_line(~\"\");\n }\n \n pub fn header_kind(doc: doc::ItemTag) -> ~str {\n@@ -332,8 +332,8 @@ fn write_desc(\n ) {\n     match desc {\n         Some(desc) => {\n-            ctxt.w.write_line(desc);\n-            ctxt.w.write_line(~\"\");\n+            ctxt.w.put_line(desc);\n+            ctxt.w.put_line(~\"\");\n         }\n         None => ()\n     }\n@@ -347,8 +347,8 @@ fn write_sections(ctxt: &Ctxt, sections: &[doc::Section]) {\n \n fn write_section(ctxt: &Ctxt, section: doc::Section) {\n     write_header_(ctxt, H4, copy section.header);\n-    ctxt.w.write_line(copy section.body);\n-    ctxt.w.write_line(~\"\");\n+    ctxt.w.put_line(copy section.body);\n+    ctxt.w.put_line(~\"\");\n }\n \n #[test]\n@@ -398,7 +398,7 @@ fn write_item_(ctxt: &Ctxt, doc: doc::ItemTag, write_header: bool) {\n       doc::TraitTag(TraitDoc) => write_trait(ctxt, TraitDoc),\n       doc::ImplTag(ImplDoc) => write_impl(ctxt, ImplDoc),\n       doc::TyTag(TyDoc) => write_type(ctxt, TyDoc),\n-      doc::StructTag(StructDoc) => write_struct(ctxt, StructDoc),\n+      doc::StructTag(StructDoc) => put_struct(ctxt, StructDoc),\n     }\n }\n \n@@ -428,13 +428,13 @@ fn write_index(ctxt: &Ctxt, index: doc::Index) {\n         let header = header_text_(entry.kind, entry.name);\n         let id = copy entry.link;\n         if entry.brief.is_some() {\n-            ctxt.w.write_line(fmt!(\"* [%s](%s) - %s\",\n+            ctxt.w.put_line(fmt!(\"* [%s](%s) - %s\",\n                                    header, id, (&entry.brief).get()));\n         } else {\n-            ctxt.w.write_line(fmt!(\"* [%s](%s)\", header, id));\n+            ctxt.w.put_line(fmt!(\"* [%s](%s)\", header, id));\n         }\n     }\n-    ctxt.w.write_line(~\"\");\n+    ctxt.w.put_line(~\"\");\n }\n \n #[test]\n@@ -526,8 +526,8 @@ fn write_fnlike(\n fn write_sig(ctxt: &Ctxt, sig: Option<~str>) {\n     match sig {\n       Some(sig) => {\n-        ctxt.w.write_line(code_block_indent(sig));\n-        ctxt.w.write_line(~\"\");\n+        ctxt.w.put_line(code_block_indent(sig));\n+        ctxt.w.put_line(~\"\");\n       }\n       None => fail!(~\"unimplemented\")\n     }\n@@ -641,18 +641,18 @@ fn write_variants(\n         write_variant(ctxt, copy *variant);\n     }\n \n-    ctxt.w.write_line(~\"\");\n+    ctxt.w.put_line(~\"\");\n }\n \n fn write_variant(ctxt: &Ctxt, doc: doc::VariantDoc) {\n     fail_unless!(doc.sig.is_some());\n     let sig = (&doc.sig).get();\n     match copy doc.desc {\n       Some(desc) => {\n-        ctxt.w.write_line(fmt!(\"* `%s` - %s\", sig, desc));\n+        ctxt.w.put_line(fmt!(\"* `%s` - %s\", sig, desc));\n       }\n       None => {\n-        ctxt.w.write_line(fmt!(\"* `%s`\", sig));\n+        ctxt.w.put_line(fmt!(\"* `%s`\", sig));\n       }\n     }\n }\n@@ -804,7 +804,7 @@ fn should_write_type_signature() {\n     fail_unless!(str::contains(markdown, ~\"\\n\\n    type t = int\\n\\n\"));\n }\n \n-fn write_struct(\n+fn put_struct(\n     ctxt: &Ctxt,\n     doc: doc::StructDoc\n ) {\n@@ -813,7 +813,7 @@ fn write_struct(\n }\n \n #[test]\n-fn should_write_struct_header() {\n+fn should_put_struct_header() {\n     let markdown = test::render(~\"struct S { field: () }\");\n     fail_unless!(str::contains(markdown, ~\"## Struct `S`\\n\\n\"));\n }"}, {"sha": "f83897324145209448274415e8c0b52ed4d509de", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=a8527e2e97f1164eea2dad17a15a8518062fcf57", "patch": "@@ -34,21 +34,21 @@ pub type Writer = ~fn(v: WriteInstr);\n pub type WriterFactory = ~fn(page: doc::Page) -> Writer;\n \n pub trait WriterUtils {\n-    fn write_str(&self, +str: ~str);\n-    fn write_line(&self, +str: ~str);\n-    fn write_done(&self);\n+    fn put_str(&self, +str: ~str);\n+    fn put_line(&self, +str: ~str);\n+    fn put_done(&self);\n }\n \n impl WriterUtils for Writer {\n-    fn write_str(&self, str: ~str) {\n+    fn put_str(&self, str: ~str) {\n         (*self)(Write(str));\n     }\n \n-    fn write_line(&self, str: ~str) {\n-        self.write_str(str + ~\"\\n\");\n+    fn put_line(&self, str: ~str) {\n+        self.put_str(str + ~\"\\n\");\n     }\n \n-    fn write_done(&self) {\n+    fn put_done(&self) {\n         (*self)(Done)\n     }\n }"}, {"sha": "23ae7666bb4d8a7d5d60aca709fb1810a860f3d1", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8527e2e97f1164eea2dad17a15a8518062fcf57/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=a8527e2e97f1164eea2dad17a15a8518062fcf57", "patch": "@@ -28,6 +28,7 @@ pub struct DuplexStream<T, U> {\n // Allow these methods to be used without import:\n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n pub impl<T:Owned,U:Owned> DuplexStream<T, U> {\n     fn send(&self, x: T) {\n         self.chan.send(x)"}]}