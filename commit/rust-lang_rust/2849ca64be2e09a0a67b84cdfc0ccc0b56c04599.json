{"sha": "2849ca64be2e09a0a67b84cdfc0ccc0b56c04599", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NDljYTY0YmUyZTA5YTBhNjdiODRjZGZjMGNjYzBiNTZjMDQ1OTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-01T16:25:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-01T16:25:13Z"}, "message": "Auto merge of #30901 - mackwic:doc-core-convert, r=steveklabnik\n\nAlso add a note about the necessary simplicity of the conversion.\nRelated issue: #29349\n\nr? @steveklabnik", "tree": {"sha": "af6063b4200e5b7f0a5ef8cda0a0fd047cbca829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af6063b4200e5b7f0a5ef8cda0a0fd047cbca829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2849ca64be2e09a0a67b84cdfc0ccc0b56c04599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2849ca64be2e09a0a67b84cdfc0ccc0b56c04599", "html_url": "https://github.com/rust-lang/rust/commit/2849ca64be2e09a0a67b84cdfc0ccc0b56c04599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2849ca64be2e09a0a67b84cdfc0ccc0b56c04599/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28bed3f5e64dfc083dc193412b65d95533a61d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/28bed3f5e64dfc083dc193412b65d95533a61d72", "html_url": "https://github.com/rust-lang/rust/commit/28bed3f5e64dfc083dc193412b65d95533a61d72"}, {"sha": "a0cd46554d850d99f985be911215ac41978533a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0cd46554d850d99f985be911215ac41978533a2", "html_url": "https://github.com/rust-lang/rust/commit/a0cd46554d850d99f985be911215ac41978533a2"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "c207ad16595d199b77ac1a5ac73cda365fc7f2d8", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2849ca64be2e09a0a67b84cdfc0ccc0b56c04599/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2849ca64be2e09a0a67b84cdfc0ccc0b56c04599/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=2849ca64be2e09a0a67b84cdfc0ccc0b56c04599", "patch": "@@ -17,6 +17,24 @@\n //! Like many traits, these are often used as bounds for generic functions, to\n //! support arguments of multiple types.\n //!\n+//! - Impl the `As*` traits for reference-to-reference conversions\n+//! - Impl the `Into` trait when you want to consume the value in the conversion\n+//! - The `From` trait is the most flexible, usefull for values _and_ references conversions\n+//!\n+//! As a library writer, you should prefer implementing `From<T>` rather than\n+//! `Into<U>`, as `From` provides greater flexibility and offer the equivalent `Into`\n+//! implementation for free, thanks to a blanket implementation in the standard library.\n+//!\n+//! **Note: these traits must not fail**. If the conversion can fail, you must use a dedicated\n+//! method which return an `Option<T>` or a `Result<T, E>`.\n+//!\n+//! # Generic impl\n+//!\n+//! - `AsRef` and `AsMut` auto-dereference if the inner type is a reference\n+//! - `From<U> for T` implies `Into<T> for U`\n+//! - `From` and `Into` are reflexive, which means that all types can `into()`\n+//!   themselves and `from()` themselves\n+//!\n //! See each trait for usage examples.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -30,6 +48,9 @@ use marker::Sized;\n ///\n /// [book]: ../../book/borrow-and-asref.html\n ///\n+/// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n+/// return an `Option<T>` or a `Result<T, E>`.\n+///\n /// # Examples\n ///\n /// Both `String` and `&str` implement `AsRef<str>`:\n@@ -45,6 +66,12 @@ use marker::Sized;\n /// let s = \"hello\".to_string();\n /// is_hello(s);\n /// ```\n+///\n+/// # Generic Impls\n+///\n+/// - `AsRef` auto-dereference if the inner type is a reference or a mutable\n+/// reference (eg: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`)\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRef<T: ?Sized> {\n     /// Performs the conversion.\n@@ -53,6 +80,15 @@ pub trait AsRef<T: ?Sized> {\n }\n \n /// A cheap, mutable reference-to-mutable reference conversion.\n+///\n+/// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n+/// return an `Option<T>` or a `Result<T, E>`.\n+///\n+/// # Generic Impls\n+///\n+/// - `AsMut` auto-dereference if the inner type is a reference or a mutable\n+/// reference (eg: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`)\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsMut<T: ?Sized> {\n     /// Performs the conversion.\n@@ -62,6 +98,13 @@ pub trait AsMut<T: ?Sized> {\n \n /// A conversion that consumes `self`, which may or may not be expensive.\n ///\n+/// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n+/// return an `Option<T>` or a `Result<T, E>`.\n+///\n+/// Library writer should not implement directly this trait, but should prefer the implementation\n+/// of the `From` trait, which offer greater flexibility and provide the equivalent `Into`\n+/// implementation for free, thanks to a blanket implementation in the standard library.\n+///\n /// # Examples\n ///\n /// `String` implements `Into<Vec<u8>>`:\n@@ -75,6 +118,12 @@ pub trait AsMut<T: ?Sized> {\n /// let s = \"hello\".to_string();\n /// is_hello(s);\n /// ```\n+///\n+/// # Generic Impls\n+///\n+/// - `From<T> for U` implies `Into<U> for T`\n+/// - `into()` is reflexive, which means that `Into<T> for T` is implemented\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n     /// Performs the conversion.\n@@ -84,6 +133,9 @@ pub trait Into<T>: Sized {\n \n /// Construct `Self` via a conversion.\n ///\n+/// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n+/// return an `Option<T>` or a `Result<T, E>`.\n+///\n /// # Examples\n ///\n /// `String` implements `From<&str>`:\n@@ -94,6 +146,11 @@ pub trait Into<T>: Sized {\n ///\n /// assert_eq!(string, other_string);\n /// ```\n+/// # Generic impls\n+///\n+/// - `From<T> for U` implies `Into<U> for T`\n+/// - `from()` is reflexive, which means that `From<T> for T` is implemented\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait From<T>: Sized {\n     /// Performs the conversion."}]}