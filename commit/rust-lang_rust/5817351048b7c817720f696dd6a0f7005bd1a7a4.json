{"sha": "5817351048b7c817720f696dd6a0f7005bd1a7a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MTczNTEwNDhiN2M4MTc3MjBmNjk2ZGQ2YTBmNzAwNWJkMWE3YTQ=", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2017-02-13T17:33:35Z"}, "committer": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2017-02-13T17:33:35Z"}, "message": "tidy: exempt URLs from the line length restriction\n\nThe length of a URL is usually not under our control, and Markdown\nprovides no way to split a URL in the middle.  Therefore, comment\nlines consisting _solely_ of a URL (possibly with a Markdown link\nlabel in front) should be exempt from the line-length restriction.\n\nInline hyperlink destinations ( `[foo](http://...)` notation ) are\n_not_ exempt, because it is my arrogant opinion that long lines of\nthat type make the source text illegible.\n\nThe patch adds dependencies on the `regex` and `lazy_static` crates\nto the tidy utility.  This _appears_ to Just Work, but if you would\nrather not have that dependency I am willing to provide a hand-written\nparser instead.", "tree": {"sha": "4449e73d2765ee852311a4134645c6b8b3f22577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4449e73d2765ee852311a4134645c6b8b3f22577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5817351048b7c817720f696dd6a0f7005bd1a7a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5817351048b7c817720f696dd6a0f7005bd1a7a4", "html_url": "https://github.com/rust-lang/rust/commit/5817351048b7c817720f696dd6a0f7005bd1a7a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5817351048b7c817720f696dd6a0f7005bd1a7a4/comments", "author": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f6a5c4431e09d355a0ba319a630e02a1e38361", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f6a5c4431e09d355a0ba319a630e02a1e38361", "html_url": "https://github.com/rust-lang/rust/commit/10f6a5c4431e09d355a0ba319a630e02a1e38361"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "39986d592899bee5819bf1ef69bf2a6fb76507c2", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5817351048b7c817720f696dd6a0f7005bd1a7a4/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5817351048b7c817720f696dd6a0f7005bd1a7a4/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=5817351048b7c817720f696dd6a0f7005bd1a7a4", "patch": "@@ -4,3 +4,5 @@ version = \"0.1.0\"\n authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n \n [dependencies]\n+regex = \"*\"\n+lazy_static = \"*\""}, {"sha": "bbd6c8e87c2156cd6c0072e4d838c5c7ca280e66", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5817351048b7c817720f696dd6a0f7005bd1a7a4/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5817351048b7c817720f696dd6a0f7005bd1a7a4/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=5817351048b7c817720f696dd6a0f7005bd1a7a4", "patch": "@@ -14,6 +14,9 @@\n //! etc. This is run by default on `make check` and as part of the auto\n //! builders.\n \n+extern crate regex;\n+#[macro_use] extern crate lazy_static;\n+\n use std::fs;\n use std::path::{PathBuf, Path};\n use std::env;"}, {"sha": "91c5edfd75abc9c83b288efa59c587a1de70af2c", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5817351048b7c817720f696dd6a0f7005bd1a7a4/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5817351048b7c817720f696dd6a0f7005bd1a7a4/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=5817351048b7c817720f696dd6a0f7005bd1a7a4", "patch": "@@ -26,6 +26,8 @@ use std::fs::File;\n use std::io::prelude::*;\n use std::path::Path;\n \n+use regex::Regex;\n+\n const COLS: usize = 100;\n const LICENSE: &'static str = \"\\\n Copyright <year> The Rust Project Developers. See the COPYRIGHT\n@@ -38,6 +40,32 @@ http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n option. This file may not be copied, modified, or distributed\n except according to those terms.\";\n \n+/// True if LINE is allowed to be longer than the normal limit.\n+///\n+/// Currently there is only one exception: if the line is within a\n+/// comment, and its entire text is one URL (possibly with a Markdown\n+/// link label in front), then it's allowed to be overlength.  This is\n+/// because Markdown offers no way to split a line in the middle of a\n+/// URL, and the length of URLs for external references is beyond our\n+/// control.\n+fn long_line_is_ok(line: &str) -> bool {\n+    lazy_static! {\n+        static ref URL_RE: Regex = Regex::new(\n+            // This regexp uses the CommonMark definition of link\n+            // label.  It thinks any sequence of nonwhitespace\n+            // characters beginning with \"http://\" or \"https://\" is a\n+            // URL.  Add more schemas as necessary.\n+            r\"^\\s*//[!/]?\\s+(?:\\[(?:[^\\]\\\\]|\\\\.){1,999}\\]:\\s+)?https?://\\S+$\"\n+        ).unwrap();\n+    }\n+\n+    if URL_RE.is_match(line) {\n+        return true;\n+    }\n+\n+    false\n+}\n+\n pub fn check(path: &Path, bad: &mut bool) {\n     let mut contents = String::new();\n     super::walk(path, &mut super::filter_dirs, &mut |file| {\n@@ -61,8 +89,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 println!(\"{}:{}: {}\", file.display(), i + 1, msg);\n                 *bad = true;\n             };\n-            if line.chars().count() > COLS && !skip_length {\n-                err(&format!(\"line longer than {} chars\", COLS));\n+            if !skip_length && line.chars().count() > COLS\n+                && !long_line_is_ok(line) {\n+                    err(&format!(\"line longer than {} chars\", COLS));\n             }\n             if line.contains(\"\\t\") && !skip_tab {\n                 err(\"tab character\");"}]}