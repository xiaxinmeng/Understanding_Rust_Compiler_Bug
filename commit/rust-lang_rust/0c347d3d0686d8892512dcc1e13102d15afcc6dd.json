{"sha": "0c347d3d0686d8892512dcc1e13102d15afcc6dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMzQ3ZDNkMDY4NmQ4ODkyNTEyZGNjMWUxMzEwMmQxNWFmY2M2ZGQ=", "commit": {"author": {"name": "Marc Dominik Migge", "email": "marcmigge@gmx.net", "date": "2021-01-17T13:42:36Z"}, "committer": {"name": "Marc Dominik Migge", "email": "marcmigge@gmx.net", "date": "2021-01-17T13:42:36Z"}, "message": "Fix false positive for unit_arg lint", "tree": {"sha": "5c64cb783499aefad0ba488419cd47dcdd916c41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c64cb783499aefad0ba488419cd47dcdd916c41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c347d3d0686d8892512dcc1e13102d15afcc6dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c347d3d0686d8892512dcc1e13102d15afcc6dd", "html_url": "https://github.com/rust-lang/rust/commit/0c347d3d0686d8892512dcc1e13102d15afcc6dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c347d3d0686d8892512dcc1e13102d15afcc6dd/comments", "author": {"login": "mdm", "id": 75325, "node_id": "MDQ6VXNlcjc1MzI1", "avatar_url": "https://avatars.githubusercontent.com/u/75325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdm", "html_url": "https://github.com/mdm", "followers_url": "https://api.github.com/users/mdm/followers", "following_url": "https://api.github.com/users/mdm/following{/other_user}", "gists_url": "https://api.github.com/users/mdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdm/subscriptions", "organizations_url": "https://api.github.com/users/mdm/orgs", "repos_url": "https://api.github.com/users/mdm/repos", "events_url": "https://api.github.com/users/mdm/events{/privacy}", "received_events_url": "https://api.github.com/users/mdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdm", "id": 75325, "node_id": "MDQ6VXNlcjc1MzI1", "avatar_url": "https://avatars.githubusercontent.com/u/75325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdm", "html_url": "https://github.com/mdm", "followers_url": "https://api.github.com/users/mdm/followers", "following_url": "https://api.github.com/users/mdm/following{/other_user}", "gists_url": "https://api.github.com/users/mdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdm/subscriptions", "organizations_url": "https://api.github.com/users/mdm/orgs", "repos_url": "https://api.github.com/users/mdm/repos", "events_url": "https://api.github.com/users/mdm/events{/privacy}", "received_events_url": "https://api.github.com/users/mdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40ce9f83b6904af97ab13d80642d29e573fa6814", "url": "https://api.github.com/repos/rust-lang/rust/commits/40ce9f83b6904af97ab13d80642d29e573fa6814", "html_url": "https://github.com/rust-lang/rust/commit/40ce9f83b6904af97ab13d80642d29e573fa6814"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "7d0eea37bc02a6e7c46795e232ec6af8e9601f71", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c347d3d0686d8892512dcc1e13102d15afcc6dd/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c347d3d0686d8892512dcc1e13102d15afcc6dd/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=0c347d3d0686d8892512dcc1e13102d15afcc6dd", "patch": "@@ -955,7 +955,16 @@ impl<'tcx> LateLintPass<'tcx> for UnitArg {\n                     .iter()\n                     .filter(|arg| {\n                         if is_unit(cx.typeck_results().expr_ty(arg)) && !is_unit_literal(arg) {\n-                            !matches!(&arg.kind, ExprKind::Match(.., MatchSource::TryDesugar))\n+                            match &arg.kind {\n+                                ExprKind::Block(..)\n+                                | ExprKind::Call(..)\n+                                | ExprKind::If(..)\n+                                | ExprKind::MethodCall(..) => true,\n+                                ExprKind::Match(..) => {\n+                                    !matches!(&arg.kind, ExprKind::Match(.., MatchSource::TryDesugar))\n+                                },\n+                                _ => false,\n+                            }\n                         } else {\n                             false\n                         }"}, {"sha": "79dac925f08caed4ae28dd0fb705325de215c35b", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c347d3d0686d8892512dcc1e13102d15afcc6dd/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c347d3d0686d8892512dcc1e13102d15afcc6dd/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=0c347d3d0686d8892512dcc1e13102d15afcc6dd", "patch": "@@ -59,7 +59,18 @@ fn bad() {\n     None.or(Some(foo(2)));\n     // in this case, the suggestion can be inlined, no need for a surrounding block\n     // foo(()); foo(()) instead of { foo(()); foo(()) }\n-    foo(foo(()))\n+    foo(foo(()));\n+    foo(if true {\n+        1;\n+    });\n+    foo(match Some(1) {\n+        Some(_) => {\n+            1;\n+        },\n+        None => {\n+            0;\n+        },\n+    });\n }\n \n fn ok() {\n@@ -71,6 +82,13 @@ fn ok() {\n     b.bar({ 1 });\n     b.bar(());\n     question_mark();\n+    let named_unit_arg = ();\n+    foo(named_unit_arg);\n+    foo(if true { 1 } else { 0 });\n+    foo(match Some(1) {\n+        Some(_) => 1,\n+        None => 0,\n+    });\n }\n \n fn question_mark() -> Result<(), ()> {"}, {"sha": "8679706f8ec8eb6cd3b3665f483ced9b67111700", "filename": "tests/ui/unit_arg.stderr", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0c347d3d0686d8892512dcc1e13102d15afcc6dd/tests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c347d3d0686d8892512dcc1e13102d15afcc6dd/tests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.stderr?ref=0c347d3d0686d8892512dcc1e13102d15afcc6dd", "patch": "@@ -156,17 +156,55 @@ LL |     });\n error: passing a unit value to a function\n   --> $DIR/unit_arg.rs:62:5\n    |\n-LL |     foo(foo(()))\n+LL |     foo(foo(()));\n    |     ^^^^^^^^^^^^\n    |\n help: move the expression in front of the call and replace it with the unit literal `()`\n    |\n LL |     foo(());\n-LL |     foo(())\n+LL |     foo(());\n+   |\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:63:5\n+   |\n+LL | /     foo(if true {\n+LL | |         1;\n+LL | |     });\n+   | |______^\n+   |\n+help: move the expression in front of the call and replace it with the unit literal `()`\n+   |\n+LL |     if true {\n+LL |         1;\n+LL |     };\n+LL |     foo(());\n+   |\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:66:5\n    |\n+LL | /     foo(match Some(1) {\n+LL | |         Some(_) => {\n+LL | |             1;\n+LL | |         },\n+...  |\n+LL | |         },\n+LL | |     });\n+   | |______^\n+   |\n+help: move the expression in front of the call and replace it with the unit literal `()`\n+   |\n+LL |     match Some(1) {\n+LL |         Some(_) => {\n+LL |             1;\n+LL |         },\n+LL |         None => {\n+LL |             0;\n+ ...\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:95:5\n+  --> $DIR/unit_arg.rs:113:5\n    |\n LL |     Some(foo(1))\n    |     ^^^^^^^^^^^^\n@@ -177,5 +215,5 @@ LL |     foo(1);\n LL |     Some(())\n    |\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 12 previous errors\n "}]}