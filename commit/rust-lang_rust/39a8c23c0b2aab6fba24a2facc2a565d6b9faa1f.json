{"sha": "39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YThjMjNjMGIyYWFiNmZiYTI0YTJmYWNjMmE1NjVkNmI5ZmFhMWY=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-12-06T00:17:30Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2015-01-30T01:18:04Z"}, "message": "Make the naming lints only warn on names with upper/lowercase equivalents\n\nCloses #21735.", "tree": {"sha": "a4ab7412a11d63c6ce95cc0527eeecb82cb770e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ab7412a11d63c6ce95cc0527eeecb82cb770e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f", "html_url": "https://github.com/rust-lang/rust/commit/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5961ad06d45689b44ff305c15d6ec7ec65755a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5961ad06d45689b44ff305c15d6ec7ec65755a9", "html_url": "https://github.com/rust-lang/rust/commit/c5961ad06d45689b44ff305c15d6ec7ec65755a9"}], "stats": {"total": 142, "additions": 90, "deletions": 52}, "files": [{"sha": "74a389d353c9740154ad8a6d0541059c5d76153d", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 67, "deletions": 46, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f", "patch": "@@ -937,6 +937,34 @@ declare_lint! {\n pub struct NonSnakeCase;\n \n impl NonSnakeCase {\n+    fn to_snake_case(mut str: &str) -> String {\n+        let mut words = vec![];\n+        // Preserve leading underscores\n+        str = str.trim_left_matches(|&mut: c: char| {\n+            if c == '_' {\n+                words.push(String::new());\n+                true\n+            } else { false }\n+        });\n+        for s in str.split('_') {\n+            let mut last_upper = false;\n+            let mut buf = String::new();\n+            if s.is_empty() { continue; }\n+            for ch in s.chars() {\n+                if !buf.is_empty() && buf != \"'\"\n+                                   && ch.is_uppercase()\n+                                   && !last_upper {\n+                    words.push(buf);\n+                    buf = String::new();\n+                }\n+                last_upper = ch.is_uppercase();\n+                buf.push(ch.to_lowercase());\n+            }\n+            words.push(buf);\n+        }\n+        words.connect(\"_\")\n+    }\n+\n     fn check_snake_case(&self, cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n         fn is_snake_case(ident: ast::Ident) -> bool {\n             let ident = token::get_ident(ident);\n@@ -947,41 +975,28 @@ impl NonSnakeCase {\n             let mut allow_underscore = true;\n             ident.chars().all(|c| {\n                 allow_underscore = match c {\n-                    c if c.is_lowercase() || c.is_numeric() => true,\n-                    '_' if allow_underscore => false,\n+                    '_' if !allow_underscore => return false,\n+                    '_' => false,\n+                    c if !c.is_uppercase() => true,\n                     _ => return false,\n                 };\n                 true\n             })\n         }\n \n-        fn to_snake_case(str: &str) -> String {\n-            let mut words = vec![];\n-            for s in str.split('_') {\n-                let mut last_upper = false;\n-                let mut buf = String::new();\n-                if s.is_empty() { continue; }\n-                for ch in s.chars() {\n-                    if !buf.is_empty() && buf != \"'\"\n-                                       && ch.is_uppercase()\n-                                       && !last_upper {\n-                        words.push(buf);\n-                        buf = String::new();\n-                    }\n-                    last_upper = ch.is_uppercase();\n-                    buf.push(ch.to_lowercase());\n-                }\n-                words.push(buf);\n-            }\n-            words.connect(\"_\")\n-        }\n-\n         let s = token::get_ident(ident);\n \n         if !is_snake_case(ident) {\n-            cx.span_lint(NON_SNAKE_CASE, span,\n-                &format!(\"{} `{}` should have a snake case name such as `{}`\",\n-                        sort, s, to_snake_case(s.get()))[]);\n+            let sc = NonSnakeCase::to_snake_case(s.get());\n+            if sc != s.get() {\n+                cx.span_lint(NON_SNAKE_CASE, span,\n+                    &*format!(\"{} `{}` should have a snake case name such as `{}`\",\n+                            sort, s, sc));\n+            } else {\n+                cx.span_lint(NON_SNAKE_CASE, span,\n+                    &*format!(\"{} `{}` should have a snake case name\",\n+                            sort, s));\n+            }\n         }\n     }\n }\n@@ -1049,6 +1064,26 @@ declare_lint! {\n #[derive(Copy)]\n pub struct NonUpperCaseGlobals;\n \n+impl NonUpperCaseGlobals {\n+    fn check_upper_case(cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n+        let s = token::get_ident(ident);\n+\n+        if s.get().chars().any(|c| c.is_lowercase()) {\n+            let uc: String = NonSnakeCase::to_snake_case(s.get()).chars()\n+                                           .map(|c| c.to_uppercase()).collect();\n+            if uc != s.get() {\n+                cx.span_lint(NON_UPPER_CASE_GLOBALS, span,\n+                    format!(\"{} `{}` should have an upper case name such as `{}`\",\n+                            sort, s, uc).as_slice());\n+            } else {\n+                cx.span_lint(NON_UPPER_CASE_GLOBALS, span,\n+                    format!(\"{} `{}` should have an upper case name\",\n+                            sort, s).as_slice());\n+            }\n+        }\n+    }\n+}\n+\n impl LintPass for NonUpperCaseGlobals {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NON_UPPER_CASE_GLOBALS)\n@@ -1057,19 +1092,11 @@ impl LintPass for NonUpperCaseGlobals {\n     fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n         match it.node {\n             // only check static constants\n-            ast::ItemStatic(_, ast::MutImmutable, _) |\n+            ast::ItemStatic(_, ast::MutImmutable, _) => {\n+                NonUpperCaseGlobals::check_upper_case(cx, \"static constant\", it.ident, it.span);\n+            }\n             ast::ItemConst(..) => {\n-                let s = token::get_ident(it.ident);\n-                // check for lowercase letters rather than non-uppercase\n-                // ones (some scripts don't have a concept of\n-                // upper/lowercase)\n-                if s.get().chars().any(|c| c.is_lowercase()) {\n-                    cx.span_lint(NON_UPPER_CASE_GLOBALS, it.span,\n-                        &format!(\"static constant `{}` should have an uppercase name \\\n-                                 such as `{}`\",\n-                                s.get(), &s.get().chars().map(|c| c.to_uppercase())\n-                                .collect::<String>()[])[]);\n-                }\n+                NonUpperCaseGlobals::check_upper_case(cx, \"constant\", it.ident, it.span);\n             }\n             _ => {}\n         }\n@@ -1079,14 +1106,8 @@ impl LintPass for NonUpperCaseGlobals {\n         // Lint for constants that look like binding identifiers (#7526)\n         match (&p.node, cx.tcx.def_map.borrow().get(&p.id)) {\n             (&ast::PatIdent(_, ref path1, _), Some(&def::DefConst(..))) => {\n-                let s = token::get_ident(path1.node);\n-                if s.get().chars().any(|c| c.is_lowercase()) {\n-                    cx.span_lint(NON_UPPER_CASE_GLOBALS, path1.span,\n-                        &format!(\"static constant in pattern `{}` should have an uppercase \\\n-                                 name such as `{}`\",\n-                                s.get(), &s.get().chars().map(|c| c.to_uppercase())\n-                                    .collect::<String>()[])[]);\n-                }\n+                NonUpperCaseGlobals::check_upper_case(cx, \"constant in pattern\",\n+                                                      path1.node, p.span);\n             }\n             _ => {}\n         }"}, {"sha": "06719e2756b19f07fc142c5a9720eb90534c4a25", "filename": "src/test/compile-fail/issue-17718-const-naming.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-naming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-naming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-naming.rs?ref=39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f", "patch": "@@ -11,7 +11,7 @@\n #[deny(warnings)]\n \n const foo: isize = 3;\n-//~^ ERROR: should have an uppercase name such as\n+//~^ ERROR: should have an upper case name such as\n //~^^ ERROR: constant item is never used\n \n fn main() {}"}, {"sha": "59ab5be1572a3d43d7bbe74e1aeb3cd367f430f8", "filename": "src/test/compile-fail/lint-group-style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs?ref=39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f", "patch": "@@ -24,7 +24,7 @@ mod test {\n     mod bad {\n         fn CamelCase() {} //~ ERROR function `CamelCase` should have a snake case name\n \n-        static bad: isize = 1; //~ ERROR static constant `bad` should have an uppercase name\n+        static bad: isize = 1; //~ ERROR static constant `bad` should have an upper case name\n     }\n \n     mod warn {"}, {"sha": "e1fbc73bbed15ad420d8a21e79ef66ee622e24a4", "filename": "src/test/compile-fail/lint-non-uppercase-statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs?ref=39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f", "patch": "@@ -11,6 +11,6 @@\n #![forbid(non_upper_case_globals)]\n #![allow(dead_code)]\n \n-static foo: isize = 1; //~ ERROR static constant `foo` should have an uppercase name such as `FOO`\n+static foo: isize = 1; //~ ERROR static constant `foo` should have an upper case name such as `FOO`\n \n fn main() { }"}, {"sha": "04b234d8db7f1fa2ed2eedf6e130c1d067e8beb1", "filename": "src/test/compile-fail/match-static-const-lc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs?ref=39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f", "patch": "@@ -19,7 +19,7 @@ pub const a : isize = 97;\n fn f() {\n     let r = match (0,0) {\n         (0, a) => 0,\n-        //~^ ERROR static constant in pattern `a` should have an uppercase name such as `A`\n+        //~^ ERROR constant in pattern `a` should have an upper case name such as `A`\n         (x, y) => 1 + x + y,\n     };\n     assert!(r == 1);\n@@ -34,7 +34,7 @@ fn g() {\n     use self::m::aha;\n     let r = match (0,0) {\n         (0, aha) => 0,\n-        //~^ ERROR static constant in pattern `aha` should have an uppercase name such as `AHA`\n+        //~^ ERROR constant in pattern `aha` should have an upper case name such as `AHA`\n         (x, y)   => 1 + x + y,\n     };\n     assert!(r == 1);\n@@ -48,7 +48,7 @@ fn h() {\n     use self::n::OKAY as not_okay;\n     let r = match (0,0) {\n         (0, not_okay) => 0,\n-//~^ ERROR static constant in pattern `not_okay` should have an uppercase name such as `NOT_OKAY`\n+//~^ ERROR constant in pattern `not_okay` should have an upper case name such as `NOT_OKAY`\n         (x, y)   => 1 + x + y,\n     };\n     assert!(r == 1);"}, {"sha": "2220761a026667cbcf408b9d794536cda8785f44", "filename": "src/test/run-pass/snake-case-no-lowercase-equivalent.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/src%2Ftest%2Frun-pass%2Fsnake-case-no-lowercase-equivalent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f/src%2Ftest%2Frun-pass%2Fsnake-case-no-lowercase-equivalent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsnake-case-no-lowercase-equivalent.rs?ref=39a8c23c0b2aab6fba24a2facc2a565d6b9faa1f", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(non_ascii_idents)]\n+#![deny(non_snake_case)]\n+\n+// This name is neither upper nor lower case\n+fn \u4f60\u597d() {}\n+\n+fn main() {}"}]}