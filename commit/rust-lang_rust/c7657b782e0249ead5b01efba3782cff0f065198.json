{"sha": "c7657b782e0249ead5b01efba3782cff0f065198", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NjU3Yjc4MmUwMjQ5ZWFkNWIwMWVmYmEzNzgyY2ZmMGYwNjUxOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-13T02:30:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-13T02:30:46Z"}, "message": "auto merge of #9147 : catamorphism/rust/rustpkg-install-to-rust-path, r=catamorphism,metajack\n\nr? @metajack Install to the first directory in the RUST_PATH if the user set a\r\nRUST_PATH. In the case where RUST_PATH isn't set, the behavior\r\nremains unchanged.\r\n\r\nCloses #7402", "tree": {"sha": "f87918b21f56be62b50372fc48e46d3ee798abe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f87918b21f56be62b50372fc48e46d3ee798abe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7657b782e0249ead5b01efba3782cff0f065198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7657b782e0249ead5b01efba3782cff0f065198", "html_url": "https://github.com/rust-lang/rust/commit/c7657b782e0249ead5b01efba3782cff0f065198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7657b782e0249ead5b01efba3782cff0f065198/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c07352319e1953bdff52618a540dd915a0abbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c07352319e1953bdff52618a540dd915a0abbd", "html_url": "https://github.com/rust-lang/rust/commit/19c07352319e1953bdff52618a540dd915a0abbd"}, {"sha": "b4b375cbae22f3c0996c02c9b3d998c001b3a837", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b375cbae22f3c0996c02c9b3d998c001b3a837", "html_url": "https://github.com/rust-lang/rust/commit/b4b375cbae22f3c0996c02c9b3d998c001b3a837"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "75e0d59084ceba89a83680a42b181c9335b6a175", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7657b782e0249ead5b01efba3782cff0f065198/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7657b782e0249ead5b01efba3782cff0f065198/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=c7657b782e0249ead5b01efba3782cff0f065198", "patch": "@@ -399,3 +399,12 @@ pub fn find_dir_using_rust_path_hack(p: &PkgId) -> Option<Path> {\n     }\n     None\n }\n+\n+/// True if the user set RUST_PATH to something non-empty --\n+/// as opposed to the default paths that rustpkg adds automatically\n+pub fn user_set_rust_path() -> bool {\n+    match os::getenv(\"RUST_PATH\") {\n+        None | Some(~\"\") => false,\n+        Some(_)         => true\n+    }\n+}"}, {"sha": "eef1dcabfd0efd1c397981401b58135cb65227b3", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c7657b782e0249ead5b01efba3782cff0f065198/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7657b782e0249ead5b01efba3782cff0f065198/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=c7657b782e0249ead5b01efba3782cff0f065198", "patch": "@@ -181,7 +181,10 @@ pub trait CtxMethods {\n     /// second is a list of declared and discovered inputs\n     fn install(&self, src: PkgSrc) -> (~[Path], ~[(~str, ~str)]);\n     /// Returns a list of installed files\n-    fn install_no_build(&self, workspace: &Path, id: &PkgId) -> ~[Path];\n+    fn install_no_build(&self,\n+                        source_workspace: &Path,\n+                        target_workspace: &Path,\n+                        id: &PkgId) -> ~[Path];\n     fn prefer(&self, _id: &str, _vers: Option<~str>);\n     fn test(&self);\n     fn uninstall(&self, _id: &str, _vers: Option<~str>);\n@@ -464,28 +467,40 @@ impl CtxMethods for BuildContext {\n                 // install to the first workspace in the RUST_PATH if there's\n                 // a non-default RUST_PATH. This code installs to the same\n                 // workspace the package was built in.\n-                debug!(\"install: destination workspace = %s, id = %s\",\n-                       destination_workspace, id_str);\n-                let result = subself.install_no_build(&Path(destination_workspace), &sub_id);\n+                let actual_workspace = if path_util::user_set_rust_path() {\n+                    default_workspace()\n+                }\n+                else {\n+                    Path(destination_workspace)\n+                };\n+                debug!(\"install: destination workspace = %s, id = %s, installing to %s\",\n+                       destination_workspace, id_str, actual_workspace.to_str());\n+                let result = subself.install_no_build(&Path(destination_workspace),\n+                                                      &actual_workspace,\n+                                                      &sub_id);\n                 debug!(\"install: id = %s, about to call discover_outputs, %?\",\n                        id_str, result.to_str());\n \n                 discover_outputs(exec, result.clone());\n                 sub_files.write(|r| { *r = result.clone(); });\n                 sub_inputs.write(|r| { *r = *r + exec.lookup_discovered_inputs() });\n+                note(fmt!(\"Installed package %s to %s\", id_str, actual_workspace.to_str()));\n             }\n         };\n         (installed_files.unwrap(), inputs.unwrap())\n     }\n \n-    fn install_no_build(&self, workspace: &Path, id: &PkgId) -> ~[Path] {\n+    fn install_no_build(&self,\n+                        source_workspace: &Path,\n+                        target_workspace: &Path,\n+                        id: &PkgId) -> ~[Path] {\n         use conditions::copy_failed::cond;\n \n         // Now copy stuff into the install dirs\n-        let maybe_executable = built_executable_in_workspace(id, workspace);\n-        let maybe_library = built_library_in_workspace(id, workspace);\n-        let target_exec = target_executable_in_workspace(id, workspace);\n-        let target_lib = maybe_library.map(|_p| target_library_in_workspace(id, workspace));\n+        let maybe_executable = built_executable_in_workspace(id, source_workspace);\n+        let maybe_library = built_library_in_workspace(id, source_workspace);\n+        let target_exec = target_executable_in_workspace(id, target_workspace);\n+        let target_lib = maybe_library.map(|_p| target_library_in_workspace(id, target_workspace));\n \n         debug!(\"target_exec = %s target_lib = %? \\\n                 maybe_executable = %? maybe_library = %?\","}, {"sha": "5a3ed7dd59d465d1fa1cf4650dc2bff135a3fd6a", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7657b782e0249ead5b01efba3782cff0f065198/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7657b782e0249ead5b01efba3782cff0f065198/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=c7657b782e0249ead5b01efba3782cff0f065198", "patch": "@@ -1603,6 +1603,25 @@ fn test_recursive_deps() {\n     assert_lib_exists(&b_workspace, &Path(\"c\"), NoVersion);\n }\n \n+#[test]\n+fn test_install_to_rust_path() {\n+    let p_id = PkgId::new(\"foo\");\n+    let second_workspace = create_local_package(&p_id);\n+    let first_workspace = mk_empty_workspace(&Path(\"p\"), &NoVersion, \"dest\");\n+    let rust_path = Some(~[(~\"RUST_PATH\",\n+                            fmt!(\"%s:%s\", first_workspace.to_str(),\n+                                 second_workspace.to_str()))]);\n+    debug!(\"RUST_PATH=%s:%s\", first_workspace.to_str(), second_workspace.to_str());\n+    command_line_test_with_env([test_sysroot().to_str(),\n+                       ~\"install\",\n+                       ~\"foo\"],\n+                      &os::getcwd(), rust_path);\n+    assert!(!built_executable_exists(&first_workspace, \"foo\"));\n+    assert!(built_executable_exists(&second_workspace, \"foo\"));\n+    assert_executable_exists(&first_workspace, \"foo\");\n+    assert!(!executable_exists(&second_workspace, \"foo\"));\n+}\n+\n /// Returns true if p exists and is executable\n fn is_executable(p: &Path) -> bool {\n     use std::libc::consts::os::posix88::{S_IXUSR};"}]}