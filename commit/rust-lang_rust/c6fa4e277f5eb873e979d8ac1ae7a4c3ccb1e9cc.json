{"sha": "c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZmE0ZTI3N2Y1ZWI4NzNlOTc5ZDhhYzFhZTdhNGMzY2NiMWU5Y2M=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-16T03:55:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-24T21:21:56Z"}, "message": "Address a few XXX comments throughout the runtime\n\n* Implement Seek for Option<Seek>\n* Remove outdated comment for io::process\n* De-pub a component which didn't need to be pub", "tree": {"sha": "220d4a4b85d62a84d957a2a05936a9507da1b76d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/220d4a4b85d62a84d957a2a05936a9507da1b76d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc", "html_url": "https://github.com/rust-lang/rust/commit/c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db783bdcf05954e066adf6cefbbc5ac72e13173", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db783bdcf05954e066adf6cefbbc5ac72e13173", "html_url": "https://github.com/rust-lang/rust/commit/1db783bdcf05954e066adf6cefbbc5ac72e13173"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "a703f9885ac09b98dc1270f87315f6c94fefd2e9", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc", "patch": "@@ -332,8 +332,7 @@ pub mod native {\n mod mock;\n \n /// The default buffer size for various I/O operations\n-/// XXX: Not pub\n-pub static DEFAULT_BUF_SIZE: uint = 1024 * 64;\n+static DEFAULT_BUF_SIZE: uint = 1024 * 64;\n \n /// The type passed to I/O condition handlers to indicate error\n ///"}, {"sha": "ecfc4a832bfb5f5ae9d31f842c0e0af21f05a0e4", "filename": "src/libstd/rt/io/option.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc/src%2Flibstd%2Frt%2Fio%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc/src%2Flibstd%2Frt%2Fio%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Foption.rs?ref=c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc", "patch": "@@ -13,11 +13,9 @@\n //! I/O constructors return option types to allow errors to be handled.\n //! These implementations allow e.g. `Option<FileStream>` to be used\n //! as a `Reader` without unwrapping the option first.\n-//!\n-//! # XXX Seek and Close\n \n use option::*;\n-use super::{Reader, Writer, Listener, Acceptor};\n+use super::{Reader, Writer, Listener, Acceptor, Seek, SeekStyle};\n use super::{standard_error, PreviousIoError, io_error, read_error, IoError};\n \n fn prev_io_error() -> IoError {\n@@ -62,6 +60,24 @@ impl<R: Reader> Reader for Option<R> {\n     }\n }\n \n+impl<S: Seek> Seek for Option<S> {\n+    fn tell(&self) -> u64 {\n+        match *self {\n+            Some(ref seeker) => seeker.tell(),\n+            None => {\n+                io_error::cond.raise(prev_io_error());\n+                0\n+            }\n+        }\n+    }\n+    fn seek(&mut self, pos: i64, style: SeekStyle) {\n+        match *self {\n+            Some(ref mut seeker) => seeker.seek(pos, style),\n+            None => io_error::cond.raise(prev_io_error())\n+        }\n+    }\n+}\n+\n impl<T, A: Acceptor<T>, L: Listener<T, A>> Listener<T, A> for Option<L> {\n     fn listen(self) -> Option<A> {\n         match self {"}, {"sha": "0da9c2166b18dfb753f19e2e22261fd941b38870", "filename": "src/libstd/rt/io/process.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc/src%2Flibstd%2Frt%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc/src%2Flibstd%2Frt%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fprocess.rs?ref=c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc", "patch": "@@ -70,13 +70,6 @@ pub enum StdioContainer {\n     /// specified for.\n     InheritFd(libc::c_int),\n \n-    // XXX: these two shouldn't have libuv-specific implementation details\n-\n-    /// The specified libuv stream is inherited for the corresponding file\n-    /// descriptor it is assigned to.\n-    // XXX: this needs to be thought out more.\n-    //InheritStream(uv::net::StreamWatcher),\n-\n     /// Creates a pipe for the specified file descriptor which will be directed\n     /// into the previously-initialized pipe passed in.\n     ///"}]}