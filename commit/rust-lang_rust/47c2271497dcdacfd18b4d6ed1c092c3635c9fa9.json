{"sha": "47c2271497dcdacfd18b4d6ed1c092c3635c9fa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YzIyNzE0OTdkY2RhY2ZkMThiNGQ2ZWQxYzA5MmMzNjM1YzlmYTk=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-06T20:30:03Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-06T20:30:03Z"}, "message": "Fix FP with `print_with_newline` and final arguments", "tree": {"sha": "585bcf9a808b165e0aeb2c3a21a5180278d96a9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/585bcf9a808b165e0aeb2c3a21a5180278d96a9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47c2271497dcdacfd18b4d6ed1c092c3635c9fa9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJX9rRjAAoJEF5CfHlMukXohk8QAMdSUCGDDdOFK39fJVJcB5fC\n0wEw+Gxwf3CKL/RXXEIInzDE8t+xD9XsSW/5tUHwZS/BO8A80WZUm0XSbiXezUrD\nz4/+NjAi7sotzlbGuUAKj1KHp1ac9UL7K+5ZfqmlPD3lOjyKgMg1PcHSCEsIMgUr\n4qopAEAAn5H0s4CIXLzSbJ1wFQQ0Wmp4S5lXYzV6S6ZXQWF7UrltMcCDMbzGULze\nL18NTYFfFK/FXqqJV9MPw6yoae26saIV9zgbZOfmOrvwzSJ+99W+lfMqyYhqy2KI\nhVDalNDFWjY5YAxMNiJC3L2Q1ololzTLMUL2JbGuaZQleEPoWUqbo2Rnn1wXKxZy\nWlvqdjzWqCpojqcHwjQlaaWUUCY07mVXLT7pXcLqIz7GKIyIOJCCateGD+xMSuDj\n0krTbw9TpV/W0TLMUyjyIJiQ261yO7I0MMvrF2wHT8Gn4xrSvsHyZJD+4jXYFKJT\nDKAYSiah6N7Gqtpe9rN9mhleJpba3Is1VecIPuLk0KvNwFP604ujC+g1b7rXUbWw\n9ImnzsTCA6+f3FdKK5i2qeRG8YW6tIZ4L59ApCmAVaywzkQLNpwWEC8J3xSHI9sL\nsMPKXCM4lDumcKBH9TqtA2fR3tkhjtqz9LbP9UgcNm2pliZc9RN70K4T9SK9V3sn\nthhwZoqxUkiRo8RPK3TE\n=e36p\n-----END PGP SIGNATURE-----", "payload": "tree 585bcf9a808b165e0aeb2c3a21a5180278d96a9d\nparent a4035aabf34b1b7a5f295accc8d7ef475362b68f\nauthor mcarton <cartonmartin+git@gmail.com> 1475785803 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1475785803 +0200\n\nFix FP with `print_with_newline` and final arguments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47c2271497dcdacfd18b4d6ed1c092c3635c9fa9", "html_url": "https://github.com/rust-lang/rust/commit/47c2271497dcdacfd18b4d6ed1c092c3635c9fa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47c2271497dcdacfd18b4d6ed1c092c3635c9fa9/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4035aabf34b1b7a5f295accc8d7ef475362b68f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4035aabf34b1b7a5f295accc8d7ef475362b68f", "html_url": "https://github.com/rust-lang/rust/commit/a4035aabf34b1b7a5f295accc8d7ef475362b68f"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "da41ca84958ffdeb5d3e2bb3c01bd5dc4b86a747", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/47c2271497dcdacfd18b4d6ed1c092c3635c9fa9/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c2271497dcdacfd18b4d6ed1c092c3635c9fa9/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=47c2271497dcdacfd18b4d6ed1c092c3635c9fa9", "patch": "@@ -84,17 +84,27 @@ impl LateLintPass for Pass {\n                         // Check print! with format string ending in \"\\n\".\n                         if_let_chain!{[\n                             name == \"print\",\n+\n                             // ensure we're calling Arguments::new_v1\n                             args.len() == 1,\n                             let ExprCall(ref args_fun, ref args_args) = args[0].node,\n                             let ExprPath(_, ref args_path) = args_fun.node,\n                             match_path(args_path, &paths::FMT_ARGUMENTS_NEWV1),\n                             args_args.len() == 2,\n+                            let ExprAddrOf(_, ref match_expr) = args_args[1].node,\n+                            let ExprMatch(ref args, _, _) = match_expr.node,\n+                            let ExprTup(ref args) = args.node,\n+\n                             // collect the format string parts and check the last one\n                             let Some(fmtstrs) = get_argument_fmtstr_parts(cx, &args_args[0]),\n                             let Some(last_str) = fmtstrs.last(),\n-                            let Some(last_chr) = last_str.chars().last(),\n-                            last_chr == '\\n'\n+                            let Some('\\n') = last_str.chars().last(),\n+\n+                            // \"foo{}bar\" is made into two strings + one argument,\n+                            // if the format string starts with `{}` (eg. \"{}foo\"),\n+                            // the string array is prepended an empty string \"\".\n+                            // We only want to check the last string after any `{}`:\n+                            args.len() < fmtstrs.len(),\n                         ], {\n                             span_lint(cx, PRINT_WITH_NEWLINE, span,\n                                       \"using `print!()` with a format string that ends in a \\"}, {"sha": "86fa88ef34438e5bdb24dd828420c66e35219e79", "filename": "tests/compile-fail/print_with_newline.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47c2271497dcdacfd18b4d6ed1c092c3635c9fa9/tests%2Fcompile-fail%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c2271497dcdacfd18b4d6ed1c092c3635c9fa9/tests%2Fcompile-fail%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprint_with_newline.rs?ref=47c2271497dcdacfd18b4d6ed1c092c3635c9fa9", "patch": "@@ -3,13 +3,17 @@\n #![deny(print_with_newline)]\n \n fn main() {\n-    print!(\"Hello\");\n     print!(\"Hello\\n\"); //~ERROR using `print!()` with a format string\n     print!(\"Hello {}\\n\", \"world\"); //~ERROR using `print!()` with a format string\n     print!(\"Hello {} {}\\n\\n\", \"world\", \"#2\"); //~ERROR using `print!()` with a format string\n+    print!(\"{}\\n\", 1265); //~ERROR using `print!()` with a format string\n \n     // these are all fine\n+    print!(\"\");\n+    print!(\"Hello\");\n     println!(\"Hello\");\n     println!(\"Hello\\n\");\n     println!(\"Hello {}\\n\", \"world\");\n+    print!(\"Issue\\n{}\", 1265);\n+    print!(\"{}\", 1265);\n }"}]}