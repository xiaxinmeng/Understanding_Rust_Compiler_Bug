{"sha": "1f12ac87296ac61ec002e0243e7ad5a50364da35", "node_id": "C_kwDOAAsO6NoAKDFmMTJhYzg3Mjk2YWM2MWVjMDAyZTAyNDNlN2FkNWE1MDM2NGRhMzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-17T19:18:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-17T19:18:18Z"}, "message": "Auto merge of #89984 - matthiaskrgr:rollup-ikmyhmx, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #89738 (ty::pretty: prevent infinite recursion for `extern crate` paths.)\n - #89888 (Make `llvm.download-ci-llvm=\"if-available\"` work for tier 2 targets with host tools)\n - #89945 (Remove a mention to `copy_from_slice` from `clone_from_slice` doc)\n - #89946 (Fix an ICE with TAITs and Future)\n - #89963 (Some \"parenthesis\" and \"parentheses\" fixes)\n - #89975 (Add a regression test for #85921)\n - #89977 (Make Result::as_mut const)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "785ae3c180afff9c3a6de204e0510bfc7c4126b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/785ae3c180afff9c3a6de204e0510bfc7c4126b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f12ac87296ac61ec002e0243e7ad5a50364da35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f12ac87296ac61ec002e0243e7ad5a50364da35", "html_url": "https://github.com/rust-lang/rust/commit/1f12ac87296ac61ec002e0243e7ad5a50364da35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f12ac87296ac61ec002e0243e7ad5a50364da35/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8db8f48ea8c2443e969050fe4b6c829585048d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8db8f48ea8c2443e969050fe4b6c829585048d5c", "html_url": "https://github.com/rust-lang/rust/commit/8db8f48ea8c2443e969050fe4b6c829585048d5c"}, {"sha": "f044a84f5daecf313893a5f47b8662d0e12697e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f044a84f5daecf313893a5f47b8662d0e12697e8", "html_url": "https://github.com/rust-lang/rust/commit/f044a84f5daecf313893a5f47b8662d0e12697e8"}], "stats": {"total": 465, "additions": 343, "deletions": 122}, "files": [{"sha": "500c97e65ef9cc868611037369912944f783430a", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -357,13 +357,13 @@ impl ExprPrecedence {\n     }\n }\n \n-/// In `let p = e`, operators with precedence `<=` this one requires parenthesis in `e`.\n+/// In `let p = e`, operators with precedence `<=` this one requires parentheses in `e`.\n pub fn prec_let_scrutinee_needs_par() -> usize {\n     AssocOp::LAnd.precedence()\n }\n \n /// Suppose we have `let _ = e` and the `order` of `e`.\n-/// Is the `order` such that `e` in `let _ = e` needs parenthesis when it is on the RHS?\n+/// Is the `order` such that `e` in `let _ = e` needs parentheses when it is on the RHS?\n ///\n /// Conversely, suppose that we have `(let _ = a) OP b` and `order` is that of `OP`.\n /// Can we print this as `let _ = a OP b`?"}, {"sha": "793f6504be6f79f030ea168db247a9a4793f1d80", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -113,7 +113,7 @@ impl<'a> AstValidator<'a> {\n         if sess.opts.unstable_features.is_nightly_build() {\n             sess.struct_span_err(expr.span, \"`let` expressions are not supported here\")\n                 .note(\"only supported directly in conditions of `if`- and `while`-expressions\")\n-                .note(\"as well as when nested within `&&` and parenthesis in those conditions\")\n+                .note(\"as well as when nested within `&&` and parentheses in those conditions\")\n                 .emit();\n         } else {\n             sess.struct_span_err(expr.span, \"expected expression, found statement (`let`)\")"}, {"sha": "6d0589b7ba1af7a5ae205dc8a45df5f09ae9257e", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -1675,7 +1675,7 @@ impl<'a> State<'a> {\n         self.print_expr_cond_paren(expr, Self::cond_needs_par(expr))\n     }\n \n-    // Does `expr` need parenthesis when printed in a condition position?\n+    // Does `expr` need parentheses when printed in a condition position?\n     //\n     // These cases need parens due to the parse error observed in #26461: `if return {}`\n     // parses as the erroneous construct `if (return {})`, not `if (return) {}`."}, {"sha": "532f158297000b4d7eda2872c48e853508ad5ba1", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -1168,7 +1168,7 @@ impl<'a> State<'a> {\n         self.print_expr_cond_paren(expr, Self::cond_needs_par(expr) || npals())\n     }\n \n-    // Does `expr` need parenthesis when printed in a condition position?\n+    // Does `expr` need parentheses when printed in a condition position?\n     //\n     // These cases need parens due to the parse error observed in #26461: `if return {}`\n     // parses as the erroneous construct `if (return {})`, not `if (return) {}`."}, {"sha": "da1edcf6fe3b47a590f2c81daea00f1ce1bf1571", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -670,7 +670,7 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// The parenthesis are not needed, and should be removed. This is the\n+    /// The parentheses are not needed, and should be removed. This is the\n     /// preferred style for writing these expressions.\n     pub(super) UNUSED_PARENS,\n     Warn,"}, {"sha": "bac681bd96fb184d331b20cd9c6b20b9c93670e2", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -769,11 +769,16 @@ fn foo(&self) -> Self::T { String::new() }\n     ) -> bool {\n         let assoc = self.associated_item(proj_ty.item_def_id);\n         if let ty::Opaque(def_id, _) = *proj_ty.self_ty().kind() {\n-            let opaque_local_def_id = def_id.expect_local();\n-            let opaque_hir_id = self.hir().local_def_id_to_hir_id(opaque_local_def_id);\n-            let opaque_hir_ty = match &self.hir().expect_item(opaque_hir_id).kind {\n-                hir::ItemKind::OpaqueTy(opaque_hir_ty) => opaque_hir_ty,\n-                _ => bug!(\"The HirId comes from a `ty::Opaque`\"),\n+            let opaque_local_def_id = def_id.as_local();\n+            let opaque_hir_ty = if let Some(opaque_local_def_id) = opaque_local_def_id {\n+                let hir = self.hir();\n+                let opaque_hir_id = hir.local_def_id_to_hir_id(opaque_local_def_id);\n+                match &hir.expect_item(opaque_hir_id).kind {\n+                    hir::ItemKind::OpaqueTy(opaque_hir_ty) => opaque_hir_ty,\n+                    _ => bug!(\"The HirId comes from a `ty::Opaque`\"),\n+                }\n+            } else {\n+                return false;\n             };\n \n             let (trait_ref, assoc_substs) = proj_ty.trait_ref_and_own_substs(self);"}, {"sha": "b11a54d5dcb11e5558437eaf22043cc991b3209e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -350,18 +350,26 @@ pub trait PrettyPrinter<'tcx>:\n             match self.tcx().extern_crate(def_id) {\n                 Some(&ExternCrate { src, dependency_of, span, .. }) => match (src, dependency_of) {\n                     (ExternCrateSource::Extern(def_id), LOCAL_CRATE) => {\n-                        debug!(\"try_print_visible_def_path: def_id={:?}\", def_id);\n-                        return Ok((\n-                            if !span.is_dummy() {\n-                                self.print_def_path(def_id, &[])?\n-                            } else {\n-                                self.path_crate(cnum)?\n-                            },\n-                            true,\n-                        ));\n+                        // NOTE(eddyb) the only reason `span` might be dummy,\n+                        // that we're aware of, is that it's the `std`/`core`\n+                        // `extern crate` injected by default.\n+                        // FIXME(eddyb) find something better to key this on,\n+                        // or avoid ending up with `ExternCrateSource::Extern`,\n+                        // for the injected `std`/`core`.\n+                        if span.is_dummy() {\n+                            return Ok((self.path_crate(cnum)?, true));\n+                        }\n+\n+                        // Disable `try_print_trimmed_def_path` behavior within\n+                        // the `print_def_path` call, to avoid infinite recursion\n+                        // in cases where the `extern crate foo` has non-trivial\n+                        // parents, e.g. it's nested in `impl foo::Trait for Bar`\n+                        // (see also issues #55779 and #87932).\n+                        self = with_no_visible_paths(|| self.print_def_path(def_id, &[]))?;\n+\n+                        return Ok((self, true));\n                     }\n                     (ExternCrateSource::Path, LOCAL_CRATE) => {\n-                        debug!(\"try_print_visible_def_path: def_id={:?}\", def_id);\n                         return Ok((self.path_crate(cnum)?, true));\n                     }\n                     _ => {}"}, {"sha": "81328e09156a18c4399c9f85300c0e86ebf47e9f", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -1342,10 +1342,10 @@ impl<'a> Parser<'a> {\n \n                 self.struct_span_err(\n                     MultiSpan::from_spans(vec![begin_par_sp, self.prev_token.span]),\n-                    \"unexpected parenthesis surrounding `for` loop head\",\n+                    \"unexpected parentheses surrounding `for` loop head\",\n                 )\n                 .multipart_suggestion(\n-                    \"remove parenthesis in `for` loop\",\n+                    \"remove parentheses in `for` loop\",\n                     vec![(begin_par_sp, String::new()), (self.prev_token.span, String::new())],\n                     // With e.g. `for (x) in y)` this would replace `(x) in y)`\n                     // with `x) in y)` which is syntactically invalid."}, {"sha": "e50b983ec621680f962c302772932cd74ff0a06a", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -1258,7 +1258,7 @@ impl<'a> Parser<'a> {\n     /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,\n     /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.\n     /// If the following element can't be a tuple (i.e., it's a function definition), then\n-    /// it's not a tuple struct field), and the contents within the parentheses isn't valid,\n+    /// it's not a tuple struct field), and the contents within the parentheses aren't valid,\n     /// so emit a proper diagnostic.\n     // Public for rustfmt usage.\n     pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {"}, {"sha": "c4569c07db4766e4f38079f8411a8d26067459ae", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -328,7 +328,7 @@ impl<'a> Parser<'a> {\n                     ),\n                 )\n                 .multipart_suggestion(\n-                    \"wrap the expression in parenthesis\",\n+                    \"wrap the expression in parentheses\",\n                     suggs,\n                     Applicability::MachineApplicable,\n                 )\n@@ -349,7 +349,7 @@ impl<'a> Parser<'a> {\n                 \"right curly brace `}` before `else` in a `let...else` statement not allowed\",\n             )\n             .multipart_suggestion(\n-                \"try wrapping the expression in parenthesis\",\n+                \"try wrapping the expression in parentheses\",\n                 suggs,\n                 Applicability::MachineApplicable,\n             )"}, {"sha": "c4c0c17addf107959d8ed95dd909fb3c1f656330", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -430,7 +430,7 @@ impl<'a> Parser<'a> {\n     }\n \n     // Parses the `typeof(EXPR)`.\n-    // To avoid ambiguity, the type is surrounded by parenthesis.\n+    // To avoid ambiguity, the type is surrounded by parentheses.\n     fn parse_typeof_ty(&mut self) -> PResult<'a, TyKind> {\n         self.expect(&token::OpenDelim(token::Paren))?;\n         let expr = self.parse_anon_const_expr()?;"}, {"sha": "1748a9be8e13e80cd0194e76ceafc14e2cb405b5", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -1552,7 +1552,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             matches!(source, PathSource::TupleStruct(..)) || source.is_call();\n         if suggest_only_tuple_variants {\n             // Suggest only tuple variants regardless of whether they have fields and do not\n-            // suggest path with added parenthesis.\n+            // suggest path with added parentheses.\n             let mut suggestable_variants = variants\n                 .iter()\n                 .filter(|(.., kind)| *kind == CtorKind::Fn)"}, {"sha": "5d22e300774d3b624d31a6029ddf99751280705c", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -300,7 +300,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let end = callee_span.shrink_to_hi();\n             err.multipart_suggestion(\n                 \"if you meant to create this closure and immediately call it, surround the \\\n-                closure with parenthesis\",\n+                closure with parentheses\",\n                 vec![(start, \"(\".to_string()), (end, \")\".to_string())],\n                 Applicability::MaybeIncorrect,\n             );\n@@ -383,7 +383,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         call_expr.span,\n                         &format!(\n                             \"`{}` is a unit variant, you need to write it \\\n-                                 without the parenthesis\",\n+                                 without the parentheses\",\n                             path\n                         ),\n                         path.to_string(),"}, {"sha": "1bbdf910e420a55cf318c488851e60e4cf272c0e", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -492,7 +492,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         other_ty: Ty<'tcx>,\n         op: hir::BinOp,\n         is_assign: IsAssign,\n-    ) -> bool /* did we suggest to call a function because of missing parenthesis? */ {\n+    ) -> bool /* did we suggest to call a function because of missing parentheses? */ {\n         err.span_label(span, ty.to_string());\n         if let FnDef(def_id, _) = *ty.kind() {\n             let source_map = self.tcx.sess.source_map();"}, {"sha": "75f2c222ba83461bda54d49e52103c8f489930e7", "filename": "library/core/src/result.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -729,7 +729,8 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn as_mut(&mut self) -> Result<&mut T, &mut E> {\n+    #[rustc_const_unstable(feature = \"const_result\", issue = \"82814\")]\n+    pub const fn as_mut(&mut self) -> Result<&mut T, &mut E> {\n         match *self {\n             Ok(ref mut x) => Ok(x),\n             Err(ref mut x) => Err(x),"}, {"sha": "664875a8773eddf596737137fc4f0cadd3322907", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -2953,9 +2953,6 @@ impl<T> [T] {\n     ///\n     /// The length of `src` must be the same as `self`.\n     ///\n-    /// If `T` implements `Copy`, it can be more performant to use\n-    /// [`copy_from_slice`].\n-    ///\n     /// # Panics\n     ///\n     /// This function will panic if the two slices have different lengths."}, {"sha": "6958f07227afeb88d2f6bd031475c78dd74b1750", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -65,6 +65,7 @@\n #![feature(once_cell)]\n #![feature(unsized_tuple_coercion)]\n #![feature(const_option)]\n+#![feature(const_result)]\n #![feature(integer_atomics)]\n #![feature(int_roundings)]\n #![feature(slice_group_by)]"}, {"sha": "1652c1b83de3383fc36a7b01d06b5d3ddda625d8", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -352,6 +352,29 @@ fn result_const() {\n     assert!(!IS_ERR)\n }\n \n+#[test]\n+const fn result_const_mut() {\n+    let mut result: Result<usize, bool> = Ok(32);\n+\n+    {\n+        let as_mut = result.as_mut();\n+        match as_mut {\n+            Ok(v) => *v = 42,\n+            Err(_) => unreachable!(),\n+        }\n+    }\n+\n+    let mut result_err: Result<usize, bool> = Err(false);\n+\n+    {\n+        let as_mut = result_err.as_mut();\n+        match as_mut {\n+            Ok(_) => unreachable!(),\n+            Err(v) => *v = true,\n+        }\n+    }\n+}\n+\n #[test]\n fn result_opt_conversions() {\n     #[derive(Copy, Clone, Debug, PartialEq)]"}, {"sha": "dc1447b4ae4d157e97367faa551432dfa6ba2718", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -492,10 +492,11 @@ def download_toolchain(self, stage0=True, rustc_channel=None):\n \n     def downloading_llvm(self):\n         opt = self.get_toml('download-ci-llvm', 'llvm')\n-        # This is currently all tier 1 targets (since others may not have CI\n-        # artifacts)\n+        # This is currently all tier 1 targets and tier 2 targets with host tools\n+        # (since others may not have CI artifacts)\n         # https://doc.rust-lang.org/rustc/platform-support.html#tier-1\n         supported_platforms = [\n+            # tier 1\n             \"aarch64-unknown-linux-gnu\",\n             \"i686-pc-windows-gnu\",\n             \"i686-pc-windows-msvc\",\n@@ -504,6 +505,26 @@ def downloading_llvm(self):\n             \"x86_64-apple-darwin\",\n             \"x86_64-pc-windows-gnu\",\n             \"x86_64-pc-windows-msvc\",\n+            # tier 2 with host tools\n+            \"aarch64-apple-darwin\",\n+            \"aarch64-pc-windows-msvc\",\n+            \"aarch64-unknown-linux-musl\",\n+            \"arm-unknown-linux-gnueabi\",\n+            \"arm-unknown-linux-gnueabihf\",\n+            \"armv7-unknown-linux-gnueabihf\",\n+            \"mips-unknown-linux-gnu\",\n+            \"mips64-unknown-linux-gnuabi64\",\n+            \"mips64el-unknown-linux-gnuabi64\",\n+            \"mipsel-unknown-linux-gnu\",\n+            \"powerpc-unknown-linux-gnu\",\n+            \"powerpc64-unknown-linux-gnu\",\n+            \"powerpc64le-unknown-linux-gnu\",\n+            \"riscv64gc-unknown-linux-gnu\",\n+            \"s390x-unknown-linux-gnu\",\n+            \"x86_64-unknown-freebsd\",\n+            \"x86_64-unknown-illumos\",\n+            \"x86_64-unknown-linux-musl\",\n+            \"x86_64-unknown-netbsd\",\n         ]\n         return opt == \"true\" \\\n             or (opt == \"if-available\" and self.build in supported_platforms)"}, {"sha": "9a48b768cb37db8a39c790288b949447c93a5cc7", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -765,10 +765,12 @@ impl Config {\n             config.llvm_from_ci = match llvm.download_ci_llvm {\n                 Some(StringOrBool::String(s)) => {\n                     assert!(s == \"if-available\", \"unknown option `{}` for download-ci-llvm\", s);\n-                    // This is currently all tier 1 targets (since others may not have CI artifacts)\n+                    // This is currently all tier 1 targets and tier 2 targets with host tools\n+                    // (since others may not have CI artifacts)\n                     // https://doc.rust-lang.org/rustc/platform-support.html#tier-1\n                     // FIXME: this is duplicated in bootstrap.py\n                     let supported_platforms = [\n+                        // tier 1\n                         \"aarch64-unknown-linux-gnu\",\n                         \"i686-pc-windows-gnu\",\n                         \"i686-pc-windows-msvc\",\n@@ -777,6 +779,26 @@ impl Config {\n                         \"x86_64-apple-darwin\",\n                         \"x86_64-pc-windows-gnu\",\n                         \"x86_64-pc-windows-msvc\",\n+                        // tier 2 with host tools\n+                        \"aarch64-apple-darwin\",\n+                        \"aarch64-pc-windows-msvc\",\n+                        \"aarch64-unknown-linux-musl\",\n+                        \"arm-unknown-linux-gnueabi\",\n+                        \"arm-unknown-linux-gnueabihf\",\n+                        \"armv7-unknown-linux-gnueabihf\",\n+                        \"mips-unknown-linux-gnu\",\n+                        \"mips64-unknown-linux-gnuabi64\",\n+                        \"mips64el-unknown-linux-gnuabi64\",\n+                        \"mipsel-unknown-linux-gnu\",\n+                        \"powerpc-unknown-linux-gnu\",\n+                        \"powerpc64-unknown-linux-gnu\",\n+                        \"powerpc64le-unknown-linux-gnu\",\n+                        \"riscv64gc-unknown-linux-gnu\",\n+                        \"s390x-unknown-linux-gnu\",\n+                        \"x86_64-unknown-freebsd\",\n+                        \"x86_64-unknown-illumos\",\n+                        \"x86_64-unknown-linux-musl\",\n+                        \"x86_64-unknown-netbsd\",\n                     ];\n                     supported_platforms.contains(&&*config.build.triple)\n                 }"}, {"sha": "05817e1b1d99e7a45bb9c2d581bc7a3dd8273721", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -576,7 +576,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                         rhs,\n                                     });\n                                     continue; // If something other than a Fn ends up\n-                                    // with parenthesis, leave it alone\n+                                    // with parentheses, leave it alone\n                                 }\n                             }\n "}, {"sha": "26bfc4355fa114d4398ee2dc639aa1c9d8ae506f", "filename": "src/test/ui/empty/empty-struct-unit-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -20,7 +20,7 @@ LL |     let e4 = E::Empty4();\n    |              |\n    |              call expression requires function\n    |\n-help: `E::Empty4` is a unit variant, you need to write it without the parenthesis\n+help: `E::Empty4` is a unit variant, you need to write it without the parentheses\n    |\n LL |     let e4 = E::Empty4;\n    |              ~~~~~~~~~\n@@ -41,7 +41,7 @@ LL |     let xe4 = XE::XEmpty4();\n    |               |\n    |               call expression requires function\n    |\n-help: `XE::XEmpty4` is a unit variant, you need to write it without the parenthesis\n+help: `XE::XEmpty4` is a unit variant, you need to write it without the parentheses\n    |\n LL |     let xe4 = XE::XEmpty4;\n    |               ~~~~~~~~~~~"}, {"sha": "db1b3f098374e5bf51a92faf3ca88d60a990a13e", "filename": "src/test/ui/error-codes/E0618.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -9,7 +9,7 @@ LL |     X::Entry();\n    |     |\n    |     call expression requires function\n    |\n-help: `X::Entry` is a unit variant, you need to write it without the parenthesis\n+help: `X::Entry` is a unit variant, you need to write it without the parentheses\n    |\n LL |     X::Entry;\n    |     ~~~~~~~~"}, {"sha": "df59f497d7841128f065c7446e51a178c3a39363", "filename": "src/test/ui/generic-associated-types/issue-85921.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-85921.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-85921.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-85921.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+trait Trait {\n+    type Assoc<'a>;\n+\n+    fn with_assoc(f: impl FnOnce(Self::Assoc<'_>));\n+}\n+\n+impl Trait for () {\n+    type Assoc<'a> = i32;\n+\n+    fn with_assoc(f: impl FnOnce(Self::Assoc<'_>)) {\n+        f(5i32)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "edee6576244722e0d093a3cf49350c4579285c72", "filename": "src/test/ui/let-else/let-else-bool-binop-init.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.stderr?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -4,7 +4,7 @@ error: a `&&` expression cannot be directly assigned in `let...else`\n LL |     let true = true && false else { return };\n    |                ^^^^^^^^^^^^^\n    |\n-help: wrap the expression in parenthesis\n+help: wrap the expression in parentheses\n    |\n LL |     let true = (true && false) else { return };\n    |                +             +\n@@ -15,7 +15,7 @@ error: a `||` expression cannot be directly assigned in `let...else`\n LL |     let true = true || false else { return };\n    |                ^^^^^^^^^^^^^\n    |\n-help: wrap the expression in parenthesis\n+help: wrap the expression in parentheses\n    |\n LL |     let true = (true || false) else { return };\n    |                +             +"}, {"sha": "51051bbd4d8d6c9fb0af145b22572ab11ab46626", "filename": "src/test/ui/let-else/let-else-brace-before-else.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -4,7 +4,7 @@ error: right curly brace `}` before `else` in a `let...else` statement not allow\n LL |     let Some(1) = { Some(1) } else {\n    |                             ^\n    |\n-help: try wrapping the expression in parenthesis\n+help: try wrapping the expression in parentheses\n    |\n LL |     let Some(1) = ({ Some(1) }) else {\n    |                   +           +\n@@ -15,7 +15,7 @@ error: right curly brace `}` before `else` in a `let...else` statement not allow\n LL |     let Some(1) = loop { break Some(1) } else {\n    |                                        ^\n    |\n-help: try wrapping the expression in parenthesis\n+help: try wrapping the expression in parentheses\n    |\n LL |     let Some(1) = (loop { break Some(1) }) else {\n    |                   +                      +\n@@ -26,7 +26,7 @@ error: right curly brace `}` before `else` in a `let...else` statement not allow\n LL |     let 2 = 1 + match 1 { n => n } else {\n    |                                  ^\n    |\n-help: try wrapping the expression in parenthesis\n+help: try wrapping the expression in parentheses\n    |\n LL |     let 2 = 1 + (match 1 { n => n }) else {\n    |                 +                  +\n@@ -37,7 +37,7 @@ error: right curly brace `}` before `else` in a `let...else` statement not allow\n LL |     let Some(1) = unsafe { unsafe_fn() } else {\n    |                                        ^\n    |\n-help: try wrapping the expression in parenthesis\n+help: try wrapping the expression in parentheses\n    |\n LL |     let Some(1) = (unsafe { unsafe_fn() }) else {\n    |                   +                      +"}, {"sha": "053b428bd12cc60131c00550f275c3a20d22681b", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -9,7 +9,7 @@ fn main() {\n \n     for ( elem in vec ) {\n         //~^ ERROR expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n-        //~| ERROR unexpected parenthesis surrounding `for` loop head\n+        //~| ERROR unexpected parentheses surrounding `for` loop head\n         const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types\n     }\n }"}, {"sha": "fa55970dbd129096fff13178bce7d1225027e42f", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -4,13 +4,13 @@ error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n LL |     for ( elem in vec ) {\n    |                ^^ expected one of `)`, `,`, `@`, or `|`\n \n-error: unexpected parenthesis surrounding `for` loop head\n+error: unexpected parentheses surrounding `for` loop head\n   --> $DIR/recover-for-loop-parens-around-head.rs:10:9\n    |\n LL |     for ( elem in vec ) {\n    |         ^             ^\n    |\n-help: remove parenthesis in `for` loop\n+help: remove parentheses in `for` loop\n    |\n LL -     for ( elem in vec ) {\n LL +     for  elem in vec  {"}, {"sha": "ae28c1403753a05e6f0edc1fbbe358042350becc", "filename": "src/test/ui/pattern/issue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -5,7 +5,7 @@\n // the tuple struct pattern, has 0 fields, but requires 1 field.\n //\n // In emitting E0023, we try to see if this is a case of e.g., `Some(a, b, c)` but where\n-// the scrutinee was of type `Some((a, b, c))`, and suggest that parenthesis be added.\n+// the scrutinee was of type `Some((a, b, c))`, and suggest that parentheses be added.\n //\n // However, we did not account for the expected type being different than the tuple pattern type.\n // This caused an issue when the tuple pattern type (`P<T>`) was generic."}, {"sha": "06c52befd52b2daa8694f9c2d12af234bae2e67f", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -338,7 +338,7 @@ LL |         let _ = Z::Unit();\n    |                 |\n    |                 call expression requires function\n    |\n-help: `Z::Unit` is a unit variant, you need to write it without the parenthesis\n+help: `Z::Unit` is a unit variant, you need to write it without the parentheses\n    |\n LL |         let _ = Z::Unit;\n    |                 ~~~~~~~\n@@ -372,7 +372,7 @@ LL |     let _: E = m::E::Unit();\n    |                |\n    |                call expression requires function\n    |\n-help: `m::E::Unit` is a unit variant, you need to write it without the parenthesis\n+help: `m::E::Unit` is a unit variant, you need to write it without the parentheses\n    |\n LL |     let _: E = m::E::Unit;\n    |                ~~~~~~~~~~\n@@ -406,7 +406,7 @@ LL |     let _: E = E::Unit();\n    |                |\n    |                call expression requires function\n    |\n-help: `E::Unit` is a unit variant, you need to write it without the parenthesis\n+help: `E::Unit` is a unit variant, you need to write it without the parentheses\n    |\n LL |     let _: E = E::Unit;\n    |                ~~~~~~~"}, {"sha": "513b473c4de436f5b96e79b75a2f064d01c58acf", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -16,7 +16,7 @@ LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:33:9\n@@ -25,7 +25,7 @@ LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:34:9\n@@ -34,7 +34,7 @@ LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:36:9\n@@ -43,7 +43,7 @@ LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:44:9\n@@ -52,7 +52,7 @@ LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:48:16\n@@ -61,7 +61,7 @@ LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:49:17\n@@ -70,7 +70,7 @@ LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:50:25\n@@ -79,7 +79,7 @@ LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:51:25\n@@ -88,7 +88,7 @@ LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:54:12\n@@ -97,7 +97,7 @@ LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:57:15\n@@ -106,7 +106,7 @@ LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:59:11\n@@ -115,7 +115,7 @@ LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:61:9\n@@ -124,7 +124,7 @@ LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:65:8\n@@ -133,7 +133,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:69:8\n@@ -142,7 +142,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:76:8\n@@ -151,7 +151,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:84:8\n@@ -160,7 +160,7 @@ LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:90:19\n@@ -169,7 +169,7 @@ LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:94:12\n@@ -178,7 +178,7 @@ LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:97:12\n@@ -187,7 +187,7 @@ LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:98:12\n@@ -196,7 +196,7 @@ LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:100:12\n@@ -205,7 +205,7 @@ LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:108:12\n@@ -214,7 +214,7 @@ LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:112:19\n@@ -223,7 +223,7 @@ LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:113:20\n@@ -232,7 +232,7 @@ LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:114:28\n@@ -241,7 +241,7 @@ LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:115:28\n@@ -250,7 +250,7 @@ LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:118:15\n@@ -259,7 +259,7 @@ LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:121:18\n@@ -268,7 +268,7 @@ LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:123:14\n@@ -277,7 +277,7 @@ LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:125:12\n@@ -286,7 +286,7 @@ LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:129:11\n@@ -295,7 +295,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:133:11\n@@ -304,7 +304,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:140:11\n@@ -313,7 +313,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:148:11\n@@ -322,7 +322,7 @@ LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:154:22\n@@ -331,7 +331,7 @@ LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:168:6\n@@ -340,7 +340,7 @@ LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:170:6\n@@ -349,7 +349,7 @@ LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:171:6\n@@ -358,7 +358,7 @@ LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:173:6\n@@ -367,7 +367,7 @@ LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:181:6\n@@ -376,7 +376,7 @@ LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:185:13\n@@ -385,7 +385,7 @@ LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:186:14\n@@ -394,7 +394,7 @@ LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:187:22\n@@ -403,7 +403,7 @@ LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:190:9\n@@ -412,7 +412,7 @@ LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:192:12\n@@ -421,7 +421,7 @@ LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:193:8\n@@ -430,7 +430,7 @@ LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:194:6\n@@ -439,7 +439,7 @@ LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:196:6\n@@ -448,7 +448,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:200:6\n@@ -457,7 +457,7 @@ LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:204:6\n@@ -466,7 +466,7 @@ LL |     &let 0 = 0\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:215:17\n@@ -475,7 +475,7 @@ LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:219:17\n@@ -484,7 +484,7 @@ LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:223:17\n@@ -493,7 +493,7 @@ LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:233:17\n@@ -502,7 +502,7 @@ LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n warning: the feature `let_chains` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/disallowed-positions.rs:20:12"}, {"sha": "1ce9841c1a8c56bf179ae857e29b9be6982f30a4", "filename": "src/test/ui/rust-2018/uniform-paths/auxiliary/issue-55779-extern-trait.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fauxiliary%2Fissue-55779-extern-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fauxiliary%2Fissue-55779-extern-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fauxiliary%2Fissue-55779-extern-trait.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -0,0 +1 @@\n+pub trait Trait { fn no_op(&self); }"}, {"sha": "8fd2d77be3910475162bce8b5afd3619b3a2da59", "filename": "src/test/ui/rust-2018/uniform-paths/auxiliary/issue-87932-a.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fauxiliary%2Fissue-87932-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fauxiliary%2Fissue-87932-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fauxiliary%2Fissue-87932-a.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -0,0 +1,3 @@\n+pub trait Deserialize {\n+    fn deserialize();\n+}"}, {"sha": "0af17a89b17bfcc8153a87799e11520b8dcfaee5", "filename": "src/test/ui/rust-2018/uniform-paths/issue-55779.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-55779.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-55779.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-55779.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -0,0 +1,29 @@\n+// run-pass\n+// edition:2018\n+// aux-crate:issue_55779_extern_trait=issue-55779-extern-trait.rs\n+\n+use issue_55779_extern_trait::Trait;\n+\n+struct Local;\n+struct Helper;\n+\n+impl Trait for Local {\n+    fn no_op(&self)\n+    {\n+        // (Unused) extern crate declaration necessary to reproduce bug\n+        extern crate issue_55779_extern_trait;\n+\n+        // This one works\n+        // impl Trait for Helper { fn no_op(&self) { } }\n+\n+        // This one infinite-loops\n+        const _IMPL_SERIALIZE_FOR_HELPER: () = {\n+            // (extern crate can also appear here to reproduce bug,\n+            // as in originating example from serde)\n+            impl Trait for Helper { fn no_op(&self) { } }\n+        };\n+\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "70a641d8a47ad11f1020554a245f523dae6950cb", "filename": "src/test/ui/rust-2018/uniform-paths/issue-87932.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -0,0 +1,15 @@\n+// edition:2018\n+// aux-crate:issue_87932_a=issue-87932-a.rs\n+\n+pub struct A {}\n+\n+impl issue_87932_a::Deserialize for A {\n+    fn deserialize() {\n+        extern crate issue_87932_a as _a;\n+    }\n+}\n+\n+fn main() {\n+    A::deserialize();\n+    //~^ ERROR no function or associated item named `deserialize` found for struct `A`\n+}"}, {"sha": "53272abccbbf01bdf6da8a5ea68959f20721fe2e", "filename": "src/test/ui/rust-2018/uniform-paths/issue-87932.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.stderr?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -0,0 +1,18 @@\n+error[E0599]: no function or associated item named `deserialize` found for struct `A` in the current scope\n+  --> $DIR/issue-87932.rs:13:8\n+   |\n+LL | pub struct A {}\n+   | ------------ function or associated item `deserialize` not found for this\n+...\n+LL |     A::deserialize();\n+   |        ^^^^^^^^^^^ function or associated item not found in `A`\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL | use <crate::A as issue_87932_a::Deserialize>::deserialize::_a::Deserialize;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "81f2e498fe5de86e415669c1876aef889155322b", "filename": "src/test/ui/suggestions/suggest-on-bare-closure-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-on-bare-closure-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-on-bare-closure-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-on-bare-closure-call.stderr?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -6,7 +6,7 @@ LL |     let _ = ||{}();\n    |               |\n    |               call expression requires function\n    |\n-help: if you meant to create this closure and immediately call it, surround the closure with parenthesis\n+help: if you meant to create this closure and immediately call it, surround the closure with parentheses\n    |\n LL |     let _ = (||{})();\n    |             +    +"}, {"sha": "e918551020c313ea09702b8f6abd877311c9cdb0", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -27,7 +27,7 @@ LL |     Alias::Unit();\n    |     |\n    |     call expression requires function\n    |\n-help: `Alias::Unit` is a unit variant, you need to write it without the parenthesis\n+help: `Alias::Unit` is a unit variant, you need to write it without the parentheses\n    |\n LL |     Alias::Unit;\n    |     ~~~~~~~~~~~"}, {"sha": "2b6ce49e7e2d7bcc1efdfee652bac48a57488df3", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -0,0 +1,24 @@\n+// edition:2018\n+\n+#![feature(type_alias_impl_trait)]\n+\n+use std::future::Future;\n+\n+type G<'a, T> = impl Future<Output = ()>;\n+//~^ ERROR: type mismatch resolving `<impl Future as Future>::Output == ()`\n+//~| ERROR: the trait bound `T: Trait` is not satisfied\n+\n+trait Trait {\n+    type F: Future<Output = ()>;\n+\n+    fn f(&self) -> Self::F;\n+\n+    fn g<'a>(&'a self) -> G<'a, Self>\n+    where\n+        Self: Sized,\n+    {\n+        async move { self.f().await }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "accc84d30a7bde3a954866eb7e9c0432ae3337a1", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -0,0 +1,34 @@\n+error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+  --> $DIR/issue-89686.rs:7:17\n+   |\n+LL | type G<'a, T> = impl Future<Output = ()>;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+...\n+LL |         async move { self.f().await }\n+   |                    ------------------ the found `async` block\n+   |\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl Future as Future>::Output`\n+   = help: consider constraining the associated type `<impl Future as Future>::Output` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0277]: the trait bound `T: Trait` is not satisfied\n+  --> $DIR/issue-89686.rs:7:17\n+   |\n+LL | type G<'a, T> = impl Future<Output = ()>;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | type G<'a, T: Trait> = impl Future<Output = ()>;\n+   |             +++++++\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0271, E0277.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "42478e3416ece7a2549529503c03943b25fbaadf", "filename": "src/tools/clippy/clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -98,7 +98,7 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n                 reindent_multiline(or_body_snippet.into(), true, Some(indent));\n \n             let suggestion = if scrutinee.span.from_expansion() {\n-                    // we don't want parenthesis around macro, e.g. `(some_macro!()).unwrap_or(0)`\n+                    // we don't want parentheses around macro, e.g. `(some_macro!()).unwrap_or(0)`\n                     sugg::Sugg::hir_with_macro_callsite(cx, scrutinee, \"..\")\n                 }\n                 else {"}, {"sha": "01fb944cc36f64dcfd266726ce70bf4aa6ba5418", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -16,10 +16,10 @@ use std::convert::TryInto;\n use std::fmt::Display;\n use std::ops::{Add, Neg, Not, Sub};\n \n-/// A helper type to build suggestion correctly handling parenthesis.\n+/// A helper type to build suggestion correctly handling parentheses.\n #[derive(Clone, PartialEq)]\n pub enum Sugg<'a> {\n-    /// An expression that never needs parenthesis such as `1337` or `[0; 42]`.\n+    /// An expression that never needs parentheses such as `1337` or `[0; 42]`.\n     NonParen(Cow<'a, str>),\n     /// An expression that does not fit in other variants.\n     MaybeParen(Cow<'a, str>),\n@@ -283,7 +283,7 @@ impl<'a> Sugg<'a> {\n         }\n     }\n \n-    /// Adds parenthesis to any expression that might need them. Suitable to the\n+    /// Adds parentheses to any expression that might need them. Suitable to the\n     /// `self` argument of a method call\n     /// (e.g., to build `bar.foo()` or `(1 + 2).foo()`).\n     pub fn maybe_par(self) -> Self {"}, {"sha": "05d6c56f2aca0a5dd63a3d635468800d0431a5e3", "filename": "src/tools/clippy/tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.fixed?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -74,10 +74,10 @@ fn result_unwrap_or() {\n     let a = Ok::<i32, &str>(1);\n     a.unwrap_or(42);\n \n-    // int case, suggestion must surround Result expr with parenthesis\n+    // int case, suggestion must surround Result expr with parentheses\n     (Ok(1) as Result<i32, &str>).unwrap_or(42);\n \n-    // method call case, suggestion must not surround Result expr `s.method()` with parenthesis\n+    // method call case, suggestion must not surround Result expr `s.method()` with parentheses\n     struct S {}\n     impl S {\n         fn method(self) -> Option<i32> {"}, {"sha": "09f62c69b71de15b832c836a03c21829a78d501f", "filename": "src/tools/clippy/tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -95,13 +95,13 @@ fn result_unwrap_or() {\n         Err(_) => 42,\n     };\n \n-    // int case, suggestion must surround Result expr with parenthesis\n+    // int case, suggestion must surround Result expr with parentheses\n     match Ok(1) as Result<i32, &str> {\n         Ok(i) => i,\n         Err(_) => 42,\n     };\n \n-    // method call case, suggestion must not surround Result expr `s.method()` with parenthesis\n+    // method call case, suggestion must not surround Result expr `s.method()` with parentheses\n     struct S {}\n     impl S {\n         fn method(self) -> Option<i32> {"}, {"sha": "70ff08f36551838743b29d059c5d207a6f1593cd", "filename": "src/tools/clippy/tests/ui/useless_conversion.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.fixed?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -66,7 +66,7 @@ fn main() {\n     let _ = vec![1, 2, 3].into_iter();\n     let _: String = format!(\"Hello {}\", \"world\");\n \n-    // keep parenthesis around `a + b` for suggestion (see #4750)\n+    // keep parentheses around `a + b` for suggestion (see #4750)\n     let a: i32 = 1;\n     let b: i32 = 1;\n     let _ = (a + b) * 3;"}, {"sha": "f2444a8f436bf1a699e45cdee099846a261f9568", "filename": "src/tools/clippy/tests/ui/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f12ac87296ac61ec002e0243e7ad5a50364da35/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.rs?ref=1f12ac87296ac61ec002e0243e7ad5a50364da35", "patch": "@@ -66,7 +66,7 @@ fn main() {\n     let _ = vec![1, 2, 3].into_iter().into_iter();\n     let _: String = format!(\"Hello {}\", \"world\").into();\n \n-    // keep parenthesis around `a + b` for suggestion (see #4750)\n+    // keep parentheses around `a + b` for suggestion (see #4750)\n     let a: i32 = 1;\n     let b: i32 = 1;\n     let _ = i32::from(a + b) * 3;"}]}