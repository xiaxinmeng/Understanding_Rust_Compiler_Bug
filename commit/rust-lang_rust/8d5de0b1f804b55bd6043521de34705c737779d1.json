{"sha": "8d5de0b1f804b55bd6043521de34705c737779d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNWRlMGIxZjgwNGI1NWJkNjA0MzUyMWRlMzQ3MDVjNzM3Nzc5ZDE=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-09-24T03:25:23Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-09-25T02:08:07Z"}, "message": "Handle locals in closures properly.", "tree": {"sha": "da316d2916c765d7d19ef636d4a939e864e9c659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da316d2916c765d7d19ef636d4a939e864e9c659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d5de0b1f804b55bd6043521de34705c737779d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5de0b1f804b55bd6043521de34705c737779d1", "html_url": "https://github.com/rust-lang/rust/commit/8d5de0b1f804b55bd6043521de34705c737779d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d5de0b1f804b55bd6043521de34705c737779d1/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "218189536d95c12d7abbe01af3725c84a628bc51", "url": "https://api.github.com/repos/rust-lang/rust/commits/218189536d95c12d7abbe01af3725c84a628bc51", "html_url": "https://github.com/rust-lang/rust/commit/218189536d95c12d7abbe01af3725c84a628bc51"}], "stats": {"total": 206, "additions": 83, "deletions": 123}, "files": [{"sha": "638591eb1fb6977bd506fd46babad9642a687994", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d5de0b1f804b55bd6043521de34705c737779d1/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5de0b1f804b55bd6043521de34705c737779d1/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=8d5de0b1f804b55bd6043521de34705c737779d1", "patch": "@@ -215,7 +215,7 @@ impl DefIndexAddressSpace {\n     }\n }\n \n-/// A DefId identifies a particular *definition*, by combining a crate\n+/// A `DefId` identifies a particular *definition*, by combining a crate\n /// index and a def index.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n pub struct DefId {"}, {"sha": "1e9936fdc13fcbf503f0447f40cba2bedec89ced", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 59, "deletions": 97, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/8d5de0b1f804b55bd6043521de34705c737779d1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5de0b1f804b55bd6043521de34705c737779d1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=8d5de0b1f804b55bd6043521de34705c737779d1", "patch": "@@ -139,7 +139,6 @@ pub struct LoweringContext<'a> {\n     type_def_lifetime_params: DefIdMap<usize>,\n \n     current_hir_id_owner: Vec<(DefIndex, u32)>,\n-    current_impl_trait_owner: Vec<DefId>,\n     item_local_id_counters: NodeMap<u32>,\n     node_id_to_hir_id: IndexVec<NodeId, hir::HirId>,\n }\n@@ -233,7 +232,6 @@ pub fn lower_crate(\n         anonymous_lifetime_mode: AnonymousLifetimeMode::PassThrough,\n         type_def_lifetime_params: DefIdMap(),\n         current_hir_id_owner: vec![(CRATE_DEF_INDEX, 0)],\n-        current_impl_trait_owner: vec![],\n         item_local_id_counters: NodeMap(),\n         node_id_to_hir_id: IndexVec::new(),\n         is_generator: false,\n@@ -392,17 +390,6 @@ impl<'a> LoweringContext<'a> {\n         }\n \n         impl<'lcx, 'interner> ItemLowerer<'lcx, 'interner> {\n-            fn with_impl_trait_owner<F, T>(&mut self, def_id: DefId, f: F) -> T\n-            where\n-                F: FnOnce(&mut Self) -> T,\n-            {\n-                self.lctx.current_impl_trait_owner.push(def_id);\n-                let ret = f(self);\n-                self.lctx.current_impl_trait_owner.pop();\n-\n-                ret\n-            }\n-\n             fn with_trait_impl_ref<F>(&mut self, trait_impl_ref: &Option<TraitRef>, f: F)\n             where\n                 F: FnOnce(&mut Self),\n@@ -440,12 +427,7 @@ impl<'a> LoweringContext<'a> {\n \n                     self.lctx.with_parent_impl_lifetime_defs(&item_generics, |this| {\n                         let this = &mut ItemLowerer { lctx: this };\n-                        if let ItemKind::Fn(..) = item.node {\n-                            let fn_def_id = this.lctx.resolver.definitions().local_def_id(item.id);\n-                            this.with_impl_trait_owner(fn_def_id, |this| {\n-                                visit::walk_item(this, item)\n-                            });\n-                        } else if let ItemKind::Impl(.., ref opt_trait_ref, _, _) = item.node {\n+                        if let ItemKind::Impl(.., ref opt_trait_ref, _, _) = item.node {\n                             this.with_trait_impl_ref(opt_trait_ref, |this| {\n                                 visit::walk_item(this, item)\n                             });\n@@ -573,17 +555,6 @@ impl<'a> LoweringContext<'a> {\n         ret\n     }\n \n-    fn with_impl_trait_owner<F, T>(&mut self, def_id: DefId, f: F) -> T\n-    where\n-        F: FnOnce(&mut LoweringContext) -> T,\n-    {\n-        self.current_impl_trait_owner.push(def_id);\n-        let ret = f(self);\n-        self.current_impl_trait_owner.pop();\n-\n-        ret\n-    }\n-\n     /// This method allocates a new HirId for the given NodeId and stores it in\n     /// the LoweringContext's NodeId => HirId map.\n     /// Take care not to call this method if the resulting HirId is then not\n@@ -1939,15 +1910,15 @@ impl<'a> LoweringContext<'a> {\n                 visitor.visit_ty(ty);\n             }\n         }\n-        let impl_trait_owner_id = self.current_impl_trait_owner.last().map(|id| *id);\n+        let parent_def_id = DefId::local(self.current_hir_id_owner.last().unwrap().0);\n         (P(hir::Local {\n             id: node_id,\n             hir_id,\n             ty: l.ty\n                 .as_ref()\n                 .map(|t| self.lower_ty(t,\n                     if self.sess.features_untracked().impl_trait_in_bindings {\n-                        ImplTraitContext::Existential(impl_trait_owner_id)\n+                        ImplTraitContext::Existential(Some(parent_def_id))\n                     } else {\n                         ImplTraitContext::Disallowed\n                     }\n@@ -2213,8 +2184,7 @@ impl<'a> LoweringContext<'a> {\n             span, Some(fn_def_id), return_impl_trait_id, |this| {\n             let output_ty = match output {\n                 FunctionRetTy::Ty(ty) => {\n-                    let impl_trait_owner_id = *this.current_impl_trait_owner.last().unwrap();\n-                    this.lower_ty(ty, ImplTraitContext::Existential(Some(impl_trait_owner_id)))\n+                    this.lower_ty(ty, ImplTraitContext::Existential(Some(fn_def_id)))\n                 }\n                 FunctionRetTy::Default(span) => {\n                     let LoweredNodeId { node_id, hir_id } = this.next_id();\n@@ -2738,33 +2708,31 @@ impl<'a> LoweringContext<'a> {\n             }\n             ItemKind::Fn(ref decl, header, ref generics, ref body) => {\n                 let fn_def_id = self.resolver.definitions().local_def_id(id);\n-                self.with_impl_trait_owner(fn_def_id, |this| {\n-                    this.with_new_scopes(|this| {\n-                        // Note: we don't need to change the return type from `T` to\n-                        // `impl Future<Output = T>` here because lower_body\n-                        // only cares about the input argument patterns in the function\n-                        // declaration (decl), not the return types.\n-                        let body_id = this.lower_async_body(decl, header.asyncness, body);\n-\n-                        let (generics, fn_decl) = this.add_in_band_defs(\n-                            generics,\n-                            fn_def_id,\n-                            AnonymousLifetimeMode::PassThrough,\n-                            |this, idty| this.lower_fn_decl(\n-                                decl,\n-                                Some((fn_def_id, idty)),\n-                                true,\n-                                header.asyncness.opt_return_id()\n-                            ),\n-                        );\n+                self.with_new_scopes(|this| {\n+                    // Note: we don't need to change the return type from `T` to\n+                    // `impl Future<Output = T>` here because lower_body\n+                    // only cares about the input argument patterns in the function\n+                    // declaration (decl), not the return types.\n+                    let body_id = this.lower_async_body(decl, header.asyncness, body);\n+\n+                    let (generics, fn_decl) = this.add_in_band_defs(\n+                        generics,\n+                        fn_def_id,\n+                        AnonymousLifetimeMode::PassThrough,\n+                        |this, idty| this.lower_fn_decl(\n+                            decl,\n+                            Some((fn_def_id, idty)),\n+                            true,\n+                            header.asyncness.opt_return_id()\n+                        ),\n+                    );\n \n-                        hir::ItemKind::Fn(\n-                            fn_decl,\n-                            this.lower_fn_header(header),\n-                            generics,\n-                            body_id,\n-                        )\n-                    })\n+                    hir::ItemKind::Fn(\n+                        fn_decl,\n+                        this.lower_fn_header(header),\n+                        generics,\n+                        body_id,\n+                    )\n                 })\n             }\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n@@ -3083,33 +3051,29 @@ impl<'a> LoweringContext<'a> {\n                 ),\n             ),\n             TraitItemKind::Method(ref sig, None) => {\n-                self.with_impl_trait_owner(trait_item_def_id, |this| {\n-                    let names = this.lower_fn_args_to_names(&sig.decl);\n-                    let (generics, sig) = this.lower_method_sig(\n-                        &i.generics,\n-                        sig,\n-                        trait_item_def_id,\n-                        false,\n-                        None,\n-                    );\n-                    (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n-                })\n+                let names = self.lower_fn_args_to_names(&sig.decl);\n+                let (generics, sig) = self.lower_method_sig(\n+                    &i.generics,\n+                    sig,\n+                    trait_item_def_id,\n+                    false,\n+                    None,\n+                );\n+                (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n             }\n             TraitItemKind::Method(ref sig, Some(ref body)) => {\n-                self.with_impl_trait_owner(trait_item_def_id, |this| {\n-                    let body_id = this.lower_body(Some(&sig.decl), |this| {\n-                        let body = this.lower_block(body, false);\n-                        this.expr_block(body, ThinVec::new())\n-                    });\n-                    let (generics, sig) = this.lower_method_sig(\n-                        &i.generics,\n-                        sig,\n-                        trait_item_def_id,\n-                        false,\n-                        None,\n-                    );\n-                    (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n-                })\n+                let body_id = self.lower_body(Some(&sig.decl), |this| {\n+                    let body = this.lower_block(body, false);\n+                    this.expr_block(body, ThinVec::new())\n+                });\n+                let (generics, sig) = self.lower_method_sig(\n+                    &i.generics,\n+                    sig,\n+                    trait_item_def_id,\n+                    false,\n+                    None,\n+                );\n+                (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n             }\n             TraitItemKind::Type(ref bounds, ref default) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n@@ -3175,18 +3139,16 @@ impl<'a> LoweringContext<'a> {\n                 )\n             }\n             ImplItemKind::Method(ref sig, ref body) => {\n-                self.with_impl_trait_owner(impl_item_def_id, |this| {\n-                    let body_id = this.lower_async_body(&sig.decl, sig.header.asyncness, body);\n-                    let impl_trait_return_allow = !this.is_in_trait_impl;\n-                    let (generics, sig) = this.lower_method_sig(\n-                        &i.generics,\n-                        sig,\n-                        impl_item_def_id,\n-                        impl_trait_return_allow,\n-                        sig.header.asyncness.opt_return_id(),\n-                    );\n-                    (generics, hir::ImplItemKind::Method(sig, body_id))\n-                })\n+                let body_id = self.lower_async_body(&sig.decl, sig.header.asyncness, body);\n+                let impl_trait_return_allow = !self.is_in_trait_impl;\n+                let (generics, sig) = self.lower_method_sig(\n+                    &i.generics,\n+                    sig,\n+                    impl_item_def_id,\n+                    impl_trait_return_allow,\n+                    sig.header.asyncness.opt_return_id(),\n+                );\n+                (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n             ImplItemKind::Type(ref ty) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::Disallowed),"}, {"sha": "88d375742670d2e68dbfe0b2f4d44842328b18b6", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d5de0b1f804b55bd6043521de34705c737779d1/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5de0b1f804b55bd6043521de34705c737779d1/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=8d5de0b1f804b55bd6043521de34705c737779d1", "patch": "@@ -98,9 +98,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ///\n     /// # Parameters\n     ///\n-    /// - `parent_def_id` -- we will only instantiate opaque types\n-    ///   with this parent. This is typically the def-id of the function\n-    ///   in whose return type opaque types are being instantiated.\n+    /// - `parent_def_id` -- the def-id of the function in which the opaque type\n+    ///   is defined\n     /// - `body_id` -- the body-id with which the resulting obligations should\n     ///   be associated\n     /// - `param_env` -- the in-scope parameter environment to be used for\n@@ -113,11 +112,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         value: &T,\n     ) -> InferOk<'tcx, (T, OpaqueTypeMap<'tcx>)> {\n-        debug!(\n-            \"instantiate_opaque_types(value={:?},\n-            parent_def_id={:?}, body_id={:?},\n-            param_env={:?})\",\n-            value, parent_def_id, body_id, param_env,\n+        debug!(\"instantiate_opaque_types(value={:?}, parent_def_id={:?}, body_id={:?}, \\\n+                param_env={:?})\",\n+               value, parent_def_id, body_id, param_env,\n         );\n         let mut instantiator = Instantiator {\n             infcx: self,"}, {"sha": "70687d0efa4025e168082fff1bb9748d25b3f0a0", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d5de0b1f804b55bd6043521de34705c737779d1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5de0b1f804b55bd6043521de34705c737779d1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=8d5de0b1f804b55bd6043521de34705c737779d1", "patch": "@@ -898,7 +898,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n-        if let Err(terr) = self.sub_types(sub, sup, locations) {\n+        if let Err(terr) = self.sub_types(sub, sup, locations, category) {\n             if let TyKind::Opaque(..) = sup.sty {\n                 return self.eq_opaque_type_and_type(sub, sup, locations, category);\n             } else {\n@@ -954,18 +954,19 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         let infcx = self.infcx;\n         let tcx = infcx.tcx;\n         let param_env = self.param_env;\n-        let mir_def_id = self.mir_def_id;\n+        let parent_def_id = infcx.tcx.closure_base_def_id(self.mir_def_id);\n         let opaque_type_map =\n             self.fully_perform_op(\n                 locations,\n+                category,\n                 CustomTypeOp::new(\n                     |infcx| {\n                         let mut obligations = ObligationAccumulator::default();\n \n                         let dummy_body_id = ObligationCause::dummy().body_id;\n                         let (output_ty, opaque_type_map) =\n                             obligations.add(infcx.instantiate_opaque_types(\n-                                mir_def_id,\n+                                parent_def_id,\n                                 dummy_body_id,\n                                 param_env,\n                                 &anon_ty,\n@@ -1028,7 +1029,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             for (opaque_def_id, opaque_decl) in opaque_type_map {\n                 self.fully_perform_op(\n                     locations,\n-                    category,\n+                    ConstraintCategory::OpaqueType,\n                     CustomTypeOp::new(\n                         |_cx| {\n                             infcx.constrain_opaque_type("}, {"sha": "5f6cc4c60c38c7284aaa70d64bf180308a15a386", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8d5de0b1f804b55bd6043521de34705c737779d1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5de0b1f804b55bd6043521de34705c737779d1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8d5de0b1f804b55bd6043521de34705c737779d1", "patch": "@@ -821,8 +821,8 @@ fn has_typeck_tables<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn used_trait_imports<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                              def_id: DefId)\n-                              -> Lrc<DefIdSet> {\n+                                def_id: DefId)\n+                                -> Lrc<DefIdSet> {\n     tcx.typeck_tables_of(def_id).used_trait_imports.clone()\n }\n \n@@ -870,7 +870,6 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n \n             let revealed_ty = if tcx.features().impl_trait_in_bindings {\n-                fcx.require_type_is_sized(expected_type, body.value.span, traits::SizedReturnType);\n                 fcx.instantiate_opaque_types_from_value(\n                     id,\n                     &expected_type\n@@ -965,7 +964,6 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n         let local_ty = match local.ty {\n             Some(ref ty) => {\n                 let o_ty = self.fcx.to_ty(&ty);\n-                debug!(\"visit_local: ty.hir_id={:?} o_ty={:?} c_ty={:?}\", ty.hir_id, o_ty, 1);\n \n                 let revealed_ty = if self.fcx.tcx.features().impl_trait_in_bindings {\n                     self.fcx.instantiate_opaque_types_from_value(\n@@ -977,6 +975,8 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n                 };\n \n                 let c_ty = self.fcx.inh.infcx.canonicalize_response(&revealed_ty);\n+                debug!(\"visit_local: ty.hir_id={:?} o_ty={:?} revealed_ty={:?} c_ty={:?}\",\n+                       ty.hir_id, o_ty, revealed_ty, c_ty);\n                 self.fcx.tables.borrow_mut().user_provided_tys_mut().insert(ty.hir_id, c_ty);\n \n                 Some(LocalTy { decl_ty: o_ty, revealed_ty })\n@@ -1074,7 +1074,9 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         fcx.yield_ty = Some(yield_ty);\n     }\n \n-    GatherLocalsVisitor { fcx: &fcx, parent_id: fn_id, }.visit_body(body);\n+    let outer_def_id = fcx.tcx.closure_base_def_id(fcx.tcx.hir.local_def_id(fn_id));\n+    let outer_node_id = fcx.tcx.hir.as_local_node_id(outer_def_id).unwrap();\n+    GatherLocalsVisitor { fcx: &fcx, parent_id: outer_node_id, }.visit_body(body);\n \n     // Add formal parameters.\n     for (arg_ty, arg) in fn_sig.inputs().iter().zip(&body.arguments) {\n@@ -2265,19 +2267,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// `InferCtxt::instantiate_opaque_types` for more details.\n     fn instantiate_opaque_types_from_value<T: TypeFoldable<'tcx>>(\n         &self,\n-        fn_id: ast::NodeId,\n+        parent_id: ast::NodeId,\n         value: &T,\n     ) -> T {\n-        let fn_def_id = self.tcx.hir.local_def_id(fn_id);\n-        debug!(\n-            \"instantiate_opaque_types_from_value(fn_def_id={:?}, value={:?})\",\n-            fn_def_id,\n-            value\n-        );\n+        let parent_def_id = self.tcx.hir.local_def_id(parent_id);\n+        debug!(\"instantiate_opaque_types_from_value(parent_def_id={:?}, value={:?})\",\n+               parent_def_id,\n+               value);\n \n         let (value, opaque_type_map) = self.register_infer_ok_obligations(\n             self.instantiate_opaque_types(\n-                fn_def_id,\n+                parent_def_id,\n                 self.body_id,\n                 self.param_env,\n                 value,"}]}