{"sha": "c9c8d6fdd145db125decffed44de396119a01ca9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YzhkNmZkZDE0NWRiMTI1ZGVjZmZlZDQ0ZGUzOTYxMTlhMDFjYTk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-21T22:55:17Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-21T22:55:17Z"}, "message": "Merge pull request #4563 from cpeterso/fix-doc-tests\n\nFix various doc tests", "tree": {"sha": "099d8867e832b7e6ee45858389a226858ae104a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/099d8867e832b7e6ee45858389a226858ae104a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9c8d6fdd145db125decffed44de396119a01ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c8d6fdd145db125decffed44de396119a01ca9", "html_url": "https://github.com/rust-lang/rust/commit/c9c8d6fdd145db125decffed44de396119a01ca9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9c8d6fdd145db125decffed44de396119a01ca9/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "885f0a2eab092cc69d9dfed347778da0ad582055", "url": "https://api.github.com/repos/rust-lang/rust/commits/885f0a2eab092cc69d9dfed347778da0ad582055", "html_url": "https://github.com/rust-lang/rust/commit/885f0a2eab092cc69d9dfed347778da0ad582055"}, {"sha": "b3cbe9e3c1115239997e806498fa5bc7eea7bc98", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3cbe9e3c1115239997e806498fa5bc7eea7bc98", "html_url": "https://github.com/rust-lang/rust/commit/b3cbe9e3c1115239997e806498fa5bc7eea7bc98"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "ab9981bcabe4dad296f0eefae86f2095f1279dd2", "filename": "doc/rust.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9c8d6fdd145db125decffed44de396119a01ca9/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/c9c8d6fdd145db125decffed44de396119a01ca9/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=c9c8d6fdd145db125decffed44de396119a01ca9", "patch": "@@ -594,16 +594,16 @@ and may optionally begin with any number of `attributes` that apply to the conta\n Atributes on the anonymous crate module define important metadata that influences\n the behavior of the compiler.\n \n-~~~~~~~~{.xfail-test}\n+~~~~~~~~\n // Linkage attributes\n-#[ link(name = \"projx\"\n+#[ link(name = \"projx\",\n         vers = \"2.5\",\n         uuid = \"9cccc5d5-aceb-4af5-8285-811211826b82\") ];\n \n // Additional metadata attributes\n-#[ desc = \"Project X\",\n-   license = \"BSD\" ];\n-   author = \"Jane Doe\" ];\n+#[ desc = \"Project X\" ];\n+#[ license = \"BSD\" ];\n+#[ author = \"Jane Doe\" ];\n \n // Specify the output type\n #[ crate_type = \"lib\" ];"}, {"sha": "7b39dc2f198da5d7d35860aa26962a3b470bb9c2", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c9c8d6fdd145db125decffed44de396119a01ca9/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/c9c8d6fdd145db125decffed44de396119a01ca9/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=c9c8d6fdd145db125decffed44de396119a01ca9", "patch": "@@ -12,12 +12,12 @@ argument, which it then converts to a hexadecimal string and prints to\n standard output. If you have the OpenSSL libraries installed, it\n should compile and run without any extra effort.\n \n-~~~~ {.xfail-test}\n+~~~~\n extern mod std;\n-use libc::c_uint;\n+use libc::size_t;\n \n extern mod crypto {\n-    fn SHA1(src: *u8, sz: c_uint, out: *u8) -> *u8;\n+    fn SHA1(src: *u8, sz: size_t, out: *u8) -> *u8;\n }\n \n fn as_hex(data: ~[u8]) -> ~str {\n@@ -29,7 +29,7 @@ fn as_hex(data: ~[u8]) -> ~str {\n fn sha1(data: ~str) -> ~str unsafe {\n     let bytes = str::to_bytes(data);\n     let hash = crypto::SHA1(vec::raw::to_ptr(bytes),\n-                            vec::len(bytes) as c_uint, ptr::null());\n+                            vec::len(bytes) as size_t, ptr::null());\n     return as_hex(vec::from_buf(hash, 20));\n }\n \n@@ -43,9 +43,11 @@ fn main() {\n Before we can call the `SHA1` function defined in the OpenSSL library, we have\n to declare it. That is what this part of the program does:\n \n-~~~~ {.xfail-test}\n+~~~~\n+# use libc::size_t;\n extern mod crypto {\n-    fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8; }\n+    fn SHA1(src: *u8, sz: size_t, out: *u8) -> *u8;\n+}\n ~~~~\n \n An `extern` module declaration containing function signatures introduces the\n@@ -62,10 +64,11 @@ searches for the shared library with that name, and links the library into the\n program. If you want the module to have a different name from the actual\n library, you can use the `\"link_name\"` attribute, like:\n \n-~~~~ {.xfail-test}\n+~~~~\n+# use libc::size_t;\n #[link_name = \"crypto\"]\n extern mod something {\n-    fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8;\n+    fn SHA1(src: *u8, sz: size_t, out: *u8) -> *u8;\n }\n ~~~~\n \n@@ -94,9 +97,10 @@ calling conventions.\n \n The foreign `SHA1` function takes three arguments, and returns a pointer.\n \n-~~~~ {.xfail-test}\n+~~~~\n+# use libc::size_t;\n # extern mod crypto {\n-fn SHA1(src: *u8, sz: libc::c_uint, out: *u8) -> *u8;\n+fn SHA1(src: *u8, sz: size_t, out: *u8) -> *u8;\n # }\n ~~~~\n \n@@ -108,8 +112,8 @@ probably even worse, your code will work on one platform, but break on\n another.\n \n In this case, we declare that `SHA1` takes two `unsigned char*`\n-arguments and one `unsigned long`. The Rust equivalents are `*u8`\n-unsafe pointers and an `uint` (which, like `unsigned long`, is a\n+arguments and one `size_t`. The Rust equivalents are `*u8`\n+unsafe pointers and an `libc::size_t` (which, like `unsigned long`, is a\n machine-word-sized type).\n \n The standard library provides various functions to create unsafe pointers,\n@@ -124,14 +128,16 @@ The `sha1` function is the most obscure part of the program.\n \n ~~~~\n # pub mod crypto {\n-#   pub fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8 { out }\n+#   use libc::size_t;\n+#   pub fn SHA1(src: *u8, sz: size_t, out: *u8) -> *u8 { out }\n # }\n+# use libc::size_t;\n # fn as_hex(data: ~[u8]) -> ~str { ~\"hi\" }\n fn sha1(data: ~str) -> ~str {\n     unsafe {\n         let bytes = str::to_bytes(data);\n         let hash = crypto::SHA1(vec::raw::to_ptr(bytes),\n-                                vec::len(bytes), ptr::null());\n+                                vec::len(bytes) as size_t, ptr::null());\n         return as_hex(vec::from_buf(hash, 20));\n     }\n }\n@@ -169,14 +175,16 @@ Let's look at our `sha1` function again.\n \n ~~~~\n # pub mod crypto {\n-#     pub fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8 { out }\n+#     use libc::size_t;\n+#     pub fn SHA1(src: *u8, sz: size_t, out: *u8) -> *u8 { out }\n # }\n+# use libc::size_t;\n # fn as_hex(data: ~[u8]) -> ~str { ~\"hi\" }\n # fn x(data: ~str) -> ~str {\n # unsafe {\n let bytes = str::to_bytes(data);\n let hash = crypto::SHA1(vec::raw::to_ptr(bytes),\n-                        vec::len(bytes), ptr::null());\n+                        vec::len(bytes) as size_t, ptr::null());\n return as_hex(vec::from_buf(hash, 20));\n # }\n # }"}, {"sha": "26541eca7d300a73b054f4b9bd63ce600ee6db7b", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9c8d6fdd145db125decffed44de396119a01ca9/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/c9c8d6fdd145db125decffed44de396119a01ca9/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=c9c8d6fdd145db125decffed44de396119a01ca9", "patch": "@@ -220,7 +220,7 @@ let result = port.recv();\n The `Port` and `Chan` pair created by `stream` enables efficient communication\n between a single sender and a single receiver, but multiple senders cannot use\n a single `Chan`, and multiple receivers cannot use a single `Port`.  What if our\n-example needed to computer multiple results across a number of tasks? The\n+example needed to compute multiple results across a number of tasks? The\n following program is ill-typed:\n \n ~~~ {.xfail-test}"}, {"sha": "a8839ad16309cce71e994ffb8df9dd569ec8dd31", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9c8d6fdd145db125decffed44de396119a01ca9/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/c9c8d6fdd145db125decffed44de396119a01ca9/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=c9c8d6fdd145db125decffed44de396119a01ca9", "patch": "@@ -2393,7 +2393,7 @@ override the name used to search for the crate.\n \n Our example crate declared this set of `link` attributes:\n \n-~~~~ {.xfail-test}\n+~~~~\n #[link(name = \"farm\", vers = \"2.5\", author = \"mjh\")];\n ~~~~\n "}, {"sha": "5754d234afb6df36fc75790e0c6102f58a9105ee", "filename": "src/etc/extract-tests.py", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c9c8d6fdd145db125decffed44de396119a01ca9/src%2Fetc%2Fextract-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/c9c8d6fdd145db125decffed44de396119a01ca9/src%2Fetc%2Fextract-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fextract-tests.py?ref=c9c8d6fdd145db125decffed44de396119a01ca9", "patch": "@@ -2,11 +2,11 @@\n \n # Script for extracting compilable fragments from markdown\n # documentation. See prep.js for a description of the format\n-# recognized by this tool. Expects a directory fragements/ to exist\n+# recognized by this tool. Expects a directory fragments/ to exist\n # under the current directory, and writes the fragments in there as\n # individual .rs files.\n \n-import sys, re;\n+import sys, re\n \n if len(sys.argv) < 3:\n     print(\"Please provide an input filename\")\n@@ -26,7 +26,7 @@\n while cur < len(lines):\n     line = lines[cur]\n     cur += 1\n-    chap = re.match(\"# (.*)\", line);\n+    chap = re.match(\"# (.*)\", line)\n     if chap:\n         chapter = re.sub(r\"\\W\", \"_\", chap.group(1)).lower()\n         chapter_n = 1\n@@ -51,14 +51,30 @@\n             else:\n                 # Lines beginning with '# ' are turned into valid code\n                 line = re.sub(\"^# \", \"\", line)\n-                # Allow elipses in code snippets\n+                # Allow ellipses in code snippets\n                 line = re.sub(\"\\.\\.\\.\", \"\", line)\n                 block += line\n         if not ignore:\n             if not re.search(r\"\\bfn main\\b\", block):\n                 block = \"fn main() {\\n\" + block + \"\\n}\\n\"\n             if not re.search(r\"\\bextern mod std\\b\", block):\n-                block = \"extern mod std;\\n\" + block;\n+                block = \"extern mod std;\\n\" + block\n+            block = \"\"\"#[ forbid(ctypes) ];\n+#[ forbid(deprecated_mode) ];\n+#[ forbid(deprecated_pattern) ];\n+#[ forbid(implicit_copies) ];\n+#[ forbid(non_implicitly_copyable_typarams) ];\n+#[ forbid(path_statement) ];\n+#[ forbid(type_limits) ];\n+#[ forbid(unrecognized_lint) ];\n+#[ forbid(unused_imports) ];\n+#[ forbid(vecs_implicitly_copyable) ];\n+#[ forbid(while_true) ];\n+\n+#[ warn(deprecated_self) ];\n+#[ warn(non_camel_case_types) ];\n+#[ warn(structural_records) ];\\n\n+\"\"\" + block\n             if xfail:\n                 block = \"// xfail-test\\n\" + block\n             filename = (dest + \"/\" + str(chapter)"}]}