{"sha": "432d116a5c2565774bae4c42fcacab8b685608b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMmQxMTZhNWMyNTY1Nzc0YmFlNGM0MmZjYWNhYjhiNjg1NjA4YjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-20T23:21:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-20T23:21:34Z"}, "message": "Auto merge of #78569 - bugadani:arena-spec, r=Mark-Simulacrum\n\nArena: use specialization to avoid copying data\n\nIn several cases, a `Vec` or `SmallVec` is passed to `Arena::alloc_from_iter` directly. This PR makes sure those cases don't copy their data unnecessarily, by specializing the `alloc_from_iter` implementation.", "tree": {"sha": "9e5d7895519a810dc9363197d50e093c8cd63cc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e5d7895519a810dc9363197d50e093c8cd63cc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/432d116a5c2565774bae4c42fcacab8b685608b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/432d116a5c2565774bae4c42fcacab8b685608b5", "html_url": "https://github.com/rust-lang/rust/commit/432d116a5c2565774bae4c42fcacab8b685608b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/432d116a5c2565774bae4c42fcacab8b685608b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "593fe977a77ad5a7aec23c6cb0f86a3470221670", "url": "https://api.github.com/repos/rust-lang/rust/commits/593fe977a77ad5a7aec23c6cb0f86a3470221670", "html_url": "https://github.com/rust-lang/rust/commit/593fe977a77ad5a7aec23c6cb0f86a3470221670"}, {"sha": "e93a4637c0858725a0d7fdebeecf49bd97add724", "url": "https://api.github.com/repos/rust-lang/rust/commits/e93a4637c0858725a0d7fdebeecf49bd97add724", "html_url": "https://github.com/rust-lang/rust/commit/e93a4637c0858725a0d7fdebeecf49bd97add724"}], "stats": {"total": 84, "additions": 71, "deletions": 13}, "files": [{"sha": "f468bad635a9baca66df23ecf507e3a409d783da", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 71, "deletions": 13, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/432d116a5c2565774bae4c42fcacab8b685608b5/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432d116a5c2565774bae4c42fcacab8b685608b5/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=432d116a5c2565774bae4c42fcacab8b685608b5", "patch": "@@ -11,9 +11,13 @@\n     html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\",\n     test(no_crate_inject, attr(deny(warnings)))\n )]\n+#![feature(array_value_iter_slice)]\n #![feature(dropck_eyepatch)]\n #![feature(new_uninit)]\n #![feature(maybe_uninit_slice)]\n+#![feature(array_value_iter)]\n+#![feature(min_const_generics)]\n+#![feature(min_specialization)]\n #![cfg_attr(test, feature(test))]\n \n use smallvec::SmallVec;\n@@ -114,6 +118,72 @@ impl<T> Default for TypedArena<T> {\n     }\n }\n \n+trait IterExt<T> {\n+    fn alloc_from_iter(self, arena: &TypedArena<T>) -> &mut [T];\n+}\n+\n+impl<I, T> IterExt<T> for I\n+where\n+    I: IntoIterator<Item = T>,\n+{\n+    #[inline]\n+    default fn alloc_from_iter(self, arena: &TypedArena<T>) -> &mut [T] {\n+        let vec: SmallVec<[_; 8]> = self.into_iter().collect();\n+        vec.alloc_from_iter(arena)\n+    }\n+}\n+\n+impl<T, const N: usize> IterExt<T> for std::array::IntoIter<T, N> {\n+    #[inline]\n+    fn alloc_from_iter(self, arena: &TypedArena<T>) -> &mut [T] {\n+        let len = self.len();\n+        if len == 0 {\n+            return &mut [];\n+        }\n+        // Move the content to the arena by copying and then forgetting it\n+        unsafe {\n+            let start_ptr = arena.alloc_raw_slice(len);\n+            self.as_slice().as_ptr().copy_to_nonoverlapping(start_ptr, len);\n+            mem::forget(self);\n+            slice::from_raw_parts_mut(start_ptr, len)\n+        }\n+    }\n+}\n+\n+impl<T> IterExt<T> for Vec<T> {\n+    #[inline]\n+    fn alloc_from_iter(mut self, arena: &TypedArena<T>) -> &mut [T] {\n+        let len = self.len();\n+        if len == 0 {\n+            return &mut [];\n+        }\n+        // Move the content to the arena by copying and then forgetting it\n+        unsafe {\n+            let start_ptr = arena.alloc_raw_slice(len);\n+            self.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n+            self.set_len(0);\n+            slice::from_raw_parts_mut(start_ptr, len)\n+        }\n+    }\n+}\n+\n+impl<A: smallvec::Array> IterExt<A::Item> for SmallVec<A> {\n+    #[inline]\n+    fn alloc_from_iter(mut self, arena: &TypedArena<A::Item>) -> &mut [A::Item] {\n+        let len = self.len();\n+        if len == 0 {\n+            return &mut [];\n+        }\n+        // Move the content to the arena by copying and then forgetting it\n+        unsafe {\n+            let start_ptr = arena.alloc_raw_slice(len);\n+            self.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n+            self.set_len(0);\n+            slice::from_raw_parts_mut(start_ptr, len)\n+        }\n+    }\n+}\n+\n impl<T> TypedArena<T> {\n     /// Allocates an object in the `TypedArena`, returning a reference to it.\n     #[inline]\n@@ -191,19 +261,7 @@ impl<T> TypedArena<T> {\n     #[inline]\n     pub fn alloc_from_iter<I: IntoIterator<Item = T>>(&self, iter: I) -> &mut [T] {\n         assert!(mem::size_of::<T>() != 0);\n-        let mut vec: SmallVec<[_; 8]> = iter.into_iter().collect();\n-        if vec.is_empty() {\n-            return &mut [];\n-        }\n-        // Move the content to the arena by copying it and then forgetting\n-        // the content of the SmallVec\n-        unsafe {\n-            let len = vec.len();\n-            let start_ptr = self.alloc_raw_slice(len);\n-            vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n-            vec.set_len(0);\n-            slice::from_raw_parts_mut(start_ptr, len)\n-        }\n+        iter.alloc_from_iter(self)\n     }\n \n     /// Grows the arena."}]}