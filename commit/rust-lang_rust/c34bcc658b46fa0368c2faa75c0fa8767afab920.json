{"sha": "c34bcc658b46fa0368c2faa75c0fa8767afab920", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNGJjYzY1OGI0NmZhMDM2OGMyZmFhNzVjMGZhODc2N2FmYWI5MjA=", "commit": {"author": {"name": "Corentin Henry", "email": "corentinhenry@gmail.com", "date": "2018-11-20T00:31:14Z"}, "committer": {"name": "Corentin Henry", "email": "corentinhenry@gmail.com", "date": "2019-04-22T14:03:39Z"}, "message": "std::net: use macros to test ip properties", "tree": {"sha": "2648630ba3a364bd8ddc70aadc028adde3e1b80f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2648630ba3a364bd8ddc70aadc028adde3e1b80f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c34bcc658b46fa0368c2faa75c0fa8767afab920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c34bcc658b46fa0368c2faa75c0fa8767afab920", "html_url": "https://github.com/rust-lang/rust/commit/c34bcc658b46fa0368c2faa75c0fa8767afab920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c34bcc658b46fa0368c2faa75c0fa8767afab920/comments", "author": {"login": "little-dude", "id": 6646324, "node_id": "MDQ6VXNlcjY2NDYzMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6646324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/little-dude", "html_url": "https://github.com/little-dude", "followers_url": "https://api.github.com/users/little-dude/followers", "following_url": "https://api.github.com/users/little-dude/following{/other_user}", "gists_url": "https://api.github.com/users/little-dude/gists{/gist_id}", "starred_url": "https://api.github.com/users/little-dude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/little-dude/subscriptions", "organizations_url": "https://api.github.com/users/little-dude/orgs", "repos_url": "https://api.github.com/users/little-dude/repos", "events_url": "https://api.github.com/users/little-dude/events{/privacy}", "received_events_url": "https://api.github.com/users/little-dude/received_events", "type": "User", "site_admin": false}, "committer": {"login": "little-dude", "id": 6646324, "node_id": "MDQ6VXNlcjY2NDYzMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6646324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/little-dude", "html_url": "https://github.com/little-dude", "followers_url": "https://api.github.com/users/little-dude/followers", "following_url": "https://api.github.com/users/little-dude/following{/other_user}", "gists_url": "https://api.github.com/users/little-dude/gists{/gist_id}", "starred_url": "https://api.github.com/users/little-dude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/little-dude/subscriptions", "organizations_url": "https://api.github.com/users/little-dude/orgs", "repos_url": "https://api.github.com/users/little-dude/repos", "events_url": "https://api.github.com/users/little-dude/events{/privacy}", "received_events_url": "https://api.github.com/users/little-dude/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "810632000972343fefd0ec37b12f05a665fd12c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/810632000972343fefd0ec37b12f05a665fd12c6", "html_url": "https://github.com/rust-lang/rust/commit/810632000972343fefd0ec37b12f05a665fd12c6"}], "stats": {"total": 524, "additions": 381, "deletions": 143}, "files": [{"sha": "17200d7b94a43a8e19d44a61d63c2e1da6a78672", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 381, "deletions": 143, "changes": 524, "blob_url": "https://github.com/rust-lang/rust/blob/c34bcc658b46fa0368c2faa75c0fa8767afab920/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34bcc658b46fa0368c2faa75c0fa8767afab920/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=c34bcc658b46fa0368c2faa75c0fa8767afab920", "patch": "@@ -1786,8 +1786,8 @@ impl From<[u16; 8]> for IpAddr {\n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use crate::net::*;\n-    use crate::net::Ipv6MulticastScope::*;\n     use crate::net::test::{tsa, sa6, sa4};\n+    use crate::str::FromStr;\n \n     #[test]\n     fn test_from_str_ipv4() {\n@@ -1951,164 +1951,402 @@ mod tests {\n \n     #[test]\n     fn ip_properties() {\n-        fn check4(octets: &[u8; 4], unspec: bool, loopback: bool,\n-                  global: bool, multicast: bool, documentation: bool) {\n-            let ip = IpAddr::V4(Ipv4Addr::new(octets[0], octets[1], octets[2], octets[3]));\n-            assert_eq!(ip.is_unspecified(), unspec);\n-            assert_eq!(ip.is_loopback(), loopback);\n-            assert_eq!(ip.is_global(), global);\n-            assert_eq!(ip.is_multicast(), multicast);\n-            assert_eq!(ip.is_documentation(), documentation);\n+        macro_rules! ip {\n+            ($s:expr) => {\n+                IpAddr::from_str($s).unwrap()\n+            }\n         }\n \n-        fn check6(str_addr: &str, unspec: bool, loopback: bool,\n-                  global: bool, u_doc: bool, mcast: bool) {\n-            let ip = IpAddr::V6(str_addr.parse().unwrap());\n-            assert_eq!(ip.is_unspecified(), unspec);\n-            assert_eq!(ip.is_loopback(), loopback);\n-            assert_eq!(ip.is_global(), global);\n-            assert_eq!(ip.is_documentation(), u_doc);\n-            assert_eq!(ip.is_multicast(), mcast);\n+        macro_rules! check {\n+            ($s:expr) => {\n+                check!($s, 0);\n+            };\n+\n+            ($s:expr, $mask:expr) => {{\n+                let unspec: u8 = 1 << 0;\n+                let loopback: u8 = 1 << 1;\n+                let global: u8 = 1 << 2;\n+                let multicast: u8 = 1 << 3;\n+                let doc: u8 = 1 << 4;\n+\n+                if ($mask & unspec) == unspec {\n+                    assert!(ip!($s).is_unspecified());\n+                } else {\n+                    assert!(!ip!($s).is_unspecified());\n+                }\n+\n+                if ($mask & loopback) == loopback {\n+                    assert!(ip!($s).is_loopback());\n+                } else {\n+                    assert!(!ip!($s).is_loopback());\n+                }\n+\n+                if ($mask & global) == global {\n+                    assert!(ip!($s).is_global());\n+                } else {\n+                    assert!(!ip!($s).is_global());\n+                }\n+\n+                if ($mask & multicast) == multicast {\n+                    assert!(ip!($s).is_multicast());\n+                } else {\n+                    assert!(!ip!($s).is_multicast());\n+                }\n+\n+                if ($mask & doc) == doc {\n+                    assert!(ip!($s).is_documentation());\n+                } else {\n+                    assert!(!ip!($s).is_documentation());\n+                }\n+            }}\n         }\n \n-        //     address                unspec loopbk global multicast doc\n-        check4(&[0, 0, 0, 0],         true,  false, false,  false,   false);\n-        check4(&[0, 0, 0, 1],         false, false, true,   false,   false);\n-        check4(&[0, 1, 0, 0],         false, false, true,   false,   false);\n-        check4(&[10, 9, 8, 7],        false, false, false,  false,   false);\n-        check4(&[127, 1, 2, 3],       false, true,  false,  false,   false);\n-        check4(&[172, 31, 254, 253],  false, false, false,  false,   false);\n-        check4(&[169, 254, 253, 242], false, false, false,  false,   false);\n-        check4(&[192, 0, 2, 183],     false, false, false,  false,   true);\n-        check4(&[192, 1, 2, 183],     false, false, true,   false,   false);\n-        check4(&[192, 168, 254, 253], false, false, false,  false,   false);\n-        check4(&[198, 51, 100, 0],    false, false, false,  false,   true);\n-        check4(&[203, 0, 113, 0],     false, false, false,  false,   true);\n-        check4(&[203, 2, 113, 0],     false, false, true,   false,   false);\n-        check4(&[224, 0, 0, 0],       false, false, true,   true,    false);\n-        check4(&[239, 255, 255, 255], false, false, true,   true,    false);\n-        check4(&[255, 255, 255, 255], false, false, false,  false,   false);\n-\n-        //     address                            unspec loopbk global doc    mcast\n-        check6(\"::\",                              true,  false, false, false, false);\n-        check6(\"::1\",                             false, true,  false, false, false);\n-        check6(\"::0.0.0.2\",                       false, false, true,  false, false);\n-        check6(\"1::\",                             false, false, true,  false, false);\n-        check6(\"fc00::\",                          false, false, false, false, false);\n-        check6(\"fdff:ffff::\",                     false, false, false, false, false);\n-        check6(\"fe80:ffff::\",                     false, false, false, false, false);\n-        check6(\"febf:ffff::\",                     false, false, false, false, false);\n-        check6(\"fec0::\",                          false, false, false, false, false);\n-        check6(\"ff01::\",                          false, false, false, false, true);\n-        check6(\"ff02::\",                          false, false, false, false, true);\n-        check6(\"ff03::\",                          false, false, false, false, true);\n-        check6(\"ff04::\",                          false, false, false, false, true);\n-        check6(\"ff05::\",                          false, false, false, false, true);\n-        check6(\"ff08::\",                          false, false, false, false, true);\n-        check6(\"ff0e::\",                          false, false, true,  false, true);\n-        check6(\"2001:db8:85a3::8a2e:370:7334\",    false, false, false, true,  false);\n-        check6(\"102:304:506:708:90a:b0c:d0e:f10\", false, false, true,  false, false);\n+        let unspec: u8 = 1 << 0;\n+        let loopback: u8 = 1 << 1;\n+        let global: u8 = 1 << 2;\n+        let multicast: u8 = 1 << 3;\n+        let doc: u8 = 1 << 4;\n+\n+        check!(\"0.0.0.0\", unspec);\n+        check!(\"0.0.0.1\", global);\n+        check!(\"0.1.0.0\", global);\n+        check!(\"10.9.8.7\");\n+        check!(\"127.1.2.3\", loopback);\n+        check!(\"172.31.254.253\");\n+        check!(\"169.254.253.242\");\n+        check!(\"192.0.2.183\", doc);\n+        check!(\"192.1.2.183\", global);\n+        check!(\"192.168.254.253\");\n+        check!(\"198.51.100.0\", doc);\n+        check!(\"203.0.113.0\", doc);\n+        check!(\"203.2.113.0\", global);\n+        check!(\"224.0.0.0\", global|multicast);\n+        check!(\"239.255.255.255\", global|multicast);\n+        check!(\"255.255.255.255\");\n+\n+        check!(\"::\", unspec);\n+        check!(\"::1\", loopback);\n+        check!(\"::0.0.0.2\", global);\n+        check!(\"1::\", global);\n+        check!(\"fc00::\");\n+        check!(\"fdff:ffff::\");\n+        check!(\"fe80:ffff::\");\n+        check!(\"febf:ffff::\");\n+        check!(\"fec0::\");\n+        check!(\"ff01::\", multicast);\n+        check!(\"ff02::\", multicast);\n+        check!(\"ff03::\", multicast);\n+        check!(\"ff04::\", multicast);\n+        check!(\"ff05::\", multicast);\n+        check!(\"ff08::\", multicast);\n+        check!(\"ff0e::\", global|multicast);\n+        check!(\"2001:db8:85a3::8a2e:370:7334\", doc);\n+        check!(\"102:304:506:708:90a:b0c:d0e:f10\", global);\n     }\n \n     #[test]\n     fn ipv4_properties() {\n-        fn check(octets: &[u8; 4], unspec: bool, loopback: bool,\n-                 private: bool, link_local: bool, global: bool,\n-                 multicast: bool, broadcast: bool, documentation: bool) {\n-            let ip = Ipv4Addr::new(octets[0], octets[1], octets[2], octets[3]);\n-            assert_eq!(octets, &ip.octets());\n-\n-            assert_eq!(ip.is_unspecified(), unspec);\n-            assert_eq!(ip.is_loopback(), loopback);\n-            assert_eq!(ip.is_private(), private);\n-            assert_eq!(ip.is_link_local(), link_local);\n-            assert_eq!(ip.is_global(), global);\n-            assert_eq!(ip.is_multicast(), multicast);\n-            assert_eq!(ip.is_broadcast(), broadcast);\n-            assert_eq!(ip.is_documentation(), documentation);\n+        macro_rules! ip {\n+            ($s:expr) => {\n+                Ipv4Addr::from_str($s).unwrap()\n+            }\n+        }\n+\n+        macro_rules! check {\n+            ($s:expr) => {\n+                check!($s, 0);\n+            };\n+\n+            ($s:expr, $mask:expr) => {{\n+                let unspec: u8 = 1 << 0;\n+                let loopback: u8 = 1 << 1;\n+                let private: u8 = 1 << 2;\n+                let link_local: u8 = 1 << 3;\n+                let global: u8 = 1 << 4;\n+                let multicast: u8 = 1 << 5;\n+                let broadcast: u8 = 1 << 6;\n+                let documentation: u8 = 1 << 7;\n+\n+                if ($mask & unspec) == unspec {\n+                    assert!(ip!($s).is_unspecified());\n+                } else {\n+                    assert!(!ip!($s).is_unspecified());\n+                }\n+\n+                if ($mask & loopback) == loopback {\n+                    assert!(ip!($s).is_loopback());\n+                } else {\n+                    assert!(!ip!($s).is_loopback());\n+                }\n+\n+                if ($mask & private) == private {\n+                    assert!(ip!($s).is_private());\n+                } else {\n+                    assert!(!ip!($s).is_private());\n+                }\n+\n+                if ($mask & link_local) == link_local {\n+                    assert!(ip!($s).is_link_local());\n+                } else {\n+                    assert!(!ip!($s).is_link_local());\n+                }\n+\n+                if ($mask & global) == global {\n+                    assert!(ip!($s).is_global());\n+                } else {\n+                    assert!(!ip!($s).is_global());\n+                }\n+\n+                if ($mask & multicast) == multicast {\n+                    assert!(ip!($s).is_multicast());\n+                } else {\n+                    assert!(!ip!($s).is_multicast());\n+                }\n+\n+                if ($mask & broadcast) == broadcast {\n+                    assert!(ip!($s).is_broadcast());\n+                } else {\n+                    assert!(!ip!($s).is_broadcast());\n+                }\n+\n+                if ($mask & documentation) == documentation {\n+                    assert!(ip!($s).is_documentation());\n+                } else {\n+                    assert!(!ip!($s).is_documentation());\n+                }\n+            }}\n         }\n \n-        //    address                unspec loopbk privt  linloc global multicast brdcast doc\n-        check(&[0, 0, 0, 0],         true,  false, false, false, false,  false,    false,  false);\n-        check(&[0, 0, 0, 1],         false, false, false, false, true,   false,    false,  false);\n-        check(&[0, 1, 0, 0],         false, false, false, false, true,   false,    false,  false);\n-        check(&[10, 9, 8, 7],        false, false, true,  false, false,  false,    false,  false);\n-        check(&[127, 1, 2, 3],       false, true,  false, false, false,  false,    false,  false);\n-        check(&[172, 31, 254, 253],  false, false, true,  false, false,  false,    false,  false);\n-        check(&[169, 254, 253, 242], false, false, false, true,  false,  false,    false,  false);\n-        check(&[192, 0, 2, 183],     false, false, false, false, false,  false,    false,  true);\n-        check(&[192, 1, 2, 183],     false, false, false, false, true,   false,    false,  false);\n-        check(&[192, 168, 254, 253], false, false, true,  false, false,  false,    false,  false);\n-        check(&[198, 51, 100, 0],    false, false, false, false, false,  false,    false,  true);\n-        check(&[203, 0, 113, 0],     false, false, false, false, false,  false,    false,  true);\n-        check(&[203, 2, 113, 0],     false, false, false, false, true,   false,    false,  false);\n-        check(&[224, 0, 0, 0],       false, false, false, false, true,   true,     false,  false);\n-        check(&[239, 255, 255, 255], false, false, false, false, true,   true,     false,  false);\n-        check(&[255, 255, 255, 255], false, false, false, false, false,  false,    true,   false);\n+        let unspec: u8 = 1 << 0;\n+        let loopback: u8 = 1 << 1;\n+        let private: u8 = 1 << 2;\n+        let link_local: u8 = 1 << 3;\n+        let global: u8 = 1 << 4;\n+        let multicast: u8 = 1 << 5;\n+        let broadcast: u8 = 1 << 6;\n+        let documentation: u8 = 1 << 7;\n+\n+        check!(\"0.0.0.0\", unspec);\n+        check!(\"0.0.0.1\", global);\n+        check!(\"0.1.0.0\", global);\n+        check!(\"10.9.8.7\", private);\n+        check!(\"127.1.2.3\", loopback);\n+        check!(\"172.31.254.253\", private);\n+        check!(\"169.254.253.242\", link_local);\n+        check!(\"192.0.2.183\", documentation);\n+        check!(\"192.1.2.183\", global);\n+        check!(\"192.168.254.253\", private);\n+        check!(\"198.51.100.0\", documentation);\n+        check!(\"203.0.113.0\", documentation);\n+        check!(\"203.2.113.0\", global);\n+        check!(\"224.0.0.0\", global|multicast);\n+        check!(\"239.255.255.255\", global|multicast);\n+        check!(\"255.255.255.255\", broadcast);\n     }\n \n     #[test]\n     fn ipv6_properties() {\n-        fn check(str_addr: &str, octets: &[u8; 16], unspec: bool, loopback: bool,\n-                 unique_local: bool, global: bool,\n-                 u_link_local: bool, u_site_local: bool, u_global: bool, u_doc: bool,\n-                 m_scope: Option<Ipv6MulticastScope>) {\n-            let ip: Ipv6Addr = str_addr.parse().unwrap();\n-            assert_eq!(str_addr, ip.to_string());\n-            assert_eq!(&ip.octets(), octets);\n-            assert_eq!(Ipv6Addr::from(*octets), ip);\n-\n-            assert_eq!(ip.is_unspecified(), unspec);\n-            assert_eq!(ip.is_loopback(), loopback);\n-            assert_eq!(ip.is_unique_local(), unique_local);\n-            assert_eq!(ip.is_global(), global);\n-            assert_eq!(ip.is_unicast_link_local(), u_link_local);\n-            assert_eq!(ip.is_unicast_site_local(), u_site_local);\n-            assert_eq!(ip.is_unicast_global(), u_global);\n-            assert_eq!(ip.is_documentation(), u_doc);\n-            assert_eq!(ip.multicast_scope(), m_scope);\n-            assert_eq!(ip.is_multicast(), m_scope.is_some());\n+        macro_rules! ip {\n+            ($s:expr) => {\n+                Ipv6Addr::from_str($s).unwrap()\n+            }\n+        }\n+\n+        macro_rules! check {\n+            ($s:expr, &[$($octet:expr),*], $mask:expr) => {\n+                assert_eq!($s, ip!($s).to_string());\n+                let octets = &[$($octet),*];\n+                assert_eq!(&ip!($s).octets(), octets);\n+                assert_eq!(Ipv6Addr::from(*octets), ip!($s));\n+\n+                let unspecified: u16 = 1 << 0;\n+                let loopback: u16 = 1 << 1;\n+                let unique_local: u16 = 1 << 2;\n+                let global: u16 = 1 << 3;\n+                let unicast_link_local: u16 = 1 << 4;\n+                let unicast_site_local: u16 = 1 << 5;\n+                let unicast_global: u16 = 1 << 6;\n+                let documentation: u16 = 1 << 7;\n+                let multicast_interface_local: u16 = 1 << 8;\n+                let multicast_link_local: u16 = 1 << 9;\n+                let multicast_realm_local: u16 = 1 << 10;\n+                let multicast_admin_local: u16 = 1 << 11;\n+                let multicast_site_local: u16 = 1 << 12;\n+                let multicast_organization_local: u16 = 1 << 13;\n+                let multicast_global: u16 = 1 << 14;\n+                let multicast: u16 = multicast_interface_local\n+                    | multicast_admin_local\n+                    | multicast_global\n+                    | multicast_link_local\n+                    | multicast_realm_local\n+                    | multicast_site_local\n+                    | multicast_organization_local;\n+\n+                if ($mask & unspecified) == unspecified {\n+                    assert!(ip!($s).is_unspecified());\n+                } else {\n+                    assert!(!ip!($s).is_unspecified());\n+                }\n+                if ($mask & loopback) == loopback {\n+                    assert!(ip!($s).is_loopback());\n+                } else {\n+                    assert!(!ip!($s).is_loopback());\n+                }\n+                if ($mask & unique_local) == unique_local {\n+                    assert!(ip!($s).is_unique_local());\n+                } else {\n+                    assert!(!ip!($s).is_unique_local());\n+                }\n+                if ($mask & global) == global {\n+                    assert!(ip!($s).is_global());\n+                } else {\n+                    assert!(!ip!($s).is_global());\n+                }\n+                if ($mask & unicast_link_local) == unicast_link_local {\n+                    assert!(ip!($s).is_unicast_link_local());\n+                } else {\n+                    assert!(!ip!($s).is_unicast_link_local());\n+                }\n+                if ($mask & unicast_site_local) == unicast_site_local {\n+                    assert!(ip!($s).is_unicast_site_local());\n+                } else {\n+                    assert!(!ip!($s).is_unicast_site_local());\n+                }\n+                if ($mask & unicast_global) == unicast_global {\n+                    assert!(ip!($s).is_unicast_global());\n+                } else {\n+                    assert!(!ip!($s).is_unicast_global());\n+                }\n+                if ($mask & documentation) == documentation {\n+                    assert!(ip!($s).is_documentation());\n+                } else {\n+                    assert!(!ip!($s).is_documentation());\n+                }\n+                if ($mask & multicast) != 0 {\n+                    assert!(ip!($s).multicast_scope().is_some());\n+                    assert!(ip!($s).is_multicast());\n+                } else {\n+                    assert!(ip!($s).multicast_scope().is_none());\n+                    assert!(!ip!($s).is_multicast());\n+                }\n+                if ($mask & multicast_interface_local) == multicast_interface_local {\n+                    assert_eq!(ip!($s).multicast_scope().unwrap(),\n+                               Ipv6MulticastScope::InterfaceLocal);\n+                }\n+                if ($mask & multicast_link_local) == multicast_link_local {\n+                    assert_eq!(ip!($s).multicast_scope().unwrap(),\n+                               Ipv6MulticastScope::LinkLocal);\n+                }\n+                if ($mask & multicast_realm_local) == multicast_realm_local {\n+                    assert_eq!(ip!($s).multicast_scope().unwrap(),\n+                               Ipv6MulticastScope::RealmLocal);\n+                }\n+                if ($mask & multicast_admin_local) == multicast_admin_local {\n+                    assert_eq!(ip!($s).multicast_scope().unwrap(),\n+                               Ipv6MulticastScope::AdminLocal);\n+                }\n+                if ($mask & multicast_site_local) == multicast_site_local {\n+                    assert_eq!(ip!($s).multicast_scope().unwrap(),\n+                               Ipv6MulticastScope::SiteLocal);\n+                }\n+                if ($mask & multicast_organization_local) == multicast_organization_local {\n+                    assert_eq!(ip!($s).multicast_scope().unwrap(),\n+                               Ipv6MulticastScope::OrganizationLocal);\n+                }\n+                if ($mask & multicast_global) == multicast_global {\n+                    assert_eq!(ip!($s).multicast_scope().unwrap(),\n+                               Ipv6MulticastScope::Global);\n+                }\n+            }\n         }\n \n-        //    unspec loopbk uniqlo global unill  unisl  uniglo doc    mscope\n-        check(\"::\", &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              true,  false, false, false, false, false, false, false, None);\n-        check(\"::1\", &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n-              false, true,  false, false, false, false, false, false, None);\n-        check(\"::0.0.0.2\", &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n-              false, false, false, true,  false, false, true,  false, None);\n-        check(\"1::\", &[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, false, true,  false, false, true,  false, None);\n-        check(\"fc00::\", &[0xfc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, true,  false, false, false, false, false, None);\n-        check(\"fdff:ffff::\", &[0xfd, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, true,  false, false, false, false, false, None);\n-        check(\"fe80:ffff::\", &[0xfe, 0x80, 0xff, 0xff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, false, false, true,  false, false, false, None);\n-        check(\"febf:ffff::\", &[0xfe, 0xbf, 0xff, 0xff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, false, false, true,  false, false, false, None);\n-        check(\"fec0::\", &[0xfe, 0xc0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, false, false, false, true,  false, false, None);\n-        check(\"ff01::\", &[0xff, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, false, false, false, false, false, false, Some(InterfaceLocal));\n-        check(\"ff02::\", &[0xff, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, false, false, false, false, false, false, Some(LinkLocal));\n-        check(\"ff03::\", &[0xff, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, false, false, false, false, false, false, Some(RealmLocal));\n-        check(\"ff04::\", &[0xff, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, false, false, false, false, false, false, Some(AdminLocal));\n-        check(\"ff05::\", &[0xff, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, false, false, false, false, false, false, Some(SiteLocal));\n-        check(\"ff08::\", &[0xff, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, false, false, false, false, false, false, Some(OrganizationLocal));\n-        check(\"ff0e::\", &[0xff, 0xe, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-              false, false, false, true,  false, false, false, false, Some(Global));\n-        check(\"2001:db8:85a3::8a2e:370:7334\",\n-              &[0x20, 1, 0xd, 0xb8, 0x85, 0xa3, 0, 0, 0, 0, 0x8a, 0x2e, 3, 0x70, 0x73, 0x34],\n-              false, false, false, false, false, false, false, true, None);\n-        check(\"102:304:506:708:90a:b0c:d0e:f10\",\n-              &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n-              false, false, false, true,  false, false, true,  false, None);\n+        let unspecified: u16 = 1 << 0;\n+        let loopback: u16 = 1 << 1;\n+        let unique_local: u16 = 1 << 2;\n+        let global: u16 = 1 << 3;\n+        let unicast_link_local: u16 = 1 << 4;\n+        let unicast_site_local: u16 = 1 << 5;\n+        let unicast_global: u16 = 1 << 6;\n+        let documentation: u16 = 1 << 7;\n+        let multicast_interface_local: u16 = 1 << 8;\n+        let multicast_link_local: u16 = 1 << 9;\n+        let multicast_realm_local: u16 = 1 << 10;\n+        let multicast_admin_local: u16 = 1 << 11;\n+        let multicast_site_local: u16 = 1 << 12;\n+        let multicast_organization_local: u16 = 1 << 13;\n+        let multicast_global: u16 = 1 << 14;\n+\n+        check!(\"::\",\n+               &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               unspecified);\n+\n+        check!(\"::1\",\n+               &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n+               loopback);\n+\n+        check!(\"::0.0.0.2\",\n+               &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n+               global | unicast_global);\n+\n+        check!(\"1::\",\n+               &[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               global | unicast_global);\n+\n+        check!(\"fc00::\",\n+               &[0xfc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               unique_local);\n+\n+        check!(\"fdff:ffff::\",\n+               &[0xfd, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               unique_local);\n+\n+        check!(\"fe80:ffff::\",\n+               &[0xfe, 0x80, 0xff, 0xff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               unicast_link_local);\n+\n+        check!(\"febf:ffff::\",\n+               &[0xfe, 0xbf, 0xff, 0xff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               unicast_link_local);\n+\n+        check!(\"fec0::\",\n+               &[0xfe, 0xc0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               unicast_site_local);\n+\n+        check!(\"ff01::\",\n+               &[0xff, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               multicast_interface_local);\n+\n+        check!(\"ff02::\",\n+               &[0xff, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               multicast_link_local);\n+\n+        check!(\"ff03::\",\n+               &[0xff, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               multicast_realm_local);\n+\n+        check!(\"ff04::\",\n+               &[0xff, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               multicast_admin_local);\n+\n+        check!(\"ff05::\",\n+               &[0xff, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               multicast_site_local);\n+\n+        check!(\"ff08::\",\n+               &[0xff, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               multicast_organization_local);\n+\n+        check!(\"ff0e::\",\n+               &[0xff, 0xe, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+               multicast_global | global);\n+\n+        check!(\"2001:db8:85a3::8a2e:370:7334\",\n+               &[0x20, 1, 0xd, 0xb8, 0x85, 0xa3, 0, 0, 0, 0, 0x8a, 0x2e, 3, 0x70, 0x73, 0x34],\n+               documentation);\n+\n+        check!(\"102:304:506:708:90a:b0c:d0e:f10\",\n+               &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n+               global| unicast_global);\n     }\n \n     #[test]"}]}