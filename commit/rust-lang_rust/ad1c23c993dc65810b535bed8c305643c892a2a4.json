{"sha": "ad1c23c993dc65810b535bed8c305643c892a2a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMWMyM2M5OTNkYzY1ODEwYjUzNWJlZDhjMzA1NjQzYzg5MmEyYTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-07T00:24:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-18T23:37:08Z"}, "message": "Maintain chain of derived obligations\n\nWhen evaluating the derived obligations from super traits, maintain a\nreference to the original obligation in order to give more actionable\ncontext in the output.", "tree": {"sha": "377d9598214da87eca8aedac1171504ea4cd93aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/377d9598214da87eca8aedac1171504ea4cd93aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad1c23c993dc65810b535bed8c305643c892a2a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1c23c993dc65810b535bed8c305643c892a2a4", "html_url": "https://github.com/rust-lang/rust/commit/ad1c23c993dc65810b535bed8c305643c892a2a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad1c23c993dc65810b535bed8c305643c892a2a4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52fa23add6fb0776b32cc591ac928618391bdf41", "url": "https://api.github.com/repos/rust-lang/rust/commits/52fa23add6fb0776b32cc591ac928618391bdf41", "html_url": "https://github.com/rust-lang/rust/commit/52fa23add6fb0776b32cc591ac928618391bdf41"}], "stats": {"total": 181, "additions": 181, "deletions": 0}, "files": [{"sha": "d341909ef7f8b0ba0219a011c5c95fb4f57aea4a", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -8,6 +8,7 @@ use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::Span;\n+use std::rc::Rc;\n \n /// Returns the set of obligations needed to make `ty` well-formed.\n /// If `ty` contains unresolved inference variables, this may include\n@@ -315,6 +316,15 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n             let implied_obligations = traits::util::elaborate_obligations(tcx, obligations.clone());\n             let implied_obligations = implied_obligations.map(|obligation| {\n                 let mut cause = cause.clone();\n+                let parent_trait_ref = obligation\n+                    .predicate\n+                    .to_opt_poly_trait_ref()\n+                    .unwrap_or_else(|| ty::Binder::dummy(*trait_ref));\n+                let derived_cause = traits::DerivedObligationCause {\n+                    parent_trait_ref,\n+                    parent_code: Rc::new(obligation.cause.code.clone()),\n+                };\n+                cause.code = traits::ObligationCauseCode::ImplDerivedObligation(derived_cause);\n                 extend_cause_with_original_assoc_item_obligation(\n                     tcx,\n                     trait_ref,"}, {"sha": "dd2f30e6dc040c05f2ccc677846d54495447bdd6", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: `<L1 as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:31:6\n    |\n+LL | trait Case1 {\n+   |       -----\n+...\n+LL |                 Debug\n+   |                 ----- required by this bound in `Case1`\n+...\n LL | impl Case1 for S1 {\n    |      ^^^^^ `<L1 as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `for<'a> std::fmt::Debug` is not implemented for `<L1 as Lam<&'a u8>>::App`\n+   = note: required because of the requirements on the impl of `for<'a> std::fmt::Debug` for `<<<<S1 as Case1>::C as std::iter::Iterator>::Item as std::iter::Iterator>::Item as Lam<&'a u8>>::App`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20"}, {"sha": "c4ab7b6e26e51ac8f2d4ce3bbcf9e490b655d94d", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -42,11 +42,18 @@ LL |     + Display = Self;\n error[E0277]: `T` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       -------------\n+...\n+LL |     + Display = Self;\n+   |       ------- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+   = note: required because of the requirements on the impl of `std::fmt::Display` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n@@ -55,9 +62,16 @@ LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       -------------\n+...\n+LL |     + Deref<Target = str>\n+   |       ------------------- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n    |\n+   = note: required because of the requirements on the impl of `std::ops::Deref` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Deref> UncheckedCopy for T {}\n@@ -66,10 +80,17 @@ LL | impl<T: std::ops::Deref> UncheckedCopy for T {}\n error[E0277]: cannot add-assign `&'static str` to `T`\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       -------------\n+...\n+LL |     + AddAssign<&'static str>\n+   |       ----------------------- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n+   = note: required because of the requirements on the impl of `std::ops::AddAssign<&'static str>` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\n@@ -78,9 +99,16 @@ LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       -------------\n+...\n+LL |     type Output: Copy\n+   |                  ---- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n+   = note: required because of the requirements on the impl of `std::marker::Copy` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> UncheckedCopy for T {}"}, {"sha": "c311a9f456e798122179d925684b68f07b059382", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -42,11 +42,18 @@ LL |     + Display = Self;\n error[E0277]: `T` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       -------------\n+...\n+LL |     + Display = Self;\n+   |       ------- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+   = note: required because of the requirements on the impl of `std::fmt::Display` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n@@ -55,9 +62,16 @@ LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       -------------\n+...\n+LL |     + Deref<Target = str>\n+   |       ------------------- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n    |\n+   = note: required because of the requirements on the impl of `std::ops::Deref` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Deref> UncheckedCopy for T {}\n@@ -66,10 +80,17 @@ LL | impl<T: std::ops::Deref> UncheckedCopy for T {}\n error[E0277]: cannot add-assign `&'static str` to `T`\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       -------------\n+...\n+LL |     + AddAssign<&'static str>\n+   |       ----------------------- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n+   = note: required because of the requirements on the impl of `std::ops::AddAssign<&'static str>` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\n@@ -78,9 +99,16 @@ LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       -------------\n+...\n+LL |     type Output: Copy\n+   |                  ---- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n+   = note: required because of the requirements on the impl of `std::marker::Copy` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> UncheckedCopy for T {}"}, {"sha": "38dd8b66a6ed5a3e7804b55d8817bc7bb3c2677e", "filename": "src/test/ui/associated-types/issue-43924.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -9,14 +9,28 @@ LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n   --> $DIR/issue-43924.rs:10:6\n    |\n+LL | trait Foo<T: Default + ToString> {\n+   |       ---\n+LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n+   |               ------- required by this bound in `Foo`\n+...\n LL | impl Foo<u32> for () {}\n    |      ^^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n+   |\n+   = note: required because of the requirements on the impl of `std::default::Default` for `<() as Foo<u32>>::Out`\n \n error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n   --> $DIR/issue-43924.rs:11:6\n    |\n+LL | trait Foo<T: Default + ToString> {\n+   |       ---\n+LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n+   |               ------- required by this bound in `Foo`\n+...\n LL | impl Foo<u64> for () {}\n    |      ^^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n+   |\n+   = note: required because of the requirements on the impl of `std::default::Default` for `<() as Foo<u64>>::Out`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ae3ebe811e2abd88d850b64726235b60d66fb17a", "filename": "src/test/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -9,8 +9,15 @@ LL |     type MpuConfig: MyDisplay = T;\n error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n   --> $DIR/issue-65774-1.rs:16:6\n    |\n+LL | trait MPU {\n+   |       ---\n+LL |     type MpuConfig: MyDisplay = T;\n+   |                     --------- required by this bound in `MPU`\n+...\n LL | impl MPU for S { }\n    |      ^^^ the trait `MyDisplay` is not implemented for `T`\n+   |\n+   = note: required because of the requirements on the impl of `MyDisplay` for `<S as MPU>::MpuConfig`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dadf229bd5d16f170a2819630a63df1c8bc08d44", "filename": "src/test/ui/associated-types/issue-65774-2.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -9,8 +9,15 @@ LL |     type MpuConfig: MyDisplay = T;\n error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n   --> $DIR/issue-65774-2.rs:16:6\n    |\n+LL | trait MPU {\n+   |       ---\n+LL |     type MpuConfig: MyDisplay = T;\n+   |                     --------- required by this bound in `MPU`\n+...\n LL | impl MPU for S { }\n    |      ^^^ the trait `MyDisplay` is not implemented for `T`\n+   |\n+   = note: required because of the requirements on the impl of `MyDisplay` for `<S as MPU>::MpuConfig`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b1437a3669279b5d475fa58a11719285fff12021", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -1,11 +1,15 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:6:24\n    |\n+LL | trait Foo : Send+Sync { }\n+   |             ---- required by this bound in `Foo`\n+LL | \n LL | impl <T: Sync+'static> Foo for (T,) { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |\n    = help: within `(T,)`, the trait `std::marker::Send` is not implemented for `T`\n    = note: required because it appears within the type `(T,)`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `(T,)`\n help: consider further restricting this bound\n    |\n LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n@@ -14,11 +18,15 @@ LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n    |\n+LL | trait Foo : Send+Sync { }\n+   |                  ---- required by this bound in `Foo`\n+...\n LL | impl <T: Send> Foo for (T,T) { }\n    |                ^^^ `T` cannot be shared between threads safely\n    |\n    = help: within `(T, T)`, the trait `std::marker::Sync` is not implemented for `T`\n    = note: required because it appears within the type `(T, T)`\n+   = note: required because of the requirements on the impl of `std::marker::Sync` for `(T, T)`\n help: consider further restricting this bound\n    |\n LL | impl <T: Send + std::marker::Sync> Foo for (T,T) { }"}, {"sha": "8555c843a9342bab0f3445d25cf4bec18cdbed6c", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -3,9 +3,15 @@ error[E0277]: `T` cannot be sent between threads safely\n    |\n LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n+   | \n+  ::: $DIR/auxiliary/trait_superkinds_in_metadata.rs:7:58\n+   |\n+LL | pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n+   |                                                          ---- required by this bound in `trait_superkinds_in_metadata::RequiresRequiresShareAndSend`\n    |\n    = help: within `X<T>`, the trait `std::marker::Send` is not implemented for `T`\n    = note: required because it appears within the type `X<T>`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `X<T>`\n help: consider further restricting this bound\n    |\n LL | impl <T:Sync+'static + std::marker::Send> RequiresRequiresShareAndSend for X<T> { }"}, {"sha": "b4f22f2d68fc97c0b411b5a9d3464dfecd23fe1e", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-simple.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -1,10 +1,14 @@\n error[E0277]: `std::rc::Rc<i8>` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-simple.rs:6:6\n    |\n+LL | trait Foo : Send { }\n+   |             ---- required by this bound in `Foo`\n+LL | \n LL | impl Foo for std::rc::Rc<i8> { }\n    |      ^^^ `std::rc::Rc<i8>` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `std::rc::Rc<i8>`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `std::rc::Rc<i8>`\n \n error: aborting due to previous error\n "}, {"sha": "1334997c3d93b3d8ae0c5fd63f50722cde51461b", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -1,10 +1,14 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-typaram-not-send.rs:5:24\n    |\n+LL | trait Foo : Send { }\n+   |             ---- required by this bound in `Foo`\n+LL | \n LL | impl <T: Sync+'static> Foo for T { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `T`\n help: consider further restricting this bound\n    |\n LL | impl <T: Sync+'static + std::marker::Send> Foo for T { }"}, {"sha": "14c7d02c2586bb49039c5c03cb59970f4bd2e322", "filename": "src/test/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -1,20 +1,28 @@\n error[E0277]: the size for values of type `[isize]` cannot be known at compilation time\n   --> $DIR/dst-sized-trait-param.rs:7:6\n    |\n+LL | trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n+   |           - required by this bound in `Foo`\n+LL | \n LL | impl Foo<[isize]> for usize { }\n    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[isize]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because of the requirements on the impl of `std::marker::Sized` for `[isize]`\n \n error[E0277]: the size for values of type `[usize]` cannot be known at compilation time\n   --> $DIR/dst-sized-trait-param.rs:10:6\n    |\n+LL | trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n+   |                ----- required by this bound in `Foo`\n+...\n LL | impl Foo<isize> for [usize] { }\n    |      ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[usize]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because of the requirements on the impl of `std::marker::Sized` for `[usize]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f27bc4d68d441751ee4fae46391fbc5bfb5f44c8", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -1,12 +1,19 @@\n error[E0271]: type mismatch resolving `for<'a> <<T as Baz>::Baa<'a> as std::ops::Deref>::Target == <<T as Baz>::Quux<'a> as Foo>::Bar<'a, 'static>`\n   --> $DIR/construct_with_other_type.rs:19:9\n    |\n+LL | trait Baz {\n+   |       ---\n+...\n+LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>  where Self: 'a;\n+   |                         -------------------------------------------------- required by this bound in `Baz`\n+...\n LL | impl<T> Baz for T where T: Foo {\n    |         ^^^ expected type parameter `T`, found associated type\n    |\n    = note: expected associated type `<T as Foo>::Bar<'_, 'static>`\n               found associated type `<<T as Baz>::Quux<'_> as Foo>::Bar<'_, 'static>`\n    = note: you might be missing a type parameter or trait bound\n+   = note: required because of the requirements on the impl of `Baz` for `T`\n \n error: aborting due to previous error\n "}, {"sha": "3f06dfdccd868f51324b0ae1e1f89ef50a44dbfc", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -1,11 +1,15 @@\n error[E0277]: the size for values of type `[()]` cannot be known at compilation time\n   --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:19:6\n    |\n+LL | trait Tsized<P: Sized = [Self]> {}\n+   |              - required by this bound in `Tsized`\n+LL | \n LL | impl Tsized for () {}\n    |      ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[()]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because of the requirements on the impl of `std::marker::Sized` for `[()]`\n \n error: aborting due to previous error\n "}, {"sha": "6453508410eade0299f11837692d1da0f60076ca", "filename": "src/test/ui/impl-bounds-checking.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fimpl-bounds-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fimpl-bounds-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-bounds-checking.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -1,8 +1,13 @@\n error[E0277]: the trait bound `isize: Clone2` is not satisfied\n   --> $DIR/impl-bounds-checking.rs:10:6\n    |\n+LL | trait Getter<T: Clone2> {\n+   |                 ------ required by this bound in `Getter`\n+...\n LL | impl Getter<isize> for isize {\n    |      ^^^^^^^^^^^^^ the trait `Clone2` is not implemented for `isize`\n+   |\n+   = note: required because of the requirements on the impl of `Clone2` for `isize`\n \n error: aborting due to previous error\n "}, {"sha": "9c50b4af9a99306e366c4446d9009c61e908795c", "filename": "src/test/ui/issues/issue-10412.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -49,11 +49,15 @@ LL | impl<'self> Serializable<str> for &'self str {\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/issue-10412.rs:6:13\n    |\n+LL | trait Serializable<'self, T> {\n+   |                           - required by this bound in `Serializable`\n+...\n LL | impl<'self> Serializable<str> for &'self str {\n    |             ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because of the requirements on the impl of `std::marker::Sized` for `str`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "86c0f8f597bef58591232939acdfdd33100d8db6", "filename": "src/test/ui/issues/issue-43784-supertrait.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -4,6 +4,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | impl<T> Complete for T {}\n    |         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n+   = note: required because of the requirements on the impl of `std::marker::Copy` for `T`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> Complete for T {}"}, {"sha": "74606b71bf12e59fa21e103075e67081b93e25a4", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -21,15 +21,27 @@ error[E0277]: the trait bound `Test1: std::clone::Clone` is not satisfied\n    |\n LL | #[derive(Copy(Bad))]\n    |          ^^^^ the trait `std::clone::Clone` is not implemented for `Test1`\n+   | \n+  ::: $SRC_DIR/libcore/marker.rs:LL:COL\n    |\n+LL | pub trait Copy: Clone {\n+   |                 ----- required by this bound in `std::marker::Copy`\n+   |\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `Test1`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `Test2: std::clone::Clone` is not satisfied\n   --> $DIR/malformed-derive-entry.rs:6:10\n    |\n LL | #[derive(Copy=\"bad\")]\n    |          ^^^^ the trait `std::clone::Clone` is not implemented for `Test2`\n+   | \n+  ::: $SRC_DIR/libcore/marker.rs:LL:COL\n+   |\n+LL | pub trait Copy: Clone {\n+   |                 ----- required by this bound in `std::marker::Copy`\n    |\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `Test2`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors"}, {"sha": "91e45df8d3ef939c78bd885160add8c88384eb09", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -1,9 +1,13 @@\n error[E0277]: the trait bound `U: std::cmp::Eq` is not satisfied\n   --> $DIR/specialization-wfcheck.rs:7:17\n    |\n+LL | trait Foo<'a, T: Eq + 'a> { }\n+   |                  -- required by this bound in `Foo`\n+LL | \n LL | default impl<U> Foo<'static, U> for () {}\n    |                 ^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `U`\n    |\n+   = note: required because of the requirements on the impl of `std::cmp::Eq` for `U`\n help: consider restricting type parameter `U`\n    |\n LL | default impl<U: std::cmp::Eq> Foo<'static, U> for () {}"}, {"sha": "441fa9f27929d4ddc1fa6ca6fd55250a9a96024a", "filename": "src/test/ui/traits/traits-assoc-type-in-supertrait-bad.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -1,8 +1,13 @@\n error[E0271]: type mismatch resolving `<std::vec::IntoIter<i32> as std::iter::Iterator>::Item == u32`\n   --> $DIR/traits-assoc-type-in-supertrait-bad.rs:11:6\n    |\n+LL | pub trait Foo: Iterator<Item=<Self as Foo>::Key> {\n+   |                         ----------------------- required by this bound in `Foo`\n+...\n LL | impl Foo for IntoIter<i32> {\n    |      ^^^ expected `i32`, found `u32`\n+   |\n+   = note: required because of the requirements on the impl of `Foo` for `std::vec::IntoIter<i32>`\n \n error: aborting due to previous error\n "}, {"sha": "502dd2010586970112105434c771bc0804d4a32d", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -1,13 +1,17 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-trait-impl-trait-arg.rs:8:17\n    |\n+LL | trait T2<Z> {\n+   |          - required by this bound in `T2`\n+...\n LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because of the requirements on the impl of `std::marker::Sized` for `X`\n \n error: aborting due to previous error\n "}, {"sha": "cd30c98f55d0d3dee049619b63ddb9f325bd50c1", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1c23c993dc65810b535bed8c305643c892a2a4/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=ad1c23c993dc65810b535bed8c305643c892a2a4", "patch": "@@ -1,13 +1,17 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized7.rs:12:21\n    |\n+LL | trait T1<Z: T> {\n+   |          - required by this bound in `T1`\n+...\n LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |      -              ^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because of the requirements on the impl of `std::marker::Sized` for `X`\n \n error: aborting due to previous error\n "}]}