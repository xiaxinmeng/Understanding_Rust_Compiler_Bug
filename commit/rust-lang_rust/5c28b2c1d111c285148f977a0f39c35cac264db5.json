{"sha": "5c28b2c1d111c285148f977a0f39c35cac264db5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMjhiMmMxZDExMWMyODUxNDhmOTc3YTBmMzljMzVjYWMyNjRkYjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-08T21:25:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-08T23:05:13Z"}, "message": "rustdoc: Don't bother reporting the type of arguments\n\nThis is already displayed in the function signature. Simpler this way.", "tree": {"sha": "f6414c4e0b9ffcab137e2e03079368ac35d21d0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6414c4e0b9ffcab137e2e03079368ac35d21d0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c28b2c1d111c285148f977a0f39c35cac264db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c28b2c1d111c285148f977a0f39c35cac264db5", "html_url": "https://github.com/rust-lang/rust/commit/5c28b2c1d111c285148f977a0f39c35cac264db5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c28b2c1d111c285148f977a0f39c35cac264db5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcde161f4f9b686a790da52653a0a810bf09d487", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcde161f4f9b686a790da52653a0a810bf09d487", "html_url": "https://github.com/rust-lang/rust/commit/fcde161f4f9b686a790da52653a0a810bf09d487"}], "stats": {"total": 135, "additions": 10, "deletions": 125}, "files": [{"sha": "ebd0896f782f898fb2e3e130a0e112ba3478f3ab", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c28b2c1d111c285148f977a0f39c35cac264db5/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c28b2c1d111c285148f977a0f39c35cac264db5/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=5c28b2c1d111c285148f977a0f39c35cac264db5", "patch": "@@ -66,8 +66,7 @@ type fndoc = {\n \n type argdoc = {\n     name: str,\n-    desc: option<str>,\n-    ty: option<str>\n+    desc: option<str>\n };\n \n type retdoc = {"}, {"sha": "2ba3a397c26555a278726633a7aeefa11f1c63f8", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c28b2c1d111c285148f977a0f39c35cac264db5/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c28b2c1d111c285148f977a0f39c35cac264db5/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=5c28b2c1d111c285148f977a0f39c35cac264db5", "patch": "@@ -161,8 +161,7 @@ fn argdocs_from_args(args: [ast::arg]) -> [doc::argdoc] {\n fn argdoc_from_arg(arg: ast::arg) -> doc::argdoc {\n     {\n         name: arg.ident,\n-        desc: none,\n-        ty: none\n+        desc: none\n     }\n }\n "}, {"sha": "a4d9c1fecf8f47ce52a0d8e44a81885921673fb9", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c28b2c1d111c285148f977a0f39c35cac264db5/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c28b2c1d111c285148f977a0f39c35cac264db5/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=5c28b2c1d111c285148f977a0f39c35cac264db5", "patch": "@@ -486,11 +486,9 @@ fn write_args(\n }\n \n fn write_arg(ctxt: ctxt, arg: doc::argdoc) {\n-    assert option::is_some(arg.ty);\n     ctxt.w.write_str(#fmt(\n-        \"* `%s`: `%s`\",\n-        arg.name,\n-        option::get(arg.ty)\n+        \"* `%s`\",\n+        arg.name\n     ));\n     alt arg.desc {\n       some(desc) {\n@@ -509,8 +507,8 @@ fn should_write_argument_list() {\n         markdown,\n         \"Arguments:\\n\\\n          \\n\\\n-         * `b`: `int`\\n\\\n-         * `c`: `int`\\n\\\n+         * `b`\\n\\\n+         * `c`\\n\\\n          \\n\"\n     );\n }\n@@ -526,7 +524,7 @@ fn should_not_write_arguments_if_none() {\n fn should_write_argument_description() {\n     let source = \"#[doc(args(a = \\\"milk\\\"))] fn f(a: bool) { }\";\n     let markdown = test::render(source);\n-    assert str::contains(markdown, \"`a`: `bool` - milk\");\n+    assert str::contains(markdown, \"`a` - milk\");\n }\n \n fn write_return(\n@@ -740,7 +738,7 @@ fn should_write_resource_signature() {\n fn should_write_resource_args() {\n     let markdown = test::render(\"#[doc(args(a = \\\"b\\\"))]\\\n                                  resource r(a: bool) { }\");\n-    assert str::contains(markdown, \"Arguments:\\n\\n* `a`: `bool` - b\");\n+    assert str::contains(markdown, \"Arguments:\\n\\n* `a` - b\");\n }\n \n fn write_iface(ctxt: ctxt, doc: doc::ifacedoc) {\n@@ -812,7 +810,7 @@ fn should_write_iface_method_argument_header() {\n fn should_write_iface_method_arguments() {\n     let markdown = test::render(\n         \"iface a { fn a(b: int); }\");\n-    assert str::contains(markdown, \"* `b`: `int`\\n\");\n+    assert str::contains(markdown, \"* `b`\\n\");\n }\n \n #[test]\n@@ -894,7 +892,7 @@ fn should_write_impl_method_argument_header() {\n fn should_write_impl_method_arguments() {\n     let markdown = test::render(\n         \"impl a for int { fn a(b: int) { } }\");\n-    assert str::contains(markdown, \"* `b`: `int`\\n\");\n+    assert str::contains(markdown, \"* `b`\\n\");\n }\n \n #[test]"}, {"sha": "63b4d053abbddc9527fbf2847c40157e8dac14ac", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/5c28b2c1d111c285148f977a0f39c35cac264db5/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c28b2c1d111c285148f977a0f39c35cac264db5/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=5c28b2c1d111c285148f977a0f39c35cac264db5", "patch": "@@ -40,7 +40,6 @@ fn fold_fn(\n     let srv = fold.ctxt;\n \n     {\n-        args: merge_arg_tys(srv, doc.id(), doc.args),\n         return: merge_ret_ty(srv, doc.id(), doc.return),\n         sig: get_fn_sig(srv, doc.id())\n         with doc\n@@ -134,22 +133,6 @@ fn should_add_native_fn_ret_types() {\n     assert doc.cratemod().nmods()[0].fns[0].return.ty == some(\"int\");\n }\n \n-fn merge_arg_tys(\n-    srv: astsrv::srv,\n-    fn_id: doc::ast_id,\n-    args: [doc::argdoc]\n-) -> [doc::argdoc] {\n-    let tys = get_arg_tys(srv, fn_id);\n-    vec::map2(args, tys) {|arg, ty|\n-        // Sanity check that we're talking about the same args\n-        assert arg.name == tuple::first(ty);\n-        {\n-            ty: some(tuple::second(ty))\n-            with arg\n-        }\n-    }\n-}\n-\n fn get_arg_tys(srv: astsrv::srv, fn_id: doc::ast_id) -> [(str, str)] {\n     astsrv::exec(srv) {|ctxt|\n         alt check ctxt.ast_map.get(fn_id) {\n@@ -174,20 +157,6 @@ fn decl_arg_tys(decl: ast::fn_decl) -> [(str, str)] {\n     }\n }\n \n-#[test]\n-fn should_add_arg_types() {\n-    let doc = test::mk_doc(\"fn a(b: int, c: bool) { }\");\n-    let fn_ = doc.cratemod().fns()[0];\n-    assert fn_.args[0].ty == some(\"int\");\n-    assert fn_.args[1].ty == some(\"bool\");\n-}\n-\n-#[test]\n-fn should_add_native_fn_arg_types() {\n-    let doc = test::mk_doc(\"native mod a { fn a(b: int); }\");\n-    assert doc.cratemod().nmods()[0].fns[0].args[0].ty == some(\"int\");\n-}\n-\n fn fold_const(\n     fold: fold::fold<astsrv::srv>,\n     doc: doc::constdoc\n@@ -260,7 +229,6 @@ fn fold_res(\n     let srv = fold.ctxt;\n \n     {\n-        args: merge_arg_tys(srv, doc.id(), doc.args),\n         sig: some(astsrv::exec(srv) {|ctxt|\n             alt check ctxt.ast_map.get(doc.id()) {\n               ast_map::node_item(@{\n@@ -280,12 +248,6 @@ fn should_add_resource_sigs() {\n     assert doc.cratemod().resources()[0].sig == some(\"resource r(b: bool)\");\n }\n \n-#[test]\n-fn should_add_resource_arg_tys() {\n-    let doc = test::mk_doc(\"resource r(a: bool) { }\");\n-    assert doc.cratemod().resources()[0].args[0].ty == some(\"bool\");\n-}\n-\n fn fold_iface(\n     fold: fold::fold<astsrv::srv>,\n     doc: doc::ifacedoc\n@@ -303,11 +265,6 @@ fn merge_methods(\n ) -> [doc::methoddoc] {\n     par::anymap(docs) {|doc|\n         {\n-            args: merge_method_arg_tys(\n-                srv,\n-                item_id,\n-                doc.args,\n-                doc.name),\n             return: merge_method_ret_ty(\n                 srv,\n                 item_id,\n@@ -403,58 +360,6 @@ fn get_method_sig(\n     }\n }\n \n-fn merge_method_arg_tys(\n-    srv: astsrv::srv,\n-    item_id: doc::ast_id,\n-    args: [doc::argdoc],\n-    method_name: str\n-) -> [doc::argdoc] {\n-    let tys = get_method_arg_tys(srv, item_id, method_name);\n-    vec::map2(args, tys) {|arg, ty|\n-        assert arg.name == tuple::first(ty);\n-        {\n-            ty: some(tuple::second(ty))\n-            with arg\n-        }\n-    }\n-}\n-\n-fn get_method_arg_tys(\n-    srv: astsrv::srv,\n-    item_id: doc::ast_id,\n-    method_name: str\n-) -> [(str, str)] {\n-    astsrv::exec(srv) {|ctxt|\n-        alt ctxt.ast_map.get(item_id) {\n-          ast_map::node_item(@{\n-            node: ast::item_iface(_, methods), _\n-          }, _) {\n-            alt vec::find(methods) {|method|\n-                method.ident == method_name\n-            } {\n-                some(method) {\n-                    decl_arg_tys(method.decl)\n-                }\n-                _ { fail \"get_method_arg_tys: expected method\"; }\n-            }\n-          }\n-          ast_map::node_item(@{\n-            node: ast::item_impl(_, _, _, methods), _\n-          }, _) {\n-            alt vec::find(methods) {|method|\n-                method.ident == method_name\n-            } {\n-                some(method) {\n-                    decl_arg_tys(method.decl)\n-                }\n-                _ { fail \"get_method_arg_tys: expected method\"; }\n-            }\n-          }\n-          _ { fail }\n-        }\n-    }\n-}\n-\n #[test]\n fn should_add_iface_method_sigs() {\n     let doc = test::mk_doc(\"iface i { fn a() -> int; }\");\n@@ -473,14 +378,6 @@ fn should_not_add_iface_method_nil_ret_type() {\n     assert doc.cratemod().ifaces()[0].methods[0].return.ty == none;\n }\n \n-#[test]\n-fn should_add_iface_method_arg_types() {\n-    let doc = test::mk_doc(\"iface i { fn a(b: int, c: bool); }\");\n-    let fn_ = doc.cratemod().ifaces()[0].methods[0];\n-    assert fn_.args[0].ty == some(\"int\");\n-    assert fn_.args[1].ty == some(\"bool\");\n-}\n-\n fn fold_impl(\n     fold: fold::fold<astsrv::srv>,\n     doc: doc::impldoc\n@@ -546,14 +443,6 @@ fn should_not_add_impl_method_nil_ret_type() {\n     assert doc.cratemod().impls()[0].methods[0].return.ty == none;\n }\n \n-#[test]\n-fn should_add_impl_method_arg_types() {\n-    let doc = test::mk_doc(\"impl i for int { fn a(b: int, c: bool) { } }\");\n-    let fn_ = doc.cratemod().impls()[0].methods[0];\n-    assert fn_.args[0].ty == some(\"int\");\n-    assert fn_.args[1].ty == some(\"bool\");\n-}\n-\n fn fold_type(\n     fold: fold::fold<astsrv::srv>,\n     doc: doc::tydoc"}]}