{"sha": "768aa4259fce15f313042892739ed4d8b7e518b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OGFhNDI1OWZjZTE1ZjMxMzA0Mjg5MjczOWVkNGQ4YjdlNTE4YjQ=", "commit": {"author": {"name": "Tim", "email": "tdhutt@gmail.com", "date": "2020-03-30T17:12:22Z"}, "committer": {"name": "Tim Hutt", "email": "timh@graphcore.ai", "date": "2020-03-30T20:23:21Z"}, "message": "Add basic task support\n\nThis adds basic support for running `cargo build`, `cargo run`, etc.", "tree": {"sha": "f50618675b04ea7d29490fc942fb6cde6b3c161a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f50618675b04ea7d29490fc942fb6cde6b3c161a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/768aa4259fce15f313042892739ed4d8b7e518b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/768aa4259fce15f313042892739ed4d8b7e518b4", "html_url": "https://github.com/rust-lang/rust/commit/768aa4259fce15f313042892739ed4d8b7e518b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/768aa4259fce15f313042892739ed4d8b7e518b4/comments", "author": {"login": "Timmmm", "id": 376842, "node_id": "MDQ6VXNlcjM3Njg0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/376842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Timmmm", "html_url": "https://github.com/Timmmm", "followers_url": "https://api.github.com/users/Timmmm/followers", "following_url": "https://api.github.com/users/Timmmm/following{/other_user}", "gists_url": "https://api.github.com/users/Timmmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Timmmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Timmmm/subscriptions", "organizations_url": "https://api.github.com/users/Timmmm/orgs", "repos_url": "https://api.github.com/users/Timmmm/repos", "events_url": "https://api.github.com/users/Timmmm/events{/privacy}", "received_events_url": "https://api.github.com/users/Timmmm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "671926ac93f0ff921758a919eaf87c056979189f", "url": "https://api.github.com/repos/rust-lang/rust/commits/671926ac93f0ff921758a919eaf87c056979189f", "html_url": "https://github.com/rust-lang/rust/commit/671926ac93f0ff921758a919eaf87c056979189f"}], "stats": {"total": 83, "additions": 77, "deletions": 6}, "files": [{"sha": "c9819e4573fe05e4bf30d12395aa92c53008022e", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/768aa4259fce15f313042892739ed4d8b7e518b4/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/768aa4259fce15f313042892739ed4d8b7e518b4/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=768aa4259fce15f313042892739ed4d8b7e518b4", "patch": "@@ -30,15 +30,14 @@ export function configToServerOptions(config: Config) {\n     };\n }\n \n-export async function createClient(config: Config, serverPath: string): Promise<lc.LanguageClient> {\n+export async function createClient(config: Config, serverPath: string, workspaceFolder: vscode.WorkspaceFolder | null): Promise<lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n-    const workspaceFolderPath = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n \n     const run: lc.Executable = {\n         command: serverPath,\n-        options: { cwd: workspaceFolderPath },\n+        options: { cwd: workspaceFolder?.uri.fsPath ?? '.' },\n     };\n     const serverOptions: lc.ServerOptions = {\n         run,"}, {"sha": "0e705bc84609ed7d66f61d9a0beb5cce4de0e7d5", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/768aa4259fce15f313042892739ed4d8b7e518b4/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/768aa4259fce15f313042892739ed4d8b7e518b4/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=768aa4259fce15f313042892739ed4d8b7e518b4", "patch": "@@ -15,8 +15,13 @@ export class Ctx {\n \n     }\n \n-    static async create(config: Config, extCtx: vscode.ExtensionContext, serverPath: string): Promise<Ctx> {\n-        const client = await createClient(config, serverPath);\n+    static async create(\n+        config: Config,\n+        extCtx: vscode.ExtensionContext,\n+        serverPath: string,\n+        workspaceFolder: vscode.WorkspaceFolder | null,\n+    ): Promise<Ctx> {\n+        const client = await createClient(config, serverPath, workspaceFolder);\n         const res = new Ctx(config, extCtx, client, serverPath);\n         res.pushCleanup(client.start());\n         await client.onReady();"}, {"sha": "40701e4f54e081764c17c4814ba6d3d868216f91", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/768aa4259fce15f313042892739ed4d8b7e518b4/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/768aa4259fce15f313042892739ed4d8b7e518b4/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=768aa4259fce15f313042892739ed4d8b7e518b4", "patch": "@@ -13,6 +13,7 @@ import { log, assert } from './util';\n import { PersistentState } from './persistent_state';\n import { fetchRelease, download } from './net';\n import { spawnSync } from 'child_process';\n+import { activateTaskProvider } from './tasks';\n \n let ctx: Ctx | undefined;\n \n@@ -41,11 +42,13 @@ export async function activate(context: vscode.ExtensionContext) {\n     const state = new PersistentState(context.globalState);\n     const serverPath = await bootstrap(config, state);\n \n+    const workspaceFolder = vscode.workspace.workspaceFolders?.[0] ?? null;\n+\n     // Note: we try to start the server before we activate type hints so that it\n     // registers its `onDidChangeDocument` handler before us.\n     //\n     // This a horribly, horribly wrong way to deal with this problem.\n-    ctx = await Ctx.create(config, context, serverPath);\n+    ctx = await Ctx.create(config, context, serverPath, workspaceFolder);\n \n     // Commands which invokes manually via command palette, shortcut, etc.\n \n@@ -85,6 +88,10 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('applySourceChange', commands.applySourceChange);\n     ctx.registerCommand('selectAndApplySourceChange', commands.selectAndApplySourceChange);\n \n+    if (workspaceFolder !== null) {\n+        ctx.pushCleanup(activateTaskProvider(workspaceFolder));\n+    }\n+\n     activateStatusDisplay(ctx);\n \n     if (!ctx.config.highlightingSemanticTokens) {"}, {"sha": "be036b872f39d3ea12466b2764d1c14ba19c1b42", "filename": "editors/code/src/tasks.ts", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/768aa4259fce15f313042892739ed4d8b7e518b4/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/768aa4259fce15f313042892739ed4d8b7e518b4/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=768aa4259fce15f313042892739ed4d8b7e518b4", "patch": "@@ -0,0 +1,60 @@\n+import {\n+    Disposable,\n+    ShellExecution,\n+    Task,\n+    TaskGroup,\n+    TaskProvider,\n+    tasks,\n+    WorkspaceFolder,\n+} from 'vscode';\n+\n+// This ends up as the `type` key in tasks.json. RLS also uses `cargo` and\n+// our configuration should be compatible with it so use the same key.\n+const TASK_TYPE = 'cargo';\n+\n+export function activateTaskProvider(target: WorkspaceFolder): Disposable {\n+    const provider: TaskProvider = {\n+        // Detect Rust tasks. Currently we do not do any actual detection\n+        // of tasks (e.g. aliases in .cargo/config) and just return a fixed\n+        // set of tasks that always exist. These tasks cannot be removed in\n+        // tasks.json - only tweaked.\n+        provideTasks: () => getStandardCargoTasks(target),\n+\n+        // We don't need to implement this.\n+        resolveTask: () => undefined,\n+    };\n+\n+    return tasks.registerTaskProvider(TASK_TYPE, provider);\n+}\n+\n+function getStandardCargoTasks(target: WorkspaceFolder): Task[] {\n+    return [\n+        { command: 'build', group: TaskGroup.Build },\n+        { command: 'check', group: TaskGroup.Build },\n+        { command: 'test', group: TaskGroup.Test },\n+        { command: 'clean', group: TaskGroup.Clean },\n+        { command: 'run', group: undefined },\n+    ]\n+        .map(({ command, group }) => {\n+            const vscodeTask = new Task(\n+                // The contents of this object end up in the tasks.json entries.\n+                {\n+                    type: TASK_TYPE,\n+                    command,\n+                },\n+                // The scope of the task - workspace or specific folder (global\n+                // is not supported).\n+                target,\n+                // The task name, and task source. These are shown in the UI as\n+                // `${source}: ${name}`, e.g. `rust: cargo build`.\n+                `cargo ${command}`,\n+                'rust',\n+                // What to do when this command is executed.\n+                new ShellExecution('cargo', [command]),\n+                // Problem matchers.\n+                ['$rustc'],\n+            );\n+            vscodeTask.group = group;\n+            return vscodeTask;\n+        });\n+}"}]}