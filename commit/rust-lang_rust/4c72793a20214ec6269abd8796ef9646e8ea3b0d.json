{"sha": "4c72793a20214ec6269abd8796ef9646e8ea3b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNzI3OTNhMjAyMTRlYzYyNjlhYmQ4Nzk2ZWY5NjQ2ZThlYTNiMGQ=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-05-16T14:18:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-16T14:18:31Z"}, "message": "Rollup merge of #41995 - gamazeps:thread-localkey, r=frewsxcv\n\n[Doc] Add links to the `thread::LocalKey` doc.\n\nPart of #29378 .\n\nI do not know exactly what should be done for the `cleanup` part, if you have any idea I'll gladly do it.\n\nr? @rust-lang/docs", "tree": {"sha": "1672a696b02c30faa2cadd642d9e5a9b5aa7550f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1672a696b02c30faa2cadd642d9e5a9b5aa7550f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c72793a20214ec6269abd8796ef9646e8ea3b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c72793a20214ec6269abd8796ef9646e8ea3b0d", "html_url": "https://github.com/rust-lang/rust/commit/4c72793a20214ec6269abd8796ef9646e8ea3b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c72793a20214ec6269abd8796ef9646e8ea3b0d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18171a88617a3ee4e57e72e8d018bd3c30861191", "url": "https://api.github.com/repos/rust-lang/rust/commits/18171a88617a3ee4e57e72e8d018bd3c30861191", "html_url": "https://github.com/rust-lang/rust/commit/18171a88617a3ee4e57e72e8d018bd3c30861191"}, {"sha": "f92bd3dbd005bb0bbcdeb64eea263634428d660a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f92bd3dbd005bb0bbcdeb64eea263634428d660a", "html_url": "https://github.com/rust-lang/rust/commit/f92bd3dbd005bb0bbcdeb64eea263634428d660a"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "c2c6e6cf87dff4ad71fcde7e8f721f342ef3d37c", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4c72793a20214ec6269abd8796ef9646e8ea3b0d/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c72793a20214ec6269abd8796ef9646e8ea3b0d/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=4c72793a20214ec6269abd8796ef9646e8ea3b0d", "patch": "@@ -19,16 +19,16 @@ use mem;\n /// A thread local storage key which owns its contents.\n ///\n /// This key uses the fastest possible implementation available to it for the\n-/// target platform. It is instantiated with the `thread_local!` macro and the\n-/// primary method is the `with` method.\n+/// target platform. It is instantiated with the [`thread_local!`] macro and the\n+/// primary method is the [`with`] method.\n ///\n-/// The `with` method yields a reference to the contained value which cannot be\n+/// The [`with`] method yields a reference to the contained value which cannot be\n /// sent across threads or escape the given closure.\n ///\n /// # Initialization and Destruction\n ///\n-/// Initialization is dynamically performed on the first call to `with()`\n-/// within a thread, and values that implement `Drop` get destructed when a\n+/// Initialization is dynamically performed on the first call to [`with`]\n+/// within a thread, and values that implement [`Drop`] get destructed when a\n /// thread exits. Some caveats apply, which are explained below.\n ///\n /// # Examples\n@@ -77,6 +77,10 @@ use mem;\n /// 3. On macOS, initializing TLS during destruction of other TLS slots can\n ///    sometimes cancel *all* destructors for the current thread, whether or not\n ///    the slots have already had their destructors run or not.\n+///\n+/// [`with`]: ../../std/thread/struct.LocalKey.html#method.with\n+/// [`thread_local!`]: ../../std/macro.thread_local.html\n+/// [`Drop`]: ../../std/ops/trait.Drop.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct LocalKey<T: 'static> {\n     // This outer `LocalKey<T>` type is what's going to be stored in statics,\n@@ -106,7 +110,7 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n     }\n }\n \n-/// Declare a new thread local storage key of type `std::thread::LocalKey`.\n+/// Declare a new thread local storage key of type [`std::thread::LocalKey`].\n ///\n /// # Syntax\n ///\n@@ -124,8 +128,10 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n /// # fn main() {}\n /// ```\n ///\n-/// See [LocalKey documentation](thread/struct.LocalKey.html) for more\n+/// See [LocalKey documentation][`std::thread::LocalKey`] for more\n /// information.\n+///\n+/// [`std::thread::LocalKey`]: ../std/thread/struct.LocalKey.html\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n@@ -195,11 +201,13 @@ macro_rules! __thread_local_inner {\n #[derive(Debug, Eq, PartialEq, Copy, Clone)]\n pub enum LocalKeyState {\n     /// All keys are in this state whenever a thread starts. Keys will\n-    /// transition to the `Valid` state once the first call to `with` happens\n+    /// transition to the `Valid` state once the first call to [`with`] happens\n     /// and the initialization expression succeeds.\n     ///\n     /// Keys in the `Uninitialized` state will yield a reference to the closure\n-    /// passed to `with` so long as the initialization routine does not panic.\n+    /// passed to [`with`] so long as the initialization routine does not panic.\n+    ///\n+    /// [`with`]: ../../std/thread/struct.LocalKey.html#method.with\n     Uninitialized,\n \n     /// Once a key has been accessed successfully, it will enter the `Valid`\n@@ -208,15 +216,19 @@ pub enum LocalKeyState {\n     /// `Destroyed` state.\n     ///\n     /// Keys in the `Valid` state will be guaranteed to yield a reference to the\n-    /// closure passed to `with`.\n+    /// closure passed to [`with`].\n+    ///\n+    /// [`with`]: ../../std/thread/struct.LocalKey.html#method.with\n     Valid,\n \n     /// When a thread exits, the destructors for keys will be run (if\n     /// necessary). While a destructor is running, and possibly after a\n     /// destructor has run, a key is in the `Destroyed` state.\n     ///\n     /// Keys in the `Destroyed` states will trigger a panic when accessed via\n-    /// `with`.\n+    /// [`with`].\n+    ///\n+    /// [`with`]: ../../std/thread/struct.LocalKey.html#method.with\n     Destroyed,\n }\n \n@@ -283,23 +295,26 @@ impl<T: 'static> LocalKey<T> {\n     /// Query the current state of this key.\n     ///\n     /// A key is initially in the `Uninitialized` state whenever a thread\n-    /// starts. It will remain in this state up until the first call to `with`\n+    /// starts. It will remain in this state up until the first call to [`with`]\n     /// within a thread has run the initialization expression successfully.\n     ///\n     /// Once the initialization expression succeeds, the key transitions to the\n-    /// `Valid` state which will guarantee that future calls to `with` will\n+    /// `Valid` state which will guarantee that future calls to [`with`] will\n     /// succeed within the thread.\n     ///\n     /// When a thread exits, each key will be destroyed in turn, and as keys are\n     /// destroyed they will enter the `Destroyed` state just before the\n     /// destructor starts to run. Keys may remain in the `Destroyed` state after\n     /// destruction has completed. Keys without destructors (e.g. with types\n-    /// that are `Copy`), may never enter the `Destroyed` state.\n+    /// that are [`Copy`]), may never enter the `Destroyed` state.\n     ///\n     /// Keys in the `Uninitialized` state can be accessed so long as the\n     /// initialization does not panic. Keys in the `Valid` state are guaranteed\n     /// to be able to be accessed. Keys in the `Destroyed` state will panic on\n-    /// any call to `with`.\n+    /// any call to [`with`].\n+    ///\n+    /// [`with`]: ../../std/thread/struct.LocalKey.html#method.with\n+    /// [`Copy`]: ../../std/marker/trait.Copy.html\n     #[unstable(feature = \"thread_local_state\",\n                reason = \"state querying was recently added\",\n                issue = \"27716\")]"}]}