{"sha": "e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YWE3M2QyYmYzYzk0YmM0ZmYzMmFmZWIyYjIwZjI4YzY3N2RhZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-09T18:43:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-09T18:43:33Z"}, "message": "Auto merge of #38203 - nrc:save-wr, r=eddyb\n\nsave-analysis: fix a few generated code errors", "tree": {"sha": "a80ee262ac7dc24b92565fed7f06dad1e43ad2a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a80ee262ac7dc24b92565fed7f06dad1e43ad2a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa", "html_url": "https://github.com/rust-lang/rust/commit/e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d29343c04a27570a8ff8282611007d6e6408de", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d29343c04a27570a8ff8282611007d6e6408de", "html_url": "https://github.com/rust-lang/rust/commit/51d29343c04a27570a8ff8282611007d6e6408de"}, {"sha": "c6b64f76cf6d22c0a325dd980b4400ac96a9cbc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b64f76cf6d22c0a325dd980b4400ac96a9cbc8", "html_url": "https://github.com/rust-lang/rust/commit/c6b64f76cf6d22c0a325dd980b4400ac96a9cbc8"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "afa78a05a63a897c4a49ca447b4f326c3e22808c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa", "patch": "@@ -1326,16 +1326,18 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n         self.process_macro_use(t.span, t.id);\n         match t.node {\n             ast::TyKind::Path(_, ref path) => {\n+                if self.span.filter_generated(None, t.span) {\n+                    return;\n+                }\n+\n                 if let Some(id) = self.lookup_def_id(t.id) {\n                     let sub_span = self.span.sub_span_for_type_name(t.span);\n-                    if !self.span.filter_generated(sub_span, t.span) {\n-                        self.dumper.type_ref(TypeRefData {\n-                            span: sub_span.expect(\"No span found for type ref\"),\n-                            ref_id: Some(id),\n-                            scope: self.cur_scope,\n-                            qualname: String::new()\n-                        }.lower(self.tcx));\n-                    }\n+                    self.dumper.type_ref(TypeRefData {\n+                        span: sub_span.expect(\"No span found for type ref\"),\n+                        ref_id: Some(id),\n+                        scope: self.cur_scope,\n+                        qualname: String::new()\n+                    }.lower(self.tcx));\n                 }\n \n                 self.write_sub_paths_truncated(path, false);"}, {"sha": "0c910240b60f0765b2349ab98ab999ceb80a43ea", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa", "patch": "@@ -250,8 +250,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 match typ.node {\n                     // Common case impl for a struct or something basic.\n                     ast::TyKind::Path(None, ref path) => {\n+                        filter!(self.span_utils, None, path.span, None);\n                         sub_span = self.span_utils.sub_span_for_type_name(path.span);\n-                        filter!(self.span_utils, sub_span, path.span, None);\n                         type_data = self.lookup_ref_id(typ.id).map(|id| {\n                             TypeRefData {\n                                 span: sub_span.unwrap(),"}]}