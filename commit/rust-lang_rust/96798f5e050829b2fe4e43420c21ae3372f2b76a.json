{"sha": "96798f5e050829b2fe4e43420c21ae3372f2b76a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2Nzk4ZjVlMDUwODI5YjJmZTRlNDM0MjBjMjFhZTMzNzJmMmI3NmE=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-08T00:24:11Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-08T01:24:47Z"}, "message": "tydecode: Accept a plain borrowed pointer to the data", "tree": {"sha": "99898279583a2dbb98d40ca5fbf99a270122f9cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99898279583a2dbb98d40ca5fbf99a270122f9cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96798f5e050829b2fe4e43420c21ae3372f2b76a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96798f5e050829b2fe4e43420c21ae3372f2b76a", "html_url": "https://github.com/rust-lang/rust/commit/96798f5e050829b2fe4e43420c21ae3372f2b76a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96798f5e050829b2fe4e43420c21ae3372f2b76a/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e85f5e6e77b73619cee5db9761820ccee8cf0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e85f5e6e77b73619cee5db9761820ccee8cf0e", "html_url": "https://github.com/rust-lang/rust/commit/51e85f5e6e77b73619cee5db9761820ccee8cf0e"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "0c19b546d684cc48074895aa4387273e093f4fac", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96798f5e050829b2fe4e43420c21ae3372f2b76a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96798f5e050829b2fe4e43420c21ae3372f2b76a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=96798f5e050829b2fe4e43420c21ae3372f2b76a", "patch": "@@ -216,13 +216,13 @@ fn variant_disr_val(d: ebml::Doc) -> Option<int> {\n \n fn doc_type(doc: ebml::Doc, tcx: ty::ctxt, cdata: cmd) -> ty::t {\n     let tp = reader::get_doc(doc, tag_items_data_item_type);\n-    parse_ty_data(tp.data, cdata.cnum, tp.start, tcx,\n+    parse_ty_data(*tp.data, cdata.cnum, tp.start, tcx,\n                   |_, did| translate_def_id(cdata, did))\n }\n \n fn doc_method_fty(doc: ebml::Doc, tcx: ty::ctxt, cdata: cmd) -> ty::BareFnTy {\n     let tp = reader::get_doc(doc, tag_item_method_fty);\n-    parse_bare_fn_ty_data(tp.data, cdata.cnum, tp.start, tcx,\n+    parse_bare_fn_ty_data(*tp.data, cdata.cnum, tp.start, tcx,\n                           |_, did| translate_def_id(cdata, did))\n }\n \n@@ -231,7 +231,7 @@ fn doc_transformed_self_ty(doc: ebml::Doc,\n                            cdata: cmd) -> Option<ty::t>\n {\n     do reader::maybe_get_doc(doc, tag_item_method_transformed_self_ty).map |tp| {\n-        parse_ty_data(tp.data, cdata.cnum, tp.start, tcx,\n+        parse_ty_data(*tp.data, cdata.cnum, tp.start, tcx,\n                       |_, did| translate_def_id(cdata, did))\n     }\n }\n@@ -242,7 +242,7 @@ pub fn item_type(_item_id: ast::def_id, item: ebml::Doc,\n }\n \n fn doc_trait_ref(doc: ebml::Doc, tcx: ty::ctxt, cdata: cmd) -> ty::TraitRef {\n-    parse_trait_ref_data(doc.data, cdata.cnum, doc.start, tcx,\n+    parse_trait_ref_data(*doc.data, cdata.cnum, doc.start, tcx,\n                          |_, did| translate_def_id(cdata, did))\n }\n \n@@ -257,7 +257,7 @@ fn item_ty_param_defs(item: ebml::Doc, tcx: ty::ctxt, cdata: cmd,\n     let mut bounds = ~[];\n     for reader::tagged_docs(item, tag) |p| {\n         let bd = parse_type_param_def_data(\n-            p.data, p.start, cdata.cnum, tcx,\n+            *p.data, p.start, cdata.cnum, tcx,\n             |_, did| translate_def_id(cdata, did));\n         bounds.push(bd);\n     }\n@@ -413,15 +413,9 @@ pub fn get_impl_trait(cdata: cmd,\n                        tcx: ty::ctxt) -> Option<@ty::TraitRef>\n {\n     let item_doc = lookup_item(id, cdata.data);\n-    let mut result = None;\n-    for reader::tagged_docs(item_doc, tag_item_trait_ref) |tp| {\n-        let trait_ref =\n-            @parse_trait_ref_data(tp.data, cdata.cnum, tp.start, tcx,\n-                                  |_, did| translate_def_id(cdata, did));\n-        result = Some(trait_ref);\n-        break;\n-    };\n-    result\n+    do reader::maybe_get_doc(item_doc, tag_item_trait_ref).map |&tp| {\n+        @doc_trait_ref(tp, tcx, cdata)\n+    }\n }\n \n pub fn get_impl_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,"}, {"sha": "cf2a92b291f2883641dfc92e92f3a063f0a5715e", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/96798f5e050829b2fe4e43420c21ae3372f2b76a/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96798f5e050829b2fe4e43420c21ae3372f2b76a/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=96798f5e050829b2fe4e43420c21ae3372f2b76a", "patch": "@@ -55,8 +55,8 @@ pub enum DefIdSource {\n type conv_did<'self> =\n     &'self fn(source: DefIdSource, ast::def_id) -> ast::def_id;\n \n-pub struct PState {\n-    data: @~[u8],\n+pub struct PState<'self> {\n+    data: &'self [u8],\n     crate: int,\n     pos: uint,\n     tcx: ty::ctxt\n@@ -103,8 +103,8 @@ fn parse_ident_(st: &mut PState, is_last: @fn(char) -> bool) ->\n     return st.tcx.sess.ident_of(rslt);\n }\n \n-pub fn parse_state_from_data(data: @~[u8], crate_num: int,\n-                             pos: uint, tcx: ty::ctxt) -> PState {\n+pub fn parse_state_from_data<'a>(data: &'a [u8], crate_num: int,\n+                             pos: uint, tcx: ty::ctxt) -> PState<'a> {\n     PState {\n         data: data,\n         crate: crate_num,\n@@ -113,19 +113,19 @@ pub fn parse_state_from_data(data: @~[u8], crate_num: int,\n     }\n }\n \n-pub fn parse_ty_data(data: @~[u8], crate_num: int, pos: uint, tcx: ty::ctxt,\n+pub fn parse_ty_data(data: &[u8], crate_num: int, pos: uint, tcx: ty::ctxt,\n                      conv: conv_did) -> ty::t {\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_ty(&mut st, conv)\n }\n \n-pub fn parse_bare_fn_ty_data(data: @~[u8], crate_num: int, pos: uint, tcx: ty::ctxt,\n+pub fn parse_bare_fn_ty_data(data: &[u8], crate_num: int, pos: uint, tcx: ty::ctxt,\n                              conv: conv_did) -> ty::BareFnTy {\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_bare_fn_ty(&mut st, conv)\n }\n \n-pub fn parse_trait_ref_data(data: @~[u8], crate_num: int, pos: uint, tcx: ty::ctxt,\n+pub fn parse_trait_ref_data(data: &[u8], crate_num: int, pos: uint, tcx: ty::ctxt,\n                             conv: conv_did) -> ty::TraitRef {\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_trait_ref(&mut st, conv)\n@@ -534,7 +534,7 @@ pub fn parse_def_id(buf: &[u8]) -> ast::def_id {\n     ast::def_id { crate: crate_num, node: def_num }\n }\n \n-pub fn parse_type_param_def_data(data: @~[u8], start: uint,\n+pub fn parse_type_param_def_data(data: &[u8], start: uint,\n                                  crate_num: int, tcx: ty::ctxt,\n                                  conv: conv_did) -> ty::TypeParameterDef\n {"}, {"sha": "32a2bf22f27057daf4c7c7bc8cd6f4279ee8fd11", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96798f5e050829b2fe4e43420c21ae3372f2b76a/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96798f5e050829b2fe4e43420c21ae3372f2b76a/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=96798f5e050829b2fe4e43420c21ae3372f2b76a", "patch": "@@ -964,7 +964,7 @@ impl ebml_decoder_decoder_helpers for reader::Decoder {\n \n         return do self.read_opaque |this, doc| {\n             let ty = tydecode::parse_ty_data(\n-                doc.data,\n+                *doc.data,\n                 xcx.dcx.cdata.cnum,\n                 doc.start,\n                 xcx.dcx.tcx,\n@@ -994,7 +994,7 @@ impl ebml_decoder_decoder_helpers for reader::Decoder {\n                            -> ty::TypeParameterDef {\n         do self.read_opaque |this, doc| {\n             tydecode::parse_type_param_def_data(\n-                doc.data,\n+                *doc.data,\n                 doc.start,\n                 xcx.dcx.cdata.cnum,\n                 xcx.dcx.tcx,"}]}