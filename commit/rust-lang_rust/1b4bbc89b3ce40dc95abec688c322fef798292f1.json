{"sha": "1b4bbc89b3ce40dc95abec688c322fef798292f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNGJiYzg5YjNjZTQwZGM5NWFiZWM2ODhjMzIyZmVmNzk4MjkyZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-23T00:56:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-23T00:56:31Z"}, "message": "auto merge of #11109 : sfackler/rust/arc, r=alexcrichton\n\nCloses #11097", "tree": {"sha": "197e53010130703caa61f1b1b7652e23d723e645", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/197e53010130703caa61f1b1b7652e23d723e645"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b4bbc89b3ce40dc95abec688c322fef798292f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4bbc89b3ce40dc95abec688c322fef798292f1", "html_url": "https://github.com/rust-lang/rust/commit/1b4bbc89b3ce40dc95abec688c322fef798292f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b4bbc89b3ce40dc95abec688c322fef798292f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e00272441e0a17fed015f9112921f0815f9ec6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e00272441e0a17fed015f9112921f0815f9ec6c", "html_url": "https://github.com/rust-lang/rust/commit/9e00272441e0a17fed015f9112921f0815f9ec6c"}, {"sha": "2490b59da0c13818346890dac087238532df59a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2490b59da0c13818346890dac087238532df59a2", "html_url": "https://github.com/rust-lang/rust/commit/2490b59da0c13818346890dac087238532df59a2"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "5a2b74e802116f0f0b461d85f1f7939a66df2f17", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 58, "deletions": 15, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/1b4bbc89b3ce40dc95abec688c322fef798292f1/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4bbc89b3ce40dc95abec688c322fef798292f1/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=1b4bbc89b3ce40dc95abec688c322fef798292f1", "patch": "@@ -51,7 +51,7 @@ use std::borrow;\n /// As sync::condvar, a mechanism for unlock-and-descheduling and signaling.\n pub struct Condvar<'a> {\n     priv is_mutex: bool,\n-    priv failed: &'a mut bool,\n+    priv failed: &'a bool,\n     priv cond: &'a sync::Condvar<'a>\n }\n \n@@ -226,7 +226,7 @@ impl<T:Send> MutexArc<T> {\n         // not already unsafe. See borrow_rwlock, far below.\n         (&(*state).lock).lock(|| {\n             check_poison(true, (*state).failed);\n-            let _z = PoisonOnFail(&mut (*state).failed);\n+            let _z = PoisonOnFail::new(&mut (*state).failed);\n             blk(&mut (*state).data)\n         })\n     }\n@@ -239,10 +239,10 @@ impl<T:Send> MutexArc<T> {\n         let state = self.x.get();\n         (&(*state).lock).lock_cond(|cond| {\n             check_poison(true, (*state).failed);\n-            let _z = PoisonOnFail(&mut (*state).failed);\n+            let _z = PoisonOnFail::new(&mut (*state).failed);\n             blk(&mut (*state).data,\n                 &Condvar {is_mutex: true,\n-                          failed: &mut (*state).failed,\n+                          failed: &(*state).failed,\n                           cond: cond })\n         })\n     }\n@@ -311,24 +311,28 @@ fn check_poison(is_mutex: bool, failed: bool) {\n \n #[doc(hidden)]\n struct PoisonOnFail {\n-    failed: *mut bool,\n+    flag: *mut bool,\n+    failed: bool,\n }\n \n impl Drop for PoisonOnFail {\n     fn drop(&mut self) {\n         unsafe {\n             /* assert!(!*self.failed);\n                -- might be false in case of cond.wait() */\n-            if task::failing() {\n-                *self.failed = true;\n+            if !self.failed && task::failing() {\n+                *self.flag = true;\n             }\n         }\n     }\n }\n \n-fn PoisonOnFail<'r>(failed: &'r mut bool) -> PoisonOnFail {\n-    PoisonOnFail {\n-        failed: failed\n+impl PoisonOnFail {\n+    fn new<'a>(flag: &'a mut bool) -> PoisonOnFail {\n+        PoisonOnFail {\n+            flag: flag,\n+            failed: task::failing()\n+        }\n     }\n }\n \n@@ -392,7 +396,7 @@ impl<T:Freeze + Send> RWArc<T> {\n             let state = self.x.get();\n             (*borrow_rwlock(state)).write(|| {\n                 check_poison(false, (*state).failed);\n-                let _z = PoisonOnFail(&mut (*state).failed);\n+                let _z = PoisonOnFail::new(&mut (*state).failed);\n                 blk(&mut (*state).data)\n             })\n         }\n@@ -407,10 +411,10 @@ impl<T:Freeze + Send> RWArc<T> {\n             let state = self.x.get();\n             (*borrow_rwlock(state)).write_cond(|cond| {\n                 check_poison(false, (*state).failed);\n-                let _z = PoisonOnFail(&mut (*state).failed);\n+                let _z = PoisonOnFail::new(&mut (*state).failed);\n                 blk(&mut (*state).data,\n                     &Condvar {is_mutex: false,\n-                              failed: &mut (*state).failed,\n+                              failed: &(*state).failed,\n                               cond: cond})\n             })\n         }\n@@ -463,7 +467,7 @@ impl<T:Freeze + Send> RWArc<T> {\n                 blk(RWWriteMode {\n                     data: &mut (*state).data,\n                     token: write_mode,\n-                    poison: PoisonOnFail(&mut (*state).failed)\n+                    poison: PoisonOnFail::new(&mut (*state).failed)\n                 })\n             })\n         }\n@@ -563,7 +567,7 @@ impl<'a, T:Freeze + Send> RWWriteMode<'a, T> {\n                     unsafe {\n                         let cvar = Condvar {\n                             is_mutex: false,\n-                            failed: &mut *poison.failed,\n+                            failed: &*poison.flag,\n                             cond: cond\n                         };\n                         blk(data, &cvar)\n@@ -714,6 +718,25 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_mutex_arc_access_in_unwind() {\n+        let arc = MutexArc::new(1i);\n+        let arc2 = arc.clone();\n+        task::try::<()>(proc() {\n+            struct Unwinder {\n+                i: MutexArc<int>\n+            }\n+            impl Drop for Unwinder {\n+                fn drop(&mut self) {\n+                    self.i.access(|num| *num += 1);\n+                }\n+            }\n+            let _u = Unwinder { i: arc2 };\n+            fail!();\n+        });\n+        assert_eq!(2, arc.access(|n| *n));\n+    }\n+\n     #[test] #[should_fail]\n     fn test_rw_arc_poison_wr() {\n         let arc = RWArc::new(1);\n@@ -840,6 +863,26 @@ mod tests {\n             assert_eq!(*num, 10);\n         })\n     }\n+\n+    #[test]\n+    fn test_rw_arc_access_in_unwind() {\n+        let arc = RWArc::new(1i);\n+        let arc2 = arc.clone();\n+        task::try::<()>(proc() {\n+            struct Unwinder {\n+                i: RWArc<int>\n+            }\n+            impl Drop for Unwinder {\n+                fn drop(&mut self) {\n+                    self.i.write(|num| *num += 1);\n+                }\n+            }\n+            let _u = Unwinder { i: arc2 };\n+            fail!();\n+        });\n+        assert_eq!(2, arc.read(|n| *n));\n+    }\n+\n     #[test]\n     fn test_rw_downgrade() {\n         // (1) A downgrader gets in write mode and does cond.wait."}]}