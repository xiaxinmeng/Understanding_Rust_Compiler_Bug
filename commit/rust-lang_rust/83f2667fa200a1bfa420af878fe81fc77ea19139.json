{"sha": "83f2667fa200a1bfa420af878fe81fc77ea19139", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZjI2NjdmYTIwMGExYmZhNDIwYWY4NzhmZTgxZmM3N2VhMTkxMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-06T15:01:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-06T15:01:35Z"}, "message": "Auto merge of #27434 - jeehoonkang:master, r=Gankro\n\nIn Section 3.2, TARPL says that \"standard allocators (including jemalloc, the one used by default in Rust) generally consider passing in 0 for the size of an allocation as Undefined Behaviour.\"\r\nHowever, the C standard and jemalloc manual says allocating zero bytes\r\nshould succeed:\r\n\r\n- C11 7.22.3 paragraph 1: \"If the size of the space requested is zero, the behavior is implementation-defined: either a null pointer is returned, or the behavior is as if the size were some nonzero value, except that the returned pointer shall not be used to access an object.\"\r\n- [jemalloc manual](http://www.freebsd.org/cgi/man.cgi?query=jemalloc&sektion=3): \"The malloc and calloc functions return a\tpointer\tto the allocated memory if successful; otherwise a NULL pointer is returned and errno is set to ENOMEM.\"\r\n    + Note that the description for `allocm` says \"Behavior\tis undefined if\tsize is 0,\" but it is an experimental API.\r\n\r\nr? @Gankro", "tree": {"sha": "5d35fed4d4887faec83dfc9353bb1bfc039b8620", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d35fed4d4887faec83dfc9353bb1bfc039b8620"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f2667fa200a1bfa420af878fe81fc77ea19139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f2667fa200a1bfa420af878fe81fc77ea19139", "html_url": "https://github.com/rust-lang/rust/commit/83f2667fa200a1bfa420af878fe81fc77ea19139", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f2667fa200a1bfa420af878fe81fc77ea19139/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3901feabf6c9072e533ae69b14b5761909f642", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3901feabf6c9072e533ae69b14b5761909f642", "html_url": "https://github.com/rust-lang/rust/commit/8f3901feabf6c9072e533ae69b14b5761909f642"}, {"sha": "9bfb8d3addc8eed916b3ff0747131c1f9bb97e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bfb8d3addc8eed916b3ff0747131c1f9bb97e52", "html_url": "https://github.com/rust-lang/rust/commit/9bfb8d3addc8eed916b3ff0747131c1f9bb97e52"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "e8637e38ac7d5f7d3230a5dbca95dc854a5352f1", "filename": "src/doc/nomicon/exotic-sizes.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83f2667fa200a1bfa420af878fe81fc77ea19139/src%2Fdoc%2Fnomicon%2Fexotic-sizes.md", "raw_url": "https://github.com/rust-lang/rust/raw/83f2667fa200a1bfa420af878fe81fc77ea19139/src%2Fdoc%2Fnomicon%2Fexotic-sizes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fexotic-sizes.md?ref=83f2667fa200a1bfa420af878fe81fc77ea19139", "patch": "@@ -85,8 +85,8 @@ support values.\n Safe code need not worry about ZSTs, but *unsafe* code must be careful about the\n consequence of types with no size. In particular, pointer offsets are no-ops,\n and standard allocators (including jemalloc, the one used by default in Rust)\n-generally consider passing in `0` for the size of an allocation as Undefined\n-Behaviour.\n+may return `nullptr` when a zero-sized allocation is requested, which is\n+indistinguishable from out of memory.\n \n \n "}]}