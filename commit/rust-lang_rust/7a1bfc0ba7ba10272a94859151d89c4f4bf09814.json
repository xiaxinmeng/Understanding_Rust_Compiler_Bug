{"sha": "7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "node_id": "C_kwDOAAsO6NoAKDdhMWJmYzBiYTdiYTEwMjcyYTk0ODU5MTUxZDg5YzRmNGJmMDk4MTQ", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-08-03T00:44:25Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-08-10T00:32:50Z"}, "message": "Add more `// unit-test`s to MIR opt tests", "tree": {"sha": "bf403b66f7b9ca6e1ee7fc1d532a5d88914bc589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf403b66f7b9ca6e1ee7fc1d532a5d88914bc589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "html_url": "https://github.com/rust-lang/rust/commit/7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ee22ff7e82a0a806de72516a6a942bad2202dca", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee22ff7e82a0a806de72516a6a942bad2202dca", "html_url": "https://github.com/rust-lang/rust/commit/9ee22ff7e82a0a806de72516a6a942bad2202dca"}], "stats": {"total": 353, "additions": 167, "deletions": 186}, "files": [{"sha": "4435bf5b0f2c8b480531b4689913c1c96f828a9b", "filename": "src/test/mir-opt/bool_compare.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fbool_compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fbool_compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: InstCombine\n+\n // EMIT_MIR bool_compare.opt1.InstCombine.diff\n fn opt1(x: bool) -> u32 {\n     if x != true { 0 } else { 1 }"}, {"sha": "c73150f947dfef7764c1b5c62fcfa9b9583a9f10", "filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.64bit.diff", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9ee22ff7e82a0a806de72516a6a942bad2202dca/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ee22ff7e82a0a806de72516a6a942bad2202dca/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.64bit.diff?ref=9ee22ff7e82a0a806de72516a6a942bad2202dca", "patch": "@@ -1,77 +0,0 @@\n-- // MIR for `norm2` before InstCombine\n-+ // MIR for `norm2` after InstCombine\n-  \n-  fn norm2(_1: [f32; 2]) -> f32 {\n-      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:+0:10: +0:11\n-      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:+0:26: +0:29\n-      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n-      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n-      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+2:15: +2:16\n-      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n-      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n-      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:8\n-      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:6\n-      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:7: +3:8\n-      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:14\n-      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:12\n-      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:13: +3:14\n-      scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:+1:9: +1:10\n-          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n-          scope 2 {\n-              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:+2:9: +2:10\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n-          _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n--         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-+         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-          _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-      }\n-  \n-      bb1: {\n-          _2 = _1[_3];                     // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-          StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:17: +1:18\n-          StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n-          StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n-          _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n--         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-+         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-          _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-      }\n-  \n-      bb2: {\n-          _6 = _1[_7];                     // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-          StorageDead(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:17: +2:18\n-          StorageLive(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n-          StorageLive(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n-          _11 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n-          StorageLive(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          _12 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          _10 = Mul(move _11, move _12);   // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n-          StorageDead(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          StorageDead(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          StorageLive(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n-          StorageLive(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n-          _14 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n-          StorageLive(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          _15 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          _13 = Mul(move _14, move _15);   // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n-          StorageDead(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          StorageDead(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          _0 = Add(move _10, move _13);    // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:14\n-          StorageDead(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          StorageDead(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          StorageDead(_6);                 // scope 1 at $DIR/combine_array_len.rs:+4:1: +4:2\n-          StorageDead(_2);                 // scope 0 at $DIR/combine_array_len.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/combine_array_len.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "c73150f947dfef7764c1b5c62fcfa9b9583a9f10", "filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.diff?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "previous_filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.32bit.diff"}, {"sha": "3ef3bd09afdef2ad8594db7252d50ae52823ed4d", "filename": "src/test/mir-opt/combine_array_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,4 +1,4 @@\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// unit-test: InstCombine\n // EMIT_MIR combine_array_len.norm2.InstCombine.diff\n \n fn norm2(x: [f32; 2]) -> f32 {"}, {"sha": "6f84f186b31152dc3b65e2c9324f6a3c925ff78c", "filename": "src/test/mir-opt/const_goto.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: ConstGoto\n+\n pub enum Foo {\n     A,\n     B,"}, {"sha": "81c356cb1db526b0373d8664983d63a44ae428ba", "filename": "src/test/mir-opt/const_goto_storage.match_nested_if.ConstGoto.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -17,7 +17,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_goto_storage.rs:+1:9: +1:12\n -         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n--         nop;                             // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n+-         Deinit(_2);                      // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n -         StorageLive(_3);                 // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n -         StorageLive(_4);                 // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n -         StorageLive(_5);                 // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52"}, {"sha": "459599c73eb9ccefabeef4d73f687fe2f97282ab", "filename": "src/test/mir-opt/const_goto_storage.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: ConstGoto\n+\n // EMIT_MIR const_goto_storage.match_nested_if.ConstGoto.diff\n fn match_nested_if() -> bool {\n     let val = match () {"}, {"sha": "ee59402af386ba1d16ec8ffd93edfd1889acc608", "filename": "src/test/mir-opt/deaggregator_test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: Deaggregator\n+\n struct Baz {\n     x: usize,\n     y: f32,"}, {"sha": "ea402dafdec7a8f23cebe29f036f1f05aea64d1c", "filename": "src/test/mir-opt/deaggregator_test_enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: Deaggregator\n+\n enum Baz {\n     Empty,\n     Foo { x: usize },"}, {"sha": "955c317324aa8418059bfc7635dda5521e825df8", "filename": "src/test/mir-opt/deaggregator_test_enum_2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Deaggregator\n // Test that deaggregate fires in more than one basic block\n \n enum Foo {"}, {"sha": "46305fe21d28c2c33d325974fb8f6cd1e7bb4b53", "filename": "src/test/mir-opt/deaggregator_test_multiple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Deaggregator\n // Test that deaggregate fires more than once per block\n \n enum Foo {"}, {"sha": "53f977de5d6ad6b09b1a679d7d57a666cb712a06", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 41, "deletions": 48, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -7,101 +7,94 @@\n       let mut _2: &[u8];                   // in scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n       let mut _3: &str;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n       let mut _4: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-      let mut _5: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-      let mut _6: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-      let mut _7: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-      scope 1 (inlined core::str::<impl str>::as_bytes) { // at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-          debug self => _3;                // in scope 1 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n-          let mut _8: &str;                // in scope 1 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n-          scope 2 {\n-          }\n-      }\n+      let mut _5: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+      let mut _6: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+      let mut _7: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+      let mut _8: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+      let mut _9: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n           StorageLive(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-          _3 = _1;                         // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-          StorageLive(_8);                 // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n-          _8 = _3;                         // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n--         _2 = transmute::<&str, &[u8]>(move _8) -> bb14; // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n-+         _2 = transmute::<&str, &[u8]>(move _8) -> bb12; // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n+          _3 = &(*_1);                     // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n+          _2 = core::str::<impl str>::as_bytes(move _3) -> bb1; // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/str/mod.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&str) -> &[u8] {transmute::<&str, &[u8]>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/deduplicate_blocks.rs:5:13: 5:21\n+                                           // + literal: Const { ty: for<'r> fn(&'r str) -> &'r [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          switchInt((*_2)[0 of 4]) -> [47_u8: bb2, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          StorageDead(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:22: +1:23\n+          _7 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          _8 = const 4_usize;              // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          _9 = Ge(move _7, move _8);       // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          switchInt(move _9) -> [false: bb6, otherwise: bb2]; // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n       }\n   \n       bb2: {\n-          switchInt((*_2)[1 of 4]) -> [47_u8: bb3, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[0 of 4]) -> [47_u8: bb3, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb3: {\n-          switchInt((*_2)[2 of 4]) -> [47_u8: bb4, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[1 of 4]) -> [47_u8: bb4, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb4: {\n--         switchInt((*_2)[3 of 4]) -> [47_u8: bb10, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n-+         switchInt((*_2)[3 of 4]) -> [47_u8: bb9, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[2 of 4]) -> [47_u8: bb5, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb5: {\n-          _4 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-          _5 = Ge(move _4, const 3_usize); // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-          switchInt(move _5) -> [false: bb9, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+-         switchInt((*_2)[3 of 4]) -> [47_u8: bb11, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n++         switchInt((*_2)[3 of 4]) -> [47_u8: bb10, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb6: {\n-          switchInt((*_2)[0 of 3]) -> [47_u8: bb7, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          _4 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          _5 = const 3_usize;              // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          _6 = Ge(move _4, move _5);       // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          switchInt(move _6) -> [false: bb10, otherwise: bb7]; // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n       }\n   \n       bb7: {\n-          switchInt((*_2)[1 of 3]) -> [47_u8: bb8, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[0 of 3]) -> [47_u8: bb8, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb8: {\n--         switchInt((*_2)[2 of 3]) -> [47_u8: bb11, 33_u8: bb12, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n-+         switchInt((*_2)[2 of 3]) -> [47_u8: bb10, 33_u8: bb10, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[1 of 3]) -> [47_u8: bb9, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb9: {\n+-         switchInt((*_2)[2 of 3]) -> [47_u8: bb12, 33_u8: bb13, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n++         switchInt((*_2)[2 of 3]) -> [47_u8: bb11, 33_u8: bb11, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+      }\n+  \n+      bb10: {\n -         _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n+-         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n -     }\n - \n--     bb10: {\n+-     bb11: {\n           _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n-+         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n+-         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n++         goto -> bb12;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n       }\n   \n--     bb11: {\n+-     bb12: {\n -         _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n+-         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n -     }\n - \n--     bb12: {\n-+     bb10: {\n-          _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n-+         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n-      }\n-  \n -     bb13: {\n +     bb11: {\n-          StorageDead(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/deduplicate_blocks.rs:+7:2: +7:2\n+          _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n+-         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n++         goto -> bb12;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n       }\n   \n -     bb14: {\n +     bb12: {\n-          StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:22: +1:23\n-          _6 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-          _7 = Ge(move _6, const 4_usize); // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-          switchInt(move _7) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          StorageDead(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/deduplicate_blocks.rs:+7:2: +7:2\n       }\n   }\n   "}, {"sha": "2b9eed99ecdbf1c7d4c9f8ed374c576d6fddd466", "filename": "src/test/mir-opt/deduplicate_blocks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: DeduplicateBlocks\n+\n // EMIT_MIR deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff\n pub const fn is_line_doc_comment_2(s: &str) -> bool {\n     match s.as_bytes() {"}, {"sha": "abd6193fed95739568fc7437f95ec4b0201cb335", "filename": "src/test/mir-opt/derefer_complex_case.main.Derefer.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -30,12 +30,12 @@\n           StorageLive(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n           _14 = const main::promoted[0];   // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:5:17: 5:26\n+                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n                                            // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }\n           _2 = &(*_14);                    // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n           _1 = <&[i32; 2] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:5:17: 5:26\n+                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n                                            // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }\n       }\n   \n@@ -55,7 +55,7 @@\n           _8 = &mut (*_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n           _7 = <std::slice::Iter<i32> as Iterator>::next(move _8) -> bb3; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:5:17: 5:26\n+                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n                                            // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<i32>) -> Option<<std::slice::Iter<i32> as Iterator>::Item> {<std::slice::Iter<i32> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   \n@@ -76,7 +76,7 @@\n           _13 = _12;                       // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n           _6 = std::mem::drop::<i32>(move _13) -> bb7; // scope 2 at $DIR/derefer_complex_case.rs:+1:29: +1:38\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:5:29: 5:33\n+                                           // + span: $DIR/derefer_complex_case.rs:6:29: 6:33\n                                            // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "dc48cee950bc98021145ca525841a075cd791db6", "filename": "src/test/mir-opt/derefer_complex_case.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Derefer\n // EMIT_MIR derefer_complex_case.main.Derefer.diff\n // ignore-wasm32\n "}, {"sha": "3540df308367093f2e0e8bafc00be66f70abdf0f", "filename": "src/test/mir-opt/derefer_inline_test.main.Derefer.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -17,7 +17,7 @@\n           _3 = AlignOf(std::boxed::Box<u32>); // scope 1 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n           _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_inline_test.rs:10:5: 10:12\n+                                           // + span: $DIR/derefer_inline_test.rs:11:5: 11:12\n                                            // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n@@ -26,7 +26,7 @@\n           _5 = ShallowInitBox(move _4, std::boxed::Box<u32>); // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n           (*_5) = f() -> [return: bb2, unwind: bb6]; // scope 0 at $DIR/derefer_inline_test.rs:+1:9: +1:12\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_inline_test.rs:10:9: 10:10\n+                                           // + span: $DIR/derefer_inline_test.rs:11:9: 11:10\n                                            // + literal: Const { ty: fn() -> Box<u32> {f}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "cc06a7dd8c40a12101b771d40bd9de199ea1388c", "filename": "src/test/mir-opt/derefer_inline_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Derefer\n // EMIT_MIR derefer_inline_test.main.Derefer.diff\n // ignore-wasm32 compiled with panic=abort by default\n "}, {"sha": "ed336208325fe5ae39bbab1b920399e4b9ef8f8f", "filename": "src/test/mir-opt/derefer_terminator_test.main.Derefer.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -32,15 +32,15 @@\n           StorageLive(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n           _1 = foo() -> bb1;               // scope 0 at $DIR/derefer_terminator_test.rs:+1:13: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_terminator_test.rs:5:13: 5:16\n+                                           // + span: $DIR/derefer_terminator_test.rs:6:13: 6:16\n                                            // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n           StorageLive(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n           _2 = foo() -> bb2;               // scope 1 at $DIR/derefer_terminator_test.rs:+2:13: +2:18\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_terminator_test.rs:6:13: 6:16\n+                                           // + span: $DIR/derefer_terminator_test.rs:7:13: 7:16\n                                            // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "d6750c29dd98c98fe61cf3241e5cf4bfd67435c0", "filename": "src/test/mir-opt/derefer_terminator_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Derefer\n // EMIT_MIR derefer_terminator_test.main.Derefer.diff\n // ignore-wasm32\n "}, {"sha": "fad0fe8eb6fc315bd57a8c577ad59105f30b13bd", "filename": "src/test/mir-opt/derefer_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Derefer\n // EMIT_MIR derefer_test.main.Derefer.diff\n fn main() {\n     let mut a = (42,43);"}, {"sha": "0b3888b07ab45735f77899475ddaf60baef4dff1", "filename": "src/test/mir-opt/derefer_test_multiple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Derefer\n // EMIT_MIR derefer_test_multiple.main.Derefer.diff\n fn main () {\n     let mut a = (42, 43);"}, {"sha": "717d10c6d76276bcd506881dc409a6aae251fab9", "filename": "src/test/mir-opt/equal_true.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fequal_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fequal_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fequal_true.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,5 @@\n+// unit-test InstCombine\n+\n // EMIT_MIR equal_true.opt.InstCombine.diff\n \n fn opt(x: bool) -> i32 {"}, {"sha": "a3cee3ecf61cb4d82fafaba385f41bc8f818e432", "filename": "src/test/mir-opt/instrument_coverage.bar.InstrumentCoverage.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -5,7 +5,7 @@\n       let mut _0: bool;                    // return place in scope 0 at /the/src/instrument_coverage.rs:+0:13: +0:17\n   \n       bb0: {\n-+         Coverage::Counter(1) for /the/src/instrument_coverage.rs:19:1 - 21:2; // scope 0 at /the/src/instrument_coverage.rs:+2:2: +2:2\n++         Coverage::Counter(1) for /the/src/instrument_coverage.rs:20:1 - 22:2; // scope 0 at /the/src/instrument_coverage.rs:+2:2: +2:2\n           _0 = const true;                 // scope 0 at /the/src/instrument_coverage.rs:+1:5: +1:9\n           return;                          // scope 0 at /the/src/instrument_coverage.rs:+2:2: +2:2\n       }"}, {"sha": "81d5528231db65fb0437724d99cde06f9dd27b0c", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -8,20 +8,20 @@\n       let mut _3: !;                       // in scope 0 at /the/src/instrument_coverage.rs:+2:18: +4:10\n   \n       bb0: {\n-+         Coverage::Counter(1) for /the/src/instrument_coverage.rs:10:1 - 10:11; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n++         Coverage::Counter(1) for /the/src/instrument_coverage.rs:11:1 - 11:11; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n           goto -> bb1;                     // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n       }\n   \n       bb1: {\n-+         Coverage::Expression(4294967295) = 1 + 2 for /the/src/instrument_coverage.rs:11:5 - 12:17; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n++         Coverage::Expression(4294967295) = 1 + 2 for /the/src/instrument_coverage.rs:12:5 - 13:17; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n           falseUnwind -> [real: bb2, cleanup: bb6]; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n       }\n   \n       bb2: {\n           StorageLive(_2);                 // scope 0 at /the/src/instrument_coverage.rs:+2:12: +2:17\n           _2 = bar() -> [return: bb3, unwind: bb6]; // scope 0 at /the/src/instrument_coverage.rs:+2:12: +2:17\n                                            // mir::Constant\n-                                           // + span: /the/src/instrument_coverage.rs:12:12: 12:15\n+                                           // + span: /the/src/instrument_coverage.rs:13:12: 13:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(<ZST>) }\n       }\n   \n@@ -30,15 +30,15 @@\n       }\n   \n       bb4: {\n-+         Coverage::Expression(4294967293) = 4294967294 + 0 for /the/src/instrument_coverage.rs:16:1 - 16:2; // scope 0 at /the/src/instrument_coverage.rs:+6:2: +6:2\n-+         Coverage::Expression(4294967294) = 4294967295 - 2 for /the/src/instrument_coverage.rs:13:13 - 13:18; // scope 0 at /the/src/instrument_coverage.rs:+6:2: +6:2\n++         Coverage::Expression(4294967293) = 4294967294 + 0 for /the/src/instrument_coverage.rs:17:1 - 17:2; // scope 0 at /the/src/instrument_coverage.rs:+6:2: +6:2\n++         Coverage::Expression(4294967294) = 4294967295 - 2 for /the/src/instrument_coverage.rs:14:13 - 14:18; // scope 0 at /the/src/instrument_coverage.rs:+6:2: +6:2\n           _0 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:+3:13: +3:18\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:+4:9: +4:10\n           return;                          // scope 0 at /the/src/instrument_coverage.rs:+6:2: +6:2\n       }\n   \n       bb5: {\n-+         Coverage::Counter(2) for /the/src/instrument_coverage.rs:14:10 - 14:11; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n++         Coverage::Counter(2) for /the/src/instrument_coverage.rs:15:10 - 15:11; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n           _1 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:+4:10: +4:10\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:+4:9: +4:10\n           goto -> bb1;                     // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6"}, {"sha": "7f6a0a0eb094a0434e9f693efd741ea4c49aebb7", "filename": "src/test/mir-opt/instrument_coverage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,6 +1,7 @@\n // Test that `-C instrument-coverage` injects Coverage statements. The Coverage Counter statements\n // are later converted into LLVM instrprof.increment intrinsics, during codegen.\n \n+// unit-test: InstrumentCoverage\n // needs-profiler-support\n // ignore-windows\n // compile-flags: -C instrument-coverage --remap-path-prefix={{src-base}}=/the/src"}, {"sha": "2ae03da40f8a2b6bbf637eadb5c619f35cb9073f", "filename": "src/test/mir-opt/not_equal_false.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fnot_equal_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fnot_equal_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnot_equal_false.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: InstCombine\n // EMIT_MIR not_equal_false.opt.InstCombine.diff\n \n fn opt(x: bool) -> u32 {"}, {"sha": "99667aabdaee27d68e8e13ccb62a94c85c0247cd", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -23,13 +23,6 @@\n               scope 3 {\n                   debug i => _12;          // in scope 3 at $DIR/remove_storage_markers.rs:+2:9: +2:10\n               }\n-              scope 5 (inlined iter::range::<impl Iterator for std::ops::Range<i32>>::next) { // at $DIR/remove_storage_markers.rs:8:14: 8:19\n-                  debug self => _8;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                  let mut _14: &mut std::ops::Range<i32>; // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-              }\n-          }\n-          scope 4 (inlined <std::ops::Range<i32> as IntoIterator>::into_iter) { // at $DIR/remove_storage_markers.rs:8:14: 8:19\n-              debug self => _3;            // in scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n           }\n       }\n   \n@@ -41,29 +34,39 @@\n           Deinit(_3);                      // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           (_3.0: i32) = const 0_i32;       // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           (_3.1: i32) = const 10_i32;      // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n-          _2 = move _3;                    // scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+          _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> bb1; // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/remove_storage_markers.rs:10:14: 10:19\n+                                           // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n -         StorageDead(_3);                 // scope 1 at $DIR/remove_storage_markers.rs:+2:18: +2:19\n -         StorageLive(_4);                 // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           _4 = move _2;                    // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n-          goto -> bb1;                     // scope 2 at $DIR/remove_storage_markers.rs:+2:5: +4:6\n+          goto -> bb2;                     // scope 2 at $DIR/remove_storage_markers.rs:+2:5: +4:6\n       }\n   \n-      bb1: {\n+      bb2: {\n -         StorageLive(_6);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n -         StorageLive(_7);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n -         StorageLive(_8);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n -         StorageLive(_9);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           _9 = &mut _4;                    // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           _8 = &mut (*_9);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n--         StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-          _14 = &mut (*_8);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-          _7 = <std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next(move _14) -> bb4; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+          _7 = <std::ops::Range<i32> as Iterator>::next(move _8) -> bb3; // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+                                           // + span: $DIR/remove_storage_markers.rs:10:14: 10:19\n+                                           // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   \n-      bb2: {\n+      bb3: {\n+-         StorageDead(_8);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:18: +2:19\n+          _10 = discriminant(_7);          // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n+          switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n+      }\n+  \n+      bb4: {\n -         StorageLive(_12);                // scope 2 at $DIR/remove_storage_markers.rs:+2:9: +2:10\n           _12 = ((_7 as Some).0: i32);     // scope 2 at $DIR/remove_storage_markers.rs:+2:9: +2:10\n -         StorageLive(_13);                // scope 3 at $DIR/remove_storage_markers.rs:+3:16: +3:17\n@@ -76,10 +79,14 @@\n -         StorageDead(_7);                 // scope 2 at $DIR/remove_storage_markers.rs:+4:5: +4:6\n -         StorageDead(_6);                 // scope 2 at $DIR/remove_storage_markers.rs:+4:5: +4:6\n           _5 = const ();                   // scope 2 at $DIR/remove_storage_markers.rs:+2:5: +4:6\n-          goto -> bb1;                     // scope 2 at $DIR/remove_storage_markers.rs:+2:5: +4:6\n+          goto -> bb2;                     // scope 2 at $DIR/remove_storage_markers.rs:+2:5: +4:6\n       }\n   \n-      bb3: {\n+      bb5: {\n+          unreachable;                     // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n+      }\n+  \n+      bb6: {\n           _0 = const ();                   // scope 2 at $DIR/remove_storage_markers.rs:+2:5: +4:6\n -         StorageDead(_9);                 // scope 2 at $DIR/remove_storage_markers.rs:+4:5: +4:6\n -         StorageDead(_7);                 // scope 2 at $DIR/remove_storage_markers.rs:+4:5: +4:6\n@@ -89,12 +96,5 @@\n -         StorageDead(_1);                 // scope 0 at $DIR/remove_storage_markers.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/remove_storage_markers.rs:+5:2: +5:2\n       }\n-  \n-      bb4: {\n--         StorageDead(_14);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n--         StorageDead(_8);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:18: +2:19\n-          _10 = discriminant(_7);          // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n-          switchInt(move _10) -> [0_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n-      }\n   }\n   "}, {"sha": "f00b826911c6a09770d112ad4dccad2ddde56d6e", "filename": "src/test/mir-opt/remove_storage_markers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: RemoveStorageMarkers\n+\n // Checks that storage markers are removed at opt-level=0.\n //\n // compile-flags: -C opt-level=0 -Coverflow-checks=off"}, {"sha": "8b9de9b4d65a66fd987f2357d44fc0cecf038e42", "filename": "src/test/mir-opt/remove_zsts_dont_touch_unions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmir-opt-level=3\n+// unit-test: RemoveZsts\n \n // Ensure RemoveZsts doesn't remove ZST assignments to union fields,\n // which causes problems in Miri."}, {"sha": "05554174ae2c78aa6dd13da4083ee1f82ba18564", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -80,7 +80,7 @@ fn array_casts() -> () {\n         _7 = _2;                         // scope 3 at $DIR/retag.rs:+3:15: +3:16\n         _6 = ptr::mut_ptr::<impl *mut usize>::add(move _7, const 1_usize) -> bb1; // scope 3 at $DIR/retag.rs:+3:15: +3:23\n                                          // mir::Constant\n-                                         // + span: $DIR/retag.rs:60:17: 60:20\n+                                         // + span: $DIR/retag.rs:61:17: 61:20\n                                          // + literal: Const { ty: unsafe fn(*mut usize, usize) -> *mut usize {ptr::mut_ptr::<impl *mut usize>::add}, val: Value(<ZST>) }\n     }\n \n@@ -111,7 +111,7 @@ fn array_casts() -> () {\n         _17 = _9;                        // scope 6 at $DIR/retag.rs:+7:26: +7:27\n         _16 = ptr::const_ptr::<impl *const usize>::add(move _17, const 1_usize) -> bb2; // scope 6 at $DIR/retag.rs:+7:26: +7:34\n                                          // mir::Constant\n-                                         // + span: $DIR/retag.rs:64:28: 64:31\n+                                         // + span: $DIR/retag.rs:65:28: 65:31\n                                          // + literal: Const { ty: unsafe fn(*const usize, usize) -> *const usize {ptr::const_ptr::<impl *const usize>::add}, val: Value(<ZST>) }\n     }\n "}, {"sha": "8802f3b295851a4aaa4d9e9bf34b968dbd6b61c9", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -73,7 +73,7 @@ fn main() -> () {\n         Retag([2phase] _6);              // scope 1 at $DIR/retag.rs:+3:29: +3:35\n         _3 = Test::foo(move _4, move _6) -> [return: bb1, unwind: bb8]; // scope 1 at $DIR/retag.rs:+3:17: +3:36\n                                          // mir::Constant\n-                                         // + span: $DIR/retag.rs:32:25: 32:28\n+                                         // + span: $DIR/retag.rs:33:25: 33:28\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(<ZST>) }\n     }\n \n@@ -149,7 +149,7 @@ fn main() -> () {\n         StorageLive(_23);                // scope 7 at $DIR/retag.rs:+18:21: +18:23\n         _28 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:+18:21: +18:23\n                                          // mir::Constant\n-                                         // + span: $DIR/retag.rs:47:21: 47:23\n+                                         // + span: $DIR/retag.rs:48:21: 48:23\n                                          // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n         Retag(_28);                      // scope 7 at $DIR/retag.rs:+18:21: +18:23\n         _23 = &(*_28);                   // scope 7 at $DIR/retag.rs:+18:21: +18:23\n@@ -158,7 +158,7 @@ fn main() -> () {\n         Retag(_22);                      // scope 7 at $DIR/retag.rs:+18:21: +18:23\n         _19 = Test::foo_shr(move _20, move _22) -> [return: bb4, unwind: bb7]; // scope 7 at $DIR/retag.rs:+18:5: +18:24\n                                          // mir::Constant\n-                                         // + span: $DIR/retag.rs:47:13: 47:20\n+                                         // + span: $DIR/retag.rs:48:13: 48:20\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(<ZST>) }\n     }\n \n@@ -182,7 +182,7 @@ fn main() -> () {\n         StorageLive(_27);                // scope 8 at $DIR/retag.rs:+23:5: +23:18\n         _27 = array_casts() -> bb6;      // scope 8 at $DIR/retag.rs:+23:5: +23:18\n                                          // mir::Constant\n-                                         // + span: $DIR/retag.rs:52:5: 52:16\n+                                         // + span: $DIR/retag.rs:53:5: 53:16\n                                          // + literal: Const { ty: fn() {array_casts}, val: Value(<ZST>) }\n     }\n "}, {"sha": "86deb0e7ccdedbf0e935d2cd515f2545749e0f5b", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: AddRetag\n // ignore-wasm32-bare compiled with panic=abort by default\n // ignore-tidy-linelength\n // compile-flags: -Z mir-emit-retag -Z mir-opt-level=0 -Z span_free_formats"}, {"sha": "25d400f0c9fb20220c1eec60e7277f2276fdba7f", "filename": "src/test/mir-opt/retag.{impl#0}-foo.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `<impl at $DIR/retag.rs:11:1: 11:10>::foo` after SimplifyCfg-elaborate-drops\n+// MIR for `<impl at $DIR/retag.rs:12:1: 12:10>::foo` after SimplifyCfg-elaborate-drops\n \n-fn <impl at $DIR/retag.rs:11:1: 11:10>::foo(_1: &Test, _2: &mut i32) -> &mut i32 {\n+fn <impl at $DIR/retag.rs:12:1: 12:10>::foo(_1: &Test, _2: &mut i32) -> &mut i32 {\n     debug self => _1;                    // in scope 0 at $DIR/retag.rs:+0:16: +0:21\n     debug x => _2;                       // in scope 0 at $DIR/retag.rs:+0:23: +0:24\n     let mut _0: &mut i32;                // return place in scope 0 at $DIR/retag.rs:+0:42: +0:53"}, {"sha": "84ad8afc357604ac362dd54b410d8141a2383ec8", "filename": "src/test/mir-opt/retag.{impl#0}-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `<impl at $DIR/retag.rs:11:1: 11:10>::foo_shr` after SimplifyCfg-elaborate-drops\n+// MIR for `<impl at $DIR/retag.rs:12:1: 12:10>::foo_shr` after SimplifyCfg-elaborate-drops\n \n-fn <impl at $DIR/retag.rs:11:1: 11:10>::foo_shr(_1: &Test, _2: &i32) -> &i32 {\n+fn <impl at $DIR/retag.rs:12:1: 12:10>::foo_shr(_1: &Test, _2: &i32) -> &i32 {\n     debug self => _1;                    // in scope 0 at $DIR/retag.rs:+0:20: +0:25\n     debug x => _2;                       // in scope 0 at $DIR/retag.rs:+0:27: +0:28\n     let mut _0: &i32;                    // return place in scope 0 at $DIR/retag.rs:+0:42: +0:49"}, {"sha": "39b7911d4aedbcfafd6fd3a4c38ed43f92a189f9", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: SimplifyLocals\n // compile-flags: -C overflow-checks=no\n \n fn use_zst(_: ((), ())) {}"}, {"sha": "b41527ba02de5cc3dd92d78456e536a7cd541595", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bfc0ba7ba10272a94859151d89c4f4bf09814/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=7a1bfc0ba7ba10272a94859151d89c4f4bf09814", "patch": "@@ -16,29 +16,53 @@\n -     let mut _11: Temp;                   // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n +     let _1: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n +     let mut _2: ((), ());                // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n-+     let _3: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n++     let mut _3: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n++     let mut _4: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n++     let _5: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n++     let mut _6: u8;                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n++     let mut _7: u8;                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n++     let mut _8: Temp;                    // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n       scope 1 {\n       }\n   \n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n -         StorageLive(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:21: +1:23\n+-         Deinit(_2);                      // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:21: +1:23\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:25: +1:27\n+-         Deinit(_3);                      // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:25: +1:27\n+-         Deinit(_1);                      // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n+-         (_1.0: ()) = move _2;            // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n+-         (_1.1: ()) = move _3;            // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:27: +1:28\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:27: +1:28\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:28: +1:29\n -         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n -         StorageLive(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n -         StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n+-         Deinit(_6);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n -         StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n+-         Deinit(_7);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n+-         Deinit(_5);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n+-         (_5.0: ()) = move _6;            // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n+-         (_5.1: ()) = move _7;            // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n -         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:20: +2:21\n -         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:20: +2:21\n -         _4 = use_zst(move _5) -> bb1;    // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n +         StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n +         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n++         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n++         Deinit(_3);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n++         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n++         Deinit(_4);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n++         Deinit(_2);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n++         (_2.0: ()) = move _3;            // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n++         (_2.1: ()) = move _4;            // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n++         StorageDead(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:20: +2:21\n++         StorageDead(_3);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:20: +2:21\n +         _1 = use_zst(move _2) -> bb1;    // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:12\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:15:5: 15:12\n                                            // + literal: Const { ty: fn(((), ())) {use_zst}, val: Value(<ZST>) }\n       }\n   \n@@ -49,22 +73,36 @@\n -         StorageLive(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n -         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n -         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n+-         Deinit(_11);                     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n+-         (_11.0: u8) = const 40_u8;       // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n+-         _10 = (_11.0: u8);               // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n+-         _9 = Add(move _10, const 2_u8);  // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n -         StorageDead(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:33: +4:34\n--         _8 = use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n+-         _8 = use_u8(move _9) -> bb2;     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n +         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:21: +2:22\n +         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:22: +2:23\n-+         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n-+         _3 = use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n++         StorageLive(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n++         StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n++         StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n++         StorageLive(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n++         Deinit(_8);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n++         (_8.0: u8) = const 40_u8;        // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n++         _7 = (_8.0: u8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n++         _6 = Add(move _7, const 2_u8);   // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n++         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:33: +4:34\n++         _5 = use_u8(move _6) -> bb2;     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:11\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:17:5: 17:11\n                                            // + literal: Const { ty: fn(u8) {use_u8}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n -         StorageDead(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:34: +4:35\n -         StorageDead(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n--         StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n-+         StorageDead(_3);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n++         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:34: +4:35\n+          StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n++         StorageDead(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+0:11: +5:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+5:2: +5:2\n       }\n   }"}]}