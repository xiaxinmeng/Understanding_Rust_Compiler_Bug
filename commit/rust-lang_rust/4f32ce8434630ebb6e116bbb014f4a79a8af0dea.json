{"sha": "4f32ce8434630ebb6e116bbb014f4a79a8af0dea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMzJjZTg0MzQ2MzBlYmI2ZTExNmJiYjAxNGY0YTc5YThhZjBkZWE=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-11-28T03:09:33Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-11-28T23:41:21Z"}, "message": "feat: support struct/slice destructuring", "tree": {"sha": "e477108a65ebd29638b3c0cb21aec8d2047d86aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e477108a65ebd29638b3c0cb21aec8d2047d86aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f32ce8434630ebb6e116bbb014f4a79a8af0dea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f32ce8434630ebb6e116bbb014f4a79a8af0dea", "html_url": "https://github.com/rust-lang/rust/commit/4f32ce8434630ebb6e116bbb014f4a79a8af0dea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f32ce8434630ebb6e116bbb014f4a79a8af0dea/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b216029b5f8512934d279967a47a74732ca31a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b216029b5f8512934d279967a47a74732ca31a8", "html_url": "https://github.com/rust-lang/rust/commit/5b216029b5f8512934d279967a47a74732ca31a8"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "38543b70ae346bb8bc58617a1cba936a82a6c91f", "filename": "src/expr.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4f32ce8434630ebb6e116bbb014f4a79a8af0dea/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f32ce8434630ebb6e116bbb014f4a79a8af0dea/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4f32ce8434630ebb6e116bbb014f4a79a8af0dea", "patch": "@@ -106,11 +106,11 @@ pub(crate) fn format_expr(\n             })\n         }\n         ast::ExprKind::Unary(op, ref subexpr) => rewrite_unary_op(context, op, subexpr, shape),\n-        ast::ExprKind::Struct(ref path, ref fields, ref base) => rewrite_struct_lit(\n+        ast::ExprKind::Struct(ref path, ref fields, ref struct_rest) => rewrite_struct_lit(\n             context,\n             path,\n             fields,\n-            base.as_ref().map(|e| &**e),\n+            struct_rest,\n             &expr.attrs,\n             expr.span,\n             shape,\n@@ -1510,19 +1510,15 @@ fn rewrite_index(\n     }\n }\n \n-fn struct_lit_can_be_aligned(fields: &[ast::Field], base: Option<&ast::Expr>) -> bool {\n-    if base.is_some() {\n-        return false;\n-    }\n-\n-    fields.iter().all(|field| !field.is_shorthand)\n+fn struct_lit_can_be_aligned(fields: &[ast::Field], has_base: bool) -> bool {\n+    !has_base && fields.iter().all(|field| !field.is_shorthand)\n }\n \n fn rewrite_struct_lit<'a>(\n     context: &RewriteContext<'_>,\n     path: &ast::Path,\n     fields: &'a [ast::Field],\n-    base: Option<&'a ast::Expr>,\n+    struct_rest: &ast::StructRest,\n     attrs: &[ast::Attribute],\n     span: Span,\n     shape: Shape,\n@@ -1532,22 +1528,29 @@ fn rewrite_struct_lit<'a>(\n     enum StructLitField<'a> {\n         Regular(&'a ast::Field),\n         Base(&'a ast::Expr),\n+        Rest(&'a Span),\n     }\n \n     // 2 = \" {\".len()\n     let path_shape = shape.sub_width(2)?;\n     let path_str = rewrite_path(context, PathContext::Expr, None, path, path_shape)?;\n \n-    if fields.is_empty() && base.is_none() {\n-        return Some(format!(\"{} {{}}\", path_str));\n-    }\n+\n+    let has_base = match struct_rest {\n+        ast::StructRest::None if fields.is_empty() => return Some(format!(\"{} {{}}\", path_str)),\n+        ast::StructRest::Rest(_) if fields.is_empty() => {\n+            return Some(format!(\"{} {{ .. }}\", path_str));\n+        }\n+        ast::StructRest::Base(_) => true,\n+        _ => false,\n+    };\n \n     // Foo { a: Foo } - indent is +3, width is -5.\n     let (h_shape, v_shape) = struct_lit_shape(shape, context, path_str.len() + 3, 2)?;\n \n     let one_line_width = h_shape.map_or(0, |shape| shape.width);\n     let body_lo = context.snippet_provider.span_after(span, \"{\");\n-    let fields_str = if struct_lit_can_be_aligned(fields, base)\n+    let fields_str = if struct_lit_can_be_aligned(fields, has_base)\n         && context.config.struct_field_align_threshold() > 0\n     {\n         rewrite_with_alignment(\n@@ -1558,10 +1561,14 @@ fn rewrite_struct_lit<'a>(\n             one_line_width,\n         )?\n     } else {\n-        let field_iter = fields\n-            .iter()\n-            .map(StructLitField::Regular)\n-            .chain(base.into_iter().map(StructLitField::Base));\n+        let field_iter = fields.iter().map(StructLitField::Regular).chain(\n+            match struct_rest {\n+                ast::StructRest::Base(expr) => Some(StructLitField::Base(&**expr)),\n+                ast::StructRest::Rest(span) => Some(StructLitField::Rest(span)),\n+                ast::StructRest::None => None,\n+            }\n+            .into_iter(),\n+        );\n \n         let span_lo = |item: &StructLitField<'_>| match *item {\n             StructLitField::Regular(field) => field.span().lo(),\n@@ -1571,10 +1578,12 @@ fn rewrite_struct_lit<'a>(\n                 let pos = snippet.find_uncommented(\"..\").unwrap();\n                 last_field_hi + BytePos(pos as u32)\n             }\n+            StructLitField::Rest(span) => span.lo(),\n         };\n         let span_hi = |item: &StructLitField<'_>| match *item {\n             StructLitField::Regular(field) => field.span().hi(),\n             StructLitField::Base(expr) => expr.span.hi(),\n+            StructLitField::Rest(span) => span.hi(),\n         };\n         let rewrite = |item: &StructLitField<'_>| match *item {\n             StructLitField::Regular(field) => {\n@@ -1586,6 +1595,7 @@ fn rewrite_struct_lit<'a>(\n                 expr.rewrite(context, v_shape.offset_left(2)?)\n                     .map(|s| format!(\"..{}\", s))\n             }\n+            StructLitField::Rest(_) => Some(\"..\".to_owned()),\n         };\n \n         let items = itemize_list(\n@@ -1612,7 +1622,7 @@ fn rewrite_struct_lit<'a>(\n             nested_shape,\n             tactic,\n             context,\n-            force_no_trailing_comma || base.is_some() || !context.use_block_indent(),\n+            force_no_trailing_comma || has_base || !context.use_block_indent(),\n         );\n \n         write_list(&item_vec, &fmt)?"}, {"sha": "537151b276a72ed4f2018dc0c478f6a4f5eff0f4", "filename": "tests/source/structs.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f32ce8434630ebb6e116bbb014f4a79a8af0dea/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f32ce8434630ebb6e116bbb014f4a79a8af0dea/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=4f32ce8434630ebb6e116bbb014f4a79a8af0dea", "patch": "@@ -15,6 +15,17 @@ pub struct Foo {\n     pub i: TypeForPublicField\n }\n \n+// Destructuring\n+fn foo() {\n+    S { x: 5,\n+        ..};\n+        Struct {..} = Struct { a: 1, b: 4 };\n+        Struct {      a,     .. } = Struct { a: 1, b: 2, c: 3};\n+        TupleStruct(a,..,   b) = TupleStruct(1, 2);\n+        TupleStruct(  ..) = TupleStruct(3, 4);\n+        TupleStruct(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, .., bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb) = TupleStruct(1, 2);\n+}\n+\n // #1095\n struct S<T: /* comment */> {\n     t: T,"}, {"sha": "4948e37a5a3df01a7eb7479e35b501285c94ecdc", "filename": "tests/target/structs.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f32ce8434630ebb6e116bbb014f4a79a8af0dea/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f32ce8434630ebb6e116bbb014f4a79a8af0dea/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=4f32ce8434630ebb6e116bbb014f4a79a8af0dea", "patch": "@@ -15,6 +15,20 @@ pub struct Foo {\n     pub i: TypeForPublicField,\n }\n \n+// Destructuring\n+fn foo() {\n+    S { x: 5, .. };\n+    Struct { .. } = Struct { a: 1, b: 4 };\n+    Struct { a, .. } = Struct { a: 1, b: 2, c: 3 };\n+    TupleStruct(a, .., b) = TupleStruct(1, 2);\n+    TupleStruct(..) = TupleStruct(3, 4);\n+    TupleStruct(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        ..,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ) = TupleStruct(1, 2);\n+}\n+\n // #1095\n struct S<T /* comment */> {\n     t: T,"}]}