{"sha": "64ee32e53a7f6d416b60c259e84623014b96c33b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZWUzMmU1M2E3ZjZkNDE2YjYwYzI1OWU4NDYyMzAxNGI5NmMzM2I=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-05-28T14:13:59Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-05-28T14:14:34Z"}, "message": "Rename PgoGenerate to something more general.", "tree": {"sha": "3c96cfbe7694abaab66e8ebd0a0ea056aa65b98b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c96cfbe7694abaab66e8ebd0a0ea056aa65b98b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ee32e53a7f6d416b60c259e84623014b96c33b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ee32e53a7f6d416b60c259e84623014b96c33b", "html_url": "https://github.com/rust-lang/rust/commit/64ee32e53a7f6d416b60c259e84623014b96c33b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ee32e53a7f6d416b60c259e84623014b96c33b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53f1c38734dd8afdca708a01dced14dd8139bb7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/53f1c38734dd8afdca708a01dced14dd8139bb7b", "html_url": "https://github.com/rust-lang/rust/commit/53f1c38734dd8afdca708a01dced14dd8139bb7b"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "f4ee39d69883c5d933eb7926930d123bcf2c21aa", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/64ee32e53a7f6d416b60c259e84623014b96c33b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee32e53a7f6d416b60c259e84623014b96c33b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=64ee32e53a7f6d416b60c259e84623014b96c33b", "patch": "@@ -117,16 +117,16 @@ impl LinkerPluginLto {\n }\n \n #[derive(Clone, PartialEq, Hash)]\n-pub enum PgoGenerate {\n+pub enum SwitchWithOptPath {\n     Enabled(Option<PathBuf>),\n     Disabled,\n }\n \n-impl PgoGenerate {\n+impl SwitchWithOptPath {\n     pub fn enabled(&self) -> bool {\n         match *self {\n-            PgoGenerate::Enabled(_) => true,\n-            PgoGenerate::Disabled => false,\n+            SwitchWithOptPath::Enabled(_) => true,\n+            SwitchWithOptPath::Disabled => false,\n         }\n     }\n }\n@@ -834,15 +834,15 @@ macro_rules! options {\n         pub const parse_linker_plugin_lto: Option<&str> =\n             Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), \\\n                   or the path to the linker plugin\");\n-        pub const parse_pgo_generate: Option<&str> =\n+        pub const parse_switch_with_opt_path: Option<&str> =\n             Some(\"an optional path to the profiling data output directory\");\n         pub const parse_merge_functions: Option<&str> =\n             Some(\"one of: `disabled`, `trampolines`, or `aliases`\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, Sanitizer, LtoCli, LinkerPluginLto, PgoGenerate};\n+        use super::{$struct_name, Passes, Sanitizer, LtoCli, LinkerPluginLto, SwitchWithOptPath};\n         use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n         use std::str::FromStr;\n@@ -1097,10 +1097,10 @@ macro_rules! options {\n             true\n         }\n \n-        fn parse_pgo_generate(slot: &mut PgoGenerate, v: Option<&str>) -> bool {\n+        fn parse_switch_with_opt_path(slot: &mut SwitchWithOptPath, v: Option<&str>) -> bool {\n             *slot = match v {\n-                None => PgoGenerate::Enabled(None),\n-                Some(path) => PgoGenerate::Enabled(Some(PathBuf::from(path))),\n+                None => SwitchWithOptPath::Enabled(None),\n+                Some(path) => SwitchWithOptPath::Enabled(Some(PathBuf::from(path))),\n             };\n             true\n         }\n@@ -1379,7 +1379,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),\n-    pgo_gen: PgoGenerate = (PgoGenerate::Disabled, parse_pgo_generate, [TRACKED],\n+    pgo_gen: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n+        parse_switch_with_opt_path, [TRACKED],\n         \"Generate PGO profile data, to a given file, or to the default location if it's empty.\"),\n     pgo_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"Use PGO profile data from the given profile file.\"),\n@@ -1447,7 +1448,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"don't interleave execution of lints; allows benchmarking individual lints\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n-    self_profile: PgoGenerate = (PgoGenerate::Disabled, parse_pgo_generate, [UNTRACKED],\n+    self_profile: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n+        parse_switch_with_opt_path, [UNTRACKED],\n         \"run the self profiler and output the raw event data\"),\n     self_profile_events: Option<Vec<String>> = (None, parse_opt_comma_list, [UNTRACKED],\n         \"specifies which kinds of events get recorded by the self profiler\"),\n@@ -2558,7 +2560,7 @@ mod dep_tracking {\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n     use super::{CrateType, DebugInfo, ErrorOutputType, OptLevel, OutputTypes,\n-                Passes, Sanitizer, LtoCli, LinkerPluginLto, PgoGenerate};\n+                Passes, Sanitizer, LtoCli, LinkerPluginLto, SwitchWithOptPath};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n     use syntax::edition::Edition;\n@@ -2626,7 +2628,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n     impl_dep_tracking_hash_via_hash!(Edition);\n     impl_dep_tracking_hash_via_hash!(LinkerPluginLto);\n-    impl_dep_tracking_hash_via_hash!(PgoGenerate);\n+    impl_dep_tracking_hash_via_hash!(SwitchWithOptPath);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);\n@@ -2694,7 +2696,7 @@ mod tests {\n         build_session_options_and_crate_config,\n         to_crate_config\n     };\n-    use crate::session::config::{LtoCli, LinkerPluginLto, PgoGenerate, ExternEntry};\n+    use crate::session::config::{LtoCli, LinkerPluginLto, SwitchWithOptPath, ExternEntry};\n     use crate::session::build_session;\n     use crate::session::search_paths::SearchPath;\n     use std::collections::{BTreeMap, BTreeSet};\n@@ -3207,7 +3209,7 @@ mod tests {\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();\n-        opts.debugging_opts.pgo_gen = PgoGenerate::Enabled(None);\n+        opts.debugging_opts.pgo_gen = SwitchWithOptPath::Enabled(None);\n         assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n         opts = reference.clone();"}, {"sha": "974a5bb70e65300ba298b939e1eddbd6f9ae5793", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64ee32e53a7f6d416b60c259e84623014b96c33b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee32e53a7f6d416b60c259e84623014b96c33b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=64ee32e53a7f6d416b60c259e84623014b96c33b", "patch": "@@ -9,7 +9,7 @@ use crate::lint;\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::middle::allocator::AllocatorKind;\n use crate::middle::dependency_format;\n-use crate::session::config::{OutputType, PgoGenerate};\n+use crate::session::config::{OutputType, SwitchWithOptPath};\n use crate::session::search_paths::{PathKind, SearchPath};\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n use crate::util::common::{duration_to_secs_str, ErrorReported};\n@@ -1137,7 +1137,7 @@ fn build_session_(\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n ) -> Session {\n     let self_profiler =\n-        if let PgoGenerate::Enabled(ref d) = sopts.debugging_opts.self_profile {\n+        if let SwitchWithOptPath::Enabled(ref d) = sopts.debugging_opts.self_profile {\n             let directory = if let Some(ref directory) = d {\n                 directory\n             } else {"}, {"sha": "d8a9f681639a049d28063c7d9cb348c1c81c57a7", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64ee32e53a7f6d416b60c259e84623014b96c33b/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee32e53a7f6d416b60c259e84623014b96c33b/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=64ee32e53a7f6d416b60c259e84623014b96c33b", "patch": "@@ -13,7 +13,7 @@ use crate::LlvmCodegenBackend;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc_codegen_ssa::back::write::{CodegenContext, ModuleConfig, run_assembler};\n use rustc_codegen_ssa::traits::*;\n-use rustc::session::config::{self, OutputType, Passes, Lto, PgoGenerate};\n+use rustc::session::config::{self, OutputType, Passes, Lto, SwitchWithOptPath};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_codegen_ssa::{RLIB_BYTECODE_EXTENSION, ModuleCodegen, CompiledModule};\n@@ -707,7 +707,7 @@ pub unsafe fn with_llvm_pmb(llmod: &llvm::Module,\n     let inline_threshold = config.inline_threshold;\n \n     let pgo_gen_path = match config.pgo_gen {\n-        PgoGenerate::Enabled(ref opt_dir_path) => {\n+        SwitchWithOptPath::Enabled(ref opt_dir_path) => {\n             let path = if let Some(dir_path) = opt_dir_path {\n                 dir_path.join(\"default_%m.profraw\")\n             } else {\n@@ -716,7 +716,7 @@ pub unsafe fn with_llvm_pmb(llmod: &llvm::Module,\n \n             Some(CString::new(format!(\"{}\", path.display())).unwrap())\n         }\n-        PgoGenerate::Disabled => {\n+        SwitchWithOptPath::Disabled => {\n             None\n         }\n     };"}, {"sha": "5abff2d8ec35042a08f4cae7a56dbddf8cb4df15", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64ee32e53a7f6d416b60c259e84623014b96c33b/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee32e53a7f6d416b60c259e84623014b96c33b/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=64ee32e53a7f6d416b60c259e84623014b96c33b", "patch": "@@ -13,7 +13,7 @@ use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n use rustc::dep_graph::cgu_reuse_tracker::CguReuseTracker;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::session::config::{self, OutputFilenames, OutputType, Passes, Lto,\n-                             Sanitizer, PgoGenerate};\n+                             Sanitizer, SwitchWithOptPath};\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n@@ -56,7 +56,7 @@ pub struct ModuleConfig {\n     /// Some(level) to optimize binary size, or None to not affect program size.\n     pub opt_size: Option<config::OptLevel>,\n \n-    pub pgo_gen: PgoGenerate,\n+    pub pgo_gen: SwitchWithOptPath,\n     pub pgo_use: Option<PathBuf>,\n \n     // Flags indicating which outputs to produce.\n@@ -94,7 +94,7 @@ impl ModuleConfig {\n             opt_level: None,\n             opt_size: None,\n \n-            pgo_gen: PgoGenerate::Disabled,\n+            pgo_gen: SwitchWithOptPath::Disabled,\n             pgo_use: None,\n \n             emit_no_opt_bc: false,"}]}