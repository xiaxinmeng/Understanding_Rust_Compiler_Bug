{"sha": "9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYjI5MGM3MjU5ZTBjYjdmM2I2ZTNkY2Q1NDcyY2ZiYTE3MzE3YzQ=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-12-15T10:42:27Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-12-16T09:16:00Z"}, "message": "rustc: Implement non-renamed re-export across crates\n\nFirst patch for issue #1115. Not yet ready for re-exported modules which\nare renamed when importing them.", "tree": {"sha": "1c2b4f14ab2be1affb5da632814328ef0438cdfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c2b4f14ab2be1affb5da632814328ef0438cdfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4", "html_url": "https://github.com/rust-lang/rust/commit/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91249fed82e572df1eefea1db26b42895044ba4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/91249fed82e572df1eefea1db26b42895044ba4b", "html_url": "https://github.com/rust-lang/rust/commit/91249fed82e572df1eefea1db26b42895044ba4b"}], "stats": {"total": 146, "additions": 108, "deletions": 38}, "files": [{"sha": "b2c8380e130b134e3c7739c3c2865b1e8e98b98e", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4", "patch": "@@ -162,7 +162,7 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n              bind middle::ast_map::map_crate(*crate));\n     time(time_passes, \"external crate/lib resolution\",\n          bind creader::read_crates(sess, *crate));\n-    let {def_map: def_map, ext_map: ext_map} =\n+    let {def_map: def_map, ext_map: ext_map, exp_map: exp_map} =\n         time(time_passes, \"resolution\",\n              bind resolve::resolve_crate(sess, ast_map, crate));\n     let freevars =\n@@ -197,7 +197,7 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n     let (llmod, link_meta) =\n         time(time_passes, \"translation\",\n              bind trans::trans_crate(sess, crate, ty_cx,\n-                                     outputs.obj_filename, ast_map,\n+                                     outputs.obj_filename, exp_map, ast_map,\n                                      mut_map, copy_map, last_uses));\n     time(time_passes, \"LLVM passes\",\n          bind link::write::run_passes(sess, llmod, outputs.obj_filename));\n@@ -267,7 +267,7 @@ fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n       ppm_typed. {\n         crate = syntax::ext::expand::expand_crate(sess, crate);\n         let amap = middle::ast_map::map_crate(*crate);\n-        let {def_map: def_map, ext_map: ext_map} =\n+        let {def_map: def_map, ext_map: ext_map, exp_map: _exp_map} =\n             resolve::resolve_crate(sess, amap, crate);\n         let freevars = freevars::annotate_freevars(def_map, crate);\n         let ty_cx = ty::mk_ctxt(sess, def_map, ext_map, amap, freevars);"}, {"sha": "222d6ac7f0e0f6d0371cceabbe4171e271b4f0f9", "filename": "src/comp/metadata/csearch.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcsearch.rs?ref=9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4", "patch": "@@ -23,8 +23,33 @@ fn get_type_param_count(cstore: cstore::cstore, def: ast::def_id) -> uint {\n \n fn lookup_defs(cstore: cstore::cstore, cnum: ast::crate_num,\n                path: [ast::ident]) -> [ast::def] {\n-    let cdata = cstore::get_crate_data(cstore, cnum).data;\n-    ret decoder::lookup_defs(cdata, cnum, path);\n+    let result = [];\n+    for (c, data, def) in resolve_path(cstore, cnum, path) {\n+        result += [decoder::lookup_def(c, data, def)];\n+    }\n+    ret result;\n+}\n+\n+fn resolve_path(cstore: cstore::cstore, cnum: ast::crate_num,\n+                path: [ast::ident]) ->\n+    [(ast::crate_num, @[u8], ast::def_id)] {\n+    let cm = cstore::get_crate_data(cstore, cnum);\n+    log #fmt(\"resolve_path %s in crates[%d]:%s\",\n+             str::connect(path, \"::\"), cnum, cm.name);\n+    let result = [];\n+    for def in decoder::resolve_path(path, cm.data) {\n+        if def.crate == ast::local_crate {\n+            result += [(cnum, cm.data, def)];\n+        } else {\n+            if cm.cnum_map.contains_key(def.crate) {\n+                // This reexport is itself a reexport from anther crate\n+                let next_cnum = cm.cnum_map.get(def.crate);\n+                let next_cm_data = cstore::get_crate_data(cstore, next_cnum);\n+                result += [(next_cnum, next_cm_data.data, def)];\n+            }\n+        }\n+    }\n+    ret result;\n }\n \n fn get_tag_variants(tcx: ty::ctxt, def: ast::def_id) -> [ty::variant_info] {"}, {"sha": "b4b9712b807e706ab8ce7ae5fb9a91aafb258190", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4", "patch": "@@ -15,7 +15,8 @@ export get_tag_variants;\n export get_type;\n export get_type_param_count;\n export get_type_param_kinds;\n-export lookup_defs;\n+export lookup_def;\n+export resolve_path;\n export get_crate_attributes;\n export list_crate_metadata;\n export crate_dep;\n@@ -158,14 +159,8 @@ fn resolve_path(path: [ast::ident], data: @[u8]) -> [ast::def_id] {\n     ret result;\n }\n \n-// Crate metadata queries\n-fn lookup_defs(data: @[u8], cnum: ast::crate_num, path: [ast::ident]) ->\n-   [ast::def] {\n-    ret vec::map(bind lookup_def(cnum, data, _), resolve_path(path, data));\n-}\n-\n \n-// FIXME doesn't yet handle re-exported externals\n+// FIXME doesn't yet handle renamed re-exported externals\n fn lookup_def(cnum: ast::crate_num, data: @[u8], did_: ast::def_id) ->\n    ast::def {\n     let item = lookup_item(did_.node, data);"}, {"sha": "c013ec614edf75a2734e16d09d243adb6cd1ac3a", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4", "patch": "@@ -141,15 +141,28 @@ fn encode_module_item_paths(ebml_w: ebml::writer, module: _mod, path: [str],\n     }\n }\n \n-fn encode_item_paths(ebml_w: ebml::writer, crate: @crate) -> [entry<str>] {\n+fn encode_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt, crate: @crate)\n+    -> [entry<str>] {\n     let index: [entry<str>] = [];\n     let path: [str] = [];\n     ebml::start_tag(ebml_w, tag_paths);\n     encode_module_item_paths(ebml_w, crate.node.module, path, index);\n+    encode_reexport_paths(ebml_w, ecx, index);\n     ebml::end_tag(ebml_w);\n     ret index;\n }\n \n+fn encode_reexport_paths(ebml_w: ebml::writer,\n+                         ecx: @encode_ctxt, &index: [entry<str>]) {\n+    ecx.ccx.exp_map.items {|path, def|\n+        index += [{val: path, pos: ebml_w.writer.tell()}];\n+        ebml::start_tag(ebml_w, tag_paths_data_item);\n+        encode_name(ebml_w, path);\n+        encode_def_id(ebml_w, ast_util::def_id_of_def(def));\n+        ebml::end_tag(ebml_w);\n+    }\n+}\n+\n \n // Item info table encoding\n fn encode_family(ebml_w: ebml::writer, c: u8) {\n@@ -602,7 +615,7 @@ fn encode_metadata(cx: @crate_ctxt, crate: @crate) -> str {\n     // Encode and index the paths.\n \n     ebml::start_tag(ebml_w, tag_paths);\n-    let paths_index = encode_item_paths(ebml_w, crate);\n+    let paths_index = encode_item_paths(ebml_w, ecx, crate);\n     let paths_buckets = create_index(paths_index, hash_path);\n     encode_index(ebml_w, paths_buckets, write_str);\n     ebml::end_tag(ebml_w);"}, {"sha": "73a12b56907852afa9de05e914e11af743ae5e73", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 54, "deletions": 20, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4", "patch": "@@ -15,12 +15,13 @@ import core::{vec, option, str};\n import std::list;\n import std::map::hashmap;\n import std::list::{list, nil, cons};\n-import option::{some, none, is_none};\n+import option::{some, none, is_none, is_some};\n import syntax::print::pprust::*;\n \n export resolve_crate;\n export def_map;\n export ext_map;\n+export exp_map;\n \n // Resolving happens in two passes. The first pass collects defids of all\n // (internal) imports and modules, so that they can be looked up when needed,\n@@ -97,15 +98,17 @@ type indexed_mod = {\n \n type def_map = hashmap<node_id, def>;\n type ext_map = hashmap<def_id, [ident]>;\n+type exp_map = hashmap<str, def>;\n \n type env =\n     {cstore: cstore::cstore,\n      def_map: def_map,\n      ast_map: ast_map::map,\n      imports: hashmap<ast::node_id, import_state>,\n+     exp_map: exp_map,\n      mod_map: hashmap<ast::node_id, @indexed_mod>,\n      block_map: hashmap<ast::node_id, [glob_imp_def]>,\n-     ext_map: hashmap<def_id, [ident]>,\n+     ext_map: ext_map,\n      ext_cache: ext_hash,\n      used_imports: {mutable track: bool,\n                     mutable data: [ast::node_id]},\n@@ -121,12 +124,13 @@ tag dir { inside; outside; }\n tag namespace { ns_value; ns_type; ns_module; }\n \n fn resolve_crate(sess: session, amap: ast_map::map, crate: @ast::crate) ->\n-   {def_map: def_map, ext_map: ext_map} {\n+   {def_map: def_map, ext_map: ext_map, exp_map: exp_map} {\n     let e =\n         @{cstore: sess.get_cstore(),\n           def_map: new_int_hash(),\n           ast_map: amap,\n           imports: new_int_hash(),\n+          exp_map: new_str_hash(),\n           mod_map: new_int_hash(),\n           block_map: new_int_hash(),\n           ext_map: new_def_hash(),\n@@ -138,12 +142,12 @@ fn resolve_crate(sess: session, amap: ast_map::map, crate: @ast::crate) ->\n     map_crate(e, crate);\n     resolve_imports(*e);\n     check_for_collisions(e, *crate);\n-    check_bad_exports(e);\n+    check_exports(e);\n     resolve_names(e, crate);\n     if sess.get_opts().warn_unused_imports {\n         check_unused_imports(e);\n     }\n-    ret {def_map: e.def_map, ext_map: e.ext_map};\n+    ret {def_map: e.def_map, ext_map: e.ext_map, exp_map: e.exp_map};\n }\n \n // Locate all modules and imports and index them, so that the next passes can\n@@ -1527,15 +1531,50 @@ fn ensure_unique<T>(e: env, sp: span, elts: [T], id: fn(T) -> ident,\n     for elt: T in elts { add_name(ch, sp, id(elt)); }\n }\n \n-fn check_bad_exports(e: @env) {\n-    fn lookup_glob_any(e: env, info: @indexed_mod, sp: span, ident: ident) ->\n-       bool {\n-        ret !option::is_none(lookup_glob_in_mod(e, info, sp, ident, ns_module,\n-                                                inside)) ||\n-                !option::is_none(lookup_glob_in_mod(e, info, sp, ident,\n-                                                    ns_value, inside)) ||\n-                !option::is_none(lookup_glob_in_mod(e, info, sp, ident,\n-                                                    ns_type, inside));\n+fn check_exports(e: @env) {\n+    fn lookup_glob_any(e: @env, info: @indexed_mod, sp: span, path: str,\n+                       ident: ident) -> bool {\n+        let lookup =\n+            bind lookup_glob_in_mod(*e, info, sp, ident, _, inside);\n+        let (m, v, t) = (lookup(ns_module),\n+                         lookup(ns_value),\n+                         lookup(ns_type));\n+        maybe_add_reexport(e, path + ident, m);\n+        maybe_add_reexport(e, path + ident, v);\n+        maybe_add_reexport(e, path + ident, t);\n+        ret is_some(m) || is_some(v) || is_some(t);\n+    }\n+\n+    fn maybe_add_reexport(e: @env, path: str, def: option::t<def>) {\n+        if option::is_some(def) {\n+            e.exp_map.insert(path, option::get(def));\n+        }\n+    }\n+\n+    fn check_export(e: @env, ident: str, val: @indexed_mod, vi: @view_item) {\n+        if val.index.contains_key(ident) {\n+            let xs = val.index.get(ident);\n+            list::iter(xs) {|x|\n+                alt x {\n+                  mie_import_ident(id, _) {\n+                    alt e.imports.get(id) {\n+                      resolved(v, t, m, rid, _) {\n+                        maybe_add_reexport(e, val.path + rid, v);\n+                        maybe_add_reexport(e, val.path + rid, t);\n+                        maybe_add_reexport(e, val.path + rid, m);\n+                      }\n+                      _ { }\n+                    }\n+                  }\n+                  _ { }\n+                }\n+            }\n+        } else if lookup_glob_any(e, val, vi.span, val.path, ident) {\n+            // do nothing\n+        } else {\n+            e.sess.span_warn(vi.span,\n+                             #fmt(\"exported item %s is not defined\", ident));\n+        }\n     }\n \n     e.mod_map.values {|val|\n@@ -1545,12 +1584,7 @@ fn check_bad_exports(e: @env) {\n                 alt vi.node {\n                   ast::view_item_export(idents, _) {\n                     for ident in idents {\n-                        if !val.index.contains_key(ident) &&\n-                               !lookup_glob_any(*e, val, vi.span, ident) {\n-                            e.sess.span_warn(vi.span,\n-                                             \"exported item \" + ident +\n-                                                 \" is not defined\");\n-                        }\n+                        check_export(e, ident, val, vi);\n                     }\n                   }\n                   _ { }"}, {"sha": "79dc94483161d1b14d38cae7c5c9f3dccfddb2f9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4", "patch": "@@ -20,7 +20,7 @@ import std::map::{new_int_hash, new_str_hash};\n import option::{some, none};\n import driver::session;\n import front::attr;\n-import middle::{ty, gc};\n+import middle::{ty, gc, resolve};\n import middle::freevars::*;\n import back::{link, abi, upcall};\n import syntax::{ast, ast_util};\n@@ -5511,8 +5511,9 @@ fn write_abi_version(ccx: @crate_ctxt) {\n }\n \n fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n-               output: str, amap: ast_map::map, mut_map: mut::mut_map,\n-               copy_map: alias::copy_map, last_uses: last_use::last_uses)\n+               output: str, emap: resolve::exp_map, amap: ast_map::map,\n+               mut_map: mut::mut_map, copy_map: alias::copy_map,\n+               last_uses: last_use::last_uses)\n     -> (ModuleRef, link::link_meta) {\n     let sha = std::sha1::mk_sha1();\n     let link_meta = link::build_link_meta(sess, *crate, output, sha);\n@@ -5567,6 +5568,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           intrinsics: intrinsics,\n           item_ids: new_int_hash::<ValueRef>(),\n           ast_map: amap,\n+          exp_map: emap,\n           item_symbols: new_int_hash::<str>(),\n           mutable main_fn: none::<ValueRef>,\n           link_meta: link_meta,"}, {"sha": "7d9775a6c2a95056bd6396fc5db9aa3db4cd775a", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=9bb290c7259e0cb7f3b6e3dcd5472cfba17317c4", "patch": "@@ -84,6 +84,7 @@ type crate_ctxt =\n      intrinsics: hashmap<str, ValueRef>,\n      item_ids: hashmap<ast::node_id, ValueRef>,\n      ast_map: ast_map::map,\n+     exp_map: hashmap<str, ast::def>,\n      item_symbols: hashmap<ast::node_id, str>,\n      mutable main_fn: option::t<ValueRef>,\n      link_meta: link::link_meta,"}]}