{"sha": "a8e34dfc29df9ca817e9d1e91f3e49f6d405fe28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZTM0ZGZjMjlkZjljYTgxN2U5ZDFlOTFmM2U0OWY2ZDQwNWZlMjg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-06T19:21:17Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-09T20:17:00Z"}, "message": "trans: Make partitioning available in LocalCrateContext.", "tree": {"sha": "052a33beb4f86bf8c34ac04903655429e0d7405c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/052a33beb4f86bf8c34ac04903655429e0d7405c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8e34dfc29df9ca817e9d1e91f3e49f6d405fe28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e34dfc29df9ca817e9d1e91f3e49f6d405fe28", "html_url": "https://github.com/rust-lang/rust/commit/a8e34dfc29df9ca817e9d1e91f3e49f6d405fe28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8e34dfc29df9ca817e9d1e91f3e49f6d405fe28/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bebcb285ad187153a71296c42a02e4bb9c2297f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bebcb285ad187153a71296c42a02e4bb9c2297f5", "html_url": "https://github.com/rust-lang/rust/commit/bebcb285ad187153a71296c42a02e4bb9c2297f5"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "9692d31ee145154abe6a573c2afc381e906bc694", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a8e34dfc29df9ca817e9d1e91f3e49f6d405fe28/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e34dfc29df9ca817e9d1e91f3e49f6d405fe28/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=a8e34dfc29df9ca817e9d1e91f3e49f6d405fe28", "patch": "@@ -96,6 +96,7 @@ pub struct LocalCrateContext<'tcx> {\n     llmod: ModuleRef,\n     llcx: ContextRef,\n     tn: TypeNames, // FIXME: This seems to be largely unused.\n+    codegen_unit: CodegenUnit<'tcx>,\n     needs_unwind_cleanup_cache: RefCell<FnvHashMap<Ty<'tcx>, bool>>,\n     fn_pointer_shims: RefCell<FnvHashMap<Ty<'tcx>, ValueRef>>,\n     drop_glues: RefCell<FnvHashMap<DropGlueKind<'tcx>, ValueRef>>,\n@@ -201,18 +202,8 @@ impl<'a, 'tcx: 'a> CrateContextList<'a, 'tcx> {\n                -> CrateContextList<'a, 'tcx> {\n         CrateContextList {\n             shared: shared_ccx,\n-            // FIXME: We don't actually use the codegen unit partitioning yet.\n-            local_ccxs: codegen_units.iter().map(|cgu| {\n-                // Append \".rs\" to crate name as LLVM module identifier.\n-                //\n-                // LLVM code generator emits a \".file filename\" directive\n-                // for ELF backends. Value of the \"filename\" is set as the\n-                // LLVM module identifier.  Due to a LLVM MC bug[1], LLVM\n-                // crashes if the module identifier is same as other symbols\n-                // such as a function name in the module.\n-                // 1. http://llvm.org/bugs/show_bug.cgi?id=11479\n-                let llmod_id = format!(\"{}.rs\", cgu.name);\n-                LocalCrateContext::new(shared_ccx, &llmod_id[..])\n+            local_ccxs: codegen_units.into_iter().map(|codegen_unit| {\n+                LocalCrateContext::new(shared_ccx, codegen_unit)\n             }).collect()\n         }\n     }\n@@ -497,10 +488,21 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n \n impl<'tcx> LocalCrateContext<'tcx> {\n     fn new<'a>(shared: &SharedCrateContext<'a, 'tcx>,\n-           name: &str)\n+               codegen_unit: CodegenUnit<'tcx>)\n            -> LocalCrateContext<'tcx> {\n         unsafe {\n-            let (llcx, llmod) = create_context_and_module(&shared.tcx.sess, name);\n+            // Append \".rs\" to LLVM module identifier.\n+            //\n+            // LLVM code generator emits a \".file filename\" directive\n+            // for ELF backends. Value of the \"filename\" is set as the\n+            // LLVM module identifier.  Due to a LLVM MC bug[1], LLVM\n+            // crashes if the module identifier is same as other symbols\n+            // such as a function name in the module.\n+            // 1. http://llvm.org/bugs/show_bug.cgi?id=11479\n+            let llmod_id = format!(\"{}.rs\", codegen_unit.name);\n+\n+            let (llcx, llmod) = create_context_and_module(&shared.tcx.sess,\n+                                                          &llmod_id[..]);\n \n             let dbg_cx = if shared.tcx.sess.opts.debuginfo != NoDebugInfo {\n                 Some(debuginfo::CrateDebugContext::new(llmod))\n@@ -511,6 +513,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n             let local_ccx = LocalCrateContext {\n                 llmod: llmod,\n                 llcx: llcx,\n+                codegen_unit: codegen_unit,\n                 tn: TypeNames::new(),\n                 needs_unwind_cleanup_cache: RefCell::new(FnvHashMap()),\n                 fn_pointer_shims: RefCell::new(FnvHashMap()),\n@@ -668,6 +671,10 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         self.local().llcx\n     }\n \n+    pub fn codegen_unit(&self) -> &CodegenUnit<'tcx> {\n+        &self.local().codegen_unit\n+    }\n+\n     pub fn td(&self) -> llvm::TargetDataRef {\n         unsafe { llvm::LLVMRustGetModuleDataLayout(self.llmod()) }\n     }"}]}