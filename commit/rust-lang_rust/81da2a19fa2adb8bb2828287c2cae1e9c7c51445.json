{"sha": "81da2a19fa2adb8bb2828287c2cae1e9c7c51445", "node_id": "C_kwDOAAsO6NoAKDgxZGEyYTE5ZmEyYWRiOGJiMjgyODI4N2MyY2FlMWU5YzdjNTE0NDU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-14T12:04:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-14T12:04:27Z"}, "message": "Rollup merge of #106846 - WaffleLapkin:pico_parse_ref, r=TaKO8Ki\n\nImprove some comments and names in parser\n\nJust a tiny drive-by cleanup.", "tree": {"sha": "5159fdfc3d30d479b83107ea50cfff4a0efc987b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5159fdfc3d30d479b83107ea50cfff4a0efc987b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81da2a19fa2adb8bb2828287c2cae1e9c7c51445", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjwppLCRBK7hj4Ov3rIwAARqEIAAMP0euhZTL+smQ5LBhvduHB\nREzt5ZL0NP8OnmO7MYyj1rJVDS9apwAg3bu4bFwav3RBWdFieng5242jt9LzO2bh\nh6ExocKbU5x+CyZcLXCHT5aoW+XKGUVQVMndUgAp2PLh6cMJBaPbF76TYlKTULWv\ni9WTukHTwbN/RlpsZ1FP8Kg7HA3hvUtkeoqA1Ek9Iim+oqmuSCi46ZHFMuVm7HxX\nuMeM8Vv7vSoHXpbr9Wn8LusK7jR/WuDvETlMeXG8wEGsYnAfL9jUDJx9pN4PMA0G\n4RL+MM0OyruOhjAqmHof0PuRF9/HshMVqvIctTi2QR2GYasauIe8GOGBTRyNJzk=\n=MYnR\n-----END PGP SIGNATURE-----\n", "payload": "tree 5159fdfc3d30d479b83107ea50cfff4a0efc987b\nparent 2e30e525ac12a420ec8aea022431075cf9f6a2ce\nparent f7850c5368de4d477b6484ecee2c3eedb9ba997e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673697867 +0100\ncommitter GitHub <noreply@github.com> 1673697867 +0100\n\nRollup merge of #106846 - WaffleLapkin:pico_parse_ref, r=TaKO8Ki\n\nImprove some comments and names in parser\n\nJust a tiny drive-by cleanup.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81da2a19fa2adb8bb2828287c2cae1e9c7c51445", "html_url": "https://github.com/rust-lang/rust/commit/81da2a19fa2adb8bb2828287c2cae1e9c7c51445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81da2a19fa2adb8bb2828287c2cae1e9c7c51445/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e30e525ac12a420ec8aea022431075cf9f6a2ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e30e525ac12a420ec8aea022431075cf9f6a2ce", "html_url": "https://github.com/rust-lang/rust/commit/2e30e525ac12a420ec8aea022431075cf9f6a2ce"}, {"sha": "f7850c5368de4d477b6484ecee2c3eedb9ba997e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7850c5368de4d477b6484ecee2c3eedb9ba997e", "html_url": "https://github.com/rust-lang/rust/commit/f7850c5368de4d477b6484ecee2c3eedb9ba997e"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "645f8633941057ecd984751f340c768e6a783374", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/81da2a19fa2adb8bb2828287c2cae1e9c7c51445/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81da2a19fa2adb8bb2828287c2cae1e9c7c51445/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=81da2a19fa2adb8bb2828287c2cae1e9c7c51445", "patch": "@@ -83,7 +83,7 @@ macro_rules! maybe_whole_expr {\n pub(super) enum LhsExpr {\n     NotYetParsed,\n     AttributesParsed(AttrWrapper),\n-    AlreadyParsed(P<Expr>, bool), // (expr, starts_statement)\n+    AlreadyParsed { expr: P<Expr>, starts_statement: bool },\n }\n \n impl From<Option<AttrWrapper>> for LhsExpr {\n@@ -97,11 +97,11 @@ impl From<Option<AttrWrapper>> for LhsExpr {\n }\n \n impl From<P<Expr>> for LhsExpr {\n-    /// Converts the `expr: P<Expr>` into `LhsExpr::AlreadyParsed(expr)`.\n+    /// Converts the `expr: P<Expr>` into `LhsExpr::AlreadyParsed { expr, starts_statement: false }`.\n     ///\n     /// This conversion does not allocate.\n     fn from(expr: P<Expr>) -> Self {\n-        LhsExpr::AlreadyParsed(expr, false)\n+        LhsExpr::AlreadyParsed { expr, starts_statement: false }\n     }\n }\n \n@@ -174,7 +174,7 @@ impl<'a> Parser<'a> {\n         lhs: LhsExpr,\n     ) -> PResult<'a, P<Expr>> {\n         let mut starts_stmt = false;\n-        let mut lhs = if let LhsExpr::AlreadyParsed(expr, starts_statement) = lhs {\n+        let mut lhs = if let LhsExpr::AlreadyParsed { expr, starts_statement } = lhs {\n             starts_stmt = starts_statement;\n             expr\n         } else {\n@@ -562,17 +562,23 @@ impl<'a> Parser<'a> {\n \n         // Note: when adding new unary operators, don't forget to adjust TokenKind::can_begin_expr()\n         match this.token.uninterpolate().kind {\n-            token::Not => make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Not)), // `!expr`\n-            token::Tilde => make_it!(this, attrs, |this, _| this.recover_tilde_expr(lo)), // `~expr`\n+            // `!expr`\n+            token::Not => make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Not)),\n+            // `~expr`\n+            token::Tilde => make_it!(this, attrs, |this, _| this.recover_tilde_expr(lo)),\n+            // `-expr`\n             token::BinOp(token::Minus) => {\n                 make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Neg))\n-            } // `-expr`\n+            }\n+            // `*expr`\n             token::BinOp(token::Star) => {\n                 make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Deref))\n-            } // `*expr`\n+            }\n+            // `&expr` and `&&expr`\n             token::BinOp(token::And) | token::AndAnd => {\n                 make_it!(this, attrs, |this, _| this.parse_borrow_expr(lo))\n             }\n+            // `+lit`\n             token::BinOp(token::Plus) if this.look_ahead(1, |tok| tok.is_numeric_lit()) => {\n                 let mut err =\n                     LeadingPlusNotSupported { span: lo, remove_plus: None, add_parentheses: None };\n@@ -587,7 +593,7 @@ impl<'a> Parser<'a> {\n \n                 this.bump();\n                 this.parse_prefix_expr(None)\n-            } // `+expr`\n+            }\n             // Recover from `++x`:\n             token::BinOp(token::Plus)\n                 if this.look_ahead(1, |t| *t == token::BinOp(token::Plus)) =>\n@@ -624,7 +630,7 @@ impl<'a> Parser<'a> {\n         Ok((span, self.mk_unary(op, expr)))\n     }\n \n-    // Recover on `!` suggesting for bitwise negation instead.\n+    /// Recover on `~expr` in favor of `!expr`.\n     fn recover_tilde_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n         self.sess.emit_err(TildeAsUnaryOperator(lo));\n \n@@ -651,7 +657,6 @@ impl<'a> Parser<'a> {\n \n     /// Recover on `not expr` in favor of `!expr`.\n     fn recover_not_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n-        // Emit the error...\n         let negated_token = self.look_ahead(1, |t| t.clone());\n \n         let sub_diag = if negated_token.is_numeric_lit() {\n@@ -672,7 +677,6 @@ impl<'a> Parser<'a> {\n             ),\n         });\n \n-        // ...and recover!\n         self.parse_unary_expr(lo, UnOp::Not)\n     }\n \n@@ -1593,7 +1597,7 @@ impl<'a> Parser<'a> {\n                     vis.0\n                 };\n \n-                // Suggestion involves adding a (as of time of writing this, unstable) labeled block.\n+                // Suggestion involves adding a labeled block.\n                 //\n                 // If there are no breaks that may use this label, suggest removing the label and\n                 // recover to the unmodified expression."}, {"sha": "4ff9927aab51af8d3acf925aeff8ccfd6f8ba9fc", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81da2a19fa2adb8bb2828287c2cae1e9c7c51445/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81da2a19fa2adb8bb2828287c2cae1e9c7c51445/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=81da2a19fa2adb8bb2828287c2cae1e9c7c51445", "patch": "@@ -164,7 +164,10 @@ impl<'a> Parser<'a> {\n             // Perform this outside of the `collect_tokens_trailing_token` closure,\n             // since our outer attributes do not apply to this part of the expression\n             let expr = self.with_res(Restrictions::STMT_EXPR, |this| {\n-                this.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(expr, true))\n+                this.parse_assoc_expr_with(\n+                    0,\n+                    LhsExpr::AlreadyParsed { expr, starts_statement: true },\n+                )\n             })?;\n             Ok(self.mk_stmt(lo.to(self.prev_token.span), StmtKind::Expr(expr)))\n         } else {\n@@ -198,7 +201,10 @@ impl<'a> Parser<'a> {\n             let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac));\n             let e = self.maybe_recover_from_bad_qpath(e)?;\n             let e = self.parse_dot_or_call_expr_with(e, lo, attrs)?;\n-            let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e, false))?;\n+            let e = self.parse_assoc_expr_with(\n+                0,\n+                LhsExpr::AlreadyParsed { expr: e, starts_statement: false },\n+            )?;\n             StmtKind::Expr(e)\n         };\n         Ok(self.mk_stmt(lo.to(hi), kind))"}]}