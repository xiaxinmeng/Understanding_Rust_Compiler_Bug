{"sha": "96e2bc80f556e54b95ae224dc2f59cfa47397a38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZTJiYzgwZjU1NmU1NGI5NWFlMjI0ZGMyZjU5Y2ZhNDczOTdhMzg=", "commit": {"author": {"name": "CrazyRoka", "email": "rokarostuk@gmail.com", "date": "2020-04-23T21:28:18Z"}, "committer": {"name": "CrazyRoka", "email": "RokaRostuk@gmail.com", "date": "2020-04-24T19:45:15Z"}, "message": "Added  lint `match_vec_item`", "tree": {"sha": "aeac08b56d2d9d83e035e84051667ba06c51de04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeac08b56d2d9d83e035e84051667ba06c51de04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96e2bc80f556e54b95ae224dc2f59cfa47397a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96e2bc80f556e54b95ae224dc2f59cfa47397a38", "html_url": "https://github.com/rust-lang/rust/commit/96e2bc80f556e54b95ae224dc2f59cfa47397a38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96e2bc80f556e54b95ae224dc2f59cfa47397a38/comments", "author": {"login": "CrazyRoka", "id": 19844144, "node_id": "MDQ6VXNlcjE5ODQ0MTQ0", "avatar_url": "https://avatars.githubusercontent.com/u/19844144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CrazyRoka", "html_url": "https://github.com/CrazyRoka", "followers_url": "https://api.github.com/users/CrazyRoka/followers", "following_url": "https://api.github.com/users/CrazyRoka/following{/other_user}", "gists_url": "https://api.github.com/users/CrazyRoka/gists{/gist_id}", "starred_url": "https://api.github.com/users/CrazyRoka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CrazyRoka/subscriptions", "organizations_url": "https://api.github.com/users/CrazyRoka/orgs", "repos_url": "https://api.github.com/users/CrazyRoka/repos", "events_url": "https://api.github.com/users/CrazyRoka/events{/privacy}", "received_events_url": "https://api.github.com/users/CrazyRoka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CrazyRoka", "id": 19844144, "node_id": "MDQ6VXNlcjE5ODQ0MTQ0", "avatar_url": "https://avatars.githubusercontent.com/u/19844144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CrazyRoka", "html_url": "https://github.com/CrazyRoka", "followers_url": "https://api.github.com/users/CrazyRoka/followers", "following_url": "https://api.github.com/users/CrazyRoka/following{/other_user}", "gists_url": "https://api.github.com/users/CrazyRoka/gists{/gist_id}", "starred_url": "https://api.github.com/users/CrazyRoka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CrazyRoka/subscriptions", "organizations_url": "https://api.github.com/users/CrazyRoka/orgs", "repos_url": "https://api.github.com/users/CrazyRoka/repos", "events_url": "https://api.github.com/users/CrazyRoka/events{/privacy}", "received_events_url": "https://api.github.com/users/CrazyRoka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d4dd3d428cf6a622dc863a134ffacdb2183b6db", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d4dd3d428cf6a622dc863a134ffacdb2183b6db", "html_url": "https://github.com/rust-lang/rust/commit/1d4dd3d428cf6a622dc863a134ffacdb2183b6db"}], "stats": {"total": 260, "additions": 260, "deletions": 0}, "files": [{"sha": "3ba2c51623b261e90584551309dfb0cac506d143", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96e2bc80f556e54b95ae224dc2f59cfa47397a38/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/96e2bc80f556e54b95ae224dc2f59cfa47397a38/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=96e2bc80f556e54b95ae224dc2f59cfa47397a38", "patch": "@@ -1352,6 +1352,7 @@ Released 2018-09-13\n [`match_ref_pats`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_ref_pats\n [`match_same_arms`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms\n [`match_single_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_single_binding\n+[`match_vec_item`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_vec_item\n [`match_wild_err_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wild_err_arm\n [`maybe_infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#maybe_infinite_iter\n [`mem_discriminant_non_enum`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_discriminant_non_enum"}, {"sha": "79bf13a10054074f690387bb50baa6393fbfecaa", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96e2bc80f556e54b95ae224dc2f59cfa47397a38/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e2bc80f556e54b95ae224dc2f59cfa47397a38/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=96e2bc80f556e54b95ae224dc2f59cfa47397a38", "patch": "@@ -249,6 +249,7 @@ mod macro_use;\n mod main_recursion;\n mod map_clone;\n mod map_unit_fn;\n+mod match_vec_item;\n mod matches;\n mod mem_discriminant;\n mod mem_forget;\n@@ -629,6 +630,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &map_clone::MAP_CLONE,\n         &map_unit_fn::OPTION_MAP_UNIT_FN,\n         &map_unit_fn::RESULT_MAP_UNIT_FN,\n+        &match_vec_item::MATCH_VEC_ITEM,\n         &matches::INFALLIBLE_DESTRUCTURING_MATCH,\n         &matches::MATCH_AS_REF,\n         &matches::MATCH_BOOL,\n@@ -1060,6 +1062,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box future_not_send::FutureNotSend);\n     store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n     store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n+    store.register_late_pass(|| box match_vec_item::MatchVecItem);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1277,6 +1280,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&map_clone::MAP_CLONE),\n         LintId::of(&map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),\n+        LintId::of(&match_vec_item::MATCH_VEC_ITEM),\n         LintId::of(&matches::INFALLIBLE_DESTRUCTURING_MATCH),\n         LintId::of(&matches::MATCH_AS_REF),\n         LintId::of(&matches::MATCH_BOOL),\n@@ -1469,6 +1473,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::WHILE_LET_ON_ITERATOR),\n         LintId::of(&main_recursion::MAIN_RECURSION),\n         LintId::of(&map_clone::MAP_CLONE),\n+        LintId::of(&match_vec_item::MATCH_VEC_ITEM),\n         LintId::of(&matches::INFALLIBLE_DESTRUCTURING_MATCH),\n         LintId::of(&matches::MATCH_BOOL),\n         LintId::of(&matches::MATCH_OVERLAPPING_ARM),"}, {"sha": "7ea5a24abbd569244df9db057ee1bf7b48f2103d", "filename": "clippy_lints/src/match_vec_item.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/96e2bc80f556e54b95ae224dc2f59cfa47397a38/clippy_lints%2Fsrc%2Fmatch_vec_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e2bc80f556e54b95ae224dc2f59cfa47397a38/clippy_lints%2Fsrc%2Fmatch_vec_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_vec_item.rs?ref=96e2bc80f556e54b95ae224dc2f59cfa47397a38", "patch": "@@ -0,0 +1,111 @@\n+use crate::utils::{is_wild, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir::{Arm, Expr, ExprKind, MatchSource};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::{self, AdtDef};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `match vec[idx]` or `match vec[n..m]`.\n+    ///\n+    /// **Why is this bad?** This can panic at runtime.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust, no_run\n+    /// let arr = vec![0, 1, 2, 3];\n+    /// let idx = 1;\n+    ///\n+    /// // Bad\n+    /// match arr[idx] {\n+    ///     0 => println!(\"{}\", 0),\n+    ///     1 => println!(\"{}\", 3),\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust, no_run\n+    /// let arr = vec![0, 1, 2, 3];\n+    /// let idx = 1;\n+    ///\n+    /// // Good\n+    /// match arr.get(idx) {\n+    ///     Some(0) => println!(\"{}\", 0),\n+    ///     Some(1) => println!(\"{}\", 3),\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    pub MATCH_VEC_ITEM,\n+    style,\n+    \"match vector by indexing can panic\"\n+}\n+\n+declare_lint_pass!(MatchVecItem => [MATCH_VEC_ITEM]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchVecItem {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if_chain! {\n+            if !in_external_macro(cx.sess(), expr.span);\n+            if let ExprKind::Match(ref ex, ref arms, MatchSource::Normal) = expr.kind;\n+            if contains_wild_arm(arms);\n+            if is_vec_indexing(cx, ex);\n+\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    MATCH_VEC_ITEM,\n+                    expr.span,\n+                    \"indexing vector may panic\",\n+                    None,\n+                    \"consider using `get(..)` instead.\",\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn contains_wild_arm(arms: &[Arm<'_>]) -> bool {\n+    arms.iter().any(|arm| is_wild(&arm.pat) && is_unit_expr(arm.body))\n+}\n+\n+fn is_vec_indexing<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n+    if_chain! {\n+        if let ExprKind::Index(ref array, _) = expr.kind;\n+        let ty = cx.tables.expr_ty(array);\n+        if let ty::Adt(def, _) = ty.kind;\n+        if is_vec(cx, def);\n+\n+        then {\n+            return true;\n+        }\n+    }\n+\n+    false\n+}\n+\n+fn is_vec<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, def: &'a AdtDef) -> bool {\n+    if_chain! {\n+        let def_path = cx.tcx.def_path(def.did);\n+        if def_path.data.len() == 2;\n+        if let Some(module) = def_path.data.get(0);\n+        if module.data.as_symbol() == sym!(vec);\n+        if let Some(name) = def_path.data.get(1);\n+        if name.data.as_symbol() == sym!(Vec);\n+\n+        then {\n+            return true;\n+        }\n+    }\n+\n+    false\n+}\n+\n+fn is_unit_expr(expr: &Expr<'_>) -> bool {\n+    match expr.kind {\n+        ExprKind::Tup(ref v) if v.is_empty() => true,\n+        ExprKind::Block(ref b, _) if b.stmts.is_empty() && b.expr.is_none() => true,\n+        _ => false,\n+    }\n+}"}, {"sha": "7c9e0448950119748420d4ac7f65c1f631095c67", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96e2bc80f556e54b95ae224dc2f59cfa47397a38/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e2bc80f556e54b95ae224dc2f59cfa47397a38/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=96e2bc80f556e54b95ae224dc2f59cfa47397a38", "patch": "@@ -1172,6 +1172,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"matches\",\n     },\n+    Lint {\n+        name: \"match_vec_item\",\n+        group: \"style\",\n+        desc: \"match vector by indexing can panic\",\n+        deprecation: None,\n+        module: \"match_vec_item\",\n+    },\n     Lint {\n         name: \"match_wild_err_arm\",\n         group: \"style\","}, {"sha": "8e7c098d75c852dadde1a2d3cc4a8253c390a290", "filename": "tests/ui/match_vec_item.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/96e2bc80f556e54b95ae224dc2f59cfa47397a38/tests%2Fui%2Fmatch_vec_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e2bc80f556e54b95ae224dc2f59cfa47397a38/tests%2Fui%2Fmatch_vec_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_vec_item.rs?ref=96e2bc80f556e54b95ae224dc2f59cfa47397a38", "patch": "@@ -0,0 +1,109 @@\n+#![warn(clippy::match_vec_item)]\n+\n+fn main() {\n+    match_with_wildcard();\n+    match_without_wildcard();\n+    match_wildcard_and_action();\n+    match_with_get();\n+    match_with_array();\n+}\n+\n+fn match_with_wildcard() {\n+    let arr = vec![0, 1, 2, 3];\n+    let range = 1..3;\n+    let idx = 1;\n+\n+    // Lint, may panic\n+    match arr[idx] {\n+        0 => println!(\"0\"),\n+        1 => println!(\"1\"),\n+        _ => {},\n+    }\n+\n+    // Lint, may panic\n+    match arr[range] {\n+        [0, 1] => println!(\"0 1\"),\n+        [1, 2] => println!(\"1 2\"),\n+        _ => {},\n+    }\n+}\n+\n+fn match_without_wildcard() {\n+    let arr = vec![0, 1, 2, 3];\n+    let range = 1..3;\n+    let idx = 2;\n+\n+    // Ok\n+    match arr[idx] {\n+        0 => println!(\"0\"),\n+        1 => println!(\"1\"),\n+        num => {},\n+    }\n+\n+    // Ok\n+    match arr[range] {\n+        [0, 1] => println!(\"0 1\"),\n+        [1, 2] => println!(\"1 2\"),\n+        [ref sub @ ..] => {},\n+    }\n+}\n+\n+fn match_wildcard_and_action() {\n+    let arr = vec![0, 1, 2, 3];\n+    let range = 1..3;\n+    let idx = 3;\n+\n+    // Ok\n+    match arr[idx] {\n+        0 => println!(\"0\"),\n+        1 => println!(\"1\"),\n+        _ => println!(\"Hello, World!\"),\n+    }\n+\n+    // Ok\n+    match arr[range] {\n+        [0, 1] => println!(\"0 1\"),\n+        [1, 2] => println!(\"1 2\"),\n+        _ => println!(\"Hello, World!\"),\n+    }\n+}\n+\n+fn match_with_get() {\n+    let arr = vec![0, 1, 2, 3];\n+    let range = 1..3;\n+    let idx = 3;\n+\n+    // Ok\n+    match arr.get(idx) {\n+        Some(0) => println!(\"0\"),\n+        Some(1) => println!(\"1\"),\n+        _ => {},\n+    }\n+\n+    // Ok\n+    match arr.get(range) {\n+        Some(&[0, 1]) => println!(\"0 1\"),\n+        Some(&[1, 2]) => println!(\"1 2\"),\n+        _ => {},\n+    }\n+}\n+\n+fn match_with_array() {\n+    let arr = [0, 1, 2, 3];\n+    let range = 1..3;\n+    let idx = 3;\n+\n+    // Ok\n+    match arr[idx] {\n+        0 => println!(\"0\"),\n+        1 => println!(\"1\"),\n+        _ => {},\n+    }\n+\n+    // Ok\n+    match arr[range] {\n+        [0, 1] => println!(\"0 1\"),\n+        [1, 2] => println!(\"1 2\"),\n+        _ => {},\n+    }\n+}"}, {"sha": "2494c3143f862eb206e35cabf0b12584d3eddce2", "filename": "tests/ui/match_vec_item.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/96e2bc80f556e54b95ae224dc2f59cfa47397a38/tests%2Fui%2Fmatch_vec_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e2bc80f556e54b95ae224dc2f59cfa47397a38/tests%2Fui%2Fmatch_vec_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_vec_item.stderr?ref=96e2bc80f556e54b95ae224dc2f59cfa47397a38", "patch": "@@ -0,0 +1,27 @@\n+error: indexing vector may panic\n+  --> $DIR/match_vec_item.rs:17:5\n+   |\n+LL | /     match arr[idx] {\n+LL | |         0 => println!(\"0\"),\n+LL | |         1 => println!(\"1\"),\n+LL | |         _ => {},\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::match-vec-item` implied by `-D warnings`\n+   = help: consider using `get(..)` instead.\n+\n+error: indexing vector may panic\n+  --> $DIR/match_vec_item.rs:24:5\n+   |\n+LL | /     match arr[range] {\n+LL | |         [0, 1] => println!(\"0 1\"),\n+LL | |         [1, 2] => println!(\"1 2\"),\n+LL | |         _ => {},\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: consider using `get(..)` instead.\n+\n+error: aborting due to 2 previous errors\n+"}]}