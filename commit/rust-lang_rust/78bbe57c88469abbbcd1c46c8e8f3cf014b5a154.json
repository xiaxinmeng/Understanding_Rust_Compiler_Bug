{"sha": "78bbe57c88469abbbcd1c46c8e8f3cf014b5a154", "node_id": "C_kwDOAAsO6NoAKDc4YmJlNTdjODg0NjlhYmJiY2QxYzQ2YzhlOGYzY2YwMTRiNWExNTQ", "commit": {"author": {"name": "mary", "email": "mary@mary.zone", "date": "2022-07-01T15:12:46Z"}, "committer": {"name": "mary", "email": "mary@mary.zone", "date": "2022-08-03T15:41:05Z"}, "message": "Add support for link-flavor rust-lld for iOS, tvOS and watchOS\n\nThis adds support for rust-lld for Apple *OS targets.\n\nThis was tested against targets \"aarch64-apple-ios\" and \"aarch64-apple-ios-sim\".\n\nFor targets \"armv7-apple-ios\" and \"armv7s-apple-ios\", it doesn't link because of\n\"symbols.o\" not being generated with the correct CPU subtype (changes in\nthe \"object\" crate needs to be done to support it).", "tree": {"sha": "f525c4e4e8b0253378db8f6c41e9a13db403244d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f525c4e4e8b0253378db8f6c41e9a13db403244d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154", "html_url": "https://github.com/rust-lang/rust/commit/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/comments", "author": {"login": "marysaka", "id": 1760003, "node_id": "MDQ6VXNlcjE3NjAwMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1760003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marysaka", "html_url": "https://github.com/marysaka", "followers_url": "https://api.github.com/users/marysaka/followers", "following_url": "https://api.github.com/users/marysaka/following{/other_user}", "gists_url": "https://api.github.com/users/marysaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/marysaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marysaka/subscriptions", "organizations_url": "https://api.github.com/users/marysaka/orgs", "repos_url": "https://api.github.com/users/marysaka/repos", "events_url": "https://api.github.com/users/marysaka/events{/privacy}", "received_events_url": "https://api.github.com/users/marysaka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marysaka", "id": 1760003, "node_id": "MDQ6VXNlcjE3NjAwMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1760003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marysaka", "html_url": "https://github.com/marysaka", "followers_url": "https://api.github.com/users/marysaka/followers", "following_url": "https://api.github.com/users/marysaka/following{/other_user}", "gists_url": "https://api.github.com/users/marysaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/marysaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marysaka/subscriptions", "organizations_url": "https://api.github.com/users/marysaka/orgs", "repos_url": "https://api.github.com/users/marysaka/repos", "events_url": "https://api.github.com/users/marysaka/events{/privacy}", "received_events_url": "https://api.github.com/users/marysaka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9538d2d0f1c708affa36ef8917729efec2e5e0ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/9538d2d0f1c708affa36ef8917729efec2e5e0ed", "html_url": "https://github.com/rust-lang/rust/commit/9538d2d0f1c708affa36ef8917729efec2e5e0ed"}], "stats": {"total": 116, "additions": 101, "deletions": 15}, "files": [{"sha": "8197872bf30a49dd902eb6340cded8c168182eb2", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=78bbe57c88469abbbcd1c46c8e8f3cf014b5a154", "patch": "@@ -2675,7 +2675,7 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     let llvm_target = &sess.target.llvm_target;\n     if sess.target.vendor != \"apple\"\n         || !matches!(os.as_ref(), \"ios\" | \"tvos\" | \"watchos\")\n-        || flavor != LinkerFlavor::Gcc\n+        || (flavor != LinkerFlavor::Gcc && flavor != LinkerFlavor::Lld(LldFlavor::Ld64))\n     {\n         return;\n     }\n@@ -2706,13 +2706,16 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n             return;\n         }\n     };\n-    if llvm_target.contains(\"macabi\") {\n-        cmd.args(&[\"-target\", llvm_target])\n-    } else {\n-        let arch_name = llvm_target.split('-').next().expect(\"LLVM target must have a hyphen\");\n-        cmd.args(&[\"-arch\", arch_name])\n+\n+    match flavor {\n+        LinkerFlavor::Gcc => {\n+            cmd.args(&[\"-isysroot\", &sdk_root, \"-Wl,-syslibroot\", &sdk_root]);\n+        }\n+        LinkerFlavor::Lld(LldFlavor::Ld64) => {\n+            cmd.args(&[\"-syslibroot\", &sdk_root]);\n+        }\n+        _ => unreachable!(),\n     }\n-    cmd.args(&[\"-isysroot\", &sdk_root, \"-Wl,-syslibroot\", &sdk_root]);\n }\n \n fn get_apple_sdk_root(sdk_name: &str) -> Result<String, String> {"}, {"sha": "1dad07a9a42a4012046a6af46a92ff87dcb9c89b", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=78bbe57c88469abbbcd1c46c8e8f3cf014b5a154", "patch": "@@ -1,9 +1,14 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{FramePointer, Target, TargetOptions};\n+use crate::spec::{FramePointer, LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n+    let llvm_target = \"arm64-apple-ios14.0-macabi\";\n+\n+    let mut base = opts(\"ios\", Arch::Arm64_macabi);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-target\", llvm_target]);\n+\n     Target {\n-        llvm_target: \"arm64-apple-ios14.0-macabi\".into(),\n+        llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n@@ -21,7 +26,7 @@ pub fn target() -> Target {\n                 -disable-llvm-passes\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..opts(\"ios\", Arch::Arm64_macabi)\n+            ..base\n         },\n     }\n }"}, {"sha": "15e4fb9be6303e520e909c05685c7f6cc3afb2b8", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=78bbe57c88469abbbcd1c46c8e8f3cf014b5a154", "patch": "@@ -109,15 +109,34 @@ pub fn ios_llvm_target(arch: &str) -> String {\n     format!(\"{}-apple-ios{}.{}.0\", arch, major, minor)\n }\n \n+pub fn ios_lld_platform_version() -> String {\n+    let (major, minor) = ios_deployment_target();\n+    format!(\"{}.{}\", major, minor)\n+}\n+\n pub fn ios_sim_llvm_target(arch: &str) -> String {\n     let (major, minor) = ios_deployment_target();\n     format!(\"{}-apple-ios{}.{}.0-simulator\", arch, major, minor)\n }\n \n+fn tvos_deployment_target() -> (u32, u32) {\n+    deployment_target(\"TVOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n+}\n+\n+pub fn tvos_lld_platform_version() -> String {\n+    let (major, minor) = tvos_deployment_target();\n+    format!(\"{}.{}\", major, minor)\n+}\n+\n fn watchos_deployment_target() -> (u32, u32) {\n     deployment_target(\"WATCHOS_DEPLOYMENT_TARGET\").unwrap_or((5, 0))\n }\n \n+pub fn watchos_lld_platform_version() -> String {\n+    let (major, minor) = watchos_deployment_target();\n+    format!(\"{}.{}\", major, minor)\n+}\n+\n pub fn watchos_sim_llvm_target(arch: &str) -> String {\n     let (major, minor) = watchos_deployment_target();\n     format!(\"{}-apple-watchos{}.{}.0-simulator\", arch, major, minor)"}, {"sha": "d77558f0f842940ce991f701a5989d761e9c427c", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=78bbe57c88469abbbcd1c46c8e8f3cf014b5a154", "patch": "@@ -1,4 +1,4 @@\n-use crate::{spec::cvs, spec::TargetOptions};\n+use crate::spec::{cvs, LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n use std::borrow::Cow;\n \n use Arch::*;\n@@ -17,6 +17,18 @@ pub enum Arch {\n     Arm64_sim,\n }\n \n+fn target_arch_name(arch: Arch) -> &'static str {\n+    match arch {\n+        Armv7 => \"armv7\",\n+        Armv7k => \"armv7k\",\n+        Armv7s => \"armv7s\",\n+        Arm64 | Arm64_macabi | Arm64_sim => \"arm64\",\n+        Arm64_32 => \"arm64_32\",\n+        I386 => \"i386\",\n+        X86_64 | X86_64_macabi => \"x86_64\",\n+    }\n+}\n+\n fn target_abi(arch: Arch) -> &'static str {\n     match arch {\n         Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 => \"\",\n@@ -49,11 +61,51 @@ fn link_env_remove(arch: Arch) -> Cow<'static, [Cow<'static, str>]> {\n     }\n }\n \n+fn pre_link_args(os: &'static str, arch: Arch) -> LinkArgs {\n+    let mut args = LinkArgs::new();\n+\n+    let target_abi = target_abi(arch);\n+\n+    let platform_name = match target_abi {\n+        \"sim\" => format!(\"{}-simulator\", os),\n+        \"macabi\" => \"mac-catalyst\".to_string(),\n+        _ => os.to_string(),\n+    };\n+\n+    let platform_version = match os.as_ref() {\n+        \"ios\" => super::apple_base::ios_lld_platform_version(),\n+        \"tvos\" => super::apple_base::tvos_lld_platform_version(),\n+        \"watchos\" => super::apple_base::watchos_lld_platform_version(),\n+        _ => unreachable!(),\n+    };\n+\n+    let arch_str = target_arch_name(arch);\n+\n+    if target_abi != \"macabi\" {\n+        args.insert(LinkerFlavor::Gcc, vec![\"-arch\".into(), arch_str.into()]);\n+    }\n+\n+    args.insert(\n+        LinkerFlavor::Lld(LldFlavor::Ld64),\n+        vec![\n+            \"-arch\".into(),\n+            arch_str.into(),\n+            \"-platform_version\".into(),\n+            platform_name.into(),\n+            platform_version.clone().into(),\n+            platform_version.into(),\n+        ],\n+    );\n+\n+    args\n+}\n+\n pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n     TargetOptions {\n         abi: target_abi(arch).into(),\n         cpu: target_cpu(arch).into(),\n         dynamic_linking: false,\n+        pre_link_args: pre_link_args(os, arch),\n         link_env_remove: link_env_remove(arch),\n         has_thread_local: false,\n         ..super::apple_base::opts(os)"}, {"sha": "1db6db78b17e4f8e0e7125270f6110ccbf843b55", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=78bbe57c88469abbbcd1c46c8e8f3cf014b5a154", "patch": "@@ -46,7 +46,10 @@ impl Target {\n                         )\n                     }\n                     (LinkerFlavor::Gcc, LldFlavor::Ld64) => {\n-                        assert_matches!(flavor, LinkerFlavor::Gcc)\n+                        assert_matches!(\n+                            flavor,\n+                            LinkerFlavor::Lld(LldFlavor::Ld64) | LinkerFlavor::Gcc\n+                        )\n                     }\n                     (LinkerFlavor::Msvc | LinkerFlavor::Lld(LldFlavor::Link), LldFlavor::Link) => {\n                         assert_matches!("}, {"sha": "2122bcd37fc07aae6f95e39968884bd7ee3e43ce", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78bbe57c88469abbbcd1c46c8e8f3cf014b5a154/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=78bbe57c88469abbbcd1c46c8e8f3cf014b5a154", "patch": "@@ -1,10 +1,14 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{StackProbeType, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::X86_64_macabi);\n+    let llvm_target = \"x86_64-apple-ios13.0-macabi\";\n+\n+    let mut base = opts(\"ios\", Arch::X86_64_macabi);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-target\", llvm_target]);\n+\n     Target {\n-        llvm_target: \"x86_64-apple-ios13.0-macabi\".into(),\n+        llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),"}]}