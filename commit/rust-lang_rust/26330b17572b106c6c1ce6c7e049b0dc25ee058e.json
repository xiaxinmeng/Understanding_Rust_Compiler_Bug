{"sha": "26330b17572b106c6c1ce6c7e049b0dc25ee058e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MzMwYjE3NTcyYjEwNmM2YzFjZTZjN2UwNDliMGRjMjVlZTA1OGU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-27T19:16:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-27T19:16:44Z"}, "message": "Rollup merge of #46231 - ritiek:verbs, r=arielb1\n\nMIR: Fix value moved diagnose messages\n\n#45960. I believe this will take a different approach. Simply replacing all nouns to verbs (`desired_action`) messes up the message `use of moved value` (although fixes the message in original issue). Here is what happens:\n\n<pre>\n$ rustc -Zborrowck-mir src/test/ui/borrowck/borrowck-reinit.rs\n\nerror[E0382]: <b>used</b> of moved value: `x` (Mir)\n  --> src/test/ui/borrowck/borrowck-reinit.rs:18:16\n   |\n17 |     drop(x);\n   |          - value moved here\n18 |     let _ = (1,x);\n   |                ^ value used here after move\n\nerror: aborting due to 2 previous errors\n</pre>\n(Notice: *\"**used** of moved value: `x`\"* instead of *\"**use**\"*)\n\nWhich does not seem to be okay.\n\nAfter experimenting a bit, it looks like [`report_use_of_moved_value()`](https://github.com/rust-lang/rust/blob/1dc0b573e7ce4314eb196b21b7e0ea4a1bf1f673/src/librustc_mir/borrow_check.rs#L1319) tries to handle both these messages by taking in only one form of`desired_action`.\n\nThese messages rise from: *\"[{noun} of moved value](https://github.com/rust-lang/rust/blob/1dc0b573e7ce4314eb196b21b7e0ea4a1bf1f673/src/librustc_mir/borrow_check.rs#L1338-L1342)\"* and *\"[value {verb} here after move](https://github.com/rust-lang/rust/blob/1dc0b573e7ce4314eb196b21b7e0ea4a1bf1f673/src/librustc_mir/borrow_check.rs#L1343)\"*.\n\nThis PR fixes *\"value {verb} here after move\"* type messages by passing a corresponding verb (`desired_action`) instead of the original noun.", "tree": {"sha": "0e59002145ecab7b73e0b073fb149e476e09e54a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e59002145ecab7b73e0b073fb149e476e09e54a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26330b17572b106c6c1ce6c7e049b0dc25ee058e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26330b17572b106c6c1ce6c7e049b0dc25ee058e", "html_url": "https://github.com/rust-lang/rust/commit/26330b17572b106c6c1ce6c7e049b0dc25ee058e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26330b17572b106c6c1ce6c7e049b0dc25ee058e/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa99bd96fdbbe00e5aa96927c5edba908095527f", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa99bd96fdbbe00e5aa96927c5edba908095527f", "html_url": "https://github.com/rust-lang/rust/commit/aa99bd96fdbbe00e5aa96927c5edba908095527f"}, {"sha": "1be38e0316398f3dd409bdc4e1d14f33186599cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be38e0316398f3dd409bdc4e1d14f33186599cb", "html_url": "https://github.com/rust-lang/rust/commit/1be38e0316398f3dd409bdc4e1d14f33186599cb"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "b0921bf1c27c89e73a7da0ae2d224bbec0453596", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/26330b17572b106c6c1ce6c7e049b0dc25ee058e/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26330b17572b106c6c1ce6c7e049b0dc25ee058e/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=26330b17572b106c6c1ce6c7e049b0dc25ee058e", "patch": "@@ -475,6 +475,34 @@ enum WriteKind {\n     Move,\n }\n \n+#[derive(Copy, Clone)]\n+enum InitializationRequiringAction {\n+    Update,\n+    Borrow,\n+    Use,\n+    Assignment,\n+}\n+\n+impl InitializationRequiringAction {\n+    fn as_noun(self) -> &'static str {\n+        match self {\n+            InitializationRequiringAction::Update     => \"update\",\n+            InitializationRequiringAction::Borrow     => \"borrow\",\n+            InitializationRequiringAction::Use        => \"use\",\n+            InitializationRequiringAction::Assignment => \"assign\"\n+        }\n+    }\n+\n+    fn as_verb_in_past_tense(self) -> &'static str {\n+        match self {\n+            InitializationRequiringAction::Update     => \"updated\",\n+            InitializationRequiringAction::Borrow     => \"borrowed\",\n+            InitializationRequiringAction::Use        => \"used\",\n+            InitializationRequiringAction::Assignment => \"assigned\"\n+        }\n+    }\n+}\n+\n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// Checks an access to the given lvalue to see if it is allowed. Examines the set of borrows\n     /// that are in scope, as well as which paths have been initialized, to ensure that (a) the\n@@ -565,7 +593,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // Write of P[i] or *P, or WriteAndRead of any P, requires P init'd.\n         match mode {\n             MutateMode::WriteAndRead => {\n-                self.check_if_path_is_moved(context, \"update\", lvalue_span, flow_state);\n+                self.check_if_path_is_moved(context, InitializationRequiringAction::Update,\n+                                            lvalue_span, flow_state);\n             }\n             MutateMode::JustWrite => {\n                 self.check_if_assigned_path_is_moved(context, lvalue_span, flow_state);\n@@ -591,7 +620,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     BorrowKind::Mut => (Deep, Write(WriteKind::MutableBorrow(bk))),\n                 };\n                 self.access_lvalue(context, (lvalue, span), access_kind, flow_state);\n-                self.check_if_path_is_moved(context, \"borrow\", (lvalue, span), flow_state);\n+                self.check_if_path_is_moved(context, InitializationRequiringAction::Borrow,\n+                                            (lvalue, span), flow_state);\n             }\n \n             Rvalue::Use(ref operand) |\n@@ -610,7 +640,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 };\n                 self.access_lvalue(\n                     context, (lvalue, span), (Shallow(Some(af)), Read(ReadKind::Copy)), flow_state);\n-                self.check_if_path_is_moved(context, \"use\", (lvalue, span), flow_state);\n+                self.check_if_path_is_moved(context, InitializationRequiringAction::Use,\n+                                            (lvalue, span), flow_state);\n             }\n \n             Rvalue::BinaryOp(_bin_op, ref operand1, ref operand2) |\n@@ -711,7 +742,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 // skip this check in that case).\n             }\n             ConsumeKind::Consume => {\n-                self.check_if_path_is_moved(context, \"use\", lvalue_span, flow_state);\n+                self.check_if_path_is_moved(context, InitializationRequiringAction::Use,\n+                                            lvalue_span, flow_state);\n             }\n         }\n     }\n@@ -772,7 +804,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n     fn check_if_path_is_moved(&mut self,\n                               context: Context,\n-                              desired_action: &str,\n+                              desired_action: InitializationRequiringAction,\n                               lvalue_span: (&Lvalue<'tcx>, Span),\n                               flow_state: &InProgress<'cx, 'gcx, 'tcx>) {\n         // FIXME: analogous code in check_loans first maps `lvalue` to\n@@ -943,7 +975,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                     // `base` to its base_path.\n \n                                     self.check_if_path_is_moved(\n-                                        context, \"assignment\", (base, span), flow_state);\n+                                        context, InitializationRequiringAction::Assignment,\n+                                        (base, span), flow_state);\n \n                                     // (base initialized; no need to\n                                     // recur further)\n@@ -1347,7 +1380,7 @@ mod prefixes {\n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     fn report_use_of_moved_or_uninitialized(&mut self,\n                            _context: Context,\n-                           desired_action: &str,\n+                           desired_action: InitializationRequiringAction,\n                            (lvalue, span): (&Lvalue<'tcx>, Span),\n                            mpi: MovePathIndex,\n                            curr_move_out: &IdxSetBuf<MoveOutIndex>) {\n@@ -1357,7 +1390,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         if mois.is_empty() {\n             self.tcx.cannot_act_on_uninitialized_variable(span,\n-                                                          desired_action,\n+                                                          desired_action.as_noun(),\n                                                           &self.describe_lvalue(lvalue),\n                                                           Origin::Mir)\n                     .span_label(span, format!(\"use of possibly uninitialized `{}`\",\n@@ -1367,11 +1400,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             let msg = \"\"; //FIXME: add \"partially \" or \"collaterally \"\n \n             let mut err = self.tcx.cannot_act_on_moved_value(span,\n-                                                             desired_action,\n+                                                             desired_action.as_noun(),\n                                                              msg,\n                                                              &self.describe_lvalue(lvalue),\n                                                              Origin::Mir);\n-            err.span_label(span, format!(\"value {} here after move\", desired_action));\n+\n+            err.span_label(span, format!(\"value {} here after move\",\n+                                         desired_action.as_verb_in_past_tense()));\n             for moi in mois {\n                 let move_msg = \"\"; //FIXME: add \" (into closure)\"\n                 let move_span = self.mir.source_info(self.move_data.moves[*moi].source).span;"}, {"sha": "9f08bd198223e248d4364c3a74088e20312ade95", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26330b17572b106c6c1ce6c7e049b0dc25ee058e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26330b17572b106c6c1ce6c7e049b0dc25ee058e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=26330b17572b106c6c1ce6c7e049b0dc25ee058e", "patch": "@@ -14,7 +14,7 @@ error[E0382]: use of moved value: `x` (Mir)\n 17 |     drop(x);\n    |          - value moved here\n 18 |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n-   |                ^ value use here after move\n+   |                ^ value used here after move\n \n error: aborting due to 2 previous errors\n "}]}