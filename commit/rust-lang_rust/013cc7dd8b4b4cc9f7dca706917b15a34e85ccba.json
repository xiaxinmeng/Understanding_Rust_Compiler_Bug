{"sha": "013cc7dd8b4b4cc9f7dca706917b15a34e85ccba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxM2NjN2RkOGI0YjRjYzlmN2RjYTcwNjkxN2IxNWEzNGU4NWNjYmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-05T15:47:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T15:47:09Z"}, "message": "Merge #8344\n\n8344: Pass interner to `ProjectionTy::self_type_parameter` and `TraitRef::self_type_parameter` r=flodiebold a=lnicola\n\nCC #8313\r\n\r\nchangelog skip\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "511c31f0b647044294eba7c4394ee3e4ba7b13b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/511c31f0b647044294eba7c4394ee3e4ba7b13b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgazD9CRBK7hj4Ov3rIwAAdHIIABg3VXacvezK87kpeiawQJIQ\nstl1cqZrafl72VZftszrLrO/oAZL82AxIut9IbgFzg5gyPC/eoO3fdWtMVF9/znm\nobJV8V1FolkO8KKruTPGOX01Sq4AzjeZZH7XwTqYKSgekyo7sfGIn/EfIoFN1hXP\nkA+g5v0QhE2OrIZNGJXmwpwBkxdiuvTJ1+tTvV7b1ONp37nfJLi7wElZaWaV7gtI\ntCwE6F7tFf/sYKnjBsGb2MzfjfKu9dXXjgnRK9nESpSl28+zgJrCxAvUoT76zUCE\nSX96BOJ3dSwGosLsOHPqcx6PLRGEM9yjmgopEycai288Ehvl9p8dq92h37tECxw=\n=xG5c\n-----END PGP SIGNATURE-----\n", "payload": "tree 511c31f0b647044294eba7c4394ee3e4ba7b13b6\nparent fab1c066464022613729a6d714dc83b7d698ece5\nparent d7546d8c2323adff53c8170c528e82a8131681c5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617637629 +0000\ncommitter GitHub <noreply@github.com> 1617637629 +0000\n\nMerge #8344\n\n8344: Pass interner to `ProjectionTy::self_type_parameter` and `TraitRef::self_type_parameter` r=flodiebold a=lnicola\n\nCC #8313\r\n\r\nchangelog skip\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba", "html_url": "https://github.com/rust-lang/rust/commit/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab1c066464022613729a6d714dc83b7d698ece5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab1c066464022613729a6d714dc83b7d698ece5", "html_url": "https://github.com/rust-lang/rust/commit/fab1c066464022613729a6d714dc83b7d698ece5"}, {"sha": "d7546d8c2323adff53c8170c528e82a8131681c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7546d8c2323adff53c8170c528e82a8131681c5", "html_url": "https://github.com/rust-lang/rust/commit/d7546d8c2323adff53c8170c528e82a8131681c5"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "1108e5a107ba694d910e637be7ed5559e846cd2b", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=013cc7dd8b4b4cc9f7dca706917b15a34e85ccba", "patch": "@@ -251,7 +251,7 @@ impl HirDisplay for ProjectionTy {\n         }\n \n         let trait_ = f.db.trait_data(self.trait_(f.db));\n-        let first_parameter = self.self_type_parameter().into_displayable(\n+        let first_parameter = self.self_type_parameter(&Interner).into_displayable(\n             f.db,\n             f.max_size,\n             f.omit_verbose_types,\n@@ -592,20 +592,21 @@ impl HirDisplay for Ty {\n                     }\n                     TypeParamProvenance::ArgumentImplTrait => {\n                         let substs = generics.type_params_subst(f.db);\n-                        let bounds = f\n-                            .db\n-                            .generic_predicates(id.parent)\n-                            .into_iter()\n-                            .map(|pred| pred.clone().subst(&substs))\n-                            .filter(|wc| match &wc.skip_binders() {\n-                                WhereClause::Implemented(tr) => tr.self_type_parameter() == self,\n-                                WhereClause::AliasEq(AliasEq {\n-                                    alias: AliasTy::Projection(proj),\n-                                    ty: _,\n-                                }) => proj.self_type_parameter() == self,\n-                                _ => false,\n-                            })\n-                            .collect::<Vec<_>>();\n+                        let bounds =\n+                            f.db.generic_predicates(id.parent)\n+                                .into_iter()\n+                                .map(|pred| pred.clone().subst(&substs))\n+                                .filter(|wc| match &wc.skip_binders() {\n+                                    WhereClause::Implemented(tr) => {\n+                                        tr.self_type_parameter(&Interner) == self\n+                                    }\n+                                    WhereClause::AliasEq(AliasEq {\n+                                        alias: AliasTy::Projection(proj),\n+                                        ty: _,\n+                                    }) => proj.self_type_parameter(&Interner) == self,\n+                                    _ => false,\n+                                })\n+                                .collect::<Vec<_>>();\n                         write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds, f)?;\n                     }\n                 }\n@@ -780,7 +781,7 @@ impl TraitRef {\n             return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n-        self.self_type_parameter().hir_fmt(f)?;\n+        self.self_type_parameter(&Interner).hir_fmt(f)?;\n         if use_as {\n             write!(f, \" as \")?;\n         } else {"}, {"sha": "adfdcaa370489a8e95659501a615856152b63631", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=013cc7dd8b4b4cc9f7dca706917b15a34e85ccba", "patch": "@@ -78,8 +78,8 @@ impl ProjectionTy {\n         }\n     }\n \n-    pub fn self_type_parameter(&self) -> &Ty {\n-        &self.substitution.interned()[0].assert_ty_ref(&Interner)\n+    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n+        &self.substitution.interned()[0].assert_ty_ref(interner)\n     }\n \n     fn trait_(&self, db: &dyn HirDatabase) -> TraitId {\n@@ -165,8 +165,8 @@ impl<T: TypeWalk> Binders<T> {\n }\n \n impl TraitRef {\n-    pub fn self_type_parameter(&self) -> &Ty {\n-        &self.substitution.at(&Interner, 0).assert_ty_ref(&Interner)\n+    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n+        &self.substitution.at(interner, 0).assert_ty_ref(interner)\n     }\n \n     pub fn hir_trait_id(&self) -> TraitId {\n@@ -473,11 +473,13 @@ impl Ty {\n                             .into_iter()\n                             .map(|pred| pred.clone().subst(&substs))\n                             .filter(|wc| match &wc.skip_binders() {\n-                                WhereClause::Implemented(tr) => tr.self_type_parameter() == self,\n+                                WhereClause::Implemented(tr) => {\n+                                    tr.self_type_parameter(&Interner) == self\n+                                }\n                                 WhereClause::AliasEq(AliasEq {\n                                     alias: AliasTy::Projection(proj),\n                                     ty: _,\n-                                }) => proj.self_type_parameter() == self,\n+                                }) => proj.self_type_parameter(&Interner) == self,\n                                 _ => false,\n                             })\n                             .collect_vec();"}, {"sha": "e9e4e69adfe3af3ad3989ca94c059e570f4cd3f8", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=013cc7dd8b4b4cc9f7dca706917b15a34e85ccba", "patch": "@@ -941,7 +941,8 @@ pub(crate) fn trait_environment_query(\n     for pred in resolver.where_predicates_in_scope() {\n         for pred in ctx.lower_where_predicate(pred, false) {\n             if let WhereClause::Implemented(tr) = &pred.skip_binders() {\n-                traits_in_scope.push((tr.self_type_parameter().clone(), tr.hir_trait_id()));\n+                traits_in_scope\n+                    .push((tr.self_type_parameter(&Interner).clone(), tr.hir_trait_id()));\n             }\n             let program_clause: chalk_ir::ProgramClause<Interner> =\n                 pred.clone().to_chalk(db).cast(&Interner);"}, {"sha": "c8883485c062f6e9bf125d50a20440a0e807959e", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=013cc7dd8b4b4cc9f7dca706917b15a34e85ccba", "patch": "@@ -89,7 +89,7 @@ pub(crate) fn trait_solve_query(\n         ..\n     })) = &goal.value.goal\n     {\n-        if let TyKind::BoundVar(_) = projection_ty.self_type_parameter().kind(&Interner) {\n+        if let TyKind::BoundVar(_) = projection_ty.self_type_parameter(&Interner).kind(&Interner) {\n             // Hack: don't ask Chalk to normalize with an unknown self type, it'll say that's impossible\n             return Some(Solution::Ambig(Guidance::Unknown));\n         }"}, {"sha": "67e88ebf43d0c6d2d333cfe702501fa467140c4d", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/013cc7dd8b4b4cc9f7dca706917b15a34e85ccba/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=013cc7dd8b4b4cc9f7dca706917b15a34e85ccba", "patch": "@@ -539,7 +539,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n     let self_ty_shifted_in = self_ty.clone().shift_bound_vars(DebruijnIndex::ONE);\n     match &pred.value {\n         WhereClause::Implemented(trait_ref) => {\n-            if trait_ref.self_type_parameter() != &self_ty_shifted_in {\n+            if trait_ref.self_type_parameter(&Interner) != &self_ty_shifted_in {\n                 // we can only convert predicates back to type bounds if they\n                 // have the expected self type\n                 return None;\n@@ -552,7 +552,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n             Some(make_binders(rust_ir::InlineBound::TraitBound(trait_bound), pred.num_binders))\n         }\n         WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), ty }) => {\n-            if projection_ty.self_type_parameter() != &self_ty_shifted_in {\n+            if projection_ty.self_type_parameter(&Interner) != &self_ty_shifted_in {\n                 return None;\n             }\n             let trait_ = projection_ty.trait_(db);"}]}