{"sha": "db62821c03ed89404891499fb0840b0b7dc78e11", "node_id": "C_kwDOAAsO6NoAKGRiNjI4MjFjMDNlZDg5NDA0ODkxNDk5ZmIwODQwYjBiN2RjNzhlMTE", "commit": {"author": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-02-23T15:16:24Z"}, "committer": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-02-23T15:16:24Z"}, "message": "fix", "tree": {"sha": "6bb00cdfb2c301e5675b7a87d9ec84d17c5c6fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bb00cdfb2c301e5675b7a87d9ec84d17c5c6fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db62821c03ed89404891499fb0840b0b7dc78e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db62821c03ed89404891499fb0840b0b7dc78e11", "html_url": "https://github.com/rust-lang/rust/commit/db62821c03ed89404891499fb0840b0b7dc78e11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db62821c03ed89404891499fb0840b0b7dc78e11/comments", "author": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f8760a44ce9b1424f6f1519ed452d6b323bc275", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8760a44ce9b1424f6f1519ed452d6b323bc275", "html_url": "https://github.com/rust-lang/rust/commit/7f8760a44ce9b1424f6f1519ed452d6b323bc275"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "687e56e57f45ff53bf123a8089e8bd237979c85e", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db62821c03ed89404891499fb0840b0b7dc78e11/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db62821c03ed89404891499fb0840b0b7dc78e11/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=db62821c03ed89404891499fb0840b0b7dc78e11", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, ExprKind, Param, PatKind, Unsafety};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n+use rustc_middle::ty::binding::BindingMode;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ClosureKind, Ty, TypeFoldable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -169,11 +170,18 @@ fn check_inputs(cx: &LateContext<'_>, params: &[Param<'_>], call_args: &[Expr<'_\n     if params.len() != call_args.len() {\n         return false;\n     }\n+    let binding_modes = cx.typeck_results().pat_binding_modes();\n     std::iter::zip(params, call_args).all(|(param, arg)| {\n         match param.pat.kind {\n             PatKind::Binding(_, id, ..) if path_to_local_id(arg, id) => {},\n             _ => return false,\n         }\n+        // checks that parameters are not bound as `ref`\n+        //dbg!(binding_modes.get(param.pat.hir_id));\n+        if let Some(BindingMode::BindByReference(_)) = binding_modes.get(param.pat.hir_id) {\n+            return false;\n+        }\n+\n         match *cx.typeck_results().expr_adjustments(arg) {\n             [] => true,\n             ["}, {"sha": "5aedbea381f2317d80c661cc20f7ffbc07748eae", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/db62821c03ed89404891499fb0840b0b7dc78e11/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/db62821c03ed89404891499fb0840b0b7dc78e11/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=db62821c03ed89404891499fb0840b0b7dc78e11", "patch": "@@ -256,3 +256,22 @@ fn arc_fp() {\n     (0..5).map(|n| arc(n));\n     Some(4).map(|n| ref_arc(n));\n }\n+\n+// #8460 Don't replace closures with params bounded as `ref`\n+mod bind_by_ref {\n+    struct A;\n+    struct B;\n+\n+    impl From<&A> for B {\n+        fn from(A: &A) -> Self {\n+            B\n+        }\n+    }\n+\n+    fn test() {\n+        // should not lint\n+        Some(A).map(|a| B::from(&a));\n+        // should not lint\n+        Some(A).map(|ref a| B::from(a));\n+    }\n+}"}, {"sha": "5fdf7fb9771697e2330265458903ac5c12528f94", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/db62821c03ed89404891499fb0840b0b7dc78e11/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db62821c03ed89404891499fb0840b0b7dc78e11/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=db62821c03ed89404891499fb0840b0b7dc78e11", "patch": "@@ -256,3 +256,22 @@ fn arc_fp() {\n     (0..5).map(|n| arc(n));\n     Some(4).map(|n| ref_arc(n));\n }\n+\n+// #8460 Don't replace closures with params bounded as `ref`\n+mod bind_by_ref {\n+    struct A;\n+    struct B;\n+\n+    impl From<&A> for B {\n+        fn from(A: &A) -> Self {\n+            B\n+        }\n+    }\n+\n+    fn test() {\n+        // should not lint\n+        Some(A).map(|a| B::from(&a));\n+        // should not lint\n+        Some(A).map(|ref a| B::from(a));\n+    }\n+}"}]}