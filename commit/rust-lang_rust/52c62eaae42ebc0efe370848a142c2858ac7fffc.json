{"sha": "52c62eaae42ebc0efe370848a142c2858ac7fffc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYzYyZWFhZTQyZWJjMGVmZTM3MDg0OGExNDJjMjg1OGFjN2ZmZmM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-20T18:22:32Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-26T22:33:13Z"}, "message": "Respect attributes on proc macro definitions", "tree": {"sha": "bcbe3ea27cda012be261e4355ef0b3bff40b2050", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcbe3ea27cda012be261e4355ef0b3bff40b2050"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52c62eaae42ebc0efe370848a142c2858ac7fffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52c62eaae42ebc0efe370848a142c2858ac7fffc", "html_url": "https://github.com/rust-lang/rust/commit/52c62eaae42ebc0efe370848a142c2858ac7fffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52c62eaae42ebc0efe370848a142c2858ac7fffc/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32e5acb3eba7a92029488b9684d7bb27bc716294", "url": "https://api.github.com/repos/rust-lang/rust/commits/32e5acb3eba7a92029488b9684d7bb27bc716294", "html_url": "https://github.com/rust-lang/rust/commit/32e5acb3eba7a92029488b9684d7bb27bc716294"}], "stats": {"total": 198, "additions": 131, "deletions": 67}, "files": [{"sha": "fffeee82d8d24a7ff51759f15a725fca531f29e9", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52c62eaae42ebc0efe370848a142c2858ac7fffc/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c62eaae42ebc0efe370848a142c2858ac7fffc/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=52c62eaae42ebc0efe370848a142c2858ac7fffc", "patch": "@@ -530,7 +530,6 @@ impl<'a, 'tcx> CrateMetadata {\n                         id: DefIndex,\n                         sess: &Session)\n                         -> FullProcMacro {\n-\n         let raw_macro = self.raw_proc_macro(id);\n         let (name, kind, helper_attrs) = match *raw_macro {\n             ProcMacro::CustomDerive { trait_name, attributes, client } => {\n@@ -551,16 +550,19 @@ impl<'a, 'tcx> CrateMetadata {\n                 name, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })), Vec::new()\n             )\n         };\n-\n-        let span = self.get_span(id, sess);\n+        let name = Symbol::intern(name);\n \n         FullProcMacro {\n-            name: Symbol::intern(name),\n-            ext: Lrc::new(SyntaxExtension {\n-                span,\n+            name,\n+            ext: Lrc::new(SyntaxExtension::new(\n+                &sess.parse_sess,\n+                kind,\n+                self.get_span(id, sess),\n                 helper_attrs,\n-                ..SyntaxExtension::default(kind, root.edition)\n-            })\n+                root.edition,\n+                name,\n+                &self.get_attributes(&self.entry(id), sess),\n+            )),\n         }\n     }\n "}, {"sha": "10ff1b17285fe0247f57f9330b44f387cf141171", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/52c62eaae42ebc0efe370848a142c2858ac7fffc/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c62eaae42ebc0efe370848a142c2858ac7fffc/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=52c62eaae42ebc0efe370848a142c2858ac7fffc", "patch": "@@ -1,11 +1,11 @@\n use crate::ast::{self, NodeId, Attribute, Name, PatKind};\n-use crate::attr::{HasAttrs, Stability, Deprecation};\n+use crate::attr::{self, HasAttrs, Stability, Deprecation};\n use crate::source_map::SourceMap;\n use crate::edition::Edition;\n use crate::ext::expand::{self, AstFragment, Invocation};\n use crate::ext::hygiene::{ExpnId, Transparency};\n use crate::mut_visit::{self, MutVisitor};\n-use crate::parse::{self, parser, DirectoryOwnership};\n+use crate::parse::{self, parser, ParseSess, DirectoryOwnership};\n use crate::parse::token;\n use crate::ptr::P;\n use crate::symbol::{kw, sym, Ident, Symbol};\n@@ -601,6 +601,69 @@ impl SyntaxExtension {\n         }\n     }\n \n+    /// Constructs a syntax extension with the given properties\n+    /// and other properties converted from attributes.\n+    pub fn new(\n+        sess: &ParseSess,\n+        kind: SyntaxExtensionKind,\n+        span: Span,\n+        helper_attrs: Vec<Symbol>,\n+        edition: Edition,\n+        name: Name,\n+        attrs: &[ast::Attribute],\n+    ) -> SyntaxExtension {\n+        let allow_internal_unstable =\n+            attr::find_by_name(attrs, sym::allow_internal_unstable).map(|attr| {\n+                attr.meta_item_list()\n+                    .map(|list| {\n+                        list.iter()\n+                            .filter_map(|it| {\n+                                let name = it.ident().map(|ident| ident.name);\n+                                if name.is_none() {\n+                                    sess.span_diagnostic.span_err(\n+                                        it.span(), \"allow internal unstable expects feature names\"\n+                                    )\n+                                }\n+                                name\n+                            })\n+                            .collect::<Vec<Symbol>>()\n+                            .into()\n+                    })\n+                    .unwrap_or_else(|| {\n+                        sess.span_diagnostic.span_warn(\n+                            attr.span,\n+                            \"allow_internal_unstable expects list of feature names. In the future \\\n+                             this will become a hard error. Please use `allow_internal_unstable(\\\n+                             foo, bar)` to only allow the `foo` and `bar` features\",\n+                        );\n+                        vec![sym::allow_internal_unstable_backcompat_hack].into()\n+                    })\n+            });\n+\n+        let mut local_inner_macros = false;\n+        if let Some(macro_export) = attr::find_by_name(attrs, sym::macro_export) {\n+            if let Some(l) = macro_export.meta_item_list() {\n+                local_inner_macros = attr::list_contains_name(&l, sym::local_inner_macros);\n+            }\n+        }\n+\n+        let is_builtin = attr::contains_name(attrs, sym::rustc_builtin_macro);\n+\n+        SyntaxExtension {\n+            kind,\n+            span,\n+            allow_internal_unstable,\n+            allow_internal_unsafe: attr::contains_name(attrs, sym::allow_internal_unsafe),\n+            local_inner_macros,\n+            stability: attr::find_stability(&sess, attrs, span),\n+            deprecation: attr::find_deprecation(&sess, attrs, span),\n+            helper_attrs,\n+            edition,\n+            is_builtin,\n+            is_derive_copy: is_builtin && name == sym::Copy,\n+        }\n+    }\n+\n     pub fn dummy_bang(edition: Edition) -> SyntaxExtension {\n         fn expander<'cx>(_: &'cx mut ExtCtxt<'_>, span: Span, _: &[TokenTree])\n                          -> Box<dyn MacResult + 'cx> {"}, {"sha": "46ffa52f7f5725a1f652948151f23f94ffcd3a49", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 13, "deletions": 57, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/52c62eaae42ebc0efe370848a142c2858ac7fffc/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c62eaae42ebc0efe370848a142c2858ac7fffc/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=52c62eaae42ebc0efe370848a142c2858ac7fffc", "patch": "@@ -1,3 +1,5 @@\n+use crate::ast;\n+use crate::attr::{self, TransparencyError};\n use crate::edition::Edition;\n use crate::ext::base::{DummyResult, ExtCtxt, MacResult, TTMacroExpander};\n use crate::ext::base::{SyntaxExtension, SyntaxExtensionKind};\n@@ -15,7 +17,6 @@ use crate::parse::token::{self, NtTT, Token};\n use crate::parse::{Directory, ParseSess};\n use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n-use crate::{ast, attr, attr::TransparencyError};\n \n use errors::{DiagnosticBuilder, FatalError};\n use log::debug;\n@@ -290,6 +291,7 @@ pub fn compile(\n     def: &ast::Item,\n     edition: Edition,\n ) -> SyntaxExtension {\n+    let diag = &sess.span_diagnostic;\n     let lhs_nm = ast::Ident::new(sym::lhs, def.span);\n     let rhs_nm = ast::Ident::new(sym::rhs, def.span);\n     let tt_spec = ast::Ident::new(sym::tt, def.span);\n@@ -423,71 +425,25 @@ pub fn compile(\n     let (transparency, transparency_error) = attr::find_transparency(&def.attrs, body.legacy);\n     match transparency_error {\n         Some(TransparencyError::UnknownTransparency(value, span)) =>\n-            sess.span_diagnostic.span_err(\n-                span, &format!(\"unknown macro transparency: `{}`\", value)\n-            ),\n+            diag.span_err(span, &format!(\"unknown macro transparency: `{}`\", value)),\n         Some(TransparencyError::MultipleTransparencyAttrs(old_span, new_span)) =>\n-            sess.span_diagnostic.span_err(\n-                vec![old_span, new_span], \"multiple macro transparency attributes\"\n-            ),\n+            diag.span_err(vec![old_span, new_span], \"multiple macro transparency attributes\"),\n         None => {}\n     }\n \n     let expander: Box<_> = Box::new(MacroRulesMacroExpander {\n         name: def.ident, span: def.span, transparency, lhses, rhses, valid\n     });\n \n-    let allow_internal_unstable =\n-        attr::find_by_name(&def.attrs, sym::allow_internal_unstable).map(|attr| {\n-            attr.meta_item_list()\n-                .map(|list| {\n-                    list.iter()\n-                        .filter_map(|it| {\n-                            let name = it.ident().map(|ident| ident.name);\n-                            if name.is_none() {\n-                                sess.span_diagnostic.span_err(\n-                                    it.span(),\n-                                    \"allow internal unstable expects feature names\",\n-                                )\n-                            }\n-                            name\n-                        })\n-                        .collect::<Vec<Symbol>>()\n-                        .into()\n-                })\n-                .unwrap_or_else(|| {\n-                    sess.span_diagnostic.span_warn(\n-                        attr.span,\n-                        \"allow_internal_unstable expects list of feature names. In the \\\n-                         future this will become a hard error. Please use `allow_internal_unstable(\\\n-                         foo, bar)` to only allow the `foo` and `bar` features\",\n-                    );\n-                    vec![sym::allow_internal_unstable_backcompat_hack].into()\n-                })\n-        });\n-\n-    let mut local_inner_macros = false;\n-    if let Some(macro_export) = attr::find_by_name(&def.attrs, sym::macro_export) {\n-        if let Some(l) = macro_export.meta_item_list() {\n-            local_inner_macros = attr::list_contains_name(&l, sym::local_inner_macros);\n-        }\n-    }\n-\n-    let is_builtin = attr::contains_name(&def.attrs, sym::rustc_builtin_macro);\n-\n-    SyntaxExtension {\n-        kind: SyntaxExtensionKind::LegacyBang(expander),\n-        span: def.span,\n-        allow_internal_unstable,\n-        allow_internal_unsafe: attr::contains_name(&def.attrs, sym::allow_internal_unsafe),\n-        local_inner_macros,\n-        stability: attr::find_stability(&sess, &def.attrs, def.span),\n-        deprecation: attr::find_deprecation(&sess, &def.attrs, def.span),\n-        helper_attrs: Vec::new(),\n+    SyntaxExtension::new(\n+        sess,\n+        SyntaxExtensionKind::LegacyBang(expander),\n+        def.span,\n+        Vec::new(),\n         edition,\n-        is_builtin,\n-        is_derive_copy: is_builtin && def.ident.name == sym::Copy,\n-    }\n+        def.ident.name,\n+        &def.attrs,\n+    )\n }\n \n fn check_lhs_nt_follows("}, {"sha": "055781d2c6048c01d4769f96695cc1224daae3ba", "filename": "src/test/ui/proc-macro/attributes-on-definitions.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52c62eaae42ebc0efe370848a142c2858ac7fffc/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c62eaae42ebc0efe370848a142c2858ac7fffc/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-definitions.rs?ref=52c62eaae42ebc0efe370848a142c2858ac7fffc", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// aux-build:attributes-on-definitions.rs\n+\n+#![forbid(unsafe_code)]\n+\n+extern crate attributes_on_definitions;\n+\n+attributes_on_definitions::with_attrs!();\n+//~^ WARN use of deprecated item\n+// No errors about the use of unstable and unsafe code inside the macro.\n+\n+fn main() {}"}, {"sha": "c61e043b229713a03dcc03cad43fd0e250f41af3", "filename": "src/test/ui/proc-macro/attributes-on-definitions.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52c62eaae42ebc0efe370848a142c2858ac7fffc/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-definitions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52c62eaae42ebc0efe370848a142c2858ac7fffc/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-definitions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-definitions.stderr?ref=52c62eaae42ebc0efe370848a142c2858ac7fffc", "patch": "@@ -0,0 +1,8 @@\n+warning: use of deprecated item 'attributes_on_definitions::with_attrs': test\n+  --> $DIR/attributes-on-definitions.rs:8:1\n+   |\n+LL | attributes_on_definitions::with_attrs!();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+"}, {"sha": "93a339840d6211e514a1a054783a69b17ff3aa31", "filename": "src/test/ui/proc-macro/auxiliary/attributes-on-definitions.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/52c62eaae42ebc0efe370848a142c2858ac7fffc/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattributes-on-definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c62eaae42ebc0efe370848a142c2858ac7fffc/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattributes-on-definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattributes-on-definitions.rs?ref=52c62eaae42ebc0efe370848a142c2858ac7fffc", "patch": "@@ -0,0 +1,23 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![feature(allow_internal_unsafe)]\n+#![feature(allow_internal_unstable)]\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+#[allow_internal_unstable(proc_macro_internals)]\n+#[allow_internal_unsafe]\n+#[deprecated(since = \"1.0.0\", note = \"test\")]\n+pub fn with_attrs(_: TokenStream) -> TokenStream {\n+    \"\n+    extern crate proc_macro;\n+    use ::proc_macro::bridge;\n+\n+    fn contains_unsafe() { unsafe {} }\n+    \".parse().unwrap()\n+}"}]}