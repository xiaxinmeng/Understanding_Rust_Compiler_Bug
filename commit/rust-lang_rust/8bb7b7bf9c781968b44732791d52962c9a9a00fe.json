{"sha": "8bb7b7bf9c781968b44732791d52962c9a9a00fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYjdiN2JmOWM3ODE5NjhiNDQ3MzI3OTFkNTI5NjJjOWE5YTAwZmU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-08T16:47:09Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-14T17:13:20Z"}, "message": "typeck: always expose repeat count `AnonConst`s' parent in `generics_of`.", "tree": {"sha": "3262c3ced2a3d51636833e57c7d64fd28ad4c489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3262c3ced2a3d51636833e57c7d64fd28ad4c489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bb7b7bf9c781968b44732791d52962c9a9a00fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb7b7bf9c781968b44732791d52962c9a9a00fe", "html_url": "https://github.com/rust-lang/rust/commit/8bb7b7bf9c781968b44732791d52962c9a9a00fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bb7b7bf9c781968b44732791d52962c9a9a00fe/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89890294764fd0a3ff286167cc07d04e6b970336", "url": "https://api.github.com/repos/rust-lang/rust/commits/89890294764fd0a3ff286167cc07d04e6b970336", "html_url": "https://github.com/rust-lang/rust/commit/89890294764fd0a3ff286167cc07d04e6b970336"}], "stats": {"total": 100, "additions": 36, "deletions": 64}, "files": [{"sha": "a327951b3b0dd64229b6a4955b7412e133ecb33e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8bb7b7bf9c781968b44732791d52962c9a9a00fe", "patch": "@@ -1170,14 +1170,28 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n         }\n         // FIXME(#43408) enable this always when we get lazy normalization.\n         Node::AnonConst(_) => {\n+            let parent_id = tcx.hir().get_parent_item(hir_id);\n+            let parent_def_id = tcx.hir().local_def_id(parent_id);\n+\n             // HACK(eddyb) this provides the correct generics when\n             // `feature(const_generics)` is enabled, so that const expressions\n             // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n             if tcx.features().const_generics {\n-                let parent_id = tcx.hir().get_parent_item(hir_id);\n-                Some(tcx.hir().local_def_id(parent_id))\n+                Some(parent_def_id)\n             } else {\n-                None\n+                let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n+                match parent_node {\n+                    // HACK(eddyb) this provides the correct generics for repeat\n+                    // expressions' count (i.e. `N` in `[x; N]`), as they shouldn't\n+                    // be able to cause query cycle errors.\n+                    Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n+                        if constant.hir_id == hir_id =>\n+                    {\n+                        Some(parent_def_id)\n+                    }\n+\n+                    _ => None,\n+                }\n             }\n         }\n         Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {"}, {"sha": "8fe79b97d9ba29d9541af3c05357c920da414f60", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.rs?ref=8bb7b7bf9c781968b44732791d52962c9a9a00fe", "patch": "@@ -14,7 +14,7 @@ impl Foo for Def {\n \n pub fn test<A: Foo, B: Foo>() {\n     let _array = [4; <A as Foo>::Y];\n-    //~^ ERROR the trait bound `A: Foo` is not satisfied [E0277]\n+    //~^ ERROR constant expression depends on a generic parameter\n }\n \n fn main() {"}, {"sha": "0bc019b2dc8751fa2c855c7d74ce3c026f67af13", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr?ref=8bb7b7bf9c781968b44732791d52962c9a9a00fe", "patch": "@@ -1,17 +1,10 @@\n-error[E0277]: the trait bound `A: Foo` is not satisfied\n+error: constant expression depends on a generic parameter\n   --> $DIR/associated-const-type-parameter-arrays-2.rs:16:22\n    |\n-LL |     const Y: usize;\n-   |     --------------- required by `Foo::Y`\n-...\n LL |     let _array = [4; <A as Foo>::Y];\n-   |                      ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n+   |                      ^^^^^^^^^^^^^\n    |\n-help: consider further restricting this bound\n-   |\n-LL | pub fn test<A: Foo + Foo, B: Foo>() {\n-   |                    ^^^^^\n+   = note: this may fail depending on what value the parameter takes\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "3ea5f88f07d1e5a9137dcbc39353f99dcdcaf3a3", "filename": "src/test/ui/consts/too_generic_eval_ice.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs?ref=8bb7b7bf9c781968b44732791d52962c9a9a00fe", "patch": "@@ -4,10 +4,9 @@ impl<A, B> Foo<A, B> {\n     const HOST_SIZE: usize = std::mem::size_of::<B>();\n \n     pub fn crash() -> bool {\n-        [5; Self::HOST_SIZE] == [6; 0] //~ ERROR no associated item named `HOST_SIZE`\n-        //~^ the size for values of type `A` cannot be known\n-        //~| the size for values of type `B` cannot be known\n-        //~| binary operation `==` cannot be applied to type `[{integer}; _]`\n+        [5; Self::HOST_SIZE] == [6; 0]\n+        //~^ ERROR constant expression depends on a generic parameter\n+        //~| ERROR binary operation `==` cannot be applied to type `[{integer}; _]`\n     }\n }\n "}, {"sha": "8b29c533bcc9344c8319f07332c11d3b0574c0d9", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 5, "deletions": 41, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=8bb7b7bf9c781968b44732791d52962c9a9a00fe", "patch": "@@ -1,45 +1,10 @@\n-error[E0599]: no associated item named `HOST_SIZE` found for struct `Foo<A, B>` in the current scope\n-  --> $DIR/too_generic_eval_ice.rs:7:19\n-   |\n-LL | pub struct Foo<A, B>(A, B);\n-   | --------------------------- associated item `HOST_SIZE` not found for this\n-...\n-LL |         [5; Self::HOST_SIZE] == [6; 0]\n-   |                   ^^^^^^^^^ associated item not found in `Foo<A, B>`\n-   |\n-   = note: the method `HOST_SIZE` exists but the following trait bounds were not satisfied:\n-           `A: std::marker::Sized`\n-           `B: std::marker::Sized`\n-\n-error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/too_generic_eval_ice.rs:7:13\n-   |\n-LL | pub struct Foo<A, B>(A, B);\n-   |                - required by this bound in `Foo`\n-LL | \n-LL | impl<A, B> Foo<A, B> {\n-   |      - this type parameter needs to be `std::marker::Sized`\n-...\n-LL |         [5; Self::HOST_SIZE] == [6; 0]\n-   |             ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-\n-error[E0277]: the size for values of type `B` cannot be known at compilation time\n+error: constant expression depends on a generic parameter\n   --> $DIR/too_generic_eval_ice.rs:7:13\n    |\n-LL | pub struct Foo<A, B>(A, B);\n-   |                   - required by this bound in `Foo`\n-LL | \n-LL | impl<A, B> Foo<A, B> {\n-   |         - this type parameter needs to be `std::marker::Sized`\n-...\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n-   |             ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             ^^^^^^^^^^^^^^^\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `B`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: this may fail depending on what value the parameter takes\n \n error[E0369]: binary operation `==` cannot be applied to type `[{integer}; _]`\n   --> $DIR/too_generic_eval_ice.rs:7:30\n@@ -49,7 +14,6 @@ LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |         |\n    |         [{integer}; _]\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0277, E0369, E0599.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "c7b6f1d58f33d798f691ce9554cce7d66049cc1d", "filename": "src/test/ui/issues/issue-39211.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Ftest%2Fui%2Fissues%2Fissue-39211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Ftest%2Fui%2Fissues%2Fissue-39211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39211.rs?ref=8bb7b7bf9c781968b44732791d52962c9a9a00fe", "patch": "@@ -8,7 +8,8 @@ trait Mat {\n }\n \n fn m<M: Mat>() {\n-    let a = [3; M::Row::DIM]; //~ ERROR associated type `Row` not found for `M`\n+    let a = [3; M::Row::DIM];\n+    //~^ ERROR constant expression depends on a generic parameter\n }\n fn main() {\n }"}, {"sha": "c555983ea68e0abed2b3dabca1d66f50d1eb689a", "filename": "src/test/ui/issues/issue-39211.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Ftest%2Fui%2Fissues%2Fissue-39211.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb7b7bf9c781968b44732791d52962c9a9a00fe/src%2Ftest%2Fui%2Fissues%2Fissue-39211.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39211.stderr?ref=8bb7b7bf9c781968b44732791d52962c9a9a00fe", "patch": "@@ -1,9 +1,10 @@\n-error[E0220]: associated type `Row` not found for `M`\n-  --> $DIR/issue-39211.rs:11:20\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-39211.rs:11:17\n    |\n LL |     let a = [3; M::Row::DIM];\n-   |                    ^^^ associated type `Row` not found\n+   |                 ^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0220`."}]}