{"sha": "d858d280e4778e556e8b8595e20d36d229bda6e9", "node_id": "C_kwDOAAsO6NoAKGQ4NThkMjgwZTQ3NzhlNTU2ZThiODU5NWUyMGQzNmQyMjliZGE2ZTk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-25T15:37:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-25T15:37:18Z"}, "message": "Rollup merge of #97302 - compiler-errors:writeback-ascending, r=cjgillot\n\nDo writeback of Closure params before visiting the parent expression\n\nThis means that given the expression:\n\n```\nlet x = |a: Vec<_>| {};\n```\n\nWe will visit the HIR node for `a` before `x`, and report the ambiguity on the former instead of the latter. This also moves writeback for struct field ids and const blocks before, but the ordering of this and walking the expr doesn't seem to matter.", "tree": {"sha": "d31325fed3a238e971c648845e4f4c5d86090643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d31325fed3a238e971c648845e4f4c5d86090643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d858d280e4778e556e8b8595e20d36d229bda6e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJijk0uCRBK7hj4Ov3rIwAAHT0IAHmEI9Ic2aZLjVmQ9bo0VTll\nP/RMgcQASbBbnU3YTg4/cQQsF8CNRMTEHDwnPUzI/C74flXFaCMNNaygQQ4Men15\nn+6KMYclznDoe1qM2aHipH08H21XMDKgHAC0LmkAeFVaYTHAHqGDTZJy/Dr/4Jf6\nccfHBz59crIMEDuqE/U71wLJ8vP5dAqrIoO4ZIirUf5dX57zBwWv2BHZpvG6EaVx\nIx3AgmHfSsKlgAqcCBC/jf8KAFsNjF1dq12fxD6dy8md3+EXpyb2QcWwzu2LETYZ\nSOPnqhyY0E2whthxOl4yGuJx9KN1iZrE9MjfbNAhTqfQDndWA/5o78eqbtalkjY=\n=Qx3f\n-----END PGP SIGNATURE-----\n", "payload": "tree d31325fed3a238e971c648845e4f4c5d86090643\nparent fe9c64d0af379e6e48ac1e798d65e2031265aa22\nparent e9215bb7a97d61b5368f58fa299474a8606655d4\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653493038 +0200\ncommitter GitHub <noreply@github.com> 1653493038 +0200\n\nRollup merge of #97302 - compiler-errors:writeback-ascending, r=cjgillot\n\nDo writeback of Closure params before visiting the parent expression\n\nThis means that given the expression:\n\n```\nlet x = |a: Vec<_>| {};\n```\n\nWe will visit the HIR node for `a` before `x`, and report the ambiguity on the former instead of the latter. This also moves writeback for struct field ids and const blocks before, but the ordering of this and walking the expr doesn't seem to matter.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d858d280e4778e556e8b8595e20d36d229bda6e9", "html_url": "https://github.com/rust-lang/rust/commit/d858d280e4778e556e8b8595e20d36d229bda6e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d858d280e4778e556e8b8595e20d36d229bda6e9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe9c64d0af379e6e48ac1e798d65e2031265aa22", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9c64d0af379e6e48ac1e798d65e2031265aa22", "html_url": "https://github.com/rust-lang/rust/commit/fe9c64d0af379e6e48ac1e798d65e2031265aa22"}, {"sha": "e9215bb7a97d61b5368f58fa299474a8606655d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9215bb7a97d61b5368f58fa299474a8606655d4", "html_url": "https://github.com/rust-lang/rust/commit/e9215bb7a97d61b5368f58fa299474a8606655d4"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "4fe5b26dc05a56d816c3216f3d913e780c1e1819", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d858d280e4778e556e8b8595e20d36d229bda6e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d858d280e4778e556e8b8595e20d36d229bda6e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=d858d280e4778e556e8b8595e20d36d229bda6e9", "patch": "@@ -263,8 +263,6 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n         self.fix_scalar_builtin_expr(e);\n         self.fix_index_builtin_expr(e);\n \n-        self.visit_node_id(e.span, e.hir_id);\n-\n         match e.kind {\n             hir::ExprKind::Closure(_, _, body, _, _) => {\n                 let body = self.fcx.tcx.hir().body(body);\n@@ -291,6 +289,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n             _ => {}\n         }\n \n+        self.visit_node_id(e.span, e.hir_id);\n         intravisit::walk_expr(self, e);\n     }\n "}, {"sha": "0089d86e340f141d055b977655452c0706f6f59b", "filename": "src/test/ui/type/type-check/unknown_type_for_closure.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d858d280e4778e556e8b8595e20d36d229bda6e9/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d858d280e4778e556e8b8595e20d36d229bda6e9/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.rs?ref=d858d280e4778e556e8b8595e20d36d229bda6e9", "patch": "@@ -1,3 +1,17 @@\n-fn main() {\n-    let x = |_| {    }; //~ ERROR type annotations needed\n+fn infer_in_arg() {\n+    let x = |b: Vec<_>| {}; //~ ERROR E0282\n }\n+\n+fn empty_pattern() {\n+    let x = |_| {}; //~ ERROR type annotations needed\n+}\n+\n+fn infer_ty() {\n+    let x = |k: _| {}; //~ ERROR type annotations needed\n+}\n+\n+fn ambig_return() {\n+    let x = || -> Vec<_> { Vec::new() }; //~ ERROR type annotations needed for the closure `fn() -> Vec<_>`\n+}\n+\n+fn main() {}"}, {"sha": "c3accad5f25d9273de7bb8230a39bff568a8d619", "filename": "src/test/ui/type/type-check/unknown_type_for_closure.stderr", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d858d280e4778e556e8b8595e20d36d229bda6e9/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d858d280e4778e556e8b8595e20d36d229bda6e9/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr?ref=d858d280e4778e556e8b8595e20d36d229bda6e9", "patch": "@@ -1,9 +1,32 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `Vec<_>`\n   --> $DIR/unknown_type_for_closure.rs:2:14\n    |\n-LL |     let x = |_| {    };\n+LL |     let x = |b: Vec<_>| {};\n    |              ^ consider giving this closure parameter a type\n \n-error: aborting due to previous error\n+error[E0282]: type annotations needed\n+  --> $DIR/unknown_type_for_closure.rs:6:14\n+   |\n+LL |     let x = |_| {};\n+   |              ^ consider giving this closure parameter a type\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/unknown_type_for_closure.rs:10:14\n+   |\n+LL |     let x = |k: _| {};\n+   |              ^ consider giving this closure parameter a type\n+\n+error[E0282]: type annotations needed for the closure `fn() -> Vec<_>`\n+  --> $DIR/unknown_type_for_closure.rs:14:28\n+   |\n+LL |     let x = || -> Vec<_> { Vec::new() };\n+   |                            ^^^^^^^^ cannot infer type for type parameter `T`\n+   |\n+help: give this closure an explicit return type without `_` placeholders\n+   |\n+LL |     let x = || -> Vec<_> { Vec::new() };\n+   |                   ~~~~~~\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0282`."}]}