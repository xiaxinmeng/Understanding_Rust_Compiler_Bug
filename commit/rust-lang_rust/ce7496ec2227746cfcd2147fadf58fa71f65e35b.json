{"sha": "ce7496ec2227746cfcd2147fadf58fa71f65e35b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNzQ5NmVjMjIyNzc0NmNmY2QyMTQ3ZmFkZjU4ZmE3MWY2NWUzNWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-06T16:37:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-06T16:37:19Z"}, "message": "Merge #3497\n\n3497: Allow specifying additional info on call to profile r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d6b5eea44ab7bb61cc3b66e622ffb0031b54d777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6b5eea44ab7bb61cc3b66e622ffb0031b54d777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce7496ec2227746cfcd2147fadf58fa71f65e35b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeYnw/CRBK7hj4Ov3rIwAAdHIIAGy/796k9u5YxSHCkX4U7U8k\nrbAed9ops9SLX84SFnne+Q496zkYqfqKS+4Ww+yAKonMUzVnGUeJ3G2p+PLvZcCj\nClmda9RFiwggLSYBqRX2a7v8DoOhbO4R6VMuhjS6wudaOgn39VV36doTeTsXOI0f\nSTsxX+M6wAQV8nu2fpS+muKSKL0uhE9hFO59aJCnF6L4nzAVuqOOOkj0We0qt7cV\njMCLW+eZgT5lChZFoRlOHTGnxhq/1kngFZxX27ee47w/kLoTRr64z2fvUmU4nym+\nGaEhBnIw0Hs0JyUZNoJ2f9JifXjB5kpaQvA/26Uks0PPdVGl6NtWzl+Zcjo3hpE=\n=kVu2\n-----END PGP SIGNATURE-----\n", "payload": "tree d6b5eea44ab7bb61cc3b66e622ffb0031b54d777\nparent 190179489d7e19043c1cd087d4d4fc9035614227\nparent b33b843f408fe73bde920c087de0622f46e853e5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583512639 +0000\ncommitter GitHub <noreply@github.com> 1583512639 +0000\n\nMerge #3497\n\n3497: Allow specifying additional info on call to profile r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7496ec2227746cfcd2147fadf58fa71f65e35b", "html_url": "https://github.com/rust-lang/rust/commit/ce7496ec2227746cfcd2147fadf58fa71f65e35b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce7496ec2227746cfcd2147fadf58fa71f65e35b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190179489d7e19043c1cd087d4d4fc9035614227", "url": "https://api.github.com/repos/rust-lang/rust/commits/190179489d7e19043c1cd087d4d4fc9035614227", "html_url": "https://github.com/rust-lang/rust/commit/190179489d7e19043c1cd087d4d4fc9035614227"}, {"sha": "b33b843f408fe73bde920c087de0622f46e853e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b33b843f408fe73bde920c087de0622f46e853e5", "html_url": "https://github.com/rust-lang/rust/commit/b33b843f408fe73bde920c087de0622f46e853e5"}], "stats": {"total": 73, "additions": 52, "deletions": 21}, "files": [{"sha": "f79faa84dba5e64a2250fc899282b2e4bed587fb", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce7496ec2227746cfcd2147fadf58fa71f65e35b/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7496ec2227746cfcd2147fadf58fa71f65e35b/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=ce7496ec2227746cfcd2147fadf58fa71f65e35b", "patch": "@@ -16,6 +16,7 @@ use crate::{\n     Binders, CallableDef, GenericPredicate, InferenceResult, PolyFnSig, Substs, TraitRef, Ty,\n     TyDefId, TypeCtor, ValueTyDefId,\n };\n+use hir_expand::name::Name;\n \n #[salsa::query_group(HirDatabaseStorage)]\n #[salsa::requires(salsa::Database)]\n@@ -111,7 +112,15 @@ pub trait HirDatabase: DefDatabase {\n }\n \n fn infer(db: &impl HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {\n-    let _p = profile(\"wait_infer\");\n+    let _p = profile(\"wait_infer\").detail(|| match def {\n+        DefWithBodyId::FunctionId(it) => db.function_data(it).name.to_string(),\n+        DefWithBodyId::StaticId(it) => {\n+            db.static_data(it).name.clone().unwrap_or_else(Name::missing).to_string()\n+        }\n+        DefWithBodyId::ConstId(it) => {\n+            db.const_data(it).name.clone().unwrap_or_else(Name::missing).to_string()\n+        }\n+    });\n     db.do_infer(def)\n }\n "}, {"sha": "bdf23ac028a935bdbb8b71676df0f0875ae323d1", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce7496ec2227746cfcd2147fadf58fa71f65e35b/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7496ec2227746cfcd2147fadf58fa71f65e35b/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=ce7496ec2227746cfcd2147fadf58fa71f65e35b", "patch": "@@ -221,7 +221,10 @@ pub(crate) fn trait_solve_query(\n     krate: CrateId,\n     goal: Canonical<InEnvironment<Obligation>>,\n ) -> Option<Solution> {\n-    let _p = profile(\"trait_solve_query\");\n+    let _p = profile(\"trait_solve_query\").detail(|| match &goal.value.value {\n+        Obligation::Trait(it) => db.trait_data(it.trait_).name.to_string(),\n+        Obligation::Projection(_) => \"projection\".to_string(),\n+    });\n     log::debug!(\"trait_solve_query({})\", goal.value.value.display(db));\n \n     if let Obligation::Projection(pred) = &goal.value.value {"}, {"sha": "9e167db964ac57b481f067f5397dd0ce450f44b1", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ce7496ec2227746cfcd2147fadf58fa71f65e35b/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7496ec2227746cfcd2147fadf58fa71f65e35b/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=ce7496ec2227746cfcd2147fadf58fa71f65e35b", "patch": "@@ -88,7 +88,7 @@ pub type Label = &'static str;\n pub fn profile(label: Label) -> Profiler {\n     assert!(!label.is_empty());\n     if !PROFILING_ENABLED.load(Ordering::Relaxed) {\n-        return Profiler { label: None };\n+        return Profiler { label: None, detail: None };\n     }\n \n     PROFILE_STACK.with(|stack| {\n@@ -101,15 +101,15 @@ pub fn profile(label: Label) -> Profiler {\n             };\n         }\n         if stack.starts.len() > stack.filter_data.depth {\n-            return Profiler { label: None };\n+            return Profiler { label: None, detail: None };\n         }\n         let allowed = &stack.filter_data.allowed;\n         if stack.starts.is_empty() && !allowed.is_empty() && !allowed.contains(label) {\n-            return Profiler { label: None };\n+            return Profiler { label: None, detail: None };\n         }\n \n         stack.starts.push(Instant::now());\n-        Profiler { label: Some(label) }\n+        Profiler { label: Some(label), detail: None }\n     })\n }\n \n@@ -130,6 +130,16 @@ pub fn print_time(label: Label) -> impl Drop {\n \n pub struct Profiler {\n     label: Option<Label>,\n+    detail: Option<String>,\n+}\n+\n+impl Profiler {\n+    pub fn detail(mut self, detail: impl FnOnce() -> String) -> Profiler {\n+        if self.label.is_some() {\n+            self.detail = Some(detail())\n+        }\n+        self\n+    }\n }\n \n pub struct Filter {\n@@ -183,6 +193,7 @@ struct Message {\n     level: usize,\n     duration: Duration,\n     label: Label,\n+    detail: Option<String>,\n }\n \n impl ProfileStack {\n@@ -208,13 +219,13 @@ thread_local!(static PROFILE_STACK: RefCell<ProfileStack> = RefCell::new(Profile\n impl Drop for Profiler {\n     fn drop(&mut self) {\n         match self {\n-            Profiler { label: Some(label) } => {\n+            Profiler { label: Some(label), detail } => {\n                 PROFILE_STACK.with(|stack| {\n                     let mut stack = stack.borrow_mut();\n                     let start = stack.starts.pop().unwrap();\n                     let duration = start.elapsed();\n                     let level = stack.starts.len();\n-                    stack.messages.push(Message { level, duration, label });\n+                    stack.messages.push(Message { level, duration, label, detail: detail.take() });\n                     if level == 0 {\n                         let stdout = stderr();\n                         let longer_than = stack.filter_data.longer_than;\n@@ -228,7 +239,7 @@ impl Drop for Profiler {\n                     }\n                 });\n             }\n-            Profiler { label: None } => (),\n+            Profiler { label: None, .. } => (),\n         }\n     }\n }\n@@ -251,8 +262,16 @@ fn print_for_idx(\n ) {\n     let current = &msgs[current_idx];\n     let current_indent = \"    \".repeat(current.level);\n-    writeln!(out, \"{}{:5}ms - {}\", current_indent, current.duration.as_millis(), current.label)\n-        .expect(\"printing profiling info\");\n+    let detail = current.detail.as_ref().map(|it| format!(\" @ {}\", it)).unwrap_or_default();\n+    writeln!(\n+        out,\n+        \"{}{:5}ms - {}{}\",\n+        current_indent,\n+        current.duration.as_millis(),\n+        current.label,\n+        detail,\n+    )\n+    .expect(\"printing profiling info\");\n \n     let longer_than_millis = longer_than.as_millis();\n     let children_indices = &children_map[current_idx];\n@@ -417,9 +436,9 @@ mod tests {\n     fn test_longer_than() {\n         let mut result = vec![];\n         let msgs = vec![\n-            Message { level: 1, duration: Duration::from_nanos(3), label: \"bar\" },\n-            Message { level: 1, duration: Duration::from_nanos(2), label: \"bar\" },\n-            Message { level: 0, duration: Duration::from_millis(1), label: \"foo\" },\n+            Message { level: 1, duration: Duration::from_nanos(3), label: \"bar\", detail: None },\n+            Message { level: 1, duration: Duration::from_nanos(2), label: \"bar\", detail: None },\n+            Message { level: 0, duration: Duration::from_millis(1), label: \"foo\", detail: None },\n         ];\n         print(&msgs, Duration::from_millis(0), &mut result);\n         // The calls to `bar` are so short that they'll be rounded to 0ms and should get collapsed\n@@ -434,8 +453,8 @@ mod tests {\n     fn test_unaccounted_for_topmost() {\n         let mut result = vec![];\n         let msgs = vec![\n-            Message { level: 1, duration: Duration::from_millis(2), label: \"bar\" },\n-            Message { level: 0, duration: Duration::from_millis(5), label: \"foo\" },\n+            Message { level: 1, duration: Duration::from_millis(2), label: \"bar\", detail: None },\n+            Message { level: 0, duration: Duration::from_millis(5), label: \"foo\", detail: None },\n         ];\n         print(&msgs, Duration::from_millis(0), &mut result);\n         assert_eq!(\n@@ -453,11 +472,11 @@ mod tests {\n     fn test_unaccounted_for_multiple_levels() {\n         let mut result = vec![];\n         let msgs = vec![\n-            Message { level: 2, duration: Duration::from_millis(3), label: \"baz\" },\n-            Message { level: 1, duration: Duration::from_millis(5), label: \"bar\" },\n-            Message { level: 2, duration: Duration::from_millis(2), label: \"baz\" },\n-            Message { level: 1, duration: Duration::from_millis(4), label: \"bar\" },\n-            Message { level: 0, duration: Duration::from_millis(9), label: \"foo\" },\n+            Message { level: 2, duration: Duration::from_millis(3), label: \"baz\", detail: None },\n+            Message { level: 1, duration: Duration::from_millis(5), label: \"bar\", detail: None },\n+            Message { level: 2, duration: Duration::from_millis(2), label: \"baz\", detail: None },\n+            Message { level: 1, duration: Duration::from_millis(4), label: \"bar\", detail: None },\n+            Message { level: 0, duration: Duration::from_millis(9), label: \"foo\", detail: None },\n         ];\n         print(&msgs, Duration::from_millis(0), &mut result);\n         assert_eq!("}]}