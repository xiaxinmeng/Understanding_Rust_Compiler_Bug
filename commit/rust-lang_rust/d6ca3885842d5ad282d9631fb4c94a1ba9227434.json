{"sha": "d6ca3885842d5ad282d9631fb4c94a1ba9227434", "node_id": "C_kwDOAAsO6NoAKGQ2Y2EzODg1ODQyZDVhZDI4MmQ5NjMxZmI0Yzk0YTFiYTkyMjc0MzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-26T06:52:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-26T06:52:43Z"}, "message": "Rollup merge of #94235 - Dirbaio:fix-chalk-opaque-debrujin, r=jackh726\n\nchalk: Fix wrong debrujin index in opaque type handling.\n\nA folder in opaque type lowering was substituting all opaque type references with a variable with debrujin index 0 ignoring how many binders deep we are.\n\nThis caused an ICE with `Not enough bound vars: ^0 not found in []` ([full logs](https://gist.github.com/Dirbaio/2b9374ff4fce37afb9d665dc9f0000df)) with the following code.\n\n```rust\nfn main() -> () {}\nasync fn foo(x: u32) -> u32 {\n    x\n}\n```\n\nWith the fix, it no longer ICEs. It still doesn't typecheck due to generator issues. I've added a \"known-bug\" test so that at least it doesn't regress back to ICEing.\n\nr? ``@jackh726``", "tree": {"sha": "94a31c3fa5fff0c4a1f19f148360b3769c625b19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94a31c3fa5fff0c4a1f19f148360b3769c625b19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6ca3885842d5ad282d9631fb4c94a1ba9227434", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiGc47CRBK7hj4Ov3rIwAAm5gIADaqbTG4kLJoIZbknRUZbvMr\nRvFL+tKvxmdkMh+ssthsJ/OHFFDp/b/7J0nJDr0VZVZTOLDfW92nFs4f1TykFTKX\nxwoTeRYRbwfrUWe1TUyJBvoD4+wv0n+SW+pW4Q8693yTtfnwZLpRaAaoGoMCN4q9\nBU6LV7RpIQPCjxUVrbhrH8n7RU01t/AZk+Z4qad+yzes70ugv7kvWm/oM93zs4jg\ngtSNs5PQ4HVhl8GpLb5+CvvNyIWoEMxVIT93mc0Is/GFE7J9/0FlmTuhMX0PcOgv\ngmwvxtEhBo3jlCu49T8kgRW0W7cB5PdTA4O6haeTmnLL9ILkkrcB13mZQLtFhQk=\n=fSii\n-----END PGP SIGNATURE-----\n", "payload": "tree 94a31c3fa5fff0c4a1f19f148360b3769c625b19\nparent 734b924d05a18194048381505960066a2a0a91f1\nparent a1d8ce46da103ffa6b96a80cc543ed4e447be917\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645858363 +0100\ncommitter GitHub <noreply@github.com> 1645858363 +0100\n\nRollup merge of #94235 - Dirbaio:fix-chalk-opaque-debrujin, r=jackh726\n\nchalk: Fix wrong debrujin index in opaque type handling.\n\nA folder in opaque type lowering was substituting all opaque type references with a variable with debrujin index 0 ignoring how many binders deep we are.\n\nThis caused an ICE with `Not enough bound vars: ^0 not found in []` ([full logs](https://gist.github.com/Dirbaio/2b9374ff4fce37afb9d665dc9f0000df)) with the following code.\n\n```rust\nfn main() -> () {}\nasync fn foo(x: u32) -> u32 {\n    x\n}\n```\n\nWith the fix, it no longer ICEs. It still doesn't typecheck due to generator issues. I've added a \"known-bug\" test so that at least it doesn't regress back to ICEing.\n\nr? ``@jackh726``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ca3885842d5ad282d9631fb4c94a1ba9227434", "html_url": "https://github.com/rust-lang/rust/commit/d6ca3885842d5ad282d9631fb4c94a1ba9227434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6ca3885842d5ad282d9631fb4c94a1ba9227434/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734b924d05a18194048381505960066a2a0a91f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/734b924d05a18194048381505960066a2a0a91f1", "html_url": "https://github.com/rust-lang/rust/commit/734b924d05a18194048381505960066a2a0a91f1"}, {"sha": "a1d8ce46da103ffa6b96a80cc543ed4e447be917", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d8ce46da103ffa6b96a80cc543ed4e447be917", "html_url": "https://github.com/rust-lang/rust/commit/a1d8ce46da103ffa6b96a80cc543ed4e447be917"}], "stats": {"total": 112, "additions": 94, "deletions": 18}, "files": [{"sha": "47b1ee04e777fabb649564c68243fe66e5f20465", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d6ca3885842d5ad282d9631fb4c94a1ba9227434/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ca3885842d5ad282d9631fb4c94a1ba9227434/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=d6ca3885842d5ad282d9631fb4c94a1ba9227434", "patch": "@@ -8,7 +8,7 @@\n \n use rustc_middle::traits::ChalkRustInterner as RustInterner;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, AssocItemContainer, AssocKind, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, AssocItemContainer, AssocKind, Ty, TyCtxt, TypeFoldable};\n \n use rustc_ast::ast;\n use rustc_attr as attr;\n@@ -482,21 +482,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 .iter()\n                 .map(|(bound, _)| bound.subst(self.interner.tcx, &bound_vars))\n                 .map(|bound| {\n-                    bound.fold_with(&mut ty::fold::BottomUpFolder {\n+                    bound.fold_with(&mut ReplaceOpaqueTyFolder {\n                         tcx: self.interner.tcx,\n-                        ty_op: |ty| {\n-                            if let ty::Opaque(def_id, substs) = *ty.kind() {\n-                                if def_id == opaque_ty_id.0 && substs == identity_substs {\n-                                    return self.interner.tcx.mk_ty(ty::Bound(\n-                                        ty::INNERMOST,\n-                                        ty::BoundTy::from(ty::BoundVar::from_u32(0)),\n-                                    ));\n-                                }\n-                            }\n-                            ty\n-                        },\n-                        lt_op: |lt| lt,\n-                        ct_op: |ct| ct,\n+                        opaque_ty_id,\n+                        identity_substs,\n+                        binder_index: ty::INNERMOST,\n                     })\n                 })\n                 .filter_map(|bound| {\n@@ -739,3 +729,38 @@ fn binders_for<'tcx>(\n         }),\n     )\n }\n+\n+struct ReplaceOpaqueTyFolder<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    opaque_ty_id: chalk_ir::OpaqueTyId<RustInterner<'tcx>>,\n+    identity_substs: SubstsRef<'tcx>,\n+    binder_index: ty::DebruijnIndex,\n+}\n+\n+impl<'tcx> ty::TypeFolder<'tcx> for ReplaceOpaqueTyFolder<'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: ty::Binder<'tcx, T>,\n+    ) -> ty::Binder<'tcx, T> {\n+        self.binder_index.shift_in(1);\n+        let t = t.super_fold_with(self);\n+        self.binder_index.shift_out(1);\n+        t\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        if let ty::Opaque(def_id, substs) = *ty.kind() {\n+            if def_id == self.opaque_ty_id.0 && substs == self.identity_substs {\n+                return self.tcx.mk_ty(ty::Bound(\n+                    self.binder_index,\n+                    ty::BoundTy::from(ty::BoundVar::from_u32(0)),\n+                ));\n+            }\n+        }\n+        ty\n+    }\n+}"}, {"sha": "e3c865ce9e632938508bc58418a52d4826b40c71", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6ca3885842d5ad282d9631fb4c94a1ba9227434/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ca3885842d5ad282d9631fb4c94a1ba9227434/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=d6ca3885842d5ad282d9631fb4c94a1ba9227434", "patch": "@@ -323,7 +323,10 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             ty::Closure(def_id, substs) => {\n                 chalk_ir::TyKind::Closure(chalk_ir::ClosureId(def_id), substs.lower_into(interner))\n             }\n-            ty::Generator(_def_id, _substs, _) => unimplemented!(),\n+            ty::Generator(def_id, substs, _) => chalk_ir::TyKind::Generator(\n+                chalk_ir::GeneratorId(def_id),\n+                substs.lower_into(interner),\n+            ),\n             ty::GeneratorWitness(_) => unimplemented!(),\n             ty::Never => chalk_ir::TyKind::Never,\n             ty::Tuple(types) => {"}, {"sha": "58fc93064edf52c2b5bba9391b8d37fe3955a729", "filename": "src/test/ui/chalkify/bugs/async.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6ca3885842d5ad282d9631fb4c94a1ba9227434/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ca3885842d5ad282d9631fb4c94a1ba9227434/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs?ref=d6ca3885842d5ad282d9631fb4c94a1ba9227434", "patch": "@@ -0,0 +1,9 @@\n+// check-fail\n+// known-bug\n+// compile-flags: -Z chalk --edition=2021\n+\n+fn main() -> () {}\n+\n+async fn foo(x: u32) -> u32 {\n+    x\n+}"}, {"sha": "7a86561bcb9ce14728c2742aeb3bcdf9bbb69ba8", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d6ca3885842d5ad282d9631fb4c94a1ba9227434/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6ca3885842d5ad282d9631fb4c94a1ba9227434/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=d6ca3885842d5ad282d9631fb4c94a1ba9227434", "patch": "@@ -0,0 +1,39 @@\n+error[E0277]: the trait bound `[static generator@$DIR/async.rs:7:29: 9:2]: Generator<ResumeTy>` is not satisfied\n+  --> $DIR/async.rs:7:29\n+   |\n+LL |   async fn foo(x: u32) -> u32 {\n+   |  _____________________________^\n+LL | |     x\n+LL | | }\n+   | |_^ the trait `Generator<ResumeTy>` is not implemented for `[static generator@$DIR/async.rs:7:29: 9:2]`\n+   |\n+note: required by a bound in `from_generator`\n+  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL |     T: Generator<ResumeTy, Yield = ()>,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `from_generator`\n+\n+error[E0280]: the requirement `<[static generator@$DIR/async.rs:7:29: 9:2] as Generator<ResumeTy>>::Yield == ()` is not satisfied\n+  --> $DIR/async.rs:7:29\n+   |\n+LL |   async fn foo(x: u32) -> u32 {\n+   |  _____________________________^\n+LL | |     x\n+LL | | }\n+   | |_^\n+   |\n+note: required by a bound in `from_generator`\n+  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL |     T: Generator<ResumeTy, Yield = ()>,\n+   |                            ^^^^^^^^^^ required by this bound in `from_generator`\n+\n+error[E0280]: the requirement `<impl Future<Output = [async output]> as Future>::Output == u32` is not satisfied\n+  --> $DIR/async.rs:7:25\n+   |\n+LL | async fn foo(x: u32) -> u32 {\n+   |                         ^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f6be550283a21876c66f6cc8b8014650a9af9abc", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6ca3885842d5ad282d9631fb4c94a1ba9227434/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ca3885842d5ad282d9631fb4c94a1ba9227434/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=d6ca3885842d5ad282d9631fb4c94a1ba9227434", "patch": "@@ -10,8 +10,8 @@ use regex::Regex;\n \n // A few of those error codes can't be tested but all the others can and *should* be tested!\n const EXEMPTED_FROM_TEST: &[&str] = &[\n-    \"E0279\", \"E0280\", \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0465\", \"E0476\", \"E0514\", \"E0519\",\n-    \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n+    \"E0279\", \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0465\", \"E0476\", \"E0514\", \"E0519\", \"E0523\",\n+    \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n ];\n \n // Some error codes don't have any tests apparently..."}]}