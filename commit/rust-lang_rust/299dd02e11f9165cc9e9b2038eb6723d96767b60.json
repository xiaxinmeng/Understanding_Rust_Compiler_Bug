{"sha": "299dd02e11f9165cc9e9b2038eb6723d96767b60", "node_id": "C_kwDOAAsO6NoAKDI5OWRkMDJlMTFmOTE2NWNjOWU5YjIwMzhlYjY3MjNkOTY3NjdiNjA", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-10T07:29:20Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-10T07:29:20Z"}, "message": "update `hash_stable` for `List<Ty<'tcx>>`", "tree": {"sha": "9658debd8fe5cc0125bfd97d910c013126ee9123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9658debd8fe5cc0125bfd97d910c013126ee9123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/299dd02e11f9165cc9e9b2038eb6723d96767b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/299dd02e11f9165cc9e9b2038eb6723d96767b60", "html_url": "https://github.com/rust-lang/rust/commit/299dd02e11f9165cc9e9b2038eb6723d96767b60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/299dd02e11f9165cc9e9b2038eb6723d96767b60/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01ad0ad653d57a5ccecffb08aff3c5564012f133", "url": "https://api.github.com/repos/rust-lang/rust/commits/01ad0ad653d57a5ccecffb08aff3c5564012f133", "html_url": "https://github.com/rust-lang/rust/commit/01ad0ad653d57a5ccecffb08aff3c5564012f133"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "1dc7083c2a0f0c7aace61adf1b68b9972919d51c", "filename": "compiler/rustc_middle/src/ty/impls_ty.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/299dd02e11f9165cc9e9b2038eb6723d96767b60/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299dd02e11f9165cc9e9b2038eb6723d96767b60/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs?ref=299dd02e11f9165cc9e9b2038eb6723d96767b60", "patch": "@@ -73,18 +73,16 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::subst::GenericArgKin\n             //\n             // In order to make it very unlikely for the sequence of bytes being hashed for\n             // a `GenericArgKind::Type` to be the same as the sequence of bytes being\n-            // hashed for one of the other variants, we hash a `0xFF` byte before hashing\n-            // their discriminant (since the discriminant of `TyKind` is unlikely to ever start\n-            // with 0xFF).\n+            // hashed for one of the other variants, we hash some very high number instead\n+            // of their actual discriminant since `TyKind` should never start with anything\n+            // that high.\n             ty::subst::GenericArgKind::Type(ty) => ty.hash_stable(hcx, hasher),\n             ty::subst::GenericArgKind::Const(ct) => {\n-                0xFFu8.hash_stable(hcx, hasher);\n-                mem::discriminant(self).hash_stable(hcx, hasher);\n+                0xF3u8.hash_stable(hcx, hasher).hash_stable(hcx, hasher);\n                 ct.hash_stable(hcx, hasher);\n             }\n             ty::subst::GenericArgKind::Lifetime(lt) => {\n-                0xFFu8.hash_stable(hcx, hasher);\n-                mem::discriminant(self).hash_stable(hcx, hasher);\n+                0xF5u8.hash_stable(hcx, hasher);\n                 lt.hash_stable(hcx, hasher);\n             }\n         }"}]}