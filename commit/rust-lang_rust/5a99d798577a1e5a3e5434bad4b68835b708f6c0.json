{"sha": "5a99d798577a1e5a3e5434bad4b68835b708f6c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhOTlkNzk4NTc3YTFlNWEzZTU0MzRiYWQ0YjY4ODM1YjcwOGY2YzA=", "commit": {"author": {"name": "Michael Rosenberg", "email": "42micro@gmail.com", "date": "2016-07-13T05:36:09Z"}, "committer": {"name": "Michael Rosenberg", "email": "42micro@gmail.com", "date": "2016-07-13T06:34:10Z"}, "message": "Fixed issue where importing a trait method directly and then calling the method causes a compiler panic", "tree": {"sha": "adf420a801e39bb4cf06fb638975d9e03840e198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adf420a801e39bb4cf06fb638975d9e03840e198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a99d798577a1e5a3e5434bad4b68835b708f6c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a99d798577a1e5a3e5434bad4b68835b708f6c0", "html_url": "https://github.com/rust-lang/rust/commit/5a99d798577a1e5a3e5434bad4b68835b708f6c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a99d798577a1e5a3e5434bad4b68835b708f6c0/comments", "author": null, "committer": null, "parents": [{"sha": "26fd0117f9a5128d39a30ae36efc731042bd1fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/26fd0117f9a5128d39a30ae36efc731042bd1fec", "html_url": "https://github.com/rust-lang/rust/commit/26fd0117f9a5128d39a30ae36efc731042bd1fec"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "681d9ec735b4fd1f491cb6e5e508299be29ff2bd", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5a99d798577a1e5a3e5434bad4b68835b708f6c0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a99d798577a1e5a3e5434bad4b68835b708f6c0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5a99d798577a1e5a3e5434bad4b68835b708f6c0", "patch": "@@ -400,26 +400,30 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         }\n     }\n \n-    /// Resolves an `ImportResolvingError` into the correct enum discriminant\n-    /// and passes that on to `resolve_error`.\n-    fn import_resolving_error(&self, e: ImportResolvingError<'b>) {\n-        // If it's a single failed import then create a \"fake\" import\n-        // resolution for it so that later resolve stages won't complain.\n-        if let SingleImport { target, .. } = e.import_directive.subclass {\n+    // Define a \"dummy\" resolution containing a Def::Err as a placeholder for a\n+    // failed resolution\n+    fn import_dummy_binding(&self, source_module: Module<'b>, directive: &'b ImportDirective<'b>) {\n+        if let SingleImport { target, .. } = directive.subclass {\n             let dummy_binding = self.resolver.arenas.alloc_name_binding(NameBinding {\n                 kind: NameBindingKind::Def(Def::Err),\n                 span: DUMMY_SP,\n                 vis: ty::Visibility::Public,\n             });\n-            let dummy_binding = e.import_directive.import(dummy_binding, None);\n+            let dummy_binding = directive.import(dummy_binding, None);\n \n-            let _ = e.source_module.try_define_child(target, ValueNS, dummy_binding.clone());\n-            let _ = e.source_module.try_define_child(target, TypeNS, dummy_binding);\n+            let _ = source_module.try_define_child(target, ValueNS, dummy_binding.clone());\n+            let _ = source_module.try_define_child(target, TypeNS, dummy_binding);\n         }\n+    }\n \n+    /// Resolves an `ImportResolvingError` into the correct enum discriminant\n+    /// and passes that on to `resolve_error`.\n+    fn import_resolving_error(&self, e: ImportResolvingError<'b>) {\n+        // If the error is a single failed import then create a \"fake\" import\n+        // resolution for it so that later resolve stages won't complain.\n+        self.import_dummy_binding(e.source_module, e.import_directive);\n         let path = import_path_to_string(&e.import_directive.module_path,\n                                          &e.import_directive.subclass);\n-\n         resolve_error(self.resolver,\n                       e.span,\n                       ResolutionError::UnresolvedImport(Some((&path, &e.help))));\n@@ -500,6 +504,10 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 if !binding.is_importable() {\n                     let msg = format!(\"`{}` is not directly importable\", target);\n                     span_err!(self.resolver.session, directive.span, E0253, \"{}\", &msg);\n+                    // Do not import this illegal binding. Import a dummy binding and pretend\n+                    // everything is fine\n+                    self.import_dummy_binding(module_, directive);\n+                    return Success(());\n                 }\n \n                 let privacy_error = if !self.resolver.is_accessible(binding.vis) {"}, {"sha": "75081b10d862ed42a7648d7867f8020a62176c29", "filename": "src/test/compile-fail/import-trait-method.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a99d798577a1e5a3e5434bad4b68835b708f6c0/src%2Ftest%2Fcompile-fail%2Fimport-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a99d798577a1e5a3e5434bad4b68835b708f6c0/src%2Ftest%2Fcompile-fail%2Fimport-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-trait-method.rs?ref=5a99d798577a1e5a3e5434bad4b68835b708f6c0", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn foo();\n+}\n+\n+use Foo::foo; //~ ERROR not directly importable\n+\n+fn main() { foo(); }"}]}