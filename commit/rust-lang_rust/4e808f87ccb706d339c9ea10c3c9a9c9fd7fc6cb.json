{"sha": "4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "node_id": "C_kwDOAAsO6NoAKDRlODA4Zjg3Y2NiNzA2ZDMzOWM5ZWExMGMzYzlhOWM5ZmQ3ZmM2Y2I", "commit": {"author": {"name": "Meziu", "email": "meziu210@icloud.com", "date": "2021-10-19T15:59:59Z"}, "committer": {"name": "Mark Drobnak", "email": "mark.drobnak@gmail.com", "date": "2022-06-14T03:44:39Z"}, "message": "Horizon OS STD support\n\nCo-authored-by: Ian Chamberlain <ian.h.chamberlain@gmail.com>\nCo-authored-by: Mark Drobnak <mark.drobnak@gmail.com>", "tree": {"sha": "fe1be89ab4da7ec631c4c4d7bd6f824d95c29da4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe1be89ab4da7ec631c4c4d7bd6f824d95c29da4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEJn5ZTY8tfNoIJXFiR6Ez87+dA9MFAmKoBCcACgkQR6Ez87+d\nA9O9sgf9Hy6caNNQAzxp30ezNCWdCNO75Z9ZpNYcSbH8Y6e6OCyKLgXpK6UojfsC\nZXEI4/2ATQRFRihwnd8FgIQWfsSVfCk+SBDLGA+kI5VlzmD5rv5gyD3+Ov7ho2pw\n20eQUBPvez2JTe2Kv5QO6FXgwophs/G9PJIKwMA5mumXjsWj7sTv/4xIyOFDzehv\nHCnv8Jtjxs3/4+7E/oUQQzkOiXzrzCwF7mTnXgVBiAGIhOoe5R/awIGHzkno8arW\ndAyXEbnj9Lcuikz+19zRHA0/XIIa0lYonFUnhTyqju0ycapJdaKy0qAGF/34+VlK\nufCOblaReesXpxe6hsN3FRAY6rJpBw==\n=372y\n-----END PGP SIGNATURE-----", "payload": "tree fe1be89ab4da7ec631c4c4d7bd6f824d95c29da4\nparent 3bdec3c8abdc48e46715d7b14b764af28da1cee3\nauthor Meziu <meziu210@icloud.com> 1634659199 +0200\ncommitter Mark Drobnak <mark.drobnak@gmail.com> 1655178279 -0700\n\nHorizon OS STD support\n\nCo-authored-by: Ian Chamberlain <ian.h.chamberlain@gmail.com>\nCo-authored-by: Mark Drobnak <mark.drobnak@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "html_url": "https://github.com/rust-lang/rust/commit/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/comments", "author": {"login": "Meziu", "id": 55318903, "node_id": "MDQ6VXNlcjU1MzE4OTAz", "avatar_url": "https://avatars.githubusercontent.com/u/55318903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Meziu", "html_url": "https://github.com/Meziu", "followers_url": "https://api.github.com/users/Meziu/followers", "following_url": "https://api.github.com/users/Meziu/following{/other_user}", "gists_url": "https://api.github.com/users/Meziu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Meziu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Meziu/subscriptions", "organizations_url": "https://api.github.com/users/Meziu/orgs", "repos_url": "https://api.github.com/users/Meziu/repos", "events_url": "https://api.github.com/users/Meziu/events{/privacy}", "received_events_url": "https://api.github.com/users/Meziu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AzureMarker", "id": 4417660, "node_id": "MDQ6VXNlcjQ0MTc2NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4417660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AzureMarker", "html_url": "https://github.com/AzureMarker", "followers_url": "https://api.github.com/users/AzureMarker/followers", "following_url": "https://api.github.com/users/AzureMarker/following{/other_user}", "gists_url": "https://api.github.com/users/AzureMarker/gists{/gist_id}", "starred_url": "https://api.github.com/users/AzureMarker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AzureMarker/subscriptions", "organizations_url": "https://api.github.com/users/AzureMarker/orgs", "repos_url": "https://api.github.com/users/AzureMarker/repos", "events_url": "https://api.github.com/users/AzureMarker/events{/privacy}", "received_events_url": "https://api.github.com/users/AzureMarker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bdec3c8abdc48e46715d7b14b764af28da1cee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bdec3c8abdc48e46715d7b14b764af28da1cee3", "html_url": "https://github.com/rust-lang/rust/commit/3bdec3c8abdc48e46715d7b14b764af28da1cee3"}], "stats": {"total": 355, "additions": 288, "deletions": 67}, "files": [{"sha": "93cdf121fbe0f742a7c7270c2f5e6c36f1f7de01", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -143,7 +143,8 @@ mod c_char_definition {\n                     target_arch = \"powerpc\"\n                 )\n             ),\n-            all(target_os = \"fuchsia\", target_arch = \"aarch64\")\n+            all(target_os = \"fuchsia\", target_arch = \"aarch64\"),\n+            target_os = \"horizon\"\n         ))] {\n             pub type c_char = u8;\n             pub type NonZero_c_char = crate::num::NonZeroU8;"}, {"sha": "bffbe802fd01e864ca2e3c476c85f04abc6a1421", "filename": "library/std/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -29,6 +29,7 @@ fn main() {\n         || target.contains(\"asmjs\")\n         || target.contains(\"espidf\")\n         || target.contains(\"solid\")\n+        || target.contains(\"nintendo-3ds\")\n     {\n         // These platforms don't have any special requirements.\n     } else {"}, {"sha": "a5a06764a4dd8aef4e0057850635e4fdd4df60f8", "filename": "library/std/src/os/horizon/fs.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Ffs.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -0,0 +1,95 @@\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n+\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: crate::fs::Metadata\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        0\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        0\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        0\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "326d0ae9cb96d2ee564e83e11a8d96aa2fe871f1", "filename": "library/std/src/os/horizon/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Fmod.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -0,0 +1,6 @@\n+//! Definitions for Horizon OS\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod fs;\n+pub(crate) mod raw;"}, {"sha": "929fa7db1f964128c611763cfa82c0b39606d944", "filename": "library/std/src/os/horizon/raw.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Fraw.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -0,0 +1,70 @@\n+//! Horizon OS raw type definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![deprecated(\n+    since = \"1.8.0\",\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n+)]\n+#![allow(deprecated)]\n+\n+use crate::os::raw::c_long;\n+use crate::os::unix::raw::{gid_t, uid_t};\n+\n+#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n+pub type pthread_t = libc::pthread_t;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = libc::blkcnt_t;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = libc::blksize_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = libc::dev_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = libc::ino_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = libc::mode_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = libc::nlink_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = libc::off_t;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = libc::time_t;\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_spare4: [c_long; 2usize],\n+}"}, {"sha": "a1df72a8a0480e7094e70ae7a9b0f7d94e320a6f", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -123,6 +123,8 @@ pub mod freebsd;\n pub mod fuchsia;\n #[cfg(target_os = \"haiku\")]\n pub mod haiku;\n+#[cfg(target_os = \"horizon\")]\n+pub mod horizon;\n #[cfg(target_os = \"illumos\")]\n pub mod illumos;\n #[cfg(target_os = \"ios\")]"}, {"sha": "cef546487f327e8edb18653a1a1634ea075d34de", "filename": "library/std/src/os/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -51,6 +51,8 @@ mod platform {\n     pub use crate::os::fuchsia::*;\n     #[cfg(target_os = \"haiku\")]\n     pub use crate::os::haiku::*;\n+    #[cfg(target_os = \"horizon\")]\n+    pub use crate::os::horizon::*;\n     #[cfg(target_os = \"illumos\")]\n     pub use crate::os::illumos::*;\n     #[cfg(target_os = \"ios\")]"}, {"sha": "64fd6497463a8e83cafb9afecb8f468f1072c01f", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -24,26 +24,29 @@ pub trait CommandExt: Sealed {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn uid(\n         &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] id: u32,\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] id: u16,\n+        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n+        id: u32,\n+        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))] id: u16,\n     ) -> &mut process::Command;\n \n     /// Similar to `uid`, but sets the group ID of the child process. This has\n     /// the same semantics as the `uid` field.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn gid(\n         &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] id: u32,\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] id: u16,\n+        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n+        id: u32,\n+        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))] id: u16,\n     ) -> &mut process::Command;\n \n     /// Sets the supplementary group IDs for the calling process. Translates to\n     /// a `setgroups` call in the child process.\n     #[unstable(feature = \"setgroups\", issue = \"90747\")]\n     fn groups(\n         &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] groups: &[u32],\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] groups: &[u16],\n+        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))] groups: &[u32],\n+        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))]\n+        groups: &[u16],\n     ) -> &mut process::Command;\n \n     /// Schedules a closure to be run just before the `exec` function is\n@@ -160,26 +163,29 @@ pub trait CommandExt: Sealed {\n impl CommandExt for process::Command {\n     fn uid(\n         &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] id: u32,\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] id: u16,\n+        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n+        id: u32,\n+        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))] id: u16,\n     ) -> &mut process::Command {\n         self.as_inner_mut().uid(id);\n         self\n     }\n \n     fn gid(\n         &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] id: u32,\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] id: u16,\n+        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n+        id: u32,\n+        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))] id: u16,\n     ) -> &mut process::Command {\n         self.as_inner_mut().gid(id);\n         self\n     }\n \n     fn groups(\n         &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] groups: &[u32],\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] groups: &[u16],\n+        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))] groups: &[u32],\n+        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))]\n+        groups: &[u16],\n     ) -> &mut process::Command {\n         self.as_inner_mut().groups(groups);\n         self"}, {"sha": "9d6567c9fb471f381b5c95aab6ea5efedb014775", "filename": "library/std/src/sys/unix/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -58,7 +58,8 @@ cfg_if::cfg_if! {\n         target_os = \"illumos\",\n         target_os = \"redox\",\n         target_os = \"solaris\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     ))] {\n         #[inline]\n         unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {"}, {"sha": "4d8391656a4dd6f1bd601875d067c1a5faa46b28", "filename": "library/std/src/sys/unix/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -119,6 +119,17 @@ pub mod os {\n     pub const EXE_EXTENSION: &str = \"\";\n }\n \n+#[cfg(target_os = \"horizon\")]\n+pub mod os {\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"horizon\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \".elf\";\n+    pub const EXE_EXTENSION: &str = \"elf\";\n+}\n+\n #[cfg(all(target_os = \"emscripten\", target_arch = \"asmjs\"))]\n pub mod os {\n     pub const FAMILY: &str = \"unix\";"}, {"sha": "137ca3a763368dd92ab9204c39c534aed3a59754", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -9,8 +9,6 @@ use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, Owned\n use crate::sys::cvt;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n-use libc::{c_int, c_void};\n-\n #[cfg(any(\n     target_os = \"android\",\n     target_os = \"linux\",\n@@ -38,7 +36,7 @@ pub struct FileDesc(OwnedFd);\n // larger than or equal to INT_MAX. To handle both of these the read\n // size is capped on both platforms.\n #[cfg(target_os = \"macos\")]\n-const READ_LIMIT: usize = c_int::MAX as usize - 1;\n+const READ_LIMIT: usize = libc::c_int::MAX as usize - 1;\n #[cfg(not(target_os = \"macos\"))]\n const READ_LIMIT: usize = libc::ssize_t::MAX as usize;\n \n@@ -69,6 +67,7 @@ const fn max_iov() -> usize {\n     target_os = \"macos\",\n     target_os = \"netbsd\",\n     target_os = \"openbsd\",\n+    target_os = \"horizon\"\n )))]\n const fn max_iov() -> usize {\n     16 // The minimum value required by POSIX.\n@@ -79,33 +78,33 @@ impl FileDesc {\n         let ret = cvt(unsafe {\n             libc::read(\n                 self.as_raw_fd(),\n-                buf.as_mut_ptr() as *mut c_void,\n+                buf.as_mut_ptr() as *mut libc::c_void,\n                 cmp::min(buf.len(), READ_LIMIT),\n             )\n         })?;\n         Ok(ret as usize)\n     }\n \n-    #[cfg(not(target_os = \"espidf\"))]\n+    #[cfg(not(any(target_os = \"espidf\", target_os = \"horizon\")))]\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n             libc::readv(\n                 self.as_raw_fd(),\n                 bufs.as_ptr() as *const libc::iovec,\n-                cmp::min(bufs.len(), max_iov()) as c_int,\n+                cmp::min(bufs.len(), max_iov()) as libc::c_int,\n             )\n         })?;\n         Ok(ret as usize)\n     }\n \n-    #[cfg(target_os = \"espidf\")]\n+    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         return crate::io::default_read_vectored(|b| self.read(b), bufs);\n     }\n \n     #[inline]\n     pub fn is_read_vectored(&self) -> bool {\n-        cfg!(not(target_os = \"espidf\"))\n+        cfg!(not(any(target_os = \"espidf\", target_os = \"horizon\")))\n     }\n \n     pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n@@ -122,7 +121,7 @@ impl FileDesc {\n         unsafe {\n             cvt(pread64(\n                 self.as_raw_fd(),\n-                buf.as_mut_ptr() as *mut c_void,\n+                buf.as_mut_ptr() as *mut libc::c_void,\n                 cmp::min(buf.len(), READ_LIMIT),\n                 offset as off64_t,\n             ))\n@@ -134,7 +133,7 @@ impl FileDesc {\n         let ret = cvt(unsafe {\n             libc::read(\n                 self.as_raw_fd(),\n-                buf.unfilled_mut().as_mut_ptr() as *mut c_void,\n+                buf.unfilled_mut().as_mut_ptr() as *mut libc::c_void,\n                 cmp::min(buf.remaining(), READ_LIMIT),\n             )\n         })?;\n@@ -151,33 +150,33 @@ impl FileDesc {\n         let ret = cvt(unsafe {\n             libc::write(\n                 self.as_raw_fd(),\n-                buf.as_ptr() as *const c_void,\n+                buf.as_ptr() as *const libc::c_void,\n                 cmp::min(buf.len(), READ_LIMIT),\n             )\n         })?;\n         Ok(ret as usize)\n     }\n \n-    #[cfg(not(target_os = \"espidf\"))]\n+    #[cfg(not(any(target_os = \"espidf\", target_os = \"horizon\")))]\n     pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n             libc::writev(\n                 self.as_raw_fd(),\n                 bufs.as_ptr() as *const libc::iovec,\n-                cmp::min(bufs.len(), max_iov()) as c_int,\n+                cmp::min(bufs.len(), max_iov()) as libc::c_int,\n             )\n         })?;\n         Ok(ret as usize)\n     }\n \n-    #[cfg(target_os = \"espidf\")]\n+    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         return crate::io::default_write_vectored(|b| self.write(b), bufs);\n     }\n \n     #[inline]\n     pub fn is_write_vectored(&self) -> bool {\n-        cfg!(not(target_os = \"espidf\"))\n+        cfg!(not(any(target_os = \"espidf\", target_os = \"horizon\")))\n     }\n \n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n@@ -189,7 +188,7 @@ impl FileDesc {\n         unsafe {\n             cvt(pwrite64(\n                 self.as_raw_fd(),\n-                buf.as_ptr() as *const c_void,\n+                buf.as_ptr() as *const libc::c_void,\n                 cmp::min(buf.len(), READ_LIMIT),\n                 offset as off64_t,\n             ))\n@@ -221,7 +220,7 @@ impl FileDesc {\n         }\n     }\n     #[cfg(any(\n-        all(target_env = \"newlib\", not(target_os = \"espidf\")),\n+        all(target_env = \"newlib\", not(any(target_os = \"espidf\", target_os = \"horizon\"))),\n         target_os = \"solaris\",\n         target_os = \"illumos\",\n         target_os = \"emscripten\",\n@@ -242,17 +241,17 @@ impl FileDesc {\n             Ok(())\n         }\n     }\n-    #[cfg(target_os = \"espidf\")]\n+    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     pub fn set_cloexec(&self) -> io::Result<()> {\n-        // FD_CLOEXEC is not supported in ESP-IDF but there's no need to,\n-        // because ESP-IDF does not support spawning processes either.\n+        // FD_CLOEXEC is not supported in ESP-IDF and Horizon OS but there's no need to,\n+        // because neither supports spawning processes.\n         Ok(())\n     }\n \n     #[cfg(target_os = \"linux\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         unsafe {\n-            let v = nonblocking as c_int;\n+            let v = nonblocking as libc::c_int;\n             cvt(libc::ioctl(self.as_raw_fd(), libc::FIONBIO, &v))?;\n             Ok(())\n         }"}, {"sha": "4dda3c3f8133d7a5c498034d2b7f5b2c5e5d4853", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -395,7 +395,7 @@ impl FileAttr {\n \n #[cfg(not(target_os = \"netbsd\"))]\n impl FileAttr {\n-    #[cfg(all(not(target_os = \"vxworks\"), not(target_os = \"espidf\")))]\n+    #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n     pub fn modified(&self) -> io::Result<SystemTime> {\n         #[cfg(target_pointer_width = \"32\")]\n         cfg_has_statx! {\n@@ -412,7 +412,12 @@ impl FileAttr {\n         Ok(SystemTime::new(self.stat.st_mtime as i64, 0))\n     }\n \n-    #[cfg(all(not(target_os = \"vxworks\"), not(target_os = \"espidf\")))]\n+    #[cfg(target_os = \"horizon\")]\n+    pub fn modified(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::from(self.stat.st_mtim))\n+    }\n+\n+    #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n     pub fn accessed(&self) -> io::Result<SystemTime> {\n         #[cfg(target_pointer_width = \"32\")]\n         cfg_has_statx! {\n@@ -424,7 +429,7 @@ impl FileAttr {\n         Ok(SystemTime::new(self.stat.st_atime as i64, self.stat.st_atime_nsec as i64))\n     }\n \n-    #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))]\n+    #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))]\n     pub fn accessed(&self) -> io::Result<SystemTime> {\n         Ok(SystemTime::new(self.stat.st_atime as i64, 0))\n     }\n@@ -707,7 +712,8 @@ impl DirEntry {\n         target_os = \"fuchsia\",\n         target_os = \"redox\",\n         target_os = \"vxworks\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     ))]\n     pub fn ino(&self) -> u64 {\n         self.entry.d_ino as u64\n@@ -1251,7 +1257,7 @@ pub fn link(original: &Path, link: &Path) -> io::Result<()> {\n     let original = cstr(original)?;\n     let link = cstr(link)?;\n     cfg_if::cfg_if! {\n-        if #[cfg(any(target_os = \"vxworks\", target_os = \"redox\", target_os = \"android\", target_os = \"espidf\"))] {\n+        if #[cfg(any(target_os = \"vxworks\", target_os = \"redox\", target_os = \"android\", target_os = \"espidf\", target_os = \"horizon\"))] {\n             // VxWorks, Redox and ESP-IDF lack `linkat`, so use `link` instead. POSIX leaves\n             // it implementation-defined whether `link` follows symlinks, so rely on the\n             // `symlink_hard_link` test in library/std/src/fs/tests.rs to check the behavior.\n@@ -1549,14 +1555,14 @@ pub fn chroot(dir: &Path) -> io::Result<()> {\n \n pub use remove_dir_impl::remove_dir_all;\n \n-// Fallback for REDOX and ESP-IDF (and Miri)\n-#[cfg(any(target_os = \"redox\", target_os = \"espidf\", miri))]\n+// Fallback for REDOX, ESP-ID, Horizon, and Miri\n+#[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\", miri))]\n mod remove_dir_impl {\n     pub use crate::sys_common::fs::remove_dir_all;\n }\n \n // Modern implementation using openat(), unlinkat() and fdopendir()\n-#[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", miri)))]\n+#[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\", miri)))]\n mod remove_dir_impl {\n     use super::{cstr, lstat, Dir, DirEntry, InnerReadDir, ReadDir};\n     use crate::ffi::CStr;"}, {"sha": "b4e480be80e9ed580bd3a2937367f42f2b881fa2", "filename": "library/std/src/sys/unix/locks/pthread_condvar.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -16,7 +16,11 @@ const TIMESPEC_MAX: libc::timespec =\n     libc::timespec { tv_sec: <libc::time_t>::MAX, tv_nsec: 1_000_000_000 - 1 };\n \n fn saturating_cast_to_time_t(value: u64) -> libc::time_t {\n-    if value > <libc::time_t>::MAX as u64 { <libc::time_t>::MAX } else { value as libc::time_t }\n+    if value > <libc::time_t>::MAX as u64 {\n+        <libc::time_t>::MAX\n+    } else {\n+        value as libc::time_t\n+    }\n }\n \n impl LazyInit for Condvar {\n@@ -47,7 +51,7 @@ impl Condvar {\n     // So on that platform, init() should always be called\n     // Moreover, that platform does not have pthread_condattr_setclock support,\n     // hence that initialization should be skipped as well\n-    #[cfg(target_os = \"espidf\")]\n+    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     unsafe fn init(&mut self) {\n         let r = libc::pthread_cond_init(self.inner.get(), crate::ptr::null());\n         assert_eq!(r, 0);\n@@ -59,7 +63,8 @@ impl Condvar {\n         target_os = \"l4re\",\n         target_os = \"android\",\n         target_os = \"redox\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     )))]\n     unsafe fn init(&mut self) {\n         use crate::mem::MaybeUninit;"}, {"sha": "000eaff6a022a3302987b89fdd418ec0240ed7f6", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -43,10 +43,10 @@ pub mod thread_local_key;\n pub mod thread_parker;\n pub mod time;\n \n-#[cfg(target_os = \"espidf\")]\n+#[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n pub fn init(argc: isize, argv: *const *const u8) {}\n \n-#[cfg(not(target_os = \"espidf\"))]\n+#[cfg(not(any(target_os = \"espidf\", target_os = \"horizon\")))]\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(argc: isize, argv: *const *const u8) {\n@@ -344,7 +344,7 @@ cfg_if::cfg_if! {\n     }\n }\n \n-#[cfg(target_os = \"espidf\")]\n+#[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n mod unsupported {\n     use crate::io;\n "}, {"sha": "7252ad321844bd3b72c3e033cbe87b093f4c7e2e", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -446,7 +446,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     path.canonicalize()\n }\n \n-#[cfg(target_os = \"espidf\")]\n+#[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     super::unsupported::unsupported()\n }\n@@ -601,7 +601,8 @@ pub fn home_dir() -> Option<PathBuf> {\n         target_os = \"emscripten\",\n         target_os = \"redox\",\n         target_os = \"vxworks\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     ))]\n     unsafe fn fallback() -> Option<OsString> {\n         None\n@@ -612,7 +613,8 @@ pub fn home_dir() -> Option<PathBuf> {\n         target_os = \"emscripten\",\n         target_os = \"redox\",\n         target_os = \"vxworks\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     )))]\n     unsafe fn fallback() -> Option<OsString> {\n         let amt = match libc::sysconf(libc::_SC_GETPW_R_SIZE_MAX) {"}, {"sha": "3701510f3a4283aef35351c2b15683ae09c56de8", "filename": "library/std/src/sys/unix/process/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -3,6 +3,7 @@ pub use self::process_inner::{ExitStatus, ExitStatusError, Process};\n pub use crate::ffi::OsString as EnvKey;\n pub use crate::sys_common::process::CommandEnvs;\n \n+#[cfg_attr(any(target_os = \"espidf\", target_os = \"horizon\"), allow(unused))]\n mod process_common;\n \n cfg_if::cfg_if! {\n@@ -13,7 +14,7 @@ cfg_if::cfg_if! {\n     } else if #[cfg(target_os = \"vxworks\")] {\n         #[path = \"process_vxworks.rs\"]\n         mod process_inner;\n-    } else if #[cfg(target_os = \"espidf\")] {\n+    } else if #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))] {\n         #[path = \"process_unsupported.rs\"]\n         mod process_inner;\n     } else {"}, {"sha": "72f9f3f9ca74c0371427c67df9a337f1fe603db4", "filename": "library/std/src/sys/unix/process/process_unsupported.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -1,10 +1,6 @@\n use crate::fmt;\n use crate::io;\n-use crate::io::ErrorKind;\n use crate::num::NonZeroI32;\n-use crate::sys;\n-use crate::sys::cvt;\n-use crate::sys::pipe::AnonPipe;\n use crate::sys::process::process_common::*;\n use crate::sys::unix::unsupported::*;\n use core::ffi::NonZero_c_int;\n@@ -18,13 +14,13 @@ use libc::{c_int, pid_t};\n impl Command {\n     pub fn spawn(\n         &mut self,\n-        default: Stdio,\n-        needs_stdin: bool,\n+        _default: Stdio,\n+        _needs_stdin: bool,\n     ) -> io::Result<(Process, StdioPipes)> {\n         unsupported()\n     }\n \n-    pub fn exec(&mut self, default: Stdio) -> io::Error {\n+    pub fn exec(&mut self, _default: Stdio) -> io::Error {\n         unsupported_err()\n     }\n }\n@@ -34,7 +30,7 @@ impl Command {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct Process {\n-    handle: pid_t,\n+    _handle: pid_t,\n }\n \n impl Process {\n@@ -59,6 +55,7 @@ impl Process {\n pub struct ExitStatus(c_int);\n \n impl ExitStatus {\n+    #[cfg_attr(target_os = \"horizon\", allow(unused))]\n     pub fn success(&self) -> bool {\n         self.code() == Some(0)\n     }"}, {"sha": "56d01074c20edc69626e012367107b4d2544e33f", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -59,17 +59,27 @@ mod imp {\n         unsafe { getrandom(buf.as_mut_ptr().cast(), buf.len(), libc::GRND_NONBLOCK) }\n     }\n \n-    #[cfg(target_os = \"espidf\")]\n+    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     fn getrandom(buf: &mut [u8]) -> libc::ssize_t {\n         unsafe { libc::getrandom(buf.as_mut_ptr().cast(), buf.len(), 0) }\n     }\n \n-    #[cfg(not(any(target_os = \"linux\", target_os = \"android\", target_os = \"espidf\")))]\n+    #[cfg(not(any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n+    )))]\n     fn getrandom_fill_bytes(_buf: &mut [u8]) -> bool {\n         false\n     }\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"espidf\"))]\n+    #[cfg(any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n+    ))]\n     fn getrandom_fill_bytes(v: &mut [u8]) -> bool {\n         use crate::sync::atomic::{AtomicBool, Ordering};\n         use crate::sys::os::errno;"}, {"sha": "76278ae30f1af650475c0a0906f0e97f6e742600", "filename": "library/std/src/sys/unix/thread_parker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -115,7 +115,7 @@ impl Parker {\n                 target_os = \"redox\"\n             ))] {\n                 addr_of_mut!((*parker).cvar).write(UnsafeCell::new(libc::PTHREAD_COND_INITIALIZER));\n-            } else if #[cfg(target_os = \"espidf\")] {\n+            } else if #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))] {\n                 let r = libc::pthread_cond_init(addr_of_mut!((*parker).cvar).cast(), crate::ptr::null());\n                 assert_eq!(r, 0);\n             } else {"}, {"sha": "d114af49d26c7154537ea0d53f9ca8041297308d", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -18,6 +18,7 @@ pub(in crate::sys::unix) struct Timespec {\n }\n \n impl SystemTime {\n+    #[cfg_attr(target_os = \"horizon\", allow(unused))]\n     pub fn new(tv_sec: i64, tv_nsec: i64) -> SystemTime {\n         SystemTime { t: Timespec::new(tv_sec, tv_nsec) }\n     }\n@@ -303,9 +304,9 @@ mod inner {\n         }\n     }\n \n-    #[cfg(not(any(target_os = \"dragonfly\", target_os = \"espidf\")))]\n+    #[cfg(not(any(target_os = \"dragonfly\", target_os = \"espidf\", target_os = \"horizon\")))]\n     pub type clock_t = libc::c_int;\n-    #[cfg(any(target_os = \"dragonfly\", target_os = \"espidf\"))]\n+    #[cfg(any(target_os = \"dragonfly\", target_os = \"espidf\", target_os = \"horizon\"))]\n     pub type clock_t = libc::c_ulong;\n \n     impl Timespec {"}, {"sha": "7498e61d3d00127e8b5747b5406d0c627b52e629", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=4e808f87ccb706d339c9ea10c3c9a9c9fd7fc6cb", "patch": "@@ -399,7 +399,12 @@ impl TcpListener {\n         cvt(unsafe { c::bind(sock.as_raw(), addrp, len as _) })?;\n \n         // Start listening\n+        #[cfg(not(target_os = \"horizon\"))]\n         cvt(unsafe { c::listen(sock.as_raw(), 128) })?;\n+        // 40 is the maximum for Horizon OS\n+        #[cfg(target_os = \"horizon\")]\n+        cvt(unsafe { c::listen(sock.as_raw(), 40) })?;\n+\n         Ok(TcpListener { inner: sock })\n     }\n "}]}