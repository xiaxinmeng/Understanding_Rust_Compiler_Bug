{"sha": "22379bd9db7e499e56d0caa8c008e5241d5dd481", "node_id": "C_kwDOAAsO6NoAKDIyMzc5YmQ5ZGI3ZTQ5OWU1NmQwY2FhOGMwMDhlNTI0MWQ1ZGQ0ODE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-26T06:22:13Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-28T20:35:14Z"}, "message": "Use `&'hir Mod` everywhere.\n\nFor consistency, and because it makes HIR measurement simpler and more\naccurate.", "tree": {"sha": "94c697d875208486e27e4cbdecb3200fe72a6dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94c697d875208486e27e4cbdecb3200fe72a6dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22379bd9db7e499e56d0caa8c008e5241d5dd481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22379bd9db7e499e56d0caa8c008e5241d5dd481", "html_url": "https://github.com/rust-lang/rust/commit/22379bd9db7e499e56d0caa8c008e5241d5dd481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22379bd9db7e499e56d0caa8c008e5241d5dd481/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a847d5e4cec425059fe22e04094bcc9ba3a72309", "url": "https://api.github.com/repos/rust-lang/rust/commits/a847d5e4cec425059fe22e04094bcc9ba3a72309", "html_url": "https://github.com/rust-lang/rust/commit/a847d5e4cec425059fe22e04094bcc9ba3a72309"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "269091c89e9fb4ff141c388af0421b49b3da326d", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22379bd9db7e499e56d0caa8c008e5241d5dd481/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22379bd9db7e499e56d0caa8c008e5241d5dd481/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=22379bd9db7e499e56d0caa8c008e5241d5dd481", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         self.with_lctx(CRATE_NODE_ID, |lctx| {\n             let module = lctx.lower_mod(&c.items, &c.spans);\n             lctx.lower_attrs(hir::CRATE_HIR_ID, &c.attrs);\n-            hir::OwnerNode::Crate(lctx.arena.alloc(module))\n+            hir::OwnerNode::Crate(module)\n         })\n     }\n \n@@ -158,14 +158,18 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n }\n \n impl<'hir> LoweringContext<'_, 'hir> {\n-    pub(super) fn lower_mod(&mut self, items: &[P<Item>], spans: &ModSpans) -> hir::Mod<'hir> {\n-        hir::Mod {\n+    pub(super) fn lower_mod(\n+        &mut self,\n+        items: &[P<Item>],\n+        spans: &ModSpans,\n+    ) -> &'hir hir::Mod<'hir> {\n+        self.arena.alloc(hir::Mod {\n             spans: hir::ModSpans {\n                 inner_span: self.lower_span(spans.inner_span),\n                 inject_use_span: self.lower_span(spans.inject_use_span),\n             },\n             item_ids: self.arena.alloc_from_iter(items.iter().flat_map(|x| self.lower_item_ref(x))),\n-        }\n+        })\n     }\n \n     pub(super) fn lower_item_ref(&mut self, i: &Item) -> SmallVec<[hir::ItemId; 1]> {"}, {"sha": "69ba0aa84dc35adf48409b64b088377950865e7c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22379bd9db7e499e56d0caa8c008e5241d5dd481/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22379bd9db7e499e56d0caa8c008e5241d5dd481/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=22379bd9db7e499e56d0caa8c008e5241d5dd481", "patch": "@@ -2991,7 +2991,7 @@ pub enum ItemKind<'hir> {\n     /// A MBE macro definition (`macro_rules!` or `macro`).\n     Macro(ast::MacroDef, MacroKind),\n     /// A module.\n-    Mod(Mod<'hir>),\n+    Mod(&'hir Mod<'hir>),\n     /// An external module, e.g. `extern { .. }`.\n     ForeignMod { abi: Abi, items: &'hir [ForeignItemRef] },\n     /// Module-level inline assembly (from `global_asm!`)."}]}