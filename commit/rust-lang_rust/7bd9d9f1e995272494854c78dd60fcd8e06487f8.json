{"sha": "7bd9d9f1e995272494854c78dd60fcd8e06487f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZDlkOWYxZTk5NTI3MjQ5NDg1NGM3OGRkNjBmY2Q4ZTA2NDg3Zjg=", "commit": {"author": {"name": "Soveu", "email": "marx.tomasz@gmail.com", "date": "2021-04-30T18:51:30Z"}, "committer": {"name": "Soveu", "email": "marx.tomasz@gmail.com", "date": "2021-04-30T18:51:30Z"}, "message": "str::is_char_boundary - few comments", "tree": {"sha": "04a7babba9c9b7a2809dd15052e3adad110c8c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04a7babba9c9b7a2809dd15052e3adad110c8c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bd9d9f1e995272494854c78dd60fcd8e06487f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd9d9f1e995272494854c78dd60fcd8e06487f8", "html_url": "https://github.com/rust-lang/rust/commit/7bd9d9f1e995272494854c78dd60fcd8e06487f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bd9d9f1e995272494854c78dd60fcd8e06487f8/comments", "author": {"login": "Soveu", "id": 34382234, "node_id": "MDQ6VXNlcjM0MzgyMjM0", "avatar_url": "https://avatars.githubusercontent.com/u/34382234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Soveu", "html_url": "https://github.com/Soveu", "followers_url": "https://api.github.com/users/Soveu/followers", "following_url": "https://api.github.com/users/Soveu/following{/other_user}", "gists_url": "https://api.github.com/users/Soveu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Soveu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Soveu/subscriptions", "organizations_url": "https://api.github.com/users/Soveu/orgs", "repos_url": "https://api.github.com/users/Soveu/repos", "events_url": "https://api.github.com/users/Soveu/events{/privacy}", "received_events_url": "https://api.github.com/users/Soveu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Soveu", "id": 34382234, "node_id": "MDQ6VXNlcjM0MzgyMjM0", "avatar_url": "https://avatars.githubusercontent.com/u/34382234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Soveu", "html_url": "https://github.com/Soveu", "followers_url": "https://api.github.com/users/Soveu/followers", "following_url": "https://api.github.com/users/Soveu/following{/other_user}", "gists_url": "https://api.github.com/users/Soveu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Soveu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Soveu/subscriptions", "organizations_url": "https://api.github.com/users/Soveu/orgs", "repos_url": "https://api.github.com/users/Soveu/repos", "events_url": "https://api.github.com/users/Soveu/events{/privacy}", "received_events_url": "https://api.github.com/users/Soveu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ea0410f090ae06d18f5535e62e888e49a4f21a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea0410f090ae06d18f5535e62e888e49a4f21a7", "html_url": "https://github.com/rust-lang/rust/commit/2ea0410f090ae06d18f5535e62e888e49a4f21a7"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "065acd3f38bb21ad37c3fd337a8536ae160708f5", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7bd9d9f1e995272494854c78dd60fcd8e06487f8/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd9d9f1e995272494854c78dd60fcd8e06487f8/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=7bd9d9f1e995272494854c78dd60fcd8e06487f8", "patch": "@@ -192,14 +192,26 @@ impl str {\n     #[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]\n     #[inline]\n     pub fn is_char_boundary(&self, index: usize) -> bool {\n-        // 0 and len are always ok.\n+        // 0 is always ok.\n         // Test for 0 explicitly so that it can optimize out the check\n         // easily and skip reading string data for that case.\n+        // Note that optimizing `self.get(..index)` relies on this.\n         if index == 0 {\n             return true;\n         }\n+\n         match self.as_bytes().get(index) {\n+            // For `None` we have two options:\n+            //\n+            // - index == self.len()\n+            //   Empty strings are valid, so return true\n+            // - index > self.len()\n+            //   In this case return false\n+            //\n+            // The check is placed exactly here, because it improves generated\n+            // code on higher opt-levels. See PR #84751 for more details.\n             None => index == self.len(),\n+\n             // This is bit magic equivalent to: b < 128 || b >= 192\n             Some(&b) => (b as i8) >= -0x40,\n         }"}]}