{"sha": "d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZTExODFiMWNhYmI0NTM4OGIwMTQxOTc0YjAxY2EzZWMzNmM4Yjk=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-06-01T11:38:36Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-06-12T17:27:00Z"}, "message": "Use a single lifetime for MIR construction", "tree": {"sha": "108aad2b595805bb692f90380e1ca68c9d830b1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/108aad2b595805bb692f90380e1ca68c9d830b1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "html_url": "https://github.com/rust-lang/rust/commit/d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ddd1615419be89828fb5628e3c14af86c08b01", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ddd1615419be89828fb5628e3c14af86c08b01", "html_url": "https://github.com/rust-lang/rust/commit/24ddd1615419be89828fb5628e3c14af86c08b01"}], "stats": {"total": 343, "additions": 147, "deletions": 196}, "files": [{"sha": "538b76be7b0457d6492d17c9192b05ea4c0e51ee", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -465,7 +465,7 @@ impl<'tcx> fmt::Display for FixupError<'tcx> {\n /// Helper type of a temporary returned by `tcx.infer_ctxt()`.\n /// Necessary because we can't write the following bound:\n /// `F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(InferCtxt<'b, 'gcx, 'tcx>)`.\n-pub struct InferCtxtBuilder<'gcx, 'tcx> {\n+pub struct InferCtxtBuilder<'gcx: 'tcx, 'tcx> {\n     global_tcx: TyCtxt<'gcx, 'gcx>,\n     fresh_tables: Option<RefCell<ty::TypeckTables<'tcx>>>,\n }\n@@ -510,7 +510,7 @@ impl<'gcx, 'tcx> InferCtxtBuilder<'gcx, 'tcx> {\n         })\n     }\n \n-    pub fn enter<R>(&'tcx mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'gcx, 'tcx>) -> R) -> R {\n+    pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'gcx, 'tcx>) -> R) -> R {\n         let InferCtxtBuilder {\n             global_tcx,\n             ref fresh_tables,"}, {"sha": "749cd6fc8bf1ec1e436bda86ecd5c03de2bc11d9", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -6,7 +6,7 @@ use rustc::mir::*;\n use rustc::hir;\n use syntax_pos::Span;\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn ast_block(&mut self,\n                      destination: &Place<'tcx>,\n                      block: BasicBlock,"}, {"sha": "5197981a85cb8e0665f56dc321cd7e0a63c80fa1", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -5,7 +5,7 @@ use crate::hair::*;\n use rustc::mir::*;\n use rustc::ty::CanonicalUserTypeAnnotation;\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr`, yielding a compile-time constant. Assumes that\n     /// `expr` is a valid compile-time constant!\n     pub fn as_constant<M>(&mut self, expr: M) -> Constant<'tcx>"}, {"sha": "dd78e7e869a8f1acd60fa70335838f5417d358cd", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -6,7 +6,7 @@ use crate::hair::*;\n use rustc::middle::region;\n use rustc::mir::*;\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Returns an operand suitable for use until the end of the current\n     /// scope expression.\n     ///"}, {"sha": "51808ef7ebdeedb5da0cfddb3dce090dc89ac026", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -10,7 +10,7 @@ use rustc::ty::{CanonicalUserTypeAnnotation, Variance};\n \n use rustc_data_structures::indexed_vec::Idx;\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr`, yielding a place that we can move from etc.\n     pub fn as_place<M>(&mut self, block: BasicBlock, expr: M) -> BlockAnd<Place<'tcx>>\n     where"}, {"sha": "6d6e5de4761ab9622842a3f716ddd16676da2748", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, UpvarSubsts};\n use syntax_pos::Span;\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// See comment on `as_local_operand`\n     pub fn as_local_rvalue<M>(&mut self, block: BasicBlock, expr: M) -> BlockAnd<Rvalue<'tcx>>\n     where"}, {"sha": "9d907c6ec04ab7a7cab560849b34883eee4ee691", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -6,7 +6,7 @@ use crate::hair::*;\n use rustc::middle::region;\n use rustc::mir::*;\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr` into a fresh temporary. This is used when building\n     /// up rvalues so as to freeze the value that will be consumed.\n     pub fn as_temp<M>("}, {"sha": "a3976238fbe821e32f75c3ed2e09d89970e342e7", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -8,7 +8,7 @@ use rustc::ty;\n \n use rustc_target::spec::abi::Abi;\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr`, storing the result into `destination`, which\n     /// is assumed to be uninitialized.\n     pub fn into_expr("}, {"sha": "74338de67759e5f0314c53b43b0d49126b49c1cb", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -3,7 +3,7 @@ use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::hair::*;\n use rustc::mir::*;\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Builds a block of MIR statements to evaluate the HAIR `expr`.\n     /// If the original expression was an AST statement,\n     /// (e.g., `some().code(&here());`) then `opt_stmt_span` is the"}, {"sha": "077840c9ccf172b1bd6774b821b10bf076cba800", "filename": "src/librustc_mir/build/into.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Finto.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -9,14 +9,15 @@ use crate::hair::*;\n use rustc::mir::*;\n \n pub(in crate::build) trait EvalInto<'tcx> {\n-    fn eval_into<'a, 'gcx>(self,\n-                           builder: &mut Builder<'a, 'gcx, 'tcx>,\n-                           destination: &Place<'tcx>,\n-                           block: BasicBlock)\n-                           -> BlockAnd<()>;\n+    fn eval_into(\n+        self,\n+        builder: &mut Builder<'_, 'tcx>,\n+        destination: &Place<'tcx>,\n+        block: BasicBlock,\n+    ) -> BlockAnd<()>;\n }\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn into<E>(&mut self,\n                    destination: &Place<'tcx>,\n                    block: BasicBlock,\n@@ -29,22 +30,24 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n }\n \n impl<'tcx> EvalInto<'tcx> for ExprRef<'tcx> {\n-    fn eval_into<'a, 'gcx>(self,\n-                           builder: &mut Builder<'a, 'gcx, 'tcx>,\n-                           destination: &Place<'tcx>,\n-                           block: BasicBlock)\n-                           -> BlockAnd<()> {\n+    fn eval_into(\n+        self,\n+        builder: &mut Builder<'_, 'tcx>,\n+        destination: &Place<'tcx>,\n+        block: BasicBlock,\n+    ) -> BlockAnd<()> {\n         let expr = builder.hir.mirror(self);\n         builder.into_expr(destination, block, expr)\n     }\n }\n \n impl<'tcx> EvalInto<'tcx> for Expr<'tcx> {\n-    fn eval_into<'a, 'gcx>(self,\n-                           builder: &mut Builder<'a, 'gcx, 'tcx>,\n-                           destination: &Place<'tcx>,\n-                           block: BasicBlock)\n-                           -> BlockAnd<()> {\n+    fn eval_into(\n+        self,\n+        builder: &mut Builder<'_, 'tcx>,\n+        destination: &Place<'tcx>,\n+        block: BasicBlock,\n+    ) -> BlockAnd<()> {\n         builder.into_expr(destination, block, self)\n     }\n }"}, {"sha": "4f73c92be504e645094d8abf654f442c6d68d011", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -27,7 +27,7 @@ mod util;\n \n use std::convert::TryFrom;\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Generates MIR for a `match` expression.\n     ///\n     /// The MIR that we generate for a match looks like this.\n@@ -768,7 +768,7 @@ pub(crate) struct ArmHasGuard(pub bool);\n ///////////////////////////////////////////////////////////////////////////\n // Main matching algorithm\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// The main match algorithm. It begins with a set of candidates\n     /// `candidates` and has the job of generating code to determine\n     /// which of these candidates, if any, is the correct one. The\n@@ -1296,7 +1296,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Pattern binding - used for `let` and function parameters as well.\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Initializes each of the bindings from the candidate by\n     /// moving/copying/ref'ing the source as appropriate. Tests the guard, if\n     /// any, and then branches to the arm. Returns the block for the case where"}, {"sha": "b1b5233fbc8750962318244e112f546c545a58a3", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -23,7 +23,7 @@ use rustc::mir::interpret::truncate;\n \n use std::mem;\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn simplify_candidate<'pat>(&mut self,\n                                     candidate: &mut Candidate<'pat, 'tcx>) {\n         // repeatedly simplify match pairs until fixed point is reached"}, {"sha": "f4755477e96eab46f12f3970d2859d84dac93e5e", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -19,7 +19,7 @@ use rustc::hir::{RangeEnd, Mutability};\n use syntax_pos::Span;\n use std::cmp::Ordering;\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Identifies what test is needed to decide if `match_pair` is applicable.\n     ///\n     /// It is a bug to call this with a simplifiable pattern."}, {"sha": "100c03046d1b31693dd98e877edb073857c1912c", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::*;\n use std::u32;\n use std::convert::TryInto;\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn field_match_pairs<'pat>(&mut self,\n                                    place: Place<'tcx>,\n                                    subpatterns: &'pat [FieldPattern<'tcx>])"}, {"sha": "ad891b1c1ea0a3ae0b6804c318fc6b038744687c", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -8,7 +8,7 @@ use rustc::ty::{self, Ty};\n use rustc::mir::*;\n use syntax_pos::{Span, DUMMY_SP};\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Adds a new temporary value of type `ty` storing the result of\n     /// evaluating `expr`.\n     ///"}, {"sha": "e8b0def0a54edcf8e01cf5e9b6ce0b54e1e1b1b5", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 31, "deletions": 91, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -9,13 +9,10 @@ use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n use rustc::middle::region;\n use rustc::mir::*;\n-use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::subst::SubstsRef;\n use rustc::util::nodemap::HirIdMap;\n use rustc_target::spec::PanicStrategy;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n-use std::mem;\n use std::u32;\n use rustc_target::spec::abi::Abi;\n use syntax::attr::{self, UnwindAttr};\n@@ -66,7 +63,7 @@ pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> Body<'tcx> {\n \n     tcx.infer_ctxt().enter(|infcx| {\n         let cx = Cx::new(&infcx, id);\n-        let mut body = if cx.tables().tainted_by_errors {\n+        let body = if cx.tables().tainted_by_errors {\n             build::construct_error(cx, body_id)\n         } else if cx.body_owner_kind.is_fn_or_closure() {\n             // fetch the fully liberated fn signature (that is, all bound\n@@ -162,16 +159,6 @@ pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> Body<'tcx> {\n             build::construct_const(cx, body_id, return_ty, return_ty_span)\n         };\n \n-        // Convert the `mir::Body` to global types.\n-        let mut globalizer = GlobalizeMir {\n-            tcx,\n-            span: body.span\n-        };\n-        globalizer.visit_body(&mut body);\n-        let body = unsafe {\n-            mem::transmute::<Body<'_>, Body<'tcx>>(body)\n-        };\n-\n         mir_util::dump_mir(tcx, None, \"mir_map\", &0,\n                            MirSource::item(def_id), &body, |_, _| Ok(()) );\n \n@@ -181,61 +168,11 @@ pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> Body<'tcx> {\n     })\n }\n \n-/// A pass to lift all the types and substitutions in a MIR\n-/// to the global tcx. Sadly, we don't have a \"folder\" that\n-/// can change `'tcx` so we have to transmute afterwards.\n-struct GlobalizeMir<'gcx> {\n-    tcx: TyCtxt<'gcx, 'gcx>,\n-    span: Span,\n-}\n-\n-impl<'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'gcx> {\n-    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: TyContext) {\n-        if let Some(lifted) = self.tcx.lift(ty) {\n-            *ty = lifted;\n-        } else {\n-            span_bug!(self.span,\n-                      \"found type `{:?}` with inference types/regions in MIR\",\n-                      ty);\n-        }\n-    }\n-\n-    fn visit_region(&mut self, region: &mut ty::Region<'tcx>, _: Location) {\n-        if let Some(lifted) = self.tcx.lift(region) {\n-            *region = lifted;\n-        } else {\n-            span_bug!(self.span,\n-                      \"found region `{:?}` with inference types/regions in MIR\",\n-                      region);\n-        }\n-    }\n-\n-    fn visit_const(&mut self, constant: &mut &'tcx ty::Const<'tcx>, _: Location) {\n-        if let Some(lifted) = self.tcx.lift(constant) {\n-            *constant = lifted;\n-        } else {\n-            span_bug!(self.span,\n-                      \"found constant `{:?}` with inference types/regions in MIR\",\n-                      constant);\n-        }\n-    }\n-\n-    fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, _: Location) {\n-        if let Some(lifted) = self.tcx.lift(substs) {\n-            *substs = lifted;\n-        } else {\n-            span_bug!(self.span,\n-                      \"found substs `{:?}` with inference types/regions in MIR\",\n-                      substs);\n-        }\n-    }\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // BuildMir -- walks a crate, looking for fn items and methods to build MIR from\n \n-fn liberated_closure_env_ty<'gcx, 'tcx>(\n-    tcx: TyCtxt<'gcx, 'tcx>,\n+fn liberated_closure_env_ty<'tcx>(\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     closure_expr_id: hir::HirId,\n     body_id: hir::BodyId,\n ) -> Ty<'tcx> {\n@@ -304,8 +241,8 @@ impl BlockFrame {\n #[derive(Debug)]\n struct BlockContext(Vec<BlockFrame>);\n \n-struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    hir: Cx<'a, 'gcx, 'tcx>,\n+struct Builder<'a, 'tcx: 'a> {\n+    hir: Cx<'a, 'tcx>,\n     cfg: CFG<'tcx>,\n \n     fn_span: Span,\n@@ -370,7 +307,7 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     cached_unreachable_block: Option<BasicBlock>,\n }\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn is_bound_var_in_guard(&self, id: hir::HirId) -> bool {\n         self.guard_context.iter().any(|frame| frame.locals.iter().any(|local| local.id == id))\n     }\n@@ -552,7 +489,7 @@ macro_rules! unpack {\n     };\n }\n \n-fn should_abort_on_panic<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>, fn_def_id: DefId, abi: Abi) -> bool {\n+fn should_abort_on_panic<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, fn_def_id: DefId, abi: Abi) -> bool {\n     // Not callable from C, so we can safely unwind through these\n     if abi == Abi::Rust || abi == Abi::RustCall { return false; }\n \n@@ -580,17 +517,19 @@ fn should_abort_on_panic<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>, fn_def_id: DefId,\n \n struct ArgInfo<'gcx>(Ty<'gcx>, Option<Span>, Option<&'gcx hir::Pat>, Option<ImplicitSelfKind>);\n \n-fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n-                                   fn_id: hir::HirId,\n-                                   arguments: A,\n-                                   safety: Safety,\n-                                   abi: Abi,\n-                                   return_ty: Ty<'gcx>,\n-                                   yield_ty: Option<Ty<'gcx>>,\n-                                   return_ty_span: Span,\n-                                   body: &'gcx hir::Body)\n-                                   -> Body<'tcx>\n-    where A: Iterator<Item=ArgInfo<'gcx>>\n+fn construct_fn<'a, 'tcx, A>(\n+    hir: Cx<'a, 'tcx>,\n+    fn_id: hir::HirId,\n+    arguments: A,\n+    safety: Safety,\n+    abi: Abi,\n+    return_ty: Ty<'tcx>,\n+    yield_ty: Option<Ty<'tcx>>,\n+    return_ty_span: Span,\n+    body: &'tcx hir::Body,\n+) -> Body<'tcx>\n+where\n+    A: Iterator<Item=ArgInfo<'tcx>>\n {\n     let arguments: Vec<_> = arguments.collect();\n \n@@ -703,8 +642,8 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     body\n }\n \n-fn construct_const<'a, 'gcx, 'tcx>(\n-    hir: Cx<'a, 'gcx, 'tcx>,\n+fn construct_const<'a, 'tcx>(\n+    hir: Cx<'a, 'tcx>,\n     body_id: hir::BodyId,\n     const_ty: Ty<'tcx>,\n     const_ty_span: Span,\n@@ -745,9 +684,10 @@ fn construct_const<'a, 'gcx, 'tcx>(\n     builder.finish(None)\n }\n \n-fn construct_error<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n-                                   body_id: hir::BodyId)\n-                                   -> Body<'tcx> {\n+fn construct_error<'a, 'tcx>(\n+    hir: Cx<'a, 'tcx>,\n+    body_id: hir::BodyId\n+) -> Body<'tcx> {\n     let owner_id = hir.tcx().hir().body_owner(body_id);\n     let span = hir.tcx().hir().span(owner_id);\n     let ty = hir.tcx().types.err;\n@@ -757,8 +697,8 @@ fn construct_error<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n     builder.finish(None)\n }\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n-    fn new(hir: Cx<'a, 'gcx, 'tcx>,\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n+    fn new(hir: Cx<'a, 'tcx>,\n            span: Span,\n            arg_count: usize,\n            safety: Safety,\n@@ -767,7 +707,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n            __upvar_debuginfo_codegen_only_do_not_use: Vec<UpvarDebuginfo>,\n            upvar_mutbls: Vec<Mutability>,\n            is_generator: bool)\n-           -> Builder<'a, 'gcx, 'tcx> {\n+           -> Builder<'a, 'tcx> {\n         let lint_level = LintLevel::Explicit(hir.root_lint_level);\n         let mut builder = Builder {\n             hir,\n@@ -833,9 +773,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     fn args_and_body(&mut self,\n                      mut block: BasicBlock,\n-                     arguments: &[ArgInfo<'gcx>],\n+                     arguments: &[ArgInfo<'tcx>],\n                      argument_scope: region::Scope,\n-                     ast_body: &'gcx hir::Expr)\n+                     ast_body: &'tcx hir::Expr)\n                      -> BlockAnd<()>\n     {\n         // Allocate locals for the function arguments"}, {"sha": "db58a709e9f7c20531e6d9bc5b0b6df776b12548", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -257,7 +257,7 @@ impl<'tcx> Scope<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Builder<'a, 'tcx> {\n     // Adding and removing scopes\n     // ==========================\n     /// Start a breakable scope, which tracks where `continue` and `break`\n@@ -269,7 +269,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                     break_block: BasicBlock,\n                                     break_destination: Place<'tcx>,\n                                     f: F) -> R\n-        where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> R\n+        where F: FnOnce(&mut Builder<'a, 'tcx>) -> R\n     {\n         let region_scope = self.topmost_scope();\n         let scope = BreakableScope {\n@@ -289,7 +289,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                               opt_scope: Option<(region::Scope, SourceInfo)>,\n                               f: F)\n                               -> BlockAnd<R>\n-        where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n+        where F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_opt_scope(opt_scope={:?})\", opt_scope);\n         if let Some(region_scope) = opt_scope { self.push_scope(region_scope); }\n@@ -309,7 +309,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                           lint_level: LintLevel,\n                           f: F)\n                           -> BlockAnd<R>\n-        where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n+        where F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_scope(region_scope={:?})\", region_scope);\n         let source_scope = self.source_scope;"}, {"sha": "c03ca8e669eb40f9f5698d24987727907c07d663", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -9,9 +9,9 @@ crate enum LitToConstError {\n     Reported,\n }\n \n-crate fn lit_to_const<'gcx, 'tcx>(\n+crate fn lit_to_const<'tcx>(\n     lit: &'tcx ast::LitKind,\n-    tcx: TyCtxt<'gcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     ty: Ty<'tcx>,\n     neg: bool,\n ) -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {"}, {"sha": "63239a36a17534869f677a0adde3336e355889d6", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::indexed_vec::Idx;\n impl<'tcx> Mirror<'tcx> for &'tcx hir::Block {\n     type Output = Block<'tcx>;\n \n-    fn make_mirror<'a, 'gcx>(self, cx: &mut Cx<'a, 'gcx, 'tcx>) -> Block<'tcx> {\n+    fn make_mirror(self, cx: &mut Cx<'_, 'tcx>) -> Block<'tcx> {\n         // We have to eagerly lower the \"spine\" of the statements\n         // in order to get the lexical scoping correctly.\n         let stmts = mirror_stmts(cx, self.hir_id.local_id, &*self.stmts);\n@@ -40,10 +40,11 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Block {\n     }\n }\n \n-fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n-                                block_id: hir::ItemLocalId,\n-                                stmts: &'tcx [hir::Stmt])\n-                                -> Vec<StmtRef<'tcx>> {\n+fn mirror_stmts<'a, 'tcx>(\n+    cx: &mut Cx<'a, 'tcx>,\n+    block_id: hir::ItemLocalId,\n+    stmts: &'tcx [hir::Stmt],\n+) -> Vec<StmtRef<'tcx>> {\n     let mut result = vec![];\n     for (index, stmt) in stmts.iter().enumerate() {\n         let hir_id = stmt.hir_id;\n@@ -114,9 +115,10 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     return result;\n }\n \n-pub fn to_expr_ref<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n-                                   block: &'tcx hir::Block)\n-                                   -> ExprRef<'tcx> {\n+pub fn to_expr_ref<'a, 'tcx>(\n+    cx: &mut Cx<'a, 'tcx>,\n+    block: &'tcx hir::Block,\n+) -> ExprRef<'tcx> {\n     let block_ty = cx.tables().node_type(block.hir_id);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(block.hir_id.local_id);\n     let expr = Expr {"}, {"sha": "89452b23880c0a61c574617156fcecd045d4f14d", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 38, "deletions": 32, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -17,7 +17,7 @@ use syntax_pos::Span;\n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n     type Output = Expr<'tcx>;\n \n-    fn make_mirror<'a, 'gcx>(self, cx: &mut Cx<'a, 'gcx, 'tcx>) -> Expr<'tcx> {\n+    fn make_mirror(self, cx: &mut Cx<'_, 'tcx>) -> Expr<'tcx> {\n         let temp_lifetime = cx.region_scope_tree.temporary_scope(self.hir_id.local_id);\n         let expr_scope = region::Scope {\n             id: self.hir_id.local_id,\n@@ -68,11 +68,12 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n     }\n }\n \n-fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n-                                    hir_expr: &'tcx hir::Expr,\n-                                    mut expr: Expr<'tcx>,\n-                                    adjustment: &Adjustment<'tcx>)\n-                                    -> Expr<'tcx> {\n+fn apply_adjustment<'a, 'tcx>(\n+    cx: &mut Cx<'a, 'tcx>,\n+    hir_expr: &'tcx hir::Expr,\n+    mut expr: Expr<'tcx>,\n+    adjustment: &Adjustment<'tcx>\n+) -> Expr<'tcx> {\n     let Expr { temp_lifetime, mut span, .. } = expr;\n \n     // Adjust the span from the block, to the last expression of the\n@@ -196,9 +197,10 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     }\n }\n \n-fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n-                                          expr: &'tcx hir::Expr)\n-                                          -> Expr<'tcx> {\n+fn make_mirror_unadjusted<'a, 'tcx>(\n+    cx: &mut Cx<'a, 'tcx>,\n+    expr: &'tcx hir::Expr,\n+) -> Expr<'tcx> {\n     let expr_ty = cx.tables().expr_ty(expr);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n \n@@ -774,7 +776,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n }\n \n fn user_substs_applied_to_res(\n-    cx: &mut Cx<'a, 'gcx, 'tcx>,\n+    cx: &mut Cx<'a, 'tcx>,\n     hir_id: hir::HirId,\n     res: Res,\n ) -> Option<ty::CanonicalUserType<'tcx>> {\n@@ -808,8 +810,8 @@ fn user_substs_applied_to_res(\n     user_provided_type\n }\n \n-fn method_callee<'a, 'gcx, 'tcx>(\n-    cx: &mut Cx<'a, 'gcx, 'tcx>,\n+fn method_callee<'a, 'tcx>(\n+    cx: &mut Cx<'a, 'tcx>,\n     expr: &hir::Expr,\n     span: Span,\n     overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,\n@@ -865,7 +867,7 @@ impl ToBorrowKind for hir::Mutability {\n     }\n }\n \n-fn convert_arm<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>, arm: &'tcx hir::Arm) -> Arm<'tcx> {\n+fn convert_arm<'a, 'tcx>(cx: &mut Cx<'a, 'tcx>, arm: &'tcx hir::Arm) -> Arm<'tcx> {\n     Arm {\n         patterns: arm.pats.iter().map(|p| cx.pattern_from_hir(p)).collect(),\n         guard: match arm.guard {\n@@ -882,10 +884,11 @@ fn convert_arm<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>, arm: &'tcx hir::Arm)\n     }\n }\n \n-fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n-                                     expr: &'tcx hir::Expr,\n-                                     res: Res)\n-                                     -> ExprKind<'tcx> {\n+fn convert_path_expr<'a, 'tcx>(\n+    cx: &mut Cx<'a, 'tcx>,\n+    expr: &'tcx hir::Expr,\n+    res: Res,\n+) -> ExprKind<'tcx> {\n     let substs = cx.tables().node_substs(expr.hir_id);\n     match res {\n         // A regular function, constructor function or a constant.\n@@ -967,7 +970,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n }\n \n fn convert_var(\n-    cx: &mut Cx<'_, '_, 'tcx>,\n+    cx: &mut Cx<'_, 'tcx>,\n     expr: &'tcx hir::Expr,\n     var_hir_id: hir::HirId,\n ) -> ExprKind<'tcx> {\n@@ -1117,10 +1120,11 @@ fn bin_op(op: hir::BinOpKind) -> BinOp {\n     }\n }\n \n-fn overloaded_operator<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n-                                       expr: &'tcx hir::Expr,\n-                                       args: Vec<ExprRef<'tcx>>)\n-                                       -> ExprKind<'tcx> {\n+fn overloaded_operator<'a, 'tcx>(\n+    cx: &mut Cx<'a, 'tcx>,\n+    expr: &'tcx hir::Expr,\n+    args: Vec<ExprRef<'tcx>>\n+) -> ExprKind<'tcx> {\n     let fun = method_callee(cx, expr, expr.span, None);\n     ExprKind::Call {\n         ty: fun.ty,\n@@ -1130,8 +1134,8 @@ fn overloaded_operator<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     }\n }\n \n-fn overloaded_place<'a, 'gcx, 'tcx>(\n-    cx: &mut Cx<'a, 'gcx, 'tcx>,\n+fn overloaded_place<'a, 'tcx>(\n+    cx: &mut Cx<'a, 'tcx>,\n     expr: &'tcx hir::Expr,\n     place_ty: Ty<'tcx>,\n     overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,\n@@ -1178,11 +1182,12 @@ fn overloaded_place<'a, 'gcx, 'tcx>(\n     ExprKind::Deref { arg: ref_expr.to_ref() }\n }\n \n-fn capture_upvar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n-                                   closure_expr: &'tcx hir::Expr,\n-                                   var_hir_id: hir::HirId,\n-                                   upvar_ty: Ty<'tcx>)\n-                                   -> ExprRef<'tcx> {\n+fn capture_upvar<'tcx>(\n+    cx: &mut Cx<'_, 'tcx>,\n+    closure_expr: &'tcx hir::Expr,\n+    var_hir_id: hir::HirId,\n+    upvar_ty: Ty<'tcx>\n+) -> ExprRef<'tcx> {\n     let upvar_id = ty::UpvarId {\n         var_path: ty::UpvarPath { hir_id: var_hir_id },\n         closure_expr_id: cx.tcx.hir().local_def_id_from_hir_id(closure_expr.hir_id).to_local(),\n@@ -1218,9 +1223,10 @@ fn capture_upvar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n }\n \n /// Converts a list of named fields (i.e., for struct-like struct/enum ADTs) into FieldExprRef.\n-fn field_refs<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n-                              fields: &'tcx [hir::Field])\n-                              -> Vec<FieldExprRef<'tcx>> {\n+fn field_refs<'a, 'tcx>(\n+    cx: &mut Cx<'a, 'tcx>,\n+    fields: &'tcx [hir::Field]\n+) -> Vec<FieldExprRef<'tcx>> {\n     fields.iter()\n         .map(|field| {\n             FieldExprRef {"}, {"sha": "434f538cc6de43cc568bc6767e895fffe866a24e", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -21,18 +21,18 @@ use rustc::hir;\n use crate::hair::constant::{lit_to_const, LitToConstError};\n \n #[derive(Clone)]\n-pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'gcx, 'tcx>,\n-    infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+pub struct Cx<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'tcx, 'tcx>,\n+    infcx: &'a InferCtxt<'a, 'tcx, 'tcx>,\n \n     pub root_lint_level: hir::HirId,\n-    pub param_env: ty::ParamEnv<'gcx>,\n+    pub param_env: ty::ParamEnv<'tcx>,\n \n     /// Identity `InternalSubsts` for use with const-evaluation.\n-    pub identity_substs: &'gcx InternalSubsts<'gcx>,\n+    pub identity_substs: &'tcx InternalSubsts<'tcx>,\n \n-    pub region_scope_tree: &'gcx region::ScopeTree,\n-    pub tables: &'a ty::TypeckTables<'gcx>,\n+    pub region_scope_tree: &'tcx region::ScopeTree,\n+    pub tables: &'a ty::TypeckTables<'tcx>,\n \n     /// This is `Constness::Const` if we are compiling a `static`,\n     /// `const`, or the body of a `const fn`.\n@@ -51,9 +51,9 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     control_flow_destroyed: Vec<(Span, String)>,\n }\n \n-impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n-    pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-               src_id: hir::HirId) -> Cx<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Cx<'a, 'tcx> {\n+    pub fn new(infcx: &'a InferCtxt<'a, 'tcx, 'tcx>,\n+               src_id: hir::HirId) -> Cx<'a, 'tcx> {\n         let tcx = infcx.tcx;\n         let src_def_id = tcx.hir().local_def_id_from_hir_id(src_id);\n         let tables = tcx.typeck_tables_of(src_def_id);\n@@ -100,7 +100,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> Cx<'a, 'tcx> {\n     /// Normalizes `ast` into the appropriate \"mirror\" type.\n     pub fn mirror<M: Mirror<'tcx>>(&mut self, ast: M) -> M::Output {\n         ast.make_mirror(self)\n@@ -200,11 +200,11 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         ty.needs_drop(self.tcx.global_tcx(), param_env)\n     }\n \n-    pub fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n+    pub fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n \n-    pub fn tables(&self) -> &'a ty::TypeckTables<'gcx> {\n+    pub fn tables(&self) -> &'a ty::TypeckTables<'tcx> {\n         self.tables\n     }\n \n@@ -217,8 +217,8 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl UserAnnotatedTyHelpers<'gcx, 'tcx> for Cx<'_, 'gcx, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n+impl UserAnnotatedTyHelpers<'tcx> for Cx<'_, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx()\n     }\n "}, {"sha": "4694241528b717ef15e762bb77328945c4b6f8c3", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -344,21 +344,21 @@ impl<'tcx> ExprRef<'tcx> {\n pub trait Mirror<'tcx> {\n     type Output;\n \n-    fn make_mirror<'a, 'gcx>(self, cx: &mut Cx<'a, 'gcx, 'tcx>) -> Self::Output;\n+    fn make_mirror(self, cx: &mut Cx<'_, 'tcx>) -> Self::Output;\n }\n \n impl<'tcx> Mirror<'tcx> for Expr<'tcx> {\n     type Output = Expr<'tcx>;\n \n-    fn make_mirror<'a, 'gcx>(self, _: &mut Cx<'a, 'gcx, 'tcx>) -> Expr<'tcx> {\n+    fn make_mirror(self, _: &mut Cx<'_, 'tcx>) -> Expr<'tcx> {\n         self\n     }\n }\n \n impl<'tcx> Mirror<'tcx> for ExprRef<'tcx> {\n     type Output = Expr<'tcx>;\n \n-    fn make_mirror<'a, 'gcx>(self, hir: &mut Cx<'a, 'gcx, 'tcx>) -> Expr<'tcx> {\n+    fn make_mirror(self, hir: &mut Cx<'a, 'tcx>) -> Expr<'tcx> {\n         match self {\n             ExprRef::Hair(h) => h.make_mirror(hir),\n             ExprRef::Mirror(m) => *m,\n@@ -369,15 +369,15 @@ impl<'tcx> Mirror<'tcx> for ExprRef<'tcx> {\n impl<'tcx> Mirror<'tcx> for Stmt<'tcx> {\n     type Output = Stmt<'tcx>;\n \n-    fn make_mirror<'a, 'gcx>(self, _: &mut Cx<'a, 'gcx, 'tcx>) -> Stmt<'tcx> {\n+    fn make_mirror(self, _: &mut Cx<'_, 'tcx>) -> Stmt<'tcx> {\n         self\n     }\n }\n \n impl<'tcx> Mirror<'tcx> for StmtRef<'tcx> {\n     type Output = Stmt<'tcx>;\n \n-    fn make_mirror<'a, 'gcx>(self, _: &mut Cx<'a, 'gcx, 'tcx>) -> Stmt<'tcx> {\n+    fn make_mirror(self, _: &mut Cx<'_, 'tcx>) -> Stmt<'tcx> {\n         match self {\n             StmtRef::Mirror(m) => *m,\n         }\n@@ -387,7 +387,7 @@ impl<'tcx> Mirror<'tcx> for StmtRef<'tcx> {\n impl<'tcx> Mirror<'tcx> for Block<'tcx> {\n     type Output = Block<'tcx>;\n \n-    fn make_mirror<'a, 'gcx>(self, _: &mut Cx<'a, 'gcx, 'tcx>) -> Block<'tcx> {\n+    fn make_mirror(self, _: &mut Cx<'_, 'tcx>) -> Block<'tcx> {\n         self\n     }\n }"}, {"sha": "566acccc5a0e6dce857ef5c87a7f8b34b4634d4c", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -1058,7 +1058,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     }\n }\n \n-impl UserAnnotatedTyHelpers<'tcx, 'tcx> for PatternContext<'_, 'tcx> {\n+impl UserAnnotatedTyHelpers<'tcx> for PatternContext<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n@@ -1246,8 +1246,8 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n     }\n }\n \n-pub fn compare_const_vals<'gcx, 'tcx>(\n-    tcx: TyCtxt<'gcx, 'tcx>,\n+pub fn compare_const_vals<'tcx>(\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     a: &'tcx ty::Const<'tcx>,\n     b: &'tcx ty::Const<'tcx>,\n     ty: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,"}, {"sha": "5eadb581ba5009c3697d69b989fd928ea9d2d238", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e1181b1cabb45388b0141974b01ca3ec36c8b9/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=d3e1181b1cabb45388b0141974b01ca3ec36c8b9", "patch": "@@ -1,8 +1,8 @@\n use rustc::hir;\n use rustc::ty::{self, CanonicalUserType, TyCtxt, UserType};\n \n-crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'gcx, 'tcx>;\n+crate trait UserAnnotatedTyHelpers<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx>;\n \n     fn tables(&self) -> &ty::TypeckTables<'tcx>;\n "}]}