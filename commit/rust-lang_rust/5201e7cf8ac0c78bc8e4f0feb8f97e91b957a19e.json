{"sha": "5201e7cf8ac0c78bc8e4f0feb8f97e91b957a19e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMDFlN2NmOGFjMGM3OGJjOGU0ZjBmZWI4Zjk3ZTkxYjk1N2ExOWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-03-21T06:31:39Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-03-21T06:31:39Z"}, "message": "document format_args! behavior wrt. Display and Debug", "tree": {"sha": "23905173499ad64b79ac72c6eecdad68087d02b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23905173499ad64b79ac72c6eecdad68087d02b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5201e7cf8ac0c78bc8e4f0feb8f97e91b957a19e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5201e7cf8ac0c78bc8e4f0feb8f97e91b957a19e", "html_url": "https://github.com/rust-lang/rust/commit/5201e7cf8ac0c78bc8e4f0feb8f97e91b957a19e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5201e7cf8ac0c78bc8e4f0feb8f97e91b957a19e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c19264fa835a1eca86de4fd2e86a87b3919e57cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c19264fa835a1eca86de4fd2e86a87b3919e57cf", "html_url": "https://github.com/rust-lang/rust/commit/c19264fa835a1eca86de4fd2e86a87b3919e57cf"}], "stats": {"total": 72, "additions": 66, "deletions": 6}, "files": [{"sha": "0363714c31b5c9da13f511c09e845b0211bc14f6", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 66, "deletions": 6, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5201e7cf8ac0c78bc8e4f0feb8f97e91b957a19e/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5201e7cf8ac0c78bc8e4f0feb8f97e91b957a19e/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=5201e7cf8ac0c78bc8e4f0feb8f97e91b957a19e", "patch": "@@ -406,6 +406,18 @@ impl<'a> Arguments<'a> {\n /// macro validates the format string at compile-time so usage of the [`write`]\n /// and [`format`] functions can be safely performed.\n ///\n+/// You can use the `Arguments<'a>` that [`format_args!`] returns in `Debug`\n+/// and `Display` contexts as seen below. The example also shows that `Debug`\n+/// and `Display` format to the same thing: the interpolated format string\n+/// in `format_args!`.\n+///\n+/// ```rust\n+/// let display = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));\n+/// let debug = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));\n+/// assert_eq!(\"1 foo 2\", display);\n+/// assert_eq!(display, debug);\n+/// ```\n+///\n /// [`format_args!`]: ../../std/macro.format_args.html\n /// [`format`]: ../../std/fmt/fn.format.html\n /// [`write`]: ../../std/fmt/fn.write.html\n@@ -1553,23 +1565,32 @@ impl<'a> Formatter<'a> {\n     ///\n     /// ```rust\n     /// use std::fmt;\n+    /// use std::net::Ipv4Addr;\n     ///\n     /// struct Foo {\n     ///     bar: i32,\n     ///     baz: String,\n+    ///     addr: Ipv4Addr,\n     /// }\n     ///\n     /// impl fmt::Debug for Foo {\n     ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n     ///         fmt.debug_struct(\"Foo\")\n     ///             .field(\"bar\", &self.bar)\n     ///             .field(\"baz\", &self.baz)\n+    ///             .field(\"addr\", &format_args!(\"{}\", self.addr))\n     ///             .finish()\n     ///     }\n     /// }\n     ///\n-    /// // prints \"Foo { bar: 10, baz: \"Hello World\" }\"\n-    /// println!(\"{:?}\", Foo { bar: 10, baz: \"Hello World\".to_string() });\n+    /// assert_eq!(\n+    ///     \"Foo { bar: 10, baz: \\\"Hello World\\\", addr: 127.0.0.1 }\",\n+    ///     format!(\"{:?}\", Foo {\n+    ///         bar: 10,\n+    ///         baz: \"Hello World\".to_string(),\n+    ///         addr: Ipv4Addr::new(127, 0, 0, 1),\n+    ///     })\n+    /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn debug_struct<'b>(&'b mut self, name: &str) -> DebugStruct<'b, 'a> {\n@@ -1583,20 +1604,24 @@ impl<'a> Formatter<'a> {\n     ///\n     /// ```rust\n     /// use std::fmt;\n+    /// use std::marker::PhantomData;\n     ///\n-    /// struct Foo(i32, String);\n+    /// struct Foo<T>(i32, String, PhantomData<T>);\n     ///\n-    /// impl fmt::Debug for Foo {\n+    /// impl<T> fmt::Debug for Foo<T> {\n     ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n     ///         fmt.debug_tuple(\"Foo\")\n     ///             .field(&self.0)\n     ///             .field(&self.1)\n+    ///             .field(&format_args!(\"_\"))\n     ///             .finish()\n     ///     }\n     /// }\n     ///\n-    /// // prints \"Foo(10, \"Hello World\")\"\n-    /// println!(\"{:?}\", Foo(10, \"Hello World\".to_string()));\n+    /// assert_eq!(\n+    ///     \"Foo(10, \\\"Hello\\\", _)\",\n+    ///     format!(\"{:?}\", Foo(10, \"Hello\".to_string(), PhantomData::<u8>))\n+    /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn debug_tuple<'b>(&'b mut self, name: &str) -> DebugTuple<'b, 'a> {\n@@ -1646,6 +1671,41 @@ impl<'a> Formatter<'a> {\n     /// // prints \"{10, 11}\"\n     /// println!(\"{:?}\", Foo(vec![10, 11]));\n     /// ```\n+    ///\n+    /// [`format_args!`]: ../../std/macro.format_args.html\n+    ///\n+    /// In this more complex example, we use [`format_args!`] and `.debug_set()`\n+    /// to build a list of match arms:\n+    ///\n+    /// ```rust\n+    /// use std::fmt;\n+    ///\n+    /// struct Arm<'a, L: 'a, R: 'a>(&'a (L, R));\n+    /// struct Table<'a, K: 'a, V: 'a>(&'a [(K, V)], V);\n+    /// \n+    /// impl<'a, L, R> fmt::Debug for Arm<'a, L, R>\n+    /// where\n+    ///     L: 'a + fmt::Debug, R: 'a + fmt::Debug\n+    /// {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///         L::fmt(&(self.0).0, fmt)?;\n+    ///         fmt.write_str(\" => \")?;\n+    ///         R::fmt(&(self.0).1, fmt)\n+    ///     }\n+    /// }\n+    ///\n+    /// impl<'a, K, V> fmt::Debug for Table<'a, K, V>\n+    /// where\n+    ///     K: 'a + fmt::Debug, V: 'a + fmt::Debug\n+    /// {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///         fmt.debug_set()\n+    ///         .entries(self.0.iter().map(Arm))\n+    ///         .entry(&Arm(&(format_args!(\"_\"), &self.1)))\n+    ///         .finish()\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn debug_set<'b>(&'b mut self) -> DebugSet<'b, 'a> {\n         builders::debug_set_new(self)"}]}