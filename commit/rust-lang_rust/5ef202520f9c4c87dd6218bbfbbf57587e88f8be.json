{"sha": "5ef202520f9c4c87dd6218bbfbbf57587e88f8be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZjIwMjUyMGY5YzRjODdkZDYyMThiYmZiYmY1NzU4N2U4OGY4YmU=", "commit": {"author": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-02-15T02:27:20Z"}, "committer": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-02-15T02:27:28Z"}, "message": "add diagnostic items\n\nAdd diagnostic items to the following types:\n  OsString (os_string_type)\n  PathBuf (path_buf_type)\n  Owned (to_owned_trait)\n\nAs well as the to_vec method on slice/[T]", "tree": {"sha": "400d310d06e6f4463eabb65d08cb2617c2608ba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/400d310d06e6f4463eabb65d08cb2617c2608ba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ef202520f9c4c87dd6218bbfbbf57587e88f8be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef202520f9c4c87dd6218bbfbbf57587e88f8be", "html_url": "https://github.com/rust-lang/rust/commit/5ef202520f9c4c87dd6218bbfbbf57587e88f8be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ef202520f9c4c87dd6218bbfbbf57587e88f8be/comments", "author": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b86674e7cc8ac9c846ed5aca84aaefc2d0d12e4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b86674e7cc8ac9c846ed5aca84aaefc2d0d12e4a", "html_url": "https://github.com/rust-lang/rust/commit/b86674e7cc8ac9c846ed5aca84aaefc2d0d12e4a"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "de6210d1893de872302b275b488aa0c31afbf6b2", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ef202520f9c4c87dd6218bbfbbf57587e88f8be/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef202520f9c4c87dd6218bbfbbf57587e88f8be/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5ef202520f9c4c87dd6218bbfbbf57587e88f8be", "patch": "@@ -796,6 +796,7 @@ symbols! {\n         options,\n         or,\n         or_patterns,\n+        os_string_type,\n         other,\n         out,\n         overlapping_marker_traits,\n@@ -824,6 +825,7 @@ symbols! {\n         pat2018,\n         pat2021,\n         path,\n+        path_buf_type,\n         pattern_parentheses,\n         phantom_data,\n         pin,\n@@ -1084,6 +1086,7 @@ symbols! {\n         slice,\n         slice_alloc,\n         slice_patterns,\n+        slice_to_vec_method,\n         slice_u8,\n         slice_u8_alloc,\n         slicing_syntax,\n@@ -1159,6 +1162,7 @@ symbols! {\n         then_with,\n         thread,\n         thread_local,\n+        to_owned_trait,\n         tool_attributes,\n         tool_lints,\n         trace_macros,"}, {"sha": "2fa349e3a4f419af45a507e026e415e54beec5b1", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ef202520f9c4c87dd6218bbfbbf57587e88f8be/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef202520f9c4c87dd6218bbfbbf57587e88f8be/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=5ef202520f9c4c87dd6218bbfbbf57587e88f8be", "patch": "@@ -32,6 +32,7 @@ where\n /// to `T`. The `ToOwned` trait generalizes `Clone` to construct owned data\n /// from any borrow of a given type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"to_owned_trait\")]\n pub trait ToOwned {\n     /// The resulting type after obtaining ownership.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "f8cc6a4587777ea5ce1b47c1cb293ada71b8b945", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ef202520f9c4c87dd6218bbfbbf57587e88f8be/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef202520f9c4c87dd6218bbfbbf57587e88f8be/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=5ef202520f9c4c87dd6218bbfbbf57587e88f8be", "patch": "@@ -442,6 +442,7 @@ impl<T> [T] {\n     /// // Here, `s` and `x` can be modified independently.\n     /// ```\n     #[rustc_conversion_suggestion]\n+    #[rustc_diagnostic_item = \"slice_to_vec_method\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_vec(&self) -> Vec<T>"}, {"sha": "c1629d8b8f95ea637f092d507f98179969ee6686", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ef202520f9c4c87dd6218bbfbbf57587e88f8be/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef202520f9c4c87dd6218bbfbbf57587e88f8be/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=5ef202520f9c4c87dd6218bbfbbf57587e88f8be", "patch": "@@ -71,6 +71,7 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// [`CStr`]: crate::ffi::CStr\n /// [conversions]: super#conversions\n #[derive(Clone)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"os_string_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsString {\n     inner: Buf,"}, {"sha": "66135a719be17cf32989a16abd54b1ea1f9480c3", "filename": "library/std/src/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ef202520f9c4c87dd6218bbfbbf57587e88f8be/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef202520f9c4c87dd6218bbfbbf57587e88f8be/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=5ef202520f9c4c87dd6218bbfbbf57587e88f8be", "patch": "@@ -1066,6 +1066,7 @@ impl FusedIterator for Ancestors<'_> {}\n ///\n /// Which method works best depends on what kind of situation you're in.\n #[derive(Clone)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"path_buf_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n // FIXME:\n // `PathBuf::as_mut_vec` current implementation relies"}]}