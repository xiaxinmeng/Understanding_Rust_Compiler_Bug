{"sha": "b2d0ec0eb4cb468fefb66da7af67b9cf8132373e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZDBlYzBlYjRjYjQ2OGZlZmI2NmRhN2FmNjdiOWNmODEzMjM3M2U=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-10-27T23:04:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-20T10:37:15Z"}, "message": "Fix coercion ICE", "tree": {"sha": "d213a72eeb2474d8deaac6276955d1b2616725bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d213a72eeb2474d8deaac6276955d1b2616725bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2d0ec0eb4cb468fefb66da7af67b9cf8132373e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d0ec0eb4cb468fefb66da7af67b9cf8132373e", "html_url": "https://github.com/rust-lang/rust/commit/b2d0ec0eb4cb468fefb66da7af67b9cf8132373e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2d0ec0eb4cb468fefb66da7af67b9cf8132373e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8057d485d435dcc4fb8e6f86708c71810199cf54", "url": "https://api.github.com/repos/rust-lang/rust/commits/8057d485d435dcc4fb8e6f86708c71810199cf54", "html_url": "https://github.com/rust-lang/rust/commit/8057d485d435dcc4fb8e6f86708c71810199cf54"}], "stats": {"total": 63, "additions": 24, "deletions": 39}, "files": [{"sha": "bd240c741331454930d7b2ef2501c4c03a2fb160", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b2d0ec0eb4cb468fefb66da7af67b9cf8132373e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d0ec0eb4cb468fefb66da7af67b9cf8132373e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=b2d0ec0eb4cb468fefb66da7af67b9cf8132373e", "patch": "@@ -354,25 +354,4 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                            -> Option<ty::AssociatedItem> {\n         self.tcx.associated_items(def_id).find(|item| item.name == item_name)\n     }\n-\n-    pub fn matches_return_type(&self, method: &ty::ImplOrTraitItem<'tcx>,\n-                           expected: ty::Ty<'tcx>) -> bool {\n-        match *method {\n-            ty::ImplOrTraitItem::MethodTraitItem(ref x) => {\n-                self.can_sub_types(x.fty.sig.skip_binder().output, expected).is_ok()\n-            }\n-            _ => false,\n-        }\n-    }\n-\n-    pub fn impl_or_return_item(&self,\n-                               def_id: DefId,\n-                               return_type: ty::Ty<'tcx>)\n-                               -> Option<ty::ImplOrTraitItem<'tcx>> {\n-        self.tcx\n-            .impl_or_trait_items(def_id)\n-            .iter()\n-            .map(|&did| self.tcx.impl_or_trait_item(did))\n-            .find(|m| self.matches_return_type(m, return_type))\n-    }\n }"}, {"sha": "e735360274e7e32db4b17472ecb5fc42987cd551", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b2d0ec0eb4cb468fefb66da7af67b9cf8132373e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d0ec0eb4cb468fefb66da7af67b9cf8132373e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=b2d0ec0eb4cb468fefb66da7af67b9cf8132373e", "patch": "@@ -21,7 +21,8 @@ use rustc::ty::subst::{Subst, Substs};\n use rustc::traits::{self, ObligationCause};\n use rustc::ty::{self, Ty, ToPolyTraitRef, TraitRef, TypeFoldable};\n use rustc::infer::type_variable::TypeVariableOrigin;\n-use rustc::util::nodemap::FxHashSet;\n+use rustc::util::nodemap::{FnvHashSet, FxHashSet};\n+use rustc::infer::{self, InferOk, TypeOrigin};\n use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir;\n@@ -626,27 +627,27 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         Ok(())\n     }\n \n+    pub fn matches_return_type(&self, method: &ty::ImplOrTraitItem<'tcx>,\n+                           expected: ty::Ty<'tcx>) -> bool {\n+        match *method {\n+            ty::ImplOrTraitItem::MethodTraitItem(ref x) => {\n+                self.probe(|_| {\n+                    let output = self.replace_late_bound_regions_with_fresh_var(\n+                        self.span, infer::FnCall, &x.fty.sig.output());\n+                    self.can_sub_types(output.0, expected).is_ok()\n+                })\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     fn assemble_extension_candidates_for_trait(&mut self,\n                                                trait_def_id: DefId)\n                                                -> Result<(), MethodError<'tcx>> {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\",\n                trait_def_id);\n \n-        // Check whether `trait_def_id` defines a method with suitable name:\n-        let trait_items = self.tcx.associated_items(trait_def_id);\n-        let maybe_item = match self.looking_for {\n-            LookingFor::MethodName(item_name) => {\n-                trait_items.iter()\n-                           .find(|item| item.name == item_name)\n-            }\n-            LookingFor::ReturnType(item_ty) => {\n-                trait_items.iter()\n-                           .find(|item| {\n-                                self.fcx.matches_return_type(item, &item_ty)\n-                            })\n-            }\n-        };\n-        let item = match maybe_item {\n+        let item = match self.impl_or_trait_item(trait_def_id) {\n             Some(i) => i,\n             None => {\n                 return Ok(());\n@@ -1351,7 +1352,11 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 self.fcx.impl_or_trait_item(def_id, name)\n             }\n             LookingFor::ReturnType(return_ty) => {\n-                self.fcx.impl_or_return_item(def_id, return_ty)\n+                self.tcx\n+                    .impl_or_trait_items(def_id)\n+                    .iter()\n+                    .map(|&did| self.tcx.impl_or_trait_item(did))\n+                    .find(|m| self.matches_return_type(m, return_ty))\n             }\n         }\n     }"}, {"sha": "a176a1ddede8eb6a49353b48c18688625d453517", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2d0ec0eb4cb468fefb66da7af67b9cf8132373e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d0ec0eb4cb468fefb66da7af67b9cf8132373e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b2d0ec0eb4cb468fefb66da7af67b9cf8132373e", "patch": "@@ -652,7 +652,8 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                                    \"internal implementation detail\",\n                                                    cfg_fn!(rustc_attrs))),\n \n-    (\"safe_suggestion\", Whitelisted, Gated(\"safe_suggestion\",\n+    (\"safe_suggestion\", Whitelisted, Gated(Stability::Unstable,\n+                                           \"safe_suggestion\",\n                                            \"the `#[safe_suggestion]` attribute \\\n                                             is an experimental feature\",\n                                            cfg_fn!(safe_suggestion))),"}]}