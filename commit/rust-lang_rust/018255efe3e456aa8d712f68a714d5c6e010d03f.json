{"sha": "018255efe3e456aa8d712f68a714d5c6e010d03f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxODI1NWVmZTNlNDU2YWE4ZDcxMmY2OGE3MTRkNWM2ZTAxMGQwM2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-13T07:27:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-13T07:32:53Z"}, "message": "Minor cleanup", "tree": {"sha": "8056453dcec060d3fcdea6cec5579e552975230c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8056453dcec060d3fcdea6cec5579e552975230c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/018255efe3e456aa8d712f68a714d5c6e010d03f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/018255efe3e456aa8d712f68a714d5c6e010d03f", "html_url": "https://github.com/rust-lang/rust/commit/018255efe3e456aa8d712f68a714d5c6e010d03f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/018255efe3e456aa8d712f68a714d5c6e010d03f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70dd70b1fcbbbe2e60849412412ef05e7d31eb0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/70dd70b1fcbbbe2e60849412412ef05e7d31eb0a", "html_url": "https://github.com/rust-lang/rust/commit/70dd70b1fcbbbe2e60849412412ef05e7d31eb0a"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "f4461000198098016f3ef29d677c9ff96586303a", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/018255efe3e456aa8d712f68a714d5c6e010d03f/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018255efe3e456aa8d712f68a714d5c6e010d03f/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=018255efe3e456aa8d712f68a714d5c6e010d03f", "patch": "@@ -38,27 +38,27 @@ use crate::{\n // ```\n pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n+    if if_expr.else_branch().is_some() {\n+        return None;\n+    }\n+\n     let cond = if_expr.condition()?;\n-    let mut if_let_ident: Option<String> = None;\n \n     // Check if there is an IfLet that we can handle.\n-    match cond.pat() {\n-        None => {} // No IfLet, supported.\n-        Some(TupleStructPat(ref pat)) if pat.args().count() == 1usize => match &pat.path() {\n-            Some(p) => match p.qualifier() {\n-                None => if_let_ident = Some(p.syntax().text().to_string()),\n-                _ => return None,\n-            },\n-            _ => return None,\n-        },\n-        _ => return None, // Unsupported IfLet.\n+    let if_let_ident = match cond.pat() {\n+        None => None, // No IfLet, supported.\n+        Some(TupleStructPat(pat)) if pat.args().count() == 1 => {\n+            let path = pat.path()?;\n+            match path.qualifier() {\n+                None => Some(path.syntax().to_string()),\n+                Some(_) => return None,\n+            }\n+        }\n+        Some(_) => return None, // Unsupported IfLet.\n     };\n \n     let expr = cond.expr()?;\n     let then_block = if_expr.then_branch()?.block()?;\n-    if if_expr.else_branch().is_some() {\n-        return None;\n-    }\n \n     let parent_block = if_expr.syntax().parent()?.ancestors().find_map(ast::Block::cast)?;\n \n@@ -100,7 +100,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n                 let early_expression = &(early_expression.to_owned() + \";\");\n                 let new_expr =\n                     if_indent_level.increase_indent(make::if_expression(&expr, early_expression));\n-                replace(new_expr, &then_block, &parent_block, &if_expr)\n+                replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)\n             }\n             Some(if_let_ident) => {\n                 // If-let.\n@@ -109,15 +109,15 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n                     &if_let_ident,\n                     early_expression,\n                 ));\n-                replace(new_expr, &then_block, &parent_block, &if_expr)\n+                replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)\n             }\n         };\n         edit.target(if_expr.syntax().text_range());\n         edit.replace_ast(parent_block, ast::Block::cast(new_block).unwrap());\n         edit.set_cursor(cursor_position);\n \n         fn replace(\n-            new_expr: impl AstNode,\n+            new_expr: &SyntaxNode,\n             then_block: &Block,\n             parent_block: &Block,\n             if_expr: &ast::IfExpr,\n@@ -130,7 +130,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n                 } else {\n                     end_of_then\n                 };\n-            let mut then_statements = new_expr.syntax().children_with_tokens().chain(\n+            let mut then_statements = new_expr.children_with_tokens().chain(\n                 then_block_items\n                     .syntax()\n                     .children_with_tokens()\n@@ -151,9 +151,10 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::helpers::{check_assist, check_assist_not_applicable};\n \n+    use super::*;\n+\n     #[test]\n     fn convert_inside_fn() {\n         check_assist("}, {"sha": "c46eaa407ab15bc0e6730e068b2904c08fd39351", "filename": "xtask/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018255efe3e456aa8d712f68a714d5c6e010d03f/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018255efe3e456aa8d712f68a714d5c6e010d03f/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=018255efe3e456aa8d712f68a714d5c6e010d03f", "patch": "@@ -19,7 +19,7 @@ use xtask::{\n };\n \n // Latest stable, feel free to send a PR if this lags behind.\n-const REQUIRED_RUST_VERSION: u32 = 38;\n+const REQUIRED_RUST_VERSION: u32 = 39;\n \n struct InstallOpt {\n     client: Option<ClientOpt>,"}]}