{"sha": "a1776b27c7d7c266d751360b80cc573b1520ef65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNzc2YjI3YzdkN2MyNjZkNzUxMzYwYjgwY2M1NzNiMTUyMGVmNjU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-07T14:24:26Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-07T14:30:31Z"}, "message": "Use traits from where clauses for method resolution\n\nE.g. if we have `T: some::Trait`, we can call methods from that trait without it\nneeding to be in scope.", "tree": {"sha": "743356958f4968ae08f5891f10a09bfbc6eb6443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/743356958f4968ae08f5891f10a09bfbc6eb6443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1776b27c7d7c266d751360b80cc573b1520ef65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1776b27c7d7c266d751360b80cc573b1520ef65", "html_url": "https://github.com/rust-lang/rust/commit/a1776b27c7d7c266d751360b80cc573b1520ef65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1776b27c7d7c266d751360b80cc573b1520ef65/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d21cdf3c998bb24e48e81a7e6909df2146ce097c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d21cdf3c998bb24e48e81a7e6909df2146ce097c", "html_url": "https://github.com/rust-lang/rust/commit/d21cdf3c998bb24e48e81a7e6909df2146ce097c"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "52ee1834ffc914d8f595176e68aecfb854c9feb9", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a1776b27c7d7c266d751360b80cc573b1520ef65/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1776b27c7d7c266d751360b80cc573b1520ef65/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=a1776b27c7d7c266d751360b80cc573b1520ef65", "patch": "@@ -847,16 +847,22 @@ impl Trait {\n             .collect()\n     }\n \n-    /// Returns an iterator over the whole super trait hierarchy (not including\n-    /// the trait itself). (This iterator may be infinite in case of circular\n-    /// super trait dependencies, which are possible in malformed code.)\n+    /// Returns an iterator over the whole super trait hierarchy (including the\n+    /// trait itself).\n     pub fn all_super_traits<'a>(\n         self,\n         db: &'a impl HirDatabase,\n     ) -> impl Iterator<Item = Trait> + 'a {\n-        self.direct_super_traits(db).into_iter().flat_map(move |t| {\n+        self.all_super_traits_inner(db).unique()\n+    }\n+\n+    fn all_super_traits_inner<'a>(\n+        self,\n+        db: &'a impl HirDatabase,\n+    ) -> impl Iterator<Item = Trait> + 'a {\n+        iter::once(self).chain(self.direct_super_traits(db).into_iter().flat_map(move |t| {\n             iter::once(t).chain(Box::new(t.all_super_traits(db)) as Box<dyn Iterator<Item = Trait>>)\n-        })\n+        }))\n     }\n \n     pub fn associated_type_by_name(self, db: &impl DefDatabase, name: &Name) -> Option<TypeAlias> {\n@@ -876,10 +882,7 @@ impl Trait {\n         db: &impl HirDatabase,\n         name: &Name,\n     ) -> Option<TypeAlias> {\n-        iter::once(self)\n-            .chain(self.all_super_traits(db))\n-            .unique()\n-            .find_map(|t| t.associated_type_by_name(db, name))\n+        self.all_super_traits(db).find_map(|t| t.associated_type_by_name(db, name))\n     }\n \n     pub(crate) fn trait_data(self, db: &impl DefDatabase) -> Arc<TraitData> {"}, {"sha": "cf787bdaad4137fbe5a04e9438e48eae955bcb17", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1776b27c7d7c266d751360b80cc573b1520ef65/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1776b27c7d7c266d751360b80cc573b1520ef65/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=a1776b27c7d7c266d751360b80cc573b1520ef65", "patch": "@@ -212,7 +212,13 @@ fn iterate_trait_method_candidates<T>(\n     // FIXME: maybe put the trait_env behind a query (need to figure out good input parameters for that)\n     let env = lower::trait_env(db, resolver);\n     // if ty is `impl Trait` or `dyn Trait`, the trait doesn't need to be in scope\n-    let traits = ty.value.inherent_trait().into_iter().chain(resolver.traits_in_scope(db));\n+    let inherent_trait = ty.value.inherent_trait().into_iter();\n+    // if we have `T: Trait` in the param env, the trait doesn't need to be in scope\n+    let traits_from_env = env\n+        .trait_predicates_for_self_ty(&ty.value)\n+        .map(|tr| tr.trait_)\n+        .flat_map(|t| t.all_super_traits(db));\n+    let traits = inherent_trait.chain(traits_from_env).chain(resolver.traits_in_scope(db));\n     'traits: for t in traits {\n         let data = t.trait_data(db);\n "}, {"sha": "127c69f8aa687662d4bb2be48db4eeb4ac31cd7e", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a1776b27c7d7c266d751360b80cc573b1520ef65/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1776b27c7d7c266d751360b80cc573b1520ef65/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=a1776b27c7d7c266d751360b80cc573b1520ef65", "patch": "@@ -3660,8 +3660,7 @@ fn test<T: foo::Trait>(x: T) {\n }\n \"#,\n     );\n-    // FIXME should be u32\n-    assert_eq!(t, \"{unknown}\");\n+    assert_eq!(t, \"u32\");\n }\n \n #[test]\n@@ -3673,8 +3672,8 @@ mod foo {\n         fn foo(&self) -> u32 {}\n     }\n }\n-trait Trait1: SuperTrait {}\n-trait Trait2 where Self: SuperTrait {}\n+trait Trait1: foo::SuperTrait {}\n+trait Trait2 where Self: foo::SuperTrait {}\n \n fn test<T: Trait1, U: Trait2>(x: T, y: U) {\n     x.foo();\n@@ -3684,13 +3683,13 @@ fn test<T: Trait1, U: Trait2>(x: T, y: U) {\n         @r###\"\n     [50; 54) 'self': &Self\n     [63; 65) '{}': ()\n-    [172; 173) 'x': T\n-    [178; 179) 'y': U\n-    [184; 213) '{     ...o(); }': ()\n-    [190; 191) 'x': T\n-    [190; 197) 'x.foo()': {unknown}\n-    [203; 204) 'y': U\n-    [203; 210) 'y.foo()': {unknown}\n+    [182; 183) 'x': T\n+    [188; 189) 'y': U\n+    [194; 223) '{     ...o(); }': ()\n+    [200; 201) 'x': T\n+    [200; 207) 'x.foo()': {unknown}\n+    [213; 214) 'y': U\n+    [213; 220) 'y.foo()': {unknown}\n     \"###\n     );\n }"}, {"sha": "c0c132809b59a9eab609b262442620a8e242713e", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a1776b27c7d7c266d751360b80cc573b1520ef65/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1776b27c7d7c266d751360b80cc573b1520ef65/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=a1776b27c7d7c266d751360b80cc573b1520ef65", "patch": "@@ -96,6 +96,21 @@ pub struct TraitEnvironment {\n     pub predicates: Vec<GenericPredicate>,\n }\n \n+impl TraitEnvironment {\n+    /// Returns trait refs with the given self type which are supposed to hold\n+    /// in this trait env. E.g. if we are in `foo<T: SomeTrait>()`, this will\n+    /// find that `T: SomeTrait` if we call it for `T`.\n+    pub(crate) fn trait_predicates_for_self_ty<'a>(\n+        &'a self,\n+        ty: &'a Ty,\n+    ) -> impl Iterator<Item = &'a TraitRef> + 'a {\n+        self.predicates.iter().filter_map(move |pred| match pred {\n+            GenericPredicate::Implemented(tr) if tr.self_ty() == ty => Some(tr),\n+            _ => None,\n+        })\n+    }\n+}\n+\n /// Something (usually a goal), along with an environment.\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct InEnvironment<T> {"}]}