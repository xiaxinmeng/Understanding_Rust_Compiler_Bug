{"sha": "65bdf84beaee439d8a122ae6ec2ee921e5a9e0bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YmRmODRiZWFlZTQzOWQ4YTEyMmFlNmVjMmVlOTIxZTVhOWUwYmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-06T14:26:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T14:26:26Z"}, "message": "Merge #8742\n\n8742: fix: Do not overwrite comments and attrs in trait impl completion r=Veykril a=Jesse-Bakker\n\nFixes #8739\n\n\nCo-authored-by: Jesse Bakker <github@jessebakker.com>", "tree": {"sha": "e38abb2e9c7399a258896c39395cd6fbef08fac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e38abb2e9c7399a258896c39395cd6fbef08fac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65bdf84beaee439d8a122ae6ec2ee921e5a9e0bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgk/ySCRBK7hj4Ov3rIwAASjIIAFMr6hO+qZDEM3FUeaVOZFLk\njuq7bZquG+8SjfAu1HbTiqBPrKvRSV7H2LPUtzvxP35lYx53GKa6kVKcjD8ecPs+\nJ1rAcDW3yw9lGr4nbooS1Rhfsvfb33M+4yovCQumYvXVJtCCZYx6GX1hFpTOwt+m\nijg1GisN/BOOmCLCW59aM9fUegbis4F1FVoH7sXuXyDxiqItYe4IQR4sJPAyS2zp\nlsW5GkWpfzapwVlLCURdxEoofHeEnrWTzQtWMA3uR8apjlBvnDYmBap0kAtXRUK+\nvsiWGjGXRqcvr+g281NsAcuVy26x7t2jIRIZdrAobbozat3bVxNbboOvmiTTOPs=\n=PoTM\n-----END PGP SIGNATURE-----\n", "payload": "tree e38abb2e9c7399a258896c39395cd6fbef08fac2\nparent c3596371d841ebb949dc8b99acc3bc902e4d808a\nparent 10254b5d953c2031edeb6a5fd78dbaed867c2268\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620311186 +0000\ncommitter GitHub <noreply@github.com> 1620311186 +0000\n\nMerge #8742\n\n8742: fix: Do not overwrite comments and attrs in trait impl completion r=Veykril a=Jesse-Bakker\n\nFixes #8739\n\n\nCo-authored-by: Jesse Bakker <github@jessebakker.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65bdf84beaee439d8a122ae6ec2ee921e5a9e0bb", "html_url": "https://github.com/rust-lang/rust/commit/65bdf84beaee439d8a122ae6ec2ee921e5a9e0bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65bdf84beaee439d8a122ae6ec2ee921e5a9e0bb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3596371d841ebb949dc8b99acc3bc902e4d808a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3596371d841ebb949dc8b99acc3bc902e4d808a", "html_url": "https://github.com/rust-lang/rust/commit/c3596371d841ebb949dc8b99acc3bc902e4d808a"}, {"sha": "10254b5d953c2031edeb6a5fd78dbaed867c2268", "url": "https://api.github.com/repos/rust-lang/rust/commits/10254b5d953c2031edeb6a5fd78dbaed867c2268", "html_url": "https://github.com/rust-lang/rust/commit/10254b5d953c2031edeb6a5fd78dbaed867c2268"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "78fbfcd97f7a9516948fff6219a2b4fa57d1caa4", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 65, "deletions": 8, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/65bdf84beaee439d8a122ae6ec2ee921e5a9e0bb/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bdf84beaee439d8a122ae6ec2ee921e5a9e0bb/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=65bdf84beaee439d8a122ae6ec2ee921e5a9e0bb", "patch": "@@ -36,7 +36,7 @@ use ide_db::{traits::get_missing_assoc_items, SymbolKind};\n use syntax::{\n     ast::{self, edit, Impl},\n     display::function_declaration,\n-    AstNode, SyntaxKind, SyntaxNode, TextRange, T,\n+    AstNode, SyntaxElement, SyntaxKind, SyntaxNode, TextRange, T,\n };\n use text_edit::TextEdit;\n \n@@ -154,8 +154,7 @@ fn add_function_impl(\n     } else {\n         CompletionItemKind::SymbolKind(SymbolKind::Function)\n     };\n-    let range = TextRange::new(fn_def_node.text_range().start(), ctx.source_range().end());\n-\n+    let range = replacement_range(ctx, fn_def_node);\n     if let Some(src) = func.source(ctx.db) {\n         let function_decl = function_declaration(&src.value);\n         match ctx.config.snippet_cap {\n@@ -183,8 +182,7 @@ fn add_type_alias_impl(\n \n     let snippet = format!(\"type {} = \", alias_name);\n \n-    let range = TextRange::new(type_def_node.text_range().start(), ctx.source_range().end());\n-\n+    let range = replacement_range(ctx, type_def_node);\n     let mut item = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone());\n     item.text_edit(TextEdit::replace(range, snippet))\n         .lookup_by(alias_name)\n@@ -205,9 +203,7 @@ fn add_const_impl(\n         if let Some(source) = const_.source(ctx.db) {\n             let snippet = make_const_compl_syntax(&source.value);\n \n-            let range =\n-                TextRange::new(const_def_node.text_range().start(), ctx.source_range().end());\n-\n+            let range = replacement_range(ctx, const_def_node);\n             let mut item =\n                 CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone());\n             item.text_edit(TextEdit::replace(range, snippet))\n@@ -242,6 +238,21 @@ fn make_const_compl_syntax(const_: &ast::Const) -> String {\n     format!(\"{} = \", syntax.trim_end())\n }\n \n+fn replacement_range(ctx: &CompletionContext, item: &SyntaxNode) -> TextRange {\n+    let first_child = item\n+        .children_with_tokens()\n+        .find(|child| {\n+            let kind = child.kind();\n+            match kind {\n+                SyntaxKind::COMMENT | SyntaxKind::WHITESPACE | SyntaxKind::ATTR => false,\n+                _ => true,\n+            }\n+        })\n+        .unwrap_or(SyntaxElement::Node(item.clone()));\n+\n+    TextRange::new(first_child.text_range().start(), ctx.source_range().end())\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -734,4 +745,50 @@ impl Test for T {{\n             test(\"CONST\", \"const $0\", \"const CONST: u16 = \", next_sibling);\n         }\n     }\n+\n+    #[test]\n+    fn snippet_does_not_overwrite_comment_or_attr() {\n+        let test = |completion: &str, hint: &str, completed: &str| {\n+            check_edit(\n+                completion,\n+                &format!(\n+                    r#\"\n+trait Foo {{\n+    type Type;\n+    fn function();\n+    const CONST: i32 = 0;\n+}}\n+struct T;\n+\n+impl Foo for T {{\n+    // Comment\n+    #[bar]\n+    {}\n+}}\n+\"#,\n+                    hint\n+                ),\n+                &format!(\n+                    r#\"\n+trait Foo {{\n+    type Type;\n+    fn function();\n+    const CONST: i32 = 0;\n+}}\n+struct T;\n+\n+impl Foo for T {{\n+    // Comment\n+    #[bar]\n+    {}\n+}}\n+\"#,\n+                    completed\n+                ),\n+            )\n+        };\n+        test(\"function\", \"fn f$0\", \"fn function() {\\n    $0\\n}\");\n+        test(\"Type\", \"type T$0\", \"type Type = \");\n+        test(\"CONST\", \"const C$0\", \"const CONST: i32 = \");\n+    }\n }"}]}