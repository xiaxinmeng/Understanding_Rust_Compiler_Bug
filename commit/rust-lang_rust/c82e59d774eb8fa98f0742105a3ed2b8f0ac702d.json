{"sha": "c82e59d774eb8fa98f0742105a3ed2b8f0ac702d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MmU1OWQ3NzRlYjhmYTk4ZjA3NDIxMDVhM2VkMmI4ZjBhYzcwMmQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-12-07T02:00:08Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-12-25T11:19:37Z"}, "message": "std::ascii: Use u8 methods rather than the maps directly.", "tree": {"sha": "242607a69295c0597736522da8b10306bd8dc4eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/242607a69295c0597736522da8b10306bd8dc4eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c82e59d774eb8fa98f0742105a3ed2b8f0ac702d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c82e59d774eb8fa98f0742105a3ed2b8f0ac702d", "html_url": "https://github.com/rust-lang/rust/commit/c82e59d774eb8fa98f0742105a3ed2b8f0ac702d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c82e59d774eb8fa98f0742105a3ed2b8f0ac702d/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a6ccdc263d9a169c2d317a6f78664e1f18d3b15", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15", "html_url": "https://github.com/rust-lang/rust/commit/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "c3af95f15988dac0266460a6adffb0467f3581b6", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c82e59d774eb8fa98f0742105a3ed2b8f0ac702d/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e59d774eb8fa98f0742105a3ed2b8f0ac702d/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=c82e59d774eb8fa98f0742105a3ed2b8f0ac702d", "patch": "@@ -108,22 +108,20 @@ impl AsciiExt<Vec<u8>> for [u8] {\n \n     #[inline]\n     fn to_ascii_uppercase(&self) -> Vec<u8> {\n-        self.iter().map(|&byte| ASCII_UPPER_MAP[byte as uint]).collect()\n+        self.iter().map(|b| b.to_ascii_uppercase()).collect()\n     }\n \n     #[inline]\n     fn to_ascii_lowercase(&self) -> Vec<u8> {\n-        self.iter().map(|&byte| ASCII_LOWER_MAP[byte as uint]).collect()\n+        self.iter().map(|b| b.to_ascii_lowercase()).collect()\n     }\n \n     #[inline]\n     fn eq_ignore_ascii_case(&self, other: &[u8]) -> bool {\n         self.len() == other.len() &&\n-            self.iter().zip(other.iter()).all(\n-            |(byte_self, byte_other)| {\n-                ASCII_LOWER_MAP[*byte_self as uint] ==\n-                    ASCII_LOWER_MAP[*byte_other as uint]\n-            })\n+        self.iter().zip(other.iter()).all(|(a, b)| {\n+            a.eq_ignore_ascii_case(b)\n+        })\n     }\n }\n \n@@ -132,15 +130,15 @@ impl OwnedAsciiExt for Vec<u8> {\n     #[inline]\n     fn into_ascii_uppercase(mut self) -> Vec<u8> {\n         for byte in self.iter_mut() {\n-            *byte = ASCII_UPPER_MAP[*byte as uint];\n+            *byte = byte.to_ascii_uppercase();\n         }\n         self\n     }\n \n     #[inline]\n     fn into_ascii_lowercase(mut self) -> Vec<u8> {\n         for byte in self.iter_mut() {\n-            *byte = ASCII_LOWER_MAP[*byte as uint];\n+            *byte = byte.to_ascii_lowercase();\n         }\n         self\n     }\n@@ -155,17 +153,17 @@ impl AsciiExt for u8 {\n \n     #[inline]\n     fn to_ascii_uppercase(&self) -> u8 {\n-        ASCII_UPPER_MAP[*self as uint]\n+        ASCII_UPPERCASE_MAP[*self as uint]\n     }\n \n     #[inline]\n     fn to_ascii_lowercase(&self) -> u8 {\n-        ASCII_LOWER_MAP[*self as uint]\n+        ASCII_LOWERCASE_MAP[*self as uint]\n     }\n \n     #[inline]\n     fn eq_ignore_ascii_case(&self, other: &u8) -> bool {\n-        ASCII_LOWER_MAP[*self as uint] == ASCII_LOWER_MAP[*other as uint]\n+        self.to_ascii_lowercase() == other.to_ascii_lowercase()\n     }\n }\n \n@@ -179,7 +177,7 @@ impl AsciiExt for char {\n     #[inline]\n     fn to_ascii_uppercase(&self) -> char {\n         if self.is_ascii() {\n-            ASCII_UPPER_MAP[*self as uint] as char\n+            (*self as u8).to_ascii_uppercase() as char\n         } else {\n             *self\n         }\n@@ -188,7 +186,7 @@ impl AsciiExt for char {\n     #[inline]\n     fn to_ascii_lowercase(&self) -> char {\n         if self.is_ascii() {\n-            ASCII_UPPER_MAP[*self as uint] as char\n+            (*self as u8).to_ascii_lowercase() as char\n         } else {\n             *self\n         }\n@@ -236,7 +234,7 @@ pub fn escape_default<F>(c: u8, mut f: F) where\n     }\n }\n \n-static ASCII_LOWER_MAP: [u8, ..256] = [\n+static ASCII_LOWERCASE_MAP: [u8, ..256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n@@ -275,7 +273,7 @@ static ASCII_LOWER_MAP: [u8, ..256] = [\n     0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,\n ];\n \n-static ASCII_UPPER_MAP: [u8, ..256] = [\n+static ASCII_UPPERCASE_MAP: [u8, ..256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,"}]}