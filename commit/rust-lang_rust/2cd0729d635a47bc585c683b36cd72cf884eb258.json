{"sha": "2cd0729d635a47bc585c683b36cd72cf884eb258", "node_id": "C_kwDOAAsO6NoAKDJjZDA3MjlkNjM1YTQ3YmM1ODVjNjgzYjM2Y2Q3MmNmODg0ZWIyNTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-06T23:24:03Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-06T23:30:22Z"}, "message": "Get rid of elaborate_trait_ref{s} too", "tree": {"sha": "2571acbe0e16e56cd578e9326d54d2a5994ca44b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2571acbe0e16e56cd578e9326d54d2a5994ca44b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cd0729d635a47bc585c683b36cd72cf884eb258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd0729d635a47bc585c683b36cd72cf884eb258", "html_url": "https://github.com/rust-lang/rust/commit/2cd0729d635a47bc585c683b36cd72cf884eb258", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cd0729d635a47bc585c683b36cd72cf884eb258/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758bedc10454b1d101613f4b363fe54c7a405b00", "url": "https://api.github.com/repos/rust-lang/rust/commits/758bedc10454b1d101613f4b363fe54c7a405b00", "html_url": "https://github.com/rust-lang/rust/commit/758bedc10454b1d101613f4b363fe54c7a405b00"}], "stats": {"total": 37, "additions": 14, "deletions": 23}, "files": [{"sha": "6727173cd886d74635ee8601e62c2f075ee66abc", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cd0729d635a47bc585c683b36cd72cf884eb258/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd0729d635a47bc585c683b36cd72cf884eb258/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=2cd0729d635a47bc585c683b36cd72cf884eb258", "patch": "@@ -33,9 +33,9 @@ use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKin\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::fold::FnMutDelegate;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, SubstsRef};\n-use rustc_middle::ty::DynKind;\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, Const, IsSuggestable, Ty, TyCtxt, TypeVisitableExt};\n+use rustc_middle::ty::{DynKind, ToPredicate};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::edition::Edition;\n@@ -1526,8 +1526,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         for (base_trait_ref, span, constness) in regular_traits_refs_spans {\n             assert_eq!(constness, ty::BoundConstness::NotConst);\n-\n-            for pred in traits::elaborate_trait_ref(tcx, base_trait_ref) {\n+            let base_pred: ty::Predicate<'tcx> = base_trait_ref.to_predicate(tcx);\n+            for pred in traits::elaborate(tcx, [base_pred]) {\n                 debug!(\"conv_object_ty_poly_trait_ref: observing object predicate `{:?}`\", pred);\n \n                 let bound_predicate = pred.kind();"}, {"sha": "c7f7ed149407acaa297f9027f91b9e41c01b99fe", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2cd0729d635a47bc585c683b36cd72cf884eb258/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd0729d635a47bc585c683b36cd72cf884eb258/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=2cd0729d635a47bc585c683b36cd72cf884eb258", "patch": "@@ -166,20 +166,6 @@ impl<'tcx> Elaboratable<'tcx> for (ty::Predicate<'tcx>, Span) {\n     }\n }\n \n-pub fn elaborate_trait_ref<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    trait_ref: ty::PolyTraitRef<'tcx>,\n-) -> Elaborator<'tcx, ty::Predicate<'tcx>> {\n-    elaborate(tcx, std::iter::once(trait_ref.without_const().to_predicate(tcx)))\n-}\n-\n-pub fn elaborate_trait_refs<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    trait_refs: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,\n-) -> Elaborator<'tcx, ty::Predicate<'tcx>> {\n-    elaborate(tcx, trait_refs.map(|trait_ref| trait_ref.to_predicate(tcx)))\n-}\n-\n pub fn elaborate<'tcx, O: Elaboratable<'tcx>>(\n     tcx: TyCtxt<'tcx>,\n     obligations: impl IntoIterator<Item = O>,\n@@ -364,17 +350,21 @@ pub fn supertraits<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>,\n ) -> impl Iterator<Item = ty::PolyTraitRef<'tcx>> {\n-    FilterToTraits::new(elaborate_trait_ref(tcx, trait_ref))\n+    let pred: ty::Predicate<'tcx> = trait_ref.to_predicate(tcx);\n+    FilterToTraits::new(elaborate(tcx, [pred]))\n }\n \n pub fn transitive_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_refs: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,\n ) -> impl Iterator<Item = ty::PolyTraitRef<'tcx>> {\n-    FilterToTraits::new(elaborate_trait_refs(tcx, trait_refs))\n+    FilterToTraits::new(elaborate(\n+        tcx,\n+        trait_refs.map(|trait_ref| -> ty::Predicate<'tcx> { trait_ref.to_predicate(tcx) }),\n+    ))\n }\n \n-/// A specialized variant of `elaborate_trait_refs` that only elaborates trait references that may\n+/// A specialized variant of `elaborate` that only elaborates trait references that may\n /// define the given associated type `assoc_name`. It uses the\n /// `super_predicates_that_define_assoc_type` query to avoid enumerating super-predicates that\n /// aren't related to `assoc_item`. This is used when resolving types like `Self::Item` or"}, {"sha": "8a203dec86bab6fe2cf18c3b03836a495ee7c3b0", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cd0729d635a47bc585c683b36cd72cf884eb258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd0729d635a47bc585c683b36cd72cf884eb258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=2cd0729d635a47bc585c683b36cd72cf884eb258", "patch": "@@ -58,7 +58,7 @@ pub use self::specialize::{specialization_graph, translate_substs, OverlapError}\n pub use self::structural_match::{\n     search_for_adt_const_param_violation, search_for_structural_match_violation,\n };\n-pub use self::util::{elaborate, elaborate_trait_ref, elaborate_trait_refs};\n+pub use self::util::elaborate;\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n pub use self::util::{get_vtable_index_of_object_method, impl_item_is_final, upcast_choices};\n pub use self::util::{"}, {"sha": "b8ad1925e4eaa706d54442a5d88b47ea5a3bd26d", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cd0729d635a47bc585c683b36cd72cf884eb258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd0729d635a47bc585c683b36cd72cf884eb258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=2cd0729d635a47bc585c683b36cd72cf884eb258", "patch": "@@ -8,7 +8,7 @@\n //!   - not reference the erased type `Self` except for in this receiver;\n //!   - not have generic type parameters.\n \n-use super::{elaborate, elaborate_trait_ref};\n+use super::elaborate;\n \n use crate::infer::TyCtxtInferExt;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -666,7 +666,8 @@ fn object_ty_for_trait<'tcx>(\n     });\n     debug!(?trait_predicate);\n \n-    let mut elaborated_predicates: Vec<_> = elaborate_trait_ref(tcx, trait_ref)\n+    let pred: ty::Predicate<'tcx> = trait_ref.to_predicate(tcx);\n+    let mut elaborated_predicates: Vec<_> = elaborate(tcx, [pred])\n         .filter_map(|pred| {\n             debug!(?pred);\n             let pred = pred.to_opt_poly_projection_pred()?;"}]}