{"sha": "b2b7c859c1aae39d26884e760201f5e6c7feeff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYjdjODU5YzFhYWUzOWQyNjg4NGU3NjAyMDFmNWU2YzdmZWVmZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-23T03:40:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-23T03:40:26Z"}, "message": "Auto merge of #87287 - oli-obk:fixup_fixup_fixup_opaque_types, r=spastorino\n\n Make mir borrowck's use of opaque types independent of the typeck query's result\n\nfixes #87218\nfixes #86465\n\nwe used to use the typeck results only to generate an obligation for the mir borrowck type to be equal to the typeck result.\n\nWhen i removed the `fixup_opaque_types` function in #87200, I exposed a bug that showed that mir borrowck can't doesn't get enough information from typeck in order to build the correct lifetime mapping from opaque type usage to the actual concrete type. We therefor now fully compute the information within mir borrowck (we already did that, but we only used it to verify the typeck result) and stop using the typeck information.\n\nWe will likely be able to remove most opaque type information from the borrowck results in the future and just have all current callers use the mir borrowck result instead.\n\nr? `@spastorino`", "tree": {"sha": "29d9761b641abbd180fdb8450d50791f6e24106c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29d9761b641abbd180fdb8450d50791f6e24106c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2b7c859c1aae39d26884e760201f5e6c7feeff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b7c859c1aae39d26884e760201f5e6c7feeff9", "html_url": "https://github.com/rust-lang/rust/commit/b2b7c859c1aae39d26884e760201f5e6c7feeff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2b7c859c1aae39d26884e760201f5e6c7feeff9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "027187094ee05011d6602f5742f550851ccc7fd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/027187094ee05011d6602f5742f550851ccc7fd6", "html_url": "https://github.com/rust-lang/rust/commit/027187094ee05011d6602f5742f550851ccc7fd6"}, {"sha": "d10385242d750288bcbd9e1ab06586217cb2fe2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10385242d750288bcbd9e1ab06586217cb2fe2b", "html_url": "https://github.com/rust-lang/rust/commit/d10385242d750288bcbd9e1ab06586217cb2fe2b"}], "stats": {"total": 507, "additions": 206, "deletions": 301}, "files": [{"sha": "4467980054f5462c4c12754087d77fe951c7f887", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -24,6 +24,7 @@\n #![feature(new_uninit)]\n #![feature(once_cell)]\n #![feature(maybe_uninit_uninit_array)]\n+#![feature(min_type_alias_impl_trait)]\n #![allow(rustc::default_hash_types)]\n #![deny(unaligned_references)]\n "}, {"sha": "e3fa587985df0f12afecc8282e99450e2553b763", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -1,6 +1,6 @@\n use std::borrow::Borrow;\n use std::iter::FromIterator;\n-use std::slice::{Iter, IterMut};\n+use std::slice::Iter;\n use std::vec::IntoIter;\n \n use crate::stable_hasher::{HashStable, StableHasher};\n@@ -67,9 +67,13 @@ where\n         self.into_iter()\n     }\n \n-    pub fn iter_mut(&mut self) -> IterMut<'_, (K, V)> {\n+    pub fn iter_mut(&mut self) -> impl Iterator<Item = (&K, &mut V)> {\n         self.into_iter()\n     }\n+\n+    pub fn retain(&mut self, f: impl Fn(&(K, V)) -> bool) {\n+        self.0.retain(f)\n+    }\n }\n \n impl<K, V> Default for VecMap<K, V> {\n@@ -108,12 +112,12 @@ impl<'a, K, V> IntoIterator for &'a VecMap<K, V> {\n }\n \n impl<'a, K, V> IntoIterator for &'a mut VecMap<K, V> {\n-    type Item = &'a mut (K, V);\n-    type IntoIter = IterMut<'a, (K, V)>;\n+    type Item = (&'a K, &'a mut V);\n+    type IntoIter = impl Iterator<Item = Self::Item>;\n \n     #[inline]\n     fn into_iter(self) -> Self::IntoIter {\n-        self.0.iter_mut()\n+        self.0.iter_mut().map(|(k, v)| (&*k, v))\n     }\n }\n "}, {"sha": "3fb06cd2f5f441e1e93234fb9302d4c49d48fb63", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 51, "deletions": 89, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef, UserSubsts};\n+use rustc_middle::ty::subst::{GenericArgKind, SubstsRef, UserSubsts};\n use rustc_middle::ty::{\n     self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, OpaqueTypeKey, RegionVid,\n     ToPredicate, Ty, TyCtxt, UserType, UserTypeAnnotationIndex, WithConstness,\n@@ -60,7 +60,6 @@ use crate::borrow_check::{\n         LivenessValues, PlaceholderIndex, PlaceholderIndices, RegionValueElements,\n     },\n     region_infer::{ClosureRegionRequirementsExt, TypeTest},\n-    renumber,\n     type_check::free_region_relations::{CreateResult, UniversalRegionRelations},\n     universal_regions::{DefiningTy, UniversalRegions},\n     Upvar,\n@@ -180,7 +179,54 @@ pub(crate) fn type_check<'mir, 'tcx>(\n             liveness::generate(&mut cx, body, elements, flow_inits, move_data, location_table);\n \n             translate_outlives_facts(&mut cx);\n-            cx.opaque_type_values\n+            let mut opaque_type_values = cx.opaque_type_values;\n+\n+            for (_, revealed_ty) in &mut opaque_type_values {\n+                *revealed_ty = infcx.resolve_vars_if_possible(*revealed_ty);\n+                if revealed_ty.has_infer_types_or_consts() {\n+                    infcx.tcx.sess.delay_span_bug(\n+                        body.span,\n+                        &format!(\"could not resolve {:#?}\", revealed_ty.kind()),\n+                    );\n+                    *revealed_ty = infcx.tcx.ty_error();\n+                }\n+            }\n+\n+            opaque_type_values.retain(|(opaque_type_key, resolved_ty)| {\n+                let concrete_is_opaque = if let ty::Opaque(def_id, _) = resolved_ty.kind() {\n+                    *def_id == opaque_type_key.def_id\n+                } else {\n+                    false\n+                };\n+\n+                if concrete_is_opaque {\n+                    // We're using an opaque `impl Trait` type without\n+                    // 'revealing' it. For example, code like this:\n+                    //\n+                    // type Foo = impl Debug;\n+                    // fn foo1() -> Foo { ... }\n+                    // fn foo2() -> Foo { foo1() }\n+                    //\n+                    // In `foo2`, we're not revealing the type of `Foo` - we're\n+                    // just treating it as the opaque type.\n+                    //\n+                    // When this occurs, we do *not* want to try to equate\n+                    // the concrete type with the underlying defining type\n+                    // of the opaque type - this will always fail, since\n+                    // the defining type of an opaque type is always\n+                    // some other type (e.g. not itself)\n+                    // Essentially, none of the normal obligations apply here -\n+                    // we're just passing around some unknown opaque type,\n+                    // without actually looking at the underlying type it\n+                    // gets 'revealed' into\n+                    debug!(\n+                        \"eq_opaque_type_and_type: non-defining use of {:?}\",\n+                        opaque_type_key.def_id,\n+                    );\n+                }\n+                !concrete_is_opaque\n+            });\n+            opaque_type_values\n         },\n     );\n \n@@ -1239,14 +1285,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             return Ok(());\n         }\n \n-        let infcx = self.infcx;\n-        let tcx = infcx.tcx;\n         let param_env = self.param_env;\n         let body = self.body;\n         let mir_def_id = body.source.def_id().expect_local();\n \n-        // the \"concrete opaque types\" maps\n-        let concrete_opaque_types = &tcx.typeck(mir_def_id).concrete_opaque_types;\n         let mut opaque_type_values = VecMap::new();\n \n         debug!(\"eq_opaque_type_and_type: mir_def_id={:?}\", mir_def_id);\n@@ -1296,88 +1338,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             .eq(output_ty, revealed_ty)?,\n                     );\n \n-                    // For each opaque type `Foo<T>` inferred by this value, we want to equate\n-                    // the inference variable `?T` with the revealed type that was computed\n-                    // earlier by type check.\n                     for &(opaque_type_key, opaque_decl) in &opaque_type_map {\n-                        let resolved_ty = infcx.resolve_vars_if_possible(opaque_decl.concrete_ty);\n-                        let concrete_is_opaque = if let ty::Opaque(def_id, _) = resolved_ty.kind() {\n-                            *def_id == opaque_type_key.def_id\n-                        } else {\n-                            false\n-                        };\n-\n-                        // The revealed type computed by the earlier phase of type check.\n-                        // In our example, this would be `(U, u32)`. Note that this references\n-                        // the type parameter `U` from the definition of `Foo`.\n-                        let concrete_ty = match concrete_opaque_types\n-                            .get_by(|(key, _)| key.def_id == opaque_type_key.def_id)\n-                        {\n-                            None => {\n-                                if !concrete_is_opaque {\n-                                    tcx.sess.delay_span_bug(\n-                                        body.span,\n-                                        &format!(\n-                                            \"Non-defining use of {:?} with revealed type\",\n-                                            opaque_type_key.def_id,\n-                                        ),\n-                                    );\n-                                }\n-                                continue;\n-                            }\n-                            Some(concrete_ty) => concrete_ty,\n-                        };\n-                        debug!(\"concrete_ty = {:?}\", concrete_ty);\n-\n-                        // Apply the substitution, in this case `[U -> T]`, so that the\n-                        // concrete type becomes `Foo<(T, u32)>`\n-                        let subst_opaque_defn_ty = concrete_ty.subst(tcx, opaque_type_key.substs);\n-\n-                        // \"Renumber\" this, meaning that we replace all the regions\n-                        // with fresh inference variables. Not relevant to our example.\n-                        let renumbered_opaque_defn_ty =\n-                            renumber::renumber_regions(infcx, subst_opaque_defn_ty);\n-\n-                        debug!(\n-                            \"eq_opaque_type_and_type: concrete_ty={:?}={:?} opaque_defn_ty={:?}\",\n-                            concrete_ty, resolved_ty, renumbered_opaque_defn_ty,\n-                        );\n-\n-                        if !concrete_is_opaque {\n-                            // Equate the instantiated opaque type `opaque_decl.concrete_ty` (`?T`,\n-                            // in our example) with the renumbered version that we took from\n-                            // the type check results (`Foo<(T, u32)>`).\n-                            obligations.add(\n-                                infcx\n-                                    .at(&ObligationCause::dummy(), param_env)\n-                                    .eq(opaque_decl.concrete_ty, renumbered_opaque_defn_ty)?,\n-                            );\n-                            opaque_type_values.insert(opaque_type_key, renumbered_opaque_defn_ty);\n-                        } else {\n-                            // We're using an opaque `impl Trait` type without\n-                            // 'revealing' it. For example, code like this:\n-                            //\n-                            // type Foo = impl Debug;\n-                            // fn foo1() -> Foo { ... }\n-                            // fn foo2() -> Foo { foo1() }\n-                            //\n-                            // In `foo2`, we're not revealing the type of `Foo` - we're\n-                            // just treating it as the opaque type.\n-                            //\n-                            // When this occurs, we do *not* want to try to equate\n-                            // the concrete type with the underlying defining type\n-                            // of the opaque type - this will always fail, since\n-                            // the defining type of an opaque type is always\n-                            // some other type (e.g. not itself)\n-                            // Essentially, none of the normal obligations apply here -\n-                            // we're just passing around some unknown opaque type,\n-                            // without actually looking at the underlying type it\n-                            // gets 'revealed' into\n-                            debug!(\n-                                \"eq_opaque_type_and_type: non-defining use of {:?}\",\n-                                opaque_type_key.def_id,\n-                            );\n-                        }\n+                        opaque_type_values.insert(opaque_type_key, opaque_decl.concrete_ty);\n                     }\n \n                     debug!(\"eq_opaque_type_and_type: equated\");\n@@ -1405,7 +1367,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     locations,\n                     ConstraintCategory::OpaqueType,\n                     CustomTypeOp::new(\n-                        |_cx| {\n+                        |infcx| {\n                             infcx.constrain_opaque_type(\n                                 opaque_type_key,\n                                 &opaque_decl,"}, {"sha": "95c81c5c729be5be29ea0fafb84f7d5c66242d19", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -83,6 +83,7 @@ pub struct OpaqueTypeDecl<'tcx> {\n }\n \n /// Whether member constraints should be generated for all opaque types\n+#[derive(Debug)]\n pub enum GenerateMemberConstraints {\n     /// The default, used by typeck\n     WhenRequired,\n@@ -354,8 +355,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         opaque_types: &OpaqueTypeMap<'tcx>,\n         free_region_relations: &FRR,\n     ) {\n-        debug!(\"constrain_opaque_types()\");\n-\n         for &(opaque_type_key, opaque_defn) in opaque_types {\n             self.constrain_opaque_type(\n                 opaque_type_key,\n@@ -367,6 +366,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     }\n \n     /// See `constrain_opaque_types` for documentation.\n+    #[instrument(level = \"debug\", skip(self, free_region_relations))]\n     fn constrain_opaque_type<FRR: FreeRegionRelations<'tcx>>(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n@@ -376,15 +376,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) {\n         let def_id = opaque_type_key.def_id;\n \n-        debug!(\"constrain_opaque_type()\");\n-        debug!(\"constrain_opaque_type: def_id={:?}\", def_id);\n-        debug!(\"constrain_opaque_type: opaque_defn={:#?}\", opaque_defn);\n-\n         let tcx = self.tcx;\n \n         let concrete_ty = self.resolve_vars_if_possible(opaque_defn.concrete_ty);\n \n-        debug!(\"constrain_opaque_type: concrete_ty={:?}\", concrete_ty);\n+        debug!(?concrete_ty);\n \n         let first_own_region = match opaque_defn.origin {\n             hir::OpaqueTyOrigin::FnReturn | hir::OpaqueTyOrigin::AsyncFn => {\n@@ -397,7 +393,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // type foo::<'p0..'pn>::Foo<'q0..'qm>\n                 // fn foo<l0..'ln>() -> foo::<'static..'static>::Foo<'l0..'lm>.\n                 //\n-                // For these types we onlt iterate over `'l0..lm` below.\n+                // For these types we only iterate over `'l0..lm` below.\n                 tcx.generics_of(def_id).parent_count\n             }\n             // These opaque type inherit all lifetime parameters from their\n@@ -410,10 +406,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // If there are required region bounds, we can use them.\n         if opaque_defn.has_required_region_bounds {\n             let bounds = tcx.explicit_item_bounds(def_id);\n-            debug!(\"constrain_opaque_type: predicates: {:#?}\", bounds);\n+            debug!(\"{:#?}\", bounds);\n             let bounds: Vec<_> =\n                 bounds.iter().map(|(bound, _)| bound.subst(tcx, opaque_type_key.substs)).collect();\n-            debug!(\"constrain_opaque_type: bounds={:#?}\", bounds);\n+            debug!(\"{:#?}\", bounds);\n             let opaque_type = tcx.mk_opaque(def_id, opaque_type_key.substs);\n \n             let required_region_bounds =\n@@ -452,8 +448,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             };\n \n             // Compute the least upper bound of it with the other regions.\n-            debug!(\"constrain_opaque_types: least_region={:?}\", least_region);\n-            debug!(\"constrain_opaque_types: subst_region={:?}\", subst_region);\n+            debug!(?least_region);\n+            debug!(?subst_region);\n             match least_region {\n                 None => least_region = Some(subst_region),\n                 Some(lr) => {\n@@ -484,7 +480,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n \n         let least_region = least_region.unwrap_or(tcx.lifetimes.re_static);\n-        debug!(\"constrain_opaque_types: least_region={:?}\", least_region);\n+        debug!(?least_region);\n \n         if let GenerateMemberConstraints::IfNoStaticBound = mode {\n             if least_region != tcx.lifetimes.re_static {"}, {"sha": "7950dd3e99e29b11b14606560844698b27d16aa9", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -29,7 +29,6 @@ impl Bar for AssocNoCopy {\n impl Thing for AssocNoCopy {\n     type Out = Box<dyn Bar<Assoc: Copy>>;\n     //~^ ERROR the trait bound `String: Copy` is not satisfied\n-    //~| ERROR the trait bound `String: Copy` is not satisfied\n \n     fn func() -> Self::Out {\n         Box::new(AssocNoCopy)"}, {"sha": "0f1d35be0eb7a19c970be8f52f1de83e30c6dd7c", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -4,12 +4,6 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n LL |     type Out = Box<dyn Bar<Assoc: Copy>>;\n    |                            ^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n \n-error[E0277]: the trait bound `String: Copy` is not satisfied\n-  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:30:28\n-   |\n-LL |     type Out = Box<dyn Bar<Assoc: Copy>>;\n-   |                            ^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "b6841da1f0ba9b0690a7b0c34f8a34faf66efe14", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.nll.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -1,15 +1,11 @@\n error: lifetime may not live long enough\n-  --> $DIR/ret-impl-trait-one.rs:10:80\n+  --> $DIR/ret-impl-trait-one.rs:10:65\n    |\n-LL |   async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n-   |  ________________________________--__--__________________________________________^\n-   | |                                |   |\n-   | |                                |   lifetime `'b` defined here\n-   | |                                lifetime `'a` defined here\n-LL | |\n-LL | |     (a, b)\n-LL | | }\n-   | |_^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n+   |                                --  --                           ^^^^^^^^^^^^^^ opaque type requires that `'b` must outlive `'a`\n+   |                                |   |\n+   |                                |   lifetime `'b` defined here\n+   |                                lifetime `'a` defined here\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "c2fbbf94fd66623678df17d392e4507993b2330e", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -12,7 +12,6 @@ fn main() {\n fn cycle1() -> impl Clone {\n     //~^ ERROR cycle detected\n     send(cycle2().clone());\n-    //~^ ERROR cannot be sent between threads safely\n \n     Rc::new(Cell::new(5))\n }"}, {"sha": "3eb141cc2bb55276341e1b22549c3aa553c0fb74", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -36,37 +36,37 @@ LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires computing type of `cycle2::{opaque#0}`...\n-  --> $DIR/auto-trait-leak.rs:20:16\n+  --> $DIR/auto-trait-leak.rs:19:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires borrow-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires unsafety-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires building MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -84,22 +84,6 @@ LL | |     Rc::new(String::from(\"foo\"))\n LL | | }\n    | |_^\n \n-error[E0277]: `Rc<String>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak.rs:14:5\n-   |\n-LL | fn send<T: Send>(_: T) {}\n-   |            ---- required by this bound in `send`\n-...\n-LL |     send(cycle2().clone());\n-   |     ^^^^ `Rc<String>` cannot be sent between threads safely\n-...\n-LL | fn cycle2() -> impl Clone {\n-   |                ---------- within this `impl Clone`\n-   |\n-   = help: within `impl Clone`, the trait `Send` is not implemented for `Rc<String>`\n-   = note: required because it appears within the type `impl Clone`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0277, E0391.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "23a3748c12c6aaa10289c87936d6116c00318a21", "filename": "src/test/ui/impl-trait/issue-86465.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -0,0 +1,10 @@\n+#![feature(min_type_alias_impl_trait)]\n+\n+type X<'a, 'b> = impl std::fmt::Debug;\n+\n+fn f<'t, 'u>(a: &'t u32, b: &'u u32) -> (X<'t, 'u>, X<'u, 't>) {\n+    //~^ ERROR concrete type differs from previous defining opaque type use\n+    (a, a)\n+}\n+\n+fn main() {}"}, {"sha": "595b16aa6855477ec391b5d9f731a8d24f9caeba", "filename": "src/test/ui/impl-trait/issue-86465.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -0,0 +1,14 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/issue-86465.rs:5:1\n+   |\n+LL | fn f<'t, 'u>(a: &'t u32, b: &'u u32) -> (X<'t, 'u>, X<'u, 't>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&'a u32`, got `&'b u32`\n+   |\n+note: previous use here\n+  --> $DIR/issue-86465.rs:5:1\n+   |\n+LL | fn f<'t, 'u>(a: &'t u32, b: &'u u32) -> (X<'t, 'u>, X<'u, 't>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e25c6363515be7d0ff556f1ad0e9af6ad6d96345", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -1,8 +1,8 @@\n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:48\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:37\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                          -                     ^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n+   |                          -          ^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n    |                          |\n    |                          let's call the lifetime of this reference `'1`\n    |"}, {"sha": "28ac61a6b984a6165c820bedb20085eeacd6c7a1", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.full_tait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.nll.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -28,7 +28,7 @@ LL | type WrongGeneric<T> = impl 'static;\n            found opaque type `impl Sized`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:17:30\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:16:30\n    |\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                              ^^^^^^^^^^^^^^^"}, {"sha": "90a753b5a6de16d58995cd5f7433fff64ab5d17a", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.full_tait.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -36,16 +36,7 @@ LL | type WrongGeneric<T> = impl 'static;\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n \n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds\n-\n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0308, E0310.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "b8ca8e46079aad4c5db20b159b4fcd62da6f5be7", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.min_tait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.nll.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -19,7 +19,7 @@ LL | type WrongGeneric<T> = impl 'static;\n            found opaque type `impl Sized`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:17:30\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:16:30\n    |\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                              ^^^^^^^^^^^^^^^"}, {"sha": "e50282201074ecb98c291816f2adac9d038e3d40", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -27,16 +27,7 @@ LL | type WrongGeneric<T> = impl 'static;\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n \n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0308, E0310.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "9f647d9e737fecbdb14fcf2a99fcaec1761e0e2a", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -11,7 +11,6 @@ fn main() {\n \n type WrongGeneric<T> = impl 'static;\n //~^ ERROR the parameter type `T` may not live long enough\n-//~| ERROR the parameter type `T` may not live long enough\n //~| ERROR: at least one trait must be specified\n \n fn wrong_generic<T>(t: T) -> WrongGeneric<T> {"}, {"sha": "e2b8b19aeba1bb815d00c8be2e48a06d53cf09c6", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.full_tait.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.nll.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -8,13 +8,13 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n+  --> $DIR/issue-57611-trait-alias.rs:24:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n+  --> $DIR/issue-57611-trait-alias.rs:24:9\n    |\n LL |         |x| x\n    |         ^^^^^\n@@ -28,7 +28,7 @@ LL |     type Bar = impl Baz<Self, Self>;\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'static X,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n+  --> $DIR/issue-57611-trait-alias.rs:24:9\n    |\n LL |         |x| x\n    |         ^^^^^"}, {"sha": "61e8da91bbaa98d26c237bfd75488ec993c5297a", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.full_tait.stderr", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -16,52 +16,5 @@ LL |     type Bar = impl Baz<Self, Self>;\n    = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&'<empty> X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&'<empty> X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n-\n-error: aborting due to 5 previous errors; 1 warning emitted\n+error: aborting due to previous error; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "3a4d1d90c039731d4a1396e44dd4402a7922400b", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.min_tait.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.nll.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -1,11 +1,11 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n+  --> $DIR/issue-57611-trait-alias.rs:24:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n+  --> $DIR/issue-57611-trait-alias.rs:24:9\n    |\n LL |         |x| x\n    |         ^^^^^\n@@ -19,7 +19,7 @@ LL |     type Bar = impl Baz<Self, Self>;\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'static X,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n+  --> $DIR/issue-57611-trait-alias.rs:24:9\n    |\n LL |         |x| x\n    |         ^^^^^"}, {"sha": "f65e91e52c7132b90589e3c7e19b9cbefc222f4c", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -7,52 +7,5 @@ LL |     type Bar = impl Baz<Self, Self>;\n    = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&'<empty> X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&'<empty> X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "508ecdd88a482b4c2a7cb569228199459368ce6c", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -19,10 +19,6 @@ struct X;\n impl Foo for X {\n     type Bar = impl Baz<Self, Self>;\n     //~^ ERROR implementation of `FnOnce` is not general enough\n-    //~| ERROR implementation of `FnOnce` is not general enough\n-    //~| ERROR implementation of `FnOnce` is not general enough\n-    //~| ERROR mismatched types\n-    //~| ERROR mismatched types\n \n     fn bar(&self) -> Self::Bar {\n         |x| x"}, {"sha": "cee5e5a01cc2a5aefc6fb6df8065ac87865bc863", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -9,7 +9,6 @@ trait Bug {\n impl Bug for &() {\n     type Item = impl Bug; //~ ERROR `impl Trait` in type aliases is unstable\n     //~^ ERROR the trait bound `(): Bug` is not satisfied\n-    //~^^ ERROR the trait bound `(): Bug` is not satisfied\n \n     const FUN: fn() -> Self::Item = || ();\n     //~^ ERROR type alias impl trait is not permitted here"}, {"sha": "a9df74689df295b76bb0c60c79771bf18817c75f", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -8,7 +8,7 @@ LL |     type Item = impl Bug;\n    = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-60371.rs:14:40\n+  --> $DIR/issue-60371.rs:13:40\n    |\n LL |     const FUN: fn() -> Self::Item = || ();\n    |                                        ^\n@@ -25,16 +25,7 @@ LL |     type Item = impl Bug;\n    = help: the following implementations were found:\n              <&() as Bug>\n \n-error[E0277]: the trait bound `(): Bug` is not satisfied\n-  --> $DIR/issue-60371.rs:10:17\n-   |\n-LL |     type Item = impl Bug;\n-   |                 ^^^^^^^^ the trait `Bug` is not implemented for `()`\n-   |\n-   = help: the following implementations were found:\n-             <&() as Bug>\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0277, E0658.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "4b0f2afee54845a29c1c8224bc2c2ea452c48be2", "filename": "src/test/ui/type-alias-impl-trait/issue-74761-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -0,0 +1,19 @@\n+#![feature(member_constraints)]\n+#![feature(type_alias_impl_trait)]\n+//~^ WARN incomplete\n+\n+pub trait A {\n+    type B;\n+    fn f(&self) -> Self::B;\n+}\n+impl<'a, 'b> A for () {\n+    //~^ ERROR the lifetime parameter `'a` is not constrained\n+    //~| ERROR the lifetime parameter `'b` is not constrained\n+    type B = impl core::fmt::Debug;\n+    //~^ ERROR is unstable\n+\n+\n+    fn f(&self) -> Self::B {}\n+}\n+\n+fn main() {}"}, {"sha": "4506a6e23d5c0c3f57e117f92b04f9a4cda9c8f7", "filename": "src/test/ui/type-alias-impl-trait/issue-74761-2.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -0,0 +1,34 @@\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/issue-74761-2.rs:12:14\n+   |\n+LL |     type B = impl core::fmt::Debug;\n+   |              ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-74761-2.rs:2:12\n+   |\n+LL | #![feature(type_alias_impl_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-74761-2.rs:9:6\n+   |\n+LL | impl<'a, 'b> A for () {\n+   |      ^^ unconstrained lifetime parameter\n+\n+error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-74761-2.rs:9:10\n+   |\n+LL | impl<'a, 'b> A for () {\n+   |          ^^ unconstrained lifetime parameter\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0207, E0658.\n+For more information about an error, try `rustc --explain E0207`."}, {"sha": "11756017ad846538f7dbdc74ec5760573655d71d", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -5,9 +5,9 @@\n #![feature(min_type_alias_impl_trait)]\n \n type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n-//~^ ERROR could not find defining uses\n \n fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n+    //~^ ERROR concrete type differs from previous defining opaque type\n     (a.clone(), a)\n }\n "}, {"sha": "52b0462de988c28d21c987efc822a0adbae587eb", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn2.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -1,8 +1,14 @@\n-error: could not find defining uses\n-  --> $DIR/multiple-def-uses-in-one-fn2.rs:7:52\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/multiple-def-uses-in-one-fn2.rs:9:1\n    |\n-LL | type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n-   |                                                    ^^^^^^^^^^^^^\n+LL | fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A`, got `B`\n+   |\n+note: previous use here\n+  --> $DIR/multiple-def-uses-in-one-fn2.rs:9:1\n+   |\n+LL | fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5f25365666c7f9d5b78a1d6899f3840dc5beafb6", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.rs?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -11,6 +11,7 @@ fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>)\n }\n \n fn g<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A, B>) {\n+    //~^ ERROR concrete type differs from previous defining opaque type\n     (a, b)\n     //~^ ERROR mismatched types\n }"}, {"sha": "3d943b77af57da8a7586a1d5a5ba97514ae8886c", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn3.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b7c859c1aae39d26884e760201f5e6c7feeff9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr?ref=b2b7c859c1aae39d26884e760201f5e6c7feeff9", "patch": "@@ -1,10 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/multiple-def-uses-in-one-fn3.rs:14:9\n+  --> $DIR/multiple-def-uses-in-one-fn3.rs:15:9\n    |\n LL | fn g<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A, B>) {\n    |      -                    - found type parameter\n    |      |\n    |      expected type parameter\n+LL |\n LL |     (a, b)\n    |         ^ expected type parameter `A`, found type parameter `B`\n    |\n@@ -13,6 +14,18 @@ LL |     (a, b)\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n-error: aborting due to previous error\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/multiple-def-uses-in-one-fn3.rs:13:1\n+   |\n+LL | fn g<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A, B>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A`, got `[type error]`\n+   |\n+note: previous use here\n+  --> $DIR/multiple-def-uses-in-one-fn3.rs:9:1\n+   |\n+LL | fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}