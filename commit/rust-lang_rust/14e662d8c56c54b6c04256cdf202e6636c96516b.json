{"sha": "14e662d8c56c54b6c04256cdf202e6636c96516b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZTY2MmQ4YzU2YzU0YjZjMDQyNTZjZGYyMDJlNjYzNmM5NjUxNmI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-08T09:54:24Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-08T09:54:24Z"}, "message": "Manually push a stack frame where no valid frame is needed", "tree": {"sha": "bc4647708db0f53902b7062247799db2cd8da3a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc4647708db0f53902b7062247799db2cd8da3a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14e662d8c56c54b6c04256cdf202e6636c96516b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14e662d8c56c54b6c04256cdf202e6636c96516b", "html_url": "https://github.com/rust-lang/rust/commit/14e662d8c56c54b6c04256cdf202e6636c96516b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14e662d8c56c54b6c04256cdf202e6636c96516b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0f0f457b8e6723a6e3d1e29a6aa91a36edfc169", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f0f457b8e6723a6e3d1e29a6aa91a36edfc169", "html_url": "https://github.com/rust-lang/rust/commit/c0f0f457b8e6723a6e3d1e29a6aa91a36edfc169"}], "stats": {"total": 47, "additions": 12, "deletions": 35}, "files": [{"sha": "8a93328659eeccc1b0f9e3c4feb678f8214f2668", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 12, "deletions": 35, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/14e662d8c56c54b6c04256cdf202e6636c96516b/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e662d8c56c54b6c04256cdf202e6636c96516b/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=14e662d8c56c54b6c04256cdf202e6636c96516b", "patch": "@@ -43,6 +43,16 @@ pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n ) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'mir, 'tcx>> {\n     debug!(\"mk_borrowck_eval_cx: {:?}\", instance);\n     let param_env = tcx.param_env(instance.def_id());\n+    mk_eval_cx_inner(tcx, instance, mir, span, param_env)\n+}\n+\n+fn mk_eval_cx_inner<'a, 'mir, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    instance: Instance<'tcx>,\n+    mir: &'mir mir::Mir<'tcx>,\n+    span: Span,\n+    param_env: ty::ParamEnv<'tcx>,\n+) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'mir, 'tcx>> {\n     let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new());\n     // insert a stack frame so any queries have the correct substs\n     // cannot use `push_stack_frame`; if we do `const_prop` explodes\n@@ -67,41 +77,8 @@ pub fn mk_eval_cx<'a, 'tcx>(\n ) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'tcx, 'tcx>> {\n     debug!(\"mk_eval_cx: {:?}, {:?}\", instance, param_env);\n     let span = tcx.def_span(instance.def_id());\n-    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new());\n-    let mir = mir::Mir::new(\n-        ::std::iter::once(\n-            mir::BasicBlockData {\n-                statements: Vec::new(),\n-                is_cleanup: false,\n-                terminator: Some(mir::Terminator {\n-                    source_info: mir::SourceInfo {\n-                        scope: mir::OUTERMOST_SOURCE_SCOPE,\n-                        span: DUMMY_SP,\n-                    },\n-                    kind: mir::TerminatorKind::Return,\n-                }),\n-            }\n-        ).collect(), // basic blocks\n-        IndexVec::new(), // source_scopes\n-        mir::ClearCrossCrate::Clear, // source_scope_local_data\n-        IndexVec::new(), // promoted\n-        None, // yield ty\n-        ::std::iter::once(mir::LocalDecl::new_return_place(tcx.types.unit, DUMMY_SP)).collect(),\n-        IndexVec::new(), //user_type_annotations\n-        0, // arg_count\n-        Vec::new(), // upvar_decls\n-        DUMMY_SP, // span\n-        Vec::new(), // control_flow_destroyed\n-    );\n-    // insert a stack frame so any queries have the correct substs\n-    ecx.push_stack_frame(\n-        instance,\n-        span,\n-        tcx.alloc_mir(mir),\n-        None,\n-        StackPopCleanup::Goto(None), // never pop\n-    )?;\n-    Ok(ecx)\n+    let mir = tcx.optimized_mir(instance.def.def_id());\n+    mk_eval_cx_inner(tcx, instance, mir, span, param_env)\n }\n \n pub(crate) fn eval_promoted<'a, 'mir, 'tcx>("}]}