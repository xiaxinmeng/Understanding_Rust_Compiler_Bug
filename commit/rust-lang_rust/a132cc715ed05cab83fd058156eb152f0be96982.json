{"sha": "a132cc715ed05cab83fd058156eb152f0be96982", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMzJjYzcxNWVkMDVjYWI4M2ZkMDU4MTU2ZWIxNTJmMGJlOTY5ODI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-22T11:13:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-22T11:13:24Z"}, "message": "Merge #2354\n\n2354: Cleanup errors r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ce2e04a611618bdd47bd81b6f15fcdf324308913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce2e04a611618bdd47bd81b6f15fcdf324308913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a132cc715ed05cab83fd058156eb152f0be96982", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd18LUCRBK7hj4Ov3rIwAAdHIIAApU1a2mRFPvLQ8SRxH1wzWg\nLZNZauBJNrI2JHOF3xLJS/e0S3CeqkOS8Tbi8JeT4HvUxBt51Em9FhgObkQIvJVR\nznoIXLuVbVlFeuAYWFQ2AKwTUTl6PTniQ8WBiezzfynHS2dYKM/VgCCAyLYFTnvG\nNb1vfRDy46zaaSwVUhBkXStmojdC7GN3A3dlBnkJsSZfvhXD78o8O/hlgTjIe5Ku\nHj1sAvp2mNapPQTWLBEpLU2mEUnB6QZ/OaqwhA9c3nV5yV+fgi8n41qrP5GgzCsE\nJb+AGM2pRv2Ot0I5AUQKIQE3hwjWg7RU7MigXqhSsYkdE0qeOL936u9KmwgmFz8=\n=XQQD\n-----END PGP SIGNATURE-----\n", "payload": "tree ce2e04a611618bdd47bd81b6f15fcdf324308913\nparent c866efdf36139502ec824bc38892fb2bda14484f\nparent f4b1fb1554b639374adeffa50d4719f834a0d475\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574421204 +0000\ncommitter GitHub <noreply@github.com> 1574421204 +0000\n\nMerge #2354\n\n2354: Cleanup errors r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a132cc715ed05cab83fd058156eb152f0be96982", "html_url": "https://github.com/rust-lang/rust/commit/a132cc715ed05cab83fd058156eb152f0be96982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a132cc715ed05cab83fd058156eb152f0be96982/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c866efdf36139502ec824bc38892fb2bda14484f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c866efdf36139502ec824bc38892fb2bda14484f", "html_url": "https://github.com/rust-lang/rust/commit/c866efdf36139502ec824bc38892fb2bda14484f"}, {"sha": "f4b1fb1554b639374adeffa50d4719f834a0d475", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b1fb1554b639374adeffa50d4719f834a0d475", "html_url": "https://github.com/rust-lang/rust/commit/f4b1fb1554b639374adeffa50d4719f834a0d475"}], "stats": {"total": 118, "additions": 63, "deletions": 55}, "files": [{"sha": "b6d851776129c2f1ade35a03fee43af02c689022", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 62, "deletions": 52, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/a132cc715ed05cab83fd058156eb152f0be96982/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a132cc715ed05cab83fd058156eb152f0be96982/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=a132cc715ed05cab83fd058156eb152f0be96982", "patch": "@@ -6,14 +6,14 @@\n //! actual IO. See `vfs` and `project_model` in the `ra_lsp_server` crate for how\n //! actual IO is done and lowered to input.\n \n-use rustc_hash::FxHashMap;\n+use std::{fmt, str::FromStr};\n \n use ra_cfg::CfgOptions;\n use ra_syntax::SmolStr;\n+use rustc_hash::FxHashMap;\n use rustc_hash::FxHashSet;\n \n use crate::{RelativePath, RelativePathBuf};\n-use std::str::FromStr;\n \n /// `FileId` is an integer which uniquely identifies a file. File paths are\n /// messy and system-dependent, so most of the code should work directly with\n@@ -80,16 +80,16 @@ pub struct CrateGraph {\n     arena: FxHashMap<CrateId, CrateData>,\n }\n \n-#[derive(Debug)]\n-pub struct CyclicDependencies;\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct CrateId(pub u32);\n \n-impl CrateId {\n-    pub fn shift(self, amount: u32) -> CrateId {\n-        CrateId(self.0 + amount)\n-    }\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+struct CrateData {\n+    file_id: FileId,\n+    edition: Edition,\n+    cfg_options: CfgOptions,\n+    env: Env,\n+    dependencies: Vec<Dependency>,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -98,58 +98,17 @@ pub enum Edition {\n     Edition2015,\n }\n \n-#[derive(Debug)]\n-pub struct ParseEditionError {\n-    pub msg: String,\n-}\n-\n-impl FromStr for Edition {\n-    type Err = ParseEditionError;\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        match s {\n-            \"2015\" => Ok(Edition::Edition2015),\n-            \"2018\" => Ok(Edition::Edition2018),\n-            _ => Err(ParseEditionError { msg: format!(\"unknown edition: {}\", s) }),\n-        }\n-    }\n-}\n-\n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n pub struct Env {\n     entries: FxHashMap<String, String>,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n-struct CrateData {\n-    file_id: FileId,\n-    edition: Edition,\n-    dependencies: Vec<Dependency>,\n-    cfg_options: CfgOptions,\n-    env: Env,\n-}\n-\n-impl CrateData {\n-    fn new(file_id: FileId, edition: Edition, cfg_options: CfgOptions, env: Env) -> CrateData {\n-        CrateData { file_id, edition, dependencies: Vec::new(), cfg_options, env }\n-    }\n-\n-    fn add_dep(&mut self, name: SmolStr, crate_id: CrateId) {\n-        self.dependencies.push(Dependency { name, crate_id })\n-    }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Dependency {\n     pub crate_id: CrateId,\n     pub name: SmolStr,\n }\n \n-impl Dependency {\n-    pub fn crate_id(&self) -> CrateId {\n-        self.crate_id\n-    }\n-}\n-\n impl CrateGraph {\n     pub fn add_crate_root(\n         &mut self,\n@@ -174,9 +133,9 @@ impl CrateGraph {\n         from: CrateId,\n         name: SmolStr,\n         to: CrateId,\n-    ) -> Result<(), CyclicDependencies> {\n+    ) -> Result<(), CyclicDependenciesError> {\n         if self.dfs_find(from, to, &mut FxHashSet::default()) {\n-            return Err(CyclicDependencies);\n+            return Err(CyclicDependenciesError);\n         }\n         self.arena.get_mut(&from).unwrap().add_dep(name, to);\n         Ok(())\n@@ -247,6 +206,57 @@ impl CrateGraph {\n     }\n }\n \n+impl CrateId {\n+    pub fn shift(self, amount: u32) -> CrateId {\n+        CrateId(self.0 + amount)\n+    }\n+}\n+\n+impl CrateData {\n+    fn new(file_id: FileId, edition: Edition, cfg_options: CfgOptions, env: Env) -> CrateData {\n+        CrateData { file_id, edition, dependencies: Vec::new(), cfg_options, env }\n+    }\n+\n+    fn add_dep(&mut self, name: SmolStr, crate_id: CrateId) {\n+        self.dependencies.push(Dependency { name, crate_id })\n+    }\n+}\n+\n+impl FromStr for Edition {\n+    type Err = ParseEditionError;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        let res = match s {\n+            \"2015\" => Edition::Edition2015,\n+            \"2018\" => Edition::Edition2018,\n+            _ => Err(ParseEditionError { invalid_input: s.to_string() })?,\n+        };\n+        Ok(res)\n+    }\n+}\n+\n+impl Dependency {\n+    pub fn crate_id(&self) -> CrateId {\n+        self.crate_id\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct ParseEditionError {\n+    invalid_input: String,\n+}\n+\n+impl fmt::Display for ParseEditionError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"invalid edition: {:?}\", self.invalid_input)\n+    }\n+}\n+\n+impl std::error::Error for ParseEditionError {}\n+\n+#[derive(Debug)]\n+pub struct CyclicDependenciesError;\n+\n #[cfg(test)]\n mod tests {\n     use super::{CfgOptions, CrateGraph, Edition::Edition2018, Env, FileId, SmolStr};"}, {"sha": "c128e608d80c22e119fbf5fd98881f493fad8a65", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a132cc715ed05cab83fd058156eb152f0be96982/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a132cc715ed05cab83fd058156eb152f0be96982/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=a132cc715ed05cab83fd058156eb152f0be96982", "patch": "@@ -1,7 +1,6 @@\n //! FIXME: write short doc here\n \n use std::path::{Path, PathBuf};\n-use std::str::FromStr;\n \n use cargo_metadata::{CargoOpt, MetadataCommand};\n use ra_arena::{impl_arena_id, Arena, RawId};\n@@ -143,8 +142,7 @@ impl CargoWorkspace {\n         for meta_pkg in meta.packages {\n             let cargo_metadata::Package { id, edition, name, manifest_path, .. } = meta_pkg;\n             let is_member = ws_members.contains(&id);\n-            let edition = Edition::from_str(&edition)\n-                .map_err(|e| (format!(\"metadata for package {} failed: {}\", &name, e.msg)))?;\n+            let edition = edition.parse::<Edition>()?;\n             let pkg = packages.alloc(PackageData {\n                 name,\n                 manifest: manifest_path,"}]}