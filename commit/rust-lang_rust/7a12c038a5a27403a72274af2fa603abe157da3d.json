{"sha": "7a12c038a5a27403a72274af2fa603abe157da3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMTJjMDM4YTVhMjc0MDNhNzIyNzRhZjJmYTYwM2FiZTE1N2RhM2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-06T03:29:13Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-06T03:29:13Z"}, "message": "Rollup merge of #23060 - lifthrasiir:rustdoc-sidebar-in-js, r=alexcrichton\n\n It had been a source of huge bloat in rustdoc outputs. Of course, we can simply disable compiler docs (as `rustc` generates over 90M of HTML) but this approach fares better even after such decision.\n\nEach directory now has `sidebar-items.js`, which immediately calls `initSidebarItems` with a JSON sidebar data. This file is shared throughout every item in the sidebar. The current item is highlighted via a separate JS snippet (`window.sidebarCurrent`). The JS file is designed to be loaded asynchronously, as the sidebar is rendered before the content and slow sidebar loading blocks the entire rendering. For the minimal accessibility without JS, links to the parent items are left in HTML.\n\nIn the future, it might also be possible to integrate crates data with the same fashion: `sidebar-items.js` at the root path will do that. (Currently rustdoc skips writing JS in that case.)\n\nThis has a huge impact on the size of rustdoc outputs. Originally it was 326MB uncompressed (37.7MB gzipped, 6.1MB xz compressed); it is 169MB uncompressed (11.9MB gzipped, 5.9MB xz compressed) now. The sidebar JS only takes 10MB uncompressed & 0.3MB gzipped.", "tree": {"sha": "6d39b16dddd44ac14d3fccd7a112f6ad881098af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d39b16dddd44ac14d3fccd7a112f6ad881098af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a12c038a5a27403a72274af2fa603abe157da3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a12c038a5a27403a72274af2fa603abe157da3d", "html_url": "https://github.com/rust-lang/rust/commit/7a12c038a5a27403a72274af2fa603abe157da3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a12c038a5a27403a72274af2fa603abe157da3d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e99b00f6c1bd74d1be4659dc9f9436cf8c544095", "url": "https://api.github.com/repos/rust-lang/rust/commits/e99b00f6c1bd74d1be4659dc9f9436cf8c544095", "html_url": "https://github.com/rust-lang/rust/commit/e99b00f6c1bd74d1be4659dc9f9436cf8c544095"}, {"sha": "4a6fb45ee1c51a67d75d99244446868b36f22cc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6fb45ee1c51a67d75d99244446868b36f22cc6", "html_url": "https://github.com/rust-lang/rust/commit/4a6fb45ee1c51a67d75d99244446868b36f22cc6"}], "stats": {"total": 178, "additions": 106, "deletions": 72}, "files": [{"sha": "4af6a6d229f554a0151c9ad3a504f83c98ed70f6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 41, "deletions": 51, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/7a12c038a5a27403a72274af2fa603abe157da3d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a12c038a5a27403a72274af2fa603abe157da3d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7a12c038a5a27403a72274af2fa603abe157da3d", "patch": "@@ -67,12 +67,10 @@ use html::item_type::ItemType;\n use html::layout;\n use html::markdown::Markdown;\n use html::markdown;\n-use html::escape::Escape;\n use stability_summary;\n \n /// A pair of name and its optional document.\n-#[derive(Clone, Eq, Ord, PartialEq, PartialOrd)]\n-pub struct NameDoc(String, Option<String>);\n+pub type NameDoc = (String, Option<String>);\n \n /// Major driving force in all rustdoc rendering. This contains information\n /// about where in the tree-like hierarchy rendering is occurring and controls\n@@ -98,12 +96,6 @@ pub struct Context {\n     /// This describes the layout of each page, and is not modified after\n     /// creation of the context (contains info like the favicon and added html).\n     pub layout: layout::Layout,\n-    /// This map is a list of what should be displayed on the sidebar of the\n-    /// current page. The key is the section header (traits, modules,\n-    /// functions), and the value is the list of containers belonging to this\n-    /// header. This map will change depending on the surrounding context of the\n-    /// page.\n-    pub sidebar: HashMap<String, Vec<NameDoc>>,\n     /// This flag indicates whether [src] links should be generated or not. If\n     /// the source files are present in the html rendering, then this will be\n     /// `true`.\n@@ -271,7 +263,6 @@ pub fn run(mut krate: clean::Crate,\n         passes: passes,\n         current: Vec::new(),\n         root_path: String::new(),\n-        sidebar: HashMap::new(),\n         layout: layout::Layout {\n             logo: \"\".to_string(),\n             favicon: \"\".to_string(),\n@@ -1232,7 +1223,16 @@ impl Context {\n                         clean::ModuleItem(m) => m,\n                         _ => unreachable!()\n                     };\n-                    this.sidebar = this.build_sidebar(&m);\n+\n+                    // render sidebar-items.js used throughout this module\n+                    {\n+                        let items = this.build_sidebar_items(&m);\n+                        let js_dst = this.dst.join(\"sidebar-items.js\");\n+                        let mut js_out = BufferedWriter::new(try!(File::create(&js_dst)));\n+                        try!(write!(&mut js_out, \"initSidebarItems({});\",\n+                                    json::as_json(&items)));\n+                    }\n+\n                     for item in m.items {\n                         f(this,item);\n                     }\n@@ -1252,15 +1252,11 @@ impl Context {\n         }\n     }\n \n-    fn build_sidebar(&self, m: &clean::Module) -> HashMap<String, Vec<NameDoc>> {\n+    fn build_sidebar_items(&self, m: &clean::Module) -> HashMap<String, Vec<NameDoc>> {\n         let mut map = HashMap::new();\n         for item in &m.items {\n             if self.ignore_private_item(item) { continue }\n \n-            // avoid putting foreign items to the sidebar.\n-            if let &clean::ForeignFunctionItem(..) = &item.inner { continue }\n-            if let &clean::ForeignStaticItem(..) = &item.inner { continue }\n-\n             let short = shortty(item).to_static_str();\n             let myname = match item.name {\n                 None => continue,\n@@ -1269,7 +1265,7 @@ impl Context {\n             let short = short.to_string();\n             let v = map.entry(short).get().unwrap_or_else(\n                 |vacant_entry| vacant_entry.insert(Vec::with_capacity(1)));\n-            v.push(NameDoc(myname, Some(shorter_line(item.doc_value()))));\n+            v.push((myname, Some(shorter_line(item.doc_value()))));\n         }\n \n         for (_, items) in &mut map {\n@@ -2216,9 +2212,18 @@ impl<'a> fmt::Display for Sidebar<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let cx = self.cx;\n         let it = self.item;\n+        let parentlen = cx.current.len() - if it.is_mod() {1} else {0};\n+\n+        // the sidebar is designed to display sibling functions, modules and\n+        // other miscellaneous informations. since there are lots of sibling\n+        // items (and that causes quadratic growth in large modules),\n+        // we refactor common parts into a shared JavaScript file per module.\n+        // still, we don't move everything into JS because we want to preserve\n+        // as much HTML as possible in order to allow non-JS-enabled browsers\n+        // to navigate the documentation (though slightly inefficiently).\n+\n         try!(write!(fmt, \"<p class='location'>\"));\n-        let len = cx.current.len() - if it.is_mod() {1} else {0};\n-        for (i, name) in cx.current.iter().take(len).enumerate() {\n+        for (i, name) in cx.current.iter().take(parentlen).enumerate() {\n             if i > 0 {\n                 try!(write!(fmt, \"::<wbr>\"));\n             }\n@@ -2228,40 +2233,25 @@ impl<'a> fmt::Display for Sidebar<'a> {\n         }\n         try!(write!(fmt, \"</p>\"));\n \n-        fn block(w: &mut fmt::Formatter, short: &str, longty: &str,\n-                 cur: &clean::Item, cx: &Context) -> fmt::Result {\n-            let items = match cx.sidebar.get(short) {\n-                Some(items) => items,\n-                None => return Ok(())\n-            };\n-            try!(write!(w, \"<div class='block {}'><h2>{}</h2>\", short, longty));\n-            for &NameDoc(ref name, ref doc) in items {\n-                let curty = shortty(cur).to_static_str();\n-                let class = if cur.name.as_ref().unwrap() == name &&\n-                               short == curty { \"current\" } else { \"\" };\n-                try!(write!(w, \"<a class='{ty} {class}' href='{href}{path}' \\\n-                                title='{title}'>{name}</a>\",\n-                       ty = short,\n-                       class = class,\n-                       href = if curty == \"mod\" {\"../\"} else {\"\"},\n-                       path = if short == \"mod\" {\n-                           format!(\"{}/index.html\", name)\n-                       } else {\n-                           format!(\"{}.{}.html\", short, name)\n-                       },\n-                       title = Escape(doc.as_ref().unwrap()),\n-                       name = name));\n-            }\n-            try!(write!(w, \"</div>\"));\n-            Ok(())\n+        // sidebar refers to the enclosing module, not this module\n+        let relpath = if shortty(it) == ItemType::Module { \"../\" } else { \"\" };\n+        try!(write!(fmt,\n+                    \"<script>window.sidebarCurrent = {{\\\n+                        name: '{name}', \\\n+                        ty: '{ty}', \\\n+                        relpath: '{path}'\\\n+                     }};</script>\",\n+                    name = it.name.as_ref().map(|x| &x[..]).unwrap_or(\"\"),\n+                    ty = shortty(it).to_static_str(),\n+                    path = relpath));\n+        if parentlen == 0 {\n+            // there is no sidebar-items.js beyond the crate root path\n+            // FIXME maybe dynamic crate loading can be merged here\n+        } else {\n+            try!(write!(fmt, \"<script async src=\\\"{path}sidebar-items.js\\\"></script>\",\n+                        path = relpath));\n         }\n \n-        try!(block(fmt, \"mod\", \"Modules\", it, cx));\n-        try!(block(fmt, \"struct\", \"Structs\", it, cx));\n-        try!(block(fmt, \"enum\", \"Enums\", it, cx));\n-        try!(block(fmt, \"trait\", \"Traits\", it, cx));\n-        try!(block(fmt, \"fn\", \"Functions\", it, cx));\n-        try!(block(fmt, \"macro\", \"Macros\", it, cx));\n         Ok(())\n     }\n }"}, {"sha": "a9b233dd128d49994112dd364743f8d66acd36aa", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 65, "deletions": 21, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/7a12c038a5a27403a72274af2fa603abe157da3d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/7a12c038a5a27403a72274af2fa603abe157da3d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=7a12c038a5a27403a72274af2fa603abe157da3d", "patch": "@@ -15,6 +15,27 @@\n     \"use strict\";\n     var resizeTimeout, interval;\n \n+    // This mapping table should match the discriminants of\n+    // `rustdoc::html::item_type::ItemType` type in Rust.\n+    var itemTypes = [\"mod\",\n+                     \"externcrate\",\n+                     \"import\",\n+                     \"struct\",\n+                     \"enum\",\n+                     \"fn\",\n+                     \"type\",\n+                     \"static\",\n+                     \"trait\",\n+                     \"impl\",\n+                     \"tymethod\",\n+                     \"method\",\n+                     \"structfield\",\n+                     \"variant\",\n+                     \"macro\",\n+                     \"primitive\",\n+                     \"associatedtype\",\n+                     \"constant\"];\n+\n     $('.js-only').removeClass('js-only');\n \n     function getQueryStringParams() {\n@@ -552,27 +573,6 @@\n             showResults(results);\n         }\n \n-        // This mapping table should match the discriminants of\n-        // `rustdoc::html::item_type::ItemType` type in Rust.\n-        var itemTypes = [\"mod\",\n-                         \"externcrate\",\n-                         \"import\",\n-                         \"struct\",\n-                         \"enum\",\n-                         \"fn\",\n-                         \"type\",\n-                         \"static\",\n-                         \"trait\",\n-                         \"impl\",\n-                         \"tymethod\",\n-                         \"method\",\n-                         \"structfield\",\n-                         \"variant\",\n-                         \"macro\",\n-                         \"primitive\",\n-                         \"associatedtype\",\n-                         \"constant\"];\n-\n         function itemTypeFromName(typename) {\n             for (var i = 0; i < itemTypes.length; ++i) {\n                 if (itemTypes[i] === typename) return i;\n@@ -708,6 +708,50 @@\n \n     window.initSearch = initSearch;\n \n+    // delayed sidebar rendering.\n+    function initSidebarItems(items) {\n+        var sidebar = $('.sidebar');\n+        var current = window.sidebarCurrent;\n+\n+        function block(shortty, longty) {\n+            var filtered = items[shortty];\n+            if (!filtered) return;\n+\n+            var div = $('<div>').attr('class', 'block ' + shortty);\n+            div.append($('<h2>').text(longty));\n+\n+            for (var i = 0; i < filtered.length; ++i) {\n+                var item = filtered[i];\n+                var name = item[0];\n+                var desc = item[1]; // can be null\n+\n+                var klass = shortty;\n+                if (name === current.name && shortty == current.ty) {\n+                    klass += ' current';\n+                }\n+                var path;\n+                if (shortty === 'mod') {\n+                    path = name + '/index.html';\n+                } else {\n+                    path = shortty + '.' + name + '.html';\n+                }\n+                div.append($('<a>', {'href': current.relpath + path,\n+                                     'title': desc,\n+                                     'class': klass}).text(name));\n+            }\n+            sidebar.append(div);\n+        }\n+\n+        block(\"mod\", \"Modules\");\n+        block(\"struct\", \"Structs\");\n+        block(\"enum\", \"Enums\");\n+        block(\"trait\", \"Traits\");\n+        block(\"fn\", \"Functions\");\n+        block(\"macro\", \"Macros\");\n+    }\n+\n+    window.initSidebarItems = initSidebarItems;\n+\n     window.register_implementors = function(imp) {\n         var list = $('#implementors-list');\n         var libs = Object.getOwnPropertyNames(imp);"}]}