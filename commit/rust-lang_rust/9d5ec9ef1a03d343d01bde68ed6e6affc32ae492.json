{"sha": "9d5ec9ef1a03d343d01bde68ed6e6affc32ae492", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNWVjOWVmMWEwM2QzNDNkMDFiZGU2OGVkNmU2YWZmYzMyYWU0OTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-15T20:17:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-21T09:40:59Z"}, "message": "work around fallout from these changes in rustc", "tree": {"sha": "dc0df7ca92fd0e081200d8cce5af022c9fff7d54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc0df7ca92fd0e081200d8cce5af022c9fff7d54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492", "html_url": "https://github.com/rust-lang/rust/commit/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f71de45b230954c25f2337272852be1146d26136", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71de45b230954c25f2337272852be1146d26136", "html_url": "https://github.com/rust-lang/rust/commit/f71de45b230954c25f2337272852be1146d26136"}], "stats": {"total": 83, "additions": 62, "deletions": 21}, "files": [{"sha": "22526c7751d5021dfb4809f3b5a1d061e164aa6f", "filename": "src/librustc/infer/canonical.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical.rs?ref=9d5ec9ef1a03d343d01bde68ed6e6affc32ae492", "patch": "@@ -40,6 +40,7 @@ use traits::{Obligation, ObligationCause, PredicateObligation};\n use ty::{self, CanonicalVar, Lift, Region, Slice, Ty, TyCtxt, TypeFlags};\n use ty::subst::{Kind, UnpackedKind};\n use ty::fold::{TypeFoldable, TypeFolder};\n+use util::captures::Captures;\n use util::common::CellUsizeExt;\n \n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -382,7 +383,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         unsubstituted_region_constraints: &'a QueryRegionConstraints<'tcx>,\n         result_subst: &'a CanonicalVarValues<'tcx>,\n-    ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a {\n+    ) -> impl Iterator<Item = PredicateObligation<'tcx>> + Captures<'gcx> + 'a {\n         let QueryRegionConstraints {\n             region_outlives,\n             ty_outlives,"}, {"sha": "22b07c8cc044f55619255ee7edbfdcff18a4b843", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=9d5ec9ef1a03d343d01bde68ed6e6affc32ae492", "patch": "@@ -157,6 +157,7 @@ pub mod traits;\n pub mod ty;\n \n pub mod util {\n+    pub mod captures;\n     pub mod common;\n     pub mod ppaux;\n     pub mod nodemap;"}, {"sha": "e56a8662f3eb4346747c3ae36e083d49422c6a8d", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=9d5ec9ef1a03d343d01bde68ed6e6affc32ae492", "patch": "@@ -19,6 +19,7 @@ use ty::{self, TyCtxt, TypeFoldable};\n use ty::fast_reject::{self, SimplifiedType};\n use rustc_data_structures::sync::Lrc;\n use syntax::ast::Name;\n+use util::captures::Captures;\n use util::nodemap::{DefIdMap, FxHashMap};\n \n /// A per-trait graph of impls in specialization order. At the moment, this\n@@ -313,9 +314,10 @@ impl<'a, 'gcx, 'tcx> Node {\n     }\n \n     /// Iterate over the items defined directly by the given (impl or trait) node.\n-    #[inline] // FIXME(#35870) Avoid closures being unexported due to impl Trait.\n-    pub fn items(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n-                 -> impl Iterator<Item = ty::AssociatedItem> + 'a {\n+    pub fn items(\n+        &self,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    ) -> impl Iterator<Item = ty::AssociatedItem> + 'a {\n         tcx.associated_items(self.def_id())\n     }\n \n@@ -367,9 +369,13 @@ impl<'a, 'gcx, 'tcx> Ancestors {\n     /// Search the items from the given ancestors, returning each definition\n     /// with the given name and the given kind.\n     #[inline] // FIXME(#35870) Avoid closures being unexported due to impl Trait.\n-    pub fn defs(self, tcx: TyCtxt<'a, 'gcx, 'tcx>, trait_item_name: Name,\n-                trait_item_kind: ty::AssociatedKind, trait_def_id: DefId)\n-                -> impl Iterator<Item = NodeItem<ty::AssociatedItem>> + 'a {\n+    pub fn defs(\n+        self,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        trait_item_name: Name,\n+        trait_item_kind: ty::AssociatedKind,\n+        trait_def_id: DefId,\n+    ) -> impl Iterator<Item = NodeItem<ty::AssociatedItem>> + Captures<'gcx> + Captures<'tcx> + 'a {\n         self.flat_map(move |node| {\n             node.items(tcx).filter(move |impl_item| {\n                 impl_item.kind == trait_item_kind &&"}, {"sha": "95c5cd377d71f4c190adf60e2eca2374be9d3f5a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9d5ec9ef1a03d343d01bde68ed6e6affc32ae492", "patch": "@@ -34,6 +34,7 @@ use ty;\n use ty::subst::{Subst, Substs};\n use ty::util::{IntTypeExt, Discr};\n use ty::walk::TypeWalker;\n+use util::captures::Captures;\n use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n \n use serialize::{self, Encodable, Encoder};\n@@ -1942,8 +1943,10 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     }\n \n     #[inline]\n-    pub fn discriminants(&'a self, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n-                         -> impl Iterator<Item=Discr<'tcx>> + 'a {\n+    pub fn discriminants(\n+        &'a self,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    ) -> impl Iterator<Item=Discr<'tcx>> + Captures<'gcx> + 'a {\n         let repr_type = self.repr.discr_type();\n         let initial = repr_type.initial_discriminant(tcx.global_tcx());\n         let mut prev_discr = None::<Discr<'tcx>>;\n@@ -2290,7 +2293,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Returns an iterator of the def-ids for all body-owners in this\n     /// crate. If you would prefer to iterate over the bodies\n     /// themselves, you can do `self.hir.krate().body_ids.iter()`.\n-    pub fn body_owners(self) -> impl Iterator<Item = DefId> + 'a {\n+    pub fn body_owners(\n+        self,\n+    ) -> impl Iterator<Item = DefId> + Captures<'tcx> + Captures<'gcx> + 'a {\n         self.hir.krate()\n                 .body_ids\n                 .iter()\n@@ -2394,11 +2399,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    #[inline] // FIXME(#35870) Avoid closures being unexported due to impl Trait.\n-    pub fn associated_items(self, def_id: DefId)\n-                            -> impl Iterator<Item = ty::AssociatedItem> + 'a {\n+    pub fn associated_items(\n+        self,\n+        def_id: DefId,\n+    ) -> impl Iterator<Item = ty::AssociatedItem> + 'a {\n         let def_ids = self.associated_item_def_ids(def_id);\n-        (0..def_ids.len()).map(move |i| self.associated_item(def_ids[i]))\n+        Box::new((0..def_ids.len()).map(move |i| self.associated_item(def_ids[i])))\n+            as Box<dyn Iterator<Item = ty::AssociatedItem> + 'a>\n     }\n \n     /// Returns true if the impls are the same polarity and are implementing"}, {"sha": "d7ab6e39ac5f082dbbd4103810abc3266d66a196", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=9d5ec9ef1a03d343d01bde68ed6e6affc32ae492", "patch": "@@ -18,6 +18,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use ty::subst::{Substs, Subst, Kind, UnpackedKind};\n use ty::{self, AdtDef, TypeFlags, Ty, TyCtxt, TypeFoldable};\n use ty::{Slice, TyS};\n+use util::captures::Captures;\n \n use std::iter;\n use std::cmp::Ordering;\n@@ -384,9 +385,11 @@ impl<'a, 'gcx, 'tcx> ClosureSubsts<'tcx> {\n     /// This returns the types of the MIR locals which had to be stored across suspension points.\n     /// It is calculated in rustc_mir::transform::generator::StateTransform.\n     /// All the types here must be in the tuple in GeneratorInterior.\n-    pub fn state_tys(self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>) ->\n-        impl Iterator<Item=Ty<'tcx>> + 'a\n-    {\n+    pub fn state_tys(\n+        self,\n+        def_id: DefId,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    ) -> impl Iterator<Item=Ty<'tcx>> + Captures<'gcx> + 'a {\n         let state = tcx.generator_layout(def_id).fields.iter();\n         state.map(move |d| d.ty.subst(tcx, self.substs))\n     }\n@@ -403,7 +406,7 @@ impl<'a, 'gcx, 'tcx> ClosureSubsts<'tcx> {\n     /// This is the types of all the fields stored in a generator.\n     /// It includes the upvars, state types and the state discriminant which is u32.\n     pub fn field_tys(self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>) ->\n-        impl Iterator<Item=Ty<'tcx>> + 'a\n+        impl Iterator<Item=Ty<'tcx>> + Captures<'gcx> + 'a\n     {\n         self.pre_transforms_tys(def_id, tcx).chain(self.state_tys(def_id, tcx))\n     }"}, {"sha": "b68cfd278fa9eb0b01f35b3124b94c1822874ce3", "filename": "src/librustc/util/captures.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc%2Futil%2Fcaptures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc%2Futil%2Fcaptures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcaptures.rs?ref=9d5ec9ef1a03d343d01bde68ed6e6affc32ae492", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// \"Signaling\" trait used in impl trait to tag lifetimes that you may\n+/// need to capture but don't really need for other reasons.\n+/// Basically a workaround; see [this comment] for details.\n+///\n+/// [this comment]: https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\n+pub trait Captures<'a> { }\n+\n+impl<'a, T: ?Sized> Captures<'a> for T { }"}, {"sha": "b0c945fbf2a052f3f1f1027c3d62b03dc2b76451", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=9d5ec9ef1a03d343d01bde68ed6e6affc32ae492", "patch": "@@ -29,6 +29,7 @@ use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::codec::TyDecoder;\n use rustc::mir::Mir;\n+use rustc::util::captures::Captures;\n use rustc::util::nodemap::FxHashMap;\n \n use std::collections::BTreeMap;\n@@ -146,7 +147,10 @@ impl<'a, 'tcx: 'a, T: Decodable> Lazy<T> {\n }\n \n impl<'a, 'tcx: 'a, T: Decodable> LazySeq<T> {\n-    pub fn decode<M: Metadata<'a, 'tcx>>(self, meta: M) -> impl Iterator<Item = T> + 'a {\n+    pub fn decode<M: Metadata<'a, 'tcx>>(\n+        self,\n+        meta: M,\n+    ) -> impl Iterator<Item = T> + Captures<'tcx> + 'a {\n         let mut dcx = meta.decoder(self.position);\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n         (0..self.len).map(move |_| T::decode(&mut dcx).unwrap())"}, {"sha": "6f24d06844bb4c124ed600787acfe1ec7459e949", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5ec9ef1a03d343d01bde68ed6e6affc32ae492/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9d5ec9ef1a03d343d01bde68ed6e6affc32ae492", "patch": "@@ -35,8 +35,9 @@ use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n-use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::ty::util::Discr;\n+use rustc::util::captures::Captures;\n+use rustc::util::nodemap::{FxHashSet, FxHashMap};\n \n use syntax::{abi, ast};\n use syntax::ast::MetaItemKind;\n@@ -1281,7 +1282,7 @@ fn is_unsized<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n fn early_bound_lifetimes_from_generics<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ast_generics: &'a hir::Generics)\n-    -> impl Iterator<Item=&'a hir::LifetimeDef>\n+    -> impl Iterator<Item=&'a hir::LifetimeDef> + Captures<'tcx>\n {\n     ast_generics\n         .lifetimes()"}]}