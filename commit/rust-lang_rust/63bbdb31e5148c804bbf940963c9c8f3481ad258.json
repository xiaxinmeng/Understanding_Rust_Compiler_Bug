{"sha": "63bbdb31e5148c804bbf940963c9c8f3481ad258", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYmJkYjMxZTUxNDhjODA0YmJmOTQwOTYzYzljOGYzNDgxYWQyNTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-16T16:52:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-16T16:52:46Z"}, "message": "Merge #6897\n\n6897: Basic support for macros 2.0 r=jonas-schievink a=jonas-schievink\n\nThis adds support for (built-in-only) macros 2.0, and removes some hacks used for builtin derives, which are declared via macros 2.0 in libcore.\r\n\r\nFirst steps for https://github.com/rust-analyzer/rust-analyzer/issues/2248.\r\n\r\nBlocked on https://github.com/rust-analyzer/ungrammar/pull/16.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "2732cd2c3878257d9b55447830bc824447332c98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2732cd2c3878257d9b55447830bc824447332c98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63bbdb31e5148c804bbf940963c9c8f3481ad258", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf2jteCRBK7hj4Ov3rIwAAdHIIAEJ1//u6oyUcr9z3bLyciTDH\n4qGjxWU2jilCOAmCdbWYDidONyHE8y8IZoIZOp7okF5TxXmJTrJkyKqG67wS6qxG\nDzlbMEWGokY7EmSbIli1vWVWfsMIRLN78I62VNuujAcVmfiv0Wa5Fvh+7b5oOYJ9\nHwu90UYy+2tPbA+pX4Nmdh0hheW6DpgaNGBTdbylkUGuieclZHJGlIl2EA82b+NU\nOuEiPqtT/rf67dv1MbaQttaR0cCjVF2jik0XEOooG1g3IP9bhjVN7+c00z5CxNTx\n2gSNS4ho0PTs8h8tbtgGAnlmZukHK/1tjnNAZHLHVTXp8pp1SVkbCIpXHlagoZ0=\n=ubUM\n-----END PGP SIGNATURE-----\n", "payload": "tree 2732cd2c3878257d9b55447830bc824447332c98\nparent 423f3872246f1a67b49e248f3437cb46fdfc8138\nparent d34611633b3b2404188b9e12b08c5def589808c2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608137566 +0000\ncommitter GitHub <noreply@github.com> 1608137566 +0000\n\nMerge #6897\n\n6897: Basic support for macros 2.0 r=jonas-schievink a=jonas-schievink\n\nThis adds support for (built-in-only) macros 2.0, and removes some hacks used for builtin derives, which are declared via macros 2.0 in libcore.\r\n\r\nFirst steps for https://github.com/rust-analyzer/rust-analyzer/issues/2248.\r\n\r\nBlocked on https://github.com/rust-analyzer/ungrammar/pull/16.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63bbdb31e5148c804bbf940963c9c8f3481ad258", "html_url": "https://github.com/rust-lang/rust/commit/63bbdb31e5148c804bbf940963c9c8f3481ad258", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63bbdb31e5148c804bbf940963c9c8f3481ad258/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "423f3872246f1a67b49e248f3437cb46fdfc8138", "url": "https://api.github.com/repos/rust-lang/rust/commits/423f3872246f1a67b49e248f3437cb46fdfc8138", "html_url": "https://github.com/rust-lang/rust/commit/423f3872246f1a67b49e248f3437cb46fdfc8138"}, {"sha": "d34611633b3b2404188b9e12b08c5def589808c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34611633b3b2404188b9e12b08c5def589808c2", "html_url": "https://github.com/rust-lang/rust/commit/d34611633b3b2404188b9e12b08c5def589808c2"}], "stats": {"total": 354, "additions": 286, "deletions": 68}, "files": [{"sha": "e44b7d1d92098c4b58b64e3ffb7b421ecccd75af", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -1827,9 +1827,9 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.2.2\"\n+version = \"1.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"873186a460627379e7e28880a0d33b729c205634f6f021321f50b323235e62d7\"\n+checksum = \"7311ee93faac43aa9da26b043eb244092a29a3078c79af9396f63f800cc3a59a\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "9bfcd215a5e74f873ba15dd004d400a4a6b6229a", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -970,7 +970,7 @@ impl MacroDef {\n     /// defines this macro. The reasons for this is that macros are expanded\n     /// early, in `hir_expand`, where modules simply do not exist yet.\n     pub fn module(self, db: &dyn HirDatabase) -> Option<Module> {\n-        let krate = self.id.krate?;\n+        let krate = self.id.krate;\n         let module_id = db.crate_def_map(krate).root;\n         Some(Module::new(Crate { id: krate }, module_id))\n     }"}, {"sha": "11ae63c31ca1724a25f4684ba68586c153bc828c", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -110,8 +110,8 @@ impl HasSource for TypeAlias {\n     }\n }\n impl HasSource for MacroDef {\n-    type Ast = ast::MacroRules;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::MacroRules> {\n+    type Ast = ast::Macro;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Macro> {\n         InFile {\n             file_id: self.id.ast_id.expect(\"MacroDef without ast_id\").file_id,\n             value: self.id.ast_id.expect(\"MacroDef without ast_id\").to_node(db.upcast()),"}, {"sha": "3efca5baa5cda5ecf96f5d2753dab76b5a6cb038", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -157,8 +157,8 @@ impl SourceToDefCtx<'_, '_> {\n         let file_id = src.file_id.original_file(self.db.upcast());\n         let krate = self.file_to_def(file_id)?.krate;\n         let file_ast_id = self.db.ast_id_map(src.file_id).ast_id(&src.value);\n-        let ast_id = Some(AstId::new(src.file_id, file_ast_id));\n-        Some(MacroDefId { krate: Some(krate), ast_id, kind, local_inner: false })\n+        let ast_id = Some(AstId::new(src.file_id, file_ast_id.upcast()));\n+        Some(MacroDefId { krate, ast_id, kind, local_inner: false })\n     }\n \n     pub(super) fn find_container(&mut self, src: InFile<&SyntaxNode>) -> Option<ChildContainer> {"}, {"sha": "23e2fd7641fab3e9aca67bcad3fc57177adca800", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -772,7 +772,10 @@ impl ExprCollector<'_> {\n                     | ast::Item::Module(_)\n                     | ast::Item::MacroCall(_) => return None,\n                     ast::Item::MacroRules(def) => {\n-                        return Some(Either::Right(def));\n+                        return Some(Either::Right(ast::Macro::from(def)));\n+                    }\n+                    ast::Item::MacroDef(def) => {\n+                        return Some(Either::Right(ast::Macro::from(def)));\n                     }\n                 };\n \n@@ -800,7 +803,7 @@ impl ExprCollector<'_> {\n                 }\n                 Either::Right(e) => {\n                     let mac = MacroDefId {\n-                        krate: Some(self.expander.module.krate),\n+                        krate: self.expander.module.krate,\n                         ast_id: Some(self.expander.ast_id(&e)),\n                         kind: MacroDefKind::Declarative,\n                         local_inner: false,"}, {"sha": "62ab3b2bd6227decb9efabc317292bad8366b582", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -363,7 +363,7 @@ impl ItemInNs {\n                 ModuleDefId::TypeAliasId(id) => id.lookup(db).module(db).krate,\n                 ModuleDefId::BuiltinType(_) => return None,\n             },\n-            ItemInNs::Macros(id) => return id.krate,\n+            ItemInNs::Macros(id) => return Some(id.krate),\n         })\n     }\n }"}, {"sha": "8cd0b18ccdad342041815164827a858a5f61bbf2", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -143,6 +143,7 @@ impl ItemTree {\n                 mods,\n                 macro_calls,\n                 macro_rules,\n+                macro_defs,\n                 exprs,\n                 vis,\n                 generics,\n@@ -164,6 +165,7 @@ impl ItemTree {\n             mods.shrink_to_fit();\n             macro_calls.shrink_to_fit();\n             macro_rules.shrink_to_fit();\n+            macro_defs.shrink_to_fit();\n             exprs.shrink_to_fit();\n \n             vis.arena.shrink_to_fit();\n@@ -283,6 +285,7 @@ struct ItemTreeData {\n     mods: Arena<Mod>,\n     macro_calls: Arena<MacroCall>,\n     macro_rules: Arena<MacroRules>,\n+    macro_defs: Arena<MacroDef>,\n     exprs: Arena<Expr>,\n \n     vis: ItemVisibilities,\n@@ -431,6 +434,7 @@ mod_items! {\n     Mod in mods -> ast::Module,\n     MacroCall in macro_calls -> ast::MacroCall,\n     MacroRules in macro_rules -> ast::MacroRules,\n+    MacroDef in macro_defs -> ast::MacroDef,\n }\n \n macro_rules! impl_index {\n@@ -640,7 +644,7 @@ pub struct MacroCall {\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct MacroRules {\n-    /// For `macro_rules!` declarations, this is the name of the declared macro.\n+    /// The name of the declared macro.\n     pub name: Name,\n     /// Has `#[macro_export]`.\n     pub is_export: bool,\n@@ -651,6 +655,16 @@ pub struct MacroRules {\n     pub ast_id: FileAstId<ast::MacroRules>,\n }\n \n+/// \"Macros 2.0\" macro definition.\n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct MacroDef {\n+    pub name: Name,\n+    pub visibility: RawVisibilityId,\n+    /// Has `#[rustc_builtin_macro]`.\n+    pub is_builtin: bool,\n+    pub ast_id: FileAstId<ast::MacroDef>,\n+}\n+\n // NB: There's no `FileAstId` for `Expr`. The only case where this would be useful is for array\n // lengths, but we don't do much with them yet.\n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -680,7 +694,8 @@ impl ModItem {\n             | ModItem::Trait(_)\n             | ModItem::Impl(_)\n             | ModItem::Mod(_)\n-            | ModItem::MacroRules(_) => None,\n+            | ModItem::MacroRules(_)\n+            | ModItem::MacroDef(_) => None,\n             ModItem::MacroCall(call) => Some(AssocItem::MacroCall(*call)),\n             ModItem::Const(konst) => Some(AssocItem::Const(*konst)),\n             ModItem::TypeAlias(alias) => Some(AssocItem::TypeAlias(*alias)),\n@@ -708,6 +723,7 @@ impl ModItem {\n             ModItem::Mod(it) => tree[it.index].ast_id().upcast(),\n             ModItem::MacroCall(it) => tree[it.index].ast_id().upcast(),\n             ModItem::MacroRules(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::MacroDef(it) => tree[it.index].ast_id().upcast(),\n         }\n     }\n }"}, {"sha": "1dc06a211556ec00e375877d4934448ed3c156e1", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -101,7 +101,8 @@ impl Ctx {\n             | ast::Item::ExternCrate(_)\n             | ast::Item::Use(_)\n             | ast::Item::MacroCall(_)\n-            | ast::Item::MacroRules(_) => {}\n+            | ast::Item::MacroRules(_)\n+            | ast::Item::MacroDef(_) => {}\n         };\n \n         let attrs = Attrs::new(item, &self.hygiene);\n@@ -122,6 +123,7 @@ impl Ctx {\n             ast::Item::ExternCrate(ast) => self.lower_extern_crate(ast).map(Into::into),\n             ast::Item::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n             ast::Item::MacroRules(ast) => self.lower_macro_rules(ast).map(Into::into),\n+            ast::Item::MacroDef(ast) => self.lower_macro_def(ast).map(Into::into),\n             ast::Item::ExternBlock(ast) => {\n                 Some(ModItems(self.lower_extern_block(ast).into_iter().collect::<SmallVec<_>>()))\n             }\n@@ -561,6 +563,18 @@ impl Ctx {\n         Some(id(self.data().macro_rules.alloc(res)))\n     }\n \n+    fn lower_macro_def(&mut self, m: &ast::MacroDef) -> Option<FileItemTreeId<MacroDef>> {\n+        let name = m.name().map(|it| it.as_name())?;\n+        let attrs = Attrs::new(m, &self.hygiene);\n+\n+        let ast_id = self.source_ast_id_map.ast_id(m);\n+        let visibility = self.lower_visibility(m);\n+\n+        let is_builtin = attrs.by_key(\"rustc_builtin_macro\").exists();\n+        let res = MacroDef { name, is_builtin, ast_id, visibility };\n+        Some(id(self.data().macro_defs.alloc(res)))\n+    }\n+\n     fn lower_extern_block(&mut self, block: &ast::ExternBlock) -> Vec<ModItem> {\n         block.extern_item_list().map_or(Vec::new(), |list| {\n             list.extern_items()"}, {"sha": "785895277fa48ca546b23c58073d4a830f7d0d10", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -309,13 +309,13 @@ impl DefCollector<'_> {\n         let macro_def = match self.proc_macros.iter().find(|(n, _)| n == name) {\n             Some((_, expander)) => MacroDefId {\n                 ast_id: None,\n-                krate: Some(self.def_map.krate),\n+                krate: self.def_map.krate,\n                 kind: MacroDefKind::ProcMacro(*expander),\n                 local_inner: false,\n             },\n             None => MacroDefId {\n                 ast_id: None,\n-                krate: Some(self.def_map.krate),\n+                krate: self.def_map.krate,\n                 kind: MacroDefKind::ProcMacro(ProcMacroExpander::dummy(self.def_map.krate)),\n                 local_inner: false,\n             },\n@@ -784,14 +784,6 @@ impl DefCollector<'_> {\n         directive: &DeriveDirective,\n         path: &ModPath,\n     ) -> Option<MacroDefId> {\n-        if let Some(name) = path.as_ident() {\n-            // FIXME this should actually be handled with the normal name\n-            // resolution; the std lib defines built-in stubs for the derives,\n-            // but these are new-style `macro`s, which we don't support yet\n-            if let Some(def_id) = find_builtin_derive(name) {\n-                return Some(def_id);\n-            }\n-        }\n         let resolved_res = self.def_map.resolve_path_fp_with_macro(\n             self.db,\n             ResolveMode::Other,\n@@ -976,6 +968,35 @@ impl ModCollector<'_, '_> {\n                 }\n                 ModItem::MacroCall(mac) => self.collect_macro_call(&self.item_tree[mac]),\n                 ModItem::MacroRules(mac) => self.collect_macro_rules(&self.item_tree[mac]),\n+                ModItem::MacroDef(id) => {\n+                    let mac = &self.item_tree[id];\n+                    let ast_id = InFile::new(self.file_id, mac.ast_id.upcast());\n+\n+                    // \"Macro 2.0\" is not currently supported by rust-analyzer, but libcore uses it\n+                    // to define builtin macros, so we support at least that part.\n+                    if mac.is_builtin {\n+                        let krate = self.def_collector.def_map.krate;\n+                        let macro_id = find_builtin_macro(&mac.name, krate, ast_id)\n+                            .or_else(|| find_builtin_derive(&mac.name, krate, ast_id));\n+                        if let Some(macro_id) = macro_id {\n+                            let vis = self\n+                                .def_collector\n+                                .def_map\n+                                .resolve_visibility(\n+                                    self.def_collector.db,\n+                                    self.module_id,\n+                                    &self.item_tree[mac.visibility],\n+                                )\n+                                .unwrap_or(Visibility::Public);\n+                            self.def_collector.update(\n+                                self.module_id,\n+                                &[(Some(mac.name.clone()), PerNs::macros(macro_id, vis))],\n+                                vis,\n+                                ImportType::Named,\n+                            );\n+                        }\n+                    }\n+                }\n                 ModItem::Impl(imp) => {\n                     let module = ModuleId {\n                         krate: self.def_collector.def_map.krate,\n@@ -1280,7 +1301,7 @@ impl ModCollector<'_, '_> {\n     }\n \n     fn collect_macro_rules(&mut self, mac: &MacroRules) {\n-        let ast_id = InFile::new(self.file_id, mac.ast_id);\n+        let ast_id = InFile::new(self.file_id, mac.ast_id.upcast());\n \n         // Case 1: builtin macros\n         if mac.is_builtin {\n@@ -1299,7 +1320,7 @@ impl ModCollector<'_, '_> {\n         // Case 2: normal `macro_rules!` macro\n         let macro_id = MacroDefId {\n             ast_id: Some(ast_id),\n-            krate: Some(self.def_collector.def_map.krate),\n+            krate: self.def_collector.def_map.krate,\n             kind: MacroDefKind::Declarative,\n             local_inner: mac.is_local_inner,\n         };"}, {"sha": "6fe2ee78a1fcbd176cfb10b9d6ecc359f03e7a50", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -633,14 +633,43 @@ pub struct bar;\n fn expand_derive() {\n     let map = compute_crate_def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:core\n+        use core::*;\n+\n         #[derive(Copy, Clone)]\n         struct Foo;\n+\n+        //- /core.rs crate:core\n+        #[rustc_builtin_macro]\n+        pub macro Copy {}\n+\n+        #[rustc_builtin_macro]\n+        pub macro Clone {}\n         \",\n     );\n     assert_eq!(map.modules[map.root].scope.impls().len(), 2);\n }\n \n+#[test]\n+fn resolve_builtin_derive() {\n+    check(\n+        r#\"\n+//- /main.rs crate:main deps:core\n+use core::*;\n+\n+//- /core.rs crate:core\n+#[rustc_builtin_macro]\n+pub macro Clone {}\n+\n+pub trait Clone {}\n+\"#,\n+        expect![[r#\"\n+            crate\n+            Clone: t m\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn macro_expansion_overflow() {\n     mark::check!(macro_expansion_overflow);"}, {"sha": "ad378762a1eaa640e3bf98d9a626f5ddd836219d", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -8,7 +8,7 @@ use syntax::{\n     match_ast,\n };\n \n-use crate::{db::AstDatabase, name, quote, LazyMacroId, MacroDefId, MacroDefKind};\n+use crate::{db::AstDatabase, name, quote, AstId, CrateId, LazyMacroId, MacroDefId, MacroDefKind};\n \n macro_rules! register_builtin {\n     ( $($trait:ident => $expand:ident),* ) => {\n@@ -29,16 +29,15 @@ macro_rules! register_builtin {\n                 };\n                 expander(db, id, tt)\n             }\n-        }\n-\n-        pub fn find_builtin_derive(ident: &name::Name) -> Option<MacroDefId> {\n-            let kind = match ident {\n-                $( id if id == &name::name![$trait] => BuiltinDeriveExpander::$trait, )*\n-                 _ => return None,\n-            };\n \n-            Some(MacroDefId { krate: None, ast_id: None, kind: MacroDefKind::BuiltInDerive(kind), local_inner: false })\n+            fn find_by_name(name: &name::Name) -> Option<Self> {\n+                match name {\n+                    $( id if id == &name::name![$trait] => Some(BuiltinDeriveExpander::$trait), )*\n+                     _ => None,\n+                }\n+            }\n         }\n+\n     };\n }\n \n@@ -54,6 +53,20 @@ register_builtin! {\n     PartialEq => partial_eq_expand\n }\n \n+pub fn find_builtin_derive(\n+    ident: &name::Name,\n+    krate: CrateId,\n+    ast_id: AstId<ast::Macro>,\n+) -> Option<MacroDefId> {\n+    let expander = BuiltinDeriveExpander::find_by_name(ident)?;\n+    Some(MacroDefId {\n+        krate,\n+        ast_id: Some(ast_id),\n+        kind: MacroDefKind::BuiltInDerive(expander),\n+        local_inner: false,\n+    })\n+}\n+\n struct BasicAdtInfo {\n     name: tt::Ident,\n     type_params: usize,\n@@ -261,7 +274,7 @@ mod tests {\n     use super::*;\n \n     fn expand_builtin_derive(s: &str, name: Name) -> String {\n-        let def = find_builtin_derive(&name).unwrap();\n+        let expander = BuiltinDeriveExpander::find_by_name(&name).unwrap();\n         let fixture = format!(\n             r#\"//- /main.rs crate:main deps:core\n <|>\n@@ -283,7 +296,12 @@ mod tests {\n         let attr_id = AstId::new(file_id.into(), ast_id_map.ast_id(&items[0]));\n \n         let loc = MacroCallLoc {\n-            def,\n+            def: MacroDefId {\n+                krate: CrateId(0),\n+                ast_id: None,\n+                kind: MacroDefKind::BuiltInDerive(expander),\n+                local_inner: false,\n+            },\n             krate: CrateId(0),\n             kind: MacroCallKind::Attr(attr_id, name.to_string()),\n         };"}, {"sha": "dddbbcdac48e0e0858a966cb7be02041715d5428", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -63,19 +63,19 @@ macro_rules! register_builtin {\n pub fn find_builtin_macro(\n     ident: &name::Name,\n     krate: CrateId,\n-    ast_id: AstId<ast::MacroRules>,\n+    ast_id: AstId<ast::Macro>,\n ) -> Option<MacroDefId> {\n     let kind = find_by_name(ident)?;\n \n     match kind {\n         Either::Left(kind) => Some(MacroDefId {\n-            krate: Some(krate),\n+            krate,\n             ast_id: Some(ast_id),\n             kind: MacroDefKind::BuiltIn(kind),\n             local_inner: false,\n         }),\n         Either::Right(kind) => Some(MacroDefId {\n-            krate: Some(krate),\n+            krate,\n             ast_id: Some(ast_id),\n             kind: MacroDefKind::BuiltInEager(kind),\n             local_inner: false,\n@@ -515,24 +515,27 @@ mod tests {\n     fn expand_builtin_macro(ra_fixture: &str) -> String {\n         let (db, file_id) = TestDB::with_single_file(&ra_fixture);\n         let parsed = db.parse(file_id);\n-        let macro_rules: Vec<_> =\n+        let mut macro_rules: Vec<_> =\n             parsed.syntax_node().descendants().filter_map(ast::MacroRules::cast).collect();\n-        let macro_calls: Vec<_> =\n+        let mut macro_calls: Vec<_> =\n             parsed.syntax_node().descendants().filter_map(ast::MacroCall::cast).collect();\n \n         let ast_id_map = db.ast_id_map(file_id.into());\n \n         assert_eq!(macro_rules.len(), 1, \"test must contain exactly 1 `macro_rules!`\");\n         assert_eq!(macro_calls.len(), 1, \"test must contain exactly 1 macro call\");\n-        let expander = find_by_name(&macro_rules[0].name().unwrap().as_name()).unwrap();\n+        let macro_rules = ast::Macro::from(macro_rules.pop().unwrap());\n+        let macro_call = macro_calls.pop().unwrap();\n+\n+        let expander = find_by_name(&macro_rules.name().unwrap().as_name()).unwrap();\n \n         let krate = CrateId(0);\n         let file_id = match expander {\n             Either::Left(expander) => {\n                 // the first one should be a macro_rules\n                 let def = MacroDefId {\n-                    krate: Some(CrateId(0)),\n-                    ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_rules[0]))),\n+                    krate: CrateId(0),\n+                    ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_rules))),\n                     kind: MacroDefKind::BuiltIn(expander),\n                     local_inner: false,\n                 };\n@@ -542,7 +545,7 @@ mod tests {\n                     krate,\n                     kind: MacroCallKind::FnLike(AstId::new(\n                         file_id.into(),\n-                        ast_id_map.ast_id(&macro_calls[0]),\n+                        ast_id_map.ast_id(&macro_call),\n                     )),\n                 };\n \n@@ -552,13 +555,13 @@ mod tests {\n             Either::Right(expander) => {\n                 // the first one should be a macro_rules\n                 let def = MacroDefId {\n-                    krate: Some(krate),\n-                    ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_rules[0]))),\n+                    krate,\n+                    ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_rules))),\n                     kind: MacroDefKind::BuiltInEager(expander),\n                     local_inner: false,\n                 };\n \n-                let args = macro_calls[0].token_tree().unwrap();\n+                let args = macro_call.token_tree().unwrap();\n                 let parsed_args = mbe::ast_to_token_tree(&args).unwrap().0;\n \n                 let arg_id = db.intern_eager_expansion({"}, {"sha": "4477d867f7cfaf35084843cae5b67b5587e968a5", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -129,7 +129,10 @@ fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n     match id.kind {\n         MacroDefKind::Declarative => {\n-            let macro_call = id.ast_id?.to_node(db);\n+            let macro_call = match id.ast_id?.to_node(db) {\n+                syntax::ast::Macro::MacroRules(mac) => mac,\n+                syntax::ast::Macro::MacroDef(_) => return None,\n+            };\n             let arg = macro_call.token_tree()?;\n             let (tt, tmap) = mbe::ast_to_token_tree(&arg).or_else(|| {\n                 log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);"}, {"sha": "7ab0a5e52eb071751df865f6d9cb4d9448cd8460", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -29,8 +29,8 @@ impl Hygiene {\n                 MacroCallId::LazyMacro(id) => {\n                     let loc = db.lookup_intern_macro(id);\n                     match loc.def.kind {\n-                        MacroDefKind::Declarative => (loc.def.krate, loc.def.local_inner),\n-                        MacroDefKind::BuiltIn(_) => (loc.def.krate, false),\n+                        MacroDefKind::Declarative => (Some(loc.def.krate), loc.def.local_inner),\n+                        MacroDefKind::BuiltIn(_) => (Some(loc.def.krate), false),\n                         MacroDefKind::BuiltInDerive(_) => (None, false),\n                         MacroDefKind::BuiltInEager(_) => (None, false),\n                         MacroDefKind::ProcMacro(_) => (None, false),"}, {"sha": "d486186e59d31b9800180f4d288229b3c657818e", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -145,7 +145,10 @@ impl HirFileId {\n                 let arg_tt = loc.kind.arg(db)?;\n \n                 let def = loc.def.ast_id.and_then(|id| {\n-                    let def_tt = id.to_node(db).token_tree()?;\n+                    let def_tt = match id.to_node(db) {\n+                        ast::Macro::MacroRules(mac) => mac.token_tree()?,\n+                        ast::Macro::MacroDef(_) => return None,\n+                    };\n                     Some(InFile::new(id.file_id, def_tt))\n                 });\n \n@@ -221,14 +224,8 @@ impl From<EagerMacroId> for MacroCallId {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroDefId {\n-    // FIXME: krate and ast_id are currently optional because we don't have a\n-    // definition location for built-in derives. There is one, though: the\n-    // standard library defines them. The problem is that it uses the new\n-    // `macro` syntax for this, which we don't support yet. As soon as we do\n-    // (which will probably require touching this code), we can instead use\n-    // that (and also remove the hacks for resolving built-in derives).\n-    pub krate: Option<CrateId>,\n-    pub ast_id: Option<AstId<ast::MacroRules>>,\n+    pub krate: CrateId,\n+    pub ast_id: Option<AstId<ast::Macro>>,\n     pub kind: MacroDefKind,\n \n     pub local_inner: bool,"}, {"sha": "a7656b864865cc832075467f4ae03211b52eb7b8", "filename": "crates/hir_ty/src/tests/macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -686,6 +686,8 @@ mod clone {\n     trait Clone {\n         fn clone(&self) -> Self;\n     }\n+    #[rustc_builtin_macro]\n+    macro Clone {}\n }\n \"#,\n     );\n@@ -702,6 +704,8 @@ mod clone {\n     trait Clone {\n         fn clone(&self) -> Self;\n     }\n+    #[rustc_builtin_macro]\n+    macro Clone {}\n }\n #[derive(Clone)]\n pub struct S;\n@@ -737,6 +741,8 @@ mod clone {\n     trait Clone {\n         fn clone(&self) -> Self;\n     }\n+    #[rustc_builtin_macro]\n+    macro Clone {}\n }\n \"#,\n     );"}, {"sha": "68c628d314376e5e522673186a54c30d33519367", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -221,6 +221,8 @@ struct Foo<|>;\n mod marker {\n     trait Copy {}\n }\n+#[rustc_builtin_macro]\n+macro Copy {}\n \"#,\n         );\n     }"}, {"sha": "3530a5fdb4b4c70a47ea05ab45d50dd3cab9282c", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -38,6 +38,9 @@\n <pre><code><span class=\"keyword\">use</span> <span class=\"module\">inner</span><span class=\"operator\">::</span><span class=\"punctuation\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"module declaration\">inner_mod</span><span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n \n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"keyword\">macro</span> <span class=\"unresolved_reference declaration\">Copy</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+\n <span class=\"comment\">// Needed for function consuming vs normal</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">marker</span> <span class=\"punctuation\">{</span>\n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"copy\"</span><span class=\"attribute attribute\">]</span>\n@@ -119,7 +122,7 @@\n     <span class=\"value_param callable\">f</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>\n <span class=\"punctuation\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">foobar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"unresolved_reference\">Copy</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foobar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"macro\">Copy</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">bar</span> <span class=\"operator\">=</span> <span class=\"function\">foobar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>"}, {"sha": "f53d2c3ba41300a14968061b8ddf0e6caedb35f9", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -12,6 +12,9 @@ fn test_highlighting() {\n use inner::{self as inner_mod};\n mod inner {}\n \n+#[rustc_builtin_macro]\n+macro Copy {}\n+\n // Needed for function consuming vs normal\n pub mod marker {\n     #[lang = \"copy\"]"}, {"sha": "70c568ea1e7fbe51bd4f278a504d77b03924ca58", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -19,8 +19,8 @@ pub use self::{\n     expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     generated::{nodes::*, tokens::*},\n     node_ext::{\n-        AttrKind, FieldKind, NameOrNameRef, PathSegmentKind, SelfParamKind, SlicePatComponents,\n-        StructKind, TypeBoundKind, VisibilityKind,\n+        AttrKind, FieldKind, Macro, NameOrNameRef, PathSegmentKind, SelfParamKind,\n+        SlicePatComponents, StructKind, TypeBoundKind, VisibilityKind,\n     },\n     token_ext::*,\n     traits::*,"}, {"sha": "6eae323f4a24bdd3c9196028ea3889874db4ead0", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -286,6 +286,18 @@ impl MacroRules {\n     pub fn token_tree(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct MacroDef {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for MacroDef {}\n+impl ast::NameOwner for MacroDef {}\n+impl ast::VisibilityOwner for MacroDef {}\n+impl MacroDef {\n+    pub fn macro_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![macro]) }\n+    pub fn args(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n+    pub fn body(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Module {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1332,6 +1344,7 @@ pub enum Item {\n     Impl(Impl),\n     MacroCall(MacroCall),\n     MacroRules(MacroRules),\n+    MacroDef(MacroDef),\n     Module(Module),\n     Static(Static),\n     Struct(Struct),\n@@ -1689,6 +1702,17 @@ impl AstNode for MacroRules {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for MacroDef {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_DEF }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for Module {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MODULE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3086,6 +3110,9 @@ impl From<MacroCall> for Item {\n impl From<MacroRules> for Item {\n     fn from(node: MacroRules) -> Item { Item::MacroRules(node) }\n }\n+impl From<MacroDef> for Item {\n+    fn from(node: MacroDef) -> Item { Item::MacroDef(node) }\n+}\n impl From<Module> for Item {\n     fn from(node: Module) -> Item { Item::Module(node) }\n }\n@@ -3111,7 +3138,7 @@ impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CONST | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL | MACRO_CALL | MACRO_RULES\n-            | MODULE | STATIC | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE => true,\n+            | MACRO_DEF | MODULE | STATIC | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE => true,\n             _ => false,\n         }\n     }\n@@ -3125,6 +3152,7 @@ impl AstNode for Item {\n             IMPL => Item::Impl(Impl { syntax }),\n             MACRO_CALL => Item::MacroCall(MacroCall { syntax }),\n             MACRO_RULES => Item::MacroRules(MacroRules { syntax }),\n+            MACRO_DEF => Item::MacroDef(MacroDef { syntax }),\n             MODULE => Item::Module(Module { syntax }),\n             STATIC => Item::Static(Static { syntax }),\n             STRUCT => Item::Struct(Struct { syntax }),\n@@ -3146,6 +3174,7 @@ impl AstNode for Item {\n             Item::Impl(it) => &it.syntax,\n             Item::MacroCall(it) => &it.syntax,\n             Item::MacroRules(it) => &it.syntax,\n+            Item::MacroDef(it) => &it.syntax,\n             Item::Module(it) => &it.syntax,\n             Item::Static(it) => &it.syntax,\n             Item::Struct(it) => &it.syntax,\n@@ -3615,6 +3644,11 @@ impl std::fmt::Display for MacroRules {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for MacroDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for Module {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "40dec3c7f99c84a6659a34a7556d3ec2ca5f3824", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -3,6 +3,7 @@\n \n use std::fmt;\n \n+use ast::AttrsOwner;\n use itertools::Itertools;\n use parser::SyntaxKind;\n \n@@ -31,6 +32,57 @@ fn text_of_first_token(node: &SyntaxNode) -> &SmolStr {\n     node.green().children().next().and_then(|it| it.into_token()).unwrap().text()\n }\n \n+pub enum Macro {\n+    MacroRules(ast::MacroRules),\n+    MacroDef(ast::MacroDef),\n+}\n+\n+impl From<ast::MacroRules> for Macro {\n+    fn from(it: ast::MacroRules) -> Self {\n+        Macro::MacroRules(it)\n+    }\n+}\n+\n+impl From<ast::MacroDef> for Macro {\n+    fn from(it: ast::MacroDef) -> Self {\n+        Macro::MacroDef(it)\n+    }\n+}\n+\n+impl AstNode for Macro {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            SyntaxKind::MACRO_RULES | SyntaxKind::MACRO_DEF => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        let res = match syntax.kind() {\n+            SyntaxKind::MACRO_RULES => Macro::MacroRules(ast::MacroRules { syntax }),\n+            SyntaxKind::MACRO_DEF => Macro::MacroDef(ast::MacroDef { syntax }),\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            Macro::MacroRules(it) => it.syntax(),\n+            Macro::MacroDef(it) => it.syntax(),\n+        }\n+    }\n+}\n+\n+impl NameOwner for Macro {\n+    fn name(&self) -> Option<ast::Name> {\n+        match self {\n+            Macro::MacroRules(mac) => mac.name(),\n+            Macro::MacroDef(mac) => mac.name(),\n+        }\n+    }\n+}\n+\n+impl AttrsOwner for Macro {}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum AttrKind {\n     Inner,\n@@ -462,4 +514,6 @@ impl ast::DocCommentsOwner for ast::Const {}\n impl ast::DocCommentsOwner for ast::TypeAlias {}\n impl ast::DocCommentsOwner for ast::Impl {}\n impl ast::DocCommentsOwner for ast::MacroRules {}\n+impl ast::DocCommentsOwner for ast::MacroDef {}\n+impl ast::DocCommentsOwner for ast::Macro {}\n impl ast::DocCommentsOwner for ast::Use {}"}, {"sha": "391647fc67168fa3cb44a0aa9d989f893af17ab1", "filename": "crates/syntax/src/display.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bbdb31e5148c804bbf940963c9c8f3481ad258/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=63bbdb31e5148c804bbf940963c9c8f3481ad258", "patch": "@@ -76,8 +76,20 @@ pub fn type_label(node: &ast::TypeAlias) -> String {\n     label.trim().to_owned()\n }\n \n-pub fn macro_label(node: &ast::MacroRules) -> String {\n+pub fn macro_label(node: &ast::Macro) -> String {\n     let name = node.name().map(|name| name.syntax().text().to_string()).unwrap_or_default();\n-    let vis = if node.has_atom_attr(\"macro_export\") { \"#[macro_export]\\n\" } else { \"\" };\n-    format!(\"{}macro_rules! {}\", vis, name)\n+    match node {\n+        ast::Macro::MacroRules(node) => {\n+            let vis = if node.has_atom_attr(\"macro_export\") { \"#[macro_export]\\n\" } else { \"\" };\n+            format!(\"{}macro_rules! {}\", vis, name)\n+        }\n+        ast::Macro::MacroDef(node) => {\n+            let mut s = String::new();\n+            if let Some(vis) = node.visibility() {\n+                format_to!(s, \"{} \", vis);\n+            }\n+            format_to!(s, \"macro {}\", name);\n+            s\n+        }\n+    }\n }"}]}