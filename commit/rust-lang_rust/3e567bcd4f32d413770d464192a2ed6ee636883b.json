{"sha": "3e567bcd4f32d413770d464192a2ed6ee636883b", "node_id": "C_kwDOAAsO6NoAKDNlNTY3YmNkNGYzMmQ0MTM3NzBkNDY0MTkyYTJlZDZlZTYzNjg4M2I", "commit": {"author": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2022-07-04T22:57:41Z"}, "committer": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2022-08-26T20:13:33Z"}, "message": "Make invalid-value trigger on uninit primitives", "tree": {"sha": "cadf26abf4f3f715ba8615390b0183f45b1193cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cadf26abf4f3f715ba8615390b0183f45b1193cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e567bcd4f32d413770d464192a2ed6ee636883b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e567bcd4f32d413770d464192a2ed6ee636883b", "html_url": "https://github.com/rust-lang/rust/commit/3e567bcd4f32d413770d464192a2ed6ee636883b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e567bcd4f32d413770d464192a2ed6ee636883b/comments", "author": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "committer": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "450e99f93795c81c1f2d10be27fb3a98be5b0cfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/450e99f93795c81c1f2d10be27fb3a98be5b0cfc", "html_url": "https://github.com/rust-lang/rust/commit/450e99f93795c81c1f2d10be27fb3a98be5b0cfc"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "5b617fb2e2733c5a9f4ef2fac2e36ecb0087bab3", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e567bcd4f32d413770d464192a2ed6ee636883b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e567bcd4f32d413770d464192a2ed6ee636883b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=3e567bcd4f32d413770d464192a2ed6ee636883b", "patch": "@@ -2475,6 +2475,15 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                 Char if init == InitKind::Uninit => {\n                     Some((\"characters must be a valid Unicode codepoint\".to_string(), None))\n                 }\n+                Int(_) | Uint(_) if init == InitKind::Uninit => {\n+                    Some((\"integers must not be uninitialized\".to_string(), None))\n+                }\n+                Float(_) if init == InitKind::Uninit => {\n+                    Some((\"floats must not be uninitialized\".to_string(), None))\n+                }\n+                RawPtr(_) if init == InitKind::Uninit => {\n+                    Some((\"raw pointers must not be uninitialized\".to_string(), None))\n+                }\n                 // Recurse and checks for some compound types.\n                 Adt(adt_def, substs) if !adt_def.is_union() => {\n                     // First check if this ADT has a layout attribute (like `NonNull` and friends)."}, {"sha": "2d1ee6492af55b1f6524ee78b80e7c6b5b1f9104", "filename": "src/test/ui/lint/uninitialized-zeroed.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e567bcd4f32d413770d464192a2ed6ee636883b/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e567bcd4f32d413770d464192a2ed6ee636883b/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs?ref=3e567bcd4f32d413770d464192a2ed6ee636883b", "patch": "@@ -100,6 +100,9 @@ fn main() {\n         let _val: [bool; 2] = mem::zeroed();\n         let _val: [bool; 2] = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n \n+        let _val: i32 = mem::zeroed();\n+        let _val: i32 = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n         // Transmute-from-0\n         let _val: &'static i32 = mem::transmute(0usize); //~ ERROR: does not permit zero-initialization\n         let _val: &'static [i32] = mem::transmute((0usize, 0usize)); //~ ERROR: does not permit zero-initialization\n@@ -114,13 +117,12 @@ fn main() {\n         let _val: Option<&'static i32> = mem::zeroed();\n         let _val: Option<fn()> = mem::zeroed();\n         let _val: MaybeUninit<&'static i32> = mem::zeroed();\n-        let _val: i32 = mem::zeroed();\n         let _val: bool = MaybeUninit::zeroed().assume_init();\n         let _val: [bool; 0] = MaybeUninit::uninit().assume_init();\n         let _val: [!; 0] = MaybeUninit::zeroed().assume_init();\n+\n         // Some things that happen to work due to rustc implementation details,\n         // but are not guaranteed to keep working.\n-        let _val: i32 = mem::uninitialized();\n         let _val: OneFruit = mem::uninitialized();\n     }\n }"}, {"sha": "69fce32153ce512e750de969f79b6b792fbdb105", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3e567bcd4f32d413770d464192a2ed6ee636883b/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e567bcd4f32d413770d464192a2ed6ee636883b/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=3e567bcd4f32d413770d464192a2ed6ee636883b", "patch": "@@ -97,7 +97,7 @@ LL |         let _val: (i32, !) = mem::uninitialized();\n    |                              this code causes undefined behavior when executed\n    |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: the `!` type has no valid value\n+   = note: integers must not be uninitialized\n \n error: the type `Void` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:57:26\n@@ -414,8 +414,19 @@ LL |         let _val: [bool; 2] = mem::uninitialized();\n    |\n    = note: booleans must be either `true` or `false`\n \n+error: the type `i32` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:104:25\n+   |\n+LL |         let _val: i32 = mem::uninitialized();\n+   |                         ^^^^^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         this code causes undefined behavior when executed\n+   |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: integers must not be uninitialized\n+\n error: the type `&i32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:104:34\n+  --> $DIR/uninitialized-zeroed.rs:107:34\n    |\n LL |         let _val: &'static i32 = mem::transmute(0usize);\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^\n@@ -426,7 +437,7 @@ LL |         let _val: &'static i32 = mem::transmute(0usize);\n    = note: references must be non-null\n \n error: the type `&[i32]` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:105:36\n+  --> $DIR/uninitialized-zeroed.rs:108:36\n    |\n LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -437,7 +448,7 @@ LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    = note: references must be non-null\n \n error: the type `NonZeroU32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:106:32\n+  --> $DIR/uninitialized-zeroed.rs:109:32\n    |\n LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |                                ^^^^^^^^^^^^^^^^^\n@@ -448,7 +459,7 @@ LL |         let _val: NonZeroU32 = mem::transmute(0);\n    = note: `std::num::NonZeroU32` must be non-null\n \n error: the type `NonNull<i32>` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:109:34\n+  --> $DIR/uninitialized-zeroed.rs:112:34\n    |\n LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -459,7 +470,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n    = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `NonNull<i32>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:110:34\n+  --> $DIR/uninitialized-zeroed.rs:113:34\n    |\n LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -470,7 +481,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `bool` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:111:26\n+  --> $DIR/uninitialized-zeroed.rs:114:26\n    |\n LL |         let _val: bool = MaybeUninit::uninit().assume_init();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -480,5 +491,5 @@ LL |         let _val: bool = MaybeUninit::uninit().assume_init();\n    |\n    = note: booleans must be either `true` or `false`\n \n-error: aborting due to 39 previous errors\n+error: aborting due to 40 previous errors\n "}]}