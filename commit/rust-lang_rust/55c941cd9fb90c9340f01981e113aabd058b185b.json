{"sha": "55c941cd9fb90c9340f01981e113aabd058b185b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1Yzk0MWNkOWZiOTBjOTM0MGYwMTk4MWUxMTNhYWJkMDU4YjE4NWI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T12:54:38Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T14:16:42Z"}, "message": "Type field accesses", "tree": {"sha": "f07828a8eaabab7c20b2b4d3b98519956b981f17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f07828a8eaabab7c20b2b4d3b98519956b981f17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55c941cd9fb90c9340f01981e113aabd058b185b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55c941cd9fb90c9340f01981e113aabd058b185b", "html_url": "https://github.com/rust-lang/rust/commit/55c941cd9fb90c9340f01981e113aabd058b185b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55c941cd9fb90c9340f01981e113aabd058b185b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a72859650254d8ba326e2c9683ae52164cb3b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a72859650254d8ba326e2c9683ae52164cb3b5", "html_url": "https://github.com/rust-lang/rust/commit/07a72859650254d8ba326e2c9683ae52164cb3b5"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "03770ed7db4ae6515b3fadfe14285fef608e15e6", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/55c941cd9fb90c9340f01981e113aabd058b185b/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c941cd9fb90c9340f01981e113aabd058b185b/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=55c941cd9fb90c9340f01981e113aabd058b185b", "patch": "@@ -22,6 +22,10 @@ impl Struct {\n         self.def_id\n     }\n \n+    pub fn variant_data(&self, db: &impl HirDatabase) -> Cancelable<Arc<VariantData>> {\n+        Ok(db.struct_data(self.def_id)?.variant_data.clone())\n+    }\n+\n     pub fn struct_data(&self, db: &impl HirDatabase) -> Cancelable<Arc<StructData>> {\n         Ok(db.struct_data(self.def_id)?)\n     }\n@@ -162,6 +166,11 @@ impl VariantData {\n             StructFlavor::Unit => VariantData::Unit,\n         })\n     }\n+\n+    pub(crate) fn get_field_ty(&self, field_name: &str) -> Option<Ty> {\n+        self.fields().iter().find(|f| f.name == field_name).map(|f| f.ty.clone())\n+    }\n+\n     pub fn fields(&self) -> &[StructField] {\n         match *self {\n             VariantData::Struct(ref fields) | VariantData::Tuple(ref fields) => fields,"}, {"sha": "f931f3c87217e043caa90d90c1f40110a76a2481", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/55c941cd9fb90c9340f01981e113aabd058b185b/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c941cd9fb90c9340f01981e113aabd058b185b/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=55c941cd9fb90c9340f01981e113aabd058b185b", "patch": "@@ -384,6 +384,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         })\n     }\n \n+    fn infer_expr_opt(&mut self, expr: Option<ast::Expr>) -> Cancelable<Ty> {\n+        if let Some(e) = expr {\n+            self.infer_expr(e)\n+        } else {\n+            Ok(Ty::Unknown)\n+        }\n+    }\n+\n     fn infer_expr(&mut self, expr: ast::Expr) -> Cancelable<Ty> {\n         let ty = match expr {\n             ast::Expr::IfExpr(e) => {\n@@ -559,7 +567,29 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 Ty::Unknown\n             }\n             ast::Expr::IndexExpr(_e) => Ty::Unknown,\n-            ast::Expr::FieldExpr(_e) => Ty::Unknown,\n+            ast::Expr::FieldExpr(e) => {\n+                let receiver_ty = self.infer_expr_opt(e.expr())?;\n+                if let Some(nr) = e.name_ref() {\n+                    let text = nr.text();\n+                    match receiver_ty {\n+                        Ty::Tuple(fields) => {\n+                            let i = text.parse::<usize>().ok();\n+                            i.and_then(|i| fields.get(i).cloned()).unwrap_or(Ty::Unknown)\n+                        }\n+                        Ty::Adt { def_id, .. } => {\n+                            let field_ty = match def_id.resolve(self.db)? {\n+                                Def::Struct(s) => s.variant_data(self.db)?.get_field_ty(&text),\n+                                // TODO unions\n+                                _ => None,\n+                            };\n+                            field_ty.unwrap_or(Ty::Unknown)\n+                        }\n+                        _ => Ty::Unknown,\n+                    }\n+                } else {\n+                    Ty::Unknown\n+                }\n+            },\n             ast::Expr::TryExpr(e) => {\n                 let _inner_ty = if let Some(e) = e.expr() {\n                     self.infer_expr(e)?"}, {"sha": "cc8f3665bf6354c974e7a71ab91b55412c66484a", "filename": "crates/ra_hir/src/ty/tests/data/0004_struct.txt", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55c941cd9fb90c9340f01981e113aabd058b185b/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0004_struct.txt", "raw_url": "https://github.com/rust-lang/rust/raw/55c941cd9fb90c9340f01981e113aabd058b185b/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0004_struct.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0004_struct.txt?ref=55c941cd9fb90c9340f01981e113aabd058b185b", "patch": "@@ -4,9 +4,11 @@\n [129; 130) '1': [unknown]\n [107; 108) 'a': A\n [127; 128) 'C': [unknown]\n-[139; 142) 'a.b': [unknown]\n+[139; 142) 'a.b': B\n [114; 133) 'A { b:...C(1) }': A\n-[148; 151) 'a.c': [unknown]\n+[148; 151) 'a.c': C\n+[148; 149) 'a': A\n+[139; 140) 'a': A\n [72; 154) '{     ...a.c; }': ()\n [96; 97) 'B': [unknown]\n [88; 89) '1': [unknown]"}, {"sha": "4e0550487f793609ce6815831d45dd64476ad9f7", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55c941cd9fb90c9340f01981e113aabd058b185b/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c941cd9fb90c9340f01981e113aabd058b185b/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=55c941cd9fb90c9340f01981e113aabd058b185b", "patch": "@@ -1123,7 +1123,15 @@ impl<R: TreeRoot<RaTypes>> FieldExprNode<R> {\n }\n \n \n-impl<'a> FieldExpr<'a> {}\n+impl<'a> FieldExpr<'a> {\n+    pub fn expr(self) -> Option<Expr<'a>> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn name_ref(self) -> Option<NameRef<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // FieldPatList\n #[derive(Debug, Clone, Copy,)]"}, {"sha": "923da032400034030c99dfd83d1f122401dde5a2", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c941cd9fb90c9340f01981e113aabd058b185b/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/55c941cd9fb90c9340f01981e113aabd058b185b/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=55c941cd9fb90c9340f01981e113aabd058b185b", "patch": "@@ -406,7 +406,7 @@ Grammar(\n             options: [ \"Expr\" ],\n         ),\n         \"IndexExpr\": (),\n-        \"FieldExpr\": (),\n+        \"FieldExpr\": (options: [\"Expr\", \"NameRef\"]),\n         \"TryExpr\": (options: [\"Expr\"]),\n         \"CastExpr\": (options: [\"Expr\", \"TypeRef\"]),\n         \"RefExpr\": (options: [\"Expr\"]),"}]}