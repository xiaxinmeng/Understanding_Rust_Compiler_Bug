{"sha": "2917ac6b5973bfa5f65af4f94d8034a51b958a44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MTdhYzZiNTk3M2JmYTVmNjVhZjRmOTRkODAzNGE1MWI5NThhNDQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-12-21T12:18:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-21T12:18:18Z"}, "message": "Rollup merge of #46827 - petrochenkov:assocrecov2, r=estebank\n\nsyntax: Follow-up to the incorrect qpath recovery PR\n\ncc https://github.com/rust-lang/rust/pull/46788\n\nAdd tests checking that \"priority\" of qpath recovery is higher than priority of unary and binary operators\nFix regressed parsing of paths with fn-like generic arguments\nr? @estebank", "tree": {"sha": "acd31397ca649bdbc7eff4f7e29f041c2f069bdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acd31397ca649bdbc7eff4f7e29f041c2f069bdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2917ac6b5973bfa5f65af4f94d8034a51b958a44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2917ac6b5973bfa5f65af4f94d8034a51b958a44", "html_url": "https://github.com/rust-lang/rust/commit/2917ac6b5973bfa5f65af4f94d8034a51b958a44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2917ac6b5973bfa5f65af4f94d8034a51b958a44/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab7abfcf3457ebc67ac7fef5c3028a6ae4402156", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7abfcf3457ebc67ac7fef5c3028a6ae4402156", "html_url": "https://github.com/rust-lang/rust/commit/ab7abfcf3457ebc67ac7fef5c3028a6ae4402156"}, {"sha": "d333752f5c6553e005fa7694837723b08ec8f13e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d333752f5c6553e005fa7694837723b08ec8f13e", "html_url": "https://github.com/rust-lang/rust/commit/d333752f5c6553e005fa7694837723b08ec8f13e"}], "stats": {"total": 235, "additions": 165, "deletions": 70}, "files": [{"sha": "1d399f159c8153a01d18993cac6922fcd52635e9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 25, "deletions": 56, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2917ac6b5973bfa5f65af4f94d8034a51b958a44", "patch": "@@ -20,7 +20,6 @@ use syntax_pos::{Span, DUMMY_SP};\n use codemap::{respan, Spanned};\n use abi::Abi;\n use ext::hygiene::{Mark, SyntaxContext};\n-use parse::parser::{RecoverQPath, PathStyle};\n use print::pprust;\n use ptr::P;\n use rustc_data_structures::indexed_vec;\n@@ -485,6 +484,30 @@ impl fmt::Debug for Pat {\n }\n \n impl Pat {\n+    pub(super) fn to_ty(&self) -> Option<P<Ty>> {\n+        let node = match &self.node {\n+            PatKind::Wild => TyKind::Infer,\n+            PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None) =>\n+                TyKind::Path(None, Path::from_ident(ident.span, ident.node)),\n+            PatKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n+            PatKind::Mac(mac) => TyKind::Mac(mac.clone()),\n+            PatKind::Ref(pat, mutbl) =>\n+                pat.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?,\n+            PatKind::Slice(pats, None, _) if pats.len() == 1 =>\n+                pats[0].to_ty().map(TyKind::Slice)?,\n+            PatKind::Tuple(pats, None) => {\n+                let mut tys = Vec::new();\n+                for pat in pats {\n+                    tys.push(pat.to_ty()?);\n+                }\n+                TyKind::Tup(tys)\n+            }\n+            _ => return None,\n+        };\n+\n+        Some(P(Ty { node, id: self.id, span: self.span }))\n+    }\n+\n     pub fn walk<F>(&self, it: &mut F) -> bool\n         where F: FnMut(&Pat) -> bool\n     {\n@@ -520,38 +543,6 @@ impl Pat {\n     }\n }\n \n-impl RecoverQPath for Pat {\n-    fn to_ty(&self) -> Option<P<Ty>> {\n-        let node = match &self.node {\n-            PatKind::Wild => TyKind::Infer,\n-            PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None) =>\n-                TyKind::Path(None, Path::from_ident(ident.span, ident.node)),\n-            PatKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n-            PatKind::Mac(mac) => TyKind::Mac(mac.clone()),\n-            PatKind::Ref(pat, mutbl) =>\n-                pat.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?,\n-            PatKind::Slice(pats, None, _) if pats.len() == 1 =>\n-                pats[0].to_ty().map(TyKind::Slice)?,\n-            PatKind::Tuple(pats, None) => {\n-                let mut tys = Vec::new();\n-                for pat in pats {\n-                    tys.push(pat.to_ty()?);\n-                }\n-                TyKind::Tup(tys)\n-            }\n-            _ => return None,\n-        };\n-\n-        Some(P(Ty { node, id: self.id, span: self.span }))\n-    }\n-    fn to_recovered(&self, qself: Option<QSelf>, path: Path) -> Self {\n-        Self { span: path.span, node: PatKind::Path(qself, path), id: self.id }\n-    }\n-    fn to_string(&self) -> String {\n-        pprust::pat_to_string(self)\n-    }\n-}\n-\n /// A single field in a struct pattern\n ///\n /// Patterns like the fields of Foo `{ x, ref y, ref mut z }`\n@@ -919,10 +910,8 @@ impl Expr {\n             _ => None,\n         }\n     }\n-}\n \n-impl RecoverQPath for Expr {\n-    fn to_ty(&self) -> Option<P<Ty>> {\n+    pub(super) fn to_ty(&self) -> Option<P<Ty>> {\n         let node = match &self.node {\n             ExprKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n             ExprKind::Mac(mac) => TyKind::Mac(mac.clone()),\n@@ -951,13 +940,6 @@ impl RecoverQPath for Expr {\n \n         Some(P(Ty { node, id: self.id, span: self.span }))\n     }\n-    fn to_recovered(&self, qself: Option<QSelf>, path: Path) -> Self {\n-        Self { span: path.span, node: ExprKind::Path(qself, path),\n-               id: self.id, attrs: self.attrs.clone() }\n-    }\n-    fn to_string(&self) -> String {\n-        pprust::expr_to_string(self)\n-    }\n }\n \n impl fmt::Debug for Expr {\n@@ -1469,19 +1451,6 @@ pub struct Ty {\n     pub span: Span,\n }\n \n-impl RecoverQPath for Ty {\n-    fn to_ty(&self) -> Option<P<Ty>> {\n-        Some(P(self.clone()))\n-    }\n-    fn to_recovered(&self, qself: Option<QSelf>, path: Path) -> Self {\n-        Self { span: path.span, node: TyKind::Path(qself, path), id: self.id }\n-    }\n-    fn to_string(&self) -> String {\n-        pprust::ty_to_string(self)\n-    }\n-    const PATH_STYLE: PathStyle = PathStyle::Type;\n-}\n-\n impl fmt::Debug for Ty {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"type({})\", pprust::ty_to_string(self))"}, {"sha": "d943453924689f502788520f5f224c057a7a97cc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2917ac6b5973bfa5f65af4f94d8034a51b958a44", "patch": "@@ -169,11 +169,49 @@ enum PrevTokenKind {\n     Other,\n }\n \n-pub(crate) trait RecoverQPath: Sized {\n+trait RecoverQPath: Sized {\n+    const PATH_STYLE: PathStyle = PathStyle::Expr;\n     fn to_ty(&self) -> Option<P<Ty>>;\n     fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self;\n     fn to_string(&self) -> String;\n-    const PATH_STYLE: PathStyle = PathStyle::Expr;\n+}\n+\n+impl RecoverQPath for Ty {\n+    const PATH_STYLE: PathStyle = PathStyle::Type;\n+    fn to_ty(&self) -> Option<P<Ty>> {\n+        Some(P(self.clone()))\n+    }\n+    fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self {\n+        Self { span: path.span, node: TyKind::Path(qself, path), id: self.id }\n+    }\n+    fn to_string(&self) -> String {\n+        pprust::ty_to_string(self)\n+    }\n+}\n+\n+impl RecoverQPath for Pat {\n+    fn to_ty(&self) -> Option<P<Ty>> {\n+        self.to_ty()\n+    }\n+    fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self {\n+        Self { span: path.span, node: PatKind::Path(qself, path), id: self.id }\n+    }\n+    fn to_string(&self) -> String {\n+        pprust::pat_to_string(self)\n+    }\n+}\n+\n+impl RecoverQPath for Expr {\n+    fn to_ty(&self) -> Option<P<Ty>> {\n+        self.to_ty()\n+    }\n+    fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self {\n+        Self { span: path.span, node: ExprKind::Path(qself, path),\n+               id: self.id, attrs: self.attrs.clone() }\n+    }\n+    fn to_string(&self) -> String {\n+        pprust::expr_to_string(self)\n+    }\n }\n \n /* ident is handled by common.rs */\n@@ -1432,7 +1470,7 @@ impl<'a> Parser<'a> {\n \n     // Parse a type\n     pub fn parse_ty(&mut self) -> PResult<'a, P<Ty>> {\n-        self.parse_ty_common(true)\n+        self.parse_ty_common(true, true)\n     }\n \n     /// Parse a type in restricted contexts where `+` is not permitted.\n@@ -1441,10 +1479,11 @@ impl<'a> Parser<'a> {\n     /// Example 2: `value1 as TYPE + value2`\n     ///     `+` is prohibited to avoid interactions with expression grammar.\n     fn parse_ty_no_plus(&mut self) -> PResult<'a, P<Ty>> {\n-        self.parse_ty_common(false)\n+        self.parse_ty_common(false, true)\n     }\n \n-    fn parse_ty_common(&mut self, allow_plus: bool) -> PResult<'a, P<Ty>> {\n+    fn parse_ty_common(&mut self, allow_plus: bool, allow_qpath_recovery: bool)\n+                       -> PResult<'a, P<Ty>> {\n         maybe_whole!(self, NtTy, |x| x);\n \n         let lo = self.span;\n@@ -1577,7 +1616,7 @@ impl<'a> Parser<'a> {\n \n         // Try to recover from use of `+` with incorrect priority.\n         self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n-        let ty = self.maybe_recover_from_bad_qpath(ty)?;\n+        let ty = self.maybe_recover_from_bad_qpath(ty, allow_qpath_recovery)?;\n \n         Ok(P(ty))\n     }\n@@ -1633,9 +1672,10 @@ impl<'a> Parser<'a> {\n     }\n \n     // Try to recover from associated item paths like `[T]::AssocItem`/`(T, U)::AssocItem`.\n-    fn maybe_recover_from_bad_qpath<T: RecoverQPath>(&mut self, base: T) -> PResult<'a, T> {\n+    fn maybe_recover_from_bad_qpath<T: RecoverQPath>(&mut self, base: T, allow_recovery: bool)\n+                                                     -> PResult<'a, T> {\n         // Do not add `::` to expected tokens.\n-        if self.token != token::ModSep {\n+        if !allow_recovery || self.token != token::ModSep {\n             return Ok(base);\n         }\n         let ty = match base.to_ty() {\n@@ -1969,7 +2009,7 @@ impl<'a> Parser<'a> {\n                     |p| p.parse_ty())?;\n                 self.bump(); // `)`\n                 let output = if self.eat(&token::RArrow) {\n-                    Some(self.parse_ty_no_plus()?)\n+                    Some(self.parse_ty_common(false, false)?)\n                 } else {\n                     None\n                 };\n@@ -2376,7 +2416,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let expr = Expr { node: ex, span: lo.to(hi), id: ast::DUMMY_NODE_ID, attrs };\n-        let expr = self.maybe_recover_from_bad_qpath(expr)?;\n+        let expr = self.maybe_recover_from_bad_qpath(expr, true)?;\n \n         return Ok(P(expr));\n     }\n@@ -3743,7 +3783,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let pat = Pat { node: pat, span: lo.to(self.prev_span), id: ast::DUMMY_NODE_ID };\n-        let pat = self.maybe_recover_from_bad_qpath(pat)?;\n+        let pat = self.maybe_recover_from_bad_qpath(pat, true)?;\n \n         Ok(P(pat))\n     }"}, {"sha": "779aa952c81b9d0848c34355f8aa4aebfcb2e399", "filename": "src/test/ui/did_you_mean/bad-assoc-expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.rs?ref=2917ac6b5973bfa5f65af4f94d8034a51b958a44", "patch": "@@ -21,4 +21,10 @@ fn main() {\n \n     (u8, u8)::clone(&(0, 0));\n     //~^ ERROR missing angle brackets in associated item path\n+\n+    &(u8)::clone(&0);\n+    //~^ ERROR missing angle brackets in associated item path\n+\n+    10 + (u8)::clone(&0);\n+    //~^ ERROR missing angle brackets in associated item path\n }"}, {"sha": "1affdc5fda208965baab0b33f5fcc0a9874c5d17", "filename": "src/test/ui/did_you_mean/bad-assoc-expr.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr?ref=2917ac6b5973bfa5f65af4f94d8034a51b958a44", "patch": "@@ -22,5 +22,17 @@ error: missing angle brackets in associated item path\n 22 |     (u8, u8)::clone(&(0, 0));\n    |     ^^^^^^^^^^^^^^^ help: try: `<(u8, u8)>::clone`\n \n-error: aborting due to 4 previous errors\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-expr.rs:25:6\n+   |\n+25 |     &(u8)::clone(&0);\n+   |      ^^^^^^^^^^^ help: try: `<(u8)>::clone`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-expr.rs:28:10\n+   |\n+28 |     10 + (u8)::clone(&0);\n+   |          ^^^^^^^^^^^ help: try: `<(u8)>::clone`\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "bf6be0ee98545c9749672222438346791ecb9fb2", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.rs?ref=2917ac6b5973bfa5f65af4f94d8034a51b958a44", "patch": "@@ -20,4 +20,9 @@ fn main() {\n         //~^ ERROR missing angle brackets in associated item path\n         //~| ERROR no associated item named `AssocItem` found for type `_` in the current scope\n     }\n+    match &0u8 {\n+        &(u8,)::AssocItem => {}\n+        //~^ ERROR missing angle brackets in associated item path\n+        //~| ERROR no associated item named `AssocItem` found for type `(u8,)` in the current scope\n+    }\n }"}, {"sha": "1ca4576d88f609203ec8359d0a0bbfdd2708074f", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr?ref=2917ac6b5973bfa5f65af4f94d8034a51b958a44", "patch": "@@ -16,6 +16,12 @@ error: missing angle brackets in associated item path\n 19 |         _::AssocItem => {}\n    |         ^^^^^^^^^^^^ help: try: `<_>::AssocItem`\n \n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-pat.rs:24:10\n+   |\n+24 |         &(u8,)::AssocItem => {}\n+   |          ^^^^^^^^^^^^^^^^ help: try: `<(u8,)>::AssocItem`\n+\n error[E0599]: no associated item named `AssocItem` found for type `[u8]` in the current scope\n   --> $DIR/bad-assoc-pat.rs:13:9\n    |\n@@ -34,5 +40,11 @@ error[E0599]: no associated item named `AssocItem` found for type `_` in the cur\n 19 |         _::AssocItem => {}\n    |         ^^^^^^^^^^^^ associated item not found in `_`\n \n-error: aborting due to 6 previous errors\n+error[E0599]: no associated item named `AssocItem` found for type `(u8,)` in the current scope\n+  --> $DIR/bad-assoc-pat.rs:24:10\n+   |\n+24 |         &(u8,)::AssocItem => {}\n+   |          ^^^^^^^^^^^^^^^^ associated item not found in `(u8,)`\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "b4a59904ee4b56198e9ce8664db3577463e8fbf5", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=2917ac6b5973bfa5f65af4f94d8034a51b958a44", "patch": "@@ -28,4 +28,19 @@ type E = _::AssocTy;\n //~^ ERROR missing angle brackets in associated item path\n //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n+type F = &'static (u8)::AssocTy;\n+//~^ ERROR missing angle brackets in associated item path\n+//~| ERROR ambiguous associated type\n+\n+// Qualified paths cannot appear in bounds, so the recovery\n+// should apply to the whole sum and not `(Send)`.\n+type G = 'static + (Send)::AssocTy;\n+//~^ ERROR missing angle brackets in associated item path\n+//~| ERROR ambiguous associated type\n+\n+// This is actually a legal path with fn-like generic arguments in the middle!\n+// Recovery should not apply in this context.\n+type H = Fn(u8) -> (u8)::Output;\n+//~^ ERROR ambiguous associated type\n+\n fn main() {}"}, {"sha": "c44dc5a0468809a0496c0fb3a433c1b7107d9db5", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2917ac6b5973bfa5f65af4f94d8034a51b958a44/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=2917ac6b5973bfa5f65af4f94d8034a51b958a44", "patch": "@@ -28,6 +28,18 @@ error: missing angle brackets in associated item path\n 27 | type E = _::AssocTy;\n    |          ^^^^^^^^^^ help: try: `<_>::AssocTy`\n \n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-ty.rs:31:19\n+   |\n+31 | type F = &'static (u8)::AssocTy;\n+   |                   ^^^^^^^^^^^^^ help: try: `<(u8)>::AssocTy`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-ty.rs:37:10\n+   |\n+37 | type G = 'static + (Send)::AssocTy;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `<'static + Send>::AssocTy`\n+\n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:11:10\n    |\n@@ -66,5 +78,29 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n 27 | type E = _::AssocTy;\n    |          ^ not allowed in type signatures\n \n-error: aborting due to 10 previous errors\n+error[E0223]: ambiguous associated type\n+  --> $DIR/bad-assoc-ty.rs:31:19\n+   |\n+31 | type F = &'static (u8)::AssocTy;\n+   |                   ^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<u8 as Trait>::AssocTy`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/bad-assoc-ty.rs:37:10\n+   |\n+37 | type G = 'static + (Send)::AssocTy;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<std::marker::Send + 'static as Trait>::AssocTy`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/bad-assoc-ty.rs:43:10\n+   |\n+43 | type H = Fn(u8) -> (u8)::Output;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<std::ops::Fn(u8) -> u8 + 'static as Trait>::Output`\n+\n+error: aborting due to 15 previous errors\n "}]}