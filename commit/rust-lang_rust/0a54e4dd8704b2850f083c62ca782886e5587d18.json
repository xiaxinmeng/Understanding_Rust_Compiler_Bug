{"sha": "0a54e4dd8704b2850f083c62ca782886e5587d18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNTRlNGRkODcwNGIyODUwZjA4M2M2MmNhNzgyODg2ZTU1ODdkMTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-11-20T00:55:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-11T18:42:43Z"}, "message": "bootstrap: Read configuration from config.mk\n\nDuring the transition period where we're still using ./configure and makefiles,\nread some extra configuration from `config.mk` if it's present. This means that\nthe bootstrap build should be configured the same as the original ./configure\ninvocation.\n\nEventually this will all be removed in favor of only storing information in\n`config.toml` (e.g. the configure script will generate config.toml), but for now\nthis should suffice.", "tree": {"sha": "bcf7a3c66d56b1e5a446af1a587d8c7c96f09e22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcf7a3c66d56b1e5a446af1a587d8c7c96f09e22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a54e4dd8704b2850f083c62ca782886e5587d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a54e4dd8704b2850f083c62ca782886e5587d18", "html_url": "https://github.com/rust-lang/rust/commit/0a54e4dd8704b2850f083c62ca782886e5587d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a54e4dd8704b2850f083c62ca782886e5587d18/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "046e6874c47ec55e23b7a566bca51d2920562485", "url": "https://api.github.com/repos/rust-lang/rust/commits/046e6874c47ec55e23b7a566bca51d2920562485", "html_url": "https://github.com/rust-lang/rust/commit/046e6874c47ec55e23b7a566bca51d2920562485"}], "stats": {"total": 123, "additions": 123, "deletions": 0}, "files": [{"sha": "744c30aa08f07f9603abc4c32fd6041c69e74a40", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a54e4dd8704b2850f083c62ca782886e5587d18/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/0a54e4dd8704b2850f083c62ca782886e5587d18/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=0a54e4dd8704b2850f083c62ca782886e5587d18", "patch": "@@ -135,6 +135,12 @@ def get_toml(self, key):\n                 return self.get_string(line)\n         return None\n \n+    def get_mk(self, key):\n+        for line in iter(self.config_mk.splitlines()):\n+            if line.startswith(key):\n+                return line[line.find(':=') + 2:].strip()\n+        return None\n+\n     def cargo(self):\n         config = self.get_toml('cargo')\n         if config:\n@@ -145,6 +151,9 @@ def rustc(self):\n         config = self.get_toml('rustc')\n         if config:\n             return config\n+        config = self.get_mk('CFG_LOCAL_RUST')\n+        if config:\n+            return config + '/bin/rustc' + self.exe_suffix()\n         return os.path.join(self.bin_root(), \"bin/rustc\" + self.exe_suffix())\n \n     def get_string(self, line):\n@@ -187,6 +196,9 @@ def run(self, args, env):\n \n     def build_triple(self):\n         config = self.get_toml('build')\n+        if config:\n+            return config\n+        config = self.get_mk('CFG_BUILD')\n         if config:\n             return config\n         try:\n@@ -279,6 +291,10 @@ def build_triple(self):\n         rb.config_toml = config.read()\n except:\n     pass\n+try:\n+    rb.config_mk = open('config.mk').read()\n+except:\n+    pass\n \n # Fetch/build the bootstrap\n rb.build = rb.build_triple()"}, {"sha": "c22648b47109836a23def709144c46421b6c8e13", "filename": "src/bootstrap/build/compile.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a54e4dd8704b2850f083c62ca782886e5587d18/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a54e4dd8704b2850f083c62ca782886e5587d18/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcompile.rs?ref=0a54e4dd8704b2850f083c62ca782886e5587d18", "patch": "@@ -118,6 +118,7 @@ pub fn rustc<'a>(build: &'a Build, stage: u32, target: &str,\n          .env(\"CFG_RELEASE_CHANNEL\", &build.config.channel)\n          .env(\"CFG_VERSION\", &build.version)\n          .env(\"CFG_BOOTSTRAP_KEY\", &build.bootstrap_key)\n+         .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or(String::new()))\n          .env(\"RUSTC_BOOTSTRAP_KEY\", &build.bootstrap_key)\n          .env(\"CFG_LIBDIR_RELATIVE\", \"lib\");\n "}, {"sha": "1e67c4a9a3e8d35e573db9ffb70a16adae7980c0", "filename": "src/bootstrap/build/config.rs", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/0a54e4dd8704b2850f083c62ca782886e5587d18/src%2Fbootstrap%2Fbuild%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a54e4dd8704b2850f083c62ca782886e5587d18/src%2Fbootstrap%2Fbuild%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fconfig.rs?ref=0a54e4dd8704b2850f083c62ca782886e5587d18", "patch": "@@ -65,6 +65,7 @@ pub struct Config {\n     // misc\n     pub channel: String,\n     pub musl_root: Option<PathBuf>,\n+    pub prefix: Option<String>,\n }\n \n /// Per-target configuration stored in the global configuration structure.\n@@ -246,6 +247,111 @@ impl Config {\n \n         return config\n     }\n+\n+    pub fn update_with_config_mk(&mut self) {\n+        let mut config = String::new();\n+        File::open(\"config.mk\").unwrap().read_to_string(&mut config).unwrap();\n+        for line in config.lines() {\n+            let mut parts = line.splitn(2, \":=\").map(|s| s.trim());\n+            let key = parts.next().unwrap();\n+            let value = match parts.next() {\n+                Some(n) if n.starts_with('\\\"') => &n[1..n.len() - 1],\n+                Some(n) => n,\n+                None => continue\n+            };\n+\n+            macro_rules! check {\n+                ($(($name:expr, $val:expr),)*) => {\n+                    if value == \"1\" {\n+                        $(\n+                            if key == concat!(\"CFG_ENABLE_\", $name) {\n+                                $val = true;\n+                                continue\n+                            }\n+                            if key == concat!(\"CFG_DISABLE_\", $name) {\n+                                $val = false;\n+                                continue\n+                            }\n+                        )*\n+                    }\n+                }\n+            }\n+\n+            check! {\n+                (\"CCACHE\", self.ccache),\n+                (\"MANAGE_SUBMODULES\", self.submodules),\n+                (\"COMPILER_DOCS\", self.compiler_docs),\n+                (\"DOCS\", self.docs),\n+                (\"LLVM_ASSERTIONS\", self.llvm_assertions),\n+                (\"OPTIMIZE_LLVM\", self.llvm_optimize),\n+                (\"LLVM_VERSION_CHECK\", self.llvm_version_check),\n+                (\"LLVM_STATIC_STDCPP\", self.llvm_static_stdcpp),\n+                (\"OPTIMIZE\", self.rust_optimize),\n+                (\"DEBUG_ASSERTIONS\", self.rust_debug_assertions),\n+                (\"DEBUGINFO\", self.rust_debuginfo),\n+                (\"JEMALLOC\", self.use_jemalloc),\n+                (\"DEBUG_JEMALLOC\", self.debug_jemalloc),\n+                (\"RPATH\", self.rust_rpath),\n+            }\n+\n+            match key {\n+                \"CFG_BUILD\" => self.build = value.to_string(),\n+                \"CFG_HOST\" => {\n+                    self.host = value.split(\" \").map(|s| s.to_string())\n+                                     .collect();\n+                }\n+                \"CFG_TARGET\" => {\n+                    self.target = value.split(\" \").map(|s| s.to_string())\n+                                       .collect();\n+                }\n+                \"CFG_MUSL_ROOT\" if value.len() > 0 => {\n+                    self.musl_root = Some(PathBuf::from(value));\n+                }\n+                \"CFG_DEFAULT_AR\" if value.len() > 0 => {\n+                    self.rustc_default_ar = Some(value.to_string());\n+                }\n+                \"CFG_DEFAULT_LINKER\" if value.len() > 0 => {\n+                    self.rustc_default_linker = Some(value.to_string());\n+                }\n+                \"CFG_RELEASE_CHANNEL\" => {\n+                    self.channel = value.to_string();\n+                }\n+                \"CFG_PREFIX\" => {\n+                    self.prefix = Some(value.to_string());\n+                }\n+                \"CFG_LLVM_ROOT\" if value.len() > 0 => {\n+                    let target = self.target_config.entry(self.build.clone())\n+                                     .or_insert(Target::default());\n+                    let root = PathBuf::from(value);\n+                    target.llvm_config = Some(root.join(\"bin/llvm-config\"));\n+                }\n+                \"CFG_JEMALLOC_ROOT\" if value.len() > 0 => {\n+                    let target = self.target_config.entry(self.build.clone())\n+                                     .or_insert(Target::default());\n+                    target.jemalloc = Some(PathBuf::from(value));\n+                }\n+                \"CFG_ARM_LINUX_ANDROIDEABI_NDK\" if value.len() > 0 => {\n+                    let target = \"arm-linux-androideabi\".to_string();\n+                    let target = self.target_config.entry(target)\n+                                     .or_insert(Target::default());\n+                    target.ndk = Some(PathBuf::from(value));\n+                }\n+                \"CFG_I686_LINUX_ANDROID_NDK\" if value.len() > 0 => {\n+                    let target = \"i686-linux-androideabi\".to_string();\n+                    let target = self.target_config.entry(target)\n+                                     .or_insert(Target::default());\n+                    target.ndk = Some(PathBuf::from(value));\n+                }\n+                \"CFG_AARCH64_LINUX_ANDROID_NDK\" if value.len() > 0 => {\n+                    let target = \"aarch64-linux-androideabi\".to_string();\n+                    let target = self.target_config.entry(target)\n+                                     .or_insert(Target::default());\n+                    target.ndk = Some(PathBuf::from(value));\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n }\n \n fn set<T>(field: &mut T, val: Option<T>) {"}]}