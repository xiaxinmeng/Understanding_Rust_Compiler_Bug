{"sha": "67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "node_id": "C_kwDOAAsO6NoAKDY3Y2ZlMmNmYmIzY2RkNmQzNGRkM2ZiZmQzMDM3YTYwZDAxZmExNTQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-25T03:42:43Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-02T02:59:28Z"}, "message": "Remove `-Zno-interleave-lints`.\n\nBecause it complicates lint implementation greatly.", "tree": {"sha": "c1d8acd9986ddbc51c58133703dcca07132aeca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1d8acd9986ddbc51c58133703dcca07132aeca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "html_url": "https://github.com/rust-lang/rust/commit/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33faf0169009edc978af31098710a44070da4657", "url": "https://api.github.com/repos/rust-lang/rust/commits/33faf0169009edc978af31098710a44070da4657", "html_url": "https://github.com/rust-lang/rust/commit/33faf0169009edc978af31098710a44070da4657"}], "stats": {"total": 230, "additions": 36, "deletions": 194}, "files": [{"sha": "22f87514dd8fa133fe2f9993400ecc7d18c37060", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "patch": "@@ -245,10 +245,8 @@ fn run_compiler(\n                 interface::run_compiler(config, |compiler| {\n                     let sopts = &compiler.session().opts;\n                     if sopts.describe_lints {\n-                        let mut lint_store = rustc_lint::new_lint_store(\n-                            sopts.unstable_opts.no_interleave_lints,\n-                            compiler.session().enable_internal_lints(),\n-                        );\n+                        let mut lint_store =\n+                            rustc_lint::new_lint_store(compiler.session().enable_internal_lints());\n                         let registered_lints =\n                             if let Some(register_lints) = compiler.register_lints() {\n                                 register_lints(compiler.session(), &mut lint_store);"}, {"sha": "6b5b5df9e2a7d441b2c4ba7c36a5030664fab679", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "patch": "@@ -207,10 +207,7 @@ pub fn register_plugins<'a>(\n         });\n     }\n \n-    let mut lint_store = rustc_lint::new_lint_store(\n-        sess.opts.unstable_opts.no_interleave_lints,\n-        sess.enable_internal_lints(),\n-    );\n+    let mut lint_store = rustc_lint::new_lint_store(sess.enable_internal_lints());\n     register_lints(sess, &mut lint_store);\n \n     let registrars ="}, {"sha": "a6205f4d3a531dd1a519d62ea281fb2ea9876495", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "patch": "@@ -666,7 +666,6 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(mir_pretty_relative_line_numbers, true);\n     untracked!(nll_facts, true);\n     untracked!(no_analysis, true);\n-    untracked!(no_interleave_lints, true);\n     untracked!(no_leak_check, true);\n     untracked!(no_parallel_llvm, true);\n     untracked!(parse_only, true);"}, {"sha": "56d5f30a01c211729524cbe899b4a5192b824619", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "patch": "@@ -25,8 +25,6 @@ use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n-use std::slice;\n-\n macro_rules! run_early_pass { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);\n }) }\n@@ -403,43 +401,26 @@ pub fn check_ast_node<'a>(\n     let mut passes: Vec<_> = passes.iter().map(|p| (p)()).collect();\n     let mut buffered = lint_buffer.unwrap_or_default();\n \n-    if sess.opts.unstable_opts.no_interleave_lints {\n-        for (i, pass) in passes.iter_mut().enumerate() {\n-            buffered =\n-                sess.prof.verbose_generic_activity_with_arg(\"run_lint\", pass.name()).run(|| {\n-                    early_lint_node(\n-                        sess,\n-                        !pre_expansion && i == 0,\n-                        lint_store,\n-                        registered_tools,\n-                        buffered,\n-                        EarlyLintPassObjects { lints: slice::from_mut(pass) },\n-                        check_node,\n-                    )\n-                });\n-        }\n-    } else {\n+    buffered = early_lint_node(\n+        sess,\n+        !pre_expansion,\n+        lint_store,\n+        registered_tools,\n+        buffered,\n+        builtin_lints,\n+        check_node,\n+    );\n+\n+    if !passes.is_empty() {\n         buffered = early_lint_node(\n             sess,\n-            !pre_expansion,\n+            false,\n             lint_store,\n             registered_tools,\n             buffered,\n-            builtin_lints,\n+            EarlyLintPassObjects { lints: &mut passes[..] },\n             check_node,\n         );\n-\n-        if !passes.is_empty() {\n-            buffered = early_lint_node(\n-                sess,\n-                false,\n-                lint_store,\n-                registered_tools,\n-                buffered,\n-                EarlyLintPassObjects { lints: &mut passes[..] },\n-                check_node,\n-            );\n-        }\n     }\n \n     // All of the buffered lints should have been emitted at this point."}, {"sha": "d15afa20777184739474aec72ba1291330db2261", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "patch": "@@ -28,7 +28,6 @@ use rustc_span::Span;\n \n use std::any::Any;\n use std::cell::Cell;\n-use std::slice;\n \n /// Extract the `LintStore` from the query context.\n /// This function exists because we've erased `LintStore` as `dyn Any` in the context.\n@@ -364,11 +363,6 @@ pub fn late_lint_mod<'tcx, T: LateLintPass<'tcx>>(\n     module_def_id: LocalDefId,\n     builtin_lints: T,\n ) {\n-    if tcx.sess.opts.unstable_opts.no_interleave_lints {\n-        // These passes runs in late_lint_crate with -Z no_interleave_lints\n-        return;\n-    }\n-\n     late_lint_mod_pass(tcx, module_def_id, builtin_lints);\n \n     let mut passes: Vec<_> =\n@@ -411,33 +405,11 @@ fn late_lint_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, builtin_lints\n     let mut passes =\n         unerased_lint_store(tcx).late_passes.iter().map(|p| (p)(tcx)).collect::<Vec<_>>();\n \n-    if !tcx.sess.opts.unstable_opts.no_interleave_lints {\n-        if !passes.is_empty() {\n-            late_lint_pass_crate(tcx, LateLintPassObjects { lints: &mut passes[..] });\n-        }\n-\n-        late_lint_pass_crate(tcx, builtin_lints);\n-    } else {\n-        for pass in &mut passes {\n-            tcx.sess.prof.verbose_generic_activity_with_arg(\"run_late_lint\", pass.name()).run(\n-                || {\n-                    late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n-                },\n-            );\n-        }\n-\n-        let mut passes: Vec<_> =\n-            unerased_lint_store(tcx).late_module_passes.iter().map(|pass| (pass)(tcx)).collect();\n-\n-        for pass in &mut passes {\n-            tcx.sess\n-                .prof\n-                .verbose_generic_activity_with_arg(\"run_late_module_lint\", pass.name())\n-                .run(|| {\n-                    late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n-                });\n-        }\n+    if !passes.is_empty() {\n+        late_lint_pass_crate(tcx, LateLintPassObjects { lints: &mut passes[..] });\n     }\n+\n+    late_lint_pass_crate(tcx, builtin_lints);\n }\n \n /// Performs lint checking on a crate."}, {"sha": "a9d54c693681b574618f2bcf74e9eb53947aa221", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 7, "deletions": 44, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "patch": "@@ -249,10 +249,10 @@ late_lint_passes!(declare_combined_late_pass, [pub BuiltinCombinedLateLintPass])\n \n late_lint_mod_passes!(declare_combined_late_pass, [BuiltinCombinedModuleLateLintPass]);\n \n-pub fn new_lint_store(no_interleave_lints: bool, internal_lints: bool) -> LintStore {\n+pub fn new_lint_store(internal_lints: bool) -> LintStore {\n     let mut lint_store = LintStore::new();\n \n-    register_builtins(&mut lint_store, no_interleave_lints);\n+    register_builtins(&mut lint_store);\n     if internal_lints {\n         register_internals(&mut lint_store);\n     }\n@@ -263,54 +263,17 @@ pub fn new_lint_store(no_interleave_lints: bool, internal_lints: bool) -> LintSt\n /// Tell the `LintStore` about all the built-in lints (the ones\n /// defined in this crate and the ones defined in\n /// `rustc_session::lint::builtin`).\n-fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n+fn register_builtins(store: &mut LintStore) {\n     macro_rules! add_lint_group {\n         ($name:expr, $($lint:ident),*) => (\n             store.register_group(false, $name, None, vec![$(LintId::of($lint)),*]);\n         )\n     }\n \n-    macro_rules! register_early_pass {\n-        ($method:ident, $ty:ident, $constructor:expr) => {\n-            store.register_lints(&$ty::get_lints());\n-            store.$method(|| Box::new($constructor));\n-        };\n-    }\n-\n-    macro_rules! register_late_pass {\n-        ($method:ident, $ty:ident, $constructor:expr) => {\n-            store.register_lints(&$ty::get_lints());\n-            store.$method(|_| Box::new($constructor));\n-        };\n-    }\n-\n-    macro_rules! register_early_passes {\n-        ($method:ident, [$($passes:ident: $constructor:expr,)*]) => (\n-            $(\n-                register_early_pass!($method, $passes, $constructor);\n-            )*\n-        )\n-    }\n-\n-    macro_rules! register_late_passes {\n-        ($method:ident, [$($passes:ident: $constructor:expr,)*]) => (\n-            $(\n-                register_late_pass!($method, $passes, $constructor);\n-            )*\n-        )\n-    }\n-\n-    if no_interleave_lints {\n-        pre_expansion_lint_passes!(register_early_passes, register_pre_expansion_pass);\n-        early_lint_passes!(register_early_passes, register_early_pass);\n-        late_lint_passes!(register_late_passes, register_late_pass);\n-        late_lint_mod_passes!(register_late_passes, register_late_mod_pass);\n-    } else {\n-        store.register_lints(&BuiltinCombinedPreExpansionLintPass::get_lints());\n-        store.register_lints(&BuiltinCombinedEarlyLintPass::get_lints());\n-        store.register_lints(&BuiltinCombinedModuleLateLintPass::get_lints());\n-        store.register_lints(&BuiltinCombinedLateLintPass::get_lints());\n-    }\n+    store.register_lints(&BuiltinCombinedPreExpansionLintPass::get_lints());\n+    store.register_lints(&BuiltinCombinedEarlyLintPass::get_lints());\n+    store.register_lints(&BuiltinCombinedModuleLateLintPass::get_lints());\n+    store.register_lints(&BuiltinCombinedLateLintPass::get_lints());\n \n     add_lint_group!(\n         \"nonstandard_style\","}, {"sha": "01a9361e7867663f200ec7938cccc2da6352a5fa", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "patch": "@@ -1414,8 +1414,6 @@ options! {\n         \"run all passes except codegen; no output\"),\n     no_generate_arange_section: bool = (false, parse_no_flag, [TRACKED],\n         \"omit DWARF address ranges that give faster lookups\"),\n-    no_interleave_lints: bool = (false, parse_no_flag, [UNTRACKED],\n-        \"execute lints separately; allows benchmarking individual lints\"),\n     no_leak_check: bool = (false, parse_no_flag, [UNTRACKED],\n         \"disable the 'leak check' for subtyping; unsound, but useful for tests\"),\n     no_link: bool = (false, parse_no_flag, [TRACKED],"}, {"sha": "6d34f484754c7a6c2c60d85b3ac9c0ca1e740b5e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "patch": "@@ -781,10 +781,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n         let sess = compiler.session();\n \n         if sess.opts.describe_lints {\n-            let mut lint_store = rustc_lint::new_lint_store(\n-                sess.opts.unstable_opts.no_interleave_lints,\n-                sess.enable_internal_lints(),\n-            );\n+            let mut lint_store = rustc_lint::new_lint_store(sess.enable_internal_lints());\n             let registered_lints = if let Some(register_lints) = compiler.register_lints() {\n                 register_lints(sess, &mut lint_store);\n                 true"}, {"sha": "55154803098675fdacff687709d0b8ab9c475cec", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "patch": "@@ -90,7 +90,6 @@\n     -Z                             no-analysis=val -- parse and expand the source, but run no analysis\n     -Z                              no-codegen=val -- run all passes except codegen; no output\n     -Z              no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n-    -Z                     no-interleave-lints=val -- execute lints separately; allows benchmarking individual lints\n     -Z                           no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n     -Z                                 no-link=val -- compile without linking\n     -Z                        no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)"}, {"sha": "a2581658920b9e2195281c84d0955b89ac40ceff", "filename": "src/test/ui/lint/issue-97094.nointerleaved.stderr", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/33faf0169009edc978af31098710a44070da4657/src%2Ftest%2Fui%2Flint%2Fissue-97094.nointerleaved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33faf0169009edc978af31098710a44070da4657/src%2Ftest%2Fui%2Flint%2Fissue-97094.nointerleaved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-97094.nointerleaved.stderr?ref=33faf0169009edc978af31098710a44070da4657", "patch": "@@ -1,53 +0,0 @@\n-error: unknown lint: `nonex_lint_top_level`\n-  --> $DIR/issue-97094.rs:14:26\n-   |\n-LL | #![cfg_attr(all(), allow(nonex_lint_top_level))]\n-   |                          ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/issue-97094.rs:10:9\n-   |\n-LL | #![deny(warnings)]\n-   |         ^^^^^^^^\n-   = note: `#[deny(unknown_lints)]` implied by `#[deny(warnings)]`\n-\n-error: lint `bare_trait_object` has been renamed to `bare_trait_objects`\n-  --> $DIR/issue-97094.rs:16:26\n-   |\n-LL | #![cfg_attr(all(), allow(bare_trait_object))]\n-   |                          ^^^^^^^^^^^^^^^^^ help: use the new name: `bare_trait_objects`\n-   |\n-   = note: `#[deny(renamed_and_removed_lints)]` implied by `#[deny(warnings)]`\n-\n-error: unknown lint: `nonex_lint_mod`\n-  --> $DIR/issue-97094.rs:19:25\n-   |\n-LL | #[cfg_attr(all(), allow(nonex_lint_mod))]\n-   |                         ^^^^^^^^^^^^^^\n-\n-error: unknown lint: `nonex_lint_mod_inner`\n-  --> $DIR/issue-97094.rs:22:30\n-   |\n-LL |     #![cfg_attr(all(), allow(nonex_lint_mod_inner))]\n-   |                              ^^^^^^^^^^^^^^^^^^^^\n-\n-error: unknown lint: `nonex_lint_fn`\n-  --> $DIR/issue-97094.rs:26:25\n-   |\n-LL | #[cfg_attr(all(), allow(nonex_lint_fn))]\n-   |                         ^^^^^^^^^^^^^\n-\n-error: unknown lint: `nonex_lint_in_macro`\n-  --> $DIR/issue-97094.rs:37:29\n-   |\n-LL |     #[cfg_attr(all(), allow(nonex_lint_in_macro))]\n-   |                             ^^^^^^^^^^^^^^^^^^^\n-\n-error: unknown lint: `nonex_lint_fn`\n-  --> $DIR/issue-97094.rs:56:13\n-   |\n-LL |     #[allow(nonex_lint_fn)]\n-   |             ^^^^^^^^^^^^^\n-\n-error: aborting due to 7 previous errors\n-"}, {"sha": "22525ca11ae04cefa3abbb465c9beb527e49cc30", "filename": "src/test/ui/lint/issue-97094.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/src%2Ftest%2Fui%2Flint%2Fissue-97094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/src%2Ftest%2Fui%2Flint%2Fissue-97094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-97094.rs?ref=67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "patch": "@@ -1,12 +1,3 @@\n-// revisions: interleaved nointerleaved\n-// [nointerleaved]compile-flags: -Z no-interleave-lints\n-\n-// This test has two revisions because the logic change\n-// needed to make this test pass had to be adjusted\n-// for no-interleave-lints. Should the debug option\n-// be removed one day, please don't remove this\n-// test entirely, just remove the revision from it.\n-\n #![deny(warnings)]\n \n // Ensure that unknown lints inside cfg-attr's are linted for"}, {"sha": "1a0a3eaf25077d407e96bf4455cd240dc6747cf2", "filename": "src/test/ui/lint/issue-97094.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/src%2Ftest%2Fui%2Flint%2Fissue-97094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154/src%2Ftest%2Fui%2Flint%2Fissue-97094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-97094.stderr?ref=67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "patch": "@@ -1,50 +1,50 @@\n error: unknown lint: `nonex_lint_top_level`\n-  --> $DIR/issue-97094.rs:14:26\n+  --> $DIR/issue-97094.rs:5:26\n    |\n LL | #![cfg_attr(all(), allow(nonex_lint_top_level))]\n    |                          ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-97094.rs:10:9\n+  --> $DIR/issue-97094.rs:1:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(unknown_lints)]` implied by `#[deny(warnings)]`\n \n error: lint `bare_trait_object` has been renamed to `bare_trait_objects`\n-  --> $DIR/issue-97094.rs:16:26\n+  --> $DIR/issue-97094.rs:7:26\n    |\n LL | #![cfg_attr(all(), allow(bare_trait_object))]\n    |                          ^^^^^^^^^^^^^^^^^ help: use the new name: `bare_trait_objects`\n    |\n    = note: `#[deny(renamed_and_removed_lints)]` implied by `#[deny(warnings)]`\n \n error: unknown lint: `nonex_lint_mod`\n-  --> $DIR/issue-97094.rs:19:25\n+  --> $DIR/issue-97094.rs:10:25\n    |\n LL | #[cfg_attr(all(), allow(nonex_lint_mod))]\n    |                         ^^^^^^^^^^^^^^\n \n error: unknown lint: `nonex_lint_mod_inner`\n-  --> $DIR/issue-97094.rs:22:30\n+  --> $DIR/issue-97094.rs:13:30\n    |\n LL |     #![cfg_attr(all(), allow(nonex_lint_mod_inner))]\n    |                              ^^^^^^^^^^^^^^^^^^^^\n \n error: unknown lint: `nonex_lint_fn`\n-  --> $DIR/issue-97094.rs:26:25\n+  --> $DIR/issue-97094.rs:17:25\n    |\n LL | #[cfg_attr(all(), allow(nonex_lint_fn))]\n    |                         ^^^^^^^^^^^^^\n \n error: unknown lint: `nonex_lint_in_macro`\n-  --> $DIR/issue-97094.rs:37:29\n+  --> $DIR/issue-97094.rs:28:29\n    |\n LL |     #[cfg_attr(all(), allow(nonex_lint_in_macro))]\n    |                             ^^^^^^^^^^^^^^^^^^^\n \n error: unknown lint: `nonex_lint_fn`\n-  --> $DIR/issue-97094.rs:56:13\n+  --> $DIR/issue-97094.rs:47:13\n    |\n LL |     #[allow(nonex_lint_fn)]\n    |             ^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/issue-97094.interleaved.stderr"}]}