{"sha": "5eedd541a962a36e86d3302856211248317f635c", "node_id": "C_kwDOAAsO6NoAKDVlZWRkNTQxYTk2MmEzNmU4NmQzMzAyODU2MjExMjQ4MzE3ZjYzNWM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-05-13T13:08:44Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-02-28T23:57:14Z"}, "message": "Fix `ptr_mask` impl in cg gcc", "tree": {"sha": "9f8097c9d22d987dd0d48e57917044b0638879c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f8097c9d22d987dd0d48e57917044b0638879c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eedd541a962a36e86d3302856211248317f635c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eedd541a962a36e86d3302856211248317f635c", "html_url": "https://github.com/rust-lang/rust/commit/5eedd541a962a36e86d3302856211248317f635c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eedd541a962a36e86d3302856211248317f635c/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7f6e7ebaf697f03d22374303aaaa09d9ed70237", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f6e7ebaf697f03d22374303aaaa09d9ed70237", "html_url": "https://github.com/rust-lang/rust/commit/a7f6e7ebaf697f03d22374303aaaa09d9ed70237"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "205f795ec58cac21d79fba0fe2dab944a6082c53", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5eedd541a962a36e86d3302856211248317f635c/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eedd541a962a36e86d3302856211248317f635c/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=5eedd541a962a36e86d3302856211248317f635c", "patch": "@@ -320,8 +320,18 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     return;\n                 }\n \n-                sym::ptr_mask => self.and(args[0].immediate(), args[1].immediate()),\n+                sym::ptr_mask => {\n+                    let usize_type = self.context.new_type::<usize>();\n+                    let void_ptr_type = self.context.new_type::<*const ()>();\n \n+                    let ptr = args[0].immediate();\n+                    let mask = args[1].immediate();\n+\n+                    let addr = self.bitcast(ptr, usize_type);\n+                    let masked = self.and(addr, mask);\n+                    self.bitcast(masked, void_ptr_type)\n+                },\n+                \n                 _ if name_str.starts_with(\"simd_\") => {\n                     match generic_simd_intrinsic(self, name, callee_ty, args, ret_ty, llret_ty, span) {\n                         Ok(llval) => llval,"}]}