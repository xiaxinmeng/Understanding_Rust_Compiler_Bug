{"sha": "fd095fbfa60f3f0c66dd8c975924687db54c3ec5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMDk1ZmJmYTYwZjNmMGM2NmRkOGM5NzU5MjQ2ODdkYjU0YzNlYzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T22:47:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T22:47:20Z"}, "message": "Document how RUST_LOG works", "tree": {"sha": "8e89be0d0c6b2ad93e3de0c4943095efac38081d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e89be0d0c6b2ad93e3de0c4943095efac38081d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd095fbfa60f3f0c66dd8c975924687db54c3ec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd095fbfa60f3f0c66dd8c975924687db54c3ec5", "html_url": "https://github.com/rust-lang/rust/commit/fd095fbfa60f3f0c66dd8c975924687db54c3ec5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd095fbfa60f3f0c66dd8c975924687db54c3ec5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b510a74a36ac86501ab2a2ae7d8255092e2776b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b510a74a36ac86501ab2a2ae7d8255092e2776b1", "html_url": "https://github.com/rust-lang/rust/commit/b510a74a36ac86501ab2a2ae7d8255092e2776b1"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "68e5d3d6e001f425f447d4a6f171c814b5a048ce", "filename": "doc/rust.texi", "status": "modified", "additions": 41, "deletions": 20, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fd095fbfa60f3f0c66dd8c975924687db54c3ec5/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/fd095fbfa60f3f0c66dd8c975924687db54c3ec5/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=fd095fbfa60f3f0c66dd8c975924687db54c3ec5", "patch": "@@ -3626,30 +3626,51 @@ communication facilities.\n \n The runtime contains a system for directing logging expressions to a logging\n console and/or internal logging buffers. @xref{Ref.Expr.Log}.  Logging\n-expressions can be enabled or disabled via a two-dimensional filtering process:\n+expressions can be enabled per module.\n+\n+Logging output is enabled by setting the @code{RUST_LOG} environment variable.\n+@code{RUST_LOG} accepts a logging specification that is a comma-separated list\n+of paths. For each module containing log statements, if @code{RUST_LOG}\n+contains the path to that module or a parent of that module, then its logs\n+will be output to the console. The path to an module consists of the crate\n+name, any parent modules, then the module itself, all separated by double\n+colons (@code{::}).\n+\n+As an example, to see all the logs generated by the compiler, you would set\n+@code{RUST_LOG} to @code{rustc}, which is the crate name (as specified in its\n+@code{link} attribute).  @xref{Ref.Comp.Crate}. To narrow down the logs to\n+just crate resolution, you would set it to @code{rustc::metadata::creader}.\n+\n+Note that when compiling either .rs or .rc files that don't specifiy a crate\n+name the crate is given a default name that matches the source file, sans\n+extension. In that case, to turn on logging for a program compiled from, e.g.\n+helloworld.rs, @code{RUST_LOG} should be set to @code{helloworld}.\n+\n+As a convenience, the logging spec can also be set to a special psuedo-crate,\n+@code{::help}. In this case, when the application starts, the runtime will\n+simply output a list of loaded modules containing log statements, then exit.\n+\n+The Rust runtime itself generates logging information. The runtime's logs are\n+generated for a number of artificial modules in the @code{::rt} psuedo-crate,\n+and can be enabled just like the logs for any standard module. The full list\n+of runtime logging modules follows.\n \n @itemize\n-\n-@sp 1\n-@item\n-By Item\n-\n-Each @emph{item} (module, function, iterator, object, type) in Rust has a\n-static path within its crate module, and can have logging enabled or\n-disabled on a path-prefix basis.\n-\n-@sp 1\n-@item\n-By Task\n-\n-Each @emph{task} in a running Rust program has a unique ownership relation\n-through the task ownership tree, and can have logging enabled or disabled on\n-an ownership-ancestry basis.\n+@item @code{::rt::mem} Memory management\n+@item @code{::rt::comm} Messaging and task communication\n+@item @code{::rt::task} Task management\n+@item @code{::rt::dom} Task scheduling\n+@item @code{::rt::trace} Unused\n+@item @code{::rt::cache} Type descriptor cache\n+@item @code{::rt::upcall} Compiler-generated runtime calls\n+@item @code{::rt::timer} The scheduler timer\n+@item @code{::rt::gc} Garbage collection\n+@item @code{::rt::stdlib} Functions used directly by the standard library\n+@item @code{::rt::kern} The runtime kernel\n+@item @code{::rt::backtrace} Unused\n+@item @code{::rt::callback} Unused\n @end itemize\n \n-Logging is integrated into the language for efficiency reasons, as well as the\n-need to filter logs based on these two built-in dimensions.\n-\n @node       Ref.Run.Sig\n @subsection Ref.Run.Sig\n @c * Ref.Run.Sig::               Runtime signal handler."}]}