{"sha": "75fdacde1ce6da3a93058a9fca248bfaf2611cd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZmRhY2RlMWNlNmRhM2E5MzA1OGE5ZmNhMjQ4YmZhZjI2MTFjZDM=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-10-11T17:22:26Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-10-11T17:22:26Z"}, "message": "Add rounding to integers", "tree": {"sha": "2fc2f4975f63fb16f3f0b3e309f4305eb9cf9dc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fc2f4975f63fb16f3f0b3e309f4305eb9cf9dc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75fdacde1ce6da3a93058a9fca248bfaf2611cd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75fdacde1ce6da3a93058a9fca248bfaf2611cd3", "html_url": "https://github.com/rust-lang/rust/commit/75fdacde1ce6da3a93058a9fca248bfaf2611cd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75fdacde1ce6da3a93058a9fca248bfaf2611cd3/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffedbe5b1501c365f2e8f5fc46d260d2af17aa63", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffedbe5b1501c365f2e8f5fc46d260d2af17aa63", "html_url": "https://github.com/rust-lang/rust/commit/ffedbe5b1501c365f2e8f5fc46d260d2af17aa63"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "6a03f7f81768ad27bc463d47395d7bfad7d86cfd", "filename": "crates/core_simd/src/round.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/75fdacde1ce6da3a93058a9fca248bfaf2611cd3/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fdacde1ce6da3a93058a9fca248bfaf2611cd3/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=75fdacde1ce6da3a93058a9fca248bfaf2611cd3", "patch": "@@ -1,10 +1,12 @@\n macro_rules! implement {\n     {\n         impl $type:ident {\n+            int_type = $int_type:ident,\n             floor = $floor_intrinsic:literal,\n             ceil = $ceil_intrinsic:literal,\n             round = $round_intrinsic:literal,\n             trunc = $trunc_intrinsic:literal,\n+            round_to_int = $round_to_int_intrinsic:literal,\n         }\n     } => {\n         mod $type {\n@@ -18,6 +20,8 @@ macro_rules! implement {\n                 fn round_intrinsic(x: crate::$type) -> crate::$type;\n                 #[link_name = $trunc_intrinsic]\n                 fn trunc_intrinsic(x: crate::$type) -> crate::$type;\n+                #[link_name = $round_to_int_intrinsic]\n+                fn round_to_int_intrinsic(x: crate::$type) -> crate::$int_type;\n             }\n \n             impl crate::$type {\n@@ -55,70 +59,91 @@ macro_rules! implement {\n                 pub fn fract(self) -> Self {\n                     self - self.trunc()\n                 }\n+\n+                /// Returns the nearest integer to each lane. Round half-way cases away from 0.0.\n+                #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+                #[inline]\n+                pub fn round_to_int(self) -> crate::$int_type {\n+                    unsafe { round_to_int_intrinsic(self) }\n+                }\n             }\n         }\n     }\n }\n \n implement! {\n     impl f32x2 {\n+        int_type = i32x2,\n         floor = \"llvm.floor.v2f32\",\n         ceil = \"llvm.ceil.v2f32\",\n         round = \"llvm.round.v2f32\",\n         trunc = \"llvm.trunc.v2f32\",\n+        round_to_int = \"llvm.lround.i32.v2f32\",\n     }\n }\n \n implement! {\n     impl f32x4 {\n+        int_type = i32x4,\n         floor = \"llvm.floor.v4f32\",\n         ceil = \"llvm.ceil.v4f32\",\n         round = \"llvm.round.v4f32\",\n         trunc = \"llvm.trunc.v4f32\",\n+        round_to_int = \"llvm.lround.i32.v4f32\",\n     }\n }\n \n implement! {\n     impl f32x8 {\n+        int_type = i32x8,\n         floor = \"llvm.floor.v8f32\",\n         ceil = \"llvm.ceil.v8f32\",\n         round = \"llvm.round.v8f32\",\n         trunc = \"llvm.trunc.v8f32\",\n+        round_to_int = \"llvm.lround.i32.v8f32\",\n     }\n }\n \n implement! {\n     impl f32x16 {\n+        int_type = i32x16,\n         floor = \"llvm.floor.v16f32\",\n         ceil = \"llvm.ceil.v16f32\",\n         round = \"llvm.round.v16f32\",\n         trunc = \"llvm.trunc.v16f32\",\n+        round_to_int = \"llvm.lround.i32.v16f32\",\n     }\n }\n \n implement! {\n     impl f64x2 {\n+        int_type = i64x2,\n         floor = \"llvm.floor.v2f64\",\n         ceil = \"llvm.ceil.v2f64\",\n         round = \"llvm.round.v2f64\",\n         trunc = \"llvm.trunc.v2f64\",\n+        round_to_int = \"llvm.lround.i64.v2f64\",\n     }\n }\n \n implement! {\n     impl f64x4 {\n+        int_type = i64x4,\n         floor = \"llvm.floor.v4f64\",\n         ceil = \"llvm.ceil.v4f64\",\n         round = \"llvm.round.v4f64\",\n         trunc = \"llvm.trunc.v4f64\",\n+        round_to_int = \"llvm.lround.i64.v4f64\",\n     }\n }\n \n implement! {\n     impl f64x8 {\n+        int_type = i64x8,\n         floor = \"llvm.floor.v8f64\",\n         ceil = \"llvm.ceil.v8f64\",\n         round = \"llvm.round.v8f64\",\n         trunc = \"llvm.trunc.v8f64\",\n+        round_to_int = \"llvm.lround.i64.v8f64\",\n     }\n }"}]}