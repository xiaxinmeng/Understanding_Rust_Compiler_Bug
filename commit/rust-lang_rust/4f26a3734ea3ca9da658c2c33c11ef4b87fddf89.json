{"sha": "4f26a3734ea3ca9da658c2c33c11ef4b87fddf89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMjZhMzczNGVhM2NhOWRhNjU4YzJjMzNjMTFlZjRiODdmZGRmODk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-02T13:32:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-02T13:34:12Z"}, "message": "Indicate when project needs a reload", "tree": {"sha": "3aad3dd45b3e7f5c35d909b88e5a22b47e642c9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aad3dd45b3e7f5c35d909b88e5a22b47e642c9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f26a3734ea3ca9da658c2c33c11ef4b87fddf89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f26a3734ea3ca9da658c2c33c11ef4b87fddf89", "html_url": "https://github.com/rust-lang/rust/commit/4f26a3734ea3ca9da658c2c33c11ef4b87fddf89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f26a3734ea3ca9da658c2c33c11ef4b87fddf89/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ef76760761d17cef4ea4e8462d9ee2ca8395467", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef76760761d17cef4ea4e8462d9ee2ca8395467", "html_url": "https://github.com/rust-lang/rust/commit/3ef76760761d17cef4ea4e8462d9ee2ca8395467"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "640b3959df21b406f7635ebfc44b9305f0af5cec", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f26a3734ea3ca9da658c2c33c11ef4b87fddf89/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f26a3734ea3ca9da658c2c33c11ef4b87fddf89/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=4f26a3734ea3ca9da658c2c33c11ef4b87fddf89", "patch": "@@ -32,6 +32,7 @@ pub(crate) enum Status {\n     Loading,\n     Ready,\n     Invalid,\n+    NeedsReload,\n }\n \n impl Default for Status {"}, {"sha": "d4d18a8082b10c41b60df489bfbdbb19ac1388e2", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4f26a3734ea3ca9da658c2c33c11ef4b87fddf89/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f26a3734ea3ca9da658c2c33c11ef4b87fddf89/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=4f26a3734ea3ca9da658c2c33c11ef4b87fddf89", "patch": "@@ -111,6 +111,35 @@ impl GlobalState {\n     }\n \n     fn run(mut self, inbox: Receiver<lsp_server::Message>) -> Result<()> {\n+        let registration_options = lsp_types::TextDocumentRegistrationOptions {\n+            document_selector: Some(vec![\n+                lsp_types::DocumentFilter {\n+                    language: None,\n+                    scheme: None,\n+                    pattern: Some(\"**/*.rs\".into()),\n+                },\n+                lsp_types::DocumentFilter {\n+                    language: None,\n+                    scheme: None,\n+                    pattern: Some(\"**/Cargo.toml\".into()),\n+                },\n+                lsp_types::DocumentFilter {\n+                    language: None,\n+                    scheme: None,\n+                    pattern: Some(\"**/Cargo.lock\".into()),\n+                },\n+            ]),\n+        };\n+        let registration = lsp_types::Registration {\n+            id: \"textDocument/didSave\".to_string(),\n+            method: \"textDocument/didSave\".to_string(),\n+            register_options: Some(serde_json::to_value(registration_options).unwrap()),\n+        };\n+        self.send_request::<lsp_types::request::RegisterCapability>(\n+            lsp_types::RegistrationParams { registrations: vec![registration] },\n+            |_, _| (),\n+        );\n+\n         self.reload();\n \n         while let Some(event) = self.next_event(&inbox) {\n@@ -281,6 +310,7 @@ impl GlobalState {\n                 Status::Loading => lsp_ext::Status::Loading,\n                 Status::Ready => lsp_ext::Status::Ready,\n                 Status::Invalid => lsp_ext::Status::Invalid,\n+                Status::NeedsReload => lsp_ext::Status::NeedsReload,\n             };\n             self.send_notification::<lsp_ext::StatusNotification>(lsp_status);\n         }\n@@ -395,10 +425,16 @@ impl GlobalState {\n                 );\n                 Ok(())\n             })?\n-            .on::<lsp_types::notification::DidSaveTextDocument>(|this, _params| {\n+            .on::<lsp_types::notification::DidSaveTextDocument>(|this, params| {\n                 if let Some(flycheck) = &this.flycheck {\n                     flycheck.handle.update();\n                 }\n+                let uri = params.text_document.uri.as_str();\n+                if uri.ends_with(\"Cargo.toml\") || uri.ends_with(\"Cargo.lock\") {\n+                    if matches!(this.status, Status::Ready | Status::Invalid) {\n+                        this.transition(Status::NeedsReload);\n+                    }\n+                }\n                 Ok(())\n             })?\n             .on::<lsp_types::notification::DidChangeConfiguration>(|this, _params| {"}, {"sha": "523b04b97a66aa4ab0e4482fac0d8bbc26e103e7", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f26a3734ea3ca9da658c2c33c11ef4b87fddf89/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f26a3734ea3ca9da658c2c33c11ef4b87fddf89/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=4f26a3734ea3ca9da658c2c33c11ef4b87fddf89", "patch": "@@ -78,7 +78,7 @@ impl GlobalState {\n                     .collect(),\n             };\n             let registration = lsp_types::Registration {\n-                id: \"file-watcher\".to_string(),\n+                id: \"workspace/didChangeWatchedFiles\".to_string(),\n                 method: \"workspace/didChangeWatchedFiles\".to_string(),\n                 register_options: Some(serde_json::to_value(registration_options).unwrap()),\n             };"}, {"sha": "7bf687794c3432d48c536c12b26d7385758f93c8", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4f26a3734ea3ca9da658c2c33c11ef4b87fddf89/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f26a3734ea3ca9da658c2c33c11ef4b87fddf89/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=4f26a3734ea3ca9da658c2c33c11ef4b87fddf89", "patch": "@@ -176,12 +176,19 @@ impl Server {\n         while let Some(msg) = self.recv() {\n             match msg {\n                 Message::Request(req) => {\n-                    if req.method != \"window/workDoneProgress/create\"\n-                        && !(req.method == \"client/registerCapability\"\n-                            && req.params.to_string().contains(\"workspace/didChangeWatchedFiles\"))\n-                    {\n-                        panic!(\"unexpected request: {:?}\", req)\n+                    if req.method == \"window/workDoneProgress/create\" {\n+                        continue;\n                     }\n+                    if req.method == \"client/registerCapability\" {\n+                        let params = req.params.to_string();\n+                        if [\"workspace/didChangeWatchedFiles\", \"textDocument/didSave\"]\n+                            .iter()\n+                            .any(|&it| params.contains(it))\n+                        {\n+                            continue;\n+                        }\n+                    }\n+                    panic!(\"unexpected request: {:?}\", req)\n                 }\n                 Message::Notification(_) => (),\n                 Message::Response(res) => {"}]}