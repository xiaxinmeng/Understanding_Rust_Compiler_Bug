{"sha": "c38ee06b62af10924259525c652ef29a70e98e08", "node_id": "C_kwDOAAsO6NoAKGMzOGVlMDZiNjJhZjEwOTI0MjU5NTI1YzY1MmVmMjlhNzBlOThlMDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-04T17:52:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-04T17:52:26Z"}, "message": "Rollup merge of #103681 - RalfJung:libtest-thread, r=thomcc\n\nlibtest: run all tests in their own thread, if supported by the host\n\nThis reverts the threading changes of https://github.com/rust-lang/rust/pull/56243, which made it so that with `-j1`, the test harness does not spawn any threads. Those changes were done to enable Miri to run the test harness, but Miri supports threads nowadays, so this is no longer needed. Using a thread for each test is useful because the thread's name can be set to the test's name which makes panic messages consistent between `-j1` and `-j2` runs and also a bit more readable.\n\nI did not revert the HashMap changes of https://github.com/rust-lang/rust/pull/56243; using a deterministic map seems fine for the test harness and the more deterministic testing is the better.\n\nFixes https://github.com/rust-lang/rust/issues/59122\nFixes https://github.com/rust-lang/rust/issues/70492", "tree": {"sha": "d4419eb1cc6ae81a661c96713ae5ad6006472a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4419eb1cc6ae81a661c96713ae5ad6006472a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c38ee06b62af10924259525c652ef29a70e98e08", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZVFaCRBK7hj4Ov3rIwAAsVoIAFXoHUN14lNBPahNYH3WKiBC\ngJe0EKV4cSI8afIesky0hX7nJGwSAM8bpnJqIMRS8CikGy00qB6tYwePNf7868On\n6oE2ssJl8T7NfBiOil6LoP75g4IM2V6nDUHfmparw4kVLykXNVReMQePE0/Ktzim\nLTN4IeK8IIhRP1uFcFwRPxWATZgPB1QW/9gxOQmLRQbci54+gjoLiTfcQNDHx/T6\n1BNatYfSa0BsFdnRnJa+XtTI5PjFyQ4d7SaFwNzbZctW2c3GKmx7SNuXSK+zNpd3\nOaN0fsFxiwzCF7/e4v2TYOU9uqV/L941FVJVozp8OsqGmuumiByClEAcU+pFks0=\n=h8Ge\n-----END PGP SIGNATURE-----\n", "payload": "tree d4419eb1cc6ae81a661c96713ae5ad6006472a74\nparent 612bb7890cbac06e9f6b65ac15aeeb174d4ccb23\nparent 3af058ec947b91590fe3ffd47a9bb2d690d2cb9d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667584346 +0100\ncommitter GitHub <noreply@github.com> 1667584346 +0100\n\nRollup merge of #103681 - RalfJung:libtest-thread, r=thomcc\n\nlibtest: run all tests in their own thread, if supported by the host\n\nThis reverts the threading changes of https://github.com/rust-lang/rust/pull/56243, which made it so that with `-j1`, the test harness does not spawn any threads. Those changes were done to enable Miri to run the test harness, but Miri supports threads nowadays, so this is no longer needed. Using a thread for each test is useful because the thread's name can be set to the test's name which makes panic messages consistent between `-j1` and `-j2` runs and also a bit more readable.\n\nI did not revert the HashMap changes of https://github.com/rust-lang/rust/pull/56243; using a deterministic map seems fine for the test harness and the more deterministic testing is the better.\n\nFixes https://github.com/rust-lang/rust/issues/59122\nFixes https://github.com/rust-lang/rust/issues/70492\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c38ee06b62af10924259525c652ef29a70e98e08", "html_url": "https://github.com/rust-lang/rust/commit/c38ee06b62af10924259525c652ef29a70e98e08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c38ee06b62af10924259525c652ef29a70e98e08/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "612bb7890cbac06e9f6b65ac15aeeb174d4ccb23", "url": "https://api.github.com/repos/rust-lang/rust/commits/612bb7890cbac06e9f6b65ac15aeeb174d4ccb23", "html_url": "https://github.com/rust-lang/rust/commit/612bb7890cbac06e9f6b65ac15aeeb174d4ccb23"}, {"sha": "3af058ec947b91590fe3ffd47a9bb2d690d2cb9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3af058ec947b91590fe3ffd47a9bb2d690d2cb9d", "html_url": "https://github.com/rust-lang/rust/commit/3af058ec947b91590fe3ffd47a9bb2d690d2cb9d"}], "stats": {"total": 101, "additions": 42, "deletions": 59}, "files": [{"sha": "27320e8dbc5ad42738fecaeea8131444bbc961f0", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c38ee06b62af10924259525c652ef29a70e98e08/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38ee06b62af10924259525c652ef29a70e98e08/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=c38ee06b62af10924259525c652ef29a70e98e08", "patch": "@@ -40,7 +40,7 @@ pub mod test {\n         cli::{parse_opts, TestOpts},\n         filter_tests,\n         helpers::metrics::{Metric, MetricMap},\n-        options::{Concurrent, Options, RunIgnored, RunStrategy, ShouldPanic},\n+        options::{Options, RunIgnored, RunStrategy, ShouldPanic},\n         run_test, test_main, test_main_static,\n         test_result::{TestResult, TrFailed, TrFailedMsg, TrIgnored, TrOk},\n         time::{TestExecTime, TestTimeOptions},\n@@ -85,7 +85,7 @@ use event::{CompletedTest, TestEvent};\n use helpers::concurrency::get_concurrency;\n use helpers::exit_code::get_exit_code;\n use helpers::shuffle::{get_shuffle_seed, shuffle_tests};\n-use options::{Concurrent, RunStrategy};\n+use options::RunStrategy;\n use test_result::*;\n use time::TestExecTime;\n \n@@ -267,6 +267,19 @@ where\n         join_handle: Option<thread::JoinHandle<()>>,\n     }\n \n+    impl RunningTest {\n+        fn join(self, completed_test: &mut CompletedTest) {\n+            if let Some(join_handle) = self.join_handle {\n+                if let Err(_) = join_handle.join() {\n+                    if let TrOk = completed_test.result {\n+                        completed_test.result =\n+                            TrFailedMsg(\"panicked after reporting success\".to_string());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     // Use a deterministic hasher\n     type TestMap =\n         HashMap<TestId, RunningTest, BuildHasherDefault<collections::hash_map::DefaultHasher>>;\n@@ -366,10 +379,10 @@ where\n             let (id, test) = remaining.pop_front().unwrap();\n             let event = TestEvent::TeWait(test.desc.clone());\n             notify_about_test_event(event)?;\n-            let join_handle =\n-                run_test(opts, !opts.run_tests, id, test, run_strategy, tx.clone(), Concurrent::No);\n-            assert!(join_handle.is_none());\n-            let completed_test = rx.recv().unwrap();\n+            let join_handle = run_test(opts, !opts.run_tests, id, test, run_strategy, tx.clone());\n+            // Wait for the test to complete.\n+            let mut completed_test = rx.recv().unwrap();\n+            RunningTest { join_handle }.join(&mut completed_test);\n \n             let event = TestEvent::TeResult(completed_test);\n             notify_about_test_event(event)?;\n@@ -383,15 +396,8 @@ where\n \n                 let event = TestEvent::TeWait(desc.clone());\n                 notify_about_test_event(event)?; //here no pad\n-                let join_handle = run_test(\n-                    opts,\n-                    !opts.run_tests,\n-                    id,\n-                    test,\n-                    run_strategy,\n-                    tx.clone(),\n-                    Concurrent::Yes,\n-                );\n+                let join_handle =\n+                    run_test(opts, !opts.run_tests, id, test, run_strategy, tx.clone());\n                 running_tests.insert(id, RunningTest { join_handle });\n                 timeout_queue.push_back(TimeoutEntry { id, desc, timeout });\n                 pending += 1;\n@@ -423,14 +429,7 @@ where\n \n             let mut completed_test = res.unwrap();\n             let running_test = running_tests.remove(&completed_test.id).unwrap();\n-            if let Some(join_handle) = running_test.join_handle {\n-                if let Err(_) = join_handle.join() {\n-                    if let TrOk = completed_test.result {\n-                        completed_test.result =\n-                            TrFailedMsg(\"panicked after reporting success\".to_string());\n-                    }\n-                }\n-            }\n+            running_test.join(&mut completed_test);\n \n             let event = TestEvent::TeResult(completed_test);\n             notify_about_test_event(event)?;\n@@ -443,8 +442,10 @@ where\n         for (id, b) in filtered.benchs {\n             let event = TestEvent::TeWait(b.desc.clone());\n             notify_about_test_event(event)?;\n-            run_test(opts, false, id, b, run_strategy, tx.clone(), Concurrent::No);\n-            let completed_test = rx.recv().unwrap();\n+            let join_handle = run_test(opts, false, id, b, run_strategy, tx.clone());\n+            // Wait for the test to complete.\n+            let mut completed_test = rx.recv().unwrap();\n+            RunningTest { join_handle }.join(&mut completed_test);\n \n             let event = TestEvent::TeResult(completed_test);\n             notify_about_test_event(event)?;\n@@ -520,7 +521,6 @@ pub fn run_test(\n     test: TestDescAndFn,\n     strategy: RunStrategy,\n     monitor_ch: Sender<CompletedTest>,\n-    concurrency: Concurrent,\n ) -> Option<thread::JoinHandle<()>> {\n     let TestDescAndFn { desc, testfn } = test;\n \n@@ -538,7 +538,6 @@ pub fn run_test(\n     struct TestRunOpts {\n         pub strategy: RunStrategy,\n         pub nocapture: bool,\n-        pub concurrency: Concurrent,\n         pub time: Option<time::TestTimeOptions>,\n     }\n \n@@ -549,7 +548,6 @@ pub fn run_test(\n         testfn: Box<dyn FnOnce() -> Result<(), String> + Send>,\n         opts: TestRunOpts,\n     ) -> Option<thread::JoinHandle<()>> {\n-        let concurrency = opts.concurrency;\n         let name = desc.name.clone();\n \n         let runtest = move || match opts.strategy {\n@@ -576,7 +574,7 @@ pub fn run_test(\n         // the test synchronously, regardless of the concurrency\n         // level.\n         let supports_threads = !cfg!(target_os = \"emscripten\") && !cfg!(target_family = \"wasm\");\n-        if concurrency == Concurrent::Yes && supports_threads {\n+        if supports_threads {\n             let cfg = thread::Builder::new().name(name.as_slice().to_owned());\n             let mut runtest = Arc::new(Mutex::new(Some(runtest)));\n             let runtest2 = runtest.clone();\n@@ -597,7 +595,7 @@ pub fn run_test(\n     }\n \n     let test_run_opts =\n-        TestRunOpts { strategy, nocapture: opts.nocapture, concurrency, time: opts.time_options };\n+        TestRunOpts { strategy, nocapture: opts.nocapture, time: opts.time_options };\n \n     match testfn {\n         DynBenchFn(benchfn) => {"}, {"sha": "75ec0b616e193b2403cb4cb77c87a1eb6accd6c2", "filename": "library/test/src/options.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c38ee06b62af10924259525c652ef29a70e98e08/library%2Ftest%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38ee06b62af10924259525c652ef29a70e98e08/library%2Ftest%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Foptions.rs?ref=c38ee06b62af10924259525c652ef29a70e98e08", "patch": "@@ -1,12 +1,5 @@\n //! Enums denoting options for test execution.\n \n-/// Whether to execute tests concurrently or not\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum Concurrent {\n-    Yes,\n-    No,\n-}\n-\n /// Number of times to run a benchmarked function\n #[derive(Clone, PartialEq, Eq)]\n pub enum BenchMode {"}, {"sha": "7b2e6707f9d11243b112b3b7ef5f2a3c71e37fdc", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c38ee06b62af10924259525c652ef29a70e98e08/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38ee06b62af10924259525c652ef29a70e98e08/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=c38ee06b62af10924259525c652ef29a70e98e08", "patch": "@@ -102,7 +102,7 @@ pub fn do_not_run_ignored_tests() {\n         testfn: DynTestFn(Box::new(f)),\n     };\n     let (tx, rx) = channel();\n-    run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx, Concurrent::No);\n+    run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx);\n     let result = rx.recv().unwrap().result;\n     assert_ne!(result, TrOk);\n }\n@@ -125,7 +125,7 @@ pub fn ignored_tests_result_in_ignored() {\n         testfn: DynTestFn(Box::new(f)),\n     };\n     let (tx, rx) = channel();\n-    run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx, Concurrent::No);\n+    run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx);\n     let result = rx.recv().unwrap().result;\n     assert_eq!(result, TrIgnored);\n }\n@@ -150,7 +150,7 @@ fn test_should_panic() {\n         testfn: DynTestFn(Box::new(f)),\n     };\n     let (tx, rx) = channel();\n-    run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx, Concurrent::No);\n+    run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx);\n     let result = rx.recv().unwrap().result;\n     assert_eq!(result, TrOk);\n }\n@@ -175,7 +175,7 @@ fn test_should_panic_good_message() {\n         testfn: DynTestFn(Box::new(f)),\n     };\n     let (tx, rx) = channel();\n-    run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx, Concurrent::No);\n+    run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx);\n     let result = rx.recv().unwrap().result;\n     assert_eq!(result, TrOk);\n }\n@@ -205,7 +205,7 @@ fn test_should_panic_bad_message() {\n         testfn: DynTestFn(Box::new(f)),\n     };\n     let (tx, rx) = channel();\n-    run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx, Concurrent::No);\n+    run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx);\n     let result = rx.recv().unwrap().result;\n     assert_eq!(result, TrFailedMsg(failed_msg.to_string()));\n }\n@@ -239,7 +239,7 @@ fn test_should_panic_non_string_message_type() {\n         testfn: DynTestFn(Box::new(f)),\n     };\n     let (tx, rx) = channel();\n-    run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx, Concurrent::No);\n+    run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx);\n     let result = rx.recv().unwrap().result;\n     assert_eq!(result, TrFailedMsg(failed_msg));\n }\n@@ -267,15 +267,7 @@ fn test_should_panic_but_succeeds() {\n             testfn: DynTestFn(Box::new(f)),\n         };\n         let (tx, rx) = channel();\n-        run_test(\n-            &TestOpts::new(),\n-            false,\n-            TestId(0),\n-            desc,\n-            RunStrategy::InProcess,\n-            tx,\n-            Concurrent::No,\n-        );\n+        run_test(&TestOpts::new(), false, TestId(0), desc, RunStrategy::InProcess, tx);\n         let result = rx.recv().unwrap().result;\n         assert_eq!(\n             result,\n@@ -306,7 +298,7 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n \n     let test_opts = TestOpts { time_options, ..TestOpts::new() };\n     let (tx, rx) = channel();\n-    run_test(&test_opts, false, TestId(0), desc, RunStrategy::InProcess, tx, Concurrent::No);\n+    run_test(&test_opts, false, TestId(0), desc, RunStrategy::InProcess, tx);\n     let exec_time = rx.recv().unwrap().exec_time;\n     exec_time\n }\n@@ -345,7 +337,7 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n \n     let test_opts = TestOpts { time_options: Some(time_options), ..TestOpts::new() };\n     let (tx, rx) = channel();\n-    run_test(&test_opts, false, TestId(0), desc, RunStrategy::InProcess, tx, Concurrent::No);\n+    run_test(&test_opts, false, TestId(0), desc, RunStrategy::InProcess, tx);\n     let result = rx.recv().unwrap().result;\n \n     result"}, {"sha": "ad22b66eda69ffddfecce85d399558b857a22e02", "filename": "src/test/run-make-fulldeps/libtest-json/output-default.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38ee06b62af10924259525c652ef29a70e98e08/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json", "raw_url": "https://github.com/rust-lang/rust/raw/c38ee06b62af10924259525c652ef29a70e98e08/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json?ref=c38ee06b62af10924259525c652ef29a70e98e08", "patch": "@@ -2,7 +2,7 @@\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"a\" }\n { \"type\": \"test\", \"name\": \"a\", \"event\": \"ok\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"b\" }\n-{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:9:5\\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\\n\" }\n+{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'b' panicked at 'assertion failed: false', f.rs:9:5\\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"c\" }\n { \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }"}, {"sha": "ec98172eb1c4ee63b2aa607fb0ca87cd2b815b9d", "filename": "src/test/run-make-fulldeps/libtest-json/output-stdout-success.json", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c38ee06b62af10924259525c652ef29a70e98e08/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json", "raw_url": "https://github.com/rust-lang/rust/raw/c38ee06b62af10924259525c652ef29a70e98e08/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json?ref=c38ee06b62af10924259525c652ef29a70e98e08", "patch": "@@ -2,9 +2,9 @@\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"a\" }\n { \"type\": \"test\", \"name\": \"a\", \"event\": \"ok\", \"stdout\": \"print from successful test\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"b\" }\n-{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:9:5\\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\\n\" }\n+{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'b' panicked at 'assertion failed: false', f.rs:9:5\\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"c\" }\n-{ \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:15:5\\n\" }\n+{ \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\", \"stdout\": \"thread 'c' panicked at 'assertion failed: false', f.rs:15:5\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }\n { \"type\": \"test\", \"name\": \"d\", \"event\": \"ignored\", \"message\": \"msg\" }\n { \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": $TIME }"}, {"sha": "513c8cf2add00d89b487a58590ef7be01e643e27", "filename": "src/test/ui/test-attrs/test-thread-capture.run.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38ee06b62af10924259525c652ef29a70e98e08/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-capture.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c38ee06b62af10924259525c652ef29a70e98e08/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-capture.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-capture.run.stdout?ref=c38ee06b62af10924259525c652ef29a70e98e08", "patch": "@@ -10,7 +10,7 @@ fee\n fie\n foe\n fum\n-thread 'main' panicked at 'explicit panic', $DIR/test-thread-capture.rs:32:5\n+thread 'thready_fail' panicked at 'explicit panic', $DIR/test-thread-capture.rs:32:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n "}, {"sha": "8c905d1af8572b453845a4f9765a889697b42d55", "filename": "src/test/ui/test-attrs/test-thread-nocapture.run.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38ee06b62af10924259525c652ef29a70e98e08/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-nocapture.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38ee06b62af10924259525c652ef29a70e98e08/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-nocapture.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-nocapture.run.stderr?ref=c38ee06b62af10924259525c652ef29a70e98e08", "patch": "@@ -1,2 +1,2 @@\n-thread 'main' panicked at 'explicit panic', $DIR/test-thread-nocapture.rs:32:5\n+thread 'thready_fail' panicked at 'explicit panic', $DIR/test-thread-nocapture.rs:32:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}]}