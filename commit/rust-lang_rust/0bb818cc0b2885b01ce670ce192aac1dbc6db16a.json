{"sha": "0bb818cc0b2885b01ce670ce192aac1dbc6db16a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYjgxOGNjMGIyODg1YjAxY2U2NzBjZTE5MmFhYzFkYmM2ZGIxNmE=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-12T09:39:01Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-12T09:39:01Z"}, "message": "Add Iterator::try_for_each\n\nThe fallible version of for_each and the stateless version of try_fold.", "tree": {"sha": "1bc28f34ea47034c44000f1b5a0fbf67e2084892", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bc28f34ea47034c44000f1b5a0fbf67e2084892"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb818cc0b2885b01ce670ce192aac1dbc6db16a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb818cc0b2885b01ce670ce192aac1dbc6db16a", "html_url": "https://github.com/rust-lang/rust/commit/0bb818cc0b2885b01ce670ce192aac1dbc6db16a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb818cc0b2885b01ce670ce192aac1dbc6db16a/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afa8acce251cda7ab1548640fdb769139a45f839", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa8acce251cda7ab1548640fdb769139a45f839", "html_url": "https://github.com/rust-lang/rust/commit/afa8acce251cda7ab1548640fdb769139a45f839"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "a485e2c82badace601c0acf86e0dd6326a97b804", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0bb818cc0b2885b01ce670ce192aac1dbc6db16a/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb818cc0b2885b01ce670ce192aac1dbc6db16a/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=0bb818cc0b2885b01ce670ce192aac1dbc6db16a", "patch": "@@ -1366,9 +1366,9 @@ pub trait Iterator {\n     ///\n     /// In particular, try to have this call `try_fold()` on the internal parts\n     /// from which this iterator is composed.  If multiple calls are needed,\n-    /// the `?` operator be convenient for chaining the accumulator value along,\n-    /// but beware any invariants that need to be upheld before those early\n-    /// returns.  This is a `&mut self` method, so iteration needs to be\n+    /// the `?` operator may be convenient for chaining the accumulator value\n+    /// along, but beware any invariants that need to be upheld before those\n+    /// early returns.  This is a `&mut self` method, so iteration needs to be\n     /// resumable after hitting an error here.\n     ///\n     /// # Examples\n@@ -1414,6 +1414,42 @@ pub trait Iterator {\n         Try::from_ok(accum)\n     }\n \n+    /// An iterator method that applies a fallible function to each item in the\n+    /// iterator, stopping at the first error and returning that error.\n+    ///\n+    /// This can also be thought of as the fallible form of [`for_each()`]\n+    /// or as the stateless version of [`try_fold()`].\n+    ///\n+    /// [`for_each()`]: #method.for_each\n+    /// [`try_fold()`]: #method.try_fold\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(iterator_try_fold)]\n+    /// use std::fs::rename;\n+    /// use std::io::{stdout, Write};\n+    /// use std::path::Path;\n+    ///\n+    /// let data = [\"no_tea.txt\", \"stale_bread.json\", \"torrential_rain.png\"];\n+    ///\n+    /// let res = data.iter().try_for_each(|x| writeln!(stdout(), \"{}\", x));\n+    /// assert!(res.is_ok());\n+    ///\n+    /// let mut it = data.iter().cloned();\n+    /// let res = it.try_for_each(|x| rename(x, Path::new(x).with_extension(\"old\")));\n+    /// assert!(res.is_err());\n+    /// // It short-circuited, so the remaining items are still in the iterator:\n+    /// assert_eq!(it.next(), Some(\"stale_bread.json\"));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iterator_try_fold\", issue = \"45594\")]\n+    fn try_for_each<F, R>(&mut self, mut f: F) -> R where\n+        Self: Sized, F: FnMut(Self::Item) -> R, R: Try<Ok=()>\n+    {\n+        self.try_fold((), move |(), x| f(x))\n+    }\n+\n     /// An iterator method that applies a function, producing a single, final value.\n     ///\n     /// `fold()` takes two arguments: an initial value, and a closure with two\n@@ -1528,7 +1564,7 @@ pub trait Iterator {\n     fn all<F>(&mut self, mut f: F) -> bool where\n         Self: Sized, F: FnMut(Self::Item) -> bool\n     {\n-        self.try_fold((), move |(), x| {\n+        self.try_for_each(move |x| {\n             if f(x) { LoopState::Continue(()) }\n             else { LoopState::Break(()) }\n         }) == LoopState::Continue(())\n@@ -1577,7 +1613,7 @@ pub trait Iterator {\n         Self: Sized,\n         F: FnMut(Self::Item) -> bool\n     {\n-        self.try_fold((), move |(), x| {\n+        self.try_for_each(move |x| {\n             if f(x) { LoopState::Break(()) }\n             else { LoopState::Continue(()) }\n         }) == LoopState::Break(())\n@@ -1631,7 +1667,7 @@ pub trait Iterator {\n         Self: Sized,\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        self.try_fold((), move |(), x| {\n+        self.try_for_each(move |x| {\n             if predicate(&x) { LoopState::Break(x) }\n             else { LoopState::Continue(()) }\n         }).break_value()"}]}