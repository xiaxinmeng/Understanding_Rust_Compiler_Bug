{"sha": "609786dbd8b07599a2bc6618c777f859d7a01451", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwOTc4NmRiZDhiMDc1OTlhMmJjNjYxOGM3NzdmODU5ZDdhMDE0NTE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-09-29T16:44:32Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-09-30T10:59:44Z"}, "message": "Validate `rustc_args_required_const`", "tree": {"sha": "a711b5ffd688fe70993cc4987942eabeec60426b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a711b5ffd688fe70993cc4987942eabeec60426b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/609786dbd8b07599a2bc6618c777f859d7a01451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/609786dbd8b07599a2bc6618c777f859d7a01451", "html_url": "https://github.com/rust-lang/rust/commit/609786dbd8b07599a2bc6618c777f859d7a01451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/609786dbd8b07599a2bc6618c777f859d7a01451/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e34b729647f44bfbbc361949b14b5bea65e4996", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e34b729647f44bfbbc361949b14b5bea65e4996", "html_url": "https://github.com/rust-lang/rust/commit/9e34b729647f44bfbbc361949b14b5bea65e4996"}], "stats": {"total": 186, "additions": 176, "deletions": 10}, "files": [{"sha": "89f7531b3a7fff1e504f94aafb57e5c8ebdc47a8", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609786dbd8b07599a2bc6618c777f859d7a01451/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609786dbd8b07599a2bc6618c777f859d7a01451/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=609786dbd8b07599a2bc6618c777f859d7a01451", "patch": "@@ -137,7 +137,7 @@ fn args_required_const(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Vec<usize>> {\n             LitKind::Int(a, _) => {\n                 ret.push(a as usize);\n             }\n-            _ => return None,\n+            _ => bug!(\"invalid arg index\"),\n         }\n     }\n     Some(ret)"}, {"sha": "1ec251326a8f6dc413b0811d975809427e354023", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 101, "deletions": 9, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/609786dbd8b07599a2bc6618c777f859d7a01451/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609786dbd8b07599a2bc6618c777f859d7a01451/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=609786dbd8b07599a2bc6618c777f859d7a01451", "patch": "@@ -8,12 +8,12 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n \n-use rustc_ast::{Attribute, NestedMetaItem};\n-use rustc_errors::struct_span_err;\n+use rustc_ast::{Attribute, LitKind, NestedMetaItem};\n+use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{self, HirId, Item, ItemKind, TraitItem};\n+use rustc_hir::{self, FnSig, ForeignItem, ForeignItemKind, HirId, Item, ItemKind, TraitItem};\n use rustc_hir::{MethodKind, Target};\n use rustc_session::lint::builtin::{CONFLICTING_REPR_HINTS, UNUSED_ATTRIBUTES};\n use rustc_session::parse::feature_err;\n@@ -43,6 +43,12 @@ pub(crate) fn target_from_impl_item<'tcx>(\n     }\n }\n \n+#[derive(Clone, Copy)]\n+enum ItemLike<'tcx> {\n+    Item(&'tcx Item<'tcx>),\n+    ForeignItem(&'tcx ForeignItem<'tcx>),\n+}\n+\n struct CheckAttrVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n@@ -55,7 +61,7 @@ impl CheckAttrVisitor<'tcx> {\n         attrs: &'hir [Attribute],\n         span: &Span,\n         target: Target,\n-        item: Option<&Item<'_>>,\n+        item: Option<ItemLike<'_>>,\n     ) {\n         let mut is_valid = true;\n         for attr in attrs {\n@@ -75,6 +81,8 @@ impl CheckAttrVisitor<'tcx> {\n                 self.check_no_link(&attr, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::export_name) {\n                 self.check_export_name(&attr, span, target)\n+            } else if self.tcx.sess.check_name(attr, sym::rustc_args_required_const) {\n+                self.check_rustc_args_required_const(&attr, span, target, item)\n             } else {\n                 // lint-only checks\n                 if self.tcx.sess.check_name(attr, sym::cold) {\n@@ -400,6 +408,71 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n+    /// Checks if `#[rustc_args_required_const]` is applied to a function and has a valid argument.\n+    fn check_rustc_args_required_const(\n+        &self,\n+        attr: &Attribute,\n+        span: &Span,\n+        target: Target,\n+        item: Option<ItemLike<'_>>,\n+    ) -> bool {\n+        if let Target::Fn | Target::Method(..) | Target::ForeignFn = target {\n+            let mut invalid_args = vec![];\n+            for meta in attr.meta_item_list().expect(\"no meta item list\") {\n+                if let Some(LitKind::Int(val, _)) = meta.literal().map(|lit| &lit.kind) {\n+                    if let Some(ItemLike::Item(Item {\n+                        kind: ItemKind::Fn(FnSig { decl, .. }, ..),\n+                        ..\n+                    }))\n+                    | Some(ItemLike::ForeignItem(ForeignItem {\n+                        kind: ForeignItemKind::Fn(decl, ..),\n+                        ..\n+                    })) = item\n+                    {\n+                        let arg_count = decl.inputs.len() as u128;\n+                        if *val >= arg_count {\n+                            let span = meta.span();\n+                            self.tcx\n+                                .sess\n+                                .struct_span_err(span, \"index exceeds number of arguments\")\n+                                .span_label(\n+                                    span,\n+                                    format!(\n+                                        \"there {} only {} argument{}\",\n+                                        if arg_count != 1 { \"are\" } else { \"is\" },\n+                                        arg_count,\n+                                        pluralize!(arg_count)\n+                                    ),\n+                                )\n+                                .emit();\n+                            return false;\n+                        }\n+                    } else {\n+                        bug!(\"should be a function item\");\n+                    }\n+                } else {\n+                    invalid_args.push(meta.span());\n+                }\n+            }\n+            if !invalid_args.is_empty() {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(invalid_args, \"arguments should be non-negative integers\")\n+                    .emit();\n+                false\n+            } else {\n+                true\n+            }\n+        } else {\n+            self.tcx\n+                .sess\n+                .struct_span_err(attr.span, \"attribute should be applied to a function\")\n+                .span_label(*span, \"not a function\")\n+                .emit();\n+            false\n+        }\n+    }\n+\n     /// Checks if `#[link_section]` is applied to a function or static.\n     fn check_link_section(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n         match target {\n@@ -448,7 +521,7 @@ impl CheckAttrVisitor<'tcx> {\n         attrs: &'hir [Attribute],\n         span: &Span,\n         target: Target,\n-        item: Option<&Item<'_>>,\n+        item: Option<ItemLike<'_>>,\n         hir_id: HirId,\n     ) {\n         // Extract the names of all repr hints, e.g., [foo, bar, align] for:\n@@ -564,7 +637,14 @@ impl CheckAttrVisitor<'tcx> {\n         // Warn on repr(u8, u16), repr(C, simd), and c-like-enum-repr(C, u8)\n         if (int_reprs > 1)\n             || (is_simd && is_c)\n-            || (int_reprs == 1 && is_c && item.map_or(false, |item| is_c_like_enum(item)))\n+            || (int_reprs == 1\n+                && is_c\n+                && item.map_or(false, |item| {\n+                    if let ItemLike::Item(item) = item {\n+                        return is_c_like_enum(item);\n+                    }\n+                    return false;\n+                }))\n         {\n             self.tcx.struct_span_lint_hir(\n                 CONFLICTING_REPR_HINTS,\n@@ -649,7 +729,13 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n         let target = Target::from_item(item);\n-        self.check_attributes(item.hir_id, item.attrs, &item.span, target, Some(item));\n+        self.check_attributes(\n+            item.hir_id,\n+            item.attrs,\n+            &item.span,\n+            target,\n+            Some(ItemLike::Item(item)),\n+        );\n         intravisit::walk_item(self, item)\n     }\n \n@@ -659,9 +745,15 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_trait_item(self, trait_item)\n     }\n \n-    fn visit_foreign_item(&mut self, f_item: &'tcx hir::ForeignItem<'tcx>) {\n+    fn visit_foreign_item(&mut self, f_item: &'tcx ForeignItem<'tcx>) {\n         let target = Target::from_foreign_item(f_item);\n-        self.check_attributes(f_item.hir_id, &f_item.attrs, &f_item.span, target, None);\n+        self.check_attributes(\n+            f_item.hir_id,\n+            &f_item.attrs,\n+            &f_item.span,\n+            target,\n+            Some(ItemLike::ForeignItem(f_item)),\n+        );\n         intravisit::walk_foreign_item(self, f_item)\n     }\n "}, {"sha": "76c01c21301388eae15812726845e0bcc4d81fd7", "filename": "src/test/ui/invalid-rustc_args_required_const-arguments.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/609786dbd8b07599a2bc6618c777f859d7a01451/src%2Ftest%2Fui%2Finvalid-rustc_args_required_const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609786dbd8b07599a2bc6618c777f859d7a01451/src%2Ftest%2Fui%2Finvalid-rustc_args_required_const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-rustc_args_required_const-arguments.rs?ref=609786dbd8b07599a2bc6618c777f859d7a01451", "patch": "@@ -0,0 +1,26 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_args_required_const(0)] //~ ERROR index exceeds number of arguments\n+fn foo1() {}\n+\n+#[rustc_args_required_const(1)] //~ ERROR index exceeds number of arguments\n+fn foo2(_: u8) {}\n+\n+#[rustc_args_required_const(a)] //~ ERROR arguments should be non-negative integers\n+fn foo4() {}\n+\n+#[rustc_args_required_const(1, a, 2, b)] //~ ERROR arguments should be non-negative integers\n+fn foo5(_: u8, _: u8, _: u8) {}\n+\n+#[rustc_args_required_const(0)] //~ ERROR attribute should be applied to a function\n+struct S;\n+\n+#[rustc_args_required_const(0usize)] //~ ERROR suffixed literals are not allowed in attributes\n+fn foo6(_: u8) {}\n+\n+extern {\n+    #[rustc_args_required_const(1)] //~ ERROR index exceeds number of arguments\n+    fn foo7(_: u8);\n+}\n+\n+fn main() {}"}, {"sha": "39d0462616873bfe72bfc34516a1bf92dbdb40f5", "filename": "src/test/ui/invalid-rustc_args_required_const-arguments.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/609786dbd8b07599a2bc6618c777f859d7a01451/src%2Ftest%2Fui%2Finvalid-rustc_args_required_const-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609786dbd8b07599a2bc6618c777f859d7a01451/src%2Ftest%2Fui%2Finvalid-rustc_args_required_const-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-rustc_args_required_const-arguments.stderr?ref=609786dbd8b07599a2bc6618c777f859d7a01451", "patch": "@@ -0,0 +1,48 @@\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/invalid-rustc_args_required_const-arguments.rs:18:29\n+   |\n+LL | #[rustc_args_required_const(0usize)]\n+   |                             ^^^^^^\n+   |\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n+\n+error: index exceeds number of arguments\n+  --> $DIR/invalid-rustc_args_required_const-arguments.rs:3:29\n+   |\n+LL | #[rustc_args_required_const(0)]\n+   |                             ^ there are only 0 arguments\n+\n+error: index exceeds number of arguments\n+  --> $DIR/invalid-rustc_args_required_const-arguments.rs:6:29\n+   |\n+LL | #[rustc_args_required_const(1)]\n+   |                             ^ there is only 1 argument\n+\n+error: arguments should be non-negative integers\n+  --> $DIR/invalid-rustc_args_required_const-arguments.rs:9:29\n+   |\n+LL | #[rustc_args_required_const(a)]\n+   |                             ^\n+\n+error: arguments should be non-negative integers\n+  --> $DIR/invalid-rustc_args_required_const-arguments.rs:12:32\n+   |\n+LL | #[rustc_args_required_const(1, a, 2, b)]\n+   |                                ^     ^\n+\n+error: attribute should be applied to a function\n+  --> $DIR/invalid-rustc_args_required_const-arguments.rs:15:1\n+   |\n+LL | #[rustc_args_required_const(0)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct S;\n+   | --------- not a function\n+\n+error: index exceeds number of arguments\n+  --> $DIR/invalid-rustc_args_required_const-arguments.rs:22:33\n+   |\n+LL |     #[rustc_args_required_const(1)]\n+   |                                 ^ there is only 1 argument\n+\n+error: aborting due to 7 previous errors\n+"}]}