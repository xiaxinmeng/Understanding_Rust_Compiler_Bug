{"sha": "84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "node_id": "C_kwDOAAsO6NoAKDg0YTQ0NGExZjQ1Y2U1YTQzNmUxOTM5MWVhNWExZDkzMTJiZWQxYWQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-22T15:28:28Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-15T15:49:22Z"}, "message": "Introduce opaque type to hidden type projection", "tree": {"sha": "c5dfd2d109338b9e808be0286557d73fab4922f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5dfd2d109338b9e808be0286557d73fab4922f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "html_url": "https://github.com/rust-lang/rust/commit/84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "116819f54f062a2f425deac4ec29245038c26613", "url": "https://api.github.com/repos/rust-lang/rust/commits/116819f54f062a2f425deac4ec29245038c26613", "html_url": "https://github.com/rust-lang/rust/commit/116819f54f062a2f425deac4ec29245038c26613"}], "stats": {"total": 103, "additions": 97, "deletions": 6}, "files": [{"sha": "f4d8039eda0e3b47f50a174bc483920f110e9dc6", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -2093,7 +2093,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             }\n                             StorageDeadOrDrop::Destructor(_) => kind,\n                         },\n-                        ProjectionElem::Field(..) | ProjectionElem::Downcast(..) => {\n+                        ProjectionElem::OpaqueCast { .. }\n+                        | ProjectionElem::Field(..)\n+                        | ProjectionElem::Downcast(..) => {\n                             match place_ty.ty.kind() {\n                                 ty::Adt(def, _) if def.has_dtor(tcx) => {\n                                     // Report the outermost adt with a destructor"}, {"sha": "fada3d45fbed856cb088632a1526a193f431c79b", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -226,6 +226,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n                 ProjectionElem::Downcast(..) if including_downcast.0 => return None,\n                 ProjectionElem::Downcast(..) => (),\n+                ProjectionElem::OpaqueCast(..) => (),\n                 ProjectionElem::Field(field, _ty) => {\n                     // FIXME(project-rfc_2229#36): print capture precisely here.\n                     if let Some(field) = self.is_upvar_field_projection(PlaceRef {\n@@ -286,6 +287,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     PlaceRef { local, projection: proj_base }.ty(self.body, self.infcx.tcx)\n                 }\n                 ProjectionElem::Downcast(..) => place.ty(self.body, self.infcx.tcx),\n+                ProjectionElem::OpaqueCast(ty) => PlaceTy::from_ty(*ty),\n                 ProjectionElem::Field(_, field_type) => PlaceTy::from_ty(*field_type),\n             },\n         };"}, {"sha": "cb7077fe621715e0ecb7133b3ca70607a03ac913", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -169,6 +169,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         ..,\n                         ProjectionElem::Index(_)\n                         | ProjectionElem::ConstantIndex { .. }\n+                        | ProjectionElem::OpaqueCast { .. }\n                         | ProjectionElem::Subslice { .. }\n                         | ProjectionElem::Downcast(..),\n                     ],"}, {"sha": "74321ddcd99191ea77e8822f8d96f90c5226ab19", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -1788,6 +1788,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         for (place_base, elem) in place.iter_projections().rev() {\n             match elem {\n                 ProjectionElem::Index(_/*operand*/) |\n+                ProjectionElem::OpaqueCast(_) |\n                 ProjectionElem::ConstantIndex { .. } |\n                 // assigning to P[i] requires P to be valid.\n                 ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>\n@@ -2179,6 +2180,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     | ProjectionElem::Index(..)\n                     | ProjectionElem::ConstantIndex { .. }\n                     | ProjectionElem::Subslice { .. }\n+                    | ProjectionElem::OpaqueCast { .. }\n                     | ProjectionElem::Downcast(..) => {\n                         let upvar_field_projection = self.is_upvar_field_projection(place);\n                         if let Some(field) = upvar_field_projection {"}, {"sha": "5b67e6aa1cffa9c2e8339dd07c6ff1e25f877cca", "filename": "compiler/rustc_borrowck/src/places_conflict.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -255,6 +255,7 @@ fn place_components_conflict<'tcx>(\n                 | (ProjectionElem::Index { .. }, _, _)\n                 | (ProjectionElem::ConstantIndex { .. }, _, _)\n                 | (ProjectionElem::Subslice { .. }, _, _)\n+                | (ProjectionElem::OpaqueCast { .. }, _, _)\n                 | (ProjectionElem::Downcast { .. }, _, _) => {\n                     // Recursive case. This can still be disjoint on a\n                     // further iteration if this a shallow access and\n@@ -322,6 +323,17 @@ fn place_projection_conflict<'tcx>(\n             debug!(\"place_element_conflict: DISJOINT-OR-EQ-DEREF\");\n             Overlap::EqualOrDisjoint\n         }\n+        (ProjectionElem::OpaqueCast(v1), ProjectionElem::OpaqueCast(v2)) => {\n+            if v1 == v2 {\n+                // same type - recur.\n+                debug!(\"place_element_conflict: DISJOINT-OR-EQ-OPAQUE\");\n+                Overlap::EqualOrDisjoint\n+            } else {\n+                // Different types. Disjoint!\n+                debug!(\"place_element_conflict: DISJOINT-OPAQUE\");\n+                Overlap::Disjoint\n+            }\n+        }\n         (ProjectionElem::Field(f1, _), ProjectionElem::Field(f2, _)) => {\n             if f1 == f2 {\n                 // same field (e.g., `a.y` vs. `a.y`) - recur.\n@@ -525,6 +537,7 @@ fn place_projection_conflict<'tcx>(\n             | ProjectionElem::Field(..)\n             | ProjectionElem::Index(..)\n             | ProjectionElem::ConstantIndex { .. }\n+            | ProjectionElem::OpaqueCast { .. }\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Downcast(..),\n             _,"}, {"sha": "2b50cbac9a02da128786fa86e3ed5d80dcfa8b44", "filename": "compiler/rustc_borrowck/src/prefixes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -81,6 +81,7 @@ impl<'cx, 'tcx> Iterator for Prefixes<'cx, 'tcx> {\n                         }\n                         ProjectionElem::Downcast(..)\n                         | ProjectionElem::Subslice { .. }\n+                        | ProjectionElem::OpaqueCast { .. }\n                         | ProjectionElem::ConstantIndex { .. }\n                         | ProjectionElem::Index(_) => {\n                             cursor = cursor_base;"}, {"sha": "e139a73efc5e95f5209c21f71dfba8392325f4f2", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -790,6 +790,11 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 }\n                 PlaceTy::from_ty(fty)\n             }\n+            ProjectionElem::OpaqueCast(ty) => {\n+                let ty = self.sanitize_type(place, ty);\n+                let ty = self.cx.normalize(ty, location);\n+                PlaceTy::from_ty(ty)\n+            }\n         }\n     }\n \n@@ -1195,10 +1200,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 tcx,\n                 self.param_env,\n                 proj,\n-                |this, field, ()| {\n+                |this, field, _| {\n                     let ty = this.field_ty(tcx, field);\n                     self.normalize(ty, locations)\n                 },\n+                |_, _| unreachable!(),\n             );\n             curr_projected_ty = projected_ty;\n         }\n@@ -2493,6 +2499,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n                 ProjectionElem::Field(..)\n                 | ProjectionElem::Downcast(..)\n+                | ProjectionElem::OpaqueCast(..)\n                 | ProjectionElem::Index(..)\n                 | ProjectionElem::ConstantIndex { .. }\n                 | ProjectionElem::Subslice { .. } => {"}, {"sha": "54652623d940187536a7bea565b00615805e1ee2", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -825,6 +825,7 @@ pub(crate) fn codegen_place<'tcx>(\n                     cplace = cplace.place_deref(fx);\n                 }\n             }\n+            PlaceElem::OpaqueCast(ty) => cplace = cplace.place_opaque_cast(fx, ty),\n             PlaceElem::Field(field, _ty) => {\n                 cplace = cplace.place_field(fx, field);\n             }"}, {"sha": "8ff35d2f76dbfb62c4c79b5ff9f1dbc3234343a1", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -615,6 +615,14 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n+    pub(crate) fn place_opaque_cast(\n+        self,\n+        fx: &mut FunctionCx<'_, '_, 'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> CPlace<'tcx> {\n+        CPlace { inner: self.inner, layout: fx.layout_of(ty) }\n+    }\n+\n     pub(crate) fn place_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,"}, {"sha": "421d6f807ae8e128f855a18a676da5a41dd24c02", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -411,6 +411,21 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         downcast\n     }\n \n+    pub fn project_type<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n+        &self,\n+        bx: &mut Bx,\n+        ty: Ty<'tcx>,\n+    ) -> Self {\n+        let mut downcast = *self;\n+        downcast.layout = bx.cx().layout_of(ty);\n+\n+        // Cast to the appropriate type.\n+        let variant_ty = bx.cx().backend_type(downcast.layout);\n+        downcast.llval = bx.pointercast(downcast.llval, bx.cx().type_ptr_to(variant_ty));\n+\n+        downcast\n+    }\n+\n     pub fn storage_live<Bx: BuilderMethods<'a, 'tcx, Value = V>>(&self, bx: &mut Bx) {\n         bx.lifetime_start(self.llval, self.layout.size);\n     }\n@@ -459,6 +474,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 mir::ProjectionElem::Field(ref field, _) => {\n                     cg_base.project_field(bx, field.index())\n                 }\n+                mir::ProjectionElem::OpaqueCast(ty) => cg_base.project_type(bx, ty),\n                 mir::ProjectionElem::Index(index) => {\n                     let index = &mir::Operand::Copy(mir::Place::from(index));\n                     let index = self.codegen_operand(bx, index);"}, {"sha": "eced1e9e6393e8bf7caa76c85a9b3d19bf0356ed", "filename": "compiler/rustc_const_eval/src/interpret/projection.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -351,6 +351,11 @@ where\n     ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {\n         use rustc_middle::mir::ProjectionElem::*;\n         Ok(match proj_elem {\n+            OpaqueCast(ty) => {\n+                let mut place = *base;\n+                place.layout = self.layout_of(ty)?;\n+                place\n+            }\n             Field(field, _) => self.place_field(base, field.index())?,\n             Downcast(_, variant) => self.place_downcast(base, variant)?,\n             Deref => self.deref_operand(&self.place_to_op(base)?)?.into(),\n@@ -375,6 +380,11 @@ where\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         use rustc_middle::mir::ProjectionElem::*;\n         Ok(match proj_elem {\n+            OpaqueCast(ty) => {\n+                let mut op = *base;\n+                op.layout = self.layout_of(ty)?;\n+                op\n+            }\n             Field(field, _) => self.operand_field(base, field.index())?,\n             Downcast(_, variant) => self.operand_downcast(base, variant)?,\n             Deref => self.deref_operand(base)?.into(),"}, {"sha": "0581f4919782de87b05b7fa66071a8986b031eb9", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -652,6 +652,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n             ProjectionElem::ConstantIndex { .. }\n             | ProjectionElem::Downcast(..)\n+            | ProjectionElem::OpaqueCast(..)\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Field(..)\n             | ProjectionElem::Index(_) => {}"}, {"sha": "c2b4f6eca5cedae20f51eccce1af89d3f04df078", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -316,6 +316,7 @@ where\n \n             ProjectionElem::Deref\n             | ProjectionElem::Field(_, _)\n+            | ProjectionElem::OpaqueCast(_)\n             | ProjectionElem::ConstantIndex { .. }\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Downcast(_, _)"}, {"sha": "daa154576ae4b99acd3e0f88d89bb0aeefba05bb", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -361,7 +361,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                             return Err(Unpromotable);\n                         }\n                     }\n-                    ProjectionElem::Downcast(..) => {\n+                    ProjectionElem::OpaqueCast(..) | ProjectionElem::Downcast(..) => {\n                         return Err(Unpromotable);\n                     }\n "}, {"sha": "0b5d23be58d85e2c44c499e2e75209729af441b9", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -1397,6 +1397,7 @@ impl<V, T> ProjectionElem<V, T> {\n \n             Self::Field(_, _)\n             | Self::Index(_)\n+            | Self::OpaqueCast(_)\n             | Self::ConstantIndex { .. }\n             | Self::Subslice { .. }\n             | Self::Downcast(_, _) => false,\n@@ -1574,7 +1575,9 @@ impl Debug for Place<'_> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         for elem in self.projection.iter().rev() {\n             match elem {\n-                ProjectionElem::Downcast(_, _) | ProjectionElem::Field(_, _) => {\n+                ProjectionElem::OpaqueCast(_)\n+                | ProjectionElem::Downcast(_, _)\n+                | ProjectionElem::Field(_, _) => {\n                     write!(fmt, \"(\").unwrap();\n                 }\n                 ProjectionElem::Deref => {\n@@ -1590,6 +1593,9 @@ impl Debug for Place<'_> {\n \n         for elem in self.projection.iter() {\n             match elem {\n+                ProjectionElem::OpaqueCast(ty) => {\n+                    write!(fmt, \" as {})\", ty)?;\n+                }\n                 ProjectionElem::Downcast(Some(name), _index) => {\n                     write!(fmt, \" as {})\", name)?;\n                 }"}, {"sha": "263c2ca3c700ec2a1d594d120f9faed459c78e79", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -754,6 +754,9 @@ pub type AssertMessage<'tcx> = AssertKind<Operand<'tcx>>;\n ///    generator has more than one variant, the parent place's variant index must be set, indicating\n ///    which variant is being used. If it has just one variant, the variant index may or may not be\n ///    included - the single possible variant is inferred if it is not included.\n+///  - [`OpaqueCast`](ProjectionElem::OpaqueCast): This projection changes the place's type to the\n+///    given one, and makes no other changes. A `OpaqueCast` projection on any type other than an\n+///    opaque type from the current crate is not well-formed.\n ///  - [`ConstantIndex`](ProjectionElem::ConstantIndex): Computes an offset in units of `T` into the\n ///    place as described in the documentation for the `ProjectionElem`. The resulting address is\n ///    the parent's address plus that offset, and the type is `T`. This is only legal if the parent\n@@ -856,6 +859,10 @@ pub enum ProjectionElem<V, T> {\n     ///\n     /// The included Symbol is the name of the variant, used for printing MIR.\n     Downcast(Option<Symbol>, VariantIdx),\n+\n+    /// Like an explicit cast from an opaque type to a concrete type, but without\n+    /// requiring an intermediate variable.\n+    OpaqueCast(T),\n }\n \n /// Alias for projections as they appear in places, where the base is a place"}, {"sha": "c6975df45efc2a8247012dba1f74deecb2b534da", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> PlaceTy<'tcx> {\n     /// `PlaceElem`, where we can just use the `Ty` that is already\n     /// stored inline on field projection elems.\n     pub fn projection_ty(self, tcx: TyCtxt<'tcx>, elem: PlaceElem<'tcx>) -> PlaceTy<'tcx> {\n-        self.projection_ty_core(tcx, ty::ParamEnv::empty(), &elem, |_, _, ty| ty)\n+        self.projection_ty_core(tcx, ty::ParamEnv::empty(), &elem, |_, _, ty| ty, |_, ty| ty)\n     }\n \n     /// `place_ty.projection_ty_core(tcx, elem, |...| { ... })`\n@@ -71,6 +71,7 @@ impl<'tcx> PlaceTy<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         elem: &ProjectionElem<V, T>,\n         mut handle_field: impl FnMut(&Self, Field, T) -> Ty<'tcx>,\n+        mut handle_opaque_cast: impl FnMut(&Self, T) -> Ty<'tcx>,\n     ) -> PlaceTy<'tcx>\n     where\n         V: ::std::fmt::Debug,\n@@ -109,6 +110,7 @@ impl<'tcx> PlaceTy<'tcx> {\n                 PlaceTy { ty: self.ty, variant_index: Some(index) }\n             }\n             ProjectionElem::Field(f, fty) => PlaceTy::from_ty(handle_field(&self, f, fty)),\n+            ProjectionElem::OpaqueCast(ty) => PlaceTy::from_ty(handle_opaque_cast(&self, ty)),\n         };\n         debug!(\"projection_ty self: {:?} elem: {:?} yields: {:?}\", self, elem, answer);\n         answer"}, {"sha": "a73ef23e28132db30842800b65d731571a14ad73", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -182,6 +182,7 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n         Ok(match self {\n             Deref => Deref,\n             Field(f, ty) => Field(f, ty.try_fold_with(folder)?),\n+            OpaqueCast(ty) => OpaqueCast(ty.try_fold_with(folder)?),\n             Index(v) => Index(v.try_fold_with(folder)?),\n             Downcast(symbol, variantidx) => Downcast(symbol, variantidx),\n             ConstantIndex { offset, min_length, from_end } => {"}, {"sha": "e5599fb15ad312ff3c60c8b6ba135b8a4c1e4807", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -1064,6 +1064,11 @@ macro_rules! visit_place_fns {\n                     self.visit_ty(&mut new_ty, TyContext::Location(location));\n                     if ty != new_ty { Some(PlaceElem::Field(field, new_ty)) } else { None }\n                 }\n+                PlaceElem::OpaqueCast(ty) => {\n+                    let mut new_ty = ty;\n+                    self.visit_ty(&mut new_ty, TyContext::Location(location));\n+                    if ty != new_ty { Some(PlaceElem::OpaqueCast(new_ty)) } else { None }\n+                }\n                 PlaceElem::Deref\n                 | PlaceElem::ConstantIndex { .. }\n                 | PlaceElem::Subslice { .. }\n@@ -1133,7 +1138,7 @@ macro_rules! visit_place_fns {\n             location: Location,\n         ) {\n             match elem {\n-                ProjectionElem::Field(_field, ty) => {\n+                ProjectionElem::OpaqueCast(ty) | ProjectionElem::Field(_, ty) => {\n                     self.visit_ty(ty, TyContext::Location(location));\n                 }\n                 ProjectionElem::Index(local) => {"}, {"sha": "82debdf7fa1bf94b0e18f46ed6bedb22650daf29", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -105,6 +105,7 @@ fn convert_to_hir_projections_and_truncate_for_capture<'tcx>(\n                 continue;\n             }\n             ProjectionElem::Index(..)\n+            | ProjectionElem::OpaqueCast(_)\n             | ProjectionElem::ConstantIndex { .. }\n             | ProjectionElem::Subslice { .. } => {\n                 // We don't capture array-access projections.\n@@ -795,6 +796,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     }\n                     ProjectionElem::Field(..)\n                     | ProjectionElem::Downcast(..)\n+                    | ProjectionElem::OpaqueCast(..)\n                     | ProjectionElem::ConstantIndex { .. }\n                     | ProjectionElem::Subslice { .. } => (),\n                 }"}, {"sha": "7806e8f45d3ade55a4f6c907a90e0d515273e88a", "filename": "compiler/rustc_mir_dataflow/src/move_paths/abs_domain.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fabs_domain.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -48,6 +48,7 @@ impl<'tcx> Lift for PlaceElem<'tcx> {\n         match *self {\n             ProjectionElem::Deref => ProjectionElem::Deref,\n             ProjectionElem::Field(f, ty) => ProjectionElem::Field(f, ty.lift()),\n+            ProjectionElem::OpaqueCast(ty) => ProjectionElem::OpaqueCast(ty.lift()),\n             ProjectionElem::Index(ref i) => ProjectionElem::Index(i.lift()),\n             ProjectionElem::Subslice { from, to, from_end } => {\n                 ProjectionElem::Subslice { from, to, from_end }"}, {"sha": "86327ade94b8a2e6305def7f7eded40abfbdb56f", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -28,6 +28,7 @@ fn is_stable(place: PlaceRef<'_>) -> bool {\n             ProjectionElem::Field { .. } |\n             ProjectionElem::ConstantIndex { .. } |\n             ProjectionElem::Subslice { .. } |\n+            ProjectionElem::OpaqueCast { .. } |\n             ProjectionElem::Downcast { .. } => true,\n         }\n     })"}, {"sha": "9690ad2777177c8e66477f457044e44693a8a398", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a444a1f45ce5a436e19391ea5a1d9312bed1ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "patch": "@@ -252,6 +252,7 @@ fn check_place<'tcx>(tcx: TyCtxt<'tcx>, place: Place<'tcx>, span: Span, body: &B\n                 }\n             },\n             ProjectionElem::ConstantIndex { .. }\n+            | ProjectionElem::OpaqueCast(..)\n             | ProjectionElem::Downcast(..)\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Deref"}]}