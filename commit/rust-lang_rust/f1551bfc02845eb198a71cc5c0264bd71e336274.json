{"sha": "f1551bfc02845eb198a71cc5c0264bd71e336274", "node_id": "C_kwDOAAsO6NoAKGYxNTUxYmZjMDI4NDVlYjE5OGE3MWNjNWMwMjY0YmQ3MWUzMzYyNzQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-19T15:17:19Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-11-08T13:48:07Z"}, "message": "selection failure: recompute applicable impls", "tree": {"sha": "25fe95d8c1d6cd83dfc7d794d062cdc9b84d6a6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25fe95d8c1d6cd83dfc7d794d062cdc9b84d6a6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1551bfc02845eb198a71cc5c0264bd71e336274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1551bfc02845eb198a71cc5c0264bd71e336274", "html_url": "https://github.com/rust-lang/rust/commit/f1551bfc02845eb198a71cc5c0264bd71e336274", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1551bfc02845eb198a71cc5c0264bd71e336274/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddfe1e87f7c85c03773c29180a931447fcd03b65", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddfe1e87f7c85c03773c29180a931447fcd03b65", "html_url": "https://github.com/rust-lang/rust/commit/ddfe1e87f7c85c03773c29180a931447fcd03b65"}], "stats": {"total": 239, "additions": 166, "deletions": 73}, "files": [{"sha": "05382bd887cd9e2bb92b4c706109b21953e43e9c", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -576,9 +576,6 @@ pub enum SelectionError<'tcx> {\n     /// Signaling that an error has already been emitted, to avoid\n     /// multiple errors being shown.\n     ErrorReporting,\n-    /// Multiple applicable `impl`s where found. The `DefId`s correspond to\n-    /// all the `impl`s' Items.\n-    Ambiguous(Vec<DefId>),\n }\n \n /// When performing resolution, it is typically the case that there"}, {"sha": "b509ae6dd3b8527f67b2dcdcf22d160bfc4a2a63", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -2550,11 +2550,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\n     /// with the name of the crate containing the impl.\n-    pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {\n-        if let Some(impl_did) = impl_did.as_local() {\n-            Ok(self.def_span(impl_did))\n+    pub fn span_of_impl(self, impl_def_id: DefId) -> Result<Span, Symbol> {\n+        if let Some(impl_def_id) = impl_def_id.as_local() {\n+            Ok(self.def_span(impl_def_id))\n         } else {\n-            Err(self.crate_name(impl_did.krate))\n+            Err(self.crate_name(impl_def_id.krate))\n         }\n     }\n "}, {"sha": "d32a990f182dc45409d12f6ea9077df6e1686626", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -14,15 +14,22 @@ pub struct FulfillmentContext<'tcx> {\n     obligations: FxIndexSet<PredicateObligation<'tcx>>,\n \n     relationships: FxHashMap<ty::TyVid, ty::FoundRelationships>,\n+\n+    usable_in_snapshot: bool,\n }\n \n impl FulfillmentContext<'_> {\n     pub(crate) fn new() -> Self {\n         FulfillmentContext {\n             obligations: FxIndexSet::default(),\n             relationships: FxHashMap::default(),\n+            usable_in_snapshot: false,\n         }\n     }\n+\n+    pub(crate) fn new_in_snapshot() -> Self {\n+        FulfillmentContext { usable_in_snapshot: true, ..Self::new() }\n+    }\n }\n \n impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n@@ -41,7 +48,9 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         infcx: &InferCtxt<'tcx>,\n         obligation: PredicateObligation<'tcx>,\n     ) {\n-        assert!(!infcx.is_in_snapshot());\n+        if !self.usable_in_snapshot {\n+            assert!(!infcx.is_in_snapshot());\n+        }\n         let obligation = infcx.resolve_vars_if_possible(obligation);\n \n         super::relationships::update(self, infcx, &obligation);\n@@ -72,7 +81,9 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     }\n \n     fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n-        assert!(!infcx.is_in_snapshot());\n+        if !self.usable_in_snapshot {\n+            assert!(!infcx.is_in_snapshot());\n+        }\n \n         let mut errors = Vec::new();\n         let mut next_round = FxIndexSet::default();"}, {"sha": "0eafc49816d49cbbef1bc84a93546fc3bbdb0f0c", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -38,7 +38,7 @@ impl<'tcx> TraitEngineExt<'tcx> for dyn TraitEngine<'tcx> {\n \n     fn new_in_snapshot(tcx: TyCtxt<'tcx>) -> Box<Self> {\n         if tcx.sess.opts.unstable_opts.chalk {\n-            Box::new(ChalkFulfillmentContext::new())\n+            Box::new(ChalkFulfillmentContext::new_in_snapshot())\n         } else {\n             Box::new(FulfillmentContext::new_in_snapshot())\n         }\n@@ -119,13 +119,10 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         expected: T,\n         actual: T,\n     ) -> Result<(), TypeError<'tcx>> {\n-        match self.infcx.at(cause, param_env).eq(expected, actual) {\n-            Ok(InferOk { obligations, value: () }) => {\n-                self.register_obligations(obligations);\n-                Ok(())\n-            }\n-            Err(e) => Err(e),\n-        }\n+        self.infcx\n+            .at(cause, param_env)\n+            .eq(expected, actual)\n+            .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n     }\n \n     pub fn sup<T: ToTrace<'tcx>>(\n@@ -144,6 +141,10 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub fn select_where_possible(&self) -> Vec<FulfillmentError<'tcx>> {\n+        self.engine.borrow_mut().select_where_possible(self.infcx)\n+    }\n+\n     pub fn select_all_or_error(&self) -> Vec<FulfillmentError<'tcx>> {\n         self.engine.borrow_mut().select_all_or_error(self.infcx)\n     }"}, {"sha": "58da54afb75b95b01b1467f32020e813a0a021f9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/ambiguity.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -0,0 +1,52 @@\n+use rustc_hir::def_id::DefId;\n+use rustc_infer::infer::InferCtxt;\n+use rustc_infer::traits::{Obligation, ObligationCause, TraitObligation};\n+use rustc_span::DUMMY_SP;\n+\n+use crate::traits::ObligationCtxt;\n+\n+pub fn recompute_applicable_impls<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    obligation: &TraitObligation<'tcx>,\n+) -> Vec<DefId> {\n+    let tcx = infcx.tcx;\n+    let param_env = obligation.param_env;\n+    let dummy_cause = ObligationCause::dummy();\n+    let impl_may_apply = |impl_def_id| {\n+        let ocx = ObligationCtxt::new_in_snapshot(infcx);\n+        let placeholder_obligation =\n+            infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n+        let obligation_trait_ref =\n+            ocx.normalize(dummy_cause.clone(), param_env, placeholder_obligation.trait_ref);\n+\n+        let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n+        let impl_trait_ref = tcx.bound_impl_trait_ref(impl_def_id).unwrap().subst(tcx, impl_substs);\n+        let impl_trait_ref = ocx.normalize(ObligationCause::dummy(), param_env, impl_trait_ref);\n+\n+        if let Err(_) = ocx.eq(&dummy_cause, param_env, obligation_trait_ref, impl_trait_ref) {\n+            return false;\n+        }\n+\n+        let impl_predicates = tcx.predicates_of(impl_def_id).instantiate(tcx, impl_substs);\n+        ocx.register_obligations(\n+            impl_predicates\n+                .predicates\n+                .iter()\n+                .map(|&predicate| Obligation::new(dummy_cause.clone(), param_env, predicate)),\n+        );\n+\n+        ocx.select_where_possible().is_empty()\n+    };\n+\n+    let mut impls = Vec::new();\n+    tcx.for_each_relevant_impl(\n+        obligation.predicate.def_id(),\n+        obligation.predicate.skip_binder().trait_ref.self_ty(),\n+        |impl_def_id| {\n+            if infcx.probe(move |_snapshot| impl_may_apply(impl_def_id)) {\n+                impls.push(impl_def_id)\n+            }\n+        },\n+    );\n+    impls\n+}"}, {"sha": "bcb00796cbaba98c380ae063db365868b855c298", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -1,3 +1,4 @@\n+mod ambiguity;\n pub mod on_unimplemented;\n pub mod suggestions;\n \n@@ -535,15 +536,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let mut span = obligation.cause.span;\n \n         let mut err = match *error {\n-            SelectionError::Ambiguous(ref impls) => {\n-                let mut err = self.tcx.sess.struct_span_err(\n-                    obligation.cause.span,\n-                    &format!(\"multiple applicable `impl`s for `{}`\", obligation.predicate),\n-                );\n-                self.annotate_source_of_ambiguity(&mut err, impls, obligation.predicate);\n-                err.emit();\n-                return;\n-            }\n             SelectionError::Unimplemented => {\n                 // If this obligation was generated as a result of well-formedness checking, see if we\n                 // can get a better error message by performing HIR-based well-formedness checking.\n@@ -2144,8 +2136,21 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     crate::traits::TraitQueryMode::Standard,\n                 );\n                 match selcx.select_from_obligation(&obligation) {\n-                    Err(SelectionError::Ambiguous(impls)) if impls.len() > 1 => {\n-                        self.annotate_source_of_ambiguity(&mut err, &impls, predicate);\n+                    Ok(None) => {\n+                        let impls = ambiguity::recompute_applicable_impls(self.infcx, &obligation);\n+                        let has_non_region_infer =\n+                            trait_ref.skip_binder().substs.types().any(|t| !t.is_ty_infer());\n+                        // It doesn't make sense to talk about applicable impls if there are more\n+                        // than a handful of them.\n+                        if impls.len() > 1 && impls.len() < 5 && has_non_region_infer {\n+                            self.annotate_source_of_ambiguity(&mut err, &impls, predicate);\n+                        } else {\n+                            if self.is_tainted_by_errors() {\n+                                err.cancel();\n+                                return;\n+                            }\n+                            err.note(&format!(\"cannot satisfy `{}`\", predicate));\n+                        }\n                     }\n                     _ => {\n                         if self.is_tainted_by_errors() {\n@@ -2441,7 +2446,6 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n             }\n         }\n-        let msg = format!(\"multiple `impl`s satisfying `{}` found\", predicate);\n         let mut crate_names: Vec<_> = crates.iter().map(|n| format!(\"`{}`\", n)).collect();\n         crate_names.sort();\n         crate_names.dedup();\n@@ -2462,13 +2466,9 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             err.downgrade_to_delayed_bug();\n             return;\n         }\n-        let post = if post.len() > 4 {\n-            format!(\n-                \":\\n{}\\nand {} more\",\n-                post.iter().map(|p| format!(\"- {}\", p)).take(4).collect::<Vec<_>>().join(\"\\n\"),\n-                post.len() - 4,\n-            )\n-        } else if post.len() > 1 || (post.len() == 1 && post[0].contains('\\n')) {\n+\n+        let msg = format!(\"multiple `impl`s satisfying `{}` found\", predicate);\n+        let post = if post.len() > 1 || (post.len() == 1 && post[0].contains('\\n')) {\n             format!(\":\\n{}\", post.iter().map(|p| format!(\"- {}\", p)).collect::<Vec<_>>().join(\"\\n\"),)\n         } else if post.len() == 1 {\n             format!(\": `{}`\", post[0])"}, {"sha": "3671a0d87df57408b3f5db09a6c032019f5f53cd", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -20,7 +20,7 @@ use crate::traits;\n use crate::traits::coherence::Conflict;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{util, SelectionResult};\n-use crate::traits::{Ambiguous, ErrorReporting, Overflow, Unimplemented};\n+use crate::traits::{ErrorReporting, Overflow, Unimplemented};\n \n use super::BuiltinImplConditions;\n use super::IntercrateAmbiguityCause;\n@@ -200,15 +200,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // and report ambiguity.\n                     if i > 1 {\n                         debug!(\"multiple matches, ambig\");\n-                        return Err(Ambiguous(\n-                            candidates\n-                                .into_iter()\n-                                .filter_map(|c| match c.candidate {\n-                                    SelectionCandidate::ImplCandidate(def_id) => Some(def_id),\n-                                    _ => None,\n-                                })\n-                                .collect(),\n-                        ));\n+                        return Ok(None);\n                     }\n                 }\n             }"}, {"sha": "2954a2c163f4072c52e5d17c70f6b429309f27cc", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -294,9 +294,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 assert!(self.query_mode == TraitQueryMode::Canonical);\n                 return Err(SelectionError::Overflow(OverflowError::Canonical));\n             }\n-            Err(SelectionError::Ambiguous(_)) => {\n-                return Ok(None);\n-            }\n             Err(e) => {\n                 return Err(e);\n             }\n@@ -931,7 +928,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         match self.candidate_from_obligation(stack) {\n             Ok(Some(c)) => self.evaluate_candidate(stack, &c),\n-            Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),\n             Ok(None) => Ok(EvaluatedToAmbig),\n             Err(Overflow(OverflowError::Canonical)) => Err(OverflowError::Canonical),\n             Err(ErrorReporting) => Err(OverflowError::ErrorReporting),"}, {"sha": "f1f93b3aed61508d603cad311ebb80ed1d05a80a", "filename": "src/test/ui/error-codes/E0282.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Ferror-codes%2FE0282.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Ferror-codes%2FE0282.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0282.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -1,3 +1,4 @@\n fn main() {\n-    let x = \"hello\".chars().rev().collect(); //~ ERROR E0282\n+    let x = \"hello\".chars().rev().collect();\n+    //~^ ERROR E0282\n }"}, {"sha": "8f8d6b87ef209e016d41479d6c6e5553c32aeb76", "filename": "src/test/ui/error-codes/E0401.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -8,7 +8,9 @@ fn foo<T>(x: T) {\n            W: Fn()>\n            (y: T) { //~ ERROR E0401\n     }\n-    bfnr(x); //~ ERROR type annotations needed\n+    bfnr(x);\n+    //~^ ERROR type annotations needed\n+    //~| ERROR type annotations needed\n }\n \n "}, {"sha": "9687eca61fab0b5d16a1968fda5f18defde0bfd9", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -21,7 +21,7 @@ LL |            (y: T) {\n    |                ^ use of generic parameter from outer function\n \n error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/E0401.rs:22:25\n+  --> $DIR/E0401.rs:24:25\n    |\n LL | impl<T> Iterator for A<T> {\n    | ---- `Self` type implicitly declared here, by this `impl`\n@@ -43,7 +43,28 @@ help: consider specifying the generic arguments\n LL |     bfnr::<U, V, W>(x);\n    |         +++++++++++\n \n-error: aborting due to 4 previous errors\n+error[E0283]: type annotations needed\n+  --> $DIR/E0401.rs:11:5\n+   |\n+LL |     bfnr(x);\n+   |     ^^^^ cannot infer type of the type parameter `W` declared on the function `bfnr`\n+   |\n+   = note: multiple `impl`s satisfying `_: Fn<()>` found in the following crates: `alloc`, `core`:\n+           - impl<A, F> Fn<A> for &F\n+             where A: Tuple, F: Fn<A>, F: ?Sized;\n+           - impl<Args, F, A> Fn<Args> for Box<F, A>\n+             where Args: Tuple, F: Fn<Args>, A: Allocator, F: ?Sized;\n+note: required by a bound in `bfnr`\n+  --> $DIR/E0401.rs:4:30\n+   |\n+LL |     fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) {\n+   |                              ^^^^ required by this bound in `bfnr`\n+help: consider specifying the type arguments in the function call\n+   |\n+LL |     bfnr::<U, V, W>(x);\n+   |         +++++++++++\n+\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0282, E0401.\n+Some errors have detailed explanations: E0282, E0283, E0401.\n For more information about an error, try `rustc --explain E0282`."}, {"sha": "00aed2ad95a283c642fbc39e880e130dcba53212", "filename": "src/test/ui/impl-trait/cross-return-site-inference.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -30,16 +30,19 @@ fn baa(b: bool) -> impl std::fmt::Debug {\n \n fn muh() -> Result<(), impl std::fmt::Debug> {\n     Err(\"whoops\")?;\n-    Ok(()) //~ ERROR type annotations needed\n+    Ok(())\n+    //~^ ERROR type annotations needed\n }\n \n fn muh2() -> Result<(), impl std::fmt::Debug> {\n-    return Err(From::from(\"foo\")); //~ ERROR type annotations needed\n+    return Err(From::from(\"foo\"));\n+    //~^ ERROR type annotations needed\n     Ok(())\n }\n \n fn muh3() -> Result<(), impl std::fmt::Debug> {\n-    Err(From::from(\"foo\")) //~ ERROR type annotations needed\n+    Err(From::from(\"foo\"))\n+    //~^ ERROR type annotations needed\n }\n \n fn main() {}"}, {"sha": "766614e9e50ffcc9cb2cc5eec08ba336b255375a", "filename": "src/test/ui/impl-trait/cross-return-site-inference.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.stderr?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -10,7 +10,7 @@ LL |     Ok::<(), E>(())\n    |       +++++++++\n \n error[E0282]: type annotations needed\n-  --> $DIR/cross-return-site-inference.rs:37:12\n+  --> $DIR/cross-return-site-inference.rs:38:12\n    |\n LL |     return Err(From::from(\"foo\"));\n    |            ^^^ cannot infer type of the type parameter `E` declared on the enum `Result`\n@@ -21,7 +21,7 @@ LL |     return Err::<(), E>(From::from(\"foo\"));\n    |               +++++++++\n \n error[E0282]: type annotations needed\n-  --> $DIR/cross-return-site-inference.rs:42:5\n+  --> $DIR/cross-return-site-inference.rs:44:5\n    |\n LL |     Err(From::from(\"foo\"))\n    |     ^^^ cannot infer type of the type parameter `E` declared on the enum `Result`"}, {"sha": "b5152d04f6959fe511a9db9b2ab52f53a96427b7", "filename": "src/test/ui/inference/cannot-infer-async.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -10,6 +10,7 @@ fn main() {\n     let fut = async {\n         make_unit()?;\n \n-        Ok(()) //~ ERROR type annotations needed\n+        Ok(())\n+        //~^ ERROR type annotations needed\n     };\n }"}, {"sha": "bd5d10b417342ff42205cc35280047474256e2bb", "filename": "src/test/ui/inference/cannot-infer-closure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -1,6 +1,7 @@\n fn main() {\n     let x = |a: (), b: ()| {\n         Err(a)?;\n-        Ok(b) //~ ERROR type annotations needed\n+        Ok(b)\n+        //~^ ERROR type annotations needed\n     };\n }"}, {"sha": "8a9d2b235f0e43c2b63787410cc100f78c405f44", "filename": "src/test/ui/inference/issue-71732.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Finference%2Fissue-71732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Finference%2Fissue-71732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-71732.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -15,7 +15,8 @@ use std::collections::hash_map::HashMap;\n \n fn foo(parameters: &HashMap<String, String>) -> bool {\n     parameters\n-        .get(&\"key\".into()) //~ ERROR: type annotations needed\n+        .get(&\"key\".into())\n+        //~^ ERROR type annotations needed\n         .and_then(|found: &String| Some(false))\n         .unwrap_or(false)\n }"}, {"sha": "7b0f5936d84ec15f095e6069eb8ba8177c293085", "filename": "src/test/ui/inference/issue-72616.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Finference%2Fissue-72616.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Finference%2Fissue-72616.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72616.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -18,7 +18,8 @@ pub fn main() {\n     }\n     {\n         if String::from(\"a\") == \"a\".try_into().unwrap() {}\n-        //~^ ERROR: type annotations needed\n+        //~^ ERROR type annotations needed\n+        //~| ERROR type annotations needed\n     }\n     {\n         let _: String = match \"_\".try_into() {"}, {"sha": "da1a7ccdee15e5b8e974d74856c8ffa36c4e8629", "filename": "src/test/ui/inference/issue-72616.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Finference%2Fissue-72616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Finference%2Fissue-72616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72616.stderr?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -16,6 +16,22 @@ help: try using a fully qualified path to specify the expected types\n LL |         if String::from(\"a\") == <&str as TryInto<T>>::try_into(\"a\").unwrap() {}\n    |                                 +++++++++++++++++++++++++++++++   ~\n \n-error: aborting due to previous error\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72616.rs:20:37\n+   |\n+LL |         if String::from(\"a\") == \"a\".try_into().unwrap() {}\n+   |                                     ^^^^^^^^\n+   |\n+   = note: multiple `impl`s satisfying `_: TryFrom<&str>` found in the following crates: `core`, `std`:\n+           - impl<> TryFrom<&str> for std::sys_common::net::LookupHost;\n+           - impl<T, U> TryFrom<U> for T\n+             where U: Into<T>;\n+   = note: required for `&str` to implement `TryInto<_>`\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |         if String::from(\"a\") == <&str as TryInto<T>>::try_into(\"a\").unwrap() {}\n+   |                                 +++++++++++++++++++++++++++++++   ~\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0283`."}, {"sha": "10560f85ed480a67d4012043c9e2f7b6504c28ea", "filename": "src/test/ui/inference/question-mark-type-infer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Finference%2Fquestion-mark-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Finference%2Fquestion-mark-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fquestion-mark-type-infer.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -7,7 +7,8 @@ fn f(x: &i32) -> Result<i32, ()> {\n \n fn g() -> Result<Vec<i32>, ()> {\n     let l = [1, 2, 3, 4];\n-    l.iter().map(f).collect()? //~ ERROR type annotations needed\n+    l.iter().map(f).collect()?\n+    //~^ ERROR type annotations needed\n }\n \n fn main() {"}, {"sha": "7bf3ed60ec104e83e8e83d74d824dadee0d3d4ee", "filename": "src/test/ui/issues/issue-71584.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Fissues%2Fissue-71584.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Fissues%2Fissue-71584.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71584.rs?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     let n: u32 = 1;\n     let mut d: u64 = 2;\n-    d = d % n.into(); //~ ERROR type annotations needed\n+    d = d % n.into();\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "b6a04585583c933079d52ac7c76cffeefe53938e", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1551bfc02845eb198a71cc5c0264bd71e336274/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=f1551bfc02845eb198a71cc5c0264bd71e336274", "patch": "@@ -46,12 +46,7 @@ LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect(\n    |                                            |\n    |                                            required by a bound introduced by this call\n    |\n-   = note: multiple `impl`s satisfying `u32: From<_>` found in the following crates: `core`, `std`:\n-           - impl From<Ipv4Addr> for u32;\n-           - impl From<NonZeroU32> for u32;\n-           - impl From<bool> for u32;\n-           - impl From<char> for u32;\n-           and 3 more\n+   = note: cannot satisfy `u32: From<_>`\n help: try using a fully qualified path to specify the expected types\n    |\n LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(<u32 as Into<T>>::into(0u32))).collect();"}]}