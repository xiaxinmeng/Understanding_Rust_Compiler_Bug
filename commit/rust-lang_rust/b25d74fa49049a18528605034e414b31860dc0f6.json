{"sha": "b25d74fa49049a18528605034e414b31860dc0f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNWQ3NGZhNDkwNDlhMTg1Mjg2MDUwMzRlNDE0YjMxODYwZGMwZjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-27T15:40:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-27T15:40:48Z"}, "message": "Rollup merge of #62982 - oli-obk:static_cycle, r=RalfJung\n\nDon't access a static just for its size and alignment\n\ncc @RalfJung\n\nfixes #62189", "tree": {"sha": "ed8f7c9f2c4bf8dea0ce7284ef29169e66fa4964", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed8f7c9f2c4bf8dea0ce7284ef29169e66fa4964"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b25d74fa49049a18528605034e414b31860dc0f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdPHCACRBK7hj4Ov3rIwAAdHIIAIT0wK4QIH2R5gaj56E9v/St\n8ukihlYBNJnnkstTh/3HB2Gt6C1CJTiM0k0lydXmwgB9OCSZg9VGjNRhaMyzebiU\nJDTiMbTmE+fQczy8DR24FpkOIO+GyEzhedioC6Q2JP/9OAzTmmUQq1lUalXd3a6C\nzPS4WQCrOfMjvpbMcp37nztHpNl9WykMr5Du2mrYP/Id6wy6ZXYMt+RQrLQHA7pA\ndtbSMAsobE6Lmbb8i/fPPjnesF/6BxV3qPoxWYzNrEe9xosq78lkvuc18vjFA+WG\n/M6R+FQMDFzPHfpUqaN0H01wkrrp/NhQtbBB+KgvshehiVMVA5QC91rdAH/t6UQ=\n=cara\n-----END PGP SIGNATURE-----\n", "payload": "tree ed8f7c9f2c4bf8dea0ce7284ef29169e66fa4964\nparent a13f1f890b53ce7088373235f3e4d3f67a971c67\nparent 0cd71678e17973ed40f898101d01588bf6f6757a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564242048 +0200\ncommitter GitHub <noreply@github.com> 1564242048 +0200\n\nRollup merge of #62982 - oli-obk:static_cycle, r=RalfJung\n\nDon't access a static just for its size and alignment\n\ncc @RalfJung\n\nfixes #62189\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b25d74fa49049a18528605034e414b31860dc0f6", "html_url": "https://github.com/rust-lang/rust/commit/b25d74fa49049a18528605034e414b31860dc0f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b25d74fa49049a18528605034e414b31860dc0f6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a13f1f890b53ce7088373235f3e4d3f67a971c67", "url": "https://api.github.com/repos/rust-lang/rust/commits/a13f1f890b53ce7088373235f3e4d3f67a971c67", "html_url": "https://github.com/rust-lang/rust/commit/a13f1f890b53ce7088373235f3e4d3f67a971c67"}, {"sha": "0cd71678e17973ed40f898101d01588bf6f6757a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd71678e17973ed40f898101d01588bf6f6757a", "html_url": "https://github.com/rust-lang/rust/commit/0cd71678e17973ed40f898101d01588bf6f6757a"}], "stats": {"total": 86, "additions": 52, "deletions": 34}, "files": [{"sha": "4575784ac3703ba9dd08075da9549837836eac11", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b25d74fa49049a18528605034e414b31860dc0f6/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d74fa49049a18528605034e414b31860dc0f6/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=b25d74fa49049a18528605034e414b31860dc0f6", "patch": "@@ -535,41 +535,48 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         id: AllocId,\n         liveness: AllocCheck,\n     ) -> InterpResult<'static, (Size, Align)> {\n-        // Regular allocations.\n-        if let Ok(alloc) = self.get(id) {\n-            return Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align));\n-        }\n-        // Function pointers.\n-        if let Ok(_) = self.get_fn_alloc(id) {\n-            return if let AllocCheck::Dereferencable = liveness {\n-                // The caller requested no function pointers.\n-                err!(DerefFunctionPointer)\n-            } else {\n-                Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n-            };\n-        }\n-        // Foreign statics.\n-        // Can't do this in the match argument, we may get cycle errors since the lock would\n-        // be held throughout the match.\n-        let alloc = self.tcx.alloc_map.lock().get(id);\n-        match alloc {\n-            Some(GlobalAlloc::Static(did)) => {\n-                assert!(self.tcx.is_foreign_item(did));\n-                // Use size and align of the type\n-                let ty = self.tcx.type_of(did);\n-                let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                return Ok((layout.size, layout.align.abi));\n+        // Don't use `self.get` here as that will\n+        // a) cause cycles in case `id` refers to a static\n+        // b) duplicate a static's allocation in miri\n+        match self.alloc_map.get_or(id, || Err(())) {\n+            Ok((_, alloc)) => Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n+            Err(()) => {\n+                // Not a local allocation, check the global `tcx.alloc_map`.\n+\n+                // Can't do this in the match argument, we may get cycle errors since the lock would\n+                // be held throughout the match.\n+                let alloc = self.tcx.alloc_map.lock().get(id);\n+                match alloc {\n+                    Some(GlobalAlloc::Static(did)) => {\n+                        // Use size and align of the type.\n+                        let ty = self.tcx.type_of(did);\n+                        let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n+                        Ok((layout.size, layout.align.abi))\n+                    },\n+                    Some(GlobalAlloc::Memory(alloc)) =>\n+                        // Need to duplicate the logic here, because the global allocations have\n+                        // different associated types than the interpreter-local ones.\n+                        Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n+                    Some(GlobalAlloc::Function(_)) => {\n+                        if let AllocCheck::Dereferencable = liveness {\n+                            // The caller requested no function pointers.\n+                            err!(DerefFunctionPointer)\n+                        } else {\n+                            Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n+                        }\n+                    },\n+                    // The rest must be dead.\n+                    None => if let AllocCheck::MaybeDead = liveness {\n+                        // Deallocated pointers are allowed, we should be able to find\n+                        // them in the map.\n+                        Ok(*self.dead_alloc_map.get(&id)\n+                            .expect(\"deallocated pointers should all be recorded in \\\n+                                    `dead_alloc_map`\"))\n+                    } else {\n+                        err!(DanglingPointerDeref)\n+                    },\n+                }\n             }\n-            _ => {}\n-        }\n-        // The rest must be dead.\n-        if let AllocCheck::MaybeDead = liveness {\n-            // Deallocated pointers are allowed, we should be able to find\n-            // them in the map.\n-            Ok(*self.dead_alloc_map.get(&id)\n-                .expect(\"deallocated pointers should all be recorded in `dead_alloc_map`\"))\n-        } else {\n-            err!(DanglingPointerDeref)\n         }\n     }\n "}, {"sha": "9ce050aae218174de810976cf2cff825bbd86c75", "filename": "src/test/ui/consts/static-cycle-error.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b25d74fa49049a18528605034e414b31860dc0f6/src%2Ftest%2Fui%2Fconsts%2Fstatic-cycle-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d74fa49049a18528605034e414b31860dc0f6/src%2Ftest%2Fui%2Fconsts%2Fstatic-cycle-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic-cycle-error.rs?ref=b25d74fa49049a18528605034e414b31860dc0f6", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+struct Foo {\n+    foo: Option<&'static Foo>\n+}\n+\n+static FOO: Foo = Foo {\n+    foo: Some(&FOO),\n+};\n+\n+fn main() {}"}]}