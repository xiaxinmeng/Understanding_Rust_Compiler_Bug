{"sha": "4798a89a12f40af17174a160f6d6a2f1c53db8d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OThhODlhMTJmNDBhZjE3MTc0YTE2MGY2ZDZhMmYxYzUzZGI4ZDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-03T12:10:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-03T12:10:06Z"}, "message": "Complete params", "tree": {"sha": "2a97f379f624127739188f35babfa9710b104bf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a97f379f624127739188f35babfa9710b104bf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4798a89a12f40af17174a160f6d6a2f1c53db8d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4798a89a12f40af17174a160f6d6a2f1c53db8d6", "html_url": "https://github.com/rust-lang/rust/commit/4798a89a12f40af17174a160f6d6a2f1c53db8d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4798a89a12f40af17174a160f6d6a2f1c53db8d6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58480b9190d8851abf7f634820188e33efed286d", "url": "https://api.github.com/repos/rust-lang/rust/commits/58480b9190d8851abf7f634820188e33efed286d", "html_url": "https://github.com/rust-lang/rust/commit/58480b9190d8851abf7f634820188e33efed286d"}], "stats": {"total": 563, "additions": 326, "deletions": 237}, "files": [{"sha": "6c37751272ac354c9186e149ba6428d791a883c8", "filename": "crates/libeditor/src/completion.rs", "status": "modified", "additions": 146, "deletions": 76, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcompletion.rs?ref=4798a89a12f40af17174a160f6d6a2f1c53db8d6", "patch": "@@ -1,11 +1,11 @@\n-use std::collections::HashSet;\n+use std::collections::{HashSet, HashMap};\n \n use libsyntax2::{\n-    File, TextUnit, AstNode, SyntaxKind::*,\n+    File, TextUnit, AstNode, SyntaxNodeRef, SyntaxKind::*,\n     ast::{self, LoopBodyOwner},\n     algo::{\n         ancestors,\n-        visit::{visitor, Visitor},\n+        visit::{visitor, Visitor, visitor_ctx, VisitorCtx},\n     },\n     text_utils::is_subrange,\n };\n@@ -17,7 +17,11 @@ use {\n \n #[derive(Debug)]\n pub struct CompletionItem {\n-    pub name: String,\n+    /// What user sees in pop-up\n+    pub label: String,\n+    /// What string is used for filtering, defaults to label\n+    pub lookup: Option<String>,\n+    /// What is inserted, defaults to label\n     pub snippet: Option<String>\n }\n \n@@ -27,40 +31,89 @@ pub fn scope_completion(file: &File, offset: TextUnit) -> Option<Vec<CompletionI\n         let edit = AtomEdit::insert(offset, \"intellijRulezz\".to_string());\n         file.reparse(&edit)\n     };\n-    let name_ref = find_node_at_offset::<ast::NameRef>(file.syntax(), offset)?;\n-    if !is_single_segment(name_ref) {\n-        return None;\n+    let mut has_completions = false;\n+    let mut res = Vec::new();\n+    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), offset) {\n+        has_completions = true;\n+        complete_name_ref(&file, name_ref, &mut res)\n+    }\n+    if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), offset) {\n+        has_completions = true;\n+        complete_name(&file, name, &mut res)\n+    }\n+    if has_completions {\n+        Some(res)\n+    } else {\n+        None\n     }\n+}\n \n-    let mut res = Vec::new();\n+fn complete_name_ref(file: &File, name_ref: ast::NameRef, acc: &mut Vec<CompletionItem>) {\n+    if !is_node::<ast::Path>(name_ref.syntax()) {\n+        return;\n+    }\n     if let Some(fn_def) = ancestors(name_ref.syntax()).filter_map(ast::FnDef::cast).next() {\n-        complete_expr_keywords(&file, fn_def, name_ref, &mut res);\n+        complete_expr_keywords(&file, fn_def, name_ref, acc);\n         let scopes = FnScopes::new(fn_def);\n-        complete_fn(name_ref, &scopes, &mut res);\n+        complete_fn(name_ref, &scopes, acc);\n     }\n     if let Some(root) = ancestors(name_ref.syntax()).filter_map(ast::Root::cast).next() {\n         let scope = ModuleScope::new(root);\n-        res.extend(\n+        acc.extend(\n             scope.entries().iter()\n                 .filter(|entry| entry.syntax() != name_ref.syntax())\n                 .map(|entry| CompletionItem {\n-                    name: entry.name().to_string(),\n+                    label: entry.name().to_string(),\n+                    lookup: None,\n                     snippet: None,\n                 })\n         );\n     }\n-    Some(res)\n }\n \n-fn is_single_segment(name_ref: ast::NameRef) -> bool {\n-    match ancestors(name_ref.syntax()).filter_map(ast::Path::cast).next() {\n+fn complete_name(_file: &File, name: ast::Name, acc: &mut Vec<CompletionItem>) {\n+    if !is_node::<ast::Param>(name.syntax()) {\n+        return;\n+    }\n+\n+    let mut params = HashMap::new();\n+    for node in ancestors(name.syntax()) {\n+        let _ = visitor_ctx(&mut params)\n+            .visit::<ast::Root, _>(process)\n+            .accept(node);\n+    }\n+    params.into_iter()\n+        .filter_map(|(label, (count, param))| {\n+            let lookup = param.pat()?.syntax().text().to_string();\n+            if count < 2 { None } else { Some((label, lookup)) }\n+        })\n+        .for_each(|(label, lookup)| {\n+            acc.push(CompletionItem {\n+                label, lookup: Some(lookup), snippet: None\n+            })\n+        });\n+\n+    fn process<'a, N: ast::FnDefOwner<'a>>(node: N, params: &mut HashMap<String, (u32, ast::Param<'a>)>) {\n+        node.functions()\n+            .filter_map(|it| it.param_list())\n+            .flat_map(|it| it.params())\n+            .for_each(|param| {\n+                let text = param.syntax().text().to_string();\n+                params.entry(text)\n+                      .or_insert((0, param))\n+                      .0 += 1;\n+            })\n+    }\n+}\n+\n+fn is_node<'a, N: AstNode<'a>>(node: SyntaxNodeRef<'a>) -> bool {\n+    match ancestors(node).filter_map(N::cast).next() {\n         None => false,\n-        Some(path) => {\n-            path.syntax().range() == name_ref.syntax().range()\n-        }\n+        Some(n) => n.syntax().range() == node.range(),\n     }\n }\n \n+\n fn complete_expr_keywords(file: &File, fn_def: ast::FnDef, name_ref: ast::NameRef, acc: &mut Vec<CompletionItem>) {\n     acc.push(keyword(\"if\", \"if $0 {}\"));\n     acc.push(keyword(\"match\", \"match $0 {}\"));\n@@ -127,7 +180,8 @@ fn complete_return(fn_def: ast::FnDef, name_ref: ast::NameRef) -> Option<Complet\n \n fn keyword(kw: &str, snip: &str) -> CompletionItem {\n     CompletionItem {\n-        name: kw.to_string(),\n+        label: kw.to_string(),\n+        lookup: None,\n         snippet: Some(snip.to_string()),\n     }\n }\n@@ -139,13 +193,15 @@ fn complete_fn(name_ref: ast::NameRef, scopes: &FnScopes, acc: &mut Vec<Completi\n             .flat_map(|scope| scopes.entries(scope).iter())\n             .filter(|entry| shadowed.insert(entry.name()))\n             .map(|entry| CompletionItem {\n-                name: entry.name().to_string(),\n+                label: entry.name().to_string(),\n+                lookup: None,\n                 snippet: None,\n             })\n     );\n     if scopes.self_param.is_some() {\n         acc.push(CompletionItem {\n-            name: \"self\".to_string(),\n+            label: \"self\".to_string(),\n+            lookup: None,\n             snippet: None,\n         })\n     }\n@@ -186,9 +242,9 @@ mod tests {\n                 1 + <|>;\n                 let z = ();\n             }\n-            \", r#\"[CompletionItem { name: \"y\", snippet: None },\n-                   CompletionItem { name: \"x\", snippet: None },\n-                   CompletionItem { name: \"quux\", snippet: None }]\"#);\n+            \", r#\"[CompletionItem { label: \"y\", lookup: None, snippet: None },\n+                   CompletionItem { label: \"x\", lookup: None, snippet: None },\n+                   CompletionItem { label: \"quux\", lookup: None, snippet: None }]\"#);\n     }\n \n     #[test]\n@@ -203,9 +259,9 @@ mod tests {\n                     1 + <|>\n                 }\n             }\n-            \", r#\"[CompletionItem { name: \"b\", snippet: None },\n-                   CompletionItem { name: \"a\", snippet: None },\n-                   CompletionItem { name: \"quux\", snippet: None }]\"#);\n+            \", r#\"[CompletionItem { label: \"b\", lookup: None, snippet: None },\n+                   CompletionItem { label: \"a\", lookup: None, snippet: None },\n+                   CompletionItem { label: \"quux\", lookup: None, snippet: None }]\"#);\n     }\n \n     #[test]\n@@ -216,8 +272,8 @@ mod tests {\n                     <|>\n                 }\n             }\n-            \", r#\"[CompletionItem { name: \"x\", snippet: None },\n-                   CompletionItem { name: \"quux\", snippet: None }]\"#);\n+            \", r#\"[CompletionItem { label: \"x\", lookup: None, snippet: None },\n+                   CompletionItem { label: \"quux\", lookup: None, snippet: None }]\"#);\n     }\n \n     #[test]\n@@ -228,9 +284,9 @@ mod tests {\n             fn quux() {\n                 <|>\n             }\n-            \", r#\"[CompletionItem { name: \"Foo\", snippet: None },\n-                   CompletionItem { name: \"Baz\", snippet: None },\n-                   CompletionItem { name: \"quux\", snippet: None }]\"#);\n+            \", r#\"[CompletionItem { label: \"Foo\", lookup: None, snippet: None },\n+                   CompletionItem { label: \"Baz\", lookup: None, snippet: None },\n+                   CompletionItem { label: \"quux\", lookup: None, snippet: None }]\"#);\n     }\n \n     #[test]\n@@ -245,8 +301,8 @@ mod tests {\n         check_scope_completion(r\"\n             struct Foo;\n             fn x() -> <|>\n-        \", r#\"[CompletionItem { name: \"Foo\", snippet: None },\n-               CompletionItem { name: \"x\", snippet: None }]\"#)\n+        \", r#\"[CompletionItem { label: \"Foo\", lookup: None, snippet: None },\n+               CompletionItem { label: \"x\", lookup: None, snippet: None }]\"#)\n     }\n \n     #[test]\n@@ -259,15 +315,15 @@ mod tests {\n                     <|>\n                 }\n             }\n-        \", r#\"[CompletionItem { name: \"bar\", snippet: None },\n-               CompletionItem { name: \"foo\", snippet: None }]\"#)\n+        \", r#\"[CompletionItem { label: \"bar\", lookup: None, snippet: None },\n+               CompletionItem { label: \"foo\", lookup: None, snippet: None }]\"#)\n     }\n \n     #[test]\n     fn test_complete_self() {\n         check_scope_completion(r\"\n             impl S { fn foo(&self) { <|> } }\n-        \", r#\"[CompletionItem { name: \"self\", snippet: None }]\"#)\n+        \", r#\"[CompletionItem { label: \"self\", lookup: None, snippet: None }]\"#)\n     }\n \n     #[test]\n@@ -276,11 +332,11 @@ mod tests {\n             fn quux() {\n                 <|>\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n-                   CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n-                   CompletionItem { name: \"return\", snippet: Some(\"return\") }]\"#);\n+            \", r#\"[CompletionItem { label: \"if\", lookup: None, snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { label: \"match\", lookup: None, snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { label: \"while\", lookup: None, snippet: Some(\"while $0 {}\") },\n+                   CompletionItem { label: \"loop\", lookup: None, snippet: Some(\"loop {$0}\") },\n+                   CompletionItem { label: \"return\", lookup: None, snippet: Some(\"return\") }]\"#);\n     }\n \n     #[test]\n@@ -291,13 +347,13 @@ mod tests {\n                     ()\n                 } <|>\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n-                   CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n-                   CompletionItem { name: \"else\", snippet: Some(\"else {$0}\") },\n-                   CompletionItem { name: \"else if\", snippet: Some(\"else if $0 {}\") },\n-                   CompletionItem { name: \"return\", snippet: Some(\"return\") }]\"#);\n+            \", r#\"[CompletionItem { label: \"if\", lookup: None, snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { label: \"match\", lookup: None, snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { label: \"while\", lookup: None, snippet: Some(\"while $0 {}\") },\n+                   CompletionItem { label: \"loop\", lookup: None, snippet: Some(\"loop {$0}\") },\n+                   CompletionItem { label: \"else\", lookup: None, snippet: Some(\"else {$0}\") },\n+                   CompletionItem { label: \"else if\", lookup: None, snippet: Some(\"else if $0 {}\") },\n+                   CompletionItem { label: \"return\", lookup: None, snippet: Some(\"return\") }]\"#);\n     }\n \n     #[test]\n@@ -307,21 +363,21 @@ mod tests {\n                 <|>\n                 92\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n-                   CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n-                   CompletionItem { name: \"return\", snippet: Some(\"return $0;\") }]\"#);\n+            \", r#\"[CompletionItem { label: \"if\", lookup: None, snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { label: \"match\", lookup: None, snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { label: \"while\", lookup: None, snippet: Some(\"while $0 {}\") },\n+                   CompletionItem { label: \"loop\", lookup: None, snippet: Some(\"loop {$0}\") },\n+                   CompletionItem { label: \"return\", lookup: None, snippet: Some(\"return $0;\") }]\"#);\n         check_snippet_completion(r\"\n             fn quux() {\n                 <|>\n                 92\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n-                   CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n-                   CompletionItem { name: \"return\", snippet: Some(\"return;\") }]\"#);\n+            \", r#\"[CompletionItem { label: \"if\", lookup: None, snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { label: \"match\", lookup: None, snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { label: \"while\", lookup: None, snippet: Some(\"while $0 {}\") },\n+                   CompletionItem { label: \"loop\", lookup: None, snippet: Some(\"loop {$0}\") },\n+                   CompletionItem { label: \"return\", lookup: None, snippet: Some(\"return;\") }]\"#);\n     }\n \n     #[test]\n@@ -332,11 +388,11 @@ mod tests {\n                     () => <|>\n                 }\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n-                   CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n-                   CompletionItem { name: \"return\", snippet: Some(\"return $0\") }]\"#);\n+            \", r#\"[CompletionItem { label: \"if\", lookup: None, snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { label: \"match\", lookup: None, snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { label: \"while\", lookup: None, snippet: Some(\"while $0 {}\") },\n+                   CompletionItem { label: \"loop\", lookup: None, snippet: Some(\"loop {$0}\") },\n+                   CompletionItem { label: \"return\", lookup: None, snippet: Some(\"return $0\") }]\"#);\n     }\n \n     #[test]\n@@ -345,21 +401,35 @@ mod tests {\n             fn quux() -> i32 {\n                 loop { <|> }\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n-                   CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n-                   CompletionItem { name: \"continue\", snippet: Some(\"continue\") },\n-                   CompletionItem { name: \"break\", snippet: Some(\"break\") },\n-                   CompletionItem { name: \"return\", snippet: Some(\"return $0\") }]\"#);\n+            \", r#\"[CompletionItem { label: \"if\", lookup: None, snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { label: \"match\", lookup: None, snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { label: \"while\", lookup: None, snippet: Some(\"while $0 {}\") },\n+                   CompletionItem { label: \"loop\", lookup: None, snippet: Some(\"loop {$0}\") },\n+                   CompletionItem { label: \"continue\", lookup: None, snippet: Some(\"continue\") },\n+                   CompletionItem { label: \"break\", lookup: None, snippet: Some(\"break\") },\n+                   CompletionItem { label: \"return\", lookup: None, snippet: Some(\"return $0\") }]\"#);\n         check_snippet_completion(r\"\n             fn quux() -> i32 {\n                 loop { || { <|> } }\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n-                   CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n-                   CompletionItem { name: \"return\", snippet: Some(\"return $0\") }]\"#);\n+            \", r#\"[CompletionItem { label: \"if\", lookup: None, snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { label: \"match\", lookup: None, snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { label: \"while\", lookup: None, snippet: Some(\"while $0 {}\") },\n+                   CompletionItem { label: \"loop\", lookup: None, snippet: Some(\"loop {$0}\") },\n+                   CompletionItem { label: \"return\", lookup: None, snippet: Some(\"return $0\") }]\"#);\n+    }\n+\n+    #[test]\n+    fn test_param_completion() {\n+        check_scope_completion(r\"\n+            fn foo(file_id: FileId) {}\n+            fn bar(file_id: FileId) {}\n+            fn baz(file<|>) {}\n+        \", r#\"[CompletionItem { label: \"file_id: FileId\", lookup: Some(\"file_id\"), snippet: None }]\"#);\n+        check_scope_completion(r\"\n+            fn foo(file_id: FileId) {}\n+            fn bar(file_id: FileId) {}\n+            fn baz(file<|>, x: i32) {}\n+        \", r#\"[CompletionItem { label: \"file_id: FileId\", lookup: Some(\"file_id\"), snippet: None }]\"#);\n     }\n }"}, {"sha": "4a57837dfe995ec8d41311a9ebc0b94f333ee3e6", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=4798a89a12f40af17174a160f6d6a2f1c53db8d6", "patch": "@@ -682,6 +682,28 @@ impl<'a> AstNode<'a> for IndexExpr<'a> {\n \n impl<'a> IndexExpr<'a> {}\n \n+// ItemList\n+#[derive(Debug, Clone, Copy)]\n+pub struct ItemList<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for ItemList<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            ITEM_LIST => Some(ItemList { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> ItemList<'a> {\n+    pub fn items(self) -> impl Iterator<Item = ModuleItem<'a>> + 'a {\n+        super::children(self)\n+    }\n+}\n+\n // Label\n #[derive(Debug, Clone, Copy)]\n pub struct Label<'a> {\n@@ -956,9 +978,9 @@ impl<'a> AstNode<'a> for Module<'a> {\n \n impl<'a> ast::NameOwner<'a> for Module<'a> {}\n impl<'a> ast::AttrsOwner<'a> for Module<'a> {}\n-impl<'a> Module<'a> {\n-    pub fn items(self) -> impl Iterator<Item = ModuleItem<'a>> + 'a {\n-        super::children(self)\n+impl<'a> ast::FnDefOwner<'a> for Module<'a> {}\n+impl<'a> Module<'a> {pub fn item_list(self) -> Option<ItemList<'a>> {\n+        super::child_opt(self)\n     }\n }\n \n@@ -1593,15 +1615,12 @@ impl<'a> AstNode<'a> for Root<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n+impl<'a> ast::FnDefOwner<'a> for Root<'a> {}\n impl<'a> Root<'a> {\n     pub fn items(self) -> impl Iterator<Item = ModuleItem<'a>> + 'a {\n         super::children(self)\n     }\n \n-    pub fn functions(self) -> impl Iterator<Item = FnDef<'a>> + 'a {\n-        super::children(self)\n-    }\n-\n     pub fn modules(self) -> impl Iterator<Item = Module<'a>> + 'a {\n         super::children(self)\n     }"}, {"sha": "881f380f37f2ea4fa9bfc2dda608b1ed9c3cce97", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=4798a89a12f40af17174a160f6d6a2f1c53db8d6", "patch": "@@ -32,6 +32,12 @@ pub trait ArgListOwner<'a>: AstNode<'a> {\n     }\n }\n \n+pub trait FnDefOwner<'a>: AstNode<'a> {\n+    fn functions(self) -> Box<Iterator<Item=FnDef<'a>> + 'a> {\n+        Box::new(children(self))\n+    }\n+}\n+\n pub trait TypeParamsOwner<'a>: AstNode<'a> {\n     fn type_param_list(self) -> Option<TypeParamList<'a>> {\n         child_opt(self)"}, {"sha": "8a2b780f066b22929d579e73f6ddd5b2bc91fefd", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=4798a89a12f40af17174a160f6d6a2f1c53db8d6", "patch": "@@ -238,9 +238,9 @@ Grammar(\n     ],\n     ast: {\n         \"Root\": (\n+            traits: [ \"FnDefOwner\" ],\n             collections: [\n                 [\"items\", \"ModuleItem\"],\n-                [\"functions\", \"FnDef\"],\n                 [\"modules\", \"Module\"],\n             ]\n         ),\n@@ -271,10 +271,11 @@ Grammar(\n         ] ),\n         \"TraitDef\": ( traits: [\"NameOwner\", \"AttrsOwner\"] ),\n         \"Module\": (\n-            traits: [\"NameOwner\", \"AttrsOwner\"],\n-            collections: [\n-                [\"items\", \"ModuleItem\"]\n-            ]\n+            traits: [\"NameOwner\", \"AttrsOwner\", \"FnDefOwner\" ],\n+            options: [ \"ItemList\" ]\n+        ),\n+        \"ItemList\": (\n+            collections: [ [\"items\", \"ModuleItem\"] ]\n         ),\n         \"ConstDef\": ( traits: [\n             \"NameOwner\","}, {"sha": "aa20ae8e4376edc2c3cd6ed41cfbe104fbdd1ab2", "filename": "crates/libsyntax2/src/grammar/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=4798a89a12f40af17174a160f6d6a2f1c53db8d6", "patch": "@@ -23,7 +23,7 @@ pub(super) fn pattern(p: &mut Parser) {\n }\n \n const PAT_RECOVERY_SET: TokenSet =\n-    token_set![LET_KW, IF_KW, WHILE_KW, LOOP_KW, MATCH_KW];\n+    token_set![LET_KW, IF_KW, WHILE_KW, LOOP_KW, MATCH_KW, R_PAREN, COMMA];\n \n \n fn atom_pat(p: &mut Parser) -> Option<CompletedMarker> {"}, {"sha": "a52355b50e440254ef9696046c978d0366bbc706", "filename": "crates/libsyntax2/src/grammar/types.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs?ref=4798a89a12f40af17174a160f6d6a2f1c53db8d6", "patch": "@@ -8,6 +8,9 @@ pub(super) const TYPE_FIRST: TokenSet =\n         paths::PATH_FIRST,\n     ];\n \n+const TYPE_RECOVERY_SET: TokenSet =\n+    token_set![R_PAREN, COMMA];\n+\n pub(super) fn type_(p: &mut Parser) {\n     match p.current() {\n         L_PAREN => paren_or_tuple_type(p),\n@@ -23,7 +26,7 @@ pub(super) fn type_(p: &mut Parser) {\n         L_ANGLE => path_type(p),\n         _ if paths::is_path_start(p) => path_type(p),\n         _ => {\n-            p.err_and_bump(\"expected type\");\n+            p.err_recover(\"expected type\", TYPE_RECOVERY_SET);\n         }\n     }\n }"}, {"sha": "c4d9f5e7ec02d1377e2cba39d7a9be2d1be40f36", "filename": "crates/libsyntax2/tests/data/parser/err/0018_incomplete_fn.txt", "status": "modified", "additions": 99, "deletions": 146, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.txt?ref=4798a89a12f40af17174a160f6d6a2f1c53db8d6", "patch": "@@ -11,168 +11,121 @@ ROOT@[0; 183)\n     ITEM_LIST@[14; 182)\n       L_CURLY@[14; 15)\n       WHITESPACE@[15; 20)\n-      FN_DEF@[20; 180)\n+      FN_DEF@[20; 161)\n         FN_KW@[20; 22)\n         WHITESPACE@[22; 23)\n         NAME@[23; 32)\n           IDENT@[23; 32) \"new_scope\"\n-        PARAM_LIST@[32; 180)\n+        PARAM_LIST@[32; 35)\n           L_PAREN@[32; 33)\n-          PARAM@[33; 38)\n-            REF_PAT@[33; 35)\n+          PARAM@[33; 34)\n+            REF_PAT@[33; 34)\n               AMP@[33; 34)\n               err: `expected pattern`\n-              ERROR@[34; 35)\n-                R_PAREN@[34; 35)\n-                err: `expected COLON`\n-            WHITESPACE@[35; 36)\n-            err: `expected type`\n-            ERROR@[36; 38)\n-              THIN_ARROW@[36; 38)\n-              err: `expected COMMA`\n+              err: `expected COLON`\n+              err: `expected type`\n+          R_PAREN@[34; 35)\n+        WHITESPACE@[35; 36)\n+        RET_TYPE@[36; 46)\n+          THIN_ARROW@[36; 38)\n           WHITESPACE@[38; 39)\n-          PARAM@[39; 169)\n-            STRUCT_PAT@[39; 161)\n-              PATH@[39; 46)\n-                PATH_SEGMENT@[39; 46)\n-                  NAME_REF@[39; 46)\n-                    IDENT@[39; 46) \"ScopeId\"\n-              WHITESPACE@[46; 47)\n-              FIELD_PAT_LIST@[47; 161)\n-                L_CURLY@[47; 48)\n-                WHITESPACE@[48; 57)\n-                err: `expected a name`\n-                BIND_PAT@[57; 60)\n-                  ERROR@[57; 60)\n-                    LET_KW@[57; 60)\n-                    err: `expected COMMA`\n-                WHITESPACE@[60; 61)\n-                BIND_PAT@[61; 64)\n-                  NAME@[61; 64)\n-                    IDENT@[61; 64) \"res\"\n-                    err: `expected COMMA`\n-                WHITESPACE@[64; 65)\n-                err: `expected a name`\n-                BIND_PAT@[65; 66)\n-                  ERROR@[65; 66)\n-                    EQ@[65; 66)\n-                    err: `expected COMMA`\n-                WHITESPACE@[66; 67)\n-                err: `expected a name`\n-                BIND_PAT@[67; 71)\n-                  ERROR@[67; 71)\n-                    SELF_KW@[67; 71)\n-                    err: `expected COMMA`\n-                    err: `expected a name`\n-                BIND_PAT@[71; 72)\n-                  ERROR@[71; 72)\n-                    DOT@[71; 72)\n-                    err: `expected COMMA`\n-                BIND_PAT@[72; 78)\n-                  NAME@[72; 78)\n-                    IDENT@[72; 78) \"scopes\"\n-                    err: `expected COMMA`\n-                    err: `expected a name`\n-                BIND_PAT@[78; 79)\n-                  ERROR@[78; 79)\n-                    DOT@[78; 79)\n-                    err: `expected COMMA`\n-                BIND_PAT@[79; 82)\n-                  NAME@[79; 82)\n-                    IDENT@[79; 82) \"len\"\n-                    err: `expected COMMA`\n-                    err: `expected a name`\n-                BIND_PAT@[82; 83)\n-                  ERROR@[82; 83)\n-                    L_PAREN@[82; 83)\n-                    err: `expected COMMA`\n-                    err: `expected a name`\n-                BIND_PAT@[83; 84)\n-                  ERROR@[83; 84)\n-                    R_PAREN@[83; 84)\n-                    err: `expected COMMA`\n-                    err: `expected a name`\n-                BIND_PAT@[84; 85)\n-                  ERROR@[84; 85)\n-                    SEMI@[84; 85)\n-                    err: `expected COMMA`\n-                WHITESPACE@[85; 94)\n-                err: `expected a name`\n-                BIND_PAT@[94; 98)\n-                  ERROR@[94; 98)\n+          PATH_TYPE@[39; 46)\n+            PATH@[39; 46)\n+              PATH_SEGMENT@[39; 46)\n+                NAME_REF@[39; 46)\n+                  IDENT@[39; 46) \"ScopeId\"\n+        WHITESPACE@[46; 47)\n+        BLOCK@[47; 161)\n+          L_CURLY@[47; 48)\n+          WHITESPACE@[48; 57)\n+          LET_STMT@[57; 85)\n+            LET_KW@[57; 60)\n+            WHITESPACE@[60; 61)\n+            BIND_PAT@[61; 64)\n+              NAME@[61; 64)\n+                IDENT@[61; 64) \"res\"\n+            WHITESPACE@[64; 65)\n+            EQ@[65; 66)\n+            WHITESPACE@[66; 67)\n+            METHOD_CALL_EXPR@[67; 84)\n+              FIELD_EXPR@[67; 78)\n+                PATH_EXPR@[67; 71)\n+                  PATH@[67; 71)\n+                    PATH_SEGMENT@[67; 71)\n+                      SELF_KW@[67; 71)\n+                DOT@[71; 72)\n+                NAME_REF@[72; 78)\n+                  IDENT@[72; 78) \"scopes\"\n+              DOT@[78; 79)\n+              NAME_REF@[79; 82)\n+                IDENT@[79; 82) \"len\"\n+              ARG_LIST@[82; 84)\n+                L_PAREN@[82; 83)\n+                R_PAREN@[83; 84)\n+            SEMI@[84; 85)\n+          WHITESPACE@[85; 94)\n+          METHOD_CALL_EXPR@[94; 155)\n+            FIELD_EXPR@[94; 105)\n+              PATH_EXPR@[94; 98)\n+                PATH@[94; 98)\n+                  PATH_SEGMENT@[94; 98)\n                     SELF_KW@[94; 98)\n-                    err: `expected COMMA`\n-                    err: `expected a name`\n-                BIND_PAT@[98; 99)\n-                  ERROR@[98; 99)\n-                    DOT@[98; 99)\n-                    err: `expected COMMA`\n-                BIND_PAT@[99; 105)\n-                  NAME@[99; 105)\n-                    IDENT@[99; 105) \"scopes\"\n-                    err: `expected COMMA`\n-                    err: `expected a name`\n-                BIND_PAT@[105; 106)\n-                  ERROR@[105; 106)\n-                    DOT@[105; 106)\n-                    err: `expected COMMA`\n-                BIND_PAT@[106; 110)\n-                  NAME@[106; 110)\n-                    IDENT@[106; 110) \"push\"\n-                    err: `expected COMMA`\n-                    err: `expected a name`\n-                BIND_PAT@[110; 111)\n-                  ERROR@[110; 111)\n-                    L_PAREN@[110; 111)\n-                    err: `expected COMMA`\n-                BIND_PAT@[111; 120)\n-                  NAME@[111; 120)\n-                    IDENT@[111; 120) \"ScopeData\"\n-                    err: `expected COMMA`\n+              DOT@[98; 99)\n+              NAME_REF@[99; 105)\n+                IDENT@[99; 105) \"scopes\"\n+            DOT@[105; 106)\n+            NAME_REF@[106; 110)\n+              IDENT@[106; 110) \"push\"\n+            ARG_LIST@[110; 155)\n+              L_PAREN@[110; 111)\n+              STRUCT_LIT@[111; 154)\n+                PATH@[111; 120)\n+                  PATH_SEGMENT@[111; 120)\n+                    NAME_REF@[111; 120)\n+                      IDENT@[111; 120) \"ScopeData\"\n                 WHITESPACE@[120; 121)\n-                err: `expected ident`\n-                ERROR@[121; 154)\n+                NAMED_FIELD_LIST@[121; 154)\n                   L_CURLY@[121; 122)\n                   WHITESPACE@[122; 123)\n-                  IDENT@[123; 129) \"parent\"\n-                  COLON@[129; 130)\n-                  WHITESPACE@[130; 131)\n-                  IDENT@[131; 135) \"None\"\n+                  NAMED_FIELD@[123; 135)\n+                    NAME_REF@[123; 129)\n+                      IDENT@[123; 129) \"parent\"\n+                    COLON@[129; 130)\n+                    WHITESPACE@[130; 131)\n+                    PATH_EXPR@[131; 135)\n+                      PATH@[131; 135)\n+                        PATH_SEGMENT@[131; 135)\n+                          NAME_REF@[131; 135)\n+                            IDENT@[131; 135) \"None\"\n                   COMMA@[135; 136)\n                   WHITESPACE@[136; 137)\n-                  IDENT@[137; 144) \"entries\"\n-                  COLON@[144; 145)\n-                  WHITESPACE@[145; 146)\n-                  IDENT@[146; 149) \"vec\"\n-                  EXCL@[149; 150)\n-                  L_BRACK@[150; 151)\n-                  R_BRACK@[151; 152)\n+                  NAMED_FIELD@[137; 152)\n+                    NAME_REF@[137; 144)\n+                      IDENT@[137; 144) \"entries\"\n+                    COLON@[144; 145)\n+                    WHITESPACE@[145; 146)\n+                    MACRO_CALL@[146; 152)\n+                      PATH@[146; 149)\n+                        PATH_SEGMENT@[146; 149)\n+                          NAME_REF@[146; 149)\n+                            IDENT@[146; 149) \"vec\"\n+                      EXCL@[149; 150)\n+                      TOKEN_TREE@[150; 152)\n+                        L_BRACK@[150; 151)\n+                        R_BRACK@[151; 152)\n                   WHITESPACE@[152; 153)\n                   R_CURLY@[153; 154)\n-                  err: `expected COMMA`\n-                  err: `expected a name`\n-                BIND_PAT@[154; 155)\n-                  ERROR@[154; 155)\n-                    R_PAREN@[154; 155)\n-                WHITESPACE@[155; 160)\n-                R_CURLY@[160; 161)\n-                err: `expected COLON`\n-            WHITESPACE@[161; 167)\n-            FN_POINTER_TYPE@[167; 169)\n-              FN_KW@[167; 169)\n-              err: `expected parameters`\n-              err: `expected COMMA`\n-          WHITESPACE@[169; 170)\n-          PARAM@[170; 180)\n-            BIND_PAT@[170; 180)\n-              NAME@[170; 180)\n-                IDENT@[170; 180) \"set_parent\"\n-                err: `expected COLON`\n-                err: `expected type`\n-                err: `expected COMMA`\n-                err: `expected value parameter`\n-                err: `expected R_PAREN`\n-                err: `expected a block`\n+              R_PAREN@[154; 155)\n+          WHITESPACE@[155; 160)\n+          R_CURLY@[160; 161)\n+      WHITESPACE@[161; 167)\n+      FN_DEF@[167; 180)\n+        FN_KW@[167; 169)\n+        WHITESPACE@[169; 170)\n+        NAME@[170; 180)\n+          IDENT@[170; 180) \"set_parent\"\n+          err: `expected function arguments`\n+          err: `expected a block`\n       WHITESPACE@[180; 181)\n       R_CURLY@[181; 182)\n   WHITESPACE@[182; 183)"}, {"sha": "7a6c264f6d713389f6c6ba15000ed43acbf2de07", "filename": "crates/libsyntax2/tests/data/parser/err/0021_incomplete_param.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0021_incomplete_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0021_incomplete_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0021_incomplete_param.rs?ref=4798a89a12f40af17174a160f6d6a2f1c53db8d6", "patch": "@@ -0,0 +1,2 @@\n+fn foo(x: i32, y) {\n+}"}, {"sha": "8dcb58ae24574eed519c9b7fe65c0ca068e06620", "filename": "crates/libsyntax2/tests/data/parser/err/0021_incomplete_param.txt", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0021_incomplete_param.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0021_incomplete_param.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0021_incomplete_param.txt?ref=4798a89a12f40af17174a160f6d6a2f1c53db8d6", "patch": "@@ -0,0 +1,34 @@\n+ROOT@[0; 22)\n+  FN_DEF@[0; 21)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 17)\n+      L_PAREN@[6; 7)\n+      PARAM@[7; 13)\n+        BIND_PAT@[7; 8)\n+          NAME@[7; 8)\n+            IDENT@[7; 8) \"x\"\n+        COLON@[8; 9)\n+        WHITESPACE@[9; 10)\n+        PATH_TYPE@[10; 13)\n+          PATH@[10; 13)\n+            PATH_SEGMENT@[10; 13)\n+              NAME_REF@[10; 13)\n+                IDENT@[10; 13) \"i32\"\n+      COMMA@[13; 14)\n+      WHITESPACE@[14; 15)\n+      PARAM@[15; 16)\n+        BIND_PAT@[15; 16)\n+          NAME@[15; 16)\n+            IDENT@[15; 16) \"y\"\n+            err: `expected COLON`\n+            err: `expected type`\n+      R_PAREN@[16; 17)\n+    WHITESPACE@[17; 18)\n+    BLOCK@[18; 21)\n+      L_CURLY@[18; 19)\n+      WHITESPACE@[19; 20)\n+      R_CURLY@[20; 21)\n+  WHITESPACE@[21; 22)"}, {"sha": "898195f6d7535e5798f51d7c6856829e975660e5", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4798a89a12f40af17174a160f6d6a2f1c53db8d6/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=4798a89a12f40af17174a160f6d6a2f1c53db8d6", "patch": "@@ -345,7 +345,8 @@ pub fn handle_completion(\n     let items = items.into_iter()\n         .map(|item| {\n             let mut res = CompletionItem {\n-                label: item.name,\n+                label: item.label,\n+                filter_text: item.lookup,\n                 .. Default::default()\n             };\n             if let Some(snip) = item.snippet {"}]}