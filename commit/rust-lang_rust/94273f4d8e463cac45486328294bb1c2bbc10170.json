{"sha": "94273f4d8e463cac45486328294bb1c2bbc10170", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MjczZjRkOGU0NjNjYWM0NTQ4NjMyODI5NGJiMWMyYmJjMTAxNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-20T08:45:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-20T08:45:55Z"}, "message": "Auto merge of #55114 - oli-obk:fx#map, r=nikomatsakis\n\nDeprecate the `FxHashMap()` and `FxHashSet()` constructor function hack", "tree": {"sha": "de04f7e054e20b25d6b095ea417a42e22720a6f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de04f7e054e20b25d6b095ea417a42e22720a6f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94273f4d8e463cac45486328294bb1c2bbc10170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94273f4d8e463cac45486328294bb1c2bbc10170", "html_url": "https://github.com/rust-lang/rust/commit/94273f4d8e463cac45486328294bb1c2bbc10170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94273f4d8e463cac45486328294bb1c2bbc10170/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89be71a46234a2231b5b3839cd497188e072291f", "url": "https://api.github.com/repos/rust-lang/rust/commits/89be71a46234a2231b5b3839cd497188e072291f", "html_url": "https://github.com/rust-lang/rust/commit/89be71a46234a2231b5b3839cd497188e072291f"}, {"sha": "53e92f4573f30e52a0ea241fb76c6f1ffaabff90", "url": "https://api.github.com/repos/rust-lang/rust/commits/53e92f4573f30e52a0ea241fb76c6f1ffaabff90", "html_url": "https://github.com/rust-lang/rust/commit/53e92f4573f30e52a0ea241fb76c6f1ffaabff90"}], "stats": {"total": 986, "additions": 428, "deletions": 558}, "files": [{"sha": "fd9a1be207280f788e98f0bacfebbe861c40679d", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -169,19 +169,21 @@ impl Ord for Interned<String> {\n     }\n }\n \n-struct TyIntern<T> {\n+struct TyIntern<T: Hash + Clone + Eq> {\n     items: Vec<T>,\n     set: HashMap<T, Interned<T>>,\n }\n \n-impl<T: Hash + Clone + Eq> TyIntern<T> {\n-    fn new() -> TyIntern<T> {\n+impl<T: Hash + Clone + Eq> Default for TyIntern<T> {\n+    fn default() -> Self {\n         TyIntern {\n             items: Vec::new(),\n-            set: HashMap::new(),\n+            set: Default::default(),\n         }\n     }\n+}\n \n+impl<T: Hash + Clone + Eq> TyIntern<T> {\n     fn intern_borrow<B>(&mut self, item: &B) -> Interned<T>\n     where\n         B: Eq + Hash + ToOwned<Owned=T> + ?Sized,\n@@ -212,19 +214,13 @@ impl<T: Hash + Clone + Eq> TyIntern<T> {\n     }\n }\n \n+#[derive(Default)]\n pub struct Interner {\n     strs: Mutex<TyIntern<String>>,\n     paths: Mutex<TyIntern<PathBuf>>,\n }\n \n impl Interner {\n-    fn new() -> Interner {\n-        Interner {\n-            strs: Mutex::new(TyIntern::new()),\n-            paths: Mutex::new(TyIntern::new()),\n-        }\n-    }\n-\n     pub fn intern_str(&self, s: &str) -> Interned<String> {\n         self.strs.lock().unwrap().intern_borrow(s)\n     }\n@@ -238,7 +234,7 @@ impl Interner {\n }\n \n lazy_static! {\n-    pub static ref INTERNER: Interner = Interner::new();\n+    pub static ref INTERNER: Interner = Interner::default();\n }\n \n /// This is essentially a HashMap which allows storing any type in its input and"}, {"sha": "dae05a368fa0649391f713261b31a559ddd46951", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -114,10 +114,9 @@ impl<T> TypedArenaChunk<T> {\n \n const PAGE: usize = 4096;\n \n-impl<T> TypedArena<T> {\n+impl<T> Default for TypedArena<T> {\n     /// Creates a new `TypedArena`.\n-    #[inline]\n-    pub fn new() -> TypedArena<T> {\n+    fn default() -> TypedArena<T> {\n         TypedArena {\n             // We set both `ptr` and `end` to 0 so that the first call to\n             // alloc() will trigger a grow().\n@@ -127,7 +126,9 @@ impl<T> TypedArena<T> {\n             _own: PhantomData,\n         }\n     }\n+}\n \n+impl<T> TypedArena<T> {\n     /// Allocates an object in the `TypedArena`, returning a reference to it.\n     #[inline]\n     pub fn alloc(&self, object: T) -> &mut T {\n@@ -296,15 +297,17 @@ pub struct DroplessArena {\n \n unsafe impl Send for DroplessArena {}\n \n-impl DroplessArena {\n-    pub fn new() -> DroplessArena {\n+impl Default for DroplessArena {\n+    fn default() -> DroplessArena {\n         DroplessArena {\n             ptr: Cell::new(0 as *mut u8),\n             end: Cell::new(0 as *mut u8),\n-            chunks: RefCell::new(vec![]),\n+            chunks: Default::default(),\n         }\n     }\n+}\n \n+impl DroplessArena {\n     pub fn in_arena<T: ?Sized>(&self, ptr: *const T) -> bool {\n         let ptr = ptr as *const u8 as *mut u8;\n         for chunk in &*self.chunks.borrow() {\n@@ -419,18 +422,13 @@ impl DroplessArena {\n     }\n }\n \n+#[derive(Default)]\n+// FIXME(@Zoxc): this type is entirely unused in rustc\n pub struct SyncTypedArena<T> {\n     lock: MTLock<TypedArena<T>>,\n }\n \n impl<T> SyncTypedArena<T> {\n-    #[inline(always)]\n-    pub fn new() -> SyncTypedArena<T> {\n-        SyncTypedArena {\n-            lock: MTLock::new(TypedArena::new())\n-        }\n-    }\n-\n     #[inline(always)]\n     pub fn alloc(&self, object: T) -> &mut T {\n         // Extend the lifetime of the result since it's limited to the lock guard\n@@ -452,18 +450,12 @@ impl<T> SyncTypedArena<T> {\n     }\n }\n \n+#[derive(Default)]\n pub struct SyncDroplessArena {\n     lock: MTLock<DroplessArena>,\n }\n \n impl SyncDroplessArena {\n-    #[inline(always)]\n-    pub fn new() -> SyncDroplessArena {\n-        SyncDroplessArena {\n-            lock: MTLock::new(DroplessArena::new())\n-        }\n-    }\n-\n     #[inline(always)]\n     pub fn in_arena<T: ?Sized>(&self, ptr: *const T) -> bool {\n         self.lock.lock().in_arena(ptr)\n@@ -508,7 +500,7 @@ mod tests {\n \n     #[test]\n     pub fn test_unused() {\n-        let arena: TypedArena<Point> = TypedArena::new();\n+        let arena: TypedArena<Point> = TypedArena::default();\n         assert!(arena.chunks.borrow().is_empty());\n     }\n \n@@ -546,7 +538,7 @@ mod tests {\n             }\n         }\n \n-        let arena = Wrap(TypedArena::new());\n+        let arena = Wrap(TypedArena::default());\n \n         let result = arena.alloc_outer(|| Outer {\n             inner: arena.alloc_inner(|| Inner { value: 10 }),\n@@ -557,15 +549,15 @@ mod tests {\n \n     #[test]\n     pub fn test_copy() {\n-        let arena = TypedArena::new();\n+        let arena = TypedArena::default();\n         for _ in 0..100000 {\n             arena.alloc(Point { x: 1, y: 2, z: 3 });\n         }\n     }\n \n     #[bench]\n     pub fn bench_copy(b: &mut Bencher) {\n-        let arena = TypedArena::new();\n+        let arena = TypedArena::default();\n         b.iter(|| arena.alloc(Point { x: 1, y: 2, z: 3 }))\n     }\n \n@@ -584,7 +576,7 @@ mod tests {\n \n     #[test]\n     pub fn test_noncopy() {\n-        let arena = TypedArena::new();\n+        let arena = TypedArena::default();\n         for _ in 0..100000 {\n             arena.alloc(Noncopy {\n                 string: \"hello world\".to_string(),\n@@ -595,15 +587,15 @@ mod tests {\n \n     #[test]\n     pub fn test_typed_arena_zero_sized() {\n-        let arena = TypedArena::new();\n+        let arena = TypedArena::default();\n         for _ in 0..100000 {\n             arena.alloc(());\n         }\n     }\n \n     #[test]\n     pub fn test_typed_arena_clear() {\n-        let mut arena = TypedArena::new();\n+        let mut arena = TypedArena::default();\n         for _ in 0..10 {\n             arena.clear();\n             for _ in 0..10000 {\n@@ -628,7 +620,7 @@ mod tests {\n     fn test_typed_arena_drop_count() {\n         let counter = Cell::new(0);\n         {\n-            let arena: TypedArena<DropCounter> = TypedArena::new();\n+            let arena: TypedArena<DropCounter> = TypedArena::default();\n             for _ in 0..100 {\n                 // Allocate something with drop glue to make sure it doesn't leak.\n                 arena.alloc(DropCounter { count: &counter });\n@@ -640,7 +632,7 @@ mod tests {\n     #[test]\n     fn test_typed_arena_drop_on_clear() {\n         let counter = Cell::new(0);\n-        let mut arena: TypedArena<DropCounter> = TypedArena::new();\n+        let mut arena: TypedArena<DropCounter> = TypedArena::default();\n         for i in 0..10 {\n             for _ in 0..100 {\n                 // Allocate something with drop glue to make sure it doesn't leak.\n@@ -667,7 +659,7 @@ mod tests {\n     fn test_typed_arena_drop_small_count() {\n         DROP_COUNTER.with(|c| c.set(0));\n         {\n-            let arena: TypedArena<SmallDroppable> = TypedArena::new();\n+            let arena: TypedArena<SmallDroppable> = TypedArena::default();\n             for _ in 0..100 {\n                 // Allocate something with drop glue to make sure it doesn't leak.\n                 arena.alloc(SmallDroppable);\n@@ -679,7 +671,7 @@ mod tests {\n \n     #[bench]\n     pub fn bench_noncopy(b: &mut Bencher) {\n-        let arena = TypedArena::new();\n+        let arena = TypedArena::default();\n         b.iter(|| {\n             arena.alloc(Noncopy {\n                 string: \"hello world\".to_string(),"}, {"sha": "99fc020bbe44f67a08df38ad061da35f41c0bef9", "filename": "src/librustc/dep_graph/cgu_reuse_tracker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -51,8 +51,8 @@ pub struct CguReuseTracker {\n impl CguReuseTracker {\n     pub fn new() -> CguReuseTracker {\n         let data = TrackerData {\n-            actual_reuse: FxHashMap(),\n-            expected_reuse: FxHashMap(),\n+            actual_reuse: Default::default(),\n+            expected_reuse: Default::default(),\n         };\n \n         CguReuseTracker {"}, {"sha": "a674b5df6395cdb1a3bda01a95d8c9ceb9fecb39", "filename": "src/librustc/dep_graph/dep_tracking_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -36,7 +36,7 @@ impl<M: DepTrackingMapConfig> DepTrackingMap<M> {\n         DepTrackingMap {\n             phantom: PhantomData,\n             graph,\n-            map: FxHashMap(),\n+            map: Default::default(),\n         }\n     }\n }"}, {"sha": "ddc5676c74eb55699c554f679729208db16829cb", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -101,11 +101,11 @@ impl DepGraph {\n         DepGraph {\n             data: Some(Lrc::new(DepGraphData {\n                 previous_work_products: prev_work_products,\n-                dep_node_debug: Lock::new(FxHashMap()),\n+                dep_node_debug: Lock::new(Default::default()),\n                 current: Lock::new(CurrentDepGraph::new()),\n                 previous: prev_graph,\n                 colors: Lock::new(DepNodeColorMap::new(prev_graph_node_count)),\n-                loaded_from_cache: Lock::new(FxHashMap()),\n+                loaded_from_cache: Lock::new(Default::default()),\n             })),\n             fingerprints: Lrc::new(Lock::new(fingerprints)),\n         }\n@@ -209,7 +209,7 @@ impl DepGraph {\n             |key| OpenTask::Regular(Lock::new(RegularOpenTask {\n                 node: key,\n                 reads: SmallVec::new(),\n-                read_set: FxHashSet(),\n+                read_set: Default::default(),\n             })),\n             |data, key, task| data.borrow_mut().complete_task(key, task))\n     }\n@@ -353,7 +353,7 @@ impl DepGraph {\n             let (result, open_task) = ty::tls::with_context(|icx| {\n                 let task = OpenTask::Anon(Lock::new(AnonOpenTask {\n                     reads: SmallVec::new(),\n-                    read_set: FxHashSet(),\n+                    read_set: Default::default(),\n                 }));\n \n                 let r = {\n@@ -937,7 +937,7 @@ impl CurrentDepGraph {\n         CurrentDepGraph {\n             nodes: IndexVec::new(),\n             edges: IndexVec::new(),\n-            node_to_node_index: FxHashMap(),\n+            node_to_node_index: Default::default(),\n             anon_id_seed: stable_hasher.finish(),\n             forbidden_edge,\n             total_read_count: 0,"}, {"sha": "ebc50f4afb8c8423c0770092d9e6eb2a11637a5a", "filename": "src/librustc/dep_graph/prev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fprev.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::fx::FxHashMap;\n use super::dep_node::DepNode;\n use super::serialized::{SerializedDepGraph, SerializedDepNodeIndex};\n \n-#[derive(Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Debug, RustcEncodable, RustcDecodable, Default)]\n pub struct PreviousDepGraph {\n     data: SerializedDepGraph,\n     index: FxHashMap<DepNode, SerializedDepNodeIndex>,"}, {"sha": "4aec2af887c88c813c94e97f2e6446f1649827fa", "filename": "src/librustc/dep_graph/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fdep_graph%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fdep_graph%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fquery.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -25,7 +25,7 @@ impl DepGraphQuery {\n                edges: &[(DepNode, DepNode)])\n                -> DepGraphQuery {\n         let mut graph = Graph::with_capacity(nodes.len(), edges.len());\n-        let mut indices = FxHashMap();\n+        let mut indices = FxHashMap::default();\n         for node in nodes {\n             indices.insert(node.clone(), graph.add_node(node.clone()));\n         }"}, {"sha": "0c6c224fa914c9009a5b1546d0cc125301a09337", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -19,7 +19,7 @@ newtype_index! {\n }\n \n /// Data for use when recompiling the **current crate**.\n-#[derive(Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Debug, RustcEncodable, RustcDecodable, Default)]\n pub struct SerializedDepGraph {\n     /// The set of all DepNodes in the graph\n     pub nodes: IndexVec<SerializedDepNodeIndex, DepNode>,\n@@ -36,16 +36,6 @@ pub struct SerializedDepGraph {\n }\n \n impl SerializedDepGraph {\n-\n-    pub fn new() -> SerializedDepGraph {\n-        SerializedDepGraph {\n-            nodes: IndexVec::new(),\n-            fingerprints: IndexVec::new(),\n-            edge_list_indices: IndexVec::new(),\n-            edge_list_data: Vec::new(),\n-        }\n-    }\n-\n     #[inline]\n     pub fn edge_targets_from(&self,\n                              source: SerializedDepNodeIndex)"}, {"sha": "dd6891540868db318949414b00067f531430577d", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -421,10 +421,10 @@ impl Definitions {\n             node_to_def_index: NodeMap(),\n             def_index_to_node: [vec![], vec![]],\n             node_to_hir_id: IndexVec::new(),\n-            parent_modules_of_macro_defs: FxHashMap(),\n-            expansions_that_defined: FxHashMap(),\n-            next_disambiguator: FxHashMap(),\n-            def_index_to_span: FxHashMap(),\n+            parent_modules_of_macro_defs: Default::default(),\n+            expansions_that_defined: Default::default(),\n+            next_disambiguator: Default::default(),\n+            def_index_to_span: Default::default(),\n         }\n     }\n "}, {"sha": "087efbd4a22dd5231087b502c6e79bf420e941a8", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'hir: 'a> OuterVisitor<'a, 'hir> {\n         HirIdValidator {\n             hir_map,\n             owner_def_index: None,\n-            hir_ids_seen: FxHashMap(),\n+            hir_ids_seen: Default::default(),\n             errors: Vec::new(),\n         }\n     }"}, {"sha": "1c7c1b854da4545a45b4c035c3a49ba91faa68b5", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -370,7 +370,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for Span {\n             // recursing every time.\n             thread_local! {\n                 static CACHE: RefCell<FxHashMap<hygiene::Mark, u64>> =\n-                    RefCell::new(FxHashMap());\n+                    RefCell::new(Default::default());\n             }\n \n             let sub_hash: u64 = CACHE.with(|cache| {"}, {"sha": "2a3d40c0e3fc1f94abf719f60b12d62f1f537225", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -32,7 +32,7 @@ for &'gcx ty::List<T>\n                                           hasher: &mut StableHasher<W>) {\n         thread_local! {\n             static CACHE: RefCell<FxHashMap<(usize, usize), Fingerprint>> =\n-                RefCell::new(FxHashMap());\n+                RefCell::new(Default::default());\n         }\n \n         let hash = CACHE.with(|cache| {"}, {"sha": "c7785d831717376fe7b9c03d4f8cf2249245efcc", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'gcx, 'tcx> TypeFreshener<'a, 'gcx, 'tcx> {\n         TypeFreshener {\n             infcx,\n             freshen_count: 0,\n-            freshen_map: FxHashMap(),\n+            freshen_map: Default::default(),\n         }\n     }\n "}, {"sha": "d85a3e84f857a85584931db18333814ac0e3f1c5", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -553,7 +553,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let escaping_types =\n             self.type_variables.borrow_mut().types_escaping_snapshot(&snapshot.type_snapshot);\n \n-        let mut escaping_region_vars = FxHashSet();\n+        let mut escaping_region_vars = FxHashSet::default();\n         for ty in &escaping_types {\n             self.tcx.collect_regions(ty, &mut escaping_region_vars);\n         }"}, {"sha": "3b92d032bdc5a07716adbd662b1f96aab1cfdc08", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -143,7 +143,7 @@ impl<'a, 'gcx, 'tcx> ConstraintGraph<'a, 'gcx, 'tcx> {\n            map: &'a ConstraintMap<'tcx>)\n            -> ConstraintGraph<'a, 'gcx, 'tcx> {\n         let mut i = 0;\n-        let mut node_ids = FxHashMap();\n+        let mut node_ids = FxHashMap::default();\n         {\n             let mut add_node = |node| {\n                 if let Vacant(e) = node_ids.entry(node) {\n@@ -230,7 +230,7 @@ impl<'a, 'gcx, 'tcx> dot::GraphWalk<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n     type Node = Node;\n     type Edge = Edge<'tcx>;\n     fn nodes(&self) -> dot::Nodes<'_, Node> {\n-        let mut set = FxHashSet();\n+        let mut set = FxHashSet::default();\n         for node in self.node_ids.keys() {\n             set.insert(*node);\n         }"}, {"sha": "8f28e9a320df24854af4fb9088387a458310da74", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -614,7 +614,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n             dup_found: bool,\n         }\n         let mut state = WalkState {\n-            set: FxHashSet(),\n+            set: Default::default(),\n             stack: vec![orig_node_idx],\n             result: Vec::new(),\n             dup_found: false,"}, {"sha": "f5513acecf9e7b23fbd518455abbe9aa3dac5b50", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -478,7 +478,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n     pub fn infer_ctxt(self) -> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n         InferCtxtBuilder {\n             global_tcx: self,\n-            arena: SyncDroplessArena::new(),\n+            arena: SyncDroplessArena::default(),\n             fresh_tables: None,\n         }\n     }\n@@ -526,15 +526,15 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             f(InferCtxt {\n                 tcx,\n                 in_progress_tables,\n-                projection_cache: RefCell::new(traits::ProjectionCache::new()),\n+                projection_cache: Default::default(),\n                 type_variables: RefCell::new(type_variable::TypeVariableTable::new()),\n                 int_unification_table: RefCell::new(ut::UnificationTable::new()),\n                 float_unification_table: RefCell::new(ut::UnificationTable::new()),\n                 region_constraints: RefCell::new(Some(RegionConstraintCollector::new())),\n                 lexical_region_resolutions: RefCell::new(None),\n-                selection_cache: traits::SelectionCache::new(),\n-                evaluation_cache: traits::EvaluationCache::new(),\n-                reported_trait_errors: RefCell::new(FxHashMap()),\n+                selection_cache: Default::default(),\n+                evaluation_cache: Default::default(),\n+                reported_trait_errors: Default::default(),\n                 tainted_by_errors_flag: Cell::new(false),\n                 err_count_on_creation: tcx.sess.err_count(),\n                 in_snapshot: Cell::new(false),"}, {"sha": "726bb388252f95f1f9435ae51775b47bdf6eee90", "filename": "src/librustc/infer/outlives/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -81,8 +81,8 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> OutlivesEnvironment<'tcx> {\n     pub fn new(param_env: ty::ParamEnv<'tcx>) -> Self {\n         let mut env = OutlivesEnvironment {\n             param_env,\n-            free_region_map: FreeRegionMap::new(),\n-            region_bound_pairs_map: FxHashMap::default(),\n+            free_region_map: Default::default(),\n+            region_bound_pairs_map: Default::default(),\n             region_bound_pairs_accum: vec![],\n         };\n "}, {"sha": "588a00eb503613af0709ba9036371e428c5bd30e", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -11,7 +11,7 @@\n use ty::{self, Lift, TyCtxt, Region};\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default)]\n pub struct FreeRegionMap<'tcx> {\n     // Stores the relation `a < b`, where `a` and `b` are regions.\n     //\n@@ -21,10 +21,6 @@ pub struct FreeRegionMap<'tcx> {\n }\n \n impl<'tcx> FreeRegionMap<'tcx> {\n-    pub fn new() -> Self {\n-        FreeRegionMap { relation: TransitiveRelation::new() }\n-    }\n-\n     pub fn is_empty(&self) -> bool {\n         self.relation.is_empty()\n     }"}, {"sha": "96278e5140c8a056f947b9cfd2354d17f224d83c", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -345,8 +345,8 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         RegionConstraintCollector {\n             var_infos: VarInfos::default(),\n             data: RegionConstraintData::default(),\n-            lubs: FxHashMap(),\n-            glbs: FxHashMap(),\n+            lubs: Default::default(),\n+            glbs: Default::default(),\n             bound_count: 0,\n             undo_log: Vec::new(),\n             unification_table: ut::UnificationTable::new(),"}, {"sha": "ef7365276f6d2f07cd18a2fcf3ff6437014006c2", "filename": "src/librustc/infer/region_constraints/taint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Fregion_constraints%2Ftaint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Finfer%2Fregion_constraints%2Ftaint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Ftaint.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -18,7 +18,7 @@ pub(super) struct TaintSet<'tcx> {\n \n impl<'tcx> TaintSet<'tcx> {\n     pub(super) fn new(directions: TaintDirections, initial_region: ty::Region<'tcx>) -> Self {\n-        let mut regions = FxHashSet();\n+        let mut regions = FxHashSet::default();\n         regions.insert(initial_region);\n         TaintSet {\n             directions: directions,"}, {"sha": "7e2532bb1c4e868aef9508d8db2e9b307d253a44", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -159,9 +159,9 @@ impl LintStore {\n             pre_expansion_passes: Some(vec![]),\n             early_passes: Some(vec![]),\n             late_passes: Some(vec![]),\n-            by_name: FxHashMap(),\n-            future_incompatible: FxHashMap(),\n-            lint_groups: FxHashMap(),\n+            by_name: Default::default(),\n+            future_incompatible: Default::default(),\n+            lint_groups: Default::default(),\n         }\n     }\n "}, {"sha": "475ca8da6b93c2a51e70c344af3527cc0bea2720", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -59,7 +59,7 @@ impl LintLevelSets {\n \n     fn process_command_line(&mut self, sess: &Session) {\n         let store = sess.lint_store.borrow();\n-        let mut specs = FxHashMap();\n+        let mut specs = FxHashMap::default();\n         self.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n@@ -175,7 +175,7 @@ impl<'a> LintLevelsBuilder<'a> {\n             sess,\n             sets,\n             cur: 0,\n-            id_to_set: FxHashMap(),\n+            id_to_set: Default::default(),\n             warn_about_weird_lints: sess.buffered_lints.borrow().is_some(),\n         }\n     }\n@@ -195,7 +195,7 @@ impl<'a> LintLevelsBuilder<'a> {\n     ///\n     /// Don't forget to call `pop`!\n     pub fn push(&mut self, attrs: &[ast::Attribute]) -> BuilderPush {\n-        let mut specs = FxHashMap();\n+        let mut specs = FxHashMap::default();\n         let store = self.sess.lint_store.borrow();\n         let sess = self.sess;\n         let bad_attr = |span| {"}, {"sha": "dc5f736172503be4805b680731c79dd72105aac1", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -50,7 +50,7 @@ struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n     worklist: Vec<ast::NodeId>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n-    live_symbols: Box<FxHashSet<ast::NodeId>>,\n+    live_symbols: FxHashSet<ast::NodeId>,\n     repr_has_repr_c: bool,\n     in_pat: bool,\n     inherited_pub_visibility: bool,\n@@ -131,7 +131,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn mark_live_symbols(&mut self) {\n-        let mut scanned = FxHashSet();\n+        let mut scanned = FxHashSet::default();\n         while let Some(id) = self.worklist.pop() {\n             if !scanned.insert(id) {\n                 continue\n@@ -423,13 +423,13 @@ fn create_and_seed_worklist<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn find_live<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        access_levels: &privacy::AccessLevels,\n                        krate: &hir::Crate)\n-                       -> Box<FxHashSet<ast::NodeId>> {\n+                       -> FxHashSet<ast::NodeId> {\n     let worklist = create_and_seed_worklist(tcx, access_levels, krate);\n     let mut symbol_visitor = MarkSymbolVisitor {\n         worklist,\n         tcx,\n         tables: &ty::TypeckTables::empty(None),\n-        live_symbols: box FxHashSet(),\n+        live_symbols: Default::default(),\n         repr_has_repr_c: false,\n         in_pat: false,\n         inherited_pub_visibility: false,\n@@ -450,7 +450,7 @@ fn get_struct_ctor_id(item: &hir::Item) -> Option<ast::NodeId> {\n \n struct DeadVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    live_symbols: Box<FxHashSet<ast::NodeId>>,\n+    live_symbols: FxHashSet<ast::NodeId>,\n }\n \n impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {"}, {"sha": "8b5c6d147d7819bf2c6528a93a272651eb8b050f", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -94,7 +94,7 @@ pub enum Linkage {\n \n pub fn calculate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let sess = &tcx.sess;\n-    let mut fmts = FxHashMap();\n+    let mut fmts = FxHashMap::default();\n     for &ty in sess.crate_types.borrow().iter() {\n         let linkage = calculate_type(tcx, ty);\n         verify_ok(tcx, &linkage);\n@@ -170,7 +170,7 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    let mut formats = FxHashMap();\n+    let mut formats = FxHashMap::default();\n \n     // Sweep all crates for found dylibs. Add all dylibs, as well as their\n     // dependencies, ensuring there are no conflicts. The only valid case for a"}, {"sha": "45de958e72eba419259b67436915d0e1a2b41d71", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -155,7 +155,7 @@ impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'a, 'tcx> {\n \n impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LanguageItemCollector<'a, 'tcx> {\n-        let mut item_refs = FxHashMap();\n+        let mut item_refs = FxHashMap::default();\n \n         $( item_refs.insert($name, ($variant as usize, $target)); )*\n "}, {"sha": "7d65d412e01d7dd41b07c9f9f1321f6065dbe746", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -31,8 +31,8 @@ pub struct LibFeatures {\n impl LibFeatures {\n     fn new() -> LibFeatures {\n         LibFeatures {\n-            stable: FxHashMap(),\n-            unstable: FxHashSet(),\n+            stable: Default::default(),\n+            unstable: Default::default(),\n         }\n     }\n "}, {"sha": "8c3a3fb6dc1d82b30d50a295cbf4999696f8ebd6", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n \n     // Step 2: Mark all symbols that the symbols on the worklist touch.\n     fn propagate(&mut self) {\n-        let mut scanned = FxHashSet();\n+        let mut scanned = FxHashSet::default();\n         while let Some(search_item) = self.worklist.pop() {\n             if !scanned.insert(search_item) {\n                 continue"}, {"sha": "d00fbdeca21aa4ff78df58a720bd7a1c68789b2d", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -1257,7 +1257,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n \n         let outer_ec = mem::replace(&mut self.expr_and_pat_count, 0);\n         let outer_cx = self.cx;\n-        let outer_ts = mem::replace(&mut self.terminating_scopes, FxHashSet());\n+        let outer_ts = mem::replace(&mut self.terminating_scopes, FxHashSet::default());\n         self.terminating_scopes.insert(body.value.hir_id.local_id);\n \n         if let Some(root_id) = self.cx.root_id {\n@@ -1347,7 +1347,7 @@ fn region_scope_tree<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n                 parent: None,\n                 var_parent: None,\n             },\n-            terminating_scopes: FxHashSet(),\n+            terminating_scopes: Default::default(),\n         };\n \n         let body = tcx.hir.body(body_id);"}, {"sha": "98e80d333c1c8cf669801017da4330eec96f1eba", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -218,6 +218,7 @@ struct NamedRegionMap {\n }\n \n /// See `NamedRegionMap`.\n+#[derive(Default)]\n pub struct ResolveLifetimes {\n     defs: FxHashMap<LocalDefId, Lrc<FxHashMap<ItemLocalId, Region>>>,\n     late_bound: FxHashMap<LocalDefId, Lrc<FxHashSet<ItemLocalId>>>,\n@@ -394,11 +395,7 @@ fn resolve_lifetimes<'tcx>(\n \n     let named_region_map = krate(tcx);\n \n-    let mut rl = ResolveLifetimes {\n-        defs: FxHashMap(),\n-        late_bound: FxHashMap(),\n-        object_lifetime_defaults: FxHashMap(),\n-    };\n+    let mut rl = ResolveLifetimes::default();\n \n     for (k, v) in named_region_map.defs {\n         let hir_id = tcx.hir.node_to_hir_id(k);\n@@ -711,7 +708,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 debug!(\"visit_ty: index = {}\", index);\n \n                 let mut elision = None;\n-                let mut lifetimes = FxHashMap();\n+                let mut lifetimes = FxHashMap::default();\n                 let mut type_count = 0;\n                 for param in &generics.params {\n                     match param.kind {\n@@ -2084,7 +2081,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     map: self.map,\n                     outer_index: ty::INNERMOST,\n                     have_bound_regions: false,\n-                    lifetimes: FxHashSet(),\n+                    lifetimes: Default::default(),\n                 };\n                 gather.visit_ty(input);\n \n@@ -2614,15 +2611,13 @@ fn insert_late_bound_lifetimes(\n         decl, generics\n     );\n \n-    let mut constrained_by_input = ConstrainedCollector {\n-        regions: FxHashSet(),\n-    };\n+    let mut constrained_by_input = ConstrainedCollector::default();\n     for arg_ty in &decl.inputs {\n         constrained_by_input.visit_ty(arg_ty);\n     }\n \n     let mut appears_in_output = AllCollector {\n-        regions: FxHashSet(),\n+        regions: Default::default(),\n     };\n     intravisit::walk_fn_ret_ty(&mut appears_in_output, &decl.output);\n \n@@ -2636,7 +2631,7 @@ fn insert_late_bound_lifetimes(\n     // Subtle point: because we disallow nested bindings, we can just\n     // ignore binders here and scrape up all names we see.\n     let mut appears_in_where_clause = AllCollector {\n-        regions: FxHashSet(),\n+        regions: Default::default(),\n     };\n     appears_in_where_clause.visit_generics(generics);\n \n@@ -2693,6 +2688,7 @@ fn insert_late_bound_lifetimes(\n \n     return;\n \n+    #[derive(Default)]\n     struct ConstrainedCollector {\n         regions: FxHashSet<hir::LifetimeName>,\n     }"}, {"sha": "ba79cf66d08480d3e6fdd9ec0cec1a3d201d52ad", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -401,13 +401,13 @@ impl<'a, 'tcx> Index<'tcx> {\n         let is_staged_api =\n             tcx.sess.opts.debugging_opts.force_unstable_if_unmarked ||\n             tcx.features().staged_api;\n-        let mut staged_api = FxHashMap();\n+        let mut staged_api = FxHashMap::default();\n         staged_api.insert(LOCAL_CRATE, is_staged_api);\n         let mut index = Index {\n             staged_api,\n-            stab_map: FxHashMap(),\n-            depr_map: FxHashMap(),\n-            active_features: FxHashSet(),\n+            stab_map: Default::default(),\n+            depr_map: Default::default(),\n+            active_features: Default::default(),\n         };\n \n         let ref active_lib_features = tcx.features().declared_lib_features;\n@@ -814,7 +814,7 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     }\n \n     let declared_lang_features = &tcx.features().declared_lang_features;\n-    let mut lang_features = FxHashSet();\n+    let mut lang_features = FxHashSet::default();\n     for &(feature, span, since) in declared_lang_features {\n         if let Some(since) = since {\n             // Warn if the user has enabled an already-stable lang feature.\n@@ -828,7 +828,7 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     }\n \n     let declared_lib_features = &tcx.features().declared_lib_features;\n-    let mut remaining_lib_features = FxHashMap();\n+    let mut remaining_lib_features = FxHashMap::default();\n     for (feature, span) in declared_lib_features {\n         if remaining_lib_features.contains_key(&feature) {\n             // Warn if the user enables a lib feature multiple times."}, {"sha": "8c8073080aaf8cbf5ba0cebd7dd91137329ee794", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -453,8 +453,8 @@ pub struct AllocMap<'tcx, M> {\n impl<'tcx, M: fmt::Debug + Eq + Hash + Clone> AllocMap<'tcx, M> {\n     pub fn new() -> Self {\n         AllocMap {\n-            id_to_type: FxHashMap(),\n-            type_interner: FxHashMap(),\n+            id_to_type: Default::default(),\n+            type_interner: Default::default(),\n             next_id: AllocId(0),\n         }\n     }"}, {"sha": "ff2bf3d78070d4b60d19416982bfd92ff300e8ce", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -121,7 +121,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n     pub fn new(name: InternedString) -> CodegenUnit<'tcx> {\n         CodegenUnit {\n             name: name,\n-            items: FxHashMap(),\n+            items: Default::default(),\n             size_estimate: None,\n         }\n     }\n@@ -251,7 +251,7 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> CodegenUnitNameBuilder<'a, 'gcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n         CodegenUnitNameBuilder {\n             tcx,\n-            cache: FxHashMap(),\n+            cache: Default::default(),\n         }\n     }\n "}, {"sha": "b1dcfdfcda03891360d7a828b78c993cf9aed952", "filename": "src/librustc/session/code_stats.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fcode_stats.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -54,14 +54,12 @@ pub struct TypeSizeInfo {\n     pub variants: Vec<VariantInfo>,\n }\n \n-#[derive(PartialEq, Eq, Debug)]\n+#[derive(PartialEq, Eq, Debug, Default)]\n pub struct CodeStats {\n     type_sizes: FxHashSet<TypeSizeInfo>,\n }\n \n impl CodeStats {\n-    pub fn new() -> Self { CodeStats { type_sizes: FxHashSet() } }\n-\n     pub fn record_type_size<S: ToString>(&mut self,\n                                          kind: DataTypeKind,\n                                          type_desc: S,"}, {"sha": "a17825a877d88cb45ecaba6e31d2cc6a15e0860a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -1147,7 +1147,7 @@ pub fn build_session_(\n         working_dir,\n         lint_store: RwLock::new(lint::LintStore::new()),\n         buffered_lints: Lock::new(Some(lint::LintBuffer::new())),\n-        one_time_diagnostics: Lock::new(FxHashSet()),\n+        one_time_diagnostics: Default::default(),\n         plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n         plugin_attributes: OneThread::new(RefCell::new(Vec::new())),\n         crate_types: Once::new(),\n@@ -1173,7 +1173,7 @@ pub fn build_session_(\n             normalize_ty_after_erasing_regions: AtomicUsize::new(0),\n             normalize_projection_ty: AtomicUsize::new(0),\n         },\n-        code_stats: Lock::new(CodeStats::new()),\n+        code_stats: Default::default(),\n         optimization_fuel_crate,\n         optimization_fuel_limit,\n         print_fuel_crate,\n@@ -1207,7 +1207,7 @@ pub fn build_session_(\n         },\n         has_global_allocator: Once::new(),\n         has_panic_handler: Once::new(),\n-        driver_lint_caps: FxHashMap(),\n+        driver_lint_caps: Default::default(),\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "06d548909b549ec7048ee04d172907fb2cea97d5", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         }\n \n         return tcx.infer_ctxt().enter(|mut infcx| {\n-            let mut fresh_preds = FxHashSet();\n+            let mut fresh_preds = FxHashSet::default();\n \n             // Due to the way projections are handled by SelectionContext, we need to run\n             // evaluate_predicates twice: once on the original param env, and once on the result of\n@@ -311,7 +311,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n \n         let mut select = SelectionContext::new(&infcx);\n \n-        let mut already_visited = FxHashSet();\n+        let mut already_visited = FxHashSet::default();\n         let mut predicates = VecDeque::new();\n         predicates.push_back(ty::Binder::bind(ty::TraitPredicate {\n             trait_ref: ty::TraitRef {\n@@ -508,8 +508,8 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         &self,\n         regions: &RegionConstraintData<'cx>,\n     ) -> FxHashMap<ty::RegionVid, ty::Region<'cx>> {\n-        let mut vid_map: FxHashMap<RegionTarget<'cx>, RegionDeps<'cx>> = FxHashMap();\n-        let mut finished_map = FxHashMap();\n+        let mut vid_map: FxHashMap<RegionTarget<'cx>, RegionDeps<'cx>> = FxHashMap::default();\n+        let mut finished_map = FxHashMap::default();\n \n         for constraint in regions.constraints.keys() {\n             match constraint {"}, {"sha": "28c59d65becf24ecc925e526a05becc5aff5cf39", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -1258,7 +1258,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             trait_str);\n         err.span_label(span, format!(\"the trait `{}` cannot be made into an object\", trait_str));\n \n-        let mut reported_violations = FxHashSet();\n+        let mut reported_violations = FxHashSet::default();\n         for violation in violations {\n             if reported_violations.insert(violation.clone()) {\n                 err.note(&violation.error_msg());\n@@ -1404,7 +1404,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n             let cleaned_pred = pred.fold_with(&mut ParamToVarFolder {\n                 infcx: self,\n-                var_map: FxHashMap()\n+                var_map: Default::default()\n             });\n \n             let cleaned_pred = super::project::normalize("}, {"sha": "8bceebb23950c425797d347ca8607304417a74a7", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -48,7 +48,7 @@ pub use self::on_unimplemented::{OnUnimplementedDirective, OnUnimplementedNote};\n pub use self::select::{EvaluationCache, SelectionContext, SelectionCache};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::{OverlapError, specialization_graph, translate_substs};\n-pub use self::specialize::{SpecializesCache, find_associated_item};\n+pub use self::specialize::find_associated_item;\n pub use self::engine::{TraitEngine, TraitEngineExt};\n pub use self::util::elaborate_predicates;\n pub use self::util::supertraits;"}, {"sha": "b29ee8f7cdce4ad9a76477ffa947ef4f4ad7434f", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -1601,6 +1601,7 @@ fn assoc_ty_def<'cx, 'gcx, 'tcx>(\n /// FIXME: we probably also want some sort of cross-infcx cache here to\n /// reduce the amount of duplication. Let's see what we get with the Chalk\n /// reforms.\n+#[derive(Default)]\n pub struct ProjectionCache<'tcx> {\n     map: SnapshotMap<ProjectionCacheKey<'tcx>, ProjectionCacheEntry<'tcx>>,\n }\n@@ -1643,12 +1644,6 @@ pub struct ProjectionCacheSnapshot {\n }\n \n impl<'tcx> ProjectionCache<'tcx> {\n-    pub fn new() -> Self {\n-        ProjectionCache {\n-            map: SnapshotMap::new()\n-        }\n-    }\n-\n     pub fn clear(&mut self) {\n         self.map.clear();\n     }"}, {"sha": "39c623de677d3872d05af3cce8a4039420645969", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -166,7 +166,7 @@ struct TraitObligationStack<'prev, 'tcx: 'prev> {\n     previous: TraitObligationStackList<'prev, 'tcx>,\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Default)]\n pub struct SelectionCache<'tcx> {\n     hashmap: Lock<\n         FxHashMap<ty::TraitRef<'tcx>, WithDepNode<SelectionResult<'tcx, SelectionCandidate<'tcx>>>>,\n@@ -444,7 +444,7 @@ impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n     }\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Default)]\n pub struct EvaluationCache<'tcx> {\n     hashmap: Lock<FxHashMap<ty::PolyTraitRef<'tcx>, WithDepNode<EvaluationResult>>>,\n }\n@@ -3742,7 +3742,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n         } else {\n             // Three or more elements. Use a general deduplication process.\n-            let mut seen = FxHashSet();\n+            let mut seen = FxHashSet::default();\n             predicates.retain(|i| seen.insert(i.clone()));\n         }\n         self.infcx()\n@@ -3789,26 +3789,16 @@ impl<'tcx> TraitObligation<'tcx> {\n }\n \n impl<'tcx> SelectionCache<'tcx> {\n-    pub fn new() -> SelectionCache<'tcx> {\n-        SelectionCache {\n-            hashmap: Lock::new(FxHashMap()),\n-        }\n-    }\n-\n+    /// Actually frees the underlying memory in contrast to what stdlib containers do on `clear`\n     pub fn clear(&self) {\n-        *self.hashmap.borrow_mut() = FxHashMap()\n+        *self.hashmap.borrow_mut() = Default::default();\n     }\n }\n \n impl<'tcx> EvaluationCache<'tcx> {\n-    pub fn new() -> EvaluationCache<'tcx> {\n-        EvaluationCache {\n-            hashmap: Lock::new(FxHashMap()),\n-        }\n-    }\n-\n+    /// Actually frees the underlying memory in contrast to what stdlib containers do on `clear`\n     pub fn clear(&self) {\n-        *self.hashmap.borrow_mut() = FxHashMap()\n+        *self.hashmap.borrow_mut() = Default::default();\n     }\n }\n "}, {"sha": "0ce1d8f8227553ec5e3d312fa4ca6eda15635c66", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -22,7 +22,7 @@\n use super::{SelectionContext, FulfillmentContext};\n use super::util::impl_trait_ref_and_oblig;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use ty::subst::{Subst, Substs};\n@@ -284,26 +284,6 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     })\n }\n \n-pub struct SpecializesCache {\n-    map: FxHashMap<(DefId, DefId), bool>,\n-}\n-\n-impl SpecializesCache {\n-    pub fn new() -> Self {\n-        SpecializesCache {\n-            map: FxHashMap()\n-        }\n-    }\n-\n-    pub fn check(&self, a: DefId, b: DefId) -> Option<bool> {\n-        self.map.get(&(a, b)).cloned()\n-    }\n-\n-    pub fn insert(&mut self, a: DefId, b: DefId, result: bool) {\n-        self.map.insert((a, b), result);\n-    }\n-}\n-\n // Query provider for `specialization_graph_of`.\n pub(super) fn specialization_graph_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                       trait_id: DefId)"}, {"sha": "0b7526dd78428d7ece38f345b521e69fd3bb5e0d", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -59,7 +59,7 @@ struct PredicateSet<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> PredicateSet<'a, 'gcx, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> PredicateSet<'a, 'gcx, 'tcx> {\n-        PredicateSet { tcx: tcx, set: FxHashSet() }\n+        PredicateSet { tcx: tcx, set: Default::default() }\n     }\n \n     fn insert(&mut self, pred: &ty::Predicate<'tcx>) -> bool {"}, {"sha": "64f87d077bab36ec4d2f4d9c509790b329f74f23", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -89,13 +89,14 @@ pub struct AllArenas<'tcx> {\n impl<'tcx> AllArenas<'tcx> {\n     pub fn new() -> Self {\n         AllArenas {\n-            global: WorkerLocal::new(|_| GlobalArenas::new()),\n-            interner: SyncDroplessArena::new(),\n+            global: WorkerLocal::new(|_| GlobalArenas::default()),\n+            interner: SyncDroplessArena::default(),\n         }\n     }\n }\n \n /// Internal storage\n+#[derive(Default)]\n pub struct GlobalArenas<'tcx> {\n     // internings\n     layout: TypedArena<LayoutDetails>,\n@@ -111,21 +112,6 @@ pub struct GlobalArenas<'tcx> {\n     const_allocs: TypedArena<interpret::Allocation>,\n }\n \n-impl<'tcx> GlobalArenas<'tcx> {\n-    pub fn new() -> GlobalArenas<'tcx> {\n-        GlobalArenas {\n-            layout: TypedArena::new(),\n-            generics: TypedArena::new(),\n-            trait_def: TypedArena::new(),\n-            adt_def: TypedArena::new(),\n-            steal_mir: TypedArena::new(),\n-            mir: TypedArena::new(),\n-            tables: TypedArena::new(),\n-            const_allocs: TypedArena::new(),\n-        }\n-    }\n-}\n-\n type InternedSet<'tcx, T> = Lock<FxHashSet<Interned<'tcx, T>>>;\n \n pub struct CtxtInterners<'tcx> {\n@@ -462,15 +448,15 @@ impl<'tcx> TypeckTables<'tcx> {\n             adjustments: ItemLocalMap(),\n             pat_binding_modes: ItemLocalMap(),\n             pat_adjustments: ItemLocalMap(),\n-            upvar_capture_map: FxHashMap(),\n+            upvar_capture_map: Default::default(),\n             closure_kind_origins: ItemLocalMap(),\n             liberated_fn_sigs: ItemLocalMap(),\n             fru_field_types: ItemLocalMap(),\n             cast_kinds: ItemLocalMap(),\n             used_trait_imports: Lrc::new(DefIdSet()),\n             tainted_by_errors: false,\n-            free_region_map: FreeRegionMap::new(),\n-            concrete_existential_types: FxHashMap(),\n+            free_region_map: Default::default(),\n+            concrete_existential_types: Default::default(),\n         }\n     }\n \n@@ -1190,7 +1176,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             None\n         };\n \n-        let mut trait_map: FxHashMap<_, Lrc<FxHashMap<_, _>>> = FxHashMap();\n+        let mut trait_map: FxHashMap<_, Lrc<FxHashMap<_, _>>> = FxHashMap::default();\n         for (k, v) in resolutions.trait_map {\n             let hir_id = hir.node_to_hir_id(k);\n             let map = trait_map.entry(hir_id.owner).or_default();\n@@ -1231,14 +1217,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 extern_providers,\n                 on_disk_query_result_cache,\n             ),\n-            rcache: Lock::new(FxHashMap()),\n-            selection_cache: traits::SelectionCache::new(),\n-            evaluation_cache: traits::EvaluationCache::new(),\n+            rcache: Default::default(),\n+            selection_cache: Default::default(),\n+            evaluation_cache: Default::default(),\n             crate_name: Symbol::intern(crate_name),\n             data_layout,\n-            layout_interner: Lock::new(FxHashSet()),\n-            stability_interner: Lock::new(FxHashSet()),\n-            allocation_interner: Lock::new(FxHashSet()),\n+            layout_interner: Default::default(),\n+            stability_interner: Default::default(),\n+            allocation_interner: Default::default(),\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n             tx_to_llvm_workers: Lock::new(tx),\n             output_filenames: Arc::new(output_filenames.clone()),"}, {"sha": "80dfd263af9af99e6dfe8d6753dc70e10d94f47b", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -753,7 +753,7 @@ impl LateBoundRegionsCollector {\n     fn new(just_constrained: bool) -> Self {\n         LateBoundRegionsCollector {\n             current_index: ty::INNERMOST,\n-            regions: FxHashSet(),\n+            regions: Default::default(),\n             just_constrained,\n         }\n     }"}, {"sha": "56fe479ffc555606cda77b3e6b6dae446a1472a1", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn ty_inhabitedness_forest(self, ty: Ty<'tcx>) -> DefIdForest {\n-        ty.uninhabited_from(&mut FxHashMap(), self)\n+        ty.uninhabited_from(&mut FxHashMap::default(), self)\n     }\n \n     pub fn is_enum_variant_uninhabited_from(self,\n@@ -140,7 +140,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let adt_kind = self.adt_def(adt_def_id).adt_kind();\n \n         // Compute inhabitedness forest:\n-        variant.uninhabited_from(&mut FxHashMap(), self, substs, adt_kind)\n+        variant.uninhabited_from(&mut FxHashMap::default(), self, substs, adt_kind)\n     }\n }\n "}, {"sha": "760114a58388540eade32b9c83add67797936bc1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -1841,8 +1841,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for AdtDef {\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         thread_local! {\n-            static CACHE: RefCell<FxHashMap<usize, Fingerprint>> =\n-                RefCell::new(FxHashMap());\n+            static CACHE: RefCell<FxHashMap<usize, Fingerprint>> = Default::default();\n         }\n \n         let hash: Fingerprint = CACHE.with(|cache| {"}, {"sha": "62bdf40317d12890a2867860f7e483546d8da933", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -136,30 +136,30 @@ impl<'sess> OnDiskCache<'sess> {\n         OnDiskCache {\n             serialized_data: data,\n             file_index_to_stable_id: footer.file_index_to_stable_id,\n-            file_index_to_file: Lock::new(FxHashMap()),\n+            file_index_to_file: Default::default(),\n             prev_cnums: footer.prev_cnums,\n             cnum_map: Once::new(),\n             source_map: sess.source_map(),\n-            current_diagnostics: Lock::new(FxHashMap()),\n+            current_diagnostics: Default::default(),\n             query_result_index: footer.query_result_index.into_iter().collect(),\n             prev_diagnostics_index: footer.diagnostics_index.into_iter().collect(),\n-            synthetic_expansion_infos: Lock::new(FxHashMap()),\n+            synthetic_expansion_infos: Default::default(),\n             alloc_decoding_state: AllocDecodingState::new(footer.interpret_alloc_index),\n         }\n     }\n \n     pub fn new_empty(source_map: &'sess SourceMap) -> OnDiskCache<'sess> {\n         OnDiskCache {\n             serialized_data: Vec::new(),\n-            file_index_to_stable_id: FxHashMap(),\n-            file_index_to_file: Lock::new(FxHashMap()),\n+            file_index_to_stable_id: Default::default(),\n+            file_index_to_file: Default::default(),\n             prev_cnums: vec![],\n             cnum_map: Once::new(),\n             source_map,\n-            current_diagnostics: Lock::new(FxHashMap()),\n-            query_result_index: FxHashMap(),\n-            prev_diagnostics_index: FxHashMap(),\n-            synthetic_expansion_infos: Lock::new(FxHashMap()),\n+            current_diagnostics: Default::default(),\n+            query_result_index: Default::default(),\n+            prev_diagnostics_index: Default::default(),\n+            synthetic_expansion_infos: Default::default(),\n             alloc_decoding_state: AllocDecodingState::new(Vec::new()),\n         }\n     }\n@@ -174,8 +174,8 @@ impl<'sess> OnDiskCache<'sess> {\n         tcx.dep_graph.with_ignore(|| {\n             // Allocate SourceFileIndices\n             let (file_to_file_index, file_index_to_stable_id) = {\n-                let mut file_to_file_index = FxHashMap();\n-                let mut file_index_to_stable_id = FxHashMap();\n+                let mut file_to_file_index = FxHashMap::default();\n+                let mut file_index_to_stable_id = FxHashMap::default();\n \n                 for (index, file) in tcx.sess.source_map().files().iter().enumerate() {\n                     let index = SourceFileIndex(index as u32);\n@@ -190,10 +190,10 @@ impl<'sess> OnDiskCache<'sess> {\n             let mut encoder = CacheEncoder {\n                 tcx,\n                 encoder,\n-                type_shorthands: FxHashMap(),\n-                predicate_shorthands: FxHashMap(),\n-                expn_info_shorthands: FxHashMap(),\n-                interpret_allocs: FxHashMap(),\n+                type_shorthands: Default::default(),\n+                predicate_shorthands: Default::default(),\n+                expn_info_shorthands: Default::default(),\n+                interpret_allocs: Default::default(),\n                 interpret_allocs_inverse: Vec::new(),\n                 source_map: CachingSourceMapView::new(tcx.sess.source_map()),\n                 file_to_file_index,"}, {"sha": "71e435fea77d438cb652b0cb0bc7ee4dc8e35383", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -55,11 +55,11 @@ impl<T> QueryValue<T> {\n     }\n }\n \n-impl<'tcx, M: QueryConfig<'tcx>> QueryCache<'tcx, M> {\n-    pub(super) fn new() -> QueryCache<'tcx, M> {\n+impl<'tcx, M: QueryConfig<'tcx>> Default for QueryCache<'tcx, M> {\n+    fn default() -> QueryCache<'tcx, M> {\n         QueryCache {\n-            results: FxHashMap(),\n-            active: FxHashMap(),\n+            results: FxHashMap::default(),\n+            active: FxHashMap::default(),\n         }\n     }\n }\n@@ -699,7 +699,7 @@ macro_rules! define_queries_inner {\n                     providers,\n                     fallback_extern_providers: Box::new(fallback_extern_providers),\n                     on_disk_cache,\n-                    $($name: Lock::new(QueryCache::new())),*\n+                    $($name: Default::default()),*\n                 }\n             }\n "}, {"sha": "00a1bfaacd781affb2dd9971d219f9052c97e2d7", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -846,7 +846,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n         // contains a different, structurally recursive type, maintain a stack\n         // of seen types and check recursion for each of them (issues #3008, #3779).\n         let mut seen: Vec<Ty<'_>> = Vec::new();\n-        let mut representable_cache = FxHashMap();\n+        let mut representable_cache = FxHashMap::default();\n         let r = is_type_structurally_recursive(\n             tcx, sp, &mut seen, &mut representable_cache, self);\n         debug!(\"is_type_representable: {:?} is {:?}\", self, r);"}, {"sha": "dbd3e00d9fd1da2de58bde4106ea64bafc56d2c5", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -22,9 +22,9 @@ pub use rustc_data_structures::fx::FxHashSet;\n macro_rules! define_id_collections {\n     ($map_name:ident, $set_name:ident, $key:ty) => {\n         pub type $map_name<T> = FxHashMap<$key, T>;\n-        pub fn $map_name<T>() -> $map_name<T> { FxHashMap() }\n+        pub fn $map_name<T>() -> $map_name<T> { Default::default() }\n         pub type $set_name = FxHashSet<$key>;\n-        pub fn $set_name() -> $set_name { FxHashSet() }\n+        pub fn $set_name() -> $set_name { Default::default() }\n     }\n }\n "}, {"sha": "bfa2203cc04b24507081140b582166b86c9e03b2", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -182,7 +182,7 @@ impl PrintContext {\n     fn prepare_late_bound_region_info<'tcx, T>(&mut self, value: &ty::Binder<T>)\n     where T: TypeFoldable<'tcx>\n     {\n-        let mut collector = LateBoundRegionNameCollector(FxHashSet());\n+        let mut collector = LateBoundRegionNameCollector(Default::default());\n         value.visit_with(&mut collector);\n         self.used_region_names = Some(collector.0);\n         self.region_index = 0;"}, {"sha": "da5c5f47c08ac6b01976960e110f7ebb02ea2051", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -103,7 +103,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n             // tuple structs/variants) do not have an associated body\n             // and do not need borrowchecking.\n             return Lrc::new(BorrowCheckResult {\n-                used_mut_nodes: FxHashSet(),\n+                used_mut_nodes: Default::default(),\n                 signalled_any_error: SignalledError::NoErrorsSeen,\n             })\n         }\n@@ -120,7 +120,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n         region_scope_tree,\n         owner_def_id,\n         body,\n-        used_mut_nodes: RefCell::new(FxHashSet()),\n+        used_mut_nodes: Default::default(),\n         signalled_any_error: Cell::new(SignalledError::NoErrorsSeen),\n     };\n \n@@ -235,7 +235,7 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n         region_scope_tree,\n         owner_def_id,\n         body,\n-        used_mut_nodes: RefCell::new(FxHashSet()),\n+        used_mut_nodes: Default::default(),\n         signalled_any_error: Cell::new(SignalledError::NoErrorsSeen),\n     };\n "}, {"sha": "85794c5b10af45f78adfedff4743ace23283ca50", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -45,7 +45,7 @@ struct UnusedMutCx<'a, 'tcx: 'a> {\n impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n     fn check_unused_mut_pat(&self, pats: &[P<hir::Pat>]) {\n         let tcx = self.bccx.tcx;\n-        let mut mutables: FxHashMap<_, Vec<_>> = FxHashMap();\n+        let mut mutables: FxHashMap<_, Vec<_>> = Default::default();\n         for p in pats {\n             p.each_binding(|_, hir_id, span, ident| {\n                 // Skip anything that looks like `_foo`"}, {"sha": "1760fb138ead82331eb767a4afe81c1ea4fc7569", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -169,7 +169,7 @@ impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O\n fn build_local_id_to_index(body: Option<&hir::Body>,\n                            cfg: &cfg::CFG)\n                            -> FxHashMap<hir::ItemLocalId, Vec<CFGIndex>> {\n-    let mut index = FxHashMap();\n+    let mut index = FxHashMap::default();\n \n     // FIXME(#15020) Would it be better to fold formals from decl\n     // into cfg itself?  i.e. introduce a fn-based flow-graph in"}, {"sha": "a09a2b0fc4f8cb9a8a3929e0d9b4f9ee1e16cf23", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -297,7 +297,7 @@ pub fn provide_extern(providers: &mut Providers) {\n             }\n         ).collect::<FxHashMap<_, _>>();\n \n-        let mut ret = FxHashMap();\n+        let mut ret = FxHashMap::default();\n         for lib in tcx.foreign_modules(cnum).iter() {\n             let module = def_id_to_native_lib\n                 .get(&lib.def_id)"}, {"sha": "86c6a5e65b0e9c4dc2dc9633c0ffa196c9b6d935", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -1313,7 +1313,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n     // for the current implementation of the standard library.\n     let mut group_end = None;\n     let mut group_start = None;\n-    let mut end_with = FxHashSet();\n+    let mut end_with = FxHashSet::default();\n     let info = &codegen_results.crate_info;\n     for &(cnum, _) in deps.iter().rev() {\n         if let Some(missing) = info.missing_lang_items.get(&cnum) {"}, {"sha": "61856236a149141294fc6395d1f2f90e6d00ce84", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -502,7 +502,7 @@ fn thin_lto(cgcx: &CodegenContext,\n             // If we don't compile incrementally, we don't need to load the\n             // import data from LLVM.\n             assert!(green_modules.is_empty());\n-            ThinLTOImports::new()\n+            ThinLTOImports::default()\n         };\n         info!(\"thin LTO import map loaded\");\n         timeline.record(\"import-map-loaded\");\n@@ -873,19 +873,13 @@ impl ThinModule {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Default)]\n pub struct ThinLTOImports {\n     // key = llvm name of importing module, value = list of modules it imports from\n     imports: FxHashMap<String, Vec<String>>,\n }\n \n impl ThinLTOImports {\n-    fn new() -> ThinLTOImports {\n-        ThinLTOImports {\n-            imports: FxHashMap(),\n-        }\n-    }\n-\n     fn modules_imported_by(&self, llvm_module_name: &str) -> &[String] {\n         self.imports.get(llvm_module_name).map(|v| &v[..]).unwrap_or(&[])\n     }\n@@ -910,9 +904,7 @@ impl ThinLTOImports {\n                .unwrap()\n                .push(imported_module_name.to_owned());\n         }\n-        let mut map = ThinLTOImports {\n-            imports: FxHashMap(),\n-        };\n+        let mut map = ThinLTOImports::default();\n         llvm::LLVMRustGetThinLTOModuleImports(data,\n                                               imported_module_callback,\n                                               &mut map as *mut _ as *mut libc::c_void);"}, {"sha": "81619c219757b4a11a43e627e7b5cca698b1b8c1", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -1540,7 +1540,7 @@ fn start_executing_work(tcx: TyCtxt,\n \n     // Compute the set of symbols we need to retain when doing LTO (if we need to)\n     let exported_symbols = {\n-        let mut exported_symbols = FxHashMap();\n+        let mut exported_symbols = FxHashMap::default();\n \n         let copy_symbols = |cnum| {\n             let symbols = tcx.exported_symbols(cnum)"}, {"sha": "614a562846e8633f096c38b68249ce8e26405e3a", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -70,7 +70,7 @@ use time_graph;\n use mono_item::{MonoItem, BaseMonoItemExt, MonoItemExt};\n use type_::Type;\n use type_of::LayoutLlvmExt;\n-use rustc::util::nodemap::{FxHashMap, FxHashSet, DefIdSet};\n+use rustc::util::nodemap::{FxHashMap, DefIdSet};\n use CrateInfo;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::sync::Lrc;\n@@ -1030,7 +1030,7 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n     }).collect();\n \n     if tcx.sess.opts.debugging_opts.print_mono_items.is_some() {\n-        let mut item_to_cgus: FxHashMap<_, Vec<_>> = FxHashMap();\n+        let mut item_to_cgus: FxHashMap<_, Vec<_>> = Default::default();\n \n         for cgu in &codegen_units {\n             for (&mono_item, &linkage) in cgu.items() {\n@@ -1092,17 +1092,17 @@ impl CrateInfo {\n             compiler_builtins: None,\n             profiler_runtime: None,\n             sanitizer_runtime: None,\n-            is_no_builtins: FxHashSet(),\n-            native_libraries: FxHashMap(),\n+            is_no_builtins: Default::default(),\n+            native_libraries: Default::default(),\n             used_libraries: tcx.native_libraries(LOCAL_CRATE),\n             link_args: tcx.link_args(LOCAL_CRATE),\n-            crate_name: FxHashMap(),\n+            crate_name: Default::default(),\n             used_crates_dynamic: cstore::used_crates(tcx, LinkagePreference::RequireDynamic),\n             used_crates_static: cstore::used_crates(tcx, LinkagePreference::RequireStatic),\n-            used_crate_source: FxHashMap(),\n-            wasm_imports: FxHashMap(),\n-            lang_item_to_crate: FxHashMap(),\n-            missing_lang_items: FxHashMap(),\n+            used_crate_source: Default::default(),\n+            wasm_imports: Default::default(),\n+            lang_item_to_crate: Default::default(),\n+            missing_lang_items: Default::default(),\n         };\n         let lang_items = tcx.lang_items();\n "}, {"sha": "826df82193a31970769dacf43a21d3e476f724e8", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -295,22 +295,22 @@ impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n             llcx,\n             stats: RefCell::new(Stats::default()),\n             codegen_unit,\n-            instances: RefCell::new(FxHashMap()),\n-            vtables: RefCell::new(FxHashMap()),\n-            const_cstr_cache: RefCell::new(FxHashMap()),\n-            const_unsized: RefCell::new(FxHashMap()),\n-            const_globals: RefCell::new(FxHashMap()),\n+            instances: Default::default(),\n+            vtables: Default::default(),\n+            const_cstr_cache: Default::default(),\n+            const_unsized: Default::default(),\n+            const_globals: Default::default(),\n             statics_to_rauw: RefCell::new(Vec::new()),\n             used_statics: RefCell::new(Vec::new()),\n-            lltypes: RefCell::new(FxHashMap()),\n-            scalar_lltypes: RefCell::new(FxHashMap()),\n-            pointee_infos: RefCell::new(FxHashMap()),\n+            lltypes: Default::default(),\n+            scalar_lltypes: Default::default(),\n+            pointee_infos: Default::default(),\n             isize_ty,\n             dbg_cx,\n             eh_personality: Cell::new(None),\n             eh_unwind_resume: Cell::new(None),\n             rust_try_fn: Cell::new(None),\n-            intrinsics: RefCell::new(FxHashMap()),\n+            intrinsics: Default::default(),\n             local_gen_sym_counter: Cell::new(0),\n         }\n     }"}, {"sha": "846d505641103dd864de097c137b2d19165fad62", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -96,6 +96,7 @@ pub struct UniqueTypeId(ast::Name);\n // created so far. The metadata nodes are indexed by UniqueTypeId, and, for\n // faster lookup, also by Ty. The TypeMap is responsible for creating\n // UniqueTypeIds.\n+#[derive(Default)]\n pub struct TypeMap<'ll, 'tcx> {\n     // The UniqueTypeIds created so far\n     unique_id_interner: Interner,\n@@ -108,15 +109,6 @@ pub struct TypeMap<'ll, 'tcx> {\n }\n \n impl TypeMap<'ll, 'tcx> {\n-    pub fn new() -> Self {\n-        TypeMap {\n-            unique_id_interner: Interner::new(),\n-            type_to_metadata: FxHashMap(),\n-            unique_id_to_metadata: FxHashMap(),\n-            type_to_unique_id: FxHashMap(),\n-        }\n-    }\n-\n     // Adds a Ty to metadata mapping to the TypeMap. The method will fail if\n     // the mapping already exists.\n     fn register_type_with_metadata("}, {"sha": "042e72e921ecead4e02951a41c7f3747db5e0966", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -100,11 +100,11 @@ impl<'a, 'tcx> CrateDebugContext<'a, 'tcx> {\n             llcontext,\n             llmod,\n             builder,\n-            created_files: RefCell::new(FxHashMap()),\n-            created_enum_disr_types: RefCell::new(FxHashMap()),\n-            type_map: RefCell::new(TypeMap::new()),\n+            created_files: Default::default(),\n+            created_enum_disr_types: Default::default(),\n+            type_map: Default::default(),\n             namespace_map: RefCell::new(DefIdMap()),\n-            composite_types_completed: RefCell::new(FxHashSet()),\n+            composite_types_completed: Default::default(),\n         }\n     }\n }"}, {"sha": "046f0cccfee05f68d539893c5188c00a37f3bb1e", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -28,7 +28,6 @@ use std::path::Path;\n use std::sync::{mpsc, Arc};\n \n use rustc_data_structures::owning_ref::OwningRef;\n-use rustc_data_structures::sync::Lrc;\n use flate2::Compression;\n use flate2::write::DeflateEncoder;\n \n@@ -42,7 +41,6 @@ use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;\n use rustc_target::spec::Target;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_mir::monomorphize::collector;\n use link::out_filename;\n \n@@ -132,7 +130,7 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n         ::symbol_names::provide(providers);\n \n         providers.target_features_whitelist = |_tcx, _cnum| {\n-            Lrc::new(FxHashMap()) // Just a dummy\n+            Default::default() // Just a dummy\n         };\n         providers.is_reachable_non_generic = |_tcx, _defid| true;\n         providers.exported_symbols = |_tcx, _crate| Arc::new(Vec::new());"}, {"sha": "bce21f5085c7c9b4d31133667853f08db01592a3", "filename": "src/librustc_data_structures/fx.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_data_structures%2Ffx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_data_structures%2Ffx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffx.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -8,21 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::{HashMap, HashSet};\n-use std::default::Default;\n-use std::hash::Hash;\n-\n pub use rustc_hash::FxHashMap;\n pub use rustc_hash::FxHashSet;\n pub use rustc_hash::FxHasher;\n-\n-#[allow(non_snake_case)]\n-pub fn FxHashMap<K: Hash + Eq, V>() -> FxHashMap<K, V> {\n-    HashMap::default()\n-}\n-\n-#[allow(non_snake_case)]\n-pub fn FxHashSet<V: Hash + Eq>() -> FxHashSet<V> {\n-    HashSet::default()\n-}\n-"}, {"sha": "ccf2a7f81590e94b182fc92f631879c8c4fe3689", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -187,11 +187,11 @@ impl<O: ForestObligation> ObligationForest<O> {\n     pub fn new() -> ObligationForest<O> {\n         ObligationForest {\n             nodes: vec![],\n-            done_cache: FxHashSet(),\n-            waiting_cache: FxHashMap(),\n+            done_cache: Default::default(),\n+            waiting_cache: Default::default(),\n             scratch: Some(vec![]),\n             obligation_tree_id_generator: (0..).map(|i| ObligationTreeId(i)),\n-            error_cache: FxHashMap(),\n+            error_cache: Default::default(),\n         }\n     }\n \n@@ -303,7 +303,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n         self.error_cache\n             .entry(node.obligation_tree_id)\n-            .or_insert_with(|| FxHashSet())\n+            .or_default()\n             .insert(node.obligation.as_predicate().clone());\n     }\n "}, {"sha": "f8663cd4fd43677a30b866e9dc12950f5cec8809", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -35,16 +35,20 @@ enum UndoLog<K, V> {\n     Noop,\n }\n \n-impl<K, V> SnapshotMap<K, V>\n+impl<K, V> Default for SnapshotMap<K, V>\n     where K: Hash + Clone + Eq\n {\n-    pub fn new() -> Self {\n+    fn default() -> Self {\n         SnapshotMap {\n-            map: FxHashMap(),\n+            map: FxHashMap::default(),\n             undo_log: vec![],\n         }\n     }\n+}\n \n+impl<K, V> SnapshotMap<K, V>\n+    where K: Hash + Clone + Eq\n+{\n     pub fn clear(&mut self) {\n         self.map.clear();\n         self.undo_log.clear();"}, {"sha": "700f9c95e3b579bce15ae88aa04e42acbea28c02", "filename": "src/librustc_data_structures/snapshot_map/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -12,7 +12,7 @@ use super::SnapshotMap;\n \n #[test]\n fn basic() {\n-    let mut map = SnapshotMap::new();\n+    let mut map = SnapshotMap::default();\n     map.insert(22, \"twenty-two\");\n     let snapshot = map.snapshot();\n     map.insert(22, \"thirty-three\");\n@@ -29,7 +29,7 @@ fn basic() {\n #[test]\n #[should_panic]\n fn out_of_order() {\n-    let mut map = SnapshotMap::new();\n+    let mut map = SnapshotMap::default();\n     map.insert(22, \"twenty-two\");\n     let snapshot1 = map.snapshot();\n     let _snapshot2 = map.snapshot();\n@@ -38,7 +38,7 @@ fn out_of_order() {\n \n #[test]\n fn nested_commit_then_rollback() {\n-    let mut map = SnapshotMap::new();\n+    let mut map = SnapshotMap::default();\n     map.insert(22, \"twenty-two\");\n     let snapshot1 = map.snapshot();\n     let snapshot2 = map.snapshot();"}, {"sha": "6a4012c81984d99413cb163acd457f0b2aac8417", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -133,7 +133,7 @@ cfg_if! {\n \n         pub type MTRef<'a, T> = &'a mut T;\n \n-        #[derive(Debug)]\n+        #[derive(Debug, Default)]\n         pub struct MTLock<T>(T);\n \n         impl<T> MTLock<T> {\n@@ -228,7 +228,7 @@ cfg_if! {\n \n         pub type MTRef<'a, T> = &'a T;\n \n-        #[derive(Debug)]\n+        #[derive(Debug, Default)]\n         pub struct MTLock<T>(Lock<T>);\n \n         impl<T> MTLock<T> {"}, {"sha": "e1318eb54d581df20643b9cd4d2d4bc486a738a6", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -51,16 +51,18 @@ struct Edge {\n     target: Index,\n }\n \n-impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n-    pub fn new() -> TransitiveRelation<T> {\n+impl<T: Clone + Debug + Eq + Hash> Default for TransitiveRelation<T> {\n+    fn default() -> TransitiveRelation<T> {\n         TransitiveRelation {\n             elements: vec![],\n-            map: FxHashMap(),\n+            map: FxHashMap::default(),\n             edges: vec![],\n             closure: Lock::new(None),\n         }\n     }\n+}\n \n+impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n     pub fn is_empty(&self) -> bool {\n         self.edges.is_empty()\n     }\n@@ -95,7 +97,7 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n         where F: FnMut(&T) -> Option<U>,\n               U: Clone + Debug + Eq + Hash + Clone,\n     {\n-        let mut result = TransitiveRelation::new();\n+        let mut result = TransitiveRelation::default();\n         for edge in &self.edges {\n             result.add(f(&self.elements[edge.source.0])?, f(&self.elements[edge.target.0])?);\n         }\n@@ -487,7 +489,7 @@ impl<CTX> HashStable<CTX> for Index {\n \n #[test]\n fn test_one_step() {\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"b\");\n     relation.add(\"a\", \"c\");\n     assert!(relation.contains(&\"a\", &\"c\"));\n@@ -498,7 +500,7 @@ fn test_one_step() {\n \n #[test]\n fn test_many_steps() {\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"b\");\n     relation.add(\"a\", \"c\");\n     relation.add(\"a\", \"f\");\n@@ -528,7 +530,7 @@ fn mubs_triangle() {\n     //      ^\n     //      |\n     //      b\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"tcx\");\n     relation.add(\"b\", \"tcx\");\n     assert_eq!(relation.minimal_upper_bounds(&\"a\", &\"b\"), vec![&\"tcx\"]);\n@@ -549,7 +551,7 @@ fn mubs_best_choice1() {\n     // need the second pare down call to get the right result (after\n     // intersection, we have [1, 2], but 2 -> 1).\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"0\", \"1\");\n     relation.add(\"0\", \"2\");\n \n@@ -576,7 +578,7 @@ fn mubs_best_choice2() {\n     // Like the precedecing test, but in this case intersection is [2,\n     // 1], and hence we rely on the first pare down call.\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"0\", \"1\");\n     relation.add(\"0\", \"2\");\n \n@@ -595,7 +597,7 @@ fn mubs_best_choice2() {\n fn mubs_no_best_choice() {\n     // in this case, the intersection yields [1, 2], and the \"pare\n     // down\" calls find nothing to remove.\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"0\", \"1\");\n     relation.add(\"0\", \"2\");\n \n@@ -612,7 +614,7 @@ fn mubs_best_choice_scc() {\n     // in this case, 1 and 2 form a cycle; we pick arbitrarily (but\n     // consistently).\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"0\", \"1\");\n     relation.add(\"0\", \"2\");\n \n@@ -634,7 +636,7 @@ fn pdub_crisscross() {\n     //   /\\       |\n     // b -> b1 ---+\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"a1\");\n     relation.add(\"a\", \"b1\");\n     relation.add(\"b\", \"a1\");\n@@ -657,7 +659,7 @@ fn pdub_crisscross_more() {\n     //   /\\    /\\             |\n     // b -> b1 -> b2 ---------+\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"a1\");\n     relation.add(\"a\", \"b1\");\n     relation.add(\"b\", \"a1\");\n@@ -690,7 +692,7 @@ fn pdub_lub() {\n     //            |\n     // b -> b1 ---+\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"a1\");\n     relation.add(\"b\", \"b1\");\n     relation.add(\"a1\", \"x\");\n@@ -713,7 +715,7 @@ fn mubs_intermediate_node_on_one_side_only() {\n     //           b\n \n     // \"digraph { a -> c -> d; b -> d; }\",\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"c\");\n     relation.add(\"c\", \"d\");\n     relation.add(\"b\", \"d\");\n@@ -732,7 +734,7 @@ fn mubs_scc_1() {\n     //           b\n \n     // \"digraph { a -> c -> d; d -> c; a -> d; b -> d; }\",\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"c\");\n     relation.add(\"c\", \"d\");\n     relation.add(\"d\", \"c\");\n@@ -752,7 +754,7 @@ fn mubs_scc_2() {\n     //      +--- b\n \n     // \"digraph { a -> c -> d; d -> c; b -> d; b -> c; }\",\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"c\");\n     relation.add(\"c\", \"d\");\n     relation.add(\"d\", \"c\");\n@@ -772,7 +774,7 @@ fn mubs_scc_3() {\n     //           b ---+\n \n     // \"digraph { a -> c -> d -> e -> c; b -> d; b -> e; }\",\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"c\");\n     relation.add(\"c\", \"d\");\n     relation.add(\"d\", \"e\");\n@@ -794,7 +796,7 @@ fn mubs_scc_4() {\n     //           b ---+\n \n     // \"digraph { a -> c -> d -> e -> c; a -> d; b -> e; }\"\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"c\");\n     relation.add(\"c\", \"d\");\n     relation.add(\"d\", \"e\");\n@@ -832,7 +834,7 @@ fn parent() {\n         (1, /*->*/ 3),\n     ];\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     for (a, b) in pairs {\n         relation.add(a, b);\n     }"}, {"sha": "9bd95e8262fc63fd7ecfd13b683b70e371b3e9d9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -382,9 +382,9 @@ impl Handler {\n             emitter: Lock::new(e),\n             continue_after_error: LockCell::new(true),\n             delayed_span_bugs: Lock::new(Vec::new()),\n-            taught_diagnostics: Lock::new(FxHashSet()),\n-            emitted_diagnostic_codes: Lock::new(FxHashSet()),\n-            emitted_diagnostics: Lock::new(FxHashSet()),\n+            taught_diagnostics: Default::default(),\n+            emitted_diagnostic_codes: Default::default(),\n+            emitted_diagnostics: Default::default(),\n         }\n     }\n \n@@ -398,7 +398,8 @@ impl Handler {\n     /// tools that want to reuse a `Parser` cleaning the previously emitted diagnostics as well as\n     /// the overall count of emitted error diagnostics.\n     pub fn reset_err_count(&self) {\n-        *self.emitted_diagnostics.borrow_mut() = FxHashSet();\n+        // actually frees the underlying memory (which `clear` would not do)\n+        *self.emitted_diagnostics.borrow_mut() = Default::default();\n         self.err_count.store(0, SeqCst);\n     }\n "}, {"sha": "22a0cc983daab59ff66dcea79cae7e05391ce56e", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -343,7 +343,7 @@ fn walk_nodes<'q>(query: &'q DepGraphQuery,\n                   direction: Direction)\n                   -> FxHashSet<&'q DepNode>\n {\n-    let mut set = FxHashSet();\n+    let mut set = FxHashSet::default();\n     for &start in starts {\n         debug!(\"walk_nodes: start={:?} outgoing?={:?}\", start, direction == OUTGOING);\n         if set.insert(start) {"}, {"sha": "58a799bb45f2d319fba95e4f0aa18ed3628f8336", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -226,7 +226,7 @@ pub fn check_dirty_clean_annotations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         let krate = tcx.hir.krate();\n         let mut dirty_clean_visitor = DirtyCleanVisitor {\n             tcx,\n-            checked_attrs: FxHashSet(),\n+            checked_attrs: Default::default(),\n         };\n         krate.visit_all_item_likes(&mut dirty_clean_visitor);\n "}, {"sha": "dee50f5ab2679eaba6023ca62d47f83c107d285b", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -219,7 +219,7 @@ pub fn prepare_session_directory(sess: &Session,\n         }\n     };\n \n-    let mut source_directories_already_tried = FxHashSet();\n+    let mut source_directories_already_tried = FxHashSet::default();\n \n     loop {\n         // Generate a session directory of the form:\n@@ -656,8 +656,8 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n \n     // First do a pass over the crate directory, collecting lock files and\n     // session directories\n-    let mut session_directories = FxHashSet();\n-    let mut lock_files = FxHashSet();\n+    let mut session_directories = FxHashSet::default();\n+    let mut lock_files = FxHashSet::default();\n \n     for dir_entry in try!(crate_directory.read_dir()) {\n         let dir_entry = match dir_entry {\n@@ -875,7 +875,7 @@ fn all_except_most_recent(deletion_candidates: Vec<(SystemTime, PathBuf, Option<\n                            .map(|(_, path, lock)| (path, lock))\n                            .collect()\n     } else {\n-        FxHashMap()\n+        FxHashMap::default()\n     }\n }\n \n@@ -924,7 +924,7 @@ fn test_all_except_most_recent() {\n     assert_eq!(all_except_most_recent(\n         vec![\n         ]).keys().cloned().collect::<FxHashSet<PathBuf>>(),\n-        FxHashSet()\n+        FxHashSet::default()\n     );\n }\n \n@@ -939,7 +939,7 @@ fn test_timestamp_serialization() {\n \n #[test]\n fn test_find_source_directory_in_iter() {\n-    let already_visited = FxHashSet();\n+    let already_visited = FxHashSet::default();\n \n     // Find newest\n     assert_eq!(find_source_directory_in_iter("}, {"sha": "2f7e1af1ff6c234237e5c2b6c45641464a770585", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -48,15 +48,15 @@ impl LoadResult<(PreviousDepGraph, WorkProductMap)> {\n         match self {\n             LoadResult::Error { message } => {\n                 sess.warn(&message);\n-                (PreviousDepGraph::new(SerializedDepGraph::new()), FxHashMap())\n+                Default::default()\n             },\n             LoadResult::DataOutOfDate => {\n                 if let Err(err) = delete_all_session_dir_contents(sess) {\n                     sess.err(&format!(\"Failed to delete invalidated or incompatible \\\n                                       incremental compilation session directory contents `{}`: {}.\",\n                                       dep_graph_path(sess).display(), err));\n                 }\n-                (PreviousDepGraph::new(SerializedDepGraph::new()), FxHashMap())\n+                Default::default()\n             }\n             LoadResult::Ok { data } => data\n         }\n@@ -117,7 +117,7 @@ pub fn load_dep_graph(sess: &Session) ->\n     if sess.opts.incremental.is_none() {\n         // No incremental compilation.\n         return MaybeAsync::Sync(LoadResult::Ok {\n-            data: (PreviousDepGraph::new(SerializedDepGraph::new()), FxHashMap())\n+            data: Default::default(),\n         });\n     }\n \n@@ -127,7 +127,7 @@ pub fn load_dep_graph(sess: &Session) ->\n     let report_incremental_info = sess.opts.debugging_opts.incremental_info;\n     let expected_hash = sess.opts.dep_tracking_hash();\n \n-    let mut prev_work_products = FxHashMap();\n+    let mut prev_work_products = FxHashMap::default();\n \n     // If we are only building with -Zquery-dep-graph but without an actual\n     // incr. comp. session directory, we skip this. Otherwise we'd fail"}, {"sha": "6279df4e5801db365d5f0524b0d5b264adf0bfde", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -162,7 +162,7 @@ fn encode_dep_graph(tcx: TyCtxt,\n         let (total_edge_reads, total_duplicate_edge_reads) =\n             tcx.dep_graph.edge_deduplication_data();\n \n-        let mut counts: FxHashMap<_, Stat> = FxHashMap();\n+        let mut counts: FxHashMap<_, Stat> = FxHashMap::default();\n \n         for (i, &node) in serialized_graph.nodes.iter_enumerated() {\n             let stat = counts.entry(node.kind).or_insert(Stat {"}, {"sha": "5197876f921973ce7d38770eeea3beb2ede7e744", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -734,7 +734,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         // any generic types right now:\n         let ty = self.cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n \n-        match self.check_type_for_ffi(&mut FxHashSet(), ty) {\n+        match self.check_type_for_ffi(&mut FxHashSet::default(), ty) {\n             FfiResult::FfiSafe => {}\n             FfiResult::FfiPhantom(ty) => {\n                 self.cx.span_lint(IMPROPER_CTYPES,"}, {"sha": "4b96735eb77b4945f13bf2f5769f1ea5cb0206cc", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -1133,7 +1133,7 @@ impl<'a> CrateLoader<'a> {\n                         path_len,\n                         direct: true,\n                     },\n-                    &mut FxHashSet(),\n+                    &mut FxHashSet::default(),\n                 );\n                 self.cstore.add_extern_mod_stmt_cnum(item.id, cnum);\n                 cnum\n@@ -1160,7 +1160,7 @@ impl<'a> CrateLoader<'a> {\n                 path_len: usize::max_value(),\n                 direct: true,\n             },\n-            &mut FxHashSet(),\n+            &mut FxHashSet::default(),\n         );\n \n         cnum\n@@ -1184,7 +1184,7 @@ impl<'a> CrateLoader<'a> {\n                 path_len: usize::max_value(),\n                 direct: true,\n             },\n-            &mut FxHashSet(),\n+            &mut FxHashSet::default(),\n         );\n \n         Some(cnum)"}, {"sha": "2be9883d03d9b76cd5b6150e5d32c83e5f4f732f", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -111,7 +111,7 @@ impl CStore {\n             // corresponding `CrateNum`. This first entry will always remain\n             // `None`.\n             metas: RwLock::new(IndexVec::from_elem_n(None, 1)),\n-            extern_mod_crate_map: Lock::new(FxHashMap()),\n+            extern_mod_crate_map: Default::default(),\n             metadata_loader,\n         }\n     }"}, {"sha": "26f977c6b59d1998c1aa1edc232562699a78f807", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -1494,7 +1494,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         let tcx = self.tcx;\n         let mut visitor = ImplVisitor {\n             tcx,\n-            impls: FxHashMap(),\n+            impls: FxHashMap::default(),\n         };\n         tcx.hir.krate().visit_all_item_likes(&mut visitor);\n "}, {"sha": "e7e6dd71a7668b6f7e0f66a51cf87daa9c24f25f", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -459,7 +459,7 @@ impl<'a> Context<'a> {\n         let mut candidates: FxHashMap<\n             _,\n             (FxHashMap<_, _>, FxHashMap<_, _>, FxHashMap<_, _>),\n-        > = FxHashMap();\n+        > = Default::default();\n         let mut staticlibs = vec![];\n \n         // First, find all possible candidate rlibs and dylibs purely based on\n@@ -528,7 +528,7 @@ impl<'a> Context<'a> {\n         // A Library candidate is created if the metadata for the set of\n         // libraries corresponds to the crate id and hash criteria that this\n         // search is being performed for.\n-        let mut libraries = FxHashMap();\n+        let mut libraries = FxHashMap::default();\n         for (_hash, (rlibs, rmetas, dylibs)) in candidates {\n             let mut slot = None;\n             let rlib = self.extract_one(rlibs, CrateFlavor::Rlib, &mut slot);\n@@ -771,9 +771,9 @@ impl<'a> Context<'a> {\n         // rlibs/dylibs.\n         let sess = self.sess;\n         let dylibname = self.dylibname();\n-        let mut rlibs = FxHashMap();\n-        let mut rmetas = FxHashMap();\n-        let mut dylibs = FxHashMap();\n+        let mut rlibs = FxHashMap::default();\n+        let mut rmetas = FxHashMap::default();\n+        let mut dylibs = FxHashMap::default();\n         {\n             let locs = locs.map(|l| PathBuf::from(l)).filter(|loc| {\n                 if !loc.exists() {"}, {"sha": "392644c793d8c4a14f9daf8a9d4b4f6aeadab239", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -183,7 +183,7 @@ impl<'a, 'tcx> Collector<'a, 'tcx> {\n     // Process libs passed on the command line\n     fn process_command_line(&mut self) {\n         // First, check for errors\n-        let mut renames = FxHashSet();\n+        let mut renames = FxHashSet::default();\n         for &(ref name, ref new_name, _) in &self.tcx.sess.opts.libs {\n             if let &Some(ref new_name) = new_name {\n                 let any_duplicate = self.libs"}, {"sha": "ab44ebc052f308e6b11b2f532a9682185e9ab382", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -151,11 +151,11 @@ impl<'tcx> BorrowSet<'tcx> {\n             tcx,\n             mir,\n             idx_vec: IndexVec::new(),\n-            location_map: FxHashMap(),\n-            activation_map: FxHashMap(),\n-            region_map: FxHashMap(),\n-            local_map: FxHashMap(),\n-            pending_activations: FxHashMap(),\n+            location_map: Default::default(),\n+            activation_map: Default::default(),\n+            region_map: Default::default(),\n+            local_map: Default::default(),\n+            pending_activations: Default::default(),\n             locals_state_at_exit:\n                 LocalsStateAtExit::build(locals_are_invalidated_at_exit, mir, move_data),\n         };"}, {"sha": "978b2b2eb8631062396195a7ca4527932778aa22", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -838,7 +838,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             (predecessor, is_back_edge)\n         }));\n \n-        let mut visited = FxHashSet();\n+        let mut visited = FxHashSet::default();\n         let mut result = vec![];\n \n         'dfs: while let Some((location, is_back_edge)) = stack.pop() {"}, {"sha": "6ef8b155458721e556496d62584a921c77586116", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -252,13 +252,13 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         location_table,\n         movable_generator,\n         locals_are_invalidated_at_exit,\n-        access_place_error_reported: FxHashSet(),\n-        reservation_error_reported: FxHashSet(),\n+        access_place_error_reported: Default::default(),\n+        reservation_error_reported: Default::default(),\n         move_error_reported: BTreeMap::new(),\n-        uninitialized_error_reported: FxHashSet(),\n+        uninitialized_error_reported: Default::default(),\n         errors_buffer,\n         nonlexical_regioncx: regioncx,\n-        used_mut: FxHashSet(),\n+        used_mut: Default::default(),\n         used_mut_upvars: SmallVec::new(),\n         borrow_set,\n         dominators,"}, {"sha": "1e6ba638e1cc4dab3b15913f8557c6337d588f20", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -48,7 +48,7 @@ struct UseFinder<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n impl<'cx, 'gcx, 'tcx> UseFinder<'cx, 'gcx, 'tcx> {\n     fn find(&mut self) -> Option<Cause> {\n         let mut queue = VecDeque::new();\n-        let mut visited = FxHashSet();\n+        let mut visited = FxHashSet::default();\n \n         queue.push_back(self.start_point);\n         while let Some(p) = queue.pop_front() {"}, {"sha": "f8c839e4d3f88f697f2bdac6a3d1dc1b4a946cc0", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -80,8 +80,8 @@ crate fn create(\n         region_bound_pairs: Vec::new(),\n         relations: UniversalRegionRelations {\n             universal_regions: universal_regions.clone(),\n-            outlives: TransitiveRelation::new(),\n-            inverse_outlives: TransitiveRelation::new(),\n+            outlives: Default::default(),\n+            inverse_outlives: Default::default(),\n         },\n     }.create()\n }"}, {"sha": "ed8ca9a637f29acb64c49580702e2e55814b9c6c", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -128,7 +128,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n     let mut constraints = MirTypeckRegionConstraints {\n         liveness_constraints: LivenessValues::new(elements),\n         outlives_constraints: ConstraintSet::default(),\n-        closure_bounds_mapping: FxHashMap(),\n+        closure_bounds_mapping: Default::default(),\n         type_tests: Vec::default(),\n     };\n     let mut placeholder_indices = PlaceholderIndices::default();\n@@ -845,7 +845,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             region_bound_pairs,\n             implicit_region_bound,\n             borrowck_context,\n-            reported_errors: FxHashSet(),\n+            reported_errors: Default::default(),\n             universal_region_relations,\n         }\n     }"}, {"sha": "a864b39e15791a74ca6b85c6d9e41804db43a22b", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -178,7 +178,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // If there are no match guards then we don't need any fake borrows,\n         // so don't track them.\n         let mut fake_borrows = if has_guard && tcx.generate_borrow_of_any_match_input() {\n-            Some(FxHashMap())\n+            Some(FxHashMap::default())\n         } else {\n             None\n         };"}, {"sha": "c7da9c4fbd792b46c8a300e28782ca73872a62eb", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         // these maps are empty to start; cases are\n                         // added below in add_cases_to_switch\n                         options: vec![],\n-                        indices: FxHashMap(),\n+                        indices: Default::default(),\n                     }\n                 }\n             }"}, {"sha": "b3e62788256836a046e164a0bb4bece440b37807", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -358,7 +358,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             needs_cleanup: false,\n             drops: vec![],\n             cached_generator_drop: None,\n-            cached_exits: FxHashMap(),\n+            cached_exits: Default::default(),\n             cached_unwind: CachedBlock::default(),\n         });\n     }"}, {"sha": "f7043487c51a6d8ac95450835c38c3de7c3eeed8", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -77,7 +77,7 @@ fn precompute_borrows_out_of_scope<'tcx>(\n     // `visited` once they are added to `stack`, before they are actually\n     // processed, because this avoids the need to look them up again on\n     // completion.\n-    let mut visited = FxHashMap();\n+    let mut visited = FxHashMap::default();\n     visited.insert(location.block, location.statement_index);\n \n     let mut stack = vec![];\n@@ -162,7 +162,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n             }\n         });\n \n-        let mut borrows_out_of_scope_at_location = FxHashMap();\n+        let mut borrows_out_of_scope_at_location = FxHashMap::default();\n         for (borrow_index, borrow_data) in borrow_set.borrows.iter_enumerated() {\n             let borrow_region = borrow_data.region.to_region_vid();\n             let location = borrow_set.borrows[borrow_index].reserve_location;"}, {"sha": "08696dc098e00398c86a11ccbe954e963e1fc470", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -11,7 +11,6 @@\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::tcx::RvalueInitializationState;\n-use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec};\n \n use std::collections::hash_map::Entry;\n@@ -53,7 +52,7 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n                             v,\n                         )\n                     }).collect(),\n-                    projections: FxHashMap(),\n+                    projections: Default::default(),\n                 },\n                 move_paths,\n                 path_map,"}, {"sha": "04a297d0a8317963ead1be2b656c72e6d66885f8", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -320,7 +320,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n         f: F) -> R\n         where F: for<'b> FnOnce(MatchCheckCtxt<'b, 'tcx>) -> R\n     {\n-        let pattern_arena = TypedArena::new();\n+        let pattern_arena = TypedArena::default();\n \n         f(MatchCheckCtxt {\n             tcx,"}, {"sha": "d7b2f67a581e387e1bd0ba134e5d10f1794f81e2", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -89,7 +89,7 @@ pub struct RefTracking<'tcx, Tag> {\n impl<'tcx, Tag: Copy+Eq+Hash> RefTracking<'tcx, Tag> {\n     pub fn new(op: OpTy<'tcx, Tag>) -> Self {\n         let mut ref_tracking = RefTracking {\n-            seen: FxHashSet(),\n+            seen: FxHashSet::default(),\n             todo: vec![(op, Vec::new())],\n         };\n         ref_tracking.seen.insert(op);"}, {"sha": "6b60b5340eee761f846786450b64c706c0fda3a5", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -238,7 +238,7 @@ impl<'tcx> InliningMap<'tcx> {\n \n     fn new() -> InliningMap<'tcx> {\n         InliningMap {\n-            index: FxHashMap(),\n+            index: FxHashMap::default(),\n             targets: Vec::new(),\n             inlines: GrowableBitSet::with_capacity(1024),\n         }\n@@ -305,7 +305,7 @@ pub fn collect_crate_mono_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     debug!(\"Building mono item graph, beginning at roots\");\n \n-    let mut visited = MTLock::new(FxHashSet());\n+    let mut visited = MTLock::new(FxHashSet::default());\n     let mut inlining_map = MTLock::new(InliningMap::new());\n \n     {"}, {"sha": "3a1108bb169835d5f6d90e085910dc0979769fc2", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -301,10 +301,10 @@ fn place_root_mono_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                              -> PreInliningPartitioning<'tcx>\n     where I: Iterator<Item = MonoItem<'tcx>>\n {\n-    let mut roots = FxHashSet();\n-    let mut codegen_units = FxHashMap();\n+    let mut roots = FxHashSet::default();\n+    let mut codegen_units = FxHashMap::default();\n     let is_incremental_build = tcx.sess.opts.incremental.is_some();\n-    let mut internalization_candidates = FxHashSet();\n+    let mut internalization_candidates = FxHashSet::default();\n \n     // Determine if monomorphizations instantiated in this crate will be made\n     // available to downstream crates. This depends on whether we are in\n@@ -314,7 +314,7 @@ fn place_root_mono_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           tcx.local_crate_exports_generics();\n \n     let cgu_name_builder = &mut CodegenUnitNameBuilder::new(tcx);\n-    let cgu_name_cache = &mut FxHashMap();\n+    let cgu_name_cache = &mut FxHashMap::default();\n \n     for mono_item in mono_items {\n         match mono_item.instantiation_mode(tcx) {\n@@ -602,7 +602,7 @@ fn place_inlined_mono_items<'tcx>(initial_partitioning: PreInliningPartitioning<\n                                   inlining_map: &InliningMap<'tcx>)\n                                   -> PostInliningPartitioning<'tcx> {\n     let mut new_partitioning = Vec::new();\n-    let mut mono_item_placements = FxHashMap();\n+    let mut mono_item_placements = FxHashMap::default();\n \n     let PreInliningPartitioning {\n         codegen_units: initial_cgus,\n@@ -614,7 +614,7 @@ fn place_inlined_mono_items<'tcx>(initial_partitioning: PreInliningPartitioning<\n \n     for old_codegen_unit in initial_cgus {\n         // Collect all items that need to be available in this codegen unit\n-        let mut reachable = FxHashSet();\n+        let mut reachable = FxHashSet::default();\n         for root in old_codegen_unit.items().keys() {\n             follow_inlining(*root, inlining_map, &mut reachable);\n         }\n@@ -703,7 +703,7 @@ fn internalize_symbols<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Build a map from every monomorphization to all the monomorphizations that\n     // reference it.\n-    let mut accessor_map: FxHashMap<MonoItem<'tcx>, Vec<MonoItem<'tcx>>> = FxHashMap();\n+    let mut accessor_map: FxHashMap<MonoItem<'tcx>, Vec<MonoItem<'tcx>>> = Default::default();\n     inlining_map.iter_accesses(|accessor, accessees| {\n         for accessee in accessees {\n             accessor_map.entry(*accessee)"}, {"sha": "ae881bad58dcd57b1c0822356010968aa7b13b61", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -57,7 +57,7 @@ impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             },\n             tcx,\n             param_env,\n-            used_unsafe: FxHashSet(),\n+            used_unsafe: Default::default(),\n             inherited_blocks: vec![],\n         }\n     }"}, {"sha": "4d3b422ab28171770a340aa99bfead908262e78e", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -41,6 +41,7 @@ use transform::{MirPass, MirSource};\n \n pub struct CleanEndRegions;\n \n+#[derive(Default)]\n struct GatherBorrowedRegions {\n     seen_regions: FxHashSet<region::Scope>,\n }\n@@ -56,9 +57,7 @@ impl MirPass for CleanEndRegions {\n                           mir: &mut Mir<'tcx>) {\n         if !tcx.emit_end_regions() { return; }\n \n-        let mut gather = GatherBorrowedRegions {\n-            seen_regions: FxHashSet()\n-        };\n+        let mut gather = GatherBorrowedRegions::default();\n         gather.visit_mir(mir);\n \n         let mut delete = DeleteTrivialEndRegions { seen_regions: &mut gather.seen_regions };\n@@ -139,6 +138,7 @@ impl<'tcx> MutVisitor<'tcx> for DeleteAscribeUserType {\n \n pub struct CleanFakeReadsAndBorrows;\n \n+#[derive(Default)]\n pub struct DeleteAndRecordFakeReads {\n     fake_borrow_temporaries: FxHashSet<Local>,\n }\n@@ -153,9 +153,7 @@ impl MirPass for CleanFakeReadsAndBorrows {\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        let mut delete_reads = DeleteAndRecordFakeReads {\n-            fake_borrow_temporaries: FxHashSet(),\n-        };\n+        let mut delete_reads = DeleteAndRecordFakeReads::default();\n         delete_reads.visit_mir(mir);\n         let mut delete_borrows = DeleteFakeBorrows {\n             fake_borrow_temporaries: delete_reads.fake_borrow_temporaries,"}, {"sha": "e1165e865cec2544fca52debc37483269a772298", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -75,7 +75,7 @@ impl MirPass for ElaborateDrops {\n                 env: &env,\n                 flow_inits,\n                 flow_uninits,\n-                drop_flags: FxHashMap(),\n+                drop_flags: Default::default(),\n                 patch: MirPatch::new(mir),\n             }.elaborate()\n         };"}, {"sha": "78547abf9d9d309756a92fbf3e48d87f9d38cc5d", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -1291,7 +1291,7 @@ impl MirPass for QualifyAndPromoteConstants {\n fn args_required_const(tcx: TyCtxt, def_id: DefId) -> Option<FxHashSet<usize>> {\n     let attrs = tcx.get_attrs(def_id);\n     let attr = attrs.iter().find(|a| a.check_name(\"rustc_args_required_const\"))?;\n-    let mut ret = FxHashSet();\n+    let mut ret = FxHashSet::default();\n     for meta in attr.meta_item_list()? {\n         match meta.literal()?.node {\n             LitKind::Int(a, _) => { ret.insert(a as usize); }"}, {"sha": "25bd02ff6dc5d2eb3280f6a54de7e17260610961", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -536,7 +536,7 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     writeln!(w, \"{{\")?;\n \n     // construct a scope tree and write it out\n-    let mut scope_tree: FxHashMap<SourceScope, Vec<SourceScope>> = FxHashMap();\n+    let mut scope_tree: FxHashMap<SourceScope, Vec<SourceScope>> = Default::default();\n     for (index, scope_data) in mir.source_scopes.iter().enumerate() {\n         if let Some(parent) = scope_data.parent_scope {\n             scope_tree"}, {"sha": "019fb9565f413e4d5b1bb64c4f15ac5062657251", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -41,8 +41,8 @@ struct StatCollector<'k> {\n pub fn print_hir_stats(krate: &hir::Crate) {\n     let mut collector = StatCollector {\n         krate: Some(krate),\n-        data: FxHashMap(),\n-        seen: FxHashSet(),\n+        data: FxHashMap::default(),\n+        seen: FxHashSet::default(),\n     };\n     hir_visit::walk_crate(&mut collector, krate);\n     collector.print(\"HIR STATS\");\n@@ -51,8 +51,8 @@ pub fn print_hir_stats(krate: &hir::Crate) {\n pub fn print_ast_stats<'v>(krate: &'v ast::Crate, title: &str) {\n     let mut collector = StatCollector {\n         krate: None,\n-        data: FxHashMap(),\n-        seen: FxHashSet(),\n+        data: FxHashMap::default(),\n+        seen: FxHashSet::default(),\n     };\n     ast_visit::walk_crate(&mut collector, krate);\n     collector.print(title);"}, {"sha": "4b7bd7866727b0a76c3883f68e7317048b619b1f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -1732,7 +1732,7 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         in_body: false,\n         span: krate.span,\n         empty_tables: &empty_tables,\n-        visited_opaque_tys: FxHashSet()\n+        visited_opaque_tys: FxHashSet::default()\n     };\n     intravisit::walk_crate(&mut visitor, krate);\n "}, {"sha": "0f96ee6a688f1c6b0518e562584b96209e9d110a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 39, "deletions": 45, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -780,7 +780,7 @@ impl<'a, 'tcx, 'cl> Visitor<'tcx> for Resolver<'a, 'cl> {\n         self.label_ribs.push(Rib::new(rib_kind));\n \n         // Add each argument to the rib.\n-        let mut bindings_list = FxHashMap();\n+        let mut bindings_list = FxHashMap::default();\n         for argument in &declaration.inputs {\n             self.resolve_pattern(&argument.pat, PatternSource::FnParam, &mut bindings_list);\n \n@@ -930,7 +930,7 @@ struct Rib<'a> {\n impl<'a> Rib<'a> {\n     fn new(kind: RibKind<'a>) -> Rib<'a> {\n         Rib {\n-            bindings: FxHashMap(),\n+            bindings: Default::default(),\n             kind,\n         }\n     }\n@@ -1053,11 +1053,11 @@ impl<'a> ModuleData<'a> {\n             parent,\n             kind,\n             normal_ancestor_id,\n-            resolutions: RefCell::new(FxHashMap()),\n+            resolutions: Default::default(),\n             legacy_macro_resolutions: RefCell::new(Vec::new()),\n             macro_resolutions: RefCell::new(Vec::new()),\n             builtin_attrs: RefCell::new(Vec::new()),\n-            unresolved_invocations: RefCell::new(FxHashSet()),\n+            unresolved_invocations: Default::default(),\n             no_implicit_prelude: false,\n             glob_importers: RefCell::new(Vec::new()),\n             globs: RefCell::new(Vec::new()),\n@@ -1315,13 +1315,14 @@ impl<'a> NameBinding<'a> {\n ///\n /// All other types are defined somewhere and possibly imported, but the primitive ones need\n /// special handling, since they have no place of origin.\n+#[derive(Default)]\n struct PrimitiveTypeTable {\n     primitive_types: FxHashMap<Name, PrimTy>,\n }\n \n impl PrimitiveTypeTable {\n     fn new() -> PrimitiveTypeTable {\n-        let mut table = PrimitiveTypeTable { primitive_types: FxHashMap() };\n+        let mut table = PrimitiveTypeTable::default();\n \n         table.intern(\"bool\", Bool);\n         table.intern(\"char\", Char);\n@@ -1482,6 +1483,7 @@ pub struct Resolver<'a, 'b: 'a> {\n }\n \n /// Nothing really interesting here, it just provides memory for the rest of the crate.\n+#[derive(Default)]\n pub struct ResolverArenas<'a> {\n     modules: arena::TypedArena<ModuleData<'a>>,\n     local_modules: RefCell<Vec<Module<'a>>>,\n@@ -1668,7 +1670,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             no_implicit_prelude: attr::contains_name(&krate.attrs, \"no_implicit_prelude\"),\n             ..ModuleData::new(None, root_module_kind, root_def_id, Mark::root(), krate.span)\n         });\n-        let mut module_map = FxHashMap();\n+        let mut module_map = FxHashMap::default();\n         module_map.insert(DefId::local(CRATE_DEF_INDEX), graph_root);\n \n         let mut definitions = Definitions::new();\n@@ -1688,11 +1690,11 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             }\n         }\n \n-        let mut invocations = FxHashMap();\n+        let mut invocations = FxHashMap::default();\n         invocations.insert(Mark::root(),\n                            arenas.alloc_invocation_data(InvocationData::root(graph_root)));\n \n-        let mut macro_defs = FxHashMap();\n+        let mut macro_defs = FxHashMap::default();\n         macro_defs.insert(Mark::root(), root_def_id);\n \n         Resolver {\n@@ -1708,8 +1710,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             prelude: None,\n             extern_prelude,\n \n-            has_self: FxHashSet(),\n-            field_names: FxHashMap(),\n+            has_self: FxHashSet::default(),\n+            field_names: FxHashMap::default(),\n \n             determined_imports: Vec::new(),\n             indeterminate_imports: Vec::new(),\n@@ -1732,21 +1734,21 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             import_map: NodeMap(),\n             freevars: NodeMap(),\n             freevars_seen: NodeMap(),\n-            export_map: FxHashMap(),\n+            export_map: FxHashMap::default(),\n             trait_map: NodeMap(),\n             module_map,\n             block_map: NodeMap(),\n-            extern_module_map: FxHashMap(),\n-            binding_parent_modules: FxHashMap(),\n+            extern_module_map: FxHashMap::default(),\n+            binding_parent_modules: FxHashMap::default(),\n \n             make_glob_map: make_glob_map == MakeGlobMap::Yes,\n             glob_map: NodeMap(),\n \n-            used_imports: FxHashSet(),\n+            used_imports: FxHashSet::default(),\n             maybe_unused_trait_imports: NodeSet(),\n             maybe_unused_extern_crates: Vec::new(),\n \n-            unused_labels: FxHashMap(),\n+            unused_labels: FxHashMap::default(),\n \n             privacy_errors: Vec::new(),\n             ambiguity_errors: Vec::new(),\n@@ -1762,35 +1764,27 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             }),\n \n             crate_loader,\n-            macro_names: FxHashSet(),\n-            builtin_macros: FxHashMap(),\n-            macro_use_prelude: FxHashMap(),\n-            all_macros: FxHashMap(),\n-            macro_map: FxHashMap(),\n+            macro_names: FxHashSet::default(),\n+            builtin_macros: FxHashMap::default(),\n+            macro_use_prelude: FxHashMap::default(),\n+            all_macros: FxHashMap::default(),\n+            macro_map: FxHashMap::default(),\n             invocations,\n             macro_defs,\n-            local_macro_def_scopes: FxHashMap(),\n-            name_already_seen: FxHashMap(),\n+            local_macro_def_scopes: FxHashMap::default(),\n+            name_already_seen: FxHashMap::default(),\n             whitelisted_legacy_custom_derives: Vec::new(),\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: DefIdMap(),\n             found_unresolved_macro: false,\n-            unused_macros: FxHashSet(),\n+            unused_macros: FxHashSet::default(),\n             current_type_ascription: Vec::new(),\n             injected_crate: None,\n         }\n     }\n \n     pub fn arenas() -> ResolverArenas<'a> {\n-        ResolverArenas {\n-            modules: arena::TypedArena::new(),\n-            local_modules: RefCell::new(Vec::new()),\n-            name_bindings: arena::TypedArena::new(),\n-            import_directives: arena::TypedArena::new(),\n-            name_resolutions: arena::TypedArena::new(),\n-            invocation_data: arena::TypedArena::new(),\n-            legacy_bindings: arena::TypedArena::new(),\n-        }\n+        Default::default()\n     }\n \n     /// Runs the function on each namespace.\n@@ -2381,7 +2375,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         match type_parameters {\n             HasTypeParameters(generics, rib_kind) => {\n                 let mut function_type_rib = Rib::new(rib_kind);\n-                let mut seen_bindings = FxHashMap();\n+                let mut seen_bindings = FxHashMap::default();\n                 for param in &generics.params {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {}\n@@ -2649,15 +2643,15 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         walk_list!(self, visit_expr, &local.init);\n \n         // Resolve the pattern.\n-        self.resolve_pattern(&local.pat, PatternSource::Let, &mut FxHashMap());\n+        self.resolve_pattern(&local.pat, PatternSource::Let, &mut FxHashMap::default());\n     }\n \n     // build a map from pattern identifiers to binding-info's.\n     // this is done hygienically. This could arise for a macro\n     // that expands into an or-pattern where one 'x' was from the\n     // user and one 'x' came from the macro.\n     fn binding_mode_map(&mut self, pat: &Pat) -> BindingMap {\n-        let mut binding_map = FxHashMap();\n+        let mut binding_map = FxHashMap::default();\n \n         pat.walk(&mut |pat| {\n             if let PatKind::Ident(binding_mode, ident, ref sub_pat) = pat.node {\n@@ -2682,8 +2676,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             return;\n         }\n \n-        let mut missing_vars = FxHashMap();\n-        let mut inconsistent_vars = FxHashMap();\n+        let mut missing_vars = FxHashMap::default();\n+        let mut inconsistent_vars = FxHashMap::default();\n         for (i, p) in pats.iter().enumerate() {\n             let map_i = self.binding_mode_map(&p);\n \n@@ -2747,7 +2741,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n     fn resolve_arm(&mut self, arm: &Arm) {\n         self.ribs[ValueNS].push(Rib::new(NormalRibKind));\n \n-        let mut bindings_list = FxHashMap();\n+        let mut bindings_list = FxHashMap::default();\n         for pattern in &arm.pats {\n             self.resolve_pattern(&pattern, PatternSource::Match, &mut bindings_list);\n         }\n@@ -4143,7 +4137,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 self.visit_expr(subexpression);\n \n                 self.ribs[ValueNS].push(Rib::new(NormalRibKind));\n-                let mut bindings_list = FxHashMap();\n+                let mut bindings_list = FxHashMap::default();\n                 for pat in pats {\n                     self.resolve_pattern(pat, PatternSource::IfLet, &mut bindings_list);\n                 }\n@@ -4168,7 +4162,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 self.with_resolved_label(label, expr.id, |this| {\n                     this.visit_expr(subexpression);\n                     this.ribs[ValueNS].push(Rib::new(NormalRibKind));\n-                    let mut bindings_list = FxHashMap();\n+                    let mut bindings_list = FxHashMap::default();\n                     for pat in pats {\n                         this.resolve_pattern(pat, PatternSource::WhileLet, &mut bindings_list);\n                     }\n@@ -4182,7 +4176,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             ExprKind::ForLoop(ref pattern, ref subexpression, ref block, label) => {\n                 self.visit_expr(subexpression);\n                 self.ribs[ValueNS].push(Rib::new(NormalRibKind));\n-                self.resolve_pattern(pattern, PatternSource::For, &mut FxHashMap());\n+                self.resolve_pattern(pattern, PatternSource::For, &mut FxHashMap::default());\n \n                 self.resolve_labeled_block(label, expr.id, block);\n \n@@ -4235,7 +4229,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 self.ribs[ValueNS].push(Rib::new(rib_kind));\n                 self.label_ribs.push(Rib::new(rib_kind));\n                 // Resolve arguments:\n-                let mut bindings_list = FxHashMap();\n+                let mut bindings_list = FxHashMap::default();\n                 for argument in &fn_decl.inputs {\n                     self.resolve_pattern(&argument.pat, PatternSource::FnParam, &mut bindings_list);\n                     self.visit_ty(&argument.ty);\n@@ -4380,7 +4374,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         where FilterFn: Fn(Def) -> bool\n     {\n         let mut candidates = Vec::new();\n-        let mut seen_modules = FxHashSet();\n+        let mut seen_modules = FxHashSet::default();\n         let not_local_module = crate_name != keywords::Crate.ident();\n         let mut worklist = vec![(start_module, Vec::<ast::PathSegment>::new(), not_local_module)];\n \n@@ -4499,7 +4493,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                    -> Option<(Module<'a>, ImportSuggestion)>\n     {\n         let mut result = None;\n-        let mut seen_modules = FxHashSet();\n+        let mut seen_modules = FxHashSet::default();\n         let mut worklist = vec![(self.graph_root, Vec::new())];\n \n         while let Some((in_module, path_segments)) = worklist.pop() {\n@@ -4673,7 +4667,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n     fn report_errors(&mut self, krate: &Crate) {\n         self.report_with_use_injections(krate);\n-        let mut reported_spans = FxHashSet();\n+        let mut reported_spans = FxHashSet::default();\n \n         for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {\n             let msg = \"macro-expanded `macro_export` macros from the current crate \\"}, {"sha": "f04bbb962a3094f886b2e1a80a72668becdd1333", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -652,7 +652,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         > = BTreeMap::new();\n \n         let mut errors = false;\n-        let mut seen_spans = FxHashSet();\n+        let mut seen_spans = FxHashSet::default();\n         let mut error_vec = Vec::new();\n         let mut prev_root_id: NodeId = NodeId::new(0);\n         for i in 0 .. self.determined_imports.len() {"}, {"sha": "d77a8bd2a52d15d66d2248aee5a1075e80ee573b", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -110,7 +110,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             span: span_utils.clone(),\n             cur_scope: CRATE_NODE_ID,\n             // mac_defs: FxHashSet::default(),\n-            macro_calls: FxHashSet(),\n+            macro_calls: FxHashSet::default(),\n         }\n     }\n \n@@ -176,7 +176,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         // (and don't include remapping args anymore)\n         let (program, arguments) = {\n             let remap_arg_indices = {\n-                let mut indices = FxHashSet();\n+                let mut indices = FxHashSet::default();\n                 // Args are guaranteed to be valid UTF-8 (checked early)\n                 for (i, e) in env::args().enumerate() {\n                     if e.starts_with(\"--remap-path-prefix=\") {"}, {"sha": "2ad7ab7c4d92753bb4c073f61933743cf3370980", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -86,7 +86,7 @@ fn dropck_outlives<'tcx>(\n             let mut ty_stack = vec![(for_ty, 0)];\n \n             // Set used to detect infinite recursion.\n-            let mut ty_set = FxHashSet();\n+            let mut ty_set = FxHashSet::default();\n \n             let fulfill_cx = &mut FulfillmentContext::new();\n \n@@ -321,8 +321,8 @@ crate fn adt_dtorck_constraint<'a, 'tcx>(\n }\n \n fn dedup_dtorck_constraint<'tcx>(c: &mut DtorckConstraint<'tcx>) {\n-    let mut outlives = FxHashSet();\n-    let mut dtorck_types = FxHashSet();\n+    let mut outlives = FxHashSet::default();\n+    let mut dtorck_types = FxHashSet::default();\n \n     c.outlives.retain(|&val| outlives.replace(val).is_none());\n     c.dtorck_types"}, {"sha": "04290ca6b76e471a836d1995396a921800181760", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -142,7 +142,7 @@ crate fn program_clauses_for_env<'a, 'tcx>(\n ) -> Clauses<'tcx> {\n     debug!(\"program_clauses_for_env(environment={:?})\", environment);\n \n-    let mut last_round = FxHashSet();\n+    let mut last_round = FxHashSet::default();\n     {\n         let mut visitor = ClauseVisitor::new(tcx, &mut last_round);\n         for &clause in environment.clauses {\n@@ -151,7 +151,7 @@ crate fn program_clauses_for_env<'a, 'tcx>(\n     }\n \n     let mut closure = last_round.clone();\n-    let mut next_round = FxHashSet();\n+    let mut next_round = FxHashSet::default();\n     while !last_round.is_empty() {\n         let mut visitor = ClauseVisitor::new(tcx, &mut next_round);\n         for clause in last_round.drain() {"}, {"sha": "0cc9924474c5a699421d14653852ec19b03cb32c", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -887,7 +887,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             .collect::<FxHashMap<_, _>>();\n \n         // Keep track of which fields have already appeared in the pattern.\n-        let mut used_fields = FxHashMap();\n+        let mut used_fields = FxHashMap::default();\n         let mut no_field_errors = true;\n \n         let mut inexistent_fields = vec![];"}, {"sha": "b4ad9cfbc6d51490c576f7226523834d0878de6d", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -89,7 +89,7 @@ pub fn resolve_interior<'a, 'gcx, 'tcx>(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n     let body = fcx.tcx.hir.body(body_id);\n     let mut visitor = InteriorVisitor {\n         fcx,\n-        types: FxHashMap(),\n+        types: FxHashMap::default(),\n         region_scope_tree: fcx.tcx.region_scope_tree(def_id),\n         expr_count: 0,\n     };"}, {"sha": "da96d4f0cba42ce97df75969fcd74e060dd7d655", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -416,7 +416,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         return\n                     }\n \n-                    let mut structural_to_nomimal = FxHashMap();\n+                    let mut structural_to_nomimal = FxHashMap::default();\n \n                     let sig = tcx.fn_sig(def_id);\n                     let sig = sig.no_late_bound_regions().unwrap();"}, {"sha": "f4538dbd25e2fff244659433ea8ba7ac783a2f62", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -396,7 +396,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             return_type,\n             inherent_candidates: Vec::new(),\n             extension_candidates: Vec::new(),\n-            impl_dups: FxHashSet(),\n+            impl_dups: FxHashSet::default(),\n             steps: steps,\n             static_candidates: Vec::new(),\n             allow_similar_names: false,\n@@ -718,7 +718,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         if expr_id == ast::DUMMY_NODE_ID {\n             return Ok(())\n         }\n-        let mut duplicates = FxHashSet();\n+        let mut duplicates = FxHashSet::default();\n         let expr_hir_id = self.tcx.hir.node_to_hir_id(expr_id);\n         let opt_applicable_traits = self.tcx.in_scope_traits(expr_hir_id);\n         if let Some(applicable_traits) = opt_applicable_traits {\n@@ -735,7 +735,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     fn assemble_extension_candidates_for_all_traits(&mut self) -> Result<(), MethodError<'tcx>> {\n-        let mut duplicates = FxHashSet();\n+        let mut duplicates = FxHashSet::default();\n         for trait_info in suggest::all_traits(self.tcx) {\n             if duplicates.insert(trait_info.def_id) {\n                 self.assemble_extension_candidates_for_trait(None, trait_info.def_id)?;\n@@ -800,7 +800,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     fn candidate_method_names(&self) -> Vec<ast::Ident> {\n-        let mut set = FxHashSet();\n+        let mut set = FxHashSet::default();\n         let mut names: Vec<_> = self.inherent_candidates\n             .iter()\n             .chain(&self.extension_candidates)"}, {"sha": "2e0f6600a3518505309172773a9abb16b6beb25b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -750,7 +750,7 @@ fn compute_all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Vec<DefId>\n         });\n \n         // Cross-crate:\n-        let mut external_mods = FxHashSet();\n+        let mut external_mods = FxHashSet::default();\n         fn handle_external_def(tcx: TyCtxt,\n                                traits: &mut Vec<DefId>,\n                                external_mods: &mut FxHashSet<DefId>,"}, {"sha": "5d9fbf72ce2625110751803626a91f49d01be30d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -3510,12 +3510,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ => span_bug!(span, \"non-ADT passed to check_expr_struct_fields\")\n         };\n \n-        let mut remaining_fields = FxHashMap();\n+        let mut remaining_fields = FxHashMap::default();\n         for (i, field) in variant.fields.iter().enumerate() {\n             remaining_fields.insert(field.ident.modern(), (i, field));\n         }\n \n-        let mut seen_fields = FxHashMap();\n+        let mut seen_fields = FxHashMap::default();\n \n         let mut error_happened = false;\n "}, {"sha": "ec773e384af38403d56929375c59c2052a72b4ec", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -475,6 +475,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n     });\n     // Now we build the substituted predicates.\n     let default_obligations = predicates.predicates.iter().flat_map(|&(pred, _)| {\n+        #[derive(Default)]\n         struct CountParams { params: FxHashSet<u32> }\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n@@ -491,7 +492,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n                 true\n             }\n         }\n-        let mut param_count = CountParams { params: FxHashSet() };\n+        let mut param_count = CountParams::default();\n         let has_region = pred.visit_with(&mut param_count);\n         let substituted_pred = pred.subst(fcx.tcx, substs);\n         // Don't check non-defaulted params, dependent defaults (including lifetimes)\n@@ -606,7 +607,7 @@ fn check_existential_types<'a, 'fcx, 'gcx, 'tcx>(\n                     let opaque_node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n                     if may_define_existential_type(tcx, fn_def_id, opaque_node_id) {\n                         trace!(\"check_existential_types may define. Generics: {:#?}\", generics);\n-                        let mut seen: FxHashMap<_, Vec<_>> = FxHashMap();\n+                        let mut seen: FxHashMap<_, Vec<_>> = FxHashMap::default();\n                         for (subst, param) in substs.iter().zip(&generics.params) {\n                             match subst.unpack() {\n                                 ty::subst::UnpackedKind::Type(ty) => match ty.sty {"}, {"sha": "eb52a013b0566ef649d9b075596554e0e7f55f82", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -561,7 +561,7 @@ fn convert_variant<'a, 'tcx>(\n     adt_kind: ty::AdtKind,\n     attribute_def_id: DefId\n ) -> ty::VariantDef {\n-    let mut seen_fields: FxHashMap<ast::Ident, Span> = FxHashMap();\n+    let mut seen_fields: FxHashMap<ast::Ident, Span> = Default::default();\n     let node_id = tcx.hir.as_local_node_id(did).unwrap();\n     let fields = def\n         .fields()"}, {"sha": "edf3ddf7bdbfabd67b4f4e72d316c9524e59e90b", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -173,8 +173,8 @@ fn report_unused_parameter(tcx: TyCtxt,\n fn enforce_impl_items_are_distinct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                              impl_item_refs: &[hir::ImplItemRef])\n {\n-    let mut seen_type_items = FxHashMap();\n-    let mut seen_value_items = FxHashMap();\n+    let mut seen_type_items = FxHashMap::default();\n+    let mut seen_value_items = FxHashMap::default();\n     for impl_item_ref in impl_item_refs {\n         let impl_item = tcx.hir.impl_item(impl_item_ref.id);\n         let seen_items = match impl_item.node {"}, {"sha": "7cc56bc192bb21725e39ceada5aff06a09ea30bc", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -48,7 +48,7 @@ pub fn provide(providers: &mut Providers) {\n fn crate_variances<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum)\n                              -> Lrc<CrateVariancesMap> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n-    let mut arena = arena::TypedArena::new();\n+    let mut arena = arena::TypedArena::default();\n     let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &mut arena);\n     let constraints_cx = constraints::add_constraints_from_crate(terms_cx);\n     Lrc::new(solve::solve_constraints(constraints_cx))"}, {"sha": "26487605bac67f8006e3bcb04dc2356e1287e956", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -178,7 +178,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n                 inner: ImplItem(Impl {\n                     unsafety: hir::Unsafety::Normal,\n                     generics: new_generics,\n-                    provided_trait_methods: FxHashSet(),\n+                    provided_trait_methods: Default::default(),\n                     trait_: Some(trait_.clean(self.cx)),\n                     for_: ty.clean(self.cx),\n                     items: Vec::new(),\n@@ -267,9 +267,9 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n         // all intermediate RegionVids. At the end, all constraints should\n         // be between Regions (aka region variables). This gives us the information\n         // we need to create the Generics.\n-        let mut finished: FxHashMap<_, Vec<_>> = FxHashMap();\n+        let mut finished: FxHashMap<_, Vec<_>> = Default::default();\n \n-        let mut vid_map: FxHashMap<RegionTarget, RegionDeps> = FxHashMap();\n+        let mut vid_map: FxHashMap<RegionTarget, RegionDeps> = Default::default();\n \n         // Flattening is done in two parts. First, we insert all of the constraints\n         // into a map. Each RegionTarget (either a RegionVid or a Region) maps\n@@ -407,7 +407,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n     ) -> FxHashSet<GenericParamDef> {\n         pred.walk_tys()\n             .flat_map(|t| {\n-                let mut regions = FxHashSet();\n+                let mut regions = FxHashSet::default();\n                 tcx.collect_regions(&t, &mut regions);\n \n                 regions.into_iter().flat_map(|r| {\n@@ -576,12 +576,12 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n             ..\n         } = full_generics.clean(self.cx);\n \n-        let mut has_sized = FxHashSet();\n-        let mut ty_to_bounds: FxHashMap<_, FxHashSet<_>> = FxHashMap();\n-        let mut lifetime_to_bounds: FxHashMap<_, FxHashSet<_>> = FxHashMap();\n-        let mut ty_to_traits: FxHashMap<Type, FxHashSet<Type>> = FxHashMap();\n+        let mut has_sized = FxHashSet::default();\n+        let mut ty_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();\n+        let mut lifetime_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();\n+        let mut ty_to_traits: FxHashMap<Type, FxHashSet<Type>> = Default::default();\n \n-        let mut ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)> = FxHashMap();\n+        let mut ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)> = Default::default();\n \n         for (orig_p, p) in clean_where_predicates {\n             match p {"}, {"sha": "49cecd5b04bbcd08ee2f3ef8d305df2129e035ff", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -368,7 +368,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n            .into_iter()\n            .map(|meth| meth.ident.to_string())\n            .collect()\n-    }).unwrap_or(FxHashSet());\n+    }).unwrap_or_default();\n \n     debug!(\"build_impl: impl {:?} for {:?}\", trait_.def_id(), for_.def_id());\n "}, {"sha": "db605e57735aa710d6781e46495df5971577256d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -75,8 +75,7 @@ use self::cfg::Cfg;\n use self::auto_trait::AutoTraitFinder;\n use self::blanket_impl::BlanketImplFinder;\n \n-thread_local!(pub static MAX_DEF_ID: RefCell<FxHashMap<CrateNum, DefId>> =\n-    RefCell::new(FxHashMap()));\n+thread_local!(pub static MAX_DEF_ID: RefCell<FxHashMap<CrateNum, DefId>> = Default::default());\n \n const FN_OUTPUT_NAME: &'static str = \"Output\";\n \n@@ -165,7 +164,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tc\n         // Clean the crate, translating the entire libsyntax AST to one that is\n         // understood by rustdoc.\n         let mut module = self.module.clean(cx);\n-        let mut masked_crates = FxHashSet();\n+        let mut masked_crates = FxHashSet::default();\n \n         match module.inner {\n             ModuleItem(ref module) => {\n@@ -1585,7 +1584,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         // Note that associated types also have a sized bound by default, but we\n         // don't actually know the set of associated types right here so that's\n         // handled in cleaning associated types\n-        let mut sized_params = FxHashSet();\n+        let mut sized_params = FxHashSet::default();\n         where_predicates.retain(|pred| {\n             match *pred {\n                 WP::BoundPredicate { ty: Generic(ref g), ref bounds } => {\n@@ -2447,8 +2446,8 @@ impl Clean<Type> for hir::Ty {\n \n                 if let Some(&hir::ItemKind::Ty(ref ty, ref generics)) = alias {\n                     let provided_params = &path.segments.last().expect(\"segments were empty\");\n-                    let mut ty_substs = FxHashMap();\n-                    let mut lt_substs = FxHashMap();\n+                    let mut ty_substs = FxHashMap::default();\n+                    let mut lt_substs = FxHashMap::default();\n                     provided_params.with_generic_args(|generic_args| {\n                         let mut indices: GenericParamCount = Default::default();\n                         for param in generics.params.iter() {\n@@ -3388,7 +3387,7 @@ impl Clean<Vec<Item>> for doctree::Impl {\n                   .into_iter()\n                   .map(|meth| meth.ident.to_string())\n                   .collect()\n-        }).unwrap_or(FxHashSet());\n+        }).unwrap_or_default();\n \n         ret.push(Item {\n             name: None,\n@@ -3502,7 +3501,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n         let path = self.path.clean(cx);\n         let inner = if self.glob {\n             if !denied {\n-                let mut visited = FxHashSet();\n+                let mut visited = FxHashSet::default();\n                 if let Some(items) = inline::try_inline_glob(cx, path.def, &mut visited) {\n                     return items;\n                 }\n@@ -3512,7 +3511,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n         } else {\n             let name = self.name;\n             if !denied {\n-                let mut visited = FxHashSet();\n+                let mut visited = FxHashSet::default();\n                 if let Some(items) = inline::try_inline(cx, path.def, name, &mut visited) {\n                     return items;\n                 }"}, {"sha": "49f13df64d6ea15dade9a106083fb3ff3e0eaf4f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -539,9 +539,9 @@ pub fn run_core(search_paths: SearchPaths,\n                 lt_substs: Default::default(),\n                 impl_trait_bounds: Default::default(),\n                 send_trait: send_trait,\n-                fake_def_ids: RefCell::new(FxHashMap()),\n-                all_fake_def_ids: RefCell::new(FxHashSet()),\n-                generated_synthetics: RefCell::new(FxHashSet()),\n+                fake_def_ids: Default::default(),\n+                all_fake_def_ids: Default::default(),\n+                generated_synthetics: Default::default(),\n                 all_traits: tcx.all_traits(LOCAL_CRATE).to_vec(),\n             };\n             debug!(\"crate: {:?}\", tcx.hir.krate());"}, {"sha": "dda0f37c3f95bfeffaaaf4e3c7e4d5616fd2f5ab", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -513,7 +513,7 @@ pub fn run(mut krate: clean::Crate,\n         src_root,\n         passes,\n         include_sources: true,\n-        local_sources: FxHashMap(),\n+        local_sources: Default::default(),\n         issue_tracker_base_url: None,\n         layout: layout::Layout {\n             logo: String::new(),\n@@ -522,7 +522,7 @@ pub fn run(mut krate: clean::Crate,\n             krate: krate.name.clone(),\n         },\n         css_file_extension: css_file_extension.clone(),\n-        created_dirs: RefCell::new(FxHashSet()),\n+        created_dirs: Default::default(),\n         sort_modules_alphabetically,\n         themes,\n         resource_suffix,\n@@ -591,29 +591,29 @@ pub fn run(mut krate: clean::Crate,\n         .collect();\n \n     let mut cache = Cache {\n-        impls: FxHashMap(),\n+        impls: Default::default(),\n         external_paths,\n         exact_paths,\n-        paths: FxHashMap(),\n-        implementors: FxHashMap(),\n+        paths: Default::default(),\n+        implementors: Default::default(),\n         stack: Vec::new(),\n         parent_stack: Vec::new(),\n         search_index: Vec::new(),\n         parent_is_trait_impl: false,\n-        extern_locations: FxHashMap(),\n-        primitive_locations: FxHashMap(),\n+        extern_locations: Default::default(),\n+        primitive_locations: Default::default(),\n         stripped_mod: false,\n         access_levels,\n         crate_version: krate.version.take(),\n         orphan_impl_items: Vec::new(),\n         orphan_trait_impls: Vec::new(),\n-        traits: krate.external_traits.lock().replace(FxHashMap()),\n+        traits: krate.external_traits.lock().replace(Default::default()),\n         deref_trait_did,\n         deref_mut_trait_did,\n         owned_box_did,\n-        masked_crates: mem::replace(&mut krate.masked_crates, FxHashSet()),\n+        masked_crates: mem::replace(&mut krate.masked_crates, Default::default()),\n         typarams: external_typarams,\n-        aliases: FxHashMap(),\n+        aliases: Default::default(),\n     };\n \n     // Cache where all our extern crates are located\n@@ -674,7 +674,7 @@ pub fn run(mut krate: clean::Crate,\n \n /// Build the search index from the collected metadata\n fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n-    let mut nodeid_to_pathid = FxHashMap();\n+    let mut nodeid_to_pathid = FxHashMap::default();\n     let mut crate_items = Vec::with_capacity(cache.search_index.len());\n     let mut crate_paths = Vec::<Json>::new();\n \n@@ -1448,7 +1448,7 @@ impl DocFolder for Cache {\n                 // Figure out the id of this impl. This may map to a\n                 // primitive rather than always to a struct/enum.\n                 // Note: matching twice to restrict the lifetime of the `i` borrow.\n-                let mut dids = FxHashSet();\n+                let mut dids = FxHashSet::default();\n                 if let clean::Item { inner: clean::ImplItem(ref i), .. } = item {\n                     match i.for_ {\n                         clean::ResolvedPath { did, .. } |\n@@ -2940,7 +2940,7 @@ fn item_trait(\n     if let Some(implementors) = cache.implementors.get(&it.def_id) {\n         // The DefId is for the first Type found with that name. The bool is\n         // if any Types with the same name but different DefId have been found.\n-        let mut implementor_dups: FxHashMap<&str, (DefId, bool)> = FxHashMap();\n+        let mut implementor_dups: FxHashMap<&str, (DefId, bool)> = FxHashMap::default();\n         for implementor in implementors {\n             match implementor.inner_impl().for_ {\n                 clean::ResolvedPath { ref path, did, is_generic: false, .. } |\n@@ -3793,7 +3793,7 @@ fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n                             out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n                             assoc_type(&mut out, it, &[],\n                                        Some(&tydef.type_),\n-                                       AssocItemLink::GotoSource(t_did, &FxHashSet()))?;\n+                                       AssocItemLink::GotoSource(t_did, &FxHashSet::default()))?;\n                             out.push_str(\";</span>\");\n                         }\n                     }\n@@ -4703,7 +4703,7 @@ fn get_index_type(clean_type: &clean::Type) -> Type {\n /// picked up the impl\n fn collect_paths_for_type(first_ty: clean::Type) -> Vec<String> {\n     let mut out = Vec::new();\n-    let mut visited = FxHashSet();\n+    let mut visited = FxHashSet::default();\n     let mut work = VecDeque::new();\n     let cache = cache();\n "}, {"sha": "5d221d3006f3eb58384516309754b7c57a246b97", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n         cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>\n     ) -> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n         // If the root is re-exported, terminate all recursion.\n-        let mut stack = FxHashSet();\n+        let mut stack = FxHashSet::default();\n         stack.insert(ast::CRATE_NODE_ID);\n         RustdocVisitor {\n             module: Module::new(None),\n@@ -64,7 +64,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n             view_item_stack: stack,\n             inlining: false,\n             inside_public_path: true,\n-            exact_paths: Some(FxHashMap()),\n+            exact_paths: Some(FxHashMap::default()),\n         }\n     }\n "}, {"sha": "5d1f42c83f44999867cf7a21aa927856862f2864", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> LibEmbargoVisitor<'a, 'tcx, 'rcx, 'cstore> {\n             cx,\n             access_levels: RefMut::map(cx.renderinfo.borrow_mut(), |ri| &mut ri.access_levels),\n             prev_level: Some(AccessLevel::Public),\n-            visited_mods: FxHashSet()\n+            visited_mods: FxHashSet::default()\n         }\n     }\n "}, {"sha": "a110248439ee5b1e9822be4751fb3826b718f012", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -1930,7 +1930,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     let incomplete_features = [\"generic_associated_types\"];\n \n     let mut features = Features::new();\n-    let mut edition_enabled_features = FxHashMap();\n+    let mut edition_enabled_features = FxHashMap::default();\n \n     for &edition in ALL_EDITIONS {\n         if edition <= crate_edition {"}, {"sha": "5054f18b020f62d33a3617b31ccc7be99521224d", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -124,6 +124,7 @@ impl StableFilemapId {\n // SourceMap\n //\n \n+#[derive(Default)]\n pub(super) struct SourceMapFiles {\n     pub(super) file_maps: Vec<Lrc<SourceFile>>,\n     stable_id_to_source_file: FxHashMap<StableFilemapId, Lrc<SourceFile>>\n@@ -143,10 +144,7 @@ pub struct SourceMap {\n impl SourceMap {\n     pub fn new(path_mapping: FilePathMapping) -> SourceMap {\n         SourceMap {\n-            files: Lock::new(SourceMapFiles {\n-                file_maps: Vec::new(),\n-                stable_id_to_source_file: FxHashMap(),\n-            }),\n+            files: Default::default(),\n             file_loader: Box::new(RealFileLoader),\n             path_mapping,\n             doctest_offset: None,\n@@ -166,10 +164,7 @@ impl SourceMap {\n                             path_mapping: FilePathMapping)\n                             -> SourceMap {\n         SourceMap {\n-            files: Lock::new(SourceMapFiles {\n-                file_maps: Vec::new(),\n-                stable_id_to_source_file: FxHashMap(),\n-            }),\n+            files: Default::default(),\n             file_loader: file_loader,\n             path_mapping,\n             doctest_offset: None,"}, {"sha": "bc52a3e1c7c297ee35cd090f4e94e148b1b1b50f", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -156,7 +156,7 @@ impl Mark {\n     pub fn least_ancestor(mut a: Mark, mut b: Mark) -> Mark {\n         HygieneData::with(|data| {\n             // Compute the path from a to the root\n-            let mut a_path = FxHashSet::<Mark>();\n+            let mut a_path = FxHashSet::<Mark>::default();\n             while a != Mark::root() {\n                 a_path.insert(a);\n                 a = data.marks[a.0 as usize].parent;"}, {"sha": "361353c82e25cbc1a980a5d82ef2a7026ce03ee3", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -224,6 +224,7 @@ impl<T: ::std::ops::Deref<Target=str>> PartialEq<T> for Symbol {\n }\n \n // The &'static strs in this type actually point into the arena\n+#[derive(Default)]\n pub struct Interner {\n     arena: DroplessArena,\n     names: FxHashMap<&'static str, Symbol>,\n@@ -232,17 +233,8 @@ pub struct Interner {\n }\n \n impl Interner {\n-    pub fn new() -> Self {\n-        Interner {\n-            arena: DroplessArena::new(),\n-            names: Default::default(),\n-            strings: Default::default(),\n-            gensyms: Default::default(),\n-        }\n-    }\n-\n     fn prefill(init: &[&str]) -> Self {\n-        let mut this = Interner::new();\n+        let mut this = Interner::default();\n         for &string in init {\n             if string == \"\" {\n                 // We can't allocate empty strings in the arena, so handle this here\n@@ -697,7 +689,7 @@ mod tests {\n \n     #[test]\n     fn interner_tests() {\n-        let mut i: Interner = Interner::new();\n+        let mut i: Interner = Interner::default();\n         // first one is zero:\n         assert_eq!(i.intern(\"dog\"), Symbol(0));\n         // re-use gets the same entry:"}, {"sha": "5ab6b99eb62f95e194273f8c7f280151318cb7e6", "filename": "src/test/compile-fail-fulldeps/dropck_tarena_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -122,6 +122,6 @@ fn f<'a>(arena: &'a TypedArena<C<'a>>) {\n }\n \n fn main() {\n-    let arena = TypedArena::new();\n+    let arena = TypedArena::default();\n     f(&arena);\n } //~^ ERROR `arena` does not live long enough"}, {"sha": "e2231b0814f3a75c803345c969be7e984909f68c", "filename": "src/test/compile-fail-fulldeps/dropck_tarena_unsound_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -47,7 +47,7 @@ impl<'a> HasId for &'a usize { fn count(&self) -> usize { 1 } }\n fn f<'a>(_arena: &'a TypedArena<C<'a>>) {}\n \n fn main() {\n-    let arena: TypedArena<C> = TypedArena::new();\n+    let arena: TypedArena<C> = TypedArena::default();\n     f(&arena);\n } //~^ ERROR `arena` does not live long enough\n "}, {"sha": "9fa0b40d49c20a2dd77ccb7553aa30cc27a25ffe", "filename": "src/test/run-pass-fulldeps/dropck_tarena_sound_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Ftest%2Frun-pass-fulldeps%2Fdropck_tarena_sound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Ftest%2Frun-pass-fulldeps%2Fdropck_tarena_sound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fdropck_tarena_sound_drop.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -46,6 +46,6 @@ impl<'a> HasId for &'a usize { fn count(&self) -> usize { 1 } }\n fn f<'a, 'b>(_arena: &'a TypedArena<C<'b>>) {}\n \n fn main() {\n-    let arena: TypedArena<C> = TypedArena::new();\n+    let arena: TypedArena<C> = TypedArena::default();\n     f(&arena);\n }"}, {"sha": "70c19df9788b25fd8a325c285932f58b9269cb0b", "filename": "src/test/run-pass-fulldeps/regions-mock-tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Ftest%2Frun-pass-fulldeps%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94273f4d8e463cac45486328294bb1c2bbc10170/src%2Ftest%2Frun-pass-fulldeps%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fregions-mock-tcx.rs?ref=94273f4d8e463cac45486328294bb1c2bbc10170", "patch": "@@ -133,8 +133,8 @@ fn compute_types<'tcx,'ast>(tcx: &mut TypeContext<'tcx,'ast>,\n }\n \n pub fn main() {\n-    let ty_arena = TypedArena::new();\n-    let ast_arena = TypedArena::new();\n+    let ty_arena = TypedArena::default();\n+    let ast_arena = TypedArena::default();\n     let mut tcx = TypeContext::new(&ty_arena, &ast_arena);\n     let ast = tcx.ast(ExprInt);\n     let ty = compute_types(&mut tcx, ast);"}]}