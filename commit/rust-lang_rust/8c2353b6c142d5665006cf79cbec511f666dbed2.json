{"sha": "8c2353b6c142d5665006cf79cbec511f666dbed2", "node_id": "C_kwDOAAsO6NoAKDhjMjM1M2I2YzE0MmQ1NjY1MDA2Y2Y3OWNiZWM1MTFmNjY2ZGJlZDI", "commit": {"author": {"name": "Fausto", "email": "mi9uel9@gmail.com", "date": "2022-03-18T21:13:38Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-03-31T21:20:03Z"}, "message": "remove find_use_placement\n\nA more robust solution to finding where to place use suggestions was added.\nThe algorithm uses the AST to find the span for the suggestion so we pass this span\ndown to the HIR during lowering and use it.\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "0cbd792df8f22b7f9b4dbece1af163ebda41e4fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cbd792df8f22b7f9b4dbece1af163ebda41e4fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c2353b6c142d5665006cf79cbec511f666dbed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2353b6c142d5665006cf79cbec511f666dbed2", "html_url": "https://github.com/rust-lang/rust/commit/8c2353b6c142d5665006cf79cbec511f666dbed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c2353b6c142d5665006cf79cbec511f666dbed2/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0677edc86e342f333d4828b0ee1ef395a4e70fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0677edc86e342f333d4828b0ee1ef395a4e70fe5", "html_url": "https://github.com/rust-lang/rust/commit/0677edc86e342f333d4828b0ee1ef395a4e70fe5"}], "stats": {"total": 205, "additions": 57, "deletions": 148}, "files": [{"sha": "5eab21bf79a90c9a95b57a41534df927793c3832", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=8c2353b6c142d5665006cf79cbec511f666dbed2", "patch": "@@ -52,7 +52,9 @@ pub(super) fn index_hir<'hir>(\n     };\n \n     match item {\n-        OwnerNode::Crate(citem) => collector.visit_mod(&citem, citem.inner, hir::CRATE_HIR_ID),\n+        OwnerNode::Crate(citem) => {\n+            collector.visit_mod(&citem, citem.spans.inner_span, hir::CRATE_HIR_ID)\n+        }\n         OwnerNode::Item(item) => collector.visit_item(item),\n         OwnerNode::TraitItem(item) => collector.visit_trait_item(item),\n         OwnerNode::ImplItem(item) => collector.visit_impl_item(item),"}, {"sha": "a8bd8c92a41c47b54d45329720f092185260300f", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=8c2353b6c142d5665006cf79cbec511f666dbed2", "patch": "@@ -124,7 +124,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         debug_assert_eq!(self.resolver.local_def_id(CRATE_NODE_ID), CRATE_DEF_ID);\n \n         self.with_lctx(CRATE_NODE_ID, |lctx| {\n-            let module = lctx.lower_mod(&c.items, c.spans.inner_span);\n+            let module = lctx.lower_mod(&c.items, &c.spans);\n             lctx.lower_attrs(hir::CRATE_HIR_ID, &c.attrs);\n             hir::OwnerNode::Crate(lctx.arena.alloc(module))\n         })\n@@ -186,9 +186,12 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n }\n \n impl<'hir> LoweringContext<'_, 'hir> {\n-    pub(super) fn lower_mod(&mut self, items: &[P<Item>], inner: Span) -> hir::Mod<'hir> {\n+    pub(super) fn lower_mod(&mut self, items: &[P<Item>], spans: &ModSpans) -> hir::Mod<'hir> {\n         hir::Mod {\n-            inner: self.lower_span(inner),\n+            spans: hir::ModSpans {\n+                inner_span: self.lower_span(spans.inner_span),\n+                inject_use_span: self.lower_span(spans.inject_use_span),\n+            },\n             item_ids: self.arena.alloc_from_iter(items.iter().flat_map(|x| self.lower_item_ref(x))),\n         }\n     }\n@@ -308,8 +311,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 })\n             }\n             ItemKind::Mod(_, ref mod_kind) => match mod_kind {\n-                ModKind::Loaded(items, _, ModSpans { inner_span, inject_use_span: _ }) => {\n-                    hir::ItemKind::Mod(self.lower_mod(items, *inner_span))\n+                ModKind::Loaded(items, _, spans) => {\n+                    hir::ItemKind::Mod(self.lower_mod(items, spans))\n                 }\n                 ModKind::Unloaded => panic!(\"`mod` items should have been loaded by now\"),\n             },"}, {"sha": "5e55ca779018036a3039705bf8be6811d7b93a5d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=8c2353b6c142d5665006cf79cbec511f666dbed2", "patch": "@@ -2522,11 +2522,17 @@ impl FnRetTy<'_> {\n \n #[derive(Encodable, Debug, HashStable_Generic)]\n pub struct Mod<'hir> {\n+    pub spans: ModSpans,\n+    pub item_ids: &'hir [ItemId],\n+}\n+\n+#[derive(Copy, Clone, Debug, HashStable_Generic, Encodable)]\n+pub struct ModSpans {\n     /// A span from the first token past `{` to the last token until `}`.\n     /// For `mod foo;`, the inner span ranges from the first token\n     /// to the last token in the external file.\n-    pub inner: Span,\n-    pub item_ids: &'hir [ItemId],\n+    pub inner_span: Span,\n+    pub inject_use_span: Span,\n }\n \n #[derive(Debug, HashStable_Generic)]\n@@ -3024,8 +3030,8 @@ impl<'hir> OwnerNode<'hir> {\n             OwnerNode::Item(Item { span, .. })\n             | OwnerNode::ForeignItem(ForeignItem { span, .. })\n             | OwnerNode::ImplItem(ImplItem { span, .. })\n-            | OwnerNode::TraitItem(TraitItem { span, .. })\n-            | OwnerNode::Crate(Mod { inner: span, .. }) => *span,\n+            | OwnerNode::TraitItem(TraitItem { span, .. }) => *span,\n+            OwnerNode::Crate(Mod { spans: ModSpans { inner_span, .. }, .. }) => *inner_span,\n         }\n     }\n "}, {"sha": "8c3b1730b1341258c1ced3e149ec97e2b27cd47b", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=8c2353b6c142d5665006cf79cbec511f666dbed2", "patch": "@@ -586,7 +586,7 @@ impl<'hir> Map<'hir> {\n             Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {\n                 (m, span, hir_id)\n             }\n-            Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),\n+            Some(OwnerNode::Crate(item)) => (item, item.spans.inner_span, hir_id),\n             node => panic!(\"not a module: {:?}\", node),\n         }\n     }\n@@ -1014,7 +1014,7 @@ impl<'hir> Map<'hir> {\n             Node::Infer(i) => i.span,\n             Node::Visibility(v) => bug!(\"unexpected Visibility {:?}\", v),\n             Node::Local(local) => local.span,\n-            Node::Crate(item) => item.inner,\n+            Node::Crate(item) => item.spans.inner_span,\n         };\n         Some(span)\n     }"}, {"sha": "22d0a20395ec7d77b62a9811f14049940e55f1a2", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=8c2353b6c142d5665006cf79cbec511f666dbed2", "patch": "@@ -1095,11 +1095,11 @@ impl<'tcx> DumpVisitor<'tcx> {\n \n         let sm = self.tcx.sess.source_map();\n         let krate_mod = self.tcx.hir().root_module();\n-        let filename = sm.span_to_filename(krate_mod.inner);\n+        let filename = sm.span_to_filename(krate_mod.spans.inner_span);\n         let data_id = id_from_hir_id(id, &self.save_ctxt);\n         let children =\n             krate_mod.item_ids.iter().map(|i| id_from_def_id(i.def_id.to_def_id())).collect();\n-        let span = self.span_from_span(krate_mod.inner);\n+        let span = self.span_from_span(krate_mod.spans.inner_span);\n         let attrs = self.tcx.hir().attrs(id);\n \n         self.dumper.dump_def("}, {"sha": "102268c6ca3524b1b7e39c51bb02217f6925f148", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=8c2353b6c142d5665006cf79cbec511f666dbed2", "patch": "@@ -282,7 +282,7 @@ impl<'tcx> SaveContext<'tcx> {\n                 let qualname = format!(\"::{}\", self.tcx.def_path_str(def_id));\n \n                 let sm = self.tcx.sess.source_map();\n-                let filename = sm.span_to_filename(m.inner);\n+                let filename = sm.span_to_filename(m.spans.inner_span);\n \n                 filter!(self.span_utils, item.ident.span);\n "}, {"sha": "83c6b6362feceb0e62622c208d7159d52a809660", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 21, "deletions": 125, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2353b6c142d5665006cf79cbec511f666dbed2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=8c2353b6c142d5665006cf79cbec511f666dbed2", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n };\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1473,12 +1473,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn suggest_use_candidates(\n-        &self,\n-        err: &mut Diagnostic,\n-        mut msg: String,\n-        candidates: Vec<DefId>,\n-    ) {\n+    fn suggest_use_candidates(&self, err: &mut Diagnostic, msg: String, candidates: Vec<DefId>) {\n         let parent_map = self.tcx.visible_parent_map(());\n \n         // Separate out candidates that must be imported with a glob, because they are named `_`\n@@ -1502,80 +1497,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         });\n \n         let module_did = self.tcx.parent_module(self.body_id);\n-        let (span, found_use) = find_use_placement(self.tcx, module_did);\n-        if let Some(span) = span {\n-            let path_strings = candidates.iter().map(|trait_did| {\n-                // Produce an additional newline to separate the new use statement\n-                // from the directly following item.\n-                let additional_newline = if found_use { \"\" } else { \"\\n\" };\n-                format!(\n-                    \"use {};\\n{}\",\n-                    with_crate_prefix!(self.tcx.def_path_str(*trait_did)),\n-                    additional_newline\n-                )\n-            });\n+        let (module, _, _) = self.tcx.hir().get_module(module_did);\n+        let span = module.spans.inject_use_span;\n \n-            let glob_path_strings = globs.iter().map(|trait_did| {\n-                let parent_did = parent_map.get(trait_did).unwrap();\n+        let path_strings = candidates.iter().map(|trait_did| {\n+            format!(\"use {};\\n\", with_crate_prefix!(self.tcx.def_path_str(*trait_did)),)\n+        });\n \n-                // Produce an additional newline to separate the new use statement\n-                // from the directly following item.\n-                let additional_newline = if found_use { \"\" } else { \"\\n\" };\n-                format!(\n-                    \"use {}::*; // trait {}\\n{}\",\n-                    with_crate_prefix!(self.tcx.def_path_str(*parent_did)),\n-                    self.tcx.item_name(*trait_did),\n-                    additional_newline\n-                )\n-            });\n+        let glob_path_strings = globs.iter().map(|trait_did| {\n+            let parent_did = parent_map.get(trait_did).unwrap();\n+            format!(\n+                \"use {}::*; // trait {}\\n\",\n+                with_crate_prefix!(self.tcx.def_path_str(*parent_did)),\n+                self.tcx.item_name(*trait_did),\n+            )\n+        });\n \n-            err.span_suggestions(\n-                span,\n-                &msg,\n-                path_strings.chain(glob_path_strings),\n-                Applicability::MaybeIncorrect,\n-            );\n-        } else {\n-            let limit = if candidates.len() + globs.len() == 5 { 5 } else { 4 };\n-            for (i, trait_did) in candidates.iter().take(limit).enumerate() {\n-                if candidates.len() + globs.len() > 1 {\n-                    msg.push_str(&format!(\n-                        \"\\ncandidate #{}: `use {};`\",\n-                        i + 1,\n-                        with_crate_prefix!(self.tcx.def_path_str(*trait_did))\n-                    ));\n-                } else {\n-                    msg.push_str(&format!(\n-                        \"\\n`use {};`\",\n-                        with_crate_prefix!(self.tcx.def_path_str(*trait_did))\n-                    ));\n-                }\n-            }\n-            for (i, trait_did) in\n-                globs.iter().take(limit.saturating_sub(candidates.len())).enumerate()\n-            {\n-                let parent_did = parent_map.get(trait_did).unwrap();\n-\n-                if candidates.len() + globs.len() > 1 {\n-                    msg.push_str(&format!(\n-                        \"\\ncandidate #{}: `use {}::*; // trait {}`\",\n-                        candidates.len() + i + 1,\n-                        with_crate_prefix!(self.tcx.def_path_str(*parent_did)),\n-                        self.tcx.item_name(*trait_did),\n-                    ));\n-                } else {\n-                    msg.push_str(&format!(\n-                        \"\\n`use {}::*; // trait {}`\",\n-                        with_crate_prefix!(self.tcx.def_path_str(*parent_did)),\n-                        self.tcx.item_name(*trait_did),\n-                    ));\n-                }\n-            }\n-            if candidates.len() > limit {\n-                msg.push_str(&format!(\"\\nand {} others\", candidates.len() + globs.len() - limit));\n-            }\n-            err.note(&msg);\n-        }\n+        err.span_suggestions(\n+            span,\n+            &msg,\n+            path_strings.chain(glob_path_strings),\n+            Applicability::MaybeIncorrect,\n+        );\n     }\n \n     fn suggest_valid_traits(\n@@ -2100,53 +2043,6 @@ pub fn all_traits(tcx: TyCtxt<'_>) -> Vec<TraitInfo> {\n     tcx.all_traits().map(|def_id| TraitInfo { def_id }).collect()\n }\n \n-fn find_use_placement<'tcx>(tcx: TyCtxt<'tcx>, target_module: LocalDefId) -> (Option<Span>, bool) {\n-    // FIXME(#94854): this code uses an out-of-date method for inferring a span\n-    // to suggest. It would be better to thread the ModSpans from the AST into\n-    // the HIR, and then use that to drive the suggestion here.\n-\n-    let mut span = None;\n-    let mut found_use = false;\n-    let (module, _, _) = tcx.hir().get_module(target_module);\n-\n-    // Find a `use` statement.\n-    for &item_id in module.item_ids {\n-        let item = tcx.hir().item(item_id);\n-        match item.kind {\n-            hir::ItemKind::Use(..) => {\n-                // Don't suggest placing a `use` before the prelude\n-                // import or other generated ones.\n-                if !item.span.from_expansion() {\n-                    span = Some(item.span.shrink_to_lo());\n-                    found_use = true;\n-                    break;\n-                }\n-            }\n-            // Don't place `use` before `extern crate`...\n-            hir::ItemKind::ExternCrate(_) => {}\n-            // ...but do place them before the first other item.\n-            _ => {\n-                if span.map_or(true, |span| item.span < span) {\n-                    if !item.span.from_expansion() {\n-                        span = Some(item.span.shrink_to_lo());\n-                        // Don't insert between attributes and an item.\n-                        let attrs = tcx.hir().attrs(item.hir_id());\n-                        // Find the first attribute on the item.\n-                        // FIXME: This is broken for active attributes.\n-                        for attr in attrs {\n-                            if !attr.span.is_dummy() && span.map_or(true, |span| attr.span < span) {\n-                                span = Some(attr.span.shrink_to_lo());\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    (span, found_use)\n-}\n-\n fn print_disambiguation_help<'tcx>(\n     item_name: Ident,\n     args: Option<&'tcx [hir::Expr<'tcx>]>,"}, {"sha": "06c63ec97d7f2f41f0a5f235e4fa77dfd85b1b1b", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c2353b6c142d5665006cf79cbec511f666dbed2/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2353b6c142d5665006cf79cbec511f666dbed2/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=8c2353b6c142d5665006cf79cbec511f666dbed2", "patch": "@@ -119,11 +119,14 @@ impl<'tcx> Visitor<'tcx> for SpanMapVisitor<'tcx> {\n     fn visit_mod(&mut self, m: &'tcx Mod<'tcx>, span: Span, id: HirId) {\n         // To make the difference between \"mod foo {}\" and \"mod foo;\". In case we \"import\" another\n         // file, we want to link to it. Otherwise no need to create a link.\n-        if !span.overlaps(m.inner) {\n+        if !span.overlaps(m.spans.inner_span) {\n             // Now that we confirmed it's a file import, we want to get the span for the module\n             // name only and not all the \"mod foo;\".\n             if let Some(Node::Item(item)) = self.tcx.hir().find(id) {\n-                self.matches.insert(item.ident.span, LinkFromSrc::Local(clean::Span::new(m.inner)));\n+                self.matches.insert(\n+                    item.ident.span,\n+                    LinkFromSrc::Local(clean::Span::new(m.spans.inner_span)),\n+                );\n             }\n         }\n         intravisit::walk_mod(self, m, id);"}, {"sha": "75276d18fe5e9374e22bc15e941956d2cf2ab023", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c2353b6c142d5665006cf79cbec511f666dbed2/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2353b6c142d5665006cf79cbec511f666dbed2/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=8c2353b6c142d5665006cf79cbec511f666dbed2", "patch": "@@ -154,7 +154,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         m: &'tcx hir::Mod<'tcx>,\n         name: Symbol,\n     ) -> Module<'tcx> {\n-        let mut om = Module::new(name, id, m.inner);\n+        let mut om = Module::new(name, id, m.spans.inner_span);\n         let def_id = self.cx.tcx.hir().local_def_id(id).to_def_id();\n         // Keep track of if there were any private modules in the path.\n         let orig_inside_public_path = self.inside_public_path;"}, {"sha": "69aba3ae9b4e75dda1e4738479979020991ebd9a", "filename": "src/test/ui/imports/overlapping_pub_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c2353b6c142d5665006cf79cbec511f666dbed2/src%2Ftest%2Fui%2Fimports%2Foverlapping_pub_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2353b6c142d5665006cf79cbec511f666dbed2/src%2Ftest%2Fui%2Fimports%2Foverlapping_pub_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Foverlapping_pub_trait.rs?ref=8c2353b6c142d5665006cf79cbec511f666dbed2", "patch": "@@ -4,10 +4,10 @@\n  * This crate declares two public paths, `m::Tr` and `prelude::_`. Make sure we prefer the former.\n  */\n extern crate overlapping_pub_trait_source;\n+//~^ HELP the following trait is implemented but not in scope; perhaps add a `use` for it:\n+//~| SUGGESTION overlapping_pub_trait_source::m::Tr\n \n fn main() {\n-    //~^ HELP the following trait is implemented but not in scope; perhaps add a `use` for it:\n-    //~| SUGGESTION overlapping_pub_trait_source::m::Tr\n     use overlapping_pub_trait_source::S;\n     S.method();\n     //~^ ERROR no method named `method` found for struct `S` in the current scope [E0599]"}, {"sha": "c38fb17b97649719bbf605f1b89ea3835504e816", "filename": "src/test/ui/imports/unnamed_pub_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c2353b6c142d5665006cf79cbec511f666dbed2/src%2Ftest%2Fui%2Fimports%2Funnamed_pub_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2353b6c142d5665006cf79cbec511f666dbed2/src%2Ftest%2Fui%2Fimports%2Funnamed_pub_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funnamed_pub_trait.rs?ref=8c2353b6c142d5665006cf79cbec511f666dbed2", "patch": "@@ -5,10 +5,10 @@\n  * importing it by name, and instead we suggest importing it by glob.\n  */\n extern crate unnamed_pub_trait_source;\n+//~^ HELP the following trait is implemented but not in scope; perhaps add a `use` for it:\n+//~| SUGGESTION unnamed_pub_trait_source::prelude::*; // trait Tr\n \n fn main() {\n-    //~^ HELP the following trait is implemented but not in scope; perhaps add a `use` for it:\n-    //~| SUGGESTION unnamed_pub_trait_source::prelude::*; // trait Tr\n     use unnamed_pub_trait_source::S;\n     S.method();\n     //~^ ERROR no method named `method` found for struct `S` in the current scope [E0599]"}, {"sha": "37335da060e42f5eaec8a766dea247bb3ec91752", "filename": "src/test/ui/suggestions/use-placement-typeck.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c2353b6c142d5665006cf79cbec511f666dbed2/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8c2353b6c142d5665006cf79cbec511f666dbed2/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.fixed?ref=8c2353b6c142d5665006cf79cbec511f666dbed2", "patch": "@@ -7,7 +7,6 @@\n #![allow(unused)]\n \n use m::Foo;\n-\n fn main() {\n     let s = m::S;\n     s.abc(); //~ ERROR no method named `abc`"}]}