{"sha": "7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiM2Q2YWZlMGExZDdmYjJjOTE4ZTliYTFlZDhjMmQ4NTljNmU3NzI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-20T16:29:56Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T16:06:55Z"}, "message": "rustc: de-@ mono_id.", "tree": {"sha": "fed27dadc4443ddfd85efc4a1e061b2ad4a85651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fed27dadc4443ddfd85efc4a1e061b2ad4a85651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772", "html_url": "https://github.com/rust-lang/rust/commit/7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fa7be659c00eb0cc2fc7cce1ad1ab65b2219637", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa7be659c00eb0cc2fc7cce1ad1ab65b2219637", "html_url": "https://github.com/rust-lang/rust/commit/5fa7be659c00eb0cc2fc7cce1ad1ab65b2219637"}], "stats": {"total": 71, "additions": 37, "deletions": 34}, "files": [{"sha": "d1be86dfdbeef5753d950d97e83ee79f82abb4c3", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772", "patch": "@@ -686,22 +686,6 @@ pub fn is_null(val: ValueRef) -> bool {\n     }\n }\n \n-// Used to identify cached monomorphized functions and vtables\n-#[deriving(Eq, TotalEq, Hash)]\n-pub struct MonoParamId {\n-    pub subst: ty::t,\n-    // Do we really need the vtables to be hashed? Isn't the type enough?\n-    pub vtables: Vec<mono_id>\n-}\n-\n-#[deriving(Eq, TotalEq, Hash)]\n-pub struct mono_id_ {\n-    pub def: ast::DefId,\n-    pub params: Vec<MonoParamId>\n-}\n-\n-pub type mono_id = @mono_id_;\n-\n pub fn monomorphize_type(bcx: &Block, t: ty::t) -> ty::t {\n     match bcx.fcx.param_substs {\n         Some(substs) => {"}, {"sha": "edd801d134719bc7d515b1c648d1ecb220619722", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772", "patch": "@@ -20,8 +20,9 @@ use middle::resolve;\n use middle::trans::adt;\n use middle::trans::base;\n use middle::trans::builder::Builder;\n-use middle::trans::common::{mono_id,ExternMap,tydesc_info,BuilderRef_res,Stats};\n+use middle::trans::common::{ExternMap,tydesc_info,BuilderRef_res,Stats};\n use middle::trans::debuginfo;\n+use middle::trans::monomorphize::MonoId;\n use middle::trans::type_::Type;\n use middle::ty;\n use util::sha2::Sha256;\n@@ -61,10 +62,10 @@ pub struct CrateContext {\n     /// that is generated\n     pub non_inlineable_statics: RefCell<NodeSet>,\n     /// Cache instances of monomorphized functions\n-    pub monomorphized: RefCell<HashMap<mono_id, ValueRef>>,\n+    pub monomorphized: RefCell<HashMap<MonoId, ValueRef>>,\n     pub monomorphizing: RefCell<DefIdMap<uint>>,\n     /// Cache generated vtables\n-    pub vtables: RefCell<HashMap<(ty::t, mono_id), ValueRef>>,\n+    pub vtables: RefCell<HashMap<(ty::t, MonoId), ValueRef>>,\n     /// Cache of constant strings,\n     pub const_cstr_cache: RefCell<HashMap<InternedString, ValueRef>>,\n "}, {"sha": "81152523cdd50eaa23967fe66709f482b92e7896", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772", "patch": "@@ -16,7 +16,6 @@ use middle::trans::base::{trans_enum_variant, push_ctxt, get_item_val};\n use middle::trans::base::{trans_fn, decl_internal_rust_fn};\n use middle::trans::base;\n use middle::trans::common::*;\n-use middle::trans::meth;\n use middle::trans::intrinsic;\n use middle::ty;\n use middle::typeck;\n@@ -26,7 +25,7 @@ use syntax::abi;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::local_def;\n-use std::hash::sip;\n+use std::hash::{sip, Hash};\n \n pub fn monomorphic_fn(ccx: &CrateContext,\n                       fn_id: ast::DefId,\n@@ -71,7 +70,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         }).collect()\n     };\n \n-    let hash_id = @mono_id_ {\n+    let hash_id = MonoId {\n         def: fn_id,\n         params: param_ids\n     };\n@@ -194,16 +193,22 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n     }\n \n     let s = ccx.tcx.map.with_path(fn_id.node, |path| {\n-        exported_name(path, format!(\"h{}\", sip::hash(&(hash_id, mono_ty))),\n+        let mut state = sip::SipState::new();\n+        hash_id.hash(&mut state);\n+        mono_ty.hash(&mut state);\n+\n+        exported_name(path, format!(\"h{}\", state.result()),\n                       ccx.link_meta.crateid.version_or_default())\n     });\n     debug!(\"monomorphize_fn mangled to {}\", s);\n \n+    // This shouldn't need to option dance.\n+    let mut hash_id = Some(hash_id);\n     let mk_lldecl = || {\n         let lldecl = decl_internal_rust_fn(ccx, false,\n                                            f.sig.inputs.as_slice(),\n                                            f.sig.output, s);\n-        ccx.monomorphized.borrow_mut().insert(hash_id, lldecl);\n+        ccx.monomorphized.borrow_mut().insert(hash_id.take_unwrap(), lldecl);\n         lldecl\n     };\n \n@@ -305,21 +310,34 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n     (lldecl, false)\n }\n \n+// Used to identify cached monomorphized functions and vtables\n+#[deriving(Eq, TotalEq, Hash)]\n+pub struct MonoParamId {\n+    pub subst: ty::t,\n+    // Do we really need the vtables to be hashed? Isn't the type enough?\n+    pub vtables: Vec<MonoId>\n+}\n+\n+#[deriving(Eq, TotalEq, Hash)]\n+pub struct MonoId {\n+    pub def: ast::DefId,\n+    pub params: Vec<MonoParamId>\n+}\n+\n pub fn make_vtable_id(ccx: &CrateContext,\n                       origin: &typeck::vtable_origin)\n-                      -> mono_id {\n+                      -> MonoId {\n     match origin {\n         &typeck::vtable_static(impl_id, ref substs, ref sub_vtables) => {\n-            let param_ids = sub_vtables.iter().zip(substs.iter()).map(|(vtable, subst)| {\n-                MonoParamId {\n-                    subst: *subst,\n-                    vtables: vtable.iter().map(|vt| make_vtable_id(ccx, vt)).collect()\n-                }\n-            }).collect();\n-\n-            @mono_id_ {\n+            MonoId {\n                 def: impl_id,\n-                params: param_ids\n+                params: sub_vtables.iter().zip(substs.iter()).map(|(vtable, subst)| {\n+                    MonoParamId {\n+                        subst: *subst,\n+                        // Do we really need the vtables to be hashed? Isn't the type enough?\n+                        vtables: vtable.iter().map(|vt| make_vtable_id(ccx, vt)).collect()\n+                    }\n+                }).collect()\n             }\n         }\n "}]}