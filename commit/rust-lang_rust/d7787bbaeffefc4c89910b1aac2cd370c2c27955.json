{"sha": "d7787bbaeffefc4c89910b1aac2cd370c2c27955", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3Nzg3YmJhZWZmZWZjNGM4OTkxMGIxYWFjMmNkMzcwYzJjMjc5NTU=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-14T21:52:34Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-19T22:06:32Z"}, "message": "Check for calls to functions with `#[target_feature]` in THIR unsafeck", "tree": {"sha": "f3f3bf937c507a32efc839e423606fa5a6b15d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3f3bf937c507a32efc839e423606fa5a6b15d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7787bbaeffefc4c89910b1aac2cd370c2c27955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7787bbaeffefc4c89910b1aac2cd370c2c27955", "html_url": "https://github.com/rust-lang/rust/commit/d7787bbaeffefc4c89910b1aac2cd370c2c27955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7787bbaeffefc4c89910b1aac2cd370c2c27955/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27fe959c2c99207828cedfe19dbf96debd3be591", "url": "https://api.github.com/repos/rust-lang/rust/commits/27fe959c2c99207828cedfe19dbf96debd3be591", "html_url": "https://github.com/rust-lang/rust/commit/27fe959c2c99207828cedfe19dbf96debd3be591"}], "stats": {"total": 162, "additions": 147, "deletions": 15}, "files": [{"sha": "3c2d770390d93dec92c6d378fe4404c07274c9af", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d7787bbaeffefc4c89910b1aac2cd370c2c27955/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7787bbaeffefc4c89910b1aac2cd370c2c27955/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=d7787bbaeffefc4c89910b1aac2cd370c2c27955", "patch": "@@ -7,6 +7,7 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;\n use rustc_span::def_id::{DefId, LocalDefId};\n+use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n struct UnsafetyVisitor<'a, 'tcx> {\n@@ -19,6 +20,9 @@ struct UnsafetyVisitor<'a, 'tcx> {\n     /// `unsafe` block, and whether it has been used.\n     safety_context: SafetyContext,\n     body_unsafety: BodyUnsafety,\n+    /// The `#[target_feature]` attributes of the body. Used for checking\n+    /// calls to functions with `#[target_feature]` (RFC 2396).\n+    body_target_features: &'tcx Vec<Symbol>,\n }\n \n impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n@@ -148,6 +152,18 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             ExprKind::Call { fun, ty: _, args: _, from_hir_call: _, fn_span: _ } => {\n                 if self.thir[fun].ty.fn_sig(self.tcx).unsafety() == hir::Unsafety::Unsafe {\n                     self.requires_unsafe(expr.span, CallToUnsafeFunction);\n+                } else if let &ty::FnDef(func_did, _) = self.thir[fun].ty.kind() {\n+                    // If the called function has target features the calling function hasn't,\n+                    // the call requires `unsafe`.\n+                    if !self\n+                        .tcx\n+                        .codegen_fn_attrs(func_did)\n+                        .target_features\n+                        .iter()\n+                        .all(|feature| self.body_target_features.contains(feature))\n+                    {\n+                        self.requires_unsafe(expr.span, CallToFunctionWith);\n+                    }\n                 }\n             }\n             ExprKind::InlineAsm { .. } | ExprKind::LlvmInlineAsm { .. } => {\n@@ -217,7 +233,6 @@ enum UnsafeOpKind {\n     MutationOfLayoutConstrainedField,\n     #[allow(dead_code)] // FIXME\n     BorrowOfLayoutConstrainedField,\n-    #[allow(dead_code)] // FIXME\n     CallToFunctionWith,\n }\n \n@@ -291,6 +306,7 @@ pub fn check_unsafety<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     thir: &Thir<'tcx>,\n     expr: ExprId,\n+    def_id: LocalDefId,\n     hir_id: hir::HirId,\n ) {\n     let body_unsafety = tcx.hir().fn_sig_by_hir_id(hir_id).map_or(BodyUnsafety::Safe, |fn_sig| {\n@@ -300,10 +316,17 @@ pub fn check_unsafety<'tcx>(\n             BodyUnsafety::Safe\n         }\n     });\n+    let body_target_features = &tcx.codegen_fn_attrs(def_id).target_features;\n     let safety_context =\n         if body_unsafety.is_unsafe() { SafetyContext::UnsafeFn } else { SafetyContext::Safe };\n-    let mut visitor =\n-        UnsafetyVisitor { tcx, thir, safety_context, hir_context: hir_id, body_unsafety };\n+    let mut visitor = UnsafetyVisitor {\n+        tcx,\n+        thir,\n+        safety_context,\n+        hir_context: hir_id,\n+        body_unsafety,\n+        body_target_features,\n+    };\n     visitor.visit_expr(&thir[expr]);\n }\n \n@@ -315,7 +338,7 @@ crate fn thir_check_unsafety_inner<'tcx>(\n     let body_id = tcx.hir().body_owned_by(hir_id);\n     let body = tcx.hir().body(body_id);\n     let (thir, expr) = cx::build_thir(tcx, def, &body.value);\n-    check_unsafety(tcx, &thir, expr, hir_id);\n+    check_unsafety(tcx, &thir, expr, def.did, hir_id);\n }\n \n crate fn thir_check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {"}, {"sha": "e0842bfa4cde4fb9b16130a2474efc28f4519dfc", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fcheck-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fcheck-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fcheck-pass.rs?ref=d7787bbaeffefc4c89910b1aac2cd370c2c27955", "patch": "@@ -8,6 +8,8 @@\n \n // check-pass\n // only-x86_64\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n \n #![feature(target_feature_11)]\n "}, {"sha": "a59d7c2d784c7b5830a5e1545d4460588c45ffe6", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/closures-inherit-target_feature.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fclosures-inherit-target_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fclosures-inherit-target_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fclosures-inherit-target_feature.rs?ref=d7787bbaeffefc4c89910b1aac2cd370c2c27955", "patch": "@@ -1,6 +1,8 @@\n // Tests #73631: closures inherit `#[target_feature]` annotations\n \n // check-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n // only-x86_64\n \n #![feature(target_feature_11)]"}, {"sha": "cf5815df56e1cddce670389423facf95ceefe986", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr?ref=d7787bbaeffefc4c89910b1aac2cd370c2c27955", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/fn-ptr.rs:9:21\n+  --> $DIR/fn-ptr.rs:11:21\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ---------------------------------- `#[target_feature]` added here", "previous_filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.stderr"}, {"sha": "c95d4a08e48bb1dc87506a37f827b2562298d2be", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.rs?ref=d7787bbaeffefc4c89910b1aac2cd370c2c27955", "patch": "@@ -1,3 +1,5 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n // only-x86_64\n \n #![feature(target_feature_11)]"}, {"sha": "cf5815df56e1cddce670389423facf95ceefe986", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.thir.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr?ref=d7787bbaeffefc4c89910b1aac2cd370c2c27955", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/fn-ptr.rs:11:21\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ---------------------------------- `#[target_feature]` added here\n+...\n+LL |     let foo: fn() = foo;\n+   |              ----   ^^^ cannot coerce functions with `#[target_feature]` to safe function pointers\n+   |              |\n+   |              expected due to this\n+   |\n+   = note: expected fn pointer `fn()`\n+                 found fn item `fn() {foo}`\n+   = note: functions with `#[target_feature]` can only be coerced to `unsafe` function pointers\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "79273a1dcbf887a4c78a9956dd050f94583203c0", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr?ref=d7787bbaeffefc4c89910b1aac2cd370c2c27955", "patch": "@@ -1,77 +1,77 @@\n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:21:5\n+  --> $DIR/safe-calls.rs:23:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:22:5\n+  --> $DIR/safe-calls.rs:24:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:23:5\n+  --> $DIR/safe-calls.rs:25:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:28:5\n+  --> $DIR/safe-calls.rs:30:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:29:5\n+  --> $DIR/safe-calls.rs:31:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:34:5\n+  --> $DIR/safe-calls.rs:36:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:35:5\n+  --> $DIR/safe-calls.rs:37:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:36:5\n+  --> $DIR/safe-calls.rs:38:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:42:5\n+  --> $DIR/safe-calls.rs:44:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:45:18\n+  --> $DIR/safe-calls.rs:47:18\n    |\n LL | const name: () = sse2();\n    |                  ^^^^^^ call to function with `#[target_feature]`", "previous_filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.stderr"}, {"sha": "de0b89f46ba3fbd8a643a2009af9dc28f08da45e", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs?ref=d7787bbaeffefc4c89910b1aac2cd370c2c27955", "patch": "@@ -1,3 +1,5 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n // only-x86_64\n \n #![feature(target_feature_11)]"}, {"sha": "79273a1dcbf887a4c78a9956dd050f94583203c0", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7787bbaeffefc4c89910b1aac2cd370c2c27955/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr?ref=d7787bbaeffefc4c89910b1aac2cd370c2c27955", "patch": "@@ -0,0 +1,83 @@\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:23:5\n+   |\n+LL |     sse2();\n+   |     ^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:24:5\n+   |\n+LL |     avx_bmi2();\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:25:5\n+   |\n+LL |     Quux.avx_bmi2();\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:30:5\n+   |\n+LL |     avx_bmi2();\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:31:5\n+   |\n+LL |     Quux.avx_bmi2();\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:36:5\n+   |\n+LL |     sse2();\n+   |     ^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:37:5\n+   |\n+LL |     avx_bmi2();\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:38:5\n+   |\n+LL |     Quux.avx_bmi2();\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:44:5\n+   |\n+LL |     sse2();\n+   |     ^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:47:18\n+   |\n+LL | const name: () = sse2();\n+   |                  ^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}]}