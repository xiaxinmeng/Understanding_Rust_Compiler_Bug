{"sha": "f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YThhOTdiNjk5N2ZjNmE4YTVhMjJhOWQxYzQ1ZDkzODY5YTBjYjU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-25T06:07:55Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:51:28Z"}, "message": "DRY std_path", "tree": {"sha": "ed6572b81d8ad5fbedb3e52483638130d55e9425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed6572b81d8ad5fbedb3e52483638130d55e9425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5", "html_url": "https://github.com/rust-lang/rust/commit/f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31ca2322a06ee5dbf91e2ea21f4354593fd8ed52", "url": "https://api.github.com/repos/rust-lang/rust/commits/31ca2322a06ee5dbf91e2ea21f4354593fd8ed52", "html_url": "https://github.com/rust-lang/rust/commit/31ca2322a06ee5dbf91e2ea21f4354593fd8ed52"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "b7a7fcd9872e0fd9b0f18ec22a45d2cd21b25c5e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5", "patch": "@@ -151,6 +151,22 @@ pub trait Resolver {\n     /// We must keep the set of definitions up to date as we add nodes that weren't in the AST.\n     /// This should only return `None` during testing.\n     fn definitions(&mut self) -> &mut Definitions;\n+\n+    /// Given suffix [\"b\",\"c\",\"d\"], returns path `::cratename::b::c::d` when\n+    /// The path is also resolved according to `is_value`.\n+    fn std_path(&mut self, span: Span, crate_root: Option<&str>,\n+                components: &[&str], is_value: bool) -> hir::Path {\n+        let mut path = hir::Path {\n+            span,\n+            def: Def::Err,\n+            segments: iter::once(keywords::CrateRoot.name()).chain({\n+                crate_root.into_iter().chain(components.iter().cloned()).map(Symbol::intern)\n+            }).map(hir::PathSegment::from_name).collect(),\n+        };\n+\n+        self.resolve_hir_path(&mut path, is_value);\n+        path\n+    }\n }\n \n #[derive(Clone, Copy, Debug)]\n@@ -3625,16 +3641,7 @@ impl<'a> LoweringContext<'a> {\n     /// `fld.cx.use_std`, and `::core::b::c::d` otherwise.\n     /// The path is also resolved according to `is_value`.\n     fn std_path(&mut self, span: Span, components: &[&str], is_value: bool) -> hir::Path {\n-        let mut path = hir::Path {\n-            span,\n-            def: Def::Err,\n-            segments: iter::once(keywords::CrateRoot.name()).chain({\n-                self.crate_root.into_iter().chain(components.iter().cloned()).map(Symbol::intern)\n-            }).map(hir::PathSegment::from_name).collect(),\n-        };\n-\n-        self.resolver.resolve_hir_path(&mut path, is_value);\n-        path\n+        self.resolver.std_path(span, self.crate_root, components, is_value)\n     }\n \n     fn signal_block_expr(&mut self,"}, {"sha": "816b8caf23eeca90cf676fd32c0d6ab8db1b842b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5", "patch": "@@ -25,7 +25,7 @@ use syntax::attr;\n use syntax::codemap::Spanned;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::ptr::P;\n-use syntax::symbol::{keywords, Symbol};\n+use syntax::symbol::keywords;\n use syntax_pos::{self, DUMMY_SP, Pos, FileName};\n \n use rustc::middle::const_val::ConstVal;\n@@ -45,7 +45,7 @@ use rustc::hir;\n \n use rustc_const_math::ConstInt;\n use std::default::Default;\n-use std::{mem, slice, vec, iter};\n+use std::{mem, slice, vec};\n use std::iter::FromIterator;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -816,16 +816,15 @@ impl Clean<Attributes> for [ast::Attribute] {\n                     continue;\n                 }\n \n-                let mut path = hir::Path {\n-                    span: DUMMY_SP,\n-                    def: Def::Err,\n-                    segments: iter::once(keywords::CrateRoot.name()).chain({\n-                        link.split(\"::\").skip(1).map(Symbol::intern)\n-                    }).map(hir::PathSegment::from_name).collect(),\n+                let path = {\n+                    // This allocation could be avoided if std_path could take an iterator;\n+                    // but it can't because that would break object safety. This can still be\n+                    // fixed.\n+                    let components = link.split(\"::\").skip(1).collect::<Vec<_>>();\n+                    println!(\"{:?}\", components);\n+                    cx.resolver.borrow_mut().std_path(DUMMY_SP, None, &components, false)\n                 };\n \n-                cx.resolver.borrow_mut().resolve_hir_path(&mut path, false);\n-\n                 if path.def != Def::Err {\n                     attrs.links.push((link, path.def.def_id()));\n                 }"}]}