{"sha": "3030cbea957adbd560bf2eaa34c1b8a56daee16a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMzBjYmVhOTU3YWRiZDU2MGJmMmVhYTM0YzFiOGE1NmRhZWUxNmE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-10-16T18:21:34Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-10T18:03:58Z"}, "message": "Remove short doc where it starts with a codeblock", "tree": {"sha": "6da4b7717df003529a82927b4d4e99d1b5d7c464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6da4b7717df003529a82927b4d4e99d1b5d7c464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3030cbea957adbd560bf2eaa34c1b8a56daee16a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3030cbea957adbd560bf2eaa34c1b8a56daee16a", "html_url": "https://github.com/rust-lang/rust/commit/3030cbea957adbd560bf2eaa34c1b8a56daee16a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3030cbea957adbd560bf2eaa34c1b8a56daee16a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "653da4fd006c97625247acd7e076d0782cdc149b", "url": "https://api.github.com/repos/rust-lang/rust/commits/653da4fd006c97625247acd7e076d0782cdc149b", "html_url": "https://github.com/rust-lang/rust/commit/653da4fd006c97625247acd7e076d0782cdc149b"}], "stats": {"total": 113, "additions": 78, "deletions": 35}, "files": [{"sha": "00ca4fed2f4a008e73eb1ecf23cf73d446884c30", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3030cbea957adbd560bf2eaa34c1b8a56daee16a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3030cbea957adbd560bf2eaa34c1b8a56daee16a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=3030cbea957adbd560bf2eaa34c1b8a56daee16a", "patch": "@@ -399,7 +399,6 @@ impl<'a, I: Iterator<Item = Event<'a>>> SummaryLine<'a, I> {\n fn check_if_allowed_tag(t: &Tag) -> bool {\n     match *t {\n         Tag::Paragraph\n-        | Tag::CodeBlock(_)\n         | Tag::Item\n         | Tag::Emphasis\n         | Tag::Strong\n@@ -420,29 +419,36 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n         if !self.started {\n             self.started = true;\n         }\n-        let event = self.inner.next();\n-        let mut is_start = true;\n-        let is_allowed_tag = match event {\n-            Some(Event::Start(ref c)) => {\n-                self.depth += 1;\n-                check_if_allowed_tag(c)\n-            }\n-            Some(Event::End(ref c)) => {\n-                self.depth -= 1;\n-                is_start = false;\n-                check_if_allowed_tag(c)\n-            }\n-            _ => true,\n-        };\n-        if is_allowed_tag == false {\n-            if is_start {\n-                Some(Event::Start(Tag::Paragraph))\n+        while let Some(event) = self.inner.next() {\n+            let mut is_start = true;\n+            let is_allowed_tag = match event {\n+                Event::Start(Tag::CodeBlock(_)) | Event::End(Tag::CodeBlock(_)) => {\n+                    return None;\n+                }\n+                Event::Start(ref c) => {\n+                    self.depth += 1;\n+                    check_if_allowed_tag(c)\n+                }\n+                Event::End(ref c) => {\n+                    self.depth -= 1;\n+                    is_start = false;\n+                    check_if_allowed_tag(c)\n+                }\n+                _ => {\n+                    true\n+                }\n+            };\n+            return if is_allowed_tag == false {\n+                if is_start {\n+                    Some(Event::Start(Tag::Paragraph))\n+                } else {\n+                    Some(Event::End(Tag::Paragraph))\n+                }\n             } else {\n-                Some(Event::End(Tag::Paragraph))\n-            }\n-        } else {\n-            event\n+                Some(event)\n+            };\n         }\n+        None\n     }\n }\n "}, {"sha": "b9d259a3cfab42edf596202a5fa640644fbe3b75", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3030cbea957adbd560bf2eaa34c1b8a56daee16a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3030cbea957adbd560bf2eaa34c1b8a56daee16a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3030cbea957adbd560bf2eaa34c1b8a56daee16a", "patch": "@@ -2584,24 +2584,39 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                     _ => \"\",\n                 };\n \n+                let stab = myitem.stability_class();\n+                let add = if stab.is_some() {\n+                    \" \"\n+                } else {\n+                    \"\"\n+                };\n+\n                 let doc_value = myitem.doc_value().unwrap_or(\"\");\n-                write!(w, \"\n-                       <tr class='{stab} module-item'>\n-                           <td><a class=\\\"{class}\\\" href=\\\"{href}\\\"\n-                                  title='{title_type} {title}'>{name}</a>{unsafety_flag}</td>\n-                           <td class='docblock-short'>\n-                               {stab_docs} {docs}\n-                           </td>\n+                write!(w, \"\\\n+                       <tr class='{stab}{add}module-item'>\\\n+                           <td><a class=\\\"{class}\\\" href=\\\"{href}\\\" \\\n+                                  title='{title}'>{name}</a>{unsafety_flag}</td>\\\n+                           <td class='docblock-short'>{stab_docs}{docs}\\\n+                           </td>\\\n                        </tr>\",\n                        name = *myitem.name.as_ref().unwrap(),\n                        stab_docs = stab_docs,\n                        docs = MarkdownSummaryLine(doc_value, &myitem.links()),\n                        class = myitem.type_(),\n-                       stab = myitem.stability_class().unwrap_or(String::new()),\n+                       add = add,\n+                       stab = stab.unwrap_or_else(|| String::new()),\n                        unsafety_flag = unsafety_flag,\n                        href = item_path(myitem.type_(), myitem.name.as_ref().unwrap()),\n-                       title_type = myitem.type_(),\n-                       title = full_path(cx, myitem))?;\n+                       title = [full_path(cx, myitem), myitem.type_().to_string()]\n+                                .iter()\n+                                .filter_map(|s| if !s.is_empty() {\n+                                    Some(s.as_str())\n+                                } else {\n+                                    None\n+                                })\n+                                .collect::<Vec<_>>()\n+                                .join(\" \"),\n+                      )?;\n             }\n         }\n     }"}, {"sha": "f82dafa25172090462eb371f810c91ead8f92a6d", "filename": "src/test/rustdoc/doc-cfg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3030cbea957adbd560bf2eaa34c1b8a56daee16a/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3030cbea957adbd560bf2eaa34c1b8a56daee16a/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs?ref=3030cbea957adbd560bf2eaa34c1b8a56daee16a", "patch": "@@ -20,8 +20,8 @@ pub struct Portable;\n // @has doc_cfg/unix_only/index.html \\\n //  '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n //  'This is supported on Unix only.'\n-// @matches - '//*[@class=\" module-item\"]//*[@class=\"stab portability\"]' '\\AUnix\\Z'\n-// @matches - '//*[@class=\" module-item\"]//*[@class=\"stab portability\"]' '\\AUnix and ARM\\Z'\n+// @matches - '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '\\AUnix\\Z'\n+// @matches - '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '\\AUnix and ARM\\Z'\n // @count - '//*[@class=\"stab portability\"]' 3\n #[doc(cfg(unix))]\n pub mod unix_only {\n@@ -52,7 +52,7 @@ pub mod unix_only {\n \n // the portability header is different on the module view versus the full view\n // @has doc_cfg/index.html\n-// @matches - '//*[@class=\" module-item\"]//*[@class=\"stab portability\"]' '\\Aavx\\Z'\n+// @matches - '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '\\Aavx\\Z'\n \n // @has doc_cfg/fn.uses_target_feature.html\n // @has - '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\"}, {"sha": "060b349c251774d1d0ed43832ded6e44b96d7c03", "filename": "src/test/rustdoc/short-docblock-codeblock.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3030cbea957adbd560bf2eaa34c1b8a56daee16a/src%2Ftest%2Frustdoc%2Fshort-docblock-codeblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3030cbea957adbd560bf2eaa34c1b8a56daee16a/src%2Ftest%2Frustdoc%2Fshort-docblock-codeblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshort-docblock-codeblock.rs?ref=3030cbea957adbd560bf2eaa34c1b8a56daee16a", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/index.html '//*[@class=\"module-item\"]//td[@class=\"docblock-short\"]' \"\"\n+// @!has foo/index.html '//*[@id=\"module-item\"]//td[@class=\"docblock-short\"]' \"Some text.\"\n+// @!has foo/index.html '//*[@id=\"module-item\"]//td[@class=\"docblock-short\"]' \"let x = 12;\"\n+\n+/// ```\n+/// let x = 12;\n+/// ```\n+///\n+/// Some text.\n+pub fn foo() {}"}]}