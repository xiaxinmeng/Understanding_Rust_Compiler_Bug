{"sha": "d7de4e9affac24c6e96ae068954480bfa763908c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZGU0ZTlhZmZhYzI0YzZlOTZhZTA2ODk1NDQ4MGJmYTc2MzkwOGM=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-14T03:48:09Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-14T03:48:09Z"}, "message": "Enforce stronger guarantees for mutable borrows\n\nImplement the stronger guarantees for mutable borrows from #12624. This\nremoves the ability to read from a mutably borrowed path for the\nduration of the borrow, and enforces a unique access path for any\nmutable borrow, for both reads and writes.\n\nThis makes mutable borrows work better with concurrent accesses from\nmultiple threads, and it opens the door for allowing moves out of\nmutably borrowed values, as long as a new value is written before the\nmutable borrow ends. This also aligns Rust more closely with academic\nlanguages based on substructural types and separation logic.\n\nThe most common situation triggering an error after this change is a\ncall to a function mutably borrowing self with self.field as one of the\narguments. The workaround is to bind self.field to a temporary, but the\nneed for these temporaries will hopefully go away after #6268 is fixed.\n\nAnother situation that triggers an error is using the head expression of\na match in an arm that binds a variable with a mutable reference. The\nuse of the head expression needs to be replaced with an expression that\nreconstructs it from match-bound variables.\n\nThis fixes #12624.\n\n[breaking-change]", "tree": {"sha": "e7951b4b444d0e03c47d3eb47cf95c9322427edb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7951b4b444d0e03c47d3eb47cf95c9322427edb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7de4e9affac24c6e96ae068954480bfa763908c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7de4e9affac24c6e96ae068954480bfa763908c", "html_url": "https://github.com/rust-lang/rust/commit/d7de4e9affac24c6e96ae068954480bfa763908c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7de4e9affac24c6e96ae068954480bfa763908c/comments", "author": null, "committer": null, "parents": [{"sha": "159e27aebb940926ccf1bad0b2b12087d36ad903", "url": "https://api.github.com/repos/rust-lang/rust/commits/159e27aebb940926ccf1bad0b2b12087d36ad903", "html_url": "https://github.com/rust-lang/rust/commit/159e27aebb940926ccf1bad0b2b12087d36ad903"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "2392db63019290f15c6a0583110c48886619dbd8", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d7de4e9affac24c6e96ae068954480bfa763908c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7de4e9affac24c6e96ae068954480bfa763908c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=d7de4e9affac24c6e96ae068954480bfa763908c", "patch": "@@ -438,8 +438,7 @@ impl<'a> CheckLoanCtxt<'a> {\n             Some(lp) => {\n                 let moved_value_use_kind = match mode {\n                     euv::Copy => {\n-                        // FIXME(#12624) -- If we are copying the value,\n-                        // we don't care if it's borrowed.\n+                        self.check_for_copy_of_frozen_path(id, span, &*lp);\n                         MovedInUse\n                     }\n                     euv::Move(_) => {\n@@ -471,6 +470,27 @@ impl<'a> CheckLoanCtxt<'a> {\n         }\n     }\n \n+    fn check_for_copy_of_frozen_path(&self,\n+                                     id: ast::NodeId,\n+                                     span: Span,\n+                                     copy_path: &LoanPath) {\n+        match self.analyze_restrictions_on_use(id, copy_path, ty::ImmBorrow) {\n+            UseOk => { }\n+            UseWhileBorrowed(loan_path, loan_span) => {\n+                self.bccx.span_err(\n+                    span,\n+                    format!(\"cannot use `{}` because it was mutably borrowed\",\n+                            self.bccx.loan_path_to_str(copy_path).as_slice())\n+                    .as_slice());\n+                self.bccx.span_note(\n+                    loan_span,\n+                    format!(\"borrow of `{}` occurs here\",\n+                            self.bccx.loan_path_to_str(&*loan_path).as_slice())\n+                    .as_slice());\n+            }\n+        }\n+    }\n+\n     fn check_for_move_of_borrowed_path(&self,\n                                        id: ast::NodeId,\n                                        span: Span,"}, {"sha": "ff029ce624c9be24c3adc97764d05397382ade40", "filename": "src/test/compile-fail/borrowck-vec-pattern-loan-from-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7de4e9affac24c6e96ae068954480bfa763908c/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7de4e9affac24c6e96ae068954480bfa763908c/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs?ref=d7de4e9affac24c6e96ae068954480bfa763908c", "patch": "@@ -12,7 +12,7 @@ fn a() {\n     let mut v = vec!(1, 2, 3);\n     let vb: &mut [int] = v.as_mut_slice();\n     match vb {\n-        [_a, ..tail] => {\n+        [_a, ..tail] => { //~ ERROR cannot use `vb[..]` because it was mutably borrowed\n             v.push(tail[0] + tail[1]); //~ ERROR cannot borrow\n         }\n         _ => {}"}, {"sha": "89350f16167603f3b9ae01c8409623e2f405feea", "filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7de4e9affac24c6e96ae068954480bfa763908c/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7de4e9affac24c6e96ae068954480bfa763908c/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs?ref=d7de4e9affac24c6e96ae068954480bfa763908c", "patch": "@@ -12,8 +12,8 @@\n fn broken() {\n     let mut x = 3;\n     let mut _y = vec!(&mut x);\n-    while x < 10 {\n-        let mut z = x;\n+    while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n+        let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed\n         _y.push(&mut z); //~ ERROR `z` does not live long enough\n         x += 1; //~ ERROR cannot assign\n     }"}]}