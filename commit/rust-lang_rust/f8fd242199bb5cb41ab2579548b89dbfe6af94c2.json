{"sha": "f8fd242199bb5cb41ab2579548b89dbfe6af94c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZmQyNDIxOTliYjVjYjQxYWIyNTc5NTQ4Yjg5ZGJmZTZhZjk0YzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-23T13:06:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T13:06:54Z"}, "message": "Merge pull request #3686 from Veetaha/feature/hover-actual-type-params\n\nra_hir: add more privacy for Type", "tree": {"sha": "48742a62821c23addc1e7f06f7f273762c1c585d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48742a62821c23addc1e7f06f7f273762c1c585d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8fd242199bb5cb41ab2579548b89dbfe6af94c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeLRuCRBK7hj4Ov3rIwAAdHIIAJlVnX+myjR+sDy6L3ULuJOD\n+N8cjz/VDdyiWjnI6Rl77ymCknmRcZIGKgZPwtYJGknSQo48gGbIeayEcNz6O10Z\nmLfcubrWzOCj60ANvUz8PbBbk/S4NkVub2moOqQe/vFU+L+zcAl11lbQMiHY/+G9\nsaEI7upxNQckS9hPTYO0uXlzGWRGk3PeXTFn2pwTDeLkMDEtVJa4qINwI0rpruEj\n1Sf3ZMDjnkGTKzejQk778glsW/Fu6cj96FGZgM+GvKvTWrdSUgfncMmVTaUP/duF\nieSaGBx/89YOFB/NeIE7bY4rlzAvLt1mBIzY+xhNdyp+DlCHJK2ltj7RooDXR/I=\n=XP6s\n-----END PGP SIGNATURE-----\n", "payload": "tree 48742a62821c23addc1e7f06f7f273762c1c585d\nparent a2f7ca27c082bef625bc33e1eca622457102bae4\nparent 559aeb2932368b40cda9ff8d3f7c4cf3aa065819\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1584968814 +0100\ncommitter GitHub <noreply@github.com> 1584968814 +0100\n\nMerge pull request #3686 from Veetaha/feature/hover-actual-type-params\n\nra_hir: add more privacy for Type"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8fd242199bb5cb41ab2579548b89dbfe6af94c2", "html_url": "https://github.com/rust-lang/rust/commit/f8fd242199bb5cb41ab2579548b89dbfe6af94c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8fd242199bb5cb41ab2579548b89dbfe6af94c2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2f7ca27c082bef625bc33e1eca622457102bae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f7ca27c082bef625bc33e1eca622457102bae4", "html_url": "https://github.com/rust-lang/rust/commit/a2f7ca27c082bef625bc33e1eca622457102bae4"}, {"sha": "559aeb2932368b40cda9ff8d3f7c4cf3aa065819", "url": "https://api.github.com/repos/rust-lang/rust/commits/559aeb2932368b40cda9ff8d3f7c4cf3aa065819", "html_url": "https://github.com/rust-lang/rust/commit/559aeb2932368b40cda9ff8d3f7c4cf3aa065819"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "e91abf6f58617d588bc605f33ec0272b56a41629", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd242199bb5cb41ab2579548b89dbfe6af94c2/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd242199bb5cb41ab2579548b89dbfe6af94c2/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f8fd242199bb5cb41ab2579548b89dbfe6af94c2", "patch": "@@ -10,7 +10,7 @@ use hir_def::{\n     docs::Documentation,\n     expr::{BindingAnnotation, Pat, PatId},\n     per_ns::PerNs,\n-    resolver::HasResolver,\n+    resolver::{HasResolver, Resolver},\n     type_ref::{Mutability, TypeRef},\n     AdtId, AssocContainerId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule,\n     ImplId, LocalEnumVariantId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId,\n@@ -912,10 +912,8 @@ impl Local {\n         let def = DefWithBodyId::from(self.parent);\n         let infer = db.infer(def);\n         let ty = infer[self.pat_id].clone();\n-        let resolver = def.resolver(db.upcast());\n         let krate = def.module(db.upcast()).krate;\n-        let environment = TraitEnvironment::lower(db, &resolver);\n-        Type { krate, ty: InEnvironment { value: ty, environment } }\n+        Type::new(db, krate, def, ty)\n     }\n \n     pub fn source(self, db: &dyn HirDatabase) -> InFile<Either<ast::BindPat, ast::SelfParam>> {\n@@ -1020,11 +1018,21 @@ impl ImplDef {\n \n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct Type {\n-    pub(crate) krate: CrateId,\n-    pub(crate) ty: InEnvironment<Ty>,\n+    krate: CrateId,\n+    ty: InEnvironment<Ty>,\n }\n \n impl Type {\n+    pub(crate) fn new_with_resolver(\n+        db: &dyn HirDatabase,\n+        resolver: &Resolver,\n+        ty: Ty,\n+    ) -> Option<Type> {\n+        let krate = resolver.krate()?;\n+        let environment = TraitEnvironment::lower(db, &resolver);\n+        Some(Type { krate, ty: InEnvironment { value: ty, environment } })\n+    }\n+\n     fn new(db: &dyn HirDatabase, krate: CrateId, lexical_env: impl HasResolver, ty: Ty) -> Type {\n         let resolver = lexical_env.resolver(db.upcast());\n         let environment = TraitEnvironment::lower(db, &resolver);"}, {"sha": "10c12c910fae7c6f8eccfb526a678e08665ad3e0", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd242199bb5cb41ab2579548b89dbfe6af94c2/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd242199bb5cb41ab2579548b89dbfe6af94c2/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=f8fd242199bb5cb41ab2579548b89dbfe6af94c2", "patch": "@@ -17,7 +17,7 @@ use hir_def::{\n     AsMacroCall, DefWithBodyId,\n };\n use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n-use hir_ty::{InEnvironment, InferenceResult, TraitEnvironment};\n+use hir_ty::InferenceResult;\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxNode, SyntaxNodePtr, TextUnit,\n@@ -103,10 +103,6 @@ impl SourceAnalyzer {\n         Some(res)\n     }\n \n-    fn trait_env(&self, db: &dyn HirDatabase) -> Arc<TraitEnvironment> {\n-        TraitEnvironment::lower(db, &self.resolver)\n-    }\n-\n     pub(crate) fn type_of(&self, db: &dyn HirDatabase, expr: &ast::Expr) -> Option<Type> {\n         let expr_id = match expr {\n             ast::Expr::MacroCall(call) => {\n@@ -117,15 +113,13 @@ impl SourceAnalyzer {\n         }?;\n \n         let ty = self.infer.as_ref()?[expr_id].clone();\n-        let environment = self.trait_env(db);\n-        Some(Type { krate: self.resolver.krate()?, ty: InEnvironment { value: ty, environment } })\n+        Type::new_with_resolver(db, &self.resolver, ty)\n     }\n \n     pub(crate) fn type_of_pat(&self, db: &dyn HirDatabase, pat: &ast::Pat) -> Option<Type> {\n         let pat_id = self.pat_id(pat)?;\n         let ty = self.infer.as_ref()?[pat_id].clone();\n-        let environment = self.trait_env(db);\n-        Some(Type { krate: self.resolver.krate()?, ty: InEnvironment { value: ty, environment } })\n+        Type::new_with_resolver(db, &self.resolver, ty)\n     }\n \n     pub(crate) fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<Function> {"}]}