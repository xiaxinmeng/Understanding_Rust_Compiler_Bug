{"sha": "c83f97533a29f3a8691101ce637d5fa322843d8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4M2Y5NzUzM2EyOWYzYTg2OTExMDFjZTYzN2Q1ZmEzMjI4NDNkOGM=", "commit": {"author": {"name": "Ian Douglas Scott", "email": "ian@iandouglasscott.com", "date": "2017-07-11T03:44:14Z"}, "committer": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2017-07-29T15:31:18Z"}, "message": "Redox: Add JoinHandleExt (matching Unix version)", "tree": {"sha": "24bdae45fd736096233e2814569b5a5f443ce89c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24bdae45fd736096233e2814569b5a5f443ce89c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c83f97533a29f3a8691101ce637d5fa322843d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c83f97533a29f3a8691101ce637d5fa322843d8c", "html_url": "https://github.com/rust-lang/rust/commit/c83f97533a29f3a8691101ce637d5fa322843d8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c83f97533a29f3a8691101ce637d5fa322843d8c/comments", "author": {"login": "ids1024", "id": 2263150, "node_id": "MDQ6VXNlcjIyNjMxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2263150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ids1024", "html_url": "https://github.com/ids1024", "followers_url": "https://api.github.com/users/ids1024/followers", "following_url": "https://api.github.com/users/ids1024/following{/other_user}", "gists_url": "https://api.github.com/users/ids1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/ids1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ids1024/subscriptions", "organizations_url": "https://api.github.com/users/ids1024/orgs", "repos_url": "https://api.github.com/users/ids1024/repos", "events_url": "https://api.github.com/users/ids1024/events{/privacy}", "received_events_url": "https://api.github.com/users/ids1024/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddaab61101e48f0a58ce176b5a6aff11ae36c986", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddaab61101e48f0a58ce176b5a6aff11ae36c986", "html_url": "https://github.com/rust-lang/rust/commit/ddaab61101e48f0a58ce176b5a6aff11ae36c986"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "0c1bf9e9557609d96e54892aa2eaa661d1459397", "filename": "src/libstd/sys/redox/ext/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c83f97533a29f3a8691101ce637d5fa322843d8c/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83f97533a29f3a8691101ce637d5fa322843d8c/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs?ref=c83f97533a29f3a8691101ce637d5fa322843d8c", "patch": "@@ -33,6 +33,7 @@ pub mod ffi;\n pub mod fs;\n pub mod io;\n pub mod process;\n+pub mod thread;\n \n /// A prelude for conveniently writing platform-specific code.\n ///\n@@ -46,5 +47,7 @@ pub mod prelude {\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::fs::{FileTypeExt, PermissionsExt, OpenOptionsExt, MetadataExt};\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub use super::thread::JoinHandleExt;\n+    #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::process::{CommandExt, ExitStatusExt};\n }"}, {"sha": "52be2ccd9f964b43906c8e935018555cba131760", "filename": "src/libstd/sys/redox/ext/thread.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c83f97533a29f3a8691101ce637d5fa322843d8c/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83f97533a29f3a8691101ce637d5fa322843d8c/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs?ref=c83f97533a29f3a8691101ce637d5fa322843d8c", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Unix-specific extensions to primitives in the `std::thread` module.\n+\n+#![stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n+\n+use sys_common::{AsInner, IntoInner};\n+use thread::JoinHandle;\n+\n+#[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n+#[allow(deprecated)]\n+pub type RawPthread = usize;\n+\n+/// Unix-specific extensions to `std::thread::JoinHandle`\n+#[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n+pub trait JoinHandleExt {\n+    /// Extracts the raw pthread_t without taking ownership\n+    #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n+    fn as_pthread_t(&self) -> RawPthread;\n+\n+    /// Consumes the thread, returning the raw pthread_t\n+    ///\n+    /// This function **transfers ownership** of the underlying pthread_t to\n+    /// the caller. Callers are then the unique owners of the pthread_t and\n+    /// must either detach or join the pthread_t once it's no longer needed.\n+    #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n+    fn into_pthread_t(self) -> RawPthread;\n+}\n+\n+#[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n+impl<T> JoinHandleExt for JoinHandle<T> {\n+    fn as_pthread_t(&self) -> RawPthread {\n+        self.as_inner().id() as RawPthread\n+    }\n+\n+    fn into_pthread_t(self) -> RawPthread {\n+        self.into_inner().into_id() as RawPthread\n+    }\n+}"}]}