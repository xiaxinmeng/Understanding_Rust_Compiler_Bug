{"sha": "3ac79c718475fd29b8be34dde667b683390c2aee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYzc5YzcxODQ3NWZkMjliOGJlMzRkZGU2NjdiNjgzMzkwYzJhZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-19T17:44:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-19T17:44:43Z"}, "message": "Auto merge of #53258 - nikomatsakis:issue-53189-optimize-reassignment-immutable-state, r=pnkfelix\n\noptimize reassignment immutable state\n\nThis is the \"simple fix\" when it comes to checking for reassignment. We just shoot for compatibility with the AST-based checker. Makes no attempt to solve #21232.\n\nI opted for this simpler fix because I didn't want to think about complications [like the ones described here](https://github.com/rust-lang/rust/issues/21232#issuecomment-412219247).\n\nLet's do some profiling measurements.\n\nFixes #53189\n\nr? @pnkfelix", "tree": {"sha": "3d44b05190197268e01ddb7a245106cfda35e825", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d44b05190197268e01ddb7a245106cfda35e825"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ac79c718475fd29b8be34dde667b683390c2aee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac79c718475fd29b8be34dde667b683390c2aee", "html_url": "https://github.com/rust-lang/rust/commit/3ac79c718475fd29b8be34dde667b683390c2aee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ac79c718475fd29b8be34dde667b683390c2aee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc3b20663e1abfff0499332f9168f60c3269c33", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc3b20663e1abfff0499332f9168f60c3269c33", "html_url": "https://github.com/rust-lang/rust/commit/bfc3b20663e1abfff0499332f9168f60c3269c33"}, {"sha": "58e4b54bd49a2a554ee8a573827b9ccbf7a9b65e", "url": "https://api.github.com/repos/rust-lang/rust/commits/58e4b54bd49a2a554ee8a573827b9ccbf7a9b65e", "html_url": "https://github.com/rust-lang/rust/commit/58e4b54bd49a2a554ee8a573827b9ccbf7a9b65e"}], "stats": {"total": 515, "additions": 425, "deletions": 90}, "files": [{"sha": "ce0e76a636db2511cb2886ba85c361860039943c", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 34, "deletions": 51, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -798,12 +798,6 @@ enum LocalMutationIsAllowed {\n     No,\n }\n \n-struct AccessErrorsReported {\n-    mutability_error: bool,\n-    #[allow(dead_code)]\n-    conflict_error: bool,\n-}\n-\n #[derive(Copy, Clone)]\n enum InitializationRequiringAction {\n     Update,\n@@ -1072,7 +1066,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         kind: (ShallowOrDeep, ReadOrWrite),\n         is_local_mutation_allowed: LocalMutationIsAllowed,\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n-    ) -> AccessErrorsReported {\n+    ) {\n         let (sd, rw) = kind;\n \n         if let Activation(_, borrow_index) = rw {\n@@ -1082,10 +1076,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                      place: {:?} borrow_index: {:?}\",\n                     place_span.0, borrow_index\n                 );\n-                return AccessErrorsReported {\n-                    mutability_error: false,\n-                    conflict_error: true,\n-                };\n+                return;\n             }\n         }\n \n@@ -1097,10 +1088,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 \"access_place: suppressing error place_span=`{:?}` kind=`{:?}`\",\n                 place_span, kind\n             );\n-            return AccessErrorsReported {\n-                mutability_error: false,\n-                conflict_error: true,\n-            };\n+            return;\n         }\n \n         let mutability_error =\n@@ -1122,11 +1110,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             self.access_place_error_reported\n                 .insert((place_span.0.clone(), place_span.1));\n         }\n-\n-        AccessErrorsReported {\n-            mutability_error,\n-            conflict_error,\n-        }\n     }\n \n     fn check_access_for_conflict(\n@@ -1275,23 +1258,30 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n         }\n \n-        let errors_reported = self.access_place(\n+        // Special case: you can assign a immutable local variable\n+        // (e.g., `x = ...`) so long as it has never been initialized\n+        // before (at this point in the flow).\n+        if let &Place::Local(local) = place_span.0 {\n+            if let Mutability::Not = self.mir.local_decls[local].mutability {\n+                // check for reassignments to immutable local variables\n+                self.check_if_reassignment_to_immutable_state(\n+                    context,\n+                    local,\n+                    place_span,\n+                    flow_state,\n+                );\n+                return;\n+            }\n+        }\n+\n+        // Otherwise, use the normal access permission rules.\n+        self.access_place(\n             context,\n             place_span,\n             (kind, Write(WriteKind::Mutate)),\n-            // We want immutable upvars to cause an \"assignment to immutable var\"\n-            // error, not an \"reassignment of immutable var\" error, because the\n-            // latter can't find a good previous assignment span.\n-            //\n-            // There's probably a better way to do this.\n-            LocalMutationIsAllowed::ExceptUpvars,\n+            LocalMutationIsAllowed::No,\n             flow_state,\n         );\n-\n-        if !errors_reported.mutability_error {\n-            // check for reassignments to immutable local variables\n-            self.check_if_reassignment_to_immutable_state(context, place_span, flow_state);\n-        }\n     }\n \n     fn consume_rvalue(\n@@ -1590,27 +1580,20 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     fn check_if_reassignment_to_immutable_state(\n         &mut self,\n         context: Context,\n-        (place, span): (&Place<'tcx>, Span),\n+        local: Local,\n+        place_span: (&Place<'tcx>, Span),\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n     ) {\n-        debug!(\"check_if_reassignment_to_immutable_state({:?})\", place);\n-        // determine if this path has a non-mut owner (and thus needs checking).\n-        let err_place = match self.is_mutable(place, LocalMutationIsAllowed::No) {\n-            Ok(..) => return,\n-            Err(place) => place,\n-        };\n-        debug!(\n-            \"check_if_reassignment_to_immutable_state({:?}) - is an imm local\",\n-            place\n-        );\n-\n-        for i in flow_state.ever_inits.iter_incoming() {\n-            let init = self.move_data.inits[i];\n-            let init_place = &self.move_data.move_paths[init.path].place;\n-            if places_conflict::places_conflict(self.tcx, self.mir, &init_place, place, Deep) {\n-                self.report_illegal_reassignment(context, (place, span), init.span, err_place);\n-                break;\n-            }\n+        debug!(\"check_if_reassignment_to_immutable_state({:?})\", local);\n+\n+        // Check if any of the initializiations of `local` have happened yet:\n+        let mpi = self.move_data.rev_lookup.find_local(local);\n+        let init_indices = &self.move_data.init_path_map[mpi];\n+        let first_init_index = init_indices.iter().find(|ii| flow_state.ever_inits.contains(ii));\n+        if let Some(&init_index) = first_init_index {\n+            // And, if so, report an error.\n+            let init = &self.move_data.inits[init_index];\n+            self.report_illegal_reassignment(context, place_span, init.span, place_span.0);\n         }\n     }\n "}, {"sha": "5147075347283faa1b415158e0622cc2fc24b792", "filename": "src/test/ui/borrowck/assign_mutable_fields.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.nll.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -0,0 +1,9 @@\n+error[E0381]: use of possibly uninitialized variable: `x`\n+  --> $DIR/assign_mutable_fields.rs:29:10\n+   |\n+LL |     drop(x); //~ ERROR\n+   |          ^ use of possibly uninitialized `x`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "4e41f44ef5bb37297a1b82b1ada0a400fc7fcf39", "filename": "src/test/ui/borrowck/assign_mutable_fields.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.rs?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Currently, we permit you to assign to individual fields of a mut\n+// var, but we do not permit you to use the complete var afterwards.\n+// We hope to fix this at some point.\n+//\n+// FIXME(#21232)\n+\n+fn assign_both_fields_and_use() {\n+    let mut x: (u32, u32);\n+    x.0 = 1;\n+    x.1 = 22;\n+    drop(x.0); //~ ERROR\n+    drop(x.1); //~ ERROR\n+}\n+\n+fn assign_both_fields_the_use_var() {\n+    let mut x: (u32, u32);\n+    x.0 = 1;\n+    x.1 = 22;\n+    drop(x); //~ ERROR\n+}\n+\n+fn main() { }"}, {"sha": "677887babd0389213ddfe59633988eb0e6b7910f", "filename": "src/test/ui/borrowck/assign_mutable_fields.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -0,0 +1,21 @@\n+error[E0381]: use of possibly uninitialized variable: `x.0`\n+  --> $DIR/assign_mutable_fields.rs:21:10\n+   |\n+LL |     drop(x.0); //~ ERROR\n+   |          ^^^ use of possibly uninitialized `x.0`\n+\n+error[E0381]: use of possibly uninitialized variable: `x.1`\n+  --> $DIR/assign_mutable_fields.rs:22:10\n+   |\n+LL |     drop(x.1); //~ ERROR\n+   |          ^^^ use of possibly uninitialized `x.1`\n+\n+error[E0381]: use of possibly uninitialized variable: `x`\n+  --> $DIR/assign_mutable_fields.rs:29:10\n+   |\n+LL |     drop(x); //~ ERROR\n+   |          ^ use of possibly uninitialized `x`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "97f3bf5b81f66d79dc5b76e01bd4124e9ba5839b", "filename": "src/test/ui/borrowck/reassignment_immutable_fields.nll.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.nll.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -0,0 +1,44 @@\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/reassignment_immutable_fields.rs:17:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     x.0 = 1; //~ ERROR\n+   |     ^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.1`, as `x` is not declared as mutable\n+  --> $DIR/reassignment_immutable_fields.rs:18:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     x.0 = 1; //~ ERROR\n+LL |     x.1 = 22; //~ ERROR\n+   |     ^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/reassignment_immutable_fields.rs:25:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     x.0 = 1; //~ ERROR\n+   |     ^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.1`, as `x` is not declared as mutable\n+  --> $DIR/reassignment_immutable_fields.rs:26:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     x.0 = 1; //~ ERROR\n+LL |     x.1 = 22; //~ ERROR\n+   |     ^^^^^^^^ cannot assign\n+\n+error[E0381]: use of possibly uninitialized variable: `x`\n+  --> $DIR/reassignment_immutable_fields.rs:27:10\n+   |\n+LL |     drop(x); //~ ERROR\n+   |          ^ use of possibly uninitialized `x`\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors occurred: E0381, E0594.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "c49ae2f9567fc8214bc357672ca2653ca85e996c", "filename": "src/test/ui/borrowck/reassignment_immutable_fields.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.rs?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test is currently disallowed, but we hope someday to support it.\n+//\n+// FIXME(#21232)\n+\n+fn assign_both_fields_and_use() {\n+    let x: (u32, u32);\n+    x.0 = 1; //~ ERROR\n+    x.1 = 22; //~ ERROR\n+    drop(x.0); //~ ERROR\n+    drop(x.1); //~ ERROR\n+}\n+\n+fn assign_both_fields_the_use_var() {\n+    let x: (u32, u32);\n+    x.0 = 1; //~ ERROR\n+    x.1 = 22; //~ ERROR\n+    drop(x); //~ ERROR\n+}\n+\n+fn main() { }"}, {"sha": "54d12f8fae85d8ef419eb44010a0953a9ad8a18f", "filename": "src/test/ui/borrowck/reassignment_immutable_fields.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -0,0 +1,56 @@\n+error[E0594]: cannot assign to field `x.0` of immutable binding\n+  --> $DIR/reassignment_immutable_fields.rs:17:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - consider changing this to `mut x`\n+LL |     x.0 = 1; //~ ERROR\n+   |     ^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0594]: cannot assign to field `x.1` of immutable binding\n+  --> $DIR/reassignment_immutable_fields.rs:18:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - consider changing this to `mut x`\n+LL |     x.0 = 1; //~ ERROR\n+LL |     x.1 = 22; //~ ERROR\n+   |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0381]: use of possibly uninitialized variable: `x.0`\n+  --> $DIR/reassignment_immutable_fields.rs:19:10\n+   |\n+LL |     drop(x.0); //~ ERROR\n+   |          ^^^ use of possibly uninitialized `x.0`\n+\n+error[E0381]: use of possibly uninitialized variable: `x.1`\n+  --> $DIR/reassignment_immutable_fields.rs:20:10\n+   |\n+LL |     drop(x.1); //~ ERROR\n+   |          ^^^ use of possibly uninitialized `x.1`\n+\n+error[E0594]: cannot assign to field `x.0` of immutable binding\n+  --> $DIR/reassignment_immutable_fields.rs:25:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - consider changing this to `mut x`\n+LL |     x.0 = 1; //~ ERROR\n+   |     ^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0594]: cannot assign to field `x.1` of immutable binding\n+  --> $DIR/reassignment_immutable_fields.rs:26:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - consider changing this to `mut x`\n+LL |     x.0 = 1; //~ ERROR\n+LL |     x.1 = 22; //~ ERROR\n+   |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0381]: use of possibly uninitialized variable: `x`\n+  --> $DIR/reassignment_immutable_fields.rs:27:10\n+   |\n+LL |     drop(x); //~ ERROR\n+   |          ^ use of possibly uninitialized `x`\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors occurred: E0381, E0594.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "c433d6e25c9de134e1919de840ac5f19400dee7f", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.nll.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -0,0 +1,20 @@\n+error[E0594]: cannot assign to `x.a`, as `x` is not declared as mutable\n+  --> $DIR/reassignment_immutable_fields_overlapping.rs:22:5\n+   |\n+LL |     let x: Foo;\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     x.a = 1;  //~ ERROR\n+   |     ^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.b`, as `x` is not declared as mutable\n+  --> $DIR/reassignment_immutable_fields_overlapping.rs:23:5\n+   |\n+LL |     let x: Foo;\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     x.a = 1;  //~ ERROR\n+LL |     x.b = 22; //~ ERROR\n+   |     ^^^^^^^^ cannot assign\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "add23ec8f245bb5eac78a1138aeb89f51465c1d9", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.rs?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This should never be allowed -- `foo.a` and `foo.b` are\n+// overlapping, so since `x` is not `mut` we should not permit\n+// reassignment.\n+\n+union Foo {\n+    a: u32,\n+    b: u32,\n+}\n+\n+unsafe fn overlapping_fields() {\n+    let x: Foo;\n+    x.a = 1;  //~ ERROR\n+    x.b = 22; //~ ERROR\n+}\n+\n+fn main() { }"}, {"sha": "70849905f92ab84e1624c19063185e376e0b704f", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -0,0 +1,20 @@\n+error[E0594]: cannot assign to field `x.a` of immutable binding\n+  --> $DIR/reassignment_immutable_fields_overlapping.rs:22:5\n+   |\n+LL |     let x: Foo;\n+   |         - consider changing this to `mut x`\n+LL |     x.a = 1;  //~ ERROR\n+   |     ^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0594]: cannot assign to field `x.b` of immutable binding\n+  --> $DIR/reassignment_immutable_fields_overlapping.rs:23:5\n+   |\n+LL |     let x: Foo;\n+   |         - consider changing this to `mut x`\n+LL |     x.a = 1;  //~ ERROR\n+LL |     x.b = 22; //~ ERROR\n+   |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "2160ae20c425a512e42779043fb21d6c51ee1dba", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_twice.nll.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.nll.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -0,0 +1,38 @@\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/reassignment_immutable_fields_twice.rs:17:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     x = (22, 44);\n+LL |     x.0 = 1; //~ ERROR\n+   |     ^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/reassignment_immutable_fields_twice.rs:22:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     x.0 = 1; //~ ERROR\n+   |     ^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/reassignment_immutable_fields_twice.rs:23:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     x.0 = 1; //~ ERROR\n+LL |     x.0 = 22; //~ ERROR\n+   |     ^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.1`, as `x` is not declared as mutable\n+  --> $DIR/reassignment_immutable_fields_twice.rs:24:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - help: consider changing this to be mutable: `mut x`\n+...\n+LL |     x.1 = 44; //~ ERROR\n+   |     ^^^^^^^^ cannot assign\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "c7e7e5c453357718fa84cff9833be582864ef4d0", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_twice.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.rs?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This should never be allowed -- since `x` is not `mut`, so `x.0`\n+// cannot be assigned twice.\n+\n+fn var_then_field() {\n+    let x: (u32, u32);\n+    x = (22, 44);\n+    x.0 = 1; //~ ERROR\n+}\n+\n+fn same_field_twice() {\n+    let x: (u32, u32);\n+    x.0 = 1; //~ ERROR\n+    x.0 = 22; //~ ERROR\n+    x.1 = 44; //~ ERROR\n+}\n+\n+fn main() { }"}, {"sha": "b3c013d8b1f493ce3801aae56d9c4bc6874ceb9d", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_twice.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -0,0 +1,38 @@\n+error[E0594]: cannot assign to field `x.0` of immutable binding\n+  --> $DIR/reassignment_immutable_fields_twice.rs:17:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - consider changing this to `mut x`\n+LL |     x = (22, 44);\n+LL |     x.0 = 1; //~ ERROR\n+   |     ^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0594]: cannot assign to field `x.0` of immutable binding\n+  --> $DIR/reassignment_immutable_fields_twice.rs:22:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - consider changing this to `mut x`\n+LL |     x.0 = 1; //~ ERROR\n+   |     ^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0594]: cannot assign to field `x.0` of immutable binding\n+  --> $DIR/reassignment_immutable_fields_twice.rs:23:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - consider changing this to `mut x`\n+LL |     x.0 = 1; //~ ERROR\n+LL |     x.0 = 22; //~ ERROR\n+   |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0594]: cannot assign to field `x.1` of immutable binding\n+  --> $DIR/reassignment_immutable_fields_twice.rs:24:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - consider changing this to `mut x`\n+...\n+LL |     x.1 = 44; //~ ERROR\n+   |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "34bdf48e2a65f7a319705040244ba0da3942fe0e", "filename": "src/test/ui/did_you_mean/issue-35937.nll.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -6,26 +6,23 @@ LL |     let f = Foo { v: Vec::new() };\n LL |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n    |     ^^^ cannot borrow as mutable\n \n-error[E0384]: cannot assign twice to immutable variable `s`\n+error[E0594]: cannot assign to `s.x`, as `s` is not declared as mutable\n   --> $DIR/issue-35937.rs:26:5\n    |\n LL |     let s = S { x: 42 };\n-   |         -\n-   |         |\n-   |         first assignment to `s`\n-   |         consider changing this to `mut s`\n+   |         - help: consider changing this to be mutable: `mut s`\n LL |     s.x += 1; //~ ERROR cannot assign\n-   |     ^^^^^^^^ cannot assign twice to immutable variable\n+   |     ^^^^^^^^ cannot assign\n \n-error[E0384]: cannot assign to immutable argument `s`\n+error[E0594]: cannot assign to `s.x`, as `s` is not declared as mutable\n   --> $DIR/issue-35937.rs:30:5\n    |\n LL | fn bar(s: S) {\n-   |        - consider changing this to `mut s`\n+   |        - help: consider changing this to be mutable: `mut s`\n LL |     s.x += 1; //~ ERROR cannot assign\n-   |     ^^^^^^^^ cannot assign to immutable argument\n+   |     ^^^^^^^^ cannot assign\n \n error: aborting due to 3 previous errors\n \n-Some errors occurred: E0384, E0596.\n-For more information about an error, try `rustc --explain E0384`.\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "d33814a0fc5f5c49cd825ebae6fceb6c5c2787b5", "filename": "src/test/ui/immut-function-arguments.ast.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fimmut-function-arguments.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fimmut-function-arguments.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimmut-function-arguments.ast.nll.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -1,19 +1,19 @@\n-error[E0384]: cannot assign to immutable argument `y`\n+error[E0594]: cannot assign to `*y`, as `y` is not declared as mutable\n   --> $DIR/immut-function-arguments.rs:15:5\n    |\n LL | fn f(y: Box<isize>) {\n-   |      - consider changing this to `mut y`\n+   |      - help: consider changing this to be mutable: `mut y`\n LL |     *y = 5; //[ast]~ ERROR cannot assign\n-   |     ^^^^^^ cannot assign to immutable argument\n+   |     ^^^^^^ cannot assign\n \n-error[E0384]: cannot assign to immutable argument `q`\n+error[E0594]: cannot assign to `*q`, as `q` is not declared as mutable\n   --> $DIR/immut-function-arguments.rs:20:35\n    |\n LL |     let _frob = |q: Box<isize>| { *q = 2; }; //[ast]~ ERROR cannot assign\n-   |                  -                ^^^^^^ cannot assign to immutable argument\n+   |                  -                ^^^^^^ cannot assign\n    |                  |\n-   |                  consider changing this to `mut q`\n+   |                  help: consider changing this to be mutable: `mut q`\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0384`.\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "d33814a0fc5f5c49cd825ebae6fceb6c5c2787b5", "filename": "src/test/ui/immut-function-arguments.mir.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fimmut-function-arguments.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fimmut-function-arguments.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimmut-function-arguments.mir.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -1,19 +1,19 @@\n-error[E0384]: cannot assign to immutable argument `y`\n+error[E0594]: cannot assign to `*y`, as `y` is not declared as mutable\n   --> $DIR/immut-function-arguments.rs:15:5\n    |\n LL | fn f(y: Box<isize>) {\n-   |      - consider changing this to `mut y`\n+   |      - help: consider changing this to be mutable: `mut y`\n LL |     *y = 5; //[ast]~ ERROR cannot assign\n-   |     ^^^^^^ cannot assign to immutable argument\n+   |     ^^^^^^ cannot assign\n \n-error[E0384]: cannot assign to immutable argument `q`\n+error[E0594]: cannot assign to `*q`, as `q` is not declared as mutable\n   --> $DIR/immut-function-arguments.rs:20:35\n    |\n LL |     let _frob = |q: Box<isize>| { *q = 2; }; //[ast]~ ERROR cannot assign\n-   |                  -                ^^^^^^ cannot assign to immutable argument\n+   |                  -                ^^^^^^ cannot assign\n    |                  |\n-   |                  consider changing this to `mut q`\n+   |                  help: consider changing this to be mutable: `mut q`\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0384`.\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "033a3bd6cb4c3e80753c87a0d909bfc39892c2c8", "filename": "src/test/ui/mut/mutable-class-fields.ast.nll.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.nll.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -1,14 +1,11 @@\n-error[E0384]: cannot assign twice to immutable variable `nyan`\n+error[E0594]: cannot assign to `nyan.how_hungry`, as `nyan` is not declared as mutable\n   --> $DIR/mutable-class-fields.rs:28:3\n    |\n LL |   let nyan : cat = cat(52, 99);\n-   |       ----\n-   |       |\n-   |       first assignment to `nyan`\n-   |       consider changing this to `mut nyan`\n+   |       ---- help: consider changing this to be mutable: `mut nyan`\n LL |   nyan.how_hungry = 0; //[ast]~ ERROR cannot assign\n-   |   ^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+   |   ^^^^^^^^^^^^^^^^^^^ cannot assign\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0384`.\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "033a3bd6cb4c3e80753c87a0d909bfc39892c2c8", "filename": "src/test/ui/mut/mutable-class-fields.mir.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac79c718475fd29b8be34dde667b683390c2aee/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.mir.stderr?ref=3ac79c718475fd29b8be34dde667b683390c2aee", "patch": "@@ -1,14 +1,11 @@\n-error[E0384]: cannot assign twice to immutable variable `nyan`\n+error[E0594]: cannot assign to `nyan.how_hungry`, as `nyan` is not declared as mutable\n   --> $DIR/mutable-class-fields.rs:28:3\n    |\n LL |   let nyan : cat = cat(52, 99);\n-   |       ----\n-   |       |\n-   |       first assignment to `nyan`\n-   |       consider changing this to `mut nyan`\n+   |       ---- help: consider changing this to be mutable: `mut nyan`\n LL |   nyan.how_hungry = 0; //[ast]~ ERROR cannot assign\n-   |   ^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+   |   ^^^^^^^^^^^^^^^^^^^ cannot assign\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0384`.\n+For more information about this error, try `rustc --explain E0594`."}]}