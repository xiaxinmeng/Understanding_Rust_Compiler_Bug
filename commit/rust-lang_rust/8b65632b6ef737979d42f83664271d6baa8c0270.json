{"sha": "8b65632b6ef737979d42f83664271d6baa8c0270", "node_id": "C_kwDOAAsO6NoAKDhiNjU2MzJiNmVmNzM3OTc5ZDQyZjgzNjY0MjcxZDZiYWE4YzAyNzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-27T20:51:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-27T20:51:12Z"}, "message": "Auto merge of #10419 - deining:fix/typos, r=Jarcho\n\nFixing typos\n\nchangelog: none", "tree": {"sha": "8d87af91067812b6d36dd098b3f6f2885326ed1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d87af91067812b6d36dd098b3f6f2885326ed1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b65632b6ef737979d42f83664271d6baa8c0270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b65632b6ef737979d42f83664271d6baa8c0270", "html_url": "https://github.com/rust-lang/rust/commit/8b65632b6ef737979d42f83664271d6baa8c0270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b65632b6ef737979d42f83664271d6baa8c0270/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2742ac074877c4ce811dc40724abb4b39803797e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2742ac074877c4ce811dc40724abb4b39803797e", "html_url": "https://github.com/rust-lang/rust/commit/2742ac074877c4ce811dc40724abb4b39803797e"}, {"sha": "03a3f743652e3909d27f8b9efcba19ce0ac02206", "url": "https://api.github.com/repos/rust-lang/rust/commits/03a3f743652e3909d27f8b9efcba19ce0ac02206", "html_url": "https://github.com/rust-lang/rust/commit/03a3f743652e3909d27f8b9efcba19ce0ac02206"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "ea4978011b19c16fb6135e1a3641f9808c2e88f2", "filename": "book/src/development/proposals/syntax-tree-patterns.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b65632b6ef737979d42f83664271d6baa8c0270/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b65632b6ef737979d42f83664271d6baa8c0270/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md?ref=8b65632b6ef737979d42f83664271d6baa8c0270", "patch": "@@ -68,13 +68,13 @@ The second part of the motivation is clippy's dependence on unstable\n compiler-internal data structures. Clippy lints are currently written against\n the compiler's AST / HIR which means that even small changes in these data\n structures might break a lot of lints. The second goal of this RFC is to **make\n-lints independant of the compiler's AST / HIR data structures**.\n+lints independent of the compiler's AST / HIR data structures**.\n \n # Approach\n \n A lot of complexity in writing lints currently seems to come from having to\n manually implement the matching logic (see code samples above). It's an\n-imparative style that describes *how* to match a syntax tree node instead of\n+imperative style that describes *how* to match a syntax tree node instead of\n specifying *what* should be matched against declaratively. In other areas, it's\n common to use declarative patterns to describe desired information and let the\n implementation do the actual matching. A well-known example of this approach are\n@@ -270,7 +270,7 @@ pattern!{\n     // matches if expressions that **may or may not** have an else block\n     // Attn: `If(_, _, _)` matches only ifs that **have** an else block\n     //\n-    //              | if with else block | if witout else block\n+    //              | if with else block | if without else block\n     // If(_, _, _)  |       match        |       no match\n     // If(_, _, _?) |       match        |        match\n     // If(_, _, ()) |      no match      |        match\n@@ -568,7 +568,7 @@ another example, `Array( Lit(_)* )` is a valid pattern because the parameter of\n \n ## The IsMatch Trait\n \n-The pattern syntax and the *PatternTree* are independant of specific syntax tree\n+The pattern syntax and the *PatternTree* are independent of specific syntax tree\n implementations (rust ast / hir, syn, ...). When looking at the different\n pattern examples in the previous sections, it can be seen that the patterns\n don't contain any information specific to a certain syntax tree implementation.\n@@ -717,7 +717,7 @@ if false {\n #### Problems\n \n Extending Rust syntax (which is quite complex by itself) with additional syntax\n-needed for specifying patterns (alternations, sequences, repetisions, named\n+needed for specifying patterns (alternations, sequences, repetitions, named\n submatches, ...) might become difficult to read and really hard to parse\n properly.\n \n@@ -858,7 +858,7 @@ would be evaluated as soon as the `Block(_)#then` was matched.\n Another idea in this area would be to introduce a syntax for backreferences.\n They could be used to require that multiple parts of a pattern should match the\n same value. For example, the `assign_op_pattern` lint that searches for `a = a\n-op b` and recommends changing it to `a op= b` requires that both occurrances of\n+op b` and recommends changing it to `a op= b` requires that both occurrences of\n `a` are the same. Using `=#...` as syntax for backreferences, the lint could be\n implemented like this:\n \n@@ -882,7 +882,7 @@ least two return statements\" could be a practical addition.\n For patterns like \"a literal that is not a boolean literal\" one currently needs\n to list all alternatives except the boolean case. Introducing a negation\n operator that allows to write `Lit(!Bool(_))` might be a good idea. This pattern\n-would be eqivalent to `Lit( Char(_) | Int(_) )` (given that currently only three\n+would be equivalent to `Lit( Char(_) | Int(_) )` (given that currently only three\n literal types are implemented).\n \n #### Functional composition"}, {"sha": "d3d0d91c1be73062e594e7048f3cca12edb9e3ab", "filename": "clippy_lints/src/functions/impl_trait_in_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b65632b6ef737979d42f83664271d6baa8c0270/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_in_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b65632b6ef737979d42f83664271d6baa8c0270/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_in_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_in_params.rs?ref=8b65632b6ef737979d42f83664271d6baa8c0270", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check_fn<'tcx>(cx: &LateContext<'_>, kind: &'tcx FnKind<'_>, body:\n                             if let Some(gen_span) = generics.span_for_param_suggestion() {\n                                 diag.span_suggestion_with_style(\n                                     gen_span,\n-                                    \"add a type paremeter\",\n+                                    \"add a type parameter\",\n                                     format!(\", {{ /* Generic name */ }}: {}\", &param.name.ident().as_str()[5..]),\n                                     rustc_errors::Applicability::HasPlaceholders,\n                                     rustc_errors::SuggestionStyle::ShowAlways,\n@@ -35,7 +35,7 @@ pub(super) fn check_fn<'tcx>(cx: &LateContext<'_>, kind: &'tcx FnKind<'_>, body:\n                                         ident.span.ctxt(),\n                                         ident.span.parent(),\n                                     ),\n-                                    \"add a type paremeter\",\n+                                    \"add a type parameter\",\n                                     format!(\"<{{ /* Generic name */ }}: {}>\", &param.name.ident().as_str()[5..]),\n                                     rustc_errors::Applicability::HasPlaceholders,\n                                     rustc_errors::SuggestionStyle::ShowAlways,"}, {"sha": "e5945939e60b96e8d3a6e0e241000a5bca8a629e", "filename": "clippy_lints/src/functions/misnamed_getters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b65632b6ef737979d42f83664271d6baa8c0270/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b65632b6ef737979d42f83664271d6baa8c0270/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs?ref=8b65632b6ef737979d42f83664271d6baa8c0270", "patch": "@@ -97,7 +97,7 @@ pub fn check_fn(cx: &LateContext<'_>, kind: FnKind<'_>, decl: &FnDecl<'_>, body:\n \n     let Some(correct_field) = correct_field else {\n         // There is no field corresponding to the getter name.\n-        // FIXME: This can be a false positive if the correct field is reachable trought deeper autodereferences than used_field is\n+        // FIXME: This can be a false positive if the correct field is reachable through deeper autodereferences than used_field is\n         return;\n     };\n "}, {"sha": "97ecca450fac199448a26b9fce612632c1069f88", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b65632b6ef737979d42f83664271d6baa8c0270/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b65632b6ef737979d42f83664271d6baa8c0270/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=8b65632b6ef737979d42f83664271d6baa8c0270", "patch": "@@ -925,7 +925,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.66.0\"]\n     pub MANUAL_FILTER,\n     complexity,\n-    \"reimplentation of `filter`\"\n+    \"reimplementation of `filter`\"\n }\n \n #[derive(Default)]"}, {"sha": "213e5b33503e6ef974abfb63958c82b2be0a9681", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b65632b6ef737979d42f83664271d6baa8c0270/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b65632b6ef737979d42f83664271d6baa8c0270/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=8b65632b6ef737979d42f83664271d6baa8c0270", "patch": "@@ -617,7 +617,7 @@ fn item_children_by_name(tcx: TyCtxt<'_>, def_id: DefId, name: Symbol) -> Vec<Re\n /// Can return multiple resolutions when there are multiple versions of the same crate, e.g.\n /// `memchr::memchr` could return the functions from both memchr 1.0 and memchr 2.0.\n ///\n-/// Also returns multiple results when there are mulitple paths under the same name e.g. `std::vec`\n+/// Also returns multiple results when there are multiple paths under the same name e.g. `std::vec`\n /// would have both a [`DefKind::Mod`] and [`DefKind::Macro`].\n ///\n /// This function is expensive and should be used sparingly."}, {"sha": "80383743525faeb154adffae5469e973ce0069f4", "filename": "tests/ui/impl_trait_in_params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b65632b6ef737979d42f83664271d6baa8c0270/tests%2Fui%2Fimpl_trait_in_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b65632b6ef737979d42f83664271d6baa8c0270/tests%2Fui%2Fimpl_trait_in_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl_trait_in_params.stderr?ref=8b65632b6ef737979d42f83664271d6baa8c0270", "patch": "@@ -5,7 +5,7 @@ LL | pub fn a(_: impl Trait) {}\n    |             ^^^^^^^^^^\n    |\n    = note: `-D clippy::impl-trait-in-params` implied by `-D warnings`\n-help: add a type paremeter\n+help: add a type parameter\n    |\n LL | pub fn a<{ /* Generic name */ }: Trait>(_: impl Trait) {}\n    |         +++++++++++++++++++++++++++++++\n@@ -16,7 +16,7 @@ error: '`impl Trait` used as a function parameter'\n LL | pub fn c<C: Trait>(_: C, _: impl Trait) {}\n    |                             ^^^^^^^^^^\n    |\n-help: add a type paremeter\n+help: add a type parameter\n    |\n LL | pub fn c<C: Trait, { /* Generic name */ }: Trait>(_: C, _: impl Trait) {}\n    |                  +++++++++++++++++++++++++++++++"}, {"sha": "8ccc3da7b47c0aa301437e5fb1c8e6280f58bc6b", "filename": "tests/ui/implicit_clone.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b65632b6ef737979d42f83664271d6baa8c0270/tests%2Fui%2Fimplicit_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8b65632b6ef737979d42f83664271d6baa8c0270/tests%2Fui%2Fimplicit_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_clone.fixed?ref=8b65632b6ef737979d42f83664271d6baa8c0270", "patch": "@@ -87,7 +87,7 @@ fn main() {\n     let kitten = Kitten {};\n     let _ = kitten.clone();\n     let _ = own_same_from_ref(&kitten);\n-    // this shouln't lint\n+    // this shouldn't lint\n     let _ = kitten.to_vec();\n \n     // we expect no lints for this"}, {"sha": "5933331260777992c0a09aa001bbd4479bf1df59", "filename": "tests/ui/implicit_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b65632b6ef737979d42f83664271d6baa8c0270/tests%2Fui%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b65632b6ef737979d42f83664271d6baa8c0270/tests%2Fui%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_clone.rs?ref=8b65632b6ef737979d42f83664271d6baa8c0270", "patch": "@@ -87,7 +87,7 @@ fn main() {\n     let kitten = Kitten {};\n     let _ = kitten.to_owned();\n     let _ = own_same_from_ref(&kitten);\n-    // this shouln't lint\n+    // this shouldn't lint\n     let _ = kitten.to_vec();\n \n     // we expect no lints for this"}, {"sha": "a2a30c8b931ced0e391ac8d3b25d9929f01d2c9b", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b65632b6ef737979d42f83664271d6baa8c0270/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b65632b6ef737979d42f83664271d6baa8c0270/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=8b65632b6ef737979d42f83664271d6baa8c0270", "patch": "@@ -406,7 +406,7 @@ mod issue10041 {\n     struct Bomb;\n \n     impl Bomb {\n-        // Hidden <Rhs = Self> default generic paramter.\n+        // Hidden <Rhs = Self> default generic parameter.\n         pub fn new() -> impl PartialOrd {\n             0i32\n         }"}]}