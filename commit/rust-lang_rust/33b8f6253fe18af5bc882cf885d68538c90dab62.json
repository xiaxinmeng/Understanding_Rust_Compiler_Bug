{"sha": "33b8f6253fe18af5bc882cf885d68538c90dab62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYjhmNjI1M2ZlMThhZjViYzg4MmNmODg1ZDY4NTM4YzkwZGFiNjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-23T09:13:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-23T09:31:55Z"}, "message": "Don't use NonNull::dangling as sentinel value\n\nInstead, rely on alignment and use usize::MAX as sentinel.", "tree": {"sha": "f28bafed0cc0a842fe6cecc9ca4e7b7373d5246b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f28bafed0cc0a842fe6cecc9ca4e7b7373d5246b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33b8f6253fe18af5bc882cf885d68538c90dab62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33b8f6253fe18af5bc882cf885d68538c90dab62", "html_url": "https://github.com/rust-lang/rust/commit/33b8f6253fe18af5bc882cf885d68538c90dab62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33b8f6253fe18af5bc882cf885d68538c90dab62/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "210d61f05c8c2f9e58f167eb28ab9d8bbef4968b", "url": "https://api.github.com/repos/rust-lang/rust/commits/210d61f05c8c2f9e58f167eb28ab9d8bbef4968b", "html_url": "https://github.com/rust-lang/rust/commit/210d61f05c8c2f9e58f167eb28ab9d8bbef4968b"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "b50bf5c15d5bb32fc481e257782e669b196c7602", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/33b8f6253fe18af5bc882cf885d68538c90dab62/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b8f6253fe18af5bc882cf885d68538c90dab62/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=33b8f6253fe18af5bc882cf885d68538c90dab62", "patch": "@@ -258,6 +258,7 @@ use core::ops::Deref;\n use core::ops::CoerceUnsized;\n use core::ptr::{self, NonNull};\n use core::convert::From;\n+use core::usize;\n \n use alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n use string::String;\n@@ -449,6 +450,8 @@ impl<T: ?Sized> Rc<T> {\n     #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n     pub fn downgrade(this: &Self) -> Weak<T> {\n         this.inc_weak();\n+        // Make sure we do not create a dangling Weak\n+        debug_assert!(!is_dangling(this.ptr));\n         Weak { ptr: this.ptr }\n     }\n \n@@ -1154,8 +1157,9 @@ impl<T> From<Vec<T>> for Rc<[T]> {\n pub struct Weak<T: ?Sized> {\n     // This is a `NonNull` to allow optimizing the size of this type in enums,\n     // but it is not necessarily a valid pointer.\n-    // `Weak::new` sets this to a dangling pointer so that it doesn\u2019t need\n-    // to allocate space on the heap.\n+    // `Weak::new` sets this to `usize::MAX` so that it doesn\u2019t need\n+    // to allocate space on the heap.  That's not a value a real poiner\n+    // will ever have because RcBox has alignment at least 4.\n     ptr: NonNull<RcBox<T>>,\n }\n \n@@ -1185,15 +1189,14 @@ impl<T> Weak<T> {\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n     pub fn new() -> Weak<T> {\n         Weak {\n-            ptr: NonNull::dangling(),\n+            ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect(\"MAX is not 0\"),\n         }\n     }\n }\n \n pub(crate) fn is_dangling<T: ?Sized>(ptr: NonNull<T>) -> bool {\n     let address = ptr.as_ptr() as *mut () as usize;\n-    let align = align_of_val(unsafe { ptr.as_ref() });\n-    address == align\n+    address == usize::MAX\n }\n \n impl<T: ?Sized> Weak<T> {"}, {"sha": "4c14fef9b3183f09e6da943442607deb8c076ffb", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/33b8f6253fe18af5bc882cf885d68538c90dab62/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b8f6253fe18af5bc882cf885d68538c90dab62/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=33b8f6253fe18af5bc882cf885d68538c90dab62", "patch": "@@ -238,8 +238,9 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n pub struct Weak<T: ?Sized> {\n     // This is a `NonNull` to allow optimizing the size of this type in enums,\n     // but it is not necessarily a valid pointer.\n-    // `Weak::new` sets this to a dangling pointer so that it doesn\u2019t need\n-    // to allocate space on the heap.\n+    // `Weak::new` sets this to `usize::MAX` so that it doesn\u2019t need\n+    // to allocate space on the heap.  That's not a value a real poiner\n+    // will ever have because RcBox has alignment at least 4.\n     ptr: NonNull<ArcInner<T>>,\n }\n \n@@ -442,7 +443,11 @@ impl<T: ?Sized> Arc<T> {\n             // synchronize with the write coming from `is_unique`, so that the\n             // events prior to that write happen before this read.\n             match this.inner().weak.compare_exchange_weak(cur, cur + 1, Acquire, Relaxed) {\n-                Ok(_) => return Weak { ptr: this.ptr },\n+                Ok(_) => {\n+                    // Make sure we do not create a dangling Weak\n+                    debug_assert!(!is_dangling(this.ptr));\n+                    return Weak { ptr: this.ptr };\n+                }\n                 Err(old) => cur = old,\n             }\n         }\n@@ -1033,7 +1038,7 @@ impl<T> Weak<T> {\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n     pub fn new() -> Weak<T> {\n         Weak {\n-            ptr: NonNull::dangling(),\n+            ptr: NonNull::new(usize::MAX as *mut ArcInner<T>).expect(\"MAX is not 0\"),\n         }\n     }\n }"}]}