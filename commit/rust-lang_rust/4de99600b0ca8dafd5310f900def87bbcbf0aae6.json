{"sha": "4de99600b0ca8dafd5310f900def87bbcbf0aae6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZTk5NjAwYjBjYThkYWZkNTMxMGY5MDBkZWY4N2JiY2JmMGFhZTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-12T15:16:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:21Z"}, "message": "add a FIXME related to the non-free-region case\n\nI don't think it would actually be harmful to just ignore such cases\nbut I'm inclined not to take chances.", "tree": {"sha": "6c24c1bdb43372637d6da1c6905107a4e41104e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c24c1bdb43372637d6da1c6905107a4e41104e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4de99600b0ca8dafd5310f900def87bbcbf0aae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4de99600b0ca8dafd5310f900def87bbcbf0aae6", "html_url": "https://github.com/rust-lang/rust/commit/4de99600b0ca8dafd5310f900def87bbcbf0aae6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4de99600b0ca8dafd5310f900def87bbcbf0aae6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2057136326bfac61b29b7fac87289728f105ffe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2057136326bfac61b29b7fac87289728f105ffe3", "html_url": "https://github.com/rust-lang/rust/commit/2057136326bfac61b29b7fac87289728f105ffe3"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "822c7b76b8fd1a888c77c16982fe90eefa6164e9", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4de99600b0ca8dafd5310f900def87bbcbf0aae6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de99600b0ca8dafd5310f900def87bbcbf0aae6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=4de99600b0ca8dafd5310f900def87bbcbf0aae6", "patch": "@@ -550,7 +550,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // Now take pick constraints into account\n         let pick_constraints = self.pick_constraints.clone();\n         for p_c_i in pick_constraints.indices(scc_a) {\n-            self.apply_pick_constraint(scc_a, pick_constraints.option_regions(p_c_i));\n+            self.apply_pick_constraint(\n+                scc_a,\n+                pick_constraints[p_c_i].opaque_type_def_id,\n+                pick_constraints.option_regions(p_c_i),\n+            );\n         }\n \n         debug!(\n@@ -574,15 +578,24 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn apply_pick_constraint(\n         &mut self,\n         scc: ConstraintSccIndex,\n+        opaque_type_def_id: DefId,\n         option_regions: &[ty::RegionVid],\n     ) -> bool {\n         debug!(\"apply_pick_constraint(scc={:?}, option_regions={:#?})\", scc, option_regions,);\n \n         if let Some(uh_oh) =\n             option_regions.iter().find(|&&r| !self.universal_regions.is_universal_region(r))\n         {\n-            debug!(\"apply_pick_constraint: option region `{:?}` is not a universal region\", uh_oh);\n-            return false;\n+            // FIXME(#61773): This case can only occur with\n+            // `impl_trait_in_bindings`, I believe, and we are just\n+            // opting not to handle it for now. See #61773 for\n+            // details.\n+            bug!(\n+                \"pick constraint for `{:?}` has an option region `{:?}` \\\n+                 that is not a universal region\",\n+                opaque_type_def_id,\n+                uh_oh,\n+            );\n         }\n \n         // Create a mutable vector of the options. We'll try to winnow"}, {"sha": "23981d92562d22455dd0790d9603204caec416ac", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-elided.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4de99600b0ca8dafd5310f900def87bbcbf0aae6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de99600b0ca8dafd5310f900def87bbcbf0aae6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs?ref=4de99600b0ca8dafd5310f900def87bbcbf0aae6", "patch": "@@ -0,0 +1,27 @@\n+// edition:2018\n+// run-pass\n+// revisions: migrate mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n+trait Trait<'a, 'b> { }\n+impl<T> Trait<'_, '_> for T { }\n+\n+// Test case where we have elision in the impl trait and we have to\n+// pick the right region.\n+\n+// Ultimately `Trait<'x, 'static>`.\n+fn upper_bounds1(a: &u8) -> impl Trait<'_, 'static> {\n+    (a, a)\n+}\n+\n+// Ultimately `Trait<'x, 'x>`, so not really multiple bounds.\n+fn upper_bounds2(a: &u8) -> impl Trait<'_, '_> {\n+    (a, a)\n+}\n+\n+// Kind of a weird annoying case.\n+fn upper_bounds3<'b>(a: &u8) -> impl Trait<'_, 'b> {\n+    (a, a)\n+}\n+\n+fn main() { }"}]}