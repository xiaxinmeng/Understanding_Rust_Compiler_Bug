{"sha": "0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNzZhMzM3NmJkMThiNWFjZDJhNWRhYWNhNjE2N2JiMWQ5YmMyZDk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-16T22:21:08Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-16T22:21:08Z"}, "message": "Revert \"Moved arc to libstd and added an arc that allows shared mutable state through mutual exclusion.\"\n\nThis reverts commit 015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6.", "tree": {"sha": "4f2378c00b4c41a981e63dd331d833330a88f28d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f2378c00b4c41a981e63dd331d833330a88f28d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9", "html_url": "https://github.com/rust-lang/rust/commit/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69447e90021d7a35968ba32a8755a1be7e9d2a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/69447e90021d7a35968ba32a8755a1be7e9d2a4c", "html_url": "https://github.com/rust-lang/rust/commit/69447e90021d7a35968ba32a8755a1be7e9d2a4c"}], "stats": {"total": 90, "additions": 16, "deletions": 74}, "files": [{"sha": "f1ceeff9ea809a7d9a217506ccf3f94cac914bfd", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9", "patch": "@@ -39,7 +39,7 @@ export float, f32, f64;\n export box, char, str, ptr, vec, bool;\n export either, option, result, iter;\n export libc, os, io, run, rand, sys, unsafe, logging;\n-export arc, comm, task, future;\n+export comm, task, future;\n export extfmt;\n export tuple;\n export to_str;\n@@ -175,7 +175,6 @@ mod dvec_iter {\n }\n \n // Concurrency\n-mod arc;\n mod comm;\n mod task;\n mod future;"}, {"sha": "90ea10601ae7cc267e1408408d520c8165bb7339", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9", "patch": "@@ -7,7 +7,7 @@ export min_align_of;\n export pref_align_of;\n export refcount;\n export log_str;\n-export create_lock, lock_and_signal, condition, methods;\n+export lock_and_signal, condition, methods;\n \n enum type_desc = {\n     first_param: **libc::c_int,\n@@ -126,6 +126,8 @@ impl methods for condition {\n \n #[cfg(test)]\n mod tests {\n+    use std;\n+    import std::arc;\n \n     #[test]\n     fn size_of_basic() {"}, {"sha": "5200b0fe7a79e89a4668fe06cf929877ea947694", "filename": "src/libstd/arc.rs", "status": "renamed", "additions": 2, "deletions": 70, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9", "patch": "@@ -2,12 +2,9 @@\n share immutable data between tasks.\"]\n \n import comm::{port, chan, methods};\n-import sys::methods;\n \n export arc, get, clone, shared_arc, get_arc;\n \n-export exclusive, methods;\n-\n #[abi = \"cdecl\"]\n native mod rustrt {\n     #[rust_stack]\n@@ -19,12 +16,12 @@ native mod rustrt {\n         -> libc::intptr_t;\n }\n \n-type arc_data<T> = {\n+type arc_data<T: const> = {\n     mut count: libc::intptr_t,\n     data: T\n };\n \n-resource arc_destruct<T>(data: *libc::c_void) {\n+resource arc_destruct<T: const>(data: *libc::c_void) {\n     unsafe {\n         let data: ~arc_data<T> = unsafe::reinterpret_cast(data);\n         let new_count = rustrt::rust_atomic_decrement(&mut data.count);\n@@ -74,43 +71,6 @@ fn clone<T: const>(rc: &arc<T>) -> arc<T> {\n     arc_destruct(**rc)\n }\n \n-// An arc over mutable data that is protected by a lock.\n-type ex_data<T> = {lock: sys::lock_and_signal, data: T};\n-type exclusive<T> = arc_destruct<ex_data<T>>;\n-\n-fn exclusive<T>(-data: T) -> exclusive<T> {\n-    let data = ~{mut count: 1, data: {lock: sys::create_lock(),\n-                                      data: data}};\n-    unsafe {\n-        let ptr = unsafe::reinterpret_cast(data);\n-        unsafe::forget(data);\n-        arc_destruct(ptr)\n-    }\n-}\n-\n-impl methods<T> for exclusive<T> {\n-    fn clone() -> exclusive<T> {\n-        unsafe {\n-            // this makes me nervous...\n-            let ptr: ~arc_data<ex_data<T>> = unsafe::reinterpret_cast(*self);\n-            rustrt::rust_atomic_increment(&mut ptr.count);\n-            unsafe::forget(ptr);\n-        }\n-        arc_destruct(*self)\n-    }\n-\n-    fn with<U>(f: fn(sys::condition, x: &T) -> U) -> U {\n-        unsafe {\n-            let ptr: ~arc_data<ex_data<T>> = unsafe::reinterpret_cast(*self);\n-            let rec: &ex_data<T> = &(*ptr).data;\n-            unsafe::forget(ptr);\n-            rec.lock.lock_cond() {|c|\n-                f(c, &rec.data)\n-            }\n-        }\n-    }\n-}\n-\n // Convenience code for sharing arcs between tasks\n \n type get_chan<T: const send> = chan<chan<arc<T>>>;\n@@ -155,7 +115,6 @@ fn get_arc<T: send const>(c: get_chan<T>) -> arc::arc<T> {\n #[cfg(test)]\n mod tests {\n     import comm::*;\n-    import future::future;\n \n     #[test]\n     fn manually_share_arc() {\n@@ -201,31 +160,4 @@ mod tests {\n \n         assert p.recv() == ();\n     }\n-\n-    #[test]\n-    fn exclusive_arc() {\n-        let mut futures = [];\n-\n-        let num_tasks = 10u;\n-        let count = 1000u;\n-\n-        let total = exclusive(~mut 0u);\n-\n-        for uint::range(0u, num_tasks) {|_i|\n-            let total = total.clone();\n-            futures += [future::spawn({||\n-                for uint::range(0u, count) {|_i|\n-                    total.with {|_cond, count|\n-                        **count += 1u;\n-                    }\n-                }\n-            })];\n-        };\n-\n-        for futures.each {|f| f.get() };\n-\n-        total.with {|_cond, total|\n-            assert **total == num_tasks * count\n-        };\n-    }\n }", "previous_filename": "src/libcore/arc.rs"}, {"sha": "10b008d07c872299d9680680c8973b000fefdad8", "filename": "src/libstd/std.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9", "patch": "@@ -19,7 +19,7 @@ export net, net_tcp;\n export uv, uv_ll, uv_iotask, uv_global_loop;\n export c_vec, util, timer;\n export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap;\n-export rope, arena, par;\n+export rope, arena, arc, par;\n export ebml, dbg, getopts, json, rand, sha1, term, time, prettyprint;\n export test, tempfile, serialization;\n export cmp;\n@@ -69,6 +69,7 @@ mod term;\n mod time;\n mod prettyprint;\n mod arena;\n+mod arc;\n mod par;\n mod cmp;\n "}, {"sha": "85c77b04c5f34f4b54fb2e849d723c0023a1c2cf", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9", "patch": "@@ -10,6 +10,7 @@ import std::map;\n import std::map::hashmap;\n import std::deque;\n import std::deque::t;\n+import std::arc;\n import std::par;\n import io::writer_util;\n import comm::*;"}, {"sha": "6cacd7cd679ebc23ada48f15fdaf82ff7d8a6122", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9", "patch": "@@ -1,5 +1,7 @@\n // error-pattern: copying a noncopyable value\n \n+use std;\n+import std::arc;\n import comm::*;\n \n fn main() {"}, {"sha": "34adff6f0ae0c848bdaa257b901a196f37697935", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9", "patch": "@@ -1,3 +1,5 @@\n+use std;\n+import std::arc;\n import comm::*;\n \n fn main() {"}, {"sha": "1dd1123e7e7df4164cde0dd1177cf6217f9724cc", "filename": "src/test/run-fail/issue-2444.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2444.rs?ref=0276a3376bd18b5acd2a5daaca6167bb1d9bc2d9", "patch": "@@ -1,5 +1,8 @@\n // error-pattern:explicit failure\n \n+use std;\n+import std::arc;\n+\n enum e<T: const> { e(arc::arc<T>) }\n \n fn foo() -> e<int> {fail;}"}]}