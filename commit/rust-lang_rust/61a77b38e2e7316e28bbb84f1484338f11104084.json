{"sha": "61a77b38e2e7316e28bbb84f1484338f11104084", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYTc3YjM4ZTJlNzMxNmUyOGJiYjg0ZjE0ODQzMzhmMTExMDQwODQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-02-18T13:19:38Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T14:45:29Z"}, "message": "tests: Avoid transmuting from fn item types.", "tree": {"sha": "068cb5534eb32a839541575bcf5edfdc7c64328d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/068cb5534eb32a839541575bcf5edfdc7c64328d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61a77b38e2e7316e28bbb84f1484338f11104084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61a77b38e2e7316e28bbb84f1484338f11104084", "html_url": "https://github.com/rust-lang/rust/commit/61a77b38e2e7316e28bbb84f1484338f11104084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61a77b38e2e7316e28bbb84f1484338f11104084/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "644d6390bea90a73f093e956dd76e633d67314ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/644d6390bea90a73f093e956dd76e633d67314ed", "html_url": "https://github.com/rust-lang/rust/commit/644d6390bea90a73f093e956dd76e633d67314ed"}], "stats": {"total": 110, "additions": 51, "deletions": 59}, "files": [{"sha": "fdaad9e1fabcea336bfe6290b9ca79a54c0c9376", "filename": "src/test/run-pass/enum-clike-ffi-as-int.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/61a77b38e2e7316e28bbb84f1484338f11104084/src%2Ftest%2Frun-pass%2Fenum-clike-ffi-as-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a77b38e2e7316e28bbb84f1484338f11104084/src%2Ftest%2Frun-pass%2Fenum-clike-ffi-as-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-clike-ffi-as-int.rs?ref=61a77b38e2e7316e28bbb84f1484338f11104084", "patch": "@@ -25,16 +25,17 @@\n \n #[repr(u32)]\n enum Foo {\n-  A = 0,\n-  B = 23\n+    A = 0,\n+    B = 23\n }\n \n #[inline(never)]\n extern \"C\" fn foo(_x: usize) -> Foo { Foo::B }\n \n pub fn main() {\n-  unsafe {\n-    let f: extern \"C\" fn(usize) -> u32 = ::std::mem::transmute(foo);\n-    assert_eq!(f(0xDEADBEEF), Foo::B as u32);\n-  }\n+    unsafe {\n+        let f: extern \"C\" fn(usize) -> u32 =\n+            ::std::mem::transmute(foo as extern \"C\" fn(usize) -> Foo);\n+        assert_eq!(f(0xDEADBEEF), Foo::B as u32);\n+    }\n }"}, {"sha": "67baf2f9c49c190df6e4c089e6828bf4ba64a161", "filename": "src/test/run-pass/mir_refs_correct.rs", "status": "modified", "additions": 37, "deletions": 44, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/61a77b38e2e7316e28bbb84f1484338f11104084/src%2Ftest%2Frun-pass%2Fmir_refs_correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a77b38e2e7316e28bbb84f1484338f11104084/src%2Ftest%2Frun-pass%2Fmir_refs_correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_refs_correct.rs?ref=61a77b38e2e7316e28bbb84f1484338f11104084", "patch": "@@ -204,48 +204,41 @@ fn t24() -> fn(u8) -> S {\n     C4\n }\n \n-fn main(){\n-    unsafe {\n-        assert_eq!(t1()(), regular());\n-\n-        assert!(::std::mem::transmute::<_, *mut ()>(t2()) ==\n-                ::std::mem::transmute::<_, *mut ()>(E::U));\n-        assert!(::std::mem::transmute::<_, *mut ()>(t3()) ==\n-                ::std::mem::transmute::<_, *mut ()>(S));\n-\n-        assert_eq!(t4()(), S::hey());\n-        let s = S(42);\n-        assert_eq!(t5()(&s), <S as X>::hoy(&s));\n-\n-\n-        assert_eq!(t6()(), ext::regular_fn());\n-        assert!(::std::mem::transmute::<_, *mut ()>(t7()) ==\n-                ::std::mem::transmute::<_, *mut ()>(ext::E::U));\n-        assert!(::std::mem::transmute::<_, *mut ()>(t8()) ==\n-                ::std::mem::transmute::<_, *mut ()>(ext::S));\n-\n-        assert_eq!(t9()(), ext::S::hey());\n-        let sext = ext::S(6);\n-        assert_eq!(t10()(&sext), <ext::S as ext::X>::hoy(&sext));\n-\n-        let p = parametric::<u8>;\n-        assert!(::std::mem::transmute::<_, *mut ()>(t11()) ==\n-                ::std::mem::transmute::<_, *mut ()>(p));\n-\n-        assert_eq!(t12(), C);\n-        assert_eq!(t13(), C2);\n-        assert_eq!(t13_2(), C3);\n-\n-        assert_eq!(t14()(), <S as X>::hoy2());\n-        assert_eq!(t15()(&s), S::hey2(&s));\n-        assert_eq!(t16()(10u32, 20u32), F::f(10u32, 20u32));\n-        assert_eq!(t17()(30u32, 10u64), F::f(30u32, 10u64));\n-        assert_eq!(t18()(50u64, 5u64), F::f(50u64, 5u64));\n-        assert_eq!(t19()(322u64, 2u32), F::f(322u64, 2u32));\n-        assert_eq!(t20()(123u64, 38u32), <u32 as T<_, _>>::staticmeth(123, 38));\n-        assert_eq!(t21(), Unit);\n-        assert_eq!(t22(), None);\n-        assert_eq!(t23(), (CEnum::A, CEnum::B));\n-        assert_eq!(t24(), C4);\n-    }\n+fn main() {\n+    assert_eq!(t1()(), regular());\n+\n+    assert_eq!(t2() as *mut (), E::U as *mut ());\n+    assert_eq!(t3() as *mut (), S as *mut ());\n+\n+    assert_eq!(t4()(), S::hey());\n+    let s = S(42);\n+    assert_eq!(t5()(&s), <S as X>::hoy(&s));\n+\n+\n+    assert_eq!(t6()(), ext::regular_fn());\n+    assert_eq!(t7() as *mut (), ext::E::U as *mut ());\n+    assert_eq!(t8() as *mut (), ext::S as *mut ());\n+\n+    assert_eq!(t9()(), ext::S::hey());\n+    let sext = ext::S(6);\n+    assert_eq!(t10()(&sext), <ext::S as ext::X>::hoy(&sext));\n+\n+    let p = parametric::<u8>;\n+    assert_eq!(t11() as *mut (), p as *mut ());\n+\n+    assert_eq!(t12(), C);\n+    assert_eq!(t13(), C2);\n+    assert_eq!(t13_2(), C3);\n+\n+    assert_eq!(t14()(), <S as X>::hoy2());\n+    assert_eq!(t15()(&s), S::hey2(&s));\n+    assert_eq!(t16()(10u32, 20u32), F::f(10u32, 20u32));\n+    assert_eq!(t17()(30u32, 10u64), F::f(30u32, 10u64));\n+    assert_eq!(t18()(50u64, 5u64), F::f(50u64, 5u64));\n+    assert_eq!(t19()(322u64, 2u32), F::f(322u64, 2u32));\n+    assert_eq!(t20()(123u64, 38u32), <u32 as T<_, _>>::staticmeth(123, 38));\n+    assert_eq!(t21(), Unit);\n+    assert_eq!(t22(), None);\n+    assert_eq!(t23(), (CEnum::A, CEnum::B));\n+    assert_eq!(t24(), C4);\n }"}, {"sha": "2b7cf6c6682477bf890547c1bb854b9e96a8e425", "filename": "src/test/run-pass/nullable-pointer-ffi-compat.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61a77b38e2e7316e28bbb84f1484338f11104084/src%2Ftest%2Frun-pass%2Fnullable-pointer-ffi-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a77b38e2e7316e28bbb84f1484338f11104084/src%2Ftest%2Frun-pass%2Fnullable-pointer-ffi-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-ffi-compat.rs?ref=61a77b38e2e7316e28bbb84f1484338f11104084", "patch": "@@ -24,13 +24,14 @@\n use std::mem;\n \n #[inline(never)]\n-extern \"C\" fn foo<'a>(x: &'a isize) -> Option<&'a isize> { Some(x) }\n+extern \"C\" fn foo(x: &isize) -> Option<&isize> { Some(x) }\n \n static FOO: isize = 0xDEADBEE;\n \n pub fn main() {\n     unsafe {\n-        let f: for<'a> extern \"C\" fn(&'a isize) -> &'a isize = mem::transmute(foo);\n+        let f: extern \"C\" fn(&isize) -> &isize =\n+            mem::transmute(foo as extern \"C\" fn(&isize) -> Option<&isize>);\n         assert_eq!(*f(&FOO), FOO);\n     }\n }"}, {"sha": "dffdcfe0af562d5d4a59f4eba925f6e0f34e9ef2", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/61a77b38e2e7316e28bbb84f1484338f11104084/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a77b38e2e7316e28bbb84f1484338f11104084/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=61a77b38e2e7316e28bbb84f1484338f11104084", "patch": "@@ -12,8 +12,6 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-use std::{option, mem};\n-\n // Iota-reduction is a rule in the Calculus of (Co-)Inductive Constructions,\n // which \"says that a destructor applied to an object built from a constructor\n // behaves as expected\".  -- http://coq.inria.fr/doc/Reference-Manual006.html\n@@ -43,9 +41,9 @@ macro_rules! check_option {\n         check_option!($e, $T, |ptr| assert_eq!(*ptr, $e));\n     }};\n     ($e:expr, $T:ty, |$v:ident| $chk:expr) => {{\n-        assert!(option::Option::None::<$T>.is_none());\n+        assert!(None::<$T>.is_none());\n         let e = $e;\n-        let s_ = option::Option::Some::<$T>(e);\n+        let s_ = Some::<$T>(e);\n         let $v = s_.as_ref().unwrap();\n         $chk\n     }}\n@@ -78,9 +76,8 @@ pub fn main() {\n     check_type!(&17, &isize);\n     check_type!(box 18, Box<isize>);\n     check_type!(\"foo\".to_string(), String);\n-    check_type!(vec!(20, 22), Vec<isize> );\n-    let mint: usize = unsafe { mem::transmute(main) };\n+    check_type!(vec!(20, 22), Vec<isize>);\n     check_type!(main, fn(), |pthing| {\n-        assert_eq!(mint, unsafe { mem::transmute(*pthing) })\n+        assert_eq!(main as fn(), *pthing as fn())\n     });\n }"}]}