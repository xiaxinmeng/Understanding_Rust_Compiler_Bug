{"sha": "65778fa5e886c641422501e68ec7ffbe690abafc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1Nzc4ZmE1ZTg4NmM2NDE0MjI1MDFlNjhlYzdmZmJlNjkwYWJhZmM=", "commit": {"author": {"name": "Takayuki", "email": "takoyaki0316@gmail.com", "date": "2021-04-22T07:52:34Z"}, "committer": {"name": "Takayuki", "email": "takoyaki0316@gmail.com", "date": "2021-04-22T07:58:12Z"}, "message": "fix a false-positive inside const fn in comparison_chain", "tree": {"sha": "9bac518bc4f1462f883f5f3f84969ab845c1d7fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bac518bc4f1462f883f5f3f84969ab845c1d7fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65778fa5e886c641422501e68ec7ffbe690abafc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65778fa5e886c641422501e68ec7ffbe690abafc", "html_url": "https://github.com/rust-lang/rust/commit/65778fa5e886c641422501e68ec7ffbe690abafc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65778fa5e886c641422501e68ec7ffbe690abafc/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79b9eb53710020955ad900729ff9fb9440de1f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/79b9eb53710020955ad900729ff9fb9440de1f54", "html_url": "https://github.com/rust-lang/rust/commit/79b9eb53710020955ad900729ff9fb9440de1f54"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "150d8a3d6739ef060dca36a33d40a3af5541d27c", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65778fa5e886c641422501e68ec7ffbe690abafc/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65778fa5e886c641422501e68ec7ffbe690abafc/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=65778fa5e886c641422501e68ec7ffbe690abafc", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::implements_trait;\n use clippy_utils::{get_trait_def_id, if_sequence, is_else_clause, paths, SpanlessEq};\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_hir::{BinOpKind, Expr, ExprKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -64,6 +64,10 @@ impl<'tcx> LateLintPass<'tcx> for ComparisonChain {\n             return;\n         }\n \n+        if parent_node_is_if_const_fn(cx, expr) {\n+            return;\n+        }\n+\n         // Check that there exists at least one explicit else condition\n         let (conds, _) = if_sequence(expr);\n         if conds.len() < 2 {\n@@ -123,3 +127,11 @@ impl<'tcx> LateLintPass<'tcx> for ComparisonChain {\n fn kind_is_cmp(kind: BinOpKind) -> bool {\n     matches!(kind, BinOpKind::Lt | BinOpKind::Gt | BinOpKind::Eq)\n }\n+\n+fn parent_node_is_if_const_fn(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    match cx.tcx.hir().find(cx.tcx.hir().get_parent_item(expr.hir_id)) {\n+        Some(Node::Item(item)) => rustc_mir::const_eval::is_const_fn(cx.tcx, item.def_id.to_def_id()),\n+        Some(Node::ImplItem(impl_item)) => rustc_mir::const_eval::is_const_fn(cx.tcx, impl_item.def_id.to_def_id()),\n+        _ => false,\n+    }\n+}"}, {"sha": "c12c6a310275db9c77d39849235c02058c5ee4bb", "filename": "tests/ui/comparison_chain.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/65778fa5e886c641422501e68ec7ffbe690abafc/tests%2Fui%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65778fa5e886c641422501e68ec7ffbe690abafc/tests%2Fui%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomparison_chain.rs?ref=65778fa5e886c641422501e68ec7ffbe690abafc", "patch": "@@ -203,4 +203,32 @@ mod issue_5212 {\n     }\n }\n \n+enum Sign {\n+    Negative,\n+    Positive,\n+    Zero,\n+}\n+\n+impl Sign {\n+    const fn sign_i8(n: i8) -> Self {\n+        if n == 0 {\n+            Sign::Zero\n+        } else if n > 0 {\n+            Sign::Positive\n+        } else {\n+            Sign::Negative\n+        }\n+    }\n+}\n+\n+const fn sign_i8(n: i8) -> Sign {\n+    if n == 0 {\n+        Sign::Zero\n+    } else if n > 0 {\n+        Sign::Positive\n+    } else {\n+        Sign::Negative\n+    }\n+}\n+\n fn main() {}"}]}