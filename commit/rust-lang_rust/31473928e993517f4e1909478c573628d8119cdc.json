{"sha": "31473928e993517f4e1909478c573628d8119cdc", "node_id": "C_kwDOAAsO6NoAKDMxNDczOTI4ZTk5MzUxN2Y0ZTE5MDk0NzhjNTczNjI4ZDgxMTljZGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-19T11:30:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-19T11:30:45Z"}, "message": "Rollup merge of #99384 - compiler-errors:issue-99375, r=oli-obk\n\nuse body's param-env when checking if type needs drop\n\nThe type comes from the body, so we should be using the body's param-env, as opposed to the ADT's param env, because we know less in the latter compared to the former.\n\nFixes #99375", "tree": {"sha": "e50e4827b64645d338120e26e64603b4fe59adc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e50e4827b64645d338120e26e64603b4fe59adc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31473928e993517f4e1909478c573628d8119cdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1pXmCRBK7hj4Ov3rIwAATVgIABC9OIljkiX32vcoRCM2+uh8\nFmtCF4eew3Fe97o5SQdmuqu9dW/E96yCuL3YHhGJ6rYWRAdEWT6YENwInOXeAQTU\nJ7ynkh9rC/0Z/yfPV+YDI1OC06wWwbfKe+eAkpWvHu/UWK0GAkn6o1iqUPdUb6Tp\nBQjQ3M06fUwjQkeneomV2xOpFGXtBQ2raNQ79E7Dn65WAz8JQvroC2NS2Yxnptda\nNSRhIO+UWlLkSGF8DFsI0Q1PyLYFXKubw8OpYp4q8VJWEXCkWl/eaM5pEraL58It\n22LpZBpGQGv9xu9hatgyrWG6FMolYSqFQkpJUYo9PpZZRm6iVrwH2DCgSuBLPUs=\n=5SNo\n-----END PGP SIGNATURE-----\n", "payload": "tree e50e4827b64645d338120e26e64603b4fe59adc6\nparent bfefd587c081305ab81074fee1ff7fd26b058ef6\nparent 6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658230245 +0200\ncommitter GitHub <noreply@github.com> 1658230245 +0200\n\nRollup merge of #99384 - compiler-errors:issue-99375, r=oli-obk\n\nuse body's param-env when checking if type needs drop\n\nThe type comes from the body, so we should be using the body's param-env, as opposed to the ADT's param env, because we know less in the latter compared to the former.\n\nFixes #99375\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31473928e993517f4e1909478c573628d8119cdc", "html_url": "https://github.com/rust-lang/rust/commit/31473928e993517f4e1909478c573628d8119cdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31473928e993517f4e1909478c573628d8119cdc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfefd587c081305ab81074fee1ff7fd26b058ef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfefd587c081305ab81074fee1ff7fd26b058ef6", "html_url": "https://github.com/rust-lang/rust/commit/bfefd587c081305ab81074fee1ff7fd26b058ef6"}, {"sha": "6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99", "html_url": "https://github.com/rust-lang/rust/commit/6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "1f0d0ce04aaa3aebdb023c6a0950c67b78c8b709", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31473928e993517f4e1909478c573628d8119cdc/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31473928e993517f4e1909478c573628d8119cdc/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=31473928e993517f4e1909478c573628d8119cdc", "patch": "@@ -431,9 +431,9 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 let lhs = &self.thir[lhs];\n                 if let ty::Adt(adt_def, _) = lhs.ty.kind() && adt_def.is_union() {\n                     if let Some((assigned_ty, assignment_span)) = self.assignment_info {\n-                        if assigned_ty.needs_drop(self.tcx, self.tcx.param_env(adt_def.did())) {\n+                        if assigned_ty.needs_drop(self.tcx, self.param_env) {\n                             // This would be unsafe, but should be outright impossible since we reject such unions.\n-                            self.tcx.sess.delay_span_bug(assignment_span, \"union fields that need dropping should be impossible\");\n+                            self.tcx.sess.delay_span_bug(assignment_span, format!(\"union fields that need dropping should be impossible: {assigned_ty}\"));\n                         }\n                     } else {\n                         self.requires_unsafe(expr.span, AccessToUnionField);"}, {"sha": "a2ad96cfc16d2929999300a8000d06dbd6d5f4cc", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31473928e993517f4e1909478c573628d8119cdc/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31473928e993517f4e1909478c573628d8119cdc/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=31473928e993517f4e1909478c573628d8119cdc", "patch": "@@ -219,14 +219,11 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                     // We have to check the actual type of the assignment, as that determines if the\n                     // old value is being dropped.\n                     let assigned_ty = place.ty(&self.body.local_decls, self.tcx).ty;\n-                    if assigned_ty.needs_drop(\n-                        self.tcx,\n-                        self.tcx.param_env(base_ty.ty_adt_def().unwrap().did()),\n-                    ) {\n+                    if assigned_ty.needs_drop(self.tcx, self.param_env) {\n                         // This would be unsafe, but should be outright impossible since we reject such unions.\n                         self.tcx.sess.delay_span_bug(\n                             self.source_info.span,\n-                            \"union fields that need dropping should be impossible\",\n+                            format!(\"union fields that need dropping should be impossible: {assigned_ty}\")\n                         );\n                     }\n                 } else {"}, {"sha": "175018a7d71a71ac182efea4d7075c2d429dbd42", "filename": "src/test/ui/union/issue-99375.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31473928e993517f4e1909478c573628d8119cdc/src%2Ftest%2Fui%2Funion%2Fissue-99375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31473928e993517f4e1909478c573628d8119cdc/src%2Ftest%2Fui%2Funion%2Fissue-99375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-99375.rs?ref=31473928e993517f4e1909478c573628d8119cdc", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+union URes<R: Copy> {\n+    uninit: (),\n+    init: R,\n+}\n+\n+struct Params<F, R: Copy> {\n+    function: F,\n+    result: URes<R>,\n+}\n+\n+unsafe extern \"C\" fn do_call<F, R>(params: *mut Params<F, R>)\n+where\n+    R: Copy,\n+    F: Fn() -> R,\n+{\n+    (*params).result.init = ((*params).function)();\n+}\n+\n+fn main() {}"}]}