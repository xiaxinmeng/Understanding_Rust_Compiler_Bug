{"sha": "21cd0c7e703c1303930f1b6735384ae806fd7c01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxY2QwYzdlNzAzYzEzMDM5MzBmMWI2NzM1Mzg0YWU4MDZmZDdjMDE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-01T05:40:33Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-01T05:40:33Z"}, "message": "check for is_empty() method to get rid of false positives", "tree": {"sha": "2190a3e005448278d6123afed532795eff135d8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2190a3e005448278d6123afed532795eff135d8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21cd0c7e703c1303930f1b6735384ae806fd7c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21cd0c7e703c1303930f1b6735384ae806fd7c01", "html_url": "https://github.com/rust-lang/rust/commit/21cd0c7e703c1303930f1b6735384ae806fd7c01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21cd0c7e703c1303930f1b6735384ae806fd7c01/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77838d6ba78c23fdc337da7ece974beda95280df", "url": "https://api.github.com/repos/rust-lang/rust/commits/77838d6ba78c23fdc337da7ece974beda95280df", "html_url": "https://github.com/rust-lang/rust/commit/77838d6ba78c23fdc337da7ece974beda95280df"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "621cee5732899d28b0d81670c51040a9c8cdb9e1", "filename": "src/len_zero.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/21cd0c7e703c1303930f1b6735384ae806fd7c01/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cd0c7e703c1303930f1b6735384ae806fd7c01/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=21cd0c7e703c1303930f1b6735384ae806fd7c01", "patch": "@@ -1,11 +1,15 @@\n extern crate rustc_typeck as typeck;\n \n+use std::rc::Rc;\n+use std::cell::RefCell;\n use syntax::ptr::P;\n-use syntax::ast::*;\n use rustc::lint::{Context, LintPass, LintArray, Lint};\n-use rustc::middle::ty::{self, node_id_to_type, sty, ty_ptr, ty_rptr, mt, MethodTraitItemId};\n+use rustc::util::nodemap::DefIdMap;\n+use rustc::middle::ty::{self, node_id_to_type, sty, ty_ptr, ty_rptr, expr_ty,\n+\tmt, ty_to_def_id, impl_or_trait_item, MethodTraitItemId, ImplOrTraitItemId};\n use rustc::middle::def::{DefTy, DefStruct, DefTrait};\n use syntax::codemap::{Span, Spanned};\n+use syntax::ast::*;\n \n declare_lint!(pub LEN_ZERO, Warn,\n               \"Warn on usage of double-mut refs, e.g. '&mut &mut ...'\");\n@@ -69,7 +73,9 @@ fn check_impl_items(cx: &Context, item: &Item, impl_items: &[P<ImplItem>]) {\n \tif !impl_items.iter().any(|i| is_named_self(i, \"is_empty\")) {\n \t\tfor i in impl_items {\n \t\t\tif is_named_self(i, \"len\") {\n-\t\t\t\tcx.span_lint(LEN_WITHOUT_IS_EMPTY, i.span,\n+\t\t\t\tlet s = i.span;\n+\t\t\t\tcx.span_lint(LEN_WITHOUT_IS_EMPTY, \n+\t\t\t\t\tSpan{ lo: s.lo, hi: s.lo, expn_id: s.expn_id },\n \t\t\t\t\t&format!(\"Item '{}' has a '.len()' method, but no \\\n \t\t\t\t\t\t'.is_empty()' method. Consider adding one.\", \n \t\t\t\t\t\titem.ident.as_str()));\n@@ -92,10 +98,30 @@ fn check_cmp(cx: &Context, span: Span, left: &Expr, right: &Expr, empty: &str) {\n fn check_len_zero(cx: &Context, span: Span, method: &SpannedIdent, \n \t\targs: &[P<Expr>], lit: &Lit, empty: &str) {\n \tif let &Spanned{node: LitInt(0, _), ..} = lit {\n-\t\tif method.node.as_str() == \"len\" && args.len() == 1 {\n+\t\tif method.node.as_str() == \"len\" && args.len() == 1 &&\n+\t\t\thas_is_empty(cx, &expr_ty(cx.tcx, &*args[0])) {\n \t\t\tcx.span_lint(LEN_ZERO, span, &format!(\n-\t\t\t\t\"Consider replacing the len comparison with '{}_.is_empty()' if available\",\n+\t\t\t\t\"Consider replacing the len comparison with \\\n+\t\t\t\t'{}_.is_empty()' if available\",\n \t\t\t\t\tempty))\n \t\t}\n \t}\n }\n+\n+fn has_is_empty(cx: &Context, ty: &::rustc::middle::ty::Ty) -> bool {\n+\tfn check_item(cx: &Context, id: &ImplOrTraitItemId) -> bool {\n+\t\tif let &MethodTraitItemId(ref def_id) = id {\n+\t\t\tif let ty::MethodTraitItem(ref method) = ty::impl_or_trait_item(\n+\t\t\t\t\tcx.tcx, *def_id) {\n+\t\t\t\tmethod.name.as_str() == \"is_empty\"\n+\t\t\t} else { false }\n+\t\t} else { false }\n+\t}\n+\t\n+\t::rustc::middle::ty::ty_to_def_id(ty).map_or(true, |id| {\n+\t\tcx.tcx.impl_items.borrow().get(&id).map_or(false, |item_ids| {\n+\t\t\titem_ids.iter().any(|i| check_item(cx, i))\n+\t\t}) || cx.tcx.trait_item_def_ids.borrow().get(&id).map_or(false,\n+\t\t\t|item_ids| { item_ids.iter().any(|i| check_item(cx, i)) })\n+\t})\n+}"}, {"sha": "39fcb3c1804ff6211fb0c17f53e95c777a7753ad", "filename": "tests/compile-fail/len_zero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21cd0c7e703c1303930f1b6735384ae806fd7c01/tests%2Fcompile-fail%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cd0c7e703c1303930f1b6735384ae806fd7c01/tests%2Fcompile-fail%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flen_zero.rs?ref=21cd0c7e703c1303930f1b6735384ae806fd7c01", "patch": "@@ -44,8 +44,7 @@ fn main() {\n \t}\n \t\n \tlet y = One;\n-\t// false positives here\n-\tif y.len()  == 0 { //~ERROR Consider replacing the len comparison\n+\tif y.len()  == 0 { //no error because One does not have .is_empty()\n \t\tprintln!(\"This should not happen either!\");\n \t}\n \t"}]}