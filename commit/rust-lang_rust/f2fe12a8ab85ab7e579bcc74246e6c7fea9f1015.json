{"sha": "f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZmUxMmE4YWI4NWFiN2U1NzliY2M3NDI0NmU2YzdmZWE5ZjEwMTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-02T18:00:02Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-13T17:09:09Z"}, "message": "libpanic_unwind => 2018", "tree": {"sha": "aef710c49c8d9db722226912f272c80430094230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aef710c49c8d9db722226912f272c80430094230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015", "html_url": "https://github.com/rust-lang/rust/commit/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e54494727855cd14229f5d456591ed2a2f027c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e54494727855cd14229f5d456591ed2a2f027c46", "html_url": "https://github.com/rust-lang/rust/commit/e54494727855cd14229f5d456591ed2a2f027c46"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "1b3901ac11a96c580c605497a3a074c2fe58c50d", "filename": "src/libpanic_unwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2FCargo.toml?ref=f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"panic_unwind\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n path = \"lib.rs\""}, {"sha": "07fa2971847f65d5d49df89a547e3b6c8ca86d75", "filename": "src/libpanic_unwind/dwarf/eh.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs?ref=f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015", "patch": "@@ -11,7 +11,7 @@\n #![allow(non_upper_case_globals)]\n #![allow(unused)]\n \n-use dwarf::DwarfReader;\n+use crate::dwarf::DwarfReader;\n use core::mem;\n \n pub const DW_EH_PE_omit: u8 = 0xFF;\n@@ -51,7 +51,7 @@ pub enum EHAction {\n \n pub const USING_SJLJ_EXCEPTIONS: bool = cfg!(all(target_os = \"ios\", target_arch = \"arm\"));\n \n-pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext)\n+pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext<'_>)\n     -> Result<EHAction, ()>\n {\n     if lsda.is_null() {\n@@ -145,7 +145,7 @@ fn round_up(unrounded: usize, align: usize) -> Result<usize, ()> {\n }\n \n unsafe fn read_encoded_pointer(reader: &mut DwarfReader,\n-                               context: &EHContext,\n+                               context: &EHContext<'_>,\n                                encoding: u8)\n                                -> Result<usize, ()> {\n     if encoding == DW_EH_PE_omit {"}, {"sha": "18e9006468ef3500c6b7f4de3d79d2a440673013", "filename": "src/libpanic_unwind/emcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015", "patch": "@@ -10,10 +10,10 @@\n \n use core::any::Any;\n use core::ptr;\n+use core::mem;\n use alloc::boxed::Box;\n use libc::{self, c_int};\n use unwind as uw;\n-use core::mem;\n \n pub fn payload() -> *mut u8 {\n     ptr::null_mut()"}, {"sha": "e2b743b379704b5faf18c1d96c14b6aae9a00f72", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015", "patch": "@@ -52,7 +52,7 @@ use alloc::boxed::Box;\n \n use unwind as uw;\n use libc::{c_int, uintptr_t};\n-use dwarf::eh::{self, EHContext, EHAction};\n+use crate::dwarf::eh::{self, EHContext, EHAction};\n \n #[repr(C)]\n struct Exception {"}, {"sha": "0369880a8d1a65da4610eab2385562d8846a2a6b", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015", "patch": "@@ -17,6 +17,8 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n \n+#![deny(rust_2018_idioms)]\n+\n #![feature(allocator_api)]\n #![feature(alloc)]\n #![feature(core_intrinsics)]\n@@ -32,8 +34,6 @@\n #![panic_runtime]\n #![feature(panic_runtime)]\n \n-extern crate alloc;\n-extern crate libc;\n #[cfg(not(any(target_env = \"msvc\", all(windows, target_arch = \"x86_64\", target_env = \"gnu\"))))]\n extern crate unwind;\n \n@@ -87,7 +87,7 @@ pub unsafe extern \"C\" fn __rust_maybe_catch_panic(f: fn(*mut u8),\n                                                   vtable_ptr: *mut usize)\n                                                   -> u32 {\n     let mut payload = imp::payload();\n-    if intrinsics::try(f, data, &mut payload as *mut _ as *mut _) == 0 {\n+    if intrinsics::r#try(f, data, &mut payload as *mut _ as *mut _) == 0 {\n         0\n     } else {\n         let obj = mem::transmute::<_, raw::TraitObject>(imp::cleanup(payload));"}, {"sha": "996fdb931eff2d49000f7d56212adea96c5d0172", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015", "patch": "@@ -52,7 +52,7 @@ use core::any::Any;\n use core::mem;\n use core::raw;\n \n-use windows as c;\n+use crate::windows as c;\n use libc::{c_int, c_uint};\n \n // First up, a whole bunch of type definitions. There's a few platform-specific\n@@ -301,5 +301,5 @@ pub unsafe fn cleanup(payload: [u64; 2]) -> Box<dyn Any + Send> {\n #[lang = \"eh_personality\"]\n #[cfg(not(test))]\n fn rust_eh_personality() {\n-    unsafe { ::core::intrinsics::abort() }\n+    unsafe { core::intrinsics::abort() }\n }"}, {"sha": "457ffcd34f9c7ad423cbeeed910b342e85655534", "filename": "src/libpanic_unwind/seh64_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh64_gnu.rs?ref=f2fe12a8ab85ab7e579bcc74246e6c7fea9f1015", "patch": "@@ -9,8 +9,8 @@ use alloc::boxed::Box;\n use core::any::Any;\n use core::intrinsics;\n use core::ptr;\n-use dwarf::eh::{EHContext, EHAction, find_eh_action};\n-use windows as c;\n+use crate::dwarf::eh::{EHContext, EHAction, find_eh_action};\n+use crate::windows as c;\n \n // Define our exception codes:\n // according to http://msdn.microsoft.com/en-us/library/het71c37(v=VS.80).aspx,"}]}