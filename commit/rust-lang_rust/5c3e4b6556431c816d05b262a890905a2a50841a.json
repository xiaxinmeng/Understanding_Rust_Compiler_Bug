{"sha": "5c3e4b6556431c816d05b262a890905a2a50841a", "node_id": "C_kwDOAAsO6NoAKDVjM2U0YjY1NTY0MzFjODE2ZDA1YjI2MmE4OTA5MDVhMmE1MDg0MWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-29T12:07:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-29T12:07:14Z"}, "message": "Auto merge of #2162 - RalfJung:rustup, r=RalfJung\n\nrustup\n\nCc https://github.com/rust-lang/rust/issues/97486", "tree": {"sha": "d566d8a99c727f8c9556a7f577089e42d6334bb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d566d8a99c727f8c9556a7f577089e42d6334bb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c3e4b6556431c816d05b262a890905a2a50841a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3e4b6556431c816d05b262a890905a2a50841a", "html_url": "https://github.com/rust-lang/rust/commit/5c3e4b6556431c816d05b262a890905a2a50841a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c3e4b6556431c816d05b262a890905a2a50841a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45f2f0d5f746719c262d7bcfd2cfa8b4416ed6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e45f2f0d5f746719c262d7bcfd2cfa8b4416ed6c", "html_url": "https://github.com/rust-lang/rust/commit/e45f2f0d5f746719c262d7bcfd2cfa8b4416ed6c"}, {"sha": "7cd5fc3de327b9db96918cc895676f2d94c0a44d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd5fc3de327b9db96918cc895676f2d94c0a44d", "html_url": "https://github.com/rust-lang/rust/commit/7cd5fc3de327b9db96918cc895676f2d94c0a44d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "8da4cbec7ff2871e70f43bdc46df9f5c5f23ea1c", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3e4b6556431c816d05b262a890905a2a50841a/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/5c3e4b6556431c816d05b262a890905a2a50841a/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=5c3e4b6556431c816d05b262a890905a2a50841a", "patch": "@@ -1 +1 @@\n-68314177e70017c08f6cdf295631bb508f9f85bc\n+0f06824013761ed6829887019033f1001e68f623"}, {"sha": "5a76e15465c460680ec057cc41143c85a008a4f5", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=5c3e4b6556431c816d05b262a890905a2a50841a", "patch": "@@ -849,7 +849,7 @@ where\n     throw_ub_format!(\"incorrect number of arguments: got {}, expected {}\", args.len(), N)\n }\n \n-pub fn isolation_abort_error(name: &str) -> InterpResult<'static> {\n+pub fn isolation_abort_error<'tcx>(name: &str) -> InterpResult<'tcx> {\n     throw_machine_stop!(TerminationInfo::UnsupportedInIsolation(format!(\n         \"{} not available when isolation is enabled\",\n         name,"}, {"sha": "05296d3a4eb70e47db8236c871fc701ee6e49eaa", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=5c3e4b6556431c816d05b262a890905a2a50841a", "patch": "@@ -15,7 +15,7 @@ pub enum Dlsym {\n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n-    pub fn from_str(name: &[u8], target_os: &str) -> InterpResult<'static, Option<Dlsym>> {\n+    pub fn from_str<'tcx>(name: &[u8], target_os: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n         let name = &*String::from_utf8_lossy(name);\n         Ok(match target_os {\n             \"linux\" | \"macos\" => posix::Dlsym::from_str(name, target_os)?.map(Dlsym::Posix),"}, {"sha": "339110467c73e2a08ce019a73c39cf32af645d1c", "filename": "src/shims/posix/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fshims%2Fposix%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fshims%2Fposix%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fdlsym.rs?ref=5c3e4b6556431c816d05b262a890905a2a50841a", "patch": "@@ -14,7 +14,7 @@ pub enum Dlsym {\n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n-    pub fn from_str(name: &str, target_os: &str) -> InterpResult<'static, Option<Dlsym>> {\n+    pub fn from_str<'tcx>(name: &str, target_os: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n         Ok(match target_os {\n             \"linux\" => linux::Dlsym::from_str(name)?.map(Dlsym::Linux),\n             \"macos\" => macos::Dlsym::from_str(name)?.map(Dlsym::MacOs),"}, {"sha": "72e8c7f16f8530f862f92b0c4aec0612ca995b5a", "filename": "src/shims/posix/linux/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs?ref=5c3e4b6556431c816d05b262a890905a2a50841a", "patch": "@@ -8,7 +8,7 @@ pub enum Dlsym {}\n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n-    pub fn from_str(name: &str) -> InterpResult<'static, Option<Dlsym>> {\n+    pub fn from_str<'tcx>(name: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n         Ok(match &*name {\n             \"__pthread_get_minstack\" => None,\n             \"getrandom\" => None, // std falls back to syscall(SYS_getrandom, ...) when this is NULL."}, {"sha": "2e97b7918e96be7ebc074c82eee0f73f02bf554c", "filename": "src/shims/posix/macos/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs?ref=5c3e4b6556431c816d05b262a890905a2a50841a", "patch": "@@ -14,7 +14,7 @@ pub enum Dlsym {\n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n-    pub fn from_str(name: &str) -> InterpResult<'static, Option<Dlsym>> {\n+    pub fn from_str<'tcx>(name: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n         Ok(match name {\n             \"getentropy\" => Some(Dlsym::getentropy),\n             _ => throw_unsup_format!(\"unsupported macOS dlsym: {}\", name),"}, {"sha": "fb0c334b3d938cf056a55eb41386bee078077c93", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=5c3e4b6556431c816d05b262a890905a2a50841a", "patch": "@@ -15,7 +15,7 @@ pub enum Dlsym {\n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n-    pub fn from_str(name: &str) -> InterpResult<'static, Option<Dlsym>> {\n+    pub fn from_str<'tcx>(name: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n         Ok(match name {\n             \"GetSystemTimePreciseAsFileTime\" => None,\n             \"NtWriteFile\" => Some(Dlsym::NtWriteFile),"}, {"sha": "d492a565a728f793ace8aaf988669f1bd04c7982", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=5c3e4b6556431c816d05b262a890905a2a50841a", "patch": "@@ -227,11 +227,11 @@ impl GlobalStateInner {\n }\n \n /// Error reporting\n-pub fn err_sb_ub(\n+pub fn err_sb_ub<'tcx>(\n     msg: String,\n     help: Option<String>,\n     history: Option<TagHistory>,\n-) -> InterpError<'static> {\n+) -> InterpError<'tcx> {\n     err_machine_stop!(TerminationInfo::ExperimentalUb {\n         msg,\n         help,"}, {"sha": "5400e9abe503807fecf101da6388346d2a076829", "filename": "src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3e4b6556431c816d05b262a890905a2a50841a/src%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fdiagnostics.rs?ref=5c3e4b6556431c816d05b262a890905a2a50841a", "patch": "@@ -195,15 +195,15 @@ impl AllocHistory {\n     }\n \n     /// Report a descriptive error when `new` could not be granted from `derived_from`.\n-    pub fn grant_error(\n+    pub fn grant_error<'tcx>(\n         &self,\n         derived_from: SbTag,\n         new: Item,\n         alloc_id: AllocId,\n         alloc_range: AllocRange,\n         error_offset: Size,\n         stack: &Stack,\n-    ) -> InterpError<'static> {\n+    ) -> InterpError<'tcx> {\n         let action = format!(\n             \"trying to reborrow {:?} for {:?} permission at {}[{:#x}]\",\n             derived_from,\n@@ -219,15 +219,15 @@ impl AllocHistory {\n     }\n \n     /// Report a descriptive error when `access` is not permitted based on `tag`.\n-    pub fn access_error(\n+    pub fn access_error<'tcx>(\n         &self,\n         access: AccessKind,\n         tag: SbTag,\n         alloc_id: AllocId,\n         alloc_range: AllocRange,\n         error_offset: Size,\n         stack: &Stack,\n-    ) -> InterpError<'static> {\n+    ) -> InterpError<'tcx> {\n         let action = format!(\n             \"attempting a {} using {:?} at {}[{:#x}]\",\n             access,"}]}