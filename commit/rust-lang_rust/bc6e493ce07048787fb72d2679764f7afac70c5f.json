{"sha": "bc6e493ce07048787fb72d2679764f7afac70c5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNmU0OTNjZTA3MDQ4Nzg3ZmI3MmQyNjc5NzY0ZjdhZmFjNzBjNWY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-13T03:07:34Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-13T03:29:43Z"}, "message": "More closures refactoring", "tree": {"sha": "88f0b60fdb2d91c62b99eaac255f86b5ec2078cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f0b60fdb2d91c62b99eaac255f86b5ec2078cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc6e493ce07048787fb72d2679764f7afac70c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6e493ce07048787fb72d2679764f7afac70c5f", "html_url": "https://github.com/rust-lang/rust/commit/bc6e493ce07048787fb72d2679764f7afac70c5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc6e493ce07048787fb72d2679764f7afac70c5f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6800bf27db5838144c7be7af317239af91b9b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6800bf27db5838144c7be7af317239af91b9b55", "html_url": "https://github.com/rust-lang/rust/commit/e6800bf27db5838144c7be7af317239af91b9b55"}], "stats": {"total": 81, "additions": 50, "deletions": 31}, "files": [{"sha": "9412992171680ca9db9aaadc604c24bbdefb6863", "filename": "src/closures.rs", "status": "modified", "additions": 50, "deletions": 31, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/bc6e493ce07048787fb72d2679764f7afac70c5f/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6e493ce07048787fb72d2679764f7afac70c5f/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=bc6e493ce07048787fb72d2679764f7afac70c5f", "patch": "@@ -48,37 +48,10 @@ pub fn rewrite_closure(\n     let body_shape = shape.offset_left(extra_offset)?;\n \n     if let ast::ExprKind::Block(ref block) = body.node {\n-        // The body of the closure is an empty block.\n-        if block.stmts.is_empty() && !block_contains_comment(block, context.codemap) {\n-            return Some(format!(\"{} {{}}\", prefix));\n-        }\n-\n-        let no_return_type = match fn_decl.output {\n-            ast::FunctionRetTy::Default(_) => true,\n-            _ => false,\n-        };\n-\n-        // Figure out if the block is necessary.\n-        let needs_block = is_unsafe_block(block) || block.stmts.len() > 1 || context.inside_macro\n-            || block_contains_comment(block, context.codemap)\n-            || prefix.contains('\\n');\n-\n-        if no_return_type && !needs_block {\n-            // block.stmts.len() == 1\n-            if let Some(expr) = stmt_expr(&block.stmts[0]) {\n-                let result = if is_block_closure_forced(expr) {\n-                    rewrite_closure_with_block(expr, &prefix, context, shape)\n-                } else {\n-                    rewrite_closure_expr(expr, &prefix, context, body_shape)\n-                };\n-                if result.is_some() {\n-                    return result;\n-                }\n-            }\n-        }\n-\n-        // Either we require a block, or tried without and failed.\n-        rewrite_closure_block(block, &prefix, context, body_shape)\n+        try_rewrite_without_block(block, fn_decl, &prefix, context, shape, body_shape).or_else(|| {\n+            // Either we require a block, or tried without and failed.\n+            rewrite_closure_block(block, &prefix, context, body_shape)\n+        })\n     } else {\n         rewrite_closure_expr(body, &prefix, context, body_shape).or_else(|| {\n             // The closure originally had a non-block expression, but we can't fit on\n@@ -88,6 +61,52 @@ pub fn rewrite_closure(\n     }\n }\n \n+fn try_rewrite_without_block(\n+    block: &ast::Block,\n+    fn_decl: &ast::FnDecl,\n+    prefix: &str,\n+    context: &RewriteContext,\n+    shape: Shape,\n+    body_shape: Shape,\n+) -> Option<String> {\n+    // The body of the closure is an empty block.\n+    if block.stmts.is_empty() && !block_contains_comment(block, context.codemap) {\n+        return Some(format!(\"{} {{}}\", prefix));\n+    }\n+\n+    match fn_decl.output {\n+        ast::FunctionRetTy::Default(_) => {}\n+        _ => return None,\n+    }\n+\n+    get_inner_expr(block, prefix, context).and_then(|expr| {\n+        return if is_block_closure_forced(expr) {\n+            rewrite_closure_with_block(expr, prefix, context, shape)\n+        } else {\n+            rewrite_closure_expr(expr, prefix, context, body_shape)\n+        };\n+    })\n+}\n+\n+fn get_inner_expr<'a>(\n+    block: &'a ast::Block,\n+    prefix: &str,\n+    context: &RewriteContext,\n+) -> Option<&'a ast::Expr> {\n+    if !needs_block(block, prefix, context) {\n+        // block.stmts.len() == 1\n+        stmt_expr(&block.stmts[0])\n+    } else {\n+        None\n+    }\n+}\n+\n+// Figure out if a block is necessary.\n+fn needs_block(block: &ast::Block, prefix: &str, context: &RewriteContext) -> bool {\n+    is_unsafe_block(block) || block.stmts.len() > 1 || context.inside_macro\n+        || block_contains_comment(block, context.codemap) || prefix.contains('\\n')\n+}\n+\n // Rewrite closure with a single expression wrapping its body with block.\n fn rewrite_closure_with_block(\n     body: &ast::Expr,"}]}