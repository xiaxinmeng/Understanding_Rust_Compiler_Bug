{"sha": "190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MGQ4YmRiYzZkZjA3OGUyZGM2NWNjZGI4YWIxN2E5OWE0YTY1NTY=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-25T23:27:36Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-30T16:55:41Z"}, "message": "libsyntax: Fix snake_case errors.\n\nA number of functions/methods have been moved or renamed to align\nbetter with rust standard conventions.\n\nsyntax::ext::mtwt::xorPush => xor_push\nsyntax::parse::parser::Parser => Parser::new\n\n[breaking-change]", "tree": {"sha": "14e71c75fc23296a7681a319dbba0037a4c60261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e71c75fc23296a7681a319dbba0037a4c60261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "html_url": "https://github.com/rust-lang/rust/commit/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16f15ce391b2b463d37ff7f5e764c7f55c33cc5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/16f15ce391b2b463d37ff7f5e764c7f55c33cc5d", "html_url": "https://github.com/rust-lang/rust/commit/16f15ce391b2b463d37ff7f5e764c7f55c33cc5d"}], "stats": {"total": 141, "additions": 73, "deletions": 68}, "files": [{"sha": "089cd772bb48dc47d110b59b7dd23076e7d5537f", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -159,6 +159,7 @@ impl fmt::Show for Abi {\n     }\n }\n \n+#[allow(non_snake_case_functions)]\n #[test]\n fn lookup_Rust() {\n     let abi = lookup(\"Rust\");"}, {"sha": "656ae80e12d6465bbc2ad7791f50b6587162bec7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "patch": "@@ -26,6 +26,7 @@ use serialize::{Encodable, Decodable, Encoder, Decoder};\n /// A pointer abstraction. FIXME(eddyb) #10676 use Rc<T> in the future.\n pub type P<T> = @T;\n \n+#[allow(non_snake_case_functions)]\n /// Construct a P<T> from a T value.\n pub fn P<T: 'static>(value: T) -> P<T> {\n     @value"}, {"sha": "fdaa3b5630ab13d8cb3f1062a59426513e823fb7", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "patch": "@@ -223,7 +223,7 @@ fn marksof_internal(ctxt: SyntaxContext,\n                 return result;\n             },\n             Mark(mark, tl) => {\n-                xorPush(&mut result, mark);\n+                xor_push(&mut result, mark);\n                 loopvar = tl;\n             },\n             Rename(_,name,tl) => {\n@@ -253,7 +253,7 @@ pub fn outer_mark(ctxt: SyntaxContext) -> Mrk {\n \n // Push a name... unless it matches the one on top, in which\n // case pop and discard (so two of the same marks cancel)\n-fn xorPush(marks: &mut Vec<Mrk>, mark: Mrk) {\n+fn xor_push(marks: &mut Vec<Mrk>, mark: Mrk) {\n     if (marks.len() > 0) && (*marks.last().unwrap() == mark) {\n         marks.pop().unwrap();\n     } else {\n@@ -264,26 +264,27 @@ fn xorPush(marks: &mut Vec<Mrk>, mark: Mrk) {\n #[cfg(test)]\n mod tests {\n     use ast::*;\n-    use super::{resolve, xorPush, new_mark_internal, new_sctable_internal};\n+    use super::{resolve, xor_push, new_mark_internal, new_sctable_internal};\n     use super::{new_rename_internal, marksof_internal, resolve_internal};\n     use super::{SCTable, EmptyCtxt, Mark, Rename, IllegalCtxt};\n     use collections::HashMap;\n \n-    #[test] fn xorpush_test () {\n+    #[test]\n+    fn xorpush_test () {\n         let mut s = Vec::new();\n-        xorPush(&mut s, 14);\n+        xor_push(&mut s, 14);\n         assert_eq!(s.clone(), vec!(14));\n-        xorPush(&mut s, 14);\n+        xor_push(&mut s, 14);\n         assert_eq!(s.clone(), Vec::new());\n-        xorPush(&mut s, 14);\n+        xor_push(&mut s, 14);\n         assert_eq!(s.clone(), vec!(14));\n-        xorPush(&mut s, 15);\n+        xor_push(&mut s, 15);\n         assert_eq!(s.clone(), vec!(14, 15));\n-        xorPush(&mut s, 16);\n+        xor_push(&mut s, 16);\n         assert_eq!(s.clone(), vec!(14, 15, 16));\n-        xorPush(&mut s, 16);\n+        xor_push(&mut s, 16);\n         assert_eq!(s.clone(), vec!(14, 15));\n-        xorPush(&mut s, 15);\n+        xor_push(&mut s, 15);\n         assert_eq!(s.clone(), vec!(14));\n     }\n \n@@ -331,7 +332,8 @@ mod tests {\n         }\n     }\n \n-    #[test] fn test_unfold_refold(){\n+    #[test]\n+    fn test_unfold_refold(){\n         let mut t = new_sctable_internal();\n \n         let test_sc = vec!(M(3),R(id(101,0),14),M(9));\n@@ -364,7 +366,8 @@ mod tests {\n         }\n     }\n \n-    #[test] fn test_marksof () {\n+    #[test]\n+    fn test_marksof () {\n         let stopname = 242;\n         let name1 = 243;\n         let mut t = new_sctable_internal();\n@@ -397,7 +400,8 @@ mod tests {\n     }\n \n \n-    #[test] fn resolve_tests () {\n+    #[test]\n+    fn resolve_tests () {\n         let a = 40;\n         let mut t = new_sctable_internal();\n         let mut rt = HashMap::new();\n@@ -447,13 +451,15 @@ mod tests {\n          assert_eq!(resolve_internal(id(a,a50_to_a51_b),&mut t, &mut rt),50);}\n     }\n \n-    #[test] fn mtwt_resolve_test(){\n+    #[test]\n+    fn mtwt_resolve_test(){\n         let a = 40;\n         assert_eq!(resolve(id(a,EMPTY_CTXT)),a);\n     }\n \n \n-    #[test] fn hashing_tests () {\n+    #[test]\n+    fn hashing_tests () {\n         let mut t = new_sctable_internal();\n         assert_eq!(new_mark_internal(12,EMPTY_CTXT,&mut t),2);\n         assert_eq!(new_mark_internal(13,EMPTY_CTXT,&mut t),3);\n@@ -462,7 +468,8 @@ mod tests {\n         // I'm assuming that the rename table will behave the same....\n     }\n \n-    #[test] fn resolve_table_hashing_tests() {\n+    #[test]\n+    fn resolve_table_hashing_tests() {\n         let mut t = new_sctable_internal();\n         let mut rt = HashMap::new();\n         assert_eq!(rt.len(),0);"}, {"sha": "65733793d6c57844fbf584fe759c98b34ff3c6df", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -402,7 +402,7 @@ pub fn parse(sess: &ParseSess,\n                 }\n                 rdr.next_token();\n             } else /* bb_eis.len() == 1 */ {\n-                let mut rust_parser = Parser(sess, cfg.clone(), box rdr.clone());\n+                let mut rust_parser = Parser::new(sess, cfg.clone(), box rdr.clone());\n \n                 let mut ei = bb_eis.pop().unwrap();\n                 match ei.elts.get(ei.idx).node {"}, {"sha": "0622bf76ab92529966dd2a8dfcc309ab6ed55d64", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "patch": "@@ -171,7 +171,7 @@ fn generic_extension(cx: &ExtCtxt,\n                 let trncbr = new_tt_reader(&cx.parse_sess().span_diagnostic,\n                                            Some(named_matches),\n                                            rhs);\n-                let p = Parser(cx.parse_sess(), cx.cfg(), box trncbr);\n+                let p = Parser::new(cx.parse_sess(), cx.cfg(), box trncbr);\n                 // Let the context choose how to interpret the result.\n                 // Weird, but useful for X-macros.\n                 return box ParserAnyMacro {"}, {"sha": "3132f91c09b9ed2764b7597e9158004923594247", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -256,7 +256,7 @@ pub fn filemap_to_tts(sess: &ParseSess, filemap: Rc<FileMap>)\n     // parsing tt's probably shouldn't require a parser at all.\n     let cfg = Vec::new();\n     let srdr = lexer::new_string_reader(&sess.span_diagnostic, filemap);\n-    let mut p1 = Parser(sess, cfg, box srdr);\n+    let mut p1 = Parser::new(sess, cfg, box srdr);\n     p1.parse_all_token_trees()\n }\n \n@@ -265,7 +265,7 @@ pub fn tts_to_parser<'a>(sess: &'a ParseSess,\n                          tts: Vec<ast::TokenTree>,\n                          cfg: ast::CrateConfig) -> Parser<'a> {\n     let trdr = lexer::new_tt_reader(&sess.span_diagnostic, None, tts);\n-    Parser(sess, cfg, box trdr)\n+    Parser::new(sess, cfg, box trdr)\n }\n \n // abort if necessary"}, {"sha": "f045a7fe1209377de320a9a3dc06f5918806905f", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -19,7 +19,7 @@ removed.\n \n use ast::{Expr, ExprLit, LitNil};\n use codemap::{Span, respan};\n-use parse::parser::Parser;\n+use parse::parser;\n use parse::token;\n \n /// The specific types of unsupported syntax\n@@ -45,7 +45,7 @@ pub trait ParserObsoleteMethods {\n     fn eat_obsolete_ident(&mut self, ident: &str) -> bool;\n }\n \n-impl<'a> ParserObsoleteMethods for Parser<'a> {\n+impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n     /// Reports an obsolete syntax non-fatal error.\n     fn obsolete(&mut self, sp: Span, kind: ObsoleteSyntax) {\n         let (kind_str, desc) = match kind {"}, {"sha": "00c07ce59f989d07699c65760b0609d2f1f92498", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 37, "deletions": 41, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "patch": "@@ -278,50 +278,11 @@ struct ParsedItemsAndViewItems {\n     attrs_remaining: Vec<Attribute> ,\n     view_items: Vec<ViewItem> ,\n     items: Vec<@Item> ,\n-    foreign_items: Vec<@ForeignItem> }\n+    foreign_items: Vec<@ForeignItem>\n+}\n \n /* ident is handled by common.rs */\n \n-pub fn Parser<'a>(\n-              sess: &'a ParseSess,\n-              cfg: ast::CrateConfig,\n-              mut rdr: Box<Reader:>)\n-              -> Parser<'a> {\n-    let tok0 = rdr.next_token();\n-    let span = tok0.sp;\n-    let placeholder = TokenAndSpan {\n-        tok: token::UNDERSCORE,\n-        sp: span,\n-    };\n-\n-    Parser {\n-        reader: rdr,\n-        interner: token::get_ident_interner(),\n-        sess: sess,\n-        cfg: cfg,\n-        token: tok0.tok,\n-        span: span,\n-        last_span: span,\n-        last_token: None,\n-        buffer: [\n-            placeholder.clone(),\n-            placeholder.clone(),\n-            placeholder.clone(),\n-            placeholder.clone(),\n-        ],\n-        buffer_start: 0,\n-        buffer_end: 0,\n-        tokens_consumed: 0,\n-        restriction: UNRESTRICTED,\n-        quote_depth: 0,\n-        obsolete_set: HashSet::new(),\n-        mod_path_stack: Vec::new(),\n-        open_braces: Vec::new(),\n-        owns_directory: true,\n-        root_module_name: None,\n-    }\n-}\n-\n pub struct Parser<'a> {\n     pub sess: &'a ParseSess,\n     // the current token:\n@@ -362,6 +323,41 @@ fn is_plain_ident_or_underscore(t: &token::Token) -> bool {\n }\n \n impl<'a> Parser<'a> {\n+    pub fn new(sess: &'a ParseSess, cfg: ast::CrateConfig, mut rdr: Box<Reader:>) -> Parser<'a> {\n+        let tok0 = rdr.next_token();\n+        let span = tok0.sp;\n+        let placeholder = TokenAndSpan {\n+            tok: token::UNDERSCORE,\n+            sp: span,\n+        };\n+\n+        Parser {\n+            reader: rdr,\n+            interner: token::get_ident_interner(),\n+            sess: sess,\n+            cfg: cfg,\n+            token: tok0.tok,\n+            span: span,\n+            last_span: span,\n+            last_token: None,\n+            buffer: [\n+                placeholder.clone(),\n+                placeholder.clone(),\n+                placeholder.clone(),\n+                placeholder.clone(),\n+            ],\n+            buffer_start: 0,\n+            buffer_end: 0,\n+            tokens_consumed: 0,\n+            restriction: UNRESTRICTED,\n+            quote_depth: 0,\n+            obsolete_set: HashSet::new(),\n+            mod_path_stack: Vec::new(),\n+            open_braces: Vec::new(),\n+            owns_directory: true,\n+            root_module_name: None,\n+        }\n+    }\n     // convert a token to a string using self's reader\n     pub fn token_to_str(token: &token::Token) -> String {\n         token::to_str(token)"}]}