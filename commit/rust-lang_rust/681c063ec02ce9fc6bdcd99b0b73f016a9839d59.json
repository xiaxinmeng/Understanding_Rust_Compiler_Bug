{"sha": "681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MWMwNjNlYzAyY2U5ZmM2YmRjZDk5YjBiNzNmMDE2YTk4MzlkNTk=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-22T22:44:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-27T16:58:39Z"}, "message": "Conservatively serialize nearly all upcalls. Successfuly ran make check with RUST_THREADS=8, so we're probably fairly safe now. In the future we can relax the synchronization to get better performance.", "tree": {"sha": "24f775ba4dda57790e7c8ecb5cf9abdfc4209ee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24f775ba4dda57790e7c8ecb5cf9abdfc4209ee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "html_url": "https://github.com/rust-lang/rust/commit/681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6367bcf4276c06d41b0d66f10711ca3b076ae547", "url": "https://api.github.com/repos/rust-lang/rust/commits/6367bcf4276c06d41b0d66f10711ca3b076ae547", "html_url": "https://github.com/rust-lang/rust/commit/6367bcf4276c06d41b0d66f10711ca3b076ae547"}], "stats": {"total": 118, "additions": 78, "deletions": 40}, "files": [{"sha": "27fe45e42d7a143c3d470ad840006a74f1ffdd47", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "patch": "@@ -391,12 +391,17 @@ task_yield(rust_task *task) {\n \n extern \"C\" CDECL void\n task_join(rust_task *task, rust_task *join_task) {\n+    task->dom->scheduler_lock.lock();\n     // If the other task is already dying, we don't have to wait for it.\n     if (join_task->dead() == false) {\n         join_task->tasks_waiting_to_join.push(task);\n         task->block(join_task, \"joining local task\");\n+        task->dom->scheduler_lock.unlock();\n         task->yield(2);\n     }\n+    else {\n+        task->dom->scheduler_lock.unlock();\n+    }\n }\n \n /* Debug builtins for std.dbg. */"}, {"sha": "cc03c227acda9a931a71b7c433d89cb51bdeb072", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "patch": "@@ -10,6 +10,7 @@ rust_chan::rust_chan(rust_task *task,\n                      task(task),\n                      port(port),\n                      buffer(task->dom, unit_sz) {\n+    ++task->ref_count;\n     if (port) {\n         associate(port);\n     }\n@@ -23,6 +24,7 @@ rust_chan::~rust_chan() {\n \n     A(task->dom, is_associated() == false,\n       \"Channel must be disassociated before being freed.\");\n+    --task->ref_count;\n }\n \n /**\n@@ -31,10 +33,10 @@ rust_chan::~rust_chan() {\n void rust_chan::associate(maybe_proxy<rust_port> *port) {\n     this->port = port;\n     if (port->is_proxy() == false) {\n-        scoped_lock sync(port->referent()->lock);\n         LOG(task, task,\n             \"associating chan: 0x%\" PRIxPTR \" with port: 0x%\" PRIxPTR,\n             this, port);\n+        ++this->ref_count;\n         this->port->referent()->chans.push(this);\n     }\n }\n@@ -50,10 +52,10 @@ void rust_chan::disassociate() {\n     A(task->dom, is_associated(), \"Channel must be associated with a port.\");\n \n     if (port->is_proxy() == false) {\n-        scoped_lock sync(port->referent()->lock);\n         LOG(task, task,\n             \"disassociating chan: 0x%\" PRIxPTR \" from port: 0x%\" PRIxPTR,\n             this, port->referent());\n+        --this->ref_count;\n         port->referent()->chans.swap_delete(this);\n     }\n \n@@ -83,7 +85,6 @@ void rust_chan::send(void *sptr) {\n         buffer.dequeue(NULL);\n     } else {\n         rust_port *target_port = port->referent();\n-        scoped_lock sync(target_port->lock);\n         if (target_port->task->blocked_on(target_port)) {\n             DLOG(dom, comm, \"dequeued in rendezvous_ptr\");\n             buffer.dequeue(target_port->task->rendezvous_ptr);"}, {"sha": "5a2175f36a26130fdfbe9ce93adbc4792d4bc19d", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "patch": "@@ -268,7 +268,7 @@ rust_dom::start_main_loop(int id) {\n     scheduler_lock.lock();\n \n     // Make sure someone is watching, to pull us out of infinite loops.\n-    rust_timer timer(this);\n+    //rust_timer timer(this);\n \n     DLOG(this, dom, \"started domain loop %d\", id);\n \n@@ -395,13 +395,13 @@ rust_dom::get_cache() {\n \n rust_task *\n rust_dom::create_task(rust_task *spawner, const char *name) {\n-    scheduler_lock.lock();\n+    //scheduler_lock.lock();\n     rust_task *task =\n         new (this) rust_task (this, &newborn_tasks, spawner, name);\n     DLOG(this, task, \"created task: \" PTR \", spawner: %s, name: %s\",\n                         task, spawner ? spawner->name : \"null\", name);\n     newborn_tasks.append(task);\n-    scheduler_lock.unlock();\n+    //scheduler_lock.unlock();\n     return task;\n }\n "}, {"sha": "7a58f839c44f0e01bf0b2ba62f4d5b429dbbf706", "filename": "src/rt/rust_port.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Frust_port.h", "raw_url": "https://github.com/rust-lang/rust/raw/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Frust_port.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.h?ref=681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "patch": "@@ -13,8 +13,6 @@ class rust_port : public maybe_proxy<rust_port>,\n     // Data sent to this port from remote tasks is buffered in this channel.\n     rust_chan *remote_channel;\n \n-    lock_and_signal lock;\n-\n     rust_port(rust_task *task, size_t unit_sz);\n     ~rust_port();\n     void log_state();"}, {"sha": "4b300c1a5247170ca419cc21260aef76e0ae6862", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "patch": "@@ -131,19 +131,24 @@ void task_start_wrapper(spawn_args *a)\n     int rval = 42;\n     \n     a->f(&rval, task, a->a3, a->a4);\n-\n+    \n     LOG(task, task, \"task exited with value %d\", rval);\n \n-    // TODO: the old exit glue does some magical argument copying stuff. This\n-    // is probably still needed.\n+    {\n+        scoped_lock with(task->dom->scheduler_lock);\n+        \n+        // TODO: the old exit glue does some magical argument copying\n+        // stuff. This is probably still needed.\n+\n+        // This is duplicated from upcall_exit, which is probably dead code by\n+        // now.\n+        LOG(task, task, \"task ref_count: %d\", task->ref_count);\n+        A(task->dom, task->ref_count >= 0,\n+          \"Task ref_count should not be negative on exit!\");\n+        task->die();\n+        task->notify_tasks_waiting_to_join();\n \n-    // This is duplicated from upcall_exit, which is probably dead code by\n-    // now.\n-    LOG(task, task, \"task ref_count: %d\", task->ref_count);\n-    A(task->dom, task->ref_count >= 0,\n-      \"Task ref_count should not be negative on exit!\");\n-    task->die();\n-    task->notify_tasks_waiting_to_join();\n+    }\n     task->yield(1);\n }\n \n@@ -154,6 +159,9 @@ rust_task::start(uintptr_t spawnee_fn,\n     LOGPTR(dom, \"from spawnee\", spawnee_fn);\n \n     I(dom, stk->data != NULL);\n+    I(dom, !dom->scheduler_lock.lock_held_by_current_thread());\n+    \n+    scoped_lock with(dom->scheduler_lock);\n \n     char *sp = (char *)rust_sp;\n \n@@ -405,7 +413,7 @@ rust_task::free(void *p, bool is_gc)\n \n void\n rust_task::transition(rust_task_list *src, rust_task_list *dst) {\n-    scoped_lock sync(dom->scheduler_lock);\n+    I(dom, dom->scheduler_lock.lock_held_by_current_thread());\n     DLOG(dom, task,\n          \"task %s \" PTR \" state change '%s' -> '%s' while in '%s'\",\n          name, (uintptr_t)this, src->name, dst->name, state->name);"}, {"sha": "885f82ddac393cf9ac016a5105eff640d3b38458", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "patch": "@@ -23,6 +23,7 @@ str_buf(rust_task *task, rust_str *s);\n \n extern \"C\" void\n upcall_grow_task(rust_task *task, size_t n_frame_bytes) {\n+    I(task->dom, false);\n     LOG_UPCALL_ENTRY(task);\n     task->grow(n_frame_bytes);\n }\n@@ -74,6 +75,7 @@ extern \"C\" CDECL rust_port*\n upcall_new_port(rust_task *task, size_t unit_sz) {\n     LOG_UPCALL_ENTRY(task);\n     rust_dom *dom = task->dom;\n+    scoped_lock with(dom->scheduler_lock);\n     LOG(task, comm, \"upcall_new_port(task=0x%\" PRIxPTR \" (%s), unit_sz=%d)\",\n         (uintptr_t) task, task->name, unit_sz);\n     return new (dom) rust_port(task, unit_sz);\n@@ -82,6 +84,7 @@ upcall_new_port(rust_task *task, size_t unit_sz) {\n extern \"C\" CDECL void\n upcall_del_port(rust_task *task, rust_port *port) {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n     LOG(task, comm, \"upcall del_port(0x%\" PRIxPTR \")\", (uintptr_t) port);\n     I(task->dom, !port->ref_count);\n     delete port;\n@@ -121,6 +124,7 @@ upcall_flush_chan(rust_task *task, rust_chan *chan) {\n extern \"C\" CDECL\n void upcall_del_chan(rust_task *task, rust_chan *chan) {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n \n     LOG(task, comm, \"upcall del_chan(0x%\" PRIxPTR \")\", (uintptr_t) chan);\n \n@@ -143,7 +147,7 @@ void upcall_del_chan(rust_task *task, rust_chan *chan) {\n             //    here is that we can get ourselves in a deadlock if the\n             //    parent task tries to join us.\n             //\n-            // 2. We can leave the channel in a \"dormnat\" state by not freeing\n+            // 2. We can leave the channel in a \"dormant\" state by not freeing\n             //    it and letting the receiver task delete it for us instead.\n             if (chan->buffer.is_empty() == false) {\n                 return;\n@@ -162,6 +166,7 @@ extern \"C\" CDECL rust_chan *\n upcall_clone_chan(rust_task *task, maybe_proxy<rust_task> *target,\n                   rust_chan *chan) {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n     size_t unit_sz = chan->buffer.unit_sz;\n     maybe_proxy<rust_port> *port = chan->port;\n     rust_task *target_task = NULL;\n@@ -203,28 +208,30 @@ upcall_sleep(rust_task *task, size_t time_in_us) {\n extern \"C\" CDECL void\n upcall_send(rust_task *task, rust_chan *chan, void *sptr) {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n     chan->send(sptr);\n     LOG(task, comm, \"=== sent data ===>\");\n }\n \n extern \"C\" CDECL void\n upcall_recv(rust_task *task, uintptr_t *dptr, rust_port *port) {\n-    LOG_UPCALL_ENTRY(task);\n-    LOG(task, comm, \"port: 0x%\" PRIxPTR \", dptr: 0x%\" PRIxPTR\n-        \", size: 0x%\" PRIxPTR \", chan_no: %d\",\n-        (uintptr_t) port, (uintptr_t) dptr, port->unit_sz,\n-        port->chans.length());\n+    {\n+        LOG_UPCALL_ENTRY(task);\n+        scoped_lock with(task->dom->scheduler_lock);\n \n-    if (port->receive(dptr)) {\n-        return;\n-    }\n+        LOG(task, comm, \"port: 0x%\" PRIxPTR \", dptr: 0x%\" PRIxPTR\n+            \", size: 0x%\" PRIxPTR \", chan_no: %d\",\n+            (uintptr_t) port, (uintptr_t) dptr, port->unit_sz,\n+            port->chans.length());\n \n-    // No data was buffered on any incoming channel, so block this task\n-    // on the port. Remember the rendezvous location so that any sender\n-    // task can write to it before waking up this task.\n+        if (port->receive(dptr)) {\n+            return;\n+        }\n+\n+        // No data was buffered on any incoming channel, so block this task\n+        // on the port. Remember the rendezvous location so that any sender\n+        // task can write to it before waking up this task.\n \n-    {\n-        scoped_lock sync(port->lock);\n         LOG(task, comm, \"<=== waiting for rendezvous data ===\");\n         task->rendezvous_ptr = dptr;\n         task->block(port, \"waiting for rendezvous data\");\n@@ -248,6 +255,7 @@ upcall_fail(rust_task *task,\n extern \"C\" CDECL void\n upcall_kill(rust_task *task, maybe_proxy<rust_task> *target) {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n     if (target->is_proxy()) {\n         notify_message::\n         send(notify_message::KILL, \"kill\", task->get_handle(),\n@@ -264,18 +272,22 @@ upcall_kill(rust_task *task, maybe_proxy<rust_task> *target) {\n  */\n extern \"C\" CDECL void\n upcall_exit(rust_task *task) {\n-    LOG_UPCALL_ENTRY(task);\n-    LOG(task, task, \"task ref_count: %d\", task->ref_count);\n-    A(task->dom, task->ref_count >= 0,\n-      \"Task ref_count should not be negative on exit!\");\n-    task->die();\n-    task->notify_tasks_waiting_to_join();\n+    {\n+        LOG_UPCALL_ENTRY(task);\n+        scoped_lock with(task->dom->scheduler_lock);\n+        LOG(task, task, \"task ref_count: %d\", task->ref_count);\n+        A(task->dom, task->ref_count >= 0,\n+          \"Task ref_count should not be negative on exit!\");\n+        task->die();\n+        task->notify_tasks_waiting_to_join();\n+    }\n     task->yield(1);\n }\n \n extern \"C\" CDECL uintptr_t\n upcall_malloc(rust_task *task, size_t nbytes, type_desc *td) {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n \n     LOG(task, mem,\n                    \"upcall malloc(%\" PRIdPTR \", 0x%\" PRIxPTR \")\"\n@@ -296,6 +308,7 @@ upcall_malloc(rust_task *task, size_t nbytes, type_desc *td) {\n extern \"C\" CDECL void\n upcall_free(rust_task *task, void* ptr, uintptr_t is_gc) {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n     rust_dom *dom = task->dom;\n     DLOG(dom, mem,\n              \"upcall free(0x%\" PRIxPTR \", is_gc=%\" PRIdPTR \")\",\n@@ -306,6 +319,7 @@ upcall_free(rust_task *task, void* ptr, uintptr_t is_gc) {\n extern \"C\" CDECL uintptr_t\n upcall_mark(rust_task *task, void* ptr) {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n \n     rust_dom *dom = task->dom;\n     if (ptr) {\n@@ -336,20 +350,23 @@ rust_str *make_str(rust_task *task, char const *s, size_t fill) {\n extern \"C\" CDECL rust_str *\n upcall_new_str(rust_task *task, char const *s, size_t fill) {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n     \n     return make_str(task, s, fill);\n }\n \n extern \"C\" CDECL rust_str *\n upcall_dup_str(rust_task *task, rust_str *str) {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n \n     return make_str(task, (char const *)str->data, str->fill);\n }\n \n extern \"C\" CDECL rust_vec *\n upcall_new_vec(rust_task *task, size_t fill, type_desc *td) {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n     rust_dom *dom = task->dom;\n     DLOG(dom, mem, \"upcall new_vec(%\" PRIdPTR \")\", fill);\n     size_t alloc = next_power_of_two(sizeof(rust_vec) + fill);\n@@ -454,6 +471,7 @@ upcall_vec_append(rust_task *task, type_desc *t, type_desc *elem_t,\n                   rust_vec **dst_ptr, rust_vec *src, bool skip_null)\n {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n     rust_vec *dst = *dst_ptr;\n     uintptr_t need_copy;\n     size_t n_src_bytes = skip_null ? src->fill - 1 : src->fill;\n@@ -483,6 +501,7 @@ upcall_get_type_desc(rust_task *task,\n                      size_t n_descs,\n                      type_desc const **descs) {\n     LOG_UPCALL_ENTRY(task);\n+    scoped_lock with(task->dom->scheduler_lock);\n     LOG(task, cache, \"upcall get_type_desc with size=%\" PRIdPTR\n         \", align=%\" PRIdPTR \", %\" PRIdPTR \" descs\", size, align,\n         n_descs);\n@@ -496,6 +515,7 @@ extern \"C\" CDECL rust_task *\n upcall_new_task(rust_task *spawner, rust_vec *name) {\n     // name is a rust string structure.\n     LOG_UPCALL_ENTRY(spawner);\n+    scoped_lock with(spawner->dom->scheduler_lock);\n     rust_dom *dom = spawner->dom;\n     rust_task *task = dom->create_task(spawner, (const char *)name->data);\n     return task;\n@@ -535,6 +555,7 @@ upcall_start_task(rust_task *spawner,\n  */\n extern \"C\" CDECL maybe_proxy<rust_task> *\n upcall_new_thread(rust_task *task, const char *name) {\n+    I(task->dom, false);\n     LOG_UPCALL_ENTRY(task);\n     rust_dom *parent_dom = task->dom;\n     rust_kernel *kernel = parent_dom->kernel;\n@@ -583,6 +604,7 @@ upcall_start_thread(rust_task *task,\n                     rust_proxy<rust_task> *child_task_proxy,\n                     uintptr_t spawnee_fn,\n                     size_t callsz) {\n+    I(task->dom, false);\n     LOG_UPCALL_ENTRY(task);\n #if 0\n     rust_dom *parenet_dom = task->dom;\n@@ -615,6 +637,7 @@ extern \"C\" CDECL void\n upcall_ivec_resize(rust_task *task,\n                    rust_ivec *v,\n                    size_t newsz) {\n+    scoped_lock with(task->dom->scheduler_lock);\n     I(task->dom, !v->fill);\n \n     size_t new_alloc = next_power_of_two(newsz);\n@@ -633,6 +656,7 @@ extern \"C\" CDECL void\n upcall_ivec_spill(rust_task *task,\n                   rust_ivec *v,\n                   size_t newsz) {\n+    scoped_lock with(task->dom->scheduler_lock);\n     size_t new_alloc = next_power_of_two(newsz);\n \n     rust_ivec_heap *heap_part = (rust_ivec_heap *)"}, {"sha": "6934a7965215edeee1c564b30c9b4dd4391b0e21", "filename": "src/rt/sync/lock_and_signal.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Fsync%2Flock_and_signal.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/681c063ec02ce9fc6bdcd99b0b73f016a9839d59/src%2Frt%2Fsync%2Flock_and_signal.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.cpp?ref=681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "patch": "@@ -21,7 +21,9 @@ lock_and_signal::lock_and_signal() {\n }\n \n #else\n-lock_and_signal::lock_and_signal() {\n+lock_and_signal::lock_and_signal() \n+    : _locked(false)\n+{\n     CHECKED(pthread_cond_init(&_cond, NULL));\n     CHECKED(pthread_mutex_init(&_mutex, NULL));\n }"}]}