{"sha": "1a043533f504145fa51beeb6c94765e6865031ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMDQzNTMzZjUwNDE0NWZhNTFiZWViNmM5NDc2NWU2ODY1MDMxZWU=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-12-23T02:43:09Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2018-01-29T22:44:12Z"}, "message": "Document std::os::raw.", "tree": {"sha": "1d1dde4dbc8062bd83f17784c78692e8cf60f5d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d1dde4dbc8062bd83f17784c78692e8cf60f5d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a043533f504145fa51beeb6c94765e6865031ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a043533f504145fa51beeb6c94765e6865031ee", "html_url": "https://github.com/rust-lang/rust/commit/1a043533f504145fa51beeb6c94765e6865031ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a043533f504145fa51beeb6c94765e6865031ee/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70f7d5842f29d4900f24420b030f144d21f3c5fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/70f7d5842f29d4900f24420b030f144d21f3c5fc", "html_url": "https://github.com/rust-lang/rust/commit/70f7d5842f29d4900f24420b030f144d21f3c5fc"}], "stats": {"total": 121, "additions": 116, "deletions": 5}, "files": [{"sha": "642fa8775a479d8a74f522a923beb734c85787e7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -260,6 +260,7 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n+#![feature(external_doc)]\n #![feature(fs_read_write)]\n #![feature(fixed_size_array)]\n #![feature(float_from_str_radix)]"}, {"sha": "fb47dff187e5ce74b7fb764d964c2bd77a821b7d", "filename": "src/libstd/os/raw/char.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fchar.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,11 @@\n+Equivalent to C's `char` type.\n+\n+[C's `char` type] is completely unlike [Rust's `char` type]; while Rust's type represents a unicode scalar value, C's `char` type is just an ordinary integer. In practice, this type will always be either [`i8`] or [`u8`], but you're technically not supposed to rely on this behaviour, as the standard only defines a char as being at least eight bits long.\n+\n+C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with a zero. See [`CStr`] for more information.\n+\n+[C's `char` type]: https://en.wikipedia.org/wiki/C_data_types#Basic_types\n+[Rust's `char` type]: ../../primitive.char.html\n+[`CStr`]: ../../ffi/struct.CStr.html\n+[`i8`]: ../../primitive.i8.html\n+[`u8`]: ../../primitive.u8.html"}, {"sha": "5ac09ee284c109a29ed4bb9a6011e5c57a26adf8", "filename": "src/libstd/os/raw/double.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fdouble.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fdouble.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fdouble.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `double` type.\n+\n+This type will almost always be [`f64`], however, the standard technically only guarantees that it be a floating-point number with at least the precision of a [`float`].\n+\n+[`float`]: type.c_float.html\n+[`f64`]: ../../primitive.f64.html"}, {"sha": "20ba8645055b1126f3bad5ec4d6afc64528db43d", "filename": "src/libstd/os/raw/float.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Ffloat.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Ffloat.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Ffloat.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,5 @@\n+Equivalent to C's `float` type.\n+\n+This type will almost always be [`f32`], however, the standard technically only guarantees that it be a floating-point number.\n+\n+[`f32`]: ../../primitive.f32.html"}, {"sha": "efe7786099ab18b91edd2c9f49f3ce2f21be91de", "filename": "src/libstd/os/raw/int.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fint.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fint.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `signed int` (`int`) type.\n+\n+This type will almost always be [`i32`], however, the standard technically only requires that it be at least the size of a [`short`].\n+\n+[`short`]: type.c_short.html\n+[`i32`]: ../../primitive.i32.html"}, {"sha": "c281e017336742b710928e0a41e25097d016b0b5", "filename": "src/libstd/os/raw/long.md", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Flong.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Flong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Flong.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,8 @@\n+Equivalent to C's `signed long` (`long`) type.\n+\n+This type will usually be [`i64`], but is sometimes [`i32`] \\(i.e. [`isize`]\\) on 32-bit systems. Technically, the standard only requires that it be at least 32 bits, or at least the size of an [`int`].\n+\n+[`int`]: type.c_int.html\n+[`i32`]: ../../primitive.i32.html\n+[`i64`]: ../../primitive.i64.html\n+[`isize`]: ../../primitive.isize.html"}, {"sha": "6594fcd564c50df897fb00d59fc6e442d725a34c", "filename": "src/libstd/os/raw/longlong.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Flonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Flonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Flonglong.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `signed long long` (`long long`) type.\n+\n+This type will almost always be [`i64`], however, the standard technically only requires that it be at least 64 bits, or at least the size of an [`long`].\n+\n+[`long`]: type.c_int.html\n+[`i64`]: ../../primitive.i64.html"}, {"sha": "e96ba045ce700b3cd8db5ed059566fc5b7eb9cac", "filename": "src/libstd/os/raw/mod.rs", "status": "renamed", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -8,12 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Raw OS-specific types for the current platform/architecture\n+//! Platform-specific types, as defined by C.\n+//!\n+//! Code that interacts via FFI will almost certainly be using the\n+//! base types provided by C, which aren't nearly as nicely defined\n+//! as Rust's primitive types. This module provides types which will\n+//! match those defined by C, so that code that interacts with C will\n+//! refer to the correct types.\n \n #![stable(feature = \"raw_os\", since = \"1.1.0\")]\n \n use fmt;\n \n+#[doc(include = \"os/raw/char.md\")]\n #[cfg(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n                                        target_arch = \"powerpc\",\n@@ -25,6 +32,7 @@ use fmt;\n           all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n           all(target_os = \"fuchsia\", target_arch = \"aarch64\")))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n+#[doc(include = \"os/raw/char.md\")]\n #[cfg(not(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n                                            target_arch = \"powerpc\",\n@@ -36,30 +44,46 @@ use fmt;\n               all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n               all(target_os = \"fuchsia\", target_arch = \"aarch64\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n+#[doc(include = \"os/raw/schar.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;\n+#[doc(include = \"os/raw/uchar.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uchar = u8;\n+#[doc(include = \"os/raw/short.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_short = i16;\n+#[doc(include = \"os/raw/ushort.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ushort = u16;\n+#[doc(include = \"os/raw/int.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_int = i32;\n+#[doc(include = \"os/raw/uint.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uint = u32;\n+#[doc(include = \"os/raw/long.md\")]\n #[cfg(any(target_pointer_width = \"32\", windows))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i32;\n+#[doc(include = \"os/raw/ulong.md\")]\n #[cfg(any(target_pointer_width = \"32\", windows))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u32;\n+#[doc(include = \"os/raw/long.md\")]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i64;\n+#[doc(include = \"os/raw/ulong.md\")]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u64;\n+#[doc(include = \"os/raw/longlong.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_longlong = i64;\n+#[doc(include = \"os/raw/ulonglong.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulonglong = u64;\n+#[doc(include = \"os/raw/float.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_float = f32;\n+#[doc(include = \"os/raw/double.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_double = f64;\n \n-/// Type used to construct void pointers for use with C.\n+/// Equivalent to C's `void` type when used as a [pointer].\n ///\n-/// This type is only useful as a pointer target. Do not use it as a\n-/// return type for FFI functions which have the `void` return type in\n-/// C. Use the unit type `()` or omit the return type instead.\n+/// In essence, `*const c_void` is equivalent to C's `const void*`\n+/// and `*mut c_void` is equivalent to C's `void*`. That said, this is\n+/// *not* the same as C's `void` return type, which is Rust's `()` type.\n+///\n+/// [pointer]: ../primitive.pointer.html\n // NB: For LLVM to recognize the void pointer type and by extension\n //     functions like malloc(), we need to have it represented as i8* in\n //     LLVM bitcode. The enum used here ensures this and prevents misuse", "previous_filename": "src/libstd/os/raw.rs"}, {"sha": "42a403ef5d7851ed31aa69f119e255b9e8c2c815", "filename": "src/libstd/os/raw/schar.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fschar.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fschar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fschar.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `signed char` type.\n+\n+This type will almost always be [`i8`], but its size is technically equal to the size of a C [`char`], which isn't very clear-cut.\n+\n+[`char`]: type.c_char.html\n+[`i8`]: ../../primitive.i8.html"}, {"sha": "86a8495eae2322b461eb2e94bd8a11d57f4ff093", "filename": "src/libstd/os/raw/short.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fshort.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fshort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fshort.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `signed short` (`short`) type.\n+\n+This type will almost always be [`i16`], however, the standard technically only requires that it be at least 16 bits, or at least the size of a C [`char`].\n+\n+[`char`]: type.c_char.html\n+[`i16`]: ../../primitive.i16.html"}, {"sha": "a5b741702290d2162f29a974b2ef8218d7e742c9", "filename": "src/libstd/os/raw/uchar.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fuchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fuchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fuchar.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `unsigned char` type.\n+\n+This type will almost always be [`u8`], but its size is technically equal to the size of a C [`char`], which isn't very clear-cut.\n+\n+[`char`]: type.c_char.html\n+[`u8`]: ../../primitive.u8.html"}, {"sha": "ec4714a9ab44c84d1b6816dda6aaac1875435080", "filename": "src/libstd/os/raw/uint.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fuint.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fuint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fuint.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `unsigned int` type.\n+\n+This type will almost always be [`u32`], however, the standard technically on requires that it be the same size as an [`int`], which isn't very clear-cut.\n+\n+[`int`]: type.c_int.html\n+[`u32`]: ../../primitive.u32.html"}, {"sha": "3cdbc6f59bfcacd52bfe7bccf711dad7eb112a3a", "filename": "src/libstd/os/raw/ulong.md", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fulong.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fulong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fulong.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,8 @@\n+Equivalent to C's `unsigned long` type.\n+\n+This type will usually be [`u64`], but is sometimes [`u32`] \\(i.e. [`usize`]\\) on 32-bit systems. Technically, the standard only requires that it be the same size as a [`long`], which isn't very clear-cut.\n+\n+[`long`]: type.c_long.html\n+[`u32`]: ../../primitive.u32.html\n+[`u64`]: ../../primitive.u64.html\n+[`usize`]: ../../primitive.usize.html"}, {"sha": "9f5ff74f261c815fed2367c5599be44a5959b011", "filename": "src/libstd/os/raw/ulonglong.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fulonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fulonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fulonglong.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `unsigned long long` type.\n+\n+This type will almost always be [`u64`], however, the standard technically only requires that it be the same size as a [`long long`], which isn't very clear-cut.\n+\n+[`long long`]: type.c_longlong.html\n+[`u64`]: ../../primitive.u64.html"}, {"sha": "6dea582fda25e97b28501ea8cfada6fc2be7d652", "filename": "src/libstd/os/raw/ushort.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fushort.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a043533f504145fa51beeb6c94765e6865031ee/src%2Flibstd%2Fos%2Fraw%2Fushort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fushort.md?ref=1a043533f504145fa51beeb6c94765e6865031ee", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `unsigned short` type.\n+\n+This type will almost always be [`u16`], however, the standard technically only requires that it be the same size as a [`short`], which isn't very clear-cut.\n+\n+[`short`]: type.c_short.html\n+[`u16`]: ../../primitive.u16.html"}]}