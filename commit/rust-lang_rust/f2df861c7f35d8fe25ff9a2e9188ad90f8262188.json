{"sha": "f2df861c7f35d8fe25ff9a2e9188ad90f8262188", "node_id": "C_kwDOAAsO6NoAKGYyZGY4NjFjN2YzNWQ4ZmUyNWZmOWEyZTkxODhhZDkwZjgyNjIxODg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-02T03:19:32Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-14T22:59:11Z"}, "message": "Fix the `FileEncoder` buffer size.\n\nIt allows a variable size, but in practice we always use the default of\n8192 bytes. This commit fixes it to that size, which makes things\nslightly faster because the size can be hard-wired in generated code.\n\nThe commit also:\n- Rearranges some buffer capacity checks so they're all in the same form\n  (`x > BUFSIZE`).\n- Removes some buffer capacity assertions and comments about them. With\n  an 8192 byte buffer, we're not in any danger of overflowing a `usize`.", "tree": {"sha": "5fc3af898ea92a1272f1132a50998e0dcc23927b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fc3af898ea92a1272f1132a50998e0dcc23927b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2df861c7f35d8fe25ff9a2e9188ad90f8262188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2df861c7f35d8fe25ff9a2e9188ad90f8262188", "html_url": "https://github.com/rust-lang/rust/commit/f2df861c7f35d8fe25ff9a2e9188ad90f8262188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2df861c7f35d8fe25ff9a2e9188ad90f8262188/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18bfe5d8a9ca0e226171e98f8f4ef071790f3352", "url": "https://api.github.com/repos/rust-lang/rust/commits/18bfe5d8a9ca0e226171e98f8f4ef071790f3352", "html_url": "https://github.com/rust-lang/rust/commit/18bfe5d8a9ca0e226171e98f8f4ef071790f3352"}], "stats": {"total": 44, "additions": 11, "deletions": 33}, "files": [{"sha": "0ffc537eee02aff5df77466fb8375fc1a51c1036", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f2df861c7f35d8fe25ff9a2e9188ad90f8262188/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2df861c7f35d8fe25ff9a2e9188ad90f8262188/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=f2df861c7f35d8fe25ff9a2e9188ad90f8262188", "patch": "@@ -1,4 +1,4 @@\n-use crate::leb128::{self, largest_max_leb128_len};\n+use crate::leb128;\n use crate::serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fs::File;\n use std::io::{self, Write};\n@@ -14,6 +14,9 @@ use std::ptr;\n \n pub type FileEncodeResult = Result<usize, io::Error>;\n \n+/// The size of the buffer in `FileEncoder`.\n+const BUF_SIZE: usize = 8192;\n+\n /// `FileEncoder` encodes data to file via fixed-size buffer.\n ///\n /// There used to be a `MemEncoder` type that encoded all the data into a\n@@ -35,26 +38,12 @@ pub struct FileEncoder {\n \n impl FileEncoder {\n     pub fn new<P: AsRef<Path>>(path: P) -> io::Result<Self> {\n-        const DEFAULT_BUF_SIZE: usize = 8192;\n-        FileEncoder::with_capacity(path, DEFAULT_BUF_SIZE)\n-    }\n-\n-    pub fn with_capacity<P: AsRef<Path>>(path: P, capacity: usize) -> io::Result<Self> {\n-        // Require capacity at least as large as the largest LEB128 encoding\n-        // here, so that we don't have to check or handle this on every write.\n-        assert!(capacity >= largest_max_leb128_len());\n-\n-        // Require capacity small enough such that some capacity checks can be\n-        // done using guaranteed non-overflowing add rather than sub, which\n-        // shaves an instruction off those code paths (on x86 at least).\n-        assert!(capacity <= usize::MAX - largest_max_leb128_len());\n-\n         // Create the file for reading and writing, because some encoders do both\n         // (e.g. the metadata encoder when -Zmeta-stats is enabled)\n         let file = File::options().read(true).write(true).create(true).truncate(true).open(path)?;\n \n         Ok(FileEncoder {\n-            buf: Box::new_uninit_slice(capacity),\n+            buf: Box::new_uninit_slice(BUF_SIZE),\n             buffered: 0,\n             flushed: 0,\n             file,\n@@ -159,19 +148,11 @@ impl FileEncoder {\n         &self.file\n     }\n \n-    #[inline]\n-    fn capacity(&self) -> usize {\n-        self.buf.len()\n-    }\n-\n     #[inline]\n     fn write_one(&mut self, value: u8) {\n-        // We ensure this during `FileEncoder` construction.\n-        debug_assert!(self.capacity() >= 1);\n-\n         let mut buffered = self.buffered;\n \n-        if std::intrinsics::unlikely(buffered >= self.capacity()) {\n+        if std::intrinsics::unlikely(buffered + 1 > BUF_SIZE) {\n             self.flush();\n             buffered = 0;\n         }\n@@ -187,13 +168,12 @@ impl FileEncoder {\n \n     #[inline]\n     fn write_all(&mut self, buf: &[u8]) {\n-        let capacity = self.capacity();\n         let buf_len = buf.len();\n \n-        if std::intrinsics::likely(buf_len <= capacity) {\n+        if std::intrinsics::likely(buf_len <= BUF_SIZE) {\n             let mut buffered = self.buffered;\n \n-            if std::intrinsics::unlikely(buf_len > capacity - buffered) {\n+            if std::intrinsics::unlikely(buffered + buf_len > BUF_SIZE) {\n                 self.flush();\n                 buffered = 0;\n             }\n@@ -271,13 +251,11 @@ macro_rules! write_leb128 {\n         fn $this_fn(&mut self, v: $int_ty) {\n             const MAX_ENCODED_LEN: usize = $crate::leb128::max_leb128_len::<$int_ty>();\n \n-            // We ensure this during `FileEncoder` construction.\n-            debug_assert!(self.capacity() >= MAX_ENCODED_LEN);\n-\n             let mut buffered = self.buffered;\n \n-            // This can't overflow. See assertion in `FileEncoder::with_capacity`.\n-            if std::intrinsics::unlikely(buffered + MAX_ENCODED_LEN > self.capacity()) {\n+            // This can't overflow because BUF_SIZE and MAX_ENCODED_LEN are both\n+            // quite small.\n+            if std::intrinsics::unlikely(buffered + MAX_ENCODED_LEN > BUF_SIZE) {\n                 self.flush();\n                 buffered = 0;\n             }"}]}