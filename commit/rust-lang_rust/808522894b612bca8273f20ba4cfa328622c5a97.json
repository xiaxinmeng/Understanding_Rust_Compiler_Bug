{"sha": "808522894b612bca8273f20ba4cfa328622c5a97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwODUyMjg5NGI2MTJiY2E4MjczZjIwYmE0Y2ZhMzI4NjIyYzVhOTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-05T13:30:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-16T15:31:47Z"}, "message": "expand: Stop marking derive helper attributes as known\n\nPass them through name resolution instead", "tree": {"sha": "2e21ebecca25c0023caa6688f46a94f4b49f5b62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e21ebecca25c0023caa6688f46a94f4b49f5b62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/808522894b612bca8273f20ba4cfa328622c5a97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/808522894b612bca8273f20ba4cfa328622c5a97", "html_url": "https://github.com/rust-lang/rust/commit/808522894b612bca8273f20ba4cfa328622c5a97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/808522894b612bca8273f20ba4cfa328622c5a97/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3126a5013e851354f5c10efe3c166332a0a9b46", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3126a5013e851354f5c10efe3c166332a0a9b46", "html_url": "https://github.com/rust-lang/rust/commit/a3126a5013e851354f5c10efe3c166332a0a9b46"}], "stats": {"total": 90, "additions": 49, "deletions": 41}, "files": [{"sha": "cf549d5ba6f70914fa0ef35166a3cecab17788cf", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/808522894b612bca8273f20ba4cfa328622c5a97/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808522894b612bca8273f20ba4cfa328622c5a97/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=808522894b612bca8273f20ba4cfa328622c5a97", "patch": "@@ -247,6 +247,9 @@ impl<'a> base::Resolver for Resolver<'a> {\n                             helper_attrs.extend(\n                                 ext.helper_attrs.iter().map(|name| Ident::new(*name, span))\n                             );\n+                            if ext.is_derive_copy {\n+                                self.add_derive_copy(invoc_id);\n+                            }\n                             ext\n                         }\n                         Ok(_) | Err(Determinacy::Determined) => self.dummy_ext(MacroKind::Derive),"}, {"sha": "06aa5deb6e0184dd74231c0dd08aac951cd9a005", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/808522894b612bca8273f20ba4cfa328622c5a97/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808522894b612bca8273f20ba4cfa328622c5a97/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=808522894b612bca8273f20ba4cfa328622c5a97", "patch": "@@ -1,5 +1,5 @@\n use crate::base::*;\n-use crate::proc_macro::{collect_derives, MarkAttrs};\n+use crate::proc_macro::collect_derives;\n use crate::hygiene::{ExpnId, SyntaxContext, ExpnData, ExpnKind};\n use crate::mbe::macro_rules::annotate_err_with_kind;\n use crate::placeholders::{placeholder, PlaceholderExpander};\n@@ -394,7 +394,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     let fragment = self.expand_invoc(invoc, &ext.kind);\n                     self.collect_invocations(fragment, &[])\n                 }\n-                InvocationRes::DeriveContainer(exts) => {\n+                InvocationRes::DeriveContainer(_exts) => {\n+                    // FIXME: Consider using the derive resolutions (`_exts`) immediately,\n+                    // instead of enqueuing the derives to be resolved again later.\n                     let (derives, item) = match invoc.kind {\n                         InvocationKind::DeriveContainer { derives, item } => (derives, item),\n                         _ => unreachable!(),\n@@ -421,20 +423,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n                     let mut item = self.fully_configure(item);\n                     item.visit_attrs(|attrs| attrs.retain(|a| !a.has_name(sym::derive)));\n-                    let mut helper_attrs = Vec::new();\n-                    let mut has_copy = false;\n-                    for ext in exts {\n-                        helper_attrs.extend(&ext.helper_attrs);\n-                        has_copy |= ext.is_derive_copy;\n-                    }\n-                    // Mark derive helpers inside this item as known and used.\n-                    // FIXME: This is a hack, derive helpers should be integrated with regular name\n-                    // resolution instead. For example, helpers introduced by a derive container\n-                    // can be in scope for all code produced by that container's expansion.\n-                    item.visit_with(&mut MarkAttrs(&helper_attrs));\n-                    if has_copy {\n-                        self.cx.resolver.add_derive_copy(invoc.expansion_data.id);\n-                    }\n \n                     let mut derive_placeholders = Vec::with_capacity(derives.len());\n                     invocations.reserve(derives.len());"}, {"sha": "099cf0a4be9049bcb41d04f479eb5c8dd3bdba68", "filename": "src/libsyntax_expand/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/808522894b612bca8273f20ba4cfa328622c5a97/src%2Flibsyntax_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808522894b612bca8273f20ba4cfa328622c5a97/src%2Flibsyntax_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro.rs?ref=808522894b612bca8273f20ba4cfa328622c5a97", "patch": "@@ -1,13 +1,11 @@\n use crate::base::{self, *};\n use crate::proc_macro_server;\n \n-use syntax::ast::{self, ItemKind, Attribute, Mac};\n-use syntax::attr::{mark_used, mark_known};\n+use syntax::ast::{self, ItemKind};\n use syntax::errors::{Applicability, FatalError};\n use syntax::symbol::sym;\n use syntax::token;\n use syntax::tokenstream::{self, TokenStream};\n-use syntax::visit::Visitor;\n \n use rustc_data_structures::sync::Lrc;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -167,21 +165,6 @@ impl MultiItemModifier for ProcMacroDerive {\n     }\n }\n \n-crate struct MarkAttrs<'a>(crate &'a [ast::Name]);\n-\n-impl<'a> Visitor<'a> for MarkAttrs<'a> {\n-    fn visit_attribute(&mut self, attr: &Attribute) {\n-        if let Some(ident) = attr.ident() {\n-            if self.0.contains(&ident.name) {\n-                mark_used(attr);\n-                mark_known(attr);\n-            }\n-        }\n-    }\n-\n-    fn visit_mac(&mut self, _mac: &Mac) {}\n-}\n-\n crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>) -> Vec<ast::Path> {\n     let mut result = Vec::new();\n     attrs.retain(|attr| {"}, {"sha": "fe324ae63cd33b6e1092a2f66bf83398e52653b3", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/808522894b612bca8273f20ba4cfa328622c5a97/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808522894b612bca8273f20ba4cfa328622c5a97/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs?ref=808522894b612bca8273f20ba4cfa328622c5a97", "patch": "@@ -9,17 +9,15 @@ use test_macros::empty_attr as empty_helper;\n #[empty_helper] //~ ERROR `empty_helper` is ambiguous\n #[derive(Empty)]\n struct S {\n-    // FIXME No ambiguity, attributes in non-macro positions are not resolved properly\n-    #[empty_helper]\n+    #[empty_helper] //~ ERROR `empty_helper` is ambiguous\n     field: [u8; {\n         use empty_helper; //~ ERROR `empty_helper` is ambiguous\n \n-        // FIXME No ambiguity, derive helpers are not put into scope for inner items\n-        #[empty_helper]\n+        #[empty_helper] //~ ERROR `empty_helper` is ambiguous\n         struct U;\n \n         mod inner {\n-            // FIXME No ambiguity, attributes in non-macro positions are not resolved properly\n+            // OK, no ambiguity, the non-helper attribute is not in scope here, only the helper.\n             #[empty_helper]\n             struct V;\n         }"}, {"sha": "66ce34799da8976edae19e2c95cdef70205347ed", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.stderr", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/808522894b612bca8273f20ba4cfa328622c5a97/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/808522894b612bca8273f20ba4cfa328622c5a97/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=808522894b612bca8273f20ba4cfa328622c5a97", "patch": "@@ -1,5 +1,5 @@\n error[E0659]: `empty_helper` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/derive-helper-shadowing.rs:15:13\n+  --> $DIR/derive-helper-shadowing.rs:14:13\n    |\n LL |         use empty_helper;\n    |             ^^^^^^^^^^^^ ambiguous name\n@@ -34,6 +34,42 @@ LL | use test_macros::empty_attr as empty_helper;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use `crate::empty_helper` to refer to this attribute macro unambiguously\n \n-error: aborting due to 2 previous errors\n+error[E0659]: `empty_helper` is ambiguous (derive helper attribute vs any other name)\n+  --> $DIR/derive-helper-shadowing.rs:12:7\n+   |\n+LL |     #[empty_helper]\n+   |       ^^^^^^^^^^^^ ambiguous name\n+   |\n+note: `empty_helper` could refer to the derive helper attribute defined here\n+  --> $DIR/derive-helper-shadowing.rs:10:10\n+   |\n+LL | #[derive(Empty)]\n+   |          ^^^^^\n+note: `empty_helper` could also refer to the attribute macro imported here\n+  --> $DIR/derive-helper-shadowing.rs:7:5\n+   |\n+LL | use test_macros::empty_attr as empty_helper;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use `crate::empty_helper` to refer to this attribute macro unambiguously\n+\n+error[E0659]: `empty_helper` is ambiguous (derive helper attribute vs any other name)\n+  --> $DIR/derive-helper-shadowing.rs:16:11\n+   |\n+LL |         #[empty_helper]\n+   |           ^^^^^^^^^^^^ ambiguous name\n+   |\n+note: `empty_helper` could refer to the derive helper attribute defined here\n+  --> $DIR/derive-helper-shadowing.rs:10:10\n+   |\n+LL | #[derive(Empty)]\n+   |          ^^^^^\n+note: `empty_helper` could also refer to the attribute macro imported here\n+  --> $DIR/derive-helper-shadowing.rs:7:5\n+   |\n+LL | use test_macros::empty_attr as empty_helper;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use `crate::empty_helper` to refer to this attribute macro unambiguously\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0659`."}]}