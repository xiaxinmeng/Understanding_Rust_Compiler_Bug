{"sha": "8d2328d9a5ed45bf20739b0164dfad2bc97da9a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMjMyOGQ5YTVlZDQ1YmYyMDczOWIwMTY0ZGZhZDJiYzk3ZGE5YTc=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-04T06:15:24Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-04T06:15:24Z"}, "message": "Added &String matching and renamed to vec_ptr_arg to ptr_arg, also added README section", "tree": {"sha": "d24dd6e71c403bfdb8a8f4d116e18b5b168e11b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d24dd6e71c403bfdb8a8f4d116e18b5b168e11b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7", "html_url": "https://github.com/rust-lang/rust/commit/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07adeee6e942a639af81f7cd4c035e066433cef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/07adeee6e942a639af81f7cd4c035e066433cef0", "html_url": "https://github.com/rust-lang/rust/commit/07adeee6e942a639af81f7cd4c035e066433cef0"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "32249163211671111b10ad6b98d5d3ddeb882df6", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8d2328d9a5ed45bf20739b0164dfad2bc97da9a7", "patch": "@@ -14,6 +14,9 @@ Lints included in this crate:\n  - `eq_op`: Warns on equal operands on both sides of a comparison or bitwise combination\n  - `bad_bit_mask`: Denies expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n  - `needless_bool` : Warns on if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n+ - `ptr_arg`: Warns on fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n+\n+In your code, you may add `#![plugin(clippy)]` to use it (you may also need to include a `#![feature(plugin)]` line)\n \n You can allow/warn/deny the whole set using the `clippy` lint group (`#[allow(clippy)]`, etc)\n "}, {"sha": "8cf8650c80ac28a4cab86c2295a1d83475f7069b", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8d2328d9a5ed45bf20739b0164dfad2bc97da9a7", "patch": "@@ -18,8 +18,8 @@ pub mod types;\n pub mod misc;\n pub mod eq_op;\n pub mod bit_mask;\n+pub mod ptr_arg;\n pub mod needless_bool;\n-pub mod vec_ptr_arg;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -29,14 +29,13 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box misc::TopLevelRefPass as LintPassObject);\n     reg.register_lint_pass(box eq_op::EqOp as LintPassObject);\n     reg.register_lint_pass(box bit_mask::BitMask as LintPassObject);\n+    reg.register_lint_pass(box ptr_arg::PtrArg as LintPassObject);\n     reg.register_lint_pass(box needless_bool::NeedlessBool as LintPassObject);\n-    reg.register_lint_pass(box vec_ptr_arg::VecPtrArg as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n                                            misc::TOPLEVEL_REF_ARG, eq_op::EQ_OP,\n-                                           bit_mask::BAD_BIT_MASK, \n-                                           needless_bool::NEEDLESS_BOOL,\n-                                           vec_ptr_arg::VEC_PTR_ARG\n+                                           bit_mask::BAD_BIT_MASK, ptr_arg::PTR_ARG,\n+                                           needless_bool::NEEDLESS_BOOL\n                                            ]);\n }"}, {"sha": "378d30de57a5c81714f3844e4d67f36f1ecf497a", "filename": "src/ptr_arg.rs", "status": "renamed", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=8d2328d9a5ed45bf20739b0164dfad2bc97da9a7", "patch": "@@ -13,18 +13,18 @@ use syntax::codemap::Span;\n use types::match_ty_unwrap;\n \n declare_lint! {\n-    pub VEC_PTR_ARG,\n+    pub PTR_ARG,\n     Allow,\n-    \"Warn on declaration of a &Vec-typed method argument\"\n+    \"Warn on declaration of a &Vec- or &String-typed method argument\"\n }\n \n \n #[derive(Copy,Clone)]\n-pub struct VecPtrArg;\n+pub struct PtrArg;\n \n-impl LintPass for VecPtrArg {\n+impl LintPass for PtrArg {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(VEC_PTR_ARG)\n+        lint_array!(PTR_ARG)\n     }\n     \n     fn check_item(&mut self, cx: &Context, item: &Item) {\n@@ -59,7 +59,11 @@ fn check_fn(cx: &Context, decl: &FnDecl) {\n \n fn check_ptr_subtype(cx: &Context, span: Span, ty: &Ty) {\n \tif match_ty_unwrap(ty, &[\"Vec\"]).is_some() { \n-\t\tcx.span_lint(VEC_PTR_ARG, span, \n+\t\tcx.span_lint(PTR_ARG, span, \n \t\t\t\"Writing '&Vec<_>' instead of '&[_]' involves one more reference and cannot be used with non-vec-based slices. Consider changing the type to &[...]\");\n+\t} else { if match_ty_unwrap(ty, &[\"String\"]).is_some() {\n+\t\t\tcx.span_lint(PTR_ARG, span,\n+\t\t\t\t\"Writing '&String' instead of '&str' involves a new Object where a slices will do. Consider changing the type to &str\");\n+\t\t}\n \t}\n }", "previous_filename": "src/vec_ptr_arg.rs"}, {"sha": "2fe36eafa6c92a2633843f04d893729f38d22841", "filename": "tests/compile-fail/ptr_arg.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7/tests%2Fcompile-fail%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7/tests%2Fcompile-fail%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_arg.rs?ref=8d2328d9a5ed45bf20739b0164dfad2bc97da9a7", "patch": "@@ -0,0 +1,20 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(ptr_arg)]\n+#[allow(unused)]\n+fn do_vec(x: &Vec<i64>) { //~ERROR: Writing '&Vec<_>' instead of '&[_]'\n+\t//Nothing here\n+}\n+\n+#[deny(ptr_arg)]\n+#[allow(unused)]\n+fn do_str(x: &String) { //~ERROR\n+\t//Nothing here either\n+}\n+\n+fn main() {\n+\tlet x = vec![1i64, 2, 3];\n+\tdo_vec(&x);\n+\tdo_str(&\"hello\".to_owned());\n+}"}, {"sha": "5c4338e356ffc136bc7c7d358823d6a83835fe0f", "filename": "tests/compile-fail/vec_ptr_arg.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07adeee6e942a639af81f7cd4c035e066433cef0/tests%2Fcompile-fail%2Fvec_ptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07adeee6e942a639af81f7cd4c035e066433cef0/tests%2Fcompile-fail%2Fvec_ptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvec_ptr_arg.rs?ref=07adeee6e942a639af81f7cd4c035e066433cef0", "patch": "@@ -1,14 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#[deny(vec_ptr_arg)]\n-#[allow(unused)]\n-fn go(x: &Vec<i64>) { //~ERROR: Writing '&Vec<_>' instead of '&[_]'\n-\t//Nothing here\n-}\n-\n-\n-fn main() {\n-\tlet x = vec![1i64, 2, 3];\n-\tgo(&x);\n-}"}]}