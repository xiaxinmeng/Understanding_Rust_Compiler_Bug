{"sha": "a37ca8ce385ce06d8175e56486efe544b67488e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzN2NhOGNlMzg1Y2UwNmQ4MTc1ZTU2NDg2ZWZlNTQ0YjY3NDg4ZTM=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-03-15T22:41:51Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-03-15T22:41:51Z"}, "message": "Remove ~[] from libsemver", "tree": {"sha": "8b99ec0bdb24b06372b7bed6732140932a03a5f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b99ec0bdb24b06372b7bed6732140932a03a5f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a37ca8ce385ce06d8175e56486efe544b67488e3", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a37ca8ce385ce06d8175e56486efe544b67488e3", "html_url": "https://github.com/rust-lang/rust/commit/a37ca8ce385ce06d8175e56486efe544b67488e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a37ca8ce385ce06d8175e56486efe544b67488e3/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1f523525a8ae906d82ef0dccf716aa3b0cd6670", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f523525a8ae906d82ef0dccf716aa3b0cd6670", "html_url": "https://github.com/rust-lang/rust/commit/b1f523525a8ae906d82ef0dccf716aa3b0cd6670"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "5e31e649f713765b03326d2d531c241a78a8f796", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a37ca8ce385ce06d8175e56486efe544b67488e3/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37ca8ce385ce06d8175e56486efe544b67488e3/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=a37ca8ce385ce06d8175e56486efe544b67488e3", "patch": "@@ -33,13 +33,12 @@\n #[crate_type = \"dylib\"];\n #[license = \"MIT/ASL2\"];\n \n-#[allow(deprecated_owned_vector)];\n-\n use std::char;\n use std::cmp;\n use std::fmt;\n use std::fmt::Show;\n use std::option::{Option, Some, None};\n+use std::vec_ng::Vec;\n \n /// An identifier in the pre-release or build metadata. If the identifier can\n /// be parsed as a decimal value, it will be represented with `Numeric`.\n@@ -85,9 +84,9 @@ pub struct Version {\n     /// fixes are made.\n     patch: uint,\n     /// The pre-release version identifier, if one exists.\n-    pre: ~[Identifier],\n+    pre: Vec<Identifier>,\n     /// The build metadata, ignored when determining version precedence.\n-    build: ~[Identifier],\n+    build: Vec<Identifier>,\n }\n \n impl fmt::Show for Version {\n@@ -218,8 +217,8 @@ fn parse_iter<T: Iterator<char>>(rdr: &mut T) -> Option<Version> {\n         None => return None\n     };\n \n-    let mut pre = ~[];\n-    let mut build = ~[];\n+    let mut pre = vec!();\n+    let mut build = vec!();\n \n     let mut ch = ch;\n     if ch == Some('-') {\n@@ -292,66 +291,66 @@ fn test_parse() {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[],\n-        build: ~[],\n+        pre: vec!(),\n+        build: vec!(),\n     }));\n     assert!(parse(\"  1.2.3  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[],\n-        build: ~[],\n+        pre: vec!(),\n+        build: vec!(),\n     }));\n     assert!(parse(\"1.2.3-alpha1\") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[AlphaNumeric(~\"alpha1\")],\n-        build: ~[]\n+        pre: vec!(AlphaNumeric(~\"alpha1\")),\n+        build: vec!(),\n     }));\n     assert!(parse(\"  1.2.3-alpha1  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[AlphaNumeric(~\"alpha1\")],\n-        build: ~[]\n+        pre: vec!(AlphaNumeric(~\"alpha1\")),\n+        build: vec!()\n     }));\n     assert!(parse(\"1.2.3+build5\") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[],\n-        build: ~[AlphaNumeric(~\"build5\")]\n+        pre: vec!(),\n+        build: vec!(AlphaNumeric(~\"build5\"))\n     }));\n     assert!(parse(\"  1.2.3+build5  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[],\n-        build: ~[AlphaNumeric(~\"build5\")]\n+        pre: vec!(),\n+        build: vec!(AlphaNumeric(~\"build5\"))\n     }));\n     assert!(parse(\"1.2.3-alpha1+build5\") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[AlphaNumeric(~\"alpha1\")],\n-        build: ~[AlphaNumeric(~\"build5\")]\n+        pre: vec!(AlphaNumeric(~\"alpha1\")),\n+        build: vec!(AlphaNumeric(~\"build5\"))\n     }));\n     assert!(parse(\"  1.2.3-alpha1+build5  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[AlphaNumeric(~\"alpha1\")],\n-        build: ~[AlphaNumeric(~\"build5\")]\n+        pre: vec!(AlphaNumeric(~\"alpha1\")),\n+        build: vec!(AlphaNumeric(~\"build5\"))\n     }));\n     assert!(parse(\"1.2.3-1.alpha1.9+build5.7.3aedf  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[Numeric(1),AlphaNumeric(~\"alpha1\"),Numeric(9)],\n-        build: ~[AlphaNumeric(~\"build5\"),\n+        pre: vec!(Numeric(1),AlphaNumeric(~\"alpha1\"),Numeric(9)),\n+        build: vec!(AlphaNumeric(~\"build5\"),\n                  Numeric(7),\n-                 AlphaNumeric(~\"3aedf\")]\n+                 AlphaNumeric(~\"3aedf\"))\n     }));\n \n }"}]}