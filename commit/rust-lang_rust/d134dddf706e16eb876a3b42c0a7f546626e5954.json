{"sha": "d134dddf706e16eb876a3b42c0a7f546626e5954", "node_id": "C_kwDOAAsO6NoAKGQxMzRkZGRmNzA2ZTE2ZWI4NzZhM2I0MmMwYTdmNTQ2NjI2ZTU5NTQ", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-11-04T11:09:48Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-11-04T11:42:29Z"}, "message": "Improve `clippy_utils` function docs", "tree": {"sha": "1bd39b673f54f1ff06cb2bce2a719a440081515a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bd39b673f54f1ff06cb2bce2a719a440081515a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d134dddf706e16eb876a3b42c0a7f546626e5954", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmGDxyUACgkQ/Ny/Ka9k\n1gFV1xAApbk0OfaesL5/NGhCWoF9a1S9qDWPWZwUz8d7fU5fMthCG2HSIb0MJjet\nTgc84mha+hGvEsdJq+n+oSJ4oUbQR1bEGmgu3PtWCLeWmpZSjJgN40uu8OU+gTpp\nv2Odk/rIuql3j97qbdZPkRjSGElEXEd1C126LspZf0tYZ/rRT25KSQ/is7B9jBdE\njHylHQl6hQgyIoAsoXrPriTgDdx8Vq9CifQriYfvoiRwB5fqtUbvm2JLAd27KtNd\n8SE7C9Uh5iiGt+7JaS8jZTz1NfN9/VI5bLeyU+0Bl2WzE2sV7gHVvBUrVH30bqoa\nZezCKlBc4bo3CaBC/Y8DeoSU6vcimUVL4sLvVA6x9RQ7+12zMZwcuctpKJu+lpg3\nPG0jHgZCPZQJuEvaHca3DjZLm70gd+JQDO50rxSsOgLtBjMcYhoujRpc5E7/7an4\n2bkxwqbvQrVvD99zY+R/kpjy1Xi5KyhFs1KY/fjVVWFKPQLGNPXtlklc4byXAgXZ\n+52GWRsp0Jkq1tY0i3rLuzeTBwmjrAbINHYXIlD69v7p4RHFCRRiVxdOlZO2rXmA\ny/74Ld/W3tYzDjMvHbmPtq0wX2f5JmnQRdWHD8gymQJH17XGmkPB1Q0CZ6nc+6zJ\nL/kWUCSMtCVYZbgg08jsOXJeR5pa/XZrC3P/Lhw0DfLF5Y/HONM=\n=/tcd\n-----END PGP SIGNATURE-----", "payload": "tree 1bd39b673f54f1ff06cb2bce2a719a440081515a\nparent 1011e083cd4b87c71ee042e07345dc547bcfc055\nauthor xFrednet <xFrednet@gmail.com> 1636024188 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1636026149 +0100\n\nImprove `clippy_utils` function docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d134dddf706e16eb876a3b42c0a7f546626e5954", "html_url": "https://github.com/rust-lang/rust/commit/d134dddf706e16eb876a3b42c0a7f546626e5954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d134dddf706e16eb876a3b42c0a7f546626e5954/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1011e083cd4b87c71ee042e07345dc547bcfc055", "url": "https://api.github.com/repos/rust-lang/rust/commits/1011e083cd4b87c71ee042e07345dc547bcfc055", "html_url": "https://github.com/rust-lang/rust/commit/1011e083cd4b87c71ee042e07345dc547bcfc055"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "7f68cc388eb01f08a8db85220c720c84e612eeaa", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d134dddf706e16eb876a3b42c0a7f546626e5954/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d134dddf706e16eb876a3b42c0a7f546626e5954/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=d134dddf706e16eb876a3b42c0a7f546626e5954", "patch": "@@ -155,14 +155,22 @@ fn reindent_multiline_inner(s: &str, ignore_first: bool, indent: Option<usize>,\n         .join(\"\\n\")\n }\n \n-/// Converts a span to a code snippet if available, otherwise use default.\n+/// Converts a span to a code snippet if available, otherwise returns the default.\n ///\n /// This is useful if you want to provide suggestions for your lint or more generally, if you want\n-/// to convert a given `Span` to a `str`.\n+/// to convert a given `Span` to a `str`. To create suggestions consider using\n+/// [`snippet_with_applicability`] to ensure that the applicability stays correct.\n ///\n /// # Example\n /// ```rust,ignore\n-/// snippet(cx, expr.span, \"..\")\n+/// // Given two spans one for `value` and one for the `init` expression.\n+/// let value = Vec::new();\n+/// //  ^^^^^   ^^^^^^^^^^\n+/// //  span1   span2\n+///\n+/// // The snipped call would return the corresponding code snippet\n+/// snippet(cx, span1, \"..\") // -> \"value\"\n+/// snippet(cx, span2, \"..\") // -> \"Vec::new()\"\n /// ```\n pub fn snippet<'a, T: LintContext>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n     snippet_opt(cx, span).map_or_else(|| Cow::Borrowed(default), From::from)"}, {"sha": "697158282709f6fef416b6e4a57433a4ad78ba9d", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d134dddf706e16eb876a3b42c0a7f546626e5954/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d134dddf706e16eb876a3b42c0a7f546626e5954/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=d134dddf706e16eb876a3b42c0a7f546626e5954", "patch": "@@ -114,7 +114,12 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n \n /// Checks whether a type implements a trait.\n /// The function returns false in case the type contains an inference variable.\n-/// See also [`get_trait_def_id`](super::get_trait_def_id).\n+///\n+/// See:\n+/// * [`get_trait_def_id`](super::get_trait_def_id) to get a trait [`DefId`].\n+/// * [Common tools for writing lints] for an example how to use this function and other options.\n+///\n+/// [Common tools for writing lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md#checking-if-a-type-implements-a-specific-trait\n pub fn implements_trait<'tcx>(\n     cx: &LateContext<'tcx>,\n     ty: Ty<'tcx>,\n@@ -254,9 +259,17 @@ pub fn is_type_ref_to_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_ite\n     }\n }\n \n-/// Checks if the type is equal to a diagnostic item\n+/// Checks if the type is equal to a diagnostic item. To check if a type implements a\n+/// trait marked with a diagnostic item use [`implements_trait`].\n+///\n+/// For a further exploitation what diagnostic items are see [diagnostic items] in\n+/// rustc-dev-guide.\n+///\n+/// ---\n ///\n /// If you change the signature, remember to update the internal lint `MatchTypeOnDiagItem`\n+///\n+/// [Diagnostic Items]: https://rustc-dev-guide.rust-lang.org/diagnostics/diagnostic-items.html\n pub fn is_type_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_item: Symbol) -> bool {\n     match ty.kind() {\n         ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(diag_item, adt.did),"}]}