{"sha": "5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMzlmMWZhMjk3OGUyYzQ1MzJkMDAyZjRjZTUxMjFiYzFjOWEwMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-08T23:52:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-08T23:52:04Z"}, "message": "Auto merge of #73147 - Dylan-DPC:rollup-9saqhj5, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #71842 (doc: make impl block collapsible if it has an associated constant)\n - #72912 (Add new E0758 error code)\n - #73008 (Update RELEASES.md)\n - #73090 (Use `LocalDefId` directly in `Resolver::export_map`)\n - #73118 (Improve the wording in documentation of std::mem::drop)\n - #73124 (Removed lifetime parameters from Explanation of E0207 )\n - #73138 (Use shorthand linker strip arguments in order to support MacOS)\n - #73143 (Update books)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "970a662f7fcdd48e8ae83c33d509278027cc4435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/970a662f7fcdd48e8ae83c33d509278027cc4435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "html_url": "https://github.com/rust-lang/rust/commit/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd4b177aabb9749dfb562c48e47379cea81dc277", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4b177aabb9749dfb562c48e47379cea81dc277", "html_url": "https://github.com/rust-lang/rust/commit/fd4b177aabb9749dfb562c48e47379cea81dc277"}, {"sha": "9890107a813bbda09fc9dab503db25de44b3ad86", "url": "https://api.github.com/repos/rust-lang/rust/commits/9890107a813bbda09fc9dab503db25de44b3ad86", "html_url": "https://github.com/rust-lang/rust/commit/9890107a813bbda09fc9dab503db25de44b3ad86"}], "stats": {"total": 141, "additions": 92, "deletions": 49}, "files": [{"sha": "3ae3417a9b464c1ddb942efd86ed09dc3d5668f8", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -25,7 +25,7 @@ Compiler\n --------\n - [Rustc now respects the `-C codegen-units` flag in incremental mode.][70156]\n   Additionally when in incremental mode rustc defaults to 256 codegen units.\n-- [Refactored `catch_unwind`, to have zero-cost unless unwinding is enabled and\n+- [Refactored `catch_unwind` to have zero-cost, unless unwinding is enabled and\n   a panic is thrown.][67502]\n - [Added tier 3\\* support for the `aarch64-unknown-none` and\n   `aarch64-unknown-none-softfloat` targets.][68334]"}, {"sha": "30cd9dfe71c446de63826bb4472627af45acc9db", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -1 +1 @@\n-Subproject commit e8a4714a9d8a6136a59b8e63544e149683876e36\n+Subproject commit 30cd9dfe71c446de63826bb4472627af45acc9db"}, {"sha": "82bec5877c77cfad530ca11095db4456d757f668", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -1 +1 @@\n-Subproject commit 0a8ab5046829733eb03df0738c4fafaa9b36b348\n+Subproject commit 82bec5877c77cfad530ca11095db4456d757f668"}, {"sha": "bfe1ab96d717d1dda50e499b360f2e2f57e1750a", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -1 +1 @@\n-Subproject commit d1517d4e3f29264c5c67bce2658516bb5202c800\n+Subproject commit bfe1ab96d717d1dda50e499b360f2e2f57e1750a"}, {"sha": "5d40ba5c2515caffa7790cda621239dc21ef5a72", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -1 +1 @@\n-Subproject commit becdca9477c9eafa96a4eea5156fe7a2730d9dd2\n+Subproject commit 5d40ba5c2515caffa7790cda621239dc21ef5a72"}, {"sha": "d1f5cb44913db583337c938f234012380a421dcb", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -808,7 +808,7 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n \n /// Disposes of a value.\n ///\n-/// This does call the argument's implementation of [`Drop`][drop].\n+/// This does so by calling the argument's implementation of [`Drop`][drop].\n ///\n /// This effectively does nothing for types which implement `Copy`, e.g.\n /// integers. Such values are copied and _then_ moved into the function, so the"}, {"sha": "b17c36782074881f4dc47afffdb783cf80b5dbdf", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -481,10 +481,12 @@ impl<'a> Linker for GccLinker<'a> {\n         match strip {\n             Strip::None => {}\n             Strip::Debuginfo => {\n-                self.linker_arg(\"--strip-debug\");\n+                // MacOS linker does not support longhand argument --strip-debug\n+                self.linker_arg(\"-S\");\n             }\n             Strip::Symbols => {\n-                self.linker_arg(\"--strip-all\");\n+                // MacOS linker does not support longhand argument --strip-all\n+                self.linker_arg(\"-s\");\n             }\n         }\n     }"}, {"sha": "760b4d7ba00a33c1f44fc5f8d7f646feae230b86", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -437,6 +437,7 @@ E0751: include_str!(\"./error_codes/E0751.md\"),\n E0752: include_str!(\"./error_codes/E0752.md\"),\n E0753: include_str!(\"./error_codes/E0753.md\"),\n E0754: include_str!(\"./error_codes/E0754.md\"),\n+E0758: include_str!(\"./error_codes/E0758.md\"),\n E0760: include_str!(\"./error_codes/E0760.md\"),\n ;\n //  E0006, // merged with E0005"}, {"sha": "cb4f5d5157d9bf6c629f870d13bee250b3c0d59e", "filename": "src/librustc_error_codes/error_codes/E0207.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_error_codes%2Ferror_codes%2FE0207.md", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_error_codes%2Ferror_codes%2FE0207.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0207.md?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -1,4 +1,4 @@\n-A type or lifetime parameter that is specified for `impl` is not constrained.\n+A type parameter that is specified for `impl` is not constrained.\n \n Erroneous code example:\n \n@@ -14,7 +14,7 @@ impl<T: Default> Foo {\n }\n ```\n \n-Any type parameter or lifetime parameter of an `impl` must meet at least one of\n+Any type parameter parameter of an `impl` must meet at least one of\n the following criteria:\n \n  - it appears in the _implementing type_ of the impl, e.g. `impl<T> Foo<T>`"}, {"sha": "ddca4b3d75f77d736b07e6b7c54db34f897143ee", "filename": "src/librustc_error_codes/error_codes/E0758.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_error_codes%2Ferror_codes%2FE0758.md", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_error_codes%2Ferror_codes%2FE0758.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0758.md?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -0,0 +1,20 @@\n+A multi-line (doc-)comment is unterminated.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0758\n+/* I am not terminated!\n+```\n+\n+The same goes for doc comments:\n+\n+```compile_fail,E0758\n+/*! I am not terminated!\n+```\n+\n+You need to end your multi-line comment with `*/` in order to fix this error:\n+\n+```\n+/* I am terminated! */\n+/*! I am also terminated! */\n+```"}, {"sha": "64ccd46a744f503b110212acad386e1768c6c605", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -693,16 +693,25 @@ impl EncodeContext<'tcx> {\n         vis: &hir::Visibility<'_>,\n     ) {\n         let tcx = self.tcx;\n-        let def_id = tcx.hir().local_def_id(id).to_def_id();\n+        let def_id = tcx.hir().local_def_id(id);\n         debug!(\"EncodeContext::encode_info_for_mod({:?})\", def_id);\n \n         let data = ModData {\n             reexports: match tcx.module_exports(def_id) {\n-                Some(exports) => self.lazy(exports),\n+                Some(exports) => {\n+                    let hir_map = self.tcx.hir();\n+                    self.lazy(\n+                        exports\n+                            .iter()\n+                            .map(|export| export.map_id(|id| hir_map.as_local_hir_id(id))),\n+                    )\n+                }\n                 _ => Lazy::empty(),\n             },\n         };\n \n+        let def_id = def_id.to_def_id();\n+\n         record!(self.tables.kind[def_id] <- EntryKind::Mod(self.lazy(data)));\n         record!(self.tables.visibility[def_id] <- ty::Visibility::from_hir(vis, id, self.tcx));\n         record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));"}, {"sha": "af48c9e94ff82a0167a8478ab18200311a7d22af", "filename": "src/librustc_middle/hir/exports.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_middle%2Fhir%2Fexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_middle%2Fhir%2Fexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fexports.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -1,7 +1,8 @@\n use crate::ty;\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::DefIdMap;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_macros::HashStable;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n@@ -10,7 +11,7 @@ use std::fmt::Debug;\n \n /// This is the replacement export map. It maps a module to all of the exports\n /// within.\n-pub type ExportMap<Id> = DefIdMap<Vec<Export<Id>>>;\n+pub type ExportMap<Id> = FxHashMap<LocalDefId, Vec<Export<Id>>>;\n \n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct Export<Id> {"}, {"sha": "16ed9aff8f2a6945524eb8bbaebeeb90a821168b", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -865,8 +865,8 @@ rustc_queries! {\n     }\n \n     Other {\n-        query module_exports(def_id: DefId) -> Option<&'tcx [Export<hir::HirId>]> {\n-            desc { |tcx| \"looking up items exported by `{}`\", tcx.def_path_str(def_id) }\n+        query module_exports(def_id: LocalDefId) -> Option<&'tcx [Export<LocalDefId>]> {\n+            desc { |tcx| \"looking up items exported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n             eval_always\n         }\n     }"}, {"sha": "d5be3508d2d803c14462d5a15cea751461117aee", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -2,7 +2,7 @@\n \n use crate::arena::Arena;\n use crate::dep_graph::{self, DepConstructor, DepGraph};\n-use crate::hir::exports::Export;\n+use crate::hir::exports::ExportMap;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintSource};\n@@ -919,7 +919,7 @@ pub struct GlobalCtxt<'tcx> {\n     trait_map: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, StableVec<TraitCandidate>>>,\n \n     /// Export map produced by name resolution.\n-    export_map: FxHashMap<DefId, Vec<Export<hir::HirId>>>,\n+    export_map: ExportMap<LocalDefId>,\n \n     pub(crate) untracked_crate: &'tcx hir::Crate<'tcx>,\n     pub(crate) definitions: &'tcx Definitions,"}, {"sha": "ffbe3a40297c172a3d4ee9e8510d35f44e64bcb2", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -124,7 +124,7 @@ pub struct ResolverOutputs {\n     pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate<hir::HirId>>>,\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n-    pub export_map: ExportMap<hir::HirId>,\n+    pub export_map: ExportMap<LocalDefId>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in."}, {"sha": "9bc6a50acad048ab375ac890c2557ddcb82ede1d", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -191,7 +191,15 @@ impl<'a> StringReader<'a> {\n                         \"unterminated block comment\"\n                     };\n                     let last_bpos = self.pos;\n-                    self.fatal_span_(start, last_bpos, msg).raise();\n+                    self.sess\n+                        .span_diagnostic\n+                        .struct_span_fatal_with_code(\n+                            self.mk_sp(start, last_bpos),\n+                            msg,\n+                            error_code!(E0758),\n+                        )\n+                        .emit();\n+                    FatalError.raise();\n                 }\n \n                 if is_doc_comment {"}, {"sha": "74a8b7e2f556d3c05310419d84cd5ffb32cb07c5", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -1393,8 +1393,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             let is_good_import =\n                 binding.is_import() && !binding.is_ambiguity() && !ident.span.from_expansion();\n             if is_good_import || binding.is_macro_def() {\n-                let res = binding.res();\n-                if res != Res::Err {\n+                let res = binding.res().map_id(|id| this.definitions.local_def_id(id));\n+                if res != def::Res::Err {\n                     reexports.push(Export { ident, res, span: binding.span, vis: binding.vis });\n                 }\n             }\n@@ -1467,7 +1467,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n         if !reexports.is_empty() {\n             if let Some(def_id) = module.def_id() {\n-                self.r.export_map.insert(def_id, reexports);\n+                // Call to `expect_local` should be fine because current\n+                // code is only called for local modules.\n+                self.r.export_map.insert(def_id.expect_local(), reexports);\n             }\n         }\n     }"}, {"sha": "6bd73877fab75ae8844b4c63cf80b4bc29623d08", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -878,7 +878,7 @@ pub struct Resolver<'a> {\n \n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    export_map: ExportMap<NodeId>,\n+    export_map: ExportMap<LocalDefId>,\n     trait_map: TraitMap<NodeId>,\n \n     /// A map from nodes to anonymous modules.\n@@ -1281,18 +1281,7 @@ impl<'a> Resolver<'a> {\n     pub fn into_outputs(self) -> ResolverOutputs {\n         let definitions = self.definitions;\n         let extern_crate_map = self.extern_crate_map;\n-        let export_map = self\n-            .export_map\n-            .into_iter()\n-            .map(|(k, v)| {\n-                (\n-                    k,\n-                    v.into_iter()\n-                        .map(|e| e.map_id(|id| definitions.node_id_to_hir_id(id)))\n-                        .collect(),\n-                )\n-            })\n-            .collect();\n+        let export_map = self.export_map;\n         let trait_map = self\n             .trait_map\n             .into_iter()\n@@ -1330,18 +1319,7 @@ impl<'a> Resolver<'a> {\n             definitions: self.definitions.clone(),\n             cstore: Box::new(self.cstore().clone()),\n             extern_crate_map: self.extern_crate_map.clone(),\n-            export_map: self\n-                .export_map\n-                .iter()\n-                .map(|(&k, v)| {\n-                    (\n-                        k,\n-                        v.iter()\n-                            .map(|e| e.map_id(|id| self.definitions.node_id_to_hir_id(id)))\n-                            .collect(),\n-                    )\n-                })\n-                .collect(),\n+            export_map: self.export_map.clone(),\n             trait_map: self\n                 .trait_map\n                 .iter()"}, {"sha": "953f61a3772dc724b7aed6c2878ae5fa14f9792f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -2374,7 +2374,9 @@ function defocusSearchBar() {\n             if (!next) {\n                 return;\n             }\n-            if (next.getElementsByClassName(\"method\").length > 0 && hasClass(e, \"impl\")) {\n+            if (hasClass(e, \"impl\") &&\n+                (next.getElementsByClassName(\"method\").length > 0 ||\n+                 next.getElementsByClassName(\"associatedconstant\").length > 0)) {\n                 insertAfter(toggle.cloneNode(true), e.childNodes[e.childNodes.length - 1]);\n             }\n         };"}, {"sha": "1cfdfb1fb4575e62ed3c14d12db71dffc8171b97", "filename": "src/test/ui/unterminated-comment.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Ftest%2Fui%2Funterminated-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Ftest%2Fui%2Funterminated-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funterminated-comment.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -0,0 +1 @@\n+/* //~ ERROR E0758"}, {"sha": "c513fafeeb35c50ba91d0a4528359fbafe4f112e", "filename": "src/test/ui/unterminated-comment.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Ftest%2Fui%2Funterminated-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Ftest%2Fui%2Funterminated-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funterminated-comment.stderr?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -0,0 +1,9 @@\n+error[E0758]: unterminated block comment\n+  --> $DIR/unterminated-comment.rs:1:1\n+   |\n+LL | /*\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0758`."}, {"sha": "82546fe73da4fd44d105fd289c713cda1bacc141", "filename": "src/test/ui/unterminated-doc-comment.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Ftest%2Fui%2Funterminated-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Ftest%2Fui%2Funterminated-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funterminated-doc-comment.rs?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -0,0 +1 @@\n+/*! //~ ERROR E0758"}, {"sha": "2d5e537973ea8155252e5500b45bbeadd14c95ea", "filename": "src/test/ui/unterminated-doc-comment.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Ftest%2Fui%2Funterminated-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d39f1fa2978e2c4532d002f4ce5121bc1c9a007/src%2Ftest%2Fui%2Funterminated-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funterminated-doc-comment.stderr?ref=5d39f1fa2978e2c4532d002f4ce5121bc1c9a007", "patch": "@@ -0,0 +1,9 @@\n+error[E0758]: unterminated block doc-comment\n+  --> $DIR/unterminated-doc-comment.rs:1:1\n+   |\n+LL | /*!\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0758`."}]}