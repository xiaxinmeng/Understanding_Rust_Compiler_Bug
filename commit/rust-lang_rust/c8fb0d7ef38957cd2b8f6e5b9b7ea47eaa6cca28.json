{"sha": "c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZmIwZDdlZjM4OTU3Y2QyYjhmNmU1YjliN2VhNDdlYWE2Y2NhMjg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-05-09T11:37:26Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-05-09T11:37:26Z"}, "message": "End unification of exit codes in librustdoc", "tree": {"sha": "a5f83a52383c2f13fde7f545909452fdd8864a48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5f83a52383c2f13fde7f545909452fdd8864a48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28", "html_url": "https://github.com/rust-lang/rust/commit/c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e855b59151f2e5c2a58fe422a273e997df14b24", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e855b59151f2e5c2a58fe422a273e997df14b24", "html_url": "https://github.com/rust-lang/rust/commit/7e855b59151f2e5c2a58fe422a273e997df14b24"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "82d6cda986a9ace3c7a9f6f3a5a8c42b46985656", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28", "patch": "@@ -450,20 +450,29 @@ fn main_args(args: &[String]) -> i32 {\n     rustc_interface::interface::default_thread_pool(options.edition, move || main_options(options))\n }\n \n+fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> i32 {\n+    match res {\n+        Ok(()) => 0,\n+        Err(err) => {\n+            if !err.is_empty() {\n+                diag.struct_err(&err).emit();\n+            }\n+            1\n+        }\n+    }\n+}\n+\n fn main_options(options: config::Options) -> i32 {\n     let diag = core::new_handler(options.error_format, None, &options.debugging_options);\n \n     match (options.should_test, options.markdown_input()) {\n-        (true, true) => return markdown::test(options, &diag),\n-        (true, false) => return test::run(options),\n+        (true, true) => return wrap_return(&diag, markdown::test(options)),\n+        (true, false) => return wrap_return(&diag, test::run(options)),\n         (false, true) => {\n-            match markdown::render(&options.input, options.render_options, options.edition) {\n-                Ok(()) => return 0,\n-                Err(err) => {\n-                    diag.struct_err(&err).emit();\n-                    return 1;\n-                }\n-            }\n+            return wrap_return(\n+                &diag,\n+                markdown::render(&options.input, options.render_options, options.edition),\n+            );\n         }\n         (false, false) => {}\n     }"}, {"sha": "e0753bcd70f29365c064b5d4a3da68bb53b5d637", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28", "patch": "@@ -7,7 +7,6 @@ use rustc_span::edition::Edition;\n use rustc_span::source_map::DUMMY_SP;\n \n use crate::config::{Options, RenderOptions};\n-use crate::externalfiles::{load_string, LoadStringError};\n use crate::html::escape::Escape;\n use crate::html::markdown;\n use crate::html::markdown::{find_testable_code, ErrorCodes, IdMap, Markdown, MarkdownWithToc};\n@@ -116,13 +115,9 @@ pub fn render<P: AsRef<Path>>(\n }\n \n /// Runs any tests/code examples in the markdown file `input`.\n-pub fn test(mut options: Options, diag: &rustc_errors::Handler) -> i32 {\n-    let input_str = match load_string(&options.input, diag) {\n-        Ok(s) => s,\n-        Err(LoadStringError::ReadFail) => return 1,\n-        Err(LoadStringError::BadUtf8) => return 2,\n-    };\n-\n+pub fn test(mut options: Options) -> Result<(), String> {\n+    let input_str = read_to_string(&options.input)\n+        .map_err(|err| format!(\"{}: {}\", options.input.display(), err))?;\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n     opts.display_warnings = options.display_warnings;\n@@ -146,5 +141,5 @@ pub fn test(mut options: Options, diag: &rustc_errors::Handler) -> i32 {\n         collector.tests,\n         Some(testing::Options::new().display_output(options.display_warnings)),\n     );\n-    0\n+    Ok(())\n }"}, {"sha": "4253318e35fc10f06831e0f31d5f50bc4272a27e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28", "patch": "@@ -42,7 +42,7 @@ pub struct TestOptions {\n     pub attrs: Vec<String>,\n }\n \n-pub fn run(options: Options) -> i32 {\n+pub fn run(options: Options) -> Result<(), String> {\n     let input = config::Input::File(options.input.clone());\n \n     let warnings_lint_name = lint::builtin::WARNINGS.name;\n@@ -175,7 +175,7 @@ pub fn run(options: Options) -> i32 {\n     });\n     let tests = match tests {\n         Ok(tests) => tests,\n-        Err(ErrorReported) => return 1,\n+        Err(ErrorReported) => return Err(String::new()),\n     };\n \n     test_args.insert(0, \"rustdoctest\".to_string());\n@@ -186,7 +186,7 @@ pub fn run(options: Options) -> i32 {\n         Some(testing::Options::new().display_output(display_warnings)),\n     );\n \n-    0\n+    Ok(())\n }\n \n // Look for `#![doc(test(no_crate_inject))]`, used by crates in the std facade."}]}