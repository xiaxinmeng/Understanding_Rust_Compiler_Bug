{"sha": "b9e8286c85aa83fd7ff36603d394082024887dc9", "node_id": "C_kwDOAAsO6NoAKGI5ZTgyODZjODVhYTgzZmQ3ZmYzNjYwM2QzOTQwODIwMjQ4ODdkYzk", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-01-15T13:29:20Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-01-20T19:16:37Z"}, "message": "add debug assertion for suggestions with overlapping parts", "tree": {"sha": "f94493bdb26af53de5f2b1725bbb15f92450afc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94493bdb26af53de5f2b1725bbb15f92450afc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9e8286c85aa83fd7ff36603d394082024887dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e8286c85aa83fd7ff36603d394082024887dc9", "html_url": "https://github.com/rust-lang/rust/commit/b9e8286c85aa83fd7ff36603d394082024887dc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9e8286c85aa83fd7ff36603d394082024887dc9/comments", "author": null, "committer": null, "parents": [{"sha": "a6269dad38e6ede0013ba3688099544833933c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6269dad38e6ede0013ba3688099544833933c63", "html_url": "https://github.com/rust-lang/rust/commit/a6269dad38e6ede0013ba3688099544833933c63"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "4ad24c1400d69d1a5ec36650443b4ab4b00a0e88", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 44, "deletions": 27, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/b9e8286c85aa83fd7ff36603d394082024887dc9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9e8286c85aa83fd7ff36603d394082024887dc9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=b9e8286c85aa83fd7ff36603d394082024887dc9", "patch": "@@ -629,19 +629,27 @@ impl Diagnostic {\n         applicability: Applicability,\n         style: SuggestionStyle,\n     ) -> &mut Self {\n-        assert!(!suggestion.is_empty());\n-        debug_assert!(\n-            !(suggestion.iter().any(|(sp, text)| sp.is_empty() && text.is_empty())),\n-            \"Span must not be empty and have no suggestion\"\n+        let mut parts = suggestion\n+            .into_iter()\n+            .map(|(span, snippet)| SubstitutionPart { snippet, span })\n+            .collect::<Vec<_>>();\n+\n+        parts.sort_unstable_by_key(|part| part.span);\n+\n+        assert!(!parts.is_empty());\n+        debug_assert_eq!(\n+            parts.iter().find(|part| part.span.is_empty() && part.snippet.is_empty()),\n+            None,\n+            \"Span must not be empty and have no suggestion\",\n+        );\n+        debug_assert_eq!(\n+            parts.array_windows().find(|[a, b]| a.span.overlaps(b.span)),\n+            None,\n+            \"suggestion must not have overlapping parts\",\n         );\n \n         self.push_suggestion(CodeSuggestion {\n-            substitutions: vec![Substitution {\n-                parts: suggestion\n-                    .into_iter()\n-                    .map(|(span, snippet)| SubstitutionPart { snippet, span })\n-                    .collect(),\n-            }],\n+            substitutions: vec![Substitution { parts }],\n             msg: self.subdiagnostic_message_to_diagnostic_message(msg),\n             style,\n             applicability,\n@@ -802,25 +810,34 @@ impl Diagnostic {\n         suggestions: impl IntoIterator<Item = Vec<(Span, String)>>,\n         applicability: Applicability,\n     ) -> &mut Self {\n-        let suggestions: Vec<_> = suggestions.into_iter().collect();\n-        debug_assert!(\n-            !(suggestions\n-                .iter()\n-                .flatten()\n-                .any(|(sp, suggestion)| sp.is_empty() && suggestion.is_empty())),\n-            \"Span must not be empty and have no suggestion\"\n-        );\n+        let substitutions = suggestions\n+            .into_iter()\n+            .map(|sugg| {\n+                let mut parts = sugg\n+                    .into_iter()\n+                    .map(|(span, snippet)| SubstitutionPart { snippet, span })\n+                    .collect::<Vec<_>>();\n+\n+                parts.sort_unstable_by_key(|part| part.span);\n+\n+                assert!(!parts.is_empty());\n+                debug_assert_eq!(\n+                    parts.iter().find(|part| part.span.is_empty() && part.snippet.is_empty()),\n+                    None,\n+                    \"Span must not be empty and have no suggestion\",\n+                );\n+                debug_assert_eq!(\n+                    parts.array_windows().find(|[a, b]| a.span.overlaps(b.span)),\n+                    None,\n+                    \"suggestion must not have overlapping parts\",\n+                );\n+\n+                Substitution { parts }\n+            })\n+            .collect();\n \n         self.push_suggestion(CodeSuggestion {\n-            substitutions: suggestions\n-                .into_iter()\n-                .map(|sugg| Substitution {\n-                    parts: sugg\n-                        .into_iter()\n-                        .map(|(span, snippet)| SubstitutionPart { snippet, span })\n-                        .collect(),\n-                })\n-                .collect(),\n+            substitutions,\n             msg: self.subdiagnostic_message_to_diagnostic_message(msg),\n             style: SuggestionStyle::ShowCode,\n             applicability,"}, {"sha": "d076fc08b0e2f1f023e73a3259d18c6cf9d98795", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9e8286c85aa83fd7ff36603d394082024887dc9/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9e8286c85aa83fd7ff36603d394082024887dc9/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=b9e8286c85aa83fd7ff36603d394082024887dc9", "patch": "@@ -3,6 +3,7 @@\n //! This module contains the code for creating and emitting diagnostics.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(array_windows)]\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n #![feature(is_terminal)]"}]}