{"sha": "d651281a71b7d31947e33383dcb2a5647827e0fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NTEyODFhNzFiN2QzMTk0N2UzMzM4M2RjYjJhNTY0NzgyN2UwZmI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-03T00:44:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-03T01:50:13Z"}, "message": "Reword error message", "tree": {"sha": "8d73817e84ea2286be521110a05ff8c1d361a0f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d73817e84ea2286be521110a05ff8c1d361a0f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d651281a71b7d31947e33383dcb2a5647827e0fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d651281a71b7d31947e33383dcb2a5647827e0fb", "html_url": "https://github.com/rust-lang/rust/commit/d651281a71b7d31947e33383dcb2a5647827e0fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d651281a71b7d31947e33383dcb2a5647827e0fb/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "509bb0acba1de4ca9b766efd432a824b798ce6af", "url": "https://api.github.com/repos/rust-lang/rust/commits/509bb0acba1de4ca9b766efd432a824b798ce6af", "html_url": "https://github.com/rust-lang/rust/commit/509bb0acba1de4ca9b766efd432a824b798ce6af"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "f56d28d6f864e6e24e8f3cf7c83b857bfc917470", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d651281a71b7d31947e33383dcb2a5647827e0fb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d651281a71b7d31947e33383dcb2a5647827e0fb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=d651281a71b7d31947e33383dcb2a5647827e0fb", "patch": "@@ -217,7 +217,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                             if def.variants.len() < 4 && !def.variants.is_empty() {\n                                 // keep around to point at the definition of non-covered variants\n                                 missing_variants = def.variants.iter()\n-                                    .map(|variant| variant.ident.span)\n+                                    .map(|variant| variant.ident)\n                                     .collect();\n                             }\n                             def.variants.is_empty()\n@@ -227,18 +227,27 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 };\n                 if !scrutinee_is_uninhabited {\n                     // We know the type is inhabited, so this must be wrong\n-                    let mut err = create_e0004(self.tcx.sess, scrut.span, format!(\n-                        \"non-exhaustive patterns: type `{}` is non-empty\",\n-                        pat_ty,\n-                    ));\n+                    let mut err = create_e0004(\n+                        self.tcx.sess,\n+                        scrut.span,\n+                        format!(\"non-exhaustive patterns: {}\", match missing_variants.len() {\n+                            0 => format!(\"type `{}` is non-empty\", pat_ty),\n+                            1 => format!(\n+                                \"pattern `{}` of type `{}` is not handled\",\n+                                missing_variants[0].name,\n+                                pat_ty,\n+                            ),\n+                            _ => format!(\"multiple patterns of type `{}` are not handled\", pat_ty),\n+                        }),\n+                    );\n                     err.help(\"ensure that all possible cases are being handled, \\\n                               possibly by adding wildcards or more match arms\");\n                     if let Some(sp) = def_span {\n                         err.span_label(sp, format!(\"`{}` defined here\", pat_ty));\n                     }\n                     // point at the definition of non-covered enum variants\n                     for variant in &missing_variants {\n-                        err.span_label(*variant, \"variant not covered\");\n+                        err.span_label(variant.span, \"variant not covered\");\n                     }\n                     err.emit();\n                 }\n@@ -508,7 +517,8 @@ fn maybe_point_at_variant(\n ) -> Vec<Span> {\n     let mut covered = vec![];\n     if let ty::Adt(def, _) = sty {\n-        // Don't point at the variants if they are too many to avoid visual clutter\n+        // Don't point at variants that have already been covered due to other patterns to avoid\n+        // visual clutter\n         for pattern in patterns {\n             let pk: &PatternKind<'_> = &pattern.kind;\n             if let PatternKind::Variant { adt_def, variant_index, subpatterns, .. } = pk {\n@@ -526,7 +536,7 @@ fn maybe_point_at_variant(\n                     );\n                 }\n             }\n-            if let PatternKind::Leaf{ subpatterns } = pk {\n+            if let PatternKind::Leaf { subpatterns } = pk {\n                 let subpatterns = subpatterns.iter()\n                     .map(|field_pattern| field_pattern.pattern.clone())\n                     .collect::<Vec<_>>();"}, {"sha": "c8732852a71ee06e64e9711b20b639fbc4d06628", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d651281a71b7d31947e33383dcb2a5647827e0fb/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d651281a71b7d31947e33383dcb2a5647827e0fb/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=d651281a71b7d31947e33383dcb2a5647827e0fb", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type `std::option::Option<i32>` is non-empty\n+error[E0004]: non-exhaustive patterns: multiple patterns of type `std::option::Option<i32>` are not handled\n   --> $DIR/E0004-2.rs:4:11\n    |\n LL |     match x { } //~ ERROR E0004"}]}