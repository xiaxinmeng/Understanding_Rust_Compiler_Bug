{"sha": "c48f46ba368a5ae77acb0db46843a3e432ff87d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OGY0NmJhMzY4YTVhZTc3YWNiMGRiNDY4NDNhM2U0MzJmZjg3ZDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-01-25T14:02:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-01-26T16:44:24Z"}, "message": "add regression test\n\nFixes #47139", "tree": {"sha": "a33f07d630dd2153b95862e76050dfe86bb5f740", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a33f07d630dd2153b95862e76050dfe86bb5f740"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c48f46ba368a5ae77acb0db46843a3e432ff87d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c48f46ba368a5ae77acb0db46843a3e432ff87d3", "html_url": "https://github.com/rust-lang/rust/commit/c48f46ba368a5ae77acb0db46843a3e432ff87d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c48f46ba368a5ae77acb0db46843a3e432ff87d3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da569fa9ddf8369a9809184d43c600dc06bd4b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/da569fa9ddf8369a9809184d43c600dc06bd4b4d", "html_url": "https://github.com/rust-lang/rust/commit/da569fa9ddf8369a9809184d43c600dc06bd4b4d"}], "stats": {"total": 162, "additions": 162, "deletions": 0}, "files": [{"sha": "cb87991a491db2303dcf1efa844545689e95277b", "filename": "src/test/run-pass/issue-47139-1.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c48f46ba368a5ae77acb0db46843a3e432ff87d3/src%2Ftest%2Frun-pass%2Fissue-47139-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48f46ba368a5ae77acb0db46843a3e432ff87d3/src%2Ftest%2Frun-pass%2Fissue-47139-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-47139-1.rs?ref=c48f46ba368a5ae77acb0db46843a3e432ff87d3", "patch": "@@ -0,0 +1,87 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #47139:\n+//\n+// Coherence was encountering an (unnecessary) overflow trying to\n+// decide if the two impls of dummy overlap.\n+//\n+// The overflow went something like:\n+//\n+// - `&'a ?T: Insertable` ?\n+// - let ?T = Option<?U> ?\n+// - `Option<?U>: Insertable` ?\n+// - `Option<&'a ?U>: Insertable` ?\n+// - `&'a ?U: Insertable` ?\n+//\n+// While somewhere in the middle, a projection would occur, which\n+// broke cycle detection.\n+//\n+// It turned out that this cycle was being kicked off due to some\n+// extended diagnostic attempts in coherence, so removing those\n+// sidestepped the issue for now.\n+\n+#![allow(dead_code)]\n+\n+pub trait Insertable {\n+    type Values;\n+\n+    fn values(self) -> Self::Values;\n+}\n+\n+impl<T> Insertable for Option<T>\n+    where\n+    T: Insertable,\n+    T::Values: Default,\n+{\n+    type Values = T::Values;\n+\n+    fn values(self) -> Self::Values {\n+        self.map(Insertable::values).unwrap_or_default()\n+    }\n+}\n+\n+impl<'a, T> Insertable for &'a Option<T>\n+    where\n+    Option<&'a T>: Insertable,\n+{\n+    type Values = <Option<&'a T> as Insertable>::Values;\n+\n+    fn values(self) -> Self::Values {\n+        self.as_ref().values()\n+    }\n+}\n+\n+impl<'a, T> Insertable for &'a [T]\n+{\n+    type Values = Self;\n+\n+    fn values(self) -> Self::Values {\n+        self\n+    }\n+}\n+\n+trait Unimplemented { }\n+\n+trait Dummy { }\n+\n+struct Foo<T> { t: T }\n+\n+impl<'a, U> Dummy for Foo<&'a U>\n+    where &'a U: Insertable\n+{\n+}\n+\n+impl<T> Dummy for T\n+    where T: Unimplemented\n+{ }\n+\n+fn main() {\n+}"}, {"sha": "08eaee5acd730213e41e73b1da212b559ca2be77", "filename": "src/test/run-pass/issue-47139-2.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c48f46ba368a5ae77acb0db46843a3e432ff87d3/src%2Ftest%2Frun-pass%2Fissue-47139-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48f46ba368a5ae77acb0db46843a3e432ff87d3/src%2Ftest%2Frun-pass%2Fissue-47139-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-47139-2.rs?ref=c48f46ba368a5ae77acb0db46843a3e432ff87d3", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #47139:\n+//\n+// Same as issue-47139-1.rs, but the impls of dummy are in the\n+// opposite order. This influenced the way that coherence ran and in\n+// some cases caused the overflow to occur when it wouldn't otherwise.\n+// In an effort to make the regr test more robust, I am including both\n+// orderings.\n+\n+#![allow(dead_code)]\n+\n+pub trait Insertable {\n+    type Values;\n+\n+    fn values(self) -> Self::Values;\n+}\n+\n+impl<T> Insertable for Option<T>\n+    where\n+    T: Insertable,\n+    T::Values: Default,\n+{\n+    type Values = T::Values;\n+\n+    fn values(self) -> Self::Values {\n+        self.map(Insertable::values).unwrap_or_default()\n+    }\n+}\n+\n+impl<'a, T> Insertable for &'a Option<T>\n+    where\n+    Option<&'a T>: Insertable,\n+{\n+    type Values = <Option<&'a T> as Insertable>::Values;\n+\n+    fn values(self) -> Self::Values {\n+        self.as_ref().values()\n+    }\n+}\n+\n+impl<'a, T> Insertable for &'a [T]\n+{\n+    type Values = Self;\n+\n+    fn values(self) -> Self::Values {\n+        self\n+    }\n+}\n+\n+trait Unimplemented { }\n+\n+trait Dummy { }\n+\n+struct Foo<T> { t: T }\n+\n+impl<T> Dummy for T\n+    where T: Unimplemented\n+{ }\n+\n+impl<'a, U> Dummy for Foo<&'a U>\n+    where &'a U: Insertable\n+{\n+}\n+\n+fn main() {\n+}"}]}