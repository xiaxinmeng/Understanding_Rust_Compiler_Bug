{"sha": "ed5af70a3634915004f24c391a33cbebb8beb7bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNWFmNzBhMzYzNDkxNTAwNGYyNGMzOTFhMzNjYmViYjhiZWI3YmQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-05-28T19:10:32Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-05-28T19:14:41Z"}, "message": "std: add json::to_str and json::to_json iface.", "tree": {"sha": "596330cb0940f3b9ccb46a8748914d5b368a81de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/596330cb0940f3b9ccb46a8748914d5b368a81de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed5af70a3634915004f24c391a33cbebb8beb7bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed5af70a3634915004f24c391a33cbebb8beb7bd", "html_url": "https://github.com/rust-lang/rust/commit/ed5af70a3634915004f24c391a33cbebb8beb7bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed5af70a3634915004f24c391a33cbebb8beb7bd/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45ed323c99cf105b807ca79c5561570ec5c93c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e45ed323c99cf105b807ca79c5561570ec5c93c8", "html_url": "https://github.com/rust-lang/rust/commit/e45ed323c99cf105b807ca79c5561570ec5c93c8"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "5d9427c72b8603be0aa70f571a64e3f4b44a1718", "filename": "src/libstd/json.rs", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/ed5af70a3634915004f24c391a33cbebb8beb7bd/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5af70a3634915004f24c391a33cbebb8beb7bd/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=ed5af70a3634915004f24c391a33cbebb8beb7bd", "patch": "@@ -16,6 +16,7 @@ export to_str;\n export from_reader;\n export from_str;\n export eq;\n+export to_json;\n \n export num;\n export string;\n@@ -498,6 +499,110 @@ fn eq(value0: json, value1: json) -> bool {\n     }\n }\n \n+iface to_json { fn to_json() -> json; }\n+\n+impl of to_json for json {\n+    fn to_json() -> json { self }\n+}\n+\n+impl of to_json for i8 {\n+    fn to_json() -> json { num(self as float) }\n+}\n+\n+impl of to_json for i16 {\n+    fn to_json() -> json { num(self as float) }\n+}\n+\n+impl of to_json for i32 {\n+    fn to_json() -> json { num(self as float) }\n+}\n+\n+impl of to_json for i64 {\n+    fn to_json() -> json { num(self as float) }\n+}\n+\n+impl of to_json for u8 {\n+    fn to_json() -> json { num(self as float) }\n+}\n+\n+impl of to_json for u16 {\n+    fn to_json() -> json { num(self as float) }\n+}\n+\n+impl of to_json for u32 {\n+    fn to_json() -> json { num(self as float) }\n+}\n+\n+impl of to_json for u64 {\n+    fn to_json() -> json { num(self as float) }\n+}\n+\n+impl of to_json for float {\n+    fn to_json() -> json { num(self) }\n+}\n+\n+impl of to_json for f32 {\n+    fn to_json() -> json { num(self as float) }\n+}\n+\n+impl of to_json for f64 {\n+    fn to_json() -> json { num(self as float) }\n+}\n+\n+impl of to_json for () {\n+    fn to_json() -> json { null }\n+}\n+\n+impl of to_json for bool {\n+    fn to_json() -> json { boolean(self) }\n+}\n+\n+impl of to_json for str {\n+    fn to_json() -> json { string(self) }\n+}\n+\n+impl <A: to_json copy, B: to_json copy> of to_json for (A, B) {\n+    fn to_json() -> json {\n+        let (a, b) = self;\n+        list([a.to_json(), b.to_json()])\n+    }\n+}\n+\n+impl <A: to_json copy, B: to_json copy, C: to_json copy>\n+  of to_json for (A, B, C) {\n+    fn to_json() -> json {\n+        let (a, b, c) = self;\n+        list([a.to_json(), b.to_json(), c.to_json()])\n+    }\n+}\n+\n+impl <A: to_json> of to_json for [A] {\n+    fn to_json() -> json { list(self.map { |elt| elt.to_json() }) }\n+}\n+\n+impl <A: to_json copy> of to_json for hashmap<str, A> {\n+    fn to_json() -> json {\n+        let d = map::str_hash();\n+        for self.each() { |key, value|\n+            d.insert(key, value.to_json());\n+        }\n+        dict(d)\n+    }\n+}\n+\n+impl <A: to_json> of to_json for option<A> {\n+    fn to_json() -> json {\n+        alt self {\n+          none { null }\n+          some(value) { value.to_json() }\n+        }\n+    }\n+}\n+\n+impl of to_str::to_str for json {\n+    fn to_str() -> str { to_str(self) }\n+}\n+\n #[cfg(test)]\n mod tests {\n     fn mk_dict(items: [(str, json)]) -> json {"}]}