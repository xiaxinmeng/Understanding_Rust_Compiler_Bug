{"sha": "6c943bad02626dddc5e5135b23c77429b6e4a063", "node_id": "C_kwDOAAsO6NoAKDZjOTQzYmFkMDI2MjZkZGRjNWU1MTM1YjIzYzc3NDI5YjZlNGEwNjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-19T02:34:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-19T02:34:30Z"}, "message": "Auto merge of #99541 - timvermeulen:flatten_cleanup, r=the8472\n\nRefactor iteration logic in the `Flatten` and `FlatMap` iterators\n\nThe `Flatten` and `FlatMap` iterators both delegate to `FlattenCompat`:\n```rust\nstruct FlattenCompat<I, U> {\n    iter: Fuse<I>,\n    frontiter: Option<U>,\n    backiter: Option<U>,\n}\n```\nEvery individual iterator method that `FlattenCompat` implements needs to carefully manage this state, checking whether the `frontiter` and `backiter` are present, and storing the current iterator appropriately if iteration is aborted. This has led to methods such as `next`, `advance_by`, and `try_fold` all having similar code for managing the iterator's state.\n\nI have extracted this common logic of iterating the inner iterators with the option to exit early into a `iter_try_fold` method:\n```rust\nimpl<I, U> FlattenCompat<I, U>\nwhere\n    I: Iterator<Item: IntoIterator<IntoIter = U>>,\n{\n    fn iter_try_fold<Acc, Fold, R>(&mut self, acc: Acc, fold: Fold) -> R\n    where\n        Fold: FnMut(Acc, &mut U) -> R,\n        R: Try<Output = Acc>,\n    { ... }\n}\n```\nIt passes each of the inner iterators to the given function as long as it keep succeeding. It takes care of managing `FlattenCompat`'s state, so that the actual `Iterator` methods don't need to. The resulting code that makes use of this abstraction is much more straightforward:\n```rust\nfn next(&mut self) -> Option<U::Item> {\n    #[inline]\n    fn next<U: Iterator>((): (), iter: &mut U) -> ControlFlow<U::Item> {\n        match iter.next() {\n            None => ControlFlow::CONTINUE,\n            Some(x) => ControlFlow::Break(x),\n        }\n    }\n\n    self.iter_try_fold((), next).break_value()\n}\n```\nNote that despite being implemented in terms of `iter_try_fold`, `next` is still able to benefit from `U`'s `next` method. It therefore does not take the performance hit that implementing `next` directly in terms of `Self::try_fold` causes (in some benchmarks).\n\nThis PR also adds `iter_try_rfold` which captures the shared logic of `try_rfold` and `advance_back_by`, as well as `iter_fold` and `iter_rfold` for folding without early exits (used by `fold`, `rfold`, `count`, and `last`).\n\nBenchmark results:\n```\n                                             before                after\nbench_flat_map_sum                       423,255 ns/iter      414,338 ns/iter\nbench_flat_map_ref_sum                 1,942,139 ns/iter    2,216,643 ns/iter\nbench_flat_map_chain_sum               1,616,840 ns/iter    1,246,445 ns/iter\nbench_flat_map_chain_ref_sum           4,348,110 ns/iter    3,574,775 ns/iter\nbench_flat_map_chain_option_sum          780,037 ns/iter      780,679 ns/iter\nbench_flat_map_chain_option_ref_sum    2,056,458 ns/iter      834,932 ns/iter\n```\n\nI added the last two benchmarks specifically to demonstrate an extreme case where `FlatMap::next` can benefit from custom internal iteration of the outer iterator, so take it with a grain of salt. We should probably do a perf run to see if the changes to `next` are worth it in practice.", "tree": {"sha": "a2098b9821d8ee20c29fc2eb3eeee4f971aadb1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2098b9821d8ee20c29fc2eb3eeee4f971aadb1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c943bad02626dddc5e5135b23c77429b6e4a063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c943bad02626dddc5e5135b23c77429b6e4a063", "html_url": "https://github.com/rust-lang/rust/commit/6c943bad02626dddc5e5135b23c77429b6e4a063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c943bad02626dddc5e5135b23c77429b6e4a063/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71ecf5d359bf750cc171e124779a46985633439d", "url": "https://api.github.com/repos/rust-lang/rust/commits/71ecf5d359bf750cc171e124779a46985633439d", "html_url": "https://github.com/rust-lang/rust/commit/71ecf5d359bf750cc171e124779a46985633439d"}, {"sha": "38bb0b173e370fccc35c7bc02e29525c9d82c767", "url": "https://api.github.com/repos/rust-lang/rust/commits/38bb0b173e370fccc35c7bc02e29525c9d82c767", "html_url": "https://github.com/rust-lang/rust/commit/38bb0b173e370fccc35c7bc02e29525c9d82c767"}], "stats": {"total": 417, "additions": 280, "deletions": 137}, "files": [{"sha": "307016c269099cf7d4d74981711e8fbe79763059", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 238, "deletions": 137, "changes": 375, "blob_url": "https://github.com/rust-lang/rust/blob/6c943bad02626dddc5e5135b23c77429b6e4a063/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c943bad02626dddc5e5135b23c77429b6e4a063/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=6c943bad02626dddc5e5135b23c77429b6e4a063", "patch": "@@ -1,6 +1,6 @@\n use crate::fmt;\n use crate::iter::{DoubleEndedIterator, Fuse, FusedIterator, Iterator, Map, TrustedLen};\n-use crate::ops::Try;\n+use crate::ops::{ControlFlow, Try};\n \n /// An iterator that maps each element to an iterator, and yields the elements\n /// of the produced iterators.\n@@ -73,6 +73,21 @@ where\n     {\n         self.inner.fold(init, fold)\n     }\n+\n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.inner.advance_by(n)\n+    }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.inner.count()\n+    }\n+\n+    #[inline]\n+    fn last(self) -> Option<Self::Item> {\n+        self.inner.last()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -103,6 +118,11 @@ where\n     {\n         self.inner.rfold(init, fold)\n     }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.inner.advance_back_by(n)\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -214,6 +234,21 @@ where\n     {\n         self.inner.fold(init, fold)\n     }\n+\n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.inner.advance_by(n)\n+    }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.inner.count()\n+    }\n+\n+    #[inline]\n+    fn last(self) -> Option<Self::Item> {\n+        self.inner.last()\n+    }\n }\n \n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n@@ -244,6 +279,11 @@ where\n     {\n         self.inner.rfold(init, fold)\n     }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.inner.advance_back_by(n)\n+    }\n }\n \n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n@@ -280,6 +320,144 @@ where\n     }\n }\n \n+impl<I, U> FlattenCompat<I, U>\n+where\n+    I: Iterator<Item: IntoIterator<IntoIter = U>>,\n+{\n+    /// Folds the inner iterators into an accumulator by applying an operation.\n+    ///\n+    /// Folds over the inner iterators, not over their elements. Is used by the `fold`, `count`,\n+    /// and `last` methods.\n+    #[inline]\n+    fn iter_fold<Acc, Fold>(self, mut acc: Acc, mut fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, U) -> Acc,\n+    {\n+        #[inline]\n+        fn flatten<T: IntoIterator, Acc>(\n+            fold: &mut impl FnMut(Acc, T::IntoIter) -> Acc,\n+        ) -> impl FnMut(Acc, T) -> Acc + '_ {\n+            move |acc, iter| fold(acc, iter.into_iter())\n+        }\n+\n+        if let Some(iter) = self.frontiter {\n+            acc = fold(acc, iter);\n+        }\n+\n+        acc = self.iter.fold(acc, flatten(&mut fold));\n+\n+        if let Some(iter) = self.backiter {\n+            acc = fold(acc, iter);\n+        }\n+\n+        acc\n+    }\n+\n+    /// Folds over the inner iterators as long as the given function returns successfully,\n+    /// always storing the most recent inner iterator in `self.frontiter`.\n+    ///\n+    /// Folds over the inner iterators, not over their elements. Is used by the `try_fold` and\n+    /// `advance_by` methods.\n+    #[inline]\n+    fn iter_try_fold<Acc, Fold, R>(&mut self, mut acc: Acc, mut fold: Fold) -> R\n+    where\n+        Fold: FnMut(Acc, &mut U) -> R,\n+        R: Try<Output = Acc>,\n+    {\n+        #[inline]\n+        fn flatten<'a, T: IntoIterator, Acc, R: Try<Output = Acc>>(\n+            frontiter: &'a mut Option<T::IntoIter>,\n+            fold: &'a mut impl FnMut(Acc, &mut T::IntoIter) -> R,\n+        ) -> impl FnMut(Acc, T) -> R + 'a {\n+            move |acc, iter| fold(acc, frontiter.insert(iter.into_iter()))\n+        }\n+\n+        if let Some(iter) = &mut self.frontiter {\n+            acc = fold(acc, iter)?;\n+        }\n+        self.frontiter = None;\n+\n+        acc = self.iter.try_fold(acc, flatten(&mut self.frontiter, &mut fold))?;\n+        self.frontiter = None;\n+\n+        if let Some(iter) = &mut self.backiter {\n+            acc = fold(acc, iter)?;\n+        }\n+        self.backiter = None;\n+\n+        try { acc }\n+    }\n+}\n+\n+impl<I, U> FlattenCompat<I, U>\n+where\n+    I: DoubleEndedIterator<Item: IntoIterator<IntoIter = U>>,\n+{\n+    /// Folds the inner iterators into an accumulator by applying an operation, starting form the\n+    /// back.\n+    ///\n+    /// Folds over the inner iterators, not over their elements. Is used by the `rfold` method.\n+    #[inline]\n+    fn iter_rfold<Acc, Fold>(self, mut acc: Acc, mut fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, U) -> Acc,\n+    {\n+        #[inline]\n+        fn flatten<T: IntoIterator, Acc>(\n+            fold: &mut impl FnMut(Acc, T::IntoIter) -> Acc,\n+        ) -> impl FnMut(Acc, T) -> Acc + '_ {\n+            move |acc, iter| fold(acc, iter.into_iter())\n+        }\n+\n+        if let Some(iter) = self.backiter {\n+            acc = fold(acc, iter);\n+        }\n+\n+        acc = self.iter.rfold(acc, flatten(&mut fold));\n+\n+        if let Some(iter) = self.frontiter {\n+            acc = fold(acc, iter);\n+        }\n+\n+        acc\n+    }\n+\n+    /// Folds over the inner iterators in reverse order as long as the given function returns\n+    /// successfully, always storing the most recent inner iterator in `self.backiter`.\n+    ///\n+    /// Folds over the inner iterators, not over their elements. Is used by the `try_rfold` and\n+    /// `advance_back_by` methods.\n+    #[inline]\n+    fn iter_try_rfold<Acc, Fold, R>(&mut self, mut acc: Acc, mut fold: Fold) -> R\n+    where\n+        Fold: FnMut(Acc, &mut U) -> R,\n+        R: Try<Output = Acc>,\n+    {\n+        #[inline]\n+        fn flatten<'a, T: IntoIterator, Acc, R: Try>(\n+            backiter: &'a mut Option<T::IntoIter>,\n+            fold: &'a mut impl FnMut(Acc, &mut T::IntoIter) -> R,\n+        ) -> impl FnMut(Acc, T) -> R + 'a {\n+            move |acc, iter| fold(acc, backiter.insert(iter.into_iter()))\n+        }\n+\n+        if let Some(iter) = &mut self.backiter {\n+            acc = fold(acc, iter)?;\n+        }\n+        self.backiter = None;\n+\n+        acc = self.iter.try_rfold(acc, flatten(&mut self.backiter, &mut fold))?;\n+        self.backiter = None;\n+\n+        if let Some(iter) = &mut self.frontiter {\n+            acc = fold(acc, iter)?;\n+        }\n+        self.frontiter = None;\n+\n+        try { acc }\n+    }\n+}\n+\n impl<I, U> Iterator for FlattenCompat<I, U>\n where\n     I: Iterator<Item: IntoIterator<IntoIter = U, Item = U::Item>>,\n@@ -323,99 +501,74 @@ where\n     }\n \n     #[inline]\n-    fn try_fold<Acc, Fold, R>(&mut self, mut init: Acc, mut fold: Fold) -> R\n+    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Output = Acc>,\n     {\n         #[inline]\n-        fn flatten<'a, T: IntoIterator, Acc, R: Try<Output = Acc>>(\n-            frontiter: &'a mut Option<T::IntoIter>,\n-            fold: &'a mut impl FnMut(Acc, T::Item) -> R,\n-        ) -> impl FnMut(Acc, T) -> R + 'a {\n-            move |acc, x| {\n-                let mut mid = x.into_iter();\n-                let r = mid.try_fold(acc, &mut *fold);\n-                *frontiter = Some(mid);\n-                r\n-            }\n-        }\n-\n-        if let Some(ref mut front) = self.frontiter {\n-            init = front.try_fold(init, &mut fold)?;\n+        fn flatten<U: Iterator, Acc, R: Try<Output = Acc>>(\n+            mut fold: impl FnMut(Acc, U::Item) -> R,\n+        ) -> impl FnMut(Acc, &mut U) -> R {\n+            move |acc, iter| iter.try_fold(acc, &mut fold)\n         }\n-        self.frontiter = None;\n \n-        init = self.iter.try_fold(init, flatten(&mut self.frontiter, &mut fold))?;\n-        self.frontiter = None;\n-\n-        if let Some(ref mut back) = self.backiter {\n-            init = back.try_fold(init, &mut fold)?;\n-        }\n-        self.backiter = None;\n-\n-        try { init }\n+        self.iter_try_fold(init, flatten(fold))\n     }\n \n     #[inline]\n-    fn fold<Acc, Fold>(self, mut init: Acc, mut fold: Fold) -> Acc\n+    fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n         #[inline]\n-        fn flatten<T: IntoIterator, Acc>(\n-            fold: &mut impl FnMut(Acc, T::Item) -> Acc,\n-        ) -> impl FnMut(Acc, T) -> Acc + '_ {\n-            move |acc, x| x.into_iter().fold(acc, &mut *fold)\n-        }\n-\n-        if let Some(front) = self.frontiter {\n-            init = front.fold(init, &mut fold);\n-        }\n-\n-        init = self.iter.fold(init, flatten(&mut fold));\n-\n-        if let Some(back) = self.backiter {\n-            init = back.fold(init, &mut fold);\n+        fn flatten<U: Iterator, Acc>(\n+            mut fold: impl FnMut(Acc, U::Item) -> Acc,\n+        ) -> impl FnMut(Acc, U) -> Acc {\n+            move |acc, iter| iter.fold(acc, &mut fold)\n         }\n \n-        init\n+        self.iter_fold(init, flatten(fold))\n     }\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let mut rem = n;\n-        loop {\n-            if let Some(ref mut front) = self.frontiter {\n-                match front.advance_by(rem) {\n-                    ret @ Ok(_) => return ret,\n-                    Err(advanced) => rem -= advanced,\n-                }\n-            }\n-            self.frontiter = match self.iter.next() {\n-                Some(iterable) => Some(iterable.into_iter()),\n-                _ => break,\n+        #[inline]\n+        #[rustc_inherit_overflow_checks]\n+        fn advance<U: Iterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n+            match iter.advance_by(n) {\n+                Ok(()) => ControlFlow::BREAK,\n+                Err(advanced) => ControlFlow::Continue(n - advanced),\n             }\n         }\n \n-        self.frontiter = None;\n-\n-        if let Some(ref mut back) = self.backiter {\n-            match back.advance_by(rem) {\n-                ret @ Ok(_) => return ret,\n-                Err(advanced) => rem -= advanced,\n-            }\n+        match self.iter_try_fold(n, advance) {\n+            ControlFlow::Continue(remaining) if remaining > 0 => Err(n - remaining),\n+            _ => Ok(()),\n         }\n+    }\n \n-        if rem > 0 {\n-            return Err(n - rem);\n+    #[inline]\n+    fn count(self) -> usize {\n+        #[inline]\n+        #[rustc_inherit_overflow_checks]\n+        fn count<U: Iterator>(acc: usize, iter: U) -> usize {\n+            acc + iter.count()\n         }\n \n-        self.backiter = None;\n+        self.iter_fold(0, count)\n+    }\n+\n+    #[inline]\n+    fn last(self) -> Option<Self::Item> {\n+        #[inline]\n+        fn last<U: Iterator>(last: Option<U::Item>, iter: U) -> Option<U::Item> {\n+            iter.last().or(last)\n+        }\n \n-        Ok(())\n+        self.iter_fold(None, last)\n     }\n }\n \n@@ -438,105 +591,53 @@ where\n     }\n \n     #[inline]\n-    fn try_rfold<Acc, Fold, R>(&mut self, mut init: Acc, mut fold: Fold) -> R\n+    fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Output = Acc>,\n     {\n         #[inline]\n-        fn flatten<'a, T: IntoIterator, Acc, R: Try<Output = Acc>>(\n-            backiter: &'a mut Option<T::IntoIter>,\n-            fold: &'a mut impl FnMut(Acc, T::Item) -> R,\n-        ) -> impl FnMut(Acc, T) -> R + 'a\n-        where\n-            T::IntoIter: DoubleEndedIterator,\n-        {\n-            move |acc, x| {\n-                let mut mid = x.into_iter();\n-                let r = mid.try_rfold(acc, &mut *fold);\n-                *backiter = Some(mid);\n-                r\n-            }\n+        fn flatten<U: DoubleEndedIterator, Acc, R: Try<Output = Acc>>(\n+            mut fold: impl FnMut(Acc, U::Item) -> R,\n+        ) -> impl FnMut(Acc, &mut U) -> R {\n+            move |acc, iter| iter.try_rfold(acc, &mut fold)\n         }\n \n-        if let Some(ref mut back) = self.backiter {\n-            init = back.try_rfold(init, &mut fold)?;\n-        }\n-        self.backiter = None;\n-\n-        init = self.iter.try_rfold(init, flatten(&mut self.backiter, &mut fold))?;\n-        self.backiter = None;\n-\n-        if let Some(ref mut front) = self.frontiter {\n-            init = front.try_rfold(init, &mut fold)?;\n-        }\n-        self.frontiter = None;\n-\n-        try { init }\n+        self.iter_try_rfold(init, flatten(fold))\n     }\n \n     #[inline]\n-    fn rfold<Acc, Fold>(self, mut init: Acc, mut fold: Fold) -> Acc\n+    fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n         #[inline]\n-        fn flatten<T: IntoIterator, Acc>(\n-            fold: &mut impl FnMut(Acc, T::Item) -> Acc,\n-        ) -> impl FnMut(Acc, T) -> Acc + '_\n-        where\n-            T::IntoIter: DoubleEndedIterator,\n-        {\n-            move |acc, x| x.into_iter().rfold(acc, &mut *fold)\n-        }\n-\n-        if let Some(back) = self.backiter {\n-            init = back.rfold(init, &mut fold);\n+        fn flatten<U: DoubleEndedIterator, Acc>(\n+            mut fold: impl FnMut(Acc, U::Item) -> Acc,\n+        ) -> impl FnMut(Acc, U) -> Acc {\n+            move |acc, iter| iter.rfold(acc, &mut fold)\n         }\n \n-        init = self.iter.rfold(init, flatten(&mut fold));\n-\n-        if let Some(front) = self.frontiter {\n-            init = front.rfold(init, &mut fold);\n-        }\n-\n-        init\n+        self.iter_rfold(init, flatten(fold))\n     }\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n     fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let mut rem = n;\n-        loop {\n-            if let Some(ref mut back) = self.backiter {\n-                match back.advance_back_by(rem) {\n-                    ret @ Ok(_) => return ret,\n-                    Err(advanced) => rem -= advanced,\n-                }\n-            }\n-            match self.iter.next_back() {\n-                Some(iterable) => self.backiter = Some(iterable.into_iter()),\n-                _ => break,\n-            }\n-        }\n-\n-        self.backiter = None;\n-\n-        if let Some(ref mut front) = self.frontiter {\n-            match front.advance_back_by(rem) {\n-                ret @ Ok(_) => return ret,\n-                Err(advanced) => rem -= advanced,\n+        #[inline]\n+        #[rustc_inherit_overflow_checks]\n+        fn advance<U: DoubleEndedIterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n+            match iter.advance_back_by(n) {\n+                Ok(()) => ControlFlow::BREAK,\n+                Err(advanced) => ControlFlow::Continue(n - advanced),\n             }\n         }\n \n-        if rem > 0 {\n-            return Err(n - rem);\n+        match self.iter_try_rfold(n, advance) {\n+            ControlFlow::Continue(remaining) if remaining > 0 => Err(n - remaining),\n+            _ => Ok(()),\n         }\n-\n-        self.frontiter = None;\n-\n-        Ok(())\n     }\n }\n "}, {"sha": "690fd0c21974b55cd6f42449f4553a940404d52c", "filename": "library/core/tests/iter/adapters/flatten.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6c943bad02626dddc5e5135b23c77429b6e4a063/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c943bad02626dddc5e5135b23c77429b6e4a063/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs?ref=6c943bad02626dddc5e5135b23c77429b6e4a063", "patch": "@@ -168,3 +168,45 @@ fn test_trusted_len_flatten() {\n     assert_trusted_len(&iter);\n     assert_eq!(iter.size_hint(), (20, Some(20)));\n }\n+\n+#[test]\n+fn test_flatten_count() {\n+    let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n+\n+    assert_eq!(it.clone().count(), 40);\n+    it.advance_by(5).unwrap();\n+    assert_eq!(it.clone().count(), 35);\n+    it.advance_back_by(5).unwrap();\n+    assert_eq!(it.clone().count(), 30);\n+    it.advance_by(10).unwrap();\n+    assert_eq!(it.clone().count(), 20);\n+    it.advance_back_by(8).unwrap();\n+    assert_eq!(it.clone().count(), 12);\n+    it.advance_by(4).unwrap();\n+    assert_eq!(it.clone().count(), 8);\n+    it.advance_back_by(5).unwrap();\n+    assert_eq!(it.clone().count(), 3);\n+    it.advance_by(3).unwrap();\n+    assert_eq!(it.clone().count(), 0);\n+}\n+\n+#[test]\n+fn test_flatten_last() {\n+    let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n+\n+    assert_eq!(it.clone().last(), Some(39));\n+    it.advance_by(5).unwrap(); // 5..40\n+    assert_eq!(it.clone().last(), Some(39));\n+    it.advance_back_by(5).unwrap(); // 5..35\n+    assert_eq!(it.clone().last(), Some(34));\n+    it.advance_by(10).unwrap(); // 15..35\n+    assert_eq!(it.clone().last(), Some(34));\n+    it.advance_back_by(8).unwrap(); // 15..27\n+    assert_eq!(it.clone().last(), Some(26));\n+    it.advance_by(4).unwrap(); // 19..27\n+    assert_eq!(it.clone().last(), Some(26));\n+    it.advance_back_by(5).unwrap(); // 19..22\n+    assert_eq!(it.clone().last(), Some(21));\n+    it.advance_by(3).unwrap(); // 22..22\n+    assert_eq!(it.clone().last(), None);\n+}"}]}