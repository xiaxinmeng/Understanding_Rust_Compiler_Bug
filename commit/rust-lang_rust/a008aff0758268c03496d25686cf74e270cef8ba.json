{"sha": "a008aff0758268c03496d25686cf74e270cef8ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMDhhZmYwNzU4MjY4YzAzNDk2ZDI1Njg2Y2Y3NGUyNzBjZWY4YmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-05T18:03:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-05T18:03:21Z"}, "message": "Rollup merge of #67055 - lqd:const_qualif, r=oli-obk\n\nMake const-qualification look at more `const fn`s\n\nAs explained in a lot more detail in #67053 this makes const-qualification not ignore the unstable const fns in libcore.\n\nr? @oli-obk cc @ecstatic-morse\n\n(Still a bit unsure about the `cfg`s here, for bootstrapping, does that seem correct ?)\n\nFixes #67053.", "tree": {"sha": "2527eb2cfba3e52b99aa55f4f199e2a64ccfc67b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2527eb2cfba3e52b99aa55f4f199e2a64ccfc67b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a008aff0758268c03496d25686cf74e270cef8ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd6UZqCRBK7hj4Ov3rIwAAdHIIABdSjLApcbL8dVh3lYtJMRYj\nTv8lLDYHr8OuzOjxHDEfEHJhwt9QS9XnRa/DfrWJ2U7uhVYMXPSvjXXUIBa4d5BZ\n1/svZMH2YCNu6WaFZ/WXLTxU5ufgBvvKnZxUUIHzJxKHo8q4uv8gc1COK1VkIOCa\nUrK6TkN3iBXelBbEdKPRef/Ojgpux8K4VeCJk8/Ukt1fABgFgCRaqNr4wtYGUufW\nRo2iBiR/lMc4PWo+28SE/ZTtTHN9on/5DZ7YUCV9cNPxu+QHW+TbQGdM/AFIVi/Q\n4iu/OhhOYNYBIBeS3PPJzotH1vwQmyFA+d8rmZUXfeR+ioZSAzuBvU5wKc8b9Y0=\n=rLZ7\n-----END PGP SIGNATURE-----\n", "payload": "tree 2527eb2cfba3e52b99aa55f4f199e2a64ccfc67b\nparent 0e18ca14479df69fd02b68945c3155c50c3effa4\nparent 2d83b7608070d6ad250e8cd6d9d5a7d4be628dc4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575569001 +0100\ncommitter GitHub <noreply@github.com> 1575569001 +0100\n\nRollup merge of #67055 - lqd:const_qualif, r=oli-obk\n\nMake const-qualification look at more `const fn`s\n\nAs explained in a lot more detail in #67053 this makes const-qualification not ignore the unstable const fns in libcore.\n\nr? @oli-obk cc @ecstatic-morse\n\n(Still a bit unsure about the `cfg`s here, for bootstrapping, does that seem correct ?)\n\nFixes #67053.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a008aff0758268c03496d25686cf74e270cef8ba", "html_url": "https://github.com/rust-lang/rust/commit/a008aff0758268c03496d25686cf74e270cef8ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a008aff0758268c03496d25686cf74e270cef8ba/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e18ca14479df69fd02b68945c3155c50c3effa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e18ca14479df69fd02b68945c3155c50c3effa4", "html_url": "https://github.com/rust-lang/rust/commit/0e18ca14479df69fd02b68945c3155c50c3effa4"}, {"sha": "2d83b7608070d6ad250e8cd6d9d5a7d4be628dc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d83b7608070d6ad250e8cd6d9d5a7d4be628dc4", "html_url": "https://github.com/rust-lang/rust/commit/2d83b7608070d6ad250e8cd6d9d5a7d4be628dc4"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "188ea1a96311635c7ef5a3fd90daa960573bb6b7", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a008aff0758268c03496d25686cf74e270cef8ba/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a008aff0758268c03496d25686cf74e270cef8ba/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=a008aff0758268c03496d25686cf74e270cef8ba", "patch": "@@ -74,6 +74,8 @@\n #![feature(const_fn)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]\n+#![cfg_attr(not(bootstrap), feature(const_ptr_offset_from))]\n+#![cfg_attr(not(bootstrap), feature(const_type_name))]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "82ffafbedf858724571b055a50119eced8224008", "filename": "src/librustc_mir/transform/check_consts/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a008aff0758268c03496d25686cf74e270cef8ba/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a008aff0758268c03496d25686cf74e270cef8ba/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=a008aff0758268c03496d25686cf74e270cef8ba", "patch": "@@ -77,7 +77,12 @@ impl ConstKind {\n         let mode = match tcx.hir().body_owner_kind(hir_id) {\n             HirKind::Closure => return None,\n \n-            HirKind::Fn if tcx.is_const_fn(def_id) => ConstKind::ConstFn,\n+            // Note: this is deliberately checking for `is_const_fn_raw`, as the `is_const_fn`\n+            // checks take into account the `rustc_const_unstable` attribute combined with enabled\n+            // feature gates. Otherwise, const qualification would _not check_ whether this\n+            // function body follows the `const fn` rules, as an unstable `const fn` would\n+            // be considered \"not const\". More details are available in issue #67053.\n+            HirKind::Fn if tcx.is_const_fn_raw(def_id) => ConstKind::ConstFn,\n             HirKind::Fn => return None,\n \n             HirKind::Const => ConstKind::Const,"}, {"sha": "cad1516fc78d0bec0b883983ce5fe2215e8ce53e", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a008aff0758268c03496d25686cf74e270cef8ba/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a008aff0758268c03496d25686cf74e270cef8ba/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs?ref=a008aff0758268c03496d25686cf74e270cef8ba", "patch": "@@ -0,0 +1,29 @@\n+// This is a non-regression test for const-qualification of unstable items in libcore\n+// as explained in issue #67053.\n+// const-qualification could miss some `const fn`s if they were unstable and the feature\n+// gate was not enabled in libcore.\n+\n+#![stable(feature = \"core\", since = \"1.6.0\")]\n+#![feature(const_if_match)]\n+#![feature(rustc_const_unstable)]\n+#![feature(staged_api)]\n+\n+enum Opt<T> {\n+    Some(T),\n+    None,\n+}\n+\n+impl<T> Opt<T> {\n+    #[rustc_const_unstable(feature = \"foo\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n+    //~^ ERROR destructors cannot be evaluated at compile-time\n+    //~| ERROR destructors cannot be evaluated at compile-time\n+        match self {\n+            Opt::Some(t) => t,\n+            Opt::None => f(), //~ ERROR E0015\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a8455cefd01cf94a8d45caaae57d0c5b42dcf64e", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a008aff0758268c03496d25686cf74e270cef8ba/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a008aff0758268c03496d25686cf74e270cef8ba/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr?ref=a008aff0758268c03496d25686cf74e270cef8ba", "patch": "@@ -0,0 +1,22 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/unstable-const-fn-in-libcore.rs:24:26\n+   |\n+LL |             Opt::None => f(),\n+   |                          ^^^\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/unstable-const-fn-in-libcore.rs:19:53\n+   |\n+LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n+   |                                                     ^ constant functions cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/unstable-const-fn-in-libcore.rs:19:47\n+   |\n+LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n+   |                                               ^^^^ constant functions cannot evaluate destructors\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0015, E0493.\n+For more information about an error, try `rustc --explain E0015`."}]}