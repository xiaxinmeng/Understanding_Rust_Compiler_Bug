{"sha": "3851c0e22bbc6fe2508c6eff87d70da73ae4b1bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NTFjMGUyMmJiYzZmZTI1MDhjNmVmZjg3ZDcwZGE3M2FlNGIxYmM=", "commit": {"author": {"name": "Andrew Audibert", "email": "andrew@alluxio.com", "date": "2018-08-01T06:53:45Z"}, "committer": {"name": "Andrew Audibert", "email": "andrew@alluxio.com", "date": "2018-08-01T06:53:45Z"}, "message": "Address build warning", "tree": {"sha": "c52abda92107d9f13ad3a2ad15e4c455b19130f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c52abda92107d9f13ad3a2ad15e4c455b19130f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3851c0e22bbc6fe2508c6eff87d70da73ae4b1bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3851c0e22bbc6fe2508c6eff87d70da73ae4b1bc", "html_url": "https://github.com/rust-lang/rust/commit/3851c0e22bbc6fe2508c6eff87d70da73ae4b1bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3851c0e22bbc6fe2508c6eff87d70da73ae4b1bc/comments", "author": {"login": "aaudiber", "id": 3455177, "node_id": "MDQ6VXNlcjM0NTUxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/3455177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaudiber", "html_url": "https://github.com/aaudiber", "followers_url": "https://api.github.com/users/aaudiber/followers", "following_url": "https://api.github.com/users/aaudiber/following{/other_user}", "gists_url": "https://api.github.com/users/aaudiber/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaudiber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaudiber/subscriptions", "organizations_url": "https://api.github.com/users/aaudiber/orgs", "repos_url": "https://api.github.com/users/aaudiber/repos", "events_url": "https://api.github.com/users/aaudiber/events{/privacy}", "received_events_url": "https://api.github.com/users/aaudiber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aaudiber", "id": 3455177, "node_id": "MDQ6VXNlcjM0NTUxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/3455177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaudiber", "html_url": "https://github.com/aaudiber", "followers_url": "https://api.github.com/users/aaudiber/followers", "following_url": "https://api.github.com/users/aaudiber/following{/other_user}", "gists_url": "https://api.github.com/users/aaudiber/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaudiber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaudiber/subscriptions", "organizations_url": "https://api.github.com/users/aaudiber/orgs", "repos_url": "https://api.github.com/users/aaudiber/repos", "events_url": "https://api.github.com/users/aaudiber/events{/privacy}", "received_events_url": "https://api.github.com/users/aaudiber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6749b2d93ea6cea22c9042533d8423dd07087c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6749b2d93ea6cea22c9042533d8423dd07087c6c", "html_url": "https://github.com/rust-lang/rust/commit/6749b2d93ea6cea22c9042533d8423dd07087c6c"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "33c532e1729e3400f4639a072651c84943734b2b", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3851c0e22bbc6fe2508c6eff87d70da73ae4b1bc/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3851c0e22bbc6fe2508c6eff87d70da73ae4b1bc/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=3851c0e22bbc6fe2508c6eff87d70da73ae4b1bc", "patch": "@@ -1885,7 +1885,7 @@ fn lint_chars_last_cmp_with_unwrap<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, info: &\n }\n \n /// lint for length-1 `str`s for methods in `PATTERN_METHODS`\n-fn lint_single_char_pattern<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, arg: &'tcx hir::Expr) {\n+fn lint_single_char_pattern<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, _expr: &'tcx hir::Expr, arg: &'tcx hir::Expr) {\n     if let Some((Constant::Str(r), _)) = constant(cx, cx.tables, arg) {\n         if r.len() == 1 {\n             let c = r.chars().next().unwrap();"}]}