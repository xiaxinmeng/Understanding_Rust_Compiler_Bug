{"sha": "a24c8977eeef97a445336af597fd628de65524cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNGM4OTc3ZWVlZjk3YTQ0NTMzNmFmNTk3ZmQ2MjhkZTY1NTI0Y2I=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-06T10:05:37Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-20T08:49:43Z"}, "message": "int -> i32", "tree": {"sha": "0373ff2cd0968bfc7d3b56bb957c9ed5dc45ab7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0373ff2cd0968bfc7d3b56bb957c9ed5dc45ab7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a24c8977eeef97a445336af597fd628de65524cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a24c8977eeef97a445336af597fd628de65524cb", "html_url": "https://github.com/rust-lang/rust/commit/a24c8977eeef97a445336af597fd628de65524cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a24c8977eeef97a445336af597fd628de65524cb/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4840db8fcc11a2b3bfc352bc60dacd87232bd4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e", "html_url": "https://github.com/rust-lang/rust/commit/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e"}], "stats": {"total": 88, "additions": 45, "deletions": 43}, "files": [{"sha": "47555aca9f3fbc95aa4b9edbf95c634fa0fa71dd", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=a24c8977eeef97a445336af597fd628de65524cb", "patch": "@@ -29,10 +29,10 @@ crate use self::util::elaborate_predicates;\n \n pub use rustc_middle::traits::*;\n \n-/// An `Obligation` represents some trait reference (e.g., `int: Eq`) for\n+/// An `Obligation` represents some trait reference (e.g., `i32: Eq`) for\n /// which the \"impl_source\" must be found. The process of finding a \"impl_source\" is\n /// called \"resolving\" the `Obligation`. This process consists of\n-/// either identifying an `impl` (e.g., `impl Eq for int`) that\n+/// either identifying an `impl` (e.g., `impl Eq for i32`) that\n /// satisfies the obligation, or else finding a bound that is in\n /// scope. The eventual result is usually a `Selection` (defined below).\n #[derive(Clone, PartialEq, Eq, Hash)]"}, {"sha": "4ae7e417a8f673d017da6ca897d3cebe910a7eec", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=a24c8977eeef97a445336af597fd628de65524cb", "patch": "@@ -63,11 +63,11 @@ impl PredicateSet<'tcx> {\n     fn insert(&mut self, pred: ty::Predicate<'tcx>) -> bool {\n         // We have to be careful here because we want\n         //\n-        //    for<'a> Foo<&'a int>\n+        //    for<'a> Foo<&'a i32>\n         //\n         // and\n         //\n-        //    for<'b> Foo<&'b int>\n+        //    for<'b> Foo<&'b i32>\n         //\n         // to be considered equivalent. So normalize all late-bound\n         // regions before we throw things into the underlying set."}, {"sha": "f650240a41c63fa641cc0c3292f2aeb7ec45463f", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=a24c8977eeef97a445336af597fd628de65524cb", "patch": "@@ -393,23 +393,25 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n /// ```\n /// impl<T:Clone> Clone<T> for Option<T> { ... } // Impl_1\n /// impl<T:Clone> Clone<T> for Box<T> { ... }    // Impl_2\n-/// impl Clone for int { ... }             // Impl_3\n+/// impl Clone for i32 { ... }                   // Impl_3\n ///\n-/// fn foo<T:Clone>(concrete: Option<Box<int>>,\n-///                 param: T,\n-///                 mixed: Option<T>) {\n+/// fn foo<T: Clone>(concrete: Option<Box<i32>>, param: T, mixed: Option<T>) {\n+///     // Case A: Vtable points at a specific impl. Only possible when\n+///     // type is concretely known. If the impl itself has bounded\n+///     // type parameters, Vtable will carry resolutions for those as well:\n+///     concrete.clone(); // Vtable(Impl_1, [Vtable(Impl_2, [Vtable(Impl_3)])])\n ///\n-///    // Case A: ImplSource points at a specific impl. Only possible when\n-///    // type is concretely known. If the impl itself has bounded\n-///    // type parameters, ImplSource will carry resolutions for those as well:\n-///    concrete.clone(); // ImplSource(Impl_1, [ImplSource(Impl_2, [ImplSource(Impl_3)])])\n+///     // Case A: ImplSource points at a specific impl. Only possible when\n+///     // type is concretely known. If the impl itself has bounded\n+///     // type parameters, ImplSource will carry resolutions for those as well:\n+///     concrete.clone(); // ImplSource(Impl_1, [ImplSource(Impl_2, [ImplSource(Impl_3)])])\n ///\n-///    // Case B: ImplSource must be provided by caller. This applies when\n-///    // type is a type parameter.\n-///    param.clone();    // ImplSourceParam\n+///     // Case B: ImplSource must be provided by caller. This applies when\n+///     // type is a type parameter.\n+///     param.clone();    // ImplSourceParam\n ///\n-///    // Case C: A mix of cases A and B.\n-///    mixed.clone();    // ImplSource(Impl_1, [ImplSourceParam])\n+///     // Case C: A mix of cases A and B.\n+///     mixed.clone();    // ImplSource(Impl_1, [ImplSourceParam])\n /// }\n /// ```\n ///"}, {"sha": "3b4254a18ea61900ad3e6c4bdcc98f07b7e8684b", "filename": "src/librustc_middle/ty/subst.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsubst.rs?ref=a24c8977eeef97a445336af597fd628de65524cb", "patch": "@@ -599,12 +599,12 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n     ///\n     /// ```\n     /// type Func<A> = fn(A);\n-    /// type MetaFunc = for<'a> fn(Func<&'a int>)\n+    /// type MetaFunc = for<'a> fn(Func<&'a i32>)\n     /// ```\n     ///\n     /// The type `MetaFunc`, when fully expanded, will be\n     ///\n-    ///     for<'a> fn(fn(&'a int))\n+    ///     for<'a> fn(fn(&'a i32))\n     ///             ^~ ^~ ^~~\n     ///             |  |  |\n     ///             |  |  DebruijnIndex of 2\n@@ -613,26 +613,26 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n     /// Here the `'a` lifetime is bound in the outer function, but appears as an argument of the\n     /// inner one. Therefore, that appearance will have a DebruijnIndex of 2, because we must skip\n     /// over the inner binder (remember that we count De Bruijn indices from 1). However, in the\n-    /// definition of `MetaFunc`, the binder is not visible, so the type `&'a int` will have a\n+    /// definition of `MetaFunc`, the binder is not visible, so the type `&'a i32` will have a\n     /// De Bruijn index of 1. It's only during the substitution that we can see we must increase the\n     /// depth by 1 to account for the binder that we passed through.\n     ///\n     /// As a second example, consider this twist:\n     ///\n     /// ```\n     /// type FuncTuple<A> = (A,fn(A));\n-    /// type MetaFuncTuple = for<'a> fn(FuncTuple<&'a int>)\n+    /// type MetaFuncTuple = for<'a> fn(FuncTuple<&'a i32>)\n     /// ```\n     ///\n     /// Here the final type will be:\n     ///\n-    ///     for<'a> fn((&'a int, fn(&'a int)))\n+    ///     for<'a> fn((&'a i32, fn(&'a i32)))\n     ///                 ^~~         ^~~\n     ///                 |           |\n     ///          DebruijnIndex of 1 |\n     ///                      DebruijnIndex of 2\n     ///\n-    /// As indicated in the diagram, here the same type `&'a int` is substituted once, but in the\n+    /// As indicated in the diagram, here the same type `&'a i32` is substituted once, but in the\n     /// first case we do not increase the De Bruijn index and in the second case we do. The reason\n     /// is that only in the second case have we passed through a fn binder.\n     fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {"}, {"sha": "633d4fda8a46d9691711df2633ab97daeb730c63", "filename": "src/librustc_middle/ty/walk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fwalk.rs?ref=a24c8977eeef97a445336af597fd628de65524cb", "patch": "@@ -22,13 +22,13 @@ impl<'tcx> TypeWalker<'tcx> {\n     /// Skips the subtree corresponding to the last type\n     /// returned by `next()`.\n     ///\n-    /// Example: Imagine you are walking `Foo<Bar<int>, usize>`.\n+    /// Example: Imagine you are walking `Foo<Bar<i32>, usize>`.\n     ///\n     /// ```\n     /// let mut iter: TypeWalker = ...;\n     /// iter.next(); // yields Foo\n-    /// iter.next(); // yields Bar<int>\n-    /// iter.skip_current_subtree(); // skips int\n+    /// iter.next(); // yields Bar<i32>\n+    /// iter.skip_current_subtree(); // skips i32\n     /// iter.next(); // yields usize\n     /// ```\n     pub fn skip_current_subtree(&mut self) {"}, {"sha": "196405425473428ee199387a9abd4fdc0335fe18", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=a24c8977eeef97a445336af597fd628de65524cb", "patch": "@@ -361,7 +361,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 // handle normalization within binders because\n                 // otherwise we wind up a need to normalize when doing\n                 // trait matching (since you can have a trait\n-                // obligation like `for<'a> T::B : Fn(&'a int)`), but\n+                // obligation like `for<'a> T::B: Fn(&'a i32)`), but\n                 // we can't normalize with bound regions in scope. So\n                 // far now we just ignore binders but only normalize\n                 // if all bound regions are gone (and then we still"}, {"sha": "ca49ff5884f98a7080dd4b6cd7fbf12e19e26787", "filename": "src/librustc_trait_selection/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs?ref=a24c8977eeef97a445336af597fd628de65524cb", "patch": "@@ -145,7 +145,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 // handle normalization within binders because\n                 // otherwise we wind up a need to normalize when doing\n                 // trait matching (since you can have a trait\n-                // obligation like `for<'a> T::B : Fn(&'a int)`), but\n+                // obligation like `for<'a> T::B: Fn(&'a i32)`), but\n                 // we can't normalize with bound regions in scope. So\n                 // far now we just ignore binders but only normalize\n                 // if all bound regions are gone (and then we still"}, {"sha": "50c04e8fc345248ed04a7eecc44dda84bd7b0913", "filename": "src/librustc_trait_selection/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs?ref=a24c8977eeef97a445336af597fd628de65524cb", "patch": "@@ -553,14 +553,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ///\n     /// Here is an example. Imagine we have a closure expression\n     /// and we desugared it so that the type of the expression is\n-    /// `Closure`, and `Closure` expects an int as argument. Then it\n+    /// `Closure`, and `Closure` expects `i32` as argument. Then it\n     /// is \"as if\" the compiler generated this impl:\n     ///\n-    ///     impl Fn(int) for Closure { ... }\n+    ///     impl Fn(i32) for Closure { ... }\n     ///\n-    /// Now imagine our obligation is `Fn(usize) for Closure`. So far\n+    /// Now imagine our obligation is `Closure: Fn(usize)`. So far\n     /// we have matched the self type `Closure`. At this point we'll\n-    /// compare the `int` to `usize` and generate an error.\n+    /// compare the `i32` to `usize` and generate an error.\n     ///\n     /// Note that this checking occurs *after* the impl has selected,\n     /// because these output type parameters should not affect the"}, {"sha": "7dc8c2cf4cdc2a46328affd3a0e79304e3db9e8b", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=a24c8977eeef97a445336af597fd628de65524cb", "patch": "@@ -1762,7 +1762,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // The strategy is to:\n         //\n         // 1. Instantiate those regions to placeholder regions (e.g.,\n-        //    `for<'a> &'a int` becomes `&0 i32`.\n+        //    `for<'a> &'a i32` becomes `&0 i32`.\n         // 2. Produce something like `&'0 i32 : Copy`\n         // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`\n "}, {"sha": "33d57e25711733b5217da9b3c8031fe109f9471a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a24c8977eeef97a445336af597fd628de65524cb", "patch": "@@ -1394,13 +1394,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // That is, consider this case:\n             //\n             // ```\n-            // trait SubTrait: SuperTrait<int> { }\n+            // trait SubTrait: SuperTrait<i32> { }\n             // trait SuperTrait<A> { type T; }\n             //\n             // ... B: SubTrait<T = foo> ...\n             // ```\n             //\n-            // We want to produce `<B as SuperTrait<int>>::T == foo`.\n+            // We want to produce `<B as SuperTrait<i32>>::T == foo`.\n \n             // Find any late-bound regions declared in `ty` that are not\n             // declared in the trait-ref. These are not well-formed."}, {"sha": "efd23894d02d159b8fcc4d80b53afe3664f90643", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=a24c8977eeef97a445336af597fd628de65524cb", "patch": "@@ -1468,7 +1468,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ///\n     /// ```\n     /// trait Foo { ... }\n-    /// impl Foo for Vec<int> { ... }\n+    /// impl Foo for Vec<i32> { ... }\n     /// impl Foo for Vec<usize> { ... }\n     /// ```\n     ///"}, {"sha": "ea47ae68ce7d36c63220b15c2140602a7765cc14", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24c8977eeef97a445336af597fd628de65524cb/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=a24c8977eeef97a445336af597fd628de65524cb", "patch": "@@ -212,15 +212,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // errors in some cases, such as this one:\n         //\n         // ```\n-        // fn foo<'x>(x: &'x int) {\n+        // fn foo<'x>(x: &'x i32) {\n         //    let a = 1;\n         //    let mut z = x;\n         //    z = &a;\n         // }\n         // ```\n         //\n         // The reason we might get an error is that `z` might be\n-        // assigned a type like `&'x int`, and then we would have\n+        // assigned a type like `&'x i32`, and then we would have\n         // a problem when we try to assign `&a` to `z`, because\n         // the lifetime of `&a` (i.e., the enclosing block) is\n         // shorter than `'x`.\n@@ -229,11 +229,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // expected type here is whatever type the user wrote, not\n         // the initializer's type. In this case the user wrote\n         // nothing, so we are going to create a type variable `Z`.\n-        // Then we will assign the type of the initializer (`&'x\n-        // int`) as a subtype of `Z`: `&'x int <: Z`. And hence we\n-        // will instantiate `Z` as a type `&'0 int` where `'0` is\n-        // a fresh region variable, with the constraint that `'x :\n-        // '0`.  So basically we're all set.\n+        // Then we will assign the type of the initializer (`&'x i32`)\n+        // as a subtype of `Z`: `&'x i32 <: Z`. And hence we\n+        // will instantiate `Z` as a type `&'0 i32` where `'0` is\n+        // a fresh region variable, with the constraint that `'x : '0`.\n+        // So basically we're all set.\n         //\n         // Note that there are two tests to check that this remains true\n         // (`regions-reassign-{match,let}-bound-pointer.rs`)."}]}