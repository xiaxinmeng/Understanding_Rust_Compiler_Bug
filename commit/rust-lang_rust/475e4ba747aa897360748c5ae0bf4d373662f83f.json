{"sha": "475e4ba747aa897360748c5ae0bf4d373662f83f", "node_id": "C_kwDOAAsO6NoAKDQ3NWU0YmE3NDdhYTg5NzM2MDc0OGM1YWUwYmY0ZDM3MzY2MmY4M2Y", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-01T15:06:13Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-01T15:17:01Z"}, "message": "Simplify `ArrayChunks::{,r}fold` impls", "tree": {"sha": "5d8a4248ab02c39ae744892d1a560bad5ea0159f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d8a4248ab02c39ae744892d1a560bad5ea0159f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/475e4ba747aa897360748c5ae0bf4d373662f83f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/475e4ba747aa897360748c5ae0bf4d373662f83f", "html_url": "https://github.com/rust-lang/rust/commit/475e4ba747aa897360748c5ae0bf4d373662f83f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/475e4ba747aa897360748c5ae0bf4d373662f83f/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0292cff57e1c044cc5e85bd387a98cc5f035ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0292cff57e1c044cc5e85bd387a98cc5f035ee", "html_url": "https://github.com/rust-lang/rust/commit/4c0292cff57e1c044cc5e85bd387a98cc5f035ee"}], "stats": {"total": 50, "additions": 4, "deletions": 46}, "files": [{"sha": "b66e23c1e78ac38cb1d07bb37a8e77eca10efcb0", "filename": "library/core/src/iter/adapters/array_chunks.rs", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/475e4ba747aa897360748c5ae0bf4d373662f83f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/475e4ba747aa897360748c5ae0bf4d373662f83f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs?ref=475e4ba747aa897360748c5ae0bf4d373662f83f", "patch": "@@ -2,7 +2,7 @@ use crate::array;\n use crate::iter::{FusedIterator, Iterator};\n use crate::mem;\n use crate::mem::MaybeUninit;\n-use crate::ops::{ControlFlow, Try};\n+use crate::ops::{ControlFlow, NeverShortCircuit, Try};\n use crate::ptr;\n \n /// An iterator over `N` elements of the iterator at a time.\n@@ -104,30 +104,12 @@ where\n         }\n     }\n \n-    fn fold<B, F>(self, init: B, mut f: F) -> B\n+    fn fold<B, F>(mut self, init: B, mut f: F) -> B\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        let mut array = MaybeUninit::uninit_array();\n-        // SAFETY: `array` will still be valid if `guard` is dropped.\n-        let mut guard = unsafe { FrontGuard::new(&mut array) };\n-\n-        self.iter.fold(init, |mut acc, item| {\n-            // SAFETY: `init` starts at 0, increases by one each iteration and\n-            // is reset to 0 once it reaches N.\n-            unsafe { array.get_unchecked_mut(guard.init) }.write(item);\n-            guard.init += 1;\n-            if guard.init == N {\n-                guard.init = 0;\n-                let array = mem::replace(&mut array, MaybeUninit::uninit_array());\n-                // SAFETY: the condition above asserts that all elements are\n-                // initialized.\n-                let item = unsafe { MaybeUninit::array_assume_init(array) };\n-                acc = f(acc, item);\n-            }\n-            acc\n-        })\n+        self.try_fold(init, |acc, x| NeverShortCircuit(f(acc, x))).0\n     }\n }\n \n@@ -205,31 +187,7 @@ where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        // We are iterating from the back we need to first handle the remainder.\n-        if self.next_back_remainder().is_none() {\n-            return init;\n-        }\n-\n-        let mut array = MaybeUninit::uninit_array();\n-\n-        // SAFETY: `array` will still be valid if `guard` is dropped.\n-        let mut guard = unsafe { BackGuard::new(&mut array) };\n-\n-        self.iter.rfold(init, |mut acc, item| {\n-            guard.uninit -= 1;\n-            // SAFETY: `uninit` starts at N, decreases by one each iteration and\n-            // is reset to N once it reaches 0.\n-            unsafe { array.get_unchecked_mut(guard.uninit) }.write(item);\n-            if guard.uninit == 0 {\n-                guard.uninit = N;\n-                let array = mem::replace(&mut array, MaybeUninit::uninit_array());\n-                // SAFETY: the condition above asserts that all elements are\n-                // initialized.\n-                let item = unsafe { MaybeUninit::array_assume_init(array) };\n-                acc = f(acc, item);\n-            }\n-            acc\n-        })\n+        self.try_rfold(init, |acc, x| NeverShortCircuit(f(acc, x))).0\n     }\n }\n "}]}