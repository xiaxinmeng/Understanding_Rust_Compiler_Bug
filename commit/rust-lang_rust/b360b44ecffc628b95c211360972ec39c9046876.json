{"sha": "b360b44ecffc628b95c211360972ec39c9046876", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNjBiNDRlY2ZmYzYyOGI5NWMyMTEzNjA5NzJlYzM5YzkwNDY4NzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-11T22:02:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-11T22:02:20Z"}, "message": "Auto merge of #43083 - kennytm:fix-42434-custom-stdxxx-normalization, r=nikomatsakis\n\ncompilertest (UI test): Support custom normalization.\n\nCloses #42434.\n\nAdds this header for UI tests:\n\n```rust\n// normalize-stderr-32bit: \"fn() (32 bits)\" -> \"fn() ($PTR bits)\"\n```\n\nIt will normalize the `stderr` output on 32-bit platforms, by replacing all instances of `fn() (32 bits)` by `fn() ($PTR bits)`.\n\nExtends the UI tests in #42304 and #41968 to 32-bit targets.\n\nr? @nikomatsakis", "tree": {"sha": "4fe696e05827f3bd97f38bfaae5d310059e03ad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe696e05827f3bd97f38bfaae5d310059e03ad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b360b44ecffc628b95c211360972ec39c9046876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b360b44ecffc628b95c211360972ec39c9046876", "html_url": "https://github.com/rust-lang/rust/commit/b360b44ecffc628b95c211360972ec39c9046876", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b360b44ecffc628b95c211360972ec39c9046876/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9475ae477a4d42c564eab9621ffb6aa7c160a3dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9475ae477a4d42c564eab9621ffb6aa7c160a3dc", "html_url": "https://github.com/rust-lang/rust/commit/9475ae477a4d42c564eab9621ffb6aa7c160a3dc"}, {"sha": "34209b0eaaa41dd5630772c59e5d3f03624caed5", "url": "https://api.github.com/repos/rust-lang/rust/commits/34209b0eaaa41dd5630772c59e5d3f03624caed5", "html_url": "https://github.com/rust-lang/rust/commit/34209b0eaaa41dd5630772c59e5d3f03624caed5"}], "stats": {"total": 367, "additions": 219, "deletions": 148}, "files": [{"sha": "0380454b8278d6b3b187fc587785146738ce1374", "filename": "src/test/COMPILER_TESTS.md", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2FCOMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2FCOMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2FCOMPILER_TESTS.md?ref=b360b44ecffc628b95c211360972ec39c9046876", "patch": "@@ -37,7 +37,7 @@ The error levels that you can have are:\n Header commands specify something about the entire test file as a\n whole, instead of just a few lines inside the test.\n \n-* `ignore-X` where `X` is an architecture, OS or stage will ignore the test accordingly\n+* `ignore-X` where `X` is a target detail or stage will ignore the test accordingly (see below)\n * `ignore-pretty` will not compile the pretty-printed test (this is done to test the pretty-printer, but might not always work)\n * `ignore-test` always ignores the test\n * `ignore-lldb` and `ignore-gdb` will skip the debuginfo tests\n@@ -50,6 +50,14 @@ whole, instead of just a few lines inside the test.\n   feature is attempted without the proper `#![feature(X)]` tag.\n   Each unstable lang feature is required to have a gate test.\n \n+Some examples of `X` in `ignore-X`:\n+\n+* Architecture: `aarch64`, `arm`, `asmjs`, `mips`, `wasm32`, `x86_64`, `x86`, ...\n+* OS: `android`, `emscripten`, `freebsd`, `ios`, `linux`, `macos`, `windows`, ...\n+* Environment (fourth word of the target triple): `gnu`, `msvc`, `musl`.\n+* Pointer width: `32bit`, `64bit`.\n+* Stage: `stage0`, `stage1`, `stage2`.\n+\n ## Revisions\n \n Certain classes of tests support \"revisions\" (as of the time of this\n@@ -86,3 +94,66 @@ For example, the `ignore-test` header (and all \"ignore\" headers)\n currently only apply to the test as a whole, not to particular\n revisions. The only headers that are intended to really work when\n customized to a revision are error patterns and compiler flags.\n+\n+## Guide to the UI Tests\n+\n+The UI tests are intended to capture the compiler's complete output,\n+so that we can test all aspects of the presentation. They work by\n+compiling a file (e.g., `ui/hello_world/main.rs`), capturing the output,\n+and then applying some normalization (see below). This normalized\n+result is then compared against reference files named\n+`ui/hello_world/main.stderr` and `ui/hello_world/main.stdout`. If either of\n+those files doesn't exist, the output must be empty. If the test run\n+fails, we will print out the current output, but it is also saved in\n+`build/<target-triple>/test/ui/hello_world/main.stdout` (this path is\n+printed as part of the test failure mesage), so you can run `diff` and\n+so forth.\n+\n+### Editing and updating the reference files\n+\n+If you have changed the compiler's output intentionally, or you are\n+making a new test, you can use the script `ui/update-references.sh` to\n+update the references. When you run the test framework, it will report\n+various errors: in those errors is a command you can use to run the\n+`ui/update-references.sh` script, which will then copy over the files\n+from the build directory and use them as the new reference. You can\n+also just run `ui/update-all-references.sh`. In both cases, you can run\n+the script with `--help` to get a help message.\n+\n+### Normalization\n+\n+The normalization applied is aimed at eliminating output difference\n+between platforms, mainly about filenames:\n+\n+- the test directory is replaced with `$DIR`\n+- all backslashes (`\\`) are converted to forward slashes (`/`) (for Windows)\n+- all CR LF newlines are converted to LF\n+\n+Sometimes these built-in normalizations are not enough. In such cases, you\n+may provide custom normalization rules using the header commands, e.g.\n+\n+```\n+// normalize-stderr-32bit: \"fn() (32 bits)\" -> \"fn() ($PTR bits)\"\n+// normalize-stderr-64bit: \"fn() (64 bits)\" -> \"fn() ($PTR bits)\"\n+```\n+\n+This tells the test, on 32-bit platforms, whenever the compiler writes\n+`fn() (32 bits)` to stderr, it should be normalized to read `fn() ($PTR bits)`\n+instead. Similar for 64-bit.\n+\n+The corresponding reference file will use the normalized output to test both\n+32-bit and 64-bit platforms:\n+\n+```\n+...\n+   |\n+   = note: source type: fn() ($PTR bits)\n+   = note: target type: u16 (16 bits)\n+...\n+```\n+\n+Please see `ui/transmute/main.rs` and `.stderr` for a concrete usage example.\n+\n+Besides `normalize-stderr-32bit` and `-64bit`, one may use any target\n+information or stage supported by `ignore-X` here as well (e.g.\n+`normalize-stderr-windows`)."}, {"sha": "d989210dd71f2028eafae67969c24002601ecbbc", "filename": "src/test/run-pass/i128-ffi.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi128-ffi.rs?ref=b360b44ecffc628b95c211360972ec39c9046876", "patch": "@@ -13,12 +13,7 @@\n // should look like.\n \n // ignore-windows\n-\n-// Ignore 32 bit targets:\n-// ignore-x86\n-// ignore-arm\n-\n-// ignore-emscripten\n+// ignore-32bit\n \n #![feature(i128_type)]\n "}, {"sha": "dcdeabd80322f6016f2009ba23a0c4f745e4964e", "filename": "src/test/ui/README.md", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9475ae477a4d42c564eab9621ffb6aa7c160a3dc/src%2Ftest%2Fui%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/9475ae477a4d42c564eab9621ffb6aa7c160a3dc/src%2Ftest%2Fui%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FREADME.md?ref=9475ae477a4d42c564eab9621ffb6aa7c160a3dc", "patch": "@@ -1,31 +0,0 @@\n-# Guide to the UI Tests\n-\n-The UI tests are intended to capture the compiler's complete output,\n-so that we can test all aspects of the presentation. They work by\n-compiling a file (e.g., `hello_world/main.rs`), capturing the output,\n-and then applying some normalization (see below). This normalized\n-result is then compared against reference files named\n-`hello_world/main.stderr` and `hello_world/main.stdout`. If either of\n-those files doesn't exist, the output must be empty. If the test run\n-fails, we will print out the current output, but it is also saved in\n-`build/<target-triple>/test/ui/hello_world/main.stdout` (this path is\n-printed as part of the test failure mesage), so you can run `diff` and\n-so forth.\n-\n-# Editing and updating the reference files\n-\n-If you have changed the compiler's output intentionally, or you are\n-making a new test, you can use the script `update-references.sh` to\n-update the references. When you run the test framework, it will report\n-various errors: in those errors is a command you can use to run the\n-`update-references.sh` script, which will then copy over the files\n-from the build directory and use them as the new reference. You can\n-also just run `update-all-references.sh`. In both cases, you can run\n-the script with `--help` to get a help message.\n-\n-# Normalization\n-\n-The normalization applied is aimed at filenames:\n-\n-- the test directory is replaced with `$DIR`\n-- all backslashes (\\) are converted to forward slashes (/) (for windows)"}, {"sha": "582998a986d0016d4ba9d884dfdb80a18ccde05e", "filename": "src/test/ui/enum-size-variance.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Fenum-size-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Fenum-size-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-size-variance.rs?ref=b360b44ecffc628b95c211360972ec39c9046876", "patch": "@@ -9,10 +9,6 @@\n // except according to those terms.\n \n // run-pass\n-// ignore-x86\n-// ignore-arm\n-// ignore-emscripten\n-// ^ ignore 32-bit targets, as the error message is target-dependent. see PR #41968.\n \n #![warn(variant_size_differences)]\n #![allow(dead_code)]\n@@ -24,26 +20,26 @@ enum Enum1 { }\n \n enum Enum2 { A, B, C }\n \n-enum Enum3 { D(isize), E, F }\n+enum Enum3 { D(i64), E, F }\n \n-enum Enum4 { H(isize), I(isize), J }\n+enum Enum4 { H(i64), I(i64), J }\n \n enum Enum5 {\n-    L(isize, isize, isize, isize), //~ WARNING three times larger\n-    M(isize),\n+    L(i64, i64, i64, i64), //~ WARNING three times larger\n+    M(i64),\n     N\n }\n \n enum Enum6<T, U> {\n     O(T),\n     P(U),\n-    Q(isize)\n+    Q(i64)\n }\n \n #[allow(variant_size_differences)]\n enum Enum7 {\n-    R(isize, isize, isize, isize),\n-    S(isize),\n+    R(i64, i64, i64, i64),\n+    S(i64),\n     T\n }\n pub fn main() { }"}, {"sha": "a21243a49907fbab91eb9853122b7138f72ce003", "filename": "src/test/ui/enum-size-variance.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Fenum-size-variance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Fenum-size-variance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-size-variance.stderr?ref=b360b44ecffc628b95c211360972ec39c9046876", "patch": "@@ -1,12 +1,12 @@\n warning: enum variant is more than three times larger (32 bytes) than the next largest\n-  --> $DIR/enum-size-variance.rs:32:5\n+  --> $DIR/enum-size-variance.rs:28:5\n    |\n-32 |     L(isize, isize, isize, isize), //~ WARNING three times larger\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+28 |     L(i64, i64, i64, i64), //~ WARNING three times larger\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/enum-size-variance.rs:17:9\n+  --> $DIR/enum-size-variance.rs:13:9\n    |\n-17 | #![warn(variant_size_differences)]\n+13 | #![warn(variant_size_differences)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "ab448de656e67334de347128bf874e8eec51a0c4", "filename": "src/test/ui/transmute/main.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs?ref=b360b44ecffc628b95c211360972ec39c9046876", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-x86\n-// ignore-arm\n-// ignore-emscripten\n-// ignore 32-bit platforms (test output is different)\n+// normalize-stderr-32bit: \"&str (64 bits)\" -> \"&str ($STR bits)\"\n+// normalize-stderr-64bit: \"&str (128 bits)\" -> \"&str ($STR bits)\"\n+\n+\n \n #![feature(untagged_unions)]\n use std::mem::transmute;"}, {"sha": "b7e34d3e0bc467e08f686541b3d904b2560afb67", "filename": "src/test/ui/transmute/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr?ref=b360b44ecffc628b95c211360972ec39c9046876", "patch": "@@ -22,7 +22,7 @@ error[E0512]: transmute called with types of different sizes\n 34 |     let x: u8 = transmute(\"test\"); //~ ERROR transmute called with types of different sizes\n    |                 ^^^^^^^^^\n    |\n-   = note: source type: &str (128 bits)\n+   = note: source type: &str ($STR bits)\n    = note: target type: u8 (8 bits)\n \n error[E0512]: transmute called with types of different sizes"}, {"sha": "d60c97f1d59a8c4a1013d4af456cc8879bc78b94", "filename": "src/test/ui/transmute/transmute-from-fn-item-types-error.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.rs?ref=b360b44ecffc628b95c211360972ec39c9046876", "patch": "@@ -8,14 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-x86\n-// ignore-arm\n-// ignore-emscripten\n-// ignore 32-bit platforms (test output is different)\n-\n use std::mem;\n \n-unsafe fn foo() -> (i32, *const (), Option<fn()>) {\n+unsafe fn foo() -> (i8, *const (), Option<fn()>) {\n     let i = mem::transmute(bar);\n     //~^ ERROR is zero-sized and can't be transmuted\n     //~^^ NOTE cast with `as` to a pointer instead\n@@ -46,7 +41,7 @@ unsafe fn bar() {\n     //~^^ NOTE cast with `as` to a pointer instead\n \n     // No error if a coercion would otherwise occur.\n-    mem::transmute::<fn(), u32>(main);\n+    mem::transmute::<fn(), usize>(main);\n }\n \n unsafe fn baz() {\n@@ -63,7 +58,7 @@ unsafe fn baz() {\n     //~^^ NOTE cast with `as` to a pointer instead\n \n     // No error if a coercion would otherwise occur.\n-    mem::transmute::<Option<fn()>, u32>(Some(main));\n+    mem::transmute::<Option<fn()>, usize>(Some(main));\n }\n \n fn main() {"}, {"sha": "197daf1b79596a1baa588fdd05dd21cc5b539a55", "filename": "src/test/ui/transmute/transmute-from-fn-item-types-error.stderr", "status": "modified", "additions": 23, "deletions": 41, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr?ref=b360b44ecffc628b95c211360972ec39c9046876", "patch": "@@ -1,108 +1,90 @@\n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-from-fn-item-types-error.rs:19:13\n+  --> $DIR/transmute-from-fn-item-types-error.rs:14:13\n    |\n-19 |     let i = mem::transmute(bar);\n+14 |     let i = mem::transmute(bar);\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: source type: unsafe fn() {bar} (0 bits)\n-   = note: target type: i32 (32 bits)\n+   = note: target type: i8 (8 bits)\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:23:13\n+  --> $DIR/transmute-from-fn-item-types-error.rs:18:13\n    |\n-23 |     let p = mem::transmute(foo);\n+18 |     let p = mem::transmute(foo);\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: source type: unsafe fn() -> (i32, *const (), std::option::Option<fn()>) {foo}\n+   = note: source type: unsafe fn() -> (i8, *const (), std::option::Option<fn()>) {foo}\n    = note: target type: *const ()\n    = help: cast with `as` to a pointer instead\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:27:14\n+  --> $DIR/transmute-from-fn-item-types-error.rs:22:14\n    |\n-27 |     let of = mem::transmute(main);\n+22 |     let of = mem::transmute(main);\n    |              ^^^^^^^^^^^^^^\n    |\n    = note: source type: fn() {main}\n    = note: target type: std::option::Option<fn()>\n    = help: cast with `as` to a pointer instead\n \n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-from-fn-item-types-error.rs:36:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:31:5\n    |\n-36 |     mem::transmute::<_, u8>(main);\n+31 |     mem::transmute::<_, u8>(main);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: fn() {main} (0 bits)\n    = note: target type: u8 (8 bits)\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:40:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:35:5\n    |\n-40 |     mem::transmute::<_, *mut ()>(foo);\n+35 |     mem::transmute::<_, *mut ()>(foo);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: unsafe fn() -> (i32, *const (), std::option::Option<fn()>) {foo}\n+   = note: source type: unsafe fn() -> (i8, *const (), std::option::Option<fn()>) {foo}\n    = note: target type: *mut ()\n    = help: cast with `as` to a pointer instead\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:44:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:39:5\n    |\n-44 |     mem::transmute::<_, fn()>(bar);\n+39 |     mem::transmute::<_, fn()>(bar);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: unsafe fn() {bar}\n    = note: target type: fn()\n    = help: cast with `as` to a pointer instead\n \n-error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-from-fn-item-types-error.rs:49:5\n-   |\n-49 |     mem::transmute::<fn(), u32>(main);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: source type: fn() (64 bits)\n-   = note: target type: u32 (32 bits)\n-\n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:53:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:48:5\n    |\n-53 |     mem::transmute::<_, *mut ()>(Some(foo));\n+48 |     mem::transmute::<_, *mut ()>(Some(foo));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: unsafe fn() -> (i32, *const (), std::option::Option<fn()>) {foo}\n+   = note: source type: unsafe fn() -> (i8, *const (), std::option::Option<fn()>) {foo}\n    = note: target type: *mut ()\n    = help: cast with `as` to a pointer instead\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:57:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:52:5\n    |\n-57 |     mem::transmute::<_, fn()>(Some(bar));\n+52 |     mem::transmute::<_, fn()>(Some(bar));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: unsafe fn() {bar}\n    = note: target type: fn()\n    = help: cast with `as` to a pointer instead\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:61:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:56:5\n    |\n-61 |     mem::transmute::<_, Option<fn()>>(Some(baz));\n+56 |     mem::transmute::<_, Option<fn()>>(Some(baz));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: unsafe fn() {baz}\n    = note: target type: std::option::Option<fn()>\n    = help: cast with `as` to a pointer instead\n \n-error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-from-fn-item-types-error.rs:66:5\n-   |\n-66 |     mem::transmute::<Option<fn()>, u32>(Some(main));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: source type: std::option::Option<fn()> (64 bits)\n-   = note: target type: u32 (32 bits)\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "117fc2cc5df2496931a5a7ab742958baaedde312", "filename": "src/test/ui/transmute/transmute-type-parameters.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.rs?ref=b360b44ecffc628b95c211360972ec39c9046876", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-x86\n-// ignore-arm\n-// ignore-emscripten\n-// ignore 32-bit platforms (test output is different)\n+\n+\n+\n+\n \n // Tests that `transmute` cannot be called on type parameters.\n "}, {"sha": "bb9bf57d55e2ff558b90e647321ec4e45b87e3ef", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 80, "deletions": 31, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=b360b44ecffc628b95c211360972ec39c9046876", "patch": "@@ -40,15 +40,8 @@ impl EarlyProps {\n                     None,\n                     &mut |ln| {\n             props.ignore =\n-                props.ignore || config.parse_name_directive(ln, \"ignore-test\") ||\n-                config.parse_name_directive(ln, &ignore_target(config)) ||\n-                config.parse_name_directive(ln, &ignore_architecture(config)) ||\n-                config.parse_name_directive(ln, &ignore_stage(config)) ||\n-                config.parse_name_directive(ln, &ignore_env(config)) ||\n-                (config.mode == common::Pretty &&\n-                 config.parse_name_directive(ln, \"ignore-pretty\")) ||\n-                (config.target != config.host &&\n-                 config.parse_name_directive(ln, \"ignore-cross-compile\")) ||\n+                props.ignore ||\n+                config.parse_cfg_name_directive(ln, \"ignore\") ||\n                 ignore_gdb(config, ln) ||\n                 ignore_lldb(config, ln) ||\n                 ignore_llvm(config, ln);\n@@ -62,28 +55,11 @@ impl EarlyProps {\n \n         return props;\n \n-        fn ignore_target(config: &Config) -> String {\n-            format!(\"ignore-{}\", util::get_os(&config.target))\n-        }\n-        fn ignore_architecture(config: &Config) -> String {\n-            format!(\"ignore-{}\", util::get_arch(&config.target))\n-        }\n-        fn ignore_stage(config: &Config) -> String {\n-            format!(\"ignore-{}\", config.stage_id.split('-').next().unwrap())\n-        }\n-        fn ignore_env(config: &Config) -> String {\n-            format!(\"ignore-{}\",\n-                    util::get_env(&config.target).unwrap_or(\"<unknown>\"))\n-        }\n         fn ignore_gdb(config: &Config, line: &str) -> bool {\n             if config.mode != common::DebugInfoGdb {\n                 return false;\n             }\n \n-            if config.parse_name_directive(line, \"ignore-gdb\") {\n-                return true;\n-            }\n-\n             if let Some(actual_version) = config.gdb_version {\n                 if line.starts_with(\"min-gdb-version\") {\n                     let (start_ver, end_ver) = extract_gdb_version_range(line);\n@@ -144,10 +120,6 @@ impl EarlyProps {\n                 return false;\n             }\n \n-            if config.parse_name_directive(line, \"ignore-lldb\") {\n-                return true;\n-            }\n-\n             if let Some(ref actual_version) = config.lldb_version {\n                 if line.starts_with(\"min-lldb-version\") {\n                     let min_version = line.trim_right()\n@@ -239,6 +211,9 @@ pub struct TestProps {\n     // The test must be compiled and run successfully. Only used in UI tests for\n     // now.\n     pub run_pass: bool,\n+    // customized normalization rules\n+    pub normalize_stdout: Vec<(String, String)>,\n+    pub normalize_stderr: Vec<(String, String)>,\n }\n \n impl TestProps {\n@@ -265,6 +240,8 @@ impl TestProps {\n             must_compile_successfully: false,\n             check_test_line_numbers_match: false,\n             run_pass: false,\n+            normalize_stdout: vec![],\n+            normalize_stderr: vec![],\n         }\n     }\n \n@@ -379,6 +356,13 @@ impl TestProps {\n             if !self.run_pass {\n                 self.run_pass = config.parse_run_pass(ln);\n             }\n+\n+            if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stdout\") {\n+                self.normalize_stdout.push(rule);\n+            }\n+            if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stderr\") {\n+                self.normalize_stderr.push(rule);\n+            }\n         });\n \n         for key in &[\"RUST_TEST_NOCAPTURE\", \"RUST_TEST_THREADS\"] {\n@@ -427,7 +411,6 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut FnMut(&str)) {\n }\n \n impl Config {\n-\n     fn parse_error_pattern(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"error-pattern\")\n     }\n@@ -525,6 +508,46 @@ impl Config {\n         }\n     }\n \n+    fn parse_custom_normalization(&self, mut line: &str, prefix: &str) -> Option<(String, String)> {\n+        if self.parse_cfg_name_directive(line, prefix) {\n+            let from = match parse_normalization_string(&mut line) {\n+                Some(s) => s,\n+                None => return None,\n+            };\n+            let to = match parse_normalization_string(&mut line) {\n+                Some(s) => s,\n+                None => return None,\n+            };\n+            Some((from, to))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Parses a name-value directive which contains config-specific information, e.g. `ignore-x86`\n+    /// or `normalize-stderr-32bit`. Returns `true` if the line matches it.\n+    fn parse_cfg_name_directive(&self, line: &str, prefix: &str) -> bool {\n+        if line.starts_with(prefix) && line.as_bytes().get(prefix.len()) == Some(&b'-') {\n+            let name = line[prefix.len()+1 ..].split(&[':', ' '][..]).next().unwrap();\n+\n+            name == \"test\" ||\n+                name == util::get_os(&self.target) ||               // target\n+                name == util::get_arch(&self.target) ||             // architecture\n+                name == util::get_pointer_width(&self.target) ||    // pointer width\n+                name == self.stage_id.split('-').next().unwrap() || // stage\n+                Some(name) == util::get_env(&self.target) ||        // env\n+                match self.mode {\n+                    common::DebugInfoGdb => name == \"gdb\",\n+                    common::DebugInfoLldb => name == \"lldb\",\n+                    common::Pretty => name == \"pretty\",\n+                    _ => false,\n+                } ||\n+                (self.target != self.host && name == \"cross-compile\")\n+        } else {\n+            false\n+        }\n+    }\n+\n     fn parse_name_directive(&self, line: &str, directive: &str) -> bool {\n         // Ensure the directive is a whole word. Do not match \"ignore-x86\" when\n         // the line says \"ignore-x86_64\".\n@@ -572,3 +595,29 @@ fn expand_variables(mut value: String, config: &Config) -> String {\n \n     value\n }\n+\n+/// Finds the next quoted string `\"...\"` in `line`, and extract the content from it. Move the `line`\n+/// variable after the end of the quoted string.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// let mut s = \"normalize-stderr-32bit: \\\"something (32 bits)\\\" -> \\\"something ($WORD bits)\\\".\";\n+/// let first = parse_normalization_string(&mut s);\n+/// assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n+/// assert_eq!(s, \" -> \\\"something ($WORD bits)\\\".\");\n+/// ```\n+fn parse_normalization_string(line: &mut &str) -> Option<String> {\n+    // FIXME support escapes in strings.\n+    let begin = match line.find('\"') {\n+        Some(i) => i + 1,\n+        None => return None,\n+    };\n+    let end = match line[begin..].find('\"') {\n+        Some(i) => i + begin,\n+        None => return None,\n+    };\n+    let result = line[begin..end].to_owned();\n+    *line = &line[end+1..];\n+    Some(result)\n+}"}, {"sha": "45a733d411ab930abb41ece5ddb792e28fc650c7", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b360b44ecffc628b95c211360972ec39c9046876", "patch": "@@ -2228,8 +2228,10 @@ actual:\\n\\\n         let expected_stdout_path = self.expected_output_path(\"stdout\");\n         let expected_stdout = self.load_expected_output(&expected_stdout_path);\n \n-        let normalized_stdout = self.normalize_output(&proc_res.stdout);\n-        let normalized_stderr = self.normalize_output(&proc_res.stderr);\n+        let normalized_stdout =\n+            self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout);\n+        let normalized_stderr =\n+            self.normalize_output(&proc_res.stderr, &self.props.normalize_stderr);\n \n         let mut errors = 0;\n         errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n@@ -2375,13 +2377,17 @@ actual:\\n\\\n         mir_dump_dir\n     }\n \n-    fn normalize_output(&self, output: &str) -> String {\n+    fn normalize_output(&self, output: &str, custom_rules: &[(String, String)]) -> String {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n         let parent_dir_str = parent_dir.display().to_string();\n-        output.replace(&parent_dir_str, \"$DIR\")\n+        let mut normalized = output.replace(&parent_dir_str, \"$DIR\")\n               .replace(\"\\\\\", \"/\") // normalize for paths on windows\n               .replace(\"\\r\\n\", \"\\n\") // normalize for linebreaks on windows\n-              .replace(\"\\t\", \"\\\\t\") // makes tabs visible\n+              .replace(\"\\t\", \"\\\\t\"); // makes tabs visible\n+        for rule in custom_rules {\n+            normalized = normalized.replace(&rule.0, &rule.1);\n+        }\n+        normalized\n     }\n \n     fn expected_output_path(&self, kind: &str) -> PathBuf {"}, {"sha": "85fa38bbd3be760125901c92761a22007f28ae6a", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b360b44ecffc628b95c211360972ec39c9046876/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=b360b44ecffc628b95c211360972ec39c9046876", "patch": "@@ -72,6 +72,14 @@ pub fn get_env(triple: &str) -> Option<&str> {\n     triple.split('-').nth(3)\n }\n \n+pub fn get_pointer_width(triple: &str) -> &'static str {\n+    if triple.contains(\"64\") || triple.starts_with(\"s390x\") {\n+        \"64bit\"\n+    } else {\n+        \"32bit\"\n+    }\n+}\n+\n pub fn make_new_path(path: &str) -> String {\n     assert!(cfg!(windows));\n     // Windows just uses PATH as the library search path, so we have to"}]}