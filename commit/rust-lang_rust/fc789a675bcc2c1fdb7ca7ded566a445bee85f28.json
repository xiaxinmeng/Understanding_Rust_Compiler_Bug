{"sha": "fc789a675bcc2c1fdb7ca7ded566a445bee85f28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNzg5YTY3NWJjYzJjMWZkYjdjYTdkZWQ1NjZhNDQ1YmVlODVmMjg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-04T04:06:42Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-04T04:06:42Z"}, "message": "Merge pull request #513 from mcarton/entries\n\nImplement  #433", "tree": {"sha": "e1f2ba99d13c44e558ed7eefc697a55c2529fc53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1f2ba99d13c44e558ed7eefc697a55c2529fc53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc789a675bcc2c1fdb7ca7ded566a445bee85f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc789a675bcc2c1fdb7ca7ded566a445bee85f28", "html_url": "https://github.com/rust-lang/rust/commit/fc789a675bcc2c1fdb7ca7ded566a445bee85f28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4484448cd1b879b361d0633d8a4188f46519e8c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4484448cd1b879b361d0633d8a4188f46519e8c1", "html_url": "https://github.com/rust-lang/rust/commit/4484448cd1b879b361d0633d8a4188f46519e8c1"}, {"sha": "9945bd82a8273f9c5506e9c26d51b312188d620f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9945bd82a8273f9c5506e9c26d51b312188d620f", "html_url": "https://github.com/rust-lang/rust/commit/9945bd82a8273f9c5506e9c26d51b312188d620f"}], "stats": {"total": 313, "additions": 230, "deletions": 83}, "files": [{"sha": "f1c288886364ce178c38a82cf1a390ef74d473a3", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=fc789a675bcc2c1fdb7ca7ded566a445bee85f28", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 90 lints included in this crate:\n+There are 91 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -31,6 +31,7 @@ name\n [explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)                       | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n [filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                     | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n [float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                         | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n+[hashmap_entry](https://github.com/Manishearth/rust-clippy/wiki#hashmap_entry)                                 | warn    | use of `contains_key` followed by `insert` on a `HashMap`\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                   | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n [inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                 | warn    | `#[inline(always)]` is a bad idea in most cases"}, {"sha": "3d2f32e6c7fbbcee3a38d7dc71a214af03b8cd6c", "filename": "src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 70, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/src%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/src%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feq_op.rs?ref=fc789a675bcc2c1fdb7ca7ded566a445bee85f28", "patch": "@@ -1,10 +1,8 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n use rustc_front::util as ast_util;\n-use syntax::ptr::P;\n \n-use consts::constant;\n-use utils::span_lint;\n+use utils::{is_exp_equal, span_lint};\n \n /// **What it does:** This lint checks for equal operands to comparisons and bitwise binary operators (`&`, `|` and `^`). It is `Warn` by default.\n ///\n@@ -40,57 +38,6 @@ impl LateLintPass for EqOp {\n     }\n }\n \n-pub fn is_exp_equal(cx: &LateContext, left : &Expr, right : &Expr) -> bool {\n-    if let (Some(l), Some(r)) = (constant(cx, left), constant(cx, right)) {\n-        if l == r {\n-            return true;\n-        }\n-    }\n-    match (&left.node, &right.node) {\n-        (&ExprField(ref lfexp, ref lfident),\n-                &ExprField(ref rfexp, ref rfident)) =>\n-            lfident.node == rfident.node && is_exp_equal(cx, lfexp, rfexp),\n-        (&ExprLit(ref l), &ExprLit(ref r)) => l.node == r.node,\n-        (&ExprPath(ref lqself, ref lsubpath),\n-                &ExprPath(ref rqself, ref rsubpath)) =>\n-            both(lqself, rqself, is_qself_equal) &&\n-                is_path_equal(lsubpath, rsubpath),\n-        (&ExprTup(ref ltup), &ExprTup(ref rtup)) =>\n-            is_exps_equal(cx, ltup, rtup),\n-        (&ExprVec(ref l), &ExprVec(ref r)) => is_exps_equal(cx, l, r),\n-        (&ExprCast(ref lx, ref lt), &ExprCast(ref rx, ref rt)) =>\n-            is_exp_equal(cx, lx, rx) && is_cast_ty_equal(lt, rt),\n-        _ => false\n-    }\n-}\n-\n-fn is_exps_equal(cx: &LateContext, left : &[P<Expr>], right : &[P<Expr>]) -> bool {\n-    over(left, right, |l, r| is_exp_equal(cx, l, r))\n-}\n-\n-fn is_path_equal(left : &Path, right : &Path) -> bool {\n-    // The == of idents doesn't work with different contexts,\n-    // we have to be explicit about hygiene\n-    left.global == right.global && over(&left.segments, &right.segments,\n-        |l, r| l.identifier.name == r.identifier.name\n-               && l.parameters == r.parameters)\n-}\n-\n-fn is_qself_equal(left : &QSelf, right : &QSelf) -> bool {\n-    left.ty.node == right.ty.node && left.position == right.position\n-}\n-\n-fn over<X, F>(left: &[X], right: &[X], mut eq_fn: F) -> bool\n-        where F: FnMut(&X, &X) -> bool {\n-    left.len() == right.len() && left.iter().zip(right).all(|(x, y)|\n-        eq_fn(x, y))\n-}\n-\n-fn both<X, F>(l: &Option<X>, r: &Option<X>, mut eq_fn : F) -> bool\n-        where F: FnMut(&X, &X) -> bool {\n-    l.as_ref().map_or_else(|| r.is_none(), |x| r.as_ref().map_or(false,\n-        |y| eq_fn(x, y)))\n-}\n \n fn is_cmp_or_bit(op : &BinOp) -> bool {\n     match op.node {\n@@ -99,19 +46,3 @@ fn is_cmp_or_bit(op : &BinOp) -> bool {\n         _ => false\n     }\n }\n-\n-fn is_cast_ty_equal(left: &Ty, right: &Ty) -> bool {\n-    match (&left.node, &right.node) {\n-        (&TyVec(ref lvec), &TyVec(ref rvec)) => is_cast_ty_equal(lvec, rvec),\n-        (&TyPtr(ref lmut), &TyPtr(ref rmut)) =>\n-            lmut.mutbl == rmut.mutbl &&\n-            is_cast_ty_equal(&*lmut.ty, &*rmut.ty),\n-        (&TyRptr(_, ref lrmut), &TyRptr(_, ref rrmut)) =>\n-            lrmut.mutbl == rrmut.mutbl &&\n-            is_cast_ty_equal(&*lrmut.ty, &*rrmut.ty),\n-        (&TyPath(ref lq, ref lpath), &TyPath(ref rq, ref rpath)) =>\n-            both(lq, rq, is_qself_equal) && is_path_equal(lpath, rpath),\n-        (&TyInfer, &TyInfer) => true,\n-        _ => false\n-    }\n-}"}, {"sha": "095a00e3777bb702a3de99701c7b903594587280", "filename": "src/hashmap.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/src%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/src%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhashmap.rs?ref=fc789a675bcc2c1fdb7ca7ded566a445bee85f28", "patch": "@@ -0,0 +1,102 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use syntax::codemap::Span;\n+use utils::{get_item_name, is_exp_equal, match_type, snippet, span_help_and_lint, walk_ptrs_ty};\n+use utils::HASHMAP_PATH;\n+\n+/// **What it does:** This lint checks for uses of `contains_key` + `insert` on `HashMap`.\n+///\n+/// **Why is this bad?** Using `HashMap::entry` is more efficient.\n+///\n+/// **Known problems:** Some false negatives, eg.:\n+/// ```\n+/// let k = &key;\n+/// if !m.contains_key(k) { m.insert(k.clone(), v); }\n+/// ```\n+///\n+/// **Example:**\n+/// ```rust\n+/// if !m.contains_key(&k) { m.insert(k, v) }\n+/// ```\n+/// can be rewritten as:\n+/// ```rust\n+/// m.entry(k).or_insert(v);\n+/// ```\n+declare_lint! {\n+    pub HASHMAP_ENTRY,\n+    Warn,\n+    \"use of `contains_key` followed by `insert` on a `HashMap`\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct HashMapLint;\n+\n+impl LintPass for HashMapLint {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(HASHMAP_ENTRY)\n+    }\n+}\n+\n+impl LateLintPass for HashMapLint {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if_let_chain! {\n+            [\n+                let ExprIf(ref check, ref then, _) = expr.node,\n+                let ExprUnary(UnOp::UnNot, ref check) = check.node,\n+                let ExprMethodCall(ref name, _, ref params) = check.node,\n+                params.len() >= 2,\n+                name.node.as_str() == \"contains_key\"\n+            ], {\n+                let key = match params[1].node {\n+                    ExprAddrOf(_, ref key) => key,\n+                    _ => return\n+                };\n+\n+                let map = &params[0];\n+                let obj_ty = walk_ptrs_ty(cx.tcx.expr_ty(map));\n+\n+                if match_type(cx, obj_ty, &HASHMAP_PATH) {\n+                    let sole_expr = if then.expr.is_some() { 1 } else { 0 } + then.stmts.len() == 1;\n+\n+                    if let Some(ref then) = then.expr {\n+                        check_for_insert(cx, expr.span, map, key, then, sole_expr);\n+                    }\n+\n+                    for stmt in &then.stmts {\n+                        if let StmtSemi(ref stmt, _) = stmt.node {\n+                            check_for_insert(cx, expr.span, map, key, stmt, sole_expr);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_for_insert(cx: &LateContext, span: Span, map: &Expr, key: &Expr, expr: &Expr, sole_expr: bool) {\n+    if_let_chain! {\n+        [\n+            let ExprMethodCall(ref name, _, ref params) = expr.node,\n+            params.len() == 3,\n+            name.node.as_str() == \"insert\",\n+            get_item_name(cx, map) == get_item_name(cx, &*params[0]),\n+            is_exp_equal(cx, key, &params[1])\n+        ], {\n+            if sole_expr {\n+                span_help_and_lint(cx, HASHMAP_ENTRY, span,\n+                                   \"usage of `contains_key` followed by `insert` on `HashMap`\",\n+                                   &format!(\"Consider using `{}.entry({}).or_insert({})`\",\n+                                            snippet(cx, map.span, \"..\"),\n+                                            snippet(cx, params[1].span, \"..\"),\n+                                            snippet(cx, params[2].span, \"..\"))); \n+            }\n+            else {\n+                span_help_and_lint(cx, HASHMAP_ENTRY, span,\n+                                   \"usage of `contains_key` followed by `insert` on `HashMap`\",\n+                                   &format!(\"Consider using `{}.entry({})`\",\n+                                            snippet(cx, map.span, \"..\"),\n+                                            snippet(cx, params[1].span, \"..\")));\n+            }\n+        }\n+    }\n+}"}, {"sha": "76c04d53a0b0f4d4f2e6809b6cb8840dd235d351", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=fc789a675bcc2c1fdb7ca7ded566a445bee85f28", "patch": "@@ -65,6 +65,7 @@ pub mod temporary_assignment;\n pub mod transmute;\n pub mod cyclomatic_complexity;\n pub mod escape;\n+pub mod hashmap;\n pub mod misc_early;\n pub mod array_indexing;\n pub mod panic;\n@@ -104,6 +105,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box types::UnitCmp);\n     reg.register_late_lint_pass(box loops::LoopsPass);\n     reg.register_late_lint_pass(box lifetimes::LifetimePass);\n+    reg.register_late_lint_pass(box hashmap::HashMapLint);\n     reg.register_late_lint_pass(box ranges::StepByZero);\n     reg.register_late_lint_pass(box types::CastPass);\n     reg.register_late_lint_pass(box types::TypeComplexityPass);\n@@ -158,6 +160,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         eq_op::EQ_OP,\n         escape::BOXED_LOCAL,\n         eta_reduction::REDUNDANT_CLOSURE,\n+        hashmap::HASHMAP_ENTRY,\n         identity_op::IDENTITY_OP,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,"}, {"sha": "a0454a325e4dae66b2b3c0de2b8aa77f3628d5c1", "filename": "src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=fc789a675bcc2c1fdb7ca7ded566a445bee85f28", "patch": "@@ -13,7 +13,7 @@ use syntax::ast::Lit_::*;\n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type,\n             in_external_macro, expr_block, span_help_and_lint, is_integer_literal,\n             get_enclosing_block};\n-use utils::{VEC_PATH, LL_PATH};\n+use utils::{HASHMAP_PATH, VEC_PATH, LL_PATH};\n \n /// **What it does:** This lint checks for looping over the range of `0..len` of some collection just to get the values by index. It is `Warn` by default.\n ///\n@@ -457,7 +457,7 @@ fn is_ref_iterable_type(cx: &LateContext, e: &Expr) -> bool {\n     is_iterable_array(ty) ||\n         match_type(cx, ty, &VEC_PATH) ||\n         match_type(cx, ty, &LL_PATH) ||\n-        match_type(cx, ty, &[\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"]) ||\n+        match_type(cx, ty, &HASHMAP_PATH) ||\n         match_type(cx, ty, &[\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"]) ||\n         match_type(cx, ty, &[\"collections\", \"vec_deque\", \"VecDeque\"]) ||\n         match_type(cx, ty, &[\"collections\", \"binary_heap\", \"BinaryHeap\"]) ||"}, {"sha": "2baf26095b7975170ed1c70de0abf3b2a2ae3483", "filename": "src/strings.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=fc789a675bcc2c1fdb7ca7ded566a445bee85f28", "patch": "@@ -7,8 +7,7 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n use syntax::codemap::Spanned;\n \n-use eq_op::is_exp_equal;\n-use utils::{match_type, span_lint, walk_ptrs_ty, get_parent_expr};\n+use utils::{is_exp_equal, match_type, span_lint, walk_ptrs_ty, get_parent_expr};\n use utils::STRING_PATH;\n \n /// **What it does:** This lint matches code of the form `x = x + y` (without `let`!). It is `Allow` by default."}, {"sha": "1b6c75a3b78aedea21af9d8dfcd50d398e8b7135", "filename": "src/utils.rs", "status": "modified", "additions": 78, "deletions": 8, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=fc789a675bcc2c1fdb7ca7ded566a445bee85f28", "patch": "@@ -10,6 +10,7 @@ use syntax::ast::Lit_::*;\n use syntax::ast;\n use syntax::errors::DiagnosticBuilder;\n use syntax::ptr::P;\n+use consts::constant;\n \n use rustc::session::Session;\n use std::str::FromStr;\n@@ -18,15 +19,16 @@ use std::ops::{Deref, DerefMut};\n pub type MethodArgs = HirVec<P<Expr>>;\n \n // module DefPaths for certain structs/enums we check for\n-pub const OPTION_PATH: [&'static str; 3] = [\"core\", \"option\", \"Option\"];\n-pub const RESULT_PATH: [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n-pub const STRING_PATH: [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n-pub const VEC_PATH:    [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];\n-pub const LL_PATH:     [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n+pub const OPTION_PATH:  [&'static str; 3] = [\"core\", \"option\", \"Option\"];\n+pub const RESULT_PATH:  [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n+pub const STRING_PATH:  [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n+pub const VEC_PATH:     [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];\n+pub const LL_PATH:      [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n+pub const HASHMAP_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const OPEN_OPTIONS_PATH: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n-pub const MUTEX_PATH:  [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n-pub const CLONE_PATH:  [&'static str; 2] = [\"Clone\", \"clone\"];\n-pub const BEGIN_UNWIND:[&'static str; 3] = [\"std\", \"rt\", \"begin_unwind\"];\n+pub const MUTEX_PATH:   [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n+pub const CLONE_PATH:   [&'static str; 2] = [\"Clone\", \"clone\"];\n+pub const BEGIN_UNWIND: [&'static str; 3] = [\"std\", \"rt\", \"begin_unwind\"];\n \n /// Produce a nested chain of if-lets and ifs from the patterns:\n ///\n@@ -492,3 +494,71 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n         }\n     }\n }\n+\n+pub fn is_exp_equal(cx: &LateContext, left : &Expr, right : &Expr) -> bool {\n+    if let (Some(l), Some(r)) = (constant(cx, left), constant(cx, right)) {\n+        if l == r {\n+            return true;\n+        }\n+    }\n+    match (&left.node, &right.node) {\n+        (&ExprField(ref lfexp, ref lfident),\n+                &ExprField(ref rfexp, ref rfident)) =>\n+            lfident.node == rfident.node && is_exp_equal(cx, lfexp, rfexp),\n+        (&ExprLit(ref l), &ExprLit(ref r)) => l.node == r.node,\n+        (&ExprPath(ref lqself, ref lsubpath),\n+                &ExprPath(ref rqself, ref rsubpath)) =>\n+            both(lqself, rqself, is_qself_equal) &&\n+                is_path_equal(lsubpath, rsubpath),\n+        (&ExprTup(ref ltup), &ExprTup(ref rtup)) =>\n+            is_exps_equal(cx, ltup, rtup),\n+        (&ExprVec(ref l), &ExprVec(ref r)) => is_exps_equal(cx, l, r),\n+        (&ExprCast(ref lx, ref lt), &ExprCast(ref rx, ref rt)) =>\n+            is_exp_equal(cx, lx, rx) && is_cast_ty_equal(lt, rt),\n+        _ => false\n+    }\n+}\n+\n+fn is_exps_equal(cx: &LateContext, left : &[P<Expr>], right : &[P<Expr>]) -> bool {\n+    over(left, right, |l, r| is_exp_equal(cx, l, r))\n+}\n+\n+fn is_path_equal(left : &Path, right : &Path) -> bool {\n+    // The == of idents doesn't work with different contexts,\n+    // we have to be explicit about hygiene\n+    left.global == right.global && over(&left.segments, &right.segments,\n+        |l, r| l.identifier.name == r.identifier.name\n+               && l.parameters == r.parameters)\n+}\n+\n+fn is_qself_equal(left : &QSelf, right : &QSelf) -> bool {\n+    left.ty.node == right.ty.node && left.position == right.position\n+}\n+\n+fn over<X, F>(left: &[X], right: &[X], mut eq_fn: F) -> bool\n+        where F: FnMut(&X, &X) -> bool {\n+    left.len() == right.len() && left.iter().zip(right).all(|(x, y)|\n+        eq_fn(x, y))\n+}\n+\n+fn both<X, F>(l: &Option<X>, r: &Option<X>, mut eq_fn : F) -> bool\n+        where F: FnMut(&X, &X) -> bool {\n+    l.as_ref().map_or_else(|| r.is_none(), |x| r.as_ref().map_or(false,\n+        |y| eq_fn(x, y)))\n+}\n+\n+fn is_cast_ty_equal(left: &Ty, right: &Ty) -> bool {\n+    match (&left.node, &right.node) {\n+        (&TyVec(ref lvec), &TyVec(ref rvec)) => is_cast_ty_equal(lvec, rvec),\n+        (&TyPtr(ref lmut), &TyPtr(ref rmut)) =>\n+            lmut.mutbl == rmut.mutbl &&\n+            is_cast_ty_equal(&*lmut.ty, &*rmut.ty),\n+        (&TyRptr(_, ref lrmut), &TyRptr(_, ref rrmut)) =>\n+            lrmut.mutbl == rrmut.mutbl &&\n+            is_cast_ty_equal(&*lrmut.ty, &*rrmut.ty),\n+        (&TyPath(ref lq, ref lpath), &TyPath(ref rq, ref rpath)) =>\n+            both(lq, rq, is_qself_equal) && is_path_equal(lpath, rpath),\n+        (&TyInfer, &TyInfer) => true,\n+        _ => false\n+    }\n+}"}, {"sha": "a53566a794e8932fc493373f6f1dd60a196b7202", "filename": "tests/compile-fail/hashmap.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/tests%2Fcompile-fail%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc789a675bcc2c1fdb7ca7ded566a445bee85f28/tests%2Fcompile-fail%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fhashmap.rs?ref=fc789a675bcc2c1fdb7ca7ded566a445bee85f28", "patch": "@@ -0,0 +1,41 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![allow(unused)]\n+\n+#![deny(hashmap_entry)]\n+\n+use std::collections::HashMap;\n+use std::hash::Hash;\n+\n+fn foo() {}\n+\n+fn insert_if_absent0<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n+    if !m.contains_key(&k) { m.insert(k, v); }\n+    //~^ERROR: usage of `contains_key` followed by `insert` on `HashMap`\n+    //~^^HELP: Consider using `m.entry(k).or_insert(v)`\n+}\n+\n+fn insert_if_absent1<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n+    if !m.contains_key(&k) { foo(); m.insert(k, v); }\n+    //~^ERROR: usage of `contains_key` followed by `insert` on `HashMap`\n+    //~^^HELP: Consider using `m.entry(k)`\n+}\n+\n+fn insert_if_absent2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n+    if !m.contains_key(&k) { m.insert(k, v) } else { None };\n+    //~^ERROR: usage of `contains_key` followed by `insert` on `HashMap`\n+    //~^^HELP: Consider using `m.entry(k).or_insert(v)`\n+}\n+\n+fn insert_if_absent3<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n+    if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n+    //~^ERROR: usage of `contains_key` followed by `insert` on `HashMap`\n+    //~^^HELP: Consider using `m.entry(k)`\n+}\n+\n+fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {\n+    if !m.contains_key(&k) { m.insert(o, v); }\n+}\n+\n+fn main() {\n+}"}]}