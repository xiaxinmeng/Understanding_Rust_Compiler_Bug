{"sha": "7bd71262f889713c92f7d393346c8861851ba3d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZDcxMjYyZjg4OTcxM2M5MmY3ZDM5MzM0NmM4ODYxODUxYmEzZDQ=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-14T11:18:40Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-14T11:18:40Z"}, "message": "param_env debugs are instrumental to rustc's success", "tree": {"sha": "ee79804c986bee6067c2d65c69237ba8a4c8cce4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee79804c986bee6067c2d65c69237ba8a4c8cce4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bd71262f889713c92f7d393346c8861851ba3d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd71262f889713c92f7d393346c8861851ba3d4", "html_url": "https://github.com/rust-lang/rust/commit/7bd71262f889713c92f7d393346c8861851ba3d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bd71262f889713c92f7d393346c8861851ba3d4/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a419e112dbb0fc4e3e48414a307bbd92c727e0c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a419e112dbb0fc4e3e48414a307bbd92c727e0c5", "html_url": "https://github.com/rust-lang/rust/commit/a419e112dbb0fc4e3e48414a307bbd92c727e0c5"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "5e11932eafc4e4bc8e8ceac0f1991830b44a6ee7", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bd71262f889713c92f7d393346c8861851ba3d4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd71262f889713c92f7d393346c8861851ba3d4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=7bd71262f889713c92f7d393346c8861851ba3d4", "patch": "@@ -221,14 +221,14 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n     /// As `3 + 4` contains `N` in its substs, this must not succeed.\n     ///\n     /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.\n+    #[instrument(level = \"debug\", skip(self))]\n     fn unify_const_variable(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n         target_vid: ty::ConstVid<'tcx>,\n         ct: &'tcx ty::Const<'tcx>,\n         vid_is_expected: bool,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        debug!(\"unify_const_variable: param_env={:?}\", param_env);\n         let (for_universe, span) = {\n             let mut inner = self.inner.borrow_mut();\n             let variable_table = &mut inner.const_unification_table();"}, {"sha": "3e7b93b32a6a5a2b08feeedac74a17c5d43a8c00", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bd71262f889713c92f7d393346c8861851ba3d4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd71262f889713c92f7d393346c8861851ba3d4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=7bd71262f889713c92f7d393346c8861851ba3d4", "patch": "@@ -31,6 +31,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still\n     /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is\n     /// returned.\n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn const_eval_resolve(\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -39,7 +40,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n-        debug!(\"const_eval_resolve: param_env={:?}\", param_env);\n         match ty::Instance::resolve_opt_const_arg(self, param_env, def, substs) {\n             Ok(Some(instance)) => {\n                 let cid = GlobalId { instance, promoted };"}, {"sha": "de012a6957419a19358e8a01ccdb8ef032821c63", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bd71262f889713c92f7d393346c8861851ba3d4/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd71262f889713c92f7d393346c8861851ba3d4/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=7bd71262f889713c92f7d393346c8861851ba3d4", "patch": "@@ -347,13 +347,13 @@ impl<'tcx> Instance<'tcx> {\n     }\n \n     // This should be kept up to date with `resolve`.\n+    #[instrument(level = \"debug\", skip(tcx))]\n     pub fn resolve_opt_const_arg(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n     ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n-        debug!(\"resolve_opt_const_arg: param_env={:?},substs={:?}\", param_env, substs);\n         // All regions in the result of this query are erased, so it's\n         // fine to erase all of the input regions.\n "}, {"sha": "1cc580a198386bac4e114439725a3cb89b2d39a4", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7bd71262f889713c92f7d393346c8861851ba3d4/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd71262f889713c92f7d393346c8861851ba3d4/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=7bd71262f889713c92f7d393346c8861851ba3d4", "patch": "@@ -10,11 +10,11 @@ use traits::{translate_substs, Reveal};\n \n use tracing::debug;\n \n+#[instrument(level = \"debug\", skip(tcx))]\n fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n-    debug!(\"resolve_instance: key = {:?}\", key);\n     let (param_env, (did, substs)) = key.into_parts();\n     if let Some(did) = did.as_local() {\n         if let Some(param_did) = tcx.opt_const_param_of(did) {\n@@ -39,13 +39,13 @@ fn resolve_instance_of_const_arg<'tcx>(\n     )\n }\n \n+#[instrument(level = \"debug\", skip(tcx))]\n fn inner_resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>)>,\n ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n     let (param_env, (def, substs)) = key.into_parts();\n \n-    debug!(\"inner_resolve_instance: key={:?}\", key);\n     let result = if let Some(trait_def_id) = tcx.trait_of_item(def.did) {\n         debug!(\" => associated item, attempting to find impl in param_env {:#?}\", param_env);\n         let item = tcx.associated_item(def.did);\n@@ -94,10 +94,7 @@ fn inner_resolve_instance<'tcx>(\n         };\n         Ok(Some(Instance { def, substs }))\n     };\n-    debug!(\n-        \"inner_resolve_instance: resolve(def.did={:?}, substs={:?}) = {:?}\",\n-        def.did, substs, result\n-    );\n+    debug!(\"inner_resolve_instance: result={:?}\", result);\n     result\n }\n "}]}