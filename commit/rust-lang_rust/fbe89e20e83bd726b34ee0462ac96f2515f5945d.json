{"sha": "fbe89e20e83bd726b34ee0462ac96f2515f5945d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZTg5ZTIwZTgzYmQ3MjZiMzRlZTA0NjJhYzk2ZjI1MTVmNTk0NWQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-04T22:24:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-04T22:24:32Z"}, "message": "Rollup merge of #83815 - RalfJung:addr_of, r=kennytm\n\nptr::addr_of documentation improvements\n\nWhile writing https://github.com/rust-lang/reference/pull/1001 I figured I could also improve the docs here a bit.", "tree": {"sha": "2d5ab5d6925bbdb09242b8ac8667fc11c41629d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d5ab5d6925bbdb09242b8ac8667fc11c41629d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe89e20e83bd726b34ee0462ac96f2515f5945d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgajygCRBK7hj4Ov3rIwAAdHIIAKQSfAVlnXnx4D227CJjdxAI\nn6+k77QnzhGjTBycXt0vDg06PZMDidRkENPUHEm7X3QM9nhq9TqsPYfPVq3vLUf7\nxUuRMX4aQn9Yxoqxxw/IrntgiFCj0CSR566574xq6mhDp1B1lbTH93j6VJY2D9rm\njr0IvccCmCFHZ7IzNiLjUTQq4JTYbdlA0rNQGi+eNUTXXvrZUUeoyo5/sLcOScYT\nvYEU35U3NIG6bErtOgshDNyLUlBAL967BvRwkcAzwHnIJV2NTa2UBwobDZhvmg87\n1PYn3yyJYk3Jh5fAR8r0kmilczRGjTpclgvud6/AsMFk8VWDbDUtJyhyeii4PfQ=\n=2Vm6\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d5ab5d6925bbdb09242b8ac8667fc11c41629d6\nparent ad776fdba8b862b43cbde3cec31d1a16c3e4d4d9\nparent b577d7ef259c159c8d74333c79a0540b954ba726\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617575072 +0200\ncommitter GitHub <noreply@github.com> 1617575072 +0200\n\nRollup merge of #83815 - RalfJung:addr_of, r=kennytm\n\nptr::addr_of documentation improvements\n\nWhile writing https://github.com/rust-lang/reference/pull/1001 I figured I could also improve the docs here a bit.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe89e20e83bd726b34ee0462ac96f2515f5945d", "html_url": "https://github.com/rust-lang/rust/commit/fbe89e20e83bd726b34ee0462ac96f2515f5945d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe89e20e83bd726b34ee0462ac96f2515f5945d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad776fdba8b862b43cbde3cec31d1a16c3e4d4d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad776fdba8b862b43cbde3cec31d1a16c3e4d4d9", "html_url": "https://github.com/rust-lang/rust/commit/ad776fdba8b862b43cbde3cec31d1a16c3e4d4d9"}, {"sha": "b577d7ef259c159c8d74333c79a0540b954ba726", "url": "https://api.github.com/repos/rust-lang/rust/commits/b577d7ef259c159c8d74333c79a0540b954ba726", "html_url": "https://github.com/rust-lang/rust/commit/b577d7ef259c159c8d74333c79a0540b954ba726"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "64342de6341b0a5c4b560d2d5dd38f605ed221ae", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbe89e20e83bd726b34ee0462ac96f2515f5945d/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe89e20e83bd726b34ee0462ac96f2515f5945d/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=fbe89e20e83bd726b34ee0462ac96f2515f5945d", "patch": "@@ -190,6 +190,8 @@ use crate::ptr;\n ///     let ptr = uninit.as_mut_ptr();\n ///\n ///     // Initializing the `name` field\n+///     // Using `write` instead of assignment via `=` to not call `drop` on the\n+///     // old, uninitialized value.\n ///     unsafe { addr_of_mut!((*ptr).name).write(\"Bob\".to_string()); }\n ///\n ///     // Initializing the `list` field"}, {"sha": "c19eb642e2251c870fc9c9a2c7212d58c6a84983", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fbe89e20e83bd726b34ee0462ac96f2515f5945d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe89e20e83bd726b34ee0462ac96f2515f5945d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=fbe89e20e83bd726b34ee0462ac96f2515f5945d", "patch": "@@ -1537,6 +1537,10 @@ fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n /// as all other references. This macro can create a raw pointer *without* creating\n /// a reference first.\n ///\n+/// Note, however, that the `expr` in `addr_of!(expr)` is still subject to all\n+/// the usual rules. In particular, `addr_of!(*ptr::null())` is Undefined\n+/// Behavior because it dereferences a NULL pointer.\n+///\n /// # Example\n ///\n /// ```\n@@ -1553,6 +1557,10 @@ fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n /// let raw_f2 = ptr::addr_of!(packed.f2);\n /// assert_eq!(unsafe { raw_f2.read_unaligned() }, 2);\n /// ```\n+///\n+/// See [`addr_of_mut`] for how to create a pointer to unininitialized data.\n+/// Doing that with `addr_of` would not make much sense since one could only\n+/// read the data, and that would be Undefined Behavior.\n #[stable(feature = \"raw_ref_macros\", since = \"1.51.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[allow_internal_unstable(raw_ref_op)]\n@@ -1569,7 +1577,13 @@ pub macro addr_of($place:expr) {\n /// as all other references. This macro can create a raw pointer *without* creating\n /// a reference first.\n ///\n-/// # Example\n+/// Note, however, that the `expr` in `addr_of_mut!(expr)` is still subject to all\n+/// the usual rules. In particular, `addr_of_mut!(*ptr::null_mut())` is Undefined\n+/// Behavior because it dereferences a NULL pointer.\n+///\n+/// # Examples\n+///\n+/// **Creating a pointer to unaligned data:**\n ///\n /// ```\n /// use std::ptr;\n@@ -1586,6 +1600,23 @@ pub macro addr_of($place:expr) {\n /// unsafe { raw_f2.write_unaligned(42); }\n /// assert_eq!({packed.f2}, 42); // `{...}` forces copying the field instead of creating a reference.\n /// ```\n+///\n+/// **Creating a pointer to uninitialized data:**\n+///\n+/// ```rust\n+/// use std::{ptr, mem::MaybeUninit};\n+///\n+/// struct Demo {\n+///     field: bool,\n+/// }\n+///\n+/// let mut uninit = MaybeUninit::<Demo>::uninit();\n+/// // `&uninit.as_mut().field` would create a reference to an uninitialized `bool`,\n+/// // and thus be Undefined Behavior!\n+/// let f1_ptr = unsafe { ptr::addr_of_mut!((*uninit.as_mut_ptr()).field) };\n+/// unsafe { f1_ptr.write(true); }\n+/// let init = unsafe { uninit.assume_init() };\n+/// ```\n #[stable(feature = \"raw_ref_macros\", since = \"1.51.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[allow_internal_unstable(raw_ref_op)]"}]}