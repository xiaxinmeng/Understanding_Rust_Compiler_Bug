{"sha": "406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "node_id": "C_kwDOAAsO6NoAKDQwNmUxZGM4ZWJkZWI1MDk1MTVjMGM4YmU3Y2ZlMDE1YzVlY2VkMzA", "commit": {"author": {"name": "mejrs", "email": "", "date": "2022-10-18T22:08:20Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-10-18T22:08:20Z"}, "message": "Implement -Ztrack-diagnostics", "tree": {"sha": "89007e9a41db189b3228175001218ee04363b205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89007e9a41db189b3228175001218ee04363b205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "html_url": "https://github.com/rust-lang/rust/commit/406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/comments", "author": {}, "committer": {}, "parents": [{"sha": "a24a020e6d926dffe6b472fc647978f92269504e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a24a020e6d926dffe6b472fc647978f92269504e", "html_url": "https://github.com/rust-lang/rust/commit/a24a020e6d926dffe6b472fc647978f92269504e"}], "stats": {"total": 184, "additions": 176, "deletions": 8}, "files": [{"sha": "b92a3289fa2e39490c9ba90cf8ce595a03e2abfe", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -1211,6 +1211,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n         false,\n         None,\n         false,\n+        false,\n     ));\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n "}, {"sha": "1ea6d82891fd84648807a70b7434c9da7f9bbdb3", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -12,6 +12,7 @@ use rustc_span::{Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n+use std::panic::Location;\n \n /// Error type for `Diagnostic`'s `suggestions` field, indicating that\n /// `.disable_suggestions()` was called on the `Diagnostic`.\n@@ -107,6 +108,31 @@ pub struct Diagnostic {\n     /// If diagnostic is from Lint, custom hash function ignores notes\n     /// otherwise hash is based on the all the fields\n     pub is_lint: bool,\n+\n+    /// With `-Ztrack_diagnostics` enabled,\n+    /// we print where in rustc this error was emitted.\n+    pub emitted_at: DiagnosticLocation,\n+}\n+\n+#[derive(Clone, Debug, Encodable, Decodable)]\n+pub struct DiagnosticLocation {\n+    file: Cow<'static, str>,\n+    line: u32,\n+    col: u32,\n+}\n+\n+impl DiagnosticLocation {\n+    #[track_caller]\n+    fn caller() -> Self {\n+        let loc = Location::caller();\n+        DiagnosticLocation { file: loc.file().into(), line: loc.line(), col: loc.column() }\n+    }\n+}\n+\n+impl fmt::Display for DiagnosticLocation {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}:{}:{}\", self.file, self.line, self.col)\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n@@ -173,10 +199,12 @@ impl StringPart {\n }\n \n impl Diagnostic {\n+    #[track_caller]\n     pub fn new<M: Into<DiagnosticMessage>>(level: Level, message: M) -> Self {\n         Diagnostic::new_with_code(level, None, message)\n     }\n \n+    #[track_caller]\n     pub fn new_with_code<M: Into<DiagnosticMessage>>(\n         level: Level,\n         code: Option<DiagnosticId>,\n@@ -192,6 +220,7 @@ impl Diagnostic {\n             args: Default::default(),\n             sort_span: DUMMY_SP,\n             is_lint: false,\n+            emitted_at: DiagnosticLocation::caller(),\n         }\n     }\n "}, {"sha": "ecf8570e81f7131d25f5df080fce350d0c062175", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -133,6 +133,7 @@ mod sealed_level_is_error {\n impl<'a> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     /// Convenience function for internal use, clients should use one of the\n     /// `struct_*` methods on [`Handler`].\n+    #[track_caller]\n     pub(crate) fn new_guaranteeing_error<M: Into<DiagnosticMessage>, const L: Level>(\n         handler: &'a Handler,\n         message: M,\n@@ -196,6 +197,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n         }\n     }\n \n+    #[track_caller]\n     fn make_diagnostic_builder(\n         handler: &Handler,\n         msg: impl Into<DiagnosticMessage>,\n@@ -209,6 +211,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n impl<'a> DiagnosticBuilder<'a, ()> {\n     /// Convenience function for internal use, clients should use one of the\n     /// `struct_*` methods on [`Handler`].\n+    #[track_caller]\n     pub(crate) fn new<M: Into<DiagnosticMessage>>(\n         handler: &'a Handler,\n         level: Level,\n@@ -220,6 +223,7 @@ impl<'a> DiagnosticBuilder<'a, ()> {\n \n     /// Creates a new `DiagnosticBuilder` with an already constructed\n     /// diagnostic.\n+    #[track_caller]\n     pub(crate) fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic) -> Self {\n         debug!(\"Created new diagnostic\");\n         Self {\n@@ -308,6 +312,7 @@ impl EmissionGuarantee for Noted {\n impl<'a> DiagnosticBuilder<'a, !> {\n     /// Convenience function for internal use, clients should use one of the\n     /// `struct_*` methods on [`Handler`].\n+    #[track_caller]\n     pub(crate) fn new_fatal(handler: &'a Handler, message: impl Into<DiagnosticMessage>) -> Self {\n         let diagnostic = Diagnostic::new_with_code(Level::Fatal, None, message);\n         Self::new_diagnostic_fatal(handler, diagnostic)"}, {"sha": "b9b9a59e354b2a49d6fda430ad8fb9a85316e864", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -16,10 +16,10 @@ use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Styl\n use crate::styled_buffer::StyledBuffer;\n use crate::translation::{to_fluent_args, Translate};\n use crate::{\n-    CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage, FluentBundle, Handler,\n-    LazyFallbackBundle, Level, MultiSpan, SubDiagnostic, SubstitutionHighlight, SuggestionStyle,\n+    diagnostic::DiagnosticLocation, CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage,\n+    FluentBundle, Handler, LazyFallbackBundle, Level, MultiSpan, SubDiagnostic,\n+    SubstitutionHighlight, SuggestionStyle,\n };\n-\n use rustc_lint_defs::pluralize;\n \n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n@@ -64,6 +64,7 @@ impl HumanReadableErrorType {\n         teach: bool,\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n+        track_diagnostics: bool,\n     ) -> EmitterWriter {\n         let (short, color_config) = self.unzip();\n         let color = color_config.suggests_using_colors();\n@@ -77,6 +78,7 @@ impl HumanReadableErrorType {\n             color,\n             diagnostic_width,\n             macro_backtrace,\n+            track_diagnostics,\n         )\n     }\n }\n@@ -557,6 +559,7 @@ impl Emitter for EmitterWriter {\n             &primary_span,\n             &children,\n             &suggestions,\n+            Some(&diag.emitted_at),\n         );\n     }\n \n@@ -650,6 +653,7 @@ pub struct EmitterWriter {\n     diagnostic_width: Option<usize>,\n \n     macro_backtrace: bool,\n+    track_diagnostics: bool,\n }\n \n #[derive(Debug)]\n@@ -669,6 +673,7 @@ impl EmitterWriter {\n         teach: bool,\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n+        track_diagnostics: bool,\n     ) -> EmitterWriter {\n         let dst = Destination::from_stderr(color_config);\n         EmitterWriter {\n@@ -681,6 +686,7 @@ impl EmitterWriter {\n             ui_testing: false,\n             diagnostic_width,\n             macro_backtrace,\n+            track_diagnostics,\n         }\n     }\n \n@@ -694,6 +700,7 @@ impl EmitterWriter {\n         colored: bool,\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n+        track_diagnostics: bool,\n     ) -> EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst, colored),\n@@ -705,6 +712,7 @@ impl EmitterWriter {\n             ui_testing: false,\n             diagnostic_width,\n             macro_backtrace,\n+            track_diagnostics,\n         }\n     }\n \n@@ -1327,6 +1335,7 @@ impl EmitterWriter {\n         level: &Level,\n         max_line_num_len: usize,\n         is_secondary: bool,\n+        emitted_at: Option<&DiagnosticLocation>,\n     ) -> io::Result<()> {\n         let mut buffer = StyledBuffer::new();\n \n@@ -1377,7 +1386,6 @@ impl EmitterWriter {\n                 }\n             }\n         }\n-\n         let mut annotated_files = FileWithAnnotatedLines::collect_annotations(self, args, msp);\n \n         // Make sure our primary file comes first\n@@ -1653,6 +1661,12 @@ impl EmitterWriter {\n             }\n         }\n \n+        if self.track_diagnostics && let Some(tracked) = emitted_at {\n+            let track = format!(\"-Ztrack-diagnostics: created at {tracked}\");\n+            let len = buffer.num_lines();\n+            buffer.append(len, &track, Style::NoStyle);\n+        }\n+\n         // final step: take our styled buffer, render it, then output it\n         emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message)?;\n \n@@ -1977,6 +1991,7 @@ impl EmitterWriter {\n         span: &MultiSpan,\n         children: &[SubDiagnostic],\n         suggestions: &[CodeSuggestion],\n+        emitted_at: Option<&DiagnosticLocation>,\n     ) {\n         let max_line_num_len = if self.ui_testing {\n             ANONYMIZED_LINE_NUM.len()\n@@ -1985,7 +2000,16 @@ impl EmitterWriter {\n             num_decimal_digits(n)\n         };\n \n-        match self.emit_message_default(span, message, args, code, level, max_line_num_len, false) {\n+        match self.emit_message_default(\n+            span,\n+            message,\n+            args,\n+            code,\n+            level,\n+            max_line_num_len,\n+            false,\n+            emitted_at,\n+        ) {\n             Ok(()) => {\n                 if !children.is_empty()\n                     || suggestions.iter().any(|s| s.style != SuggestionStyle::CompletelyHidden)\n@@ -2014,6 +2038,7 @@ impl EmitterWriter {\n                             &child.level,\n                             max_line_num_len,\n                             true,\n+                            None,\n                         ) {\n                             panic!(\"failed to emit error: {}\", err);\n                         }\n@@ -2030,6 +2055,7 @@ impl EmitterWriter {\n                                 &Level::Help,\n                                 max_line_num_len,\n                                 true,\n+                                None,\n                             ) {\n                                 panic!(\"failed to emit error: {}\", e);\n                             }"}, {"sha": "c4498eafa4eab1f287cfe1a8699706571f865777", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -45,6 +45,7 @@ pub struct JsonEmitter {\n     json_rendered: HumanReadableErrorType,\n     diagnostic_width: Option<usize>,\n     macro_backtrace: bool,\n+    track_diagnostics: bool,\n }\n \n impl JsonEmitter {\n@@ -57,6 +58,7 @@ impl JsonEmitter {\n         json_rendered: HumanReadableErrorType,\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n+        track_diagnostics: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::BufWriter::new(io::stderr())),\n@@ -69,6 +71,7 @@ impl JsonEmitter {\n             json_rendered,\n             diagnostic_width,\n             macro_backtrace,\n+            track_diagnostics,\n         }\n     }\n \n@@ -79,6 +82,7 @@ impl JsonEmitter {\n         fallback_bundle: LazyFallbackBundle,\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n+        track_diagnostics: bool,\n     ) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(\n@@ -90,6 +94,7 @@ impl JsonEmitter {\n             json_rendered,\n             diagnostic_width,\n             macro_backtrace,\n+            track_diagnostics,\n         )\n     }\n \n@@ -103,6 +108,7 @@ impl JsonEmitter {\n         json_rendered: HumanReadableErrorType,\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n+        track_diagnostics: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n@@ -115,6 +121,7 @@ impl JsonEmitter {\n             json_rendered,\n             diagnostic_width,\n             macro_backtrace,\n+            track_diagnostics,\n         }\n     }\n \n@@ -350,6 +357,7 @@ impl Diagnostic {\n                 false,\n                 je.diagnostic_width,\n                 je.macro_backtrace,\n+                je.track_diagnostics,\n             )\n             .ui_testing(je.ui_testing)\n             .emit_diagnostic(diag);"}, {"sha": "f131468971b5adbcd66e090b05d21a1f5eb51c55", "filename": "compiler/rustc_errors/src/json/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -59,6 +59,7 @@ fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n             HumanReadableErrorType::Short(ColorConfig::Never),\n             None,\n             false,\n+            false,\n         );\n \n         let span = Span::with_root_ctxt(BytePos(span.0), BytePos(span.1));"}, {"sha": "e3bb50c3d22ef7a2831da4b59d438a6c1528ede0", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -489,6 +489,8 @@ pub struct HandlerFlags {\n     pub macro_backtrace: bool,\n     /// If true, identical diagnostics are reported only once.\n     pub deduplicate_diagnostics: bool,\n+    /// Track where errors are created. Enabled with `-Ztrack-diagnostics`.\n+    pub track_diagnostics: bool,\n }\n \n impl Drop for HandlerInner {\n@@ -556,6 +558,7 @@ impl Handler {\n             false,\n             None,\n             flags.macro_backtrace,\n+            flags.track_diagnostics,\n         ));\n         Self::with_emitter_and_flags(emitter, flags)\n     }\n@@ -661,6 +664,7 @@ impl Handler {\n \n     /// Construct a builder with the `msg` at the level appropriate for the specific `EmissionGuarantee`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_diagnostic<G: EmissionGuarantee>(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -674,6 +678,7 @@ impl Handler {\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_warn(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -690,6 +695,7 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n+    #[track_caller]\n     pub fn struct_span_warn_with_expectation(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -703,6 +709,7 @@ impl Handler {\n \n     /// Construct a builder at the `Allow` level at the given `span` and with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_allow(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -716,6 +723,7 @@ impl Handler {\n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n     /// Also include a code.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_warn_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -733,6 +741,7 @@ impl Handler {\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Warning(None), msg)\n     }\n@@ -743,6 +752,7 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n+    #[track_caller]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -759,6 +769,7 @@ impl Handler {\n \n     /// Construct a builder at the `Expect` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -769,6 +780,7 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level at the given `span` and with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_err(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -781,6 +793,7 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level at the given `span`, with the `msg`, and `code`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_err_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -795,6 +808,7 @@ impl Handler {\n     /// Construct a builder at the `Error` level with the `msg`.\n     // FIXME: This method should be removed (every error should have an associated error code).\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -804,12 +818,14 @@ impl Handler {\n \n     /// This should only be used by `rustc_middle::lint::struct_lint_level`. Do not use it for hard errors.\n     #[doc(hidden)]\n+    #[track_caller]\n     pub fn struct_err_lint(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Error { lint: true }, msg)\n     }\n \n     /// Construct a builder at the `Error` level with the `msg` and the `code`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -822,6 +838,7 @@ impl Handler {\n \n     /// Construct a builder at the `Warn` level with the `msg` and the `code`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -834,6 +851,7 @@ impl Handler {\n \n     /// Construct a builder at the `Fatal` level at the given `span` and with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_fatal(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -871,6 +889,7 @@ impl Handler {\n \n     /// Construct a builder at the `Note` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_note_without_error(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -885,6 +904,7 @@ impl Handler {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -896,6 +916,7 @@ impl Handler {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_err(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -905,6 +926,7 @@ impl Handler {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_err_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -918,11 +940,13 @@ impl Handler {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_warn(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) {\n         self.emit_diag_at_span(Diagnostic::new(Warning(None), msg), span);\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_warn_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -932,6 +956,7 @@ impl Handler {\n         self.emit_diag_at_span(Diagnostic::new_with_code(Warning(None), Some(code), msg), span);\n     }\n \n+    #[track_caller]\n     pub fn span_bug(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.inner.borrow_mut().span_bug(span, msg)\n     }\n@@ -947,14 +972,17 @@ impl Handler {\n \n     // FIXME(eddyb) note the comment inside `impl Drop for HandlerInner`, that's\n     // where the explanation of what \"good path\" is (also, it should be renamed).\n+    #[track_caller]\n     pub fn delay_good_path_bug(&self, msg: impl Into<DiagnosticMessage>) {\n         self.inner.borrow_mut().delay_good_path_bug(msg)\n     }\n \n+    #[track_caller]\n     pub fn span_bug_no_panic(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) {\n         self.emit_diag_at_span(Diagnostic::new(Bug, msg), span);\n     }\n \n+    #[track_caller]\n     pub fn span_note_without_error(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -963,6 +991,7 @@ impl Handler {\n         self.emit_diag_at_span(Diagnostic::new(Note, msg), span);\n     }\n \n+    #[track_caller]\n     pub fn span_note_diag(\n         &self,\n         span: Span,\n@@ -1449,6 +1478,7 @@ impl HandlerInner {\n         }\n     }\n \n+    #[track_caller]\n     fn span_bug(&mut self, sp: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.emit_diag_at_span(Diagnostic::new(Bug, msg), sp);\n         panic::panic_any(ExplicitBug);"}, {"sha": "d82a7a54030c668a3c55bfaaef739b56ce59f509", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -151,6 +151,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n             false,\n             None,\n             false,\n+            false,\n         );\n         let handler = Handler::with_emitter(true, None, Box::new(emitter));\n         handler.span_err(msp, \"foo\");"}, {"sha": "856ff3d415081cac494a7d7bbd38e0a45f1d0457", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -794,6 +794,7 @@ impl UnstableOptions {\n             report_delayed_bugs: self.report_delayed_bugs,\n             macro_backtrace: self.macro_backtrace,\n             deduplicate_diagnostics: self.deduplicate_diagnostics,\n+            track_diagnostics: self.track_diagnostics,\n         }\n     }\n }"}, {"sha": "af290931850fea2a9c400035eb00073adb3ef951", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -1585,6 +1585,8 @@ options! {\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n+    track_diagnostics: bool = (false, parse_bool, [TRACKED],\n+        \"Tracks where in rustc a diagnostic was emitted\"),\n     // Diagnostics are considered side-effects of a query (see `QuerySideEffects`) and are saved\n     // alongside query results and changes to translation options can affect diagnostics - so\n     // translation options should be tracked."}, {"sha": "0c04a2f24499c750eebbddf06f38f8d9919aea47", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -287,6 +287,7 @@ impl Session {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_warn<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -295,6 +296,7 @@ impl Session {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_warn_with_expectation<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -304,6 +306,7 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_expectation(sp, msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -313,10 +316,12 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -345,6 +350,7 @@ impl Session {\n         self.diagnostic().struct_expect(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -353,6 +359,7 @@ impl Session {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -363,12 +370,14 @@ impl Session {\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.parse_sess.struct_err(msg)\n     }\n+    #[track_caller]\n     #[rustc_lint_diagnostics]\n     pub fn struct_err_with_code(\n         &self,\n@@ -378,6 +387,7 @@ impl Session {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -425,6 +435,7 @@ impl Session {\n         self.diagnostic().fatal(msg).raise()\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_err_or_warn<S: Into<MultiSpan>>(\n         &self,\n         is_warning: bool,\n@@ -438,6 +449,7 @@ impl Session {\n         }\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -458,12 +470,14 @@ impl Session {\n     pub fn err(&self, msg: impl Into<DiagnosticMessage>) -> ErrorGuaranteed {\n         self.diagnostic().err(msg)\n     }\n+    #[track_caller]\n     pub fn create_err<'a>(\n         &'a self,\n         err: impl IntoDiagnostic<'a>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.parse_sess.create_err(err)\n     }\n+    #[track_caller]\n     pub fn create_feature_err<'a>(\n         &'a self,\n         err: impl IntoDiagnostic<'a>,\n@@ -1214,6 +1228,7 @@ fn default_emitter(\n     fallback_bundle: LazyFallbackBundle,\n ) -> Box<dyn Emitter + sync::Send> {\n     let macro_backtrace = sopts.unstable_opts.macro_backtrace;\n+    let track_diagnostics = sopts.unstable_opts.track_diagnostics;\n     match sopts.error_format {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n@@ -1237,6 +1252,7 @@ fn default_emitter(\n                     sopts.unstable_opts.teach,\n                     sopts.diagnostic_width,\n                     macro_backtrace,\n+                    track_diagnostics,\n                 );\n                 Box::new(emitter.ui_testing(sopts.unstable_opts.ui_testing))\n             }\n@@ -1251,6 +1267,7 @@ fn default_emitter(\n                 json_rendered,\n                 sopts.diagnostic_width,\n                 macro_backtrace,\n+                track_diagnostics,\n             )\n             .ui_testing(sopts.unstable_opts.ui_testing),\n         ),\n@@ -1553,11 +1570,18 @@ fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler\n                 false,\n                 None,\n                 false,\n+                false,\n             ))\n         }\n-        config::ErrorOutputType::Json { pretty, json_rendered } => {\n-            Box::new(JsonEmitter::basic(pretty, json_rendered, None, fallback_bundle, None, false))\n-        }\n+        config::ErrorOutputType::Json { pretty, json_rendered } => Box::new(JsonEmitter::basic(\n+            pretty,\n+            json_rendered,\n+            None,\n+            fallback_bundle,\n+            None,\n+            false,\n+            false,\n+        )),\n     };\n     rustc_errors::Handler::with_emitter(true, None, emitter)\n }"}, {"sha": "2a61c2451b6348a672d657c3f4018f8154dab2d1", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -172,6 +172,7 @@ pub(crate) fn new_handler(\n                     unstable_opts.teach,\n                     diagnostic_width,\n                     false,\n+                    false,\n                 )\n                 .ui_testing(unstable_opts.ui_testing),\n             )\n@@ -190,6 +191,7 @@ pub(crate) fn new_handler(\n                     json_rendered,\n                     diagnostic_width,\n                     false,\n+                    false,\n                 )\n                 .ui_testing(unstable_opts.ui_testing),\n             )"}, {"sha": "7bd7fc5ea752d09f73d02d1a237e41add5ce8192", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -551,6 +551,7 @@ pub(crate) fn make_test(\n                 false,\n                 Some(80),\n                 false,\n+                false,\n             )\n             .supports_color();\n \n@@ -564,6 +565,7 @@ pub(crate) fn make_test(\n                 false,\n                 None,\n                 false,\n+                false,\n             );\n \n             // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n@@ -748,6 +750,7 @@ fn check_if_attr_is_complete(source: &str, edition: Edition) -> bool {\n                 false,\n                 None,\n                 false,\n+                false,\n             );\n \n             let handler = Handler::with_emitter(false, None, Box::new(emitter));"}, {"sha": "3427c593e856ec928cfdad2d6c28b9fe0a9254cf", "filename": "src/test/ui/track-diagnostics/track.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Z track-diagnostics\n+// error-pattern: created at\n+\n+fn main() {\n+    break rust\n+}"}, {"sha": "83ff935dbabd6aa481fc21e1a56c58c014912d0c", "filename": "src/test/ui/track-diagnostics/track.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.stderr?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -0,0 +1,26 @@\n+error[E0425]: cannot find value `rust` in this scope\n+  --> $DIR/track.rs:5:11\n+   |\n+LL |     break rust\n+   |           ^^^^ not found in this scope\n+-Ztrack-diagnostics: created at compiler/rustc_resolve/src/late/diagnostics.rs:289:28\n+\n+error[E0268]: `break` outside of a loop\n+  --> $DIR/track.rs:5:5\n+   |\n+LL |     break rust\n+   |     ^^^^^^^^^^ cannot `break` outside of a loop\n+-Ztrack-diagnostics: created at compiler/rustc_passes/src/errors.rs:957:10\n+\n+error: internal compiler error: It looks like you're trying to break rust; would you like some ICE?\n+\n+note: the compiler expectedly panicked. this is a feature.\n+\n+note: we would appreciate a joke overview: https://github.com/rust-lang/rust/issues/43162#issuecomment-320764675\n+\n+note: rustc 1.66.0-dev running on x86_64-pc-windows-msvc\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0268, E0425.\n+For more information about an error, try `rustc --explain E0268`."}, {"sha": "9e2facf0f63b79f1e77a00958bce06694fbd74a2", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -691,6 +691,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                     false,\n                     None,\n                     false,\n+                    false,\n                 );\n                 let handler = Handler::with_emitter(false, None, Box::new(emitter));\n                 let sess = ParseSess::with_span_handler(handler, sm);"}, {"sha": "ae54b2078a65b9f1126a92e87ba559fc079d7688", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -179,6 +179,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n         false,\n         None,\n         false,\n+        false,\n     ));\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n "}, {"sha": "6bfec79cd7030a5bfe921b5a24b33e1daf68b2fc", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e1dc8ebdeb509515c0c8be7cfe015c5eced30/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=406e1dc8ebdeb509515c0c8be7cfe015c5eced30", "patch": "@@ -134,6 +134,7 @@ fn default_handler(\n             false,\n             None,\n             false,\n+            false,\n         ))\n     };\n     Handler::with_emitter("}]}