{"sha": "bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "node_id": "C_kwDOAAsO6NoAKGJiOGEwZmZhMjNkMjM1ZTA2MjgwZmYwZDBiOTZmMGIwZTc2M2QzNWM", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2023-03-07T13:39:30Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2023-03-15T12:55:22Z"}, "message": "Bump to latest beta", "tree": {"sha": "522a621fdcaba51d4e4d0371fba73f4aa0521386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/522a621fdcaba51d4e4d0371fba73f4aa0521386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "html_url": "https://github.com/rust-lang/rust/commit/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d7af11e17887c4fc77902e77840d00309bf572", "url": "https://api.github.com/repos/rust-lang/rust/commits/01d7af11e17887c4fc77902e77840d00309bf572", "html_url": "https://github.com/rust-lang/rust/commit/01d7af11e17887c4fc77902e77840d00309bf572"}], "stats": {"total": 882, "additions": 429, "deletions": 453}, "files": [{"sha": "5469261ef56592aecf495e384d29ab52a9fdd548", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "patch": "@@ -87,7 +87,7 @@\n #![warn(missing_debug_implementations)]\n #![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n-#![cfg_attr(not(bootstrap), warn(multiple_supertrait_upcastable))]\n+#![warn(multiple_supertrait_upcastable)]\n //\n // Library features:\n #![feature(alloc_layout_extra)]\n@@ -195,7 +195,7 @@\n #![feature(c_unwind)]\n #![feature(with_negative_coherence)]\n #![cfg_attr(test, feature(panic_update_hook))]\n-#![cfg_attr(not(bootstrap), feature(multiple_supertrait_upcastable))]\n+#![feature(multiple_supertrait_upcastable)]\n //\n // Rustdoc features:\n #![feature(doc_cfg)]"}, {"sha": "11cb0827578646f2a47d5f5b0d43809634fc14a8", "filename": "library/core/src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.rs?ref=bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "patch": "@@ -28,7 +28,7 @@ use crate::fmt::{Debug, Display};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Error\")]\n #[rustc_has_incoherent_inherent_impls]\n-#[cfg_attr(not(bootstrap), allow(multiple_supertrait_upcastable))]\n+#[allow(multiple_supertrait_upcastable)]\n pub trait Error: Debug + Display {\n     /// The lower-level source of this error, if any.\n     ///"}, {"sha": "bb46594fe852b13dda2ee60d29bd1932fcea5f6c", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "patch": "@@ -267,7 +267,7 @@ extern \"C\" {\n /// family of functions. It contains a function to format the given value. At\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n-#[cfg_attr(not(bootstrap), lang = \"format_argument\")]\n+#[lang = \"format_argument\"]\n #[derive(Copy, Clone)]\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n@@ -280,7 +280,7 @@ pub struct ArgumentV1<'a> {\n /// This struct represents the unsafety of constructing an `Arguments`.\n /// It exists, rather than an unsafe function, in order to simplify the expansion\n /// of `format_args!(..)` and reduce the scope of the `unsafe` block.\n-#[cfg_attr(not(bootstrap), lang = \"format_unsafe_arg\")]\n+#[lang = \"format_unsafe_arg\"]\n #[allow(missing_debug_implementations)]\n #[doc(hidden)]\n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n@@ -475,7 +475,7 @@ impl<'a> Arguments<'a> {\n /// ```\n ///\n /// [`format()`]: ../../std/fmt/fn.format.html\n-#[cfg_attr(not(bootstrap), lang = \"format_arguments\")]\n+#[lang = \"format_arguments\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone)]\n pub struct Arguments<'a> {"}, {"sha": "6d70796f70718f809172eeb6994e7b1a0b7142ae", "filename": "library/core/src/fmt/rt/v1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Frt%2Fv1.rs?ref=bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "patch": "@@ -5,7 +5,7 @@\n //! these can be statically allocated and are slightly optimized for the runtime\n #![allow(missing_debug_implementations)]\n \n-#[cfg_attr(not(bootstrap), lang = \"format_placeholder\")]\n+#[lang = \"format_placeholder\"]\n #[derive(Copy, Clone)]\n // FIXME: Rename this to Placeholder\n pub struct Argument {\n@@ -37,7 +37,7 @@ impl Argument {\n }\n \n /// Possible alignments that can be requested as part of a formatting directive.\n-#[cfg_attr(not(bootstrap), lang = \"format_alignment\")]\n+#[lang = \"format_alignment\"]\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum Alignment {\n     /// Indication that contents should be left-aligned.\n@@ -51,7 +51,7 @@ pub enum Alignment {\n }\n \n /// Used by [width](https://doc.rust-lang.org/std/fmt/#width) and [precision](https://doc.rust-lang.org/std/fmt/#precision) specifiers.\n-#[cfg_attr(not(bootstrap), lang = \"format_count\")]\n+#[lang = \"format_count\"]\n #[derive(Copy, Clone)]\n pub enum Count {\n     /// Specified with a literal number, stores the value"}, {"sha": "de638552fa3780c2dee613d1b7baeb0bdda4197e", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "patch": "@@ -278,7 +278,7 @@\n //!\n //! ```\n //! # #![allow(unused_must_use)]\n-//! # #![cfg_attr(not(bootstrap), allow(map_unit_fn))]\n+//! # #![allow(map_unit_fn)]\n //! let v = vec![1, 2, 3, 4, 5];\n //! v.iter().map(|x| println!(\"{x}\"));\n //! ```"}, {"sha": "8e7c0c4442f954defd2b429e8bc145a6bd52cc41", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "patch": "@@ -69,7 +69,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n #[doc(notable_trait)]\n #[rustc_diagnostic_item = \"Iterator\"]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n-#[cfg_attr(not(bootstrap), const_trait)]\n+#[const_trait]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n     #[rustc_diagnostic_item = \"IteratorItem\"]"}, {"sha": "526232f44ee1eff7e7998e50d1e889825976fe20", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "patch": "@@ -95,7 +95,7 @@\n #![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n #![allow(incomplete_features)]\n-#![cfg_attr(not(bootstrap), warn(multiple_supertrait_upcastable))]\n+#![warn(multiple_supertrait_upcastable)]\n //\n // Library features:\n #![feature(const_align_offset)]\n@@ -241,7 +241,7 @@\n #![feature(unsized_fn_params)]\n #![feature(asm_const)]\n #![feature(const_transmute_copy)]\n-#![cfg_attr(not(bootstrap), feature(multiple_supertrait_upcastable))]\n+#![feature(multiple_supertrait_upcastable)]\n //\n // Target features:\n #![feature(arm_target_feature)]\n@@ -254,7 +254,6 @@\n #![feature(sse4a_target_feature)]\n #![feature(tbm_target_feature)]\n #![feature(wasm_target_feature)]\n-#![cfg_attr(bootstrap, feature(cmpxchg16b_target_feature))]\n \n // allow using `core::` in intra-doc links\n #[allow(unused_extern_crates)]"}, {"sha": "9a0fd1f5f517b0e966eed9d1ceb36d5fad802183", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "patch": "@@ -97,7 +97,7 @@ unsafe impl<T: Sync + ?Sized> Send for &T {}\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n #[rustc_specialization_trait]\n #[rustc_deny_explicit_impl]\n-#[cfg_attr(not(bootstrap), rustc_coinductive)]\n+#[rustc_coinductive]\n pub trait Sized {\n     // Empty.\n }\n@@ -877,8 +877,7 @@ pub trait Tuple {}\n /// All types that have the same size and alignment as a `usize` or\n /// `*const ()` automatically implement this trait.\n #[unstable(feature = \"pointer_like_trait\", issue = \"none\")]\n-#[cfg_attr(bootstrap, lang = \"pointer_sized\")]\n-#[cfg_attr(not(bootstrap), lang = \"pointer_like\")]\n+#[lang = \"pointer_like\"]\n #[rustc_on_unimplemented(\n     message = \"`{Self}` needs to have the same alignment and size as a pointer\",\n     label = \"`{Self}` needs to be a pointer-like type\""}, {"sha": "c254803fbf650c6aaf698235b99d98f0a677f179", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "patch": "@@ -392,14 +392,7 @@ impl<T> NeverShortCircuit<T> {\n     pub fn wrap_mut_2<A, B>(\n         mut f: impl ~const FnMut(A, B) -> T,\n     ) -> impl ~const FnMut(A, B) -> Self {\n-        cfg_if! {\n-            if #[cfg(bootstrap)] {\n-                #[allow(unused_parens)]\n-                (const move |a, b| NeverShortCircuit(f(a, b)))\n-            } else {\n-                const move |a, b| NeverShortCircuit(f(a, b))\n-            }\n-        }\n+        const move |a, b| NeverShortCircuit(f(a, b))\n     }\n }\n "}, {"sha": "2f6b1c74da08ed8bb41af77271a614c9ec99cb6b", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c", "patch": "@@ -1951,8 +1951,7 @@ macro_rules! if_not_8_bit {\n     ($_:ident, $($tt:tt)*) => { $($tt)* };\n }\n \n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic_load_store))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store)]\n macro_rules! atomic_int {\n     ($cfg_cas:meta,\n      $cfg_align:meta,\n@@ -3125,8 +3124,7 @@ atomic_int_ptr_sized! {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n fn strongest_failure_ordering(order: Ordering) -> Ordering {\n     match order {\n         Release => Relaxed,\n@@ -3168,8 +3166,7 @@ unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_swap<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_swap`.\n@@ -3186,8 +3183,7 @@ unsafe fn atomic_swap<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// Returns the previous value (like __sync_fetch_and_add).\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_add`.\n@@ -3204,8 +3200,7 @@ unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// Returns the previous value (like __sync_fetch_and_sub).\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_sub`.\n@@ -3221,8 +3216,7 @@ unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_compare_exchange<T: Copy>(\n     dst: *mut T,\n@@ -3257,8 +3251,7 @@ unsafe fn atomic_compare_exchange<T: Copy>(\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_compare_exchange_weak<T: Copy>(\n     dst: *mut T,\n@@ -3293,8 +3286,7 @@ unsafe fn atomic_compare_exchange_weak<T: Copy>(\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_and<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_and`\n@@ -3310,8 +3302,7 @@ unsafe fn atomic_and<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_nand<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_nand`\n@@ -3327,8 +3318,7 @@ unsafe fn atomic_nand<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_or`\n@@ -3344,8 +3334,7 @@ unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_xor<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_xor`\n@@ -3362,8 +3351,7 @@ unsafe fn atomic_xor<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// returns the max value (signed comparison)\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_max<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_max`\n@@ -3380,8 +3368,7 @@ unsafe fn atomic_max<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// returns the min value (signed comparison)\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_min<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_min`\n@@ -3398,8 +3385,7 @@ unsafe fn atomic_min<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// returns the max value (unsigned comparison)\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_umax<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_umax`\n@@ -3416,8 +3402,7 @@ unsafe fn atomic_umax<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// returns the min value (unsigned comparison)\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_umin<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_umin`"}, {"sha": "9250d9c280463e71f0c3e1c08676b14d1bf873e6", "filename": "src/stage0.json", "status": "modified", "additions": 398, "deletions": 398, "changes": 796, "blob_url": "https://github.com/rust-lang/rust/blob/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=bb8a0ffa23d235e06280ff0d0b96f0b0e763d35c"}]}