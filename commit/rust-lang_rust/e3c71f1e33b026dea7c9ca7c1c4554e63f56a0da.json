{"sha": "e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYzcxZjFlMzNiMDI2ZGVhN2M5Y2E3YzFjNDU1NGU2M2Y1NmEwZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-02T00:12:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-02T00:12:21Z"}, "message": "Auto merge of #88522 - camelid:box-paren-output, r=jyn514\n\nrustdoc: Box `GenericArgs::Parenthesized.output`\n\nSplit out from #88379.\n\nThis reduces the size of `GenericArgs` from 104 bytes to 56 bytes,\nessentially reducing it by half.\n\n`GenericArgs` is one of the fields of `PathSegment`, so this should\nreduce the amount of memory allocated for `PathSegment`s in the cases\nwhere the generics are not for a `Fn`, `FnMut`, or `FnOnce` trait.\n\nr? `@jyn514`", "tree": {"sha": "bef0127f5d8e5b5a78ed15be224ba9437c1e39e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef0127f5d8e5b5a78ed15be224ba9437c1e39e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da", "html_url": "https://github.com/rust-lang/rust/commit/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "767edcf61630ee05a19e2be9085a153750b4d102", "url": "https://api.github.com/repos/rust-lang/rust/commits/767edcf61630ee05a19e2be9085a153750b4d102", "html_url": "https://github.com/rust-lang/rust/commit/767edcf61630ee05a19e2be9085a153750b4d102"}, {"sha": "280e16787e6a9bd769754f29c37c045bc18016f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/280e16787e6a9bd769754f29c37c045bc18016f4", "html_url": "https://github.com/rust-lang/rust/commit/280e16787e6a9bd769754f29c37c045bc18016f4"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "9217209fcf0516a8348fdfc35854c4bbcaeffd20", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da", "patch": "@@ -351,7 +351,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             .flat_map(|(ty, mut bounds)| {\n                 if let Some(data) = ty_to_fn.get(&ty) {\n                     let (poly_trait, output) =\n-                        (data.0.as_ref().expect(\"as_ref failed\").clone(), data.1.as_ref().cloned());\n+                        (data.0.as_ref().unwrap().clone(), data.1.as_ref().cloned().map(Box::new));\n                     let new_ty = match poly_trait.trait_ {\n                         Type::ResolvedPath { ref path, ref did, ref is_generic } => {\n                             let mut new_path = path.clone();"}, {"sha": "bde821c5d9cd0629a1c7026c16ef90c4730f3dd9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da", "patch": "@@ -1773,10 +1773,9 @@ impl Clean<GenericArgs> for hir::GenericArgs<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> GenericArgs {\n         if self.parenthesized {\n             let output = self.bindings[0].ty().clean(cx);\n-            GenericArgs::Parenthesized {\n-                inputs: self.inputs().clean(cx),\n-                output: if output != Type::Tuple(Vec::new()) { Some(output) } else { None },\n-            }\n+            let output =\n+                if output != Type::Tuple(Vec::new()) { Some(Box::new(output)) } else { None };\n+            GenericArgs::Parenthesized { inputs: self.inputs().clean(cx), output }\n         } else {\n             GenericArgs::AngleBracketed {\n                 args: self"}, {"sha": "d139b19f5dc43f3961969b636066e3b4acab1085", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da", "patch": "@@ -116,10 +116,10 @@ crate fn merge_bounds(\n                 });\n             }\n             PP::Parenthesized { ref mut output, .. } => match output {\n-                Some(o) => assert_eq!(o, rhs),\n+                Some(o) => assert_eq!(o.as_ref(), rhs),\n                 None => {\n                     if *rhs != clean::Type::Tuple(Vec::new()) {\n-                        *output = Some(rhs.clone());\n+                        *output = Some(Box::new(rhs.clone()));\n                     }\n                 }\n             },"}, {"sha": "36b862120a27b06909bb7ef041697bd8be29a4c6", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da", "patch": "@@ -2019,15 +2019,25 @@ crate enum GenericArg {\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate enum GenericArgs {\n     AngleBracketed { args: Vec<GenericArg>, bindings: Vec<TypeBinding> },\n-    Parenthesized { inputs: Vec<Type>, output: Option<Type> },\n+    Parenthesized { inputs: Vec<Type>, output: Option<Box<Type>> },\n }\n \n+// `GenericArgs` is in every `PathSegment`, so its size can significantly\n+// affect rustdoc's memory usage.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+rustc_data_structures::static_assert_size!(GenericArgs, 56);\n+\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate struct PathSegment {\n     crate name: Symbol,\n     crate args: GenericArgs,\n }\n \n+// `PathSegment` usually occurs multiple times in every `Path`, so its size can\n+// significantly affect rustdoc's memory usage.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+rustc_data_structures::static_assert_size!(PathSegment, 64);\n+\n #[derive(Clone, Debug)]\n crate struct Typedef {\n     crate type_: Type,"}, {"sha": "228d718411f141eef8ca9b7eba7af175061975ae", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da", "patch": "@@ -127,7 +127,7 @@ impl FromWithTcx<clean::GenericArgs> for GenericArgs {\n             },\n             Parenthesized { inputs, output } => GenericArgs::Parenthesized {\n                 inputs: inputs.into_iter().map(|a| a.into_tcx(tcx)).collect(),\n-                output: output.map(|a| a.into_tcx(tcx)),\n+                output: output.map(|a| (*a).into_tcx(tcx)),\n             },\n         }\n     }"}]}