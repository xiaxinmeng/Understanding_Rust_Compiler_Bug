{"sha": "b5063ab0e543174e416e34fc130c8b8daba34b41", "node_id": "C_kwDOAAsO6NoAKGI1MDYzYWIwZTU0MzE3NGU0MTZlMzRmYzEzMGM4YjhkYWJhMzRiNDE", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-10-05T19:30:43Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:19Z"}, "message": "Make more assumptions explicit", "tree": {"sha": "cb4662eba2a92c210d90958c3ada1edd140e0077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb4662eba2a92c210d90958c3ada1edd140e0077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5063ab0e543174e416e34fc130c8b8daba34b41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5063ab0e543174e416e34fc130c8b8daba34b41", "html_url": "https://github.com/rust-lang/rust/commit/b5063ab0e543174e416e34fc130c8b8daba34b41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5063ab0e543174e416e34fc130c8b8daba34b41/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f66e9417f51d4350274854287c52a106599f31a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f66e9417f51d4350274854287c52a106599f31a", "html_url": "https://github.com/rust-lang/rust/commit/2f66e9417f51d4350274854287c52a106599f31a"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "510856da92fb50f2acf1105f9f7890195a7ed133", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b5063ab0e543174e416e34fc130c8b8daba34b41/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5063ab0e543174e416e34fc130c8b8daba34b41/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=b5063ab0e543174e416e34fc130c8b8daba34b41", "patch": "@@ -50,6 +50,20 @@\n //! Borrows.\n //!\n //! To be continued...\n+//!\n+//! The bottom state denotes uninitalized memory.\n+//!\n+//!\n+//! # Assumptions\n+//!\n+//! - (A1) Assignment to any tracked place invalidates all pointers that could be used to change\n+//!     the underlying value.\n+//! - (A2) `StorageLive`, `StorageDead` and `Deinit` make the underlying memory at least\n+//!     uninitialized (at least in the sense that declaring access UB is also fine).\n+//! - (A3) An assignment with `State::assign_place_idx` either involves non-overlapping places, or\n+//!     the places are the same.\n+//! - (A4) If the value behind a reference to a `Freeze` place is changed, dereferencing the\n+//!     reference is UB.\n \n use std::fmt::{Debug, Formatter};\n \n@@ -91,12 +105,11 @@ pub trait ValueAnalysis<'tcx> {\n                 self.handle_intrinsic(intrinsic, state);\n             }\n             StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {\n-                // We can flood with bottom here, because `StorageLive` makes the local\n-                // uninitialized, and `StorageDead` makes it UB to access.\n+                // (A2)\n                 state.flood_with(Place::from(*local).as_ref(), self.map(), Self::Value::bottom());\n             }\n             StatementKind::Deinit(box place) => {\n-                // The bottom states denotes uninitialized values.\n+                // (A2)\n                 state.flood_with(place.as_ref(), self.map(), Self::Value::bottom());\n             }\n             StatementKind::Nop\n@@ -200,7 +213,8 @@ pub trait ValueAnalysis<'tcx> {\n                 ValueOrPlace::Value(self.handle_constant(constant, state))\n             }\n             Operand::Copy(place) | Operand::Move(place) => {\n-                // Do we want to handle moves differently? Could flood place with bottom.\n+                // On move, we would ideally flood the place with bottom. But with the current\n+                // framework this is not possible (similar to `InterpCx::eval_operand`).\n                 self.map()\n                     .find(place.as_ref())\n                     .map(ValueOrPlace::Place)\n@@ -306,7 +320,6 @@ impl<'tcx, T: ValueAnalysis<'tcx>> AnalysisDomain<'tcx> for ValueAnalysisWrapper\n \n     fn initialize_start_block(&self, body: &Body<'tcx>, state: &mut Self::Domain) {\n         // The initial state maps all tracked places of argument projections to \u22a4 and the rest to \u22a5.\n-        // This utilizes that reading from an uninitialized place is UB.\n         assert!(matches!(state.0, StateData::Unreachable));\n         let values = IndexVec::from_elem_n(T::Value::bottom(), self.0.map().value_count);\n         *state = State(StateData::Reachable(values));\n@@ -440,10 +453,10 @@ impl<V: Clone + HasTop> State<V> {\n         self.flood_idx_with(place, map, V::top())\n     }\n \n-    /// This method assumes that the given places are not overlapping, and that we can therefore\n-    /// copy all entries one after another.\n     pub fn assign_place_idx(&mut self, target: PlaceIndex, source: PlaceIndex, map: &Map) {\n+        // We use (A3) and copy all entries one after another.\n         let StateData::Reachable(values) = &mut self.0 else { return };\n+\n         // If both places are tracked, we copy the value to the target. If the target is tracked,\n         // but the source is not, we have to invalidate the value in target. If the target is not\n         // tracked, then we don't have to do anything.\n@@ -490,6 +503,10 @@ impl<V: Clone + HasTop> State<V> {\n                 if let Some(value_index) = map.places[target].value_index {\n                     values[value_index] = V::top();\n                 }\n+                // Instead of tracking of *where* a reference points to (as in, which place), we\n+                // track *what* it points to (as in, what do we know about the target). For an\n+                // assignment `x = &y`, we thus copy the info we have for `y` to `*x`. This is\n+                // sound because we only track places that are `Freeze`, and (A4).\n                 if let Some(target_deref) = map.apply_elem(target, ProjElem::Deref) {\n                     self.assign_place_idx(target_deref, source, map);\n                 }\n@@ -657,6 +674,8 @@ impl Map {\n             return Err(());\n         }\n \n+        // FIXME: Check that the place is `Freeze`.\n+\n         let place = self.make_place(local, projection)?;\n \n         // Allocate a value slot if it doesn't have one."}]}