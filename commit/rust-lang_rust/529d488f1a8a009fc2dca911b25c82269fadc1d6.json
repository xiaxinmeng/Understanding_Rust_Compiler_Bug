{"sha": "529d488f1a8a009fc2dca911b25c82269fadc1d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOWQ0ODhmMWE4YTAwOWZjMmRjYTkxMWIyNWM4MjI2OWZhZGMxZDY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-05-17T22:37:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-05-20T18:57:13Z"}, "message": "Factor out `NativeLibKind::Dylib` from `NativeLibKind::Unspecified`", "tree": {"sha": "d8abd2a5a4015bfc7ad4b8df047fa39a5978c712", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8abd2a5a4015bfc7ad4b8df047fa39a5978c712"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/529d488f1a8a009fc2dca911b25c82269fadc1d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/529d488f1a8a009fc2dca911b25c82269fadc1d6", "html_url": "https://github.com/rust-lang/rust/commit/529d488f1a8a009fc2dca911b25c82269fadc1d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/529d488f1a8a009fc2dca911b25c82269fadc1d6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee7a35ab95e00b5015bff8af5959ce28af528ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7a35ab95e00b5015bff8af5959ce28af528ca5", "html_url": "https://github.com/rust-lang/rust/commit/ee7a35ab95e00b5015bff8af5959ce28af528ca5"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "afff061468bc3fd394be99ff2198256fb20204dc", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/529d488f1a8a009fc2dca911b25c82269fadc1d6/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529d488f1a8a009fc2dca911b25c82269fadc1d6/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=529d488f1a8a009fc2dca911b25c82269fadc1d6", "patch": "@@ -330,6 +330,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n         match lib.kind {\n             NativeLibKind::StaticBundle => {}\n             NativeLibKind::StaticNoBundle\n+            | NativeLibKind::Dylib\n             | NativeLibKind::Framework\n             | NativeLibKind::RawDylib\n             | NativeLibKind::Unspecified => continue,\n@@ -866,7 +867,9 @@ fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n         .filter_map(|lib| {\n             let name = lib.name?;\n             match lib.kind {\n-                NativeLibKind::StaticNoBundle | NativeLibKind::Unspecified => {\n+                NativeLibKind::StaticNoBundle\n+                | NativeLibKind::Dylib\n+                | NativeLibKind::Unspecified => {\n                     if sess.target.target.options.is_like_msvc {\n                         Some(format!(\"{}.lib\", name))\n                     } else {\n@@ -1648,7 +1651,7 @@ fn add_local_native_libraries(\n             None => continue,\n         };\n         match lib.kind {\n-            NativeLibKind::Unspecified => cmd.link_dylib(name),\n+            NativeLibKind::Dylib | NativeLibKind::Unspecified => cmd.link_dylib(name),\n             NativeLibKind::Framework => cmd.link_framework(name),\n             NativeLibKind::StaticNoBundle => cmd.link_staticlib(name),\n             NativeLibKind::StaticBundle => cmd.link_whole_staticlib(name, &search_path),\n@@ -1984,7 +1987,7 @@ fn add_upstream_native_libraries(\n                 continue;\n             }\n             match lib.kind {\n-                NativeLibKind::Unspecified => cmd.link_dylib(name),\n+                NativeLibKind::Dylib | NativeLibKind::Unspecified => cmd.link_dylib(name),\n                 NativeLibKind::Framework => cmd.link_framework(name),\n                 NativeLibKind::StaticNoBundle => {\n                     // Link \"static-nobundle\" native libs only if the crate they originate from"}, {"sha": "ed5448ca8bac463d20173a6b694a4a4f8e5fbd3f", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/529d488f1a8a009fc2dca911b25c82269fadc1d6/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529d488f1a8a009fc2dca911b25c82269fadc1d6/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=529d488f1a8a009fc2dca911b25c82269fadc1d6", "patch": "@@ -896,7 +896,7 @@ pub fn provide_both(providers: &mut Providers<'_>) {\n             .native_libraries(krate)\n             .iter()\n             .filter(|lib| {\n-                if lib.kind != NativeLibKind::Unspecified {\n+                if !matches!(lib.kind, NativeLibKind::Dylib | NativeLibKind::Unspecified) {\n                     return false;\n                 }\n                 let cfg = match lib.cfg {"}, {"sha": "68ad9870657102c9b4b902f88cf19ad232be1afc", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/529d488f1a8a009fc2dca911b25c82269fadc1d6/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529d488f1a8a009fc2dca911b25c82269fadc1d6/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=529d488f1a8a009fc2dca911b25c82269fadc1d6", "patch": "@@ -67,7 +67,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                     lib.kind = match &*kind.as_str() {\n                         \"static\" => NativeLibKind::StaticBundle,\n                         \"static-nobundle\" => NativeLibKind::StaticNoBundle,\n-                        \"dylib\" => NativeLibKind::Unspecified,\n+                        \"dylib\" => NativeLibKind::Dylib,\n                         \"framework\" => NativeLibKind::Framework,\n                         \"raw-dylib\" => NativeLibKind::RawDylib,\n                         k => {"}, {"sha": "1b168bf01178c17c2c304b30641e1891fb878a36", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/529d488f1a8a009fc2dca911b25c82269fadc1d6/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529d488f1a8a009fc2dca911b25c82269fadc1d6/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=529d488f1a8a009fc2dca911b25c82269fadc1d6", "patch": "@@ -247,7 +247,9 @@ pub fn provide(providers: &mut Providers<'_>) {\n     // resolve! Does this work? Unsure! That's what the issue is about\n     *providers = Providers {\n         is_dllimport_foreign_item: |tcx, id| match tcx.native_library_kind(id) {\n-            Some(NativeLibKind::Unspecified | NativeLibKind::RawDylib) => true,\n+            Some(NativeLibKind::Dylib | NativeLibKind::RawDylib | NativeLibKind::Unspecified) => {\n+                true\n+            }\n             _ => false,\n         },\n         is_statically_included_foreign_item: |tcx, id| match tcx.native_library_kind(id) {"}, {"sha": "1aac639f9236ede027f76f5f753c4cc2912ba4a0", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/529d488f1a8a009fc2dca911b25c82269fadc1d6/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529d488f1a8a009fc2dca911b25c82269fadc1d6/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=529d488f1a8a009fc2dca911b25c82269fadc1d6", "patch": "@@ -1463,7 +1463,7 @@ fn parse_libs(\n             let kind = parts.next().unwrap();\n             let (name, kind) = match (parts.next(), kind) {\n                 (None, name) => (name, None),\n-                (Some(name), \"dylib\") => (name, Some(NativeLibKind::Unspecified)),\n+                (Some(name), \"dylib\") => (name, Some(NativeLibKind::Dylib)),\n                 (Some(name), \"framework\") => (name, Some(NativeLibKind::Framework)),\n                 (Some(name), \"static\") => (name, Some(NativeLibKind::StaticBundle)),\n                 (Some(name), \"static-nobundle\") => (name, Some(NativeLibKind::StaticNoBundle)),"}, {"sha": "b97308c22cb7d0343cdc23e0efa03c360f5968fb", "filename": "src/librustc_session/utils.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/529d488f1a8a009fc2dca911b25c82269fadc1d6/src%2Flibrustc_session%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529d488f1a8a009fc2dca911b25c82269fadc1d6/src%2Flibrustc_session%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Futils.rs?ref=529d488f1a8a009fc2dca911b25c82269fadc1d6", "patch": "@@ -18,11 +18,14 @@ pub enum NativeLibKind {\n     /// Static library (e.g. `libfoo.a` on Linux or `foo.lib` on Windows/MSVC) included\n     /// when linking a final binary, but also included when archiving an rlib.\n     StaticBundle,\n-    /// Windows dynamic library (`foo.dll`) without a corresponding import library.\n+    /// Dynamic library (e.g. `libfoo.so` on Linux)\n+    /// or an import library corresponding to a dynamic library (e.g. `foo.lib` on Windows/MSVC).\n+    Dylib,\n+    /// Dynamic library (e.g. `foo.dll` on Windows) without a corresponding import library.\n     RawDylib,\n     /// A macOS-specific kind of dynamic libraries.\n     Framework,\n-    /// The library kind wasn't specified, dynamic linking is currently preferred.\n+    /// The library kind wasn't specified, `Dylib` is currently used as a default.\n     Unspecified,\n }\n "}]}