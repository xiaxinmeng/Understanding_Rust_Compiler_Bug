{"sha": "b7cdd93f3e1533e96d4cfa1ac8573e6210a2bedf", "node_id": "C_kwDOAAsO6NoAKGI3Y2RkOTNmM2UxNTMzZTk2ZDRjZmExYWM4NTczZTYyMTBhMmJlZGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-09T17:36:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-09T17:36:48Z"}, "message": "Auto merge of #14747 - oxalica:feat/arena-idx-range, r=HKalbasi\n\nMore APIs for `la_arena::IdxRange`\n\n```rust\nimpl<T> ExactSizeIterator for IdxRange<T>;\n\nimpl<T> Arena<T> {\n    pub fn alloc_many<II: IntoIterator<Item = T>>(&mut self, iter: II) -> IdxRange<T>;\n}\n```\n\n1. There are no currently ways to get `IdxRange` without manually offseting `Idx`. Providing a method for multiple-allocation simplifies this process and makes it less error-prone.\n2. `IdxRange: ExactSizeIterator` makes `iter.zip(range).rev()` possible. Since `Zip: DoubleEndedIterator` requires all its arguments to be `ExactSizeIterator`. It also ease the usage for, eg. `len()`.\n3. Fixed a typo.\n\nI noticed that `IdxRange::end` may be invalid. Is it good to return `Idx` instead of `RawIdx`?", "tree": {"sha": "e893f9a927eb64e163db90e91939dda0953b92a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e893f9a927eb64e163db90e91939dda0953b92a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7cdd93f3e1533e96d4cfa1ac8573e6210a2bedf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cdd93f3e1533e96d4cfa1ac8573e6210a2bedf", "html_url": "https://github.com/rust-lang/rust/commit/b7cdd93f3e1533e96d4cfa1ac8573e6210a2bedf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7cdd93f3e1533e96d4cfa1ac8573e6210a2bedf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c26a43d6bd660eba94500645a47f931e153015d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c26a43d6bd660eba94500645a47f931e153015d8", "html_url": "https://github.com/rust-lang/rust/commit/c26a43d6bd660eba94500645a47f931e153015d8"}, {"sha": "add94d3b9ca53921796ad1336aa67701b6cf888a", "url": "https://api.github.com/repos/rust-lang/rust/commits/add94d3b9ca53921796ad1336aa67701b6cf888a", "html_url": "https://github.com/rust-lang/rust/commit/add94d3b9ca53921796ad1336aa67701b6cf888a"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "1f8ef01a5bcea09c7eee347d741b20bc49ee8b0a", "filename": "lib/la-arena/src/lib.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b7cdd93f3e1533e96d4cfa1ac8573e6210a2bedf/lib%2Fla-arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cdd93f3e1533e96d4cfa1ac8573e6210a2bedf/lib%2Fla-arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fla-arena%2Fsrc%2Flib.rs?ref=b7cdd93f3e1533e96d4cfa1ac8573e6210a2bedf", "patch": "@@ -6,7 +6,7 @@\n use std::{\n     cmp, fmt,\n     hash::{Hash, Hasher},\n-    iter::Enumerate,\n+    iter::{Enumerate, FusedIterator},\n     marker::PhantomData,\n     ops::{Index, IndexMut, Range, RangeInclusive},\n };\n@@ -168,17 +168,40 @@ impl<T> IdxRange<T> {\n         Idx::from_raw(RawIdx::from(self.range.start))\n     }\n \n-    /// Returns the start of the index range.\n+    /// Returns the end of the index range.\n     pub fn end(&self) -> Idx<T> {\n         Idx::from_raw(RawIdx::from(self.range.end))\n     }\n }\n \n impl<T> Iterator for IdxRange<T> {\n     type Item = Idx<T>;\n+\n     fn next(&mut self) -> Option<Self::Item> {\n         self.range.next().map(|raw| Idx::from_raw(raw.into()))\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.range.size_hint()\n+    }\n+\n+    fn count(self) -> usize\n+    where\n+        Self: Sized,\n+    {\n+        self.range.count()\n+    }\n+\n+    fn last(self) -> Option<Self::Item>\n+    where\n+        Self: Sized,\n+    {\n+        self.range.last().map(|raw| Idx::from_raw(raw.into()))\n+    }\n+\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        self.range.nth(n).map(|raw| Idx::from_raw(raw.into()))\n+    }\n }\n \n impl<T> DoubleEndedIterator for IdxRange<T> {\n@@ -187,6 +210,10 @@ impl<T> DoubleEndedIterator for IdxRange<T> {\n     }\n }\n \n+impl<T> ExactSizeIterator for IdxRange<T> {}\n+\n+impl<T> FusedIterator for IdxRange<T> {}\n+\n impl<T> fmt::Debug for IdxRange<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(&format!(\"IdxRange::<{}>\", std::any::type_name::<T>()))\n@@ -305,6 +332,21 @@ impl<T> Arena<T> {\n         idx\n     }\n \n+    /// Densely allocates multiple values, returning the values\u2019 index range.\n+    ///\n+    /// ```\n+    /// let mut arena = la_arena::Arena::new();\n+    /// let range = arena.alloc_many(0..4);\n+    ///\n+    /// assert_eq!(arena[range], [0, 1, 2, 3]);\n+    /// ```\n+    pub fn alloc_many<II: IntoIterator<Item = T>>(&mut self, iter: II) -> IdxRange<T> {\n+        let start = self.next_idx();\n+        self.extend(iter);\n+        let end = self.next_idx();\n+        IdxRange::new(start..end)\n+    }\n+\n     /// Returns an iterator over the arena\u2019s elements.\n     ///\n     /// ```"}]}