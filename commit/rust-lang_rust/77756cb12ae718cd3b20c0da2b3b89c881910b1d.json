{"sha": "77756cb12ae718cd3b20c0da2b3b89c881910b1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NzU2Y2IxMmFlNzE4Y2QzYjIwYzBkYTJiM2I4OWM4ODE5MTBiMWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-07T18:51:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-09T01:20:02Z"}, "message": "Change error scheme so that if projection fails we generate `A::B` instead of `TyError`", "tree": {"sha": "c8bc6bb721c26602594fdec954bfdf03bcac7fcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8bc6bb721c26602594fdec954bfdf03bcac7fcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77756cb12ae718cd3b20c0da2b3b89c881910b1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77756cb12ae718cd3b20c0da2b3b89c881910b1d", "html_url": "https://github.com/rust-lang/rust/commit/77756cb12ae718cd3b20c0da2b3b89c881910b1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77756cb12ae718cd3b20c0da2b3b89c881910b1d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b720229c1fc819db00a45d43a3a0815a3b5809", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b720229c1fc819db00a45d43a3a0815a3b5809", "html_url": "https://github.com/rust-lang/rust/commit/64b720229c1fc819db00a45d43a3a0815a3b5809"}], "stats": {"total": 71, "additions": 58, "deletions": 13}, "files": [{"sha": "e9d7b330d07acc17f15bbc29f093e63dd3812872", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=77756cb12ae718cd3b20c0da2b3b89c881910b1d", "patch": "@@ -426,11 +426,25 @@ fn opt_normalize_projection_type<'a,'b,'tcx>(\n     }\n }\n \n-/// in various error cases, we just set TyError and return an obligation\n-/// that, when fulfilled, will lead to an error.\n+/// If we are projecting `<T as Trait>::Item`, but `T: Trait` does not\n+/// hold. In various error cases, we cannot generate a valid\n+/// normalized projection. Therefore, we create an inference variable\n+/// return an associated obligation that, when fulfilled, will lead to\n+/// an error.\n ///\n-/// FIXME: the TyError created here can enter the obligation we create,\n-/// leading to error messages involving TyError.\n+/// Note that we used to return `TyError` here, but that was quite\n+/// dubious -- the premise was that an error would *eventually* be\n+/// reported, when the obligation was processed. But in general once\n+/// you see a `TyError` you are supposed to be able to assume that an\n+/// error *has been* reported, so that you can take whatever heuristic\n+/// paths you want to take. To make things worse, it was possible for\n+/// cycles to arise, where you basically had a setup like `<MyType<$0>\n+/// as Trait>::Foo == $0`. Here, normalizing `<MyType<$0> as\n+/// Trait>::Foo> to `[type error]` would lead to an obligation of\n+/// `<MyType<[type error]> as Trait>::Foo`.  We are supposed to report\n+/// an error for this obligation, but we legitimately should not,\n+/// because it contains `[type error]`. Yuck! (See issue #29857 for\n+/// one case where this arose.)\n fn normalize_to_error<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n                                projection_ty: ty::ProjectionTy<'tcx>,\n                                cause: ObligationCause<'tcx>,\n@@ -441,8 +455,9 @@ fn normalize_to_error<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n     let trait_obligation = Obligation { cause: cause,\n                                         recursion_depth: depth,\n                                         predicate: trait_ref.to_predicate() };\n+    let new_value = selcx.infcx().next_ty_var();\n     Normalized {\n-        value: selcx.tcx().types.err,\n+        value: new_value,\n         obligations: vec!(trait_obligation)\n     }\n }"}, {"sha": "dbc22bcde9ec749257469c0549575992c268b7a7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=77756cb12ae718cd3b20c0da2b3b89c881910b1d", "patch": "@@ -1038,6 +1038,9 @@ fn report_cast_to_unsized_type<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                          t_cast: Ty<'tcx>,\n                                          t_expr: Ty<'tcx>,\n                                          id: ast::NodeId) {\n+    if t_cast.references_error() || t_expr.references_error() {\n+        return;\n+    }\n     let tstr = fcx.infcx().ty_to_string(t_cast);\n     let mut err = fcx.type_error_struct(span, |actual| {\n         format!(\"cast to unsized type: `{}` as `{}`\", actual, tstr)"}, {"sha": "6880f3e9a3cc9aeecd0ad58182c3b493a03202c8", "filename": "src/test/compile-fail/coherence-projection-conflict-ty-param.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-ty-param.rs?ref=77756cb12ae718cd3b20c0da2b3b89c881910b1d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Coherence error results because we do not know whether `T: Foo<P>` or not\n+// for the second impl.\n+\n+use std::marker::PhantomData;\n+\n+pub trait Foo<P> {}\n+\n+impl <P, T: Foo<P>> Foo<P> for Option<T> {} //~ ERROR E0119\n+\n+impl<T, U> Foo<T> for Option<U> { }\n+\n+fn main() {}"}, {"sha": "253285d3919c21937c4c5ebb4ee90fdfc7eb6a44", "filename": "src/test/compile-fail/const-eval-overflow-4b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs?ref=77756cb12ae718cd3b20c0da2b3b89c881910b1d", "patch": "@@ -22,7 +22,7 @@ use std::{u8, u16, u32, u64, usize};\n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1u8) as usize]\n     //~^ ERROR mismatched types\n-    //~| the trait `core::ops::Add<u8>` is not implemented for the type `i8`\n+    //~| ERROR the trait `core::ops::Add<u8>` is not implemented for the type `i8`\n     = [0; (i8::MAX as usize) + 1];\n \n fn main() {"}, {"sha": "ca1715445e526e976f3c8f10b67c09bc7e483b4f", "filename": "src/test/compile-fail/issue-19692.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fissue-19692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fissue-19692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19692.rs?ref=77756cb12ae718cd3b20c0da2b3b89c881910b1d", "patch": "@@ -12,7 +12,7 @@ struct Homura;\n \n fn akemi(homura: Homura) {\n     let Some(ref madoka) = Some(homura.kaname()); //~ ERROR no method named `kaname` found\n-    madoka.clone(); //~ ERROR the type of this value must be known in this context\n+    madoka.clone();\n }\n \n fn main() { }"}, {"sha": "ef6ce5c995bf3f91803e2c7362498f00138d9750", "filename": "src/test/compile-fail/issue-21950.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fissue-21950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fissue-21950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21950.rs?ref=77756cb12ae718cd3b20c0da2b3b89c881910b1d", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     let x = &10 as\n             &Add;\n             //~^ ERROR the type parameter `RHS` must be explicitly specified in an object type because its default value `Self` references the type `Self`\n-            //~^^ ERROR the value of the associated type `Output` (from the trait `core::ops::Add`) must be specified\n+            //~| ERROR the value of the associated type `Output` (from the trait `core::ops::Add`) must be specified\n }"}, {"sha": "7f9c7a292f2be0c7de7921b9ecbfcc483c35dabb", "filename": "src/test/compile-fail/issue-23966.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fissue-23966.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fissue-23966.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23966.rs?ref=77756cb12ae718cd3b20c0da2b3b89c881910b1d", "patch": "@@ -9,5 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    \"\".chars().fold(|_, _| (), ()); //~ ERROR is not implemented for the type `()`\n+    \"\".chars().fold(|_, _| (), ());\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }"}, {"sha": "4b0773140566c06fb1bf9923da9ac4b8715ef4ed", "filename": "src/test/compile-fail/issue-24352.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fissue-24352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fissue-24352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24352.rs?ref=77756cb12ae718cd3b20c0da2b3b89c881910b1d", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     1.0f64 - 1.0;\n-    1.0f64 - 1 //~ ERROR: is not implemented\n+    1.0f64 - 1 //~ ERROR E0277\n }"}, {"sha": "661579f52b6845e902544481cd873bfc03e76b0e", "filename": "src/test/compile-fail/issue-29857.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fissue-29857.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fissue-29857.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29857.rs?ref=77756cb12ae718cd3b20c0da2b3b89c881910b1d", "patch": "@@ -8,11 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+\n+#![feature(rustc_attrs)]\n+\n use std::marker::PhantomData;\n \n pub trait Foo<P> {}\n \n-impl <P, T: Foo<P>> Foo<P> for Option<T> {} //~ ERROR E0119\n+impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n \n pub struct Qux<T> (PhantomData<*mut T>);\n \n@@ -24,4 +27,5 @@ pub trait Bar {\n \n impl<T: 'static, W: Bar<Output = T>> Foo<*mut T> for W {}\n \n-fn main() {}\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "92456760b0508971bef2f5cde9506564b39b7f89", "filename": "src/test/compile-fail/issue-3973.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77756cb12ae718cd3b20c0da2b3b89c881910b1d/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs?ref=77756cb12ae718cd3b20c0da2b3b89c881910b1d", "patch": "@@ -32,5 +32,4 @@ fn main() {\n     let p = Point::new(0.0, 0.0);\n     //~^ ERROR no associated item named `new` found for type `Point` in the current scope\n     println!(\"{}\", p.to_string());\n-    //~^ ERROR the type of this value must be known in this context\n }"}]}