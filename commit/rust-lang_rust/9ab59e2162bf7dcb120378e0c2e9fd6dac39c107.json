{"sha": "9ab59e2162bf7dcb120378e0c2e9fd6dac39c107", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYjU5ZTIxNjJiZjdkY2IxMjAzNzhlMGMyZTlmZDZkYWMzOWMxMDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-10T13:35:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-10T13:35:46Z"}, "message": "Merge #5293\n\n5293: Automatically reload project info on Cargo.toml changes r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2dfd1838493bf62b3f790f3c7c5943993b15af0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dfd1838493bf62b3f790f3c7c5943993b15af0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCG6yCRBK7hj4Ov3rIwAAdHIIAEeRtSwCvI5uPWrlw0mSClV/\nuZFgflcrgKQ1rKGz7iUHh3t1y2T5KC8Juqd7mRyKWcCpFwNQDgiraEp87LvKumEX\n+PLCfwk26WGnpDd5sViLBuhfAmjBq8HcTtMEF3+NbVNosyriLeCI1HeAWNB2HqGy\nGY6lXHKxJr0/E84mYW9rG2rL8efna5Upagahfj99eIy9ROO5hUVJGzGMdLZEB51l\n1mEGNUarBDxc+8b6elo0X10pWfHe9KiB3qGVlN1jLqvmDSr7ZLHXbpUL2sAKsA7m\n51NSUcDqTj/QtpR6RJVRsXmbmng3GBXar0c3cT3HJgVDKJikMr0BHCRqMn7eHkE=\n=kGgt\n-----END PGP SIGNATURE-----\n", "payload": "tree 2dfd1838493bf62b3f790f3c7c5943993b15af0d\nparent 0f7770ae43dd0d97686eb85fccb38801ff30117b\nparent d0a8f6a3eb5094af36a72ca01b290a494dfd7b16\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594388146 +0000\ncommitter GitHub <noreply@github.com> 1594388146 +0000\n\nMerge #5293\n\n5293: Automatically reload project info on Cargo.toml changes r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107", "html_url": "https://github.com/rust-lang/rust/commit/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f7770ae43dd0d97686eb85fccb38801ff30117b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7770ae43dd0d97686eb85fccb38801ff30117b", "html_url": "https://github.com/rust-lang/rust/commit/0f7770ae43dd0d97686eb85fccb38801ff30117b"}, {"sha": "d0a8f6a3eb5094af36a72ca01b290a494dfd7b16", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a8f6a3eb5094af36a72ca01b290a494dfd7b16", "html_url": "https://github.com/rust-lang/rust/commit/d0a8f6a3eb5094af36a72ca01b290a494dfd7b16"}], "stats": {"total": 85, "additions": 57, "deletions": 28}, "files": [{"sha": "6d1154056ad029703996df3a6c6ec405034cd93a", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=9ab59e2162bf7dcb120378e0c2e9fd6dac39c107", "patch": "@@ -24,7 +24,7 @@ use rustc_hash::FxHashMap;\n ///\n /// We use absolute paths here, `cargo metadata` guarantees to always produce\n /// abs paths.\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct CargoWorkspace {\n     packages: Arena<PackageData>,\n     targets: Arena<TargetData>,\n@@ -68,7 +68,7 @@ pub type Package = Idx<PackageData>;\n \n pub type Target = Idx<TargetData>;\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct PackageData {\n     pub version: String,\n     pub name: String,\n@@ -83,13 +83,13 @@ pub struct PackageData {\n     pub proc_macro_dylib_path: Option<AbsPathBuf>,\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct PackageDependency {\n     pub pkg: Package,\n     pub name: String,\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct TargetData {\n     pub package: Package,\n     pub name: String,"}, {"sha": "b9c5424bf0eb31d6be6c74f3fb4a5f2bb89ca16e", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=9ab59e2162bf7dcb120378e0c2e9fd6dac39c107", "patch": "@@ -24,7 +24,7 @@ pub use crate::{\n };\n pub use ra_proc_macro::ProcMacroClient;\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub enum ProjectWorkspace {\n     /// Project workspace was discovered by running `cargo metadata` and `rustc --print sysroot`.\n     Cargo { cargo: CargoWorkspace, sysroot: Sysroot },"}, {"sha": "68d134da438d9eb255080fff8aa6a3239ef89ad3", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=9ab59e2162bf7dcb120378e0c2e9fd6dac39c107", "patch": "@@ -3,19 +3,19 @@\n use std::{convert::TryFrom, env, ops, path::Path, process::Command};\n \n use anyhow::{bail, format_err, Result};\n+use paths::{AbsPath, AbsPathBuf};\n use ra_arena::{Arena, Idx};\n \n use crate::output;\n-use paths::{AbsPath, AbsPathBuf};\n \n-#[derive(Default, Debug, Clone)]\n+#[derive(Default, Debug, Clone, Eq, PartialEq)]\n pub struct Sysroot {\n     crates: Arena<SysrootCrateData>,\n }\n \n pub type SysrootCrate = Idx<SysrootCrateData>;\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct SysrootCrateData {\n     pub name: String,\n     pub root: AbsPathBuf,"}, {"sha": "ed5e52871ceedf04fd240ae55eeefa3f36482439", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=9ab59e2162bf7dcb120378e0c2e9fd6dac39c107", "patch": "@@ -29,6 +29,7 @@ pub struct Config {\n     pub files: FilesConfig,\n     pub notifications: NotificationsConfig,\n \n+    pub cargo_autoreload: bool,\n     pub cargo: CargoConfig,\n     pub rustfmt: RustfmtConfig,\n     pub flycheck: Option<FlycheckConfig>,\n@@ -141,6 +142,7 @@ impl Config {\n             files: FilesConfig { watcher: FilesWatcher::Notify, exclude: Vec::new() },\n             notifications: NotificationsConfig { cargo_toml_not_found: true },\n \n+            cargo_autoreload: true,\n             cargo: CargoConfig::default(),\n             rustfmt: RustfmtConfig::Rustfmt { extra_args: Vec::new() },\n             flycheck: Some(FlycheckConfig::CargoCommand {\n@@ -189,6 +191,7 @@ impl Config {\n         };\n         self.notifications =\n             NotificationsConfig { cargo_toml_not_found: data.notifications_cargoTomlNotFound };\n+        self.cargo_autoreload = data.cargo_autoreload;\n         self.cargo = CargoConfig {\n             no_default_features: data.cargo_noDefaultFeatures,\n             all_features: data.cargo_allFeatures,\n@@ -364,6 +367,7 @@ config_data! {\n     struct ConfigData {\n         callInfo_full: bool = true,\n \n+        cargo_autoreload: bool           = true,\n         cargo_allFeatures: bool          = false,\n         cargo_features: Vec<String>      = Vec::new(),\n         cargo_loadOutDirsFromCheck: bool = false,"}, {"sha": "96e2399cedaa6e16c661459a596c2a5c9dbed5d5", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=9ab59e2162bf7dcb120378e0c2e9fd6dac39c107", "patch": "@@ -314,19 +314,6 @@ impl GlobalState {\n         Ok(())\n     }\n \n-    fn transition(&mut self, new_status: Status) {\n-        self.status = Status::Ready;\n-        if self.config.client_caps.status_notification {\n-            let lsp_status = match new_status {\n-                Status::Loading => lsp_ext::Status::Loading,\n-                Status::Ready => lsp_ext::Status::Ready,\n-                Status::Invalid => lsp_ext::Status::Invalid,\n-                Status::NeedsReload => lsp_ext::Status::NeedsReload,\n-            };\n-            self.send_notification::<lsp_ext::StatusNotification>(lsp_status);\n-        }\n-    }\n-\n     fn on_request(&mut self, request_received: Instant, req: Request) -> Result<()> {\n         self.register_request(&req, request_received);\n \n@@ -441,12 +428,7 @@ impl GlobalState {\n                 if let Some(flycheck) = &this.flycheck {\n                     flycheck.handle.update();\n                 }\n-                let uri = params.text_document.uri.as_str();\n-                if uri.ends_with(\"Cargo.toml\") || uri.ends_with(\"Cargo.lock\") {\n-                    if matches!(this.status, Status::Ready | Status::Invalid) {\n-                        this.transition(Status::NeedsReload);\n-                    }\n-                }\n+                this.maybe_refresh(params.text_document.uri.as_str());\n                 Ok(())\n             })?\n             .on::<lsp_types::notification::DidChangeConfiguration>(|this, _params| {"}, {"sha": "0a201fceb129771c776b881e5ec052d6ae2ce700", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=9ab59e2162bf7dcb120378e0c2e9fd6dac39c107", "patch": "@@ -10,7 +10,8 @@ use vfs::{file_set::FileSetConfig, AbsPath};\n \n use crate::{\n     config::{Config, FilesWatcher, LinkedProject},\n-    global_state::{GlobalState, Handle},\n+    global_state::{GlobalState, Handle, Status},\n+    lsp_ext,\n     main_loop::Task,\n };\n \n@@ -26,6 +27,32 @@ impl GlobalState {\n             self.reload_flycheck();\n         }\n     }\n+    pub(crate) fn maybe_refresh(&mut self, saved_doc_url: &str) {\n+        if !(saved_doc_url.ends_with(\"Cargo.toml\") || saved_doc_url.ends_with(\"Cargo.lock\")) {\n+            return;\n+        }\n+        match self.status {\n+            Status::Loading | Status::NeedsReload => return,\n+            Status::Ready | Status::Invalid => (),\n+        }\n+        if self.config.cargo_autoreload {\n+            self.fetch_workspaces();\n+        } else {\n+            self.transition(Status::NeedsReload);\n+        }\n+    }\n+    pub(crate) fn transition(&mut self, new_status: Status) {\n+        self.status = new_status;\n+        if self.config.client_caps.status_notification {\n+            let lsp_status = match new_status {\n+                Status::Loading => lsp_ext::Status::Loading,\n+                Status::Ready => lsp_ext::Status::Ready,\n+                Status::Invalid => lsp_ext::Status::Invalid,\n+                Status::NeedsReload => lsp_ext::Status::NeedsReload,\n+            };\n+            self.send_notification::<lsp_ext::StatusNotification>(lsp_status);\n+        }\n+    }\n     pub(crate) fn fetch_workspaces(&mut self) {\n         self.task_pool.handle.spawn({\n             let linked_projects = self.config.linked_projects.clone();\n@@ -53,10 +80,13 @@ impl GlobalState {\n     }\n     pub(crate) fn switch_workspaces(&mut self, workspaces: Vec<anyhow::Result<ProjectWorkspace>>) {\n         log::info!(\"reloading projects: {:?}\", self.config.linked_projects);\n+\n+        let mut has_errors = false;\n         let workspaces = workspaces\n             .into_iter()\n             .filter_map(|res| {\n                 res.map_err(|err| {\n+                    has_errors = true;\n                     log::error!(\"failed to load workspace: {:#}\", err);\n                     self.show_message(\n                         lsp_types::MessageType::Error,\n@@ -67,6 +97,14 @@ impl GlobalState {\n             })\n             .collect::<Vec<_>>();\n \n+        if &*self.workspaces == &workspaces {\n+            return;\n+        }\n+\n+        if !self.workspaces.is_empty() && has_errors {\n+            return;\n+        }\n+\n         if let FilesWatcher::Client = self.config.files.watcher {\n             let registration_options = lsp_types::DidChangeWatchedFilesRegistrationOptions {\n                 watchers: workspaces"}, {"sha": "aac4ba94f270830f1cbabc2200147fd3cc4f9fb4", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/9ab59e2162bf7dcb120378e0c2e9fd6dac39c107/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=9ab59e2162bf7dcb120378e0c2e9fd6dac39c107", "patch": "@@ -237,6 +237,11 @@\n                     \"default\": true,\n                     \"markdownDescription\": \"Whether to show `can't find Cargo.toml` error message\"\n                 },\n+                \"rust-analyzer.cargo.autoreload\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"markdownDescription\": \"Automatically refresh project info via `cargo metadata` on Cargo.toml changes\"\n+                },\n                 \"rust-analyzer.cargo.noDefaultFeatures\": {\n                     \"type\": \"boolean\",\n                     \"default\": false,"}]}