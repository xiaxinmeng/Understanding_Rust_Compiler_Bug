{"sha": "d55e73954a1019a1f5dea8fdca752b8f8e6647ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NWU3Mzk1NGExMDE5YTFmNWRlYThmZGNhNzUyYjhmOGU2NjQ3ZmY=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-20T00:59:26Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:04:43Z"}, "message": "Do not use BAB after calling unreachable.\n\nThis does not make unreachable and other terminators take self by-value\nbecause it is deemed too difficult. We would need to create by-value\nmethods on BAB that call into Builder, due to the Deref to builder.", "tree": {"sha": "11f3b8ab3297ec0eabea413516b2925e43ea3261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11f3b8ab3297ec0eabea413516b2925e43ea3261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d55e73954a1019a1f5dea8fdca752b8f8e6647ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d55e73954a1019a1f5dea8fdca752b8f8e6647ff", "html_url": "https://github.com/rust-lang/rust/commit/d55e73954a1019a1f5dea8fdca752b8f8e6647ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d55e73954a1019a1f5dea8fdca752b8f8e6647ff/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fac0a1a84891ccf38f0cfbaf7b93e1c64578bfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fac0a1a84891ccf38f0cfbaf7b93e1c64578bfb", "html_url": "https://github.com/rust-lang/rust/commit/6fac0a1a84891ccf38f0cfbaf7b93e1c64578bfb"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "dea0a2664a07ce6d1798a1c17087218c15363a04", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d55e73954a1019a1f5dea8fdca752b8f8e6647ff/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55e73954a1019a1f5dea8fdca752b8f8e6647ff/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=d55e73954a1019a1f5dea8fdca752b8f8e6647ff", "patch": "@@ -385,13 +385,14 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n \n     if fn_ret.0.is_never() {\n         bcx.unreachable();\n-    }\n-    self_scope.trans(&bcx);\n-\n-    if fcx.fn_ty.ret.is_indirect() || fcx.fn_ty.ret.is_ignore() {\n-        bcx.ret_void();\n     } else {\n-        bcx.ret(llret);\n+        self_scope.trans(&bcx);\n+\n+        if fcx.fn_ty.ret.is_indirect() || fcx.fn_ty.ret.is_ignore() {\n+            bcx.ret_void();\n+        } else {\n+            bcx.ret(llret);\n+        }\n     }\n \n     ccx.instances().borrow_mut().insert(method_instance, lloncefn);\n@@ -521,13 +522,14 @@ fn trans_fn_pointer_shim<'a, 'tcx>(\n \n     if fn_ret.0.is_never() {\n         bcx.unreachable();\n-    }\n-\n-    if fn_ty.ret.is_indirect() || fcx.fn_ty.ret.is_ignore() {\n-        bcx.ret_void();\n     } else {\n-        bcx.ret(llret);\n+        if fn_ty.ret.is_indirect() || fcx.fn_ty.ret.is_ignore() {\n+            bcx.ret_void();\n+        } else {\n+            bcx.ret(llret);\n+        }\n     }\n+\n     ccx.fn_pointer_shims().borrow_mut().insert(bare_fn_ty_maybe_ref, llfn);\n \n     llfn"}, {"sha": "89ea7a760d491e2f52c0a6ad75e3383320e95bb2", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d55e73954a1019a1f5dea8fdca752b8f8e6647ff/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55e73954a1019a1f5dea8fdca752b8f8e6647ff/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=d55e73954a1019a1f5dea8fdca752b8f8e6647ff", "patch": "@@ -102,12 +102,12 @@ pub fn trans_object_shim<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n \n     if fn_ret.0.is_never() {\n         bcx.unreachable();\n-    }\n-\n-    if fn_ty.ret.is_indirect() || fcx.fn_ty.ret.is_ignore() {\n-        bcx.ret_void();\n     } else {\n-        bcx.ret(llret);\n+        if fn_ty.ret.is_indirect() || fcx.fn_ty.ret.is_ignore() {\n+            bcx.ret_void();\n+        } else {\n+            bcx.ret(llret);\n+        }\n     }\n \n     llfn"}]}