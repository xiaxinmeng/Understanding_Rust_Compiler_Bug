{"sha": "1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "node_id": "C_kwDOAAsO6NoAKDFlZDJhOTRmZDJkN2UxNDQwNTMxZTA3OTMyYmI4NWJkZGNjNGMxYjE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-10T22:12:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-10T22:12:57Z"}, "message": "Rollup merge of #94274 - djkoloski:unknown_unstable_lints, r=tmandry\n\nTreat unstable lints as unknown\n\nThis change causes unstable lints to be ignored if the `unknown_lints`\nlint is allowed. To achieve this, it also changes lints to apply as soon\nas they are processed. Previously, lints in the same set were processed\nas a batch and then all simultaneously applied.\n\nImplementation of https://github.com/rust-lang/compiler-team/issues/469", "tree": {"sha": "c7611875d9d9b5cdd9722f9e6f3d06d3999df942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7611875d9d9b5cdd9722f9e6f3d06d3999df942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKnfpCRBK7hj4Ov3rIwAAzRkIABR7vnoegUmQi/lrfwH19F1N\nOWrv0G1ikvyNUh83J78V1Q97zaCXeCcjGH2pwum266EbwR9VTjgJJarIO6MRi8w3\nPFRNJZwvEx2Zh5kVNz8JiW7ypuH3vb/tf3vDPtkAObgU93+LIay/J+jORIKUYze+\nFdzMoSoh9P0c1s4mA0UhPZISsD0kCxh49F+ECq0iQYgwbOlsSc6t73KOzDYll7qW\na50YA0y5IPVcNXQWjV1UCiyqa0gpVoWXWsLJdhxpOX4sMEzX0dvZ5rngnjvHAx5V\n8QhNWsipJ0TMw23H32Pd34EeB5VmRtQkSSg3R08e6UsXuksWDF9E/MYTd7J5kws=\n=ij1Q\n-----END PGP SIGNATURE-----\n", "payload": "tree c7611875d9d9b5cdd9722f9e6f3d06d3999df942\nparent 5a7f09d9a3e56e2370731d1cdab78cbcb3451d0f\nparent 1c31a95df7de66dc7842b43facf185ef8a776e6f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646950377 +0100\ncommitter GitHub <noreply@github.com> 1646950377 +0100\n\nRollup merge of #94274 - djkoloski:unknown_unstable_lints, r=tmandry\n\nTreat unstable lints as unknown\n\nThis change causes unstable lints to be ignored if the `unknown_lints`\nlint is allowed. To achieve this, it also changes lints to apply as soon\nas they are processed. Previously, lints in the same set were processed\nas a batch and then all simultaneously applied.\n\nImplementation of https://github.com/rust-lang/compiler-team/issues/469\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "html_url": "https://github.com/rust-lang/rust/commit/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a7f09d9a3e56e2370731d1cdab78cbcb3451d0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7f09d9a3e56e2370731d1cdab78cbcb3451d0f", "html_url": "https://github.com/rust-lang/rust/commit/5a7f09d9a3e56e2370731d1cdab78cbcb3451d0f"}, {"sha": "1c31a95df7de66dc7842b43facf185ef8a776e6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c31a95df7de66dc7842b43facf185ef8a776e6f", "html_url": "https://github.com/rust-lang/rust/commit/1c31a95df7de66dc7842b43facf185ef8a776e6f"}], "stats": {"total": 497, "additions": 383, "deletions": 114}, "files": [{"sha": "66eb3bcf7ceefadb02650b727ca34d0dce1053fc", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -169,6 +169,8 @@ declare_features! (\n     (active, staged_api, \"1.0.0\", None, None),\n     /// Added for testing E0705; perma-unstable.\n     (active, test_2018_feature, \"1.31.0\", None, Some(Edition::Edition2018)),\n+    /// Added for testing unstable lints; perma-unstable.\n+    (active, test_unstable_lint, \"1.60.0\", None, None),\n     /// Allows non-`unsafe` \u2014and thus, unsound\u2014 access to `Pin` constructions.\n     /// Marked `incomplete` since perma-unstable and unsound.\n     (incomplete, unsafe_pin_internals, \"1.60.0\", None, None),"}, {"sha": "7b018e7f75fa7c3c947ad304983b95add0385891", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 72, "deletions": 44, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -17,7 +17,7 @@ use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n     Level, Lint, LintExpectationId, LintId,\n };\n-use rustc_session::parse::feature_err;\n+use rustc_session::parse::{add_feature_diagnostics, feature_err};\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};\n@@ -93,10 +93,19 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.store\n     }\n \n+    fn current_specs(&self) -> &FxHashMap<LintId, LevelAndSource> {\n+        &self.sets.list[self.cur].specs\n+    }\n+\n+    fn current_specs_mut(&mut self) -> &mut FxHashMap<LintId, LevelAndSource> {\n+        &mut self.sets.list[self.cur].specs\n+    }\n+\n     fn process_command_line(&mut self, sess: &Session, store: &LintStore) {\n-        let mut specs = FxHashMap::default();\n         self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n+        self.cur =\n+            self.sets.list.push(LintSet { specs: FxHashMap::default(), parent: COMMAND_LINE });\n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n             store.check_lint_name_cmdline(sess, &lint_name, level, self.registered_tools);\n             let orig_level = level;\n@@ -108,30 +117,24 @@ impl<'s> LintLevelsBuilder<'s> {\n             };\n             for id in ids {\n                 // ForceWarn and Forbid cannot be overriden\n-                if let Some((Level::ForceWarn | Level::Forbid, _)) = specs.get(&id) {\n+                if let Some((Level::ForceWarn | Level::Forbid, _)) = self.current_specs().get(&id) {\n                     continue;\n                 }\n \n-                self.check_gated_lint(id, DUMMY_SP);\n-                let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);\n-                specs.insert(id, (level, src));\n+                if self.check_gated_lint(id, DUMMY_SP) {\n+                    let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);\n+                    self.current_specs_mut().insert(id, (level, src));\n+                }\n             }\n         }\n-\n-        self.cur = self.sets.list.push(LintSet { specs, parent: COMMAND_LINE });\n     }\n \n     /// Attempts to insert the `id` to `level_src` map entry. If unsuccessful\n     /// (e.g. if a forbid was already inserted on the same scope), then emits a\n     /// diagnostic with no change to `specs`.\n-    fn insert_spec(\n-        &mut self,\n-        specs: &mut FxHashMap<LintId, LevelAndSource>,\n-        id: LintId,\n-        (level, src): LevelAndSource,\n-    ) {\n+    fn insert_spec(&mut self, id: LintId, (level, src): LevelAndSource) {\n         let (old_level, old_src) =\n-            self.sets.get_lint_level(id.lint, self.cur, Some(&specs), &self.sess);\n+            self.sets.get_lint_level(id.lint, self.cur, Some(self.current_specs()), &self.sess);\n         // Setting to a non-forbid level is an error if the lint previously had\n         // a forbid level. Note that this is not necessarily true even with a\n         // `#[forbid(..)]` attribute present, as that is overriden by `--cap-lints`.\n@@ -154,7 +157,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                 };\n                 debug!(\n                     \"fcw_warning={:?}, specs.get(&id) = {:?}, old_src={:?}, id_name={:?}\",\n-                    fcw_warning, specs, old_src, id_name\n+                    fcw_warning,\n+                    self.current_specs(),\n+                    old_src,\n+                    id_name\n                 );\n \n                 let decorate_diag = |diag: &mut Diagnostic| {\n@@ -213,9 +219,9 @@ impl<'s> LintLevelsBuilder<'s> {\n             }\n         }\n         if let Level::ForceWarn = old_level {\n-            specs.insert(id, (old_level, old_src));\n+            self.current_specs_mut().insert(id, (old_level, old_src));\n         } else {\n-            specs.insert(id, (level, src));\n+            self.current_specs_mut().insert(id, (level, src));\n         }\n     }\n \n@@ -239,7 +245,9 @@ impl<'s> LintLevelsBuilder<'s> {\n         is_crate_node: bool,\n         source_hir_id: Option<HirId>,\n     ) -> BuilderPush {\n-        let mut specs = FxHashMap::default();\n+        let prev = self.cur;\n+        self.cur = self.sets.list.push(LintSet { specs: FxHashMap::default(), parent: prev });\n+\n         let sess = self.sess;\n         let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n         for (attr_index, attr) in attrs.iter().enumerate() {\n@@ -348,8 +356,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                             reason,\n                         );\n                         for &id in *ids {\n-                            self.check_gated_lint(id, attr.span);\n-                            self.insert_spec(&mut specs, id, (level, src));\n+                            if self.check_gated_lint(id, attr.span) {\n+                                self.insert_spec(id, (level, src));\n+                            }\n                         }\n                         if let Level::Expect(expect_id) = level {\n                             self.lint_expectations\n@@ -368,7 +377,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     reason,\n                                 );\n                                 for id in ids {\n-                                    self.insert_spec(&mut specs, *id, (level, src));\n+                                    self.insert_spec(*id, (level, src));\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations\n@@ -377,8 +386,12 @@ impl<'s> LintLevelsBuilder<'s> {\n                             }\n                             Err((Some(ids), ref new_lint_name)) => {\n                                 let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n-                                let (lvl, src) =\n-                                    self.sets.get_lint_level(lint, self.cur, Some(&specs), &sess);\n+                                let (lvl, src) = self.sets.get_lint_level(\n+                                    lint,\n+                                    self.cur,\n+                                    Some(self.current_specs()),\n+                                    &sess,\n+                                );\n                                 struct_lint_level(\n                                     self.sess,\n                                     lint,\n@@ -408,7 +421,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     reason,\n                                 );\n                                 for id in ids {\n-                                    self.insert_spec(&mut specs, *id, (level, src));\n+                                    self.insert_spec(*id, (level, src));\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations\n@@ -448,8 +461,12 @@ impl<'s> LintLevelsBuilder<'s> {\n \n                     CheckLintNameResult::Warning(msg, renamed) => {\n                         let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n-                        let (renamed_lint_level, src) =\n-                            self.sets.get_lint_level(lint, self.cur, Some(&specs), &sess);\n+                        let (renamed_lint_level, src) = self.sets.get_lint_level(\n+                            lint,\n+                            self.cur,\n+                            Some(self.current_specs()),\n+                            &sess,\n+                        );\n                         struct_lint_level(\n                             self.sess,\n                             lint,\n@@ -472,8 +489,12 @@ impl<'s> LintLevelsBuilder<'s> {\n                     }\n                     CheckLintNameResult::NoLint(suggestion) => {\n                         let lint = builtin::UNKNOWN_LINTS;\n-                        let (level, src) =\n-                            self.sets.get_lint_level(lint, self.cur, Some(&specs), self.sess);\n+                        let (level, src) = self.sets.get_lint_level(\n+                            lint,\n+                            self.cur,\n+                            Some(self.current_specs()),\n+                            self.sess,\n+                        );\n                         struct_lint_level(self.sess, lint, level, src, Some(sp.into()), |lint| {\n                             let name = if let Some(tool_ident) = tool_ident {\n                                 format!(\"{}::{}\", tool_ident.name, name)\n@@ -504,8 +525,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                     {\n                         let src = LintLevelSource::Node(Symbol::intern(&new_name), sp, reason);\n                         for &id in ids {\n-                            self.check_gated_lint(id, attr.span);\n-                            self.insert_spec(&mut specs, id, (level, src));\n+                            if self.check_gated_lint(id, attr.span) {\n+                                self.insert_spec(id, (level, src));\n+                            }\n                         }\n                         if let Level::Expect(expect_id) = level {\n                             self.lint_expectations\n@@ -519,7 +541,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         }\n \n         if !is_crate_node {\n-            for (id, &(level, ref src)) in specs.iter() {\n+            for (id, &(level, ref src)) in self.current_specs().iter() {\n                 if !id.lint.crate_level_only {\n                     continue;\n                 }\n@@ -530,7 +552,7 @@ impl<'s> LintLevelsBuilder<'s> {\n \n                 let lint = builtin::UNUSED_ATTRIBUTES;\n                 let (lint_level, lint_src) =\n-                    self.sets.get_lint_level(lint, self.cur, Some(&specs), self.sess);\n+                    self.sets.get_lint_level(lint, self.cur, Some(self.current_specs()), self.sess);\n                 struct_lint_level(\n                     self.sess,\n                     lint,\n@@ -551,9 +573,9 @@ impl<'s> LintLevelsBuilder<'s> {\n             }\n         }\n \n-        let prev = self.cur;\n-        if !specs.is_empty() {\n-            self.cur = self.sets.list.push(LintSet { specs, parent: prev });\n+        if self.current_specs().is_empty() {\n+            self.sets.list.pop();\n+            self.cur = prev;\n         }\n \n         BuilderPush { prev, changed: prev != self.cur }\n@@ -574,18 +596,24 @@ impl<'s> LintLevelsBuilder<'s> {\n     }\n \n     /// Checks if the lint is gated on a feature that is not enabled.\n-    fn check_gated_lint(&self, lint_id: LintId, span: Span) {\n+    ///\n+    /// Returns `true` if the lint's feature is enabled.\n+    fn check_gated_lint(&self, lint_id: LintId, span: Span) -> bool {\n         if let Some(feature) = lint_id.lint.feature_gate {\n             if !self.sess.features_untracked().enabled(feature) {\n-                feature_err(\n-                    &self.sess.parse_sess,\n-                    feature,\n-                    span,\n-                    &format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower()),\n-                )\n-                .emit();\n+                let lint = builtin::UNKNOWN_LINTS;\n+                let (level, src) = self.lint_level(builtin::UNKNOWN_LINTS);\n+                struct_lint_level(self.sess, lint, level, src, Some(span.into()), |lint_db| {\n+                    let mut db =\n+                        lint_db.build(&format!(\"unknown lint: `{}`\", lint_id.lint.name_lower()));\n+                    db.note(&format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower(),));\n+                    add_feature_diagnostics(&mut db, &self.sess.parse_sess, feature);\n+                    db.emit();\n+                });\n+                return false;\n             }\n         }\n+        true\n     }\n \n     /// Called after `push` when the scope of a set of attributes are exited."}, {"sha": "8539e8868e2c7aa0df9ab3388bfa6d230ab00c97", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -3128,6 +3128,7 @@ declare_lint_pass! {\n         SUSPICIOUS_AUTO_TRAIT_IMPLS,\n         UNEXPECTED_CFGS,\n         DEPRECATED_WHERE_CLAUSE_LOCATION,\n+        TEST_UNSTABLE_LINT,\n     ]\n }\n \n@@ -3771,3 +3772,25 @@ declare_lint! {\n     Warn,\n     \"deprecated where clause location\"\n }\n+\n+declare_lint! {\n+    /// The `test_unstable_lint` lint tests unstable lints and is perma-unstable.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```\n+    /// #![allow(test_unstable_lint)]\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// In order to test the behavior of unstable lints, a permanently-unstable\n+    /// lint is required. This lint can be used to trigger warnings and errors\n+    /// from the compiler related to unstable lints.\n+    pub TEST_UNSTABLE_LINT,\n+    Deny,\n+    \"this unstable lint is only for testing\",\n+    @feature_gate = sym::test_unstable_lint;\n+}"}, {"sha": "d34a3360a83e215a0621fa36f49742fac19e6454", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -98,7 +98,26 @@ pub fn feature_err_issue<'a>(\n     explain: &str,\n ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     let mut err = sess.span_diagnostic.struct_span_err_with_code(span, explain, error_code!(E0658));\n+    add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);\n+    err\n+}\n+\n+/// Adds the diagnostics for a feature to an existing error.\n+pub fn add_feature_diagnostics<'a>(err: &mut Diagnostic, sess: &'a ParseSess, feature: Symbol) {\n+    add_feature_diagnostics_for_issue(err, sess, feature, GateIssue::Language);\n+}\n \n+/// Adds the diagnostics for a feature to an existing error.\n+///\n+/// This variant allows you to control whether it is a library or language feature.\n+/// Almost always, you want to use this for a language feature. If so, prefer\n+/// `add_feature_diagnostics`.\n+pub fn add_feature_diagnostics_for_issue<'a>(\n+    err: &mut Diagnostic,\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    issue: GateIssue,\n+) {\n     if let Some(n) = find_feature_issue(feature, issue) {\n         err.note(&format!(\n             \"see issue #{} <https://github.com/rust-lang/rust/issues/{}> for more information\",\n@@ -110,8 +129,6 @@ pub fn feature_err_issue<'a>(\n     if sess.unstable_features.is_nightly_build() {\n         err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n     }\n-\n-    err\n }\n \n /// Info about a parsing session."}, {"sha": "e820cb28552e125e28dac5b19edabf1d370138f1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -1385,6 +1385,7 @@ symbols! {\n         test_case,\n         test_removed_feature,\n         test_runner,\n+        test_unstable_lint,\n         then_with,\n         thread,\n         thread_local,"}, {"sha": "29a6e1f8a016dce09c0fc95ff37c9e1803075725", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -1,31 +1,34 @@\n+// check-fail\n+\n #![deny(non_exhaustive_omitted_patterns)]\n-//~^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-//~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+//~^ WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+//~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n #![allow(non_exhaustive_omitted_patterns)]\n-//~^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-//~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+//~^ WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+//~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n \n fn main() {\n     enum Foo {\n         A, B, C,\n     }\n \n     #[allow(non_exhaustive_omitted_patterns)]\n+    //~^ WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+    //~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+    //~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+    //~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n     match Foo::A {\n         Foo::A => {}\n         Foo::B => {}\n     }\n-    //~^^^^^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~^^^^ ERROR non-exhaustive patterns: `C` not covered\n \n     match Foo::A {\n         Foo::A => {}\n         Foo::B => {}\n         #[warn(non_exhaustive_omitted_patterns)]\n         _ => {}\n     }\n-    //~^^^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~^^^ WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+    //~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n }"}, {"sha": "dbeef6c2d2ae2533c03e17fea9190959c51d47d8", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -1,93 +1,124 @@\n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:1:1\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:3:1\n    |\n LL | #![deny(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `#[warn(unknown_lints)]` on by default\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:4:1\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:6:1\n    |\n LL | #![allow(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5\n    |\n LL |     #[allow(non_exhaustive_omitted_patterns)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5\n    |\n LL |     #[allow(non_exhaustive_omitted_patterns)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:26:9\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:29:9\n    |\n LL |         #[warn(non_exhaustive_omitted_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:1:1\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:3:1\n    |\n LL | #![deny(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:4:1\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:6:1\n    |\n LL | #![allow(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5\n    |\n LL |     #[allow(non_exhaustive_omitted_patterns)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5\n    |\n LL |     #[allow(non_exhaustive_omitted_patterns)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:26:9\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:29:9\n    |\n LL |         #[warn(non_exhaustive_omitted_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error: aborting due to 10 previous errors\n+error[E0004]: non-exhaustive patterns: `C` not covered\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:20:11\n+   |\n+LL |     match Foo::A {\n+   |           ^^^^^^ pattern `C` not covered\n+   |\n+note: `Foo` defined here\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:12:15\n+   |\n+LL |     enum Foo {\n+   |          ---\n+LL |         A, B, C,\n+   |               ^ not covered\n+   = note: the matched value is of type `Foo`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n+   |\n+LL ~         Foo::B => {}\n+LL +         C => todo!()\n+   |\n+\n+error: aborting due to previous error; 10 warnings emitted\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "c398394cbe1a6afa26dad4c797a5f65250955968", "filename": "src/test/ui/feature-gates/feature-gate-test_unstable_lint.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+// `test_unstable_lint` is for testing and should never be stabilized.\n+#![allow(test_unstable_lint)]\n+//~^ WARNING unknown lint: `test_unstable_lint`\n+//~| WARNING unknown lint: `test_unstable_lint`\n+//~| WARNING unknown lint: `test_unstable_lint`\n+\n+fn main() {}"}, {"sha": "a29322443ea983948cbfb8e51267735de5692ff1", "filename": "src/test/ui/feature-gates/feature-gate-test_unstable_lint.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -0,0 +1,30 @@\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/feature-gate-test_unstable_lint.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unknown_lints)]` on by default\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/feature-gate-test_unstable_lint.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/feature-gate-test_unstable_lint.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "b73a76555296fc5b5c7e1c2dae7cbc65d6b42d16", "filename": "src/test/ui/lint/must_not_suspend/gated.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -1,12 +1,15 @@\n+// check-pass\n+\n // edition:2018\n-#![deny(must_not_suspend)]  //~ ERROR the `must_not_suspend`\n-//~| ERROR the `must_not_suspend`\n-//~| ERROR the `must_not_suspend`\n+#![deny(must_not_suspend)]\n+//~^ WARNING unknown lint: `must_not_suspend`\n+//~| WARNING unknown lint: `must_not_suspend`\n+//~| WARNING unknown lint: `must_not_suspend`\n \n async fn other() {}\n \n pub async fn uhoh(m: std::sync::Mutex<()>) {\n-    let _guard = m.lock().unwrap(); //~ ERROR `MutexGuard` held across\n+    let _guard = m.lock().unwrap();\n     other().await;\n }\n "}, {"sha": "b58ecb55596ab01f4ee49ba81428cc9fed8add0f", "filename": "src/test/ui/lint/must_not_suspend/gated.stderr", "status": "modified", "additions": 11, "deletions": 32, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -1,54 +1,33 @@\n-error[E0658]: the `must_not_suspend` lint is unstable\n-  --> $DIR/gated.rs:2:1\n+warning: unknown lint: `must_not_suspend`\n+  --> $DIR/gated.rs:4:1\n    |\n LL | #![deny(must_not_suspend)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `#[warn(unknown_lints)]` on by default\n+   = note: the `must_not_suspend` lint is unstable\n    = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n    = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n \n-error[E0658]: the `must_not_suspend` lint is unstable\n-  --> $DIR/gated.rs:2:1\n+warning: unknown lint: `must_not_suspend`\n+  --> $DIR/gated.rs:4:1\n    |\n LL | #![deny(must_not_suspend)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `must_not_suspend` lint is unstable\n    = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n    = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n \n-error[E0658]: the `must_not_suspend` lint is unstable\n-  --> $DIR/gated.rs:2:1\n+warning: unknown lint: `must_not_suspend`\n+  --> $DIR/gated.rs:4:1\n    |\n LL | #![deny(must_not_suspend)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `must_not_suspend` lint is unstable\n    = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n    = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n \n-error: `MutexGuard` held across a suspend point, but should not be\n-  --> $DIR/gated.rs:9:9\n-   |\n-LL |     let _guard = m.lock().unwrap();\n-   |         ^^^^^^\n-LL |     other().await;\n-   |            ------ the value is held across this suspend point\n-   |\n-note: the lint level is defined here\n-  --> $DIR/gated.rs:2:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n-note: holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n-  --> $DIR/gated.rs:9:9\n-   |\n-LL |     let _guard = m.lock().unwrap();\n-   |         ^^^^^^\n-help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/gated.rs:9:9\n-   |\n-LL |     let _guard = m.lock().unwrap();\n-   |         ^^^^^^\n-\n-error: aborting due to 4 previous errors\n+warning: 3 warnings emitted\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "80e30f23993e34242c4ee5b022abc6ede61f6386", "filename": "src/test/ui/unknown-unstable-lints/allow-unknown-unstable-lint-command-line.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-command-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-command-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-command-line.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -0,0 +1,4 @@\n+// check-pass\n+// compile-flags: -Aunknown_lints -Atest_unstable_lint\n+\n+fn main() {}"}, {"sha": "992472c894a8c2c461626b322863bdbcf9be6946", "filename": "src/test/ui/unknown-unstable-lints/allow-unknown-unstable-lint-inline.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-inline.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -0,0 +1,5 @@\n+// check-pass\n+\n+#![allow(unknown_lints, test_unstable_lint)]\n+\n+fn main() {}"}, {"sha": "dcc06850de174d15d56e732be7fc3343ab61170d", "filename": "src/test/ui/unknown-unstable-lints/deny-unstable-lint-command-line.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -0,0 +1,6 @@\n+// check-fail\n+// compile-flags: -Dunknown_lints -Atest_unstable_lint\n+// error-pattern: unknown lint: `test_unstable_lint`\n+// error-pattern: the `test_unstable_lint` lint is unstable\n+\n+fn main() {}"}, {"sha": "7e6885bd70646dd27126d9670286e2146b5f2867", "filename": "src/test/ui/unknown-unstable-lints/deny-unstable-lint-command-line.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.stderr?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -0,0 +1,18 @@\n+error: unknown lint: `test_unstable_lint`\n+   |\n+   = note: requested on the command line with `-D unknown-lints`\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: unknown lint: `test_unstable_lint`\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: unknown lint: `test_unstable_lint`\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c6c60b12d83e91615d814014381743cb3954d4cb", "filename": "src/test/ui/unknown-unstable-lints/deny-unstable-lint-inline.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -0,0 +1,9 @@\n+// check-fail\n+\n+#![deny(unknown_lints)]\n+#![allow(test_unstable_lint)]\n+//~^ ERROR unknown lint: `test_unstable_lint`\n+//~| ERROR unknown lint: `test_unstable_lint`\n+//~| ERROR unknown lint: `test_unstable_lint`\n+\n+fn main() {}"}, {"sha": "2d1027dd0e05f6d22531cbf3755ba39fd533ee18", "filename": "src/test/ui/unknown-unstable-lints/deny-unstable-lint-inline.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.stderr?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -0,0 +1,34 @@\n+error: unknown lint: `test_unstable_lint`\n+  --> $DIR/deny-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deny-unstable-lint-inline.rs:3:9\n+   |\n+LL | #![deny(unknown_lints)]\n+   |         ^^^^^^^^^^^^^\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: unknown lint: `test_unstable_lint`\n+  --> $DIR/deny-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: unknown lint: `test_unstable_lint`\n+  --> $DIR/deny-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "3778291ebb44771c555548ba79c94c5bece4bf63", "filename": "src/test/ui/unknown-unstable-lints/warn-unknown-unstable-lint-command-line.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -0,0 +1,6 @@\n+// check-pass\n+// compile-flags: -Wunknown_lints -Atest_unstable_lint\n+// error-pattern: unknown lint: `test_unstable_lint`\n+// error-pattern: the `test_unstable_lint` lint is unstable\n+\n+fn main() {}"}, {"sha": "799d740b00ef22c9ab8d2c45869a8350e214377b", "filename": "src/test/ui/unknown-unstable-lints/warn-unknown-unstable-lint-command-line.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.stderr?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -0,0 +1,18 @@\n+warning: unknown lint: `test_unstable_lint`\n+   |\n+   = note: requested on the command line with `-W unknown-lints`\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "f4247e4569eb7ed7be7439cf5cac23760d669173", "filename": "src/test/ui/unknown-unstable-lints/warn-unknown-unstable-lint-inline.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.rs?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![warn(unknown_lints)]\n+#![allow(test_unstable_lint)]\n+//~^ WARNING unknown lint: `test_unstable_lint`\n+//~| WARNING unknown lint: `test_unstable_lint`\n+//~| WARNING unknown lint: `test_unstable_lint`\n+\n+fn main() {}"}, {"sha": "142558b471b480785c294b94959b742d1cbeed12", "filename": "src/test/ui/unknown-unstable-lints/warn-unknown-unstable-lint-inline.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.stderr?ref=1ed2a94fd2d7e1440531e07932bb85bddcc4c1b1", "patch": "@@ -0,0 +1,34 @@\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/warn-unknown-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/warn-unknown-unstable-lint-inline.rs:3:9\n+   |\n+LL | #![warn(unknown_lints)]\n+   |         ^^^^^^^^^^^^^\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/warn-unknown-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/warn-unknown-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: 3 warnings emitted\n+"}]}