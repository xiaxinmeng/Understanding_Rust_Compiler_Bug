{"sha": "66b701ed3e9980c4441f963467e49c687a4afca5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YjcwMWVkM2U5OTgwYzQ0NDFmOTYzNDY3ZTQ5YzY4N2E0YWZjYTU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-16T13:46:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-16T13:51:01Z"}, "message": "Simplify", "tree": {"sha": "9869ae6fecd133d251adbf07db284e5f49f6a3e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9869ae6fecd133d251adbf07db284e5f49f6a3e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66b701ed3e9980c4441f963467e49c687a4afca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66b701ed3e9980c4441f963467e49c687a4afca5", "html_url": "https://github.com/rust-lang/rust/commit/66b701ed3e9980c4441f963467e49c687a4afca5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66b701ed3e9980c4441f963467e49c687a4afca5/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c034c084d79f20c5208208a891f38bf582433e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c034c084d79f20c5208208a891f38bf582433e6", "html_url": "https://github.com/rust-lang/rust/commit/1c034c084d79f20c5208208a891f38bf582433e6"}], "stats": {"total": 100, "additions": 34, "deletions": 66}, "files": [{"sha": "783305005ca5d0d116c305ce6e32c0abe41b503e", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/66b701ed3e9980c4441f963467e49c687a4afca5/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b701ed3e9980c4441f963467e49c687a4afca5/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=66b701ed3e9980c4441f963467e49c687a4afca5", "patch": "@@ -131,9 +131,6 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<hir::Name>,\n     ) {\n-        if ctx.expects_type() {\n-            return;\n-        }\n         self.add_opt(render_fn(RenderContext::new(ctx), None, local_name, func));\n     }\n \n@@ -175,9 +172,6 @@ impl Completions {\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n-        if ctx.expects_type() {\n-            return;\n-        }\n         self.add_opt(render_const(RenderContext::new(ctx), constant));\n     }\n \n@@ -209,32 +203,30 @@ impl Completions {\n         variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n-        if ctx.expects_type() {\n-            return;\n-        }\n         let item = render_variant(RenderContext::new(ctx), None, local_name, variant, None);\n         self.add(item);\n     }\n }\n \n+/// Calls the callback for each variant of the provided enum with the path to the variant.\n fn complete_enum_variants(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    enum_data: hir::Enum,\n+    enum_: hir::Enum,\n     cb: impl Fn(&mut Completions, &CompletionContext, hir::Variant, hir::ModPath),\n ) {\n-    let variants = enum_data.variants(ctx.db);\n+    let variants = enum_.variants(ctx.db);\n \n     let module = if let Some(module) = ctx.scope.module() {\n         // Compute path from the completion site if available.\n         module\n     } else {\n         // Otherwise fall back to the enum's definition site.\n-        enum_data.module(ctx.db)\n+        enum_.module(ctx.db)\n     };\n \n     if let Some(impl_) = ctx.impl_def.as_ref().and_then(|impl_| ctx.sema.to_def(impl_)) {\n-        if impl_.self_ty(ctx.db).as_adt() == Some(hir::Adt::Enum(enum_data)) {\n+        if impl_.self_ty(ctx.db).as_adt() == Some(hir::Adt::Enum(enum_)) {\n             for &variant in &variants {\n                 let self_path = hir::ModPath::from_segments(\n                     hir::PathKind::Plain,"}, {"sha": "2bd2c44d0a99f1fd570e577d5e38cc33b13c39c4", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 27, "deletions": 51, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/66b701ed3e9980c4441f963467e49c687a4afca5/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b701ed3e9980c4441f963467e49c687a4afca5/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=66b701ed3e9980c4441f963467e49c687a4afca5", "patch": "@@ -23,50 +23,6 @@ use crate::{\n     render::{enum_variant::render_variant, function::render_fn, macro_::render_macro},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, CompletionRelevance,\n };\n-\n-pub(crate) fn render_field(\n-    ctx: RenderContext<'_>,\n-    receiver: Option<hir::Name>,\n-    field: hir::Field,\n-    ty: &hir::Type,\n-) -> CompletionItem {\n-    render_field_(ctx, receiver, field, ty)\n-}\n-\n-pub(crate) fn render_tuple_field(\n-    ctx: RenderContext<'_>,\n-    receiver: Option<hir::Name>,\n-    field: usize,\n-    ty: &hir::Type,\n-) -> CompletionItem {\n-    render_tuple_field_(ctx, receiver, field, ty)\n-}\n-\n-pub(crate) fn render_resolution(\n-    ctx: RenderContext<'_>,\n-    local_name: hir::Name,\n-    resolution: &hir::ScopeDef,\n-) -> Option<CompletionItem> {\n-    render_resolution_(ctx, local_name, None, resolution)\n-}\n-\n-pub(crate) fn render_resolution_with_import(\n-    ctx: RenderContext<'_>,\n-    import_edit: ImportEdit,\n-) -> Option<CompletionItem> {\n-    let resolution = hir::ScopeDef::from(import_edit.import.original_item);\n-    let local_name = match resolution {\n-        hir::ScopeDef::ModuleDef(hir::ModuleDef::Function(f)) => f.name(ctx.completion.db),\n-        hir::ScopeDef::ModuleDef(hir::ModuleDef::Const(c)) => c.name(ctx.completion.db)?,\n-        hir::ScopeDef::ModuleDef(hir::ModuleDef::TypeAlias(t)) => t.name(ctx.completion.db),\n-        _ => item_name(ctx.db(), import_edit.import.original_item)?,\n-    };\n-    render_resolution_(ctx, local_name, Some(import_edit), &resolution).map(|mut item| {\n-        item.completion_kind = CompletionKind::Magic;\n-        item\n-    })\n-}\n-\n /// Interface for data and methods required for items rendering.\n #[derive(Debug)]\n pub(crate) struct RenderContext<'a> {\n@@ -119,7 +75,7 @@ impl<'a> RenderContext<'a> {\n     }\n }\n \n-fn render_field_(\n+pub(crate) fn render_field(\n     ctx: RenderContext<'_>,\n     receiver: Option<hir::Name>,\n     field: hir::Field,\n@@ -132,7 +88,6 @@ fn render_field_(\n         ctx.source_range(),\n         receiver.map_or_else(|| name.clone(), |receiver| format!(\"{}.{}\", receiver, name)),\n     );\n-\n     item.set_relevance(CompletionRelevance {\n         type_match: compute_type_match(ctx.completion, ty),\n         exact_name_match: compute_exact_name_match(ctx.completion, &name),\n@@ -143,17 +98,15 @@ fn render_field_(\n         .set_documentation(field.docs(ctx.db()))\n         .set_deprecated(is_deprecated)\n         .lookup_by(name);\n-\n     if let Some(_ref_match) = compute_ref_match(ctx.completion, ty) {\n         // FIXME\n         // For now we don't properly calculate the edits for ref match\n         // completions on struct fields, so we've disabled them. See #8058.\n     }\n-\n     item.build()\n }\n \n-fn render_tuple_field_(\n+pub(crate) fn render_tuple_field(\n     ctx: RenderContext<'_>,\n     receiver: Option<hir::Name>,\n     field: usize,\n@@ -164,14 +117,37 @@ fn render_tuple_field_(\n         ctx.source_range(),\n         receiver.map_or_else(|| field.to_string(), |receiver| format!(\"{}.{}\", receiver, field)),\n     );\n-\n     item.kind(SymbolKind::Field)\n         .detail(ty.display(ctx.db()).to_string())\n         .lookup_by(field.to_string());\n-\n     item.build()\n }\n \n+pub(crate) fn render_resolution(\n+    ctx: RenderContext<'_>,\n+    local_name: hir::Name,\n+    resolution: &hir::ScopeDef,\n+) -> Option<CompletionItem> {\n+    render_resolution_(ctx, local_name, None, resolution)\n+}\n+\n+pub(crate) fn render_resolution_with_import(\n+    ctx: RenderContext<'_>,\n+    import_edit: ImportEdit,\n+) -> Option<CompletionItem> {\n+    let resolution = hir::ScopeDef::from(import_edit.import.original_item);\n+    let local_name = match resolution {\n+        hir::ScopeDef::ModuleDef(hir::ModuleDef::Function(f)) => f.name(ctx.completion.db),\n+        hir::ScopeDef::ModuleDef(hir::ModuleDef::Const(c)) => c.name(ctx.completion.db)?,\n+        hir::ScopeDef::ModuleDef(hir::ModuleDef::TypeAlias(t)) => t.name(ctx.completion.db),\n+        _ => item_name(ctx.db(), import_edit.import.original_item)?,\n+    };\n+    render_resolution_(ctx, local_name, Some(import_edit), &resolution).map(|mut item| {\n+        item.completion_kind = CompletionKind::Magic;\n+        item\n+    })\n+}\n+\n fn render_resolution_(\n     ctx: RenderContext<'_>,\n     local_name: hir::Name,"}, {"sha": "3a7238bb8128d123f9780e7a93a110a53bec3ecb", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66b701ed3e9980c4441f963467e49c687a4afca5/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b701ed3e9980c4441f963467e49c687a4afca5/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=66b701ed3e9980c4441f963467e49c687a4afca5", "patch": "@@ -180,7 +180,7 @@ fn main() { frobnicate!(); }\n /// ```\n macro_rules! vec { () => {} }\n \n-fn fn main() { v$0 }\n+fn main() { v$0 }\n \"#,\n             r#\"\n /// Creates a [`Vec`] containing the arguments.\n@@ -193,7 +193,7 @@ fn fn main() { v$0 }\n /// ```\n macro_rules! vec { () => {} }\n \n-fn fn main() { vec![$0] }\n+fn main() { vec![$0] }\n \"#,\n         );\n "}]}