{"sha": "31a3bb59ce42ae86e19c2e316d0809e8606c810f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYTNiYjU5Y2U0MmFlODZlMTljMmUzMTZkMDgwOWU4NjA2YzgxMGY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-07-25T20:48:29Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-07-25T20:48:29Z"}, "message": "Remove manual normalization in compare_projection_bounds", "tree": {"sha": "dd09c31e9e19daed6fa6a86e1f4cf70c22b926a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd09c31e9e19daed6fa6a86e1f4cf70c22b926a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31a3bb59ce42ae86e19c2e316d0809e8606c810f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31a3bb59ce42ae86e19c2e316d0809e8606c810f", "html_url": "https://github.com/rust-lang/rust/commit/31a3bb59ce42ae86e19c2e316d0809e8606c810f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31a3bb59ce42ae86e19c2e316d0809e8606c810f/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83a9dc92d58c8145b3fb0cec5ea205ad66c399a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/83a9dc92d58c8145b3fb0cec5ea205ad66c399a7", "html_url": "https://github.com/rust-lang/rust/commit/83a9dc92d58c8145b3fb0cec5ea205ad66c399a7"}], "stats": {"total": 79, "additions": 25, "deletions": 54}, "files": [{"sha": "bf415406675bba54a07c7405045e7c8c9626920a", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 50, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/31a3bb59ce42ae86e19c2e316d0809e8606c810f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a3bb59ce42ae86e19c2e316d0809e8606c810f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=31a3bb59ce42ae86e19c2e316d0809e8606c810f", "patch": "@@ -6,15 +6,14 @@ use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_middle::ty;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n+use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::util::ExplicitSelf;\n-use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt, WithConstness};\n+use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n \n use super::{potentially_plural_count, FnCtxt, Inherited};\n-use std::iter;\n \n /// Checks that a method from an impl conforms to the signature of\n /// the same method as declared in the trait.\n@@ -1240,22 +1239,6 @@ fn compare_projection_bounds<'tcx>(\n         ty::ParamEnv::new(tcx.intern_predicates(&predicates), Reveal::UserFacing, None)\n     };\n \n-    // Map the predicate from the trait to the corresponding one for the impl.\n-    // For example:\n-    //\n-    // trait X<A> { type Y<'a>: PartialEq<A> } impl X for T { type Y<'a> = &'a S; }\n-    // impl<'x> X<&'x u32> for () { type Y<'c> = &'c u32; }\n-    //\n-    // For the `for<'a> <<Self as X<A>>::Y<'a>: PartialEq<A>` bound, this\n-    // function would translate and partially normalize\n-    // `[<Self as X<A>>::Y<'a>, A]` to `[&'a u32, &'x u32]`.\n-    let translate_predicate_substs = move |predicate_substs: SubstsRef<'tcx>| {\n-        tcx.mk_substs(\n-            iter::once(impl_ty_value.into())\n-                .chain(predicate_substs[1..].iter().map(|s| s.subst(tcx, rebased_substs))),\n-        )\n-    };\n-\n     tcx.infer_ctxt().enter(move |infcx| {\n         let inh = Inherited::new(infcx, impl_ty.def_id.expect_local());\n         let infcx = &inh.infcx;\n@@ -1270,39 +1253,10 @@ fn compare_projection_bounds<'tcx>(\n         );\n \n         let predicates = tcx.projection_predicates(trait_ty.def_id);\n-\n         debug!(\"compare_projection_bounds: projection_predicates={:?}\", predicates);\n \n         for predicate in predicates {\n-            let concrete_ty_predicate = match predicate.kind() {\n-                ty::PredicateKind::Trait(poly_tr, c) => poly_tr\n-                    .map_bound(|tr| {\n-                        let trait_substs = translate_predicate_substs(tr.trait_ref.substs);\n-                        ty::TraitRef { def_id: tr.def_id(), substs: trait_substs }\n-                    })\n-                    .with_constness(*c)\n-                    .to_predicate(tcx),\n-                ty::PredicateKind::Projection(poly_projection) => poly_projection\n-                    .map_bound(|projection| {\n-                        let projection_substs =\n-                            translate_predicate_substs(projection.projection_ty.substs);\n-                        ty::ProjectionPredicate {\n-                            projection_ty: ty::ProjectionTy {\n-                                substs: projection_substs,\n-                                item_def_id: projection.projection_ty.item_def_id,\n-                            },\n-                            ty: projection.ty.subst(tcx, rebased_substs),\n-                        }\n-                    })\n-                    .to_predicate(tcx),\n-                ty::PredicateKind::TypeOutlives(poly_outlives) => poly_outlives\n-                    .map_bound(|outlives| {\n-                        ty::OutlivesPredicate(impl_ty_value, outlives.1.subst(tcx, rebased_substs))\n-                    })\n-                    .to_predicate(tcx),\n-                _ => bug!(\"unexepected projection predicate kind: `{:?}`\", predicate),\n-            };\n-\n+            let concrete_ty_predicate = predicate.subst(tcx, rebased_substs);\n             debug!(\"compare_projection_bounds: concrete predicate = {:?}\", concrete_ty_predicate);\n \n             let traits::Normalized { value: normalized_predicate, obligations } = traits::normalize(\n@@ -1311,7 +1265,6 @@ fn compare_projection_bounds<'tcx>(\n                 normalize_cause.clone(),\n                 &concrete_ty_predicate,\n             );\n-\n             debug!(\"compare_projection_bounds: normalized predicate = {:?}\", normalized_predicate);\n \n             inh.register_predicates(obligations);"}, {"sha": "4831a8c63e8d77e2de34e834c7b09b8fd5328e2e", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a3bb59ce42ae86e19c2e316d0809e8606c810f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a3bb59ce42ae86e19c2e316d0809e8606c810f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs?ref=31a3bb59ce42ae86e19c2e316d0809e8606c810f", "patch": "@@ -7,7 +7,7 @@ trait ATy {\n \n impl<'b> ATy for &'b () {\n     type Item<'a> = &'b ();\n-    //~^ ERROR does not fulfill the required lifetime\n+    //~^ ERROR cannot infer an appropriate lifetime\n }\n \n trait StaticTy {"}, {"sha": "80f69becc2c9114895ed92c3c6735817a5c97f7e", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/31a3bb59ce42ae86e19c2e316d0809e8606c810f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31a3bb59ce42ae86e19c2e316d0809e8606c810f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr?ref=31a3bb59ce42ae86e19c2e316d0809e8606c810f", "patch": "@@ -1,14 +1,31 @@\n-error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n   --> $DIR/unsatisfied-outlives-bound.rs:9:5\n    |\n LL |     type Item<'a> = &'b ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: type must outlive the lifetime `'a` as defined on the associated item at 9:15\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined on the impl at 8:6...\n+  --> $DIR/unsatisfied-outlives-bound.rs:8:6\n+   |\n+LL | impl<'b> ATy for &'b () {\n+   |      ^^\n+note: ...so that the types are compatible\n+  --> $DIR/unsatisfied-outlives-bound.rs:9:5\n+   |\n+LL |     type Item<'a> = &'b ();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected `ATy`\n+              found `ATy`\n+note: but, the lifetime must be valid for the lifetime `'a` as defined on the associated item at 9:15...\n   --> $DIR/unsatisfied-outlives-bound.rs:9:15\n    |\n LL |     type Item<'a> = &'b ();\n    |               ^^\n+note: ...so that the type `&()` will meet its required lifetime bounds\n+  --> $DIR/unsatisfied-outlives-bound.rs:9:5\n+   |\n+LL |     type Item<'a> = &'b ();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0477]: the type `&'a ()` does not fulfill the required lifetime\n   --> $DIR/unsatisfied-outlives-bound.rs:18:5\n@@ -20,4 +37,5 @@ LL |     type Item<'a> = &'a ();\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0477`.\n+Some errors have detailed explanations: E0477, E0495.\n+For more information about an error, try `rustc --explain E0477`."}]}