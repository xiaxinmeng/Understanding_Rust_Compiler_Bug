{"sha": "8737061cb59f2563153bdca3d121f40584597426", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MzcwNjFjYjU5ZjI1NjMxNTNiZGNhM2QxMjFmNDA1ODQ1OTc0MjY=", "commit": {"author": {"name": "Andreas Jonson", "email": "andjo403@users.noreply.github.com", "date": "2019-10-01T05:56:18Z"}, "committer": {"name": "Andreas Jonson", "email": "andjo403@users.noreply.github.com", "date": "2019-10-01T05:56:18Z"}, "message": "replace try_for_each with try_fold to generate less code\n\nremoves two functions to inline by combining the check functions and extra call to try_for_each", "tree": {"sha": "122fac8a3eff69656865a3b90ae5c7de695c199b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/122fac8a3eff69656865a3b90ae5c7de695c199b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8737061cb59f2563153bdca3d121f40584597426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8737061cb59f2563153bdca3d121f40584597426", "html_url": "https://github.com/rust-lang/rust/commit/8737061cb59f2563153bdca3d121f40584597426", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8737061cb59f2563153bdca3d121f40584597426/comments", "author": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "url": "https://api.github.com/repos/rust-lang/rust/commits/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "html_url": "https://github.com/rust-lang/rust/commit/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "a272035150a1587f7551b38de7f8663e1c5290f5", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8737061cb59f2563153bdca3d121f40584597426/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8737061cb59f2563153bdca3d121f40584597426/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=8737061cb59f2563153bdca3d121f40584597426", "patch": "@@ -1859,14 +1859,13 @@ pub trait Iterator {\n         Self: Sized, F: FnMut(Self::Item) -> bool\n     {\n         #[inline]\n-        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut(T) -> LoopState<(), ()> {\n-            move |x| {\n+        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> LoopState<(), ()> {\n+            move |(), x| {\n                 if f(x) { LoopState::Continue(()) }\n                 else { LoopState::Break(()) }\n             }\n         }\n-\n-        self.try_for_each(check(f)) == LoopState::Continue(())\n+        self.try_fold((), check(f)) == LoopState::Continue(())\n     }\n \n     /// Tests if any element of the iterator matches a predicate.\n@@ -1913,14 +1912,14 @@ pub trait Iterator {\n         F: FnMut(Self::Item) -> bool\n     {\n         #[inline]\n-        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut(T) -> LoopState<(), ()> {\n-            move |x| {\n+        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> LoopState<(), ()> {\n+            move |(), x| {\n                 if f(x) { LoopState::Break(()) }\n                 else { LoopState::Continue(()) }\n             }\n         }\n \n-        self.try_for_each(check(f)) == LoopState::Break(())\n+        self.try_fold((), check(f)) == LoopState::Break(())\n     }\n \n     /// Searches for an element of an iterator that satisfies a predicate.\n@@ -1972,14 +1971,16 @@ pub trait Iterator {\n         P: FnMut(&Self::Item) -> bool,\n     {\n         #[inline]\n-        fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut(T) -> LoopState<(), T> {\n-            move |x| {\n+        fn check<T>(\n+            mut predicate: impl FnMut(&T) -> bool\n+        ) -> impl FnMut((), T) -> LoopState<(), T> {\n+            move |(), x| {\n                 if predicate(&x) { LoopState::Break(x) }\n                 else { LoopState::Continue(()) }\n             }\n         }\n \n-        self.try_for_each(check(predicate)).break_value()\n+        self.try_fold((), check(predicate)).break_value()\n     }\n \n     /// Applies function to the elements of iterator and returns\n@@ -2004,14 +2005,14 @@ pub trait Iterator {\n         F: FnMut(Self::Item) -> Option<B>,\n     {\n         #[inline]\n-        fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut(T) -> LoopState<(), B> {\n-            move |x| match f(x) {\n+        fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> LoopState<(), B> {\n+            move |(), x| match f(x) {\n                 Some(x) => LoopState::Break(x),\n                 None => LoopState::Continue(()),\n             }\n         }\n \n-        self.try_for_each(check(f)).break_value()\n+        self.try_fold((), check(f)).break_value()\n     }\n \n     /// Searches for an element in an iterator, returning its index."}]}