{"sha": "bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYjhjZDRmYmJlZDRiODJiN2QxYjYxMjA2YmY2YzcwZmQ3NWU2NjU=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2019-11-14T05:06:34Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2019-11-20T03:54:46Z"}, "message": "Implement if_same_cond_fn lint\n\nRun ./util/dev\n\nRevert changelog entry\n\nRename lint to same_functions_in_if_condition and add a doc example\n\nAdd testcases with different arg in fn invocation", "tree": {"sha": "9bb44e473433badc1fc27e43b5e3d258c52faee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb44e473433badc1fc27e43b5e3d258c52faee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "html_url": "https://github.com/rust-lang/rust/commit/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4f1769734b6204fc6bece8556b7b80a7683271e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f1769734b6204fc6bece8556b7b80a7683271e", "html_url": "https://github.com/rust-lang/rust/commit/b4f1769734b6204fc6bece8556b7b80a7683271e"}], "stats": {"total": 247, "additions": 244, "deletions": 3}, "files": [{"sha": "a10706c3fc3bd014d4d7fb9178d1b53c95b73919", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "patch": "@@ -1030,6 +1030,7 @@ Released 2018-09-13\n [`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n+[`ifs_same_cond_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond_fn\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher\n [`implicit_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\n [`inconsistent_digit_grouping`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping"}, {"sha": "c5106e074cbc53975799890eb5bd33159eb29202", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 333 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 334 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "9cbff066f46405470da8354f0f65e019c5f4dc10", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "patch": "@@ -40,6 +40,53 @@ declare_clippy_lint! {\n     \"consecutive `ifs` with the same condition\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for consecutive `if`s with the same function call.\n+    ///\n+    /// **Why is this bad?** This is probably a copy & paste error.\n+    /// Despite the fact that function can have side effects and `if` works as\n+    /// intended, such an approach is implicit and can be considered a \"code smell\".\n+    ///\n+    /// **Known problems:** Hopefully none.\n+    ///\n+    /// **Example:**\n+    /// ```ignore\n+    /// if foo() == bar {\n+    ///     \u2026\n+    /// } else if foo() == bar {\n+    ///     \u2026\n+    /// }\n+    /// ```\n+    ///\n+    /// This probably should be:\n+    /// ```ignore\n+    /// if foo() == bar {\n+    ///     \u2026\n+    /// } else if foo() == baz {\n+    ///     \u2026\n+    /// }\n+    /// ```\n+    ///\n+    /// or if the original code was not a typo and called function mutates a state,\n+    /// consider move the mutation out of the `if` condition to avoid similarity to\n+    /// a copy & paste error:\n+    ///\n+    /// ```ignore\n+    /// let first = foo();\n+    /// if first == bar {\n+    ///     \u2026\n+    /// } else {\n+    ///     let second = foo();\n+    ///     if second == bar {\n+    ///     \u2026\n+    ///     }\n+    /// }\n+    /// ```\n+    pub SAME_FUNCTIONS_IN_IF_CONDITION,\n+    pedantic,\n+    \"consecutive `ifs` with the same function call\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `if/else` with the same body as the *then* part\n     /// and the *else* part.\n@@ -102,7 +149,7 @@ declare_clippy_lint! {\n     \"`match` with identical arm bodies\"\n }\n \n-declare_lint_pass!(CopyAndPaste => [IFS_SAME_COND, IF_SAME_THEN_ELSE, MATCH_SAME_ARMS]);\n+declare_lint_pass!(CopyAndPaste => [IFS_SAME_COND, SAME_FUNCTIONS_IN_IF_CONDITION, IF_SAME_THEN_ELSE, MATCH_SAME_ARMS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n@@ -119,6 +166,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n             let (conds, blocks) = if_sequence(expr);\n             lint_same_then_else(cx, &blocks);\n             lint_same_cond(cx, &conds);\n+            lint_same_fns_in_if_cond(cx, &conds);\n             lint_match_arms(cx, expr);\n         }\n     }\n@@ -163,6 +211,34 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr]) {\n     }\n }\n \n+/// Implementation of `SAME_FUNCTIONS_IN_IF_CONDITION`.\n+fn lint_same_fns_in_if_cond(cx: &LateContext<'_, '_>, conds: &[&Expr]) {\n+    let hash: &dyn Fn(&&Expr) -> u64 = &|expr| -> u64 {\n+        let mut h = SpanlessHash::new(cx, cx.tables);\n+        h.hash_expr(expr);\n+        h.finish()\n+    };\n+\n+    let eq: &dyn Fn(&&Expr, &&Expr) -> bool = &|&lhs, &rhs| -> bool {\n+        // Do not spawn warning if `IFS_SAME_COND` already produced it.\n+        if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs, rhs) {\n+            return false;\n+        }\n+        SpanlessEq::new(cx).eq_expr(lhs, rhs)\n+    };\n+\n+    for (i, j) in search_same(conds, hash, eq) {\n+        span_note_and_lint(\n+            cx,\n+            SAME_FUNCTIONS_IN_IF_CONDITION,\n+            j.span,\n+            \"this `if` has the same function call as a previous if\",\n+            i.span,\n+            \"same as this\",\n+        );\n+    }\n+}\n+\n /// Implementation of `MATCH_SAME_ARMS`.\n fn lint_match_arms<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr) {\n     fn same_bindings<'tcx>("}, {"sha": "07feb25e735f4721d7983611142027573543bf9e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "patch": "@@ -471,6 +471,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &collapsible_if::COLLAPSIBLE_IF,\n         &comparison_chain::COMPARISON_CHAIN,\n         &copies::IFS_SAME_COND,\n+        &copies::SAME_FUNCTIONS_IN_IF_CONDITION,\n         &copies::IF_SAME_THEN_ELSE,\n         &copies::MATCH_SAME_ARMS,\n         &copy_iterator::COPY_ITERATOR,\n@@ -989,6 +990,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n         LintId::of(&attrs::INLINE_ALWAYS),\n         LintId::of(&checked_conversions::CHECKED_CONVERSIONS),\n+        LintId::of(&copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n         LintId::of(&copies::MATCH_SAME_ARMS),\n         LintId::of(&copy_iterator::COPY_ITERATOR),\n         LintId::of(&default_trait_access::DEFAULT_TRAIT_ACCESS),"}, {"sha": "b033da45ecb5f481231e9d0b8756559c807a5a5e", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 333] = [\n+pub const ALL_LINTS: [Lint; 334] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -714,6 +714,13 @@ pub const ALL_LINTS: [Lint; 333] = [\n         deprecation: None,\n         module: \"copies\",\n     },\n+    Lint {\n+        name: \"ifs_same_cond_fn\",\n+        group: \"pedantic\",\n+        desc: \"consecutive `ifs` with the same function call\",\n+        deprecation: None,\n+        module: \"copies\",\n+    },\n     Lint {\n         name: \"implicit_hasher\",\n         group: \"style\","}, {"sha": "686867cf5c6f661df745266fea2860e3ccd10b7d", "filename": "tests/ui/same_functions_in_if_condition.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/tests%2Fui%2Fsame_functions_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/tests%2Fui%2Fsame_functions_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_functions_in_if_condition.rs?ref=bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "patch": "@@ -0,0 +1,80 @@\n+#![warn(clippy::same_functions_in_if_condition)]\n+#![allow(clippy::ifs_same_cond)] // This warning is different from `ifs_same_cond`.\n+#![allow(clippy::if_same_then_else, clippy::comparison_chain)] // all empty blocks\n+\n+fn function() -> bool {\n+    true\n+}\n+\n+fn fn_arg(_arg: u8) -> bool {\n+    true\n+}\n+\n+struct Struct;\n+\n+impl Struct {\n+    fn method(&self) -> bool {\n+        true\n+    }\n+    fn method_arg(&self, _arg: u8) -> bool {\n+        true\n+    }\n+}\n+\n+fn ifs_same_cond_fn() {\n+    let a = 0;\n+    let obj = Struct;\n+\n+    if function() {\n+    } else if function() {\n+        //~ ERROR ifs same condition\n+    }\n+\n+    if fn_arg(a) {\n+    } else if fn_arg(a) {\n+        //~ ERROR ifs same condition\n+    }\n+\n+    if obj.method() {\n+    } else if obj.method() {\n+        //~ ERROR ifs same condition\n+    }\n+\n+    if obj.method_arg(a) {\n+    } else if obj.method_arg(a) {\n+        //~ ERROR ifs same condition\n+    }\n+\n+    let mut v = vec![1];\n+    if v.pop() == None {\n+        //~ ERROR ifs same condition\n+    } else if v.pop() == None {\n+    }\n+\n+    if v.len() == 42 {\n+        //~ ERROR ifs same condition\n+    } else if v.len() == 42 {\n+    }\n+\n+    if v.len() == 1 {\n+        // ok, different conditions\n+    } else if v.len() == 2 {\n+    }\n+\n+    if fn_arg(0) {\n+        // ok, different arguments.\n+    } else if fn_arg(1) {\n+    }\n+\n+    if obj.method_arg(0) {\n+        // ok, different arguments.\n+    } else if obj.method_arg(1) {\n+    }\n+\n+    if a == 1 {\n+        // ok, warning is on `ifs_same_cond` behalf.\n+    } else if a == 1 {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "214f1a9e7c8fae78d7a86fdc1b544b583841e973", "filename": "tests/ui/same_functions_in_if_condition.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_functions_in_if_condition.stderr?ref=bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "patch": "@@ -0,0 +1,75 @@\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:29:15\n+   |\n+LL |     } else if function() {\n+   |               ^^^^^^^^^^\n+   |\n+   = note: `-D clippy::same-functions-in-if-condition` implied by `-D warnings`\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:28:8\n+   |\n+LL |     if function() {\n+   |        ^^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:34:15\n+   |\n+LL |     } else if fn_arg(a) {\n+   |               ^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:33:8\n+   |\n+LL |     if fn_arg(a) {\n+   |        ^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:39:15\n+   |\n+LL |     } else if obj.method() {\n+   |               ^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:38:8\n+   |\n+LL |     if obj.method() {\n+   |        ^^^^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:44:15\n+   |\n+LL |     } else if obj.method_arg(a) {\n+   |               ^^^^^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:43:8\n+   |\n+LL |     if obj.method_arg(a) {\n+   |        ^^^^^^^^^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:51:15\n+   |\n+LL |     } else if v.pop() == None {\n+   |               ^^^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:49:8\n+   |\n+LL |     if v.pop() == None {\n+   |        ^^^^^^^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:56:15\n+   |\n+LL |     } else if v.len() == 42 {\n+   |               ^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:54:8\n+   |\n+LL |     if v.len() == 42 {\n+   |        ^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}