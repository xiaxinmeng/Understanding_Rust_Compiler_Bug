{"sha": "be415dbeda0ac38ac28028d3622080cd9d55aedc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNDE1ZGJlZGEwYWMzOGFjMjgwMjhkMzYyMjA4MGNkOWQ1NWFlZGM=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-22T14:56:41Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-22T16:44:49Z"}, "message": "Use new write_bytes method", "tree": {"sha": "f3f003b209ec40df403ac231dd9df6c2be4ed906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3f003b209ec40df403ac231dd9df6c2be4ed906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be415dbeda0ac38ac28028d3622080cd9d55aedc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be415dbeda0ac38ac28028d3622080cd9d55aedc", "html_url": "https://github.com/rust-lang/rust/commit/be415dbeda0ac38ac28028d3622080cd9d55aedc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be415dbeda0ac38ac28028d3622080cd9d55aedc/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72bd25de83bc1139829656a1b84a4fc04faa0554", "url": "https://api.github.com/repos/rust-lang/rust/commits/72bd25de83bc1139829656a1b84a4fc04faa0554", "html_url": "https://github.com/rust-lang/rust/commit/72bd25de83bc1139829656a1b84a4fc04faa0554"}, {"sha": "8fa74542974956a47f817358e5ddf1fe435b9925", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa74542974956a47f817358e5ddf1fe435b9925", "html_url": "https://github.com/rust-lang/rust/commit/8fa74542974956a47f817358e5ddf1fe435b9925"}], "stats": {"total": 118, "additions": 48, "deletions": 70}, "files": [{"sha": "2ba95c228bafb66ca24a583f7a4247b948fa1867", "filename": ".appveyor.yml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be415dbeda0ac38ac28028d3622080cd9d55aedc/.appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/be415dbeda0ac38ac28028d3622080cd9d55aedc/.appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.appveyor.yml?ref=be415dbeda0ac38ac28028d3622080cd9d55aedc", "patch": "@@ -12,6 +12,9 @@ branches:\n     - auto\n     - try\n \n+matrix:\n+  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.\n+\n cache:\n     - '%USERPROFILE%\\.cargo'\n     - '%USERPROFILE%\\.rustup'"}, {"sha": "d3b6ee0bb531b958378d4c898a8d1379b41c78ac", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be415dbeda0ac38ac28028d3622080cd9d55aedc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/be415dbeda0ac38ac28028d3622080cd9d55aedc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=be415dbeda0ac38ac28028d3622080cd9d55aedc", "patch": "@@ -215,6 +215,11 @@ dependencies = [\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"either\"\n+version = \"1.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"env_logger\"\n version = \"0.6.2\"\n@@ -294,6 +299,14 @@ dependencies = [\n  \"quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"itertools\"\n+version = \"0.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"itoa\"\n version = \"0.4.4\"\n@@ -343,6 +356,7 @@ dependencies = [\n  \"env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getrandom 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -828,6 +842,7 @@ dependencies = [\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n \"checksum directories 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"551a778172a450d7fc12e629ca3b0428d00f6afa9a43da1b630d54604e97371c\"\n \"checksum dirs-sys 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afa0b23de8fd801745c471deffa6e12d248f962c9fd4b4c33787b055599bde7b\"\n+\"checksum either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb1f6b1ce1c140482ea30ddd3335fc0024ac7ee112895426e0a629a6c20adfe3\"\n \"checksum env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n \"checksum failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"795bd83d3abeb9220f257e597aa0080a508b27533824adf336529648f6abf7e2\"\n \"checksum failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea1063915fd7ef4309e222a5a07cf9c319fb9c7836b1f89b85458672dbb127e1\"\n@@ -837,6 +852,7 @@ dependencies = [\n \"checksum getrandom 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc344b02d3868feb131e8b5fe2b9b0a1cc42942679af493061fc13b853243872\"\n \"checksum hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n \"checksum humantime 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ca7e5f2e110db35f93b837c81797f3714500b81d517bf20c431b16d3ca4f114\"\n+\"checksum itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5b8467d9c1cebe26feb08c640139247fac215782d35371ade9a2136ed6085358\"\n \"checksum itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"501266b7edd0174f8530248f87f99c88fbe60ca4ef3dd486835b8d8d53136f7f\"\n \"checksum lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \"checksum libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34fcd2c08d2f832f376f4173a231990fa5aef4e99fb569867318a227ef4c06ba\""}, {"sha": "91da02eac8a6c9dcbba39ddcdd6c6475ef88ee5f", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be415dbeda0ac38ac28028d3622080cd9d55aedc/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be415dbeda0ac38ac28028d3622080cd9d55aedc/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=be415dbeda0ac38ac28028d3622080cd9d55aedc", "patch": "@@ -40,6 +40,7 @@ log = \"0.4\"\n shell-escape = \"0.1.4\"\n hex = \"0.3.2\"\n rand = \"0.7\"\n+itertools = \"0.8\"\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`"}, {"sha": "b2b3a89fe95666ccf42ba59e46157f44dbadf2ff", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be415dbeda0ac38ac28028d3622080cd9d55aedc/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/be415dbeda0ac38ac28028d3622080cd9d55aedc/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=be415dbeda0ac38ac28028d3622080cd9d55aedc", "patch": "@@ -1 +1 @@\n-7979016aff545f7b41cc517031026020b340989d\n+6576f4be5af31a5e61dfc0cf50b7130e6c6dfb35"}, {"sha": "13396e845da111b032b8833eeef627b7ebe6e8fa", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be415dbeda0ac38ac28028d3622080cd9d55aedc/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be415dbeda0ac38ac28028d3622080cd9d55aedc/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=be415dbeda0ac38ac28028d3622080cd9d55aedc", "patch": "@@ -257,8 +257,9 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) {\n                 trace!(\"-------------------\");\n                 trace!(\"Frame {}\", i);\n                 trace!(\"    return: {:?}\", frame.return_place.map(|p| *p));\n-                for (i, local) in frame.locals.iter().enumerate() {\n-                    trace!(\"    local {}: {:?}\", i, local.value);\n+                for (_i, _local) in frame.locals.iter().enumerate() {\n+                    //trace!(\"    local {}: {:?}\", i, local.value);\n+                    //FIXME: enable this again when the LocalValue Debug impl is back\n                 }\n             }\n         }"}, {"sha": "b31e0a2c2eb9c39c4a6cfc570855206864b27f55", "filename": "src/helpers.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/be415dbeda0ac38ac28028d3622080cd9d55aedc/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be415dbeda0ac38ac28028d3622080cd9d55aedc/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=be415dbeda0ac38ac28028d3622080cd9d55aedc", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::mir;\n use rustc::ty::{\n     self,\n-    layout::{self, Align, LayoutOf, Size, TyLayout},\n+    layout::{self, LayoutOf, Size, TyLayout},\n };\n \n use rand::RngCore;\n@@ -95,13 +95,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         let this = self.eval_context_mut();\n \n-        // Don't forget the bounds check.\n-        let ptr = this.memory.check_ptr_access(\n-            ptr,\n-            Size::from_bytes(len as u64),\n-            Align::from_bytes(1).unwrap()\n-        )?.expect(\"we already checked for size 0\");\n-\n         let mut data = vec![0; len];\n \n         if this.machine.communicate {\n@@ -114,7 +107,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             rng.fill_bytes(&mut data);\n         }\n \n-        this.memory.get_mut(ptr.alloc_id)?.write_bytes(&*this.tcx, ptr, &data)\n+        this.memory.write_bytes(ptr, data.iter().copied())\n     }\n \n     /// Visits the memory covered by `place`, sensitive to freezing: the 3rd parameter\n@@ -420,27 +413,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     /// Helper function to write an OsStr as a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle.\n-    fn write_os_str_to_c_string(&mut self, os_str: &OsStr, ptr: Pointer<Tag>, size: u64) -> InterpResult<'tcx> {\n+    fn write_os_str_to_c_string(&mut self, os_str: &OsStr, scalar: Scalar<Tag>, size: u64) -> InterpResult<'tcx> {\n         let bytes = os_str_to_bytes(os_str)?;\n-        let len = bytes.len();\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an overflow.\n-        if size <= len as u64 {\n-            throw_unsup_format!(\"OsString of length {} is too large for destination buffer of size {}\", len, size)\n+        if size <= bytes.len() as u64 {\n+            throw_unsup_format!(\"OsString of length {} is too large for destination buffer of size {}\", bytes.len(), size)\n         }\n-        let actual_len = (len as u64)\n-            .checked_add(1)\n-            .map(Size::from_bytes)\n-            .ok_or_else(|| err_unsup_format!(\"OsString of length {} is too large\", len))?;\n-        let this = self.eval_context_mut();\n-        this.memory.check_ptr_access(ptr.into(), actual_len, Align::from_bytes(1).unwrap())?;\n-        let buffer = this.memory.get_mut(ptr.alloc_id)?.get_bytes_mut(&*this.tcx, ptr, actual_len)?;\n-        buffer[..len].copy_from_slice(bytes);\n-        // This is ok because the buffer was strictly larger than `bytes`, so after adding the\n-        // null terminator, the buffer size is larger or equal to `bytes.len()`, meaning that\n-        // `bytes` actually fit inside tbe buffer.\n-        buffer[len] = 0;\n-        Ok(())\n+        // FIXME: We should use `Iterator::chain` instead when rust-lang/rust#65704 lands.\n+        self.eval_context_mut().memory.write_bytes(scalar, [bytes, &[0]].concat())\n     }\n }\n "}, {"sha": "f88a5bbac72e93814d8586a10a8dff26f9981e3a", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be415dbeda0ac38ac28028d3622080cd9d55aedc/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be415dbeda0ac38ac28028d3622080cd9d55aedc/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=be415dbeda0ac38ac28028d3622080cd9d55aedc", "patch": "@@ -123,13 +123,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"getcwd\")?;\n \n-        let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n+        let buf = this.read_scalar(buf_op)?.not_undef()?;\n         let size = this.read_scalar(size_op)?.to_usize(&*this.tcx)?;\n         // If we cannot get the current directory, we return null\n         match env::current_dir() {\n             Ok(cwd) => {\n                 if this.write_os_str_to_c_string(&OsString::from(cwd), buf, size).is_ok() {\n-                    return Ok(Scalar::Ptr(buf));\n+                    return Ok(buf);\n                 }\n                 let erange = this.eval_libc(\"ERANGE\")?;\n                 this.set_last_error(erange)?;"}, {"sha": "66fb53581e680da4b3ecf403f1aae4a4af0f55b7", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/be415dbeda0ac38ac28028d3622080cd9d55aedc/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be415dbeda0ac38ac28028d3622080cd9d55aedc/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=be415dbeda0ac38ac28028d3622080cd9d55aedc", "patch": "@@ -52,9 +52,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             if zero_init {\n                 // We just allocated this, the access is definitely in-bounds.\n                 this.memory\n-                    .get_mut(ptr.alloc_id)\n-                    .unwrap()\n-                    .write_repeat(&*this.tcx, ptr, 0, Size::from_bytes(size))\n+                    .write_bytes(ptr.into(), itertools::repeat_n(0u8, size as usize))\n                     .unwrap();\n             }\n             Scalar::Ptr(ptr)\n@@ -229,9 +227,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 );\n                 // We just allocated this, the access is definitely in-bounds.\n                 this.memory\n-                    .get_mut(ptr.alloc_id)\n-                    .unwrap()\n-                    .write_repeat(tcx, ptr, 0, Size::from_bytes(size))\n+                    .write_bytes(ptr.into(), itertools::repeat_n(0u8, size as usize))\n                     .unwrap();\n                 this.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }\n@@ -841,25 +837,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"GetSystemInfo\" => {\n                 let system_info = this.deref_operand(args[0])?;\n-                let system_info_ptr = this\n-                    .check_mplace_access(system_info, None)?\n-                    .expect(\"cannot be a ZST\");\n-                // We rely on `deref_operand` doing bounds checks for us.\n                 // Initialize with `0`.\n                 this.memory\n-                    .get_mut(system_info_ptr.alloc_id)?\n-                    .write_repeat(tcx, system_info_ptr, 0, system_info.layout.size)?;\n+                    .write_bytes(system_info.ptr, itertools::repeat_n(0, system_info.layout.size.bytes() as usize))?;\n                 // Set number of processors.\n                 let dword_size = Size::from_bytes(4);\n-                let offset = 2 * dword_size + 3 * tcx.pointer_size();\n-                this.memory\n-                    .get_mut(system_info_ptr.alloc_id)?\n-                    .write_scalar(\n-                        tcx,\n-                        system_info_ptr.offset(offset, tcx)?,\n-                        Scalar::from_int(NUM_CPUS, dword_size).into(),\n-                        dword_size,\n-                    )?;\n+                let num_cpus = this.mplace_field(system_info, 6)?;\n+                this.write_scalar(\n+                    Scalar::from_int(NUM_CPUS, dword_size),\n+                    num_cpus.into(),\n+                )?;\n             }\n \n             \"TlsAlloc\" => {"}, {"sha": "d39e70d8990fbfefd8db05815d9f8d3abe946778", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be415dbeda0ac38ac28028d3622080cd9d55aedc/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be415dbeda0ac38ac28028d3622080cd9d55aedc/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=be415dbeda0ac38ac28028d3622080cd9d55aedc", "patch": "@@ -356,11 +356,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         _ => {\n                             // Do it in memory\n                             let mplace = this.force_allocation(dest)?;\n-                            mplace.meta.unwrap_none();\n-                            // not a zst, must be valid pointer\n-                            let ptr = mplace.ptr.to_ptr()?;\n-                            // we know the return place is in-bounds\n-                            this.memory.get_mut(ptr.alloc_id)?.write_repeat(tcx, ptr, 0, dest.layout.size)?;\n+                            mplace.meta.unwrap_none(); // must be sized\n+                            this.memory.write_bytes(mplace.ptr, itertools::repeat_n(0, dest.layout.size.bytes() as usize))?;\n                         }\n                     }\n                 }\n@@ -565,16 +562,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let count = this.read_scalar(args[2])?.to_usize(this)?;\n                 let byte_count = ty_layout.size * count;\n-                match this.memory.check_ptr_access(ptr, byte_count, ty_layout.align.abi)? {\n-                    Some(ptr) => {\n-                        this.memory\n-                            .get_mut(ptr.alloc_id)?\n-                            .write_repeat(tcx, ptr, val_byte, byte_count)?;\n-                    }\n-                    None => {\n-                        // Size is 0, nothing to do.\n-                    }\n-                }\n+                this.memory.write_bytes(ptr, itertools::repeat_n(val_byte, byte_count.bytes() as usize))?;\n             }\n \n             name => throw_unsup_format!(\"unimplemented intrinsic: {}\", name),"}, {"sha": "d3c81834bc4b4af0f71910d4b08931e4e03a0f1a", "filename": "tests/run-pass/union-overwrite.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be415dbeda0ac38ac28028d3622080cd9d55aedc/tests%2Frun-pass%2Funion-overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be415dbeda0ac38ac28028d3622080cd9d55aedc/tests%2Frun-pass%2Funion-overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Funion-overwrite.rs?ref=be415dbeda0ac38ac28028d3622080cd9d55aedc", "patch": "@@ -1,19 +1,20 @@\n #![feature(untagged_unions)]\n-#![allow(unions_with_drop_fields)]\n \n #[repr(C)]\n+#[derive(Clone, Copy)]\n struct Pair<T, U>(T, U);\n #[repr(C)]\n+#[derive(Clone, Copy)]\n struct Triple<T>(T, T, T);\n \n #[repr(C)]\n-union U<A, B> {\n+union U<A: Copy, B: Copy> {\n     a: Pair<A, A>,\n     b: B,\n }\n \n #[repr(C)]\n-union W<A, B> {\n+union W<A: Copy, B: Copy> {\n     a: A,\n     b: B,\n }"}]}