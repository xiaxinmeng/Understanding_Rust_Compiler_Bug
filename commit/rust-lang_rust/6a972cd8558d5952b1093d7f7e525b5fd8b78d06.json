{"sha": "6a972cd8558d5952b1093d7f7e525b5fd8b78d06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOTcyY2Q4NTU4ZDU5NTJiMTA5M2Q3ZjdlNTI1YjVmZDhiNzhkMDY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-16T02:55:45Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-16T04:39:05Z"}, "message": "Use the proper term when using non-existing variant\n\nWhen using a non-existing variant, function or associated item, refer to\nthe proper term, instead of defaulting to \"associated item\" in\ndiagnostics.", "tree": {"sha": "ba35508e6bbe84542e22a18ea5a81d8f88dd10a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba35508e6bbe84542e22a18ea5a81d8f88dd10a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a972cd8558d5952b1093d7f7e525b5fd8b78d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a972cd8558d5952b1093d7f7e525b5fd8b78d06", "html_url": "https://github.com/rust-lang/rust/commit/6a972cd8558d5952b1093d7f7e525b5fd8b78d06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783c6ec55d9d93abf3fd96858fc9e3bd80611845", "url": "https://api.github.com/repos/rust-lang/rust/commits/783c6ec55d9d93abf3fd96858fc9e3bd80611845", "html_url": "https://github.com/rust-lang/rust/commit/783c6ec55d9d93abf3fd96858fc9e3bd80611845"}], "stats": {"total": 68, "additions": 44, "deletions": 24}, "files": [{"sha": "8129b27eb6a7369d3924f2f547e863dec475d627", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=6a972cd8558d5952b1093d7f7e525b5fd8b78d06", "patch": "@@ -1219,6 +1219,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    pub fn is_enum(&self) -> bool {\n+        match self.sty {\n+            TyAdt(adt_def, _) => {\n+                adt_def.is_enum()\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     pub fn is_closure(&self) -> bool {\n         match self.sty {\n             TyClosure(..) => true,\n@@ -1233,6 +1242,13 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    pub fn is_fresh_ty(&self) -> bool {\n+        match self.sty {\n+            TyInfer(FreshTy(_)) => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn is_fresh(&self) -> bool {\n         match self.sty {\n             TyInfer(FreshTy(_)) => true,"}, {"sha": "ba7a2b4fb33a52244f04d2e5b29c7545b178934a", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=6a972cd8558d5952b1093d7f7e525b5fd8b78d06", "patch": "@@ -164,12 +164,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         match error {\n-            MethodError::NoMatch(NoMatchData { static_candidates: static_sources,\n-                                               unsatisfied_predicates,\n-                                               out_of_scope_traits,\n-                                               lev_candidate,\n-                                               mode,\n-                                               .. }) => {\n+            MethodError::NoMatch(NoMatchData {\n+                static_candidates: static_sources,\n+                unsatisfied_predicates,\n+                out_of_scope_traits,\n+                lev_candidate,\n+                mode,\n+                ..\n+            }) => {\n                 let tcx = self.tcx;\n \n                 let actual = self.resolve_type_vars_if_possible(&rcvr_ty);\n@@ -179,18 +181,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                       current scope\",\n                                      if mode == Mode::MethodCall {\n                                          \"method\"\n+                                     } else if actual.is_enum() {\n+                                         \"variant\"\n                                      } else {\n-                                         match item_name.as_str().chars().next() {\n-                                             Some(name) => {\n-                                                 if name.is_lowercase() {\n-                                                     \"function or associated item\"\n-                                                 } else {\n-                                                     \"associated item\"\n-                                                 }\n-                                             },\n-                                             None => {\n-                                                 \"\"\n-                                             },\n+                                         let fresh_ty = actual.is_fresh_ty();\n+                                         match (item_name.as_str().chars().next(), fresh_ty) {\n+                                             (Some(name), false) if name.is_lowercase() => {\n+                                                 \"function or associated item\"\n+                                             }\n+                                             (Some(_), false) => \"associated item\",\n+                                             (Some(_), true) | (None, false) => {\n+                                                 \"variant or associated item\"\n+                                             }\n+                                             (None, true) => \"variant\",\n                                          }\n                                      },\n                                      item_name,"}, {"sha": "65daa9a82eab8e2f3affcd49481e0007dd8d2191", "filename": "src/test/compile-fail/bogus-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs?ref=6a972cd8558d5952b1093d7f7e525b5fd8b78d06", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     let red: color = color::rgb(255, 0, 0);\n     match red {\n       color::rgb(r, g, b) => { println!(\"rgb\"); }\n-      color::hsl(h, s, l) => { println!(\"hsl\"); }  //~ ERROR no function\n+      color::hsl(h, s, l) => { println!(\"hsl\"); }  //~ ERROR no variant\n     }\n }"}, {"sha": "3096e8f8313685fad147675d84c4262159071d85", "filename": "src/test/compile-fail/empty-struct-braces-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs?ref=6a972cd8558d5952b1093d7f7e525b5fd8b78d06", "patch": "@@ -29,6 +29,6 @@ fn main() {\n \n     let xe1 = XEmpty1; //~ ERROR expected value, found struct `XEmpty1`\n     let xe1 = XEmpty1(); //~ ERROR expected function, found struct `XEmpty1`\n-    let xe3 = XE::Empty3; //~ ERROR no associated item named `Empty3` found for type\n-    let xe3 = XE::Empty3(); //~ ERROR no associated item named `Empty3` found for type\n+    let xe3 = XE::Empty3; //~ ERROR no variant named `Empty3` found for type\n+    let xe3 = XE::Empty3(); //~ ERROR no variant named `Empty3` found for type\n }"}, {"sha": "e887c7760d693ac5c883fe1e7cb52eecb35dfaf1", "filename": "src/test/compile-fail/issue-22933-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Ftest%2Fcompile-fail%2Fissue-22933-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Ftest%2Fcompile-fail%2Fissue-22933-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22933-2.rs?ref=6a972cd8558d5952b1093d7f7e525b5fd8b78d06", "patch": "@@ -12,7 +12,7 @@ enum Delicious {\n     Pie      = 0x1,\n     Apple    = 0x2,\n     ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,\n-    //~^ ERROR no associated item named `PIE` found for type `Delicious`\n+    //~^ ERROR no variant named `PIE` found for type `Delicious`\n }\n \n fn main() {}"}, {"sha": "0ad583e52839e4f9aabc8bf5f9038f991df07442", "filename": "src/test/compile-fail/issue-23173.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Ftest%2Fcompile-fail%2Fissue-23173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Ftest%2Fcompile-fail%2Fissue-23173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23173.rs?ref=6a972cd8558d5952b1093d7f7e525b5fd8b78d06", "patch": "@@ -13,5 +13,5 @@ enum Token { LeftParen, RightParen, Plus, Minus, /* etc */ }\n fn use_token(token: &Token) { unimplemented!() }\n \n fn main() {\n-    use_token(&Token::Homura); //~ ERROR no associated item named\n+    use_token(&Token::Homura); //~ ERROR no variant named `Homura`\n }"}, {"sha": "dc51adf42aad246da2f5ffe4909f183e75fecf74", "filename": "src/test/compile-fail/issue-23217.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Ftest%2Fcompile-fail%2Fissue-23217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Ftest%2Fcompile-fail%2Fissue-23217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23217.rs?ref=6a972cd8558d5952b1093d7f7e525b5fd8b78d06", "patch": "@@ -10,7 +10,7 @@\n \n pub enum SomeEnum {\n     B = SomeEnum::A,\n-    //~^ ERROR no associated item named `A` found for type `SomeEnum`\n+    //~^ ERROR no variant named `A` found for type `SomeEnum`\n }\n \n fn main() {}"}, {"sha": "e553fee5a62f98be6b28a18bcccc90f8120d23f9", "filename": "src/test/compile-fail/issue-28971.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Ftest%2Fcompile-fail%2Fissue-28971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a972cd8558d5952b1093d7f7e525b5fd8b78d06/src%2Ftest%2Fcompile-fail%2Fissue-28971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28971.rs?ref=6a972cd8558d5952b1093d7f7e525b5fd8b78d06", "patch": "@@ -16,7 +16,8 @@ enum Foo {\n fn main(){\n     foo(|| {\n         match Foo::Bar(1) {\n-            Foo::Baz(..) => (), //~ ERROR no associated\n+            Foo::Baz(..) => (),\n+            //~^ ERROR no variant named `Baz` found for type `Foo`\n             _ => (),\n         }\n     });"}]}