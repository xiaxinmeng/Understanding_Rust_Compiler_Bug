{"sha": "e0992df35f7827fe09b1a54558e396511bcba12a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOTkyZGYzNWY3ODI3ZmUwOWIxYTU0NTU4ZTM5NjUxMWJjYmExMmE=", "commit": {"author": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2016-06-16T12:38:06Z"}, "committer": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2016-06-16T12:38:06Z"}, "message": "Fix issue where rustbuild expected msvc to have ar\n\nSigned-off-by: Peter Atashian <retep998@gmail.com>", "tree": {"sha": "983d88328de165c69c61ab0b79b9f7eeaa768b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/983d88328de165c69c61ab0b79b9f7eeaa768b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0992df35f7827fe09b1a54558e396511bcba12a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJXYp2xAAoJEN4E2eJ1WbyKF40IAK8zpwjuwtzneZqZ5P1KKbZ6\nm5mRv9xPdHTBSvmKBgAOrX8apM9bXja2a/FuL3sFhClTqi5M6Ps0DsaV1UuUQX44\n4WwWGdx3GzKJi+QD5zhZNPgPH3LovZO4BbM+yMXnsFkPf0tc0cNlxPqIB/vO9U54\n2RNleZ04L8Ma7t7ZubfhrcC8nMXb5QyL/Qz5JKGi7yd9M0LANURM8W5/swSwehlU\n0fQALDhcj4GObsEiI/IMr3vM6ldyabpcdxpCxkTuNSnkzK7o593E+79weNPDMBsh\nt8+5v9ILK6lBj/To5EqyR/j+yeMfiVudZKflCHbBjDlLQo9SjgTwDwlTBV2O28w=\n=8Fqc\n-----END PGP SIGNATURE-----", "payload": "tree 983d88328de165c69c61ab0b79b9f7eeaa768b6b\nparent a479a6a7a6fa1bfe1f18d7d7411ad14e7b8ca17b\nauthor Peter Atashian <retep998@gmail.com> 1466080686 -0400\ncommitter Peter Atashian <retep998@gmail.com> 1466080686 -0400\n\nFix issue where rustbuild expected msvc to have ar\n\nSigned-off-by: Peter Atashian <retep998@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0992df35f7827fe09b1a54558e396511bcba12a", "html_url": "https://github.com/rust-lang/rust/commit/e0992df35f7827fe09b1a54558e396511bcba12a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0992df35f7827fe09b1a54558e396511bcba12a/comments", "author": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "committer": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a479a6a7a6fa1bfe1f18d7d7411ad14e7b8ca17b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a479a6a7a6fa1bfe1f18d7d7411ad14e7b8ca17b", "html_url": "https://github.com/rust-lang/rust/commit/a479a6a7a6fa1bfe1f18d7d7411ad14e7b8ca17b"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "7eb50b8b86dac0abcfad3a0d9fc75094153fc09c", "filename": "src/bootstrap/build/cc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0992df35f7827fe09b1a54558e396511bcba12a/src%2Fbootstrap%2Fbuild%2Fcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0992df35f7827fe09b1a54558e396511bcba12a/src%2Fbootstrap%2Fbuild%2Fcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcc.rs?ref=e0992df35f7827fe09b1a54558e396511bcba12a", "patch": "@@ -57,7 +57,9 @@ pub fn find(build: &mut Build) {\n         let compiler = cfg.get_compiler();\n         let ar = cc2ar(compiler.path(), target);\n         build.verbose(&format!(\"CC_{} = {:?}\", target, compiler.path()));\n-        build.verbose(&format!(\"AR_{} = {:?}\", target, ar));\n+        if let Some(ref ar) = ar {\n+            build.verbose(&format!(\"AR_{} = {:?}\", target, ar));\n+        }\n         build.cc.insert(target.to_string(), (compiler, ar));\n     }\n "}, {"sha": "dadb0ffa6c98d73bb9b4d7c1dfcf7b75b7434e73", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0992df35f7827fe09b1a54558e396511bcba12a/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0992df35f7827fe09b1a54558e396511bcba12a/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=e0992df35f7827fe09b1a54558e396511bcba12a", "patch": "@@ -119,7 +119,7 @@ pub struct Build {\n     lldb_python_dir: Option<String>,\n \n     // Runtime state filled in later on\n-    cc: HashMap<String, (gcc::Tool, PathBuf)>,\n+    cc: HashMap<String, (gcc::Tool, Option<PathBuf>)>,\n     cxx: HashMap<String, gcc::Tool>,\n     compiler_rt_built: RefCell<HashMap<String, PathBuf>>,\n }\n@@ -549,7 +549,7 @@ impl Build {\n         // FIXME: the guard against msvc shouldn't need to be here\n         if !target.contains(\"msvc\") {\n             cargo.env(format!(\"CC_{}\", target), self.cc(target))\n-                 .env(format!(\"AR_{}\", target), self.ar(target))\n+                 .env(format!(\"AR_{}\", target), self.ar(target).unwrap()) // only msvc is None\n                  .env(format!(\"CFLAGS_{}\", target), self.cflags(target).join(\" \"));\n         }\n \n@@ -825,8 +825,8 @@ impl Build {\n     }\n \n     /// Returns the path to the `ar` archive utility for the target specified.\n-    fn ar(&self, target: &str) -> &Path {\n-        &self.cc[target].1\n+    fn ar(&self, target: &str) -> Option<&Path> {\n+        self.cc[target].1.as_ref().map(|p| &**p)\n     }\n \n     /// Returns the path to the C++ compiler for the target specified, may panic"}, {"sha": "fd6cdc702cc3ba4bbc608277851756a70ff21648", "filename": "src/bootstrap/build/sanity.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0992df35f7827fe09b1a54558e396511bcba12a/src%2Fbootstrap%2Fbuild%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0992df35f7827fe09b1a54558e396511bcba12a/src%2Fbootstrap%2Fbuild%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fsanity.rs?ref=e0992df35f7827fe09b1a54558e396511bcba12a", "patch": "@@ -70,7 +70,9 @@ pub fn check(build: &mut Build) {\n     // also build some C++ shims for LLVM so we need a C++ compiler.\n     for target in build.config.target.iter() {\n         need_cmd(build.cc(target).as_ref());\n-        need_cmd(build.ar(target).as_ref());\n+        if let Some(ar) = build.ar(target) {\n+            need_cmd(ar.as_ref());\n+        }\n     }\n     for host in build.config.host.iter() {\n         need_cmd(build.cxx(host).as_ref());"}, {"sha": "838cc4f07a9a175397c253dbec2ab730413926b8", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0992df35f7827fe09b1a54558e396511bcba12a/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0992df35f7827fe09b1a54558e396511bcba12a/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=e0992df35f7827fe09b1a54558e396511bcba12a", "patch": "@@ -39,20 +39,22 @@ pub fn gnu_target(target: &str) -> String {\n     }\n }\n \n-pub fn cc2ar(cc: &Path, target: &str) -> PathBuf {\n-    if target.contains(\"musl\") || target.contains(\"msvc\") {\n-        PathBuf::from(\"ar\")\n+pub fn cc2ar(cc: &Path, target: &str) -> Option<PathBuf> {\n+    if target.contains(\"msvc\") {\n+        None\n+    } else if target.contains(\"musl\") {\n+        Some(PathBuf::from(\"ar\"))\n     } else {\n         let parent = cc.parent().unwrap();\n         let file = cc.file_name().unwrap().to_str().unwrap();\n         for suffix in &[\"gcc\", \"cc\", \"clang\"] {\n             if let Some(idx) = file.rfind(suffix) {\n                 let mut file = file[..idx].to_owned();\n                 file.push_str(\"ar\");\n-                return parent.join(&file);\n+                return Some(parent.join(&file));\n             }\n         }\n-        parent.join(file)\n+        Some(parent.join(file))\n     }\n }\n "}, {"sha": "d1b3583d256b6e11bc6136c6ea364a5216b33a2e", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0992df35f7827fe09b1a54558e396511bcba12a/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0992df35f7827fe09b1a54558e396511bcba12a/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=e0992df35f7827fe09b1a54558e396511bcba12a", "patch": "@@ -43,7 +43,8 @@ fn main() {\n     }\n \n     let compiler = gcc::Config::new().get_compiler();\n-    let ar = build_helper::cc2ar(compiler.path(), &target);\n+    // only msvc returns None for ar so unwrap is okay\n+    let ar = build_helper::cc2ar(compiler.path(), &target).unwrap();\n     let cflags = compiler.args()\n                          .iter()\n                          .map(|s| s.to_str().unwrap())"}, {"sha": "9c408366f8b481d38e983d83f4bdcac9cdcfbbde", "filename": "src/libstd/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0992df35f7827fe09b1a54558e396511bcba12a/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0992df35f7827fe09b1a54558e396511bcba12a/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=e0992df35f7827fe09b1a54558e396511bcba12a", "patch": "@@ -80,7 +80,8 @@ fn build_libbacktrace(host: &str, target: &str) {\n     }\n \n     let compiler = gcc::Config::new().get_compiler();\n-    let ar = build_helper::cc2ar(compiler.path(), target);\n+    // only msvc returns None for ar so unwrap is okay\n+    let ar = build_helper::cc2ar(compiler.path(), target).unwrap();\n     let cflags = compiler.args().iter().map(|s| s.to_str().unwrap())\n                          .collect::<Vec<_>>().join(\" \");\n     run(Command::new(\"sh\")"}]}