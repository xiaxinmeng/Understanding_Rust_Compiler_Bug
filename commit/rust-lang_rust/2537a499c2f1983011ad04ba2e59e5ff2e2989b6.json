{"sha": "2537a499c2f1983011ad04ba2e59e5ff2e2989b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MzdhNDk5YzJmMTk4MzAxMWFkMDRiYTJlNTllNWZmMmUyOTg5YjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-10T16:31:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-10T16:31:32Z"}, "message": "Auto merge of #46620 - bjorn3:remove-test-metric, r=kennytm\n\nRemove *MetricFn\n\nfixes #44808", "tree": {"sha": "1d1c6155de2ae3baef54d275aee786f43d384bce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d1c6155de2ae3baef54d275aee786f43d384bce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2537a499c2f1983011ad04ba2e59e5ff2e2989b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2537a499c2f1983011ad04ba2e59e5ff2e2989b6", "html_url": "https://github.com/rust-lang/rust/commit/2537a499c2f1983011ad04ba2e59e5ff2e2989b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2537a499c2f1983011ad04ba2e59e5ff2e2989b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b4d3ddfb7cd9f1caf8ed90f18f8e798a1f4b05", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b4d3ddfb7cd9f1caf8ed90f18f8e798a1f4b05", "html_url": "https://github.com/rust-lang/rust/commit/02b4d3ddfb7cd9f1caf8ed90f18f8e798a1f4b05"}, {"sha": "83c08d21740c544df618104b512bac1e3b2299bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c08d21740c544df618104b512bac1e3b2299bb", "html_url": "https://github.com/rust-lang/rust/commit/83c08d21740c544df618104b512bac1e3b2299bb"}], "stats": {"total": 75, "additions": 13, "deletions": 62}, "files": [{"sha": "bc96a5d6740c4ce417cf8dee257269e4b54ea5dc", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 13, "deletions": 62, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/2537a499c2f1983011ad04ba2e59e5ff2e2989b6/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2537a499c2f1983011ad04ba2e59e5ff2e2989b6/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=2537a499c2f1983011ad04ba2e59e5ff2e2989b6", "patch": "@@ -150,9 +150,7 @@ impl<T, F: FnOnce(T) + Send + 'static> FnBox<T> for F {\n pub enum TestFn {\n     StaticTestFn(fn()),\n     StaticBenchFn(fn(&mut Bencher)),\n-    StaticMetricFn(fn(&mut MetricMap)),\n     DynTestFn(Box<FnBox<()>>),\n-    DynMetricFn(Box<for<'a> FnBox<&'a mut MetricMap>>),\n     DynBenchFn(Box<TDynBenchFn + 'static>),\n }\n \n@@ -161,9 +159,7 @@ impl TestFn {\n         match *self {\n             StaticTestFn(..) => PadNone,\n             StaticBenchFn(..) => PadOnRight,\n-            StaticMetricFn(..) => PadOnRight,\n             DynTestFn(..) => PadNone,\n-            DynMetricFn(..) => PadOnRight,\n             DynBenchFn(..) => PadOnRight,\n         }\n     }\n@@ -174,9 +170,7 @@ impl fmt::Debug for TestFn {\n         f.write_str(match *self {\n             StaticTestFn(..) => \"StaticTestFn(..)\",\n             StaticBenchFn(..) => \"StaticBenchFn(..)\",\n-            StaticMetricFn(..) => \"StaticMetricFn(..)\",\n             DynTestFn(..) => \"DynTestFn(..)\",\n-            DynMetricFn(..) => \"DynMetricFn(..)\",\n             DynBenchFn(..) => \"DynBenchFn(..)\",\n         })\n     }\n@@ -245,16 +239,6 @@ impl Metric {\n     }\n }\n \n-#[derive(PartialEq)]\n-pub struct MetricMap(BTreeMap<String, Metric>);\n-\n-impl Clone for MetricMap {\n-    fn clone(&self) -> MetricMap {\n-        let MetricMap(ref map) = *self;\n-        MetricMap(map.clone())\n-    }\n-}\n-\n /// In case we want to add other options as well, just add them in this struct.\n #[derive(Copy, Clone, Debug)]\n pub struct Options {\n@@ -528,7 +512,6 @@ pub enum TestResult {\n     TrFailedMsg(String),\n     TrIgnored,\n     TrAllowedFail,\n-    TrMetrics(MetricMap),\n     TrBench(BenchSamples),\n }\n \n@@ -605,10 +588,6 @@ impl<T: Write> ConsoleTestState<T> {\n         self.write_short_result(\"FAILED (allowed)\", \"a\", term::color::YELLOW)\n     }\n \n-    pub fn write_metric(&mut self) -> io::Result<()> {\n-        self.write_pretty(\"metric\", term::color::CYAN)\n-    }\n-\n     pub fn write_bench(&mut self) -> io::Result<()> {\n         self.write_pretty(\"bench\", term::color::CYAN)\n     }\n@@ -688,10 +667,6 @@ impl<T: Write> ConsoleTestState<T> {\n             TrFailed | TrFailedMsg(_) => self.write_failed(),\n             TrIgnored => self.write_ignored(),\n             TrAllowedFail => self.write_allowed_fail(),\n-            TrMetrics(ref mm) => {\n-                self.write_metric()?;\n-                self.write_plain(&format!(\": {}\\n\", mm.fmt_metrics()))\n-            }\n             TrBench(ref bs) => {\n                 self.write_bench()?;\n                 self.write_plain(&format!(\": {}\\n\", fmt_bench_samples(bs)))\n@@ -722,7 +697,6 @@ impl<T: Write> ConsoleTestState<T> {\n                         TrFailedMsg(ref msg) => format!(\"failed: {}\", msg),\n                         TrIgnored => \"ignored\".to_owned(),\n                         TrAllowedFail => \"failed (allowed)\".to_owned(),\n-                        TrMetrics(ref mm) => mm.fmt_metrics(),\n                         TrBench(ref bs) => fmt_bench_samples(bs),\n                     },\n                     test.name))\n@@ -872,7 +846,6 @@ pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Res\n \n     let mut ntest = 0;\n     let mut nbench = 0;\n-    let mut nmetric = 0;\n \n     for test in filter_tests(&opts, tests) {\n         use TestFn::*;\n@@ -882,7 +855,6 @@ pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Res\n         let fntype = match testfn {\n             StaticTestFn(..) | DynTestFn(..) => { ntest += 1; \"test\" },\n             StaticBenchFn(..) | DynBenchFn(..) => { nbench += 1; \"benchmark\" },\n-            StaticMetricFn(..) | DynMetricFn(..) => { nmetric += 1; \"metric\" },\n         };\n \n         st.write_plain(format!(\"{}: {}\\n\", name, fntype))?;\n@@ -897,13 +869,12 @@ pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Res\n     }\n \n     if !opts.quiet {\n-        if ntest != 0 || nbench != 0 || nmetric != 0 {\n+        if ntest != 0 || nbench != 0 {\n             st.write_plain(\"\\n\")?;\n         }\n-        st.write_plain(format!(\"{}, {}, {}\\n\",\n+        st.write_plain(format!(\"{}, {}\\n\",\n             plural(ntest, \"test\"),\n-            plural(nbench, \"benchmark\"),\n-            plural(nmetric, \"metric\")))?;\n+            plural(nbench, \"benchmark\")))?;\n     }\n \n     Ok(())\n@@ -928,15 +899,6 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n                     }\n                     TrIgnored => st.ignored += 1,\n                     TrAllowedFail => st.allowed_fail += 1,\n-                    TrMetrics(mm) => {\n-                        let tname = test.name;\n-                        let MetricMap(mm) = mm;\n-                        for (k, v) in &mm {\n-                            st.metrics\n-                              .insert_metric(&format!(\"{}.{}\", tname, k), v.value, v.noise);\n-                        }\n-                        st.measured += 1\n-                    }\n                     TrBench(bs) => {\n                         st.metrics.insert_metric(test.name.as_slice(),\n                                                  bs.ns_iter_summ.median,\n@@ -1095,7 +1057,7 @@ pub fn run_tests<F>(opts: &TestOpts, tests: Vec<TestDescAndFn>, mut callback: F)\n \n     callback(TeFiltered(filtered_descs))?;\n \n-    let (filtered_tests, filtered_benchs_and_metrics): (Vec<_>, _) =\n+    let (filtered_tests, filtered_benchs): (Vec<_>, _) =\n         filtered_tests.into_iter().partition(|e| {\n             match e.testfn {\n                 StaticTestFn(_) | DynTestFn(_) => true,\n@@ -1182,8 +1144,7 @@ pub fn run_tests<F>(opts: &TestOpts, tests: Vec<TestDescAndFn>, mut callback: F)\n \n     if opts.bench_benchmarks {\n         // All benchmarks run at the end, in serial.\n-        // (this includes metric fns)\n-        for b in filtered_benchs_and_metrics {\n+        for b in filtered_benchs {\n             callback(TeWait(b.desc.clone(), b.testfn.padding()))?;\n             run_test(opts, false, b, tx.clone());\n             let (test, result, stdout) = rx.recv().unwrap();\n@@ -1487,18 +1448,6 @@ pub fn run_test(opts: &TestOpts,\n             monitor_ch.send((desc, TrBench(bs), Vec::new())).unwrap();\n             return;\n         }\n-        DynMetricFn(f) => {\n-            let mut mm = MetricMap::new();\n-            f.call_box(&mut mm);\n-            monitor_ch.send((desc, TrMetrics(mm), Vec::new())).unwrap();\n-            return;\n-        }\n-        StaticMetricFn(f) => {\n-            let mut mm = MetricMap::new();\n-            f(&mut mm);\n-            monitor_ch.send((desc, TrMetrics(mm), Vec::new())).unwrap();\n-            return;\n-        }\n         DynTestFn(f) => {\n             let cb = move |()| {\n                 __rust_begin_short_backtrace(|| f.call_box(()))\n@@ -1540,6 +1489,9 @@ fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any + Send>>) -> Tes\n     }\n }\n \n+#[derive(Clone, PartialEq)]\n+pub struct MetricMap(BTreeMap<String, Metric>);\n+\n impl MetricMap {\n     pub fn new() -> MetricMap {\n         MetricMap(BTreeMap::new())\n@@ -1563,15 +1515,14 @@ impl MetricMap {\n             value,\n             noise,\n         };\n-        let MetricMap(ref mut map) = *self;\n-        map.insert(name.to_owned(), m);\n+        self.0.insert(name.to_owned(), m);\n     }\n \n     pub fn fmt_metrics(&self) -> String {\n-        let MetricMap(ref mm) = *self;\n-        let v: Vec<String> = mm.iter()\n-                               .map(|(k, v)| format!(\"{}: {} (+/- {})\", *k, v.value, v.noise))\n-                               .collect();\n+        let v = self.0\n+                   .iter()\n+                   .map(|(k, v)| format!(\"{}: {} (+/- {})\", *k, v.value, v.noise))\n+                   .collect::<Vec<_>>();\n         v.join(\", \")\n     }\n }"}]}