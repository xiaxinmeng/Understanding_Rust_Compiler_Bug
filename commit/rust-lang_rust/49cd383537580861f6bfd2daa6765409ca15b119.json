{"sha": "49cd383537580861f6bfd2daa6765409ca15b119", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5Y2QzODM1Mzc1ODA4NjFmNmJmZDJkYWE2NzY1NDA5Y2ExNWIxMTk=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-02-27T20:52:27Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-02-27T20:56:20Z"}, "message": "Create stub .d files", "tree": {"sha": "2f5fd4dab09b3a356707a3212489bc67a4416a2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f5fd4dab09b3a356707a3212489bc67a4416a2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49cd383537580861f6bfd2daa6765409ca15b119", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYDqx9BUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLjmMwD9HN/H1DvVTMB5qC7eGp3fncYQ5EO3\nXKIdnyjLMfIinUkBAMg/IQO7+7rxT4WnKup3AruiWJB6Mps1uqGDVsq1RqQA\n=GLBv\n-----END PGP SIGNATURE-----", "payload": "tree 2f5fd4dab09b3a356707a3212489bc67a4416a2f\nparent 74b771423a7d78e3ca000c14c1e153fbcea488e1\nauthor hyd-dev <yd-huang@outlook.com> 1614459147 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1614459380 +0800\n\nCreate stub .d files\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49cd383537580861f6bfd2daa6765409ca15b119", "html_url": "https://github.com/rust-lang/rust/commit/49cd383537580861f6bfd2daa6765409ca15b119", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49cd383537580861f6bfd2daa6765409ca15b119/comments", "author": null, "committer": null, "parents": [{"sha": "74b771423a7d78e3ca000c14c1e153fbcea488e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/74b771423a7d78e3ca000c14c1e153fbcea488e1", "html_url": "https://github.com/rust-lang/rust/commit/74b771423a7d78e3ca000c14c1e153fbcea488e1"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "535acf36df73f307c0fff0403d8527c1aff5b887", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49cd383537580861f6bfd2daa6765409ca15b119/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cd383537580861f6bfd2daa6765409ca15b119/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=49cd383537580861f6bfd2daa6765409ca15b119", "patch": "@@ -609,6 +609,14 @@ fn phase_cargo_rustc(mut args: env::Args) {\n     let print = get_arg_flag_value(\"--print\").is_some(); // whether this is cargo passing `--print` to get some infos\n \n     let store_json = |info: CrateRunInfo| {\n+        // Create a stub .d file to stop Cargo from \"rebuilding\" the crate:\n+        // https://github.com/rust-lang/miri/issues/1724#issuecomment-787115693\n+        // As we store a JSON file instead of building the crate here, an empty file is fine.\n+        let dep_info_name = out_filename(\"\", \".d\");\n+        if verbose {\n+            eprintln!(\"[cargo-miri rustc] writing dep-info to `{}`\", dep_info_name.display());\n+        }\n+        File::create(dep_info_name).expect(\"failed to create fake .d file\");\n         let filename = out_filename(\"\", \"\");\n         if verbose {\n             eprintln!(\"[cargo-miri rustc] writing run info to `{}`\", filename.display());"}, {"sha": "3a8a32db1ede6829b8f5482a106946907eb14f08", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/49cd383537580861f6bfd2daa6765409ca15b119/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/49cd383537580861f6bfd2daa6765409ca15b119/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=49cd383537580861f6bfd2daa6765409ca15b119", "patch": "@@ -50,12 +50,15 @@ def test(name, cmd, stdout_ref, stderr_ref, stdin=b'', env={}):\n     print(\"--- END stderr ---\")\n     fail(\"exit code was {}\".format(p.returncode))\n \n-def test_no_rebuild(name, cmd):\n+def test_no_rebuild(name, cmd, env={}):\n     print(\"Testing {}...\".format(name))\n+    p_env = os.environ.copy()\n+    p_env.update(env)\n     p = subprocess.Popen(\n         cmd,\n         stdout=subprocess.PIPE,\n         stderr=subprocess.PIPE,\n+        env=p_env,\n     )\n     (stdout, stderr) = p.communicate()\n     stdout = stdout.decode(\"UTF-8\")\n@@ -70,14 +73,20 @@ def test_no_rebuild(name, cmd):\n         fail(\"Something was being rebuilt when it should not be (or we got no output)\");\n \n def test_cargo_miri_run():\n+    default_env={\n+        'MIRIFLAGS': \"-Zmiri-disable-isolation\",\n+        'MIRITESTVAR': \"wrongval\", # make sure the build.rs value takes precedence\n+    }\n     test(\"`cargo miri run` (no isolation)\",\n         cargo_miri(\"run\"),\n         \"run.default.stdout.ref\", \"run.default.stderr.ref\",\n         stdin=b'12\\n21\\n',\n-        env={\n-            'MIRIFLAGS': \"-Zmiri-disable-isolation\",\n-            'MIRITESTVAR': \"wrongval\", # make sure the build.rs value takes precedence\n-        },\n+        env=default_env,\n+    )\n+    # Special test: run it again *without* `-q` to make sure nothing is being rebuilt (Miri issue #1722)\n+    test_no_rebuild(\"`cargo miri run` (no rebuild, no isolation)\",\n+        cargo_miri(\"run\", quiet=False) + [\"--\", \"\"],\n+        env=default_env,\n     )\n     test(\"`cargo miri run` (with arguments and target)\",\n         cargo_miri(\"run\") + [\"--bin\", \"cargo-miri-test\", \"--\", \"hello world\", '\"hello world\"'],\n@@ -88,12 +97,6 @@ def test_cargo_miri_run():\n         \"run.subcrate.stdout.ref\", \"run.subcrate.stderr.ref\",\n         env={'MIRIFLAGS': \"-Zmiri-disable-isolation\"},\n     )\n-    # Special test: run it again *without* `-q` to make sure nothing is being rebuilt (Miri issue #1722)\n-    # FIXME: move this test up to right after the first `test`\n-    # (currently that fails, only the 3rd and later runs are really clean... see Miri issue #1722)\n-    test_no_rebuild(\"`cargo miri run` (no rebuild)\",\n-        cargo_miri(\"run\", quiet=False) + [\"--\", \"\"],\n-    )\n \n def test_cargo_miri_test():\n     # rustdoc is not run on foreign targets"}]}