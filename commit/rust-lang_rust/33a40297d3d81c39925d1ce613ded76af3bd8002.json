{"sha": "33a40297d3d81c39925d1ce613ded76af3bd8002", "node_id": "C_kwDOAAsO6NoAKDMzYTQwMjk3ZDNkODFjMzk5MjVkMWNlNjEzZGVkNzZhZjNiZDgwMDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-20T17:45:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-20T17:45:12Z"}, "message": "Rollup merge of #100500 - cjgillot:verify-self-predicate, r=lcnr\n\nBan references to `Self` in trait object substs for projection predicates too.\n\nFixes https://github.com/rust-lang/rust/issues/100484\nFixes https://github.com/rust-lang/rust/issues/100485\n\nr? ````@lcnr````", "tree": {"sha": "0c6799855d1dc2ccef9a4f5e01dac16a98efde0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c6799855d1dc2ccef9a4f5e01dac16a98efde0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33a40297d3d81c39925d1ce613ded76af3bd8002", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAR2oCRBK7hj4Ov3rIwAAuuMIAIMpP6tQLbOWcCpj/OJFwM8k\nYkFwu6xfeNc0VXMUVbuZHHG/B2UWYxepLDGEeF9LCj7YC3s6iZDJT6OVcjqg2PT9\nRf53OPii0/RqaJcjxaiTFV7c1sKr33gOz7CwkAqTjNs2VhxEQoZKHwRCAgoJxvAB\nTwi1oDUaOw0N4obhm5SYq4k4nxx4AOpM9xI1EpAtsbAjdf6AFU02q+c8utgYvI7D\nZG1wxmlq8VH4z8Gsa2YFrVU8OeOaVEjlGKkChab0/ey+tAHdP+tBN/R22h9yACeH\nCqGJ0V4F7805n3qzquI7dRMKKCi49IkfHUcYu+XWLcjsNPXJPWjw4c3RGio/YIA=\n=XylR\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c6799855d1dc2ccef9a4f5e01dac16a98efde0e\nparent e93edf3335ef172274acb208d672db51d40eeb2f\nparent 72acd94117e784d4e7425e827c60d6a6748d7a88\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661017512 +0200\ncommitter GitHub <noreply@github.com> 1661017512 +0200\n\nRollup merge of #100500 - cjgillot:verify-self-predicate, r=lcnr\n\nBan references to `Self` in trait object substs for projection predicates too.\n\nFixes https://github.com/rust-lang/rust/issues/100484\nFixes https://github.com/rust-lang/rust/issues/100485\n\nr? ````@lcnr````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33a40297d3d81c39925d1ce613ded76af3bd8002", "html_url": "https://github.com/rust-lang/rust/commit/33a40297d3d81c39925d1ce613ded76af3bd8002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33a40297d3d81c39925d1ce613ded76af3bd8002/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e93edf3335ef172274acb208d672db51d40eeb2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e93edf3335ef172274acb208d672db51d40eeb2f", "html_url": "https://github.com/rust-lang/rust/commit/e93edf3335ef172274acb208d672db51d40eeb2f"}, {"sha": "72acd94117e784d4e7425e827c60d6a6748d7a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/72acd94117e784d4e7425e827c60d6a6748d7a88", "html_url": "https://github.com/rust-lang/rust/commit/72acd94117e784d4e7425e827c60d6a6748d7a88"}], "stats": {"total": 89, "additions": 67, "deletions": 22}, "files": [{"sha": "5bb02bc246caf28bf5c05136bf6418a515747109", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/33a40297d3d81c39925d1ce613ded76af3bd8002/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a40297d3d81c39925d1ce613ded76af3bd8002/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=33a40297d3d81c39925d1ce613ded76af3bd8002", "patch": "@@ -35,7 +35,7 @@ use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECT\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::astconv_object_safety_violations;\n@@ -1453,21 +1453,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     .enumerate()\n                     .skip(1) // Remove `Self` for `ExistentialPredicate`.\n                     .map(|(index, arg)| {\n-                        if let ty::GenericArgKind::Type(ty) = arg.unpack() {\n-                            debug!(?ty);\n-                            if ty == dummy_self {\n-                                let param = &generics.params[index];\n-                                missing_type_params.push(param.name);\n-                                tcx.ty_error().into()\n-                            } else if ty.walk().any(|arg| arg == dummy_self.into()) {\n-                                references_self = true;\n-                                tcx.ty_error().into()\n-                            } else {\n-                                arg\n-                            }\n-                        } else {\n-                            arg\n+                        if arg == dummy_self.into() {\n+                            let param = &generics.params[index];\n+                            missing_type_params.push(param.name);\n+                            return tcx.ty_error().into();\n+                        } else if arg.walk().any(|arg| arg == dummy_self.into()) {\n+                            references_self = true;\n+                            return tcx.ty_error().into();\n                         }\n+                        arg\n                     })\n                     .collect();\n                 let substs = tcx.intern_substs(&substs[..]);\n@@ -1506,13 +1500,34 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         });\n \n         let existential_projections = bounds.projection_bounds.iter().map(|(bound, _)| {\n-            bound.map_bound(|b| {\n-                if b.projection_ty.self_ty() != dummy_self {\n-                    tcx.sess.delay_span_bug(\n-                        DUMMY_SP,\n-                        &format!(\"trait_ref_to_existential called on {:?} with non-dummy Self\", b),\n-                    );\n+            bound.map_bound(|mut b| {\n+                assert_eq!(b.projection_ty.self_ty(), dummy_self);\n+\n+                // Like for trait refs, verify that `dummy_self` did not leak inside default type\n+                // parameters.\n+                let references_self = b.projection_ty.substs.iter().skip(1).any(|arg| {\n+                    if arg.walk().any(|arg| arg == dummy_self.into()) {\n+                        return true;\n+                    }\n+                    false\n+                });\n+                if references_self {\n+                    tcx.sess\n+                        .delay_span_bug(span, \"trait object projection bounds reference `Self`\");\n+                    let substs: Vec<_> = b\n+                        .projection_ty\n+                        .substs\n+                        .iter()\n+                        .map(|arg| {\n+                            if arg.walk().any(|arg| arg == dummy_self.into()) {\n+                                return tcx.ty_error().into();\n+                            }\n+                            arg\n+                        })\n+                        .collect();\n+                    b.projection_ty.substs = tcx.intern_substs(&substs[..]);\n                 }\n+\n                 ty::ExistentialProjection::erase_self_ty(tcx, b)\n             })\n         });"}, {"sha": "b0de8ccd67847b23018d456d434a35d18de5ad23", "filename": "src/test/ui/traits/alias/self-in-const-generics.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33a40297d3d81c39925d1ce613ded76af3bd8002/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-const-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a40297d3d81c39925d1ce613ded76af3bd8002/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-const-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-const-generics.rs?ref=33a40297d3d81c39925d1ce613ded76af3bd8002", "patch": "@@ -0,0 +1,12 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+#![feature(trait_alias)]\n+\n+trait Bar<const N: usize> {}\n+\n+trait BB = Bar<{ 2 + 1 }>;\n+\n+fn foo(x: &dyn BB) {}\n+//~^ ERROR the trait alias `BB` cannot be made into an object [E0038]\n+\n+fn main() {}"}, {"sha": "61cc217cfbce60f8d51f1d0ce33fd48d7b6ccaa6", "filename": "src/test/ui/traits/alias/self-in-const-generics.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/33a40297d3d81c39925d1ce613ded76af3bd8002/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-const-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33a40297d3d81c39925d1ce613ded76af3bd8002/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-const-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-const-generics.stderr?ref=33a40297d3d81c39925d1ce613ded76af3bd8002", "patch": "@@ -0,0 +1,11 @@\n+error[E0038]: the trait alias `BB` cannot be made into an object\n+  --> $DIR/self-in-const-generics.rs:9:16\n+   |\n+LL | fn foo(x: &dyn BB) {}\n+   |                ^^\n+   |\n+   = note: it cannot use `Self` as a type parameter in a supertrait or `where`-clause\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "0bb6335f91e4b249e61f280413d23a7284fa22d6", "filename": "src/test/ui/traits/alias/self-in-generics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33a40297d3d81c39925d1ce613ded76af3bd8002/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a40297d3d81c39925d1ce613ded76af3bd8002/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs?ref=33a40297d3d81c39925d1ce613ded76af3bd8002", "patch": "@@ -1,3 +1,10 @@\n+// astconv uses `FreshTy(0)` as a dummy `Self` type when instanciating trait objects.\n+// This `FreshTy(0)` can leak into substs, causing ICEs in several places.\n+// Using `save-analysis` triggers type-checking `f` that would be normally skipped\n+// as `type_of` emitted an error.\n+//\n+// compile-flags: -Zsave-analysis\n+\n #![feature(trait_alias)]\n \n pub trait SelfInput = Fn(&mut Self);"}, {"sha": "110d60e6e9116127e6f49e82e756d5ab51e53790", "filename": "src/test/ui/traits/alias/self-in-generics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33a40297d3d81c39925d1ce613ded76af3bd8002/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33a40297d3d81c39925d1ce613ded76af3bd8002/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr?ref=33a40297d3d81c39925d1ce613ded76af3bd8002", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait alias `SelfInput` cannot be made into an object\n-  --> $DIR/self-in-generics.rs:5:19\n+  --> $DIR/self-in-generics.rs:12:19\n    |\n LL | pub fn f(_f: &dyn SelfInput) {}\n    |                   ^^^^^^^^^"}]}