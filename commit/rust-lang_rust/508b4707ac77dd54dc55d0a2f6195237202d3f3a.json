{"sha": "508b4707ac77dd54dc55d0a2f6195237202d3f3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOGI0NzA3YWM3N2RkNTRkYzU1ZDBhMmY2MTk1MjM3MjAyZDNmM2E=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-03T17:51:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-03T17:51:15Z"}, "message": "Rollup merge of #81692 - Manishearth:clippyup, r=tmandry\n\nUpdate clippy\n\nr? `@flip1995`", "tree": {"sha": "2ab982edbd4b657137e98a265aff9423e60355f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ab982edbd4b657137e98a265aff9423e60355f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/508b4707ac77dd54dc55d0a2f6195237202d3f3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgGuKTCRBK7hj4Ov3rIwAAdHIIAGQts76ny7Yi3FLqWLuesioR\nSGp5vPDT0XaD3JRyXsMNZGkHdP4Y+vnVItYX565Gr87+NXN6r/7jZ4lHlPfiZ5Wx\nkaZQI1IHRpU/sa7+z3zfW6ENA+K1DO+IsUUz8HNXNDJlYLDfOAidwIA1KtWop1R1\nOampCCpW+VoWazfqUJviBMrVLjMx4BM9kx1brFHKeg0tXqJDvUNoFDsPkGdVD8DT\npVsTz7dB9GJ8ziZGqIHDIDbCQUdy5zD7CrHxjrC/TpKRculfVRLsqsGBJiL6TUOe\nzca9yPIUQ/Kzr0WUqsK0Ga6Y75HqfbgKzbLkKzbuYBa1oCoCxRqH9FAQ1bOcOic=\n=nfSz\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ab982edbd4b657137e98a265aff9423e60355f6\nparent 66959448e6bee79d433a777e448b8616822577e4\nparent 588931209e7c7c5d153ac23785afa53845f0cdc1\nauthor Mara Bos <m-ou.se@m-ou.se> 1612374675 +0100\ncommitter GitHub <noreply@github.com> 1612374675 +0100\n\nRollup merge of #81692 - Manishearth:clippyup, r=tmandry\n\nUpdate clippy\n\nr? `@flip1995`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/508b4707ac77dd54dc55d0a2f6195237202d3f3a", "html_url": "https://github.com/rust-lang/rust/commit/508b4707ac77dd54dc55d0a2f6195237202d3f3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/508b4707ac77dd54dc55d0a2f6195237202d3f3a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66959448e6bee79d433a777e448b8616822577e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/66959448e6bee79d433a777e448b8616822577e4", "html_url": "https://github.com/rust-lang/rust/commit/66959448e6bee79d433a777e448b8616822577e4"}, {"sha": "588931209e7c7c5d153ac23785afa53845f0cdc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/588931209e7c7c5d153ac23785afa53845f0cdc1", "html_url": "https://github.com/rust-lang/rust/commit/588931209e7c7c5d153ac23785afa53845f0cdc1"}], "stats": {"total": 644, "additions": 518, "deletions": 126}, "files": [{"sha": "c1032204a22cb8b618f4609fdd713acd64c94ec8", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -2079,6 +2079,7 @@ Released 2018-09-13\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n [`missing_errors_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc\n [`missing_inline_in_public_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\n+[`missing_panics_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc\n [`missing_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n [`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes\n [`mixed_case_hex_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals"}, {"sha": "5954ab25d194234539ec255b21520d480b00cc23", "filename": "src/tools/clippy/CONTRIBUTING.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCONTRIBUTING.md?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -46,11 +46,12 @@ first read the [Basics docs](doc/basics.md).**\n \n ### Finding something to fix/improve\n \n-All issues on Clippy are mentored, if you want help with a bug just ask\n-@Manishearth, @flip1995, @phansch or @yaahc.\n+All issues on Clippy are mentored, if you want help simply ask @Manishearth, @flip1995, @phansch\n+or @llogiq directly by mentioning them in the issue or over on [Zulip]. This list may be out of date.\n+All currently active mentors can be found [here](https://github.com/rust-lang/highfive/blob/master/highfive/configs/rust-lang/rust-clippy.json#L3)\n \n-Some issues are easier than others. The [`good-first-issue`] label can be used to find the easy issues.\n-If you want to work on an issue, please leave a comment so that we can assign it to you!\n+Some issues are easier than others. The [`good-first-issue`] label can be used to find the easy\n+issues. You can use `@rustbot claim` to assign the issue to yourself.\n \n There are also some abandoned PRs, marked with [`S-inactive-closed`].\n Pretty often these PRs are nearly completed and just need some extra steps"}, {"sha": "2a869e9d4491b6805a332495fd753b886a1c821e", "filename": "src/tools/clippy/clippy_dev/src/bless.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fbless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fbless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fbless.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -24,6 +24,9 @@ static CLIPPY_BUILD_TIME: SyncLazy<Option<std::time::SystemTime>> = SyncLazy::ne\n     fs::metadata(path).ok()?.modified().ok()\n });\n \n+/// # Panics\n+///\n+/// Panics if the path to a test file is broken\n pub fn bless(ignore_timestamp: bool) {\n     let test_suite_dirs = [\n         clippy_project_root().join(\"tests\").join(\"ui\"),"}, {"sha": "4d0fdadbd85d184d6b927db81211764c729e5153", "filename": "src/tools/clippy/clippy_dev/src/fmt.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Ffmt.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -8,7 +8,7 @@ use walkdir::WalkDir;\n \n #[derive(Debug)]\n pub enum CliError {\n-    CommandFailed(String),\n+    CommandFailed(String, String),\n     IoError(io::Error),\n     RustfmtNotInstalled,\n     WalkDirError(walkdir::Error),\n@@ -75,8 +75,8 @@ pub fn run(check: bool, verbose: bool) {\n \n     fn output_err(err: CliError) {\n         match err {\n-            CliError::CommandFailed(command) => {\n-                eprintln!(\"error: A command failed! `{}`\", command);\n+            CliError::CommandFailed(command, stderr) => {\n+                eprintln!(\"error: A command failed! `{}`\\nstderr: {}\", command, stderr);\n             },\n             CliError::IoError(err) => {\n                 eprintln!(\"error: {}\", err);\n@@ -136,12 +136,16 @@ fn exec(\n         println!(\"{}\", format_command(&program, &dir, args));\n     }\n \n-    let mut child = Command::new(&program).current_dir(&dir).args(args.iter()).spawn()?;\n-    let code = child.wait()?;\n-    let success = code.success();\n+    let child = Command::new(&program).current_dir(&dir).args(args.iter()).spawn()?;\n+    let output = child.wait_with_output()?;\n+    let success = output.status.success();\n \n     if !context.check && !success {\n-        return Err(CliError::CommandFailed(format_command(&program, &dir, args)));\n+        let stderr = std::str::from_utf8(&output.stderr).unwrap_or(\"\");\n+        return Err(CliError::CommandFailed(\n+            format_command(&program, &dir, args),\n+            String::from(stderr),\n+        ));\n     }\n \n     Ok(success)\n@@ -177,7 +181,10 @@ fn rustfmt_test(context: &FmtContext) -> Result<(), CliError> {\n     {\n         Err(CliError::RustfmtNotInstalled)\n     } else {\n-        Err(CliError::CommandFailed(format_command(&program, &dir, args)))\n+        Err(CliError::CommandFailed(\n+            format_command(&program, &dir, args),\n+            std::str::from_utf8(&output.stderr).unwrap_or(\"\").to_string(),\n+        ))\n     }\n }\n "}, {"sha": "01d1fc9211a94fc2576f26786df87e64485824df", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -236,6 +236,10 @@ pub struct FileChange {\n /// `path` is the relative path to the file on which you want to perform the replacement.\n ///\n /// See `replace_region_in_text` for documentation of the other options.\n+///\n+/// # Panics\n+///\n+/// Panics if the path could not read or then written\n pub fn replace_region_in_file<F>(\n     path: &Path,\n     start: &str,\n@@ -283,6 +287,10 @@ where\n ///     .new_lines;\n /// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n /// ```\n+///\n+/// # Panics\n+///\n+/// Panics if start or end is not valid regex\n pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange\n where\n     F: FnOnce() -> Vec<String>,\n@@ -329,6 +337,11 @@ where\n }\n \n /// Returns the path to the Clippy project directory\n+///\n+/// # Panics\n+///\n+/// Panics if the current directory could not be retrieved, there was an error reading any of the\n+/// Cargo.toml files or ancestor directory is the clippy root directory\n #[must_use]\n pub fn clippy_project_root() -> PathBuf {\n     let current_dir = std::env::current_dir().unwrap();"}, {"sha": "a3c329b578b2050d411c9ee0d010354a5c176699", "filename": "src/tools/clippy/clippy_dev/src/ra_setup.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fra_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fra_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fra_setup.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -8,6 +8,9 @@ use std::path::{Path, PathBuf};\n // This allows rust analyzer to analyze rustc internals and show proper information inside clippy\n // code. See https://github.com/rust-analyzer/rust-analyzer/issues/3517 and https://github.com/rust-lang/rust-clippy/issues/5514 for details\n \n+/// # Panics\n+///\n+/// Panics if `rustc_path` does not lead to a rustc repo or the files could not be read\n pub fn run(rustc_path: Option<&str>) {\n     // we can unwrap here because the arg is required by clap\n     let rustc_path = PathBuf::from(rustc_path.unwrap());"}, {"sha": "faa94859601e3a3e010af89a223956caba8b520a", "filename": "src/tools/clippy/clippy_dev/src/serve.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fserve.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -4,6 +4,9 @@ use std::process::Command;\n use std::thread;\n use std::time::{Duration, SystemTime};\n \n+/// # Panics\n+///\n+/// Panics if the python commands could not be spawned\n pub fn run(port: u16, lint: Option<&str>) -> ! {\n     let mut url = Some(match lint {\n         None => format!(\"http://localhost:{}\", port),"}, {"sha": "75e71eb1e4ce23158998b6bec356cf0e1f27780e", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 120, "deletions": 5, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -1,4 +1,7 @@\n-use crate::utils::{implements_trait, is_entrypoint_fn, is_type_diagnostic_item, return_ty, span_lint};\n+use crate::utils::{\n+    implements_trait, is_entrypoint_fn, is_type_diagnostic_item, match_panic_def_id, method_chain_args, return_ty,\n+    span_lint, span_lint_and_note,\n+};\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_ast::ast::{Async, AttrKind, Attribute, FnKind, FnRetTy, ItemKind};\n@@ -8,7 +11,10 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n use rustc_errors::Handler;\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n@@ -122,6 +128,37 @@ declare_clippy_lint! {\n     \"`pub fn` returns `Result` without `# Errors` in doc comment\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks the doc comments of publicly visible functions that\n+    /// may panic and warns if there is no `# Panics` section.\n+    ///\n+    /// **Why is this bad?** Documenting the scenarios in which panicking occurs\n+    /// can help callers who do not want to panic to avoid those situations.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Examples:**\n+    ///\n+    /// Since the following function may panic it has a `# Panics` section in\n+    /// its doc comment:\n+    ///\n+    /// ```rust\n+    /// /// # Panics\n+    /// ///\n+    /// /// Will panic if y is 0\n+    /// pub fn divide_by(x: i32, y: i32) -> i32 {\n+    ///     if y == 0 {\n+    ///         panic!(\"Cannot divide by 0\")\n+    ///     } else {\n+    ///         x / y\n+    ///     }\n+    /// }\n+    /// ```\n+    pub MISSING_PANICS_DOC,\n+    pedantic,\n+    \"`pub fn` may panic without `# Panics` in doc comment\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `fn main() { .. }` in doctests\n     ///\n@@ -166,7 +203,9 @@ impl DocMarkdown {\n     }\n }\n \n-impl_lint_pass!(DocMarkdown => [DOC_MARKDOWN, MISSING_SAFETY_DOC, MISSING_ERRORS_DOC, NEEDLESS_DOCTEST_MAIN]);\n+impl_lint_pass!(DocMarkdown =>\n+    [DOC_MARKDOWN, MISSING_SAFETY_DOC, MISSING_ERRORS_DOC, MISSING_PANICS_DOC, NEEDLESS_DOCTEST_MAIN]\n+);\n \n impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n@@ -180,7 +219,15 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                 if !(is_entrypoint_fn(cx, cx.tcx.hir().local_def_id(item.hir_id).to_def_id())\n                     || in_external_macro(cx.tcx.sess, item.span))\n                 {\n-                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n+                    let body = cx.tcx.hir().body(body_id);\n+                    let impl_item_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+                    let mut fpu = FindPanicUnwrap {\n+                        cx,\n+                        typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                        panic_span: None,\n+                    };\n+                    fpu.visit_expr(&body.value);\n+                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n                 }\n             },\n             hir::ItemKind::Impl(ref impl_) => {\n@@ -200,7 +247,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, None);\n+                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, None, None);\n             }\n         }\n     }\n@@ -211,7 +258,15 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n             return;\n         }\n         if let hir::ImplItemKind::Fn(ref sig, body_id) = item.kind {\n-            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n+            let body = cx.tcx.hir().body(body_id);\n+            let impl_item_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+            let mut fpu = FindPanicUnwrap {\n+                cx,\n+                typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                panic_span: None,\n+            };\n+            fpu.visit_expr(&body.value);\n+            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n         }\n     }\n }\n@@ -223,6 +278,7 @@ fn lint_for_missing_headers<'tcx>(\n     sig: &hir::FnSig<'_>,\n     headers: DocHeaders,\n     body_id: Option<hir::BodyId>,\n+    panic_span: Option<Span>,\n ) {\n     if !cx.access_levels.is_exported(hir_id) {\n         return; // Private functions do not require doc comments\n@@ -235,6 +291,16 @@ fn lint_for_missing_headers<'tcx>(\n             \"unsafe function's docs miss `# Safety` section\",\n         );\n     }\n+    if !headers.panics && panic_span.is_some() {\n+        span_lint_and_note(\n+            cx,\n+            MISSING_PANICS_DOC,\n+            span,\n+            \"docs for function which may panic missing `# Panics` section\",\n+            panic_span,\n+            \"first possible panic found here\",\n+        );\n+    }\n     if !headers.errors {\n         if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n             span_lint(\n@@ -321,6 +387,7 @@ pub fn strip_doc_comment_decoration(doc: &str, comment_kind: CommentKind, span:\n struct DocHeaders {\n     safety: bool,\n     errors: bool,\n+    panics: bool,\n }\n \n fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &'a [Attribute]) -> DocHeaders {\n@@ -338,6 +405,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n             return DocHeaders {\n                 safety: true,\n                 errors: true,\n+                panics: true,\n             };\n         }\n     }\n@@ -353,6 +421,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n         return DocHeaders {\n             safety: false,\n             errors: false,\n+            panics: false,\n         };\n     }\n \n@@ -394,6 +463,7 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n     let mut headers = DocHeaders {\n         safety: false,\n         errors: false,\n+        panics: false,\n     };\n     let mut in_code = false;\n     let mut in_link = None;\n@@ -439,6 +509,7 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n                 }\n                 headers.safety |= in_heading && text.trim() == \"Safety\";\n                 headers.errors |= in_heading && text.trim() == \"Errors\";\n+                headers.panics |= in_heading && text.trim() == \"Panics\";\n                 let index = match spans.binary_search_by(|c| c.0.cmp(&range.start)) {\n                     Ok(o) => o,\n                     Err(e) => e - 1,\n@@ -609,3 +680,47 @@ fn check_word(cx: &LateContext<'_>, word: &str, span: Span) {\n         );\n     }\n }\n+\n+struct FindPanicUnwrap<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    panic_span: Option<Span>,\n+    typeck_results: &'tcx ty::TypeckResults<'tcx>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if self.panic_span.is_some() {\n+            return;\n+        }\n+\n+        // check for `begin_panic`\n+        if_chain! {\n+            if let ExprKind::Call(ref func_expr, _) = expr.kind;\n+            if let ExprKind::Path(QPath::Resolved(_, ref path)) = func_expr.kind;\n+            if let Some(path_def_id) = path.res.opt_def_id();\n+            if match_panic_def_id(self.cx, path_def_id);\n+            then {\n+                self.panic_span = Some(expr.span);\n+            }\n+        }\n+\n+        // check for `unwrap`\n+        if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n+            let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+            if is_type_diagnostic_item(self.cx, reciever_ty, sym::option_type)\n+                || is_type_diagnostic_item(self.cx, reciever_ty, sym::result_type)\n+            {\n+                self.panic_span = Some(expr.span);\n+            }\n+        }\n+\n+        // and check sub-expressions\n+        intravisit::walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    }\n+}"}, {"sha": "6f22f65deac80ec183d003c4b7ac0ebeb1f581df", "filename": "src/tools/clippy/clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -160,15 +160,17 @@ impl EarlyLintPass for ExcessiveBools {\n                         \"consider using a state machine or refactoring bools into two-variant enums\",\n                     );\n                 }\n-            }\n-            ItemKind::Impl(box ImplKind { of_trait: None, items, .. })\n+            },\n+            ItemKind::Impl(box ImplKind {\n+                of_trait: None, items, ..\n+            })\n             | ItemKind::Trait(box TraitKind(.., items)) => {\n                 for item in items {\n                     if let AssocItemKind::Fn(box FnKind(_, fn_sig, _, _)) = &item.kind {\n                         self.check_fn_sig(cx, fn_sig, item.span);\n                     }\n                 }\n-            }\n+            },\n             ItemKind::Fn(box FnKind(_, fn_sig, _, _)) => self.check_fn_sig(cx, fn_sig, item.span),\n             _ => (),\n         }"}, {"sha": "e3988d0038c23b8f2e187afad6d3836c62a049fc", "filename": "src/tools/clippy/clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -75,10 +75,14 @@ impl LateLintPass<'_> for ExhaustiveItems {\n             if cx.access_levels.is_exported(item.hir_id);\n             if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {\n-                let (lint, msg) = if let ItemKind::Enum(..) = item.kind {\n-                    (EXHAUSTIVE_ENUMS, \"exported enums should not be exhaustive\")\n-                } else {\n+                let (lint, msg) = if let ItemKind::Struct(ref v, ..) = item.kind {\n+                    if v.fields().iter().any(|f| !f.vis.node.is_pub()) {\n+                        // skip structs with private fields\n+                        return;\n+                    }\n                     (EXHAUSTIVE_STRUCTS, \"exported structs should not be exhaustive\")\n+                } else {\n+                    (EXHAUSTIVE_ENUMS, \"exported enums should not be exhaustive\")\n                 };\n                 let suggestion_span = item.span.shrink_to_lo();\n                 let indent = \" \".repeat(indent_of(cx, item.span).unwrap_or(0));"}, {"sha": "5a40c00bd673a6223ed7a3e2508a0f87fdbe591b", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -592,6 +592,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &disallowed_method::DISALLOWED_METHOD,\n         &doc::DOC_MARKDOWN,\n         &doc::MISSING_ERRORS_DOC,\n+        &doc::MISSING_PANICS_DOC,\n         &doc::MISSING_SAFETY_DOC,\n         &doc::NEEDLESS_DOCTEST_MAIN,\n         &double_comparison::DOUBLE_COMPARISONS,\n@@ -1317,6 +1318,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&derive::UNSAFE_DERIVE_DESERIALIZE),\n         LintId::of(&doc::DOC_MARKDOWN),\n         LintId::of(&doc::MISSING_ERRORS_DOC),\n+        LintId::of(&doc::MISSING_PANICS_DOC),\n         LintId::of(&empty_enum::EMPTY_ENUM),\n         LintId::of(&enum_variants::MODULE_NAME_REPETITIONS),\n         LintId::of(&enum_variants::PUB_ENUM_VARIANT_NAMES),"}, {"sha": "ba7b9bd04248d3d2713fa597f421e80e2e00c0ea", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -1592,7 +1592,17 @@ where\n                 }\n             },\n             (&Kind::End(a, _), &Kind::Start(b, _)) if a != Bound::Included(b) => (),\n-            _ => return Some((a.range(), b.range())),\n+            _ => {\n+                // skip if the range `a` is completely included into the range `b`\n+                if let Ordering::Equal | Ordering::Less = a.cmp(&b) {\n+                    let kind_a = Kind::End(a.range().node.1, a.range());\n+                    let kind_b = Kind::End(b.range().node.1, b.range());\n+                    if let Ordering::Equal | Ordering::Greater = kind_a.cmp(&kind_b) {\n+                        return None;\n+                    }\n+                }\n+                return Some((a.range(), b.range()));\n+            },\n         }\n     }\n "}, {"sha": "642326469725fce4194e31ea222a794ef92134c3", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -247,7 +247,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (ForeignMod(l), ForeignMod(r)) => {\n             both(&l.abi, &r.abi, |l, r| eq_str_lit(l, r))\n                 && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_foreign_item_kind))\n-        }\n+        },\n         (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n@@ -259,7 +259,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         },\n         (Struct(lv, lg), Struct(rv, rg)) | (Union(lv, lg), Union(rv, rg)) => {\n             eq_variant_data(lv, rv) && eq_generics(lg, rg)\n-        }\n+        },\n         (Trait(box TraitKind(la, lu, lg, lb, li)), Trait(box TraitKind(ra, ru, rg, rb, ri))) => {\n             la == ra\n                 && matches!(lu, Unsafe::No) == matches!(ru, Unsafe::No)\n@@ -331,15 +331,10 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n-        (Const(ld, lt, le), Const(rd, rt, re)) => {\n-            eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re)\n-        }\n+        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n-            eq_defaultness(*ld, *rd)\n-                && eq_fn_sig(lf, rf)\n-                && eq_generics(lg, rg)\n-                && both(lb, rb, |l, r| eq_block(l, r))\n-        }\n+            eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n+        },\n         (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)"}, {"sha": "269be217c2d875bf3db450a39940705666154459", "filename": "src/tools/clippy/clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -110,7 +110,7 @@ pub fn span_lint_and_help<'a, T: LintContext>(\n pub fn span_lint_and_note<'a, T: LintContext>(\n     cx: &'a T,\n     lint: &'static Lint,\n-    span: Span,\n+    span: impl Into<MultiSpan>,\n     msg: &str,\n     note_span: Option<Span>,\n     note: &str,"}, {"sha": "cccad243e1b5917a1c52b4d34979a9fdc4626345", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -760,7 +760,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n             // Extract the path to the matched type\n             if let Some(segments) = path_to_matched_type(cx, ty_path);\n             let segments: Vec<&str> = segments.iter().map(|sym| &**sym).collect();\n-            if let Some(ty_did) = path_to_res(cx, &segments[..]).and_then(|res| res.opt_def_id());\n+            if let Some(ty_did) = path_to_res(cx, &segments[..]).opt_def_id();\n             // Check if the matched type is a diagnostic item\n             let diag_items = cx.tcx.diagnostic_items(ty_did.krate);\n             if let Some(item_name) = diag_items.iter().find_map(|(k, v)| if *v == ty_did { Some(k) } else { None });\n@@ -833,7 +833,7 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n // This is not a complete resolver for paths. It works on all the paths currently used in the paths\n // module.  That's all it does and all it needs to do.\n pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n-    if path_to_res(cx, path).is_some() {\n+    if path_to_res(cx, path) != Res::Err {\n         return true;\n     }\n \n@@ -906,7 +906,7 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n         }\n \n         for &module in &[&paths::KW_MODULE, &paths::SYM_MODULE] {\n-            if let Some(Res::Def(_, def_id)) = path_to_res(cx, module) {\n+            if let Some(def_id) = path_to_res(cx, module).opt_def_id() {\n                 for item in cx.tcx.item_children(def_id).iter() {\n                     if_chain! {\n                         if let Res::Def(DefKind::Const, item_def_id) = item.res;"}, {"sha": "ef45f9fdcd5d49a29e1836ad784351c5f88fe48c", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -309,7 +309,15 @@ pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n \n /// Gets the definition associated to a path.\n #[allow(clippy::shadow_unrelated)] // false positive #6563\n-pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Option<Res> {\n+pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n+    macro_rules! try_res {\n+        ($e:expr) => {\n+            match $e {\n+                Some(e) => e,\n+                None => return Res::Err,\n+            }\n+        };\n+    }\n     fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<&'tcx Export<HirId>> {\n         tcx.item_children(def_id)\n             .iter()\n@@ -318,12 +326,12 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Option<Res> {\n \n     let (krate, first, path) = match *path {\n         [krate, first, ref path @ ..] => (krate, first, path),\n-        _ => return None,\n+        _ => return Res::Err,\n     };\n     let tcx = cx.tcx;\n     let crates = tcx.crates();\n-    let krate = crates.iter().find(|&&num| tcx.crate_name(num).as_str() == krate)?;\n-    let first = item_child_by_name(tcx, krate.as_def_id(), first)?;\n+    let krate = try_res!(crates.iter().find(|&&num| tcx.crate_name(num).as_str() == krate));\n+    let first = try_res!(item_child_by_name(tcx, krate.as_def_id(), first));\n     let last = path\n         .iter()\n         .copied()\n@@ -343,21 +351,15 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Option<Res> {\n             } else {\n                 None\n             }\n-        })?;\n-    Some(last.res)\n+        });\n+    try_res!(last).res\n }\n \n /// Convenience function to get the `DefId` of a trait by path.\n /// It could be a trait or trait alias.\n pub fn get_trait_def_id(cx: &LateContext<'_>, path: &[&str]) -> Option<DefId> {\n-    let res = match path_to_res(cx, path) {\n-        Some(res) => res,\n-        None => return None,\n-    };\n-\n-    match res {\n+    match path_to_res(cx, path) {\n         Res::Def(DefKind::Trait | DefKind::TraitAlias, trait_id) => Some(trait_id),\n-        Res::Err => unreachable!(\"this trait resolution is impossible: {:?}\", &path),\n         _ => None,\n     }\n }\n@@ -1532,10 +1534,11 @@ pub fn fn_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<DefId> {\n         ExprKind::Call(\n             Expr {\n                 kind: ExprKind::Path(qpath),\n+                hir_id: path_hir_id,\n                 ..\n             },\n             ..,\n-        ) => cx.typeck_results().qpath_res(qpath, expr.hir_id).opt_def_id(),\n+        ) => cx.typeck_results().qpath_res(qpath, *path_hir_id).opt_def_id(),\n         _ => None,\n     }\n }"}, {"sha": "978a232bcfb3a132a37ef2d6d09f6b5ede42c02a", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -233,7 +233,11 @@ impl_lint_pass!(Write => [\n \n impl EarlyLintPass for Write {\n     fn check_item(&mut self, _: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Impl(box ImplKind { of_trait: Some(trait_ref), .. }) = &item.kind {\n+        if let ItemKind::Impl(box ImplKind {\n+            of_trait: Some(trait_ref),\n+            ..\n+        }) = &item.kind\n+        {\n             let trait_name = trait_ref\n                 .path\n                 .segments"}, {"sha": "8fd1dea9aeef9bfe6843c7df2c35e0d45e49ec67", "filename": "src/tools/clippy/doc/adding_lints.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -581,15 +581,15 @@ in the following steps:\n 3. Passing the configuration value to the lint impl struct:\n \n     First find the struct construction in the [clippy_lints lib file](/clippy_lints/src/lib.rs). \n-    Make sure that `clippy dev update_lints` added it beforehand. The configuration value is now \n-    cloned or copied into a local value that is then passed to the impl struct like this:\n+    The configuration value is now cloned or copied into a local value that is then passed to the\n+    impl struct like this:\n     ```rust\n     // Default generated registration:\n-    store.register_late_pass(|| box module::StructName);\n+    store.register_*_pass(|| box module::StructName);\n \n     // New registration with configuration value\n     let configuration_ident = conf.configuration_ident.clone();\n-    store.register_late_pass(move || box module::StructName::new(configuration_ident));\n+    store.register_*_pass(move || box module::StructName::new(configuration_ident));\n     ```\n \n     Congratulations the work is almost done. The configuration value can now be accessed\n@@ -599,7 +599,7 @@ in the following steps:\n     1. The default configured value can be tested like any normal lint in [`tests/ui`](/tests/ui).\n     2. The configuration itself will be tested separately in [`tests/ui-toml`](/tests/ui-toml). \n         Simply add a new subfolder with a fitting name. This folder contains a `clippy.toml` file \n-        with the configuration value and a rust file that should be linted by clippy. The test can \n+        with the configuration value and a rust file that should be linted by Clippy. The test can \n         otherwise be written as usual.\n \n ## Cheatsheet"}, {"sha": "a9416f3b20b7a3b229c4a5c1b62ba1451f60bf26", "filename": "src/tools/clippy/doc/basics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fdoc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fdoc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdoc%2Fbasics.md?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -109,7 +109,7 @@ See <https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n | HIR          | High-Level Intermediate Representation |\n | TCX          | Type context                           |\n \n-This is a concise list of abbreviations that can come up during clippy development. An extensive\n+This is a concise list of abbreviations that can come up during Clippy development. An extensive\n general list can be found in the [rustc-dev-guide glossary][glossary]. Always feel free to ask if\n an abbreviation or meaning is unclear to you.\n "}, {"sha": "2b793589049ba7b7d16dffb9156115d2cdd52ced", "filename": "src/tools/clippy/mini-macro/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fmini-macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Fmini-macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fmini-macro%2Fsrc%2Flib.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -7,6 +7,9 @@ extern crate proc_macro;\n use proc_macro::{quote, TokenStream};\n \n #[proc_macro_derive(ClippyMiniMacroTest)]\n+/// # Panics\n+///\n+/// Panics if the macro derivation fails\n pub fn mini_macro(_: TokenStream) -> TokenStream {\n     quote!(\n         #[allow(unused)]"}, {"sha": "b617203bef6d8208dac6f963f5df95bafa421a88", "filename": "src/tools/clippy/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frust-toolchain?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-01-30\"\n+channel = \"nightly-2021-02-03\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\", \"rustfmt\"]"}, {"sha": "7ef932f367b101a61e47375f0b580482a42ab4e2", "filename": "src/tools/clippy/tests/ui/doc_panics.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_panics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_panics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_panics.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -0,0 +1,95 @@\n+#![warn(clippy::missing_panics_doc)]\n+#![allow(clippy::option_map_unit_fn)]\n+\n+fn main() {}\n+\n+/// This needs to be documented\n+pub fn unwrap() {\n+    let result = Err(\"Hi\");\n+    result.unwrap()\n+}\n+\n+/// This needs to be documented\n+pub fn panic() {\n+    panic!(\"This function panics\")\n+}\n+\n+/// This needs to be documented\n+pub fn todo() {\n+    todo!()\n+}\n+\n+/// This needs to be documented\n+pub fn inner_body(opt: Option<u32>) {\n+    opt.map(|x| {\n+        if x == 10 {\n+            panic!()\n+        }\n+    });\n+}\n+\n+/// This is documented\n+///\n+/// # Panics\n+///\n+/// Panics if `result` if an error\n+pub fn unwrap_documented() {\n+    let result = Err(\"Hi\");\n+    result.unwrap()\n+}\n+\n+/// This is documented\n+///\n+/// # Panics\n+///\n+/// Panics just because\n+pub fn panic_documented() {\n+    panic!(\"This function panics\")\n+}\n+\n+/// This is documented\n+///\n+/// # Panics\n+///\n+/// Panics if `opt` is Just(10)\n+pub fn inner_body_documented(opt: Option<u32>) {\n+    opt.map(|x| {\n+        if x == 10 {\n+            panic!()\n+        }\n+    });\n+}\n+\n+/// This is documented\n+///\n+/// # Panics\n+///\n+/// We still need to do this part\n+pub fn todo_documented() {\n+    todo!()\n+}\n+\n+/// This is okay because it is private\n+fn unwrap_private() {\n+    let result = Err(\"Hi\");\n+    result.unwrap()\n+}\n+\n+/// This is okay because it is private\n+fn panic_private() {\n+    panic!(\"This function panics\")\n+}\n+\n+/// This is okay because it is private\n+fn todo_private() {\n+    todo!()\n+}\n+\n+/// This is okay because it is private\n+fn inner_body_private(opt: Option<u32>) {\n+    opt.map(|x| {\n+        if x == 10 {\n+            panic!()\n+        }\n+    });\n+}"}, {"sha": "c0c4e9e4fa7eec6d682eddd4f7b214cfeded6712", "filename": "src/tools/clippy/tests/ui/doc_panics.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_panics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_panics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_panics.stderr?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -0,0 +1,67 @@\n+error: docs for function which may panic missing `# Panics` section\n+  --> $DIR/doc_panics.rs:7:1\n+   |\n+LL | / pub fn unwrap() {\n+LL | |     let result = Err(\"Hi\");\n+LL | |     result.unwrap()\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::missing-panics-doc` implied by `-D warnings`\n+note: first possible panic found here\n+  --> $DIR/doc_panics.rs:9:5\n+   |\n+LL |     result.unwrap()\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: docs for function which may panic missing `# Panics` section\n+  --> $DIR/doc_panics.rs:13:1\n+   |\n+LL | / pub fn panic() {\n+LL | |     panic!(\"This function panics\")\n+LL | | }\n+   | |_^\n+   |\n+note: first possible panic found here\n+  --> $DIR/doc_panics.rs:14:5\n+   |\n+LL |     panic!(\"This function panics\")\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: docs for function which may panic missing `# Panics` section\n+  --> $DIR/doc_panics.rs:18:1\n+   |\n+LL | / pub fn todo() {\n+LL | |     todo!()\n+LL | | }\n+   | |_^\n+   |\n+note: first possible panic found here\n+  --> $DIR/doc_panics.rs:19:5\n+   |\n+LL |     todo!()\n+   |     ^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: docs for function which may panic missing `# Panics` section\n+  --> $DIR/doc_panics.rs:23:1\n+   |\n+LL | / pub fn inner_body(opt: Option<u32>) {\n+LL | |     opt.map(|x| {\n+LL | |         if x == 10 {\n+LL | |             panic!()\n+LL | |         }\n+LL | |     });\n+LL | | }\n+   | |_^\n+   |\n+note: first possible panic found here\n+  --> $DIR/doc_panics.rs:26:13\n+   |\n+LL |             panic!()\n+   |             ^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c209f5b4b7278c2ac7590673c11ffc5e4a5fca02", "filename": "src/tools/clippy/tests/ui/exhaustive_items.fixed", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.fixed?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -56,27 +56,36 @@ pub mod enums {\n pub mod structs {\n     #[non_exhaustive]\n     pub struct Exhaustive {\n-        foo: u8,\n-        bar: String,\n+        pub foo: u8,\n+        pub bar: String,\n     }\n \n     // no warning, already non_exhaustive\n     #[non_exhaustive]\n     pub struct NonExhaustive {\n-        foo: u8,\n+        pub foo: u8,\n+        pub bar: String,\n+    }\n+\n+    // no warning, private fields\n+    pub struct ExhaustivePrivateFieldTuple(u8);\n+\n+    // no warning, private fields\n+    pub struct ExhaustivePrivateField {\n+        pub foo: u8,\n         bar: String,\n     }\n \n     // no warning, private\n     struct ExhaustivePrivate {\n-        foo: u8,\n-        bar: String,\n+        pub foo: u8,\n+        pub bar: String,\n     }\n \n     // no warning, private\n     #[non_exhaustive]\n     struct NonExhaustivePrivate {\n-        foo: u8,\n-        bar: String,\n+        pub foo: u8,\n+        pub bar: String,\n     }\n }"}, {"sha": "6f59dbf2da59b126f0537c2b034193e076ca1164", "filename": "src/tools/clippy/tests/ui/exhaustive_items.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -53,27 +53,36 @@ pub mod enums {\n \n pub mod structs {\n     pub struct Exhaustive {\n-        foo: u8,\n-        bar: String,\n+        pub foo: u8,\n+        pub bar: String,\n     }\n \n     // no warning, already non_exhaustive\n     #[non_exhaustive]\n     pub struct NonExhaustive {\n-        foo: u8,\n+        pub foo: u8,\n+        pub bar: String,\n+    }\n+\n+    // no warning, private fields\n+    pub struct ExhaustivePrivateFieldTuple(u8);\n+\n+    // no warning, private fields\n+    pub struct ExhaustivePrivateField {\n+        pub foo: u8,\n         bar: String,\n     }\n \n     // no warning, private\n     struct ExhaustivePrivate {\n-        foo: u8,\n-        bar: String,\n+        pub foo: u8,\n+        pub bar: String,\n     }\n \n     // no warning, private\n     #[non_exhaustive]\n     struct NonExhaustivePrivate {\n-        foo: u8,\n-        bar: String,\n+        pub foo: u8,\n+        pub bar: String,\n     }\n }"}, {"sha": "8fbab535a9b25a67ca26b7b9edeabb9550a7ead2", "filename": "src/tools/clippy/tests/ui/exhaustive_items.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.stderr?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -41,8 +41,8 @@ error: exported structs should not be exhaustive\n   --> $DIR/exhaustive_items.rs:55:5\n    |\n LL | /     pub struct Exhaustive {\n-LL | |         foo: u8,\n-LL | |         bar: String,\n+LL | |         pub foo: u8,\n+LL | |         pub bar: String,\n LL | |     }\n    | |_____^\n    |"}, {"sha": "e3561863c1e1ff7f00f1e52703e808cdb1c64e63", "filename": "src/tools/clippy/tests/ui/let_and_return.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -117,7 +117,11 @@ mod no_lint_if_stmt_borrows {\n             fn drop(&mut self) {}\n         }\n \n-        impl Foo<'_> {\n+        impl<'a> Foo<'a> {\n+            fn new(inner: &'a Inner) -> Self {\n+                Self { inner }\n+            }\n+\n             fn value(&self) -> i32 {\n                 42\n             }\n@@ -132,6 +136,12 @@ mod no_lint_if_stmt_borrows {\n             let value = some_foo(&x).value();\n             value\n         }\n+\n+        fn test2() -> i32 {\n+            let x = Inner {};\n+            let value = Foo::new(&x).value();\n+            value\n+        }\n     }\n }\n "}, {"sha": "a6941dabeb88d56a722fa07b7efbcf620c395cea", "filename": "src/tools/clippy/tests/ui/let_and_return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.stderr?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -28,7 +28,7 @@ LL |         5\n    |\n \n error: returning the result of a `let` binding from a block\n-  --> $DIR/let_and_return.rs:154:13\n+  --> $DIR/let_and_return.rs:164:13\n    |\n LL |             let clone = Arc::clone(&self.foo);\n    |             ---------------------------------- unnecessary `let` binding"}, {"sha": "44c51e8112a7d6fdf4322d3cc3328bacc15c7665", "filename": "src/tools/clippy/tests/ui/match_overlapping_arm.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -57,6 +57,36 @@ fn overlapping() {\n         _ => (),\n     }\n \n+    match 42 {\n+        5..7 => println!(\"5 .. 7\"),\n+        0..10 => println!(\"0 .. 10\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        5..10 => println!(\"5 .. 10\"),\n+        0..=10 => println!(\"0 ... 10\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        0..14 => println!(\"0 .. 14\"),\n+        5..10 => println!(\"5 .. 10\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        5..14 => println!(\"5 .. 14\"),\n+        0..=10 => println!(\"0 ... 10\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        0..7 => println!(\"0 .. 7\"),\n+        0..=10 => println!(\"0 ... 10\"),\n+        _ => (),\n+    }\n+\n     /*\n     // FIXME(JohnTitor): uncomment this once rustfmt knows half-open patterns\n     match 42 {"}, {"sha": "f25a66d634e888189565a0bbec8e1b8c9994be03", "filename": "src/tools/clippy/tests/ui/match_overlapping_arm.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.stderr?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -24,39 +24,39 @@ LL |         FOO..=11 => println!(\"0 ... 11\"),\n    |         ^^^^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:26:9\n+  --> $DIR/match_overlapping_arm.rs:55:9\n    |\n-LL |         0..=5 => println!(\"0 ... 5\"),\n+LL |         0..11 => println!(\"0 .. 11\"),\n    |         ^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:25:9\n+  --> $DIR/match_overlapping_arm.rs:56:9\n    |\n-LL |         2 => println!(\"2\"),\n-   |         ^\n+LL |         0..=11 => println!(\"0 ... 11\"),\n+   |         ^^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:32:9\n+  --> $DIR/match_overlapping_arm.rs:80:9\n    |\n-LL |         0..=2 => println!(\"0 ... 2\"),\n-   |         ^^^^^\n+LL |         0..=10 => println!(\"0 ... 10\"),\n+   |         ^^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:31:9\n+  --> $DIR/match_overlapping_arm.rs:79:9\n    |\n-LL |         2 => println!(\"2\"),\n-   |         ^\n+LL |         5..14 => println!(\"5 .. 14\"),\n+   |         ^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:55:9\n+  --> $DIR/match_overlapping_arm.rs:85:9\n    |\n-LL |         0..11 => println!(\"0 .. 11\"),\n-   |         ^^^^^\n+LL |         0..7 => println!(\"0 .. 7\"),\n+   |         ^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:56:9\n+  --> $DIR/match_overlapping_arm.rs:86:9\n    |\n-LL |         0..=11 => println!(\"0 ... 11\"),\n+LL |         0..=10 => println!(\"0 ... 10\"),\n    |         ^^^^^^\n \n error: aborting due to 5 previous errors"}, {"sha": "a7f8f54f2be04cb98667127b87d3db75c50e1301", "filename": "src/tools/clippy/tests/ui/should_impl_trait/corner_cases.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -8,7 +8,8 @@\n     clippy::unused_self,\n     clippy::needless_lifetimes,\n     clippy::missing_safety_doc,\n-    clippy::wrong_self_convention\n+    clippy::wrong_self_convention,\n+    clippy::missing_panics_doc\n )]\n \n use std::ops::Mul;"}, {"sha": "69a3390b03b0b2cac0988e1f35dc1796e0bcd41d", "filename": "src/tools/clippy/tests/ui/should_impl_trait/method_list_1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -8,7 +8,8 @@\n     clippy::unused_self,\n     clippy::needless_lifetimes,\n     clippy::missing_safety_doc,\n-    clippy::wrong_self_convention\n+    clippy::wrong_self_convention,\n+    clippy::missing_panics_doc\n )]\n \n use std::ops::Mul;"}, {"sha": "86c63946516ce84453725eff5a31b58cb1ac246c", "filename": "src/tools/clippy/tests/ui/should_impl_trait/method_list_1.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -1,5 +1,5 @@\n error: method `add` can be confused for the standard trait method `std::ops::Add::add`\n-  --> $DIR/method_list_1.rs:25:5\n+  --> $DIR/method_list_1.rs:26:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         unimplemented!()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Add` or choosing a less ambiguous method name\n \n error: method `as_mut` can be confused for the standard trait method `std::convert::AsMut::as_mut`\n-  --> $DIR/method_list_1.rs:29:5\n+  --> $DIR/method_list_1.rs:30:5\n    |\n LL | /     pub fn as_mut(&mut self) -> &mut T {\n LL | |         unimplemented!()\n@@ -20,7 +20,7 @@ LL | |     }\n    = help: consider implementing the trait `std::convert::AsMut` or choosing a less ambiguous method name\n \n error: method `as_ref` can be confused for the standard trait method `std::convert::AsRef::as_ref`\n-  --> $DIR/method_list_1.rs:33:5\n+  --> $DIR/method_list_1.rs:34:5\n    |\n LL | /     pub fn as_ref(&self) -> &T {\n LL | |         unimplemented!()\n@@ -30,7 +30,7 @@ LL | |     }\n    = help: consider implementing the trait `std::convert::AsRef` or choosing a less ambiguous method name\n \n error: method `bitand` can be confused for the standard trait method `std::ops::BitAnd::bitand`\n-  --> $DIR/method_list_1.rs:37:5\n+  --> $DIR/method_list_1.rs:38:5\n    |\n LL | /     pub fn bitand(self, rhs: T) -> T {\n LL | |         unimplemented!()\n@@ -40,7 +40,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitAnd` or choosing a less ambiguous method name\n \n error: method `bitor` can be confused for the standard trait method `std::ops::BitOr::bitor`\n-  --> $DIR/method_list_1.rs:41:5\n+  --> $DIR/method_list_1.rs:42:5\n    |\n LL | /     pub fn bitor(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -50,7 +50,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitOr` or choosing a less ambiguous method name\n \n error: method `bitxor` can be confused for the standard trait method `std::ops::BitXor::bitxor`\n-  --> $DIR/method_list_1.rs:45:5\n+  --> $DIR/method_list_1.rs:46:5\n    |\n LL | /     pub fn bitxor(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -60,7 +60,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitXor` or choosing a less ambiguous method name\n \n error: method `borrow` can be confused for the standard trait method `std::borrow::Borrow::borrow`\n-  --> $DIR/method_list_1.rs:49:5\n+  --> $DIR/method_list_1.rs:50:5\n    |\n LL | /     pub fn borrow(&self) -> &str {\n LL | |         unimplemented!()\n@@ -70,7 +70,7 @@ LL | |     }\n    = help: consider implementing the trait `std::borrow::Borrow` or choosing a less ambiguous method name\n \n error: method `borrow_mut` can be confused for the standard trait method `std::borrow::BorrowMut::borrow_mut`\n-  --> $DIR/method_list_1.rs:53:5\n+  --> $DIR/method_list_1.rs:54:5\n    |\n LL | /     pub fn borrow_mut(&mut self) -> &mut str {\n LL | |         unimplemented!()\n@@ -80,7 +80,7 @@ LL | |     }\n    = help: consider implementing the trait `std::borrow::BorrowMut` or choosing a less ambiguous method name\n \n error: method `clone` can be confused for the standard trait method `std::clone::Clone::clone`\n-  --> $DIR/method_list_1.rs:57:5\n+  --> $DIR/method_list_1.rs:58:5\n    |\n LL | /     pub fn clone(&self) -> Self {\n LL | |         unimplemented!()\n@@ -90,7 +90,7 @@ LL | |     }\n    = help: consider implementing the trait `std::clone::Clone` or choosing a less ambiguous method name\n \n error: method `cmp` can be confused for the standard trait method `std::cmp::Ord::cmp`\n-  --> $DIR/method_list_1.rs:61:5\n+  --> $DIR/method_list_1.rs:62:5\n    |\n LL | /     pub fn cmp(&self, other: &Self) -> Self {\n LL | |         unimplemented!()\n@@ -100,7 +100,7 @@ LL | |     }\n    = help: consider implementing the trait `std::cmp::Ord` or choosing a less ambiguous method name\n \n error: method `deref` can be confused for the standard trait method `std::ops::Deref::deref`\n-  --> $DIR/method_list_1.rs:69:5\n+  --> $DIR/method_list_1.rs:70:5\n    |\n LL | /     pub fn deref(&self) -> &Self {\n LL | |         unimplemented!()\n@@ -110,7 +110,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Deref` or choosing a less ambiguous method name\n \n error: method `deref_mut` can be confused for the standard trait method `std::ops::DerefMut::deref_mut`\n-  --> $DIR/method_list_1.rs:73:5\n+  --> $DIR/method_list_1.rs:74:5\n    |\n LL | /     pub fn deref_mut(&mut self) -> &mut Self {\n LL | |         unimplemented!()\n@@ -120,7 +120,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::DerefMut` or choosing a less ambiguous method name\n \n error: method `div` can be confused for the standard trait method `std::ops::Div::div`\n-  --> $DIR/method_list_1.rs:77:5\n+  --> $DIR/method_list_1.rs:78:5\n    |\n LL | /     pub fn div(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -130,7 +130,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Div` or choosing a less ambiguous method name\n \n error: method `drop` can be confused for the standard trait method `std::ops::Drop::drop`\n-  --> $DIR/method_list_1.rs:81:5\n+  --> $DIR/method_list_1.rs:82:5\n    |\n LL | /     pub fn drop(&mut self) {\n LL | |         unimplemented!()"}, {"sha": "2cdc1a06fe689dab34e495eee9466253e7836c8d", "filename": "src/tools/clippy/tests/ui/should_impl_trait/method_list_2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -8,7 +8,8 @@\n     clippy::unused_self,\n     clippy::needless_lifetimes,\n     clippy::missing_safety_doc,\n-    clippy::wrong_self_convention\n+    clippy::wrong_self_convention,\n+    clippy::missing_panics_doc\n )]\n \n use std::ops::Mul;"}, {"sha": "0142e2991081c79ae4099788ea6c85ed02535428", "filename": "src/tools/clippy/tests/ui/should_impl_trait/method_list_2.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508b4707ac77dd54dc55d0a2f6195237202d3f3a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr?ref=508b4707ac77dd54dc55d0a2f6195237202d3f3a", "patch": "@@ -1,5 +1,5 @@\n error: method `eq` can be confused for the standard trait method `std::cmp::PartialEq::eq`\n-  --> $DIR/method_list_2.rs:26:5\n+  --> $DIR/method_list_2.rs:27:5\n    |\n LL | /     pub fn eq(&self, other: &Self) -> bool {\n LL | |         unimplemented!()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: consider implementing the trait `std::cmp::PartialEq` or choosing a less ambiguous method name\n \n error: method `from_iter` can be confused for the standard trait method `std::iter::FromIterator::from_iter`\n-  --> $DIR/method_list_2.rs:30:5\n+  --> $DIR/method_list_2.rs:31:5\n    |\n LL | /     pub fn from_iter<T>(iter: T) -> Self {\n LL | |         unimplemented!()\n@@ -20,7 +20,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::FromIterator` or choosing a less ambiguous method name\n \n error: method `from_str` can be confused for the standard trait method `std::str::FromStr::from_str`\n-  --> $DIR/method_list_2.rs:34:5\n+  --> $DIR/method_list_2.rs:35:5\n    |\n LL | /     pub fn from_str(s: &str) -> Result<Self, Self> {\n LL | |         unimplemented!()\n@@ -30,7 +30,7 @@ LL | |     }\n    = help: consider implementing the trait `std::str::FromStr` or choosing a less ambiguous method name\n \n error: method `hash` can be confused for the standard trait method `std::hash::Hash::hash`\n-  --> $DIR/method_list_2.rs:38:5\n+  --> $DIR/method_list_2.rs:39:5\n    |\n LL | /     pub fn hash(&self, state: &mut T) {\n LL | |         unimplemented!()\n@@ -40,7 +40,7 @@ LL | |     }\n    = help: consider implementing the trait `std::hash::Hash` or choosing a less ambiguous method name\n \n error: method `index` can be confused for the standard trait method `std::ops::Index::index`\n-  --> $DIR/method_list_2.rs:42:5\n+  --> $DIR/method_list_2.rs:43:5\n    |\n LL | /     pub fn index(&self, index: usize) -> &Self {\n LL | |         unimplemented!()\n@@ -50,7 +50,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Index` or choosing a less ambiguous method name\n \n error: method `index_mut` can be confused for the standard trait method `std::ops::IndexMut::index_mut`\n-  --> $DIR/method_list_2.rs:46:5\n+  --> $DIR/method_list_2.rs:47:5\n    |\n LL | /     pub fn index_mut(&mut self, index: usize) -> &mut Self {\n LL | |         unimplemented!()\n@@ -60,7 +60,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::IndexMut` or choosing a less ambiguous method name\n \n error: method `into_iter` can be confused for the standard trait method `std::iter::IntoIterator::into_iter`\n-  --> $DIR/method_list_2.rs:50:5\n+  --> $DIR/method_list_2.rs:51:5\n    |\n LL | /     pub fn into_iter(self) -> Self {\n LL | |         unimplemented!()\n@@ -70,7 +70,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::IntoIterator` or choosing a less ambiguous method name\n \n error: method `mul` can be confused for the standard trait method `std::ops::Mul::mul`\n-  --> $DIR/method_list_2.rs:54:5\n+  --> $DIR/method_list_2.rs:55:5\n    |\n LL | /     pub fn mul(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -80,7 +80,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Mul` or choosing a less ambiguous method name\n \n error: method `neg` can be confused for the standard trait method `std::ops::Neg::neg`\n-  --> $DIR/method_list_2.rs:58:5\n+  --> $DIR/method_list_2.rs:59:5\n    |\n LL | /     pub fn neg(self) -> Self {\n LL | |         unimplemented!()\n@@ -90,7 +90,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Neg` or choosing a less ambiguous method name\n \n error: method `next` can be confused for the standard trait method `std::iter::Iterator::next`\n-  --> $DIR/method_list_2.rs:62:5\n+  --> $DIR/method_list_2.rs:63:5\n    |\n LL | /     pub fn next(&mut self) -> Option<Self> {\n LL | |         unimplemented!()\n@@ -100,7 +100,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::Iterator` or choosing a less ambiguous method name\n \n error: method `not` can be confused for the standard trait method `std::ops::Not::not`\n-  --> $DIR/method_list_2.rs:66:5\n+  --> $DIR/method_list_2.rs:67:5\n    |\n LL | /     pub fn not(self) -> Self {\n LL | |         unimplemented!()\n@@ -110,7 +110,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Not` or choosing a less ambiguous method name\n \n error: method `rem` can be confused for the standard trait method `std::ops::Rem::rem`\n-  --> $DIR/method_list_2.rs:70:5\n+  --> $DIR/method_list_2.rs:71:5\n    |\n LL | /     pub fn rem(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -120,7 +120,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Rem` or choosing a less ambiguous method name\n \n error: method `shl` can be confused for the standard trait method `std::ops::Shl::shl`\n-  --> $DIR/method_list_2.rs:74:5\n+  --> $DIR/method_list_2.rs:75:5\n    |\n LL | /     pub fn shl(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -130,7 +130,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Shl` or choosing a less ambiguous method name\n \n error: method `shr` can be confused for the standard trait method `std::ops::Shr::shr`\n-  --> $DIR/method_list_2.rs:78:5\n+  --> $DIR/method_list_2.rs:79:5\n    |\n LL | /     pub fn shr(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -140,7 +140,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Shr` or choosing a less ambiguous method name\n \n error: method `sub` can be confused for the standard trait method `std::ops::Sub::sub`\n-  --> $DIR/method_list_2.rs:82:5\n+  --> $DIR/method_list_2.rs:83:5\n    |\n LL | /     pub fn sub(self, rhs: Self) -> Self {\n LL | |         unimplemented!()"}]}