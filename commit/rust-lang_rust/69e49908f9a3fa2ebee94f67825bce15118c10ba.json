{"sha": "69e49908f9a3fa2ebee94f67825bce15118c10ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZTQ5OTA4ZjlhM2ZhMmViZWU5NGY2NzgyNWJjZTE1MTE4YzEwYmE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-30T07:20:08Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-30T07:20:08Z"}, "message": "update `equal_up_to_regions`", "tree": {"sha": "ec2d61bc57360ea65e9666cf2956872d875c39f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec2d61bc57360ea65e9666cf2956872d875c39f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69e49908f9a3fa2ebee94f67825bce15118c10ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69e49908f9a3fa2ebee94f67825bce15118c10ba", "html_url": "https://github.com/rust-lang/rust/commit/69e49908f9a3fa2ebee94f67825bce15118c10ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69e49908f9a3fa2ebee94f67825bce15118c10ba/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f632bd1a5052b647932de7be6975b1baf15141e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f632bd1a5052b647932de7be6975b1baf15141e9", "html_url": "https://github.com/rust-lang/rust/commit/f632bd1a5052b647932de7be6975b1baf15141e9"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "e794a6949d2f0eb5af50522f5103c460e51f8846", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69e49908f9a3fa2ebee94f67825bce15118c10ba/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e49908f9a3fa2ebee94f67825bce15118c10ba/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=69e49908f9a3fa2ebee94f67825bce15118c10ba", "patch": "@@ -74,8 +74,8 @@ pub fn equal_up_to_regions(\n         fn relate_with_variance<T: Relate<'tcx>>(\n             &mut self,\n             _: ty::Variance,\n-            a: &T,\n-            b: &T,\n+            a: T,\n+            b: T,\n         ) -> RelateResult<'tcx, T> {\n             // Ignore variance, require types to be exactly the same.\n             self.relate(a, b)\n@@ -108,8 +108,8 @@ pub fn equal_up_to_regions(\n \n         fn binders<T>(\n             &mut self,\n-            a: &ty::Binder<T>,\n-            b: &ty::Binder<T>,\n+            a: ty::Binder<T>,\n+            b: ty::Binder<T>,\n         ) -> RelateResult<'tcx, ty::Binder<T>>\n         where\n             T: Relate<'tcx>,\n@@ -121,7 +121,7 @@ pub fn equal_up_to_regions(\n \n     // Instantiate and run relation.\n     let mut relator: LifetimeIgnoreRelation<'tcx> = LifetimeIgnoreRelation { tcx: tcx, param_env };\n-    relator.relate(&src, &dest).is_ok()\n+    relator.relate(src, dest).is_ok()\n }\n \n struct TypeChecker<'a, 'tcx> {"}]}