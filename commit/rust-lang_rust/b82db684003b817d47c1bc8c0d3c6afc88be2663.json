{"sha": "b82db684003b817d47c1bc8c0d3c6afc88be2663", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MmRiNjg0MDAzYjgxN2Q0N2MxYmM4YzBkM2M2YWZjODhiZTI2NjM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-17T16:29:51Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-17T19:53:13Z"}, "message": "Handle tuple structs / enum variants properly in type inference", "tree": {"sha": "7ec419545aee3e4f7297c6792eec1efebba4eb24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ec419545aee3e4f7297c6792eec1efebba4eb24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b82db684003b817d47c1bc8c0d3c6afc88be2663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b82db684003b817d47c1bc8c0d3c6afc88be2663", "html_url": "https://github.com/rust-lang/rust/commit/b82db684003b817d47c1bc8c0d3c6afc88be2663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b82db684003b817d47c1bc8c0d3c6afc88be2663/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a725dd4f7ac2b88541189f0f726ce86876c36add", "url": "https://api.github.com/repos/rust-lang/rust/commits/a725dd4f7ac2b88541189f0f726ce86876c36add", "html_url": "https://github.com/rust-lang/rust/commit/a725dd4f7ac2b88541189f0f726ce86876c36add"}], "stats": {"total": 132, "additions": 95, "deletions": 37}, "files": [{"sha": "9da8a482da690c905a6e126fdc7f7604497726b7", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b82db684003b817d47c1bc8c0d3c6afc88be2663/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82db684003b817d47c1bc8c0d3c6afc88be2663/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=b82db684003b817d47c1bc8c0d3c6afc88be2663", "patch": "@@ -290,7 +290,11 @@ impl Struct {\n     }\n \n     pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n-        db.type_for_def((*self).into())\n+        db.type_for_def((*self).into(), Namespace::Types)\n+    }\n+\n+    pub fn constructor_ty(&self, db: &impl HirDatabase) -> Ty {\n+        db.type_for_def((*self).into(), Namespace::Values)\n     }\n \n     // TODO move to a more general type\n@@ -350,7 +354,7 @@ impl Enum {\n     }\n \n     pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n-        db.type_for_def((*self).into())\n+        db.type_for_def((*self).into(), Namespace::Types)\n     }\n \n     // TODO: move to a more general type\n@@ -425,7 +429,7 @@ pub struct Function {\n     pub(crate) id: FunctionId,\n }\n \n-pub use crate::expr::ScopeEntryWithSyntax;\n+pub use crate::{ nameres::Namespace, expr::ScopeEntryWithSyntax};\n \n /// The declared signature of a function.\n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "fc0ee068cc0bb03771655517e20e2027af9b2578", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b82db684003b817d47c1bc8c0d3c6afc88be2663/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82db684003b817d47c1bc8c0d3c6afc88be2663/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=b82db684003b817d47c1bc8c0d3c6afc88be2663", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     adt::{StructData, EnumData},\n     impl_block::{ModuleImplBlocks, ImplSourceMap},\n     generics::{GenericParams, GenericDef},\n-    ids::SourceFileItemId,\n+    ids::SourceFileItemId, nameres::Namespace\n };\n \n #[salsa::query_group(PersistentHirDatabaseStorage)]\n@@ -88,7 +88,7 @@ pub trait HirDatabase: PersistentHirDatabase {\n     fn infer(&self, func: Function) -> Arc<InferenceResult>;\n \n     #[salsa::invoke(crate::ty::type_for_def)]\n-    fn type_for_def(&self, def: TypableDef) -> Ty;\n+    fn type_for_def(&self, def: TypableDef, ns: Namespace) -> Ty;\n \n     #[salsa::invoke(crate::ty::type_for_field)]\n     fn type_for_field(&self, field: StructField) -> Ty;"}, {"sha": "bd920bfea5930a7add761aa18abd898516d34eb7", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b82db684003b817d47c1bc8c0d3c6afc88be2663/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82db684003b817d47c1bc8c0d3c6afc88be2663/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=b82db684003b817d47c1bc8c0d3c6afc88be2663", "patch": "@@ -348,7 +348,7 @@ where\n                         .into_iter()\n                         .filter_map(|variant| {\n                             let res = Resolution {\n-                                def: PerNs::both(variant.into(), e.into()),\n+                                def: PerNs::both(variant.into(), variant.into()),\n                                 import: Some(import_id),\n                             };\n                             let name = variant.name(self.db)?;\n@@ -628,7 +628,7 @@ impl ItemMap {\n                     // enum variant\n                     tested_by!(item_map_enum_importing);\n                     match e.variant(db, &segment.name) {\n-                        Some(variant) => PerNs::both(variant.into(), (*e).into()),\n+                        Some(variant) => PerNs::both(variant.into(), variant.into()),\n                         None => PerNs::none(),\n                     }\n                 }"}, {"sha": "fb98ac907e56589039e43bd2a9bbec0833d167bd", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 75, "deletions": 21, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b82db684003b817d47c1bc8c0d3c6afc88be2663/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82db684003b817d47c1bc8c0d3c6afc88be2663/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=b82db684003b817d47c1bc8c0d3c6afc88be2663", "patch": "@@ -42,7 +42,7 @@ use crate::{\n     generics::GenericParams,\n     path::GenericArg,\n     adt::VariantDef,\n-    resolve::{Resolver, Resolution},\n+    resolve::{Resolver, Resolution}, nameres::Namespace\n };\n \n /// The ID of a type variable.\n@@ -226,15 +226,17 @@ pub enum Ty {\n     /// function has a unique type, which is output (for a function\n     /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.\n     ///\n+    /// This includes tuple struct / enum variant constructors as well.\n+    ///\n     /// For example the type of `bar` here:\n     ///\n     /// ```rust\n     /// fn foo() -> i32 { 1 }\n     /// let bar = foo; // bar: fn() -> i32 {foo}\n     /// ```\n     FnDef {\n-        // Function definition\n-        def: Function,\n+        /// The definition of the function / constructor.\n+        def: CallableDef,\n         /// For display\n         name: Name,\n         /// Parameters and return type\n@@ -396,7 +398,7 @@ impl Ty {\n             None => return Ty::Unknown,\n             Some(it) => it,\n         };\n-        let ty = db.type_for_def(typable);\n+        let ty = db.type_for_def(typable, Namespace::Types);\n         let substs = Ty::substs_from_path(db, resolver, path, typable);\n         ty.apply_substs(substs)\n     }\n@@ -673,7 +675,47 @@ fn type_for_fn(db: &impl HirDatabase, def: Function) -> Ty {\n     let output = Ty::from_hir(db, &resolver, signature.ret_type());\n     let sig = Arc::new(FnSig { input, output });\n     let substs = make_substs(&generics);\n-    Ty::FnDef { def, sig, name, substs }\n+    Ty::FnDef { def: def.into(), sig, name, substs }\n+}\n+\n+/// Compute the type of a tuple struct constructor.\n+fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n+    let var_data = def.variant_data(db);\n+    let fields = match var_data.fields() {\n+        Some(fields) => fields,\n+        None => return type_for_struct(db, def), // Unit struct\n+    };\n+    let resolver = def.resolver(db);\n+    let generics = def.generic_params(db);\n+    let name = def.name(db).unwrap_or_else(Name::missing);\n+    let input = fields\n+        .iter()\n+        .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n+        .collect::<Vec<_>>();\n+    let output = type_for_struct(db, def);\n+    let sig = Arc::new(FnSig { input, output });\n+    let substs = make_substs(&generics);\n+    Ty::FnDef { def: def.into(), sig, name, substs }\n+}\n+\n+/// Compute the type of a tuple enum variant constructor.\n+fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) -> Ty {\n+    let var_data = def.variant_data(db);\n+    let fields = match var_data.fields() {\n+        Some(fields) => fields,\n+        None => return type_for_enum(db, def.parent_enum(db)), // Unit variant\n+    };\n+    let resolver = def.parent_enum(db).resolver(db);\n+    let generics = def.parent_enum(db).generic_params(db);\n+    let name = def.name(db).unwrap_or_else(Name::missing);\n+    let input = fields\n+        .iter()\n+        .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n+        .collect::<Vec<_>>();\n+    let output = type_for_enum(db, def.parent_enum(db));\n+    let sig = Arc::new(FnSig { input, output });\n+    let substs = make_substs(&generics);\n+    Ty::FnDef { def: def.into(), sig, name, substs }\n }\n \n fn make_substs(generics: &GenericParams) -> Substs {\n@@ -703,12 +745,6 @@ pub(crate) fn type_for_enum(db: &impl HirDatabase, s: Enum) -> Ty {\n     }\n }\n \n-pub(crate) fn type_for_enum_variant(db: &impl HirDatabase, ev: EnumVariant) -> Ty {\n-    let enum_parent = ev.parent_enum(db);\n-\n-    type_for_enum(db, enum_parent)\n-}\n-\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum TypableDef {\n     Function(Function),\n@@ -735,12 +771,26 @@ impl From<ModuleDef> for Option<TypableDef> {\n     }\n }\n \n-pub(super) fn type_for_def(db: &impl HirDatabase, def: TypableDef) -> Ty {\n-    match def {\n-        TypableDef::Function(f) => type_for_fn(db, f),\n-        TypableDef::Struct(s) => type_for_struct(db, s),\n-        TypableDef::Enum(e) => type_for_enum(db, e),\n-        TypableDef::EnumVariant(v) => type_for_enum_variant(db, v),\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum CallableDef {\n+    Function(Function),\n+    Struct(Struct),\n+    EnumVariant(EnumVariant),\n+}\n+impl_froms!(CallableDef: Function, Struct, EnumVariant);\n+\n+pub(super) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace) -> Ty {\n+    match (def, ns) {\n+        (TypableDef::Function(f), Namespace::Values) => type_for_fn(db, f),\n+        (TypableDef::Struct(s), Namespace::Types) => type_for_struct(db, s),\n+        (TypableDef::Struct(s), Namespace::Values) => type_for_struct_constructor(db, s),\n+        (TypableDef::Enum(e), Namespace::Types) => type_for_enum(db, e),\n+        (TypableDef::EnumVariant(v), Namespace::Values) => type_for_enum_variant_constructor(db, v),\n+\n+        // 'error' cases:\n+        (TypableDef::Function(_), Namespace::Types) => Ty::Unknown,\n+        (TypableDef::Enum(_), Namespace::Values) => Ty::Unknown,\n+        (TypableDef::EnumVariant(_), Namespace::Types) => Ty::Unknown,\n     }\n }\n \n@@ -1127,7 +1177,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let typable: Option<TypableDef> = def.into();\n                 let typable = typable?;\n                 let substs = Ty::substs_from_path(self.db, &self.resolver, path, typable);\n-                let ty = self.db.type_for_def(typable).apply_substs(substs);\n+                let ty = self.db.type_for_def(typable, Namespace::Values).apply_substs(substs);\n                 let ty = self.insert_type_vars(ty);\n                 Some(ty)\n             }\n@@ -1178,12 +1228,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let substs = Ty::substs_from_path(self.db, resolver, path, def);\n         match def {\n             TypableDef::Struct(s) => {\n-                let ty = type_for_struct(self.db, s);\n+                let ty = s.ty(self.db);\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n                 (ty, Some(s.into()))\n             }\n             TypableDef::EnumVariant(var) => {\n-                let ty = type_for_enum_variant(self.db, var);\n+                let ty = var.parent_enum(self.db).ty(self.db);\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n                 (ty, Some(var.into()))\n             }\n@@ -1384,7 +1434,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let (derefed_receiver_ty, method_ty, def_generics) = match resolved {\n                     Some((ty, func)) => {\n                         self.write_method_resolution(tgt_expr, func);\n-                        (ty, self.db.type_for_def(func.into()), Some(func.generic_params(self.db)))\n+                        (\n+                            ty,\n+                            self.db.type_for_def(func.into(), Namespace::Values),\n+                            Some(func.generic_params(self.db)),\n+                        )\n                     }\n                     None => (Ty::Unknown, receiver_ty, None),\n                 };"}, {"sha": "294186b06570146370a7e525cb36ab8018d211ab", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_struct.snap", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b82db684003b817d47c1bc8c0d3c6afc88be2663/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_struct.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b82db684003b817d47c1bc8c0d3c6afc88be2663/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_struct.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_struct.snap?ref=b82db684003b817d47c1bc8c0d3c6afc88be2663", "patch": "@@ -1,21 +1,21 @@\n ---\n-created: \"2019-01-24T14:51:32.808861856+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n+created: \"2019-02-17T16:16:58.863630956Z\"\n+creator: insta@0.6.2\n source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n ---\n [72; 154) '{     ...a.c; }': ()\n-[82; 83) 'c': [unknown]\n-[86; 87) 'C': C\n-[86; 90) 'C(1)': [unknown]\n-[88; 89) '1': i32\n+[82; 83) 'c': C\n+[86; 87) 'C': fn C(usize) -> C\n+[86; 90) 'C(1)': C\n+[88; 89) '1': usize\n [96; 97) 'B': B\n [107; 108) 'a': A\n [114; 133) 'A { b:...C(1) }': A\n [121; 122) 'B': B\n-[127; 128) 'C': C\n+[127; 128) 'C': fn C(usize) -> C\n [127; 131) 'C(1)': C\n-[129; 130) '1': i32\n+[129; 130) '1': usize\n [139; 140) 'a': A\n [139; 142) 'a.b': B\n [148; 149) 'a': A"}]}