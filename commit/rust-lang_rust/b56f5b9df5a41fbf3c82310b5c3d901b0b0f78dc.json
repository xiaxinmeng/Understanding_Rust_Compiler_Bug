{"sha": "b56f5b9df5a41fbf3c82310b5c3d901b0b0f78dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NmY1YjlkZjVhNDFmYmYzYzgyMzEwYjVjM2Q5MDFiMGIwZjc4ZGM=", "commit": {"author": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-07-22T19:38:44Z"}, "committer": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-07-22T22:52:49Z"}, "message": "clean up give_name_if_anonymous_region_appears_in_arguments", "tree": {"sha": "abaa42934ae5167a379483a5c6fc038e37a23927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abaa42934ae5167a379483a5c6fc038e37a23927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b56f5b9df5a41fbf3c82310b5c3d901b0b0f78dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b56f5b9df5a41fbf3c82310b5c3d901b0b0f78dc", "html_url": "https://github.com/rust-lang/rust/commit/b56f5b9df5a41fbf3c82310b5c3d901b0b0f78dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b56f5b9df5a41fbf3c82310b5c3d901b0b0f78dc/comments", "author": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "723ea909929498380615f56e652660229adcdfef", "url": "https://api.github.com/repos/rust-lang/rust/commits/723ea909929498380615f56e652660229adcdfef", "html_url": "https://github.com/rust-lang/rust/commit/723ea909929498380615f56e652660229adcdfef"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "da86a0c3bb9d56dd03aa8d0956147059c9148718", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b56f5b9df5a41fbf3c82310b5c3d901b0b0f78dc/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56f5b9df5a41fbf3c82310b5c3d901b0b0f78dc/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=b56f5b9df5a41fbf3c82310b5c3d901b0b0f78dc", "patch": "@@ -336,27 +336,18 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let arg_ty = self.regioncx.universal_regions().unnormalized_input_tys\n             [implicit_inputs + argument_index];\n-        if let Some(highlight) =\n-            self.highlight_if_we_can_match_hir_ty_from_argument(fr, arg_ty, argument_index)\n-        {\n-            return Some(RegionName {\n-                name: self.synthesize_region_name(),\n-                source: RegionNameSource::AnonRegionFromArgument(highlight),\n-            });\n-        }\n-\n-        let counter = *self.next_region_name.try_borrow().unwrap();\n-        if let Some(highlight) = self.highlight_if_we_cannot_match_hir_ty(fr, arg_ty, counter) {\n-            Some(RegionName {\n-                // This counter value will already have been used, so this function will increment\n-                // it so the next value will be used next and return the region name that would\n-                // have been used.\n+        self.highlight_if_we_can_match_hir_ty_from_argument(fr, arg_ty, argument_index)\n+            .or_else(|| {\n+                // `highlight_if_we_cannot_match_hir_ty` needs to know the number we will give to\n+                // the anonymous region. If it succeeds, the `synthesize_region_name` call below\n+                // will increment the counter, \"reserving\" the number we just used.\n+                let counter = *self.next_region_name.try_borrow().unwrap();\n+                self.highlight_if_we_cannot_match_hir_ty(fr, arg_ty, counter)\n+            })\n+            .map(|highlight| RegionName {\n                 name: self.synthesize_region_name(),\n                 source: RegionNameSource::AnonRegionFromArgument(highlight),\n             })\n-        } else {\n-            None\n-        }\n     }\n \n     fn highlight_if_we_can_match_hir_ty_from_argument("}]}