{"sha": "df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNDY5MGRkZjRiNmViNjk5YmM1YzI4MzkzNGMyNmY2YzlhMDVkZjY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-29T21:56:55Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-29T22:43:35Z"}, "message": "Improve error recovery for some built-in macros", "tree": {"sha": "9afd305cf26f7c577de7d0cf714d0dc11532bd43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9afd305cf26f7c577de7d0cf714d0dc11532bd43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "html_url": "https://github.com/rust-lang/rust/commit/df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007115746c6d0234742719dd67efba054abe97ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/007115746c6d0234742719dd67efba054abe97ce", "html_url": "https://github.com/rust-lang/rust/commit/007115746c6d0234742719dd67efba054abe97ce"}], "stats": {"total": 121, "additions": 74, "deletions": 47}, "files": [{"sha": "2793754e1033afac623e321f2c0e435b4e5633ce", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -995,7 +995,7 @@ pub fn expr_to_spanned_string<'a>(\n     cx: &'a mut ExtCtxt,\n     expr: P<ast::Expr>,\n     err_msg: &str,\n-) -> Result<Spanned<(Symbol, ast::StrStyle)>, DiagnosticBuilder<'a>> {\n+) -> Result<Spanned<(Symbol, ast::StrStyle)>, Option<DiagnosticBuilder<'a>>> {\n     // Update `expr.span`'s ctxt now in case expr is an `include!` macro invocation.\n     let expr = expr.map(|mut expr| {\n         expr.span = expr.span.apply_mark(cx.current_expansion.mark);\n@@ -1007,16 +1007,17 @@ pub fn expr_to_spanned_string<'a>(\n     Err(match expr.node {\n         ast::ExprKind::Lit(ref l) => match l.node {\n             ast::LitKind::Str(s, style) => return Ok(respan(expr.span, (s, style))),\n-            _ => cx.struct_span_err(l.span, err_msg)\n+            _ => Some(cx.struct_span_err(l.span, err_msg))\n         },\n-        _ => cx.struct_span_err(expr.span, err_msg)\n+        ast::ExprKind::Err => None,\n+        _ => Some(cx.struct_span_err(expr.span, err_msg))\n     })\n }\n \n pub fn expr_to_string(cx: &mut ExtCtxt, expr: P<ast::Expr>, err_msg: &str)\n                       -> Option<(Symbol, ast::StrStyle)> {\n     expr_to_spanned_string(cx, expr, err_msg)\n-        .map_err(|mut err| err.emit())\n+        .map_err(|err| err.map(|mut err| err.emit()))\n         .ok()\n         .map(|s| s.node)\n }"}, {"sha": "e63042a420824642fc44efd6d293ce3ee1c0f529", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -86,7 +86,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[tokenstream::T\n                            -> Box<dyn base::MacResult+'cx> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include!\") {\n         Some(f) => f,\n-        None => return DummyResult::expr(sp),\n+        None => return DummyResult::any(sp),\n     };\n     // The file will be added to the code map by the parser\n     let path = res_rel_file(cx, sp, file);"}, {"sha": "8f7f5deb091acf5edd1fbb8b7f261459889736eb", "filename": "src/libsyntax_ext/compile_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax_ext%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax_ext%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcompile_error.rs?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -10,7 +10,7 @@ pub fn expand_compile_error<'cx>(cx: &'cx mut ExtCtxt,\n                               tts: &[tokenstream::TokenTree])\n                               -> Box<dyn base::MacResult + 'cx> {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"compile_error!\") {\n-        None => return DummyResult::expr(sp),\n+        None => return DummyResult::any(sp),\n         Some(v) => v,\n     };\n "}, {"sha": "807f190cb6a1afffcf31efe773625d5b45024011", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -18,6 +18,7 @@ pub fn expand_syntax_ext(\n     };\n     let mut accumulator = String::new();\n     let mut missing_literal = vec![];\n+    let mut has_errors = false;\n     for e in es {\n         match e.node {\n             ast::ExprKind::Lit(ref lit) => match lit.node {\n@@ -41,6 +42,9 @@ pub fn expand_syntax_ext(\n                     cx.span_err(e.span, \"cannot concatenate a byte string literal\");\n                 }\n             },\n+            ast::ExprKind::Err => {\n+                has_errors = true;\n+            }\n             _ => {\n                 missing_literal.push(e.span);\n             }\n@@ -50,6 +54,9 @@ pub fn expand_syntax_ext(\n         let mut err = cx.struct_span_err(missing_literal, \"expected a literal\");\n         err.note(\"only literals (like `\\\"foo\\\"`, `42` and `3.14`) can be passed to `concat!()`\");\n         err.emit();\n+        return base::DummyResult::expr(sp);\n+    } else if has_errors {\n+        return base::DummyResult::expr(sp);\n     }\n     let sp = sp.apply_mark(cx.current_expansion.mark);\n     base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&accumulator)))"}, {"sha": "de96de4bdc2bc59e76fc4c4efb739eaa13fd5288", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -24,7 +24,7 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n \n     if tts.is_empty() {\n         cx.span_err(sp, \"concat_idents! takes 1 or more arguments.\");\n-        return DummyResult::expr(sp);\n+        return DummyResult::any(sp);\n     }\n \n     let mut res_str = String::new();\n@@ -34,7 +34,7 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n                 TokenTree::Token(_, token::Comma) => {}\n                 _ => {\n                     cx.span_err(sp, \"concat_idents! expecting comma.\");\n-                    return DummyResult::expr(sp);\n+                    return DummyResult::any(sp);\n                 }\n             }\n         } else {\n@@ -43,7 +43,7 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n                     res_str.push_str(&ident.as_str()),\n                 _ => {\n                     cx.span_err(sp, \"concat_idents! requires ident args.\");\n-                    return DummyResult::expr(sp);\n+                    return DummyResult::any(sp);\n                 }\n             }\n         }"}, {"sha": "16fb64a5f391215ada625f55e99a93d5498982d9", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -79,7 +79,7 @@ pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt,\n     let e = match env::var(&*var.as_str()) {\n         Err(_) => {\n             cx.span_err(sp, &msg.as_str());\n-            cx.expr_usize(sp, 0)\n+            return DummyResult::expr(sp);\n         }\n         Ok(s) => cx.expr_str(sp, Symbol::intern(&s)),\n     };"}, {"sha": "ac1402a0faaa5749307e6828b7884cf8744a790e", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -748,18 +748,20 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n             fmt\n         }\n         Ok(fmt) => fmt,\n-        Err(mut err) => {\n-            let sugg_fmt = match args.len() {\n-                0 => \"{}\".to_string(),\n-                _ => format!(\"{}{{}}\", \"{} \".repeat(args.len())),\n-            };\n-            err.span_suggestion_with_applicability(\n-                fmt_sp.shrink_to_lo(),\n-                \"you might be missing a string literal to format with\",\n-                format!(\"\\\"{}\\\", \", sugg_fmt),\n-                Applicability::MaybeIncorrect,\n-            );\n-            err.emit();\n+        Err(err) => {\n+            if let Some(mut err) = err {\n+                let sugg_fmt = match args.len() {\n+                    0 => \"{}\".to_string(),\n+                    _ => format!(\"{}{{}}\", \"{} \".repeat(args.len())),\n+                };\n+                err.span_suggestion_with_applicability(\n+                    fmt_sp.shrink_to_lo(),\n+                    \"you might be missing a string literal to format with\",\n+                    format!(\"\\\"{}\\\", \", sugg_fmt),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                err.emit();\n+            }\n             return DummyResult::raw_expr(sp, true);\n         }\n     };"}, {"sha": "bd151c8a4e4e7717edc7115b8eaad6ff8d96ed69", "filename": "src/test/ui/extenv/issue-55897.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.rs?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -0,0 +1,15 @@\n+use prelude::*; //~ ERROR unresolved import `prelude`\n+\n+mod unresolved_env {\n+    use env;\n+\n+    include!(concat!(env!(\"NON_EXISTENT\"), \"/data.rs\"));\n+    //~^ ERROR cannot determine resolution for the macro `env`\n+}\n+\n+mod nonexistent_env {\n+    include!(concat!(env!(\"NON_EXISTENT\"), \"/data.rs\"));\n+    //~^ ERROR environment variable `NON_EXISTENT` not defined\n+}\n+\n+fn main() {}"}, {"sha": "4d2e35dff462959f8137d09af241667cc1e9d76f", "filename": "src/test/ui/extenv/issue-55897.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -0,0 +1,23 @@\n+error: environment variable `NON_EXISTENT` not defined\n+  --> $DIR/issue-55897.rs:11:22\n+   |\n+LL |     include!(concat!(env!(\"NON_EXISTENT\"), \"/data.rs\"));\n+   |                      ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0432]: unresolved import `prelude`\n+  --> $DIR/issue-55897.rs:1:5\n+   |\n+LL | use prelude::*; //~ ERROR unresolved import `prelude`\n+   |     ^^^^^^^ did you mean `std::prelude`?\n+\n+error: cannot determine resolution for the macro `env`\n+  --> $DIR/issue-55897.rs:6:22\n+   |\n+LL |     include!(concat!(env!(\"NON_EXISTENT\"), \"/data.rs\"));\n+   |                      ^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "70b712c560830c5523b30a314bbe7ccb21bc8fba", "filename": "src/test/ui/issues/issue-11692-1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.rs?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -1,5 +1,3 @@\n fn main() {\n-    print!(testo!());\n-    //~^ ERROR: format argument must be a string literal\n-    //~| ERROR: cannot find macro `testo!` in this scope\n+    print!(testo!()); //~ ERROR cannot find macro `testo!` in this scope\n }"}, {"sha": "57a6a999544cf4952a7a9f0580b4b2eccd377b47", "filename": "src/test/ui/issues/issue-11692-1.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.stderr?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -1,18 +1,8 @@\n-error: format argument must be a string literal\n-  --> $DIR/issue-11692-1.rs:2:12\n-   |\n-LL |     print!(testo!());\n-   |            ^^^^^^^^\n-help: you might be missing a string literal to format with\n-   |\n-LL |     print!(\"{}\", testo!());\n-   |            ^^^^^\n-\n error: cannot find macro `testo!` in this scope\n   --> $DIR/issue-11692-1.rs:2:12\n    |\n-LL |     print!(testo!());\n+LL |     print!(testo!()); //~ ERROR cannot find macro `testo!` in this scope\n    |            ^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "61be284d7320eeaf3c82e17350ae38dc5922ac96", "filename": "src/test/ui/issues/issue-11692-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.rs?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -1,4 +1,3 @@\n fn main() {\n     concat!(test!()); //~ ERROR cannot find macro `test!` in this scope\n-                      //~| ERROR expected a literal\n }"}, {"sha": "5d4467080f149dce9f0927179dea34f8d268cec0", "filename": "src/test/ui/issues/issue-11692-2.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df4690ddf4b6eb699bc5c283934c26f6c9a05df6/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.stderr?ref=df4690ddf4b6eb699bc5c283934c26f6c9a05df6", "patch": "@@ -1,16 +1,8 @@\n-error: expected a literal\n-  --> $DIR/issue-11692-2.rs:2:13\n-   |\n-LL |     concat!(test!()); //~ ERROR cannot find macro `test!` in this scope\n-   |             ^^^^^^^\n-   |\n-   = note: only literals (like `\"foo\"`, `42` and `3.14`) can be passed to `concat!()`\n-\n error: cannot find macro `test!` in this scope\n   --> $DIR/issue-11692-2.rs:2:13\n    |\n LL |     concat!(test!()); //~ ERROR cannot find macro `test!` in this scope\n    |             ^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}