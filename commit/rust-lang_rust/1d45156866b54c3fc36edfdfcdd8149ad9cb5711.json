{"sha": "1d45156866b54c3fc36edfdfcdd8149ad9cb5711", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNDUxNTY4NjZiNTRjM2ZjMzZlZGZkZmNkZDgxNDlhZDljYjU3MTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-05T11:53:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-05T11:53:00Z"}, "message": "Rollup merge of #62150 - alex:mem-uninit-refactor, r=RalfJung\n\nImplement mem::{zeroed,uninitialized} in terms of MaybeUninit.\n\nRefs #62061\n\nr? @oli-obk", "tree": {"sha": "ac5494522211f56dbf9596988b1c4c5014085f7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac5494522211f56dbf9596988b1c4c5014085f7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d45156866b54c3fc36edfdfcdd8149ad9cb5711", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdHzocCRBK7hj4Ov3rIwAAdHIIAIgt2YwvzNafmpOlJtVFpNPR\nCRTHZQ8gXBco83b0PyVrkN9CMLfm+SNN8Sk7ebiTUZkB9kIsiCjONQxJ7rNfyOwP\nVHLHKJv0GdQMi8n9JMPwv14vxL0ievceWNrDNua6lyreVvzEQU7EbkztjA1nHgOG\nzx3ZYk50G+6JvBrJ1nNI39pZBWi21skzgyqZSJdqDeErW4oAB2a6eJyhI8NrAebf\n6cRuv6tbmu3uUoI7h0s8Zl2+dYZTGOF12HL7J+hJ1ISNKUO2DHYHuGGYde8ZYd3K\njNUK7Jf+NUgfjIUi9y48oM23yEvjmm7y5zHfb2e0jcUd+AmMtyW+08GtF5OauiA=\n=l8/r\n-----END PGP SIGNATURE-----\n", "payload": "tree ac5494522211f56dbf9596988b1c4c5014085f7d\nparent 0f92eb8a4a7d8715381f5b5d748d22315f6ff9c7\nparent e4f250e405046713ba6fbcf481d0a88f26d25ae8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562327580 +0200\ncommitter GitHub <noreply@github.com> 1562327580 +0200\n\nRollup merge of #62150 - alex:mem-uninit-refactor, r=RalfJung\n\nImplement mem::{zeroed,uninitialized} in terms of MaybeUninit.\n\nRefs #62061\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d45156866b54c3fc36edfdfcdd8149ad9cb5711", "html_url": "https://github.com/rust-lang/rust/commit/1d45156866b54c3fc36edfdfcdd8149ad9cb5711", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f92eb8a4a7d8715381f5b5d748d22315f6ff9c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f92eb8a4a7d8715381f5b5d748d22315f6ff9c7", "html_url": "https://github.com/rust-lang/rust/commit/0f92eb8a4a7d8715381f5b5d748d22315f6ff9c7"}, {"sha": "e4f250e405046713ba6fbcf481d0a88f26d25ae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f250e405046713ba6fbcf481d0a88f26d25ae8", "html_url": "https://github.com/rust-lang/rust/commit/e4f250e405046713ba6fbcf481d0a88f26d25ae8"}], "stats": {"total": 41, "additions": 12, "deletions": 29}, "files": [{"sha": "67430e5bbda4d58df472854ea5ae6cef7d07eb42", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=1d45156866b54c3fc36edfdfcdd8149ad9cb5711", "patch": "@@ -700,17 +700,15 @@ extern \"rust-intrinsic\" {\n     /// which is unsafe unless `T` is `Copy`. Also, even if T is\n     /// `Copy`, an all-zero value may not correspond to any legitimate\n     /// state for the type in question.\n+    #[unstable(feature = \"core_intrinsics\",\n+               reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n+                         they should be used through stabilized interfaces \\\n+                         in the rest of the standard library\",\n+               issue = \"0\")]\n+    #[rustc_deprecated(reason = \"no longer used by rustc, will be removed - use MaybeUnint instead\",\n+                       since = \"1.38.0\")]\n     pub fn init<T>() -> T;\n \n-    /// Creates an uninitialized value.\n-    ///\n-    /// `uninit` is unsafe because there is no guarantee of what its\n-    /// contents are. In particular its drop-flag may be set to any\n-    /// state, which means it may claim either dropped or\n-    /// undropped. In the general case one must use `ptr::write` to\n-    /// initialize memory previous set to the result of `uninit`.\n-    pub fn uninit<T>() -> T;\n-\n     /// Moves a value out of scope without running drop glue.\n     pub fn forget<T: ?Sized>(_: T);\n "}, {"sha": "b62d81affddbd61c69d077cf93ce7ca13e85b0f5", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=1d45156866b54c3fc36edfdfcdd8149ad9cb5711", "patch": "@@ -450,8 +450,7 @@ pub const fn needs_drop<T>() -> bool {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn zeroed<T>() -> T {\n-    intrinsics::panic_if_uninhabited::<T>();\n-    intrinsics::init()\n+    MaybeUninit::zeroed().assume_init()\n }\n \n /// Bypasses Rust's normal memory-initialization checks by pretending to\n@@ -476,8 +475,7 @@ pub unsafe fn zeroed<T>() -> T {\n #[rustc_deprecated(since = \"1.38.0\", reason = \"use `mem::MaybeUninit` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn uninitialized<T>() -> T {\n-    intrinsics::panic_if_uninhabited::<T>();\n-    intrinsics::uninit()\n+    MaybeUninit::uninit().assume_init()\n }\n \n /// Swaps the values at two mutable locations, without deinitializing either one."}, {"sha": "69f8356f66920be0bc29b5fcbe154b0ac95ab056", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=1d45156866b54c3fc36edfdfcdd8149ad9cb5711", "patch": "@@ -234,7 +234,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 return;\n             }\n             // Effectively no-ops\n-            \"uninit\" | \"forget\" => {\n+            \"forget\" => {\n                 return;\n             }\n             \"needs_drop\" => {"}, {"sha": "82a736bf9c5f2d139d9289e58129fa5b264f791f", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=1d45156866b54c3fc36edfdfcdd8149ad9cb5711", "patch": "@@ -145,7 +145,6 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n             \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),\n             \"init\" => (1, Vec::new(), param(0)),\n-            \"uninit\" => (1, Vec::new(), param(0)),\n             \"forget\" => (1, vec![param(0)], tcx.mk_unit()),\n             \"transmute\" => (2, vec![ param(0) ], param(1)),\n             \"move_val_init\" => {"}, {"sha": "9555efb639b50480e93a11db16d009cd23fa1f64", "filename": "src/test/run-pass/intrinsics/intrinsic-uninit.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f92eb8a4a7d8715381f5b5d748d22315f6ff9c7/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsic-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f92eb8a4a7d8715381f5b5d748d22315f6ff9c7/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsic-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsic-uninit.rs?ref=0f92eb8a4a7d8715381f5b5d748d22315f6ff9c7", "patch": "@@ -1,13 +0,0 @@\n-// run-pass\n-// pretty-expanded FIXME #23616\n-\n-#![feature(intrinsics)]\n-\n-mod rusti {\n-    extern \"rust-intrinsic\" {\n-        pub fn uninit<T>() -> T;\n-    }\n-}\n-pub fn main() {\n-    let _a : isize = unsafe {rusti::uninit()};\n-}"}, {"sha": "3d65cfc2340926f6b7e07a08c4d23a6b24b15245", "filename": "src/test/ui/init-unsafe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/src%2Ftest%2Fui%2Finit-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/src%2Ftest%2Fui%2Finit-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finit-unsafe.rs?ref=1d45156866b54c3fc36edfdfcdd8149ad9cb5711", "patch": "@@ -1,3 +1,4 @@\n+#![allow(deprecated)]\n #![feature(core_intrinsics)]\n \n use std::intrinsics::{init};"}, {"sha": "e1126316af34ee3ab4f0839bc18f80a663d3e47e", "filename": "src/test/ui/init-unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/src%2Ftest%2Fui%2Finit-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d45156866b54c3fc36edfdfcdd8149ad9cb5711/src%2Ftest%2Fui%2Finit-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finit-unsafe.stderr?ref=1d45156866b54c3fc36edfdfcdd8149ad9cb5711", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/init-unsafe.rs:7:17\n+  --> $DIR/init-unsafe.rs:8:17\n    |\n LL |     let stuff = init::<isize>();\n    |                 ^^^^^^^^^^^^^^^ call to unsafe function"}]}