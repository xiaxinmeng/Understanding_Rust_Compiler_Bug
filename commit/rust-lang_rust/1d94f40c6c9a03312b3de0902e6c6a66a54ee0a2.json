{"sha": "1d94f40c6c9a03312b3de0902e6c6a66a54ee0a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOTRmNDBjNmM5YTAzMzEyYjNkZTA5MDJlNmM2YTY2YTU0ZWUwYTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T02:40:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T05:04:53Z"}, "message": "rustdoc: Prune undocumented enums", "tree": {"sha": "08480ae7e1262570864a5589b352487cc55e8511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08480ae7e1262570864a5589b352487cc55e8511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d94f40c6c9a03312b3de0902e6c6a66a54ee0a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d94f40c6c9a03312b3de0902e6c6a66a54ee0a2", "html_url": "https://github.com/rust-lang/rust/commit/1d94f40c6c9a03312b3de0902e6c6a66a54ee0a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d94f40c6c9a03312b3de0902e6c6a66a54ee0a2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95a006ce520c838fb1368471bcfba3042e176400", "url": "https://api.github.com/repos/rust-lang/rust/commits/95a006ce520c838fb1368471bcfba3042e176400", "html_url": "https://github.com/rust-lang/rust/commit/95a006ce520c838fb1368471bcfba3042e176400"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "bcc26e1124f25587176694b94b10386fe86880f2", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d94f40c6c9a03312b3de0902e6c6a66a54ee0a2/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d94f40c6c9a03312b3de0902e6c6a66a54ee0a2/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=1d94f40c6c9a03312b3de0902e6c6a66a54ee0a2", "patch": "@@ -8,6 +8,7 @@ export default_seq_fold_crate;\n export default_seq_fold_mod;\n export default_seq_fold_fn;\n export default_seq_fold_const;\n+export default_seq_fold_enum;\n export default_seq_fold_fnlist;\n \n enum fold<T> = t<T>;"}, {"sha": "5e2b59d0e414b3df732fb6350b30d14b8d19c5bc", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1d94f40c6c9a03312b3de0902e6c6a66a54ee0a2/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d94f40c6c9a03312b3de0902e6c6a66a54ee0a2/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=1d94f40c6c9a03312b3de0902e6c6a66a54ee0a2", "patch": "@@ -21,9 +21,11 @@ fn run(\n         fold_mod: fold_mod,\n         fold_fn: fold_fn,\n         fold_const: fold_const,\n+        fold_enum: fold_enum,\n         fold_modlist: fold_modlist,\n         fold_fnlist: fold_fnlist,\n-        fold_constlist: fold_constlist\n+        fold_constlist: fold_constlist,\n+        fold_enumlist: fold_enumlist\n         with *fold::default_seq_fold(ctxt)\n     });\n     fold.fold_crate(fold, doc)\n@@ -216,3 +218,65 @@ fn should_elide_undocumented_consts() {\n     let doc = run(srv, doc);\n     assert vec::is_empty(*doc.topmod.consts);\n }\n+\n+fn fold_enum(fold: fold::fold<ctxt>, doc: doc::enumdoc) -> doc::enumdoc {\n+    let doc = ~{\n+        variants: vec::filter_map(doc.variants) {|variant|\n+            if variant.desc != none {\n+                some(variant)\n+            } else {\n+                none\n+            }\n+        }\n+        with *fold::default_seq_fold_enum(fold, doc)\n+    };\n+    fold.ctxt.have_docs =\n+        doc.brief != none\n+        || doc.desc != none\n+        || vec::is_not_empty(doc.variants);\n+    ret doc;\n+}\n+\n+fn fold_enumlist(\n+    fold: fold::fold<ctxt>,\n+    list: doc::enumlist\n+) -> doc::enumlist {\n+    doc::enumlist(vec::filter_map(*list) {|doc|\n+        let doc = fold.fold_enum(fold, doc);\n+        if fold.ctxt.have_docs {\n+            some(doc)\n+        } else {\n+            none\n+        }\n+    })\n+}\n+\n+#[test]\n+fn should_elide_undocumented_enums() {\n+    let source = \"enum a { b }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_empty(*doc.topmod.enums);\n+}\n+\n+#[test]\n+fn should_elide_undocumented_variants() {\n+    let source = \"#[doc = \\\"a\\\"] enum a { b }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_empty(doc.topmod.enums[0].variants);\n+}\n+\n+#[test]\n+fn should_not_elide_enums_with_documented_variants() {\n+    let source = \"enum a { #[doc = \\\"a\\\"] b }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_not_empty(*doc.topmod.enums);\n+}"}]}