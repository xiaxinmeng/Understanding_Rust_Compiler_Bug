{"sha": "a89f8e1340d90de68bf2dd91f7a95c52273bd5f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4OWY4ZTEzNDBkOTBkZTY4YmYyZGQ5MWY3YTk1YzUyMjczYmQ1Zjc=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-07-25T05:46:47Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-07-25T05:49:23Z"}, "message": "bootstrap: use prepare_tool_cargo everywhere\n\nIn this way, RUSTC_NO_PREFER_DYNAMIC is already specified and not\nneeded.", "tree": {"sha": "c9d26c31f8373b3e1bb8f804810357e197e44199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9d26c31f8373b3e1bb8f804810357e197e44199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a89f8e1340d90de68bf2dd91f7a95c52273bd5f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a89f8e1340d90de68bf2dd91f7a95c52273bd5f7", "html_url": "https://github.com/rust-lang/rust/commit/a89f8e1340d90de68bf2dd91f7a95c52273bd5f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a89f8e1340d90de68bf2dd91f7a95c52273bd5f7/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6d28442e869fa8188314cbb0083cc00b250961e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6d28442e869fa8188314cbb0083cc00b250961e", "html_url": "https://github.com/rust-lang/rust/commit/c6d28442e869fa8188314cbb0083cc00b250961e"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "6cb70deb86c74621d113b845867f7d6b63c01366", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a89f8e1340d90de68bf2dd91f7a95c52273bd5f7/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89f8e1340d90de68bf2dd91f7a95c52273bd5f7/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=a89f8e1340d90de68bf2dd91f7a95c52273bd5f7", "patch": "@@ -222,17 +222,18 @@ impl Step for Cargo {\n             compiler,\n             target: self.host,\n         });\n-        let mut cargo = builder.cargo(compiler, Mode::ToolRustc, self.host, \"test\");\n-        cargo\n-            .arg(\"--manifest-path\")\n-            .arg(builder.src.join(\"src/tools/cargo/Cargo.toml\"));\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolRustc,\n+                                                 self.host,\n+                                                 \"test\",\n+                                                 \"src/tools/cargo\",\n+                                                 true);\n+\n         if !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }\n \n-        // Don't build tests dynamically, just a pain to work with\n-        cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n-\n         // Don't run cross-compile tests, we may not have cross-compiled libstd libs\n         // available.\n         cargo.env(\"CFG_DISABLE_CROSS_TESTS\", \"1\");\n@@ -289,9 +290,6 @@ impl Step for Rls {\n                                                  \"src/tools/rls\",\n                                                  true);\n \n-        // Don't build tests dynamically, just a pain to work with\n-        cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n-\n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n         if try_run(builder, &mut cargo) {\n@@ -345,8 +343,6 @@ impl Step for Rustfmt {\n                                                  \"src/tools/rustfmt\",\n                                                  true);\n \n-        // Don't build tests dynamically, just a pain to work with\n-        cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n         let dir = testdir(builder, compiler.host);\n         t!(fs::create_dir_all(&dir));\n         cargo.env(\"RUSTFMT_TEST_DIR\", dir);\n@@ -394,13 +390,14 @@ impl Step for Miri {\n             extra_features: Vec::new(),\n         });\n         if let Some(miri) = miri {\n-            let mut cargo = builder.cargo(compiler, Mode::ToolRustc, host, \"test\");\n-            cargo\n-                .arg(\"--manifest-path\")\n-                .arg(builder.src.join(\"src/tools/miri/Cargo.toml\"));\n+            let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolRustc,\n+                                                 host,\n+                                                 \"test\",\n+                                                 \"src/tools/miri\",\n+                                                 true);\n \n-            // Don't build tests dynamically, just a pain to work with\n-            cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n             // miri tests need to know about the stage sysroot\n             cargo.env(\"MIRI_SYSROOT\", builder.sysroot(compiler));\n             cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n@@ -452,13 +449,14 @@ impl Step for Clippy {\n             extra_features: Vec::new(),\n         });\n         if let Some(clippy) = clippy {\n-            let mut cargo = builder.cargo(compiler, Mode::ToolRustc, host, \"test\");\n-            cargo\n-                .arg(\"--manifest-path\")\n-                .arg(builder.src.join(\"src/tools/clippy/Cargo.toml\"));\n+            let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolRustc,\n+                                                 host,\n+                                                 \"test\",\n+                                                 \"src/tools/clippy\",\n+                                                 true);\n \n-            // Don't build tests dynamically, just a pain to work with\n-            cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n             // clippy tests need to know about the stage sysroot\n             cargo.env(\"SYSROOT\", builder.sysroot(compiler));\n             cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));"}]}