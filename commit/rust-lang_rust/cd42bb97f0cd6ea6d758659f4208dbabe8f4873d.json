{"sha": "cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDJiYjk3ZjBjZDZlYTZkNzU4NjU5ZjQyMDhkYmFiZThmNDg3M2Q=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-06T14:04:51Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-06T14:04:51Z"}, "message": "rustup to rustc 1.13.0-nightly (91f057de3 2016-09-04)", "tree": {"sha": "f0203058c116e4ebb50020e981672996ba56c610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0203058c116e4ebb50020e981672996ba56c610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXzs0DAAoJEFbW7qD8Z6xGw0gQAKUDuCYsfwUsmQU2tCimmArO\nZgyx2O+cCGqKMIiJnQir4KOFkxElT5syGBC+9njFzJY4225egi/BZQEfUHuHewwV\nvUc8bpoZ6EsbBurNTC1C9MxoqA76iOE9iiFQXYC3AqQMXoTsf10x/iFoVHgpfl8k\n9ry0bCpvWyoJxxTyzxXO4VgF8okSda2GnqkO/0ssIXynVZhvdT1gOCOzqdGgCh/t\nEQmlD+9OoRQytqWysKwJ1CjQWbSEyXw26P8kKUPMP6MGbPSTN8FN39HvzwaI0WuZ\nVYCLu4abrIPnSq/cXmpYmXim1U++IG9icSkkxLHEcg9IYpLJFaJ5cBSUdVIVOalA\nekowVD2pg0bCcuzm22lSAx4gWwzb0N0t3JZXWK89KNPS1GJg9b4yidaG5A+aAdr8\nUH+l2PHAZ56+NDdWc0PTh2COkpLPGbsht3Zn7TxsII+AG/xo7/doBVF+7Iam0iBu\nBE70n4bomcmsReOGs7oEbirfbVVFbZg8BluoVaBV78WlWlyZ6sA7HywM8W8XyVzB\nPOuqwtP3piWSB2F6eys3kgInhBY7gTuPL2LQXHlAB7B5UgixXy9afHU25vbnOFyY\nGHzUUWOdzjImiQCOxpK1bhmRaunpnFdtzLrhBcnLyBeRk6ABypKecfteTRBnYrLB\nG4uu9Lw5xxXfbHWFt0oD\n=yYqN\n-----END PGP SIGNATURE-----", "payload": "tree f0203058c116e4ebb50020e981672996ba56c610\nparent 45cf3cfde2c32f5b27c469ef1b5f04dd195fb462\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473170691 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473170691 +0200\n\nrustup to rustc 1.13.0-nightly (91f057de3 2016-09-04)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "html_url": "https://github.com/rust-lang/rust/commit/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45cf3cfde2c32f5b27c469ef1b5f04dd195fb462", "url": "https://api.github.com/repos/rust-lang/rust/commits/45cf3cfde2c32f5b27c469ef1b5f04dd195fb462", "html_url": "https://github.com/rust-lang/rust/commit/45cf3cfde2c32f5b27c469ef1b5f04dd195fb462"}], "stats": {"total": 86, "additions": 48, "deletions": 38}, "files": [{"sha": "d85ee67cf3e1f005c6890b1592669477c321ad1c", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "patch": "@@ -37,7 +37,7 @@ version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.1.73 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -82,19 +82,19 @@ dependencies = [\n \n [[package]]\n name = \"regex\"\n-version = \"0.1.73\"\n+version = \"0.1.75\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"aho-corasick 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-syntax 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.3.4\"\n+version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -145,8 +145,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\"\n \"checksum log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d382732ea0fbc09790c4899db3255bdea0fc78b54bf234bd18a63bb603915b6\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n-\"checksum regex 0.1.73 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56b7ee9f764ecf412c6e2fff779bca4b22980517ae335a21aeaf4e32625a5df2\"\n-\"checksum regex-syntax 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31040aad7470ad9d8c46302dcffba337bb4289ca5da2e3cd6e37b64109a85199\"\n+\"checksum regex 0.1.75 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f62414f9d3b0f53e827ac46d6f8ce2ff6a91afd724225a5986e54e81e170693c\"\n+\"checksum regex-syntax 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"279401017ae31cf4e15344aa3f085d0e2e5c1e70067289ef906906fdbe92c8fd\"\n \"checksum rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6159e4e6e559c81bd706afe9c8fd68f547d3e851ce12e76b1de7914bab61691b\"\n \"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n \"checksum thread_local 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"55dd963dbaeadc08aa7266bf7f91c3154a7805e32bb94b820b769d2ef3b4744d\""}, {"sha": "4fc20c96d2162d6c911878cf76e9c949a0b1cb8f", "filename": "src/bin/miri.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "patch": "@@ -13,7 +13,7 @@ use miri::{eval_main, run_mir_passes};\n use rustc::session::Session;\n use rustc::mir::mir_map::MirMap;\n use rustc_driver::{driver, CompilerCalls, Compilation};\n-use syntax::ast::MetaItemKind;\n+use syntax::ast::{MetaItemKind, NestedMetaItemKind};\n \n struct MiriCompilerCalls;\n \n@@ -52,14 +52,17 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n                     MetaItemKind::List(ref name, _) if name != \"miri\" => {}\n                     MetaItemKind::List(_, ref items) => for item in items {\n                         match item.node {\n-                            MetaItemKind::NameValue(ref name, ref value) => {\n-                                match &**name {\n-                                    \"memory_size\" => memory_size = extract_str(value).parse().expect(\"not a number\"),\n-                                    \"step_limit\" => step_limit = extract_str(value).parse().expect(\"not a number\"),\n-                                    \"stack_limit\" => stack_limit = extract_str(value).parse().expect(\"not a number\"),\n-                                    _ => state.session.span_err(item.span, \"unknown miri attribute\"),\n+                            NestedMetaItemKind::MetaItem(ref inner) => match inner.node {\n+                                MetaItemKind::NameValue(ref name, ref value) => {\n+                                    match &**name {\n+                                        \"memory_size\" => memory_size = extract_str(value).parse().expect(\"not a number\"),\n+                                        \"step_limit\" => step_limit = extract_str(value).parse().expect(\"not a number\"),\n+                                        \"stack_limit\" => stack_limit = extract_str(value).parse().expect(\"not a number\"),\n+                                        _ => state.session.span_err(item.span, \"unknown miri attribute\"),\n+                                    }\n                                 }\n-                            }\n+                                _ => state.session.span_err(inner.span, \"miri attributes need to be of key = value kind\"),\n+                            },\n                             _ => state.session.span_err(item.span, \"miri attributes need to be of key = value kind\"),\n                         }\n                     },"}, {"sha": "0afca11c0ac5ed4cd1d0776f6cbf601130b77781", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "patch": "@@ -292,7 +292,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         // TODO(solson): Is this inefficient? Needs investigation.\n         let ty = self.monomorphize(ty, substs);\n \n-        self.tcx.normalizing_infer_ctxt(Reveal::All).enter(|infcx| {\n+        self.tcx.infer_ctxt(None, None, Reveal::All).enter(|infcx| {\n             // TODO(solson): Report this error properly.\n             ty.layout(&infcx).unwrap()\n         })\n@@ -454,7 +454,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     General { discr, ref variants, .. } => {\n-                        if let mir::AggregateKind::Adt(adt_def, variant, _) = *kind {\n+                        if let mir::AggregateKind::Adt(adt_def, variant, _, _) = *kind {\n                             let discr_val = adt_def.variants[variant].disr_val.to_u64_unchecked();\n                             let discr_size = discr.size().bytes() as usize;\n                             self.memory.write_uint(dest, discr_val, discr_size)?;\n@@ -468,7 +468,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     RawNullablePointer { nndiscr, .. } => {\n-                        if let mir::AggregateKind::Adt(_, variant, _) = *kind {\n+                        if let mir::AggregateKind::Adt(_, variant, _, _) = *kind {\n                             if nndiscr == variant as u64 {\n                                 assert_eq!(operands.len(), 1);\n                                 let operand = &operands[0];\n@@ -485,7 +485,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     StructWrappedNullablePointer { nndiscr, ref nonnull, ref discrfield } => {\n-                        if let mir::AggregateKind::Adt(_, variant, _) = *kind {\n+                        if let mir::AggregateKind::Adt(_, variant, _, _) = *kind {\n                             if nndiscr == variant as u64 {\n                                 let offsets = iter::once(0)\n                                     .chain(nonnull.offset_after_field.iter().map(|s| s.bytes()));\n@@ -503,7 +503,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     CEnum { discr, signed, .. } => {\n                         assert_eq!(operands.len(), 0);\n-                        if let mir::AggregateKind::Adt(adt_def, variant, _) = *kind {\n+                        if let mir::AggregateKind::Adt(adt_def, variant, _, _) = *kind {\n                             let val = adt_def.variants[variant].disr_val.to_u64_unchecked();\n                             let size = discr.size().bytes() as usize;\n "}, {"sha": "3175d2a16a3d12589ea819bc6bd6cb7c87e6cfcd", "filename": "src/interpreter/step.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d/src%2Finterpreter%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d/src%2Finterpreter%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstep.rs?ref=cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "patch": "@@ -24,11 +24,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n \n         let block = self.frame().block;\n-        let stmt = self.frame().stmt;\n+        let stmt_id = self.frame().stmt;\n         let mir = self.mir();\n         let basic_block = &mir.basic_blocks()[block];\n \n-        if let Some(ref stmt) = basic_block.statements.get(stmt) {\n+        if let Some(ref stmt) = basic_block.statements.get(stmt_id) {\n             let mut new = Ok(0);\n             ConstantExtractor {\n                 span: stmt.source_info.span,\n@@ -37,7 +37,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 ecx: self,\n                 mir: &mir,\n                 new_constants: &mut new,\n-            }.visit_statement(block, stmt);\n+            }.visit_statement(block, stmt, mir::Location {\n+                block: block,\n+                statement_index: stmt_id,\n+            });\n             if new? == 0 {\n                 self.statement(stmt)?;\n             }\n@@ -55,7 +58,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             ecx: self,\n             mir: &mir,\n             new_constants: &mut new,\n-        }.visit_terminator(block, terminator);\n+        }.visit_terminator(block, terminator, mir::Location {\n+            block: block,\n+            statement_index: stmt_id,\n+        });\n         if new? == 0 {\n             self.terminator(terminator)?;\n         }\n@@ -135,8 +141,8 @@ impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n-    fn visit_constant(&mut self, constant: &mir::Constant<'tcx>) {\n-        self.super_constant(constant);\n+    fn visit_constant(&mut self, constant: &mir::Constant<'tcx>, location: mir::Location) {\n+        self.super_constant(constant, location);\n         match constant.literal {\n             // already computed by rustc\n             mir::Literal::Value { .. } => {}\n@@ -170,8 +176,8 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn visit_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>, context: LvalueContext) {\n-        self.super_lvalue(lvalue, context);\n+    fn visit_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>, context: LvalueContext, location: mir::Location) {\n+        self.super_lvalue(lvalue, context, location);\n         if let mir::Lvalue::Static(def_id) = *lvalue {\n             let substs = subst::Substs::empty(self.ecx.tcx);\n             let span = self.span;"}, {"sha": "159cfd09ed3689da438739113760b5de4dcf9028", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "patch": "@@ -240,6 +240,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             // The discriminant_value intrinsic returns 0 for non-sum types.\n             Array { .. } | FatPointer { .. } | Scalar { .. } | Univariant { .. } |\n             Vector { .. } => 0,\n+            UntaggedUnion { .. } => unimplemented!(),\n         };\n \n         Ok(discr_val)\n@@ -278,7 +279,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"assume\" => {}\n \n             \"copy_nonoverlapping\" => {\n-                let elem_ty = substs.types[0];\n+                let elem_ty = substs.types().next().expect(\"should at least have one type argument\");\n                 let elem_size = self.type_size(elem_ty);\n                 let elem_align = self.type_align(elem_ty);\n                 let src = self.memory.read_ptr(args_ptrs[0])?;\n@@ -288,7 +289,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"discriminant_value\" => {\n-                let ty = substs.types[0];\n+                let ty = substs.types().next().expect(\"should have at least one type argument\");\n                 let adt_ptr = self.memory.read_ptr(args_ptrs[0])?;\n                 let discr_val = self.read_discriminant_value(adt_ptr, ty)?;\n                 self.memory.write_uint(dest, discr_val, 8)?;\n@@ -299,19 +300,19 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"init\" => self.memory.write_repeat(dest, 0, dest_layout.size(&self.tcx.data_layout).bytes() as usize)?,\n \n             \"min_align_of\" => {\n-                let elem_ty = substs.types[0];\n+                let elem_ty = substs.types().next().expect(\"should have at least one type argument\");\n                 let elem_align = self.type_align(elem_ty);\n                 self.memory.write_uint(dest, elem_align as u64, pointer_size)?;\n             }\n \n             \"move_val_init\" => {\n-                let ty = substs.types[0];\n+                let ty = substs.types().next().expect(\"should have at least one type argument\");\n                 let ptr = self.memory.read_ptr(args_ptrs[0])?;\n                 self.move_(args_ptrs[1], ptr, ty)?;\n             }\n \n             \"offset\" => {\n-                let pointee_ty = substs.types[0];\n+                let pointee_ty = substs.types().next().expect(\"should have at least one type argument\");\n                 let pointee_size = self.type_size(pointee_ty) as isize;\n                 let ptr_arg = args_ptrs[0];\n                 let offset = self.memory.read_isize(args_ptrs[1])?;\n@@ -343,13 +344,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"size_of\" => {\n-                let ty = substs.types[0];\n+                let ty = substs.types().next().expect(\"should have at least one type argument\");\n                 let size = self.type_size(ty) as u64;\n                 self.memory.write_uint(dest, size, pointer_size)?;\n             }\n \n             \"size_of_val\" => {\n-                let ty = substs.types[0];\n+                let ty = substs.types().next().expect(\"should have at least one type argument\");\n                 if self.type_is_sized(ty) {\n                     let size = self.type_size(ty) as u64;\n                     self.memory.write_uint(dest, size, pointer_size)?;\n@@ -369,7 +370,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"transmute\" => {\n-                let ty = substs.types[0];\n+                let ty = substs.types().next().expect(\"should have at least one type argument\");\n                 self.move_(args_ptrs[0], dest, ty)?;\n             }\n             \"uninit\" => self.memory.mark_definedness(dest, dest_layout.size(&self.tcx.data_layout).bytes() as usize, false)?,\n@@ -457,7 +458,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn fulfill_obligation(&self, trait_ref: ty::PolyTraitRef<'tcx>) -> traits::Vtable<'tcx, ()> {\n         // Do the initial selection for the obligation. This yields the shallow result we are\n         // looking for -- that is, what specific impl.\n-        self.tcx.normalizing_infer_ctxt(Reveal::All).enter(|infcx| {\n+        self.tcx.infer_ctxt(None, None, Reveal::All).enter(|infcx| {\n             let mut selcx = traits::SelectionContext::new(&infcx);\n \n             let obligation = traits::Obligation::new(\n@@ -570,14 +571,14 @@ fn get_impl_method<'a, 'tcx>(\n     impl_substs: &'tcx Substs<'tcx>,\n     name: ast::Name,\n ) -> ImplMethod<'tcx> {\n-    assert!(!substs.types.needs_infer());\n+    assert!(!substs.types().any(|ty| ty.needs_infer()));\n \n     let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n     let trait_def = tcx.lookup_trait_def(trait_def_id);\n \n     match trait_def.ancestors(impl_def_id).fn_defs(tcx, name).next() {\n         Some(node_item) => {\n-            let substs = tcx.normalizing_infer_ctxt(Reveal::All).enter(|infcx| {\n+            let substs = tcx.infer_ctxt(None, None, Reveal::All).enter(|infcx| {\n                 let substs = substs.rebase_onto(tcx, trait_def_id, impl_substs);\n                 let substs = traits::translate_substs(&infcx, impl_def_id,\n                                                       substs, node_item.node);"}]}