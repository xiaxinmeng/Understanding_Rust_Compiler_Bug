{"sha": "b06409ebcde5746d36e11f323ea4dcc8bebe581c", "node_id": "C_kwDOAAsO6NoAKGIwNjQwOWViY2RlNTc0NmQzNmUxMWYzMjNlYTRkY2M4YmViZTU4MWM", "commit": {"author": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2021-10-02T12:56:58Z"}, "committer": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2021-10-02T21:51:31Z"}, "message": "Rename etc -> has_rest_pat", "tree": {"sha": "5ea481c8f7ad65dadd7b162d9cde5cf4ae019725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ea481c8f7ad65dadd7b162d9cde5cf4ae019725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b06409ebcde5746d36e11f323ea4dcc8bebe581c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b06409ebcde5746d36e11f323ea4dcc8bebe581c", "html_url": "https://github.com/rust-lang/rust/commit/b06409ebcde5746d36e11f323ea4dcc8bebe581c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b06409ebcde5746d36e11f323ea4dcc8bebe581c/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d83ff6aa3edea575c0f58c93637726799d014b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d83ff6aa3edea575c0f58c93637726799d014b4", "html_url": "https://github.com/rust-lang/rust/commit/3d83ff6aa3edea575c0f58c93637726799d014b4"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "0a19d5dd1a93f1c85350ece671baa72d85c05914", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b06409ebcde5746d36e11f323ea4dcc8bebe581c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06409ebcde5746d36e11f323ea4dcc8bebe581c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=b06409ebcde5746d36e11f323ea4dcc8bebe581c", "patch": "@@ -181,8 +181,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_pat_tuple_struct(pat, qpath, subpats, ddpos, expected, def_bm, ti)\n             }\n             PatKind::Path(_) => self.check_pat_path(pat, path_res.unwrap(), expected, ti),\n-            PatKind::Struct(ref qpath, fields, etc) => {\n-                self.check_pat_struct(pat, qpath, fields, etc, expected, def_bm, ti)\n+            PatKind::Struct(ref qpath, fields, has_rest_pat) => {\n+                self.check_pat_struct(pat, qpath, fields, has_rest_pat, expected, def_bm, ti)\n             }\n             PatKind::Or(pats) => {\n                 let parent_pat = Some(pat);\n@@ -685,7 +685,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat: &'tcx Pat<'tcx>,\n         qpath: &hir::QPath<'_>,\n         fields: &'tcx [hir::PatField<'tcx>],\n-        etc: bool,\n+        has_rest_pat: bool,\n         expected: Ty<'tcx>,\n         def_bm: BindingMode,\n         ti: TopInfo<'tcx>,\n@@ -707,7 +707,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.demand_eqtype_pat(pat.span, expected, pat_ty, ti);\n \n         // Type-check subpatterns.\n-        if self.check_struct_pat_fields(pat_ty, pat, variant, fields, etc, def_bm, ti) {\n+        if self.check_struct_pat_fields(pat_ty, &pat, variant, fields, has_rest_pat, def_bm, ti) {\n             pat_ty\n         } else {\n             self.tcx.ty_error()\n@@ -1189,7 +1189,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat: &'tcx Pat<'tcx>,\n         variant: &'tcx ty::VariantDef,\n         fields: &'tcx [hir::PatField<'tcx>],\n-        etc: bool,\n+        has_rest_pat: bool,\n         def_bm: BindingMode,\n         ti: TopInfo<'tcx>,\n     ) -> bool {\n@@ -1263,7 +1263,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Require `..` if struct has non_exhaustive attribute.\n         let non_exhaustive = variant.is_field_list_non_exhaustive() && !adt.did.is_local();\n-        if non_exhaustive && !etc {\n+        if non_exhaustive && !has_rest_pat {\n             self.error_foreign_non_exhaustive_spat(pat, adt.variant_descr(), fields.is_empty());\n         }\n \n@@ -1275,7 +1275,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .struct_span_err(pat.span, \"union patterns should have exactly one field\")\n                     .emit();\n             }\n-            if etc {\n+            if has_rest_pat {\n                 tcx.sess.struct_span_err(pat.span, \"`..` cannot be used in union patterns\").emit();\n             }\n         } else if !unmentioned_fields.is_empty() {\n@@ -1287,7 +1287,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 })\n                 .collect();\n \n-            if !etc {\n+            if !has_rest_pat {\n                 if accessible_unmentioned_fields.is_empty() {\n                     unmentioned_err = Some(self.error_no_accessible_fields(pat, fields));\n                 } else {"}]}