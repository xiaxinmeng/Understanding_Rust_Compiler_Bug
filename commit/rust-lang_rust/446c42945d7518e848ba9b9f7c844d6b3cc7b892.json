{"sha": "446c42945d7518e848ba9b9f7c844d6b3cc7b892", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NmM0Mjk0NWQ3NTE4ZTg0OGJhOWI5ZjdjODQ0ZDZiM2NjN2I4OTI=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2021-08-30T09:37:02Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2021-08-30T10:45:56Z"}, "message": "Fix LLVM libunwind build for non-musl targets\n\nBroken in #85600", "tree": {"sha": "3313b3c246fee3450db0749d6b81d177195b19f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3313b3c246fee3450db0749d6b81d177195b19f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/446c42945d7518e848ba9b9f7c844d6b3cc7b892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/446c42945d7518e848ba9b9f7c844d6b3cc7b892", "html_url": "https://github.com/rust-lang/rust/commit/446c42945d7518e848ba9b9f7c844d6b3cc7b892", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/446c42945d7518e848ba9b9f7c844d6b3cc7b892/comments", "author": null, "committer": null, "parents": [{"sha": "9556d7a09a7e80e84430071b29d118f39dde8205", "url": "https://api.github.com/repos/rust-lang/rust/commits/9556d7a09a7e80e84430071b29d118f39dde8205", "html_url": "https://github.com/rust-lang/rust/commit/9556d7a09a7e80e84430071b29d118f39dde8205"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "df9e9bce415276245571bf083e0608ee390e1d88", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/446c42945d7518e848ba9b9f7c844d6b3cc7b892/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446c42945d7518e848ba9b9f7c844d6b3cc7b892/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=446c42945d7518e848ba9b9f7c844d6b3cc7b892", "patch": "@@ -142,6 +142,14 @@ fn copy_and_stamp(\n     target_deps.push((target, dependency_type));\n }\n \n+fn copy_llvm_libunwind(builder: &Builder<'_>, target: TargetSelection, libdir: &Path) -> PathBuf {\n+    let libunwind_path = builder.ensure(native::Libunwind { target });\n+    let libunwind_source = libunwind_path.join(\"libunwind.a\");\n+    let libunwind_target = libdir.join(\"libunwind.a\");\n+    builder.copy(&libunwind_source, &libunwind_target);\n+    libunwind_target\n+}\n+\n /// Copies third party objects needed by various targets.\n fn copy_third_party_objects(\n     builder: &Builder<'_>,\n@@ -167,6 +175,15 @@ fn copy_third_party_objects(\n         );\n     }\n \n+    if target == \"x86_64-fortanix-unknown-sgx\"\n+        || builder.config.llvm_libunwind == LlvmLibunwind::InTree\n+            && (target.contains(\"linux\") || target.contains(\"fuchsia\"))\n+    {\n+        let libunwind_path =\n+            copy_llvm_libunwind(builder, target, &builder.sysroot_libdir(*compiler, target));\n+        target_deps.push((libunwind_path, DependencyType::Target));\n+    }\n+\n     target_deps\n }\n \n@@ -208,6 +225,9 @@ fn copy_self_contained_objects(\n             builder.copy(&src, &target);\n             target_deps.push((target, DependencyType::TargetSelfContained));\n         }\n+\n+        let libunwind_path = copy_llvm_libunwind(builder, target, &libdir_self_contained);\n+        target_deps.push((libunwind_path, DependencyType::TargetSelfContained));\n     } else if target.ends_with(\"-wasi\") {\n         let srcdir = builder\n             .wasi_root(target)\n@@ -234,18 +254,6 @@ fn copy_self_contained_objects(\n         }\n     }\n \n-    if target.contains(\"musl\")\n-        || target.contains(\"x86_64-fortanix-unknown-sgx\")\n-        || builder.config.llvm_libunwind == LlvmLibunwind::InTree\n-            && (target.contains(\"linux\") || target.contains(\"fuchsia\"))\n-    {\n-        let libunwind_path = builder.ensure(native::Libunwind { target });\n-        let libunwind_source = libunwind_path.join(\"libunwind.a\");\n-        let libunwind_target = libdir_self_contained.join(\"libunwind.a\");\n-        builder.copy(&libunwind_source, &libunwind_target);\n-        target_deps.push((libunwind_target, DependencyType::TargetSelfContained));\n-    }\n-\n     target_deps\n }\n "}]}