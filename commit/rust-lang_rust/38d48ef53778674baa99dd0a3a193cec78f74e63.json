{"sha": "38d48ef53778674baa99dd0a3a193cec78f74e63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZDQ4ZWY1Mzc3ODY3NGJhYTk5ZGQwYTNhMTkzY2VjNzhmNzRlNjM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-27T18:42:04Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-27T21:38:20Z"}, "message": "rustc: Forbid #[inline(always)] with #[target_feature]\n\nOnce a target feature is enabled for a function that means that it in general\ncan't be inlined into other functions which don't have that target feature\nenabled. This can cause both safety and LLVM issues if we were to actually\ninline it, so `#[inline(always)]` both can't be respected and would be an error\nif we did so!\n\nToday LLVM doesn't inline functions with different `#[target_feature]`\nannotations, but it turns out that if one is tagged with `#[inline(always)]`\nit'll override this and cause scary LLVM error to arise!\n\nThis commit fixes this issue by forbidding these two attributes to be used in\nconjunction with one another.\n\ncc rust-lang-nursery/stdsimd#404", "tree": {"sha": "936fa1620b03ac551ff866f46418a27d5fb374d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/936fa1620b03ac551ff866f46418a27d5fb374d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38d48ef53778674baa99dd0a3a193cec78f74e63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38d48ef53778674baa99dd0a3a193cec78f74e63", "html_url": "https://github.com/rust-lang/rust/commit/38d48ef53778674baa99dd0a3a193cec78f74e63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38d48ef53778674baa99dd0a3a193cec78f74e63/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c9424de51da41fd3d1077ac7810276f8dc746fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9424de51da41fd3d1077ac7810276f8dc746fa", "html_url": "https://github.com/rust-lang/rust/commit/9c9424de51da41fd3d1077ac7810276f8dc746fa"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "59156bf0dfeaa0c5a874f381fb41eeb2b8f7f884", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38d48ef53778674baa99dd0a3a193cec78f74e63/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d48ef53778674baa99dd0a3a193cec78f74e63/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=38d48ef53778674baa99dd0a3a193cec78f74e63", "patch": "@@ -1769,6 +1769,7 @@ fn trans_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> TransFnAt\n \n     let whitelist = tcx.target_features_whitelist(LOCAL_CRATE);\n \n+    let mut inline_span = None;\n     for attr in attrs.iter() {\n         if attr.check_name(\"cold\") {\n             trans_fn_attrs.flags |= TransFnAttrFlags::COLD;\n@@ -1800,6 +1801,7 @@ fn trans_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> TransFnAt\n                     }\n                     MetaItemKind::List(ref items) => {\n                         mark_used(attr);\n+                        inline_span = Some(attr.span);\n                         if items.len() != 1 {\n                             span_err!(tcx.sess.diagnostic(), attr.span, E0534,\n                                         \"expected one argument\");\n@@ -1855,5 +1857,18 @@ fn trans_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> TransFnAt\n         }\n     }\n \n+    // If a function uses #[target_feature] it can't be inlined into general\n+    // purpose functions as they wouldn't have the right target features\n+    // enabled. For that reason we also forbid #[inline(always)] as it can't be\n+    // respected.\n+    if trans_fn_attrs.target_features.len() > 0 {\n+        if trans_fn_attrs.inline == InlineAttr::Always {\n+            if let Some(span) = inline_span {\n+                tcx.sess.span_err(span, \"cannot use #[inline(always)] with \\\n+                                         #[target_feature]\");\n+            }\n+        }\n+    }\n+\n     trans_fn_attrs\n }"}, {"sha": "56acbed47210a5632cb9ed8eaf9b7c72a7d471ba", "filename": "src/test/ui/target-feature-wrong.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38d48ef53778674baa99dd0a3a193cec78f74e63/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d48ef53778674baa99dd0a3a193cec78f74e63/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs?ref=38d48ef53778674baa99dd0a3a193cec78f74e63", "patch": "@@ -33,6 +33,11 @@ fn bar() {}\n //~^ ERROR: should be applied to a function\n mod another {}\n \n+#[inline(always)]\n+//~^ ERROR: cannot use #[inline(always)]\n+#[target_feature(enable = \"sse2\")]\n+unsafe fn test() {}\n+\n fn main() {\n     unsafe {\n         foo();"}, {"sha": "8773f8504cb01e7983e84b20c26d438296522dfa", "filename": "src/test/ui/target-feature-wrong.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38d48ef53778674baa99dd0a3a193cec78f74e63/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d48ef53778674baa99dd0a3a193cec78f74e63/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr?ref=38d48ef53778674baa99dd0a3a193cec78f74e63", "patch": "@@ -37,5 +37,11 @@ LL | //~^ ERROR: should be applied to a function\n LL | mod another {}\n    | -------------- not a function\n \n-error: aborting due to 5 previous errors\n+error: cannot use #[inline(always)] with #[target_feature]\n+  --> $DIR/target-feature-wrong.rs:36:1\n+   |\n+LL | #[inline(always)]\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n "}]}