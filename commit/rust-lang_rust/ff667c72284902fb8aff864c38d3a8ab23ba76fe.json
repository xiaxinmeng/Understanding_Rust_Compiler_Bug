{"sha": "ff667c72284902fb8aff864c38d3a8ab23ba76fe", "node_id": "C_kwDOAAsO6NoAKGZmNjY3YzcyMjg0OTAyZmI4YWZmODY0YzM4ZDNhOGFiMjNiYTc2ZmU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-17T19:53:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-17T19:53:58Z"}, "message": "internal: Add a `NameContext` to `CompletionContext`, move out some ImmediateLocation variants", "tree": {"sha": "15d9c4191de6025702b99304fe26936ad583a747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d9c4191de6025702b99304fe26936ad583a747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff667c72284902fb8aff864c38d3a8ab23ba76fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff667c72284902fb8aff864c38d3a8ab23ba76fe", "html_url": "https://github.com/rust-lang/rust/commit/ff667c72284902fb8aff864c38d3a8ab23ba76fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff667c72284902fb8aff864c38d3a8ab23ba76fe/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a45a63e57742331d0a449089a47ac30794d008cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a45a63e57742331d0a449089a47ac30794d008cd", "html_url": "https://github.com/rust-lang/rust/commit/a45a63e57742331d0a449089a47ac30794d008cd"}], "stats": {"total": 165, "additions": 96, "deletions": 69}, "files": [{"sha": "36cee48aed6affb3049963024e21ce71c3d84abf", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=ff667c72284902fb8aff864c38d3a8ab23ba76fe", "patch": "@@ -103,10 +103,14 @@ impl Completions {\n         item.add_to(self);\n     }\n \n-    pub(crate) fn add_nameref_keywords(&mut self, ctx: &CompletionContext) {\n+    pub(crate) fn add_nameref_keywords_with_colon(&mut self, ctx: &CompletionContext) {\n         [\"self::\", \"super::\", \"crate::\"].into_iter().for_each(|kw| self.add_keyword(ctx, kw));\n     }\n \n+    pub(crate) fn add_nameref_keywords(&mut self, ctx: &CompletionContext) {\n+        [\"self\", \"super\", \"crate\"].into_iter().for_each(|kw| self.add_keyword(ctx, kw));\n+    }\n+\n     pub(crate) fn add_crate_roots(&mut self, ctx: &CompletionContext) {\n         ctx.process_all_names(&mut |name, res| match res {\n             ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) if m.is_crate_root(ctx.db) => {"}, {"sha": "eb887c3f73e22f76f7d01d900f78036133951af3", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=ff667c72284902fb8aff864c38d3a8ab23ba76fe", "patch": "@@ -107,7 +107,7 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n                     acc.add_resolution(ctx, name, def);\n                 }\n             });\n-            acc.add_nameref_keywords(ctx);\n+            acc.add_nameref_keywords_with_colon(ctx);\n         }\n     }\n "}, {"sha": "4f524dd73bb31c1411655ae9308fd18348fe12de", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=ff667c72284902fb8aff864c38d3a8ab23ba76fe", "patch": "@@ -102,7 +102,7 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n                     None => acc.add_resolution(ctx, name, def),\n                 }\n             });\n-            acc.add_nameref_keywords(ctx);\n+            acc.add_nameref_keywords_with_colon(ctx);\n         }\n     }\n }"}, {"sha": "7641086ff8e279207ed520aa6849eb58009e1678", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=ff667c72284902fb8aff864c38d3a8ab23ba76fe", "patch": "@@ -9,14 +9,16 @@ use ide_db::{\n };\n use rustc_hash::FxHashSet;\n \n-use crate::{patterns::ImmediateLocation, CompletionItem};\n+use crate::{context::NameContext, CompletionItem};\n \n use crate::{context::CompletionContext, Completions};\n \n /// Complete mod declaration, i.e. `mod $0;`\n pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    let mod_under_caret = match &ctx.completion_location {\n-        Some(ImmediateLocation::ModDeclaration(mod_under_caret)) => mod_under_caret,\n+    let mod_under_caret = match &ctx.name_ctx {\n+        Some(NameContext::Module(mod_under_caret)) if mod_under_caret.item_list().is_none() => {\n+            mod_under_caret\n+        }\n         _ => return None,\n     };\n "}, {"sha": "a11bcc96fa7e977b6da866aa4afe7f203764a7a0", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=ff667c72284902fb8aff864c38d3a8ab23ba76fe", "patch": "@@ -202,7 +202,7 @@ fn pattern_path_completion(\n                     acc.add_resolution(ctx, name, res);\n                 }\n             });\n-            acc.add_nameref_keywords(ctx);\n+            acc.add_nameref_keywords_with_colon(ctx);\n         }\n     }\n }"}, {"sha": "94142e274aeaf928a221c2fab617f5543a7af155", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=ff667c72284902fb8aff864c38d3a8ab23ba76fe", "patch": "@@ -17,21 +17,15 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     }\n     match ctx.path_context {\n         Some(PathCompletionCtx {\n-            kind:\n-                Some(\n-                    PathKind::Attr { .. }\n-                    | PathKind::Derive\n-                    | PathKind::Pat\n-                    | PathKind::Use { .. }\n-                    | PathKind::Vis { .. },\n-                ),\n+            is_absolute_path: false,\n+            qualifier: None,\n+            kind: None | Some(PathKind::Expr | PathKind::Type | PathKind::Mac),\n             ..\n-        }) => return,\n-        Some(PathCompletionCtx { is_absolute_path: false, qualifier: None, .. }) => (),\n+        }) => (),\n         _ => return,\n     }\n \n-    [\"self\", \"super\", \"crate\"].into_iter().for_each(|kw| acc.add_keyword(ctx, kw));\n+    acc.add_nameref_keywords(ctx);\n \n     match &ctx.completion_location {\n         Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {"}, {"sha": "94df46efb0465e1385b7824fad484bdfbaf9637b", "filename": "crates/ide_completion/src/completions/use_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=ff667c72284902fb8aff864c38d3a8ab23ba76fe", "patch": "@@ -113,7 +113,7 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n                     acc.add_resolution(ctx, name, res);\n                 }\n             });\n-            acc.add_nameref_keywords(ctx);\n+            acc.add_nameref_keywords_with_colon(ctx);\n         }\n     }\n }"}, {"sha": "338e003437bfdba111381f98799f5fc1960800ef", "filename": "crates/ide_completion/src/completions/vis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=ff667c72284902fb8aff864c38d3a8ab23ba76fe", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn complete_vis(acc: &mut Completions, ctx: &CompletionContext) {\n                 cov_mark::hit!(kw_completion_in);\n                 acc.add_keyword(ctx, \"in\");\n             }\n-            [\"self\", \"super\", \"crate\"].into_iter().for_each(|kw| acc.add_keyword(ctx, kw));\n+            acc.add_nameref_keywords(ctx);\n         }\n         _ => {}\n     }"}, {"sha": "40e23f4ab5a8deb5bbbc3245299433775f91d854", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 75, "deletions": 23, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=ff667c72284902fb8aff864c38d3a8ab23ba76fe", "patch": "@@ -100,6 +100,30 @@ pub(super) enum LifetimeContext {\n     LabelDef,\n }\n \n+#[derive(Debug)]\n+#[allow(dead_code)]\n+pub(super) enum NameContext {\n+    Const,\n+    ConstParam,\n+    Enum,\n+    Function,\n+    IdentPat,\n+    MacroDef,\n+    MacroRules,\n+    /// Fake node\n+    Module(ast::Module),\n+    RecordField,\n+    Rename,\n+    SelfParam,\n+    Static,\n+    Struct,\n+    Trait,\n+    TypeAlias,\n+    TypeParam,\n+    Union,\n+    Variant,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ParamKind {\n     Function(ast::Fn),\n@@ -140,6 +164,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) fake_attribute_under_caret: Option<ast::Attr>,\n     pub(super) previous_token: Option<SyntaxToken>,\n \n+    pub(super) name_ctx: Option<NameContext>,\n     pub(super) lifetime_ctx: Option<LifetimeContext>,\n     pub(super) pattern_ctx: Option<PatternContext>,\n     pub(super) path_context: Option<PathCompletionCtx>,\n@@ -197,7 +222,7 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn expects_variant(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::Variant))\n+        matches!(self.name_ctx, Some(NameContext::Variant))\n     }\n \n     pub(crate) fn expects_non_trait_assoc_item(&self) -> bool {\n@@ -221,10 +246,8 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn expect_field(&self) -> bool {\n-        matches!(\n-            self.completion_location,\n-            Some(ImmediateLocation::RecordField | ImmediateLocation::TupleField)\n-        )\n+        matches!(self.completion_location, Some(ImmediateLocation::TupleField))\n+            || matches!(self.name_ctx, Some(NameContext::RecordField))\n     }\n \n     pub(crate) fn has_impl_or_trait_prev_sibling(&self) -> bool {\n@@ -254,13 +277,9 @@ impl<'a> CompletionContext<'a> {\n             )\n             || matches!(\n                 self.completion_location,\n-                Some(\n-                    ImmediateLocation::ModDeclaration(_)\n-                        | ImmediateLocation::RecordPat(_)\n-                        | ImmediateLocation::RecordExpr(_)\n-                        | ImmediateLocation::Rename\n-                )\n+                Some(ImmediateLocation::RecordPat(_) | ImmediateLocation::RecordExpr(_))\n             )\n+            || matches!(self.name_ctx, Some(NameContext::Module(_) | NameContext::Rename))\n     }\n \n     pub(crate) fn expects_expression(&self) -> bool {\n@@ -429,6 +448,7 @@ impl<'a> CompletionContext<'a> {\n             name_syntax: None,\n             lifetime_ctx: None,\n             pattern_ctx: None,\n+            name_ctx: None,\n             completion_location: None,\n             prev_sibling: None,\n             fake_attribute_under_caret: None,\n@@ -801,7 +821,12 @@ impl<'a> CompletionContext<'a> {\n                 }\n             }\n             ast::NameLike::Name(name) => {\n-                self.pattern_ctx = Self::classify_name(&self.sema, original_file, name);\n+                if let Some((name_ctx, pat_ctx)) =\n+                    Self::classify_name(&self.sema, original_file, name)\n+                {\n+                    self.pattern_ctx = pat_ctx;\n+                    self.name_ctx = Some(name_ctx);\n+                }\n             }\n         }\n     }\n@@ -834,17 +859,44 @@ impl<'a> CompletionContext<'a> {\n         _sema: &Semantics<RootDatabase>,\n         original_file: &SyntaxNode,\n         name: ast::Name,\n-    ) -> Option<PatternContext> {\n-        let bind_pat = name.syntax().parent().and_then(ast::IdentPat::cast)?;\n-        let is_name_in_field_pat = bind_pat\n-            .syntax()\n-            .parent()\n-            .and_then(ast::RecordPatField::cast)\n-            .map_or(false, |pat_field| pat_field.name_ref().is_none());\n-        if is_name_in_field_pat {\n-            return None;\n-        }\n-        Some(pattern_context_for(original_file, bind_pat.into()))\n+    ) -> Option<(NameContext, Option<PatternContext>)> {\n+        let parent = name.syntax().parent()?;\n+        let mut pat_ctx = None;\n+        let name_ctx = match_ast! {\n+            match parent {\n+                ast::Const(_) => NameContext::Const,\n+                ast::ConstParam(_) => NameContext::ConstParam,\n+                ast::Enum(_) => NameContext::Enum,\n+                ast::Fn(_) => NameContext::Function,\n+                ast::IdentPat(bind_pat) => {\n+                    let is_name_in_field_pat = bind_pat\n+                        .syntax()\n+                        .parent()\n+                        .and_then(ast::RecordPatField::cast)\n+                        .map_or(false, |pat_field| pat_field.name_ref().is_none());\n+                    if !is_name_in_field_pat {\n+                        pat_ctx = Some(pattern_context_for(original_file, bind_pat.into()));\n+                    }\n+\n+                    NameContext::IdentPat\n+                },\n+                ast::MacroDef(_) => NameContext::MacroDef,\n+                ast::MacroRules(_) => NameContext::MacroRules,\n+                ast::Module(module) => NameContext::Module(module),\n+                ast::RecordField(_) => NameContext::RecordField,\n+                ast::Rename(_) => NameContext::Rename,\n+                ast::SelfParam(_) => NameContext::SelfParam,\n+                ast::Static(_) => NameContext::Static,\n+                ast::Struct(_) => NameContext::Struct,\n+                ast::Trait(_) => NameContext::Trait,\n+                ast::TypeAlias(_) => NameContext::TypeAlias,\n+                ast::TypeParam(_) => NameContext::TypeParam,\n+                ast::Union(_) => NameContext::Union,\n+                ast::Variant(_) => NameContext::Variant,\n+                _ => return None,\n+            }\n+        };\n+        Some((name_ctx, pat_ctx))\n     }\n \n     fn classify_name_ref("}, {"sha": "6fdec783854f3ddf700932dfc55fdf2ddaa6f09e", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff667c72284902fb8aff864c38d3a8ab23ba76fe/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=ff667c72284902fb8aff864c38d3a8ab23ba76fe", "patch": "@@ -41,21 +41,16 @@ pub(crate) enum TypeAnnotation {\n /// from which file the nodes are.\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ImmediateLocation {\n-    Rename,\n     Impl,\n     Trait,\n-    RecordField,\n     TupleField,\n     RefExpr,\n     IdentPat,\n     StmtList,\n     ItemList,\n     TypeBound,\n-    Variant,\n     /// Original file ast node\n     TypeAnnotation(TypeAnnotation),\n-    /// Fake file ast node\n-    ModDeclaration(ast::Module),\n     /// Original file ast node\n     MethodCall {\n         receiver: Option<ast::Expr>,\n@@ -80,6 +75,7 @@ pub(crate) enum ImmediateLocation {\n     /// The record pat of the field name we are completing\n     ///\n     /// Original file ast node\n+    // FIXME: This should be moved to pattern_ctx\n     RecordPat(ast::RecordPat),\n }\n \n@@ -211,17 +207,10 @@ pub(crate) fn determine_location(\n     let res = match_ast! {\n         match parent {\n             ast::IdentPat(_) => ImmediateLocation::IdentPat,\n-            ast::Rename(_) => ImmediateLocation::Rename,\n             ast::StmtList(_) => ImmediateLocation::StmtList,\n             ast::SourceFile(_) => ImmediateLocation::ItemList,\n             ast::ItemList(_) => ImmediateLocation::ItemList,\n             ast::RefExpr(_) => ImmediateLocation::RefExpr,\n-            ast::Variant(_) => ImmediateLocation::Variant,\n-            ast::RecordField(it) => if it.ty().map_or(false, |it| it.syntax().text_range().contains(offset)) {\n-                return None;\n-            } else {\n-                ImmediateLocation::RecordField\n-            },\n             ast::RecordExprFieldList(_) => sema\n                 .find_node_at_offset_with_macros(original_file, offset)\n                 .map(ImmediateLocation::RecordExprUpdate)?,\n@@ -237,13 +226,6 @@ pub(crate) fn determine_location(\n             ast::GenericArgList(_) => sema\n                 .find_node_at_offset_with_macros(original_file, offset)\n                 .map(ImmediateLocation::GenericArgList)?,\n-            ast::Module(it) => {\n-                if it.item_list().is_none() {\n-                    ImmediateLocation::ModDeclaration(it)\n-                } else {\n-                    return None;\n-                }\n-            },\n             ast::FieldExpr(it) => {\n                 let receiver = find_in_original_file(it.expr(), original_file);\n                 let receiver_is_ambiguous_float_literal = if let Some(ast::Expr::Literal(l)) = &receiver {\n@@ -475,13 +457,6 @@ mod tests {\n         check_location(r\"impl A { fn f$0 }\", None);\n     }\n \n-    #[test]\n-    fn test_record_field_loc() {\n-        check_location(r\"struct Foo { f$0 }\", ImmediateLocation::RecordField);\n-        check_location(r\"struct Foo { f$0 pub f: i32}\", ImmediateLocation::RecordField);\n-        check_location(r\"struct Foo { pub f: i32, f$0 }\", ImmediateLocation::RecordField);\n-    }\n-\n     #[test]\n     fn test_block_expr_loc() {\n         check_location(r\"fn my_fn() { let a = 2; f$0 }\", ImmediateLocation::StmtList);"}]}