{"sha": "827eba4e70ed77a6a679dda4d978d24409494ab3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyN2ViYTRlNzBlZDc3YTZhNjc5ZGRhNGQ5NzhkMjQ0MDk0OTRhYjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-01T07:07:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-01T07:07:32Z"}, "message": "Auto merge of #37911 - liigo:rustdoc-playground, r=alexcrichton\n\nrustdoc: get back missing crate-name when --playground-url is used\n\nfollow up PR #37763\nr? @alexcrichton (since you r+ed to #37763 )\n\n----\n\nEdit: When `#![doc(html_playground_url=\"\")]` is used, the current crate name is saved to `PLAYGROUND`, so rustdoc may generate `extern crate NAME;` into code snips automatically. But when `--playground-url` was introduced in PR #37763, I forgot saving crate name to `PLAYGROUND`. This PR fix that.\n\n----\n\nUpdate:\n- add test\n- unstable `--playground-url`", "tree": {"sha": "f4a7238ed773eea2cbf34585ca074e2148e0bd53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4a7238ed773eea2cbf34585ca074e2148e0bd53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/827eba4e70ed77a6a679dda4d978d24409494ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/827eba4e70ed77a6a679dda4d978d24409494ab3", "html_url": "https://github.com/rust-lang/rust/commit/827eba4e70ed77a6a679dda4d978d24409494ab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/827eba4e70ed77a6a679dda4d978d24409494ab3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "070fad1701fb36b112853b0a6a9787a7bb7ff34c", "url": "https://api.github.com/repos/rust-lang/rust/commits/070fad1701fb36b112853b0a6a9787a7bb7ff34c", "html_url": "https://github.com/rust-lang/rust/commit/070fad1701fb36b112853b0a6a9787a7bb7ff34c"}, {"sha": "d5785a368e3c67e8e544900e23e911f9a8e35c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5785a368e3c67e8e544900e23e911f9a8e35c95", "html_url": "https://github.com/rust-lang/rust/commit/d5785a368e3c67e8e544900e23e911f9a8e35c95"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "40f4d13b2942fe827dd50a381d85e455c2c22cb6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/827eba4e70ed77a6a679dda4d978d24409494ab3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827eba4e70ed77a6a679dda4d978d24409494ab3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=827eba4e70ed77a6a679dda4d978d24409494ab3", "patch": "@@ -428,6 +428,7 @@ pub fn derive_id(candidate: String) -> String {\n /// Generates the documentation for `crate` into the directory `dst`\n pub fn run(mut krate: clean::Crate,\n            external_html: &ExternalHtml,\n+           playground_url: Option<String>,\n            dst: PathBuf,\n            passes: FxHashSet<String>,\n            css_file_extension: Option<PathBuf>,\n@@ -451,6 +452,13 @@ pub fn run(mut krate: clean::Crate,\n         css_file_extension: css_file_extension.clone(),\n     };\n \n+    // If user passed in `--playground-url` arg, we fill in crate name here\n+    if let Some(url) = playground_url {\n+        markdown::PLAYGROUND.with(|slot| {\n+            *slot.borrow_mut() = Some((Some(krate.name.clone()), url));\n+        });\n+    }\n+\n     // Crawl the crate attributes looking for attributes which control how we're\n     // going to emit HTML\n     if let Some(attrs) = krate.module.as_ref().map(|m| &m.attrs) {"}, {"sha": "afa5d66b11347a06ea710df16201a1b042d850dd", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/827eba4e70ed77a6a679dda4d978d24409494ab3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827eba4e70ed77a6a679dda4d978d24409494ab3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=827eba4e70ed77a6a679dda4d978d24409494ab3", "patch": "@@ -160,10 +160,10 @@ pub fn opts() -> Vec<RustcOptGroup> {\n         unstable(optmulti(\"Z\", \"\",\n                           \"internal and debugging options (only on nightly build)\", \"FLAG\")),\n         stable(optopt(\"\", \"sysroot\", \"Override the system root\", \"PATH\")),\n-        stable(optopt(\"\", \"playground-url\",\n-                      \"URL to send code snippets to, may be reset by --markdown-playground-url \\\n-                       or `#![doc(html_playground_url=...)]`\",\n-                      \"URL\")),\n+        unstable(optopt(\"\", \"playground-url\",\n+                        \"URL to send code snippets to, may be reset by --markdown-playground-url \\\n+                         or `#![doc(html_playground_url=...)]`\",\n+                        \"URL\")),\n     ]\n }\n \n@@ -232,10 +232,6 @@ pub fn main_args(args: &[String]) -> isize {\n         }\n     };\n \n-    if let Some(playground) = matches.opt_str(\"playground-url\") {\n-        html::markdown::PLAYGROUND.with(|s| { *s.borrow_mut() = Some((None, playground)); });\n-    }\n-\n     let test_args = matches.opt_strs(\"test-args\");\n     let test_args: Vec<String> = test_args.iter()\n                                           .flat_map(|s| s.split_whitespace())\n@@ -264,6 +260,7 @@ pub fn main_args(args: &[String]) -> isize {\n         None => return 3\n     };\n     let crate_name = matches.opt_str(\"crate-name\");\n+    let playground_url = matches.opt_str(\"playground-url\");\n \n     match (should_test, markdown_input) {\n         (true, true) => {\n@@ -285,7 +282,7 @@ pub fn main_args(args: &[String]) -> isize {\n         info!(\"going to format\");\n         match output_format.as_ref().map(|s| &**s) {\n             Some(\"html\") | None => {\n-                html::render::run(krate, &external_html,\n+                html::render::run(krate, &external_html, playground_url,\n                                   output.unwrap_or(PathBuf::from(\"doc\")),\n                                   passes.into_iter().collect(),\n                                   css_file_extension,"}, {"sha": "29267960a4a815c500f877e2ab930e165c1b4ca1", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/827eba4e70ed77a6a679dda4d978d24409494ab3/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827eba4e70ed77a6a679dda4d978d24409494ab3/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=827eba4e70ed77a6a679dda4d978d24409494ab3", "patch": "@@ -63,7 +63,8 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n         Err(LoadStringError::ReadFail) => return 1,\n         Err(LoadStringError::BadUtf8) => return 2,\n     };\n-    if let Some(playground) = matches.opt_str(\"markdown-playground-url\") {\n+    if let Some(playground) = matches.opt_str(\"markdown-playground-url\").or(\n+                              matches.opt_str(\"playground-url\")) {\n         markdown::PLAYGROUND.with(|s| { *s.borrow_mut() = Some((None, playground)); });\n     }\n "}, {"sha": "f0d55ef6e9fcd1cc5760886c5aebe5df5f2eca84", "filename": "src/test/rustdoc/playground-arg.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/827eba4e70ed77a6a679dda4d978d24409494ab3/src%2Ftest%2Frustdoc%2Fplayground-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827eba4e70ed77a6a679dda4d978d24409494ab3/src%2Ftest%2Frustdoc%2Fplayground-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground-arg.rs?ref=827eba4e70ed77a6a679dda4d978d24409494ab3", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --playground-url=https://example.com/ -Z unstable-options\n+// ignore-tidy-linelength\n+\n+#![crate_name = \"foo\"]\n+\n+//! ```\n+//! use foo::dummy;\n+//! dummy();\n+//! ```\n+\n+pub fn dummy() {}\n+\n+// ensure that `extern crate foo;` was inserted into code snips automatically:\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://example.com/?code=extern%20crate%20foo%3B%0Afn%20main()%20%7B%0Ause%20foo%3A%3Adummy%3B%0Adummy()%3B%0A%7D\"]' \"Run\""}]}