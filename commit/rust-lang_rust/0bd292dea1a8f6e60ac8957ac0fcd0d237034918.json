{"sha": "0bd292dea1a8f6e60ac8957ac0fcd0d237034918", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZDI5MmRlYTFhOGY2ZTYwYWM4OTU3YWMwZmNkMGQyMzcwMzQ5MTg=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-07-07T11:08:14Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-07-30T11:59:02Z"}, "message": "Fix missed same-sized member clash in ClashingExternDeclarations.", "tree": {"sha": "cbdd240be2ff0f54cab5a839bc4dc5e4dc37a4f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbdd240be2ff0f54cab5a839bc4dc5e4dc37a4f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bd292dea1a8f6e60ac8957ac0fcd0d237034918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd292dea1a8f6e60ac8957ac0fcd0d237034918", "html_url": "https://github.com/rust-lang/rust/commit/0bd292dea1a8f6e60ac8957ac0fcd0d237034918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bd292dea1a8f6e60ac8957ac0fcd0d237034918/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30a6f57308bf850891a2f4f47b9f1c325e2ac887", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a6f57308bf850891a2f4f47b9f1c325e2ac887", "html_url": "https://github.com/rust-lang/rust/commit/30a6f57308bf850891a2f4f47b9f1c325e2ac887"}], "stats": {"total": 85, "additions": 73, "deletions": 12}, "files": [{"sha": "06e7c2b6f36256b460cc714241ba38716195240d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0bd292dea1a8f6e60ac8957ac0fcd0d237034918/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd292dea1a8f6e60ac8957ac0fcd0d237034918/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0bd292dea1a8f6e60ac8957ac0fcd0d237034918", "patch": "@@ -38,14 +38,14 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{ForeignItemKind, GenericParamKind, PatKind};\n use rustc_hir::{HirId, HirIdSet, Node};\n use rustc_middle::lint::LintDiagnosticBuilder;\n-use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint::FutureIncompatibleInfo;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Span};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{LayoutOf, VariantIdx};\n use rustc_trait_selection::traits::misc::can_type_implement_copy;\n \n use crate::nonstandard_style::{method_context, MethodLateContext};\n@@ -2163,17 +2163,44 @@ impl ClashingExternDeclarations {\n             let a_kind = &a.kind;\n             let b_kind = &b.kind;\n \n-            use rustc_target::abi::LayoutOf;\n             let compare_layouts = |a, b| -> bool {\n-                &cx.layout_of(a).unwrap().layout.abi == &cx.layout_of(b).unwrap().layout.abi\n+                let a_layout = &cx.layout_of(a).unwrap().layout.abi;\n+                let b_layout = &cx.layout_of(b).unwrap().layout.abi;\n+                debug!(\"{:?} == {:?} = {}\", a_layout, b_layout, a_layout == b_layout);\n+                a_layout == b_layout\n             };\n \n             #[allow(rustc::usage_of_ty_tykind)]\n             let is_primitive_or_pointer =\n                 |kind: &ty::TyKind<'_>| kind.is_primitive() || matches!(kind, RawPtr(..));\n \n             match (a_kind, b_kind) {\n-                (Adt(..), Adt(..)) => compare_layouts(a, b),\n+                (Adt(_, a_substs), Adt(_, b_substs)) => {\n+                    let a = a.subst(cx.tcx, a_substs);\n+                    let b = b.subst(cx.tcx, b_substs);\n+                    debug!(\"Comparing {:?} and {:?}\", a, b);\n+\n+                    if let (Adt(a_def, ..), Adt(b_def, ..)) = (&a.kind, &b.kind) {\n+                        // Grab a flattened representation of all fields.\n+                        let a_fields = a_def.variants.iter().flat_map(|v| v.fields.iter());\n+                        let b_fields = b_def.variants.iter().flat_map(|v| v.fields.iter());\n+                        compare_layouts(a, b)\n+                            && a_fields.eq_by(\n+                                b_fields,\n+                                |&ty::FieldDef { did: a_did, .. },\n+                                 &ty::FieldDef { did: b_did, .. }| {\n+                                    Self::structurally_same_type(\n+                                        cx,\n+                                        tcx.type_of(a_did),\n+                                        tcx.type_of(b_did),\n+                                        ckind,\n+                                    )\n+                                },\n+                            )\n+                    } else {\n+                        unreachable!()\n+                    }\n+                }\n                 (Array(a_ty, a_const), Array(b_ty, b_const)) => {\n                     // For arrays, we also check the constness of the type.\n                     a_const.val == b_const.val"}, {"sha": "d6ac7ccccc77b1c6b111ac80855efa81d0d5eb16", "filename": "src/test/ui/lint/clashing-extern-fn.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0bd292dea1a8f6e60ac8957ac0fcd0d237034918/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd292dea1a8f6e60ac8957ac0fcd0d237034918/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=0bd292dea1a8f6e60ac8957ac0fcd0d237034918", "patch": "@@ -174,6 +174,28 @@ mod sameish_members {\n     }\n }\n \n+mod same_sized_members_clash {\n+    mod a {\n+        #[repr(C)]\n+        struct Point3 {\n+            x: f32,\n+            y: f32,\n+            z: f32,\n+        }\n+        extern \"C\" { fn origin() -> Point3; }\n+    }\n+    mod b {\n+        #[repr(C)]\n+        struct Point3 {\n+            x: i32,\n+            y: i32,\n+            z: i32, // NOTE: Incorrectly redeclared as i32\n+        }\n+        extern \"C\" { fn origin() -> Point3; }\n+        //~^ WARN `origin` redeclared with a different signature\n+    }\n+}\n+\n mod transparent {\n     #[repr(transparent)]\n     struct T(usize);"}, {"sha": "cca0c4c59eb197166f08f901e65b006c604281da", "filename": "src/test/ui/lint/clashing-extern-fn.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0bd292dea1a8f6e60ac8957ac0fcd0d237034918/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bd292dea1a8f6e60ac8957ac0fcd0d237034918/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr?ref=0bd292dea1a8f6e60ac8957ac0fcd0d237034918", "patch": "@@ -105,8 +105,20 @@ LL |             fn draw_point(p: Point);\n    = note: expected `unsafe extern \"C\" fn(sameish_members::a::Point)`\n               found `unsafe extern \"C\" fn(sameish_members::b::Point)`\n \n+warning: `origin` redeclared with a different signature\n+  --> $DIR/clashing-extern-fn.rs:194:22\n+   |\n+LL |         extern \"C\" { fn origin() -> Point3; }\n+   |                      ---------------------- `origin` previously declared here\n+...\n+LL |         extern \"C\" { fn origin() -> Point3; }\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n+   |\n+   = note: expected `unsafe extern \"C\" fn() -> same_sized_members_clash::a::Point3`\n+              found `unsafe extern \"C\" fn() -> same_sized_members_clash::b::Point3`\n+\n warning: `transparent_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:195:13\n+  --> $DIR/clashing-extern-fn.rs:217:13\n    |\n LL |             fn transparent_incorrect() -> T;\n    |             -------------------------------- `transparent_incorrect` previously declared here\n@@ -118,7 +130,7 @@ LL |             fn transparent_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `missing_return_type` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:213:13\n+  --> $DIR/clashing-extern-fn.rs:235:13\n    |\n LL |             fn missing_return_type() -> usize;\n    |             ---------------------------------- `missing_return_type` previously declared here\n@@ -130,7 +142,7 @@ LL |             fn missing_return_type();\n               found `unsafe extern \"C\" fn()`\n \n warning: `non_zero_usize` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:231:13\n+  --> $DIR/clashing-extern-fn.rs:253:13\n    |\n LL |             fn non_zero_usize() -> core::num::NonZeroUsize;\n    |             ----------------------------------------------- `non_zero_usize` previously declared here\n@@ -142,7 +154,7 @@ LL |             fn non_zero_usize() -> usize;\n               found `unsafe extern \"C\" fn() -> usize`\n \n warning: `non_null_ptr` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:233:13\n+  --> $DIR/clashing-extern-fn.rs:255:13\n    |\n LL |             fn non_null_ptr() -> core::ptr::NonNull<usize>;\n    |             ----------------------------------------------- `non_null_ptr` previously declared here\n@@ -154,7 +166,7 @@ LL |             fn non_null_ptr() -> *const usize;\n               found `unsafe extern \"C\" fn() -> *const usize`\n \n warning: `option_non_zero_usize_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:259:13\n+  --> $DIR/clashing-extern-fn.rs:281:13\n    |\n LL |             fn option_non_zero_usize_incorrect() -> usize;\n    |             ---------------------------------------------- `option_non_zero_usize_incorrect` previously declared here\n@@ -166,7 +178,7 @@ LL |             fn option_non_zero_usize_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `option_non_null_ptr_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:261:13\n+  --> $DIR/clashing-extern-fn.rs:283:13\n    |\n LL |             fn option_non_null_ptr_incorrect() -> *const usize;\n    |             --------------------------------------------------- `option_non_null_ptr_incorrect` previously declared here\n@@ -177,5 +189,5 @@ LL |             fn option_non_null_ptr_incorrect() -> *const isize;\n    = note: expected `unsafe extern \"C\" fn() -> *const usize`\n               found `unsafe extern \"C\" fn() -> *const isize`\n \n-warning: 14 warnings emitted\n+warning: 15 warnings emitted\n "}]}