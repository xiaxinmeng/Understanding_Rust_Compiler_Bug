{"sha": "e6c58d827730ee247cdb68886e14cdc5da15b438", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YzU4ZDgyNzczMGVlMjQ3Y2RiNjg4ODZlMTRjZGM1ZGExNWI0Mzg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-22T00:51:08Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-22T00:51:08Z"}, "message": "Assert the absence of fat pointers more often.", "tree": {"sha": "34b6c02468fb0fa510cb8b45daeab77f4a1b355a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34b6c02468fb0fa510cb8b45daeab77f4a1b355a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6c58d827730ee247cdb68886e14cdc5da15b438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c58d827730ee247cdb68886e14cdc5da15b438", "html_url": "https://github.com/rust-lang/rust/commit/e6c58d827730ee247cdb68886e14cdc5da15b438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6c58d827730ee247cdb68886e14cdc5da15b438/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c41f53726f9b91d2806bb5d9f31c37a83aaa6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c41f53726f9b91d2806bb5d9f31c37a83aaa6c", "html_url": "https://github.com/rust-lang/rust/commit/69c41f53726f9b91d2806bb5d9f31c37a83aaa6c"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "a80c9ba6bdb93f943adbed9fee2f35c0e47018a3", "filename": "src/interpreter.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e6c58d827730ee247cdb68886e14cdc5da15b438/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c58d827730ee247cdb68886e14cdc5da15b438/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=e6c58d827730ee247cdb68886e14cdc5da15b438", "patch": "@@ -208,7 +208,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             }\n \n             SwitchInt { ref discr, ref values, ref targets, .. } => {\n-                let discr_ptr = try!(self.eval_lvalue(discr)).ptr;\n+                let discr_ptr = try!(self.eval_lvalue(discr)).to_ptr();\n                 let discr_size = self.lvalue_repr(discr).size();\n                 let discr_val = try!(self.memory.read_uint(discr_ptr, discr_size));\n \n@@ -228,7 +228,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             }\n \n             Switch { ref discr, ref targets, .. } => {\n-                let adt_ptr = try!(self.eval_lvalue(discr)).ptr;\n+                let adt_ptr = try!(self.eval_lvalue(discr)).to_ptr();\n                 let adt_repr = self.lvalue_repr(discr);\n                 let discr_size = match *adt_repr {\n                     Repr::Aggregate { discr_size, .. } => discr_size,\n@@ -242,7 +242,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 let mut return_ptr = None;\n                 if let Some((ref lv, target)) = *destination {\n                     self.frame_mut().next_block = target;\n-                    return_ptr = Some(try!(self.eval_lvalue(lv)).ptr);\n+                    return_ptr = Some(try!(self.eval_lvalue(lv)).to_ptr());\n                 }\n \n                 let func_ty = self.operand_ty(func);\n@@ -502,7 +502,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n     fn eval_assignment(&mut self, lvalue: &mir::Lvalue<'tcx>, rvalue: &mir::Rvalue<'tcx>)\n         -> EvalResult<()>\n     {\n-        let dest = try!(self.eval_lvalue(lvalue)).ptr;\n+        let dest = try!(self.eval_lvalue(lvalue)).to_ptr();\n         let dest_repr = self.lvalue_repr(lvalue);\n \n         use rustc::mir::repr::Rvalue::*;\n@@ -647,7 +647,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         use rustc::mir::repr::Operand::*;\n         match *op {\n             Consume(ref lvalue) =>\n-                Ok((try!(self.eval_lvalue(lvalue)).ptr, self.lvalue_repr(lvalue))),\n+                Ok((try!(self.eval_lvalue(lvalue)).to_ptr(), self.lvalue_repr(lvalue))),\n             Constant(mir::Constant { ref literal, ty, .. }) => {\n                 use rustc::mir::repr::Literal::*;\n                 match *literal {\n@@ -686,7 +686,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             Static(_def_id) => unimplemented!(),\n \n             Projection(ref proj) => {\n-                let base_ptr = try!(self.eval_lvalue(&proj.base)).ptr;\n+                let base_ptr = try!(self.eval_lvalue(&proj.base)).to_ptr();\n                 let base_repr = self.lvalue_repr(&proj.base);\n                 let base_ty = self.lvalue_ty(&proj.base);\n                 use rustc::mir::repr::ProjectionElem::*;\n@@ -1054,6 +1054,13 @@ fn pointee_type<'tcx>(ptr_ty: ty::Ty<'tcx>) -> Option<ty::Ty<'tcx>> {\n     }\n }\n \n+impl Lvalue {\n+    fn to_ptr(self) -> Pointer {\n+        assert_eq!(self.extra, LvalueExtra::None);\n+        self.ptr\n+    }\n+}\n+\n impl<'mir, 'tcx: 'mir> Deref for CachedMir<'mir, 'tcx> {\n     type Target = mir::Mir<'tcx>;\n     fn deref(&self) -> &mir::Mir<'tcx> {"}]}