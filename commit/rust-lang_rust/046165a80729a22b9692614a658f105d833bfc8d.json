{"sha": "046165a80729a22b9692614a658f105d833bfc8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NjE2NWE4MDcyOWEyMmI5NjkyNjE0YTY1OGYxMDVkODMzYmZjOGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-10T07:56:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-16T09:23:25Z"}, "message": "rename location field of Drop terminators to place", "tree": {"sha": "3aa7ce2a97bb8b4ece79f5f56523f2ff9c160dab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa7ce2a97bb8b4ece79f5f56523f2ff9c160dab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/046165a80729a22b9692614a658f105d833bfc8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/046165a80729a22b9692614a658f105d833bfc8d", "html_url": "https://github.com/rust-lang/rust/commit/046165a80729a22b9692614a658f105d833bfc8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/046165a80729a22b9692614a658f105d833bfc8d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "302fb5039b6434ac1be617d3f4ac2863cf9ecfb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/302fb5039b6434ac1be617d3f4ac2863cf9ecfb1", "html_url": "https://github.com/rust-lang/rust/commit/302fb5039b6434ac1be617d3f4ac2863cf9ecfb1"}], "stats": {"total": 210, "additions": 99, "deletions": 111}, "files": [{"sha": "c486d5c64baa27d3e120441825fd13c30f0256f5", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -998,8 +998,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 bx.unreachable();\n             }\n \n-            mir::TerminatorKind::Drop { location, target, unwind } => {\n-                self.codegen_drop_terminator(helper, bx, location, target, unwind);\n+            mir::TerminatorKind::Drop { place, target, unwind } => {\n+                self.codegen_drop_terminator(helper, bx, place, target, unwind);\n             }\n \n             mir::TerminatorKind::Assert { ref cond, expected, ref msg, target, cleanup } => {"}, {"sha": "f281c1351766350f0d907a656c5d9ab3eed2cda7", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -1112,7 +1112,7 @@ pub enum TerminatorKind<'tcx> {\n     Unreachable,\n \n     /// Drop the `Place`.\n-    Drop { location: Place<'tcx>, target: BasicBlock, unwind: Option<BasicBlock> },\n+    Drop { place: Place<'tcx>, target: BasicBlock, unwind: Option<BasicBlock> },\n \n     /// Drop the `Place` and assign the new value over it. This ensures\n     /// that the assignment to `P` occurs *even if* the destructor for\n@@ -1141,7 +1141,7 @@ pub enum TerminatorKind<'tcx> {\n     /// }\n     /// ```\n     DropAndReplace {\n-        location: Place<'tcx>,\n+        place: Place<'tcx>,\n         value: Operand<'tcx>,\n         target: BasicBlock,\n         unwind: Option<BasicBlock>,\n@@ -1607,9 +1607,9 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Abort => write!(fmt, \"abort\"),\n             Yield { value, resume_arg, .. } => write!(fmt, \"{:?} = yield({:?})\", resume_arg, value),\n             Unreachable => write!(fmt, \"unreachable\"),\n-            Drop { location, .. } => write!(fmt, \"drop({:?})\", location),\n-            DropAndReplace { location, value, .. } => {\n-                write!(fmt, \"replace({:?} <- {:?})\", location, value)\n+            Drop { place, .. } => write!(fmt, \"drop({:?})\", place),\n+            DropAndReplace { place, value, .. } => {\n+                write!(fmt, \"replace({:?} <- {:?})\", place, value)\n             }\n             Call { func, args, destination, .. } => {\n                 if let Some((destination, _)) = destination {"}, {"sha": "89f8f10449e2de05d26190f3b3b9a56da37ded3d", "filename": "src/librustc_middle/mir/type_foldable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -27,11 +27,11 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 values: values.clone(),\n                 targets: targets.clone(),\n             },\n-            Drop { ref location, target, unwind } => {\n-                Drop { location: location.fold_with(folder), target, unwind }\n+            Drop { ref place, target, unwind } => {\n+                Drop { place: place.fold_with(folder), target, unwind }\n             }\n-            DropAndReplace { ref location, ref value, target, unwind } => DropAndReplace {\n-                location: location.fold_with(folder),\n+            DropAndReplace { ref place, ref value, target, unwind } => DropAndReplace {\n+                place: place.fold_with(folder),\n                 value: value.fold_with(folder),\n                 target,\n                 unwind,\n@@ -97,9 +97,9 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             SwitchInt { ref discr, switch_ty, .. } => {\n                 discr.visit_with(visitor) || switch_ty.visit_with(visitor)\n             }\n-            Drop { ref location, .. } => location.visit_with(visitor),\n-            DropAndReplace { ref location, ref value, .. } => {\n-                location.visit_with(visitor) || value.visit_with(visitor)\n+            Drop { ref place, .. } => place.visit_with(visitor),\n+            DropAndReplace { ref place, ref value, .. } => {\n+                place.visit_with(visitor) || value.visit_with(visitor)\n             }\n             Yield { ref value, .. } => value.visit_with(visitor),\n             Call { ref func, ref args, ref destination, .. } => {"}, {"sha": "f2eda96f34ad1d4bd3a63d343e5b85f9b1e28abe", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -449,25 +449,25 @@ macro_rules! make_mir_visitor {\n                     }\n \n                     TerminatorKind::Drop {\n-                        location,\n+                        place,\n                         target: _,\n                         unwind: _,\n                     } => {\n                         self.visit_place(\n-                            location,\n+                            place,\n                             PlaceContext::MutatingUse(MutatingUseContext::Drop),\n                             source_location\n                         );\n                     }\n \n                     TerminatorKind::DropAndReplace {\n-                        location,\n+                        place,\n                         value,\n                         target: _,\n                         unwind: _,\n                     } => {\n                         self.visit_place(\n-                            location,\n+                            place,\n                             PlaceContext::MutatingUse(MutatingUseContext::Drop),\n                             source_location\n                         );"}, {"sha": "fd8f17718e795b48f5bacc0e569eb8e8932bf9e2", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -119,7 +119,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             TerminatorKind::SwitchInt { ref discr, switch_ty: _, values: _, targets: _ } => {\n                 self.consume_operand(location, discr);\n             }\n-            TerminatorKind::Drop { location: drop_place, target: _, unwind: _ } => {\n+            TerminatorKind::Drop { place: drop_place, target: _, unwind: _ } => {\n                 self.access_place(\n                     location,\n                     *drop_place,\n@@ -128,7 +128,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 );\n             }\n             TerminatorKind::DropAndReplace {\n-                location: drop_place,\n+                place: drop_place,\n                 value: ref new_value,\n                 target: _,\n                 unwind: _,"}, {"sha": "83691d439eb81c983dc1af5da94f01eb310ce4c2", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -663,7 +663,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n             TerminatorKind::SwitchInt { ref discr, switch_ty: _, values: _, targets: _ } => {\n                 self.consume_operand(loc, (discr, span), flow_state);\n             }\n-            TerminatorKind::Drop { location: ref drop_place, target: _, unwind: _ } => {\n+            TerminatorKind::Drop { place: ref drop_place, target: _, unwind: _ } => {\n                 let tcx = self.infcx.tcx;\n \n                 // Compute the type with accurate region information.\n@@ -692,7 +692,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n                 );\n             }\n             TerminatorKind::DropAndReplace {\n-                location: drop_place,\n+                place: drop_place,\n                 value: ref new_value,\n                 target: _,\n                 unwind: _,"}, {"sha": "0eb0651d5fdc09149e7ec84af0da190890ec4c87", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -1558,8 +1558,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // no checks needed for these\n             }\n \n-            TerminatorKind::DropAndReplace { ref location, ref value, target: _, unwind: _ } => {\n-                let place_ty = location.ty(body, tcx).ty;\n+            TerminatorKind::DropAndReplace { ref place, ref value, target: _, unwind: _ } => {\n+                let place_ty = place.ty(body, tcx).ty;\n                 let rv_ty = value.ty(body, tcx);\n \n                 let locations = term_location.to_locations();"}, {"sha": "56764a4be5d91bb47b46681b4d4017e00b165507", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -70,8 +70,8 @@ impl<'visit, 'cx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'tc\n             TerminatorKind::Call { destination: Some((into, _)), .. } => {\n                 self.remove_never_initialized_mut_locals(*into);\n             }\n-            TerminatorKind::DropAndReplace { location, .. } => {\n-                self.remove_never_initialized_mut_locals(*location);\n+            TerminatorKind::DropAndReplace { place, .. } => {\n+                self.remove_never_initialized_mut_locals(*place);\n             }\n             _ => {}\n         }"}, {"sha": "4512ae96c0833f24d7af72180987e40b10d58fe0", "filename": "src/librustc_mir/dataflow/framework/direction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -441,8 +441,8 @@ impl Direction for Forward {\n             Goto { target } => propagate(target, exit_state),\n \n             Assert { target, cleanup: unwind, expected: _, msg: _, cond: _ }\n-            | Drop { target, unwind, location: _ }\n-            | DropAndReplace { target, unwind, value: _, location: _ }\n+            | Drop { target, unwind, place: _ }\n+            | DropAndReplace { target, unwind, value: _, place: _ }\n             | FalseUnwind { real_target: target, unwind } => {\n                 if let Some(unwind) = unwind {\n                     if dead_unwinds.map_or(true, |dead| !dead.contains(bb)) {"}, {"sha": "70c916a089270dd108cbddfb72dfad01e478a591", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -189,8 +189,8 @@ where\n         self.super_terminator(terminator, location);\n \n         match terminator.kind {\n-            mir::TerminatorKind::Drop { location: dropped_place, .. }\n-            | mir::TerminatorKind::DropAndReplace { location: dropped_place, .. } => {\n+            mir::TerminatorKind::Drop { place: dropped_place, .. }\n+            | mir::TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n                 // See documentation for `unsound_ignore_borrow_on_drop` for an explanation.\n                 if !self.ignore_borrow_on_drop {\n                     self.trans.gen(dropped_place.local);"}, {"sha": "7c8aa1db71ff873f56ff15d916a1ff14e138b87b", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -387,13 +387,13 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 self.gather_init(place.as_ref(), InitKind::Deep);\n             }\n \n-            TerminatorKind::Drop { location, target: _, unwind: _ } => {\n-                self.gather_move(location);\n+            TerminatorKind::Drop { place, target: _, unwind: _ } => {\n+                self.gather_move(place);\n             }\n-            TerminatorKind::DropAndReplace { location, ref value, .. } => {\n-                self.create_move_path(location);\n+            TerminatorKind::DropAndReplace { place, ref value, .. } => {\n+                self.create_move_path(place);\n                 self.gather_operand(value);\n-                self.gather_init(location.as_ref(), InitKind::Deep);\n+                self.gather_init(place.as_ref(), InitKind::Deep);\n             }\n             TerminatorKind::Call {\n                 ref func,"}, {"sha": "1d57fce39734e9119c93f8cf8a21030a00fca6d7", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -91,10 +91,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n             }\n \n-            Drop { location, target, unwind } => {\n-                let place = self.eval_place(location)?;\n+            Drop { place, target, unwind } => {\n+                let place = self.eval_place(place)?;\n                 let ty = place.layout.ty;\n-                trace!(\"TerminatorKind::drop: {:?}, type {}\", location, ty);\n+                trace!(\"TerminatorKind::drop: {:?}, type {}\", place, ty);\n \n                 let instance = Instance::resolve_drop_in_place(*self.tcx, ty);\n                 self.drop_in_place(place, instance, target, unwind)?;"}, {"sha": "5869445424102f759a255529c2e30fcd16b56b3e", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -626,9 +626,9 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 let callee_ty = self.monomorphize(callee_ty);\n                 visit_fn_use(self.tcx, callee_ty, true, &mut self.output);\n             }\n-            mir::TerminatorKind::Drop { ref location, .. }\n-            | mir::TerminatorKind::DropAndReplace { ref location, .. } => {\n-                let ty = location.ty(self.body, self.tcx).ty;\n+            mir::TerminatorKind::Drop { ref place, .. }\n+            | mir::TerminatorKind::DropAndReplace { ref place, .. } => {\n+                let ty = place.ty(self.body, self.tcx).ty;\n                 let ty = self.monomorphize(ty);\n                 visit_drop_use(self.tcx, ty, true, self.output);\n             }"}, {"sha": "71fff851531414be7586b3e03cd2fea759685203", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -582,7 +582,7 @@ impl CloneShimBuilder<'tcx> {\n         self.block(\n             vec![],\n             TerminatorKind::Drop {\n-                location: self.tcx.mk_place_index(dest, beg),\n+                place: self.tcx.mk_place_index(dest, beg),\n                 target: BasicBlock::new(8),\n                 unwind: None,\n             },\n@@ -634,7 +634,7 @@ impl CloneShimBuilder<'tcx> {\n                 self.block(\n                     vec![],\n                     TerminatorKind::Drop {\n-                        location: previous_field,\n+                        place: previous_field,\n                         target: previous_cleanup,\n                         unwind: None,\n                     },\n@@ -799,11 +799,7 @@ fn build_call_shim<'tcx>(\n         block(\n             &mut blocks,\n             vec![],\n-            TerminatorKind::Drop {\n-                location: rcvr_place(),\n-                target: BasicBlock::new(2),\n-                unwind: None,\n-            },\n+            TerminatorKind::Drop { place: rcvr_place(), target: BasicBlock::new(2), unwind: None },\n             false,\n         );\n     }\n@@ -814,11 +810,7 @@ fn build_call_shim<'tcx>(\n         block(\n             &mut blocks,\n             vec![],\n-            TerminatorKind::Drop {\n-                location: rcvr_place(),\n-                target: BasicBlock::new(4),\n-                unwind: None,\n-            },\n+            TerminatorKind::Drop { place: rcvr_place(), target: BasicBlock::new(4), unwind: None },\n             true,\n         );\n "}, {"sha": "a02d0f655600d9db337171f54348b88e702083dd", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -64,8 +64,8 @@ fn add_moves_for_packed_drops_patch<'tcx>(\n         let terminator = data.terminator();\n \n         match terminator.kind {\n-            TerminatorKind::Drop { location, .. }\n-                if util::is_disaligned(tcx, body, param_env, location) =>\n+            TerminatorKind::Drop { place, .. }\n+                if util::is_disaligned(tcx, body, param_env, place) =>\n             {\n                 add_move_for_packed_drop(tcx, body, &mut patch, terminator, loc, data.is_cleanup);\n             }\n@@ -88,13 +88,13 @@ fn add_move_for_packed_drop<'tcx>(\n     is_cleanup: bool,\n ) {\n     debug!(\"add_move_for_packed_drop({:?} @ {:?})\", terminator, loc);\n-    let (location, target, unwind) = match terminator.kind {\n-        TerminatorKind::Drop { ref location, target, unwind } => (location, target, unwind),\n+    let (place, target, unwind) = match terminator.kind {\n+        TerminatorKind::Drop { ref place, target, unwind } => (place, target, unwind),\n         _ => unreachable!(),\n     };\n \n     let source_info = terminator.source_info;\n-    let ty = location.ty(body, tcx).ty;\n+    let ty = place.ty(body, tcx).ty;\n     let temp = patch.new_temp(ty, terminator.source_info.span);\n \n     let storage_dead_block = patch.new_block(BasicBlockData {\n@@ -104,9 +104,9 @@ fn add_move_for_packed_drop<'tcx>(\n     });\n \n     patch.add_statement(loc, StatementKind::StorageLive(temp));\n-    patch.add_assign(loc, Place::from(temp), Rvalue::Use(Operand::Move(*location)));\n+    patch.add_assign(loc, Place::from(temp), Rvalue::Use(Operand::Move(*place)));\n     patch.patch_terminator(\n         loc.block,\n-        TerminatorKind::Drop { location: Place::from(temp), target: storage_dead_block, unwind },\n+        TerminatorKind::Drop { place: Place::from(temp), target: storage_dead_block, unwind },\n     );\n }"}, {"sha": "124606fb423e61c164aee58662215ad4128a2fee", "filename": "src/librustc_mir/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -78,7 +78,7 @@ impl Visitor<'tcx> for CheckLiveDrops<'mir, 'tcx> {\n         trace!(\"visit_terminator: terminator={:?} location={:?}\", terminator, location);\n \n         match &terminator.kind {\n-            mir::TerminatorKind::Drop { location: dropped_place, .. } => {\n+            mir::TerminatorKind::Drop { place: dropped_place, .. } => {\n                 let dropped_ty = dropped_place.ty(self.body, self.tcx).ty;\n                 if !NeedsDrop::in_any_value_of_ty(self.ccx, dropped_ty) {\n                     return;"}, {"sha": "b8104292aab23cf47c8d76181b352ce8abb08c29", "filename": "src/librustc_mir/transform/check_consts/resolver.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -125,16 +125,15 @@ where\n         // The effect of assignment to the return place in `TerminatorKind::Call` is not applied\n         // here; that occurs in `apply_call_return_effect`.\n \n-        if let mir::TerminatorKind::DropAndReplace { value, location: dest, .. } = &terminator.kind\n-        {\n+        if let mir::TerminatorKind::DropAndReplace { value, place, .. } = &terminator.kind {\n             let qualif = qualifs::in_operand::<Q, _>(\n                 self.ccx,\n                 &mut |l| self.qualifs_per_local.contains(l),\n                 value,\n             );\n \n-            if !dest.is_indirect() {\n-                self.assign_qualif_direct(dest, qualif);\n+            if !place.is_indirect() {\n+                self.assign_qualif_direct(place, qualif);\n             }\n         }\n "}, {"sha": "35a8df62cb83a967620c92d4fa1482dfddfd9bcb", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -560,8 +560,8 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n \n             // Forbid all `Drop` terminators unless the place being dropped is a local with no\n             // projections that cannot be `NeedsDrop`.\n-            TerminatorKind::Drop { location: dropped_place, .. }\n-            | TerminatorKind::DropAndReplace { location: dropped_place, .. } => {\n+            TerminatorKind::Drop { place: dropped_place, .. }\n+            | TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n                 // If we are checking live drops after drop-elaboration, don't emit duplicate\n                 // errors here.\n                 if super::post_drop_elaboration::checking_enabled(self.tcx) {"}, {"sha": "1704d8baabdc8c24a617498e5e7c938be844fbca", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -85,15 +85,15 @@ fn find_dead_unwinds<'tcx>(\n         .iterate_to_fixpoint()\n         .into_results_cursor(body);\n     for (bb, bb_data) in body.basic_blocks().iter_enumerated() {\n-        let location = match bb_data.terminator().kind {\n-            TerminatorKind::Drop { ref location, unwind: Some(_), .. }\n-            | TerminatorKind::DropAndReplace { ref location, unwind: Some(_), .. } => location,\n+        let place = match bb_data.terminator().kind {\n+            TerminatorKind::Drop { ref place, unwind: Some(_), .. }\n+            | TerminatorKind::DropAndReplace { ref place, unwind: Some(_), .. } => place,\n             _ => continue,\n         };\n \n         debug!(\"find_dead_unwinds @ {:?}: {:?}\", bb, bb_data);\n \n-        let path = match env.move_data.rev_lookup.find(location.as_ref()) {\n+        let path = match env.move_data.rev_lookup.find(place.as_ref()) {\n             LookupResult::Exact(e) => e,\n             LookupResult::Parent(..) => {\n                 debug!(\"find_dead_unwinds: has parent; skipping\");\n@@ -105,7 +105,7 @@ fn find_dead_unwinds<'tcx>(\n         debug!(\n             \"find_dead_unwinds @ {:?}: path({:?})={:?}; init_data={:?}\",\n             bb,\n-            location,\n+            place,\n             path,\n             flow_inits.get()\n         );\n@@ -294,16 +294,16 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     fn collect_drop_flags(&mut self) {\n         for (bb, data) in self.body.basic_blocks().iter_enumerated() {\n             let terminator = data.terminator();\n-            let location = match terminator.kind {\n-                TerminatorKind::Drop { ref location, .. }\n-                | TerminatorKind::DropAndReplace { ref location, .. } => location,\n+            let place = match terminator.kind {\n+                TerminatorKind::Drop { ref place, .. }\n+                | TerminatorKind::DropAndReplace { ref place, .. } => place,\n                 _ => continue,\n             };\n \n             self.init_data.seek_before(self.body.terminator_loc(bb));\n \n-            let path = self.move_data().rev_lookup.find(location.as_ref());\n-            debug!(\"collect_drop_flags: {:?}, place {:?} ({:?})\", bb, location, path);\n+            let path = self.move_data().rev_lookup.find(place.as_ref());\n+            debug!(\"collect_drop_flags: {:?}, place {:?} ({:?})\", bb, place, path);\n \n             let path = match path {\n                 LookupResult::Exact(e) => e,\n@@ -315,7 +315,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                             terminator.source_info.span,\n                             \"drop of untracked, uninitialized value {:?}, place {:?} ({:?})\",\n                             bb,\n-                            location,\n+                            place,\n                             path\n                         );\n                     }\n@@ -328,7 +328,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 debug!(\n                     \"collect_drop_flags: collecting {:?} from {:?}@{:?} - {:?}\",\n                     child,\n-                    location,\n+                    place,\n                     path,\n                     (maybe_live, maybe_dead)\n                 );\n@@ -346,13 +346,13 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n             let resume_block = self.patch.resume_block();\n             match terminator.kind {\n-                TerminatorKind::Drop { location, target, unwind } => {\n+                TerminatorKind::Drop { place, target, unwind } => {\n                     self.init_data.seek_before(loc);\n-                    match self.move_data().rev_lookup.find(location.as_ref()) {\n+                    match self.move_data().rev_lookup.find(place.as_ref()) {\n                         LookupResult::Exact(path) => elaborate_drop(\n                             &mut Elaborator { ctxt: self },\n                             terminator.source_info,\n-                            location,\n+                            place,\n                             path,\n                             target,\n                             if data.is_cleanup {\n@@ -371,10 +371,10 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                         }\n                     }\n                 }\n-                TerminatorKind::DropAndReplace { location, ref value, target, unwind } => {\n+                TerminatorKind::DropAndReplace { place, ref value, target, unwind } => {\n                     assert!(!data.is_cleanup);\n \n-                    self.elaborate_replace(loc, location, value, target, unwind);\n+                    self.elaborate_replace(loc, place, value, target, unwind);\n                 }\n                 _ => continue,\n             }\n@@ -396,7 +396,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     fn elaborate_replace(\n         &mut self,\n         loc: Location,\n-        location: Place<'tcx>,\n+        place: Place<'tcx>,\n         value: &Operand<'tcx>,\n         target: BasicBlock,\n         unwind: Option<BasicBlock>,\n@@ -407,7 +407,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         assert!(!data.is_cleanup, \"DropAndReplace in unwind path not supported\");\n \n         let assign = Statement {\n-            kind: StatementKind::Assign(box (location, Rvalue::Use(value.clone()))),\n+            kind: StatementKind::Assign(box (place, Rvalue::Use(value.clone()))),\n             source_info: terminator.source_info,\n         };\n \n@@ -427,14 +427,14 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             is_cleanup: false,\n         });\n \n-        match self.move_data().rev_lookup.find(location.as_ref()) {\n+        match self.move_data().rev_lookup.find(place.as_ref()) {\n             LookupResult::Exact(path) => {\n                 debug!(\"elaborate_drop_and_replace({:?}) - tracked {:?}\", terminator, path);\n                 self.init_data.seek_before(loc);\n                 elaborate_drop(\n                     &mut Elaborator { ctxt: self },\n                     terminator.source_info,\n-                    location,\n+                    place,\n                     path,\n                     target,\n                     Unwind::To(unwind),\n@@ -459,7 +459,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 debug!(\"elaborate_drop_and_replace({:?}) - untracked {:?}\", terminator, parent);\n                 self.patch.patch_terminator(\n                     bb,\n-                    TerminatorKind::Drop { location, target, unwind: Some(unwind) },\n+                    TerminatorKind::Drop { place, target, unwind: Some(unwind) },\n                 );\n             }\n         }"}, {"sha": "b2431e98e2d01fa8dfc0783b5af848c09156c30b", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -835,8 +835,8 @@ fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, body: &mut\n \n     for (block, block_data) in body.basic_blocks().iter_enumerated() {\n         let (target, unwind, source_info) = match block_data.terminator() {\n-            Terminator { source_info, kind: TerminatorKind::Drop { location, target, unwind } } => {\n-                if let Some(local) = location.as_local() {\n+            Terminator { source_info, kind: TerminatorKind::Drop { place, target, unwind } } => {\n+                if let Some(local) = place.as_local() {\n                     if local == SELF_ARG {\n                         (target, unwind, source_info)\n                     } else {\n@@ -1102,11 +1102,8 @@ fn create_generator_resume_function<'tcx>(\n fn insert_clean_drop(body: &mut Body<'_>) -> BasicBlock {\n     let return_block = insert_term_block(body, TerminatorKind::Return);\n \n-    let term = TerminatorKind::Drop {\n-        location: Place::from(SELF_ARG),\n-        target: return_block,\n-        unwind: None,\n-    };\n+    let term =\n+        TerminatorKind::Drop { place: Place::from(SELF_ARG), target: return_block, unwind: None };\n     let source_info = SourceInfo::outermost(body.span);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars."}, {"sha": "db909494aed6b53f6c103158cb20c1ef24f37c0a", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -319,13 +319,13 @@ impl Inliner<'tcx> {\n             let term = blk.terminator();\n             let mut is_drop = false;\n             match term.kind {\n-                TerminatorKind::Drop { ref location, target, unwind }\n-                | TerminatorKind::DropAndReplace { ref location, target, unwind, .. } => {\n+                TerminatorKind::Drop { ref place, target, unwind }\n+                | TerminatorKind::DropAndReplace { ref place, target, unwind, .. } => {\n                     is_drop = true;\n                     work_list.push(target);\n-                    // If the location doesn't actually need dropping, treat it like\n+                    // If the place doesn't actually need dropping, treat it like\n                     // a regular goto.\n-                    let ty = location.ty(callee_body, tcx).subst(tcx, callsite.substs).ty;\n+                    let ty = place.ty(callee_body, tcx).subst(tcx, callsite.substs).ty;\n                     if ty.needs_drop(tcx, param_env) {\n                         cost += CALL_PENALTY;\n                         if let Some(unwind) = unwind {"}, {"sha": "330f6c1640ff493ecd0b9ce443982a6ae22943f7", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -1186,7 +1186,7 @@ pub fn promote_candidates<'tcx>(\n             _ => true,\n         });\n         let terminator = block.terminator_mut();\n-        if let TerminatorKind::Drop { location: place, target, .. } = &terminator.kind {\n+        if let TerminatorKind::Drop { place, target, .. } = &terminator.kind {\n             if let Some(index) = place.as_local() {\n                 if promoted(index) {\n                     terminator.kind = TerminatorKind::Goto { target: *target };"}, {"sha": "caf6c7715a9e1caa3cc717c266e1a1a670cc5b87", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -349,9 +349,9 @@ fn check_terminator(\n         | TerminatorKind::Resume\n         | TerminatorKind::Unreachable => Ok(()),\n \n-        TerminatorKind::Drop { location, .. } => check_place(tcx, *location, span, def_id, body),\n-        TerminatorKind::DropAndReplace { location, value, .. } => {\n-            check_place(tcx, *location, span, def_id, body)?;\n+        TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span, def_id, body),\n+        TerminatorKind::DropAndReplace { place, value, .. } => {\n+            check_place(tcx, *place, span, def_id, body)?;\n             check_operand(tcx, value, span, def_id, body)\n         }\n "}, {"sha": "5f55a812a4e0dc2cdfbc63c0022b17ff1627dd17", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -238,7 +238,7 @@ where\n                 self.elaborator.patch().patch_terminator(\n                     bb,\n                     TerminatorKind::Drop {\n-                        location: self.place,\n+                        place: self.place,\n                         target: self.succ,\n                         unwind: self.unwind.into_option(),\n                     },\n@@ -723,7 +723,7 @@ where\n         self.elaborator.patch().patch_terminator(\n             drop_block,\n             TerminatorKind::Drop {\n-                location: tcx.mk_place_deref(ptr),\n+                place: tcx.mk_place_deref(ptr),\n                 target: loop_block,\n                 unwind: unwind.into_option(),\n             },\n@@ -1000,7 +1000,7 @@ where\n \n     fn drop_block(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n         let block =\n-            TerminatorKind::Drop { location: self.place, target, unwind: unwind.into_option() };\n+            TerminatorKind::Drop { place: self.place, target, unwind: unwind.into_option() };\n         self.new_block(unwind, block)\n     }\n "}, {"sha": "b8df27094471ffcc87b4aa02cc39c026d8e5e400", "filename": "src/librustc_mir_build/build/scope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046165a80729a22b9692614a658f105d833bfc8d/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs?ref=046165a80729a22b9692614a658f105d833bfc8d", "patch": "@@ -1037,7 +1037,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         block: BasicBlock,\n         span: Span,\n-        location: Place<'tcx>,\n+        place: Place<'tcx>,\n         value: Operand<'tcx>,\n     ) -> BlockAnd<()> {\n         let source_info = self.source_info(span);\n@@ -1047,7 +1047,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             block,\n             source_info,\n             TerminatorKind::DropAndReplace {\n-                location,\n+                place,\n                 value,\n                 target: next_target,\n                 unwind: Some(diverge_target),\n@@ -1158,7 +1158,7 @@ fn build_scope_drops<'tcx>(\n                     block,\n                     source_info,\n                     TerminatorKind::Drop {\n-                        location: local.into(),\n+                        place: local.into(),\n                         target: next,\n                         unwind: Some(unwind_to),\n                     },\n@@ -1272,7 +1272,7 @@ fn build_diverge_scope<'tcx>(\n                         block,\n                         source_info(drop_data.span),\n                         TerminatorKind::Drop {\n-                            location: drop_data.local.into(),\n+                            place: drop_data.local.into(),\n                             target,\n                             unwind: None,\n                         },"}]}