{"sha": "c60622924195a28a378ef8ea1308e78cba19abc5", "node_id": "C_kwDOAAsO6NoAKGM2MDYyMjkyNDE5NWEyOGEzNzhlZjhlYTEzMDhlNzhjYmExOWFiYzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-23T00:29:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-23T00:29:18Z"}, "message": "Auto merge of #12060 - Veykril:completion-ctx, r=Veykril\n\nminor: Simplify\n\nbors r+", "tree": {"sha": "d0f726dff165ea88b81b1eef2297db6478b7b5af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0f726dff165ea88b81b1eef2297db6478b7b5af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c60622924195a28a378ef8ea1308e78cba19abc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c60622924195a28a378ef8ea1308e78cba19abc5", "html_url": "https://github.com/rust-lang/rust/commit/c60622924195a28a378ef8ea1308e78cba19abc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c60622924195a28a378ef8ea1308e78cba19abc5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1894473b1973b366ee8d0cfa2c2a4459b1709b9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1894473b1973b366ee8d0cfa2c2a4459b1709b9c", "html_url": "https://github.com/rust-lang/rust/commit/1894473b1973b366ee8d0cfa2c2a4459b1709b9c"}, {"sha": "ea45e54458bb8c8680e398a3097ce07c3c59b884", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea45e54458bb8c8680e398a3097ce07c3c59b884", "html_url": "https://github.com/rust-lang/rust/commit/ea45e54458bb8c8680e398a3097ce07c3c59b884"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "66f872391202173dd3fb82ba30ec47cee2303178", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c60622924195a28a378ef8ea1308e78cba19abc5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60622924195a28a378ef8ea1308e78cba19abc5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=c60622924195a28a378ef8ea1308e78cba19abc5", "patch": "@@ -22,8 +22,8 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n         Some(LifetimeContext::LifetimeParam { is_decl: false, param }) => Some(param),\n         _ => return,\n     };\n-    let param_lifetime = match (&ctx.name_syntax, lp.and_then(|lp| lp.lifetime())) {\n-        (Some(ast::NameLike::Lifetime(lt)), Some(lp)) if lp == lt.clone() => return,\n+    let param_lifetime = match (ctx.lifetime(), lp.and_then(|lp| lp.lifetime())) {\n+        (Some(lt), Some(lp)) if lp == lt.clone() => return,\n         (Some(_), Some(lp)) => Some(lp),\n         _ => None,\n     };"}, {"sha": "07f14c8735e5f002ea624c04178c631cd02d73df", "filename": "crates/ide_completion/src/completions/use_.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c60622924195a28a378ef8ea1308e78cba19abc5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60622924195a28a378ef8ea1308e78cba19abc5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=c60622924195a28a378ef8ea1308e78cba19abc5", "patch": "@@ -11,12 +11,9 @@ use crate::{\n };\n \n pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (is_absolute_path, qualifier) = match ctx.path_context {\n+    let (&is_absolute_path, qualifier) = match &ctx.path_context {\n         Some(PathCompletionCtx {\n-            kind: Some(PathKind::Use),\n-            is_absolute_path,\n-            ref qualifier,\n-            ..\n+            kind: Some(PathKind::Use), is_absolute_path, qualifier, ..\n         }) => (is_absolute_path, qualifier),\n         _ => return,\n     };\n@@ -45,13 +42,9 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n             if let Some(list) = ctx.token.ancestors().find_map(ast::UseTreeList::cast) {\n                 let use_tree = list.parent_use_tree();\n                 if use_tree.path().as_ref() == Some(path) {\n-                    for tree in list.use_trees() {\n-                        if tree.is_simple_path() {\n-                            if let Some(name) =\n-                                tree.path().and_then(|path| path.as_single_name_ref())\n-                            {\n-                                already_imported_names.insert(name.to_string());\n-                            }\n+                    for tree in list.use_trees().filter(|tree| tree.is_simple_path()) {\n+                        if let Some(name) = tree.path().and_then(|path| path.as_single_name_ref()) {\n+                            already_imported_names.insert(name.to_string());\n                         }\n                     }\n                 }\n@@ -62,14 +55,14 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n                     let module_scope = module.scope(ctx.db, Some(ctx.module));\n                     let unknown_is_current = |name: &hir::Name| {\n                         matches!(\n-                            ctx.name_syntax.as_ref(),\n-                            Some(ast::NameLike::NameRef(name_ref))\n-                                if name_ref.syntax().text() == name.to_smol_str().as_str()\n+                            ctx.name_ref(),\n+                            Some(name_ref) if name_ref.syntax().text() == name.to_smol_str().as_str()\n                         )\n                     };\n                     for (name, def) in module_scope {\n-                        let is_name_already_imported =\n-                            already_imported_names.contains(name.as_text().unwrap().as_str());\n+                        let is_name_already_imported = name\n+                            .as_text()\n+                            .map_or(false, |text| already_imported_names.contains(text.as_str()));\n \n                         let add_resolution = match def {\n                             ScopeDef::Unknown if unknown_is_current(&name) => {"}, {"sha": "7315a488b8d8e17f6be50eb5612b855808fc317a", "filename": "crates/ide_completion/src/completions/vis.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c60622924195a28a378ef8ea1308e78cba19abc5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60622924195a28a378ef8ea1308e78cba19abc5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=c60622924195a28a378ef8ea1308e78cba19abc5", "patch": "@@ -8,11 +8,11 @@ use crate::{\n };\n \n pub(crate) fn complete_vis(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (is_absolute_path, qualifier, has_in_token) = match ctx.path_context {\n+    let (&is_absolute_path, qualifier, &has_in_token) = match &ctx.path_context {\n         Some(PathCompletionCtx {\n             kind: Some(PathKind::Vis { has_in_token }),\n             is_absolute_path,\n-            ref qualifier,\n+            qualifier,\n             ..\n         }) => (is_absolute_path, qualifier, has_in_token),\n         _ => return,"}, {"sha": "a98e10a226e2d516061ef4e0827ca5e2226e3d51", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c60622924195a28a378ef8ea1308e78cba19abc5/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60622924195a28a378ef8ea1308e78cba19abc5/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=c60622924195a28a378ef8ea1308e78cba19abc5", "patch": "@@ -50,6 +50,7 @@ pub(super) enum PathKind {\n     Type,\n     Attr { kind: AttrKind, annotated_item_kind: Option<SyntaxKind> },\n     Derive,\n+    // This should be removed in favor of `has_macro_bang` in PathCompletionContext\n     Mac,\n     Pat,\n     Vis { has_in_token: bool },\n@@ -196,6 +197,14 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n+    pub(crate) fn name_ref(&self) -> Option<&ast::NameRef> {\n+        self.name_syntax.as_ref().and_then(ast::NameLike::as_name_ref)\n+    }\n+\n+    pub(crate) fn lifetime(&self) -> Option<&ast::Lifetime> {\n+        self.name_syntax.as_ref().and_then(ast::NameLike::as_lifetime)\n+    }\n+\n     pub(crate) fn previous_token_is(&self, kind: SyntaxKind) -> bool {\n         self.previous_token.as_ref().map_or(false, |tok| tok.kind() == kind)\n     }"}, {"sha": "f2153ca92119de982709349ec984c2b6d08c12b6", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c60622924195a28a378ef8ea1308e78cba19abc5/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60622924195a28a378ef8ea1308e78cba19abc5/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=c60622924195a28a378ef8ea1308e78cba19abc5", "patch": "@@ -426,6 +426,12 @@ impl NameLike {\n             _ => None,\n         }\n     }\n+    pub fn as_lifetime(&self) -> Option<&ast::Lifetime> {\n+        match self {\n+            NameLike::Lifetime(lifetime) => Some(lifetime),\n+            _ => None,\n+        }\n+    }\n }\n \n impl ast::AstNode for NameLike {"}]}