{"sha": "acd33e1d149d0c27c0951f5266cc621193761e05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZDMzZTFkMTQ5ZDBjMjdjMDk1MWY1MjY2Y2M2MjExOTM3NjFlMDU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-06T23:18:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-06T23:18:05Z"}, "message": "Rollup merge of #76318 - scottmcm:one-control-flow, r=ecstatic-morse\n\nUse ops::ControlFlow in rustc_data_structures::graph::iterate\n\nSince I only know about this because you mentioned it,\nr? @ecstatic-morse\n\nIf we're not supposed to use new `core` things in compiler for a while then feel free to close, but it felt reasonable to merge the two types since they're the same, and it might be convenient for people to use `?` in their traversal code.\n\n(This doesn't do the type parameter swap; NoraCodes has signed up to do that one.)", "tree": {"sha": "a04beb858685419c4c942da89f9ddcfe0dd93751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a04beb858685419c4c942da89f9ddcfe0dd93751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acd33e1d149d0c27c0951f5266cc621193761e05", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfVW4tCRBK7hj4Ov3rIwAAdHIIAKJB4/aUzDGfvvvYZrEhq60Z\nhIE/MR2lpK4yBy/WhDd2d7+ZMicAXSUAtaHYE/SG3kR9oXUnrWQa7B396UHb46Eq\n2tqxe9ZaiXnyrERxKfnAtntsxY8FfawmUH2C+QZdIu4uBz8x9QZjZExZY5LBi45j\nZxgJiVJkuEbq8KV+6RXn+rbrNyXJtH3Q5IZyRMhqTz2zUMF/nbeecU81us8qaVhJ\nObrr/h532bwDSPeqA3WbiddrqJbuWEy/CA/wILWnprc0FI+tNqIBfLWCFRQqQ3wc\ntBRcQx9LKt9+X9QVGAQmdeqU//BWNsz0/Z37IudxLYt9aPX/m3Y/WNL5aKI/frc=\n=rev3\n-----END PGP SIGNATURE-----\n", "payload": "tree a04beb858685419c4c942da89f9ddcfe0dd93751\nparent e735247289a07c39a6269e6f53e8a85dc8d59271\nparent 59e37332b0d2d0c5e43bea1184ec0387fb07cc80\nauthor Dylan DPC <dylan.dpc@gmail.com> 1599434285 +0200\ncommitter GitHub <noreply@github.com> 1599434285 +0200\n\nRollup merge of #76318 - scottmcm:one-control-flow, r=ecstatic-morse\n\nUse ops::ControlFlow in rustc_data_structures::graph::iterate\n\nSince I only know about this because you mentioned it,\nr? @ecstatic-morse\n\nIf we're not supposed to use new `core` things in compiler for a while then feel free to close, but it felt reasonable to merge the two types since they're the same, and it might be convenient for people to use `?` in their traversal code.\n\n(This doesn't do the type parameter swap; NoraCodes has signed up to do that one.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acd33e1d149d0c27c0951f5266cc621193761e05", "html_url": "https://github.com/rust-lang/rust/commit/acd33e1d149d0c27c0951f5266cc621193761e05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acd33e1d149d0c27c0951f5266cc621193761e05/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e735247289a07c39a6269e6f53e8a85dc8d59271", "url": "https://api.github.com/repos/rust-lang/rust/commits/e735247289a07c39a6269e6f53e8a85dc8d59271", "html_url": "https://github.com/rust-lang/rust/commit/e735247289a07c39a6269e6f53e8a85dc8d59271"}, {"sha": "59e37332b0d2d0c5e43bea1184ec0387fb07cc80", "url": "https://api.github.com/repos/rust-lang/rust/commits/59e37332b0d2d0c5e43bea1184ec0387fb07cc80", "html_url": "https://github.com/rust-lang/rust/commit/59e37332b0d2d0c5e43bea1184ec0387fb07cc80"}], "stats": {"total": 84, "additions": 63, "deletions": 21}, "files": [{"sha": "bc3d1ce53bac5d2ebaf840513f36cf142e836c41", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/acd33e1d149d0c27c0951f5266cc621193761e05/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd33e1d149d0c27c0951f5266cc621193761e05/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=acd33e1d149d0c27c0951f5266cc621193761e05", "patch": "@@ -87,11 +87,8 @@ where\n }\n \n /// Allows searches to terminate early with a value.\n-#[derive(Clone, Copy, Debug)]\n-pub enum ControlFlow<T> {\n-    Break(T),\n-    Continue,\n-}\n+// FIXME (#75744): remove the alias once the generics are in a better order and `C=()`.\n+pub type ControlFlow<T> = std::ops::ControlFlow<(), T>;\n \n /// The status of a node in the depth-first search.\n ///\n@@ -260,12 +257,12 @@ where\n         _node: G::Node,\n         _prior_status: Option<NodeStatus>,\n     ) -> ControlFlow<Self::BreakVal> {\n-        ControlFlow::Continue\n+        ControlFlow::CONTINUE\n     }\n \n     /// Called after all nodes reachable from this one have been examined.\n     fn node_settled(&mut self, _node: G::Node) -> ControlFlow<Self::BreakVal> {\n-        ControlFlow::Continue\n+        ControlFlow::CONTINUE\n     }\n \n     /// Behave as if no edges exist from `source` to `target`.\n@@ -289,8 +286,8 @@ where\n         prior_status: Option<NodeStatus>,\n     ) -> ControlFlow<Self::BreakVal> {\n         match prior_status {\n-            Some(NodeStatus::Visited) => ControlFlow::Break(()),\n-            _ => ControlFlow::Continue,\n+            Some(NodeStatus::Visited) => ControlFlow::BREAK,\n+            _ => ControlFlow::CONTINUE,\n         }\n     }\n }"}, {"sha": "88c160e93b66a618eed378141e8314f18aaa7ee7", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acd33e1d149d0c27c0951f5266cc621193761e05/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd33e1d149d0c27c0951f5266cc621193761e05/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=acd33e1d149d0c27c0951f5266cc621193761e05", "patch": "@@ -8,6 +8,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![allow(incomplete_features)]\n+#![feature(control_flow_enum)]\n #![feature(in_band_lifetimes)]\n #![feature(unboxed_closures)]\n #![feature(generators)]"}, {"sha": "e55180ff4be526bef3c2950a5c87b5477bdb09d2", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acd33e1d149d0c27c0951f5266cc621193761e05/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd33e1d149d0c27c0951f5266cc621193761e05/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=acd33e1d149d0c27c0951f5266cc621193761e05", "patch": "@@ -6,6 +6,7 @@\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n+#![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]\n #![feature(or_patterns)]"}, {"sha": "a8d7c612a8419c4ba515895ef6604b7bfa064922", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acd33e1d149d0c27c0951f5266cc621193761e05/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd33e1d149d0c27c0951f5266cc621193761e05/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=acd33e1d149d0c27c0951f5266cc621193761e05", "patch": "@@ -117,7 +117,7 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n             // A diverging InlineAsm is treated as non-recursing\n             TerminatorKind::InlineAsm { destination, .. } => {\n                 if destination.is_some() {\n-                    ControlFlow::Continue\n+                    ControlFlow::CONTINUE\n                 } else {\n                     ControlFlow::Break(NonRecursive)\n                 }\n@@ -131,7 +131,7 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Goto { .. }\n-            | TerminatorKind::SwitchInt { .. } => ControlFlow::Continue,\n+            | TerminatorKind::SwitchInt { .. } => ControlFlow::CONTINUE,\n         }\n     }\n \n@@ -144,7 +144,7 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n             }\n         }\n \n-        ControlFlow::Continue\n+        ControlFlow::CONTINUE\n     }\n \n     fn ignore_edge(&mut self, bb: BasicBlock, target: BasicBlock) -> bool {"}, {"sha": "b411222856edbf2fa795fd0e2cd3300163095b82", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acd33e1d149d0c27c0951f5266cc621193761e05/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd33e1d149d0c27c0951f5266cc621193761e05/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=acd33e1d149d0c27c0951f5266cc621193761e05", "patch": "@@ -1273,7 +1273,7 @@ where\n         ) -> impl FnMut((), T) -> ControlFlow<(), B> + '_ {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n-                None => ControlFlow::Continue(()),\n+                None => ControlFlow::CONTINUE,\n             }\n         }\n "}, {"sha": "a025bc8b56049c5ef0f8a02585e46d176ad0ab08", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acd33e1d149d0c27c0951f5266cc621193761e05/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd33e1d149d0c27c0951f5266cc621193761e05/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=acd33e1d149d0c27c0951f5266cc621193761e05", "patch": "@@ -310,7 +310,7 @@ pub trait DoubleEndedIterator: Iterator {\n             mut predicate: impl FnMut(&T) -> bool,\n         ) -> impl FnMut((), T) -> ControlFlow<(), T> {\n             move |(), x| {\n-                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n+                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n             }\n         }\n "}, {"sha": "bc493cbc7a88bc83a8ce5651af850c1acd95dea9", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/acd33e1d149d0c27c0951f5266cc621193761e05/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd33e1d149d0c27c0951f5266cc621193761e05/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=acd33e1d149d0c27c0951f5266cc621193761e05", "patch": "@@ -2076,10 +2076,10 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<(), ()> {\n             move |(), x| {\n-                if f(x) { ControlFlow::Continue(()) } else { ControlFlow::Break(()) }\n+                if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }\n             }\n         }\n-        self.try_fold((), check(f)) == ControlFlow::Continue(())\n+        self.try_fold((), check(f)) == ControlFlow::CONTINUE\n     }\n \n     /// Tests if any element of the iterator matches a predicate.\n@@ -2129,11 +2129,11 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<(), ()> {\n             move |(), x| {\n-                if f(x) { ControlFlow::Break(()) } else { ControlFlow::Continue(()) }\n+                if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n             }\n         }\n \n-        self.try_fold((), check(f)) == ControlFlow::Break(())\n+        self.try_fold((), check(f)) == ControlFlow::BREAK\n     }\n \n     /// Searches for an element of an iterator that satisfies a predicate.\n@@ -2191,7 +2191,7 @@ pub trait Iterator {\n             mut predicate: impl FnMut(&T) -> bool,\n         ) -> impl FnMut((), T) -> ControlFlow<(), T> {\n             move |(), x| {\n-                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n+                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n             }\n         }\n \n@@ -2226,7 +2226,7 @@ pub trait Iterator {\n         ) -> impl FnMut((), T) -> ControlFlow<(), B> {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n-                None => ControlFlow::Continue(()),\n+                None => ControlFlow::CONTINUE,\n             }\n         }\n \n@@ -2268,7 +2268,7 @@ pub trait Iterator {\n             R: Try<Ok = bool>,\n         {\n             move |(), x| match f(&x).into_result() {\n-                Ok(false) => ControlFlow::Continue(()),\n+                Ok(false) => ControlFlow::CONTINUE,\n                 Ok(true) => ControlFlow::Break(Ok(x)),\n                 Err(x) => ControlFlow::Break(Err(x)),\n             }"}, {"sha": "b0c7dc1a518758b70df7ac8a3f6263e194c8887c", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/acd33e1d149d0c27c0951f5266cc621193761e05/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd33e1d149d0c27c0951f5266cc621193761e05/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=acd33e1d149d0c27c0951f5266cc621193761e05", "patch": "@@ -65,3 +65,46 @@ impl<R: Try> ControlFlow<R::Ok, R> {\n         }\n     }\n }\n+\n+impl<B> ControlFlow<(), B> {\n+    /// It's frequently the case that there's no value needed with `Continue`,\n+    /// so this provides a way to avoid typing `(())`, if you prefer it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(control_flow_enum)]\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// let mut partial_sum = 0;\n+    /// let last_used = (1..10).chain(20..25).try_for_each(|x| {\n+    ///     partial_sum += x;\n+    ///     if partial_sum > 100 { ControlFlow::Break(x) }\n+    ///     else { ControlFlow::CONTINUE }\n+    /// });\n+    /// assert_eq!(last_used.break_value(), Some(22));\n+    /// ```\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    pub const CONTINUE: Self = ControlFlow::Continue(());\n+}\n+\n+impl<C> ControlFlow<C, ()> {\n+    /// APIs like `try_for_each` don't need values with `Break`,\n+    /// so this provides a way to avoid typing `(())`, if you prefer it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(control_flow_enum)]\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// let mut partial_sum = 0;\n+    /// (1..10).chain(20..25).try_for_each(|x| {\n+    ///     if partial_sum > 100 { ControlFlow::BREAK }\n+    ///     else { partial_sum += x; ControlFlow::CONTINUE }\n+    /// });\n+    /// assert_eq!(partial_sum, 108);\n+    /// ```\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    pub const BREAK: Self = ControlFlow::Break(());\n+}"}]}