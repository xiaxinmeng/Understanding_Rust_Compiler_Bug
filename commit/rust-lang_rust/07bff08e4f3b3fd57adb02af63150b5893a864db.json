{"sha": "07bff08e4f3b3fd57adb02af63150b5893a864db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YmZmMDhlNGYzYjNmZDU3YWRiMDJhZjYzMTUwYjU4OTNhODY0ZGI=", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2016-10-29T22:44:43Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2016-10-29T22:44:43Z"}, "message": "Copyediting on documentation for write! and writeln!\n\nFix various sentence fragments, missing articles, and other grammatical\nissues in the documentation for write! and writeln!.\n\nAlso fix the links (and link names) for common return types.", "tree": {"sha": "3112397e83d14ab90a567d2ccb590e1f1284721e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3112397e83d14ab90a567d2ccb590e1f1284721e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07bff08e4f3b3fd57adb02af63150b5893a864db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07bff08e4f3b3fd57adb02af63150b5893a864db", "html_url": "https://github.com/rust-lang/rust/commit/07bff08e4f3b3fd57adb02af63150b5893a864db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07bff08e4f3b3fd57adb02af63150b5893a864db/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69d364bc4fa44b9224e10d0a182e14800e3ed1e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/69d364bc4fa44b9224e10d0a182e14800e3ed1e9", "html_url": "https://github.com/rust-lang/rust/commit/69d364bc4fa44b9224e10d0a182e14800e3ed1e9"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "b73166ebef3d4a76eb6369e195b8cdf2e35c34f9", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/07bff08e4f3b3fd57adb02af63150b5893a864db/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bff08e4f3b3fd57adb02af63150b5893a864db/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=07bff08e4f3b3fd57adb02af63150b5893a864db", "patch": "@@ -316,26 +316,27 @@ macro_rules! try {\n \n /// Write formatted data into a buffer\n ///\n-/// This macro accepts any value with `write_fmt` method as a writer, a format string, and a list\n-/// of arguments to format.\n+/// This macro accepts a 'writer' (any value with a `write_fmt` method), a format string, and a\n+/// list of arguments to format.\n ///\n-/// `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write] or\n-/// [`std::io::Write`][io_write] traits. These are sometimes called 'writers'.\n+/// The `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write]\n+/// or [`std::io::Write`][io_write] traits. The term 'writer' refers to an implementation of one of\n+/// these two traits.\n ///\n /// Passed arguments will be formatted according to the specified format string and the resulting\n /// string will be passed to the writer.\n ///\n /// See [`std::fmt`][fmt] for more information on format syntax.\n ///\n-/// Return value is completely dependent on the 'write_fmt' method.\n+/// `write!` returns whatever the 'write_fmt' method returns.\n ///\n-/// Common return values are: [`Result`][enum_result], [`io::Result`][type_result]\n+/// Common return values include: [`fmt::Result`][fmt_result], [`io::Result`][io_result]\n ///\n /// [fmt]: ../std/fmt/index.html\n /// [fmt_write]: ../std/fmt/trait.Write.html\n /// [io_write]: ../std/io/trait.Write.html\n-/// [enum_result]: ../std/result/enum.Result.html\n-/// [type_result]: ../std/io/type.Result.html\n+/// [fmt_result]: ../std/fmt/type.Result.html\n+/// [io_result]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///\n@@ -354,31 +355,32 @@ macro_rules! write {\n     ($dst:expr, $($arg:tt)*) => ($dst.write_fmt(format_args!($($arg)*)))\n }\n \n-/// Write formatted data into a buffer, with appending a newline.\n+/// Write formatted data into a buffer, with a newline appended.\n ///\n /// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n /// (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n ///\n-/// This macro accepts any value with `write_fmt` method as a writer, a format string, and a list\n-/// of arguments to format.\n+/// This macro accepts a 'writer' (any value with a `write_fmt` method), a format string, and a\n+/// list of arguments to format.\n ///\n-/// `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write] or\n-/// [`std::io::Write`][io_write] traits. These are sometimes called 'writers'.\n+/// The `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write]\n+/// or [`std::io::Write`][io_write] traits. The term 'writer' refers to an implementation of one of\n+/// these two traits.\n ///\n /// Passed arguments will be formatted according to the specified format string and the resulting\n-/// string will be passed to the writer.\n+/// string will be passed to the writer, along with the appended newline.\n ///\n /// See [`std::fmt`][fmt] for more information on format syntax.\n ///\n-/// Return value is completely dependent on the 'write_fmt' method.\n+/// `write!` returns whatever the 'write_fmt' method returns.\n ///\n-/// Common return values are: [`Result`][enum_result], [`io::Result`][type_result]\n+/// Common return values include: [`fmt::Result`][fmt_result], [`io::Result`][io_result]\n ///\n /// [fmt]: ../std/fmt/index.html\n /// [fmt_write]: ../std/fmt/trait.Write.html\n /// [io_write]: ../std/io/trait.Write.html\n-/// [enum_result]: ../std/result/enum.Result.html\n-/// [type_result]: ../std/io/type.Result.html\n+/// [fmt_result]: ../std/fmt/type.Result.html\n+/// [io_result]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///"}]}