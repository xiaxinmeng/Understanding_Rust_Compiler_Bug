{"sha": "7e4f4337203b247bdbfbb0661e59ab1aa3bee3f1", "node_id": "C_kwDOAAsO6NoAKDdlNGY0MzM3MjAzYjI0N2JkYmZiYjA2NjFlNTlhYjFhYTNiZWUzZjE", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-08-21T19:39:46Z"}, "committer": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-08-23T11:47:08Z"}, "message": "Actually migrate OpaqueHiddenType", "tree": {"sha": "9cdcce06c704965b4c10d9d6f08bad715ce7c318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cdcce06c704965b4c10d9d6f08bad715ce7c318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e4f4337203b247bdbfbb0661e59ab1aa3bee3f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEAWou4Gq79HasRseDspeR1Nh440UFAmMEvjwACgkQspeR1Nh4\n40Ukbg/+NXqYc2+zw2kNgUlIdwfIJdgOhjl3VQdiLd3SpTPtrjjKiXXUiRnqjPzw\nykziRqrymbnZeODSnLTwyuhITgVOtZC1m3eMQxO7ArbhT//wMQXhpdfB7CvdoNX3\n0eiaynxuzg7XTdc6rDPHZ8crduwSYt9EW3ED06u6PgeayMuFPbFxtidtti2KGhos\npR2fwe+A9gEi7uKXgawIgJaXUvMTro9DZKFNw2/TC1SODMJjz7dqLwJxsd/y/WcS\njq7mVfBMkUBtsHBDraFo/pPeY8i+XTJWuIywy5x353jAwNcPbeZnVifPGdL0DNEr\nm4gFTL03e8qovlFNsBlJBIeedr3EUXZm78+HNetDgtd8Jo+CWD/Lg0GHjAf/Drl0\nRv4xcN7rFa6FmVXMUPwyZwo/iJH/k4ZD5gcFEAAMd5T+HPSab8z1XlrOo0Lo1sT5\nX9vK3Lj98jhs9zYmhdn1eugKD0w4NhEs6e0+8UDR+qDnGfGQ0+qw07HsefIY5HeT\nUxT5gZ2Bzp4vmCF5Y2pZ2Bv0jjFMyXDEo0EtrgijJJZZnFA/FeRtrnsteQRUdynn\nxYRzhUwKtLyd46L/zV4x2of6k3fcy1PqBWrHzEUyZTRdSY06mPP4uVZeTtThwlsW\n5VBLr8uqDeIexOp/OJcfRF1lv9D8c+OR0/ENXmQp98VwMR8i0Rs=\n=nLzW\n-----END PGP SIGNATURE-----", "payload": "tree 9cdcce06c704965b4c10d9d6f08bad715ce7c318\nparent 313d474b35fd6e60302324f75622d77765e1cbf8\nauthor Nikita Tomashevich <quant3234@gmail.com> 1661110786 +0300\ncommitter Nikita Tomashevich <quant3234@gmail.com> 1661255228 +0300\n\nActually migrate OpaqueHiddenType\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4f4337203b247bdbfbb0661e59ab1aa3bee3f1", "html_url": "https://github.com/rust-lang/rust/commit/7e4f4337203b247bdbfbb0661e59ab1aa3bee3f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e4f4337203b247bdbfbb0661e59ab1aa3bee3f1/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "313d474b35fd6e60302324f75622d77765e1cbf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/313d474b35fd6e60302324f75622d77765e1cbf8", "html_url": "https://github.com/rust-lang/rust/commit/313d474b35fd6e60302324f75622d77765e1cbf8"}], "stats": {"total": 22, "additions": 6, "deletions": 16}, "files": [{"sha": "233a5004a3931f53444eaf75538edc8f89d65e6a", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7e4f4337203b247bdbfbb0661e59ab1aa3bee3f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4f4337203b247bdbfbb0661e59ab1aa3bee3f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=7e4f4337203b247bdbfbb0661e59ab1aa3bee3f1", "patch": "@@ -1,3 +1,4 @@\n+use crate::errors::OpaqueHiddenTypeDiag;\n use crate::infer::{DefiningAnchor, InferCtxt, InferOk};\n use crate::traits;\n use hir::def_id::{DefId, LocalDefId};\n@@ -153,22 +154,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     if let Some(OpaqueTyOrigin::TyAlias) =\n                         did2.as_local().and_then(|did2| self.opaque_type_origin(did2, cause.span))\n                     {\n-                        self.tcx\n-                                .sess\n-                                .struct_span_err(\n-                                    cause.span,\n-                                    \"opaque type's hidden type cannot be another opaque type from the same scope\",\n-                                )\n-                                .span_label(cause.span, \"one of the two opaque types used here has to be outside its defining scope\")\n-                                .span_note(\n-                                    self.tcx.def_span(def_id),\n-                                    \"opaque type whose hidden type is being assigned\",\n-                                )\n-                                .span_note(\n-                                    self.tcx.def_span(did2),\n-                                    \"opaque type being used as hidden type\",\n-                                )\n-                                .emit();\n+                        self.tcx.sess.emit_err(OpaqueHiddenTypeDiag {\n+                            span: cause.span,\n+                            hidden_type: self.tcx.def_span(did2),\n+                            opaque_type: self.tcx.def_span(def_id),\n+                        });\n                     }\n                 }\n                 Some(self.register_hidden_type("}]}