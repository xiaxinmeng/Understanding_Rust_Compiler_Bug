{"sha": "a42e5a14c46dd57493fe38cc2fa51909edb70848", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MmU1YTE0YzQ2ZGQ1NzQ5M2ZlMzhjYzJmYTUxOTA5ZWRiNzA4NDg=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-05-27T05:05:09Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-06-19T18:05:14Z"}, "message": "Implement fn_def_datum", "tree": {"sha": "1a97b5ab4f3b24e8ea3f06e5d203f49ea3ec28c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a97b5ab4f3b24e8ea3f06e5d203f49ea3ec28c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a42e5a14c46dd57493fe38cc2fa51909edb70848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a42e5a14c46dd57493fe38cc2fa51909edb70848", "html_url": "https://github.com/rust-lang/rust/commit/a42e5a14c46dd57493fe38cc2fa51909edb70848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a42e5a14c46dd57493fe38cc2fa51909edb70848/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c09ad0627938949829de181ab23b976b9a1507f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c09ad0627938949829de181ab23b976b9a1507f", "html_url": "https://github.com/rust-lang/rust/commit/7c09ad0627938949829de181ab23b976b9a1507f"}], "stats": {"total": 154, "additions": 93, "deletions": 61}, "files": [{"sha": "a30a644e37174b03459f35a95f41a0d3c38fde94", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a42e5a14c46dd57493fe38cc2fa51909edb70848/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a42e5a14c46dd57493fe38cc2fa51909edb70848/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a42e5a14c46dd57493fe38cc2fa51909edb70848", "patch": "@@ -435,15 +435,15 @@ dependencies = [\n [[package]]\n name = \"chalk-base\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=f4977ab4c781e4f3b7fdb9310edbdab6daf56e29#f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\"\n+source = \"git+https://github.com/jackh726/chalk.git?rev=58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b#58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b\"\n dependencies = [\n- \"lazy_static 1.4.0\",\n+ \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-derive\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=f4977ab4c781e4f3b7fdb9310edbdab6daf56e29#f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\"\n+source = \"git+https://github.com/jackh726/chalk.git?rev=58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b#58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b\"\n dependencies = [\n  \"proc-macro2 1.0.3\",\n  \"quote 1.0.2\",\n@@ -454,7 +454,7 @@ dependencies = [\n [[package]]\n name = \"chalk-engine\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=f4977ab4c781e4f3b7fdb9310edbdab6daf56e29#f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\"\n+source = \"git+https://github.com/jackh726/chalk.git?rev=58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b#58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b\"\n dependencies = [\n  \"chalk-base\",\n  \"chalk-derive\",\n@@ -465,7 +465,7 @@ dependencies = [\n [[package]]\n name = \"chalk-ir\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=f4977ab4c781e4f3b7fdb9310edbdab6daf56e29#f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\"\n+source = \"git+https://github.com/jackh726/chalk.git?rev=58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b#58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b\"\n dependencies = [\n  \"chalk-base\",\n  \"chalk-derive\",\n@@ -474,13 +474,13 @@ dependencies = [\n [[package]]\n name = \"chalk-solve\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=f4977ab4c781e4f3b7fdb9310edbdab6daf56e29#f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\"\n+source = \"git+https://github.com/jackh726/chalk.git?rev=58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b#58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b\"\n dependencies = [\n  \"chalk-base\",\n  \"chalk-derive\",\n  \"chalk-engine\",\n  \"chalk-ir\",\n- \"ena 0.14.0\",\n+ \"ena\",\n  \"itertools 0.9.0\",\n  \"petgraph\",\n  \"rustc-hash\",\n@@ -1044,15 +1044,6 @@ dependencies = [\n  \"strum_macros\",\n ]\n \n-[[package]]\n-name = \"ena\"\n-version = \"0.13.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8944dc8fa28ce4a38f778bd46bf7d923fe73eed5a439398507246c8e017e6f36\"\n-dependencies = [\n- \"log\",\n-]\n-\n [[package]]\n name = \"ena\"\n version = \"0.14.0\"\n@@ -3273,7 +3264,7 @@ dependencies = [\n  \"bitflags\",\n  \"cfg-if\",\n  \"crossbeam-utils 0.7.2\",\n- \"ena 0.14.0\",\n+ \"ena\",\n  \"indexmap\",\n  \"jobserver\",\n  \"lazy_static\",\n@@ -3729,7 +3720,7 @@ dependencies = [\n  \"bitflags\",\n  \"cfg-if\",\n  \"crossbeam-utils 0.7.2\",\n- \"ena 0.14.0\",\n+ \"ena\",\n  \"indexmap\",\n  \"jobserver\",\n  \"lazy_static\","}, {"sha": "34dece1a2ad7e987a98f2461b189fd3beb3163ee", "filename": "src/librustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Flibrustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Flibrustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2FCargo.toml?ref=a42e5a14c46dd57493fe38cc2fa51909edb70848", "patch": "@@ -30,7 +30,7 @@ rustc_serialize = { path = \"../librustc_serialize\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n byteorder = { version = \"1.3\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\" }\n+chalk-ir =      { git = \"https://github.com/jackh726/chalk.git\", rev = \"58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b\" }\n #chalk-ir = \"0.10.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.7.1\""}, {"sha": "cb056dba9eab857dbf6758a31c499b5ce72f3d8a", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=a42e5a14c46dd57493fe38cc2fa51909edb70848", "patch": "@@ -19,8 +19,8 @@ rustc_span = { path = \"../librustc_span\" }\n #chalk-ir = \"0.10.0\"\n #chalk-rust-ir = \"0.10.0\"\n #chalk-solve = \"0.10.0\"\n-chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\" }\n+chalk-solve =   { git = \"https://github.com/jackh726/chalk.git\", rev = \"58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b\" }\n+chalk-ir =      { git = \"https://github.com/jackh726/chalk.git\", rev = \"58e5a31f48ddd4b940c682e7079d3e79e6ffaa1b\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../librustc_infer\" }\n rustc_trait_selection = { path = \"../librustc_trait_selection\" }"}, {"sha": "95a6f45f92fa89e684fd228583cd278a826e8a83", "filename": "src/librustc_traits/chalk/db.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fdb.rs?ref=a42e5a14c46dd57493fe38cc2fa51909edb70848", "patch": "@@ -175,9 +175,39 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n     fn fn_def_datum(\n         &self,\n-        _fn_def_id: chalk_ir::FnDefId<RustInterner<'tcx>>,\n+        fn_def_id: chalk_ir::FnDefId<RustInterner<'tcx>>,\n     ) -> Arc<chalk_solve::rust_ir::FnDefDatum<RustInterner<'tcx>>> {\n-        unimplemented!()\n+        let def_id = match fn_def_id.0 {\n+            RustDefId::FnDef(def_id) => def_id,\n+            _ => bug!(\"Did not use `FnDef` variant when expecting FnDef.\"),\n+        };\n+        let bound_vars = bound_vars_for_item(self.tcx, def_id);\n+        let binders = binders_for(&self.interner, bound_vars);\n+\n+        let predicates = self.tcx.predicates_defined_on(def_id).predicates;\n+        let where_clauses: Vec<_> = predicates\n+            .into_iter()\n+            .map(|(wc, _)| wc.subst(self.tcx, &bound_vars))\n+            .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n+\n+        let sig = self.tcx.fn_sig(def_id);\n+        // FIXME(chalk): Why does this have a Binder\n+        let argument_types = sig\n+            .inputs()\n+            .skip_binder()\n+            .iter()\n+            .map(|t| t.subst(self.tcx, &bound_vars).lower_into(&self.interner))\n+            .collect();\n+\n+        let return_type =\n+            sig.output().skip_binder().subst(self.tcx, &bound_vars).lower_into(&self.interner);\n+\n+        let bound =\n+            chalk_solve::rust_ir::FnDefDatumBound { argument_types, where_clauses, return_type };\n+        Arc::new(chalk_solve::rust_ir::FnDefDatum {\n+            id: fn_def_id,\n+            binders: chalk_ir::Binders::new(binders, bound),\n+        })\n     }\n \n     fn impl_datum("}, {"sha": "247dcb76c135a81a7cec48b23554f51cc6b5f3be", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=a42e5a14c46dd57493fe38cc2fa51909edb70848", "patch": "@@ -167,20 +167,11 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             ty::PredicateKind::Projection(predicate) => predicate.lower_into(interner),\n             ty::PredicateKind::WellFormed(arg) => match arg.unpack() {\n                 GenericArgKind::Type(ty) => match ty.kind {\n-                    // These types are always WF.\n-                    ty::Str | ty::Placeholder(..) | ty::Error(_) | ty::Never => {\n-                        chalk_ir::GoalData::All(chalk_ir::Goals::new(interner))\n-                    }\n-\n-                    // FIXME(chalk): Well-formed only if ref lifetime outlives type\n-                    ty::Ref(..) => chalk_ir::GoalData::All(chalk_ir::Goals::new(interner)),\n-\n-                    ty::Param(..) => panic!(\"No Params expected.\"),\n+                    // FIXME(chalk): In Chalk, a placeholder is WellFormed if it\n+                    // `FromEnv`. However, when we \"lower\" Params, we don't update\n+                    // the environment.\n+                    ty::Placeholder(..) => chalk_ir::GoalData::All(chalk_ir::Goals::new(interner)),\n \n-                    // FIXME(chalk) -- ultimately I think this is what we\n-                    // want to do, and we just have rules for how to prove\n-                    // `WellFormed` for everything above, instead of\n-                    // inlining a bit the rules of the proof here.\n                     _ => chalk_ir::GoalData::DomainGoal(chalk_ir::DomainGoal::WellFormed(\n                         chalk_ir::WellFormed::Ty(ty.lower_into(interner)),\n                     )),\n@@ -360,9 +351,9 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                     ),\n                 )\n             }\n-            FnDef(def_id, _) => apply(\n+            FnDef(def_id, substs) => apply(\n                 chalk_ir::TypeName::FnDef(chalk_ir::FnDefId(RustDefId::FnDef(def_id))),\n-                empty(),\n+                substs.lower_into(interner),\n             ),\n             FnPtr(sig) => {\n                 let (inputs_and_outputs, binders, _named_regions) ="}, {"sha": "fdc94f69bf21a86d2fa26e5960487dad89b00ddf", "filename": "src/test/ui/chalkify/impl_wf.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs?ref=a42e5a14c46dd57493fe38cc2fa51909edb70848", "patch": "@@ -8,12 +8,9 @@ trait Bar {\n \n impl Foo for i32 { }\n \n-// FIXME(chalk): blocked on better handling of builtin traits for non-struct\n-// application types (or a workaround)\n-/*\n impl Foo for str { }\n-//^ ERROR the size for values of type `str` cannot be known at compilation time\n-*/\n+//~^ ERROR the size for values of type `str` cannot be known at compilation time\n+\n \n // Implicit `T: Sized` bound.\n impl<T> Foo for Option<T> { }"}, {"sha": "5293bbaecd38965ac6527cfa10043299af4630bb", "filename": "src/test/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=a42e5a14c46dd57493fe38cc2fa51909edb70848", "patch": "@@ -1,12 +1,24 @@\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/impl_wf.rs:11:6\n+   |\n+LL | trait Foo: Sized { }\n+   |            ----- required by this bound in `Foo`\n+...\n+LL | impl Foo for str { }\n+   |      ^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+\n error[E0277]: the trait bound `f32: Foo` is not satisfied\n-  --> $DIR/impl_wf.rs:43:6\n+  --> $DIR/impl_wf.rs:40:6\n    |\n LL | trait Baz<U: ?Sized> where U: Foo { }\n    |                               --- required by this bound in `Baz`\n ...\n LL | impl Baz<f32> for f32 { }\n    |      ^^^^^^^^ the trait `Foo` is not implemented for `f32`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "171969afc7f22fcb409b4571896e93c61bab7a52", "filename": "src/test/ui/chalkify/type_inference.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs?ref=a42e5a14c46dd57493fe38cc2fa51909edb70848", "patch": "@@ -18,11 +18,9 @@ fn main() {\n     // is expecting a variable of type `i32`. This behavior differs from the\n     // old-style trait solver. I guess this will change, that's why I'm\n     // adding that test.\n-    // FIXME(chalk): partially blocked on float/int special casing\n     only_foo(x); //~ ERROR the trait bound `f64: Foo` is not satisfied\n \n     // Here we have two solutions so we get back the behavior of the old-style\n     // trait solver.\n-    // FIXME(chalk): blocked on float/int special casing\n-    //only_bar(x); // ERROR the trait bound `{float}: Bar` is not satisfied\n+    only_bar(x); //~ ERROR the trait bound `f64: Bar` is not satisfied\n }"}, {"sha": "476759292642bd8ab85b00f96cb8b1e2fcd65f28", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=a42e5a14c46dd57493fe38cc2fa51909edb70848", "patch": "@@ -1,12 +1,21 @@\n error[E0277]: the trait bound `f64: Foo` is not satisfied\n-  --> $DIR/type_inference.rs:22:5\n+  --> $DIR/type_inference.rs:21:5\n    |\n LL | fn only_foo<T: Foo>(_x: T) { }\n    |                --- required by this bound in `only_foo`\n ...\n LL |     only_foo(x);\n    |     ^^^^^^^^ the trait `Foo` is not implemented for `f64`\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `f64: Bar` is not satisfied\n+  --> $DIR/type_inference.rs:25:5\n+   |\n+LL | fn only_bar<T: Bar>(_x: T) { }\n+   |                --- required by this bound in `only_bar`\n+...\n+LL |     only_bar(x);\n+   |     ^^^^^^^^ the trait `Bar` is not implemented for `f64`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "7c469d99c5799c609663ced303e37367e53acfa5", "filename": "src/test/ui/chalkify/type_wf.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs?ref=a42e5a14c46dd57493fe38cc2fa51909edb70848", "patch": "@@ -1,5 +1,4 @@\n-// FIXME(chalk): should have an error, see below\n-// check-pass\n+// check-fail\n // compile-flags: -Z chalk\n \n trait Foo { }\n@@ -16,17 +15,11 @@ fn main() {\n        x: 5,\n     };\n \n-    // FIXME(chalk): blocked on float/int special handling. Needs to know that {float}: !i32\n-    /*\n-    let s = S { // ERROR the trait bound `{float}: Foo` is not satisfied\n+    let s = S { //~ ERROR the trait bound `f64: Foo` is not satisfied\n         x: 5.0,\n     };\n-    */\n \n-    // FIXME(chalk): blocked on float/int special handling. Needs to know that {float}: Sized\n-    /*\n     let s = S {\n         x: Some(5.0),\n     };\n-    */\n }"}, {"sha": "ab585a6ed2140d10a54f21bea25d732a3b049aa8", "filename": "src/test/ui/chalkify/type_wf.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr?ref=a42e5a14c46dd57493fe38cc2fa51909edb70848", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `f64: Foo` is not satisfied\n+  --> $DIR/type_wf.rs:18:13\n+   |\n+LL | struct S<T: Foo> {\n+   | ---------------- required by `S`\n+...\n+LL |     let s = S {\n+   |             ^ the trait `Foo` is not implemented for `f64`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "aec6b5d25235ea23ce0b80d259c31d6a9fce9d27", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e5a14c46dd57493fe38cc2fa51909edb70848/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=a42e5a14c46dd57493fe38cc2fa51909edb70848", "patch": "@@ -79,10 +79,9 @@ const WHITELIST: &[&str] = &[\n     \"byteorder\",\n     \"cc\",\n     \"cfg-if\",\n+    \"chalk-base\",\n     \"chalk-derive\",\n-    \"chalk-engine\",\n     \"chalk-ir\",\n-    \"chalk-macros\",\n     \"cloudabi\",\n     \"cmake\",\n     \"compiler_builtins\","}]}