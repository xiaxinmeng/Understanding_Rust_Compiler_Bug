{"sha": "8bdf988be21471fb56a484e7f32379e42cecc0a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZGY5ODhiZTIxNDcxZmI1NmE0ODRlN2YzMjM3OWU0MmNlY2MwYTU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-05-01T12:30:46Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-05-01T12:30:55Z"}, "message": "Remove deadcode in eval_mir_constant_to_operand", "tree": {"sha": "f3d3297815b3e124a8b41a246fec9b0d4945d55f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3d3297815b3e124a8b41a246fec9b0d4945d55f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bdf988be21471fb56a484e7f32379e42cecc0a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl6sFogACgkQgTGiTgx5\n76/KfxAAphmKHiOMn2W81mqqyZBUMblreeS61LKDoKgwgM2M92wpfPccoAr+CsFg\nBzCD/0NQDeUZSEdD8KDpyw8UDyN1wJ0YPf87A4DxPSXqPKS7vzBBCalmnY42VHin\nX8PwFtKym2uOWMiPBQgfL5yXw8Ntc6wNczZQasVUYBZlzUkD5FdacJdWRndCuytv\njEkFn0O/T9Wk2HCksYlBip7StdI2Jnz/uf+hOsmsGkhnlhmgCbi5Um7N6SHqc18E\nymd3o0CYnRUaOux9u/HFTry1gmx4see7tIJfEged/bTQ9i8MaPL5aAixeJB6dim0\ns6IhiymiiMu1TPt5rGVWcH/4P8KRE/CFLqBHiRxvayj7YU9e61IpcyJYP+/nlk3C\nbXb1qxn5JNXLkcgeZiyL27Dyg22Wnq5ZjYqO7ZKvo8fVMHMh3S9Ab+AmyiK1qhh4\niPdr11NOylGxswpDerAkkn0Ij0jwjuZo/3r8RF83bQ80HRhBLD4PV/ZHMA0uMq1l\nxco1JJRIPSZvo49QqcBvcD/EsNS00Hw8p8Xz9eHNuDvWEveBhwPY/IU47pM+xIPQ\nEEi8cw73nh2GoTbiK/W9AvYRt38VVua+4FPe5Be5USKBKWOE2rgu52Bg9w8L2SyV\nSBtipPI1/MVEgxVJfo/v6b8HAlBxpdJ3aSIZyCWeOV96SoanXXU=\n=6dfP\n-----END PGP SIGNATURE-----", "payload": "tree f3d3297815b3e124a8b41a246fec9b0d4945d55f\nparent eece58a8e35c444afba6fa34873bc0244e32cd29\nauthor Santiago Pastorino <spastorino@gmail.com> 1588336246 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1588336255 -0300\n\nRemove deadcode in eval_mir_constant_to_operand\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bdf988be21471fb56a484e7f32379e42cecc0a5", "html_url": "https://github.com/rust-lang/rust/commit/8bdf988be21471fb56a484e7f32379e42cecc0a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bdf988be21471fb56a484e7f32379e42cecc0a5/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eece58a8e35c444afba6fa34873bc0244e32cd29", "url": "https://api.github.com/repos/rust-lang/rust/commits/eece58a8e35c444afba6fa34873bc0244e32cd29", "html_url": "https://github.com/rust-lang/rust/commit/eece58a8e35c444afba6fa34873bc0244e32cd29"}], "stats": {"total": 22, "additions": 3, "deletions": 19}, "files": [{"sha": "d2629b771c2af5b631766f4afe308166fbb2edcc", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8bdf988be21471fb56a484e7f32379e42cecc0a5/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdf988be21471fb56a484e7f32379e42cecc0a5/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=8bdf988be21471fb56a484e7f32379e42cecc0a5", "patch": "@@ -16,25 +16,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &mut Bx,\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<OperandRef<'tcx, Bx::Value>, ErrorHandled> {\n-        match constant.literal.val {\n-            // Special case unevaluated statics, because statics have an identity and thus should\n-            // use `get_static` to get at their id.\n-            // FIXME(oli-obk): can we unify this somehow, maybe by making const eval of statics\n-            // always produce `&STATIC`. This may also simplify how const eval works with statics.\n-            ty::ConstKind::Unevaluated(def_id, substs, None) if self.cx.tcx().is_static(def_id) => {\n-                assert!(substs.is_empty(), \"we don't support generic statics yet\");\n-                let static_ = bx.get_static(def_id);\n-                // we treat operands referring to statics as if they were `&STATIC` instead\n-                let ptr_ty = self.cx.tcx().mk_mut_ptr(self.monomorphize(&constant.literal.ty));\n-                let layout = bx.layout_of(ptr_ty);\n-                Ok(OperandRef::from_immediate_or_packed_pair(bx, static_, layout))\n-            }\n-            _ => {\n-                let val = self.eval_mir_constant(constant)?;\n-                let ty = self.monomorphize(&constant.literal.ty);\n-                Ok(OperandRef::from_const(bx, val, ty))\n-            }\n-        }\n+        let val = self.eval_mir_constant(constant)?;\n+        let ty = self.monomorphize(&constant.literal.ty);\n+        Ok(OperandRef::from_const(bx, val, ty))\n     }\n \n     pub fn eval_mir_constant("}]}