{"sha": "f53292f7ee7365fe50ac216efac438ff5569fd06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MzI5MmY3ZWU3MzY1ZmU1MGFjMjE2ZWZhYzQzOGZmNTU2OWZkMDY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-15T12:05:30Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-15T12:05:30Z"}, "message": "Move std::{str,vec}::raw::set_len to an unsafe method on Owned{Vector,Str}.", "tree": {"sha": "269b181beb06c1701eff224eaecfc1e4dd6d793d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/269b181beb06c1701eff224eaecfc1e4dd6d793d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f53292f7ee7365fe50ac216efac438ff5569fd06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f53292f7ee7365fe50ac216efac438ff5569fd06", "html_url": "https://github.com/rust-lang/rust/commit/f53292f7ee7365fe50ac216efac438ff5569fd06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f53292f7ee7365fe50ac216efac438ff5569fd06/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f62c969f618463914b148d53bef1d0faeb2782f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f62c969f618463914b148d53bef1d0faeb2782f", "html_url": "https://github.com/rust-lang/rust/commit/4f62c969f618463914b148d53bef1d0faeb2782f"}], "stats": {"total": 134, "additions": 68, "deletions": 66}, "files": [{"sha": "c5df23b397144b5a565bd84a3a19e2c863d39eb8", "filename": "doc/po/ja/tutorial-ffi.md.po", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f53292f7ee7365fe50ac216efac438ff5569fd06/doc%2Fpo%2Fja%2Ftutorial-ffi.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/f53292f7ee7365fe50ac216efac438ff5569fd06/doc%2Fpo%2Fja%2Ftutorial-ffi.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Fja%2Ftutorial-ffi.md.po?ref=f53292f7ee7365fe50ac216efac438ff5569fd06", "patch": "@@ -224,7 +224,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"        snappy_compress(psrc, srclen, pdst, &mut dstlen);\\n\"\n-\"        vec::raw::set_len(&mut dst, dstlen as uint);\\n\"\n+\"        dst.set_len(dstlen as uint);\\n\"\n \"        dst\\n\"\n \"    }\\n\"\n \"}\\n\"\n@@ -271,7 +271,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"        if snappy_uncompress(psrc, srclen, pdst, &mut dstlen) == 0 {\\n\"\n-\"            vec::raw::set_len(&mut dst, dstlen as uint);\\n\"\n+\"            dst.set_len(dstlen as uint);\\n\"\n \"            Some(dst)\\n\"\n \"        } else {\\n\"\n \"            None // SNAPPY_INVALID_INPUT\\n\""}, {"sha": "f5a29fd59c397efb92851a701fd3d9ddfef20727", "filename": "doc/po/tutorial-ffi.md.pot", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f53292f7ee7365fe50ac216efac438ff5569fd06/doc%2Fpo%2Ftutorial-ffi.md.pot", "raw_url": "https://github.com/rust-lang/rust/raw/f53292f7ee7365fe50ac216efac438ff5569fd06/doc%2Fpo%2Ftutorial-ffi.md.pot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Ftutorial-ffi.md.pot?ref=f53292f7ee7365fe50ac216efac438ff5569fd06", "patch": "@@ -224,7 +224,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"        snappy_compress(psrc, srclen, pdst, &mut dstlen);\\n\"\n-\"        vec::raw::set_len(&mut dst, dstlen as uint);\\n\"\n+\"        dst.set_len(dstlen as uint);\\n\"\n \"        dst\\n\"\n \"    }\\n\"\n \"}\\n\"\n@@ -271,7 +271,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"        if snappy_uncompress(psrc, srclen, pdst, &mut dstlen) == 0 {\\n\"\n-\"            vec::raw::set_len(&mut dst, dstlen as uint);\\n\"\n+\"            dst.set_len(dstlen as uint);\\n\"\n \"            Some(dst)\\n\"\n \"        } else {\\n\"\n \"            None // SNAPPY_INVALID_INPUT\\n\""}, {"sha": "7ff82ffcadb10a88329eb6f64136794ffed4c731", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f53292f7ee7365fe50ac216efac438ff5569fd06/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/f53292f7ee7365fe50ac216efac438ff5569fd06/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=f53292f7ee7365fe50ac216efac438ff5569fd06", "patch": "@@ -107,7 +107,7 @@ pub fn compress(src: &[u8]) -> ~[u8] {\n         let pdst = vec::raw::to_mut_ptr(dst);\n \n         snappy_compress(psrc, srclen, pdst, &mut dstlen);\n-        vec::raw::set_len(&mut dst, dstlen as uint);\n+        dst.set_len(dstlen as uint);\n         dst\n     }\n }\n@@ -129,7 +129,7 @@ pub fn uncompress(src: &[u8]) -> Option<~[u8]> {\n         let pdst = vec::raw::to_mut_ptr(dst);\n \n         if snappy_uncompress(psrc, srclen, pdst, &mut dstlen) == 0 {\n-            vec::raw::set_len(&mut dst, dstlen as uint);\n+            dst.set_len(dstlen as uint);\n             Some(dst)\n         } else {\n             None // SNAPPY_INVALID_INPUT"}, {"sha": "0410d58bd8b3886b781a20ab72a80b70daa3afe7", "filename": "src/librustuv/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibrustuv%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibrustuv%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fprocess.rs?ref=f53292f7ee7365fe50ac216efac438ff5569fd06", "patch": "@@ -49,7 +49,7 @@ impl Process {\n         let mut stdio = vec::with_capacity::<uvll::uv_stdio_container_t>(io.len());\n         let mut ret_io = vec::with_capacity(io.len());\n         unsafe {\n-            vec::raw::set_len(&mut stdio, io.len());\n+            stdio.set_len(io.len());\n             for (slot, other) in stdio.iter().zip(io.iter()) {\n                 let io = set_stdio(slot as *uvll::uv_stdio_container_t, other,\n                                    loop_);"}, {"sha": "fb06a4dfdb422b753a27519ebac6a3c8de0df971", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=f53292f7ee7365fe50ac216efac438ff5569fd06", "patch": "@@ -79,7 +79,7 @@ impl<R: Reader> BufferedReader<R> {\n         // to be very cheap (large mallocs are not nearly as expensive as large\n         // callocs).\n         let mut buf = vec::with_capacity(cap);\n-        unsafe { vec::raw::set_len(&mut buf, cap); }\n+        unsafe { buf.set_len(cap); }\n         BufferedReader {\n             inner: inner,\n             buf: buf,\n@@ -154,7 +154,7 @@ impl<W: Writer> BufferedWriter<W> {\n     pub fn with_capacity(cap: uint, inner: W) -> BufferedWriter<W> {\n         // See comments in BufferedReader for why this uses unsafe code.\n         let mut buf = vec::with_capacity(cap);\n-        unsafe { vec::raw::set_len(&mut buf, cap); }\n+        unsafe { buf.set_len(cap); }\n         BufferedWriter {\n             inner: inner,\n             buf: buf,"}, {"sha": "53d79e70c8687f813c7de5e6062fd3afb5fc25d4", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=f53292f7ee7365fe50ac216efac438ff5569fd06", "patch": "@@ -523,7 +523,7 @@ pub trait Reader {\n             let mut total_read = 0;\n \n             buf.reserve_additional(len);\n-            vec::raw::set_len(buf, start_len + len);\n+            buf.set_len(start_len + len);\n \n             (|| {\n                 while total_read < len {\n@@ -539,7 +539,7 @@ pub trait Reader {\n                         }\n                     }\n                 }\n-            }).finally(|| vec::raw::set_len(buf, start_len + total_read))\n+            }).finally(|| buf.set_len(start_len + total_read))\n         }\n     }\n "}, {"sha": "4e1c6bf982a2eef5c489e1fa479e5c47bd4179b3", "filename": "src/libstd/io/native/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Fio%2Fnative%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Fio%2Fnative%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Ffile.rs?ref=f53292f7ee7365fe50ac216efac438ff5569fd06", "patch": "@@ -706,7 +706,7 @@ pub fn readlink(p: &CString) -> IoResult<Path> {\n             -1 => Err(super::last_error()),\n             n => {\n                 assert!(n > 0);\n-                unsafe { vec::raw::set_len(&mut buf, n as uint); }\n+                unsafe { buf.set_len(n as uint); }\n                 Ok(Path::new(buf))\n             }\n         }"}, {"sha": "f82df73908c4ab668aa95381f586eb91325c4ff0", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=f53292f7ee7365fe50ac216efac438ff5569fd06", "patch": "@@ -369,7 +369,7 @@ pub fn self_exe_path() -> Option<Path> {\n             });\n             if err != 0 { return None; }\n             if sz == 0 { return None; }\n-            vec::raw::set_len(&mut v, sz as uint - 1); // chop off trailing NUL\n+            v.set_len(sz as uint - 1); // chop off trailing NUL\n             Some(v)\n         }\n     }\n@@ -398,7 +398,7 @@ pub fn self_exe_path() -> Option<Path> {\n                 _NSGetExecutablePath(buf as *mut i8, &mut sz)\n             });\n             if err != 0 { return None; }\n-            vec::raw::set_len(&mut v, sz as uint - 1); // chop off trailing NUL\n+            v.set_len(sz as uint - 1); // chop off trailing NUL\n             Some(v)\n         }\n     }"}, {"sha": "4b3236b76bfb22a441486a2fb018b68619088216", "filename": "src/libstd/rt/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Frt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Frt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fstack.rs?ref=f53292f7ee7365fe50ac216efac438ff5569fd06", "patch": "@@ -24,7 +24,7 @@ impl StackSegment {\n         unsafe {\n             // Crate a block of uninitialized values\n             let mut stack = vec::with_capacity(size);\n-            vec::raw::set_len(&mut stack, size);\n+            stack.set_len(size);\n \n             let mut stk = StackSegment {\n                 buf: stack,"}, {"sha": "5a7f6f5dc3fbd30fc4826d55328c2341d59a4896", "filename": "src/libstd/str.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=f53292f7ee7365fe50ac216efac438ff5569fd06", "patch": "@@ -993,7 +993,7 @@ pub mod raw {\n     use cast;\n     use libc;\n     use ptr;\n-    use str::is_utf8;\n+    use str::{is_utf8, OwnedStr};\n     use vec;\n     use vec::MutableVector;\n     use unstable::raw::Slice;\n@@ -1002,7 +1002,7 @@ pub mod raw {\n     pub unsafe fn from_buf_len(buf: *u8, len: uint) -> ~str {\n         let mut v: ~[u8] = vec::with_capacity(len);\n         v.as_mut_buf(|vbuf, _len| ptr::copy_memory(vbuf, buf as *u8, len));\n-        vec::raw::set_len(&mut v, len);\n+        v.set_len(len);\n \n         assert!(is_utf8(v));\n         ::cast::transmute(v)\n@@ -1109,7 +1109,7 @@ pub mod raw {\n         let len = s.len();\n         assert!((len > 0u));\n         let b = s[len - 1u];\n-        set_len(s, len - 1u);\n+        s.set_len(len - 1);\n         return b;\n     }\n \n@@ -1130,16 +1130,6 @@ pub mod raw {\n         cast::transmute(s)\n     }\n \n-    /// Sets the length of a string\n-    ///\n-    /// This will explicitly set the size of the string, without actually\n-    /// modifying its buffers, so it is up to the caller to ensure that\n-    /// the string is actually the specified size.\n-    #[inline]\n-    pub unsafe fn set_len(s: &mut ~str, new_len: uint) {\n-        vec::raw::set_len(as_owned_vec(s), new_len)\n-    }\n-\n     /// Sets the length of a string\n     ///\n     /// This will explicitly set the size of the string, without actually\n@@ -1339,7 +1329,7 @@ impl Mutable for ~str {\n     #[inline]\n     fn clear(&mut self) {\n         unsafe {\n-            raw::set_len(self, 0)\n+            self.set_len(0)\n         }\n     }\n }\n@@ -2293,7 +2283,7 @@ impl<'a> StrSlice<'a> for &'a str {\n                 let mut v = vec::with_capacity(len);\n \n                 v.as_mut_buf(|dst, _| ptr::copy_memory(dst, src, len));\n-                vec::raw::set_len(&mut v, len);\n+                v.set_len(len);\n                 ::cast::transmute(v)\n             }\n         })\n@@ -2598,6 +2588,13 @@ pub trait OwnedStr {\n     /// The caller must make sure any mutations to this buffer keep the string\n     /// valid UTF-8!\n     fn as_mut_buf<T>(&mut self, f: |*mut u8, uint| -> T) -> T;\n+\n+    /// Sets the length of a string\n+    ///\n+    /// This will explicitly set the size of the string, without actually\n+    /// modifying its buffers, so it is up to the caller to ensure that\n+    /// the string is actually the specified size.\n+    unsafe fn set_len(&mut self, new_len: uint);\n }\n \n impl OwnedStr for ~str {\n@@ -2629,7 +2626,7 @@ impl OwnedStr for ~str {\n                     c.encode_utf8(slc)\n                 })\n             });\n-            raw::set_len(self, cur_len + used);\n+            self.set_len(cur_len + used);\n         }\n     }\n \n@@ -2638,7 +2635,7 @@ impl OwnedStr for ~str {\n         let end = self.len();\n         assert!(end > 0u);\n         let CharRange {ch, next} = self.char_range_at_reverse(end);\n-        unsafe { raw::set_len(self, next); }\n+        unsafe { self.set_len(next); }\n         return ch;\n     }\n \n@@ -2689,7 +2686,7 @@ impl OwnedStr for ~str {\n     fn truncate(&mut self, len: uint) {\n         assert!(len <= self.len());\n         assert!(self.is_char_boundary(len));\n-        unsafe { raw::set_len(self, len); }\n+        unsafe { self.set_len(len); }\n     }\n \n     #[inline]\n@@ -2703,6 +2700,11 @@ impl OwnedStr for ~str {\n             raw::as_owned_vec(self).as_mut_buf(f)\n         }\n     }\n+\n+    #[inline]\n+    unsafe fn set_len(&mut self, new_len: uint) {\n+        raw::as_owned_vec(self).set_len(new_len)\n+    }\n }\n \n impl Clone for ~str {"}, {"sha": "9919c552346349427b6d43e77917b9210989397d", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53292f7ee7365fe50ac216efac438ff5569fd06/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=f53292f7ee7365fe50ac216efac438ff5569fd06", "patch": "@@ -143,7 +143,7 @@ pub fn from_fn<T>(n_elts: uint, op: |uint| -> T) -> ~[T] {\n                 i += 1u;\n             }\n         }).finally(|| {\n-            raw::set_len(&mut v, i);\n+            v.set_len(i);\n         });\n         v\n     }\n@@ -170,7 +170,7 @@ pub fn from_elem<T:Clone>(n_elts: uint, t: T) -> ~[T] {\n                 i += 1u;\n             }\n         }).finally(|| {\n-            raw::set_len(&mut v, i);\n+            v.set_len(i);\n         });\n         v\n     }\n@@ -1440,6 +1440,15 @@ pub trait OwnedVector<T> {\n      *             value\n      */\n     fn grow_fn(&mut self, n: uint, op: |uint| -> T);\n+\n+    /**\n+     * Sets the length of a vector\n+     *\n+     * This will explicitly set the size of the vector, without actually\n+     * modifying its buffers, so it is up to the caller to ensure that\n+     * the vector is actually the specified size.\n+     */\n+    unsafe fn set_len(&mut self, new_len: uint);\n }\n \n impl<T> OwnedVector<T> for ~[T] {\n@@ -1565,8 +1574,8 @@ impl<T> OwnedVector<T> for ~[T] {\n             let self_p = vec::raw::to_mut_ptr(*self);\n             let rhs_p = vec::raw::to_ptr(rhs);\n             ptr::copy_memory(ptr::mut_offset(self_p, self_len as int), rhs_p, rhs_len);\n-            raw::set_len(self, new_len);\n-            raw::set_len(&mut rhs, 0);\n+            self.set_len(new_len);\n+            rhs.set_len(0);\n         }\n     }\n \n@@ -1576,7 +1585,7 @@ impl<T> OwnedVector<T> for ~[T] {\n             ln => {\n                 let valptr = ptr::to_mut_unsafe_ptr(&mut self[ln - 1u]);\n                 unsafe {\n-                    raw::set_len(self, ln - 1u);\n+                    self.set_len(ln - 1u);\n                     Some(ptr::read_ptr(&*valptr))\n                 }\n             }\n@@ -1616,7 +1625,7 @@ impl<T> OwnedVector<T> for ~[T] {\n             assert!(self.capacity() >= ln);\n             // Pretend like we have the original length so we can use\n             // the vector copy_memory to overwrite the hole we just made\n-            raw::set_len(self, ln);\n+            self.set_len(ln);\n \n             // Memcopy the head element (the one we want) to the location we just\n             // popped. For the moment it unsafely exists at both the head and last\n@@ -1636,7 +1645,7 @@ impl<T> OwnedVector<T> for ~[T] {\n             }\n \n             // Set the new length. Now the vector is back to normal\n-            raw::set_len(self, next_ln);\n+            self.set_len(next_ln);\n \n             // Swap out the element we want from the end\n             let vp = raw::to_mut_ptr(*self);\n@@ -1692,7 +1701,7 @@ impl<T> OwnedVector<T> for ~[T] {\n                 }\n             }\n         });\n-        unsafe { raw::set_len(self, newlen); }\n+        unsafe { self.set_len(newlen); }\n     }\n \n     fn retain(&mut self, f: |t: &T| -> bool) {\n@@ -1736,6 +1745,16 @@ impl<T> OwnedVector<T> for ~[T] {\n             i += 1u;\n         }\n     }\n+    #[inline]\n+    unsafe fn set_len(&mut self, new_len: uint) {\n+        if owns_managed::<T>() {\n+            let repr: **mut Box<Vec<()>> = cast::transmute(self);\n+            (**repr).data.fill = new_len * mem::nonzero_size_of::<T>();\n+        } else {\n+            let repr: **mut Vec<()> = cast::transmute(self);\n+            (**repr).fill = new_len * mem::nonzero_size_of::<T>();\n+        }\n+    }\n }\n \n impl<T> Mutable for ~[T] {\n@@ -2190,26 +2209,7 @@ pub mod raw {\n     use mem;\n     use unstable::intrinsics;\n     use vec::{with_capacity, ImmutableVector, MutableVector};\n-    use unstable::raw::{Box, Vec, Slice};\n-    use unstable::intrinsics::owns_managed;\n-\n-    /**\n-     * Sets the length of a vector\n-     *\n-     * This will explicitly set the size of the vector, without actually\n-     * modifying its buffers, so it is up to the caller to ensure that\n-     * the vector is actually the specified size.\n-     */\n-    #[inline]\n-    pub unsafe fn set_len<T>(v: &mut ~[T], new_len: uint) {\n-        if owns_managed::<T>() {\n-            let repr: **mut Box<Vec<()>> = cast::transmute(v);\n-            (**repr).data.fill = new_len * mem::nonzero_size_of::<T>();\n-        } else {\n-            let repr: **mut Vec<()> = cast::transmute(v);\n-            (**repr).fill = new_len * mem::nonzero_size_of::<T>();\n-        }\n-    }\n+    use unstable::raw::Slice;\n \n     /**\n      * Returns an unsafe pointer to the vector's buffer\n@@ -2287,7 +2287,7 @@ pub mod raw {\n     #[inline]\n     pub unsafe fn from_buf_raw<T>(ptr: *T, elts: uint) -> ~[T] {\n         let mut dst = with_capacity(elts);\n-        set_len(&mut dst, elts);\n+        dst.set_len(elts);\n         dst.as_mut_buf(|p_dst, _len_dst| ptr::copy_memory(p_dst, ptr, elts));\n         dst\n     }\n@@ -2379,7 +2379,7 @@ pub mod bytes {\n                     ptr::copy_memory(p_dst.offset(len_dst as int), p_src, len_src)\n                 })\n             });\n-            raw::set_len(dst, old_len + src.len());\n+            dst.set_len(old_len + src.len());\n         }\n     }\n }\n@@ -4293,7 +4293,7 @@ mod bench {\n             unsafe {\n                 let vp = vec::raw::to_mut_ptr(v);\n                 ptr::set_memory(vp, 0, 1024);\n-                vec::raw::set_len(&mut v, 1024);\n+                v.set_len(1024);\n             }\n         });\n     }\n@@ -4312,7 +4312,7 @@ mod bench {\n         bh.iter(|| {\n             let mut v: ~[u8] = vec::with_capacity(1024);\n             unsafe {\n-                vec::raw::set_len(&mut v, 1024);\n+                v.set_len(1024);\n             }\n             for i in range(0, 1024) {\n                 v[i] = 0;\n@@ -4325,7 +4325,7 @@ mod bench {\n         bh.iter(|| {\n             let mut v: ~[u8] = vec::with_capacity(1024);\n             unsafe {\n-                vec::raw::set_len(&mut v, 1024);\n+                v.set_len(1024);\n             }\n             for x in v.mut_iter() {\n                 *x = 0;"}]}