{"sha": "65944ce5228c8c1d2038dddbfac23d4d872b5787", "node_id": "C_kwDOAAsO6NoAKDY1OTQ0Y2U1MjI4YzhjMWQyMDM4ZGRkYmZhYzIzZDRkODcyYjU3ODc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-01T21:57:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-01T21:57:32Z"}, "message": "interpret: make a comment less scary", "tree": {"sha": "036d659189360bb771a1a9f49cfb658787fe8f36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/036d659189360bb771a1a9f49cfb658787fe8f36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65944ce5228c8c1d2038dddbfac23d4d872b5787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65944ce5228c8c1d2038dddbfac23d4d872b5787", "html_url": "https://github.com/rust-lang/rust/commit/65944ce5228c8c1d2038dddbfac23d4d872b5787", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65944ce5228c8c1d2038dddbfac23d4d872b5787/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5018181c79a6fe37913fd931005ad2a63c85be7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5018181c79a6fe37913fd931005ad2a63c85be7b", "html_url": "https://github.com/rust-lang/rust/commit/5018181c79a6fe37913fd931005ad2a63c85be7b"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "2e6c7f47ac1db0c980a98c5b2345a27dd81a00a9", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65944ce5228c8c1d2038dddbfac23d4d872b5787/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65944ce5228c8c1d2038dddbfac23d4d872b5787/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=65944ce5228c8c1d2038dddbfac23d4d872b5787", "patch": "@@ -202,7 +202,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let ptr = self.scalar_to_ptr(scalar)?;\n         match ptr.into_pointer_or_addr() {\n             Ok(ptr) => M::expose_ptr(self, ptr)?,\n-            Err(_) => {} // do nothing, exposing an invalid pointer has no meaning\n+            Err(_) => {} // Do nothing, exposing an invalid pointer (`None` provenance) is a NOP.\n         };\n         Ok(self.cast_from_int_like(scalar, src.layout, cast_ty)?.into())\n     }"}]}