{"sha": "7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "node_id": "C_kwDOAAsO6NoAKDc2NzRlZGVlYmFjMDJjZTliM2VlNjQzNGU1YTRhYjZhMDg1MDA1Zjk", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-26T01:14:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-28T22:08:18Z"}, "message": "Detect long types in E0308 and write them to disk\n\nOn type error with long types, print an abridged type and write the full\ntype to disk.\n\nPrint the widest possible short type while still fitting in the\nterminal.", "tree": {"sha": "b7a2e8e44842af103bb021aebc88bf0fa3607e3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7a2e8e44842af103bb021aebc88bf0fa3607e3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "html_url": "https://github.com/rust-lang/rust/commit/7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a09420ac48658cad726e0a6997687ceac4151e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a09420ac48658cad726e0a6997687ceac4151e3", "html_url": "https://github.com/rust-lang/rust/commit/8a09420ac48658cad726e0a6997687ceac4151e3"}], "stats": {"total": 415, "additions": 314, "deletions": 101}, "files": [{"sha": "550c5c69949b97143f1e44686460dd29dc279f4a", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -4298,6 +4298,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec\",\n+ \"termize\",\n  \"tracing\",\n  \"winapi\",\n ]"}, {"sha": "1750282712a4a91849f9209a1aef37a1c7290492", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 100, "deletions": 78, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -80,6 +80,7 @@ use rustc_middle::ty::{\n use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n use std::ops::{ControlFlow, Deref};\n+use std::path::PathBuf;\n use std::{cmp, fmt, iter};\n \n mod note;\n@@ -1351,10 +1352,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             .map(|(mod_str, _)| mod_str.len() + separator_len)\n                             .sum();\n \n-                    debug!(\n-                        \"cmp: separator_len={}, split_idx={}, min_len={}\",\n-                        separator_len, split_idx, min_len\n-                    );\n+                    debug!(?separator_len, ?split_idx, ?min_len, \"cmp\");\n \n                     if split_idx >= min_len {\n                         // paths are identical, highlight everything\n@@ -1365,7 +1363,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     } else {\n                         let (common, uniq1) = t1_str.split_at(split_idx);\n                         let (_, uniq2) = t2_str.split_at(split_idx);\n-                        debug!(\"cmp: common={}, uniq1={}, uniq2={}\", common, uniq1, uniq2);\n+                        debug!(?common, ?uniq1, ?uniq2, \"cmp\");\n \n                         values.0.push_normal(common);\n                         values.0.push_highlighted(uniq1);\n@@ -1658,17 +1656,14 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     }\n                     ValuePairs::Regions(_) => (false, Mismatch::Fixed(\"lifetime\")),\n                 };\n-                let vals = match self.values_str(values) {\n-                    Some((expected, found)) => Some((expected, found)),\n-                    None => {\n-                        // Derived error. Cancel the emitter.\n-                        // NOTE(eddyb) this was `.cancel()`, but `diag`\n-                        // is borrowed, so we can't fully defuse it.\n-                        diag.downgrade_to_delayed_bug();\n-                        return;\n-                    }\n+                let Some(vals) = self.values_str(values) else {\n+                    // Derived error. Cancel the emitter.\n+                    // NOTE(eddyb) this was `.cancel()`, but `diag`\n+                    // is borrowed, so we can't fully defuse it.\n+                    diag.downgrade_to_delayed_bug();\n+                    return;\n                 };\n-                (vals, exp_found, is_simple_error, Some(values))\n+                (Some(vals), exp_found, is_simple_error, Some(values))\n             }\n         };\n \n@@ -1700,7 +1695,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             label_or_note(span, &terr.to_string());\n         }\n \n-        if let Some((expected, found)) = expected_found {\n+        if let Some((expected, found, exp_p, found_p)) = expected_found {\n             let (expected_label, found_label, exp_found) = match exp_found {\n                 Mismatch::Variable(ef) => (\n                     ef.expected.prefix_string(self.tcx),\n@@ -1817,32 +1812,41 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 }\n                 TypeError::Sorts(values) => {\n                     let extra = expected == found;\n-                    let sort_string = |ty: Ty<'tcx>| match (extra, ty.kind()) {\n-                        (true, ty::Opaque(def_id, _)) => {\n-                            let sm = self.tcx.sess.source_map();\n-                            let pos = sm.lookup_char_pos(self.tcx.def_span(*def_id).lo());\n-                            format!(\n-                                \" (opaque type at <{}:{}:{}>)\",\n-                                sm.filename_for_diagnostics(&pos.file.name),\n-                                pos.line,\n-                                pos.col.to_usize() + 1,\n-                            )\n-                        }\n-                        (true, ty::Projection(proj))\n-                            if self.tcx.def_kind(proj.item_def_id)\n-                                == DefKind::ImplTraitPlaceholder =>\n-                        {\n-                            let sm = self.tcx.sess.source_map();\n-                            let pos = sm.lookup_char_pos(self.tcx.def_span(proj.item_def_id).lo());\n-                            format!(\n-                                \" (trait associated opaque type at <{}:{}:{}>)\",\n-                                sm.filename_for_diagnostics(&pos.file.name),\n-                                pos.line,\n-                                pos.col.to_usize() + 1,\n-                            )\n+                    let sort_string = |ty: Ty<'tcx>, path: Option<PathBuf>| {\n+                        let mut s = match (extra, ty.kind()) {\n+                            (true, ty::Opaque(def_id, _)) => {\n+                                let sm = self.tcx.sess.source_map();\n+                                let pos = sm.lookup_char_pos(self.tcx.def_span(*def_id).lo());\n+                                format!(\n+                                    \" (opaque type at <{}:{}:{}>)\",\n+                                    sm.filename_for_diagnostics(&pos.file.name),\n+                                    pos.line,\n+                                    pos.col.to_usize() + 1,\n+                                )\n+                            }\n+                            (true, ty::Projection(proj))\n+                                if self.tcx.def_kind(proj.item_def_id)\n+                                    == DefKind::ImplTraitPlaceholder =>\n+                            {\n+                                let sm = self.tcx.sess.source_map();\n+                                let pos = sm.lookup_char_pos(self.tcx.def_span(proj.item_def_id).lo());\n+                                format!(\n+                                    \" (trait associated opaque type at <{}:{}:{}>)\",\n+                                    sm.filename_for_diagnostics(&pos.file.name),\n+                                    pos.line,\n+                                    pos.col.to_usize() + 1,\n+                                )\n+                            }\n+                            (true, _) => format!(\" ({})\", ty.sort_string(self.tcx)),\n+                            (false, _) => \"\".to_string(),\n+                        };\n+                        if let Some(path) = path {\n+                            s.push_str(&format!(\n+                                \"\\nthe full type name has been written to '{}'\",\n+                                path.display(),\n+                            ));\n                         }\n-                        (true, _) => format!(\" ({})\", ty.sort_string(self.tcx)),\n-                        (false, _) => \"\".to_string(),\n+                        s\n                     };\n                     if !(values.expected.is_simple_text() && values.found.is_simple_text())\n                         || (exp_found.map_or(false, |ef| {\n@@ -1864,8 +1868,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             expected,\n                             &found_label,\n                             found,\n-                            &sort_string(values.expected),\n-                            &sort_string(values.found),\n+                            &sort_string(values.expected, exp_p),\n+                            &sort_string(values.found, found_p),\n                         );\n                     }\n                 }\n@@ -2338,7 +2342,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 let code = trace.cause.code();\n                 if let &MatchExpressionArm(box MatchExpressionArmCause { source, .. }) = code\n                     && let hir::MatchSource::TryDesugar = source\n-                    && let Some((expected_ty, found_ty)) = self.values_str(trace.values)\n+                    && let Some((expected_ty, found_ty, _, _)) = self.values_str(trace.values)\n                 {\n                     err.note(&format!(\n                         \"`?` operator cannot convert from `{}` to `{}`\",\n@@ -2454,7 +2458,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     fn values_str(\n         &self,\n         values: ValuePairs<'tcx>,\n-    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n+    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString, Option<PathBuf>, Option<PathBuf>)>\n+    {\n         match values {\n             infer::Regions(exp_found) => self.expected_found_str(exp_found),\n             infer::Terms(exp_found) => self.expected_found_str_term(exp_found),\n@@ -2464,7 +2469,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     found: exp_found.found.print_only_trait_path(),\n                 };\n                 match self.expected_found_str(pretty_exp_found) {\n-                    Some((expected, found)) if expected == found => {\n+                    Some((expected, found, _, _)) if expected == found => {\n                         self.expected_found_str(exp_found)\n                     }\n                     ret => ret,\n@@ -2476,7 +2481,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     found: exp_found.found.print_only_trait_path(),\n                 };\n                 match self.expected_found_str(pretty_exp_found) {\n-                    Some((expected, found)) if expected == found => {\n+                    Some((expected, found, _, _)) if expected == found => {\n                         self.expected_found_str(exp_found)\n                     }\n                     ret => ret,\n@@ -2488,17 +2493,38 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     fn expected_found_str_term(\n         &self,\n         exp_found: ty::error::ExpectedFound<ty::Term<'tcx>>,\n-    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n+    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString, Option<PathBuf>, Option<PathBuf>)>\n+    {\n         let exp_found = self.resolve_vars_if_possible(exp_found);\n         if exp_found.references_error() {\n             return None;\n         }\n \n         Some(match (exp_found.expected.unpack(), exp_found.found.unpack()) {\n-            (ty::TermKind::Ty(expected), ty::TermKind::Ty(found)) => self.cmp(expected, found),\n+            (ty::TermKind::Ty(expected), ty::TermKind::Ty(found)) => {\n+                let (mut exp, mut fnd) = self.cmp(expected, found);\n+                let len = self.tcx.sess().diagnostic_width().saturating_sub(20);\n+                let exp_s = exp.content();\n+                let fnd_s = fnd.content();\n+                let mut exp_p = None;\n+                let mut fnd_p = None;\n+                if exp_s.len() > len {\n+                    let (exp_s, exp_path) = self.tcx.short_ty_string(expected);\n+                    exp = DiagnosticStyledString::highlighted(exp_s);\n+                    exp_p = exp_path;\n+                }\n+                if fnd_s.len() > len {\n+                    let (fnd_s, fnd_path) = self.tcx.short_ty_string(found);\n+                    fnd = DiagnosticStyledString::highlighted(fnd_s);\n+                    fnd_p = fnd_path;\n+                }\n+                (exp, fnd, exp_p, fnd_p)\n+            }\n             _ => (\n                 DiagnosticStyledString::highlighted(exp_found.expected.to_string()),\n                 DiagnosticStyledString::highlighted(exp_found.found.to_string()),\n+                None,\n+                None,\n             ),\n         })\n     }\n@@ -2507,7 +2533,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     fn expected_found_str<T: fmt::Display + TypeFoldable<'tcx>>(\n         &self,\n         exp_found: ty::error::ExpectedFound<T>,\n-    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n+    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString, Option<PathBuf>, Option<PathBuf>)>\n+    {\n         let exp_found = self.resolve_vars_if_possible(exp_found);\n         if exp_found.references_error() {\n             return None;\n@@ -2516,6 +2543,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         Some((\n             DiagnosticStyledString::highlighted(exp_found.expected.to_string()),\n             DiagnosticStyledString::highlighted(exp_found.found.to_string()),\n+            None,\n+            None,\n         ))\n     }\n \n@@ -2849,36 +2878,29 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         debug!(\"report_sub_sup_conflict: sup_region={:?}\", sup_region);\n         debug!(\"report_sub_sup_conflict: sup_origin={:?}\", sup_origin);\n \n-        if let (&infer::Subtype(ref sup_trace), &infer::Subtype(ref sub_trace)) =\n-            (&sup_origin, &sub_origin)\n+        if let infer::Subtype(ref sup_trace) = sup_origin\n+            && let infer::Subtype(ref sub_trace) = sub_origin\n+            && let Some((sup_expected, sup_found, _, _)) = self.values_str(sup_trace.values)\n+            && let Some((sub_expected, sub_found, _, _)) = self.values_str(sub_trace.values)\n+            && sub_expected == sup_expected\n+            && sub_found == sup_found\n         {\n-            debug!(\"report_sub_sup_conflict: sup_trace={:?}\", sup_trace);\n-            debug!(\"report_sub_sup_conflict: sub_trace={:?}\", sub_trace);\n-            debug!(\"report_sub_sup_conflict: sup_trace.values={:?}\", sup_trace.values);\n-            debug!(\"report_sub_sup_conflict: sub_trace.values={:?}\", sub_trace.values);\n-\n-            if let (Some((sup_expected, sup_found)), Some((sub_expected, sub_found))) =\n-                (self.values_str(sup_trace.values), self.values_str(sub_trace.values))\n-            {\n-                if sub_expected == sup_expected && sub_found == sup_found {\n-                    note_and_explain_region(\n-                        self.tcx,\n-                        &mut err,\n-                        \"...but the lifetime must also be valid for \",\n-                        sub_region,\n-                        \"...\",\n-                        None,\n-                    );\n-                    err.span_note(\n-                        sup_trace.cause.span,\n-                        &format!(\"...so that the {}\", sup_trace.cause.as_requirement_str()),\n-                    );\n+            note_and_explain_region(\n+                self.tcx,\n+                &mut err,\n+                \"...but the lifetime must also be valid for \",\n+                sub_region,\n+                \"...\",\n+                None,\n+            );\n+            err.span_note(\n+                sup_trace.cause.span,\n+                &format!(\"...so that the {}\", sup_trace.cause.as_requirement_str()),\n+            );\n \n-                    err.note_expected_found(&\"\", sup_expected, &\"\", sup_found);\n-                    err.emit();\n-                    return;\n-                }\n-            }\n+            err.note_expected_found(&\"\", sup_expected, &\"\", sup_found);\n+            err.emit();\n+            return;\n         }\n \n         self.note_region_origin(&mut err, &sup_origin);"}, {"sha": "d2dffa4a0b78e5ef1d75606e165b0a137fbf87e0", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -16,7 +16,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             infer::Subtype(ref trace) => RegionOriginNote::WithRequirement {\n                 span: trace.cause.span,\n                 requirement: ObligationCauseAsDiagArg(trace.cause.clone()),\n-                expected_found: self.values_str(trace.values),\n+                expected_found: self.values_str(trace.values).map(|(e, f, _, _)| (e, f)),\n             }\n             .add_to_diagnostic(err),\n             infer::Reborrow(span) => {"}, {"sha": "cc3101bc83bb5691e09d61463a68b14c7275ac40", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -986,23 +986,31 @@ fn foo(&self) -> Self::T { String::new() }\n     }\n \n     pub fn short_ty_string(self, ty: Ty<'tcx>) -> (String, Option<PathBuf>) {\n-        let length_limit = 50;\n-        let type_limit = 4;\n+        let length_limit = self.sess.diagnostic_width().saturating_sub(20);\n+        let mut type_limit = 50;\n         let regular = FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n             .pretty_print_type(ty)\n             .expect(\"could not write to `String`\")\n             .into_buffer();\n         if regular.len() <= length_limit {\n             return (regular, None);\n         }\n-        let short = FmtPrinter::new_with_limit(\n-            self,\n-            hir::def::Namespace::TypeNS,\n-            rustc_session::Limit(type_limit),\n-        )\n-        .pretty_print_type(ty)\n-        .expect(\"could not write to `String`\")\n-        .into_buffer();\n+        let mut short;\n+        loop {\n+            // Look for the longest properly trimmed path that still fits in lenght_limit.\n+            short = FmtPrinter::new_with_limit(\n+                self,\n+                hir::def::Namespace::TypeNS,\n+                rustc_session::Limit(type_limit),\n+            )\n+            .pretty_print_type(ty)\n+            .expect(\"could not write to `String`\")\n+            .into_buffer();\n+            if short.len() <= length_limit || type_limit == 0 {\n+                break;\n+            }\n+            type_limit -= 1;\n+        }\n         if regular == short {\n             return (regular, None);\n         }"}, {"sha": "cbbba2252bf600b34b61a783c49c1bded1891f22", "filename": "compiler/rustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/compiler%2Frustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/compiler%2Frustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2FCargo.toml?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -18,6 +18,7 @@ rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n smallvec = \"1.8.1\"\n+termize = \"0.1.1\"\n \n [target.'cfg(unix)'.dependencies]\n libc = \"0.2\""}, {"sha": "4c049a8d628ef0e4336f111cb57c49fddbd3166d", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -952,6 +952,17 @@ impl Session {\n     ) -> Option<Symbol> {\n         attrs.iter().find(|at| at.has_name(name)).and_then(|at| at.value_str())\n     }\n+\n+    pub fn diagnostic_width(&self) -> usize {\n+        let default_column_width = 140;\n+        if let Some(width) = self.opts.diagnostic_width {\n+            width\n+        } else if self.opts.unstable_opts.ui_testing {\n+            default_column_width\n+        } else {\n+            termize::dimensions().map_or(default_column_width, |(w, _)| w)\n+        }\n+    }\n }\n \n // JUSTIFICATION: defn of the suggested wrapper fns"}, {"sha": "22ee1cd8d55b8cdb9a6b99902aa0b233fe7f24d9", "filename": "src/test/ui/diagnostic-width/long-E0308.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -0,0 +1,86 @@\n+// compile-flags: --diagnostic-width=100\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n+\n+struct Atype<T, K>(T, K);\n+struct Btype<T, K>(T, K);\n+struct Ctype<T, K>(T, K);\n+\n+fn main() {\n+    let x: Atype<\n+      Btype<\n+        Ctype<\n+          Atype<\n+            Btype<\n+              Ctype<\n+                Atype<\n+                  Btype<\n+                    Ctype<i32, i32>,\n+                    i32\n+                  >,\n+                  i32\n+                >,\n+                i32\n+              >,\n+              i32\n+            >,\n+            i32\n+          >,\n+          i32\n+        >,\n+        i32\n+      >,\n+      i32\n+    > = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+        Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+            Ok(\"\")\n+        ))))))))))))))))))))))))))))))\n+    ))))))))))))))))))))))))))))));\n+    //~^^^^^ ERROR E0308\n+\n+    let _ = Some(Ok(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(\n+        Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(\n+            Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(\n+                Some(Some(Some(Some(Some(Some(Some(Some(Some(\"\")))))))))\n+            )))))))))))))))))\n+        ))))))))))))))))))\n+    ))))))))))))))))) == Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+        Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+            Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n+        ))))))))))))))))))))))))))))))\n+    ))))))))))))))))))))))));\n+    //~^^^^^ ERROR E0308\n+\n+    let x: Atype<\n+      Btype<\n+        Ctype<\n+          Atype<\n+            Btype<\n+              Ctype<\n+                Atype<\n+                  Btype<\n+                    Ctype<i32, i32>,\n+                    i32\n+                  >,\n+                  i32\n+                >,\n+                i32\n+              >,\n+              i32\n+            >,\n+            i32\n+          >,\n+          i32\n+        >,\n+        i32\n+      >,\n+      i32\n+    > = ();\n+    //~^ ERROR E0308\n+\n+    let _: () = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+        Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+            Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n+        ))))))))))))))))))))))))))))))\n+    ))))))))))))))))))))))));\n+    //~^^^^^ ERROR E0308\n+}"}, {"sha": "142e34f7687fab13558b9cf8d07393699e629ac5", "filename": "src/test/ui/diagnostic-width/long-E0308.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -0,0 +1,80 @@\n+error[E0308]: mismatched types\n+  --> $DIR/long-E0308.rs:33:9\n+   |\n+LL |        let x: Atype<\n+   |   ____________-\n+LL |  |       Btype<\n+LL |  |         Ctype<\n+LL |  |           Atype<\n+...   |\n+LL |  |       i32\n+LL |  |     > = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(...\n+   |  |_____-___^\n+   | ||_____|\n+   | |      expected due to this\n+LL | |          Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(...\n+LL | |              Ok(\"\")\n+LL | |          ))))))))))))))))))))))))))))))\n+LL | |      ))))))))))))))))))))))))))))));\n+   | |___________________________________^ expected struct `Atype`, found enum `Result`\n+   |\n+   = note: expected struct `Atype<Btype<Ctype<Atype<Btype<Ctype<..., ...>, ...>, ...>, ...>, ...>, ...>`\n+           the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n+                found enum `Result<Result<Result<Result<Result<..., ...>, ...>, ...>, ...>, ...>`\n+           the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n+\n+error[E0308]: mismatched types\n+  --> $DIR/long-E0308.rs:46:26\n+   |\n+LL |       ))))))))))))))))) == Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok...\n+   |  __________________________^\n+LL | |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(O...\n+LL | |             Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n+LL | |         ))))))))))))))))))))))))))))))\n+LL | |     ))))))))))))))))))))))));\n+   | |____________________________^ expected enum `Option`, found enum `Result`\n+   |\n+   = note: expected enum `Option<Result<Option<Option<Option<Option<Option<Option<Option<...>>>>>>>, ...>>`\n+           the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n+              found enum `Result<Result<Result<Result<Result<..., ...>, ...>, ...>, ...>, ...>`\n+           the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n+\n+error[E0308]: mismatched types\n+  --> $DIR/long-E0308.rs:77:9\n+   |\n+LL |       let x: Atype<\n+   |  ____________-\n+LL | |       Btype<\n+LL | |         Ctype<\n+LL | |           Atype<\n+...  |\n+LL | |       i32\n+LL | |     > = ();\n+   | |     -   ^^ expected struct `Atype`, found `()`\n+   | |_____|\n+   |       expected due to this\n+   |\n+   = note: expected struct `Atype<Btype<Ctype<Atype<Btype<Ctype<..., ...>, ...>, ...>, ...>, ...>, ...>`\n+           the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/long-E0308.rs:80:17\n+   |\n+LL |       let _: () = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+   |  ____________--___^\n+   | |            |\n+   | |            expected due to this\n+LL | |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(O...\n+LL | |             Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n+LL | |         ))))))))))))))))))))))))))))))\n+LL | |     ))))))))))))))))))))))));\n+   | |____________________________^ expected `()`, found enum `Result`\n+   |\n+   = note: expected unit type `()`\n+                   found enum `Result<Result<Result<Result<Result<..., ...>, ...>, ...>, ...>, ...>`\n+           the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8d4f44218bc8a7ad557fc257494cb6c3bb2518c3", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -5,7 +5,7 @@ LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |                                 ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`E0275`)\n-note: required for `Bar<Bar<Bar<Bar<Bar<Bar<...>>>>>>` to implement `Foo`\n+note: required for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<...>>>>>>>>>>>>>>>>>>>>>>>` to implement `Foo`\n   --> $DIR/E0275.rs:6:9\n    |\n LL | impl<T> Foo for T where Bar<T>: Foo {}"}, {"sha": "0a5867429e24e2b34e2bbfccf7654d909777185f", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -14,7 +14,7 @@ LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `NoData<NoData<NoData<NoData<NoData<NoData<...>>>>>>` to implement `Foo`\n+note: required for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<...>>>>>>>>>>>>>>` to implement `Foo`\n   --> $DIR/issue-20413.rs:9:9\n    |\n LL | impl<T> Foo for T where NoData<T>: Foo {\n@@ -30,13 +30,13 @@ LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>` to implement `Bar`\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>>` to implement `Bar`\n   --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n-note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>` to implement `Baz`\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>>` to implement `Baz`\n   --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n@@ -52,13 +52,13 @@ LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>` to implement `Baz`\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>>` to implement `Baz`\n   --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n-note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>` to implement `Bar`\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>>` to implement `Bar`\n   --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {"}, {"sha": "fc43efff2eacac1347d461e12a3ceb90c04adde8", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -12,7 +12,7 @@ LL |     func(&mut iter.map(|x| x + 1))\n error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>, ...>: Iterator`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n-   = note: required for `&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>` to implement `Iterator`\n+   = note: required for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut ..., ...>, ...>, ...>, ...>, ...>, ...>, ...>` to implement `Iterator`\n    = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-83150/issue-83150.long-type-hash.txt'\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "fd71248d9cb458fc53300679e1d72ea404b778e1", "filename": "src/test/ui/regions/issue-102374.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Fregions%2Fissue-102374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Fregions%2Fissue-102374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-102374.rs?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n use std::cell::Cell;\n \n #[rustfmt::skip]"}, {"sha": "157850693ab506ad96fd63ebed1062efe6ac83c5", "filename": "src/test/ui/regions/issue-102374.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Fregions%2Fissue-102374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Fregions%2Fissue-102374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-102374.stderr?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -1,13 +1,14 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-102374.rs:16:5\n+  --> $DIR/issue-102374.rs:17:5\n    |\n LL | ) -> i32 {\n    |      --- expected `i32` because of return type\n LL |     f\n    |     ^ expected `i32`, found fn pointer\n    |\n    = note:    expected type `i32`\n-           found fn pointer `for<'z1, 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x, 'y, 'z, 'z0> fn(Cell<(&'z1 i32, &'a i32, &'b i32, &'c i32, &'d i32, &'e i32, &'f i32, &'g i32, &'h i32, &'i i32, &'j i32, &'k i32, &'l i32, &'m i32, &'n i32, &'o i32, &'p i32, &'q i32, &'r i32, &'s i32, &'t i32, &'u i32, &'v i32, &'w i32, &'x i32, &'y i32, &'z i32, &'z0 i32)>)`\n+           found fn pointer `for<'z1, 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x, 'y, 'z, 'z0> fn(Cell<...>)`\n+           the full type name has been written to '$TEST_BUILD_DIR/regions/issue-102374/issue-102374.long-type-hash.txt'\n \n error: aborting due to previous error\n "}, {"sha": "1f18c5daf66e3dd2c0944da6fe3f8becd61e2552", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -17,7 +17,7 @@ error[E0275]: overflow evaluating the requirement `(): Sized`\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"512\"]` attribute to your crate (`issue_91949_hangs_on_recursion`)\n    = note: required for `std::iter::Empty<()>` to implement `Iterator`\n    = note: 171 redundant requirements hidden\n-   = note: required for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<..., ...>>, ...>>` to implement `Iterator`\n+   = note: required for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<..., ...>>, ...>>, ...>>` to implement `Iterator`\n    = note: the full type name has been written to '$TEST_BUILD_DIR/traits/issue-91949-hangs-on-recursion/issue-91949-hangs-on-recursion.long-type-hash.txt'\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "ea7b47a5a380342ef75352f36784f64b09cc6f67", "filename": "src/test/ui/typeck/return_type_containing_closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.rs?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n #[allow(unused)]\n fn foo() { //~ HELP a return type might be missing here\n     vec!['a'].iter().map(|c| c)"}, {"sha": "d6c103de3dc11a1701a58f87c1fb64a431b914b6", "filename": "src/test/ui/typeck/return_type_containing_closure.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7674edeebac02ce9b3ee6434e5a4ab6a085005f9/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr?ref=7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "patch": "@@ -1,11 +1,12 @@\n error[E0308]: mismatched types\n-  --> $DIR/return_type_containing_closure.rs:3:5\n+  --> $DIR/return_type_containing_closure.rs:4:5\n    |\n LL |     vec!['a'].iter().map(|c| c)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Map`\n    |\n    = note: expected unit type `()`\n-                 found struct `Map<std::slice::Iter<'_, char>, [closure@$DIR/return_type_containing_closure.rs:3:26: 3:29]>`\n+                 found struct `Map<std::slice::Iter<'_, char>, ...>`\n+           the full type name has been written to '$TEST_BUILD_DIR/typeck/return_type_containing_closure/return_type_containing_closure.long-type-hash.txt'\n help: consider using a semicolon here\n    |\n LL |     vec!['a'].iter().map(|c| c);"}]}