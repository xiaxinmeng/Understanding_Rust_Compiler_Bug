{"sha": "2c3f92699e1f01301739cb78e3dd567363231d2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjM2Y5MjY5OWUxZjAxMzAxNzM5Y2I3OGUzZGQ1NjczNjMyMzFkMmM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T03:34:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:28Z"}, "message": "librustc: De-`@mut` the type cache in the type context", "tree": {"sha": "cac7fbb635e65259d0598776bf202042cbc4dcac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cac7fbb635e65259d0598776bf202042cbc4dcac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c3f92699e1f01301739cb78e3dd567363231d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c3f92699e1f01301739cb78e3dd567363231d2c", "html_url": "https://github.com/rust-lang/rust/commit/2c3f92699e1f01301739cb78e3dd567363231d2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c3f92699e1f01301739cb78e3dd567363231d2c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b976226d52d0020c37b89e1dc837bc1efc0f27cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b976226d52d0020c37b89e1dc837bc1efc0f27cc", "html_url": "https://github.com/rust-lang/rust/commit/b976226d52d0020c37b89e1dc837bc1efc0f27cc"}], "stats": {"total": 179, "additions": 120, "deletions": 59}, "files": [{"sha": "9e74314c86efe5851ff777c6f37372687f5e386a", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c3f92699e1f01301739cb78e3dd567363231d2c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3f92699e1f01301739cb78e3dd567363231d2c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=2c3f92699e1f01301739cb78e3dd567363231d2c", "patch": "@@ -951,7 +951,8 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n \n     let lid = ast::DefId { crate: ast::LOCAL_CRATE, node: id };\n     {\n-        let r = tcx.tcache.find(&lid);\n+        let tcache = tcx.tcache.borrow();\n+        let r = tcache.get().find(&lid);\n         for &tpbt in r.iter() {\n             ebml_w.tag(c::tag_table_tcache, |ebml_w| {\n                 ebml_w.id(id);\n@@ -1247,7 +1248,8 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                     c::tag_table_tcache => {\n                         let tpbt = val_dsr.read_ty_param_bounds_and_ty(xcx);\n                         let lid = ast::DefId { crate: ast::LOCAL_CRATE, node: id };\n-                        dcx.tcx.tcache.insert(lid, tpbt);\n+                        let mut tcache = dcx.tcx.tcache.borrow_mut();\n+                        tcache.get().insert(lid, tpbt);\n                     }\n                     c::tag_table_param_defs => {\n                         let bounds = val_dsr.read_type_param_def(xcx);"}, {"sha": "8deee83963fb78cf4b678316ac2d4f0503019a1f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2c3f92699e1f01301739cb78e3dd567363231d2c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3f92699e1f01301739cb78e3dd567363231d2c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2c3f92699e1f01301739cb78e3dd567363231d2c", "patch": "@@ -953,7 +953,7 @@ pub struct ty_param_substs_and_ty {\n     ty: ty::t\n }\n \n-type type_cache = @mut HashMap<ast::DefId, ty_param_bounds_and_ty>;\n+type type_cache = RefCell<HashMap<ast::DefId, ty_param_bounds_and_ty>>;\n \n pub type node_type_table = @mut HashMap<uint,t>;\n \n@@ -986,7 +986,7 @@ pub fn mk_ctxt(s: session::Session,\n         items: amap,\n         intrinsic_defs: RefCell::new(HashMap::new()),\n         freevars: freevars,\n-        tcache: @mut HashMap::new(),\n+        tcache: RefCell::new(HashMap::new()),\n         rcache: mk_rcache(),\n         short_names_cache: RefCell::new(HashMap::new()),\n         needs_unwind_cleanup_cache: RefCell::new(HashMap::new()),\n@@ -3975,8 +3975,9 @@ pub fn enum_variant_with_id(cx: ctxt,\n pub fn lookup_item_type(cx: ctxt,\n                         did: ast::DefId)\n                      -> ty_param_bounds_and_ty {\n+    let mut tcache = cx.tcache.borrow_mut();\n     lookup_locally_or_in_crate_store(\n-        \"tcache\", did, cx.tcache,\n+        \"tcache\", did, tcache.get(),\n         || csearch::get_type(cx, did))\n }\n \n@@ -4071,15 +4072,17 @@ pub fn lookup_field_type(tcx: ctxt,\n                       -> ty::t {\n     let t = if id.crate == ast::LOCAL_CRATE {\n         node_id_to_type(tcx, id.node)\n-    }\n-    else {\n-        match tcx.tcache.find(&id) {\n-           Some(&ty_param_bounds_and_ty {ty, ..}) => ty,\n-           None => {\n-               let tpt = csearch::get_field_type(tcx, struct_id, id);\n-               tcx.tcache.insert(id, tpt);\n-               tpt.ty\n-           }\n+    } else {\n+        {\n+            let mut tcache = tcx.tcache.borrow_mut();\n+            match tcache.get().find(&id) {\n+               Some(&ty_param_bounds_and_ty {ty, ..}) => ty,\n+               None => {\n+                   let tpt = csearch::get_field_type(tcx, struct_id, id);\n+                   tcache.get().insert(id, tpt);\n+                   tpt.ty\n+               }\n+            }\n         }\n     };\n     subst(tcx, substs, t)"}, {"sha": "4323918e6fae71596738fb6d1e7599868667e511", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c3f92699e1f01301739cb78e3dd567363231d2c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3f92699e1f01301739cb78e3dd567363231d2c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=2c3f92699e1f01301739cb78e3dd567363231d2c", "patch": "@@ -3446,7 +3446,10 @@ pub fn check_const(ccx: @mut CrateCtxt,\n                    id: ast::NodeId) {\n     let rty = ty::node_id_to_type(ccx.tcx, id);\n     let fcx = blank_fn_ctxt(ccx, rty, e.id);\n-    let declty = fcx.ccx.tcx.tcache.get(&local_def(id)).ty;\n+    let declty = {\n+        let tcache = fcx.ccx.tcx.tcache.borrow();\n+        tcache.get().get(&local_def(id)).ty\n+    };\n     check_const_with_ty(fcx, sp, e, declty);\n }\n "}, {"sha": "6244c116bae56d00dac040bdd2e54e3e49b8c4e7", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c3f92699e1f01301739cb78e3dd567363231d2c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3f92699e1f01301739cb78e3dd567363231d2c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=2c3f92699e1f01301739cb78e3dd567363231d2c", "patch": "@@ -366,7 +366,10 @@ impl CoherenceChecker {\n             };\n             debug!(\"new_polytype={}\", new_polytype.repr(tcx));\n \n-            tcx.tcache.insert(new_did, new_polytype);\n+            {\n+                let mut tcache = tcx.tcache.borrow_mut();\n+                tcache.get().insert(new_did, new_polytype);\n+            }\n \n             let mut methods = tcx.methods.borrow_mut();\n             methods.get().insert(new_did, new_method_ty);\n@@ -528,7 +531,8 @@ impl CoherenceChecker {\n \n     pub fn get_self_type_for_implementation(&self, implementation: @Impl)\n                                             -> ty_param_bounds_and_ty {\n-        return self.crate_context.tcx.tcache.get_copy(&implementation.did);\n+        let tcache = self.crate_context.tcx.tcache.borrow();\n+        return tcache.get().get_copy(&implementation.did);\n     }\n \n     // Privileged scope checking"}, {"sha": "c860310ade47636f071e25f7bdbedefcaa54f84f", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 91, "deletions": 42, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/2c3f92699e1f01301739cb78e3dd567363231d2c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3f92699e1f01301739cb78e3dd567363231d2c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=2c3f92699e1f01301739cb78e3dd567363231d2c", "patch": "@@ -173,7 +173,12 @@ pub fn get_enum_variant_types(ccx: &CrateCtxt,\n             generics: ty_generics(ccx, generics, 0),\n             ty: result_ty\n         };\n-        tcx.tcache.insert(local_def(variant.node.id), tpt);\n+\n+        {\n+            let mut tcache = tcx.tcache.borrow_mut();\n+            tcache.get().insert(local_def(variant.node.id), tpt);\n+        }\n+\n         write_ty_to_tcx(tcx, variant.node.id, result_ty);\n     }\n }\n@@ -350,7 +355,8 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n                ty.repr(tcx),\n                substs.repr(tcx));\n \n-        tcx.tcache.insert(m.def_id,\n+        let mut tcache = tcx.tcache.borrow_mut();\n+        tcache.get().insert(m.def_id,\n                           ty_param_bounds_and_ty {\n                               generics: ty::Generics {\n                                   type_param_defs: @new_type_param_defs,\n@@ -440,7 +446,8 @@ pub fn convert_field(ccx: &CrateCtxt,\n     let tt = ccx.to_ty(&ExplicitRscope, v.node.ty);\n     write_ty_to_tcx(ccx.tcx, v.node.id, tt);\n     /* add the field to the tcache */\n-    ccx.tcx.tcache.insert(local_def(v.node.id),\n+    let mut tcache = ccx.tcx.tcache.borrow_mut();\n+    tcache.get().insert(local_def(v.node.id),\n                           ty::ty_param_bounds_and_ty {\n                               generics: struct_generics.clone(),\n                               ty: tt\n@@ -470,20 +477,25 @@ fn convert_methods(ccx: &CrateCtxt,\n                 m.ident.repr(ccx.tcx),\n                 m.id,\n                 fty.repr(ccx.tcx));\n-        tcx.tcache.insert(\n-            local_def(m.id),\n+        {\n+            let mut tcache = tcx.tcache.borrow_mut();\n+            tcache.get().insert(\n+                local_def(m.id),\n+\n+                // n.b.: the type of a method is parameterized by both\n+                // the parameters on the receiver and those on the method\n+                // itself\n+                ty_param_bounds_and_ty {\n+                    generics: ty::Generics {\n+                        type_param_defs: @vec::append(\n+                            (*rcvr_ty_generics.type_param_defs).clone(),\n+                            *m_ty_generics.type_param_defs),\n+                        region_param_defs: rcvr_ty_generics.region_param_defs,\n+                    },\n+                    ty: fty\n+                });\n+        }\n \n-            // n.b.: the type of a method is parameterized by both\n-            // the parameters on the receiver and those on the method itself\n-            ty_param_bounds_and_ty {\n-                generics: ty::Generics {\n-                    type_param_defs: @vec::append(\n-                        (*rcvr_ty_generics.type_param_defs).clone(),\n-                        *m_ty_generics.type_param_defs),\n-                    region_param_defs: rcvr_ty_generics.region_param_defs,\n-                },\n-                ty: fty\n-            });\n         write_ty_to_tcx(tcx, m.id, fty);\n \n         let mut methods = tcx.methods.borrow_mut();\n@@ -557,10 +569,14 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::item) {\n         let i_ty_generics = ty_generics(ccx, generics, 0);\n         let selfty = ccx.to_ty(&ExplicitRscope, selfty);\n         write_ty_to_tcx(tcx, it.id, selfty);\n-        tcx.tcache.insert(local_def(it.id),\n-                          ty_param_bounds_and_ty {\n-                              generics: i_ty_generics,\n-                              ty: selfty});\n+\n+        {\n+            let mut tcache = tcx.tcache.borrow_mut();\n+            tcache.get().insert(local_def(it.id),\n+                              ty_param_bounds_and_ty {\n+                                  generics: i_ty_generics,\n+                                  ty: selfty});\n+        }\n \n         // If there is a trait reference, treat the methods as always public.\n         // This is to work around some incorrect behavior in privacy checking:\n@@ -618,7 +634,11 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::item) {\n         // Write the class type\n         let tpt = ty_of_item(ccx, it);\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n-        tcx.tcache.insert(local_def(it.id), tpt);\n+\n+        {\n+            let mut tcache = tcx.tcache.borrow_mut();\n+            tcache.get().insert(local_def(it.id), tpt);\n+        }\n \n         convert_struct(ccx, struct_def, tpt, it.id);\n       }\n@@ -658,19 +678,29 @@ pub fn convert_struct(ccx: &CrateCtxt,\n             if struct_def.fields.len() == 0 {\n                 // Enum-like.\n                 write_ty_to_tcx(tcx, ctor_id, selfty);\n-                tcx.tcache.insert(local_def(ctor_id), tpt);\n+\n+                {\n+                    let mut tcache = tcx.tcache.borrow_mut();\n+                    tcache.get().insert(local_def(ctor_id), tpt);\n+                }\n             } else if struct_def.fields[0].node.kind == ast::unnamed_field {\n                 // Tuple-like.\n-                let inputs =\n+                let inputs = {\n+                    let tcache = tcx.tcache.borrow();\n                     struct_def.fields.map(\n-                        |field| ccx.tcx.tcache.get(\n-                            &local_def(field.node.id)).ty);\n+                        |field| tcache.get().get(\n+                            &local_def(field.node.id)).ty)\n+                };\n                 let ctor_fn_ty = ty::mk_ctor_fn(tcx, ctor_id, inputs, selfty);\n                 write_ty_to_tcx(tcx, ctor_id, ctor_fn_ty);\n-                tcx.tcache.insert(local_def(ctor_id), ty_param_bounds_and_ty {\n-                    generics: tpt.generics,\n-                    ty: ctor_fn_ty\n-                });\n+                {\n+                    let mut tcache = tcx.tcache.borrow_mut();\n+                    tcache.get().insert(local_def(ctor_id),\n+                                      ty_param_bounds_and_ty {\n+                        generics: tpt.generics,\n+                        ty: ctor_fn_ty\n+                    });\n+                }\n             }\n         }\n     }\n@@ -695,7 +725,9 @@ pub fn convert_foreign(ccx: &CrateCtxt, i: &ast::foreign_item) {\n \n     let tpt = ty_of_foreign_item(ccx, i, abis);\n     write_ty_to_tcx(ccx.tcx, i.id, tpt.ty);\n-    ccx.tcx.tcache.insert(local_def(i.id), tpt);\n+\n+    let mut tcache = ccx.tcx.tcache.borrow_mut();\n+    tcache.get().insert(local_def(i.id), tpt);\n }\n \n pub fn instantiate_trait_ref(ccx: &CrateCtxt,\n@@ -781,15 +813,20 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::item)\n                   -> ty::ty_param_bounds_and_ty {\n     let def_id = local_def(it.id);\n     let tcx = ccx.tcx;\n-    match tcx.tcache.find(&def_id) {\n-        Some(&tpt) => return tpt,\n-        _ => {}\n+    {\n+        let tcache = tcx.tcache.borrow();\n+        match tcache.get().find(&def_id) {\n+            Some(&tpt) => return tpt,\n+            _ => {}\n+        }\n     }\n     match it.node {\n         ast::item_static(t, _, _) => {\n             let typ = ccx.to_ty(&ExplicitRscope, t);\n             let tpt = no_params(typ);\n-            tcx.tcache.insert(local_def(it.id), tpt);\n+\n+            let mut tcache = tcx.tcache.borrow_mut();\n+            tcache.get().insert(local_def(it.id), tpt);\n             return tpt;\n         }\n         ast::item_fn(decl, purity, abi, ref generics, _) => {\n@@ -810,13 +847,18 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::item)\n                     tcx.sess.str_of(it.ident),\n                     it.id,\n                     ppaux::ty_to_str(tcx, tpt.ty));\n-            ccx.tcx.tcache.insert(local_def(it.id), tpt);\n+\n+            let mut tcache = ccx.tcx.tcache.borrow_mut();\n+            tcache.get().insert(local_def(it.id), tpt);\n             return tpt;\n         }\n         ast::item_ty(t, ref generics) => {\n-            match tcx.tcache.find(&local_def(it.id)) {\n-                Some(&tpt) => return tpt,\n-                None => { }\n+            {\n+                let mut tcache = tcx.tcache.borrow_mut();\n+                match tcache.get().find(&local_def(it.id)) {\n+                    Some(&tpt) => return tpt,\n+                    None => { }\n+                }\n             }\n \n             let tpt = {\n@@ -827,7 +869,8 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::item)\n                 }\n             };\n \n-            tcx.tcache.insert(local_def(it.id), tpt);\n+            let mut tcache = tcx.tcache.borrow_mut();\n+            tcache.get().insert(local_def(it.id), tpt);\n             return tpt;\n         }\n         ast::item_enum(_, ref generics) => {\n@@ -839,7 +882,9 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::item)\n                 generics: ty_generics,\n                 ty: t\n             };\n-            tcx.tcache.insert(local_def(it.id), tpt);\n+\n+            let mut tcache = tcx.tcache.borrow_mut();\n+            tcache.get().insert(local_def(it.id), tpt);\n             return tpt;\n         }\n         ast::item_trait(..) => {\n@@ -855,7 +900,9 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::item)\n                 generics: ty_generics,\n                 ty: t\n             };\n-            tcx.tcache.insert(local_def(it.id), tpt);\n+\n+            let mut tcache = tcx.tcache.borrow_mut();\n+            tcache.get().insert(local_def(it.id), tpt);\n             return tpt;\n         }\n         ast::item_impl(..) | ast::item_mod(_) |\n@@ -990,7 +1037,9 @@ pub fn ty_of_foreign_fn_decl(ccx: &CrateCtxt,\n         generics: ty_generics,\n         ty: t_fn\n     };\n-    ccx.tcx.tcache.insert(def_id, tpt);\n+\n+    let mut tcache = ccx.tcx.tcache.borrow_mut();\n+    tcache.get().insert(def_id, tpt);\n     return tpt;\n }\n "}]}