{"sha": "51a792d01b3af2c96850d3be9392139a592931dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYTc5MmQwMWIzYWYyYzk2ODUwZDNiZTkzOTIxMzlhNTkyOTMxZGQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-03T09:46:40Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-03T17:18:07Z"}, "message": "Add trait_object_dummy_self to CommonTypes", "tree": {"sha": "f0fcd2bda8b0e68a150702b2a1230f41e0f5280f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0fcd2bda8b0e68a150702b2a1230f41e0f5280f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51a792d01b3af2c96850d3be9392139a592931dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyk6s8ACgkQaTCGhp1Q\nZjfldw//Zge/G/I1LFxUE62Ts7k5cWwRpWE9UMkn3XyqNCLlY4q+n6qdfSm2YEXG\nhpgEQC9m/UEKaP+LaLkuJeWaDnR1eNOSnSEwSD2vDCR/9+0vIyedB3T+Cch+E6gl\nxGJTqxCoMFE+drLFAuSxm9gYtMiVgct6yCYqugcNHadepITsc8KDIOjx+oJntUIT\nWOMrF/TA7L8cZt/Bus7EOyVMh8uJ8/bTaxoHwu3Rc1zHGG7IoTEFcWyMEILpKs40\n530dXxmMjRjQUI53jfxdMQa/d37K3iBgkTkrtMGZ5AGN9mIX4uP4u8XilVr3tOOY\nccTrp0D6qUyHxgjN7Ml2r0gz4YsJ+S9JkrGwUTwt8OT6khuimEbuwDsgB+LcEl+b\nEbjDqRHeCZQi+qMgZxJNaR4h/zrb3yq5m4cndelF4HQEQzeLhtrXZxOnDP2c7vwc\nWFDB0xCJi8g6HsnjeYErT9pCr/NozqrnscUgz2+wDfv252n/pGQSBFAvYxSd08Ij\n6eSGAyUlblk1bsXQluQPXzZWpodFDLOaBXs4nvOK9alcfqhK6HmfhL8slZeWq+UM\nDhN/6krrv6aMrRsJvCjX27nICK/pgWidjG2zPMOEe+aOEnm/5ox5q6imOpByORcL\nqKFRqwVOZsqz58VKJC6HQwWfp+HEqDpYcWgMdNIdBq+dmxUy/VM=\n=tZey\n-----END PGP SIGNATURE-----", "payload": "tree f0fcd2bda8b0e68a150702b2a1230f41e0f5280f\nparent dd7483c750945b554e2d18f0d54674d32b054b85\nauthor flip1995 <hello@philkrones.com> 1554284800 +0200\ncommitter flip1995 <hello@philkrones.com> 1554311887 +0200\n\nAdd trait_object_dummy_self to CommonTypes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51a792d01b3af2c96850d3be9392139a592931dd", "html_url": "https://github.com/rust-lang/rust/commit/51a792d01b3af2c96850d3be9392139a592931dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51a792d01b3af2c96850d3be9392139a592931dd/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd7483c750945b554e2d18f0d54674d32b054b85", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7483c750945b554e2d18f0d54674d32b054b85", "html_url": "https://github.com/rust-lang/rust/commit/dd7483c750945b554e2d18f0d54674d32b054b85"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "aa5610739fd6da8cb2ff853be6130cd0b99a21f2", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/51a792d01b3af2c96850d3be9392139a592931dd/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a792d01b3af2c96850d3be9392139a592931dd/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=51a792d01b3af2c96850d3be9392139a592931dd", "patch": "@@ -219,6 +219,11 @@ pub struct CommonTypes<'tcx> {\n     pub never: Ty<'tcx>,\n     pub err: Ty<'tcx>,\n \n+    /// Dummy type used for the `Self` of a `TraitRef` created for converting\n+    /// a trait object, and which gets removed in `ExistentialTraitRef`.\n+    /// This type must not appear anywhere in other converted types.\n+    pub trait_object_dummy_self: Ty<'tcx>,\n+\n     pub re_empty: Region<'tcx>,\n     pub re_static: Region<'tcx>,\n     pub re_erased: Region<'tcx>,\n@@ -955,6 +960,8 @@ impl<'tcx> CommonTypes<'tcx> {\n             f32: mk(Float(ast::FloatTy::F32)),\n             f64: mk(Float(ast::FloatTy::F64)),\n \n+            trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),\n+\n             re_empty: mk_region(RegionKind::ReEmpty),\n             re_static: mk_region(RegionKind::ReStatic),\n             re_erased: mk_region(RegionKind::ReErased),"}, {"sha": "ab5c2fee0ae0bb879188bbea33def72453e3ea21", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/51a792d01b3af2c96850d3be9392139a592931dd/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a792d01b3af2c96850d3be9392139a592931dd/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=51a792d01b3af2c96850d3be9392139a592931dd", "patch": "@@ -99,12 +99,6 @@ enum GenericArgPosition {\n     MethodCall,\n }\n \n-/// Dummy type used for the `Self` of a `TraitRef` created for converting\n-/// a trait object, and which gets removed in `ExistentialTraitRef`.\n-/// This type must not appear anywhere in other converted types.\n-#[cfg_attr(not(stage0), allow(usage_of_ty_tykind))]\n-const TRAIT_OBJECT_DUMMY_SELF: ty::TyKind<'static> = ty::Infer(ty::FreshTy(0));\n-\n impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     pub fn ast_region_to_region(&self,\n         lifetime: &hir::Lifetime,\n@@ -596,7 +590,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             infer_types,\n         );\n \n-        let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n+        let is_object = self_ty.map_or(false, |ty| {\n+            ty.sty == self.tcx().types.trait_object_dummy_self.sty\n+        });\n         let default_needs_object_self = |param: &ty::GenericParamDef| {\n             if let GenericParamDefKind::Type { has_default, .. } = param.kind {\n                 if is_object && has_default {\n@@ -957,10 +953,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     }\n \n     /// Transform a `PolyTraitRef` into a `PolyExistentialTraitRef` by\n-    /// removing the dummy `Self` type (`TRAIT_OBJECT_DUMMY_SELF`).\n+    /// removing the dummy `Self` type (`trait_object_dummy_self`).\n     fn trait_ref_to_existential(&self, trait_ref: ty::TraitRef<'tcx>)\n                                 -> ty::ExistentialTraitRef<'tcx> {\n-        if trait_ref.self_ty().sty != TRAIT_OBJECT_DUMMY_SELF {\n+        if trait_ref.self_ty().sty != self.tcx().types.trait_object_dummy_self.sty {\n             bug!(\"trait_ref_to_existential called on {:?} with non-dummy Self\", trait_ref);\n         }\n         ty::ExistentialTraitRef::erase_self_ty(self.tcx(), trait_ref)\n@@ -981,7 +977,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         }\n \n         let mut projection_bounds = Vec::new();\n-        let dummy_self = tcx.mk_ty(TRAIT_OBJECT_DUMMY_SELF);\n+        let dummy_self = self.tcx().types.trait_object_dummy_self;\n         let (principal, potential_assoc_types) = self.instantiate_poly_trait_ref(\n             &trait_bounds[0],\n             dummy_self,\n@@ -1031,7 +1027,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 }\n                 ty::Predicate::Projection(pred) => {\n                     // A `Self` within the original bound will be substituted with a\n-                    // `TRAIT_OBJECT_DUMMY_SELF`, so check for that.\n+                    // `trait_object_dummy_self`, so check for that.\n                     let references_self =\n                         pred.skip_binder().ty.walk().any(|t| t == dummy_self);\n \n@@ -1131,7 +1127,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             err.emit();\n         }\n \n-        // Erase the `dummy_self` (`TRAIT_OBJECT_DUMMY_SELF`) used above.\n+        // Erase the `dummy_self` (`trait_object_dummy_self`) used above.\n         let existential_principal = principal.map_bound(|trait_ref| {\n             self.trait_ref_to_existential(trait_ref)\n         });"}]}