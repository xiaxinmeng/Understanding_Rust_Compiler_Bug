{"sha": "051d91a5ce6c6a7fa2f4759a4df546254fb5cccc", "node_id": "C_kwDOAAsO6NoAKDA1MWQ5MWE1Y2U2YzZhN2ZhMmY0NzU5YTRkZjU0NjI1NGZiNWNjY2M", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-22T23:28:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-22T23:28:55Z"}, "message": "Rollup merge of #92146 - willcrichton:example-analyzer, r=jyn514\n\nDon't emit shared files when scraping examples from dependencies in Rustdoc\n\nThis PR fixes #91605. The issue is that `Context::init` gets called when scraping dependencies. By default, just calling `init` calls into `write_shared` and `build_index` which register the scraped crate into a list that later gets used for the Rustdoc sidebar. The fix is to ensure that `write_shared` is not called when scraping.\n\nr? `@jyn514`", "tree": {"sha": "db7a24a4ac690d11aab68c27f05007218f8ed114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db7a24a4ac690d11aab68c27f05007218f8ed114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/051d91a5ce6c6a7fa2f4759a4df546254fb5cccc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhw7S3CRBK7hj4Ov3rIwAAu3cIACrbcwI18kvzF2gzNcxq0QzG\n3oC2ypFPjv5nYbr0rycJ/6HLpo0aUCP2nPXpycnmhEGXHtQyysVjesdVXEeX/pxC\nB05jRsYT7EgltD4UVeiZK4Rf5SPbLPKB3CHpsy8AA3J3w5f69TQkaLuHs1oA+Uoq\npstu9BD8P8vwcNYXE1pOeZ1neiUzOTOOVR84oGU3VH4y08BJJixwpa8Ymb3l4tb3\nn/95xC5jlYTHYDPfQ0iFxKeFRAZOaQvWnumv8BAMeQDNEfeQAIeS3EI5esd1im+s\nm46MXqIM82SbJU3ByNg5/H020Jyj/FnUckU9Sg0pFfgIao8ghSV3YN5QPoSMJNU=\n=p+lF\n-----END PGP SIGNATURE-----\n", "payload": "tree db7a24a4ac690d11aab68c27f05007218f8ed114\nparent 12e4907728eeeb658c1a8d528dbacab9ad485d25\nparent b7de7973b221acb2ce900a04c11320a16fc884fb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1640215735 +0100\ncommitter GitHub <noreply@github.com> 1640215735 +0100\n\nRollup merge of #92146 - willcrichton:example-analyzer, r=jyn514\n\nDon't emit shared files when scraping examples from dependencies in Rustdoc\n\nThis PR fixes #91605. The issue is that `Context::init` gets called when scraping dependencies. By default, just calling `init` calls into `write_shared` and `build_index` which register the scraped crate into a list that later gets used for the Rustdoc sidebar. The fix is to ensure that `write_shared` is not called when scraping.\n\nr? `@jyn514`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/051d91a5ce6c6a7fa2f4759a4df546254fb5cccc", "html_url": "https://github.com/rust-lang/rust/commit/051d91a5ce6c6a7fa2f4759a4df546254fb5cccc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/051d91a5ce6c6a7fa2f4759a4df546254fb5cccc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12e4907728eeeb658c1a8d528dbacab9ad485d25", "url": "https://api.github.com/repos/rust-lang/rust/commits/12e4907728eeeb658c1a8d528dbacab9ad485d25", "html_url": "https://github.com/rust-lang/rust/commit/12e4907728eeeb658c1a8d528dbacab9ad485d25"}, {"sha": "b7de7973b221acb2ce900a04c11320a16fc884fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7de7973b221acb2ce900a04c11320a16fc884fb", "html_url": "https://github.com/rust-lang/rust/commit/b7de7973b221acb2ce900a04c11320a16fc884fb"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "d300afa313237dbd14603f55b57a5252e594cd61", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051d91a5ce6c6a7fa2f4759a4df546254fb5cccc/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d91a5ce6c6a7fa2f4759a4df546254fb5cccc/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=051d91a5ce6c6a7fa2f4759a4df546254fb5cccc", "patch": "@@ -272,7 +272,10 @@ crate struct RenderOptions {\n     crate emit: Vec<EmitType>,\n     /// If `true`, HTML source pages will generate links for items to their definition.\n     crate generate_link_to_definition: bool,\n+    /// Set of function-call locations to include as examples\n     crate call_locations: AllCallLocations,\n+    /// If `true`, Context::init will not emit shared files.\n+    crate no_emit_shared: bool,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -732,6 +735,7 @@ impl Options {\n                 emit,\n                 generate_link_to_definition,\n                 call_locations,\n+                no_emit_shared: false,\n             },\n             crate_name,\n             output_format,"}, {"sha": "45a436c44871002268af23b8e7ac9756f5721e7b", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/051d91a5ce6c6a7fa2f4759a4df546254fb5cccc/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d91a5ce6c6a7fa2f4759a4df546254fb5cccc/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=051d91a5ce6c6a7fa2f4759a4df546254fb5cccc", "patch": "@@ -397,6 +397,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             show_type_layout,\n             generate_link_to_definition,\n             call_locations,\n+            no_emit_shared,\n             ..\n         } = options;\n \n@@ -516,13 +517,16 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             sources::render(&mut cx, &krate)?;\n         }\n \n-        // Build our search index\n-        let index = build_index(&krate, &mut Rc::get_mut(&mut cx.shared).unwrap().cache, tcx);\n+        if !no_emit_shared {\n+            // Build our search index\n+            let index = build_index(&krate, &mut Rc::get_mut(&mut cx.shared).unwrap().cache, tcx);\n+\n+            // Write shared runs within a flock; disable thread dispatching of IO temporarily.\n+            Rc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(true);\n+            write_shared(&cx, &krate, index, &md_opts)?;\n+            Rc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(false);\n+        }\n \n-        // Write shared runs within a flock; disable thread dispatching of IO temporarily.\n-        Rc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(true);\n-        write_shared(&cx, &krate, index, &md_opts)?;\n-        Rc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(false);\n         Ok((cx, krate))\n     }\n "}, {"sha": "6809551fcfd9a2a3ad9bce09140248fdee7f319a", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/051d91a5ce6c6a7fa2f4759a4df546254fb5cccc/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d91a5ce6c6a7fa2f4759a4df546254fb5cccc/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=051d91a5ce6c6a7fa2f4759a4df546254fb5cccc", "patch": "@@ -223,13 +223,14 @@ where\n \n crate fn run(\n     krate: clean::Crate,\n-    renderopts: config::RenderOptions,\n+    mut renderopts: config::RenderOptions,\n     cache: formats::cache::Cache,\n     tcx: TyCtxt<'_>,\n     options: ScrapeExamplesOptions,\n ) -> interface::Result<()> {\n     let inner = move || -> Result<(), String> {\n         // Generates source files for examples\n+        renderopts.no_emit_shared = true;\n         let (cx, _) = Context::init(krate, renderopts, cache, tcx).map_err(|e| e.to_string())?;\n \n         // Collect CrateIds corresponding to provided target crates"}]}