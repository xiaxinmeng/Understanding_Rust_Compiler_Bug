{"sha": "d2ea6355a8432e0042060796cd1b4e9060400c2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZWE2MzU1YTg0MzJlMDA0MjA2MDc5NmNkMWI0ZTkwNjA0MDBjMmY=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-01-07T04:22:39Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-01-07T04:22:39Z"}, "message": "Update `unwrap_get` code review suggestions", "tree": {"sha": "65e875e2b26501d034d1ef8c274b5e8b56c62a2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65e875e2b26501d034d1ef8c274b5e8b56c62a2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2ea6355a8432e0042060796cd1b4e9060400c2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ea6355a8432e0042060796cd1b4e9060400c2f", "html_url": "https://github.com/rust-lang/rust/commit/d2ea6355a8432e0042060796cd1b4e9060400c2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2ea6355a8432e0042060796cd1b4e9060400c2f/comments", "author": null, "committer": null, "parents": [{"sha": "4add1e23f9b487373bd02852f3eef1ec15fdafc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4add1e23f9b487373bd02852f3eef1ec15fdafc3", "html_url": "https://github.com/rust-lang/rust/commit/4add1e23f9b487373bd02852f3eef1ec15fdafc3"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "4473802da3bafb2a2295472cb27ba79d55f81715", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea6355a8432e0042060796cd1b4e9060400c2f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea6355a8432e0042060796cd1b4e9060400c2f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d2ea6355a8432e0042060796cd1b4e9060400c2f", "patch": "@@ -1628,14 +1628,13 @@ fn lint_get_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, get_args: &[hir::\n     // Handle the case where the result is immedately dereferenced\n     // by not requiring ref and pulling the dereference into the\n     // suggestion.\n-    if needs_ref {\n-        if let Some(parent) = get_parent_expr(cx, expr) {\n-            if let hir::ExprKind::Unary(op, _) = parent.node {\n-                if op == hir::UnOp::UnDeref {\n-                    needs_ref = false;\n-                    span = parent.span;\n-                }\n-            }\n+    if_chain! {\n+        if needs_ref;\n+        if let Some(parent) = get_parent_expr(cx, expr);\n+        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, _) = parent.node;\n+        then {\n+            needs_ref = false;\n+            span = parent.span;\n         }\n     }\n "}, {"sha": "021c0c2ff44f8d75d53887137033ac74b86a0462", "filename": "tests/ui/get_unwrap.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea6355a8432e0042060796cd1b4e9060400c2f/tests%2Fui%2Fget_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea6355a8432e0042060796cd1b4e9060400c2f/tests%2Fui%2Fget_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.fixed?ref=d2ea6355a8432e0042060796cd1b4e9060400c2f", "patch": "@@ -46,6 +46,8 @@ fn main() {\n         let _ = &some_hashmap[&1];\n         let _ = &some_btreemap[&1];\n         let _ = false_positive.get(0).unwrap();\n+        // Test with deref\n+        let _: u8 = boxed_slice[1];\n     }\n \n     {"}, {"sha": "b041ba7b7c76d4b94df23aff7f8d210a29e97539", "filename": "tests/ui/get_unwrap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea6355a8432e0042060796cd1b4e9060400c2f/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea6355a8432e0042060796cd1b4e9060400c2f/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=d2ea6355a8432e0042060796cd1b4e9060400c2f", "patch": "@@ -46,6 +46,8 @@ fn main() {\n         let _ = some_hashmap.get(&1).unwrap();\n         let _ = some_btreemap.get(&1).unwrap();\n         let _ = false_positive.get(0).unwrap();\n+        // Test with deref\n+        let _: u8 = *boxed_slice.get(1).unwrap();\n     }\n \n     {"}, {"sha": "d4f699f5a72aa17144127970d850cf6693b3ef1a", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea6355a8432e0042060796cd1b4e9060400c2f/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea6355a8432e0042060796cd1b4e9060400c2f/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=d2ea6355a8432e0042060796cd1b4e9060400c2f", "patch": "@@ -36,41 +36,47 @@ error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more\n LL |         let _ = some_btreemap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n \n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:50:21\n+   |\n+LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[1]`\n+\n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:53:9\n+  --> $DIR/get_unwrap.rs:55:9\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[0]`\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:54:9\n+  --> $DIR/get_unwrap.rs:56:9\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_slice[0]`\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:55:9\n+  --> $DIR/get_unwrap.rs:57:9\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0]`\n \n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:56:9\n+  --> $DIR/get_unwrap.rs:58:9\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:65:17\n+  --> $DIR/get_unwrap.rs:67:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:66:17\n+  --> $DIR/get_unwrap.rs:68:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}]}