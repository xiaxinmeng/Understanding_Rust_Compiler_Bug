{"sha": "adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYzE4YmIyNGFlNmRhY2Y2YmZkOWNhOTc0MmQ0N2U2ZDQxODdhNmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-21T21:23:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-22T20:55:58Z"}, "message": "rustc: Introduce and parse additional meta_item forms\n\nExamples: #[test], #[link(name = \"vers\")]\n\nIssue #487", "tree": {"sha": "59624c339dda1e3da0dd1a6ba72f577e39fa095d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59624c339dda1e3da0dd1a6ba72f577e39fa095d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b", "html_url": "https://github.com/rust-lang/rust/commit/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64513808cadb809e324084687d94aa763b36c925", "url": "https://api.github.com/repos/rust-lang/rust/commits/64513808cadb809e324084687d94aa763b36c925", "html_url": "https://github.com/rust-lang/rust/commit/64513808cadb809e324084687d94aa763b36c925"}], "stats": {"total": 190, "additions": 153, "deletions": 37}, "files": [{"sha": "388ae97a1026a6ae11425efff00d7bd41ca641f6", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b", "patch": "@@ -291,7 +291,15 @@ fn get_crate_meta_export(&session::session sess, &ast::crate c, str k,\n                          str default, bool warn_default) -> str {\n     let vec[@ast::meta_item] v = [];\n     for each (@ast::meta_item mi in crate_export_metas(c)) {\n-        if (mi.node.key == k) { v += [mi]; }\n+        // FIXME (#487): Support all variants of meta_item\n+        alt (mi.node) {\n+            case (ast::meta_key_value(?key, ?value)) {\n+                if (key == k) { v += [mi]; }\n+            }\n+            case (_) {\n+                sess.unimpl(\"meta_item variant\");\n+            }\n+        }\n     }\n     alt (vec::len(v)) {\n         case (0u) {\n@@ -301,7 +309,16 @@ fn get_crate_meta_export(&session::session sess, &ast::crate c, str k,\n             }\n             ret default;\n         }\n-        case (1u) { ret v.(0).node.value; }\n+        case (1u) {\n+            alt (v.(0).node) {\n+                case (ast::meta_key_value(_, ?value)) {\n+                    ret value;\n+                }\n+                case (_) {\n+                    sess.unimpl(\"meta_item variant\");\n+                }\n+            }\n+        }\n         case (_) {\n             sess.span_fatal(v.(1).span, #fmt(\"duplicate meta '%s'\", k));\n         }\n@@ -312,21 +329,45 @@ fn get_crate_meta_export(&session::session sess, &ast::crate c, str k,\n // This calculates CMH as defined above\n fn crate_meta_extras_hash(sha1 sha, &ast::crate crate) -> str {\n     fn lteq(&@ast::meta_item ma, &@ast::meta_item mb) -> bool {\n-        ret ma.node.key <= mb.node.key;\n+        fn key(&@ast::meta_item m) -> ast::ident {\n+            alt (m.node) {\n+                case (ast::meta_word(?name)) {\n+                    name\n+                }\n+                case (ast::meta_key_value(?key, _)) {\n+                    key\n+                }\n+            }\n+        }\n+        ret key(ma) <= key(mb);\n     }\n     fn len_and_str(&str s) -> str { ret #fmt(\"%u_%s\", str::byte_len(s), s); }\n     let vec[mutable @ast::meta_item] v = [mutable ];\n     for each (@ast::meta_item mi in crate_export_metas(crate)) {\n-        if (mi.node.key != \"name\" && mi.node.key != \"vers\") {\n-            v += [mutable mi];\n+        alt (mi.node) {\n+            case (ast::meta_key_value(?key, _)) {\n+                if (key != \"name\" && key != \"vers\") {\n+                    v += [mutable mi];\n+                }\n+            }\n+            case (_) {\n+                v += [mutable mi];\n+            }\n         }\n     }\n     sort::quick_sort(lteq, v);\n     sha.reset();\n     for (@ast::meta_item m_ in v) {\n         auto m = m_;\n-        sha.input_str(len_and_str(m.node.key));\n-        sha.input_str(len_and_str(m.node.value));\n+        alt (m.node) {\n+            case (ast::meta_key_value(?key, ?value)) {\n+                sha.input_str(len_and_str(key));\n+                sha.input_str(len_and_str(value));\n+            }\n+            case (ast::meta_word(?name)) {\n+                sha.input_str(len_and_str(name));\n+            }\n+        }\n     }\n     ret truncated_sha1_result(sha);\n }"}, {"sha": "31556c66b5459f8f7d5a1e33526a61c4b7a784e3", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b", "patch": "@@ -97,7 +97,11 @@ type crate_directive = spanned[crate_directive_];\n \n type meta_item = spanned[meta_item_];\n \n-type meta_item_ = rec(ident key, str value);\n+tag meta_item_ {\n+    meta_word(ident);\n+    meta_list(ident, vec[@meta_item]);\n+    meta_key_value(ident, str);\n+}\n \n type block = spanned[block_];\n "}, {"sha": "e91f514deee4f7b0c3666cec0e36581e28b1c20d", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b", "patch": "@@ -548,19 +548,30 @@ fn metadata_matches(hashmap[str, str] mm, &vec[@ast::meta_item] metas) ->\n     log #fmt(\"matching %u metadata requirements against %u metadata items\",\n              vec::len(metas), mm.size());\n     for (@ast::meta_item mi in metas) {\n-        alt (mm.find(mi.node.key)) {\n-            case (some(?v)) {\n-                if (v == mi.node.value) {\n-                    log #fmt(\"matched '%s': '%s'\", mi.node.key,\n-                             mi.node.value);\n-                } else {\n-                    log #fmt(\"missing '%s': '%s' (got '%s')\", mi.node.key,\n-                             mi.node.value, v);\n-                    ret false;\n+        alt (mi.node) {\n+            case (ast::meta_key_value(?key, ?value)) {\n+                alt (mm.find(key)) {\n+                    case (some(?v)) {\n+                        if (v == value) {\n+                            log #fmt(\"matched '%s': '%s'\", key,\n+                                     value);\n+                        } else {\n+                            log #fmt(\"missing '%s': '%s' (got '%s')\",\n+                                     key,\n+                                     value, v);\n+                            ret false;\n+                        }\n+                    }\n+                    case (none) {\n+                        log #fmt(\"missing '%s': '%s'\",\n+                                 key, value);\n+                        ret false;\n+                    }\n                 }\n             }\n-            case (none) {\n-                log #fmt(\"missing '%s': '%s'\", mi.node.key, mi.node.value);\n+            case (_) {\n+                // FIXME (#487): Support all forms of meta_item\n+                log_err \"unimplemented meta_item variant in metadata_matches\";\n                 ret false;\n             }\n         }\n@@ -574,7 +585,18 @@ fn find_library_crate(&session::session sess, &ast::ident ident,\n    option::t[tup(str, vec[u8])] {\n     let str crate_name = ident;\n     for (@ast::meta_item mi in metas) {\n-        if (mi.node.key == \"name\") { crate_name = mi.node.value; break; }\n+        alt (mi.node) {\n+            case (ast::meta_key_value(?key, ?value)) {\n+                if (key == \"name\") {\n+                    crate_name = value;\n+                    break;\n+                }\n+            }\n+            case (_) {\n+                // FIXME (#487)\n+                sess.unimpl(\"meta_item variant\")\n+            }\n+        }\n     }\n     auto nn = parser::default_native_lib_naming(sess);\n     let str prefix = nn.prefix + crate_name;"}, {"sha": "c6e256ac03f4668858cf87f67c00df57bbcacc09", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b", "patch": "@@ -2113,26 +2113,41 @@ fn parse_inner_attrs(&parser p) -> vec[ast::attribute] {\n fn parse_meta_item(&parser p) -> @ast::meta_item {\n     auto lo = p.get_lo_pos();\n     auto ident = parse_ident(p);\n-    expect(p, token::EQ);\n     alt (p.peek()) {\n-        case (token::LIT_STR(?s)) {\n-            auto hi = p.get_hi_pos();\n+        case (token::EQ) {\n             p.bump();\n-            ret @spanned(lo, hi, rec(key=ident, value=p.get_str(s)));\n+            alt (p.peek()) {\n+                case (token::LIT_STR(?s)) {\n+                    p.bump();\n+                    auto value = p.get_str(s);\n+                    auto hi = p.get_hi_pos();\n+                    ret @spanned(lo, hi, ast::meta_key_value(ident, value));\n+                }\n+                case (_) {\n+                    p.fatal(\"Metadata items must be string literals\");\n+                }\n+            }\n+        }\n+        case (token::LPAREN) {\n+            auto inner_items = parse_meta_seq(p);\n+            auto hi = p.get_hi_pos();\n+            ret @spanned(lo, hi, ast::meta_list(ident, inner_items));\n+        }\n+        case (_) {\n+            auto hi = p.get_hi_pos();\n+            ret @spanned(lo, hi, ast::meta_word(ident));\n         }\n-        case (_) { p.fatal(\"Metadata items must be string literals\"); }\n     }\n-    fail;\n }\n \n-fn parse_meta(&parser p) -> vec[@ast::meta_item] {\n+fn parse_meta_seq(&parser p) -> vec[@ast::meta_item] {\n     ret parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n                   parse_meta_item, p).node;\n }\n \n fn parse_optional_meta(&parser p) -> vec[@ast::meta_item] {\n     alt (p.peek()) {\n-        case (token::LPAREN) { ret parse_meta(p); }\n+        case (token::LPAREN) { ret parse_meta_seq(p); }\n         case (_) { let vec[@ast::meta_item] v = []; ret v; }\n     }\n }"}, {"sha": "f8cb1e8fb9aaebfa3ed14c86b0b2afbea98812e5", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b", "patch": "@@ -669,13 +669,21 @@ fn write_int(&io::writer writer, &int n) {\n \n fn encode_meta_items(&ebml::writer ebml_w, &crate crate) {\n     fn encode_meta_item(&ebml::writer ebml_w, &meta_item mi) {\n+        // FIXME (#487): Support all forms of meta item\n         ebml::start_tag(ebml_w, tag_meta_item);\n-        ebml::start_tag(ebml_w, tag_meta_item_key);\n-        ebml_w.writer.write(str::bytes(mi.node.key));\n-        ebml::end_tag(ebml_w);\n-        ebml::start_tag(ebml_w, tag_meta_item_value);\n-        ebml_w.writer.write(str::bytes(mi.node.value));\n-        ebml::end_tag(ebml_w);\n+        alt (mi.node) {\n+            case (meta_key_value(?key, ?value)) {\n+                ebml::start_tag(ebml_w, tag_meta_item_key);\n+                ebml_w.writer.write(str::bytes(key));\n+                ebml::end_tag(ebml_w);\n+                ebml::start_tag(ebml_w, tag_meta_item_value);\n+                ebml_w.writer.write(str::bytes(value));\n+                ebml::end_tag(ebml_w);\n+            }\n+            case (_) {\n+                log_err \"unimplemented meta_item type\";\n+            }\n+        }\n         ebml::end_tag(ebml_w);\n     }\n     ebml::start_tag(ebml_w, tag_meta_export);"}, {"sha": "2d8d6382f8c7b8c1a60b55129025491e9c84fc5b", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b", "patch": "@@ -1018,9 +1018,18 @@ fn print_type_params(&ps s, &vec[ast::ty_param] params) {\n \n fn print_meta_item(&ps s, &@ast::meta_item item) {\n     ibox(s, indent_unit);\n-    word_space(s, item.node.key);\n-    word_space(s, \"=\");\n-    print_string(s, item.node.value);\n+    // FIXME (#487): Print other meta item variants\n+    alt (item.node) {\n+        case (ast::meta_key_value(?key, ?value)) {\n+            word_space(s, key);\n+            word_space(s, \"=\");\n+            print_string(s, value);\n+        }\n+        case (_) {\n+            log_err \"unimplemented meta_item variant\";\n+            fail;\n+        }\n+    }\n     end(s);\n }\n "}, {"sha": "01ca127553d53a43b5ba47da2978dc8cc10392aa", "filename": "src/test/compile-fail/attr-bad-meta.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Ftest%2Fcompile-fail%2Fattr-bad-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Ftest%2Fcompile-fail%2Fattr-bad-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-bad-meta.rs?ref=adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b", "patch": "@@ -0,0 +1,6 @@\n+// xfail-stage0\n+// error-pattern:expecting \\]\n+\n+// asterisk is bogus\n+#[attr*]\n+mod m { }\n\\ No newline at end of file"}, {"sha": "35e578bf26cedaf6268e3423c0f3cc2cb04f8771", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=adc18bb24ae6dacf6bfd9ca9742d47e6d4187a6b", "patch": "@@ -173,6 +173,17 @@ mod test_distinguish_syntax_ext {\n     }\n }\n \n+mod test_other_forms {\n+    #[attr]\n+    #[attr(word)]\n+    #[attr(attr(word))]\n+    #[attr(key1 = \"val\",\n+           key2 = \"val\",\n+           attr)]\n+    fn f() {\n+    }\n+}\n+\n fn main() {\n }\n "}]}