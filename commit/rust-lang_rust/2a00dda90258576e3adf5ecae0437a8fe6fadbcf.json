{"sha": "2a00dda90258576e3adf5ecae0437a8fe6fadbcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMDBkZGE5MDI1ODU3NmUzYWRmNWVjYWUwNDM3YThmZTZmYWRiY2Y=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-10T17:43:53Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-20T06:22:35Z"}, "message": "miri: correctly deal with `ConstKind::Bound`", "tree": {"sha": "76363ded70d38d49b3b250a625a6f586733c30e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76363ded70d38d49b3b250a625a6f586733c30e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a00dda90258576e3adf5ecae0437a8fe6fadbcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a00dda90258576e3adf5ecae0437a8fe6fadbcf", "html_url": "https://github.com/rust-lang/rust/commit/2a00dda90258576e3adf5ecae0437a8fe6fadbcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a00dda90258576e3adf5ecae0437a8fe6fadbcf/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "255a4c58f5863ed41c2e68792799125c6c676575", "url": "https://api.github.com/repos/rust-lang/rust/commits/255a4c58f5863ed41c2e68792799125c6c676575", "html_url": "https://github.com/rust-lang/rust/commit/255a4c58f5863ed41c2e68792799125c6c676575"}], "stats": {"total": 92, "additions": 88, "deletions": 4}, "files": [{"sha": "136a2699d20b21939fc3c9fc344440b0074981dd", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a00dda90258576e3adf5ecae0437a8fe6fadbcf/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a00dda90258576e3adf5ecae0437a8fe6fadbcf/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=2a00dda90258576e3adf5ecae0437a8fe6fadbcf", "patch": "@@ -549,7 +549,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         // Early-return cases.\n         let val_val = match val.val {\n-            ty::ConstKind::Param(_) => throw_inval!(TooGeneric),\n+            ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(_) => throw_inval!(TypeckError(ErrorReported)),\n             ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                 let instance = self.resolve(def.did, substs)?;\n@@ -561,9 +561,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // happening.\n                 return Ok(self.const_eval(GlobalId { instance, promoted }, val.ty)?);\n             }\n-            ty::ConstKind::Infer(..)\n-            | ty::ConstKind::Bound(..)\n-            | ty::ConstKind::Placeholder(..) => {\n+            ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {\n                 span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", val)\n             }\n             ty::ConstKind::Value(val_val) => val_val,"}, {"sha": "351d6849af5db26a3214e8fc605a6721b53d9537", "filename": "src/test/ui/const-generics/issues/issue-73260.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a00dda90258576e3adf5ecae0437a8fe6fadbcf/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a00dda90258576e3adf5ecae0437a8fe6fadbcf/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.rs?ref=2a00dda90258576e3adf5ecae0437a8fe6fadbcf", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -Zsave-analysis\n+\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+struct Arr<const N: usize>\n+where Assert::<{N < usize::max_value() / 2}>: IsTrue, //~ ERROR constant expression\n+{\n+}\n+\n+enum Assert<const CHECK: bool> {}\n+\n+trait IsTrue {}\n+\n+impl IsTrue for Assert<true> {}\n+\n+fn main() {\n+    let x: Arr<{usize::max_value()}> = Arr {};\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+}"}, {"sha": "e22612ed5ea63ee9be0a6e2e029d9d03a0a65efa", "filename": "src/test/ui/const-generics/issues/issue-73260.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2a00dda90258576e3adf5ecae0437a8fe6fadbcf/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a00dda90258576e3adf5ecae0437a8fe6fadbcf/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr?ref=2a00dda90258576e3adf5ecae0437a8fe6fadbcf", "patch": "@@ -0,0 +1,29 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-73260.rs:6:47\n+   |\n+LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n+   |                                               ^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-73260.rs:17:12\n+   |\n+LL |     let x: Arr<{usize::max_value()}> = Arr {};\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `false`, found `true`\n+   |\n+   = note: expected type `false`\n+              found type `true`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-73260.rs:17:40\n+   |\n+LL |     let x: Arr<{usize::max_value()}> = Arr {};\n+   |                                        ^^^ expected `false`, found `true`\n+   |\n+   = note: expected type `false`\n+              found type `true`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0f23fa92c367967655b73ee5567d8b8d1044df50", "filename": "src/test/ui/const-generics/issues/issue-74634.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2a00dda90258576e3adf5ecae0437a8fe6fadbcf/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a00dda90258576e3adf5ecae0437a8fe6fadbcf/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74634.rs?ref=2a00dda90258576e3adf5ecae0437a8fe6fadbcf", "patch": "@@ -0,0 +1,27 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait If<const COND: bool> {}\n+impl If<true> for () {}\n+\n+trait IsZero<const N: u8> {\n+    type Answer;\n+}\n+\n+struct True;\n+struct False;\n+\n+impl<const N: u8> IsZero<N> for ()\n+where (): If<{N == 0}> { //~ERROR constant expression\n+    type Answer = True;\n+}\n+\n+trait Foobar<const N: u8> {}\n+\n+impl<const N: u8> Foobar<N> for ()\n+where (): IsZero<N, Answer = True> {}\n+\n+impl<const N: u8> Foobar<N> for ()\n+where (): IsZero<N, Answer = False> {}\n+\n+fn main() {}"}, {"sha": "091a1ac7b9981bd804bfa6b221ffd5c8e497c937", "filename": "src/test/ui/const-generics/issues/issue-74634.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a00dda90258576e3adf5ecae0437a8fe6fadbcf/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a00dda90258576e3adf5ecae0437a8fe6fadbcf/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74634.stderr?ref=2a00dda90258576e3adf5ecae0437a8fe6fadbcf", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-74634.rs:15:11\n+   |\n+LL | where (): If<{N == 0}> {\n+   |           ^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}]}