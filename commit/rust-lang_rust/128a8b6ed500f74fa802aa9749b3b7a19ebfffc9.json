{"sha": "128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOGE4YjZlZDUwMGY3NGZhODAyYWE5NzQ5YjNiN2ExOWViZmZmYzk=", "commit": {"author": {"name": "Jon Morton", "email": "jonanin@gmail.com", "date": "2012-04-02T03:18:40Z"}, "committer": {"name": "Jon Morton", "email": "jonanin@gmail.com", "date": "2012-04-02T03:18:40Z"}, "message": "remove rust_srv", "tree": {"sha": "659d9f43bfe1768ab509892e739fd3aa015ac38f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/659d9f43bfe1768ab509892e739fd3aa015ac38f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "html_url": "https://github.com/rust-lang/rust/commit/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/comments", "author": {"login": "jamorton", "id": 18852, "node_id": "MDQ6VXNlcjE4ODUy", "avatar_url": "https://avatars.githubusercontent.com/u/18852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamorton", "html_url": "https://github.com/jamorton", "followers_url": "https://api.github.com/users/jamorton/followers", "following_url": "https://api.github.com/users/jamorton/following{/other_user}", "gists_url": "https://api.github.com/users/jamorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamorton/subscriptions", "organizations_url": "https://api.github.com/users/jamorton/orgs", "repos_url": "https://api.github.com/users/jamorton/repos", "events_url": "https://api.github.com/users/jamorton/events{/privacy}", "received_events_url": "https://api.github.com/users/jamorton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamorton", "id": 18852, "node_id": "MDQ6VXNlcjE4ODUy", "avatar_url": "https://avatars.githubusercontent.com/u/18852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamorton", "html_url": "https://github.com/jamorton", "followers_url": "https://api.github.com/users/jamorton/followers", "following_url": "https://api.github.com/users/jamorton/following{/other_user}", "gists_url": "https://api.github.com/users/jamorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamorton/subscriptions", "organizations_url": "https://api.github.com/users/jamorton/orgs", "repos_url": "https://api.github.com/users/jamorton/repos", "events_url": "https://api.github.com/users/jamorton/events{/privacy}", "received_events_url": "https://api.github.com/users/jamorton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413994ea3eed976a6fe97f3d6cfeb0c2f453e77f", "url": "https://api.github.com/repos/rust-lang/rust/commits/413994ea3eed976a6fe97f3d6cfeb0c2f453e77f", "html_url": "https://github.com/rust-lang/rust/commit/413994ea3eed976a6fe97f3d6cfeb0c2f453e77f"}], "stats": {"total": 218, "additions": 44, "deletions": 174}, "files": [{"sha": "b24d98b40f84aacece5934cad69950ed35f941f5", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -64,7 +64,6 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_port_selector.cpp \\\n               rt/circular_buffer.cpp \\\n               rt/isaac/randport.cpp \\\n-              rt/rust_srv.cpp \\\n               rt/rust_kernel.cpp \\\n               rt/rust_shape.cpp \\\n               rt/rust_abi.cpp \\"}, {"sha": "58e14412e464cf2339e7eb5c12e0c1ab10e10fe1", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -24,8 +24,12 @@ circular_buffer::circular_buffer(rust_kernel *kernel, size_t unit_sz) :\n circular_buffer::~circular_buffer() {\n     KLOG(kernel, mem, \"~circular_buffer 0x%\" PRIxPTR, this);\n     assert(_buffer);\n-    W(kernel, _unread == 0,\n-      \"freeing circular_buffer with %d unread bytes\", _unread);\n+    if (_unread != 0) {\n+        fprintf(stderr, \"warning: freeing circular_buffer with\"\n+                \" %lu unread bytes\", _unread);\n+        fflush(stderr);\n+    }\n+\n     kernel->free(_buffer);\n }\n "}, {"sha": "c5c36b2b5f33f9cfd11ea9519c41a7effeff850a", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -23,14 +23,14 @@ void *memory_region::get_data(alloc_header *ptr) {\n     return (void*)((char *)ptr + HEADER_SIZE);\n }\n \n-memory_region::memory_region(rust_srv *srv, bool synchronized) :\n-    _srv(srv), _parent(NULL), _live_allocations(0),\n-    _detailed_leaks(srv->env->detailed_leaks),\n+memory_region::memory_region(rust_env *env, bool synchronized) :\n+    _env(env), _parent(NULL), _live_allocations(0),\n+    _detailed_leaks(env->detailed_leaks),\n     _synchronized(synchronized) {\n }\n \n memory_region::memory_region(memory_region *parent) :\n-    _srv(parent->_srv), _parent(parent), _live_allocations(0),\n+    _env(parent->_env), _parent(parent), _live_allocations(0),\n     _detailed_leaks(parent->_detailed_leaks),\n     _synchronized(parent->_synchronized) {\n }\n@@ -59,7 +59,7 @@ void memory_region::free(void *mem) {\n     }\n     release_alloc(mem);\n     maybe_poison(mem);\n-    _srv->free(alloc);\n+    ::free(alloc);\n }\n \n void *\n@@ -74,7 +74,7 @@ memory_region::realloc(void *mem, size_t orig_size) {\n #   endif\n \n     size_t size = orig_size + HEADER_SIZE;\n-    alloc_header *newMem = (alloc_header *)_srv->realloc(alloc, size);\n+    alloc_header *newMem = (alloc_header *)::realloc(alloc, size);\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 1\n     assert(newMem->magic == MAGIC);\n@@ -105,7 +105,7 @@ void *\n memory_region::malloc(size_t size, const char *tag, bool zero) {\n     size_t old_size = size;\n     size += HEADER_SIZE;\n-    alloc_header *mem = (alloc_header *)_srv->malloc(size);\n+    alloc_header *mem = (alloc_header *)::malloc(size);\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 1\n     mem->magic = MAGIC;\n@@ -222,7 +222,7 @@ memory_region::claim_alloc(void *mem) {\n void\n memory_region::maybe_poison(void *mem) {\n \n-    if (!_srv->env->poison_on_free)\n+    if (!_env->poison_on_free)\n         return;\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 1"}, {"sha": "ee15bf0043787c2b132656e079da4da6ea942329", "filename": "src/rt/memory_region.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -22,7 +22,7 @@\n // hugely expensive and should only be used as a last resort.\n #define RUSTRT_TRACK_ALLOCATIONS 0\n \n-class rust_srv;\n+class rust_env;\n \n class memory_region {\n private:\n@@ -42,7 +42,7 @@ class memory_region {\n     inline alloc_header *get_header(void *mem);\n     inline void *get_data(alloc_header *);\n \n-    rust_srv *_srv;\n+    rust_env *_env;\n     memory_region *_parent;\n     int _live_allocations;\n     array_list<alloc_header *> _allocation_list;\n@@ -58,7 +58,7 @@ class memory_region {\n     void claim_alloc(void *mem);\n \n public:\n-    memory_region(rust_srv *srv, bool synchronized);\n+    memory_region(rust_env *env, bool synchronized);\n     memory_region(memory_region *parent);\n     void *malloc(size_t size, const char *tag, bool zero = true);\n     void *calloc(size_t size, const char *tag);"}, {"sha": "695132979beba099a85310161a3c2368c4bcf6e2", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -75,8 +75,7 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     update_log_settings(crate_map, env->logspec);\n     check_claims = env->check_claims;\n \n-    rust_srv *srv = new rust_srv(env);\n-    rust_kernel *kernel = new rust_kernel(srv);\n+    rust_kernel *kernel = new rust_kernel(env);\n     rust_sched_id sched_id = kernel->create_scheduler(env->num_sched_threads);\n     rust_scheduler *sched = kernel->get_scheduler_by_id(sched_id);\n     rust_task *root_task = sched->create_task(NULL, \"main\");\n@@ -96,7 +95,6 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     int ret = kernel->wait_for_exit();\n     delete args;\n     delete kernel;\n-    delete srv;\n \n     free_env(env);\n "}, {"sha": "bcf88cfcaf157c44794f5691acb7f934d76a203a", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -95,7 +95,6 @@ template <typename T> struct region_owned {\n struct rust_cond { };\n \n #include \"memory_region.h\"\n-#include \"rust_srv.h\"\n #include \"rust_log.h\"\n #include \"rust_kernel.h\"\n #include \"rust_sched_loop.h\""}, {"sha": "b52166e469a72e14e5d96d6ed8de5116dfdea87b", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -9,16 +9,15 @@\n #define KLOG_ERR_(field, ...)                   \\\n     KLOG_LVL(this, field, log_err, __VA_ARGS__)\n \n-rust_kernel::rust_kernel(rust_srv *srv) :\n-    _region(srv, true),\n-    _log(srv, NULL),\n-    srv(srv),\n+rust_kernel::rust_kernel(rust_env *env) :\n+    _region(env, true),\n+    _log(env, NULL),\n     max_task_id(0),\n     max_port_id(0),\n     rval(0),\n     max_sched_id(0),\n     sched_reaper(this),\n-    env(srv->env)\n+    env(env)\n {\n }\n \n@@ -69,7 +68,7 @@ rust_kernel::create_scheduler(size_t num_threads) {\n         id = max_sched_id++;\n         assert(id != INTPTR_MAX && \"Hit the maximum scheduler id\");\n         sched = new (this, \"rust_scheduler\")\n-            rust_scheduler(this, srv, num_threads, id);\n+            rust_scheduler(this, num_threads, id);\n         bool is_new = sched_table\n             .insert(std::pair<rust_sched_id,\n                               rust_scheduler*>(id, sched)).second;"}, {"sha": "7e3640f0631867a8d7c8109ccd8ab0570d934623", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -22,9 +22,6 @@ class rust_kernel {\n     memory_region _region;\n     rust_log _log;\n \n-public:\n-    rust_srv *srv;\n-private:\n     // The next task id\n     rust_task_id max_task_id;\n \n@@ -50,10 +47,9 @@ class rust_kernel {\n     rust_sched_reaper sched_reaper;\n \n public:\n-\n     struct rust_env *env;\n \n-    rust_kernel(rust_srv *srv);\n+    rust_kernel(rust_env *env);\n \n     void log(uint32_t level, char const *fmt, ...);\n     void fatal(char const *fmt, ...);"}, {"sha": "f6ca280d8f02bedd68aa3a6c99ffa61cfd89d496", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -40,8 +40,8 @@ log_console_off(rust_env *env) {\n     }\n }\n \n-rust_log::rust_log(rust_srv *srv, rust_sched_loop *sched_loop) :\n-    _srv(srv),\n+rust_log::rust_log(rust_env *env, rust_sched_loop *sched_loop) :\n+    _env(env),\n     _sched_loop(sched_loop) {\n }\n \n@@ -98,7 +98,8 @@ rust_log::trace_ln(char *prefix, char *message) {\n     append_string(buffer, \"%s\", prefix);\n     append_string(buffer, \"%s\", message);\n     if (_log_to_console) {\n-        _srv->log(buffer);\n+        fprintf(stderr, \"rust: %s\\n\", buffer);\n+        fflush(stderr);\n     }\n     _log_lock.unlock();\n }"}, {"sha": "362e9564f68a7a70bb0576607e0ae3d0b31fe0c8", "filename": "src/rt/rust_log.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_log.h", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_log.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.h?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -40,15 +40,15 @@ struct rust_task;\n class rust_log {\n \n public:\n-    rust_log(rust_srv *srv, rust_sched_loop *sched_loop);\n+    rust_log(rust_env *env, rust_sched_loop *sched_loop);\n     virtual ~rust_log();\n \n     void trace_ln(rust_task *task, uint32_t level, char *message);\n     void trace_ln(char *prefix, char *message);\n     bool is_tracing(uint32_t type_bits);\n \n private:\n-    rust_srv *_srv;\n+    rust_env *_env;\n     rust_sched_loop *_sched_loop;\n     bool _use_labels;\n     void trace_ln(rust_task *task, char *message);"}, {"sha": "7111cbb804b5cff19267e65ecda0e01f0815eb4c", "filename": "src/rt/rust_sched_launcher.cpp", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_sched_launcher.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_sched_launcher.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_launcher.cpp?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -3,16 +3,15 @@\n \n const size_t SCHED_STACK_SIZE = 1024*100;\n \n-rust_sched_launcher::rust_sched_launcher(rust_scheduler *sched,\n-                                         rust_srv *srv, int id)\n+rust_sched_launcher::rust_sched_launcher(rust_scheduler *sched, int id)\n     : kernel(sched->kernel),\n-      sched_loop(sched, srv, id),\n+      sched_loop(sched, id),\n       driver(&sched_loop) {\n }\n \n rust_thread_sched_launcher::rust_thread_sched_launcher(rust_scheduler *sched,\n-                                                       rust_srv *srv, int id)\n-    : rust_sched_launcher(sched, srv, id),\n+                                                       int id)\n+    : rust_sched_launcher(sched, id),\n       rust_thread(SCHED_STACK_SIZE) {\n }\n "}, {"sha": "e5b230fce4d1190e9761b316c1475ec778c07a95", "filename": "src/rt/rust_sched_launcher.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_sched_launcher.h", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_sched_launcher.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_launcher.h?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -16,7 +16,7 @@ class rust_sched_launcher : public kernel_owned<rust_sched_launcher> {\n     rust_sched_driver driver;\n \n public:\n-    rust_sched_launcher(rust_scheduler *sched, rust_srv *srv, int id);\n+    rust_sched_launcher(rust_scheduler *sched, int id);\n     virtual ~rust_sched_launcher() { }\n \n     virtual void start() = 0;\n@@ -28,7 +28,7 @@ class rust_thread_sched_launcher\n   :public rust_sched_launcher,\n    private rust_thread {\n public:\n-    rust_thread_sched_launcher(rust_scheduler *sched, rust_srv *srv, int id);\n+    rust_thread_sched_launcher(rust_scheduler *sched, int id);\n     virtual void start() { rust_thread::start(); }\n     virtual void run() { driver.start_main_loop(); }\n     virtual void join() { rust_thread::join(); }"}, {"sha": "52fb17d9f983af386f94ca34af8f3273da180e4e", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -17,21 +17,19 @@ const size_t C_STACK_SIZE = 1024*1024;\n \n bool rust_sched_loop::tls_initialized = false;\n \n-rust_sched_loop::rust_sched_loop(rust_scheduler *sched,\n-                                   rust_srv *srv,\n-                                   int id) :\n-    _log(srv, this),\n+rust_sched_loop::rust_sched_loop(rust_scheduler *sched,int id) :\n+    _log(env, this),\n     id(id),\n     should_exit(false),\n     cached_c_stack(NULL),\n     dead_task(NULL),\n     pump_signal(NULL),\n     kernel(sched->kernel),\n     sched(sched),\n-    srv(srv),\n     log_lvl(log_debug),\n     min_stack_size(kernel->env->min_stack_size),\n     env(kernel->env),\n+    local_region(env, false),\n     // TODO: calculate a per scheduler name.\n     name(\"main\")\n {"}, {"sha": "cd95323f9139f236a89588aebaaa271fbc7dc003", "filename": "src/rt/rust_sched_loop.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_sched_loop.h", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_sched_loop.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.h?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -69,7 +69,6 @@ struct rust_sched_loop\n public:\n     rust_kernel *kernel;\n     rust_scheduler *sched;\n-    rust_srv *srv;\n \n     // NB: this is used to filter *runtime-originating* debug\n     // logging, on a per-scheduler basis. It's not likely what\n@@ -81,6 +80,7 @@ struct rust_sched_loop\n \n     size_t min_stack_size;\n     rust_env *env;\n+    memory_region local_region;\n \n     randctx rctx;\n \n@@ -90,7 +90,7 @@ struct rust_sched_loop\n \n     // Only a pointer to 'name' is kept, so it must live as long as this\n     // domain.\n-    rust_sched_loop(rust_scheduler *sched, rust_srv *srv, int id);\n+    rust_sched_loop(rust_scheduler *sched, int id);\n     void activate(rust_task *task);\n     void log(rust_task *task, uint32_t level, char const *fmt, ...);\n     rust_log & get_log();"}, {"sha": "582289a3182417b1da21c8f2d46c4bdb22fd4ff1", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -3,12 +3,9 @@\n #include \"rust_sched_launcher.h\"\n \n rust_scheduler::rust_scheduler(rust_kernel *kernel,\n-                               rust_srv *srv,\n                                size_t num_threads,\n                                rust_sched_id id) :\n     kernel(kernel),\n-    srv(srv),\n-    env(srv->env),\n     live_threads(num_threads),\n     live_tasks(0),\n     num_threads(num_threads),\n@@ -24,10 +21,9 @@ rust_scheduler::~rust_scheduler() {\n \n rust_sched_launcher *\n rust_scheduler::create_task_thread(int id) {\n-    rust_srv *srv = this->srv->clone();\n     rust_sched_launcher *thread =\n         new (kernel, \"rust_thread_sched_launcher\")\n-        rust_thread_sched_launcher(this, srv, id);\n+        rust_thread_sched_launcher(this, id);\n     KLOG(kernel, kern, \"created task thread: \" PTR \", id: %d\",\n           thread, id);\n     return thread;\n@@ -36,9 +32,7 @@ rust_scheduler::create_task_thread(int id) {\n void\n rust_scheduler::destroy_task_thread(rust_sched_launcher *thread) {\n     KLOG(kernel, kern, \"deleting task thread: \" PTR, thread);\n-    rust_srv *srv = thread->get_loop()->srv;\n     delete thread;\n-    delete srv;\n }\n \n void"}, {"sha": "cd98992b91785c25fced06e0cc16dd5b27720ae0", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -9,8 +9,6 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     // FIXME: Make these private\n public:\n     rust_kernel *kernel;\n-    rust_srv *srv;\n-    rust_env *env;\n private:\n     // Protects live_threads and cur_thread increments\n     lock_and_signal lock;\n@@ -34,7 +32,7 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     void exit();\n \n public:\n-    rust_scheduler(rust_kernel *kernel, rust_srv *srv, size_t num_threads,\n+    rust_scheduler(rust_kernel *kernel, size_t num_threads,\n                    rust_sched_id id);\n     ~rust_scheduler();\n "}, {"sha": "0d59c1cfee1e9ed4ba313e5f801d58535c4027d8", "filename": "src/rt/rust_srv.cpp", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/413994ea3eed976a6fe97f3d6cfeb0c2f453e77f/src%2Frt%2Frust_srv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/413994ea3eed976a6fe97f3d6cfeb0c2f453e77f/src%2Frt%2Frust_srv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.cpp?ref=413994ea3eed976a6fe97f3d6cfeb0c2f453e77f", "patch": "@@ -1,86 +0,0 @@\n-#include \"rust_internal.h\"\n-#include \"rust_srv.h\"\n-\n-rust_srv::rust_srv(rust_env *env) :\n-    env(env),\n-    local_region(this, false) {\n-}\n-\n-void\n-rust_srv::free(void *p) {\n-    ::free(p);\n-}\n-\n-void *\n-rust_srv::malloc(size_t bytes) {\n-    return ::malloc(bytes);\n-}\n-\n-void *\n-rust_srv::realloc(void *p, size_t bytes) {\n-    return ::realloc(p, bytes);\n-}\n-\n-void\n-rust_srv::log(char const *msg) {\n-    fprintf(stderr, \"rust: %s\\n\", msg);\n-    // FIXME: flushing each time is expensive, but at the moment\n-    // necessary to get output through before a rust_task::fail\n-    // call. This should be changed.\n-    fflush(stderr);\n-}\n-\n-void\n-rust_srv::fatal(const char *expression,\n-    const char *file,\n-    size_t line,\n-    const char *format,\n-    ...) {\n-    char buf[BUF_BYTES];\n-    va_list args;\n-    va_start(args, format);\n-    vsnprintf(buf, sizeof(buf), format, args);\n-    va_end(args);\n-\n-    char msg[BUF_BYTES];\n-    snprintf(msg, sizeof(msg),\n-             \"fatal, '%s' failed, %s:%d %s\",\n-             expression, file, (int)line, buf);\n-    log(msg);\n-    abort();\n-}\n-\n-void\n-rust_srv::warning(char const *expression,\n-    char const *file,\n-    size_t line,\n-    const char *format,\n-    ...) {\n-    char buf[BUF_BYTES];\n-    va_list args;\n-    va_start(args, format);\n-    vsnprintf(buf, sizeof(buf), format, args);\n-    va_end(args);\n-\n-    char msg[BUF_BYTES];\n-    snprintf(msg, sizeof(msg),\n-             \"warning: '%s', at: %s:%d %s\",\n-             expression, file, (int)line, buf);\n-    log(msg);\n-}\n-\n-rust_srv *\n-rust_srv::clone() {\n-    return new rust_srv(env);\n-}\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n-//"}, {"sha": "2a28e49a55603b48ccd859da8c27543d4867f83b", "filename": "src/rt/rust_srv.h", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/413994ea3eed976a6fe97f3d6cfeb0c2f453e77f/src%2Frt%2Frust_srv.h", "raw_url": "https://github.com/rust-lang/rust/raw/413994ea3eed976a6fe97f3d6cfeb0c2f453e77f/src%2Frt%2Frust_srv.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.h?ref=413994ea3eed976a6fe97f3d6cfeb0c2f453e77f", "patch": "@@ -1,29 +0,0 @@\n-// -*- c++ -*-\n-#ifndef RUST_SRV_H\n-#define RUST_SRV_H\n-\n-#include \"rust_internal.h\"\n-\n-class rust_srv {\n-public:\n-    rust_env *env;\n-    memory_region local_region;\n-    void log(char const *msg);\n-    void fatal(char const *expression,\n-        char const *file,\n-        size_t line,\n-        char const *format,\n-        ...);\n-    void warning(char const *expression,\n-        char const *file,\n-        size_t line,\n-        char const *format,\n-        ...);\n-    void free(void *);\n-    void *malloc(size_t);\n-    void *realloc(void *, size_t);\n-    rust_srv(rust_env *);\n-    rust_srv *clone();\n-};\n-\n-#endif /* RUST_SRV_H */"}, {"sha": "bb8db18bd086fc07f34e3fa42ca9a37db0f4eeeb", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/128a8b6ed500f74fa802aa9749b3b7a19ebfffc9/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=128a8b6ed500f74fa802aa9749b3b7a19ebfffc9", "patch": "@@ -27,7 +27,7 @@ rust_task::rust_task(rust_sched_loop *sched_loop, rust_task_state state,\n     name(name),\n     list_index(-1),\n     rendezvous_ptr(0),\n-    local_region(&sched_loop->srv->local_region),\n+    local_region(&sched_loop->local_region),\n     boxed(&local_region),\n     unwinding(false),\n     propagate_failure(true),"}]}