{"sha": "acc9428c6a99d199f35032ec7f794385e4c9fd24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYzk0MjhjNmE5OWQxOTlmMzUwMzJlYzdmNzk0Mzg1ZTRjOWZkMjQ=", "commit": {"author": {"name": "Greg Chapple", "email": "gregchapple1@gmail.com", "date": "2016-01-07T16:12:28Z"}, "committer": {"name": "Greg Chapple", "email": "gregchapple1@gmail.com", "date": "2016-01-14T17:34:42Z"}, "message": "Display better snippet for invalid char literal\n\nGiven this code:\n\n    fn main() {\n        let _ = 'abcd';\n    }\n\nThe compiler would give a message like:\n\n    error: character literal may only contain one codepoint: ';\n    let _ = 'abcd';\n                 ^~\n\nWith this change, the message now displays:\n\n    error: character literal may only contain one codepoint: 'abcd'\n    let _ = 'abcd'\n            ^~~~~~\n\nFixes #30033", "tree": {"sha": "ea9da6f39079fa1f203a7ada38a6da79a6d7ada1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea9da6f39079fa1f203a7ada38a6da79a6d7ada1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acc9428c6a99d199f35032ec7f794385e4c9fd24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acc9428c6a99d199f35032ec7f794385e4c9fd24", "html_url": "https://github.com/rust-lang/rust/commit/acc9428c6a99d199f35032ec7f794385e4c9fd24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acc9428c6a99d199f35032ec7f794385e4c9fd24/comments", "author": {"login": "gchp", "id": 1315394, "node_id": "MDQ6VXNlcjEzMTUzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1315394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchp", "html_url": "https://github.com/gchp", "followers_url": "https://api.github.com/users/gchp/followers", "following_url": "https://api.github.com/users/gchp/following{/other_user}", "gists_url": "https://api.github.com/users/gchp/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchp/subscriptions", "organizations_url": "https://api.github.com/users/gchp/orgs", "repos_url": "https://api.github.com/users/gchp/repos", "events_url": "https://api.github.com/users/gchp/events{/privacy}", "received_events_url": "https://api.github.com/users/gchp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gchp", "id": 1315394, "node_id": "MDQ6VXNlcjEzMTUzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1315394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchp", "html_url": "https://github.com/gchp", "followers_url": "https://api.github.com/users/gchp/followers", "following_url": "https://api.github.com/users/gchp/following{/other_user}", "gists_url": "https://api.github.com/users/gchp/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchp/subscriptions", "organizations_url": "https://api.github.com/users/gchp/orgs", "repos_url": "https://api.github.com/users/gchp/repos", "events_url": "https://api.github.com/users/gchp/events{/privacy}", "received_events_url": "https://api.github.com/users/gchp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c83fef245f1cb2e523c8913b8968c98faec1f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c83fef245f1cb2e523c8913b8968c98faec1f4", "html_url": "https://github.com/rust-lang/rust/commit/d3c83fef245f1cb2e523c8913b8968c98faec1f4"}], "stats": {"total": 97, "additions": 81, "deletions": 16}, "files": [{"sha": "3183dfbd954f57dff4642fe8dceffb231e7c39f9", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/acc9428c6a99d199f35032ec7f794385e4c9fd24/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc9428c6a99d199f35032ec7f794385e4c9fd24/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=acc9428c6a99d199f35032ec7f794385e4c9fd24", "patch": "@@ -1195,6 +1195,7 @@ impl<'a> StringReader<'a> {\n             }\n             '\\'' => {\n                 // Either a character constant 'a' OR a lifetime name 'abc\n+                let start_with_quote = self.last_pos;\n                 self.bump();\n                 let start = self.last_pos;\n \n@@ -1208,6 +1209,14 @@ impl<'a> StringReader<'a> {\n                     while ident_continue(self.curr) {\n                         self.bump();\n                     }\n+                    // lifetimes shouldn't end with a single quote\n+                    // if we find one, then this is an invalid character literal\n+                    if self.curr_is('\\'') {\n+                        panic!(self.fatal_span_verbose(\n+                               start_with_quote, self.pos,\n+                               String::from(\"character literal may only contain one codepoint\")));\n+\n+                    }\n \n                     // Include the leading `'` in the real identifier, for macro\n                     // expansion purposes. See #12512 for the gory details of why\n@@ -1233,26 +1242,22 @@ impl<'a> StringReader<'a> {\n                        !keyword_checking_token.is_keyword(token::keywords::Static) {\n                         self.err_span_(start, last_bpos, \"invalid lifetime name\");\n                     }\n+\n                     return token::Lifetime(ident);\n                 }\n \n-                // Otherwise it is a character constant:\n                 let valid = self.scan_char_or_byte(start,\n                                                    c2,\n                                                    // ascii_only =\n                                                    false,\n                                                    '\\'');\n+\n                 if !self.curr_is('\\'') {\n-                    let last_bpos = self.last_pos;\n-                    panic!(self.fatal_span_verbose(// Byte offsetting here is okay because the\n-                                                   // character before position `start` is an\n-                                                   // ascii single quote.\n-                                                   start - BytePos(1),\n-                                                   last_bpos,\n-\n-                                                   String::from(\"character literal may only \\\n-                                                                 contain one codepoint\")));\n+                    panic!(self.fatal_span_verbose(\n+                           start_with_quote, self.last_pos,\n+                           String::from(\"character literal may only contain one codepoint\")));\n                 }\n+\n                 let id = if valid {\n                     self.name_from(start)\n                 } else {"}, {"sha": "7e22a11ca970d4364e67cca7ab8df2f903ea1123", "filename": "src/test/parse-fail/lex-bad-char-literals-1.rs", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/acc9428c6a99d199f35032ec7f794385e4c9fd24/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc9428c6a99d199f35032ec7f794385e4c9fd24/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-1.rs?ref=acc9428c6a99d199f35032ec7f794385e4c9fd24", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -25,8 +25,3 @@ static s: &'static str =\n     \"\\\u25cf\" //~ ERROR: unknown character escape\n ;\n \n-// THIS MUST BE LAST, since it kills the lexer\n-\n-static c: char =\n-    '\u25cf  //~ ERROR: character literal may only contain one codepoint\n-;", "previous_filename": "src/test/parse-fail/lex-bad-char-literals.rs"}, {"sha": "8bd6808c5ffd439e0e5ccd41382b54d2f4238c87", "filename": "src/test/parse-fail/lex-bad-char-literals-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/acc9428c6a99d199f35032ec7f794385e4c9fd24/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc9428c6a99d199f35032ec7f794385e4c9fd24/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-2.rs?ref=acc9428c6a99d199f35032ec7f794385e4c9fd24", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+// This test needs to the last one appearing in this file as it kills the parser\n+static c: char =\n+    'nope' //~ ERROR: character literal may only contain one codepoint: 'nope'\n+;\n+"}, {"sha": "92432dc8b63eb14c13df104a9ea5e420adf5265a", "filename": "src/test/parse-fail/lex-bad-char-literals-3.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/acc9428c6a99d199f35032ec7f794385e4c9fd24/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc9428c6a99d199f35032ec7f794385e4c9fd24/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-3.rs?ref=acc9428c6a99d199f35032ec7f794385e4c9fd24", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+// This test needs to the last one appearing in this file as it kills the parser\n+static c: char =\n+    '\u25cf\u25cf' //~ ERROR: character literal may only contain one codepoint: '\u25cf\n+;"}, {"sha": "b230e62360380d2bc56920933bce199131b49973", "filename": "src/test/parse-fail/lex-bad-char-literals-4.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/acc9428c6a99d199f35032ec7f794385e4c9fd24/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc9428c6a99d199f35032ec7f794385e4c9fd24/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-4.rs?ref=acc9428c6a99d199f35032ec7f794385e4c9fd24", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+//\n+// This test needs to the last one appearing in this file as it kills the parser\n+static c: char =\n+    '\u25cf  //~ ERROR: character literal may only contain one codepoint: '\u25cf\n+;"}, {"sha": "5259175b186f561a91078b23bc80eb08bd5af866", "filename": "src/test/parse-fail/lex-bad-char-literals-5.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/acc9428c6a99d199f35032ec7f794385e4c9fd24/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc9428c6a99d199f35032ec7f794385e4c9fd24/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-5.rs?ref=acc9428c6a99d199f35032ec7f794385e4c9fd24", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+//\n+// This test needs to the last one appearing in this file as it kills the parser\n+static c: char =\n+    '\\x10\\x10'  //~ ERROR: character literal may only contain one codepoint: '\\x10\n+;"}]}