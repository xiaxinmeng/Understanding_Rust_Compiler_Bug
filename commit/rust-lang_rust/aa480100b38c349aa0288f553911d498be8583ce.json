{"sha": "aa480100b38c349aa0288f553911d498be8583ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNDgwMTAwYjM4YzM0OWFhMDI4OGY1NTM5MTFkNDk4YmU4NTgzY2U=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-15T23:55:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-15T23:55:08Z"}, "message": "Rollup merge of #62662 - DutchGhost:fix_space, r=sfackler\n\nadd spaces in front of trait requirements in libcore/cell.rs\n\nAdds spaces before trait requirements in `libcore/cell.rs`.", "tree": {"sha": "03d9da5c4a64ceaeabf144fe812671e12da3f31e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03d9da5c4a64ceaeabf144fe812671e12da3f31e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa480100b38c349aa0288f553911d498be8583ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdLRJcCRBK7hj4Ov3rIwAAdHIIAGRctDiQ3TzFC1nRKAzsjPjU\n8Mfj7jsskjIApSo91SG/QKGEg1uQnLrAMmWPzjfYFISsUph79cep6igpu3i6zzkM\nDmR7femeAz4A9Qhtpr2cmMlROBdSQ+UnRm1VQCcW+/nxp3hCDPipCDcoHuzMZnSb\ngBSTWnHkkBRIMX4eo8KS2IgG0f/TEZVZAOHdinwA+C5mW/I8ZAJBzRM4+fg3tDYh\nHlMqAc9UuY5R1SaHLtQlCueyzZTgCJD3XXoJol/liiBIeTkXLUxDf6f9CgX+VXtE\nnxftn7wWqbeE+WVTPNJ6Q6u75zEvLeLWYeLg1fFJiMaXW/Dg94tNOGrnNqSFhQQ=\n=Cx1S\n-----END PGP SIGNATURE-----\n", "payload": "tree 03d9da5c4a64ceaeabf144fe812671e12da3f31e\nparent 4efdff7dbbfd4bd3051b88220abf35fcf1bac95e\nparent 4e1d467700d9be5341f98662ee6ca329e2875d51\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1563234908 -0400\ncommitter GitHub <noreply@github.com> 1563234908 -0400\n\nRollup merge of #62662 - DutchGhost:fix_space, r=sfackler\n\nadd spaces in front of trait requirements in libcore/cell.rs\n\nAdds spaces before trait requirements in `libcore/cell.rs`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa480100b38c349aa0288f553911d498be8583ce", "html_url": "https://github.com/rust-lang/rust/commit/aa480100b38c349aa0288f553911d498be8583ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa480100b38c349aa0288f553911d498be8583ce/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4efdff7dbbfd4bd3051b88220abf35fcf1bac95e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4efdff7dbbfd4bd3051b88220abf35fcf1bac95e", "html_url": "https://github.com/rust-lang/rust/commit/4efdff7dbbfd4bd3051b88220abf35fcf1bac95e"}, {"sha": "4e1d467700d9be5341f98662ee6ca329e2875d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1d467700d9be5341f98662ee6ca329e2875d51", "html_url": "https://github.com/rust-lang/rust/commit/4e1d467700d9be5341f98662ee6ca329e2875d51"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "f74e945b3cc1bf58b652e938f4629ce727026e87", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa480100b38c349aa0288f553911d498be8583ce/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa480100b38c349aa0288f553911d498be8583ce/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=aa480100b38c349aa0288f553911d498be8583ce", "patch": "@@ -290,7 +290,7 @@ impl<T:Copy> Clone for Cell<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T:Default> Default for Cell<T> {\n+impl<T: Default> Default for Cell<T> {\n     /// Creates a `Cell<T>`, with the `Default` value for T.\n     #[inline]\n     fn default() -> Cell<T> {\n@@ -299,18 +299,18 @@ impl<T:Default> Default for Cell<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T:PartialEq + Copy> PartialEq for Cell<T> {\n+impl<T: PartialEq + Copy> PartialEq for Cell<T> {\n     #[inline]\n     fn eq(&self, other: &Cell<T>) -> bool {\n         self.get() == other.get()\n     }\n }\n \n #[stable(feature = \"cell_eq\", since = \"1.2.0\")]\n-impl<T:Eq + Copy> Eq for Cell<T> {}\n+impl<T: Eq + Copy> Eq for Cell<T> {}\n \n #[stable(feature = \"cell_ord\", since = \"1.10.0\")]\n-impl<T:PartialOrd + Copy> PartialOrd for Cell<T> {\n+impl<T: PartialOrd + Copy> PartialOrd for Cell<T> {\n     #[inline]\n     fn partial_cmp(&self, other: &Cell<T>) -> Option<Ordering> {\n         self.get().partial_cmp(&other.get())\n@@ -338,7 +338,7 @@ impl<T:PartialOrd + Copy> PartialOrd for Cell<T> {\n }\n \n #[stable(feature = \"cell_ord\", since = \"1.10.0\")]\n-impl<T:Ord + Copy> Ord for Cell<T> {\n+impl<T: Ord + Copy> Ord for Cell<T> {\n     #[inline]\n     fn cmp(&self, other: &Cell<T>) -> Ordering {\n         self.get().cmp(&other.get())\n@@ -1008,7 +1008,7 @@ impl<T: Clone> Clone for RefCell<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T:Default> Default for RefCell<T> {\n+impl<T: Default> Default for RefCell<T> {\n     /// Creates a `RefCell<T>`, with the `Default` value for T.\n     #[inline]\n     fn default() -> RefCell<T> {"}]}