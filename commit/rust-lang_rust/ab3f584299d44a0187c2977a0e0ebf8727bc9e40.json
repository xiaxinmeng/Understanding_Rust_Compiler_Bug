{"sha": "ab3f584299d44a0187c2977a0e0ebf8727bc9e40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiM2Y1ODQyOTlkNDRhMDE4N2MyOTc3YTBlMGViZjg3MjdiYzllNDA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-14T03:57:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-14T03:57:58Z"}, "message": "Merge #8006\n\n8006: Simpify mbe bindings builder r=edwin0cheng a=edwin0cheng\n\nbors r+\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "33d104885858015505256bdb6ce65e26ba010778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33d104885858015505256bdb6ce65e26ba010778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab3f584299d44a0187c2977a0e0ebf8727bc9e40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgTYnGCRBK7hj4Ov3rIwAAdHIIAGQqG/xvypi7PJjZsj/He/eT\nBfL03LU3Lj0uUWyroiPXbTYXIRbk9R7xr7r8nPsOTCMYmn4EVu/4JrQWohzCFAbR\nADjgH3npUprpu6tGFxGiqgL4Qbhs8N1dwoG54ZmT69Cb/NHQMA1Ybp8QjbepoQGq\nNv6NcHV1pUKtrLayX9lCZwv63eQVtTpDyVVB6aWho7QxNK2aoR+eNOp9ejBdEYLm\nE+ugoKpDvmNP317htJ6Jgsb8Hg6vHTOkoCY3PGUopCjfXbPHsWrv3vA7JhE1xSVw\nwmAvTKjRYJZ57hpSDOIJufI+T6/5/KYsIJUiD/pb+5FIXyP7JYJYPgS6w2gdhoQ=\n=dK2s\n-----END PGP SIGNATURE-----\n", "payload": "tree 33d104885858015505256bdb6ce65e26ba010778\nparent 7808982952999ed8499b70c77ceaec265e0c1807\nparent 7279749bbb0888f265a7ebdcffeff10c0fc88154\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615694278 +0000\ncommitter GitHub <noreply@github.com> 1615694278 +0000\n\nMerge #8006\n\n8006: Simpify mbe bindings builder r=edwin0cheng a=edwin0cheng\n\nbors r+\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3f584299d44a0187c2977a0e0ebf8727bc9e40", "html_url": "https://github.com/rust-lang/rust/commit/ab3f584299d44a0187c2977a0e0ebf8727bc9e40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab3f584299d44a0187c2977a0e0ebf8727bc9e40/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7808982952999ed8499b70c77ceaec265e0c1807", "url": "https://api.github.com/repos/rust-lang/rust/commits/7808982952999ed8499b70c77ceaec265e0c1807", "html_url": "https://github.com/rust-lang/rust/commit/7808982952999ed8499b70c77ceaec265e0c1807"}, {"sha": "7279749bbb0888f265a7ebdcffeff10c0fc88154", "url": "https://api.github.com/repos/rust-lang/rust/commits/7279749bbb0888f265a7ebdcffeff10c0fc88154", "html_url": "https://github.com/rust-lang/rust/commit/7279749bbb0888f265a7ebdcffeff10c0fc88154"}], "stats": {"total": 120, "additions": 57, "deletions": 63}, "files": [{"sha": "2c69e896850dc70743990e3f636e9574ca96c7dd", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 57, "deletions": 63, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/ab3f584299d44a0187c2977a0e0ebf8727bc9e40/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3f584299d44a0187c2977a0e0ebf8727bc9e40/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=ab3f584299d44a0187c2977a0e0ebf8727bc9e40", "patch": "@@ -162,9 +162,9 @@ struct BindingsBuilder {\n impl BindingsBuilder {\n     fn alloc(&mut self) -> BindingsIdx {\n         let idx = self.nodes.len();\n-        self.nodes.push(Vec::with_capacity(8));\n+        self.nodes.push(Vec::new());\n         let nidx = self.nested.len();\n-        self.nested.push(Vec::with_capacity(8));\n+        self.nested.push(Vec::new());\n         BindingsIdx(idx, nidx)\n     }\n \n@@ -182,11 +182,8 @@ impl BindingsBuilder {\n             if len < 4 {\n                 target.push(target[idx].clone())\n             } else {\n-                let mut item = Vec::with_capacity(8);\n-                item.push(LinkNode::Parent { idx, len });\n-                target.push(item);\n+                target.push(vec![LinkNode::Parent { idx, len }]);\n             }\n-\n             new_idx\n         }\n     }\n@@ -212,19 +209,22 @@ impl BindingsBuilder {\n     fn push_default(&mut self, idx: &mut BindingsIdx) {\n         self.nested[idx.1].push(LinkNode::Node(idx.0));\n         let new_idx = self.nodes.len();\n-        self.nodes.push(Vec::with_capacity(8));\n+        self.nodes.push(Vec::new());\n         idx.0 = new_idx;\n     }\n \n     fn build(self, idx: &BindingsIdx) -> Bindings {\n         let mut bindings = Bindings::default();\n-        self.build_recur(&mut bindings, self.nodes[idx.0].clone());\n+        self.build_inner(&mut bindings, &self.nodes[idx.0]);\n         bindings\n     }\n \n-    fn build_recur(&self, bindings: &mut Bindings, nodes: Vec<LinkNode<Rc<BindingKind>>>) {\n-        for cmd in self.flatten_nodes(nodes) {\n-            match &*cmd {\n+    fn build_inner(&self, bindings: &mut Bindings, link_nodes: &Vec<LinkNode<Rc<BindingKind>>>) {\n+        let mut nodes = Vec::new();\n+        self.collect_nodes(&link_nodes, &mut nodes);\n+\n+        for cmd in nodes {\n+            match &**cmd {\n                 BindingKind::Empty(name) => {\n                     bindings.push_empty(name);\n                 }\n@@ -234,10 +234,11 @@ impl BindingsBuilder {\n                 BindingKind::Fragment(name, fragment) => {\n                     bindings.inner.insert(name.clone(), Binding::Fragment(fragment.clone()));\n                 }\n-                BindingKind::Nested(idx, list) => {\n-                    let list = self.flatten_nested(*idx, *list);\n+                BindingKind::Nested(idx, nested_idx) => {\n+                    let mut nested_nodes = Vec::new();\n+                    self.collect_nested(*idx, *nested_idx, &mut nested_nodes);\n \n-                    for (idx, iter) in list.enumerate() {\n+                    for (idx, iter) in nested_nodes.into_iter().enumerate() {\n                         for (key, value) in &iter.inner {\n                             let bindings = bindings\n                                 .inner\n@@ -258,62 +259,55 @@ impl BindingsBuilder {\n         }\n     }\n \n-    fn flatten_nested_ref(&self, id: usize, len: usize) -> Vec<Vec<LinkNode<Rc<BindingKind>>>> {\n-        self.nested[id]\n-            .iter()\n-            .take(len)\n-            .map(|it| match it {\n-                LinkNode::Node(id) => vec![self.nodes[*id].clone()],\n-                LinkNode::Parent { idx, len } => self.flatten_nested_ref(*idx, *len),\n-            })\n-            .flatten()\n-            .collect()\n+    fn collect_nested_ref<'a>(\n+        &'a self,\n+        id: usize,\n+        len: usize,\n+        nested_refs: &mut Vec<&'a Vec<LinkNode<Rc<BindingKind>>>>,\n+    ) {\n+        self.nested[id].iter().take(len).for_each(|it| match it {\n+            LinkNode::Node(id) => nested_refs.push(&self.nodes[*id]),\n+            LinkNode::Parent { idx, len } => self.collect_nested_ref(*idx, *len, nested_refs),\n+        });\n     }\n \n-    fn flatten_nested<'a>(\n-        &'a self,\n-        idx: usize,\n-        list: usize,\n-    ) -> impl Iterator<Item = Bindings> + 'a {\n-        let last = self.nodes[idx].clone();\n-        self.nested[list]\n-            .iter()\n-            .map(move |it| match *it {\n-                LinkNode::Node(idx) => vec![self.nodes[idx].clone()],\n-                LinkNode::Parent { idx, len } => self.flatten_nested_ref(idx, len),\n-            })\n-            .flatten()\n-            .chain(std::iter::once(last))\n-            .map(move |iter| {\n-                let mut child_bindings = Bindings::default();\n-                self.build_recur(&mut child_bindings, iter);\n-                child_bindings\n-            })\n+    fn collect_nested(&self, idx: usize, nested_idx: usize, nested: &mut Vec<Bindings>) {\n+        let last = &self.nodes[idx];\n+        let mut nested_refs = Vec::new();\n+        self.nested[nested_idx].iter().for_each(|it| match *it {\n+            LinkNode::Node(idx) => nested_refs.push(&self.nodes[idx]),\n+            LinkNode::Parent { idx, len } => self.collect_nested_ref(idx, len, &mut nested_refs),\n+        });\n+        nested_refs.push(last);\n+\n+        nested_refs.into_iter().for_each(|iter| {\n+            let mut child_bindings = Bindings::default();\n+            self.build_inner(&mut child_bindings, &iter);\n+            nested.push(child_bindings)\n+        })\n     }\n \n-    fn flatten_nodes_ref(&self, id: usize, len: usize) -> Vec<Rc<BindingKind>> {\n-        self.nodes[id]\n-            .iter()\n-            .take(len)\n-            .map(|it| match it {\n-                LinkNode::Node(it) => vec![it.clone()],\n-                LinkNode::Parent { idx, len } => self.flatten_nodes_ref(*idx, *len),\n-            })\n-            .flatten()\n-            .collect()\n+    fn collect_nodes_ref<'a>(\n+        &'a self,\n+        id: usize,\n+        len: usize,\n+        nodes: &mut Vec<&'a Rc<BindingKind>>,\n+    ) {\n+        self.nodes[id].iter().take(len).for_each(|it| match it {\n+            LinkNode::Node(it) => nodes.push(it),\n+            LinkNode::Parent { idx, len } => self.collect_nodes_ref(*idx, *len, nodes),\n+        });\n     }\n \n-    fn flatten_nodes<'a>(\n+    fn collect_nodes<'a>(\n         &'a self,\n-        nodes: Vec<LinkNode<Rc<BindingKind>>>,\n-    ) -> impl Iterator<Item = Rc<BindingKind>> + 'a {\n-        nodes\n-            .into_iter()\n-            .map(move |it| match it {\n-                LinkNode::Node(it) => vec![it],\n-                LinkNode::Parent { idx, len } => self.flatten_nodes_ref(idx, len),\n-            })\n-            .flatten()\n+        link_nodes: &'a Vec<LinkNode<Rc<BindingKind>>>,\n+        nodes: &mut Vec<&'a Rc<BindingKind>>,\n+    ) {\n+        link_nodes.into_iter().for_each(|it| match it {\n+            LinkNode::Node(it) => nodes.push(it),\n+            LinkNode::Parent { idx, len } => self.collect_nodes_ref(*idx, *len, nodes),\n+        });\n     }\n }\n "}]}