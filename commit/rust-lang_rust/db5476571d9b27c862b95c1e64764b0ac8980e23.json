{"sha": "db5476571d9b27c862b95c1e64764b0ac8980e23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNTQ3NjU3MWQ5YjI3Yzg2MmI5NWMxZTY0NzY0YjBhYzg5ODBlMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-02T04:22:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-02T04:22:23Z"}, "message": "Auto merge of #52847 - upsuper:thread-stack-reserve, r=alexcrichton\n\nDon't commit thread stack on Windows\n\nOn Windows, there is a system level resource limitation called commit limit, which is roughly the sum of physical memory + paging files[1]. `CreateThread` by default commits the stack size[2], which unnecessarily takes such resource from the shared limit.\n\nThis PR changes it to only reserve the stack size rather than commit it. Reserved memory would only take the address space of the current process until it's actually accessed.\n\nThis should make the behavior on Windows match other platforms, and is also a pretty standard practice on Windows nowadays.\n\n[1] https://blogs.technet.microsoft.com/markrussinovich/2008/11/17/pushing-the-limits-of-windows-virtual-memory/\n[2] https://docs.microsoft.com/zh-cn/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createthread", "tree": {"sha": "3789d995d04ca786bdb61a277fc1522728f03316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3789d995d04ca786bdb61a277fc1522728f03316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db5476571d9b27c862b95c1e64764b0ac8980e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db5476571d9b27c862b95c1e64764b0ac8980e23", "html_url": "https://github.com/rust-lang/rust/commit/db5476571d9b27c862b95c1e64764b0ac8980e23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db5476571d9b27c862b95c1e64764b0ac8980e23/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "url": "https://api.github.com/repos/rust-lang/rust/commits/60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "html_url": "https://github.com/rust-lang/rust/commit/60c1ee7645299a3a62a4908173a82b9f0fe7bc03"}, {"sha": "fc8bb9c42c998dc5e82347d53f318b28d91fc9e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8bb9c42c998dc5e82347d53f318b28d91fc9e3", "html_url": "https://github.com/rust-lang/rust/commit/fc8bb9c42c998dc5e82347d53f318b28d91fc9e3"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "6f81afe66f95b694ae1123d9da74bfd501103a43", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5476571d9b27c862b95c1e64764b0ac8980e23/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5476571d9b27c862b95c1e64764b0ac8980e23/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=db5476571d9b27c862b95c1e64764b0ac8980e23", "patch": "@@ -296,6 +296,8 @@ pub const PIPE_READMODE_BYTE: DWORD = 0x00000000;\n \n pub const FD_SETSIZE: usize = 64;\n \n+pub const STACK_SIZE_PARAM_IS_A_RESERVATION: DWORD = 0x00010000;\n+\n #[repr(C)]\n #[cfg(not(target_pointer_width = \"64\"))]\n pub struct WSADATA {"}, {"sha": "85588cc6c8e85e074e3d3d52c085a9defbb46a16", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db5476571d9b27c862b95c1e64764b0ac8980e23/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5476571d9b27c862b95c1e64764b0ac8980e23/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=db5476571d9b27c862b95c1e64764b0ac8980e23", "patch": "@@ -42,7 +42,8 @@ impl Thread {\n         let stack_size = (stack + 0xfffe) & (!0xfffe);\n         let ret = c::CreateThread(ptr::null_mut(), stack_size,\n                                   thread_start, &*p as *const _ as *mut _,\n-                                  0, ptr::null_mut());\n+                                  c::STACK_SIZE_PARAM_IS_A_RESERVATION,\n+                                  ptr::null_mut());\n \n         return if ret as usize == 0 {\n             Err(io::Error::last_os_error())"}]}