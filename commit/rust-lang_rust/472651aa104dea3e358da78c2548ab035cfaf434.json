{"sha": "472651aa104dea3e358da78c2548ab035cfaf434", "node_id": "C_kwDOAAsO6NoAKDQ3MjY1MWFhMTA0ZGVhM2UzNThkYTc4YzI1NDhhYjAzNWNmYWY0MzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-07T06:54:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-07T06:54:47Z"}, "message": "Auto merge of #106558 - compiler-errors:rollup-lkii3j3, r=compiler-errors\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #106525 (Report WF error for chalk *and* new solver)\n - #106533 (Use smaller spans for missing lifetime/generic args)\n - #106543 (rustdoc: remove no-op CSS `.rustdoc.source .sidebar { width: 0 }`)\n - #106554 (Fix a typo in the explanation of E0588)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "547c9249a5b4d914b5cc27435bb309b85bd7a27b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/547c9249a5b4d914b5cc27435bb309b85bd7a27b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/472651aa104dea3e358da78c2548ab035cfaf434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/472651aa104dea3e358da78c2548ab035cfaf434", "html_url": "https://github.com/rust-lang/rust/commit/472651aa104dea3e358da78c2548ab035cfaf434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/472651aa104dea3e358da78c2548ab035cfaf434/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93bf84c9021350608607330175d0513f71f0f967", "url": "https://api.github.com/repos/rust-lang/rust/commits/93bf84c9021350608607330175d0513f71f0f967", "html_url": "https://github.com/rust-lang/rust/commit/93bf84c9021350608607330175d0513f71f0f967"}, {"sha": "01cb9dcd5b555c3b66f5a133b5cad5fab5245aec", "url": "https://api.github.com/repos/rust-lang/rust/commits/01cb9dcd5b555c3b66f5a133b5cad5fab5245aec", "html_url": "https://github.com/rust-lang/rust/commit/01cb9dcd5b555c3b66f5a133b5cad5fab5245aec"}], "stats": {"total": 164, "additions": 84, "deletions": 80}, "files": [{"sha": "995d945f1589e0d16df7a12cc0e09b7573c6df93", "filename": "compiler/rustc_error_codes/src/error_codes/E0588.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0588.md", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0588.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0588.md?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -11,7 +11,7 @@ struct Aligned(i32);\n struct Packed(Aligned);\n ```\n \n-Just like you cannot have both `align` and `packed` representation hints on a\n+Just like you cannot have both `align` and `packed` representation hints on the\n same type, a `packed` type cannot contain another type with the `align`\n representation hint. However, you can do the opposite:\n "}, {"sha": "574b1e8b485afad6ffc8d1ada76b48f564d73786", "filename": "compiler/rustc_hir_analysis/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -597,11 +597,15 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                 let span = self.path_segment.ident.span;\n \n                 // insert a suggestion of the form \"Y<'a, 'b>\"\n-                let ident = self.path_segment.ident.name.to_ident_string();\n-                let sugg = format!(\"{}<{}>\", ident, suggested_args);\n+                let sugg = format!(\"<{}>\", suggested_args);\n                 debug!(\"sugg: {:?}\", sugg);\n \n-                err.span_suggestion_verbose(span, &msg, sugg, Applicability::HasPlaceholders);\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_hi(),\n+                    &msg,\n+                    sugg,\n+                    Applicability::HasPlaceholders,\n+                );\n             }\n \n             AngleBrackets::Available => {\n@@ -643,11 +647,15 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                 let span = self.path_segment.ident.span;\n \n                 // insert a suggestion of the form \"Y<T, U>\"\n-                let ident = self.path_segment.ident.name.to_ident_string();\n-                let sugg = format!(\"{}<{}>\", ident, suggested_args);\n+                let sugg = format!(\"<{}>\", suggested_args);\n                 debug!(\"sugg: {:?}\", sugg);\n \n-                err.span_suggestion_verbose(span, &msg, sugg, Applicability::HasPlaceholders);\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_hi(),\n+                    &msg,\n+                    sugg,\n+                    Applicability::HasPlaceholders,\n+                );\n             }\n             AngleBrackets::Available => {\n                 let gen_args_span = self.gen_args.span().unwrap();"}, {"sha": "94dde1df26232eb358da6cf798c82c66c1da2550", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -1168,7 +1168,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n \n                     ty::PredicateKind::WellFormed(ty) => {\n-                        if self.tcx.sess.opts.unstable_opts.trait_solver != TraitSolver::Chalk {\n+                        if self.tcx.sess.opts.unstable_opts.trait_solver == TraitSolver::Classic {\n                             // WF predicates cannot themselves make\n                             // errors. They can only block due to\n                             // ambiguity; otherwise, they always\n@@ -1180,7 +1180,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             // which bounds actually failed to hold.\n                             self.tcx.sess.struct_span_err(\n                                 span,\n-                                &format!(\"the type `{}` is not well-formed (chalk)\", ty),\n+                                &format!(\"the type `{}` is not well-formed\", ty),\n                             )\n                         }\n                     }"}, {"sha": "d77b65ac6034316c4c8eeba584f32c3bcf979d7c", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -1598,14 +1598,10 @@ in storage.js\n \n \t.sidebar.shown,\n \t.source-sidebar-expanded .source .sidebar,\n-\t.sidebar:focus-within {\n+\t.rustdoc:not(.source) .sidebar:focus-within {\n \t\tleft: 0;\n \t}\n \n-\t.rustdoc.source > .sidebar {\n-\t\twidth: 0;\n-\t}\n-\n \t.mobile-topbar h2 {\n \t\tpadding-bottom: 0;\n \t\tmargin: auto 0.5em auto auto;"}, {"sha": "f3eb8ff76a38b945f0950d5f2d79bf3a339ca116", "filename": "src/test/rustdoc-gui/sidebar-source-code-display.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -171,15 +171,15 @@ assert-css: (\n \n // We now check that the scroll position is kept when opening the sidebar.\n click: \"#src-sidebar-toggle\"\n-wait-for-css: (\".sidebar\", {\"width\": \"0px\"})\n+wait-for-css: (\".sidebar\", {\"left\": \"-1000px\"})\n // We scroll to line 117 to change the scroll position.\n scroll-to: '//*[@id=\"117\"]'\n assert-window-property: {\"pageYOffset\": \"2542\"}\n // Expanding the sidebar...\n click: \"#src-sidebar-toggle\"\n-wait-for-css: (\".sidebar\", {\"width\": \"500px\"})\n+wait-for-css: (\".sidebar\", {\"left\": \"0px\"})\n click: \"#src-sidebar-toggle\"\n-wait-for-css: (\".sidebar\", {\"width\": \"0px\"})\n+wait-for-css: (\".sidebar\", {\"left\": \"-1000px\"})\n // The \"scrollTop\" property should be the same.\n assert-window-property: {\"pageYOffset\": \"2542\"}\n "}, {"sha": "c8a29b58d3458df5a5d2342a2c7c5b5964a1079e", "filename": "src/test/rustdoc-gui/sidebar-source-code.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -77,11 +77,11 @@ assert-count: (\"//*[@id='source-sidebar']/details[not(text()='lib2') and not(@op\n \n // We now switch to mobile mode.\n size: (600, 600)\n-wait-for-css: (\".source-sidebar-expanded nav.sidebar\", {\"width\": \"600px\"})\n+wait-for-css: (\".source-sidebar-expanded nav.sidebar\", {\"left\": \"0px\"})\n // We collapse the sidebar.\n click: (10, 10)\n-// We check that the sidebar has the expected width (0).\n-assert-css: (\"nav.sidebar\", {\"width\": \"0px\"})\n+// We check that the sidebar has been moved off-screen.\n+assert-css: (\"nav.sidebar\", {\"left\": \"-1000px\"})\n // We ensure that the class has been removed.\n assert-false: \".source-sidebar-expanded\"\n assert: \"nav.sidebar\""}, {"sha": "ffb602cf86190e7eca6d2eb4b6197868d93e8e4c", "filename": "src/test/rustdoc-ui/issue-105742.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Frustdoc-ui%2Fissue-105742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Frustdoc-ui%2Fissue-105742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105742.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type Item<'a, T>;\n help: add missing lifetime argument\n    |\n LL |     <Self as SVec>::Item<'a>,\n-   |                     ~~~~~~~~\n+   |                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:13:21\n@@ -28,7 +28,7 @@ LL |     type Item<'a, T>;\n help: add missing generic argument\n    |\n LL |     <Self as SVec>::Item<T>,\n-   |                     ~~~~~~~\n+   |                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:18:37\n@@ -44,7 +44,7 @@ LL |     type Item<'a, T>;\n help: add missing lifetime argument\n    |\n LL |     Output = <Index<<Self as SVec>::Item<'a>,\n-   |                                     ~~~~~~~~\n+   |                                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:18:37\n@@ -60,7 +60,7 @@ LL |     type Item<'a, T>;\n help: add missing generic argument\n    |\n LL |     Output = <Index<<Self as SVec>::Item<T>,\n-   |                                     ~~~~~~~\n+   |                                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:23:30\n@@ -76,7 +76,7 @@ LL |     type Item<'a, T>;\n help: add missing lifetime argument\n    |\n LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n-   |                              ~~~~~~~~\n+   |                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:23:30\n@@ -92,7 +92,7 @@ LL |     type Item<'a, T>;\n help: add missing generic argument\n    |\n LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n-   |                              ~~~~~~~\n+   |                                  +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:23:46\n@@ -108,7 +108,7 @@ LL |     type Item<'a, T>;\n help: add missing lifetime argument\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n-   |                                              ~~~~~~~~\n+   |                                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:23:46\n@@ -124,7 +124,7 @@ LL |     type Item<'a, T>;\n help: add missing generic argument\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n-   |                                              ~~~~~~~\n+   |                                                  +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:5:40\n@@ -140,7 +140,7 @@ LL |     type Item<'a, T>;\n help: add missing lifetime argument\n    |\n LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<'_> = T, Output = T>) {\n-   |                                        ~~~~~~~~\n+   |                                            ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:5:40\n@@ -156,7 +156,7 @@ LL |     type Item<'a, T>;\n help: add missing generic argument\n    |\n LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<T> = T, Output = T>) {\n-   |                                        ~~~~~~~\n+   |                                            +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:13:21\n@@ -172,7 +172,7 @@ LL |     type Item<'a, T>;\n help: add missing lifetime argument\n    |\n LL |     <Self as SVec>::Item<'a>,\n-   |                     ~~~~~~~~\n+   |                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:13:21\n@@ -188,7 +188,7 @@ LL |     type Item<'a, T>;\n help: add missing generic argument\n    |\n LL |     <Self as SVec>::Item<T>,\n-   |                     ~~~~~~~\n+   |                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:18:37\n@@ -204,7 +204,7 @@ LL |     type Item<'a, T>;\n help: add missing lifetime argument\n    |\n LL |     Output = <Index<<Self as SVec>::Item<'a>,\n-   |                                     ~~~~~~~~\n+   |                                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:18:37\n@@ -220,7 +220,7 @@ LL |     type Item<'a, T>;\n help: add missing generic argument\n    |\n LL |     Output = <Index<<Self as SVec>::Item<T>,\n-   |                                     ~~~~~~~\n+   |                                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:23:30\n@@ -236,7 +236,7 @@ LL |     type Item<'a, T>;\n help: add missing lifetime argument\n    |\n LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n-   |                              ~~~~~~~~\n+   |                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:23:30\n@@ -252,7 +252,7 @@ LL |     type Item<'a, T>;\n help: add missing generic argument\n    |\n LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n-   |                              ~~~~~~~\n+   |                                  +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:23:46\n@@ -268,7 +268,7 @@ LL |     type Item<'a, T>;\n help: add missing lifetime argument\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n-   |                                              ~~~~~~~~\n+   |                                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:23:46\n@@ -284,7 +284,7 @@ LL |     type Item<'a, T>;\n help: add missing generic argument\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n-   |                                              ~~~~~~~\n+   |                                                  +++\n \n error[E0038]: the trait `SVec` cannot be made into an object\n   --> $DIR/issue-105742.rs:5:31\n@@ -329,7 +329,7 @@ LL |     type Item<'a, T>;\n help: add missing lifetime argument\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n-   |                                      ~~~~~~~~\n+   |                                          ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:35:38\n@@ -345,7 +345,7 @@ LL |     type Item<'a, T>;\n help: add missing generic argument\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n-   |                                      ~~~~~~~\n+   |                                          +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:35:38\n@@ -361,7 +361,7 @@ LL |     type Item<'a, T>;\n help: add missing lifetime argument\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n-   |                                      ~~~~~~~~\n+   |                                          ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n   --> $DIR/issue-105742.rs:35:38\n@@ -377,7 +377,7 @@ LL |     type Item<'a, T>;\n help: add missing generic argument\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n-   |                                      ~~~~~~~\n+   |                                          +++\n \n error: aborting due to 23 previous errors\n "}, {"sha": "c2c8aa6aabec2990a6901e37db124fd05adf349f", "filename": "src/test/ui/chalkify/recursive_where_clause_on_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.rs?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -25,6 +25,6 @@ fn foo<T: Foo>() {\n fn main() {\n     // For some reason, the error is duplicated...\n \n-    foo::<S>() //~ ERROR the type `S` is not well-formed (chalk)\n-    //~^ ERROR the type `S` is not well-formed (chalk)\n+    foo::<S>() //~ ERROR the type `S` is not well-formed\n+    //~^ ERROR the type `S` is not well-formed\n }"}, {"sha": "cead5adeaaadb36826c91ebc838c00892dbd8405", "filename": "src/test/ui/chalkify/recursive_where_clause_on_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -1,10 +1,10 @@\n-error: the type `S` is not well-formed (chalk)\n+error: the type `S` is not well-formed\n   --> $DIR/recursive_where_clause_on_type.rs:28:11\n    |\n LL |     foo::<S>()\n    |           ^\n \n-error: the type `S` is not well-formed (chalk)\n+error: the type `S` is not well-formed\n   --> $DIR/recursive_where_clause_on_type.rs:28:5\n    |\n LL |     foo::<S>()"}, {"sha": "34d8ee281cf8ce77e0432bfc90c1a06a644b3876", "filename": "src/test/ui/consts/issue-103790.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fconsts%2Fissue-103790.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fconsts%2Fissue-103790.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-103790.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -20,7 +20,7 @@ LL | struct S<const S: (), const S: S = { S }>;\n help: add missing generic argument\n    |\n LL | struct S<const S: (), const S: S<S> = { S }>;\n-   |                                ~~~~\n+   |                                 +++\n \n error[E0391]: cycle detected when computing type of `S::S`\n   --> $DIR/issue-103790.rs:4:32"}, {"sha": "842b23bd49dd3b5d8b4aeec0a889ecd2970780e5", "filename": "src/test/ui/generic-associated-types/elided-in-expr-position.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type Assoc<'a> where Self: 'a;\n help: add missing lifetime argument\n    |\n LL |     fn g(&self) -> Self::Assoc<'_>;\n-   |                          ~~~~~~~~~\n+   |                               ++++\n \n error[E0107]: missing generics for associated type `Trait::Assoc`\n   --> $DIR/elided-in-expr-position.rs:31:26\n@@ -28,7 +28,7 @@ LL |     type Assoc<'a> where Self: 'a;\n help: add missing lifetime argument\n    |\n LL |     fn g(&self) -> Self::Assoc<'_> {\n-   |                          ~~~~~~~~~\n+   |                               ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "499221637ba7f01e3c5d60429a20c7e60d7f1ab6", "filename": "src/test/ui/generic-associated-types/gat-trait-path-missing-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |   type Y<'a>;\n help: add missing lifetime argument\n    |\n LL |   fn foo<'a, T1: X<Y<'a> = T1>>(t : T1) -> T1::Y<'a> {\n-   |                    ~~~~~\n+   |                     ++++\n \n error[E0107]: missing generics for associated type `X::Y`\n   --> $DIR/gat-trait-path-missing-lifetime.rs:8:20\n@@ -28,7 +28,7 @@ LL |   type Y<'a>;\n help: add missing lifetime argument\n    |\n LL |   fn foo<'a, T1: X<Y<'a> = T1>>(t : T1) -> T1::Y<'a> {\n-   |                    ~~~~~\n+   |                     ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4b4fe43e8c4fd523a6caf74d37abfaae189a1a3e", "filename": "src/test/ui/generic-associated-types/issue-71176.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type A<'a>;\n help: add missing lifetime argument\n    |\n LL |   inner: Box<dyn Provider<A<'a> = B>>,\n-   |                           ~~~~~\n+   |                            ++++\n \n error: aborting due to previous error\n "}, {"sha": "52c6e3eec6039379f378fa5725f73162c8c6130f", "filename": "src/test/ui/generic-associated-types/issue-76535.base.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type SubType<'a>: SubTrait where Self: 'a;\n help: add missing lifetime argument\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType<'a> = SubStruct>> = Box::new(SuperStruct::new(0));\n-   |                                 ~~~~~~~~~~~\n+   |                                        ++++\n \n error[E0038]: the trait `SuperTrait` cannot be made into an object\n   --> $DIR/issue-76535.rs:39:14"}, {"sha": "369b86d29284d7c8b682961750e9f3070a8c2447", "filename": "src/test/ui/generic-associated-types/issue-76535.extended.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.extended.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type SubType<'a>: SubTrait where Self: 'a;\n help: add missing lifetime argument\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType<'a> = SubStruct>> = Box::new(SuperStruct::new(0));\n-   |                                 ~~~~~~~~~~~\n+   |                                        ++++\n \n error: aborting due to previous error\n "}, {"sha": "bad8c1c9dba7b40c14f36b740be5ca2fce766d31", "filename": "src/test/ui/generic-associated-types/issue-78671.base.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.base.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type Member<T>;\n help: add missing generic argument\n    |\n LL |     Box::new(Family) as &dyn CollectionFamily<Member<T>=usize>\n-   |                                               ~~~~~~~~~\n+   |                                                     +++\n \n error[E0038]: the trait `CollectionFamily` cannot be made into an object\n   --> $DIR/issue-78671.rs:10:25"}, {"sha": "1d8a3d410f8dc0d971f8902f3c21d764e2949ffe", "filename": "src/test/ui/generic-associated-types/issue-78671.extended.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.extended.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type Member<T>;\n help: add missing generic argument\n    |\n LL |     Box::new(Family) as &dyn CollectionFamily<Member<T>=usize>\n-   |                                               ~~~~~~~~~\n+   |                                                     +++\n \n error: aborting due to previous error\n "}, {"sha": "f1de77bc3c0ab2045bd2fd7f663389ab022b3f08", "filename": "src/test/ui/generic-associated-types/issue-79422.base.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n help: add missing lifetime argument\n    |\n LL |         as Box<dyn MapLike<u8, u8, VRefCont<'a> = dyn RefCont<'_, u8>>>;\n-   |                                    ~~~~~~~~~~~~\n+   |                                            ++++\n \n error[E0038]: the trait `MapLike` cannot be made into an object\n   --> $DIR/issue-79422.rs:47:12"}, {"sha": "d79de0ca62792cbffd112b529c527b094aaac760", "filename": "src/test/ui/generic-associated-types/issue-79422.extended.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n help: add missing lifetime argument\n    |\n LL |         as Box<dyn MapLike<u8, u8, VRefCont<'a> = dyn RefCont<'_, u8>>>;\n-   |                                    ~~~~~~~~~~~~\n+   |                                            ++++\n \n error[E0271]: type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == (dyn RefCont<'_, u8> + 'static)`\n   --> $DIR/issue-79422.rs:44:13"}, {"sha": "6e0d2ff4ded410dbec1db63e59320b960db0b91e", "filename": "src/test/ui/generic-associated-types/issue-79636-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type Wrapped<B>;\n help: add missing generic argument\n    |\n LL |     MInner: Monad<Unwrapped = A, Wrapped<B> = MOuter::Wrapped<A>>,\n-   |                                  ~~~~~~~~~~\n+   |                                         +++\n \n error: aborting due to previous error\n "}, {"sha": "16287323995de2a6bdcf8ff7368dbc7d14482239", "filename": "src/test/ui/generic-associated-types/issue-79636-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type Wrapped<A>: SomeTrait;\n help: add missing generic argument\n    |\n LL |     W: SomeTrait<Wrapped<A> = W>,\n-   |                  ~~~~~~~~~~\n+   |                         +++\n \n error: aborting due to previous error\n "}, {"sha": "4f4f96a4b9218dcc14bd009adbda44c4fe39a5e5", "filename": "src/test/ui/generic-associated-types/issue-80433.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type Output<'a>;\n help: add missing lifetime argument\n    |\n LL | fn test_simpler<'a>(dst: &'a mut impl TestMut<Output<'a> = &'a mut f32>)\n-   |                                               ~~~~~~~~~~\n+   |                                                     ++++\n \n error: aborting due to previous error\n "}, {"sha": "e0fc225f463aeed5609e35884edf2f3ffdecc43a", "filename": "src/test/ui/generic-associated-types/issue-81712-cyclic-traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type DType<T>: D<T, CType = Self>;\n help: add missing generic argument\n    |\n LL |     type CType: C<DType<T> = Self>;\n-   |                   ~~~~~~~~\n+   |                        +++\n \n error: aborting due to previous error\n "}, {"sha": "df30be65ec54b676a1a70282bf3c170cccf422de", "filename": "src/test/ui/generic-associated-types/issue-81862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type Item<'a>;\n help: add missing lifetime argument\n    |\n LL |     fn next(&mut self) -> Option<Self::Item<'_>>;\n-   |                                        ~~~~~~~~\n+   |                                            ++++\n \n error: aborting due to previous error\n "}, {"sha": "8f74b12c008e66785c95cd4f6d24e99bbf4343c8", "filename": "src/test/ui/generic-associated-types/missing_lifetime_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL |     type Y<'a, 'b>;\n help: add missing lifetime arguments\n    |\n LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y<'_, '_> = (&'c u32, &'d u32)>>) {}\n-   |                                ~~~~~~~~~\n+   |                                 ++++++++\n \n error[E0107]: this struct takes 3 lifetime arguments but 2 lifetime arguments were supplied\n   --> $DIR/missing_lifetime_args.rs:14:26"}, {"sha": "6450bbd8b43260993f059cb427c0b9dc4cf0a91e", "filename": "src/test/ui/generics/generic-type-less-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL | struct Vec<T, A = Heap>(\n help: add missing generic argument\n    |\n LL |     let _: Vec<T>;\n-   |            ~~~~~~\n+   |               +++\n \n error: aborting due to previous error\n "}, {"sha": "75e33f680eadb4ea4767d85e0a15c25e2fb643ff", "filename": "src/test/ui/generics/wrong-number-of-args.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -251,7 +251,7 @@ LL |     struct Ty<A, B>;\n help: add missing generic arguments\n    |\n LL |     type A = Ty<A, B>;\n-   |              ~~~~~~~~\n+   |                ++++++\n \n error[E0107]: this struct takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:30:14\n@@ -315,7 +315,7 @@ LL |     struct Ty<'a, T>;\n help: add missing generic argument\n    |\n LL |     type A = Ty<T>;\n-   |              ~~~~~\n+   |                +++\n \n error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:54:14\n@@ -391,7 +391,7 @@ LL |     struct Ty<A, B, C = &'static str>;\n help: add missing generic arguments\n    |\n LL |     type A = Ty<A, B>;\n-   |              ~~~~~~~~\n+   |                ++++++\n \n error[E0107]: this struct takes at least 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:84:14\n@@ -483,7 +483,7 @@ LL |     trait GenericType<A> {\n help: add missing generic argument\n    |\n LL |     type D = Box<dyn GenericType<A>>;\n-   |                      ~~~~~~~~~~~~~~\n+   |                                 +++\n \n error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:133:22\n@@ -892,7 +892,7 @@ LL |         type A = HashMap;\n help: add missing generic arguments\n    |\n LL |         type A = HashMap<K, V>;\n-   |                  ~~~~~~~~~~~~~\n+   |                         ++++++\n \n error[E0107]: this struct takes at least 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:314:18\n@@ -954,7 +954,7 @@ LL |         type A = Result;\n help: add missing generic arguments\n    |\n LL |         type A = Result<T, E>;\n-   |                  ~~~~~~~~~~~~\n+   |                        ++++++\n \n error[E0107]: this enum takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:338:18"}, {"sha": "86d7184da7a4511a65b05bd4ef34e3127c550a51", "filename": "src/test/ui/impl-trait/issues/issue-92305.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -7,7 +7,7 @@ LL | fn f<T>(data: &[T]) -> impl Iterator<Item = Vec> {\n help: add missing generic argument\n    |\n LL | fn f<T>(data: &[T]) -> impl Iterator<Item = Vec<T>> {\n-   |                                             ~~~~~~\n+   |                                                +++\n \n error: aborting due to previous error\n "}, {"sha": "3a43627e69105d5d680185b91a564c4265619797", "filename": "src/test/ui/issues/issue-14092.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fissues%2Fissue-14092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fissues%2Fissue-14092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14092.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -7,7 +7,7 @@ LL | fn fn1(0: Box) {}\n help: add missing generic argument\n    |\n LL | fn fn1(0: Box<T>) {}\n-   |           ~~~~~~\n+   |              +++\n \n error: aborting due to previous error\n "}, {"sha": "2c325ffcceeaa0d6064be4e5fb64829f19739cf8", "filename": "src/test/ui/issues/issue-23024.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -16,7 +16,7 @@ LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n help: add missing generic argument\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn<Args>)(3));\n-   |                                       ~~~~~~~~\n+   |                                         ++++++\n \n error[E0191]: the value of the associated type `Output` (from trait `FnOnce`) must be specified\n   --> $DIR/issue-23024.rs:8:39"}, {"sha": "6c5917bdf6ece356714697546ba3c38ecfb7a5e8", "filename": "src/test/ui/issues/issue-86756.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -42,7 +42,7 @@ LL | trait Foo<T, T = T> {}\n help: add missing generic argument\n    |\n LL |     eq::<dyn, Foo<T>>\n-   |               ~~~~~~\n+   |                  +++\n \n error: aborting due to 3 previous errors; 1 warning emitted\n "}, {"sha": "20159e14407201567205320c515ef90a716120b0", "filename": "src/test/ui/lifetimes/missing-lifetime-in-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -39,7 +39,7 @@ LL |     type Bar<'b>\n help: add missing lifetime argument\n    |\n LL | type C<'a, 'b> = <A<'a> as Trait>::Bar<'a>;\n-   |                                    ~~~~~~~\n+   |                                       ++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5b54880a685524c6cf60a08c293b3753688587a4", "filename": "src/test/ui/tag-type-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Ftag-type-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Ftag-type-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-type-args.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL | enum Quux<T> { Bar }\n help: add missing generic argument\n    |\n LL | fn foo(c: Quux<T>) { assert!((false)); }\n-   |           ~~~~~~~\n+   |               +++\n \n error: aborting due to previous error\n "}, {"sha": "fafff19f8f6ec0cdd29a3b92a7bc25b31192ec6e", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -28,7 +28,7 @@ LL |         input_cells: Vec::new()\n help: add missing generic argument\n    |\n LL |         input_cells: Vec<T>::new()\n-   |                      ~~~~~~\n+   |                         +++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d0ec47d61321a6642de619bd91e7671485504b39", "filename": "src/test/ui/ufcs/ufcs-qpath-missing-params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472651aa104dea3e358da78c2548ab035cfaf434/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr?ref=472651aa104dea3e358da78c2548ab035cfaf434", "patch": "@@ -12,7 +12,7 @@ LL | pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n help: add missing generic argument\n    |\n LL |     <String as IntoCow<B>>::into_cow(\"foo\".to_string());\n-   |                ~~~~~~~~~~\n+   |                       +++\n \n error[E0107]: missing generics for trait `IntoCow`\n   --> $DIR/ufcs-qpath-missing-params.rs:17:16\n@@ -28,7 +28,7 @@ LL | pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n help: add missing generic argument\n    |\n LL |     <String as IntoCow<B>>::into_cow::<str>(\"foo\".to_string());\n-   |                ~~~~~~~~~~\n+   |                       +++\n \n error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/ufcs-qpath-missing-params.rs:17:26"}]}