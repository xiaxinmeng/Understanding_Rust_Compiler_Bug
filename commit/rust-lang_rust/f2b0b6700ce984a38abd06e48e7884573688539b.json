{"sha": "f2b0b6700ce984a38abd06e48e7884573688539b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYjBiNjcwMGNlOTg0YTM4YWJkMDZlNDhlNzg4NDU3MzY4ODUzOWI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-07-13T03:05:22Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-07-13T03:05:22Z"}, "message": "Fix bitslice printing.\n\nIn multiple ways:\n\n- Two calls to `bits_to_string()` passed in byte lengths rather than bit\n  lengths, which meant only 1/8th of the `BitSlice` was printed.\n\n- `bit_str`'s purpose is entirely mysterious. I removed it and changed\n  its callers to print the indices in the obvious way.\n\n- `bits_to_string`'s inner loop was totally wrong, such that it printed\n  entirely bogus results.\n\n- `bits_to_string` now also adds a '|' between words, which makes the\n  output easier to read, e.g.:\n  `[ff-ff-ff-ff-ff-ff-ff-ff|ff-ff-ff-ff-ff-ff-ff-07]`.", "tree": {"sha": "9ec009e5773dc606a0ea0e7dca97e42250c7c264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ec009e5773dc606a0ea0e7dca97e42250c7c264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2b0b6700ce984a38abd06e48e7884573688539b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b0b6700ce984a38abd06e48e7884573688539b", "html_url": "https://github.com/rust-lang/rust/commit/f2b0b6700ce984a38abd06e48e7884573688539b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2b0b6700ce984a38abd06e48e7884573688539b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c67951d076db8272f7a52f4d2596ae77b3311d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c67951d076db8272f7a52f4d2596ae77b3311d", "html_url": "https://github.com/rust-lang/rust/commit/f0c67951d076db8272f7a52f4d2596ae77b3311d"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "79435aa398779ae46c59e2ccb0e81b78f8897644", "filename": "src/librustc_data_structures/bitslice.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f2b0b6700ce984a38abd06e48e7884573688539b/src%2Flibrustc_data_structures%2Fbitslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2b0b6700ce984a38abd06e48e7884573688539b/src%2Flibrustc_data_structures%2Fbitslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitslice.rs?ref=f2b0b6700ce984a38abd06e48e7884573688539b", "patch": "@@ -28,9 +28,9 @@ impl BitSlice for [Word] {\n     fn clear_bit(&mut self, idx: usize) -> bool {\n         let words = self;\n         debug!(\"clear_bit: words={} idx={}\",\n-               bits_to_string(words, words.len() * mem::size_of::<Word>()), bit_str(idx));\n+               bits_to_string(words, words.len() * mem::size_of::<Word>() * 8), idx);\n         let BitLookup { word, bit_in_word, bit_mask } = bit_lookup(idx);\n-        debug!(\"word={} bit_in_word={} bit_mask={}\", word, bit_in_word, bit_mask);\n+        debug!(\"word={} bit_in_word={} bit_mask=0x{:x}\", word, bit_in_word, bit_mask);\n         let oldv = words[word];\n         let newv = oldv & !bit_mask;\n         words[word] = newv;\n@@ -42,7 +42,7 @@ impl BitSlice for [Word] {\n     fn set_bit(&mut self, idx: usize) -> bool {\n         let words = self;\n         debug!(\"set_bit: words={} idx={}\",\n-               bits_to_string(words, words.len() * mem::size_of::<Word>()), bit_str(idx));\n+               bits_to_string(words, words.len() * mem::size_of::<Word>() * 8), idx);\n         let BitLookup { word, bit_in_word, bit_mask } = bit_lookup(idx);\n         debug!(\"word={} bit_in_word={} bit_mask={}\", word, bit_in_word, bit_mask);\n         let oldv = words[word];\n@@ -78,13 +78,6 @@ fn bit_lookup(bit: usize) -> BitLookup {\n     BitLookup { word: word, bit_in_word: bit_in_word, bit_mask: bit_mask }\n }\n \n-\n-fn bit_str(bit: usize) -> String {\n-    let byte = bit >> 3;\n-    let lobits = 1 << (bit & 0b111);\n-    format!(\"[{}:{}-{:02x}]\", bit, byte, lobits)\n-}\n-\n pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n     let mut result = String::new();\n     let mut sep = '[';\n@@ -95,7 +88,7 @@ pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n     let mut i = 0;\n     for &word in words.iter() {\n         let mut v = word;\n-        loop { // for each byte in `v`:\n+        for _ in 0..mem::size_of::<Word>() { // for each byte in `v`:\n             let remain = bits - i;\n             // If less than a byte remains, then mask just that many bits.\n             let mask = if remain <= 8 { (1 << remain) - 1 } else { 0xFF };\n@@ -110,6 +103,7 @@ pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n             i += 8;\n             sep = '-';\n         }\n+        sep = '|';\n     }\n     result.push(']');\n     return result"}]}