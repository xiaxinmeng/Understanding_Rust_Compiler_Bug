{"sha": "b32e0098efdf62df22f2fdb01d1d84dce6eed895", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMmUwMDk4ZWZkZjYyZGYyMmYyZmRiMDFkMWQ4NGRjZTZlZWQ4OTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-02T21:15:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-02T21:15:09Z"}, "message": "Merge remote-tracking branch 'erickt/rustup'", "tree": {"sha": "d2fe2a07136d98c4bcc547336d20f6d84439225c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2fe2a07136d98c4bcc547336d20f6d84439225c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b32e0098efdf62df22f2fdb01d1d84dce6eed895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b32e0098efdf62df22f2fdb01d1d84dce6eed895", "html_url": "https://github.com/rust-lang/rust/commit/b32e0098efdf62df22f2fdb01d1d84dce6eed895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b32e0098efdf62df22f2fdb01d1d84dce6eed895/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b40bc85cbc1d072179c92ce01655db0272aa598", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b40bc85cbc1d072179c92ce01655db0272aa598", "html_url": "https://github.com/rust-lang/rust/commit/4b40bc85cbc1d072179c92ce01655db0272aa598"}, {"sha": "6465cb85a73fc1f0465d56867d6c3cee71d44b67", "url": "https://api.github.com/repos/rust-lang/rust/commits/6465cb85a73fc1f0465d56867d6c3cee71d44b67", "html_url": "https://github.com/rust-lang/rust/commit/6465cb85a73fc1f0465d56867d6c3cee71d44b67"}], "stats": {"total": 140, "additions": 124, "deletions": 16}, "files": [{"sha": "b41d3db22e49e015c57af0ca17e4b2ed5dd69235", "filename": "src/etc/rustup.sh", "status": "modified", "additions": 123, "deletions": 15, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/b32e0098efdf62df22f2fdb01d1d84dce6eed895/src%2Fetc%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b32e0098efdf62df22f2fdb01d1d84dce6eed895/src%2Fetc%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frustup.sh?ref=b32e0098efdf62df22f2fdb01d1d84dce6eed895", "patch": "@@ -230,7 +230,7 @@ validate_opt() {\n }\n \n create_tmp_dir() {\n-    local TMP_DIR=./rustup-tmp-install\n+    local TMP_DIR=`pwd`/rustup-tmp-install\n \n     rm -Rf \"${TMP_DIR}\"\n     need_ok \"failed to remove temporary installation directory\"\n@@ -245,6 +245,21 @@ probe_need CFG_CURL  curl\n probe_need CFG_TAR   tar\n probe_need CFG_FILE  file\n \n+probe CFG_SHA256SUM sha256sum\n+probe CFG_SHASUM shasum\n+\n+if [ -z \"$CFG_SHA256SUM\" -a -z \"$CFG_SHASUM\" ]; then\n+    err \"unable to find either sha256sum or shasum\"\n+fi\n+\n+calculate_hash() {\n+    if [ -n \"$CFG_SHA256SUM\" ]; then\n+        ${CFG_SHA256SUM} $@\n+    else\n+        ${CFG_SHASUM} -a 256 $@\n+    fi\n+}\n+\n CFG_SRC_DIR=\"$(cd $(dirname $0) && pwd)/\"\n CFG_SELF=\"$0\"\n CFG_ARGS=\"$@\"\n@@ -270,6 +285,10 @@ VAL_OPTIONS=\"\"\n flag uninstall \"only uninstall from the installation prefix\"\n valopt prefix \"\" \"set installation prefix\"\n opt cargo 1 \"install cargo with rust\"\n+valopt date \"\" \"use the YYYY-MM-DD nightly instead of the current nightly\"\n+valopt rust-date \"\" \"use the YYYY-MM-DD rust nightly instead of the current nightly\"\n+valopt cargo-date \"\" \"use the YYYY-MM-DD cargo nightly instead of the current nightly\"\n+flag save \"save the downloaded nightlies to ~/.rustup\"\n \n if [ $HELP -eq 1 ]\n then\n@@ -417,6 +436,21 @@ CFG_TMP_DIR=$(mktemp -d 2>/dev/null \\\n            || mktemp -d -t 'rustup-tmp-install' 2>/dev/null \\\n            || create_tmp_dir)\n \n+# If we're saving nightlies and we didn't specify which one, grab todays.\n+# Otherwise we'll use the latest version.\n+if [ -n \"${CFG_SAVE}\" -a -z \"${CFG_DATE}\" ];\n+then\n+    CFG_DATE=`date \"+%Y-%m-%d\"`\n+fi\n+\n+if [ -z \"${CFG_RUST_DATE}\" ]; then\n+    CFG_RUST_DATE=\"${CFG_DATE}\"\n+fi\n+\n+if [ -z \"${CFG_CARGO_DATE}\" ]; then\n+    CFG_CARGO_DATE=\"${CFG_DATE}\"\n+fi\n+\n RUST_URL=\"https://static.rust-lang.org/dist\"\n RUST_PACKAGE_NAME=rust-nightly\n RUST_PACKAGE_NAME_AND_TRIPLE=\"${RUST_PACKAGE_NAME}-${HOST_TRIPLE}\"\n@@ -431,28 +465,86 @@ CARGO_TARBALL_NAME=\"${CARGO_PACKAGE_NAME_AND_TRIPLE}.tar.gz\"\n CARGO_LOCAL_INSTALL_DIR=\"${CFG_TMP_DIR}/${CARGO_PACKAGE_NAME_AND_TRIPLE}\"\n CARGO_LOCAL_INSTALL_SCRIPT=\"${CARGO_LOCAL_INSTALL_DIR}/install.sh\"\n \n-# Fetch the package.\n+# add a date suffix if we want a particular nighly.\n+if [ -n \"${CFG_RUST_DATE}\" ];\n+then\n+    RUST_URL=\"${RUST_URL}/${CFG_RUST_DATE}\"\n+fi\n+\n+if [ -n \"${CFG_CARGO_DATE}\" ];\n+then\n+    CARGO_URL=\"${CARGO_URL}/${CFG_CARGO_DATE}\"\n+fi\n+\n+verify_hash() {\n+    remote_sha256=\"$1\"\n+    local_file=\"$2\"\n+\n+    msg \"Downloading ${remote_sha256}\"\n+    remote_sha256=`\"${CFG_CURL}\" -f \"${remote_sha256}\"`\n+    if [ \"$?\" -ne 0 ]; then\n+        rm -Rf \"${CFG_TMP_DIR}\"\n+        err \"Failed to download ${remote_url}\"\n+    fi\n+\n+    msg \"Verifying hash\"\n+    local_sha256=$(calculate_hash \"${local_file}\")\n+    if [ \"$?\" -ne 0 ]; then\n+        rm -Rf \"${CFG_TMP_DIR}\"\n+        err \"Failed to compute hash for ${local_tarball}\"\n+    fi\n+\n+    # We only need the sha, not the filenames\n+    remote_sha256=`echo ${remote_sha256} | cut -f 1 -d ' '`\n+    local_sha256=`echo ${local_sha256} | cut -f 1 -d ' '`\n+\n+    if [ \"${remote_sha256}\" != \"${local_sha256}\" ]; then\n+        rm -Rf \"${CFG_TMP_DIR}\"\n+        err \"invalid sha256.\\n  ${remote_sha256}\\t${remote_tarball}\\n  ${local_sha256}\\t${local_tarball}\"\n+    fi\n+}\n+\n+# Fetch the package. Optionally caches the tarballs.\n download_package() {\n     remote_tarball=\"$1\"\n     local_tarball=\"$2\"\n+    remote_sha256=\"${remote_tarball}.sha256\"\n \n-    msg \"Downloading ${remote_tarball} to ${local_tarball}\"\n+    # Check if we've already downloaded this file.\n+    if [ -e \"${local_tarball}.tmp\" ]; then\n+        msg \"Resuming ${remote_tarball} to ${local_tarball}\"\n \n-    \"${CFG_CURL}\" -f -o \"${local_tarball}\" \"${remote_tarball}\"\n-    if [ $? -ne 0 ]\n-    then\n-        rm -Rf \"${CFG_TMP_DIR}\"\n-        err \"failed to download installer\"\n+        \"${CFG_CURL}\" -f -C - -o \"${local_tarball}.tmp\" \"${remote_tarball}\"\n+        if [ $? -ne 0 ]\n+        then\n+            rm -Rf \"${CFG_TMP_DIR}\"\n+            err \"failed to download installer\"\n+        fi\n+\n+        mv \"${local_tarball}.tmp\" \"${local_tarball}\"\n+    elif [ ! -e \"${local_tarball}\" ]; then\n+        msg \"Downloading ${remote_tarball} to ${local_tarball}\"\n+\n+        \"${CFG_CURL}\" -f -o \"${local_tarball}.tmp\" \"${remote_tarball}\"\n+        if [ $? -ne 0 ]\n+        then\n+            rm -Rf \"${CFG_TMP_DIR}\"\n+            err \"failed to download installer\"\n+        fi\n+\n+        mv \"${local_tarball}.tmp\" \"${local_tarball}\"\n     fi\n+\n+    verify_hash \"${remote_sha256}\" \"${local_tarball}\"\n }\n \n # Wrap all the commands needed to install a package.\n install_package() {\n-    tarball_name=\"$1\"\n+    local_tarball=\"$1\"\n     install_script=\"$2\"\n \n-    msg \"Extracting ${tarball_name}\"\n-    (cd \"${CFG_TMP_DIR}\" && \"${CFG_TAR}\" -xzf \"${tarball_name}\")\n+    msg \"Extracting ${local_tarball}\"\n+    (cd \"${CFG_TMP_DIR}\" && \"${CFG_TAR}\" -xvf \"${local_tarball}\")\n     if [ $? -ne 0 ]; then\n         rm -Rf \"${CFG_TMP_DIR}\"\n         err \"failed to unpack installer\"\n@@ -479,8 +571,24 @@ install_packages() {\n     mkdir -p \"${CFG_TMP_DIR}\"\n     need_ok \"failed to create create temporary installation directory\"\n \n-    RUST_LOCAL_TARBALL=\"${CFG_TMP_DIR}/${RUST_TARBALL_NAME}\"\n-    CARGO_LOCAL_TARBALL=\"${CFG_TMP_DIR}/${CARGO_TARBALL_NAME}\"\n+    # If we're saving our nightlies, put them in $HOME/.rustup.\n+    if [ -n \"${CFG_SAVE}\" ]\n+    then\n+        RUST_DOWNLOAD_DIR=\"${HOME}/.rustup/${CFG_RUST_DATE}\"\n+        CARGO_DOWNLOAD_DIR=\"${HOME}/.rustup/${CFG_CARGO_DATE}\"\n+    else\n+        RUST_DOWNLOAD_DIR=\"${CFG_TMP_DIR}\"\n+        CARGO_DOWNLOAD_DIR=\"${CFG_TMP_DIR}\"\n+    fi\n+\n+    mkdir -p \"${RUST_DOWNLOAD_DIR}\"\n+    need_ok \"failed to create create download directory\"\n+\n+    mkdir -p \"${CARGO_DOWNLOAD_DIR}\"\n+    need_ok \"failed to create create download directory\"\n+\n+    RUST_LOCAL_TARBALL=\"${RUST_DOWNLOAD_DIR}/${RUST_TARBALL_NAME}\"\n+    CARGO_LOCAL_TARBALL=\"${CARGO_DOWNLOAD_DIR}/${CARGO_TARBALL_NAME}\"\n \n     download_package \\\n         \"${RUST_URL}/${RUST_TARBALL_NAME}\" \\\n@@ -493,12 +601,12 @@ install_packages() {\n     fi\n \n     install_package \\\n-        \"${RUST_TARBALL_NAME}\" \\\n+        \"${RUST_LOCAL_TARBALL}\" \\\n         \"${RUST_LOCAL_INSTALL_SCRIPT}\"\n \n     if [ -z \"${CFG_DISABLE_CARGO}\" ]; then\n         install_package \\\n-            \"${CARGO_TARBALL_NAME}\" \\\n+            \"${CARGO_LOCAL_TARBALL}\" \\\n             \"${CARGO_LOCAL_INSTALL_SCRIPT}\"\n     fi\n "}, {"sha": "ef7f737cd5f8251bc5d0fe9ce86ea2d374d2edb7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32e0098efdf62df22f2fdb01d1d84dce6eed895/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32e0098efdf62df22f2fdb01d1d84dce6eed895/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b32e0098efdf62df22f2fdb01d1d84dce6eed895", "patch": "@@ -989,7 +989,7 @@ impl LitIntType {\n #[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Lit_ {\n     LitStr(InternedString, StrStyle),\n-    LitBinary(Rc<Vec<u8> >),\n+    LitBinary(Rc<Vec<u8>>),\n     LitByte(u8),\n     LitChar(char),\n     LitInt(u64, LitIntType),"}]}