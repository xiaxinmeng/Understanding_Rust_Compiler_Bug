{"sha": "029184d9772c9d0ad749400409be1a3feb473521", "node_id": "C_kwDOAAsO6NoAKDAyOTE4NGQ5NzcyYzlkMGFkNzQ5NDAwNDA5YmUxYTNmZWI0NzM1MjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-14T20:57:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-14T20:57:22Z"}, "message": "Auto merge of #12765 - Veykril:import-insert-fix, r=Veykril\n\nfix: Fix imports being inserted before doc comments in inline modules\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/12758", "tree": {"sha": "23ca84583b1a055434b4993e886e43a38fcca406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23ca84583b1a055434b4993e886e43a38fcca406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/029184d9772c9d0ad749400409be1a3feb473521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/029184d9772c9d0ad749400409be1a3feb473521", "html_url": "https://github.com/rust-lang/rust/commit/029184d9772c9d0ad749400409be1a3feb473521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/029184d9772c9d0ad749400409be1a3feb473521/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "073b3253c1ff736e980c31201eda750df082197d", "url": "https://api.github.com/repos/rust-lang/rust/commits/073b3253c1ff736e980c31201eda750df082197d", "html_url": "https://github.com/rust-lang/rust/commit/073b3253c1ff736e980c31201eda750df082197d"}, {"sha": "6b823b0234ab983d7cc9304dfbf2710809da1cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b823b0234ab983d7cc9304dfbf2710809da1cdc", "html_url": "https://github.com/rust-lang/rust/commit/6b823b0234ab983d7cc9304dfbf2710809da1cdc"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "c14182279d05eabe404b8b8f2131d6bcc1070fb5", "filename": "crates/ide-db/src/imports/insert_use.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/029184d9772c9d0ad749400409be1a3feb473521/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029184d9772c9d0ad749400409be1a3feb473521/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs?ref=029184d9772c9d0ad749400409be1a3feb473521", "patch": "@@ -396,10 +396,19 @@ fn insert_use_(\n         }\n     }\n \n+    let l_curly = match scope {\n+        ImportScope::File(_) => None,\n+        // don't insert the imports before the item list/block expr's opening curly brace\n+        ImportScope::Module(item_list) => item_list.l_curly_token(),\n+        // don't insert the imports before the item list's opening curly brace\n+        ImportScope::Block(block) => block.l_curly_token(),\n+    };\n     // there are no imports in this file at all\n     // so put the import after all inner module attributes and possible license header comments\n     if let Some(last_inner_element) = scope_syntax\n         .children_with_tokens()\n+        // skip the curly brace\n+        .skip(l_curly.is_some() as usize)\n         .take_while(|child| match child {\n             NodeOrToken::Node(node) => is_inner_attribute(node.clone()),\n             NodeOrToken::Token(token) => {\n@@ -413,30 +422,21 @@ fn insert_use_(\n         cov_mark::hit!(insert_empty_inner_attr);\n         ted::insert(ted::Position::after(&last_inner_element), use_item.syntax());\n         ted::insert(ted::Position::after(last_inner_element), make::tokens::single_newline());\n-        return;\n-    }\n-    let l_curly = match scope {\n-        ImportScope::File(_) => {\n-            cov_mark::hit!(insert_empty_file);\n-            ted::insert(ted::Position::first_child_of(scope_syntax), make::tokens::blank_line());\n-            ted::insert(ted::Position::first_child_of(scope_syntax), use_item.syntax());\n-            return;\n-        }\n-        // don't insert the imports before the item list/block expr's opening curly brace\n-        ImportScope::Module(item_list) => item_list.l_curly_token(),\n-        // don't insert the imports before the item list's opening curly brace\n-        ImportScope::Block(block) => block.l_curly_token(),\n-    };\n-    match l_curly {\n-        Some(b) => {\n-            cov_mark::hit!(insert_empty_module);\n-            ted::insert(ted::Position::after(&b), make::tokens::single_newline());\n-            ted::insert(ted::Position::after(&b), use_item.syntax());\n-        }\n-        None => {\n-            // This should never happens, broken module syntax node\n-            ted::insert(ted::Position::first_child_of(scope_syntax), make::tokens::blank_line());\n-            ted::insert(ted::Position::first_child_of(scope_syntax), use_item.syntax());\n+    } else {\n+        match l_curly {\n+            Some(b) => {\n+                cov_mark::hit!(insert_empty_module);\n+                ted::insert(ted::Position::after(&b), make::tokens::single_newline());\n+                ted::insert(ted::Position::after(&b), use_item.syntax());\n+            }\n+            None => {\n+                cov_mark::hit!(insert_empty_file);\n+                ted::insert(\n+                    ted::Position::first_child_of(scope_syntax),\n+                    make::tokens::blank_line(),\n+                );\n+                ted::insert(ted::Position::first_child_of(scope_syntax), use_item.syntax());\n+            }\n         }\n     }\n }"}, {"sha": "59673af3204e6da5632324f8b26a43a5598dbdfa", "filename": "crates/ide-db/src/imports/insert_use/tests.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/029184d9772c9d0ad749400409be1a3feb473521/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029184d9772c9d0ad749400409be1a3feb473521/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs?ref=029184d9772c9d0ad749400409be1a3feb473521", "patch": "@@ -441,6 +441,19 @@ fn inserts_after_single_line_inner_comments() {\n \n use foo::bar::Baz;\"#,\n     );\n+    check_none(\n+        \"foo::bar::Baz\",\n+        r\"mod foo {\n+    //! Single line inner comments do not allow any code before them.\n+$0\n+}\",\n+        r\"mod foo {\n+    //! Single line inner comments do not allow any code before them.\n+\n+    use foo::bar::Baz;\n+\n+}\",\n+    );\n }\n \n #[test]"}]}