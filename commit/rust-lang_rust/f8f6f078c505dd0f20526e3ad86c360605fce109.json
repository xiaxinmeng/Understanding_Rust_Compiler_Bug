{"sha": "f8f6f078c505dd0f20526e3ad86c360605fce109", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZjZmMDc4YzUwNWRkMGYyMDUyNmUzYWQ4NmMzNjA2MDVmY2UxMDk=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-02-25T17:08:21Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-02-25T17:08:21Z"}, "message": "There are no native iterators (or at least they are not going to be supported\nsoon.).", "tree": {"sha": "d333e5b301e72337ac23e290ae98717b0ece568e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d333e5b301e72337ac23e290ae98717b0ece568e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8f6f078c505dd0f20526e3ad86c360605fce109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f6f078c505dd0f20526e3ad86c360605fce109", "html_url": "https://github.com/rust-lang/rust/commit/f8f6f078c505dd0f20526e3ad86c360605fce109", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8f6f078c505dd0f20526e3ad86c360605fce109/comments", "author": null, "committer": null, "parents": [{"sha": "3d04fa029e7773bca591502c2890944fae1cefdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d04fa029e7773bca591502c2890944fae1cefdc", "html_url": "https://github.com/rust-lang/rust/commit/3d04fa029e7773bca591502c2890944fae1cefdc"}], "stats": {"total": 71, "additions": 38, "deletions": 33}, "files": [{"sha": "9b995f9ad94a30deb1b25b4c1fc82628dc70d7f2", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f6f078c505dd0f20526e3ad86c360605fce109/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f6f078c505dd0f20526e3ad86c360605fce109/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=f8f6f078c505dd0f20526e3ad86c360605fce109", "patch": "@@ -235,10 +235,10 @@ tag ty_ {\n \n type arg = rec(mode mode, @ty ty, ident ident, def_id id);\n type fn_decl = rec(effect effect,\n-                   proto proto,\n                    vec[arg] inputs,\n                    @ty output);\n type _fn = rec(fn_decl decl,\n+               proto proto,\n                block body);\n \n "}, {"sha": "7bd34fdf38e2a347a3d9b8e806815ca2fa6b25f4", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f8f6f078c505dd0f20526e3ad86c360605fce109/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f6f078c505dd0f20526e3ad86c360605fce109/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=f8f6f078c505dd0f20526e3ad86c360605fce109", "patch": "@@ -1617,8 +1617,7 @@ impure fn parse_ty_params(parser p) -> vec[ast.ty_param] {\n     ret ty_params;\n }\n \n-impure fn parse_fn_decl(parser p, ast.proto proto,\n-                        ast.effect eff) -> ast.fn_decl {\n+impure fn parse_fn_decl(parser p, ast.effect eff) -> ast.fn_decl {\n     auto pf = parse_arg;\n     let util.common.spanned[vec[ast.arg]] inputs =\n         // FIXME: passing parse_arg as an lval doesn't work at the\n@@ -1636,32 +1635,32 @@ impure fn parse_fn_decl(parser p, ast.proto proto,\n     } else {\n         output = @spanned(inputs.span, inputs.span, ast.ty_nil);\n     }\n-    ret rec(effect=eff, proto=proto,\n-            inputs=inputs.node, output=output);\n+    ret rec(effect=eff, inputs=inputs.node, output=output);\n }\n \n impure fn parse_fn(parser p, ast.effect eff, ast.proto proto) -> ast._fn {\n-    auto decl = parse_fn_decl(p, proto, eff);\n+    auto decl = parse_fn_decl(p, eff);\n     auto body = parse_block(p);\n     ret rec(decl = decl,\n+            proto = proto,\n             body = body);\n }\n \n impure fn parse_fn_header(parser p)\n-    -> tup(span, ast.proto, ast.ident, vec[ast.ty_param]) {\n-    auto lo = p.get_span();\n-    auto proto = parse_proto(p);\n+    -> tup(ast.ident, vec[ast.ty_param]) {\n     auto id = parse_ident(p);\n     auto ty_params = parse_ty_params(p);\n-    ret tup(lo, proto, id, ty_params);\n+    ret tup(id, ty_params);\n }\n \n impure fn parse_item_fn_or_iter(parser p, ast.effect eff) -> @ast.item {\n+    auto lo = p.get_span();\n+    auto proto = parse_proto(p);\n     auto t = parse_fn_header(p);\n-    auto f = parse_fn(p, eff, t._1);\n-    auto item = ast.item_fn(t._2, f, t._3,\n+    auto f = parse_fn(p, eff, proto);\n+    auto item = ast.item_fn(t._0, f, t._1,\n                             p.next_def_id(), ast.ann_none);\n-    ret @spanned(t._0, f.body.span, item);\n+    ret @spanned(lo, f.body.span, item);\n }\n \n \n@@ -1760,13 +1759,15 @@ impure fn parse_item_native_type(parser p) -> @ast.native_item {\n }\n \n impure fn parse_item_native_fn(parser p, ast.effect eff) -> @ast.native_item {\n+    auto lo = p.get_span();\n+    expect(p, token.FN);\n     auto t = parse_fn_header(p);\n-    auto decl = parse_fn_decl(p, t._1, eff);\n+    auto decl = parse_fn_decl(p, eff);\n     auto hi = p.get_span();\n     expect(p, token.SEMI);\n-    auto item = ast.native_item_fn(t._2, decl, t._3, p.next_def_id(),\n+    auto item = ast.native_item_fn(t._0, decl, t._1, p.next_def_id(),\n                                    ast.ann_none);\n-    ret @spanned(t._0, hi, item);\n+    ret @spanned(lo, hi, item);\n }\n \n impure fn parse_native_item(parser p) -> @ast.native_item {"}, {"sha": "65bbe602b7d68f1a8d6751288ba8b80e19059d9b", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8f6f078c505dd0f20526e3ad86c360605fce109/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f6f078c505dd0f20526e3ad86c360605fce109/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=f8f6f078c505dd0f20526e3ad86c360605fce109", "patch": "@@ -253,10 +253,11 @@ type ast_fold[ENV] =\n          &ast.block_) -> block)                   fold_block,\n \n      (fn(&ENV e, &fn_decl decl,\n+         ast.proto proto,\n          &block body) -> ast._fn)                 fold_fn,\n \n      (fn(&ENV e, ast.effect effect,\n-         ast.proto proto, vec[arg] inputs,\n+         vec[arg] inputs,\n          @ty output) -> ast.fn_decl)              fold_fn_decl,\n \n      (fn(&ENV e, &ast._mod m) -> ast._mod)        fold_mod,\n@@ -757,15 +758,15 @@ fn fold_fn_decl[ENV](&ENV env, ast_fold[ENV] fld,\n         inputs += fold_arg(env, fld, a);\n     }\n     auto output = fold_ty[ENV](env, fld, decl.output);\n-    ret fld.fold_fn_decl(env, decl.effect, decl.proto, inputs, output);\n+    ret fld.fold_fn_decl(env, decl.effect, inputs, output);\n }\n \n fn fold_fn[ENV](&ENV env, ast_fold[ENV] fld, &ast._fn f) -> ast._fn {\n     auto decl = fold_fn_decl(env, fld, f.decl);\n \n     auto body = fold_block[ENV](env, fld, f.body);\n \n-    ret fld.fold_fn(env, decl, body);\n+    ret fld.fold_fn(env, decl, f.proto, body);\n }\n \n \n@@ -1306,16 +1307,16 @@ fn identity_fold_block[ENV](&ENV e, &span sp, &ast.block_ blk) -> block {\n \n fn identity_fold_fn_decl[ENV](&ENV e,\n                               ast.effect effect,\n-                              ast.proto proto,\n                               vec[arg] inputs,\n                               @ty output) -> ast.fn_decl {\n-    ret rec(effect=effect, proto=proto, inputs=inputs, output=output);\n+    ret rec(effect=effect, inputs=inputs, output=output);\n }\n \n fn identity_fold_fn[ENV](&ENV e,\n                          &fn_decl decl,\n+                         ast.proto proto,\n                          &block body) -> ast._fn {\n-    ret rec(decl=decl, body=body);\n+    ret rec(decl=decl, proto=proto, body=body);\n }\n \n fn identity_fold_mod[ENV](&ENV e, &ast._mod m) -> ast._mod {\n@@ -1475,8 +1476,8 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n              bind identity_fold_view_item_import[ENV](_,_,_,_,_,_),\n \n          fold_block = bind identity_fold_block[ENV](_,_,_),\n-         fold_fn = bind identity_fold_fn[ENV](_,_,_),\n-         fold_fn_decl = bind identity_fold_fn_decl[ENV](_,_,_,_,_),\n+         fold_fn = bind identity_fold_fn[ENV](_,_,_,_),\n+         fold_fn_decl = bind identity_fold_fn_decl[ENV](_,_,_,_),\n          fold_mod = bind identity_fold_mod[ENV](_,_),\n          fold_native_mod = bind identity_fold_native_mod[ENV](_,_),\n          fold_crate = bind identity_fold_crate[ENV](_,_,_),"}, {"sha": "33693835d2e4706d572e2e1d798bfe46f0b7d36a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f6f078c505dd0f20526e3ad86c360605fce109/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f6f078c505dd0f20526e3ad86c360605fce109/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f8f6f078c505dd0f20526e3ad86c360605fce109", "patch": "@@ -4019,7 +4019,7 @@ fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n     cx.item_names.insert(cx.path, llfndecl);\n \n     auto fcx = new_fn_ctxt(cx, cx.path, llfndecl);\n-    create_llargs_for_fn_args(fcx, f.decl.proto,\n+    create_llargs_for_fn_args(fcx, f.proto,\n                               ty_self, ret_ty_of_fn(ann),\n                               f.decl.inputs, ty_params);\n     auto bcx = new_top_block_ctxt(fcx);"}, {"sha": "db28735e4fc565996893d55e8f4265ee679ce6ac", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8f6f078c505dd0f20526e3ad86c360605fce109/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f6f078c505dd0f20526e3ad86c360605fce109/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=f8f6f078c505dd0f20526e3ad86c360605fce109", "patch": "@@ -332,10 +332,11 @@ fn ty_of_fn_decl(@ty_item_table id_to_ty_item,\n                  fn(&@ast.ty ast_ty) -> @ty.t convert,\n                  fn(&ast.arg a) -> arg ty_of_arg,\n                  &ast.fn_decl decl,\n+                 ast.proto proto,\n                  ast.def_id def_id) -> @ty.t {\n     auto input_tys = _vec.map[ast.arg,arg](ty_of_arg, decl.inputs);\n     auto output_ty = convert(decl.output);\n-    auto t_fn = plain_ty(ty.ty_fn(decl.proto, input_tys, output_ty));\n+    auto t_fn = plain_ty(ty.ty_fn(proto, input_tys, output_ty));\n     item_to_ty.insert(def_id, t_fn);\n     ret t_fn;\n }\n@@ -394,7 +395,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n         auto f = bind ty_of_arg(id_to_ty_item, item_to_ty, _);\n         auto inputs = _vec.map[ast.arg,arg](f, m.node.meth.decl.inputs);\n         auto output = convert(m.node.meth.decl.output);\n-        ret rec(proto=m.node.meth.decl.proto, ident=m.node.ident,\n+        ret rec(proto=m.node.meth.proto, ident=m.node.ident,\n                 inputs=inputs, output=output);\n     }\n \n@@ -446,7 +447,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n             case (ast.item_fn(?ident, ?fn_info, _, ?def_id, _)) {\n                 auto f = bind ty_of_arg(id_to_ty_item, item_to_ty, _);\n                 ret ty_of_fn_decl(id_to_ty_item, item_to_ty, convert, f,\n-                                  fn_info.decl, def_id);\n+                                  fn_info.decl, fn_info.proto, def_id);\n             }\n \n             case (ast.item_obj(?ident, ?obj_info, _, ?def_id, _)) {\n@@ -2155,7 +2156,8 @@ fn check_const(&@crate_ctxt ccx, &span sp, ast.ident ident, @ast.ty t,\n     ret @fold.respan[ast.item_](sp, item);\n }\n \n-fn check_fn(&@crate_ctxt ccx, &ast.fn_decl decl, &ast.block body) -> ast._fn {\n+fn check_fn(&@crate_ctxt ccx, &ast.fn_decl decl, ast.proto proto,\n+            &ast.block body) -> ast._fn {\n     auto local_ty_table = @common.new_def_hash[@ty.t]();\n \n     // FIXME: duplicate work: the item annotation already has the arg types\n@@ -2182,8 +2184,9 @@ fn check_fn(&@crate_ctxt ccx, &ast.fn_decl decl, &ast.block body) -> ast._fn {\n     auto block_t = check_block(fcx, body);\n     auto block_wb = writeback(fcx, block_t);\n \n-     auto fn_t = rec(decl=decl,\n-                     body=block_wb);\n+    auto fn_t = rec(decl=decl,\n+                    proto=proto,\n+                    body=block_wb);\n     ret fn_t;\n }\n \n@@ -2202,7 +2205,7 @@ fn check_item_fn(&@crate_ctxt ccx, &span sp, ast.ident ident, &ast._fn f,\n     }\n \n     auto output_ty = ast_ty_to_ty_crate(ccx, f.decl.output);\n-    auto fn_sty = ty.ty_fn(f.decl.proto, inputs, output_ty);\n+    auto fn_sty = ty.ty_fn(f.proto, inputs, output_ty);\n     auto fn_ann = ast.ann_type(plain_ty(fn_sty));\n \n     auto item = ast.item_fn(ident, f, ty_params, id, fn_ann);\n@@ -2234,7 +2237,7 @@ fn check_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n     auto fld = fold.new_identity_fold[@crate_ctxt]();\n \n     fld = @rec(update_env_for_item = bind update_obj_fields(_, _),\n-               fold_fn      = bind check_fn(_,_,_),\n+               fold_fn      = bind check_fn(_,_,_,_),\n                fold_item_fn = bind check_item_fn(_,_,_,_,_,_,_)\n                with *fld);\n     ret fold.fold_crate[@crate_ctxt](ccx, fld, result._0);"}]}