{"sha": "1d22f75c9f75cad2e408a145861904898ac982dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMjJmNzVjOWY3NWNhZDJlNDA4YTE0NTg2MTkwNDg5OGFjOTgyZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-31T18:04:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-31T18:04:29Z"}, "message": "Auto merge of #76030 - davidtwco:fewer-names-llvm-type-of, r=eddyb\n\ncg_llvm: `fewer_names` in `uncached_llvm_type`\n\nThis PR changes `uncached_llvm_type` so that a named struct type (with an empty name) is always created when the `fewer_names` option is enabled. By skipping the generation of names, we can improve perf. Giving `LLVMStructCreateNamed` an empty name works because LLVM will perform random renames to avoid collisions. Needs a perf run!\n\ncc @eddyb (whom I've discussed this with)", "tree": {"sha": "53fb3b5b4874edc1af0910ed93f77f0d0e91b3cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53fb3b5b4874edc1af0910ed93f77f0d0e91b3cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d22f75c9f75cad2e408a145861904898ac982dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d22f75c9f75cad2e408a145861904898ac982dd", "html_url": "https://github.com/rust-lang/rust/commit/1d22f75c9f75cad2e408a145861904898ac982dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d22f75c9f75cad2e408a145861904898ac982dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "897ef3a0ec001b89fffe7125c20d6a6bb12fee6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/897ef3a0ec001b89fffe7125c20d6a6bb12fee6c", "html_url": "https://github.com/rust-lang/rust/commit/897ef3a0ec001b89fffe7125c20d6a6bb12fee6c"}, {"sha": "fa01ce802f1b403a2140fd945b43af86ec3998a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa01ce802f1b403a2140fd945b43af86ec3998a1", "html_url": "https://github.com/rust-lang/rust/commit/fa01ce802f1b403a2140fd945b43af86ec3998a1"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "a02601eb43eb807295793ec6548098a05b674700", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1d22f75c9f75cad2e408a145861904898ac982dd/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d22f75c9f75cad2e408a145861904898ac982dd/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=1d22f75c9f75cad2e408a145861904898ac982dd", "patch": "@@ -51,30 +51,34 @@ fn uncached_llvm_type<'a, 'tcx>(\n     }\n \n     let name = match layout.ty.kind {\n-        ty::Closure(..) |\n-        ty::Generator(..) |\n-        ty::Adt(..) |\n         // FIXME(eddyb) producing readable type names for trait objects can result\n         // in problematically distinct types due to HRTB and subtyping (see #47638).\n         // ty::Dynamic(..) |\n-        ty::Foreign(..) |\n-        ty::Str => {\n+        ty::Adt(..) | ty::Closure(..) | ty::Foreign(..) | ty::Generator(..) | ty::Str\n+            if !cx.sess().fewer_names() =>\n+        {\n             let mut name = layout.ty.to_string();\n-            if let (&ty::Adt(def, _), &Variants::Single { index })\n-                 = (&layout.ty.kind, &layout.variants)\n+            if let (&ty::Adt(def, _), &Variants::Single { index }) =\n+                (&layout.ty.kind, &layout.variants)\n             {\n                 if def.is_enum() && !def.variants.is_empty() {\n                     write!(&mut name, \"::{}\", def.variants[index].ident).unwrap();\n                 }\n             }\n-            if let (&ty::Generator(_, _, _), &Variants::Single { index })\n-                 = (&layout.ty.kind, &layout.variants)\n+            if let (&ty::Generator(_, _, _), &Variants::Single { index }) =\n+                (&layout.ty.kind, &layout.variants)\n             {\n                 write!(&mut name, \"::{}\", ty::GeneratorSubsts::variant_name(index)).unwrap();\n             }\n             Some(name)\n         }\n-        _ => None\n+        ty::Adt(..) => {\n+            // If `Some` is returned then a named struct is created in LLVM. Name collisions are\n+            // avoided by LLVM (with increasing suffixes). If rustc doesn't generate names then that\n+            // can improve perf.\n+            Some(String::new())\n+        }\n+        _ => None,\n     };\n \n     match layout.fields {"}]}