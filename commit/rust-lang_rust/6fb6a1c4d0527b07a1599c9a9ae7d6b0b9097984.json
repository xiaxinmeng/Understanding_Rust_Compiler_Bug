{"sha": "6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYjZhMWM0ZDA1MjdiMDdhMTU5OWM5YTlhZTdkNmIwYjkwOTc5ODQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-13T16:06:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-13T16:06:27Z"}, "message": "make all Value::into_* methods handle alignment the same way", "tree": {"sha": "40c903ab383ba83fc74c6f22661eb2cae83df8a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40c903ab383ba83fc74c6f22661eb2cae83df8a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984", "html_url": "https://github.com/rust-lang/rust/commit/6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9fdc7922e01a47a8398a0f10f30debdfbad938", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9fdc7922e01a47a8398a0f10f30debdfbad938", "html_url": "https://github.com/rust-lang/rust/commit/6c9fdc7922e01a47a8398a0f10f30debdfbad938"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "79b8d50c96e614e090bfb0fe15a375b42ee85e26", "filename": "src/lvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984", "patch": "@@ -389,11 +389,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                 match self.tcx.struct_tail(pointee_type).sty {\n                     ty::TyDynamic(..) => {\n-                        let (ptr, vtable) = val.into_ptr_vtable_pair(&self.memory)?;\n+                        let (ptr, vtable) = val.into_ptr_vtable_pair(&mut self.memory)?;\n                         (ptr, LvalueExtra::Vtable(vtable), true)\n                     },\n                     ty::TyStr | ty::TySlice(_) => {\n-                        let (ptr, len) = val.into_slice(&self.memory)?;\n+                        let (ptr, len) = val.into_slice(&mut self.memory)?;\n                         (ptr, LvalueExtra::Length(len), true)\n                     },\n                     _ => (val.into_ptr(&mut self.memory)?, LvalueExtra::None, true),"}, {"sha": "26b3ee5622bfde8abdcba664e8cf666fed650d52", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984", "patch": "@@ -482,7 +482,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     pub fn size_and_align_of_dst(\n-        &self,\n+        &mut self,\n         ty: ty::Ty<'tcx>,\n         value: Value,\n     ) -> EvalResult<'tcx, (u64, u64)> {\n@@ -546,15 +546,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Ok((size, align.abi()))\n                 }\n                 ty::TyDynamic(..) => {\n-                    let (_, vtable) = value.into_ptr_vtable_pair(&self.memory)?;\n+                    let (_, vtable) = value.into_ptr_vtable_pair(&mut self.memory)?;\n                     // the second entry in the vtable is the dynamic size of the object.\n                     self.read_size_and_align_from_vtable(vtable)\n                 }\n \n                 ty::TySlice(_) | ty::TyStr => {\n                     let elem_ty = ty.sequence_element_type(self.tcx);\n                     let elem_size = self.type_size(elem_ty)?.expect(\"slice element must be sized\") as u64;\n-                    let (_, len) = value.into_slice(&self.memory)?;\n+                    let (_, len) = value.into_slice(&mut self.memory)?;\n                     let align = self.type_align(elem_ty)?;\n                     Ok((len * elem_size, align as u64))\n                 }"}, {"sha": "52c25f35a5d2a56067d5f796625b0e654af80842", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984", "patch": "@@ -394,7 +394,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             },\n             ty::InstanceDef::Virtual(_, idx) => {\n                 let ptr_size = self.memory.pointer_size();\n-                let (_, vtable) = self.eval_operand(&arg_operands[0])?.into_ptr_vtable_pair(&self.memory)?;\n+                let (_, vtable) = self.eval_operand(&arg_operands[0])?.into_ptr_vtable_pair(&mut self.memory)?;\n                 let fn_ptr = self.memory.read_ptr(vtable.offset(ptr_size * (idx as u64 + 3), self.memory.layout)?)?;\n                 let instance = self.memory.get_fn(fn_ptr.to_ptr()?)?;\n                 let mut arg_operands = arg_operands.to_vec();"}, {"sha": "ad4a66a16262df98e43af7d97dcfb3c0343c0b3a", "filename": "src/value.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984/src%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984/src%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue.rs?ref=6fb6a1c4d0527b07a1599c9a9ae7d6b0b9097984", "patch": "@@ -181,16 +181,15 @@ impl<'a, 'tcx: 'a> Value {\n \n     pub(super) fn into_ptr_vtable_pair(\n         &self,\n-        mem: &Memory<'a, 'tcx>\n+        mem: &mut Memory<'a, 'tcx>\n     ) -> EvalResult<'tcx, (Pointer, MemoryPointer)> {\n         use self::Value::*;\n         match *self {\n             ByRef(ref_ptr, aligned) => {\n-                if !aligned {\n-                    return Err(EvalError::Unimplemented(format!(\"Unaligned fat-pointers are not implemented\")));\n-                }\n+                mem.begin_unaligned_read(aligned);\n                 let ptr = mem.read_ptr(ref_ptr.to_ptr()?)?;\n                 let vtable = mem.read_ptr(ref_ptr.offset(mem.pointer_size(), mem.layout)?.to_ptr()?)?;\n+                mem.end_unaligned_read();\n                 Ok((ptr, vtable.to_ptr()?))\n             }\n \n@@ -200,23 +199,22 @@ impl<'a, 'tcx: 'a> Value {\n         }\n     }\n \n-    pub(super) fn into_slice(&self, mem: &Memory<'a, 'tcx>) -> EvalResult<'tcx, (Pointer, u64)> {\n+    pub(super) fn into_slice(&self, mem: &mut Memory<'a, 'tcx>) -> EvalResult<'tcx, (Pointer, u64)> {\n         use self::Value::*;\n         match *self {\n             ByRef(ref_ptr, aligned) => {\n-                if !aligned {\n-                    return Err(EvalError::Unimplemented(format!(\"Unaligned fat-pointers are not implemented\")));\n-                }\n+                mem.begin_unaligned_read(aligned);\n                 let ptr = mem.read_ptr(ref_ptr.to_ptr()?)?;\n                 let len = mem.read_usize(ref_ptr.offset(mem.pointer_size(), mem.layout)?.to_ptr()?)?;\n+                mem.end_unaligned_read();\n                 Ok((ptr, len))\n             },\n             ByValPair(ptr, val) => {\n                 let len = val.to_u128()?;\n                 assert_eq!(len as u64 as u128, len);\n                 Ok((ptr.into(), len as u64))\n             },\n-            ByVal(_) => unimplemented!(),\n+            ByVal(_) => bug!(\"expected ptr and length, got {:?}\", self),\n         }\n     }\n }"}]}