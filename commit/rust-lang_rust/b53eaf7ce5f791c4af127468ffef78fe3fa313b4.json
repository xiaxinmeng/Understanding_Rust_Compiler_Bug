{"sha": "b53eaf7ce5f791c4af127468ffef78fe3fa313b4", "node_id": "C_kwDOAAsO6NoAKGI1M2VhZjdjZTVmNzkxYzRhZjEyNzQ2OGZmZWY3OGZlM2ZhMzEzYjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-02T18:34:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-02T18:34:04Z"}, "message": "Rollup merge of #93546 - tmiasko:validate-switch-int, r=oli-obk\n\nValidate that values in switch int terminator are unique", "tree": {"sha": "a2374c780d012d25c1cad0f48e5c98a4060ded39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2374c780d012d25c1cad0f48e5c98a4060ded39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b53eaf7ce5f791c4af127468ffef78fe3fa313b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+s6cCRBK7hj4Ov3rIwAAoGAIAIDvRm0ju8LH6gUZOZ8AXDtX\n/81eGdzEon4rjnewkxna3IW1RXFi00zUGEs6Bc/l5nUjdzCZw+BX86K4zxCQHqEf\nPHNKrcpZPUGP1r6a6zW/AxOW+0F6xGi7VpYux7XzfW0DleWGoPDK/iDe31pvW90/\nSyy/jGmXj0wadOBO9cSyWYxulpXi1ASU/UWxFa/QCVFkNOPLm2al34kPSLTeKwvh\nlLOzzLKpyh817BsnX9tf/V76clPre1tHn+Z2M9zlDUAVrK/PH4GxWshMWTshu3B7\nIuiIXXVm8jgMG9ot+JfTDS+nNoypUThile64ngScQPBg9bx/p5iZokmwW0oiBKk=\n=5/yq\n-----END PGP SIGNATURE-----\n", "payload": "tree a2374c780d012d25c1cad0f48e5c98a4060ded39\nparent 7e212c1ca9aa715a51ed4e6a60f3b0c837634720\nparent 22872e508f32158a0f325ab1b3399c00de081ff7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643826844 +0100\ncommitter GitHub <noreply@github.com> 1643826844 +0100\n\nRollup merge of #93546 - tmiasko:validate-switch-int, r=oli-obk\n\nValidate that values in switch int terminator are unique\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b53eaf7ce5f791c4af127468ffef78fe3fa313b4", "html_url": "https://github.com/rust-lang/rust/commit/b53eaf7ce5f791c4af127468ffef78fe3fa313b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b53eaf7ce5f791c4af127468ffef78fe3fa313b4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e212c1ca9aa715a51ed4e6a60f3b0c837634720", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e212c1ca9aa715a51ed4e6a60f3b0c837634720", "html_url": "https://github.com/rust-lang/rust/commit/7e212c1ca9aa715a51ed4e6a60f3b0c837634720"}, {"sha": "22872e508f32158a0f325ab1b3399c00de081ff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/22872e508f32158a0f325ab1b3399c00de081ff7", "html_url": "https://github.com/rust-lang/rust/commit/22872e508f32158a0f325ab1b3399c00de081ff7"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "cf15fc4ddc3a54fa3fe60f13453274462fbb6831", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b53eaf7ce5f791c4af127468ffef78fe3fa313b4/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53eaf7ce5f791c4af127468ffef78fe3fa313b4/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=b53eaf7ce5f791c4af127468ffef78fe3fa313b4", "patch": "@@ -55,6 +55,7 @@ impl<'tcx> MirPass<'tcx> for Validator {\n             reachable_blocks: traversal::reachable_as_bitset(body),\n             storage_liveness,\n             place_cache: Vec::new(),\n+            value_cache: Vec::new(),\n         }\n         .visit_body(body);\n     }\n@@ -109,6 +110,7 @@ struct TypeChecker<'a, 'tcx> {\n     reachable_blocks: BitSet<BasicBlock>,\n     storage_liveness: ResultsCursor<'a, 'tcx, MaybeStorageLive>,\n     place_cache: Vec<PlaceRef<'tcx>>,\n+    value_cache: Vec<u128>,\n }\n \n impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n@@ -398,6 +400,22 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     self.check_edge(location, target, EdgeKind::Normal);\n                 }\n                 self.check_edge(location, targets.otherwise(), EdgeKind::Normal);\n+\n+                self.value_cache.clear();\n+                self.value_cache.extend(targets.iter().map(|(value, _)| value));\n+                let all_len = self.value_cache.len();\n+                self.value_cache.sort_unstable();\n+                self.value_cache.dedup();\n+                let has_duplicates = all_len != self.value_cache.len();\n+                if has_duplicates {\n+                    self.fail(\n+                        location,\n+                        format!(\n+                            \"duplicated values in `SwitchInt` terminator: {:?}\",\n+                            terminator.kind,\n+                        ),\n+                    );\n+                }\n             }\n             TerminatorKind::Drop { target, unwind, .. } => {\n                 self.check_edge(location, *target, EdgeKind::Normal);"}]}