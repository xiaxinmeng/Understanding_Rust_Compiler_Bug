{"sha": "8728c7a726f3e8854f5a80b474d1a8bacab10304", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MjhjN2E3MjZmM2U4ODU0ZjVhODBiNDc0ZDFhOGJhY2FiMTAzMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-17T09:02:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-17T09:02:03Z"}, "message": "Auto merge of #49542 - GuillaumeGomez:intra-link-resolution-error, r=GuillaumeGomez\n\nAdd warning if a resolution failed\n\nr? @QuietMisdreavus", "tree": {"sha": "e17d56ccc71eef7c1b3ea4008864e2bfe8151ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e17d56ccc71eef7c1b3ea4008864e2bfe8151ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8728c7a726f3e8854f5a80b474d1a8bacab10304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8728c7a726f3e8854f5a80b474d1a8bacab10304", "html_url": "https://github.com/rust-lang/rust/commit/8728c7a726f3e8854f5a80b474d1a8bacab10304", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8728c7a726f3e8854f5a80b474d1a8bacab10304/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b12d361ff944517dc0513269badf8d575fc20e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b12d361ff944517dc0513269badf8d575fc20e9", "html_url": "https://github.com/rust-lang/rust/commit/6b12d361ff944517dc0513269badf8d575fc20e9"}, {"sha": "05275dafaaa602fe4a5d275ef724ced39d30465f", "url": "https://api.github.com/repos/rust-lang/rust/commits/05275dafaaa602fe4a5d275ef724ced39d30465f", "html_url": "https://github.com/rust-lang/rust/commit/05275dafaaa602fe4a5d275ef724ced39d30465f"}], "stats": {"total": 282, "additions": 224, "deletions": 58}, "files": [{"sha": "b29ac0e1efc8e178ae82670e34514d862af47fdc", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -326,7 +326,7 @@ impl<'a> Builder<'a> {\n                 test::TheBook, test::UnstableBook,\n                 test::Rustfmt, test::Miri, test::Clippy, test::RustdocJS, test::RustdocTheme,\n                 // Run run-make last, since these won't pass without make on Windows\n-                test::RunMake),\n+                test::RunMake, test::RustdocUi),\n             Kind::Bench => describe!(test::Crate, test::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::WhitelistedRustc, doc::Rustc,"}, {"sha": "e6af4202c19c63b8959f923e7a121e4d2e1542f6", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 52, "deletions": 7, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -514,6 +514,41 @@ impl Step for RustdocJS {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustdocUi {\n+    pub host: Interned<String>,\n+    pub target: Interned<String>,\n+    pub compiler: Compiler,\n+}\n+\n+impl Step for RustdocUi {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/test/rustdoc-ui\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n+        run.builder.ensure(RustdocUi {\n+            host: run.host,\n+            target: run.target,\n+            compiler,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) {\n+        builder.ensure(Compiletest {\n+            compiler: self.compiler,\n+            target: self.target,\n+            mode: \"ui\",\n+            suite: \"rustdoc-ui\",\n+        })\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Tidy;\n \n@@ -851,8 +886,12 @@ impl Step for Compiletest {\n         cmd.arg(\"--run-lib-path\").arg(builder.sysroot_libdir(compiler, target));\n         cmd.arg(\"--rustc-path\").arg(builder.rustc(compiler));\n \n+        let is_rustdoc_ui = suite.ends_with(\"rustdoc-ui\");\n+\n         // Avoid depending on rustdoc when we don't need it.\n-        if mode == \"rustdoc\" || (mode == \"run-make\" && suite.ends_with(\"fulldeps\")) {\n+        if mode == \"rustdoc\" ||\n+           (mode == \"run-make\" && suite.ends_with(\"fulldeps\")) ||\n+           (mode == \"ui\" && is_rustdoc_ui) {\n             cmd.arg(\"--rustdoc-path\").arg(builder.rustdoc(compiler.host));\n         }\n \n@@ -868,12 +907,18 @@ impl Step for Compiletest {\n             cmd.arg(\"--nodejs\").arg(nodejs);\n         }\n \n-        let mut flags = vec![\"-Crpath\".to_string()];\n-        if build.config.rust_optimize_tests {\n-            flags.push(\"-O\".to_string());\n-        }\n-        if build.config.rust_debuginfo_tests {\n-            flags.push(\"-g\".to_string());\n+        let mut flags = if is_rustdoc_ui {\n+            Vec::new()\n+        } else {\n+            vec![\"-Crpath\".to_string()]\n+        };\n+        if !is_rustdoc_ui {\n+            if build.config.rust_optimize_tests {\n+                flags.push(\"-O\".to_string());\n+            }\n+            if build.config.rust_debuginfo_tests {\n+                flags.push(\"-g\".to_string());\n+            }\n         }\n         flags.push(\"-Zunstable-options\".to_string());\n         flags.push(build.config.cmd.rustc_args().join(\" \"));"}, {"sha": "6a77de2c9868dd68e160682895dbdf34d73dbe07", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -998,7 +998,7 @@ pub trait Iterator {\n     /// an extra layer of indirection. `flat_map()` will remove this extra layer\n     /// on its own.\n     ///\n-    /// You can think of [`flat_map(f)`][flat_map] as the semantic equivalent\n+    /// You can think of `flat_map(f)` as the semantic equivalent\n     /// of [`map`]ping, and then [`flatten`]ing as in `map(f).flatten()`.\n     ///\n     /// Another way of thinking about `flat_map()`: [`map`]'s closure returns"}, {"sha": "464d57a270241e7e639d9ae0a90c324bf5e50ab1", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -258,7 +258,7 @@ pub struct CharSearcher<'a> {\n \n     /// `finger` is the current byte index of the forward search.\n     /// Imagine that it exists before the byte at its index, i.e.\n-    /// haystack[finger] is the first byte of the slice we must inspect during\n+    /// `haystack[finger]` is the first byte of the slice we must inspect during\n     /// forward searching\n     finger: usize,\n     /// `finger_back` is the current byte index of the reverse search."}, {"sha": "310fcbcfcb374ac5cbbbc3c728ad34c5b18bfa71", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -1550,7 +1550,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    /// Returns the type of ty[i]\n+    /// Returns the type of `ty[i]`.\n     pub fn builtin_index(&self) -> Option<Ty<'tcx>> {\n         match self.sty {\n             TyArray(ty, _) | TySlice(ty) => Some(ty),"}, {"sha": "443caa7618d7414f81896fe56e01cacb021d3d94", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -1178,6 +1178,10 @@ enum PathKind {\n     Type,\n }\n \n+fn resolution_failure(cx: &DocContext, path_str: &str) {\n+    cx.sess().warn(&format!(\"[{}] cannot be resolved, ignoring it...\", path_str));\n+}\n+\n impl Clean<Attributes> for [ast::Attribute] {\n     fn clean(&self, cx: &DocContext) -> Attributes {\n         let mut attrs = Attributes::from_ast(cx.sess().diagnostic(), self);\n@@ -1228,6 +1232,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             if let Ok(def) = resolve(cx, path_str, true) {\n                                 def\n                             } else {\n+                                resolution_failure(cx, path_str);\n                                 // this could just be a normal link or a broken link\n                                 // we could potentially check if something is\n                                 // \"intra-doc-link-like\" and warn in that case\n@@ -1238,6 +1243,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             if let Ok(def) = resolve(cx, path_str, false) {\n                                 def\n                             } else {\n+                                resolution_failure(cx, path_str);\n                                 // this could just be a normal link\n                                 continue;\n                             }\n@@ -1282,6 +1288,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             } else if let Ok(value_def) = resolve(cx, path_str, true) {\n                                 value_def\n                             } else {\n+                                resolution_failure(cx, path_str);\n                                 // this could just be a normal link\n                                 continue;\n                             }\n@@ -1290,6 +1297,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             if let Some(def) = macro_resolve(cx, path_str) {\n                                 (def, None)\n                             } else {\n+                                resolution_failure(cx, path_str);\n                                 continue\n                             }\n                         }"}, {"sha": "97c4e859327a91d3feefcf65abc87980395292c8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -18,6 +18,7 @@ use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, TyCtxt, AllArenas};\n use rustc::hir::map as hir_map;\n use rustc::lint;\n+use rustc::session::config::ErrorOutputType;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_resolve as resolve;\n use rustc_metadata::creader::CrateLoader;\n@@ -28,8 +29,9 @@ use syntax::ast::NodeId;\n use syntax::codemap;\n use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n+use syntax::json::JsonEmitter;\n use errors;\n-use errors::emitter::ColorConfig;\n+use errors::emitter::{Emitter, EmitterWriter};\n \n use std::cell::{RefCell, Cell};\n use std::mem;\n@@ -115,7 +117,6 @@ impl DocAccessLevels for AccessLevels<DefId> {\n     }\n }\n \n-\n pub fn run_core(search_paths: SearchPaths,\n                 cfgs: Vec<String>,\n                 externs: config::Externs,\n@@ -126,7 +127,8 @@ pub fn run_core(search_paths: SearchPaths,\n                 crate_name: Option<String>,\n                 force_unstable_if_unmarked: bool,\n                 edition: Edition,\n-                cg: CodegenOptions) -> (clean::Crate, RenderInfo)\n+                cg: CodegenOptions,\n+                error_format: ErrorOutputType) -> (clean::Crate, RenderInfo)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -138,6 +140,7 @@ pub fn run_core(search_paths: SearchPaths,\n     let warning_lint = lint::builtin::WARNINGS.name_lower();\n \n     let host_triple = TargetTriple::from_triple(config::host_triple());\n+    // plays with error output here!\n     let sessopts = config::Options {\n         maybe_sysroot,\n         search_paths,\n@@ -155,14 +158,42 @@ pub fn run_core(search_paths: SearchPaths,\n             edition,\n             ..config::basic_debugging_options()\n         },\n+        error_format,\n         ..config::basic_options().clone()\n     };\n \n     let codemap = Lrc::new(codemap::CodeMap::new(sessopts.file_path_mapping()));\n-    let diagnostic_handler = errors::Handler::with_tty_emitter(ColorConfig::Auto,\n-                                                               true,\n-                                                               false,\n-                                                               Some(codemap.clone()));\n+    let emitter: Box<dyn Emitter> = match error_format {\n+        ErrorOutputType::HumanReadable(color_config) => Box::new(\n+            EmitterWriter::stderr(\n+                color_config,\n+                Some(codemap.clone()),\n+                false,\n+                sessopts.debugging_opts.teach,\n+            ).ui_testing(sessopts.debugging_opts.ui_testing)\n+        ),\n+        ErrorOutputType::Json(pretty) => Box::new(\n+            JsonEmitter::stderr(\n+                None,\n+                codemap.clone(),\n+                pretty,\n+                sessopts.debugging_opts.approximate_suggestions,\n+            ).ui_testing(sessopts.debugging_opts.ui_testing)\n+        ),\n+        ErrorOutputType::Short(color_config) => Box::new(\n+            EmitterWriter::stderr(color_config, Some(codemap.clone()), true, false)\n+        ),\n+    };\n+\n+    let diagnostic_handler = errors::Handler::with_emitter_and_flags(\n+        emitter,\n+        errors::HandlerFlags {\n+            can_emit_warnings: true,\n+            treat_err_as_bug: false,\n+            external_macro_backtrace: false,\n+            ..Default::default()\n+        },\n+    );\n \n     let mut sess = session::build_session_(\n         sessopts, cpath, diagnostic_handler, codemap,"}, {"sha": "abeaef723d48776178f015cef2983c3ab8d849be", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -107,7 +107,7 @@ pub struct SharedContext {\n     /// This describes the layout of each page, and is not modified after\n     /// creation of the context (contains info like the favicon and added html).\n     pub layout: layout::Layout,\n-    /// This flag indicates whether [src] links should be generated or not. If\n+    /// This flag indicates whether `[src]` links should be generated or not. If\n     /// the source files are present in the html rendering, then this will be\n     /// `true`.\n     pub include_sources: bool,"}, {"sha": "60b713f2995e1089ee47478ed4c8a9dd9d58cc48", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -23,6 +23,7 @@\n #![feature(test)]\n #![feature(vec_remove_item)]\n #![feature(entry_and_modify)]\n+#![feature(dyn_trait)]\n \n extern crate arena;\n extern crate getopts;\n@@ -48,6 +49,8 @@ extern crate tempdir;\n \n extern crate serialize as rustc_serialize; // used by deriving\n \n+use errors::ColorConfig;\n+\n use std::collections::{BTreeMap, BTreeSet};\n use std::default::Default;\n use std::env;\n@@ -279,6 +282,21 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                      \"edition to use when compiling rust code (default: 2015)\",\n                      \"EDITION\")\n         }),\n+        unstable(\"color\", |o| {\n+            o.optopt(\"\",\n+                     \"color\",\n+                     \"Configure coloring of output:\n+                                          auto   = colorize, if output goes to a tty (default);\n+                                          always = always colorize output;\n+                                          never  = never colorize output\",\n+                     \"auto|always|never\")\n+        }),\n+        unstable(\"error-format\", |o| {\n+            o.optopt(\"\",\n+                     \"error-format\",\n+                     \"How errors and other messages are produced\",\n+                     \"human|json|short\")\n+        }),\n     ]\n }\n \n@@ -363,9 +381,33 @@ pub fn main_args(args: &[String]) -> isize {\n     }\n     let input = &matches.free[0];\n \n+    let color = match matches.opt_str(\"color\").as_ref().map(|s| &s[..]) {\n+        Some(\"auto\") => ColorConfig::Auto,\n+        Some(\"always\") => ColorConfig::Always,\n+        Some(\"never\") => ColorConfig::Never,\n+        None => ColorConfig::Auto,\n+        Some(arg) => {\n+            print_error(&format!(\"argument for --color must be `auto`, `always` or `never` \\\n+                                  (instead was `{}`)\", arg));\n+            return 1;\n+        }\n+    };\n+    let error_format = match matches.opt_str(\"error-format\").as_ref().map(|s| &s[..]) {\n+        Some(\"human\") => ErrorOutputType::HumanReadable(color),\n+        Some(\"json\") => ErrorOutputType::Json(false),\n+        Some(\"pretty-json\") => ErrorOutputType::Json(true),\n+        Some(\"short\") => ErrorOutputType::Short(color),\n+        None => ErrorOutputType::HumanReadable(color),\n+        Some(arg) => {\n+            print_error(&format!(\"argument for --error-format must be `human`, `json` or \\\n+                                  `short` (instead was `{}`)\", arg));\n+            return 1;\n+        }\n+    };\n+\n     let mut libs = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n-        libs.add_path(s, ErrorOutputType::default());\n+        libs.add_path(s, error_format);\n     }\n     let externs = match parse_externs(&matches) {\n         Ok(ex) => ex,\n@@ -465,7 +507,9 @@ pub fn main_args(args: &[String]) -> isize {\n     }\n \n     let output_format = matches.opt_str(\"w\");\n-    let res = acquire_input(PathBuf::from(input), externs, edition, cg, &matches, move |out| {\n+\n+    let res = acquire_input(PathBuf::from(input), externs, edition, cg, &matches, error_format,\n+                            move |out| {\n         let Output { krate, passes, renderinfo } = out;\n         info!(\"going to format\");\n         match output_format.as_ref().map(|s| &**s) {\n@@ -509,13 +553,14 @@ fn acquire_input<R, F>(input: PathBuf,\n                        edition: Edition,\n                        cg: CodegenOptions,\n                        matches: &getopts::Matches,\n+                       error_format: ErrorOutputType,\n                        f: F)\n                        -> Result<R, String>\n where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n-        Some(\"rust\") => Ok(rust_input(input, externs, edition, cg, matches, f)),\n+        Some(\"rust\") => Ok(rust_input(input, externs, edition, cg, matches, error_format, f)),\n         Some(s) => Err(format!(\"unknown input format: {}\", s)),\n-        None => Ok(rust_input(input, externs, edition, cg, matches, f))\n+        None => Ok(rust_input(input, externs, edition, cg, matches, error_format, f))\n     }\n }\n \n@@ -546,6 +591,7 @@ fn rust_input<R, F>(cratefile: PathBuf,\n                     edition: Edition,\n                     cg: CodegenOptions,\n                     matches: &getopts::Matches,\n+                    error_format: ErrorOutputType,\n                     f: F) -> R\n where R: 'static + Send,\n       F: 'static + Send + FnOnce(Output) -> R\n@@ -598,7 +644,7 @@ where R: 'static + Send,\n         let (mut krate, renderinfo) =\n             core::run_core(paths, cfgs, externs, Input::File(cratefile), triple, maybe_sysroot,\n                            display_warnings, crate_name.clone(),\n-                           force_unstable_if_unmarked, edition, cg);\n+                           force_unstable_if_unmarked, edition, cg, error_format);\n \n         info!(\"finished with rustc\");\n "}, {"sha": "4850ed0c5be054fac6cd5bfe4771a7520fab1430", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -61,7 +61,7 @@ use sys_common::{AsInner, IntoInner, FromInner};\n /// # Conversions\n ///\n /// See the [module's toplevel documentation about conversions][conversions] for a discussion on\n-/// the traits which `OsString` implements for conversions from/to native representations.\n+/// the traits which `OsString` implements for [conversions] from/to native representations.\n ///\n /// [`OsStr`]: struct.OsStr.html\n /// [`&OsStr`]: struct.OsStr.html\n@@ -74,6 +74,7 @@ use sys_common::{AsInner, IntoInner, FromInner};\n /// [`new`]: #method.new\n /// [`push`]: #method.push\n /// [`as_os_str`]: #method.as_os_str\n+/// [conversions]: index.html#conversions\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsString {\n@@ -89,7 +90,7 @@ pub struct OsString {\n /// references; the latter are owned strings.\n ///\n /// See the [module's toplevel documentation about conversions][conversions] for a discussion on\n-/// the traits which `OsStr` implements for conversions from/to native representations.\n+/// the traits which `OsStr` implements for [conversions] from/to native representations.\n ///\n /// [`OsString`]: struct.OsString.html\n /// [`&str`]: ../primitive.str.html"}, {"sha": "f0bca7784d840414bb5bea52b1777d60a83ffc41", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -44,10 +44,10 @@\n //!\n //! Once you are familiar with the contents of the standard library you may\n //! begin to find the verbosity of the prose distracting. At this stage in your\n-//! development you may want to press the **[-]** button near the top of the\n+//! development you may want to press the `[-]` button near the top of the\n //! page to collapse it into a more skimmable view.\n //!\n-//! While you are looking at that **[-]** button also notice the **[src]**\n+//! While you are looking at that `[-]` button also notice the `[src]`\n //! button. Rust's API documentation comes with the source code and you are\n //! encouraged to read it. The standard library source is generally high\n //! quality and a peek behind the curtains is often enlightening."}, {"sha": "6902ec82047d73094259a93eccd16f401cebe179", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -787,13 +787,13 @@ pub mod builtin {\n     }\n }\n \n-/// A macro for defining #[cfg] if-else statements.\n+/// A macro for defining `#[cfg]` if-else statements.\n ///\n /// This is similar to the `if/elif` C preprocessor macro by allowing definition\n /// of a cascade of `#[cfg]` cases, emitting the implementation which matches\n /// first.\n ///\n-/// This allows you to conveniently provide a long list #[cfg]'d blocks of code\n+/// This allows you to conveniently provide a long list `#[cfg]`'d blocks of code\n /// without having to rewrite each clause multiple times.\n macro_rules! cfg_if {\n     ($("}, {"sha": "5e96b5ce6733c8d60631458755b37ac4e6ddd32e", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Machinery for hygienic macros, inspired by the MTWT[1] paper.\n+//! Machinery for hygienic macros, inspired by the `MTWT[1]` paper.\n //!\n-//! [1] Matthew Flatt, Ryan Culpepper, David Darais, and Robert Bruce Findler. 2012.\n+//! `[1]` Matthew Flatt, Ryan Culpepper, David Darais, and Robert Bruce Findler. 2012.\n //! *Macros that work together: Compile-time bindings, partial expansion,\n //! and definition contexts*. J. Funct. Program. 22, 2 (March 2012), 181-216.\n //! DOI=10.1017/S0956796812000093 <http://dx.doi.org/10.1017/S0956796812000093>"}, {"sha": "a4d1797c3ec5baa000daeebb55524950c06b63fe", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -1288,7 +1288,6 @@ fn get_concurrency() -> usize {\n \n pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescAndFn> {\n     let mut filtered = tests;\n-\n     // Remove tests that don't match the test filter\n     filtered = match opts.filter {\n         None => filtered,"}, {"sha": "a962d5fc4153740e377dd50243969c75543d0562", "filename": "src/libunwind/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibunwind%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Flibunwind%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fmacros.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/// A macro for defining #[cfg] if-else statements.\n+/// A macro for defining `#[cfg]` if-else statements.\n ///\n /// This is similar to the `if/elif` C preprocessor macro by allowing definition\n /// of a cascade of `#[cfg]` cases, emitting the implementation which matches\n /// first.\n ///\n-/// This allows you to conveniently provide a long list #[cfg]'d blocks of code\n+/// This allows you to conveniently provide a long list `#[cfg]`'d blocks of code\n /// without having to rewrite each clause multiple times.\n macro_rules! cfg_if {\n     ($("}, {"sha": "ecd8a3390b75316cd47561651694b48acc78f94b", "filename": "src/test/run-pass/issue-16819.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Ftest%2Frun-pass%2Fissue-16819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Ftest%2Frun-pass%2Fissue-16819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16819.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//`#[cfg]` on struct field permits empty unusable struct\n+// `#[cfg]` on struct field permits empty unusable struct\n \n struct S {\n     #[cfg(untrue)]"}, {"sha": "2a00d31e3d71590c735cfacd3f20ccc5e1a311f5", "filename": "src/test/rustdoc-ui/intra-links-warning.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+//! Test with [Foo::baz], [Bar::foo], [Uniooon::X]\n+\n+pub struct Foo {\n+    pub bar: usize,\n+}"}, {"sha": "67d7bdd02b3593ecb309e38bc059912988aacc0c", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -0,0 +1,6 @@\n+warning: [Foo::baz] cannot be resolved, ignoring it...\n+\n+warning: [Bar::foo] cannot be resolved, ignoring it...\n+\n+warning: [Uniooon::X] cannot be resolved, ignoring it...\n+"}, {"sha": "ae4f4aa4046099c89e7192e0d698553ac469de60", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -283,6 +283,8 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         ),\n     };\n \n+    let src_base = opt_path(matches, \"src-base\");\n+    let run_ignored = matches.opt_present(\"ignored\");\n     Config {\n         compile_lib_path: make_absolute(opt_path(matches, \"compile-lib-path\")),\n         run_lib_path: make_absolute(opt_path(matches, \"run-lib-path\")),\n@@ -293,15 +295,15 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n         force_valgrind: matches.opt_present(\"force-valgrind\"),\n         llvm_filecheck: matches.opt_str(\"llvm-filecheck\").map(|s| PathBuf::from(&s)),\n-        src_base: opt_path(matches, \"src-base\"),\n+        src_base,\n         build_base: opt_path(matches, \"build-base\"),\n         stage_id: matches.opt_str(\"stage-id\").unwrap(),\n         mode: matches\n             .opt_str(\"mode\")\n             .unwrap()\n             .parse()\n             .expect(\"invalid mode\"),\n-        run_ignored: matches.opt_present(\"ignored\"),\n+        run_ignored,\n         filter: matches.free.first().cloned(),\n         filter_exact: matches.opt_present(\"exact\"),\n         logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),"}, {"sha": "9fa176aa68c58c4054eabc1e7675b24031b46ca5", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728c7a726f3e8854f5a80b474d1a8bacab10304/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=8728c7a726f3e8854f5a80b474d1a8bacab10304", "patch": "@@ -1288,7 +1288,9 @@ impl<'test> TestCx<'test> {\n                 // want to actually assert warnings about all this code. Instead\n                 // let's just ignore unused code warnings by defaults and tests\n                 // can turn it back on if needed.\n-                rustc.args(&[\"-A\", \"unused\"]);\n+                if !self.config.src_base.ends_with(\"rustdoc-ui\") {\n+                    rustc.args(&[\"-A\", \"unused\"]);\n+                }\n             }\n             _ => {}\n         }\n@@ -1582,7 +1584,12 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn make_compile_args(&self, input_file: &Path, output_file: TargetLocation) -> Command {\n-        let mut rustc = Command::new(&self.config.rustc_path);\n+        let is_rustdoc = self.config.src_base.ends_with(\"rustdoc-ui\");\n+        let mut rustc = if !is_rustdoc {\n+            Command::new(&self.config.rustc_path)\n+        } else {\n+            Command::new(&self.config.rustdoc_path.clone().expect(\"no rustdoc built yet\"))\n+        };\n         rustc.arg(input_file).arg(\"-L\").arg(&self.config.build_base);\n \n         // Optionally prevent default --target if specified in test compile-flags.\n@@ -1605,17 +1612,19 @@ impl<'test> TestCx<'test> {\n             rustc.args(&[\"--cfg\", revision]);\n         }\n \n-        if let Some(ref incremental_dir) = self.props.incremental_dir {\n-            rustc.args(&[\n-                \"-C\",\n-                &format!(\"incremental={}\", incremental_dir.display()),\n-            ]);\n-            rustc.args(&[\"-Z\", \"incremental-verify-ich\"]);\n-            rustc.args(&[\"-Z\", \"incremental-queries\"]);\n-        }\n+        if !is_rustdoc {\n+            if let Some(ref incremental_dir) = self.props.incremental_dir {\n+                rustc.args(&[\n+                    \"-C\",\n+                    &format!(\"incremental={}\", incremental_dir.display()),\n+                ]);\n+                rustc.args(&[\"-Z\", \"incremental-verify-ich\"]);\n+                rustc.args(&[\"-Z\", \"incremental-queries\"]);\n+            }\n \n-        if self.config.mode == CodegenUnits {\n-            rustc.args(&[\"-Z\", \"human_readable_cgu_names\"]);\n+            if self.config.mode == CodegenUnits {\n+                rustc.args(&[\"-Z\", \"human_readable_cgu_names\"]);\n+            }\n         }\n \n         match self.config.mode {\n@@ -1668,11 +1677,12 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-\n-        if self.config.target == \"wasm32-unknown-unknown\" {\n-            // rustc.arg(\"-g\"); // get any backtrace at all on errors\n-        } else if !self.props.no_prefer_dynamic {\n-            rustc.args(&[\"-C\", \"prefer-dynamic\"]);\n+        if !is_rustdoc {\n+            if self.config.target == \"wasm32-unknown-unknown\" {\n+                // rustc.arg(\"-g\"); // get any backtrace at all on errors\n+            } else if !self.props.no_prefer_dynamic {\n+                rustc.args(&[\"-C\", \"prefer-dynamic\"]);\n+            }\n         }\n \n         match output_file {\n@@ -1696,8 +1706,10 @@ impl<'test> TestCx<'test> {\n         } else {\n             rustc.args(self.split_maybe_args(&self.config.target_rustcflags));\n         }\n-        if let Some(ref linker) = self.config.linker {\n-            rustc.arg(format!(\"-Clinker={}\", linker));\n+        if !is_rustdoc {\n+            if let Some(ref linker) = self.config.linker {\n+                rustc.arg(format!(\"-Clinker={}\", linker));\n+            }\n         }\n \n         rustc.args(&self.props.compile_flags);\n@@ -2509,7 +2521,6 @@ impl<'test> TestCx<'test> {\n             .compile_flags\n             .iter()\n             .any(|s| s.contains(\"--error-format\"));\n-\n         let proc_res = self.compile_test();\n         self.check_if_test_should_compile(&proc_res);\n "}]}