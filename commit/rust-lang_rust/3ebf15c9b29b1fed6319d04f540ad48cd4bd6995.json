{"sha": "3ebf15c9b29b1fed6319d04f540ad48cd4bd6995", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYmYxNWM5YjI5YjFmZWQ2MzE5ZDA0ZjU0MGFkNDhjZDRiZDY5OTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-21T10:12:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-21T10:12:18Z"}, "message": "Merge #2626\n\n2626: Recursive collect macros in impl items r=matklad a=edwin0cheng\n\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "c2fae7b1124bbbbde3cc9c9658997b9a22720efa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2fae7b1124bbbbde3cc9c9658997b9a22720efa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ebf15c9b29b1fed6319d04f540ad48cd4bd6995", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/fACCRBK7hj4Ov3rIwAAdHIIABPWX/Zr6PFwpFZAC32CDZTq\nWl9p7mopEDqEgkhtkTVXCeVKnOl7a/cqvGuy+jUCd0nk7yI9pnX1HIzZUVATOhd6\nXjMRCMbLA/Qnc2fMZI5U11cdJqhfxE9k4jYLGTUn9hcjsoHDioB77ZjN6SDj66Z3\nvz6bgDZtNmfQCQQyYs6NtLwxEeBU3e91jodIjz8wK4nbuGvnO+G2QeFvWL/cD05z\nInjHuilPG8C0HQL2ozf4za7KgC3ysj3zMt2blKAbT9qxB1z/Pd9M+KV1YV9tvKvM\nc5kKpPXMXlg/P2eJ3ClNl4S45Tk1MH3jK2vet/u74QpI8zwnmFLROOONzGQAkO4=\n=hSXy\n-----END PGP SIGNATURE-----\n", "payload": "tree c2fae7b1124bbbbde3cc9c9658997b9a22720efa\nparent b902d4403a791265fa38ef6ba33554ad28350519\nparent c1166697a74bca690443525ced8cd8bc08894779\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576923138 +0000\ncommitter GitHub <noreply@github.com> 1576923138 +0000\n\nMerge #2626\n\n2626: Recursive collect macros in impl items r=matklad a=edwin0cheng\n\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebf15c9b29b1fed6319d04f540ad48cd4bd6995", "html_url": "https://github.com/rust-lang/rust/commit/3ebf15c9b29b1fed6319d04f540ad48cd4bd6995", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ebf15c9b29b1fed6319d04f540ad48cd4bd6995/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b902d4403a791265fa38ef6ba33554ad28350519", "url": "https://api.github.com/repos/rust-lang/rust/commits/b902d4403a791265fa38ef6ba33554ad28350519", "html_url": "https://github.com/rust-lang/rust/commit/b902d4403a791265fa38ef6ba33554ad28350519"}, {"sha": "c1166697a74bca690443525ced8cd8bc08894779", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1166697a74bca690443525ced8cd8bc08894779", "html_url": "https://github.com/rust-lang/rust/commit/c1166697a74bca690443525ced8cd8bc08894779"}], "stats": {"total": 69, "additions": 59, "deletions": 10}, "files": [{"sha": "1aa9a9b7d7df474e08d5291d9b1d443edd624499", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3ebf15c9b29b1fed6319d04f540ad48cd4bd6995/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebf15c9b29b1fed6319d04f540ad48cd4bd6995/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=3ebf15c9b29b1fed6319d04f540ad48cd4bd6995", "patch": "@@ -225,22 +225,48 @@ fn collect_impl_items_in_macros(\n     let mut expander = Expander::new(db, impl_block.file_id, module_id);\n     let mut res = Vec::new();\n \n+    // We set a limit to protect against infinite recursion\n+    let limit = 100;\n+\n     for m in impl_block.value.syntax().children().filter_map(ast::MacroCall::cast) {\n-        if let Some((mark, items)) = expander.enter_expand(db, m) {\n-            let items: InFile<ast::MacroItems> = expander.to_source(items);\n-            expander.exit(db, mark);\n-            res.extend(collect_impl_items(\n-                db,\n-                items.value.items().filter_map(|it| ImplItem::cast(it.syntax().clone())),\n-                items.file_id,\n-                id,\n-            ));\n-        }\n+        res.extend(collect_impl_items_in_macro(db, &mut expander, m, id, limit))\n     }\n \n     res\n }\n \n+fn collect_impl_items_in_macro(\n+    db: &impl DefDatabase,\n+    expander: &mut Expander,\n+    m: ast::MacroCall,\n+    id: ImplId,\n+    limit: usize,\n+) -> Vec<AssocItemId> {\n+    if limit == 0 {\n+        return Vec::new();\n+    }\n+\n+    if let Some((mark, items)) = expander.enter_expand(db, m) {\n+        let items: InFile<ast::MacroItems> = expander.to_source(items);\n+        let mut res = collect_impl_items(\n+            db,\n+            items.value.items().filter_map(|it| ImplItem::cast(it.syntax().clone())),\n+            items.file_id,\n+            id,\n+        );\n+        // Recursive collect macros\n+        // Note that ast::ModuleItem do not include ast::MacroCall\n+        // We cannot use ModuleItemOwner::items here\n+        for it in items.value.syntax().children().filter_map(ast::MacroCall::cast) {\n+            res.extend(collect_impl_items_in_macro(db, expander, it, id, limit - 1))\n+        }\n+        expander.exit(db, mark);\n+        res\n+    } else {\n+        Vec::new()\n+    }\n+}\n+\n fn collect_impl_items(\n     db: &impl DefDatabase,\n     impl_items: impl Iterator<Item = ImplItem>,"}, {"sha": "69c695cc8f10edf6d8f1051d45e0b345fbcb62df", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3ebf15c9b29b1fed6319d04f540ad48cd4bd6995/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebf15c9b29b1fed6319d04f540ad48cd4bd6995/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=3ebf15c9b29b1fed6319d04f540ad48cd4bd6995", "patch": "@@ -201,6 +201,29 @@ fn test() { S.foo()<|>; }\n     assert_eq!(t, \"u128\");\n }\n \n+#[test]\n+fn infer_impl_items_generated_by_macros_chain() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+macro_rules! m_inner {\n+    () => {fn foo(&self) -> u128 {0}}\n+}\n+macro_rules! m {\n+    () => {m_inner!();}\n+}\n+\n+struct S;\n+impl S {\n+    m!();\n+}\n+\n+fn test() { S.foo()<|>; }\n+\"#,\n+    );\n+    assert_eq!(t, \"u128\");\n+}\n+\n #[test]\n fn infer_macro_with_dollar_crate_is_correct_in_expr() {\n     let (db, pos) = TestDB::with_position("}]}