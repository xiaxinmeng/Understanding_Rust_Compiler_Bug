{"sha": "eb7384d479f5f17a71e17c99069f13eb90d2eb4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNzM4NGQ0NzlmNWYxN2E3MWUxN2M5OTA2OWYxM2ViOTBkMmViNGE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-07-29T16:15:28Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-08-04T09:12:22Z"}, "message": "Add missing \"is_min_const_fn\" calls to prevent \"const\" to be displayed if the \"rustc_const_unstable\" attribute is present", "tree": {"sha": "5e833f82013e862f921991b4a067033e8b58407a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e833f82013e862f921991b4a067033e8b58407a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb7384d479f5f17a71e17c99069f13eb90d2eb4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7384d479f5f17a71e17c99069f13eb90d2eb4a", "html_url": "https://github.com/rust-lang/rust/commit/eb7384d479f5f17a71e17c99069f13eb90d2eb4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb7384d479f5f17a71e17c99069f13eb90d2eb4a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a92b9987abd01c4b7e59c870e85beb9dd4d4aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a92b9987abd01c4b7e59c870e85beb9dd4d4aa2", "html_url": "https://github.com/rust-lang/rust/commit/3a92b9987abd01c4b7e59c870e85beb9dd4d4aa2"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "e47110a7a2f3e04292c825660b131ac54df06d18", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eb7384d479f5f17a71e17c99069f13eb90d2eb4a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7384d479f5f17a71e17c99069f13eb90d2eb4a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=eb7384d479f5f17a71e17c99069f13eb90d2eb4a", "patch": "@@ -1090,25 +1090,37 @@ impl Clean<TypeKind> for hir::def::DefKind {\n \n impl Clean<Item> for hir::TraitItem<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n+        let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n         let inner = match self.kind {\n             hir::TraitItemKind::Const(ref ty, default) => {\n                 AssocConstItem(ty.clean(cx), default.map(|e| print_const_expr(cx, e)))\n             }\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n-                MethodItem((sig, &self.generics, body, None).clean(cx))\n+                let mut m = (sig, &self.generics, body, None).clean(cx);\n+                if m.header.constness == hir::Constness::Const\n+                    && !is_min_const_fn(cx.tcx, local_did.to_def_id())\n+                {\n+                    m.header.constness = hir::Constness::NotConst;\n+                }\n+                MethodItem(m)\n             }\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Required(ref names)) => {\n                 let (generics, decl) = enter_impl_trait(cx, || {\n                     (self.generics.clean(cx), (&*sig.decl, &names[..]).clean(cx))\n                 });\n                 let (all_types, ret_types) = get_all_types(&generics, &decl, cx);\n-                TyMethodItem(TyMethod { header: sig.header, decl, generics, all_types, ret_types })\n+                let mut t = TyMethod { header: sig.header, decl, generics, all_types, ret_types };\n+                if t.header.constness == hir::Constness::Const\n+                    && !is_min_const_fn(cx.tcx, local_did.to_def_id())\n+                {\n+                    t.header.constness = hir::Constness::NotConst;\n+                }\n+                TyMethodItem(t)\n             }\n             hir::TraitItemKind::Type(ref bounds, ref default) => {\n                 AssocTypeItem(bounds.clean(cx), default.clean(cx))\n             }\n         };\n-        let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n         Item {\n             name: Some(self.ident.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n@@ -1124,20 +1136,26 @@ impl Clean<Item> for hir::TraitItem<'_> {\n \n impl Clean<Item> for hir::ImplItem<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n+        let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n         let inner = match self.kind {\n             hir::ImplItemKind::Const(ref ty, expr) => {\n                 AssocConstItem(ty.clean(cx), Some(print_const_expr(cx, expr)))\n             }\n             hir::ImplItemKind::Fn(ref sig, body) => {\n-                MethodItem((sig, &self.generics, body, Some(self.defaultness)).clean(cx))\n+                let mut m = (sig, &self.generics, body, Some(self.defaultness)).clean(cx);\n+                if m.header.constness == hir::Constness::Const\n+                    && !is_min_const_fn(cx.tcx, local_did.to_def_id())\n+                {\n+                    m.header.constness = hir::Constness::NotConst;\n+                }\n+                MethodItem(m)\n             }\n             hir::ImplItemKind::TyAlias(ref ty) => {\n                 let type_ = ty.clean(cx);\n                 let item_type = type_.def_id().and_then(|did| inline::build_ty(cx, did));\n                 TypedefItem(Typedef { type_, generics: Generics::default(), item_type }, true)\n             }\n         };\n-        let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n         Item {\n             name: Some(self.ident.name.clean(cx)),\n             source: self.span.clean(cx),"}]}