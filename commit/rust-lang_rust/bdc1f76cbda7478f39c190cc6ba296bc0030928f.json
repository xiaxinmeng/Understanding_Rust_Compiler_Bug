{"sha": "bdc1f76cbda7478f39c190cc6ba296bc0030928f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYzFmNzZjYmRhNzQ3OGYzOWMxOTBjYzZiYTI5NmJjMDAzMDkyOGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-29T12:36:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-29T12:36:11Z"}, "message": "Merge #5928\n\n5928: Add method references CodeLens r=vsrs a=vsrs\n\nThe PR adds CodeLens for methods and  free-standing functions:\r\n\r\n![method_refs](https://user-images.githubusercontent.com/62505555/91858244-95fbfb00-ec71-11ea-90c7-5b3ee067e305.png)\r\n\r\nRelates to #5836\n\nCo-authored-by: vsrs <vit@conrlab.com>", "tree": {"sha": "91d3312e41626d40387d59e9243ae32b099eecb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91d3312e41626d40387d59e9243ae32b099eecb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdc1f76cbda7478f39c190cc6ba296bc0030928f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfcyo7CRBK7hj4Ov3rIwAAdHIIAI6OddM/lR1kuqhztwaYCVKu\nPokIn6bNfxTKgHWUiDcnCXLSdpLL9QS6cYT90l5iezBDCrbLu/bfIW6zQBbyfkR1\nU0lD/LTH/0O8zn4dJL6J277bHOTCiSnx4cyiwQIUaIm7lzLcaytLFDxd2uW+Ljwq\nZJOF9F40Nl9w//QSELu4TU0ZsbIUlm3hR+y98+wPfSe8FL88Lt8QQQPOlq1GMXcF\nZnZzKGzSS2Lp5tvnVKsbeC8cIZ92nDyNjOgwt1R/0vMGfb0/RJ/FROP1loekwlAB\ne3hOWpAjrwbcCh0RsAtH8kM3PnvdyZS2Yhj11Ng13NQxeCyTgUAHnD6/qo6hw5E=\n=P1lY\n-----END PGP SIGNATURE-----\n", "payload": "tree 91d3312e41626d40387d59e9243ae32b099eecb1\nparent e813de6cdd53e542bce8d4a554288dc2f17bbf5e\nparent 91da41b3b13129007920943d7300459921faf3c5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1601382971 +0000\ncommitter GitHub <noreply@github.com> 1601382971 +0000\n\nMerge #5928\n\n5928: Add method references CodeLens r=vsrs a=vsrs\n\nThe PR adds CodeLens for methods and  free-standing functions:\r\n\r\n![method_refs](https://user-images.githubusercontent.com/62505555/91858244-95fbfb00-ec71-11ea-90c7-5b3ee067e305.png)\r\n\r\nRelates to #5836\n\nCo-authored-by: vsrs <vit@conrlab.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc1f76cbda7478f39c190cc6ba296bc0030928f", "html_url": "https://github.com/rust-lang/rust/commit/bdc1f76cbda7478f39c190cc6ba296bc0030928f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdc1f76cbda7478f39c190cc6ba296bc0030928f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e813de6cdd53e542bce8d4a554288dc2f17bbf5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e813de6cdd53e542bce8d4a554288dc2f17bbf5e", "html_url": "https://github.com/rust-lang/rust/commit/e813de6cdd53e542bce8d4a554288dc2f17bbf5e"}, {"sha": "91da41b3b13129007920943d7300459921faf3c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/91da41b3b13129007920943d7300459921faf3c5", "html_url": "https://github.com/rust-lang/rust/commit/91da41b3b13129007920943d7300459921faf3c5"}], "stats": {"total": 184, "additions": 175, "deletions": 9}, "files": [{"sha": "1989a562bec4d6dd564ad3386eb8a56cfc3037de", "filename": "crates/ide/src/fn_references.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/bdc1f76cbda7478f39c190cc6ba296bc0030928f/crates%2Fide%2Fsrc%2Ffn_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc1f76cbda7478f39c190cc6ba296bc0030928f/crates%2Fide%2Fsrc%2Ffn_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffn_references.rs?ref=bdc1f76cbda7478f39c190cc6ba296bc0030928f", "patch": "@@ -0,0 +1,95 @@\n+//! This module implements a methods and free functions search in the specified file.\n+//! We have to skip tests, so cannot reuse file_structure module.\n+\n+use hir::Semantics;\n+use ide_db::RootDatabase;\n+use syntax::{ast, ast::NameOwner, AstNode, SyntaxNode};\n+\n+use crate::{runnables::has_test_related_attribute, FileId, FileRange};\n+\n+pub(crate) fn find_all_methods(db: &RootDatabase, file_id: FileId) -> Vec<FileRange> {\n+    let sema = Semantics::new(db);\n+    let source_file = sema.parse(file_id);\n+    source_file.syntax().descendants().filter_map(|it| method_range(it, file_id)).collect()\n+}\n+\n+fn method_range(item: SyntaxNode, file_id: FileId) -> Option<FileRange> {\n+    ast::Fn::cast(item).and_then(|fn_def| {\n+        if has_test_related_attribute(&fn_def) {\n+            None\n+        } else {\n+            fn_def.name().map(|name| FileRange { file_id, range: name.syntax().text_range() })\n+        }\n+    })\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::mock_analysis::analysis_and_position;\n+    use crate::{FileRange, TextSize};\n+    use std::ops::RangeInclusive;\n+\n+    #[test]\n+    fn test_find_all_methods() {\n+        let (analysis, pos) = analysis_and_position(\n+            r#\"\n+            //- /lib.rs\n+            fn private_fn() {<|>}\n+\n+            pub fn pub_fn() {}\n+\n+            pub fn generic_fn<T>(arg: T) {}\n+        \"#,\n+        );\n+\n+        let refs = analysis.find_all_methods(pos.file_id).unwrap();\n+        check_result(&refs, &[3..=13, 27..=33, 47..=57]);\n+    }\n+\n+    #[test]\n+    fn test_find_trait_methods() {\n+        let (analysis, pos) = analysis_and_position(\n+            r#\"\n+            //- /lib.rs\n+            trait Foo {\n+                fn bar() {<|>}\n+                fn baz() {}\n+            }\n+        \"#,\n+        );\n+\n+        let refs = analysis.find_all_methods(pos.file_id).unwrap();\n+        check_result(&refs, &[19..=22, 35..=38]);\n+    }\n+\n+    #[test]\n+    fn test_skip_tests() {\n+        let (analysis, pos) = analysis_and_position(\n+            r#\"\n+            //- /lib.rs\n+            #[test]\n+            fn foo() {<|>}\n+\n+            pub fn pub_fn() {}\n+\n+            mod tests {\n+                #[test]\n+                fn bar() {}\n+            }\n+        \"#,\n+        );\n+\n+        let refs = analysis.find_all_methods(pos.file_id).unwrap();\n+        check_result(&refs, &[28..=34]);\n+    }\n+\n+    fn check_result(refs: &[FileRange], expected: &[RangeInclusive<u32>]) {\n+        assert_eq!(refs.len(), expected.len());\n+\n+        for (i, item) in refs.iter().enumerate() {\n+            let range = &expected[i];\n+            assert_eq!(TextSize::from(*range.start()), item.range.start());\n+            assert_eq!(TextSize::from(*range.end()), item.range.end());\n+        }\n+    }\n+}"}, {"sha": "31f2bcba35eba8dfff1c95db3154b36aac690c40", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdc1f76cbda7478f39c190cc6ba296bc0030928f/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc1f76cbda7478f39c190cc6ba296bc0030928f/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=bdc1f76cbda7478f39c190cc6ba296bc0030928f", "patch": "@@ -38,6 +38,7 @@ mod join_lines;\n mod matching_brace;\n mod parent_module;\n mod references;\n+mod fn_references;\n mod runnables;\n mod status;\n mod syntax_highlighting;\n@@ -369,6 +370,11 @@ impl Analysis {\n         })\n     }\n \n+    /// Finds all methods and free functions for the file. Does not return tests!\n+    pub fn find_all_methods(&self, file_id: FileId) -> Cancelable<Vec<FileRange>> {\n+        self.with_db(|db| fn_references::find_all_methods(db, file_id))\n+    }\n+\n     /// Returns a short text describing element at position.\n     pub fn hover(\n         &self,"}, {"sha": "cfeff40c1a2a54ea5ccc681198c65172c74ba49d", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdc1f76cbda7478f39c190cc6ba296bc0030928f/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc1f76cbda7478f39c190cc6ba296bc0030928f/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=bdc1f76cbda7478f39c190cc6ba296bc0030928f", "patch": "@@ -203,7 +203,7 @@ impl TestAttr {\n ///\n /// It may produce false positives, for example, `#[wasm_bindgen_test]` requires a different command to run the test,\n /// but it's better than not to have the runnables for the tests at all.\n-fn has_test_related_attribute(fn_def: &ast::Fn) -> bool {\n+pub(crate) fn has_test_related_attribute(fn_def: &ast::Fn) -> bool {\n     fn_def\n         .attrs()\n         .filter_map(|attr| attr.path())"}, {"sha": "42e1ad376ce14f824998840a4b7eaad5bca7daa9", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bdc1f76cbda7478f39c190cc6ba296bc0030928f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc1f76cbda7478f39c190cc6ba296bc0030928f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=bdc1f76cbda7478f39c190cc6ba296bc0030928f", "patch": "@@ -74,19 +74,18 @@ pub struct LensConfig {\n     pub run: bool,\n     pub debug: bool,\n     pub implementations: bool,\n+    pub method_refs: bool,\n }\n \n impl Default for LensConfig {\n     fn default() -> Self {\n-        Self { run: true, debug: true, implementations: true }\n+        Self { run: true, debug: true, implementations: true, method_refs: false }\n     }\n }\n \n impl LensConfig {\n-    pub const NO_LENS: LensConfig = Self { run: false, debug: false, implementations: false };\n-\n     pub fn any(&self) -> bool {\n-        self.implementations || self.runnable()\n+        self.implementations || self.runnable() || self.references()\n     }\n \n     pub fn none(&self) -> bool {\n@@ -96,6 +95,10 @@ impl LensConfig {\n     pub fn runnable(&self) -> bool {\n         self.run || self.debug\n     }\n+\n+    pub fn references(&self) -> bool {\n+        self.method_refs\n+    }\n }\n \n #[derive(Debug, Clone)]\n@@ -278,6 +281,7 @@ impl Config {\n             run: data.lens_enable && data.lens_run,\n             debug: data.lens_enable && data.lens_debug,\n             implementations: data.lens_enable && data.lens_implementations,\n+            method_refs: data.lens_enable && data.lens_methodReferences,\n         };\n \n         if !data.linkedProjects.is_empty() {\n@@ -459,10 +463,11 @@ config_data! {\n         inlayHints_parameterHints: bool     = true,\n         inlayHints_typeHints: bool          = true,\n \n-        lens_debug: bool           = true,\n-        lens_enable: bool          = true,\n-        lens_implementations: bool = true,\n-        lens_run: bool             = true,\n+        lens_debug: bool            = true,\n+        lens_enable: bool           = true,\n+        lens_implementations: bool  = true,\n+        lens_run: bool              = true,\n+        lens_methodReferences: bool = false,\n \n         linkedProjects: Vec<ManifestOrProjectJson> = Vec::new(),\n         lruCapacity: Option<usize>                 = None,"}, {"sha": "7ac1a30f6cc11b88d32620ac0694c48f721edcc5", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bdc1f76cbda7478f39c190cc6ba296bc0030928f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc1f76cbda7478f39c190cc6ba296bc0030928f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=bdc1f76cbda7478f39c190cc6ba296bc0030928f", "patch": "@@ -11,6 +11,7 @@ use ide::{\n     FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, NavigationTarget, Query,\n     RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n };\n+use itertools::Itertools;\n use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n@@ -952,13 +953,30 @@ pub(crate) fn handle_code_lens(\n                 }),\n         );\n     }\n+\n+    if snap.config.lens.references() {\n+        lenses.extend(snap.analysis.find_all_methods(file_id)?.into_iter().map(|it| {\n+            let range = to_proto::range(&line_index, it.range);\n+            let position = to_proto::position(&line_index, it.range.start());\n+            let lens_params =\n+                lsp_types::TextDocumentPositionParams::new(params.text_document.clone(), position);\n+\n+            CodeLens {\n+                range,\n+                command: None,\n+                data: Some(to_value(CodeLensResolveData::References(lens_params)).unwrap()),\n+            }\n+        }));\n+    }\n+\n     Ok(Some(lenses))\n }\n \n #[derive(Debug, Serialize, Deserialize)]\n #[serde(rename_all = \"camelCase\")]\n enum CodeLensResolveData {\n     Impls(lsp_types::request::GotoImplementationParams),\n+    References(lsp_types::TextDocumentPositionParams),\n }\n \n pub(crate) fn handle_code_lens_resolve(\n@@ -990,6 +1008,34 @@ pub(crate) fn handle_code_lens_resolve(\n             );\n             Ok(CodeLens { range: code_lens.range, command: Some(cmd), data: None })\n         }\n+        Some(CodeLensResolveData::References(doc_position)) => {\n+            let position = from_proto::file_position(&snap, doc_position.clone())?;\n+            let locations = snap\n+                .analysis\n+                .find_all_refs(position, None)\n+                .unwrap_or(None)\n+                .map(|r| {\n+                    r.references()\n+                        .iter()\n+                        .filter_map(|it| to_proto::location(&snap, it.file_range).ok())\n+                        .collect_vec()\n+                })\n+                .unwrap_or_default();\n+\n+            let title = reference_title(locations.len());\n+            let cmd = if locations.is_empty() {\n+                Command { title, command: \"\".into(), arguments: None }\n+            } else {\n+                show_references_command(\n+                    title,\n+                    &doc_position.text_document.uri,\n+                    code_lens.range.start,\n+                    locations,\n+                )\n+            };\n+\n+            Ok(CodeLens { range: code_lens.range, command: Some(cmd), data: None })\n+        }\n         None => Ok(CodeLens {\n             range: code_lens.range,\n             command: Some(Command { title: \"Error\".into(), ..Default::default() }),\n@@ -1248,6 +1294,14 @@ fn implementation_title(count: usize) -> String {\n     }\n }\n \n+fn reference_title(count: usize) -> String {\n+    if count == 1 {\n+        \"1 reference\".into()\n+    } else {\n+        format!(\"{} references\", count)\n+    }\n+}\n+\n fn show_references_command(\n     title: String,\n     uri: &lsp_types::Url,"}, {"sha": "bdd8a0c298faddcd2a3d84266a667b4c06ed051c", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdc1f76cbda7478f39c190cc6ba296bc0030928f/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/bdc1f76cbda7478f39c190cc6ba296bc0030928f/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=bdc1f76cbda7478f39c190cc6ba296bc0030928f", "patch": "@@ -554,6 +554,11 @@\n                     \"type\": \"boolean\",\n                     \"default\": true\n                 },\n+                \"rust-analyzer.lens.methodReferences\": {\n+                    \"markdownDescription\": \"Whether to show `Method References` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": false\n+                },\n                 \"rust-analyzer.hoverActions.enable\": {\n                     \"description\": \"Whether to show HoverActions in Rust files.\",\n                     \"type\": \"boolean\","}, {"sha": "848e92af991586412e522a0280cd6faaba975d98", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdc1f76cbda7478f39c190cc6ba296bc0030928f/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bdc1f76cbda7478f39c190cc6ba296bc0030928f/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=bdc1f76cbda7478f39c190cc6ba296bc0030928f", "patch": "@@ -138,6 +138,7 @@ export class Config {\n             run: this.get<boolean>(\"lens.run\"),\n             debug: this.get<boolean>(\"lens.debug\"),\n             implementations: this.get<boolean>(\"lens.implementations\"),\n+            methodReferences: this.get<boolean>(\"lens.methodReferences\"),\n         };\n     }\n "}]}