{"sha": "884c7c9326a2f6042b4343d41c4fa10fa7740ee2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NGM3YzkzMjZhMmY2MDQyYjQzNDNkNDFjNGZhMTBmYTc3NDBlZTI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-12T23:15:40Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-12T23:15:40Z"}, "message": "rustpkg: Factor out tests; use a condition instead of returning an option\n\nPulled out tests into their own modules inside the files they test,\nas per the draft style guidelines.\n\nStarted a new module, path_util, for utility functions to do with\npaths and directories.\n\nChanged default_dest_dir to use a condition and return Path\ninstead of Option<Path>.", "tree": {"sha": "ddd032983ab5d1d8b24065f4e58d25495d78e5bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddd032983ab5d1d8b24065f4e58d25495d78e5bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/884c7c9326a2f6042b4343d41c4fa10fa7740ee2", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/884c7c9326a2f6042b4343d41c4fa10fa7740ee2", "html_url": "https://github.com/rust-lang/rust/commit/884c7c9326a2f6042b4343d41c4fa10fa7740ee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/884c7c9326a2f6042b4343d41c4fa10fa7740ee2/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74fee15bc1b6c3c558bab72a644b2600c91d0d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/74fee15bc1b6c3c558bab72a644b2600c91d0d2d", "html_url": "https://github.com/rust-lang/rust/commit/74fee15bc1b6c3c558bab72a644b2600c91d0d2d"}], "stats": {"total": 201, "additions": 138, "deletions": 63}, "files": [{"sha": "353995a816e37d0bb82c5c2ac4e74c58c26a4ef1", "filename": "src/librustpkg/conditions.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/884c7c9326a2f6042b4343d41c4fa10fa7740ee2/src%2Flibrustpkg%2Fconditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884c7c9326a2f6042b4343d41c4fa10fa7740ee2/src%2Flibrustpkg%2Fconditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fconditions.rs?ref=884c7c9326a2f6042b4343d41c4fa10fa7740ee2", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Useful conditions\n+\n+pub use core::path::Path;\n+\n+condition! {\n+    bad_path: (super::Path, ~str) -> super::Path;\n+}"}, {"sha": "c77106a9a39cb12d3bd9d35678886fd8a63b6a0d", "filename": "src/librustpkg/path_util.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/884c7c9326a2f6042b4343d41c4fa10fa7740ee2/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884c7c9326a2f6042b4343d41c4fa10fa7740ee2/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=884c7c9326a2f6042b4343d41c4fa10fa7740ee2", "patch": "@@ -0,0 +1,83 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// rustpkg utilities having to do with paths and directories\n+\n+use core::path::*;\n+use core::os;\n+use util::PkgId;\n+\n+/// Returns the output directory to use.\n+/// Right now is always the default, should\n+/// support changing it.\n+pub fn dest_dir(pkgid: PkgId) -> Path {\n+    default_dest_dir(&pkgid.path)\n+}\n+\n+/// Returns the default output directory for compilation.\n+/// Creates that directory if it doesn't exist.\n+pub fn default_dest_dir(pkg_dir: &Path) -> Path {\n+    use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+    use conditions::bad_path::cond;\n+\n+    // For now: assumes that pkg_dir exists and is relative\n+    // to the CWD. Change this later when we do path searching.\n+    let rslt = pkg_dir.push(\"build\");\n+    let is_dir = os::path_is_dir(&rslt);\n+    if os::path_exists(&rslt) {\n+        if is_dir {\n+            rslt\n+        }\n+        else {\n+            cond.raise((rslt, ~\"Path names a file that isn't a directory\"))\n+        }\n+    }\n+    else {\n+        // Create it\n+        if os::make_dir(&rslt, (S_IRUSR | S_IWUSR | S_IXUSR) as i32) {\n+            rslt\n+        }\n+        else {\n+            cond.raise((rslt, ~\"Could not create directory\"))\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use core::{os, rand};\n+    use core::path::Path;\n+    use core::rand::RngUtil;\n+    use path_util::*;\n+\n+    // Helper function to create a directory name that doesn't exist\n+    pub fn mk_nonexistent(tmpdir: &Path, suffix: &str) -> Path {\n+        let r = rand::Rng();\n+        for 1000.times {\n+            let p = tmpdir.push(r.gen_str(16) + suffix);\n+            if !os::path_exists(&p) {\n+                return p;\n+            }\n+        }\n+        fail!(~\"Couldn't compute a non-existent path name; this is worrisome\")\n+    }\n+\n+    #[test]\n+    fn default_dir_ok() {\n+        let the_path = os::tmpdir();\n+        let substitute_path = Path(\"xyzzy\");\n+        assert!(default_dest_dir(&the_path) == the_path.push(~\"build\"));\n+        let nonexistent_path = mk_nonexistent(&the_path, \"quux\");\n+        let bogus = do ::conditions::bad_path::cond.trap(|_| { \n+            substitute_path\n+        }).in { default_dest_dir(&nonexistent_path) };\n+        assert!(bogus == substitute_path);\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "d61fe30992d8514a2a0ff93193f8b5ae0fe4a869", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 5, "deletions": 46, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/884c7c9326a2f6042b4343d41c4fa10fa7740ee2/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/884c7c9326a2f6042b4343d41c4fa10fa7740ee2/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=884c7c9326a2f6042b4343d41c4fa10fa7740ee2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustpkg - a purely function package manager and build system\n+// rustpkg - a package manager and build system for Rust\n \n #[link(name = \"rustpkg\",\n        vers = \"0.6\",\n@@ -37,8 +37,11 @@ use std::net::url;\n use std::{getopts};\n use syntax::{ast, diagnostic};\n use util::{ExitCode, Pkg, PkgId};\n+use path_util::dest_dir;\n \n+mod conditions;\n mod usage;\n+mod path_util;\n mod util;\n \n /// A PkgScript represents user-supplied custom logic for\n@@ -155,46 +158,6 @@ struct Ctx {\n     dep_cache: @mut HashMap<~str, bool>,\n }\n \n-\n-/// Returns the output directory to use.\n-/// Right now is always the default, should\n-/// support changing it.\n-fn dest_dir(pkgid: PkgId) -> Path {\n-    default_dest_dir(&pkgid.path).expect(\n-        ~\"couldn't make default dir?!\")\n-}\n-\n-/// Returns the default output directory for compilation.\n-/// Creates that directory if it doesn't exist.\n-fn default_dest_dir(pkg_dir: &Path) -> Option<Path> {\n-    use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n-\n-    // For now: assumes that pkg_dir exists and is relative\n-    // to the CWD. Change this later when we do path searching.\n-    let rslt = pkg_dir.push(\"build\");\n-    let is_dir = os::path_is_dir(&rslt);\n-    if os::path_exists(&rslt) {\n-        if is_dir {\n-            Some(rslt)\n-        }\n-        else {\n-            util::error(fmt!(\"%s is not a directory\", rslt.to_str()));\n-            None\n-        }\n-    }\n-    else {\n-        // Create it\n-        if os::make_dir(&rslt, (S_IRUSR | S_IWUSR | S_IXUSR) as i32) {\n-            Some(rslt)\n-        }\n-        else {\n-            util::error(fmt!(\"Could not create directory %s\",\n-                             rslt.to_str()));\n-            None // ??? should probably use conditions\n-        }\n-    }\n-}\n-\n impl Ctx {\n \n     fn run(&self, cmd: ~str, args: ~[~str]) {\n@@ -759,10 +722,6 @@ pub struct PkgSrc {\n     benchs: ~[Crate],\n }\n \n-condition! {\n-    bad_path: (super::Path, ~str) -> super::Path;\n-}\n-\n condition! {\n     build_err: (~str) -> ();\n }\n@@ -785,7 +744,7 @@ impl PkgSrc {\n \n \n     fn check_dir(&self) -> Path {\n-        use bad_path::cond;\n+        use conditions::bad_path::cond;\n \n         debug!(\"Pushing onto root: %s | %s\", self.id.path.to_str(),\n                self.root.to_str());"}, {"sha": "f594860607255eb71ddd9513ea40a9dc6f7cab78", "filename": "src/librustpkg/tests.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/884c7c9326a2f6042b4343d41c4fa10fa7740ee2/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884c7c9326a2f6042b4343d41c4fa10fa7740ee2/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=884c7c9326a2f6042b4343d41c4fa10fa7740ee2", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// rustpkg unit tests"}, {"sha": "602c71cf8be96e497f574ad44406d1f89b887cd1", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/884c7c9326a2f6042b4343d41c4fa10fa7740ee2/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884c7c9326a2f6042b4343d41c4fa10fa7740ee2/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=884c7c9326a2f6042b4343d41c4fa10fa7740ee2", "patch": "@@ -563,21 +563,26 @@ pub fn link_exe(src: &Path, dest: &Path) -> bool {\n     }\n }\n \n-#[test]\n-fn test_is_cmd() {\n-    assert!(is_cmd(~\"build\"));\n-    assert!(is_cmd(~\"clean\"));\n-    assert!(is_cmd(~\"do\"));\n-    assert!(is_cmd(~\"info\"));\n-    assert!(is_cmd(~\"install\"));\n-    assert!(is_cmd(~\"prefer\"));\n-    assert!(is_cmd(~\"test\"));\n-    assert!(is_cmd(~\"uninstall\"));\n-    assert!(is_cmd(~\"unprefer\"));\n-}\n-\n-#[test]\n-fn test_parse_name() {\n-    assert!(parse_name(~\"org.mozilla.servo\").get() == ~\"servo\");\n-    assert!(parse_name(~\"org. mozilla.servo 2131\").is_err());\n+#[cfg(test)]\n+mod test {\n+    use super::{is_cmd, parse_name};\n+\n+    #[test]\n+    fn test_is_cmd() {\n+        assert!(is_cmd(~\"build\"));\n+        assert!(is_cmd(~\"clean\"));\n+        assert!(is_cmd(~\"do\"));\n+        assert!(is_cmd(~\"info\"));\n+        assert!(is_cmd(~\"install\"));\n+        assert!(is_cmd(~\"prefer\"));\n+        assert!(is_cmd(~\"test\"));\n+        assert!(is_cmd(~\"uninstall\"));\n+        assert!(is_cmd(~\"unprefer\"));\n+    }\n+    \n+    #[test]\n+    fn test_parse_name() {\n+        assert!(parse_name(~\"org.mozilla.servo\").get() == ~\"servo\");\n+        assert!(parse_name(~\"org. mozilla.servo 2131\").is_err());\n+    }\n }"}]}