{"sha": "ce48e71d28a69151a9f1fb7a620dcbad2834cef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNDhlNzFkMjhhNjkxNTFhOWYxZmI3YTYyMGRjYmFkMjgzNGNlZjM=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-09T02:26:23Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-12T17:54:21Z"}, "message": "Fix select() in light of the deschedule...and then race. Close #8347.", "tree": {"sha": "9cba77e27a673dbadf959a8e159fd924cb148374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cba77e27a673dbadf959a8e159fd924cb148374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce48e71d28a69151a9f1fb7a620dcbad2834cef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce48e71d28a69151a9f1fb7a620dcbad2834cef3", "html_url": "https://github.com/rust-lang/rust/commit/ce48e71d28a69151a9f1fb7a620dcbad2834cef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce48e71d28a69151a9f1fb7a620dcbad2834cef3/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f9b5159297ffbc6da8f6e640cd6f4f8ed7c44d", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f9b5159297ffbc6da8f6e640cd6f4f8ed7c44d", "html_url": "https://github.com/rust-lang/rust/commit/31f9b5159297ffbc6da8f6e640cd6f4f8ed7c44d"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "42d59ccdf958eb8eff28ddabdc014202c5e1547b", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce48e71d28a69151a9f1fb7a620dcbad2834cef3/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce48e71d28a69151a9f1fb7a620dcbad2834cef3/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=ce48e71d28a69151a9f1fb7a620dcbad2834cef3", "patch": "@@ -114,7 +114,9 @@ impl<T> ChanOne<T> {\n     // 'do_resched' configures whether the scheduler immediately switches to\n     // the receiving task, or leaves the sending task still running.\n     fn try_send_inner(self, val: T, do_resched: bool) -> bool {\n-        rtassert!(!rt::in_sched_context());\n+        if do_resched {\n+            rtassert!(!rt::in_sched_context());\n+        }\n \n         let mut this = self;\n         let mut recvr_active = true;"}, {"sha": "a92339e2562443a325c50623203e4a3c31ac0759", "filename": "src/libstd/select.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce48e71d28a69151a9f1fb7a620dcbad2834cef3/src%2Flibstd%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce48e71d28a69151a9f1fb7a620dcbad2834cef3/src%2Flibstd%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fselect.rs?ref=ce48e71d28a69151a9f1fb7a620dcbad2834cef3", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use cell::Cell;\n+use comm;\n use container::Container;\n use iterator::Iterator;\n use option::*;\n@@ -16,6 +18,8 @@ use option::*;\n use rt::sched::Scheduler;\n use rt::select::{SelectInner, SelectPortInner};\n use rt::local::Local;\n+use rt::rtio::EventLoop;\n+use task;\n use vec::{OwnedVector, MutableVector};\n \n /// Trait for message-passing primitives that can be select()ed on.\n@@ -45,6 +49,14 @@ pub fn select<A: Select>(ports: &mut [A]) -> uint {\n     // (If not, we need to unblock from all of them. Length is a placeholder.)\n     let mut ready_index = ports.len();\n \n+    // XXX: We're using deschedule...and_then in an unsafe way here (see #8132),\n+    // in that we need to continue mutating the ready_index in the environment\n+    // after letting the task get woken up. The and_then closure needs to delay\n+    // the task from resuming until all ports have become blocked_on.\n+    let (p,c) = comm::oneshot();\n+    let p = Cell::new(p);\n+    let c = Cell::new(c);\n+\n     let sched = Local::take::<Scheduler>();\n     do sched.deschedule_running_task_and_then |sched, task| {\n         let task_handles = task.make_selectable(ports.len());\n@@ -57,8 +69,16 @@ pub fn select<A: Select>(ports: &mut [A]) -> uint {\n                 break;\n             }\n         }\n+\n+        let c = Cell::new(c.take());\n+        do sched.event_loop.callback { c.take().send_deferred(()) }\n     }\n \n+    // Unkillable is necessary not because getting killed is dangerous here,\n+    // but to force the recv not to use the same kill-flag that we used for\n+    // selecting. Otherwise a user-sender could spuriously wakeup us here.\n+    do task::unkillable { p.take().recv(); }\n+\n     // Task resumes. Now unblock ourselves from all the ports we blocked on.\n     // If the success index wasn't reset, 'take' will just take all of them.\n     // Iterate in reverse so the 'earliest' index that's ready gets returned."}]}