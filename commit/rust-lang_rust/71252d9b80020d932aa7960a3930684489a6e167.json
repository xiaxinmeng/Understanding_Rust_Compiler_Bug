{"sha": "71252d9b80020d932aa7960a3930684489a6e167", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMjUyZDliODAwMjBkOTMyYWE3OTYwYTM5MzA2ODQ0ODlhNmUxNjc=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2017-06-27T10:09:56Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2017-06-27T10:09:56Z"}, "message": "Document possible `io::ErrorKind`s of `fs::open`\n\nTry to make clear that this isn't an API guarantee for now, as we likely\nwant to refine these errors in the future, e.g. `ENOSPC` \"No space left\non device\".\n\nCC #40322", "tree": {"sha": "6a7afb03a5299376bd2f2c82459ab0862b73a69b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a7afb03a5299376bd2f2c82459ab0862b73a69b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71252d9b80020d932aa7960a3930684489a6e167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71252d9b80020d932aa7960a3930684489a6e167", "html_url": "https://github.com/rust-lang/rust/commit/71252d9b80020d932aa7960a3930684489a6e167", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71252d9b80020d932aa7960a3930684489a6e167/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f590a44ce61888c78b9044817d8b798db5cd2ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f590a44ce61888c78b9044817d8b798db5cd2ffd", "html_url": "https://github.com/rust-lang/rust/commit/f590a44ce61888c78b9044817d8b798db5cd2ffd"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "f1ec4d2dff01d69d8f9e80b05cbf86ad1963bfa6", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/71252d9b80020d932aa7960a3930684489a6e167/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71252d9b80020d932aa7960a3930684489a6e167/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=71252d9b80020d932aa7960a3930684489a6e167", "patch": "@@ -653,15 +653,29 @@ impl OpenOptions {\n     /// # Errors\n     ///\n     /// This function will return an error under a number of different\n-    /// circumstances, to include but not limited to:\n-    ///\n-    /// * Opening a file that does not exist without setting `create` or\n-    ///   `create_new`.\n-    /// * Attempting to open a file with access that the user lacks\n-    ///   permissions for\n-    /// * Filesystem-level errors (full disk, etc)\n-    /// * Invalid combinations of open options (truncate without write access,\n-    ///   no access mode set, etc)\n+    /// circumstances. Some of these error conditions are listed here, together\n+    /// with their [`ErrorKind`]. The mapping to `ErrorKind`s is not part of\n+    /// the compatiblity contract of the function, especially the `Other` kind\n+    /// might change to more specific kinds in the future.\n+    ///\n+    /// * `NotFound`: The specified file does not exist and neither `create` or\n+    ///   `create_new` is set,\n+    /// * `NotFound`: One of the directory components of the file path does not\n+    ///   exist.\n+    /// * `PermissionDenied`: The user lacks permission to get the specified\n+    ///   access rights for the file.\n+    /// * `PermissionDenied`: The user lacks permission to open one of the\n+    ///   directory components of the specified path.\n+    /// * `AlreadyExists`: `create_new` was specified and the file already\n+    ///   exists.\n+    /// * `InvalidInput`: Invalid combinations of open options (truncate\n+    ///   without write access, no access mode set, etc.).\n+    /// * `Other`: One of the directory components of the specified file path\n+    ///   was not, in fact, a directory.\n+    /// * `Other`: Filesystem-level errors: full disk, write permission\n+    ///   requested on a read-only file system, exceeded disk quota, too many\n+    ///   open files, too long filename, too many symbolic links in the\n+    ///   specified path (Unix-like systems only), etc.\n     ///\n     /// # Examples\n     ///\n@@ -670,6 +684,8 @@ impl OpenOptions {\n     ///\n     /// let file = OpenOptions::new().open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`ErrorKind`]: ../io/enum.ErrorKind.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn open<P: AsRef<Path>>(&self, path: P) -> io::Result<File> {\n         self._open(path.as_ref())"}]}