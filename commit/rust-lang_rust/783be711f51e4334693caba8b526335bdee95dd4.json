{"sha": "783be711f51e4334693caba8b526335bdee95dd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4M2JlNzExZjUxZTQzMzQ2OTNjYWJhOGI1MjYzMzViZGVlOTVkZDQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-18T21:35:44Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-18T21:35:44Z"}, "message": "Flesh out the std.list module a touch.", "tree": {"sha": "23865d9d8d8b03571ee61e239d9ea30384141a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23865d9d8d8b03571ee61e239d9ea30384141a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/783be711f51e4334693caba8b526335bdee95dd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/783be711f51e4334693caba8b526335bdee95dd4", "html_url": "https://github.com/rust-lang/rust/commit/783be711f51e4334693caba8b526335bdee95dd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/783be711f51e4334693caba8b526335bdee95dd4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c3e95e0a5d4bfc06d15a52b322567a83c948f72", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3e95e0a5d4bfc06d15a52b322567a83c948f72", "html_url": "https://github.com/rust-lang/rust/commit/1c3e95e0a5d4bfc06d15a52b322567a83c948f72"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "60c23a9ef8066a59eeed943ee6f077edf7703105", "filename": "src/lib/list.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/783be711f51e4334693caba8b526335bdee95dd4/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783be711f51e4334693caba8b526335bdee95dd4/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=783be711f51e4334693caba8b526335bdee95dd4", "patch": "@@ -1,9 +1,58 @@\n \n+import util.option;\n+import util.some;\n+import util.none;\n+\n+// FIXME: It would probably be more appealing to define this as\n+// type list[T] = rec(T hd, option[@list[T]] tl), but at the moment\n+// our recursion rules do not permit that.\n+\n tag list[T] {\n     cons(T, @list[T]);\n     nil;\n }\n \n+fn foldl[T,U](&list[T] ls, U u, fn(&T t, U u) -> U f) -> U {\n+  alt(ls) {\n+    case (cons[T](?hd, ?tl)) {\n+      auto u_ = f(hd, u);\n+      // FIXME: should use 'be' here, not 'ret'. But parametric\n+      // tail calls currently don't work.\n+      ret foldl[T,U](*tl, u_, f);\n+    }\n+    case (nil[T]) {\n+      ret u;\n+    }\n+  }\n+}\n+\n+fn find[T](&list[T] ls,\n+             (fn(&T) -> option[T]) f) -> option[T] {\n+  alt(ls) {\n+    case (cons[T](?hd, ?tl)) {\n+        alt (f(hd)) {\n+            case (none[T]) {\n+                // FIXME: should use 'be' here, not 'ret'. But parametric tail\n+                // calls currently don't work.\n+                ret find[T](*tl, f);\n+            }\n+            case (some[T](?res)) {\n+                ret some[T](res);\n+            }\n+        }\n+    }\n+    case (nil[T]) {\n+        ret none[T];\n+    }\n+  }\n+}\n+\n+fn length[T](&list[T] ls) -> uint {\n+  fn count[T](&T t, uint u) -> uint {\n+    ret u + 1u;\n+  }\n+  ret foldl[T,uint](ls, 0u, bind count[T](_, _));\n+}\n \n // Local Variables:\n // mode: rust;"}]}