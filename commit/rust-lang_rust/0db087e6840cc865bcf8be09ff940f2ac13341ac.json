{"sha": "0db087e6840cc865bcf8be09ff940f2ac13341ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYjA4N2U2ODQwY2M4NjViY2Y4YmUwOWZmOTQwZjJhYzEzMzQxYWM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-04T00:15:26Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-10T16:52:12Z"}, "message": "Add uninhabitedness tests w/ `#[non_exhaustive]`.\n\nThis commit adds tests checking that uninhabited non-exhaustive types\nare considered inhabited when used in another crate.", "tree": {"sha": "5bc5c345513fb66ef9c60e2f03b753eac5658326", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bc5c345513fb66ef9c60e2f03b753eac5658326"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0db087e6840cc865bcf8be09ff940f2ac13341ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlzVrDwACgkQAXYLT59T\n8VRx9hAAtA9StxvJDS2Y4AOq7/i4FAnKIkgaZOns7xwQ3stqdGkk5N4JJvxrXyNI\nM/RZr8mxUujUU6nSOZO8IPXNHZslU1M7piSz7GsRNF+2qIp29lOST7FF+HJE72JA\nex3c+LWqugZuLdrZpbXcUkPBkL9u6/h0cOU5DtACfMQGOlYGZhnttgmfR2CE637I\np+NStZuezX8vlDe7SHIhfVcLM+I5sSII3mCU4HYcOxK5asT7qjcpVNOfGT3Y7C5Z\nWx2tdbop/7iXr1b0mI3MLVf2P3IIflj2nOPx0dvBzEnaeeO6nDw1eC9W1jkHyaxv\nNPgYVqIFiIzOG7eRvo9fkMFbBjf593rWQ78tI2uKkP+txTuKc9auQPjTJj83wxzf\nmtQIui4DQhDzwnK/eECRdSbzX6c95r7iBvnQLLtEIVOCiT8hr7+G1rb8sBShGWiR\nHnAAizE/nEyXz373i2sCENzZZlyBWJNwRt0Vxl5zsNmbE4/nLMHOkbicJCxRC9OF\nfzEjNLga0btHix2HwK0ey+OE5sbtuy3zMdcfeUFkvSIWTiHwr9Ij3pHf4brA9Wdy\nl54NOH/iq2LTvXroqajJOw3rFtFDPGQkxVNYL3FYJ9GbVHjX0OKPbexdVsQcwdPA\ntF9bZr5MTVMB7I5LCAJXJwotRVU/afApgYeeVaQ1Nwd6N8k/lPw=\n=WEzT\n-----END PGP SIGNATURE-----", "payload": "tree 5bc5c345513fb66ef9c60e2f03b753eac5658326\nparent 0ac53da03dad79655e2f3e65a58f94a2f3314d5f\nauthor David Wood <david@davidtw.co> 1556928926 +0100\ncommitter David Wood <david@davidtw.co> 1557507132 +0100\n\nAdd uninhabitedness tests w/ `#[non_exhaustive]`.\n\nThis commit adds tests checking that uninhabited non-exhaustive types\nare considered inhabited when used in another crate.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0db087e6840cc865bcf8be09ff940f2ac13341ac", "html_url": "https://github.com/rust-lang/rust/commit/0db087e6840cc865bcf8be09ff940f2ac13341ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0db087e6840cc865bcf8be09ff940f2ac13341ac/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ac53da03dad79655e2f3e65a58f94a2f3314d5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac53da03dad79655e2f3e65a58f94a2f3314d5f", "html_url": "https://github.com/rust-lang/rust/commit/0ac53da03dad79655e2f3e65a58f94a2f3314d5f"}], "stats": {"total": 193, "additions": 193, "deletions": 0}, "files": [{"sha": "a4b936e376d823e323cb7dd415041daee44353d3", "filename": "src/test/ui/rfc-2008-non-exhaustive/auxiliary/uninhabited.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0db087e6840cc865bcf8be09ff940f2ac13341ac/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db087e6840cc865bcf8be09ff940f2ac13341ac/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Funinhabited.rs?ref=0db087e6840cc865bcf8be09ff940f2ac13341ac", "patch": "@@ -0,0 +1,25 @@\n+#![crate_type = \"rlib\"]\n+#![feature(never_type)]\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub enum UninhabitedEnum {\n+}\n+\n+#[non_exhaustive]\n+pub struct UninhabitedStruct {\n+    _priv: !,\n+}\n+\n+#[non_exhaustive]\n+pub struct UninhabitedTupleStruct(!);\n+\n+pub enum UninhabitedVariants {\n+    #[non_exhaustive] Tuple(!),\n+    #[non_exhaustive] Struct { x: ! }\n+}\n+\n+pub enum PartiallyInhabitedVariants {\n+    Tuple(u8),\n+    #[non_exhaustive] Struct { x: ! }\n+}"}, {"sha": "97061310d19e29e17f6a26049304f09194b8a86f", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0db087e6840cc865bcf8be09ff940f2ac13341ac/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db087e6840cc865bcf8be09ff940f2ac13341ac/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited.rs?ref=0db087e6840cc865bcf8be09ff940f2ac13341ac", "patch": "@@ -0,0 +1,59 @@\n+// aux-build:uninhabited.rs\n+// compile-pass\n+#![deny(unreachable_patterns)]\n+#![feature(exhaustive_patterns)]\n+\n+extern crate uninhabited;\n+\n+use uninhabited::{\n+    PartiallyInhabitedVariants,\n+    UninhabitedEnum,\n+    UninhabitedStruct,\n+    UninhabitedTupleStruct,\n+    UninhabitedVariants,\n+};\n+\n+fn uninhabited_enum() -> Option<UninhabitedEnum> {\n+    None\n+}\n+\n+fn uninhabited_variant() -> Option<UninhabitedVariants> {\n+    None\n+}\n+\n+fn partially_inhabited_variant() -> PartiallyInhabitedVariants {\n+    PartiallyInhabitedVariants::Tuple(3)\n+}\n+\n+fn uninhabited_struct() -> Option<UninhabitedStruct> {\n+    None\n+}\n+\n+fn uninhabited_tuple_struct() -> Option<UninhabitedTupleStruct> {\n+    None\n+}\n+\n+// This test checks that non-exhaustive types that would normally be considered uninhabited within\n+// the defining crate are not considered uninhabited from extern crates.\n+\n+fn main() {\n+    match uninhabited_enum() {\n+        Some(_x) => (), // This line would normally error.\n+        None => (),\n+    }\n+\n+    match uninhabited_variant() {\n+        Some(_x) => (), // This line would normally error.\n+        None => (),\n+    }\n+\n+    // This line would normally error.\n+    while let PartiallyInhabitedVariants::Struct { x, .. } = partially_inhabited_variant() {\n+    }\n+\n+    while let Some(_x) = uninhabited_struct() { // This line would normally error.\n+    }\n+\n+    while let Some(_x) = uninhabited_tuple_struct() { // This line would normally error.\n+    }\n+}"}, {"sha": "302a35cab5f904b959dc1f19c407b97054d9cf74", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_same_crate.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/0db087e6840cc865bcf8be09ff940f2ac13341ac/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db087e6840cc865bcf8be09ff940f2ac13341ac/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_same_crate.rs?ref=0db087e6840cc865bcf8be09ff940f2ac13341ac", "patch": "@@ -0,0 +1,71 @@\n+#![deny(unreachable_patterns)]\n+#![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub enum UninhabitedEnum {\n+}\n+\n+#[non_exhaustive]\n+pub struct UninhabitedTupleStruct(!);\n+\n+#[non_exhaustive]\n+pub struct UninhabitedStruct {\n+    _priv: !,\n+}\n+\n+pub enum UninhabitedVariants {\n+    #[non_exhaustive] Tuple(!),\n+    #[non_exhaustive] Struct { x: ! }\n+}\n+\n+pub enum PartiallyInhabitedVariants {\n+    Tuple(u8),\n+    #[non_exhaustive] Struct { x: ! }\n+}\n+\n+fn uninhabited_enum() -> Option<UninhabitedEnum> {\n+    None\n+}\n+\n+fn uninhabited_variant() -> Option<UninhabitedVariants> {\n+    None\n+}\n+\n+fn partially_inhabited_variant() -> PartiallyInhabitedVariants {\n+    PartiallyInhabitedVariants::Tuple(3)\n+}\n+\n+fn uninhabited_struct() -> Option<UninhabitedStruct> {\n+    None\n+}\n+\n+fn uninhabited_tuple_struct() -> Option<UninhabitedTupleStruct> {\n+    None\n+}\n+\n+// This test checks that non-exhaustive types that would normally be considered uninhabited within\n+// the defining crate are still considered uninhabited.\n+\n+fn main() {\n+    match uninhabited_enum() {\n+        Some(_x) => (), //~ ERROR unreachable pattern\n+        None => (),\n+    }\n+\n+    match uninhabited_variant() {\n+        Some(_x) => (), //~ ERROR unreachable pattern\n+        None => (),\n+    }\n+\n+    while let PartiallyInhabitedVariants::Struct { x } = partially_inhabited_variant() {\n+        //~^ ERROR unreachable pattern\n+    }\n+\n+    while let Some(_x) = uninhabited_struct() { //~ ERROR unreachable pattern\n+    }\n+\n+    while let Some(_x) = uninhabited_tuple_struct() { //~ ERROR unreachable pattern\n+    }\n+}"}, {"sha": "942f004c3cfd6328e7a0362c05d499d5e3ece9aa", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_same_crate.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0db087e6840cc865bcf8be09ff940f2ac13341ac/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db087e6840cc865bcf8be09ff940f2ac13341ac/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_same_crate.stderr?ref=0db087e6840cc865bcf8be09ff940f2ac13341ac", "patch": "@@ -0,0 +1,38 @@\n+error: unreachable pattern\n+  --> $DIR/uninhabited_same_crate.rs:53:9\n+   |\n+LL |         Some(_x) => (),\n+   |         ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/uninhabited_same_crate.rs:1:9\n+   |\n+LL | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/uninhabited_same_crate.rs:58:9\n+   |\n+LL |         Some(_x) => (),\n+   |         ^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/uninhabited_same_crate.rs:62:15\n+   |\n+LL |     while let PartiallyInhabitedVariants::Struct { x } = partially_inhabited_variant() {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/uninhabited_same_crate.rs:66:15\n+   |\n+LL |     while let Some(_x) = uninhabited_struct() {\n+   |               ^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/uninhabited_same_crate.rs:69:15\n+   |\n+LL |     while let Some(_x) = uninhabited_tuple_struct() {\n+   |               ^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}]}