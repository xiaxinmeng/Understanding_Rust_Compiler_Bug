{"sha": "1a2eaed43d69f92b4e3de934bab83a1b622b31ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMmVhZWQ0M2Q2OWY5MmI0ZTNkZTkzNGJhYjgzYTFiNjIyYjMxYWQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-15T22:51:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-15T22:55:11Z"}, "message": "rustc: make llloadenv bb optional, kill 1.5% of emitted llvm insns.", "tree": {"sha": "68c40c93b2ee80046b8bf23730a343e2ee2a8a5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68c40c93b2ee80046b8bf23730a343e2ee2a8a5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a2eaed43d69f92b4e3de934bab83a1b622b31ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2eaed43d69f92b4e3de934bab83a1b622b31ad", "html_url": "https://github.com/rust-lang/rust/commit/1a2eaed43d69f92b4e3de934bab83a1b622b31ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a2eaed43d69f92b4e3de934bab83a1b622b31ad/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b6f025eb607aab8ea29c2033dcebe1d263ba614", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6f025eb607aab8ea29c2033dcebe1d263ba614", "html_url": "https://github.com/rust-lang/rust/commit/9b6f025eb607aab8ea29c2033dcebe1d263ba614"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "8aedafbb0b30d081393cc90d01f0f1c307374e48", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a2eaed43d69f92b4e3de934bab83a1b622b31ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2eaed43d69f92b4e3de934bab83a1b622b31ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1a2eaed43d69f92b4e3de934bab83a1b622b31ad", "patch": "@@ -1379,11 +1379,9 @@ fn arrayalloca(cx: block, t: TypeRef, v: ValueRef) -> ValueRef {\n \n // Creates the standard set of basic blocks for a function\n fn mk_standard_basic_blocks(llfn: ValueRef) ->\n-   {sa: BasicBlockRef, ca: BasicBlockRef, rt: BasicBlockRef} {\n+   {sa: BasicBlockRef, rt: BasicBlockRef} {\n     {sa: str::as_c_str(~\"static_allocas\",\n                        |buf| llvm::LLVMAppendBasicBlock(llfn, buf)),\n-     ca: str::as_c_str(~\"load_env\",\n-                       |buf| llvm::LLVMAppendBasicBlock(llfn, buf)),\n      rt: str::as_c_str(~\"return\",\n                        |buf| llvm::LLVMAppendBasicBlock(llfn, buf))}\n }\n@@ -1407,7 +1405,7 @@ fn new_fn_ctxt_w_id(ccx: @crate_ctxt,\n           llenv: llvm::LLVMGetParam(llfndecl, 1u as c_uint),\n           llretptr: llvm::LLVMGetParam(llfndecl, 0u as c_uint),\n           mut llstaticallocas: llbbs.sa,\n-          mut llloadenv: llbbs.ca,\n+          mut llloadenv: None,\n           mut llreturn: llbbs.rt,\n           mut llself: None,\n           mut personality: None,\n@@ -1560,8 +1558,15 @@ fn finish_fn(fcx: fn_ctxt, lltop: BasicBlockRef) {\n \n fn tie_up_header_blocks(fcx: fn_ctxt, lltop: BasicBlockRef) {\n     let _icx = fcx.insn_ctxt(\"tie_up_header_blocks\");\n-    Br(raw_block(fcx, false, fcx.llstaticallocas), fcx.llloadenv);\n-    Br(raw_block(fcx, false, fcx.llloadenv), lltop);\n+    match fcx.llloadenv {\n+        Some(copy ll) => {\n+            Br(raw_block(fcx, false, fcx.llstaticallocas), ll);\n+            Br(raw_block(fcx, false, ll), lltop);\n+        }\n+        None => {\n+            Br(raw_block(fcx, false, fcx.llstaticallocas), lltop);\n+        }\n+    }\n }\n \n enum self_arg { impl_self(ty::t), impl_owned_self(ty::t), no_self, }"}, {"sha": "6941deaf24f75f9c60aed6bb01087ee8f53dd6d3", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a2eaed43d69f92b4e3de934bab83a1b622b31ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2eaed43d69f92b4e3de934bab83a1b622b31ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=1a2eaed43d69f92b4e3de934bab83a1b622b31ad", "patch": "@@ -316,7 +316,20 @@ fn load_environment(fcx: fn_ctxt,\n                     load_ret_handle: bool,\n                     proto: ast::Proto) {\n     let _icx = fcx.insn_ctxt(\"closure::load_environment\");\n-    let bcx = raw_block(fcx, false, fcx.llloadenv);\n+\n+    let llloadenv = match fcx.llloadenv {\n+        Some(ll) => ll,\n+        None => {\n+            let ll =\n+                str::as_c_str(~\"load_env\",\n+                              |buf|\n+                              llvm::LLVMAppendBasicBlock(fcx.llfn, buf));\n+            fcx.llloadenv = Some(ll);\n+            ll\n+        }\n+    };\n+\n+    let bcx = raw_block(fcx, false, llloadenv);\n \n     // Load a pointer to the closure data, skipping over the box header:\n     let llcdata = base::opaque_box_body(bcx, cdata_ty, fcx.llenv);"}, {"sha": "39afd78277c7937495a754e4a5a84f2e99a7e543", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2eaed43d69f92b4e3de934bab83a1b622b31ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2eaed43d69f92b4e3de934bab83a1b622b31ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=1a2eaed43d69f92b4e3de934bab83a1b622b31ad", "patch": "@@ -228,7 +228,7 @@ type fn_ctxt = @{\n     // already allocated by code in one of the llallocas blocks.\n     // (LLVM requires that arguments be copied to local allocas before\n     // allowing most any operation to be performed on them.)\n-    mut llloadenv: BasicBlockRef,\n+    mut llloadenv: Option<BasicBlockRef>,\n     mut llreturn: BasicBlockRef,\n     // The 'self' value currently in use in this function, if there\n     // is one."}]}