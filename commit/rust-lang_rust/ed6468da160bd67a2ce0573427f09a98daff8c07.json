{"sha": "ed6468da160bd67a2ce0573427f09a98daff8c07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNjQ2OGRhMTYwYmQ2N2EyY2UwNTczNDI3ZjA5YTk4ZGFmZjhjMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-08T12:12:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-08T12:12:08Z"}, "message": "Auto merge of #67770 - Centril:reduce-diversity-2, r=petrochenkov\n\nMore reductions in error handling diversity\n\nIn this follow up to https://github.com/rust-lang/rust/pull/67744, we:\n\n- Remove all fatal / error / warning macros in `syntax` except for `struct_span_err`, which is moved to `rustc_errors`.\n\n- Lintify some hard-coded warnings which used warning macros.\n\n- Defatalize some errors.\n\nIn general, the goal here is to make it painful to use fatal or unstructured errors and so we hopefully won't see many of these creep in.\n\nFixes https://github.com/rust-lang/rust/issues/67933.", "tree": {"sha": "f60a0277a129a9835cafbe0eb526b28a4888f0e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60a0277a129a9835cafbe0eb526b28a4888f0e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed6468da160bd67a2ce0573427f09a98daff8c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6468da160bd67a2ce0573427f09a98daff8c07", "html_url": "https://github.com/rust-lang/rust/commit/ed6468da160bd67a2ce0573427f09a98daff8c07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed6468da160bd67a2ce0573427f09a98daff8c07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87540bd3bca8dcd86223261f8c76c5bbf6811ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/87540bd3bca8dcd86223261f8c76c5bbf6811ee6", "html_url": "https://github.com/rust-lang/rust/commit/87540bd3bca8dcd86223261f8c76c5bbf6811ee6"}, {"sha": "20ebb807d523947f5fac710c4ae95ac9730ad995", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ebb807d523947f5fac710c4ae95ac9730ad995", "html_url": "https://github.com/rust-lang/rust/commit/20ebb807d523947f5fac710c4ae95ac9730ad995"}], "stats": {"total": 1284, "additions": 629, "deletions": 655}, "files": [{"sha": "4f60ea305196e8596226b9fa15caf18c70024999", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -3804,6 +3804,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc\",\n  \"rustc_error_codes\",\n+ \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_metadata\",\n  \"rustc_span\",\n@@ -3818,6 +3819,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n+ \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_span\",\n  \"rustc_typeck\","}, {"sha": "d525f364593361f65200cc20464daafeb0eaa31b", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -8,6 +8,8 @@ use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use crate::lint::builtin::UNUSED_ATTRIBUTES;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n+\n+use errors::struct_span_err;\n use rustc_error_codes::*;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -430,21 +432,27 @@ impl CheckAttrVisitor<'tcx> {\n         // Error on repr(transparent, <anything else>).\n         if is_transparent && hints.len() > 1 {\n             let hint_spans: Vec<_> = hint_spans.clone().collect();\n-            span_err!(\n+            struct_span_err!(\n                 self.tcx.sess,\n                 hint_spans,\n                 E0692,\n                 \"transparent {} cannot have other repr hints\",\n                 target\n-            );\n+            )\n+            .emit();\n         }\n         // Warn on repr(u8, u16), repr(C, simd), and c-like-enum-repr(C, u8)\n         if (int_reprs > 1)\n             || (is_simd && is_c)\n             || (int_reprs == 1 && is_c && item.map_or(false, |item| is_c_like_enum(item)))\n         {\n-            let hint_spans: Vec<_> = hint_spans.collect();\n-            span_warn!(self.tcx.sess, hint_spans, E0566, \"conflicting representation hints\");\n+            struct_span_err!(\n+                self.tcx.sess,\n+                hint_spans.collect::<Vec<Span>>(),\n+                E0566,\n+                \"conflicting representation hints\",\n+            )\n+            .emit();\n         }\n     }\n "}, {"sha": "92292b3d35f2482ad1a19597daf7adf957f5ccb0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -68,7 +68,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n \n-use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n+use errors::{struct_span_err, Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_error_codes::*;\n use rustc_span::{Pos, Span};\n use rustc_target::spec::abi;"}, {"sha": "4dedf0a23e82711b1d8cca2691e3e6cee98f1f81", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -4,7 +4,7 @@ use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n use crate::ty::print::Print;\n use crate::ty::{self, DefIdTree, Infer, Ty, TyVar};\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::{Body, Expr, ExprKind, FunctionRetTy, HirId, Local, Pat};\n@@ -151,14 +151,11 @@ pub enum TypeAnnotationNeeded {\n \n impl Into<errors::DiagnosticId> for TypeAnnotationNeeded {\n     fn into(self) -> errors::DiagnosticId {\n-        syntax::diagnostic_used!(E0282);\n-        syntax::diagnostic_used!(E0283);\n-        syntax::diagnostic_used!(E0284);\n-        errors::DiagnosticId::Error(match self {\n-            Self::E0282 => \"E0282\".to_string(),\n-            Self::E0283 => \"E0283\".to_string(),\n-            Self::E0284 => \"E0284\".to_string(),\n-        })\n+        match self {\n+            Self::E0282 => errors::error_code!(E0282),\n+            Self::E0283 => errors::error_code!(E0283),\n+            Self::E0284 => errors::error_code!(E0284),\n+        }\n     }\n }\n "}, {"sha": "b73fb40f637ed30b006697b49811b137afc4cd62", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -5,6 +5,7 @@ use crate::infer::error_reporting::nice_region_error::util::AnonymousParamInfo;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::util::common::ErrorReported;\n \n+use errors::struct_span_err;\n use rustc_error_codes::*;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {"}, {"sha": "dacd2025da53b2957bb0789d890e9ee88a5f3a00", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -2,7 +2,7 @@\n //! where one region is named and the other is anonymous.\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::ty;\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir::{FunctionRetTy, TyKind};\n \n use rustc_error_codes::*;"}, {"sha": "a3fdcb44f996f4c3edac074cee16dd82fa038a55", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -3,7 +3,7 @@ use crate::infer::{self, InferCtxt, SubregionOrigin};\n use crate::middle::region;\n use crate::ty::error::TypeError;\n use crate::ty::{self, Region};\n-use errors::DiagnosticBuilder;\n+use errors::{struct_span_err, DiagnosticBuilder};\n \n use rustc_error_codes::*;\n "}, {"sha": "839e8588ff090adb0de2e356d98ef20e058bc778", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -6,7 +6,7 @@ use crate::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::free_region_map::FreeRegionRelations;\n use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n-use errors::DiagnosticBuilder;\n+use errors::{struct_span_err, DiagnosticBuilder};\n use rustc::session::config::nightly_options;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n@@ -524,11 +524,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err.span_label(span, label);\n \n         if nightly_options::is_nightly_build() {\n-            help!(\n-                err,\n-                \"add #![feature(member_constraints)] to the crate attributes \\\n-                   to enable\"\n-            );\n+            err.help(\"add #![feature(member_constraints)] to the crate attributes to enable\");\n         }\n \n         err.emit();"}, {"sha": "3726e6ace54b10967fb44ff80d981ca7db414cdd", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -95,6 +95,12 @@ declare_lint! {\n     \"detects overlapping patterns\"\n }\n \n+declare_lint! {\n+    pub BINDINGS_WITH_VARIANT_NAME,\n+    Warn,\n+    \"detects pattern bindings with the same name as one of the matched variants\"\n+}\n+\n declare_lint! {\n     pub UNUSED_MACROS,\n     Warn,\n@@ -459,6 +465,7 @@ declare_lint_pass! {\n         UNREACHABLE_CODE,\n         UNREACHABLE_PATTERNS,\n         OVERLAPPING_PATTERNS,\n+        BINDINGS_WITH_VARIANT_NAME,\n         UNUSED_MACROS,\n         WARNINGS,\n         UNUSED_FEATURES,"}, {"sha": "ea96b15a162aaf5cd8cd018b6458a466f7c24c1e", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -25,17 +25,17 @@ use crate::middle::privacy::AccessLevels;\n use crate::session::Session;\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n use crate::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n-use errors::DiagnosticBuilder;\n+use errors::{struct_span_err, DiagnosticBuilder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n+use rustc_error_codes::*;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n-use rustc_span::{symbol::Symbol, MultiSpan, Span};\n-use std::slice;\n+use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};\n use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n-use rustc_error_codes::*;\n+use std::slice;\n \n /// Information about the registered lints.\n ///\n@@ -290,7 +290,8 @@ impl LintStore {\n             CheckLintNameResult::Ok(_) => None,\n             CheckLintNameResult::Warning(ref msg, _) => Some(sess.struct_warn(msg)),\n             CheckLintNameResult::NoLint(suggestion) => {\n-                let mut err = struct_err!(sess, E0602, \"unknown lint: `{}`\", lint_name);\n+                let mut err =\n+                    struct_span_err!(sess, DUMMY_SP, E0602, \"unknown lint: `{}`\", lint_name);\n \n                 if let Some(suggestion) = suggestion {\n                     err.help(&format!(\"did you mean: `{}`\", suggestion));"}, {"sha": "abd52a9de50d520ab781e9b7b5ba943c0d992c3d", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -5,7 +5,7 @@ use crate::lint::builtin;\n use crate::lint::context::{CheckLintNameResult, LintStore};\n use crate::lint::{self, Level, Lint, LintId, LintSource};\n use crate::session::Session;\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::HirId;\n@@ -274,13 +274,14 @@ impl<'a> LintLevelsBuilder<'a> {\n                 let tool_name = if meta_item.path.segments.len() > 1 {\n                     let tool_ident = meta_item.path.segments[0].ident;\n                     if !attr::is_known_lint_tool(tool_ident) {\n-                        span_err!(\n+                        struct_span_err!(\n                             sess,\n                             tool_ident.span,\n                             E0710,\n                             \"an unknown tool name found in scoped lint: `{}`\",\n                             pprust::path_to_string(&meta_item.path),\n-                        );\n+                        )\n+                        .emit();\n                         continue;\n                     }\n "}, {"sha": "6f59df01a5205843ede52cc98879710a356a65d0", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -14,6 +14,7 @@ use crate::middle::cstore::ExternCrate;\n use crate::middle::weak_lang_items;\n use crate::ty::{self, TyCtxt};\n \n+use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -184,7 +185,8 @@ impl LanguageItemCollector<'tcx> {\n                         span,\n                         E0152,\n                         \"duplicate lang item found: `{}`.\",\n-                        name),\n+                        name\n+                    ),\n                     None => {\n                         match self.tcx.extern_crate(item_def_id) {\n                             Some(ExternCrate {dependency_of, ..}) => {\n@@ -204,7 +206,7 @@ impl LanguageItemCollector<'tcx> {\n                     },\n                 };\n                 if let Some(span) = self.tcx.hir().span_if_local(original_def_id) {\n-                    span_note!(&mut err, span, \"first defined here.\");\n+                    err.span_note(span, \"first defined here.\");\n                 } else {\n                     match self.tcx.extern_crate(original_def_id) {\n                         Some(ExternCrate {dependency_of, ..}) => {"}, {"sha": "e9e35b7617c89dbe40caa9eec8302eed13af9560", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -6,6 +6,7 @@ use crate::session::config;\n use crate::hir::intravisit;\n use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n use crate::ty::TyCtxt;\n+use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -124,9 +125,12 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n                 self.items.missing.push(lang_items::$item);\n             }\n         } else)* {\n-            span_err!(self.tcx.sess, span, E0264,\n-                      \"unknown external lang item: `{}`\",\n-                      name);\n+            struct_span_err!(\n+                self.tcx.sess, span, E0264,\n+                \"unknown external lang item: `{}`\",\n+                name\n+            )\n+            .emit();\n         }\n     }\n }"}, {"sha": "cb11ac49cec35c5dc62e11c9549ffd779daa13fb", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -7,7 +7,7 @@ use crate::ty::query::TyCtxtAt;\n use crate::ty::{self, layout, Ty};\n \n use backtrace::Backtrace;\n-use errors::DiagnosticBuilder;\n+use errors::{struct_span_err, DiagnosticBuilder};\n use hir::GeneratorKind;\n use rustc_hir as hir;\n use rustc_macros::HashStable;"}, {"sha": "00251d55706d70ae1e8673b64dec909f386f987f", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -20,7 +20,8 @@ use crate::ty::GenericParamDefKind;\n use crate::ty::SubtypePredicate;\n use crate::ty::TypeckTables;\n use crate::ty::{self, AdtKind, DefIdTree, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n-use errors::{pluralize, Applicability, DiagnosticBuilder, Style};\n+\n+use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, Style};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};"}, {"sha": "f1b830e43fc1d6a84c76909e663fb0d0c3d60cff", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -2,6 +2,8 @@ use fmt_macros::{Parser, Piece, Position};\n \n use crate::ty::{self, GenericParamDefKind, TyCtxt};\n use crate::util::common::ErrorReported;\n+\n+use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -292,26 +294,28 @@ impl<'tcx> OnUnimplementedFormatString {\n                         match generics.params.iter().find(|param| param.name == s) {\n                             Some(_) => (),\n                             None => {\n-                                span_err!(\n+                                struct_span_err!(\n                                     tcx.sess,\n                                     span,\n                                     E0230,\n                                     \"there is no parameter `{}` on trait `{}`\",\n                                     s,\n                                     name\n-                                );\n+                                )\n+                                .emit();\n                                 result = Err(ErrorReported);\n                             }\n                         }\n                     }\n                     // `{:1}` and `{}` are not to be used\n                     Position::ArgumentIs(_) | Position::ArgumentImplicitlyIs(_) => {\n-                        span_err!(\n+                        struct_span_err!(\n                             tcx.sess,\n                             span,\n                             E0231,\n                             \"only named substitution parameters are allowed\"\n-                        );\n+                        )\n+                        .emit();\n                         result = Err(ErrorReported);\n                     }\n                 },"}, {"sha": "370acb53896d389d4338a1bd325fb3f7c57aab6d", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -76,15 +76,15 @@ pub struct DropckOutlivesResult<'tcx> {\n impl<'tcx> DropckOutlivesResult<'tcx> {\n     pub fn report_overflows(&self, tcx: TyCtxt<'tcx>, span: Span, ty: Ty<'tcx>) {\n         if let Some(overflow_ty) = self.overflows.iter().next() {\n-            let mut err = struct_span_err!(\n+            errors::struct_span_err!(\n                 tcx.sess,\n                 span,\n                 E0320,\n                 \"overflow while adding drop-check rules for {}\",\n                 ty,\n-            );\n-            err.note(&format!(\"overflowed on {}\", overflow_ty));\n-            err.emit();\n+            )\n+            .note(&format!(\"overflowed on {}\", overflow_ty))\n+            .emit();\n         }\n     }\n "}, {"sha": "d189714883845d5a2a8ad343f3f2d848f65a92eb", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -17,6 +17,7 @@ use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::{self, TyCtxt, TypeFoldable};\n+use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_span::DUMMY_SP;"}, {"sha": "35608540383b0202f7c1e41a56f832108f1cc0ce", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -9,11 +9,7 @@ use crate::ty::query::Query;\n use crate::ty::tls;\n use crate::ty::{self, TyCtxt};\n \n-use errors::Diagnostic;\n-use errors::DiagnosticBuilder;\n-use errors::FatalError;\n-use errors::Handler;\n-use errors::Level;\n+use errors::{struct_span_err, Diagnostic, DiagnosticBuilder, FatalError, Handler, Level};\n #[cfg(not(parallel_compiler))]\n use rustc_data_structures::cold_path;\n use rustc_data_structures::fx::{FxHashMap, FxHasher};"}, {"sha": "ee020c7e589abd84946e5aad7cd6c51fe5cebbcb", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -3,14 +3,14 @@ use super::{ImplTraitContext, LoweringContext, ParamMode, ParenthesizedGenericAr\n use rustc::bug;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast::*;\n use syntax::attr;\n use syntax::ptr::P as AstP;\n-use syntax::{span_err, struct_span_err};\n \n impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_exprs(&mut self, exprs: &[AstP<Expr>]) -> &'hir [hir::Expr<'hir>] {\n@@ -685,12 +685,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         match generator_kind {\n             Some(hir::GeneratorKind::Gen) => {\n                 if !decl.inputs.is_empty() {\n-                    span_err!(\n+                    struct_span_err!(\n                         self.sess,\n                         fn_decl_span,\n                         E0628,\n                         \"generators cannot have explicit parameters\"\n-                    );\n+                    )\n+                    .emit();\n                 }\n                 Some(movability)\n             }\n@@ -699,7 +700,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n             None => {\n                 if movability == Movability::Static {\n-                    span_err!(self.sess, fn_decl_span, E0697, \"closures cannot be static\");\n+                    struct_span_err!(self.sess, fn_decl_span, E0697, \"closures cannot be static\")\n+                        .emit();\n                 }\n                 None\n             }\n@@ -946,7 +948,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Gen) => {}\n             Some(hir::GeneratorKind::Async(_)) => {\n-                span_err!(self.sess, span, E0727, \"`async` generators are not yet supported\",);\n+                struct_span_err!(\n+                    self.sess,\n+                    span,\n+                    E0727,\n+                    \"`async` generators are not yet supported\"\n+                )\n+                .emit();\n                 return hir::ExprKind::Err;\n             }\n             None => self.generator_kind = Some(hir::GeneratorKind::Gen),"}, {"sha": "a5892a22d9dfaa945fa70bf9b458c5983934a9bf", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -4,6 +4,7 @@ use super::{ImplTraitContext, ImplTraitPosition, ImplTraitTypeIdVisitor};\n use rustc::arena::Arena;\n use rustc::bug;\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -14,7 +15,6 @@ use rustc_span::Span;\n use rustc_target::spec::abi;\n use syntax::ast::*;\n use syntax::attr;\n-use syntax::struct_span_err;\n use syntax::visit::{self, Visitor};\n \n use log::debug;"}, {"sha": "8b79d9b4f478e0f3f034f023f230c7f01d920bd4", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -47,7 +47,7 @@ use rustc::{bug, span_bug};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_error_codes::*;\n-use rustc_errors::Applicability;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, DefIndex, CRATE_DEF_INDEX};\n@@ -69,7 +69,7 @@ use syntax::sess::ParseSess;\n use syntax::token::{self, Nonterminal, Token};\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::visit::{self, Visitor};\n-use syntax::{help, struct_span_err, walk_list};\n+use syntax::walk_list;\n \n use log::{debug, trace};\n use smallvec::{smallvec, SmallVec};\n@@ -1347,10 +1347,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         );\n                         if pos == ImplTraitPosition::Binding && nightly_options::is_nightly_build()\n                         {\n-                            help!(\n-                                err,\n+                            err.help(\n                                 \"add `#![feature(impl_trait_in_bindings)]` to the crate \\\n-                                   attributes to enable\"\n+                                   attributes to enable\",\n                             );\n                         }\n                         err.emit();"}, {"sha": "78d2d37ef56d3ee177eacc6ebe11b724648d1391", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -2,7 +2,7 @@\n //\n use State::*;\n \n-use errors::{DiagnosticBuilder, PResult};\n+use errors::{struct_span_err, DiagnosticBuilder, PResult};\n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -11,7 +11,6 @@ use syntax::ast::{self, AsmDialect};\n use syntax::ptr::P;\n use syntax::token::{self, Token};\n use syntax::tokenstream::{self, TokenStream};\n-use syntax::{span_err, struct_span_err};\n \n use rustc_error_codes::*;\n \n@@ -173,12 +172,13 @@ fn parse_inline_asm<'a>(\n                         Some('=') => None,\n                         Some('+') => Some(Symbol::intern(&format!(\"={}\", ch.as_str()))),\n                         _ => {\n-                            span_err!(\n-                                cx,\n+                            struct_span_err!(\n+                                cx.parse_sess.span_diagnostic,\n                                 span,\n                                 E0661,\n                                 \"output operand constraint lacks '=' or '+'\"\n-                            );\n+                            )\n+                            .emit();\n                             None\n                         }\n                     };\n@@ -202,9 +202,21 @@ fn parse_inline_asm<'a>(\n                     let constraint = parse_asm_str(&mut p)?;\n \n                     if constraint.as_str().starts_with(\"=\") {\n-                        span_err!(cx, p.prev_span, E0662, \"input operand constraint contains '='\");\n+                        struct_span_err!(\n+                            cx.parse_sess.span_diagnostic,\n+                            p.prev_span,\n+                            E0662,\n+                            \"input operand constraint contains '='\"\n+                        )\n+                        .emit();\n                     } else if constraint.as_str().starts_with(\"+\") {\n-                        span_err!(cx, p.prev_span, E0663, \"input operand constraint contains '+'\");\n+                        struct_span_err!(\n+                            cx.parse_sess.span_diagnostic,\n+                            p.prev_span,\n+                            E0663,\n+                            \"input operand constraint contains '+'\"\n+                        )\n+                        .emit();\n                     }\n \n                     p.expect(&token::OpenDelim(token::Paren))?;\n@@ -225,12 +237,13 @@ fn parse_inline_asm<'a>(\n                     if OPTIONS.iter().any(|&opt| s == opt) {\n                         cx.span_warn(p.prev_span, \"expected a clobber, found an option\");\n                     } else if s.as_str().starts_with(\"{\") || s.as_str().ends_with(\"}\") {\n-                        span_err!(\n-                            cx,\n+                        struct_span_err!(\n+                            cx.parse_sess.span_diagnostic,\n                             p.prev_span,\n                             E0664,\n                             \"clobber should not be surrounded by braces\"\n-                        );\n+                        )\n+                        .emit();\n                     }\n \n                     clobs.push(s);"}, {"sha": "8d3f1951373752f6de22fe047f27b81fc9670044", "filename": "src/librustc_builtin_macros/deriving/default.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -2,12 +2,12 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n+use errors::struct_span_err;\n use rustc_expand::base::{Annotatable, DummyResult, ExtCtxt};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use syntax::ast::{Expr, MetaItem};\n use syntax::ptr::P;\n-use syntax::span_err;\n \n use rustc_error_codes::*;\n \n@@ -74,7 +74,13 @@ fn default_substructure(\n             }\n         },\n         StaticEnum(..) => {\n-            span_err!(cx, trait_span, E0665, \"`Default` cannot be derived for enums, only structs\");\n+            struct_span_err!(\n+                cx.parse_sess.span_diagnostic,\n+                trait_span,\n+                E0665,\n+                \"`Default` cannot be derived for enums, only structs\"\n+            )\n+            .emit();\n             // let compilation continue\n             DummyResult::raw_expr(trait_span, true)\n         }"}, {"sha": "e4531a77656a3bfb4d28fd69bfbdeed4bcd75ef1", "filename": "src/librustc_codegen_ssa/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -2,6 +2,7 @@\n \n use rustc::session::Session;\n use rustc::ty::{Ty, TyCtxt};\n+use rustc_errors::struct_span_err;\n use rustc_span::Span;\n \n use crate::base;\n@@ -196,5 +197,5 @@ pub fn shift_mask_val<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n }\n \n pub fn span_invalid_monomorphization_error(a: &Session, b: Span, c: &str) {\n-    span_err!(a, b, E0511, \"{}\", c);\n+    struct_span_err!(a, b, E0511, \"{}\", c).emit();\n }"}, {"sha": "a8d051db8b4780648f6212ff560b72002f3f0896", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -21,8 +21,6 @@\n extern crate log;\n #[macro_use]\n extern crate rustc;\n-#[macro_use]\n-extern crate syntax;\n \n use rustc::dep_graph::WorkProduct;\n use rustc::middle::cstore::{CrateSource, LibSource, NativeLibrary};"}, {"sha": "574c06d9ceb419d6b1b8d892fc1ac22474dae324", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,4 +1,5 @@\n use rustc::mir;\n+use rustc_errors::struct_span_err;\n \n use super::FunctionCx;\n use super::LocalRef;\n@@ -81,12 +82,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         if let OperandValue::Immediate(_) = op.val {\n                             acc.push(op.immediate());\n                         } else {\n-                            span_err!(\n+                            struct_span_err!(\n                                 bx.sess(),\n                                 span.to_owned(),\n                                 E0669,\n                                 \"invalid value for constraint in inline assembly\"\n-                            );\n+                            )\n+                            .emit();\n                         }\n                         acc\n                     },\n@@ -100,12 +102,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         statement.source_info.span,\n                     );\n                     if !res {\n-                        span_err!(\n+                        struct_span_err!(\n                             bx.sess(),\n                             statement.source_info.span,\n                             E0668,\n                             \"malformed inline assembly\"\n-                        );\n+                        )\n+                        .emit();\n                     }\n                 }\n                 bx"}, {"sha": "3dcd801a21a6d8ba4eabbe61d605cd24ddf65447", "filename": "src/librustc_error_codes/error_codes/E0566.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_error_codes%2Ferror_codes%2FE0566.md", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_error_codes%2Ferror_codes%2FE0566.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0566.md?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -2,8 +2,8 @@ Conflicting representation hints have been used on a same item.\n \n Erroneous code example:\n \n-```\n-#[repr(u32, u64)] // warning!\n+```compile_fail,E0566\n+#[repr(u32, u64)]\n enum Repr { A }\n ```\n "}, {"sha": "73f66d550374050c4be7cc0eef6a3eceacfa1549", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -385,3 +385,22 @@ impl<'a> Drop for DiagnosticBuilder<'a> {\n         }\n     }\n }\n+\n+#[macro_export]\n+macro_rules! struct_span_err {\n+    ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n+        $session.struct_span_err_with_code(\n+            $span,\n+            &format!($($message)*),\n+            $crate::error_code!($code),\n+        )\n+    })\n+}\n+\n+#[macro_export]\n+macro_rules! error_code {\n+    ($code:ident) => {{\n+        let _ = $code;\n+        $crate::DiagnosticId::Error(stringify!($code).to_owned())\n+    }};\n+}"}, {"sha": "b21715fadfe6f899b1caa4c8c03b6c13bc10c376", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -20,6 +20,7 @@ use rustc_target::spec::{PanicStrategy, TargetTriple};\n use std::path::Path;\n use std::{cmp, fs};\n \n+use errors::struct_span_err;\n use log::{debug, info, log_enabled};\n use proc_macro::bridge::client::ProcMacro;\n use rustc_expand::base::SyntaxExtension;\n@@ -29,7 +30,6 @@ use rustc_span::{Span, DUMMY_SP};\n use syntax::ast;\n use syntax::attr;\n use syntax::expand::allocator::{global_allocator_spans, AllocatorKind};\n-use syntax::span_fatal;\n \n use rustc_error_codes::*;\n \n@@ -261,7 +261,7 @@ impl<'a> CrateLoader<'a> {\n         if self.local_crate_name == root.name()\n             && self.sess.local_crate_disambiguator() == root.disambiguator()\n         {\n-            span_fatal!(\n+            struct_span_err!(\n                 self.sess,\n                 span,\n                 E0519,\n@@ -271,6 +271,7 @@ impl<'a> CrateLoader<'a> {\n                          will result in symbol conflicts between the two.\",\n                 root.name()\n             )\n+            .emit()\n         }\n \n         // Check for conflicts with any crate loaded so far\n@@ -280,7 +281,7 @@ impl<'a> CrateLoader<'a> {\n                other.hash() != root.hash()\n             {\n                 // but different SVH\n-                span_fatal!(\n+                struct_span_err!(\n                     self.sess,\n                     span,\n                     E0523,\n@@ -289,6 +290,7 @@ impl<'a> CrateLoader<'a> {\n                          will result in symbol conflicts between the two.\",\n                     root.name()\n                 )\n+                .emit();\n             }\n         });\n     }"}, {"sha": "9f9a2187eced8c863903542569a4680949a93e3a", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -215,20 +215,17 @@\n use crate::creader::Library;\n use crate::rmeta::{rustc_version, MetadataBlob, METADATA_HEADER};\n \n+use errors::{struct_span_err, DiagnosticBuilder};\n use rustc::middle::cstore::{CrateSource, MetadataLoader};\n use rustc::session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n use rustc::session::search_paths::PathKind;\n use rustc::session::{config, CrateDisambiguator, Session};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n-\n-use errors::DiagnosticBuilder;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::{Target, TargetTriple};\n-use syntax::struct_span_err;\n-use syntax::{span_err, span_fatal};\n \n use std::cmp;\n use std::fmt;\n@@ -1038,28 +1035,28 @@ pub fn find_plugin_registrar(\n     };\n \n     if target_only {\n-        // Need to abort before syntax expansion.\n         let message = format!(\n-            \"plugin `{}` is not available for triple `{}` \\\n-                                (only found {})\",\n+            \"plugin `{}` is not available for triple `{}` (only found {})\",\n             name,\n             config::host_triple(),\n             sess.opts.target_triple\n         );\n-        span_fatal!(sess, span, E0456, \"{}\", &message);\n+        struct_span_err!(sess, span, E0456, \"{}\", &message).emit();\n+        return None;\n     }\n \n     match library.source.dylib {\n         Some(dylib) => Some((dylib.0, library.metadata.get_root().disambiguator())),\n         None => {\n-            span_err!(\n+            struct_span_err!(\n                 sess,\n                 span,\n                 E0457,\n                 \"plugin `{}` only found in rlib format, but must be available \\\n                         in dylib format\",\n                 name\n-            );\n+            )\n+            .emit();\n             // No need to abort because the loading code will just ignore this\n             // empty dylib.\n             None"}, {"sha": "c9f47475af851afd979b048848997602d0f03a9e", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,17 +1,16 @@\n+use errors::struct_span_err;\n use rustc::middle::cstore::{self, NativeLibrary};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_error_codes::*;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::spec::abi::Abi;\n use syntax::attr;\n use syntax::feature_gate::feature_err;\n-use syntax::{span_err, struct_span_err};\n-\n-use rustc_error_codes::*;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLibrary> {\n     let mut collector = Collector { tcx, libs: Vec::new() };\n@@ -159,7 +158,7 @@ impl Collector<'tcx> {\n         if lib.kind == cstore::NativeFramework && !is_osx {\n             let msg = \"native frameworks are only available on macOS targets\";\n             match span {\n-                Some(span) => span_err!(self.tcx.sess, span, E0455, \"{}\", msg),\n+                Some(span) => struct_span_err!(self.tcx.sess, span, E0455, \"{}\", msg).emit(),\n                 None => self.tcx.sess.err(msg),\n             }\n         }"}, {"sha": "b1df198406d3bae83c0a81327fa376f34189899e", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -28,6 +28,7 @@ use rustc::ty::{\n };\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};"}, {"sha": "07bb87f7b543f4ee3c365022d486f00978d68380", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -10,7 +10,7 @@ use rustc::session::Session;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_error_codes::*;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::DefId;\n@@ -116,7 +116,7 @@ impl PatCtxt<'_, '_> {\n     }\n \n     fn span_e0158(&self, span: Span, text: &str) {\n-        span_err!(self.tcx.sess, span, E0158, \"{}\", text)\n+        struct_span_err!(self.tcx.sess, span, E0158, \"{}\", text).emit();\n     }\n }\n \n@@ -291,24 +291,26 @@ fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_>, pat: &Pa\n                             variant.ident == ident && variant.ctor_kind == CtorKind::Const\n                         })\n                     {\n-                        // FIXME(Centril): Should be a lint?\n                         let ty_path = cx.tcx.def_path_str(edef.did);\n-                        let mut err = struct_span_warn!(\n-                            cx.tcx.sess,\n-                            p.span,\n-                            E0170,\n-                            \"pattern binding `{}` is named the same as one \\\n-                             of the variants of the type `{}`\",\n-                            ident,\n-                            ty_path\n-                        );\n-                        err.span_suggestion(\n-                            p.span,\n-                            \"to match on the variant, qualify the path\",\n-                            format!(\"{}::{}\", ty_path, ident),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        err.emit();\n+                        cx.tcx\n+                            .struct_span_lint_hir(\n+                                lint::builtin::BINDINGS_WITH_VARIANT_NAME,\n+                                p.hir_id,\n+                                p.span,\n+                                &format!(\n+                                    \"pattern binding `{}` is named the same as one \\\n+                                    of the variants of the type `{}`\",\n+                                    ident, ty_path\n+                                ),\n+                            )\n+                            .code(error_code!(E0170))\n+                            .span_suggestion(\n+                                p.span,\n+                                \"to match on the variant, qualify the path\",\n+                                format!(\"{}::{}\", ty_path, ident),\n+                                Applicability::MachineApplicable,\n+                            )\n+                            .emit();\n                     }\n                 }\n             }"}, {"sha": "611d3f5b832dcbe6daf3d82701a6b6c573557ed6", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -16,6 +16,7 @@ use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::{GenericArg, SubstsRef};\n use rustc::ty::{self, AdtDef, DefIdTree, Region, Ty, TyCtxt, UserType};\n use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n@@ -463,12 +464,13 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                                 PatKind::Range(PatRange { lo, hi, end })\n                             }\n                             (RangeEnd::Excluded, _) => {\n-                                span_err!(\n+                                struct_span_err!(\n                                     self.tcx.sess,\n                                     lo_expr.span,\n                                     E0579,\n                                     \"lower range bound must be less than upper\",\n-                                );\n+                                )\n+                                .emit();\n                                 PatKind::Wild\n                             }\n                             (RangeEnd::Included, Some(Ordering::Equal)) => {"}, {"sha": "9f70f1dd5768809ba6d2c90852c4919d034e5e5a", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -35,8 +35,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n extern crate log;\n #[macro_use]\n extern crate rustc;\n-#[macro_use]\n-extern crate syntax;\n \n mod borrow_check;\n mod build;"}, {"sha": "abef008a8eccb152b43a887890f758051446d5e3", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -2,6 +2,7 @@\n \n use rustc::session::config::nightly_options;\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n@@ -115,12 +116,7 @@ impl NonConstOp for FnCallUnstable {\n             &format!(\"`{}` is not yet stable as a const fn\", item.tcx.def_path_str(def_id)),\n         );\n         if nightly_options::is_nightly_build() {\n-            help!(\n-                &mut err,\n-                \"add `#![feature({})]` to the \\\n-                   crate attributes to enable\",\n-                feature\n-            );\n+            err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n         }\n         err.emit();\n     }\n@@ -197,13 +193,14 @@ impl NonConstOp for Loop {\n pub struct CellBorrow;\n impl NonConstOp for CellBorrow {\n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        span_err!(\n+        struct_span_err!(\n             item.tcx.sess,\n             span,\n             E0492,\n             \"cannot borrow a constant which may contain \\\n             interior mutability, create a static instead\"\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -375,13 +372,14 @@ impl NonConstOp for ThreadLocalAccess {\n     const IS_SUPPORTED_IN_MIRI: bool = false;\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        span_err!(\n+        struct_span_err!(\n             item.tcx.sess,\n             span,\n             E0625,\n             \"thread-local statics cannot be \\\n             accessed at compile-time\"\n-        );\n+        )\n+        .emit();\n     }\n }\n "}, {"sha": "0aa42de538d2b3439bfd048fe524a6b86009bd98", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -7,6 +7,7 @@ use rustc::traits::{self, TraitEngine};\n use rustc::ty::cast::CastTy;\n use rustc::ty::{self, TyCtxt};\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir::{def_id::DefId, HirId};\n use rustc_index::bit_set::BitSet;\n use rustc_span::symbol::sym;"}, {"sha": "5cf5c54dd4878b17eaee6f73eeda07ab9d5e5634", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -6,6 +6,7 @@ use rustc::ty::cast::CastTy;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Node;"}, {"sha": "c275eecfb33b629f574d521ef0a03f8e843e911b", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,8 +1,7 @@\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n-use rustc_span::{MultiSpan, Span};\n-\n use rustc_error_codes::*;\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, DiagnosticId};\n+use rustc_span::{MultiSpan, Span};\n \n impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n     crate fn cannot_move_when_borrowed(&self, span: Span, desc: &str) -> DiagnosticBuilder<'cx> {"}, {"sha": "9abfbc698c5cffbac46bccd2b6a0cb408a5c08eb", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -2,7 +2,8 @@ use super::{BlockMode, Parser, PathStyle, SemiColonMode, SeqSep, TokenExpectType\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_error_codes::*;\n-use rustc_errors::{self, pluralize, Applicability, DiagnosticBuilder, Handler, PResult};\n+use rustc_errors::{pluralize, struct_span_err};\n+use rustc_errors::{Applicability, DiagnosticBuilder, Handler, PResult};\n use rustc_span::symbol::kw;\n use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n use syntax::ast::{\n@@ -11,7 +12,6 @@ use syntax::ast::{\n use syntax::ast::{AttrVec, ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::struct_span_err;\n use syntax::token::{self, token_can_begin_expr, TokenKind};\n use syntax::util::parser::AssocOp;\n "}, {"sha": "918e826fc26bf894d128e2c73b0c3258bf9cf8f1", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -4,7 +4,7 @@ use super::{FollowedByType, Parser, PathStyle};\n use crate::maybe_whole;\n \n use rustc_error_codes::*;\n-use rustc_errors::{Applicability, DiagnosticBuilder, PResult, StashKey};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult, StashKey};\n use rustc_span::source_map::{self, respan, Span};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::BytePos;\n@@ -16,7 +16,6 @@ use syntax::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant,\n use syntax::ast::{FnHeader, ForeignItem, ForeignItemKind, Mutability, Visibility, VisibilityKind};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::struct_span_err;\n use syntax::token;\n use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};\n "}, {"sha": "8d695eda98d04d73c868267aca374ff327bb8e24", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -15,7 +15,7 @@ use crate::lexer::UnmatchedBrace;\n use crate::{Directory, DirectoryOwnership};\n \n use log::debug;\n-use rustc_errors::{Applicability, DiagnosticBuilder, FatalError, PResult};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, Span, DUMMY_SP};\n@@ -24,7 +24,6 @@ use syntax::ast::{IsAsync, MacArgs, MacDelimiter, Mutability, StrLit, Visibility\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n-use syntax::struct_span_err;\n use syntax::token::{self, DelimToken, Token, TokenKind};\n use syntax::tokenstream::{self, DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use syntax::util::comments::{doc_comment_style, strip_doc_comment_decoration};"}, {"sha": "f96c82a1ab37d644eb27118316899d40e256d461", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -4,7 +4,7 @@ use super::{Parser, PathStyle, PrevTokenKind, TokenType};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n \n use rustc_error_codes::*;\n-use rustc_errors::{pluralize, Applicability, PResult};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, PResult};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::kw;\n use syntax::ast::{\n@@ -15,7 +15,6 @@ use syntax::ast::{\n };\n use syntax::ast::{Mac, Mutability};\n use syntax::ptr::P;\n-use syntax::struct_span_err;\n use syntax::token::{self, Token};\n \n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,"}, {"sha": "5000cd5f52f6501b77a7fe6903d062c6410a186f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -6,7 +6,7 @@\n // This pass is supposed to perform only simple checks not requiring name resolution\n // or type checking or some other kind of complex analysis.\n \n-use errors::{Applicability, FatalError};\n+use errors::{struct_span_err, Applicability, FatalError};\n use rustc::lint;\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n@@ -20,7 +20,7 @@ use syntax::attr;\n use syntax::expand::is_proc_macro_attr;\n use syntax::print::pprust;\n use syntax::visit::{self, Visitor};\n-use syntax::{span_err, struct_span_err, walk_list};\n+use syntax::walk_list;\n \n use rustc_error_codes::*;\n \n@@ -470,7 +470,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.check_fn_decl(fn_decl);\n             }\n             ExprKind::InlineAsm(..) if !self.session.target.target.options.allow_asm => {\n-                span_err!(self.session, expr.span, E0472, \"asm! is unsupported on this target\");\n+                struct_span_err!(\n+                    self.session,\n+                    expr.span,\n+                    E0472,\n+                    \"asm! is unsupported on this target\"\n+                )\n+                .emit();\n             }\n             _ => {}\n         }\n@@ -498,12 +504,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 for bound in bounds {\n                     if let GenericBound::Outlives(ref lifetime) = *bound {\n                         if any_lifetime_bounds {\n-                            span_err!(\n+                            struct_span_err!(\n                                 self.session,\n                                 lifetime.ident.span,\n                                 E0226,\n                                 \"only a single explicit lifetime bound is permitted\"\n-                            );\n+                            )\n+                            .emit();\n                             break;\n                         }\n                         any_lifetime_bounds = true;\n@@ -575,7 +582,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .emit();\n                 }\n                 if unsafety == Unsafety::Unsafe && polarity == ImplPolarity::Negative {\n-                    span_err!(self.session, item.span, E0198, \"negative impls cannot be unsafe\");\n+                    struct_span_err!(\n+                        self.session,\n+                        item.span,\n+                        E0198,\n+                        \"negative impls cannot be unsafe\"\n+                    )\n+                    .emit();\n                 }\n                 for impl_item in impl_items {\n                     self.invalid_visibility(&impl_item.vis, None);\n@@ -591,7 +604,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     Some(\"place qualifiers on individual impl items instead\"),\n                 );\n                 if unsafety == Unsafety::Unsafe {\n-                    span_err!(self.session, item.span, E0197, \"inherent impls cannot be unsafe\");\n+                    struct_span_err!(\n+                        self.session,\n+                        item.span,\n+                        E0197,\n+                        \"inherent impls cannot be unsafe\"\n+                    )\n+                    .emit();\n                 }\n                 if polarity == ImplPolarity::Negative {\n                     self.err_handler().span_err(item.span, \"inherent impls cannot be negative\");"}, {"sha": "f6a9d1cace15fae6b524fc719f186abd9d25b09d", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -7,6 +7,7 @@\n //! errors. We still look for those primitives in the MIR const-checker to ensure nothing slips\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n+use errors::struct_span_err;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n use rustc::session::config::nightly_options;\n@@ -18,7 +19,6 @@ use rustc_hir::def_id::DefId;\n use rustc_span::{sym, Span, Symbol};\n use syntax::ast::Mutability;\n use syntax::feature_gate::feature_err;\n-use syntax::span_err;\n \n use std::fmt;\n \n@@ -154,7 +154,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             required_gates.iter().copied().filter(|&g| !features.enabled(g)).collect();\n \n         match missing_gates.as_slice() {\n-            &[] => span_err!(self.tcx.sess, span, E0744, \"{}\", msg),\n+            &[] => struct_span_err!(self.tcx.sess, span, E0744, \"{}\", msg).emit(),\n \n             // If the user enabled `#![feature(const_loop)]` but not `#![feature(const_if_match)]`,\n             // explain why their `while` loop is being rejected."}, {"sha": "c083830b730cc0a91f3579c6c7d02389b4667426", "filename": "src/librustc_passes/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostic_items.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -73,7 +73,7 @@ fn collect_item(\n                 )),\n             };\n             if let Some(span) = tcx.hir().span_if_local(original_def_id) {\n-                span_note!(&mut err, span, \"first defined here.\");\n+                err.span_note(span, \"first defined here.\");\n             } else {\n                 err.note(&format!(\n                     \"first defined in crate `{}`.\","}, {"sha": "8273504715dba99f38adcd44c381fa2216ff617f", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,3 +1,4 @@\n+use errors::struct_span_err;\n use rustc::hir::map as hir_map;\n use rustc::session::config::EntryFnType;\n use rustc::session::{config, Session};\n@@ -7,7 +8,7 @@ use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ImplItem, Item, ItemKind, TraitItem};\n use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::attr;\n use syntax::entry::EntryPointType;\n \n@@ -108,7 +109,8 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n             if ctxt.main_fn.is_none() {\n                 ctxt.main_fn = Some((item.hir_id, item.span));\n             } else {\n-                span_err!(ctxt.session, item.span, E0136, \"multiple `main` functions\");\n+                struct_span_err!(ctxt.session, item.span, E0136, \"multiple `main` functions\")\n+                    .emit();\n             }\n         }\n         EntryPointType::OtherMain => {\n@@ -166,8 +168,9 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     }\n \n     // There is no main function.\n-    let mut err = struct_err!(\n+    let mut err = struct_span_err!(\n         tcx.sess,\n+        DUMMY_SP,\n         E0601,\n         \"`main` function not found in crate `{}`\",\n         tcx.crate_name(LOCAL_CRATE)"}, {"sha": "2b9a692117cc7d7df1bb8ed2b6d2c87d32a48d19", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,3 +1,4 @@\n+use errors::struct_span_err;\n use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Ty, TyCtxt};"}, {"sha": "f128d3891d7b87ca51b1a103d313096233c81a5c", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -14,8 +14,6 @@\n extern crate rustc;\n #[macro_use]\n extern crate log;\n-#[macro_use]\n-extern crate syntax;\n \n use rustc::ty::query::Providers;\n "}, {"sha": "df56bcff81f6f0abb2647d97ac49a555011faff5", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -4,6 +4,7 @@\n // and `#[unstable (..)]`), but are not declared in one single location\n // (unlike lang features), which means we need to collect them instead.\n \n+use errors::struct_span_err;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::middle::lib_features::LibFeatures;\n use rustc::ty::query::Providers;"}, {"sha": "262f2382da3a4decea39524db13d6d0d782a96dc", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -2,7 +2,7 @@ use Context::*;\n \n use rustc::session::Session;\n \n-use errors::Applicability;\n+use errors::{struct_span_err, Applicability};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n use rustc::ty::query::Providers;\n@@ -11,7 +11,6 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{Destination, Movability, Node};\n use rustc_span::Span;\n-use syntax::struct_span_err;\n \n use rustc_error_codes::*;\n "}, {"sha": "75c74c4f923c2dfbd396de885a7eab74f0c23f61", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -17,6 +17,7 @@ use rustc_hir::{Arm, Block, Expr, Local, Node, Pat, PatKind, Stmt};\n use rustc_index::vec::Idx;\n use rustc_span::source_map;\n use rustc_span::Span;\n+use syntax::walk_list;\n \n use std::mem;\n "}, {"sha": "33c985bd66b182f5c202aefdc3ca2c6074534ab6", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,6 +1,7 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n+use errors::struct_span_err;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::lint;\n use rustc::middle::privacy::AccessLevels;"}, {"sha": "d0b7accafd68bb50775b7dd004a24c3a177e5bb5", "filename": "src/librustc_plugin_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_plugin_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_plugin_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2FCargo.toml?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -12,6 +12,7 @@ doctest = false\n \n [dependencies]\n rustc = { path = \"../librustc\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "65661ec24f07f9a57ac7c092bdb097ab90dc8e9f", "filename": "src/librustc_plugin_impl/load.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_plugin_impl%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_plugin_impl%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fload.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -3,18 +3,17 @@\n use crate::Registry;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::session::Session;\n+use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_metadata::locator;\n-\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n+use syntax::ast::{Crate, Ident};\n+\n use std::borrow::ToOwned;\n use std::env;\n use std::mem;\n use std::path::PathBuf;\n-use syntax::ast::{Crate, Ident};\n-use syntax::struct_span_err;\n-\n-use rustc_error_codes::*;\n \n /// Pointer to a registrar function.\n type PluginRegistrarFn = fn(&mut Registry<'_>);"}, {"sha": "795b6c107fe944040c209b51d553361519eda551", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -10,6 +10,7 @@ path = \"lib.rs\"\n \n [dependencies]\n rustc = { path = \"../librustc\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "17e56129247f364b230a25f2f2a7551ba0535920", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -3,9 +3,6 @@\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n \n-#[macro_use]\n-extern crate syntax;\n-\n use rustc::bug;\n use rustc::hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n use rustc::lint;\n@@ -15,6 +12,7 @@ use rustc::ty::query::Providers;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};"}, {"sha": "6472f39e844a19e29ae65815d32ff64af13b7a33", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -28,7 +28,7 @@ use rustc_data_structures::sync::Lrc;\n use std::cell::Cell;\n use std::ptr;\n \n-use errors::Applicability;\n+use errors::{struct_span_err, Applicability};\n \n use rustc_expand::base::SyntaxExtension;\n use rustc_expand::expand::AstFragment;\n@@ -40,7 +40,6 @@ use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, Nod\n use syntax::ast::{AssocItem, AssocItemKind, MetaItemKind, StmtKind};\n use syntax::ast::{Ident, Name};\n use syntax::attr;\n-use syntax::span_err;\n use syntax::token::{self, Token};\n use syntax::visit::{self, Visitor};\n \n@@ -954,22 +953,27 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         for attr in &item.attrs {\n             if attr.check_name(sym::macro_use) {\n                 if self.parent_scope.module.parent.is_some() {\n-                    span_err!(\n+                    struct_span_err!(\n                         self.r.session,\n                         item.span,\n                         E0468,\n                         \"an `extern crate` loading macros must be at the crate root\"\n-                    );\n+                    )\n+                    .emit();\n                 }\n                 if let ItemKind::ExternCrate(Some(orig_name)) = item.kind {\n                     if orig_name == kw::SelfLower {\n-                        self.r.session.span_err(\n-                            attr.span,\n-                            \"`macro_use` is not supported on `extern crate self`\",\n-                        );\n+                        self.r\n+                            .session\n+                            .struct_span_err(\n+                                attr.span,\n+                                \"`macro_use` is not supported on `extern crate self`\",\n+                            )\n+                            .emit();\n                     }\n                 }\n-                let ill_formed = |span| span_err!(self.r.session, span, E0466, \"bad macro import\");\n+                let ill_formed =\n+                    |span| struct_span_err!(self.r.session, span, E0466, \"bad macro import\").emit();\n                 match attr.meta() {\n                     Some(meta) => match meta.kind {\n                         MetaItemKind::Word => {\n@@ -1042,7 +1046,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         allow_shadowing,\n                     );\n                 } else {\n-                    span_err!(self.r.session, ident.span, E0469, \"imported macro not found\");\n+                    struct_span_err!(self.r.session, ident.span, E0469, \"imported macro not found\")\n+                        .emit();\n                 }\n             }\n         }"}, {"sha": "b81e71f0acfd7525ca1df09a538d5c4aaa4efc47", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,6 +1,6 @@\n use std::cmp::Reverse;\n \n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use log::debug;\n use rustc::bug;\n use rustc::session::Session;\n@@ -16,7 +16,6 @@ use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, MultiSpan, Span};\n use syntax::ast::{self, Ident, Path};\n use syntax::print::pprust;\n-use syntax::struct_span_err;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use crate::imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};"}, {"sha": "72de895f350f83ac139b3481662b54c7aafa3b84", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -11,8 +11,7 @@ use crate::{BindingKey, ModuleKind, ResolutionError, Resolver, Segment};\n use crate::{CrateLint, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet, Weak};\n use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBinding};\n \n-use errors::{pluralize, Applicability};\n-\n+use errors::{pluralize, struct_span_err, Applicability};\n use rustc::hir::exports::Export;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n@@ -27,8 +26,8 @@ use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::kw;\n use rustc_span::{MultiSpan, Span};\n use syntax::ast::{Ident, Name, NodeId};\n+use syntax::unwrap_or;\n use syntax::util::lev_distance::find_best_match_for_name;\n-use syntax::{struct_span_err, unwrap_or};\n \n use rustc_error_codes::*;\n "}, {"sha": "29a1be6bb7461e72edb315686530e28a51f12d12", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -11,6 +11,7 @@ use crate::{path_names_to_string, BindingError, CrateLint, LexicalScopeBinding};\n use crate::{Module, ModuleOrUniformRoot, NameBindingKind, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n \n+use errors::DiagnosticId;\n use log::debug;\n use rustc::{bug, lint, span_bug};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -304,32 +305,21 @@ impl<'a> PathSource<'a> {\n         }\n     }\n \n-    fn error_code(self, has_unexpected_resolution: bool) -> &'static str {\n-        syntax::diagnostic_used!(E0404);\n-        syntax::diagnostic_used!(E0405);\n-        syntax::diagnostic_used!(E0412);\n-        syntax::diagnostic_used!(E0422);\n-        syntax::diagnostic_used!(E0423);\n-        syntax::diagnostic_used!(E0425);\n-        syntax::diagnostic_used!(E0531);\n-        syntax::diagnostic_used!(E0532);\n-        syntax::diagnostic_used!(E0573);\n-        syntax::diagnostic_used!(E0574);\n-        syntax::diagnostic_used!(E0575);\n-        syntax::diagnostic_used!(E0576);\n+    fn error_code(self, has_unexpected_resolution: bool) -> DiagnosticId {\n+        use errors::error_code;\n         match (self, has_unexpected_resolution) {\n-            (PathSource::Trait(_), true) => \"E0404\",\n-            (PathSource::Trait(_), false) => \"E0405\",\n-            (PathSource::Type, true) => \"E0573\",\n-            (PathSource::Type, false) => \"E0412\",\n-            (PathSource::Struct, true) => \"E0574\",\n-            (PathSource::Struct, false) => \"E0422\",\n-            (PathSource::Expr(..), true) => \"E0423\",\n-            (PathSource::Expr(..), false) => \"E0425\",\n-            (PathSource::Pat, true) | (PathSource::TupleStruct, true) => \"E0532\",\n-            (PathSource::Pat, false) | (PathSource::TupleStruct, false) => \"E0531\",\n-            (PathSource::TraitItem(..), true) => \"E0575\",\n-            (PathSource::TraitItem(..), false) => \"E0576\",\n+            (PathSource::Trait(_), true) => error_code!(E0404),\n+            (PathSource::Trait(_), false) => error_code!(E0405),\n+            (PathSource::Type, true) => error_code!(E0573),\n+            (PathSource::Type, false) => error_code!(E0412),\n+            (PathSource::Struct, true) => error_code!(E0574),\n+            (PathSource::Struct, false) => error_code!(E0422),\n+            (PathSource::Expr(..), true) => error_code!(E0423),\n+            (PathSource::Expr(..), false) => error_code!(E0425),\n+            (PathSource::Pat, true) | (PathSource::TupleStruct, true) => error_code!(E0532),\n+            (PathSource::Pat, false) | (PathSource::TupleStruct, false) => error_code!(E0531),\n+            (PathSource::TraitItem(..), true) => error_code!(E0575),\n+            (PathSource::TraitItem(..), false) => error_code!(E0576),\n         }\n     }\n }"}, {"sha": "029f8421475e574268c4f34d9ec52078fa6dc9c7", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -4,7 +4,7 @@ use crate::path_names_to_string;\n use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder};\n use log::debug;\n use rustc::session::config::nightly_options;\n use rustc_data_structures::fx::FxHashSet;\n@@ -73,7 +73,6 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         let expected = source.descr_expected();\n         let path_str = Segment::names_to_string(path);\n         let item_str = path.last().unwrap().ident;\n-        let code = source.error_code(res.is_some());\n         let (base_msg, fallback_label, base_span, could_be_expr) = if let Some(res) = res {\n             (\n                 format!(\"expected {}, found {} `{}`\", expected, res.descr(), path_str),\n@@ -123,7 +122,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             )\n         };\n \n-        let code = DiagnosticId::Error(code.into());\n+        let code = source.error_code(res.is_some());\n         let mut err = self.r.session.struct_span_err_with_code(base_span, &base_msg, code);\n \n         // Emit help message for fake-self from other languages (e.g., `this` in Javascript).\n@@ -140,8 +139,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n \n         // Emit special messages for unresolved `Self` and `self`.\n         if is_self_type(path, ns) {\n-            syntax::diagnostic_used!(E0411);\n-            err.code(DiagnosticId::Error(\"E0411\".into()));\n+            err.code(errors::error_code!(E0411));\n             err.span_label(\n                 span,\n                 format!(\"`Self` is only available in impls, traits, and type definitions\"),\n@@ -151,8 +149,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         if is_self_value(path, ns) {\n             debug!(\"smart_resolve_path_fragment: E0424, source={:?}\", source);\n \n-            syntax::diagnostic_used!(E0424);\n-            err.code(DiagnosticId::Error(\"E0424\".into()));\n+            err.code(errors::error_code!(E0424));\n             err.span_label(span, match source {\n                 PathSource::Pat => format!(\n                     \"`self` value is a keyword and may not be bound to variables or shadowed\","}, {"sha": "f8e42724df72ba4957ba560795976ad2f435887d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -20,7 +20,7 @@ pub use rustc_hir::def::{Namespace, PerNS};\n \n use Determinacy::*;\n \n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::hir::exports::ExportMap;\n use rustc::hir::map::Definitions;\n use rustc::lint;\n@@ -49,8 +49,8 @@ use syntax::ast::{Crate, CRATE_NODE_ID};\n use syntax::ast::{ItemKind, Path};\n use syntax::attr;\n use syntax::print::pprust;\n+use syntax::unwrap_or;\n use syntax::visit::{self, Visitor};\n-use syntax::{struct_span_err, unwrap_or};\n \n use log::debug;\n use std::cell::{Cell, RefCell};"}, {"sha": "15858f7d8abc89a2cc6ffdc664ae477609d65398", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -5,7 +5,7 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n-use errors::{pluralize, Applicability, DiagnosticBuilder};\n+use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n use rustc::lint;\n@@ -26,7 +26,7 @@ use std::cell::Cell;\n use std::mem::{replace, take};\n use syntax::ast;\n use syntax::attr;\n-use syntax::{help, span_err, struct_span_err, walk_list};\n+use syntax::walk_list;\n \n use log::debug;\n \n@@ -591,13 +591,14 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                     || krate.impl_items.contains_key(&parent_impl_id)\n                                     || krate.trait_items.contains_key(&parent_trait_id))\n                                 {\n-                                    span_err!(\n+                                    struct_span_err!(\n                                         self.tcx.sess,\n                                         lifetime.span,\n                                         E0657,\n                                         \"`impl Trait` can only capture lifetimes \\\n                                          bound at the fn or impl level\"\n-                                    );\n+                                    )\n+                                    .emit();\n                                     self.uninsert_lifetime_on_error(lifetime, def.unwrap());\n                                 }\n                             }\n@@ -943,12 +944,13 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             })\n         {\n             if self.trait_ref_hack {\n-                span_err!(\n+                struct_span_err!(\n                     self.tcx.sess,\n                     trait_ref.span,\n                     E0316,\n                     \"nested quantification of lifetimes\"\n-                );\n+                )\n+                .emit();\n             }\n             let next_early_index = self.next_early_index();\n             let scope = Scope::Binder {\n@@ -2433,36 +2435,32 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         if len == 0 {\n-            help!(\n-                db,\n-                \"this function's return type contains a borrowed value, but \\\n-                 there is no value for it to be borrowed from\"\n+            db.help(\n+                \"this function's return type contains a borrowed value, \\\n+                but there is no value for it to be borrowed from\",\n             );\n             self.suggest_lifetime(db, span, \"consider giving it a 'static lifetime\")\n         } else if elided_len == 0 {\n-            help!(\n-                db,\n+            db.help(\n                 \"this function's return type contains a borrowed value with \\\n                  an elided lifetime, but the lifetime cannot be derived from \\\n-                 the arguments\"\n+                 the arguments\",\n             );\n             let msg = \"consider giving it an explicit bounded or 'static lifetime\";\n             self.suggest_lifetime(db, span, msg)\n         } else if elided_len == 1 {\n-            help!(\n-                db,\n-                \"this function's return type contains a borrowed value, but \\\n-                 the signature does not say which {} it is borrowed from\",\n+            db.help(&format!(\n+                \"this function's return type contains a borrowed value, \\\n+                but the signature does not say which {} it is borrowed from\",\n                 m\n-            );\n+            ));\n             true\n         } else {\n-            help!(\n-                db,\n-                \"this function's return type contains a borrowed value, but \\\n-                 the signature does not say whether it is borrowed from {}\",\n+            db.help(&format!(\n+                \"this function's return type contains a borrowed value, \\\n+                but the signature does not say whether it is borrowed from {}\",\n                 m\n-            );\n+            ));\n             true\n         }\n     }"}, {"sha": "ec1f9f3a7bdaf12f1f38c0387760e3e2a3101f11", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -499,14 +499,15 @@ impl SourceMap {\n         // and to the end of the line. Be careful because the line\n         // numbers in Loc are 1-based, so we subtract 1 to get 0-based\n         // lines.\n-        for line_index in lo.line - 1..hi.line - 1 {\n+        let hi_line = hi.line.saturating_sub(1);\n+        for line_index in lo.line.saturating_sub(1)..hi_line {\n             let line_len = lo.file.get_line(line_index).map(|s| s.chars().count()).unwrap_or(0);\n             lines.push(LineInfo { line_index, start_col, end_col: CharPos::from_usize(line_len) });\n             start_col = CharPos::from_usize(0);\n         }\n \n         // For the last line, it extends from `start_col` to `hi.col`:\n-        lines.push(LineInfo { line_index: hi.line - 1, start_col, end_col: hi.col });\n+        lines.push(LineInfo { line_index: hi_line, start_col, end_col: hi.col });\n \n         Ok(FileLines { file: lo.file, lines })\n     }"}, {"sha": "4bacf9349379e9e67d44851c4f6e39ec92e3b237", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -9,7 +9,7 @@ use crate::middle::resolve_lifetime as rl;\n use crate::namespace::Namespace;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n-use errors::{Applicability, DiagnosticId};\n+use errors::{struct_span_err, Applicability, DiagnosticId};\n use rustc::hir::intravisit::Visitor;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n@@ -1119,13 +1119,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 if unbound.is_none() {\n                     unbound = Some(&ptr.trait_ref);\n                 } else {\n-                    span_err!(\n+                    struct_span_err!(\n                         tcx.sess,\n                         span,\n                         E0203,\n                         \"type parameter has more than one relaxed default \\\n                         bound, only one is supported\"\n-                    );\n+                    )\n+                    .emit();\n                 }\n             }\n         }\n@@ -1445,7 +1446,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         if regular_traits.is_empty() && auto_traits.is_empty() {\n-            span_err!(tcx.sess, span, E0224, \"at least one trait is required for an object type\");\n+            struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0224,\n+                \"at least one trait is required for an object type\"\n+            )\n+            .emit();\n             return tcx.types.err;\n         }\n \n@@ -1601,13 +1608,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     self.ast_region_to_region(lifetime, None)\n                 } else {\n                     self.re_infer(None, span).unwrap_or_else(|| {\n-                        span_err!(\n+                        struct_span_err!(\n                             tcx.sess,\n                             span,\n                             E0228,\n                             \"the lifetime bound for this object type cannot be deduced \\\n                              from context; please supply an explicit bound\"\n-                        );\n+                        )\n+                        .emit();\n                         tcx.lifetimes.re_static\n                     })\n                 }\n@@ -2880,12 +2888,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // error.\n         let r = derived_region_bounds[0];\n         if derived_region_bounds[1..].iter().any(|r1| r != *r1) {\n-            span_err!(\n+            struct_span_err!(\n                 tcx.sess,\n                 span,\n                 E0227,\n                 \"ambiguous lifetime bound, explicit lifetime bound required\"\n-            );\n+            )\n+            .emit();\n         }\n         return Some(r);\n     }"}, {"sha": "3d02889d2ddd3175c8dd1229d1ff9eb7425f454d", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,6 +1,7 @@\n use super::method::MethodCallee;\n use super::{FnCtxt, Needs, PlaceOp};\n \n+use errors::struct_span_err;\n use rustc::infer::{InferCtxt, InferOk};\n use rustc::session::DiagnosticMessageId;\n use rustc::traits::{self, TraitEngine};"}, {"sha": "a1915bc025f79b46282a40dee1e852c32ce33a42", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,8 +1,9 @@\n use super::autoderef::Autoderef;\n use super::method::MethodCallee;\n use super::{Expectation, FnCtxt, Needs, TupleArgumentsFlag};\n+use crate::type_error_struct;\n \n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use hir::def::Res;\n use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};"}, {"sha": "9dbf55c4948316c14dcdc97ae2da9b8cbc95a105", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -32,8 +32,9 @@ use super::FnCtxt;\n \n use crate::hir::def_id::DefId;\n use crate::lint;\n+use crate::type_error_struct;\n use crate::util::common::ErrorReported;\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::traits;\n@@ -425,17 +426,16 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             );\n                         }\n                         Err(_) => {\n-                            span_help!(err, self.cast_span, \"did you mean `&{}{}`?\", mtstr, tstr)\n+                            let msg = &format!(\"did you mean `&{}{}`?\", mtstr, tstr);\n+                            err.span_help(self.cast_span, msg);\n                         }\n                     }\n                 } else {\n-                    span_help!(\n-                        err,\n-                        self.span,\n+                    let msg = &format!(\n                         \"consider using an implicit coercion to `&{}{}` instead\",\n-                        mtstr,\n-                        tstr\n+                        mtstr, tstr\n                     );\n+                    err.span_help(self.span, msg);\n                 }\n             }\n             ty::Adt(def, ..) if def.is_box() => {\n@@ -448,11 +448,13 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             Applicability::MachineApplicable,\n                         );\n                     }\n-                    Err(_) => span_help!(err, self.cast_span, \"did you mean `Box<{}>`?\", tstr),\n+                    Err(_) => {\n+                        err.span_help(self.cast_span, &format!(\"did you mean `Box<{}>`?\", tstr));\n+                    }\n                 }\n             }\n             _ => {\n-                span_help!(err, self.expr.span, \"consider using a box or reference as appropriate\");\n+                err.span_help(self.expr.span, \"consider using a box or reference as appropriate\");\n             }\n         }\n         err.emit();"}, {"sha": "ec298ca697183b4b0182ff85fb62918c0bd8ec6e", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -51,7 +51,7 @@\n //! we may want to adjust precisely when coercions occur.\n \n use crate::check::{FnCtxt, Needs};\n-use errors::DiagnosticBuilder;\n+use errors::{struct_span_err, DiagnosticBuilder};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::{Coercion, InferOk, InferResult};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};"}, {"sha": "e1f2950469b86771354b0ea291f8fc587af98555", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,4 +1,4 @@\n-use errors::{Applicability, DiagnosticId};\n+use errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n use rustc::hir::intravisit;\n use rustc::infer::{self, InferOk};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n@@ -11,7 +11,6 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n use rustc_span::Span;\n-use syntax::errors::pluralize;\n \n use super::{potentially_plural_count, FnCtxt, Inherited};\n "}, {"sha": "33a07423c2502abc4d4ed9240df47c4bb72e7ddf", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,8 +1,8 @@\n use crate::check::regionck::RegionCtxt;\n-\n use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::util::common::ErrorReported;\n+use errors::struct_span_err;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::{InferOk, SuppressRegionErrors};\n use rustc::middle::region;"}, {"sha": "01795ef39665f288f081b7d17a52823e2738a2db", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -14,9 +14,10 @@ use crate::check::Expectation::{self, ExpectCastableToType, ExpectHasType, NoExp\n use crate::check::FnCtxt;\n use crate::check::Needs;\n use crate::check::TupleArgumentsFlag::DontTupleArguments;\n+use crate::type_error_struct;\n use crate::util::common::ErrorReported;\n \n-use errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::infer;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::middle::lang_items;\n@@ -1108,13 +1109,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Prohibit struct expressions when non-exhaustive flag is set.\n         let adt = adt_ty.ty_adt_def().expect(\"`check_struct_path` returned non-ADT type\");\n         if !adt.did.is_local() && variant.is_field_list_non_exhaustive() {\n-            span_err!(\n+            struct_span_err!(\n                 self.tcx.sess,\n                 expr.span,\n                 E0639,\n                 \"cannot create non-exhaustive {} using struct expression\",\n                 adt.variant_descr()\n-            );\n+            )\n+            .emit();\n         }\n \n         let error_happened = self.check_expr_struct_fields(\n@@ -1152,12 +1154,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .insert(expr.hir_id, fru_field_types);\n                     }\n                     _ => {\n-                        span_err!(\n+                        struct_span_err!(\n                             self.tcx.sess,\n                             base_expr.span,\n                             E0436,\n                             \"functional record update syntax requires a struct\"\n-                        );\n+                        )\n+                        .emit();\n                     }\n                 }\n             }"}, {"sha": "2b731947aa0fa8e0ecc79c74849f72b146b4a1ce", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -2,17 +2,16 @@\n //! intrinsics that the compiler exposes.\n \n use crate::require_same_types;\n+\n+use errors::struct_span_err;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n-\n+use rustc_error_codes::*;\n+use rustc_hir as hir;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi::Abi;\n \n-use rustc_hir as hir;\n-\n-use rustc_error_codes::*;\n-\n use std::iter;\n \n fn equate_intrinsic_type<'tcx>(\n@@ -413,19 +412,20 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n                 (2, params, param(1))\n             }\n             Err(_) => {\n-                span_err!(\n+                struct_span_err!(\n                     tcx.sess,\n                     it.span,\n                     E0439,\n                     \"invalid `simd_shuffle`, needs length: `{}`\",\n                     name\n-                );\n+                )\n+                .emit();\n                 return;\n             }\n         },\n         _ => {\n             let msg = format!(\"unrecognized platform-specific intrinsic function: `{}`\", name);\n-            tcx.sess.span_err(it.span, &msg);\n+            tcx.sess.struct_span_err(it.span, &msg).emit();\n             return;\n         }\n     };"}, {"sha": "4f0467b78b252a0c0cb70066a535e08a86e0aacb", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -9,6 +9,7 @@ use crate::hir::def::DefKind;\n use crate::hir::def_id::DefId;\n use crate::namespace::Namespace;\n \n+use errors::struct_span_err;\n use rustc::infer::canonical::OriginalQueryValues;\n use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -373,13 +374,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // so we do a future-compat lint here for the 2015 edition\n                 // (see https://github.com/rust-lang/rust/issues/46906)\n                 if self.tcx.sess.rust_2018() {\n-                    span_err!(\n+                    struct_span_err!(\n                         self.tcx.sess,\n                         span,\n                         E0699,\n                         \"the type of this value must be known \\\n                                to call a method on a raw pointer on it\"\n-                    );\n+                    )\n+                    .emit();\n                 } else {\n                     self.tcx.lint_hir(\n                         lint::builtin::TYVAR_BEHIND_RAW_POINTER,"}, {"sha": "8bf9f488e59771fe459a16ed1c0b616ab3ff49d4", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -4,7 +4,7 @@\n use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use crate::namespace::Namespace;\n-use errors::{pluralize, Applicability, DiagnosticBuilder};\n+use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::hir::intravisit;\n use rustc::hir::map as hir_map;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -193,21 +193,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let item_span =\n                             self.tcx.sess.source_map().def_span(self.tcx.def_span(item.def_id));\n                         let idx = if sources.len() > 1 {\n-                            span_note!(\n-                                err,\n-                                item_span,\n+                            let msg = &format!(\n                                 \"candidate #{} is defined in the trait `{}`\",\n                                 idx + 1,\n                                 self.tcx.def_path_str(trait_did)\n                             );\n+                            err.span_note(item_span, msg);\n                             Some(idx + 1)\n                         } else {\n-                            span_note!(\n-                                err,\n-                                item_span,\n+                            let msg = &format!(\n                                 \"the candidate is defined in the trait `{}`\",\n                                 self.tcx.def_path_str(trait_did)\n                             );\n+                            err.span_note(item_span, msg);\n                             None\n                         };\n                         let path = self.tcx.def_path_str(trait_did);"}, {"sha": "e6fbae09ba1a0991bab35850d9ee8e811f1967a6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -90,7 +90,7 @@ pub mod writeback;\n use crate::astconv::{AstConv, PathSeg};\n use crate::middle::lang_items;\n use crate::namespace::Namespace;\n-use errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n@@ -157,6 +157,17 @@ use self::method::{MethodCallee, SelfSource};\n pub use self::Expectation::*;\n use self::TupleArgumentsFlag::*;\n \n+#[macro_export]\n+macro_rules! type_error_struct {\n+    ($session:expr, $span:expr, $typ:expr, $code:ident, $($message:tt)*) => ({\n+        if $typ.references_error() {\n+            $session.diagnostic().struct_dummy()\n+        } else {\n+            errors::struct_span_err!($session, $span, $code, $($message)*)\n+        }\n+    })\n+}\n+\n /// The type of a local binding, including the revealed type for anon types.\n #[derive(Copy, Clone, Debug)]\n pub struct LocalTy<'tcx> {\n@@ -2091,14 +2102,15 @@ fn check_impl_items_against_trait<'tcx>(\n \n     if !invalidated_items.is_empty() {\n         let invalidator = overridden_associated_type.unwrap();\n-        span_err!(\n+        struct_span_err!(\n             tcx.sess,\n             invalidator.span,\n             E0399,\n             \"the following trait items need to be reimplemented as `{}` was overridden: `{}`\",\n             invalidator.ident,\n             invalidated_items.iter().map(|name| name.to_string()).collect::<Vec<_>>().join(\"`, `\")\n         )\n+        .emit();\n     }\n }\n \n@@ -2241,7 +2253,7 @@ pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n         if def.is_struct() {\n             let fields = &def.non_enum_variant().fields;\n             if fields.is_empty() {\n-                span_err!(tcx.sess, sp, E0075, \"SIMD vector cannot be empty\");\n+                struct_span_err!(tcx.sess, sp, E0075, \"SIMD vector cannot be empty\").emit();\n                 return;\n             }\n             let e = fields[0].ty(tcx, substs);\n@@ -2255,12 +2267,13 @@ pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n                 ty::Param(_) => { /* struct<T>(T, T, T, T) is ok */ }\n                 _ if e.is_machine() => { /* struct(u8, u8, u8, u8) is ok */ }\n                 _ => {\n-                    span_err!(\n+                    struct_span_err!(\n                         tcx.sess,\n                         sp,\n                         E0077,\n                         \"SIMD vector element type should be machine type\"\n-                    );\n+                    )\n+                    .emit();\n                     return;\n                 }\n             }\n@@ -2545,14 +2558,15 @@ pub fn check_enum<'tcx>(\n }\n \n fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span, qpath: &QPath<'_>) {\n-    span_err!(\n+    struct_span_err!(\n         tcx.sess,\n         span,\n         E0533,\n         \"expected unit struct, unit variant or constant, found {} `{}`\",\n         res.descr(),\n         hir::print::to_string(tcx.hir(), |s| s.print_qpath(qpath, false))\n-    );\n+    )\n+    .emit();\n }\n \n impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n@@ -3762,13 +3776,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     arg_types.iter().map(|k| k.expect_ty()).collect()\n                 }\n                 _ => {\n-                    span_err!(\n+                    struct_span_err!(\n                         tcx.sess,\n                         sp,\n                         E0059,\n                         \"cannot use call notation; the first type parameter \\\n                          for the function trait is neither a tuple nor unit\"\n-                    );\n+                    )\n+                    .emit();\n                     expected_arg_tys = vec![];\n                     self.err_args(args.len())\n                 }"}, {"sha": "3dd112208593959fb6cff51711e81a557210c469", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -2,7 +2,7 @@\n \n use super::method::MethodCallee;\n use super::{FnCtxt, Needs};\n-use errors::{self, Applicability};\n+use errors::{self, struct_span_err, Applicability};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::TyKind::{Adt, Array, Char, FnDef, Never, Ref, Str, Tuple, Uint};"}, {"sha": "58c722f1da6f4eaa17bf92989d7c73650a44f397", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,5 +1,5 @@\n use crate::check::FnCtxt;\n-use errors::{pluralize, Applicability, DiagnosticBuilder};\n+use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::infer;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Pattern;\n@@ -983,22 +983,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Require `..` if struct has non_exhaustive attribute.\n         if variant.is_field_list_non_exhaustive() && !adt.did.is_local() && !etc {\n-            span_err!(\n+            struct_span_err!(\n                 tcx.sess,\n                 span,\n                 E0638,\n                 \"`..` required with {} marked as non-exhaustive\",\n                 kind_name\n-            );\n+            )\n+            .emit();\n         }\n \n         // Report an error if incorrect number of the fields were specified.\n         if kind_name == \"union\" {\n             if fields.len() != 1 {\n-                tcx.sess.span_err(span, \"union patterns should have exactly one field\");\n+                tcx.sess\n+                    .struct_span_err(span, \"union patterns should have exactly one field\")\n+                    .emit();\n             }\n             if etc {\n-                tcx.sess.span_err(span, \"`..` cannot be used in union patterns\");\n+                tcx.sess.struct_span_err(span, \"`..` cannot be used in union patterns\").emit();\n             }\n         } else if !etc && unmentioned_fields.len() > 0 {\n             self.error_unmentioned_fields(span, &unmentioned_fields, variant);"}, {"sha": "c57eb6721896424cde3380d22f9c8249815fabeb", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,6 +1,7 @@\n use crate::check::{FnCtxt, Inherited};\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n+use errors::{struct_span_err, DiagnosticBuilder};\n use rustc::infer::opaque_types::may_define_opaque_type;\n use rustc::middle::lang_items;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n@@ -9,8 +10,6 @@ use rustc::ty::{self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, Typ\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::DefId;\n use rustc_hir::ItemKind;\n-\n-use errors::DiagnosticBuilder;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast;\n@@ -113,13 +112,14 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n                 ty::ImplPolarity::Negative => {\n                     // FIXME(#27579): what amount of WF checking do we need for neg impls?\n                     if trait_ref.is_some() && !is_auto {\n-                        span_err!(\n+                        struct_span_err!(\n                             tcx.sess,\n                             item.span,\n                             E0192,\n                             \"negative impls are only allowed for \\\n                                    auto traits (e.g., `Send` and `Sync`)\"\n                         )\n+                        .emit()\n                     }\n                 }\n                 ty::ImplPolarity::Reservation => {"}, {"sha": "5af5acda143795056f3c8b70b9695b634009d017", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,25 +1,23 @@\n //! Check properties that are required by built-in traits and set\n //! up data structures required by type-checking/codegen.\n \n+use errors::struct_span_err;\n+use rustc::infer;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::SuppressRegionErrors;\n use rustc::middle::lang_items::UnsizeTraitLangItem;\n use rustc::middle::region;\n-\n-use rustc::infer;\n use rustc::traits::misc::{can_type_implement_copy, CopyImplementationError};\n use rustc::traits::predicate_for_trait_def;\n use rustc::traits::{self, ObligationCause, TraitEngine};\n use rustc::ty::adjustment::CoerceUnsizedInfo;\n use rustc::ty::TypeFoldable;\n use rustc::ty::{self, Ty, TyCtxt};\n-\n+use rustc_error_codes::*;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::ItemKind;\n \n-use rustc_error_codes::*;\n-\n pub fn check_trait(tcx: TyCtxt<'_>, trait_def_id: DefId) {\n     Checker { tcx, trait_def_id }\n         .check(tcx.lang_items().drop_trait(), visit_implementation_of_drop)\n@@ -393,7 +391,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n                 if def_a != def_b {\n                     let source_path = tcx.def_path_str(def_a.did);\n                     let target_path = tcx.def_path_str(def_b.did);\n-                    span_err!(\n+                    struct_span_err!(\n                         tcx.sess,\n                         span,\n                         E0377,\n@@ -402,7 +400,8 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n                                definition; expected `{}`, found `{}`\",\n                         source_path,\n                         target_path\n-                    );\n+                    )\n+                    .emit();\n                     return err_info;\n                 }\n \n@@ -479,14 +478,15 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n                     .collect::<Vec<_>>();\n \n                 if diff_fields.is_empty() {\n-                    span_err!(\n+                    struct_span_err!(\n                         tcx.sess,\n                         span,\n                         E0374,\n                         \"the trait `CoerceUnsized` may only be implemented \\\n                                for a coercion between structures with one field \\\n                                being coerced, none found\"\n-                    );\n+                    )\n+                    .emit();\n                     return err_info;\n                 } else if diff_fields.len() > 1 {\n                     let item = tcx.hir().expect_item(impl_hir_id);\n@@ -496,19 +496,19 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n                         tcx.hir().span(impl_hir_id)\n                     };\n \n-                    let mut err = struct_span_err!(\n+                    struct_span_err!(\n                         tcx.sess,\n                         span,\n                         E0375,\n                         \"implementing the trait \\\n                                                     `CoerceUnsized` requires multiple \\\n                                                     coercions\"\n-                    );\n-                    err.note(\n+                    )\n+                    .note(\n                         \"`CoerceUnsized` may only be implemented for \\\n                               a coercion between structures with one field being coerced\",\n-                    );\n-                    err.note(&format!(\n+                    )\n+                    .note(&format!(\n                         \"currently, {} fields need coercions: {}\",\n                         diff_fields.len(),\n                         diff_fields\n@@ -518,9 +518,9 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n                             })\n                             .collect::<Vec<_>>()\n                             .join(\", \")\n-                    ));\n-                    err.span_label(span, \"requires multiple coercions\");\n-                    err.emit();\n+                    ))\n+                    .span_label(span, \"requires multiple coercions\")\n+                    .emit();\n                     return err_info;\n                 }\n \n@@ -530,13 +530,14 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n             }\n \n             _ => {\n-                span_err!(\n+                struct_span_err!(\n                     tcx.sess,\n                     span,\n                     E0376,\n                     \"the trait `CoerceUnsized` may only be implemented \\\n                            for a coercion between structures\"\n-                );\n+                )\n+                .emit();\n                 return err_info;\n             }\n         };"}, {"sha": "73d03f9244721b15877d3f1da36966f3fb9ab2f3", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -7,6 +7,7 @@\n //! `tcx.inherent_impls(def_id)`). That value, however,\n //! is computed by selecting an idea from this table.\n \n+use errors::struct_span_err;\n use rustc::ty::{self, CrateInherentImpls, TyCtxt};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};"}, {"sha": "01d2f528d4563b2598debdeabd260bc6277ef412", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,4 +1,5 @@\n use crate::namespace::Namespace;\n+use errors::struct_span_err;\n use rustc::traits::{self, IntercrateMode};\n use rustc::ty::TyCtxt;\n use rustc_hir as hir;"}, {"sha": "1a008ef23fc76c4c3db0d290bdfd0d3efc2f312c", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -7,6 +7,7 @@\n \n use crate::hir::def_id::{DefId, LOCAL_CRATE};\n use crate::hir::HirId;\n+use errors::struct_span_err;\n use rustc::traits;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt, TypeFoldable};"}, {"sha": "cf9935143b2d7e484b93156a394bc6f6af6a9c79", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,6 +1,7 @@\n //! Orphan checker: every impl either implements a trait defined in this\n //! crate or pertains to a type defined in this crate.\n \n+use errors::struct_span_err;\n use rustc::traits;\n use rustc::ty::{self, TyCtxt};\n use rustc_hir as hir;"}, {"sha": "9257aa759b4cf50bf5d7fb74149bc88bfe92aa5e", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,6 +1,7 @@\n //! Unsafety checker: every impl either implements a trait defined in this\n //! crate or pertains to a type defined in this crate.\n \n+use errors::struct_span_err;\n use rustc::ty::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -33,23 +34,25 @@ impl UnsafetyChecker<'tcx> {\n             });\n             match (trait_def.unsafety, unsafe_attr, unsafety, polarity) {\n                 (Unsafety::Normal, None, Unsafety::Unsafe, hir::ImplPolarity::Positive) => {\n-                    span_err!(\n+                    struct_span_err!(\n                         self.tcx.sess,\n                         item.span,\n                         E0199,\n                         \"implementing the trait `{}` is not unsafe\",\n                         trait_ref.print_only_trait_path()\n-                    );\n+                    )\n+                    .emit();\n                 }\n \n                 (Unsafety::Unsafe, _, Unsafety::Normal, hir::ImplPolarity::Positive) => {\n-                    span_err!(\n+                    struct_span_err!(\n                         self.tcx.sess,\n                         item.span,\n                         E0200,\n                         \"the trait `{}` requires an `unsafe impl` declaration\",\n                         trait_ref.print_only_trait_path()\n-                    );\n+                    )\n+                    .emit();\n                 }\n \n                 (\n@@ -58,13 +61,14 @@ impl UnsafetyChecker<'tcx> {\n                     Unsafety::Normal,\n                     hir::ImplPolarity::Positive,\n                 ) => {\n-                    span_err!(\n+                    struct_span_err!(\n                         self.tcx.sess,\n                         item.span,\n                         E0569,\n                         \"requires an `unsafe impl` declaration due to `#[{}]` attribute\",\n                         attr_name\n-                    );\n+                    )\n+                    .emit();\n                 }\n \n                 (_, _, Unsafety::Unsafe, hir::ImplPolarity::Negative) => {"}, {"sha": "35c380612d2fb234f4cac571886665ae748a0211", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -20,6 +20,7 @@ use crate::constrained_generic_params as cgp;\n use crate::lint;\n use crate::middle::resolve_lifetime as rl;\n use crate::middle::weak_lang_items;\n+use errors::{struct_span_err, Applicability, StashKey};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n@@ -45,8 +46,6 @@ use syntax::ast::{Ident, MetaItemKind};\n use syntax::attr::{list_contains_name, mark_used, InlineAttr, OptimizeAttr};\n use syntax::feature_gate;\n \n-use errors::{Applicability, StashKey};\n-\n use rustc_error_codes::*;\n \n struct OnlySelfBounds(bool);\n@@ -320,13 +319,14 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n             self.tcx().mk_projection(item_def_id, item_substs)\n         } else {\n             // There are no late-bound regions; we can just ignore the binder.\n-            span_err!(\n+            struct_span_err!(\n                 self.tcx().sess,\n                 span,\n                 E0212,\n                 \"cannot extract an associated type from a higher-ranked trait bound \\\n                  in this context\"\n-            );\n+            )\n+            .emit();\n             self.tcx().types.err\n         }\n     }\n@@ -861,17 +861,14 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TraitDef {\n \n     let paren_sugar = tcx.has_attr(def_id, sym::rustc_paren_sugar);\n     if paren_sugar && !tcx.features().unboxed_closures {\n-        let mut err = tcx.sess.struct_span_err(\n-            item.span,\n-            \"the `#[rustc_paren_sugar]` attribute is a temporary means of controlling \\\n+        tcx.sess\n+            .struct_span_err(\n+                item.span,\n+                \"the `#[rustc_paren_sugar]` attribute is a temporary means of controlling \\\n              which traits can use parenthetical notation\",\n-        );\n-        help!(\n-            &mut err,\n-            \"add `#![feature(unboxed_closures)]` to \\\n-             the crate attributes to use it\"\n-        );\n-        err.emit();\n+            )\n+            .help(\"add `#![feature(unboxed_closures)]` to the crate attributes to use it\")\n+            .emit();\n     }\n \n     let is_marker = tcx.has_attr(def_id, sym::marker);\n@@ -1206,12 +1203,13 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n }\n \n fn report_assoc_ty_on_inherent_impl(tcx: TyCtxt<'_>, span: Span) {\n-    span_err!(\n+    struct_span_err!(\n         tcx.sess,\n         span,\n         E0202,\n         \"associated types are not yet supported in inherent impls (see #8995)\"\n-    );\n+    )\n+    .emit();\n }\n \n fn infer_placeholder_type(\n@@ -2767,14 +2765,26 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 mark_used(attr);\n                 inline_span = Some(attr.span);\n                 if items.len() != 1 {\n-                    span_err!(tcx.sess.diagnostic(), attr.span, E0534, \"expected one argument\");\n+                    struct_span_err!(\n+                        tcx.sess.diagnostic(),\n+                        attr.span,\n+                        E0534,\n+                        \"expected one argument\"\n+                    )\n+                    .emit();\n                     InlineAttr::None\n                 } else if list_contains_name(&items[..], sym::always) {\n                     InlineAttr::Always\n                 } else if list_contains_name(&items[..], sym::never) {\n                     InlineAttr::Never\n                 } else {\n-                    span_err!(tcx.sess.diagnostic(), items[0].span(), E0535, \"invalid argument\");\n+                    struct_span_err!(\n+                        tcx.sess.diagnostic(),\n+                        items[0].span(),\n+                        E0535,\n+                        \"invalid argument\"\n+                    )\n+                    .emit();\n \n                     InlineAttr::None\n                 }\n@@ -2788,7 +2798,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         if !attr.has_name(sym::optimize) {\n             return ia;\n         }\n-        let err = |sp, s| span_err!(tcx.sess.diagnostic(), sp, E0722, \"{}\", s);\n+        let err = |sp, s| struct_span_err!(tcx.sess.diagnostic(), sp, E0722, \"{}\", s).emit();\n         match attr.meta().map(|i| i.kind) {\n             Some(MetaItemKind::Word) => {\n                 err(attr.span, \"expected one argument\");"}, {"sha": "e3e61ebb93607fc694260713bebea420f34ff791", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -9,6 +9,7 @@\n //! fixed, but for the moment it's easier to do these checks early.\n \n use crate::constrained_generic_params as cgp;\n+use errors::struct_span_err;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}, {"sha": "bc48e046a0cb0906f691fb68c9022acd87efb956", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -71,8 +71,6 @@ This API is completely unstable and subject to change.\n \n #[macro_use]\n extern crate log;\n-#[macro_use]\n-extern crate syntax;\n \n #[macro_use]\n extern crate rustc;\n@@ -93,6 +91,7 @@ mod outlives;\n mod structured_errors;\n mod variance;\n \n+use errors::struct_span_err;\n use rustc::infer::InferOk;\n use rustc::lint;\n use rustc::middle;"}, {"sha": "b693743e47496e1097f5715776ab498d0088cccd", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,3 +1,4 @@\n+use errors::struct_span_err;\n use rustc::ty::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -21,7 +22,7 @@ impl ItemLikeVisitor<'tcx> for OutlivesTest<'tcx> {\n         // attribute and report an error with various results if found.\n         if self.tcx.has_attr(item_def_id, sym::rustc_outlives) {\n             let inferred_outlives_of = self.tcx.inferred_outlives_of(item_def_id);\n-            span_err!(self.tcx.sess, item.span, E0640, \"{:?}\", inferred_outlives_of);\n+            struct_span_err!(self.tcx.sess, item.span, E0640, \"{:?}\", inferred_outlives_of).emit();\n         }\n     }\n "}, {"sha": "dc6c45b41842c8e9e2655829e8f4870cda10bcbc", "filename": "src/librustc_typeck/structured_errors.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -50,8 +50,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for VariadicError<'tcx> {\n     }\n \n     fn code(&self) -> DiagnosticId {\n-        syntax::diagnostic_used!(E0617);\n-        DiagnosticId::Error(\"E0617\".to_owned())\n+        errors::error_code!(E0617)\n     }\n \n     fn common(&self) -> DiagnosticBuilder<'tcx> {\n@@ -112,8 +111,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCastError<'tcx> {\n     }\n \n     fn code(&self) -> DiagnosticId {\n-        syntax::diagnostic_used!(E0607);\n-        DiagnosticId::Error(\"E0607\".to_owned())\n+        errors::error_code!(E0607)\n     }\n \n     fn common(&self) -> DiagnosticBuilder<'tcx> {"}, {"sha": "860bfe79395ffbebfc26f87d50feb26aab88b56c", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,3 +1,4 @@\n+use errors::struct_span_err;\n use rustc::ty::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -21,7 +22,7 @@ impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n         // attribute and report an error with various results if found.\n         if self.tcx.has_attr(item_def_id, sym::rustc_variance) {\n             let variances_of = self.tcx.variances_of(item_def_id);\n-            span_err!(self.tcx.sess, item.span, E0208, \"{:?}\", variances_of);\n+            struct_span_err!(self.tcx.sess, item.span, E0208, \"{:?}\", variances_of).emit();\n         }\n     }\n "}, {"sha": "b308d479545be195046297a306efd4b60cbda785", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 49, "deletions": 24, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -6,7 +6,7 @@ use crate::feature_gate::feature_err;\n use crate::print::pprust;\n use crate::sess::ParseSess;\n \n-use errors::{Applicability, Handler};\n+use errors::{struct_span_err, Applicability, Handler};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n use rustc_macros::HashStable_Generic;\n use rustc_span::hygiene::Transparency;\n@@ -31,17 +31,21 @@ enum AttrError {\n fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n     let diag = &sess.span_diagnostic;\n     match error {\n-        AttrError::MultipleItem(item) => span_err!(diag, span, E0538, \"multiple '{}' items\", item),\n+        AttrError::MultipleItem(item) => {\n+            struct_span_err!(diag, span, E0538, \"multiple '{}' items\", item).emit();\n+        }\n         AttrError::UnknownMetaItem(item, expected) => {\n             let expected = expected.iter().map(|name| format!(\"`{}`\", name)).collect::<Vec<_>>();\n             struct_span_err!(diag, span, E0541, \"unknown meta item '{}'\", item)\n                 .span_label(span, format!(\"expected one of {}\", expected.join(\", \")))\n                 .emit();\n         }\n-        AttrError::MissingSince => span_err!(diag, span, E0542, \"missing 'since'\"),\n-        AttrError::MissingFeature => span_err!(diag, span, E0546, \"missing 'feature'\"),\n+        AttrError::MissingSince => struct_span_err!(diag, span, E0542, \"missing 'since'\").emit(),\n+        AttrError::MissingFeature => {\n+            struct_span_err!(diag, span, E0546, \"missing 'feature'\").emit();\n+        }\n         AttrError::MultipleStabilityLevels => {\n-            span_err!(diag, span, E0544, \"multiple stability levels\")\n+            struct_span_err!(diag, span, E0544, \"multiple stability levels\").emit();\n         }\n         AttrError::UnsupportedLiteral(msg, is_bytestr) => {\n             let mut err = struct_span_err!(diag, span, E0565, \"{}\", msg);\n@@ -283,7 +287,7 @@ where\n                     *item = Some(v);\n                     true\n                 } else {\n-                    span_err!(diagnostic, meta.span, E0539, \"incorrect meta item\");\n+                    struct_span_err!(diagnostic, meta.span, E0539, \"incorrect meta item\").emit();\n                     false\n                 }\n             };\n@@ -331,12 +335,13 @@ where\n             match meta_name {\n                 sym::rustc_deprecated => {\n                     if rustc_depr.is_some() {\n-                        span_err!(\n+                        struct_span_err!(\n                             diagnostic,\n                             item_sp,\n                             E0540,\n                             \"multiple rustc_deprecated attributes\"\n-                        );\n+                        )\n+                        .emit();\n                         continue 'outer;\n                     }\n \n@@ -351,7 +356,8 @@ where\n                             continue;\n                         }\n                         _ => {\n-                            span_err!(diagnostic, attr.span, E0543, \"missing 'reason'\");\n+                            struct_span_err!(diagnostic, attr.span, E0543, \"missing 'reason'\")\n+                                .emit();\n                             continue;\n                         }\n                     }\n@@ -426,12 +432,13 @@ where\n                                         // Disallowing this requires updates to some submodules\n                                         NonZeroU32::new(num)\n                                     } else {\n-                                        span_err!(\n+                                        struct_span_err!(\n                                             diagnostic,\n                                             attr.span,\n                                             E0545,\n                                             \"incorrect 'issue'\"\n-                                        );\n+                                        )\n+                                        .emit();\n                                         continue;\n                                     }\n                                 }\n@@ -453,7 +460,8 @@ where\n                             continue;\n                         }\n                         _ => {\n-                            span_err!(diagnostic, attr.span, E0547, \"missing 'issue'\");\n+                            struct_span_err!(diagnostic, attr.span, E0547, \"missing 'issue'\")\n+                                .emit();\n                             continue;\n                         }\n                     }\n@@ -539,13 +547,14 @@ where\n         if let Some(ref mut stab) = stab {\n             stab.rustc_depr = Some(rustc_depr);\n         } else {\n-            span_err!(\n+            struct_span_err!(\n                 diagnostic,\n                 item_sp,\n                 E0549,\n                 \"rustc_deprecated attribute must be paired with \\\n                        either stable or unstable attribute\"\n-            );\n+            )\n+            .emit();\n         }\n     }\n \n@@ -555,14 +564,15 @@ where\n             stab.promotable = promotable;\n             stab.allow_const_fn_ptr = allow_const_fn_ptr;\n         } else {\n-            span_err!(\n+            struct_span_err!(\n                 diagnostic,\n                 item_sp,\n                 E0717,\n                 \"rustc_promotable and rustc_allow_const_fn_ptr attributes \\\n                       must be paired with either a rustc_const_unstable or a rustc_const_stable \\\n                       attribute\"\n-            );\n+            )\n+            .emit();\n         }\n     }\n \n@@ -649,20 +659,27 @@ pub fn eval_condition(\n                 }\n                 sym::not => {\n                     if mis.len() != 1 {\n-                        span_err!(sess.span_diagnostic, cfg.span, E0536, \"expected 1 cfg-pattern\");\n+                        struct_span_err!(\n+                            sess.span_diagnostic,\n+                            cfg.span,\n+                            E0536,\n+                            \"expected 1 cfg-pattern\"\n+                        )\n+                        .emit();\n                         return false;\n                     }\n \n                     !eval_condition(mis[0].meta_item().unwrap(), sess, eval)\n                 }\n                 _ => {\n-                    span_err!(\n+                    struct_span_err!(\n                         sess.span_diagnostic,\n                         cfg.span,\n                         E0537,\n                         \"invalid predicate `{}`\",\n                         pprust::path_to_string(&cfg.path)\n-                    );\n+                    )\n+                    .emit();\n                     false\n                 }\n             }\n@@ -703,7 +720,7 @@ where\n         }\n \n         if depr.is_some() {\n-            span_err!(diagnostic, item_sp, E0550, \"multiple deprecated attributes\");\n+            struct_span_err!(diagnostic, item_sp, E0550, \"multiple deprecated attributes\").emit();\n             break;\n         }\n \n@@ -741,7 +758,8 @@ where\n                                 ),\n                             );\n                         } else {\n-                            span_err!(diagnostic, meta.span, E0551, \"incorrect meta item\");\n+                            struct_span_err!(diagnostic, meta.span, E0551, \"incorrect meta item\")\n+                                .emit();\n                         }\n \n                         false\n@@ -900,13 +918,14 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n                         };\n                     }\n                     if let Some(literal_error) = literal_error {\n-                        span_err!(\n+                        struct_span_err!(\n                             diagnostic,\n                             item.span(),\n                             E0589,\n                             \"invalid `repr(align)` attribute: {}\",\n                             literal_error\n-                        );\n+                        )\n+                        .emit();\n                     }\n                 } else {\n                     if let Some(meta_item) = item.meta_item() {\n@@ -945,7 +964,13 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n                 }\n                 if !recognised {\n                     // Not a word we recognize\n-                    span_err!(diagnostic, item.span(), E0552, \"unrecognized representation hint\");\n+                    struct_span_err!(\n+                        diagnostic,\n+                        item.span(),\n+                        E0552,\n+                        \"unrecognized representation hint\"\n+                    )\n+                    .emit();\n                 }\n             }\n         }"}, {"sha": "4ed17418c30ba54c07146e8516f9554b1d6e57a9", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "removed", "additions": 0, "deletions": 169, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/87540bd3bca8dcd86223261f8c76c5bbf6811ee6/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87540bd3bca8dcd86223261f8c76c5bbf6811ee6/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=87540bd3bca8dcd86223261f8c76c5bbf6811ee6", "patch": "@@ -1,169 +0,0 @@\n-#[macro_export]\n-macro_rules! diagnostic_used {\n-    ($code:ident) => {\n-        let _ = $code;\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! span_fatal {\n-    ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        $crate::diagnostic_used!($code);\n-        $session.span_fatal_with_code(\n-            $span,\n-            &format!($($message)*),\n-            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n-        )\n-    })\n-}\n-\n-#[macro_export]\n-macro_rules! span_err {\n-    ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        $crate::diagnostic_used!($code);\n-        $session.span_err_with_code(\n-            $span,\n-            &format!($($message)*),\n-            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n-        )\n-    })\n-}\n-\n-#[macro_export]\n-macro_rules! span_warn {\n-    ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        $crate::diagnostic_used!($code);\n-        $session.span_warn_with_code(\n-            $span,\n-            &format!($($message)*),\n-            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n-        )\n-    })\n-}\n-\n-#[macro_export]\n-macro_rules! struct_err {\n-    ($session:expr, $code:ident, $($message:tt)*) => ({\n-        $crate::diagnostic_used!($code);\n-        $session.struct_err_with_code(\n-            &format!($($message)*),\n-            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n-        )\n-    })\n-}\n-\n-#[macro_export]\n-macro_rules! span_err_or_warn {\n-    ($is_warning:expr, $session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        $crate::diagnostic_used!($code);\n-        if $is_warning {\n-            $session.span_warn_with_code(\n-                $span,\n-                &format!($($message)*),\n-                $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n-            )\n-        } else {\n-            $session.span_err_with_code(\n-                $span,\n-                &format!($($message)*),\n-                $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n-            )\n-        }\n-    })\n-}\n-\n-#[macro_export]\n-macro_rules! struct_span_fatal {\n-    ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        $crate::diagnostic_used!($code);\n-        $session.struct_span_fatal_with_code(\n-            $span,\n-            &format!($($message)*),\n-            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n-        )\n-    })\n-}\n-\n-#[macro_export]\n-macro_rules! struct_span_err {\n-    ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        $crate::diagnostic_used!($code);\n-        $session.struct_span_err_with_code(\n-            $span,\n-            &format!($($message)*),\n-            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n-        )\n-    })\n-}\n-\n-#[macro_export]\n-macro_rules! stringify_error_code {\n-    ($code:ident) => {{\n-        $crate::diagnostic_used!($code);\n-        $crate::errors::DiagnosticId::Error(stringify!($code).to_owned())\n-    }};\n-}\n-\n-#[macro_export]\n-macro_rules! type_error_struct {\n-    ($session:expr, $span:expr, $typ:expr, $code:ident, $($message:tt)*) => ({\n-        if $typ.references_error() {\n-            $session.diagnostic().struct_dummy()\n-        } else {\n-            struct_span_err!($session, $span, $code, $($message)*)\n-        }\n-    })\n-}\n-\n-#[macro_export]\n-macro_rules! struct_span_warn {\n-    ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        $crate::diagnostic_used!($code);\n-        $session.struct_span_warn_with_code(\n-            $span,\n-            &format!($($message)*),\n-            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n-        )\n-    })\n-}\n-\n-#[macro_export]\n-macro_rules! struct_span_err_or_warn {\n-    ($is_warning:expr, $session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        $crate::diagnostic_used!($code);\n-        if $is_warning {\n-            $session.struct_span_warn_with_code(\n-                $span,\n-                &format!($($message)*),\n-                $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n-            )\n-        } else {\n-            $session.struct_span_err_with_code(\n-                $span,\n-                &format!($($message)*),\n-                $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n-            )\n-        }\n-    })\n-}\n-\n-#[macro_export]\n-macro_rules! span_note {\n-    ($err:expr, $span:expr, $($message:tt)*) => ({\n-        ($err).span_note($span, &format!($($message)*));\n-    })\n-}\n-\n-#[macro_export]\n-macro_rules! span_help {\n-    ($err:expr, $span:expr, $($message:tt)*) => ({\n-        ($err).span_help($span, &format!($($message)*));\n-    })\n-}\n-\n-#[macro_export]\n-macro_rules! help {\n-    ($err:expr, $($message:tt)*) => ({\n-        ($err).help(&format!($($message)*));\n-    })\n-}"}, {"sha": "26545bfa61b60809a5acb96f6215e0b8e223e04b", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -4,7 +4,7 @@ use crate::attr;\n use crate::sess::ParseSess;\n use crate::visit::{self, FnKind, Visitor};\n \n-use errors::{Applicability, DiagnosticBuilder, Handler};\n+use errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_error_codes::*;\n use rustc_feature::{find_feature_issue, GateIssue};\n@@ -91,9 +91,7 @@ fn leveled_feature_err<'a>(\n     let diag = &sess.span_diagnostic;\n \n     let mut err = match level {\n-        GateStrength::Hard => {\n-            diag.struct_span_err_with_code(span, explain, stringify_error_code!(E0658))\n-        }\n+        GateStrength::Hard => diag.struct_span_err_with_code(span, explain, error_code!(E0658)),\n         GateStrength::Soft => diag.struct_span_warn(span, explain),\n     };\n \n@@ -827,15 +825,9 @@ pub fn get_features(\n             };\n \n             if let Some(edition) = edition_enabled_features.get(&name) {\n-                struct_span_warn!(\n-                    span_handler,\n-                    mi.span(),\n-                    E0705,\n-                    \"the feature `{}` is included in the Rust {} edition\",\n-                    name,\n-                    edition,\n-                )\n-                .emit();\n+                let msg =\n+                    &format!(\"the feature `{}` is included in the Rust {} edition\", name, edition);\n+                span_handler.struct_span_warn_with_code(mi.span(), msg, error_code!(E0705)).emit();\n                 continue;\n             }\n \n@@ -863,13 +855,14 @@ pub fn get_features(\n \n             if let Some(allowed) = allow_features.as_ref() {\n                 if allowed.iter().find(|&f| name.as_str() == *f).is_none() {\n-                    span_err!(\n+                    struct_span_err!(\n                         span_handler,\n                         mi.span(),\n                         E0725,\n                         \"the feature `{}` is not in the list of allowed features\",\n                         name\n-                    );\n+                    )\n+                    .emit();\n                     continue;\n                 }\n             }\n@@ -953,13 +946,14 @@ pub fn check_crate(\n fn maybe_stage_features(span_handler: &Handler, krate: &ast::Crate, unstable: UnstableFeatures) {\n     if !unstable.is_nightly_build() {\n         for attr in krate.attrs.iter().filter(|attr| attr.check_name(sym::feature)) {\n-            span_err!(\n+            struct_span_err!(\n                 span_handler,\n                 attr.span,\n                 E0554,\n                 \"`#![feature]` may not be used on the {} release channel\",\n                 option_env!(\"CFG_RELEASE_CHANNEL\").unwrap_or(\"(unknown)\")\n-            );\n+            )\n+            .emit();\n         }\n     }\n }"}, {"sha": "b197eab739427abd8766d18013af027ce9d27bd8", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -62,12 +62,6 @@ pub fn with_default_globals<R>(f: impl FnOnce() -> R) -> R {\n \n scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n \n-#[macro_use]\n-pub mod diagnostics {\n-    #[macro_use]\n-    pub mod macros;\n-}\n-\n pub mod util {\n     pub mod classify;\n     pub mod comments;"}, {"sha": "c63fe4ddce214aa9874a7d6a8495f608fab4cc4d", "filename": "src/test/run-make-fulldeps/simd-ffi/simd.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2Fsimd.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -4,35 +4,28 @@\n // cross-compiled standard libraries.\n #![feature(no_core, optin_builtin_traits)]\n #![no_core]\n-\n #![feature(repr_simd, simd_ffi, link_llvm_intrinsics, lang_items, rustc_attrs)]\n \n-\n-#[repr(C)]\n #[derive(Copy)]\n #[repr(simd)]\n pub struct f32x4(f32, f32, f32, f32);\n \n-\n-extern {\n+extern \"C\" {\n     #[link_name = \"llvm.sqrt.v4f32\"]\n     fn vsqrt(x: f32x4) -> f32x4;\n }\n \n pub fn foo(x: f32x4) -> f32x4 {\n-    unsafe {vsqrt(x)}\n+    unsafe { vsqrt(x) }\n }\n \n-#[repr(C)]\n #[derive(Copy)]\n #[repr(simd)]\n pub struct i32x4(i32, i32, i32, i32);\n \n-\n-extern {\n+extern \"C\" {\n     // _mm_sll_epi32\n-    #[cfg(any(target_arch = \"x86\",\n-              target_arch = \"x86-64\"))]\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86-64\"))]\n     #[link_name = \"llvm.x86.sse2.psll.d\"]\n     fn integer(a: i32x4, b: i32x4) -> i32x4;\n \n@@ -48,22 +41,24 @@ extern {\n     // just some substitute foreign symbol, not an LLVM intrinsic; so\n     // we still get type checking, but not as detailed as (ab)using\n     // LLVM.\n-    #[cfg(not(any(target_arch = \"x86\",\n-                  target_arch = \"x86-64\",\n-                  target_arch = \"arm\",\n-                  target_arch = \"aarch64\")))]\n+    #[cfg(not(any(\n+        target_arch = \"x86\",\n+        target_arch = \"x86-64\",\n+        target_arch = \"arm\",\n+        target_arch = \"aarch64\"\n+    )))]\n     fn integer(a: i32x4, b: i32x4) -> i32x4;\n }\n \n pub fn bar(a: i32x4, b: i32x4) -> i32x4 {\n-    unsafe {integer(a, b)}\n+    unsafe { integer(a, b) }\n }\n \n #[lang = \"sized\"]\n-pub trait Sized { }\n+pub trait Sized {}\n \n #[lang = \"copy\"]\n-pub trait Copy { }\n+pub trait Copy {}\n \n impl Copy for f32 {}\n impl Copy for i32 {}\n@@ -77,4 +72,6 @@ auto trait Freeze {}\n \n #[macro_export]\n #[rustc_builtin_macro]\n-macro_rules! Copy { () => () }\n+macro_rules! Copy {\n+    () => {};\n+}"}, {"sha": "8e9c11690a824a7c6618118d67fc2a1a8e012e3f", "filename": "src/test/ui/conflicting-repr-hints.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fconflicting-repr-hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fconflicting-repr-hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,16 +1,24 @@\n #![allow(dead_code)]\n \n #[repr(C)]\n-enum A { A }\n+enum A {\n+    A,\n+}\n \n #[repr(u64)]\n-enum B { B }\n+enum B {\n+    B,\n+}\n \n-#[repr(C, u64)] //~ WARNING conflicting representation hints\n-enum C { C }\n+#[repr(C, u64)] //~ ERROR conflicting representation hints\n+enum C {\n+    C,\n+}\n \n-#[repr(u32, u64)] //~ WARNING conflicting representation hints\n-enum D { D }\n+#[repr(u32, u64)] //~ ERROR conflicting representation hints\n+enum D {\n+    D,\n+}\n \n #[repr(C, packed)]\n struct E(i32);\n@@ -37,20 +45,23 @@ struct J(i32); //~ ERROR type has conflicting packed representation hints\n struct K(i32);\n \n #[repr(packed, align(8))]\n-union X { //~ ERROR type has conflicting packed and align representation hints\n-    i: i32\n+union X {\n+    //~^ ERROR type has conflicting packed and align representation hints\n+    i: i32,\n }\n \n #[repr(packed)]\n #[repr(align(8))]\n-union Y { //~ ERROR type has conflicting packed and align representation hints\n-    i: i32\n+union Y {\n+    //~^ ERROR type has conflicting packed and align representation hints\n+    i: i32,\n }\n \n #[repr(align(8))]\n #[repr(packed)]\n-union Z { //~ ERROR type has conflicting packed and align representation hints\n-    i: i32\n+union Z {\n+    //~^ ERROR type has conflicting packed and align representation hints\n+    i: i32,\n }\n \n fn main() {}"}, {"sha": "0dfe360dbb3c49fe77b5d9dd920b438833f2e4de", "filename": "src/test/ui/conflicting-repr-hints.stderr", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,70 +1,73 @@\n-warning[E0566]: conflicting representation hints\n-  --> $DIR/conflicting-repr-hints.rs:9:8\n+error[E0566]: conflicting representation hints\n+  --> $DIR/conflicting-repr-hints.rs:13:8\n    |\n LL | #[repr(C, u64)]\n    |        ^  ^^^\n \n-warning[E0566]: conflicting representation hints\n-  --> $DIR/conflicting-repr-hints.rs:12:8\n+error[E0566]: conflicting representation hints\n+  --> $DIR/conflicting-repr-hints.rs:18:8\n    |\n LL | #[repr(u32, u64)]\n    |        ^^^  ^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:19:1\n+  --> $DIR/conflicting-repr-hints.rs:27:1\n    |\n LL | struct F(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:23:1\n+  --> $DIR/conflicting-repr-hints.rs:31:1\n    |\n LL | struct G(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:27:1\n+  --> $DIR/conflicting-repr-hints.rs:35:1\n    |\n LL | struct H(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0634]: type has conflicting packed representation hints\n-  --> $DIR/conflicting-repr-hints.rs:30:1\n+  --> $DIR/conflicting-repr-hints.rs:38:1\n    |\n LL | struct I(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0634]: type has conflicting packed representation hints\n-  --> $DIR/conflicting-repr-hints.rs:34:1\n+  --> $DIR/conflicting-repr-hints.rs:42:1\n    |\n LL | struct J(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:40:1\n+  --> $DIR/conflicting-repr-hints.rs:48:1\n    |\n LL | / union X {\n-LL | |     i: i32\n+LL | |\n+LL | |     i: i32,\n LL | | }\n    | |_^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:46:1\n+  --> $DIR/conflicting-repr-hints.rs:55:1\n    |\n LL | / union Y {\n-LL | |     i: i32\n+LL | |\n+LL | |     i: i32,\n LL | | }\n    | |_^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:52:1\n+  --> $DIR/conflicting-repr-hints.rs:62:1\n    |\n LL | / union Z {\n-LL | |     i: i32\n+LL | |\n+LL | |     i: i32,\n LL | | }\n    | |_^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n \n Some errors have detailed explanations: E0566, E0587.\n For more information about an error, try `rustc --explain E0566`."}, {"sha": "1e4a404fa25a7055bce48dfb142aa1874c4cfc96", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,7 +1,7 @@\n #[repr(simd)] //~ error: SIMD types are experimental\n struct Foo(u64, u64);\n \n-#[repr(C)] //~ warn: conflicting representation hints\n+#[repr(C)] //~ ERROR conflicting representation hints\n #[repr(simd)] //~ error: SIMD types are experimental\n struct Bar(u64, u64);\n "}, {"sha": "37a7bd0b1294dba95665c666dfb2bf954258f8ca", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -16,15 +16,15 @@ LL | #[repr(simd)]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(repr_simd)]` to the crate attributes to enable\n \n-warning[E0566]: conflicting representation hints\n+error[E0566]: conflicting representation hints\n   --> $DIR/feature-gate-repr-simd.rs:4:8\n    |\n LL | #[repr(C)]\n    |        ^\n LL | #[repr(simd)]\n    |        ^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0566, E0658.\n For more information about an error, try `rustc --explain E0566`."}, {"sha": "9864c0840d87859a1535a5d42389b5cab3f6ee51", "filename": "src/test/ui/issues/issue-14221.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fissues%2Fissue-14221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fissues%2Fissue-14221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14221.stderr?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -3,6 +3,8 @@ warning[E0170]: pattern binding `A` is named the same as one of the variants of\n    |\n LL |             A => \"A\",\n    |             ^ help: to match on the variant, qualify the path: `E::A`\n+   |\n+   = note: `#[warn(bindings_with_variant_name)]` on by default\n \n warning[E0170]: pattern binding `B` is named the same as one of the variants of the type `E`\n   --> $DIR/issue-14221.rs:15:13"}, {"sha": "01e5313fcc1d928705318f8bf82bc87e1b826ab8", "filename": "src/test/ui/issues/issue-19100.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fissues%2Fissue-19100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fissues%2Fissue-19100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19100.stderr?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -3,6 +3,8 @@ warning[E0170]: pattern binding `Bar` is named the same as one of the variants o\n    |\n LL | Bar if true\n    | ^^^ help: to match on the variant, qualify the path: `Foo::Bar`\n+   |\n+   = note: `#[warn(bindings_with_variant_name)]` on by default\n \n warning[E0170]: pattern binding `Baz` is named the same as one of the variants of the type `Foo`\n   --> $DIR/issue-19100.rs:22:1"}, {"sha": "ac1b5235f442384ce60e2aa8747c803e17d91d0f", "filename": "src/test/ui/issues/issue-30302.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fissues%2Fissue-30302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fissues%2Fissue-30302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30302.stderr?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -3,6 +3,8 @@ warning[E0170]: pattern binding `Nil` is named the same as one of the variants o\n    |\n LL |         Nil => true,\n    |         ^^^ help: to match on the variant, qualify the path: `Stack::Nil`\n+   |\n+   = note: `#[warn(bindings_with_variant_name)]` on by default\n \n error: unreachable pattern\n   --> $DIR/issue-30302.rs:15:9"}, {"sha": "8cf841f9371215a254302992dcdbd3984431fb0c", "filename": "src/test/ui/issues/issue-39720.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fissues%2Fissue-39720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fissues%2Fissue-39720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39720.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,26 +1,22 @@\n // run-pass\n-#![allow(non_snake_case)]\n-\n // ignore-emscripten FIXME(#45351)\n \n #![feature(repr_simd, platform_intrinsics)]\n \n-#[repr(C)] //~ WARNING conflicting representation hints\n #[repr(simd)]\n #[derive(Copy, Clone, Debug)]\n-pub struct char3(pub i8, pub i8, pub i8);\n+pub struct Char3(pub i8, pub i8, pub i8);\n \n-#[repr(C)]  //~ WARNING conflicting representation hints\n #[repr(simd)]\n #[derive(Copy, Clone, Debug)]\n-pub struct short3(pub i16, pub i16, pub i16);\n+pub struct Short3(pub i16, pub i16, pub i16);\n \n extern \"platform-intrinsic\" {\n     fn simd_cast<T, U>(x: T) -> U;\n }\n \n fn main() {\n-    let cast: short3 = unsafe { simd_cast(char3(10, -3, -9)) };\n+    let cast: Short3 = unsafe { simd_cast(Char3(10, -3, -9)) };\n \n     println!(\"{:?}\", cast);\n }"}, {"sha": "8121ed289404548b9e0acee163fb61107c2fb427", "filename": "src/test/ui/issues/issue-39720.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87540bd3bca8dcd86223261f8c76c5bbf6811ee6/src%2Ftest%2Fui%2Fissues%2Fissue-39720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87540bd3bca8dcd86223261f8c76c5bbf6811ee6/src%2Ftest%2Fui%2Fissues%2Fissue-39720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39720.stderr?ref=87540bd3bca8dcd86223261f8c76c5bbf6811ee6", "patch": "@@ -1,16 +0,0 @@\n-warning[E0566]: conflicting representation hints\n-  --> $DIR/issue-39720.rs:8:8\n-   |\n-LL | #[repr(C)]\n-   |        ^\n-LL | #[repr(simd)]\n-   |        ^^^^\n-\n-warning[E0566]: conflicting representation hints\n-  --> $DIR/issue-39720.rs:13:8\n-   |\n-LL | #[repr(C)]\n-   |        ^\n-LL | #[repr(simd)]\n-   |        ^^^^\n-"}, {"sha": "3258ee92a74222ec60c36dd0d3ed4f30912deb84", "filename": "src/test/ui/issues/issue-47094.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fissues%2Fissue-47094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fissues%2Fissue-47094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47094.rs?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,12 +1,10 @@\n-// check-pass\n-\n-#[repr(C,u8)] //~ WARNING conflicting representation hints\n+#[repr(C, u8)] //~ ERROR conflicting representation hints\n enum Foo {\n     A,\n     B,\n }\n \n-#[repr(C)] //~ WARNING conflicting representation hints\n+#[repr(C)] //~ ERROR conflicting representation hints\n #[repr(u8)]\n enum Bar {\n     A,"}, {"sha": "c807f644fd310371cd1e1cab557d3248635cb0da", "filename": "src/test/ui/issues/issue-47094.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fissues%2Fissue-47094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fissues%2Fissue-47094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47094.stderr?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -1,14 +1,17 @@\n-warning[E0566]: conflicting representation hints\n-  --> $DIR/issue-47094.rs:3:8\n+error[E0566]: conflicting representation hints\n+  --> $DIR/issue-47094.rs:1:8\n    |\n-LL | #[repr(C,u8)]\n-   |        ^ ^^\n+LL | #[repr(C, u8)]\n+   |        ^  ^^\n \n-warning[E0566]: conflicting representation hints\n-  --> $DIR/issue-47094.rs:9:8\n+error[E0566]: conflicting representation hints\n+  --> $DIR/issue-47094.rs:7:8\n    |\n LL | #[repr(C)]\n    |        ^\n LL | #[repr(u8)]\n    |        ^^\n \n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0566`."}, {"sha": "b937832ac622ddf02dc556c83edeba89ba003f99", "filename": "src/test/ui/lint/lint-uppercase-variables.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -3,6 +3,8 @@ warning[E0170]: pattern binding `Foo` is named the same as one of the variants o\n    |\n LL |         Foo => {}\n    |         ^^^ help: to match on the variant, qualify the path: `foo::Foo::Foo`\n+   |\n+   = note: `#[warn(bindings_with_variant_name)]` on by default\n \n warning: unused variable: `Foo`\n   --> $DIR/lint-uppercase-variables.rs:22:9"}, {"sha": "21218d9a17368d915a2ded626e73a59e9bb6df66", "filename": "src/test/ui/pattern/issue-67776-match-same-name-enum-variant-refs.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fpattern%2Fissue-67776-match-same-name-enum-variant-refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed6468da160bd67a2ce0573427f09a98daff8c07/src%2Ftest%2Fui%2Fpattern%2Fissue-67776-match-same-name-enum-variant-refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-67776-match-same-name-enum-variant-refs.stderr?ref=ed6468da160bd67a2ce0573427f09a98daff8c07", "patch": "@@ -3,6 +3,8 @@ warning[E0170]: pattern binding `Bar` is named the same as one of the variants o\n    |\n LL |         Bar => {},\n    |         ^^^ help: to match on the variant, qualify the path: `Foo::Bar`\n+   |\n+   = note: `#[warn(bindings_with_variant_name)]` on by default\n \n warning[E0170]: pattern binding `Baz` is named the same as one of the variants of the type `Foo`\n   --> $DIR/issue-67776-match-same-name-enum-variant-refs.rs:19:9"}]}