{"sha": "ac65350789d7f6be1b1b4942d6a3e0b54e9bca3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNjUzNTA3ODlkN2Y2YmUxYjFiNDk0MmQ2YTNlMGI1NGU5YmNhM2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-09T11:20:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-09T11:42:07Z"}, "message": "adjust default sysroot when being rustc\n\nAlso while at it, refactor how we pass the default Miri flags", "tree": {"sha": "6df198129a9089d357390b275dfb768c396aa040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6df198129a9089d357390b275dfb768c396aa040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac65350789d7f6be1b1b4942d6a3e0b54e9bca3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac65350789d7f6be1b1b4942d6a3e0b54e9bca3c", "html_url": "https://github.com/rust-lang/rust/commit/ac65350789d7f6be1b1b4942d6a3e0b54e9bca3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac65350789d7f6be1b1b4942d6a3e0b54e9bca3c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba801a45dbbc9075f4bf13ee4b6b57c311e331ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba801a45dbbc9075f4bf13ee4b6b57c311e331ff", "html_url": "https://github.com/rust-lang/rust/commit/ba801a45dbbc9075f4bf13ee4b6b57c311e331ff"}], "stats": {"total": 95, "additions": 54, "deletions": 41}, "files": [{"sha": "c9391cec66f0fe6dfadd31a50b94880bebefbdb6", "filename": "src/bin/miri.rs", "status": "modified", "additions": 54, "deletions": 41, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/ac65350789d7f6be1b1b4942d6a3e0b54e9bca3c/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac65350789d7f6be1b1b4942d6a3e0b54e9bca3c/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=ac65350789d7f6be1b1b4942d6a3e0b54e9bca3c", "patch": "@@ -16,7 +16,6 @@ use log::debug;\n use rustc_session::CtfeBacktrace;\n use rustc_driver::Compilation;\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_interface::{interface, Queries};\n use rustc_middle::ty::TyCtxt;\n \n struct MiriCompilerCalls {\n@@ -26,8 +25,8 @@ struct MiriCompilerCalls {\n impl rustc_driver::Callbacks for MiriCompilerCalls {\n     fn after_analysis<'tcx>(\n         &mut self,\n-        compiler: &interface::Compiler,\n-        queries: &'tcx Queries<'tcx>,\n+        compiler: &rustc_interface::interface::Compiler,\n+        queries: &'tcx rustc_interface::Queries<'tcx>,\n     ) -> Compilation {\n         compiler.session().abort_if_errors();\n \n@@ -106,12 +105,12 @@ fn init_late_loggers(tcx: TyCtxt<'_>) {\n fn compile_time_sysroot() -> Option<String> {\n     if option_env!(\"RUSTC_STAGE\").is_some() {\n         // This is being built as part of rustc, and gets shipped with rustup.\n-        // We can rely on the sysroot computation in librustc.\n+        // We can rely on the sysroot computation in librustc_session.\n         return None;\n     }\n     // For builds outside rustc, we need to ensure that we got a sysroot\n-    // that gets used as a default.  The sysroot computation in librustc would\n-    // end up somewhere in the build dir.\n+    // that gets used as a default.  The sysroot computation in librustc_session would\n+    // end up somewhere in the build dir (see `get_or_default_sysroot`).\n     // Taken from PR <https://github.com/Manishearth/rust-clippy/pull/911>.\n     let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n     let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n@@ -123,13 +122,47 @@ fn compile_time_sysroot() -> Option<String> {\n     })\n }\n \n+/// Execute a compiler with the given CLI arguments and callbacks.\n+fn run_compiler(mut args: Vec<String>, callbacks: &mut (dyn rustc_driver::Callbacks + Send)) {\n+    // Make sure we use the right default sysroot. The default sysroot is wrong,\n+    // because `get_or_default_sysroot` in `librustc_session` bases that on `current_exe`.\n+    //\n+    // Make sure we always call `compile_time_sysroot` as that also does some sanity-checks\n+    // of the environment we were built in.\n+    // FIXME: Ideally we'd turn a bad build env into a compile-time error via CTFE or so.\n+    if let Some(sysroot) = compile_time_sysroot() {\n+        let sysroot_flag = \"--sysroot\";\n+        if !args.iter().any(|e| e == sysroot_flag) {\n+            // We need to overwrite the default that librustc_session would compute.\n+            args.push(sysroot_flag.to_owned());\n+            args.push(sysroot);\n+        }\n+    }\n+\n+    // Invoke compiler, and handle return code.\n+    let result = rustc_driver::catch_fatal_errors(move || {\n+        rustc_driver::run_compiler(&args, callbacks, None, None)\n+    })\n+    .and_then(|result| result);\n+    let exit_code = match result {\n+        Ok(()) => rustc_driver::EXIT_SUCCESS,\n+        Err(_) => rustc_driver::EXIT_FAILURE,\n+    };\n+    std::process::exit(exit_code);\n+}\n+\n fn main() {\n+    rustc_driver::install_ice_hook();\n+\n     // If the environment asks us to actually be rustc, then do that.\n     if env::var_os(\"MIRI_BE_RUSTC\").is_some() {\n-        eprintln!(\"miri-as-rustc called with args: {:?}\", env::args());\n-        return rustc_driver::main();\n+        rustc_driver::init_rustc_env_logger();\n+        // We cannot use `rustc_driver::main` as we need to adjust the CLI arguments.\n+        let mut callbacks = rustc_driver::TimePassesCallbacks::default();\n+        return run_compiler(env::args().collect(), &mut callbacks);\n     }\n \n+    // Init loggers the Miri way.\n     init_early_loggers();\n \n     // Parse our arguments and split them across `rustc` and `miri`.\n@@ -142,16 +175,20 @@ fn main() {\n     let mut tracked_pointer_tag: Option<miri::PtrId> = None;\n     let mut tracked_alloc_id: Option<miri::AllocId> = None;\n     let mut rustc_args = vec![];\n-    let mut miri_args = vec![];\n+    let mut crate_args = vec![];\n     let mut after_dashdash = false;\n     let mut excluded_env_vars = vec![];\n-    for arg in std::env::args() {\n+    for arg in env::args() {\n         if rustc_args.is_empty() {\n-            // Very first arg: for `rustc`.\n+            // Very first arg: binary name.\n             rustc_args.push(arg);\n+            // After this, push Miri default args (before everything else so they can be overwritten).\n+            for arg in miri::miri_default_args().iter() {\n+                rustc_args.push(arg.to_string());\n+            }\n         } else if after_dashdash {\n-            // Everything that comes after are `miri` args.\n-            miri_args.push(arg);\n+            // Everything that comes after `--` is forwarded to the interpreted crate.\n+            crate_args.push(arg);\n         } else {\n             match arg.as_str() {\n                 \"-Zmiri-disable-validation\" => {\n@@ -227,30 +264,15 @@ fn main() {\n                     tracked_alloc_id = Some(miri::AllocId(id));\n                 }\n                 _ => {\n+                    // Forward to rustc.\n                     rustc_args.push(arg);\n                 }\n             }\n         }\n     }\n \n-    // Determine sysroot if needed.  Make sure we always call `compile_time_sysroot`\n-    // as that also does some sanity-checks of the environment we were built in.\n-    // FIXME: Ideally we'd turn a bad build env into a compile-time error, but\n-    // CTFE does not seem powerful enough for that yet.\n-    if let Some(sysroot) = compile_time_sysroot() {\n-        let sysroot_flag = \"--sysroot\";\n-        if !rustc_args.iter().any(|e| e == sysroot_flag) {\n-            // We need to overwrite the default that librustc would compute.\n-            rustc_args.push(sysroot_flag.to_owned());\n-            rustc_args.push(sysroot);\n-        }\n-    }\n-\n-    // Finally, add the default flags all the way in the beginning, but after the binary name.\n-    rustc_args.splice(1..1, miri::miri_default_args().iter().map(ToString::to_string));\n-\n     debug!(\"rustc arguments: {:?}\", rustc_args);\n-    debug!(\"miri arguments: {:?}\", miri_args);\n+    debug!(\"crate arguments: {:?}\", crate_args);\n     let miri_config = miri::MiriConfig {\n         validate,\n         stacked_borrows,\n@@ -259,18 +281,9 @@ fn main() {\n         ignore_leaks,\n         excluded_env_vars,\n         seed,\n-        args: miri_args,\n+        args: crate_args,\n         tracked_pointer_tag,\n         tracked_alloc_id,\n     };\n-    rustc_driver::install_ice_hook();\n-    let result = rustc_driver::catch_fatal_errors(move || {\n-        rustc_driver::run_compiler(&rustc_args, &mut MiriCompilerCalls { miri_config }, None, None)\n-    })\n-    .and_then(|result| result);\n-    let exit_code = match result {\n-        Ok(()) => rustc_driver::EXIT_SUCCESS,\n-        Err(_) => rustc_driver::EXIT_FAILURE,\n-    };\n-    std::process::exit(exit_code);\n+    return run_compiler(rustc_args, &mut MiriCompilerCalls { miri_config });\n }"}]}