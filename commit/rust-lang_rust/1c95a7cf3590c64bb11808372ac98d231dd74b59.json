{"sha": "1c95a7cf3590c64bb11808372ac98d231dd74b59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjOTVhN2NmMzU5MGM2NGJiMTE4MDgzNzJhYzk4ZDIzMWRkNzRiNTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-11-30T09:53:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-30T09:53:48Z"}, "message": "Merge pull request #2251 from LaurentMazare/master\n\nAdd a couple small tests to the match-same-arm lint + fix a small issue in search_same.", "tree": {"sha": "8058a47e962507091c81c2e42909ed1f2625e858", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8058a47e962507091c81c2e42909ed1f2625e858"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c95a7cf3590c64bb11808372ac98d231dd74b59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaH9UsCRBK7hj4Ov3rIwAAdHIIAEb1qWbVYBVGLZ/nQ1YfmB2m\ncyjBqe7VOHMBcg3PJl0/dHc+eMzOWiKsO1L3uuDOj5cdKKDZElVOIWi8gbjJiEVe\nuK/ZkdA5OXShwq93RssE77yfwm866WStrJZRmZ159zT3rymXnGxcvUsa4Qch0kY/\nVkTy5XBJTjMrs3CO3mNysH1S8YlisfPGaaXEWBbnnVC5EQkr360i/Hgg5fwK0pN7\n17h0pgEMGDUxWPjgU0VTErP8k9S2xOH98MOPjwTptb0ASpMqCySRwlRzHGMmIkbP\n4hWo8QMpBqRyihBXVimDE07rchlMA1Lm0lWXnXvkF0nNE753SoLjxmdZ6FsBj9o=\n=Ymkt\n-----END PGP SIGNATURE-----\n", "payload": "tree 8058a47e962507091c81c2e42909ed1f2625e858\nparent 4d9c41f5666d25dd2747ed610bc7d58e8cdea6a5\nparent c3ae2ddeb36d59432e97c07f85ac841abf3483b6\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1512035628 +0100\ncommitter GitHub <noreply@github.com> 1512035628 +0100\n\nMerge pull request #2251 from LaurentMazare/master\n\nAdd a couple small tests to the match-same-arm lint + fix a small issue in search_same."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c95a7cf3590c64bb11808372ac98d231dd74b59", "html_url": "https://github.com/rust-lang/rust/commit/1c95a7cf3590c64bb11808372ac98d231dd74b59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c95a7cf3590c64bb11808372ac98d231dd74b59/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d9c41f5666d25dd2747ed610bc7d58e8cdea6a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d9c41f5666d25dd2747ed610bc7d58e8cdea6a5", "html_url": "https://github.com/rust-lang/rust/commit/4d9c41f5666d25dd2747ed610bc7d58e8cdea6a5"}, {"sha": "c3ae2ddeb36d59432e97c07f85ac841abf3483b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ae2ddeb36d59432e97c07f85ac841abf3483b6", "html_url": "https://github.com/rust-lang/rust/commit/c3ae2ddeb36d59432e97c07f85ac841abf3483b6"}], "stats": {"total": 117, "additions": 102, "deletions": 15}, "files": [{"sha": "69527ba6ff88eb9a3aeedbab2136cc883ceb208b", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c95a7cf3590c64bb11808372ac98d231dd74b59/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c95a7cf3590c64bb11808372ac98d231dd74b59/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=1c95a7cf3590c64bb11808372ac98d231dd74b59", "patch": "@@ -74,9 +74,8 @@ impl PartialEq for Constant {\n                 }\n             },\n             (&Constant::Bool(l), &Constant::Bool(r)) => l == r,\n-            (&Constant::Vec(ref l), &Constant::Vec(ref r)) => l == r,\n+            (&Constant::Vec(ref l), &Constant::Vec(ref r)) | (&Constant::Tuple(ref l), &Constant::Tuple(ref r)) => l == r,\n             (&Constant::Repeat(ref lv, ref ls), &Constant::Repeat(ref rv, ref rs)) => ls == rs && lv == rv,\n-            (&Constant::Tuple(ref l), &Constant::Tuple(ref r)) => l == r,\n             _ => false, // TODO: Are there inter-type equalities?\n         }\n     }"}, {"sha": "5a693ce5524e6a42df12a7e4022ca232761297f6", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1c95a7cf3590c64bb11808372ac98d231dd74b59/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c95a7cf3590c64bb11808372ac98d231dd74b59/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=1c95a7cf3590c64bb11808372ac98d231dd74b59", "patch": "@@ -203,14 +203,10 @@ fn lint_match_arms(cx: &LateContext, expr: &Expr) {\n                     db.span_note(i.body.span, \"same as this\");\n \n                     // Note: this does not use `span_suggestion` on purpose: there is no clean way\n-                    // to\n-                    // remove the other arm. Building a span and suggest to replace it to \"\" makes\n-                    // an\n-                    // even more confusing error message. Also in order not to make up a span for\n-                    // the\n-                    // whole pattern, the suggestion is only shown when there is only one pattern.\n-                    // The\n-                    // user should know about `|` if they are already using it\u2026\n+                    // to remove the other arm. Building a span and suggest to replace it to \"\"\n+                    // makes an even more confusing error message. Also in order not to make up a\n+                    // span for the whole pattern, the suggestion is only shown when there is only\n+                    // one pattern. The user should know about `|` if they are already using it\u2026\n \n                     if i.pats.len() == 1 && j.pats.len() == 1 {\n                         let lhs = snippet(cx, i.pats[0].span, \"<pat1>\");\n@@ -329,10 +325,13 @@ where\n \n     for expr in exprs {\n         match map.entry(hash(expr)) {\n-            Entry::Occupied(o) => for o in o.get() {\n-                if eq(o, expr) {\n-                    return Some((o, expr));\n+            Entry::Occupied(mut o) => {\n+                for o in o.get() {\n+                    if eq(o, expr) {\n+                        return Some((o, expr));\n+                    }\n                 }\n+                o.get_mut().push(expr);\n             },\n             Entry::Vacant(v) => {\n                 v.insert(vec![expr]);"}, {"sha": "ea8ecb91d0a630f0e3ea5228a15f37b216e9d2ed", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c95a7cf3590c64bb11808372ac98d231dd74b59/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c95a7cf3590c64bb11808372ac98d231dd74b59/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=1c95a7cf3590c64bb11808372ac98d231dd74b59", "patch": "@@ -206,8 +206,7 @@ fn check_doc<'a, Events: Iterator<Item = (usize, pulldown_cmark::Event<'a>)>>(\n             End(Link(_, _)) => in_link = None,\n             Start(_tag) | End(_tag) => (),         // We don't care about other tags\n             Html(_html) | InlineHtml(_html) => (), // HTML is weird, just ignore it\n-            SoftBreak => (),\n-            HardBreak => (),\n+            SoftBreak | HardBreak => (),\n             FootnoteReference(text) | Text(text) => {\n                 if Some(&text) == in_link.as_ref() {\n                     // Probably a link of the form `<http://example.com>`"}, {"sha": "352749d48e13f82360e8fb68122b3e3dbec77e11", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1c95a7cf3590c64bb11808372ac98d231dd74b59/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c95a7cf3590c64bb11808372ac98d231dd74b59/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=1c95a7cf3590c64bb11808372ac98d231dd74b59", "patch": "@@ -277,6 +277,42 @@ fn match_wild_err_arm() {\n         Ok(_) => println!(\"ok\"),\n         Err(_) => {unreachable!();}\n     }\n+\n+    // no warning because of the guard\n+    match x {\n+        Ok(x) if x*x == 64 => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => println!(\"err\")\n+    }\n+\n+    // this is a current false positive, see #1996\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(x) if x*x == 64 => println!(\"ok 64\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => println!(\"err\")\n+    }\n+\n+    match (x, Some(1i32)) {\n+        (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+        (Ok(_), Some(x)) => println!(\"ok {}\", x),\n+        _ => println!(\"err\")\n+    }\n+\n+    // no warning because of the different types for x\n+    match (x, Some(1.0f64)) {\n+        (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+        (Ok(_), Some(x)) => println!(\"ok {}\", x),\n+        _ => println!(\"err\")\n+    }\n+\n+    // because of a bug, no warning was generated for this case before #2251\n+    match x {\n+        Ok(_tmp) => println!(\"ok\"),\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {unreachable!();}\n+    }\n }\n \n fn main() {"}, {"sha": "beb3387d0380de0a923ad82acb9d542d01723869", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1c95a7cf3590c64bb11808372ac98d231dd74b59/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c95a7cf3590c64bb11808372ac98d231dd74b59/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=1c95a7cf3590c64bb11808372ac98d231dd74b59", "patch": "@@ -390,3 +390,57 @@ note: consider refactoring into `Ok(3) | Ok(_)`\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n+error: this `match` has identical arm bodies\n+   --> $DIR/matches.rs:292:18\n+    |\n+292 |         Ok(_) => println!(\"ok\"),\n+    |                  ^^^^^^^^^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/matches.rs:290:18\n+    |\n+290 |         Ok(3) => println!(\"ok\"),\n+    |                  ^^^^^^^^^^^^^^\n+note: consider refactoring into `Ok(3) | Ok(_)`\n+   --> $DIR/matches.rs:290:18\n+    |\n+290 |         Ok(3) => println!(\"ok\"),\n+    |                  ^^^^^^^^^^^^^^\n+    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/matches.rs:298:29\n+    |\n+298 |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n+    |                             ^^^^^^^^^^^^^^^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/matches.rs:297:29\n+    |\n+297 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+    |                             ^^^^^^^^^^^^^^^^^^^^\n+note: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n+   --> $DIR/matches.rs:297:29\n+    |\n+297 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+    |                             ^^^^^^^^^^^^^^^^^^^^\n+    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/matches.rs:313:18\n+    |\n+313 |         Ok(_) => println!(\"ok\"),\n+    |                  ^^^^^^^^^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/matches.rs:312:18\n+    |\n+312 |         Ok(3) => println!(\"ok\"),\n+    |                  ^^^^^^^^^^^^^^\n+note: consider refactoring into `Ok(3) | Ok(_)`\n+   --> $DIR/matches.rs:312:18\n+    |\n+312 |         Ok(3) => println!(\"ok\"),\n+    |                  ^^^^^^^^^^^^^^\n+    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+"}]}