{"sha": "d8a3e51a5f4d6dcb8da269470061bfbb6b50e81f", "node_id": "C_kwDOAAsO6NoAKGQ4YTNlNTFhNWY0ZDZkY2I4ZGEyNjk0NzAwNjFiZmJiNmI1MGU4MWY", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-10T18:24:36Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-14T01:32:10Z"}, "message": "added tests for multiple fields", "tree": {"sha": "aed812900cb901b9ad73b3334168ed2f0e9e429c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aed812900cb901b9ad73b3334168ed2f0e9e429c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8a3e51a5f4d6dcb8da269470061bfbb6b50e81f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHg0poACgkQeO9fUvOM\nSb1tiAv/Q8QwvTNiyaabCJEP2Vn50BaL+oVMZcEIx7XjA/WNadTCbDhE31h4F7X9\nS/rnWCfer2EM5LfeOCYKr9xMieP6m7GXAh00NwfA3/8JT+8arzVm63k/8l173pSt\nCZwScIiI8l+dijIlbxu+f6bM0AXZfH/p/vBt9I8WQttSpqZ5v/jXy4Sxsim1aIJF\ncDggHNOgtTxlJyx0mHFkT4pLFHpZlqj2UgKYWvX5ZG4mrHsox8pxuAoO2m8aJrbu\nqbjKhBHoLInwLr+FJj0ZWso1Rx6ILWYvvV7Dh6YY7q8ZO0D1x+lyyX6bMVrGuwYV\nqWk8LPMElbItex5TpG1em5kYgZt7Chi4QQpA6UrLl7oAOplb6uBAiqrJIr7FXi4U\nz2VvWBkHElhzosKLpY5f2zg0X2WMrHF2+0jGrs9TuuWJCpwVx9TNIgUDDH0Gl5Wl\n4+8rQtzg5Z5/5vo2iJDQ4H0ymiuS+v135Nd8Zy1UH/aJSjy7ceF0rbTW7ogGHiFO\nqXRCgskw\n=Ui+q\n-----END PGP SIGNATURE-----", "payload": "tree aed812900cb901b9ad73b3334168ed2f0e9e429c\nparent 9252c76255bb6996f8d0100fbccb095633640ae6\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1641839076 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1642123930 +0000\n\nadded tests for multiple fields\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a3e51a5f4d6dcb8da269470061bfbb6b50e81f", "html_url": "https://github.com/rust-lang/rust/commit/d8a3e51a5f4d6dcb8da269470061bfbb6b50e81f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8a3e51a5f4d6dcb8da269470061bfbb6b50e81f/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9252c76255bb6996f8d0100fbccb095633640ae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9252c76255bb6996f8d0100fbccb095633640ae6", "html_url": "https://github.com/rust-lang/rust/commit/9252c76255bb6996f8d0100fbccb095633640ae6"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "5b0a66529ee74c127bc6fb3f93e6f8805000e39d", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d8a3e51a5f4d6dcb8da269470061bfbb6b50e81f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a3e51a5f4d6dcb8da269470061bfbb6b50e81f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=d8a3e51a5f4d6dcb8da269470061bfbb6b50e81f", "patch": "@@ -1,6 +1,6 @@\n-use std::iter::successors;\n use hir::TypeInfo;\n use itertools::Itertools;\n+use std::iter::successors;\n use syntax::{\n     algo::neighbor,\n     ast::{self, AstNode},\n@@ -57,7 +57,9 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n                 for i in 0..arm_types.len() {\n                     let other_arm_type = &arm_types[i].as_ref();\n                     let current_arm_type = current_arm_types[i].as_ref();\n-                    if let (Some(other_arm_type), Some(current_arm_type)) = (other_arm_type, current_arm_type) {\n+                    if let (Some(other_arm_type), Some(current_arm_type)) =\n+                        (other_arm_type, current_arm_type)\n+                    {\n                         return &other_arm_type.original == &current_arm_type.original;\n                     }\n                 }\n@@ -289,11 +291,41 @@ fn func() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn merge_match_arms_different_type_multiple_fields() {\n+        check_assist_not_applicable(\n+            merge_match_arms,\n+            r#\"//- minicore: result\n+fn func() {\n+    match Result::<(f64, f64), (f32, f32)>::Ok((0f64, 0f64)) {\n+        Ok(x) => $0x.1.classify(),\n+        Err(x) => x.1.classify()\n+    };\n }\n+\"#,\n+        );\n+    }\n \n-// fn func() {\n-//     match Result::<f64, f32>::Ok(0f64) {\n-//         Ok(x) => x.classify(),\n-//         Err(x) => x.classify()\n-//     };\n-// }\n+    #[test]\n+    fn merge_match_arms_same_type_multiple_fields() {\n+        check_assist(\n+            merge_match_arms,\n+            r#\"//- minicore: result\n+fn func() {\n+    match Result::<(f64, f64), (f64, f64)>::Ok((0f64, 0f64)) {\n+        Ok(x) => $0x.1.classify(),\n+        Err(x) => x.1.classify()\n+    };\n+}\n+\"#,\n+            r#\"\n+fn func() {\n+    match Result::<(f64, f64), (f64, f64)>::Ok((0f64, 0f64)) {\n+        Ok(x) | Err(x) => x.1.classify(),\n+    };\n+}\n+\"#,\n+        );\n+    }\n+}"}]}