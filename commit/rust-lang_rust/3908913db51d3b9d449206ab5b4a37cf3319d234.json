{"sha": "3908913db51d3b9d449206ab5b4a37cf3319d234", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MDg5MTNkYjUxZDNiOWQ0NDkyMDZhYjViNGEzN2NmMzMxOWQyMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-23T08:04:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-23T08:04:47Z"}, "message": "Auto merge of #34253 - jseyfried:improve_multi_modifiers, r=nrc\n\nAllow `MultiItemModifier`s to expand into zero or many items\n\nFixes #34223.\nr? @nrc", "tree": {"sha": "288c712fe7f8f933798af3438eaa225a91c6f3e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/288c712fe7f8f933798af3438eaa225a91c6f3e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3908913db51d3b9d449206ab5b4a37cf3319d234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3908913db51d3b9d449206ab5b4a37cf3319d234", "html_url": "https://github.com/rust-lang/rust/commit/3908913db51d3b9d449206ab5b4a37cf3319d234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3908913db51d3b9d449206ab5b4a37cf3319d234/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4960f2f9074d0d0f9de80b39f0b0ded6547e2ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4960f2f9074d0d0f9de80b39f0b0ded6547e2ad8", "html_url": "https://github.com/rust-lang/rust/commit/4960f2f9074d0d0f9de80b39f0b0ded6547e2ad8"}, {"sha": "58372af058c7e4f60dbc6bf9157338ea545e9753", "url": "https://api.github.com/repos/rust-lang/rust/commits/58372af058c7e4f60dbc6bf9157338ea545e9753", "html_url": "https://github.com/rust-lang/rust/commit/58372af058c7e4f60dbc6bf9157338ea545e9753"}], "stats": {"total": 177, "additions": 77, "deletions": 100}, "files": [{"sha": "f2a005573d561bd6d1c3fdc028173cdbbe2dd54e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3908913db51d3b9d449206ab5b4a37cf3319d234/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3908913db51d3b9d449206ab5b4a37cf3319d234/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3908913db51d3b9d449206ab5b4a37cf3319d234", "patch": "@@ -12,6 +12,7 @@ pub use self::SyntaxExtension::*;\n \n use ast;\n use ast::{Name, PatKind};\n+use attr::HasAttrs;\n use codemap;\n use codemap::{CodeMap, Span, ExpnId, ExpnInfo, NO_EXPANSION};\n use errors::DiagnosticBuilder;\n@@ -40,29 +41,31 @@ pub enum Annotatable {\n     ImplItem(P<ast::ImplItem>),\n }\n \n-impl Annotatable {\n-    pub fn attrs(&self) -> &[ast::Attribute] {\n+impl HasAttrs for Annotatable {\n+    fn attrs(&self) -> &[ast::Attribute] {\n         match *self {\n-            Annotatable::Item(ref i) => &i.attrs,\n-            Annotatable::TraitItem(ref ti) => &ti.attrs,\n-            Annotatable::ImplItem(ref ii) => &ii.attrs,\n+            Annotatable::Item(ref item) => &item.attrs,\n+            Annotatable::TraitItem(ref trait_item) => &trait_item.attrs,\n+            Annotatable::ImplItem(ref impl_item) => &impl_item.attrs,\n         }\n     }\n \n-    pub fn fold_attrs(self, attrs: Vec<ast::Attribute>) -> Annotatable {\n+    fn map_attrs<F: FnOnce(Vec<ast::Attribute>) -> Vec<ast::Attribute>>(self, f: F) -> Self {\n         match self {\n-            Annotatable::Item(i) => Annotatable::Item(i.map(|i| ast::Item {\n-                attrs: attrs,\n-                ..i\n-            })),\n-            Annotatable::TraitItem(i) => Annotatable::TraitItem(i.map(|ti| {\n-                ast::TraitItem { attrs: attrs, ..ti }\n-            })),\n-            Annotatable::ImplItem(i) => Annotatable::ImplItem(i.map(|ii| {\n-                ast::ImplItem { attrs: attrs, ..ii }\n-            })),\n+            Annotatable::Item(item) => Annotatable::Item(item.map_attrs(f)),\n+            Annotatable::TraitItem(trait_item) => Annotatable::TraitItem(trait_item.map_attrs(f)),\n+            Annotatable::ImplItem(impl_item) => Annotatable::ImplItem(impl_item.map_attrs(f)),\n         }\n     }\n+}\n+\n+impl Annotatable {\n+    pub fn attrs(&self) -> &[ast::Attribute] {\n+        HasAttrs::attrs(self)\n+    }\n+    pub fn fold_attrs(self, attrs: Vec<ast::Attribute>) -> Annotatable {\n+        self.map_attrs(|_| attrs)\n+    }\n \n     pub fn expect_item(self) -> P<ast::Item> {\n         match self {\n@@ -129,32 +132,34 @@ impl<F> MultiItemDecorator for F\n     }\n }\n \n-// A more flexible ItemKind::Modifier (ItemKind::Modifier should go away, eventually, FIXME).\n-// meta_item is the annotation, item is the item being modified, parent_item\n-// is the impl or trait item is declared in if item is part of such a thing.\n+// `meta_item` is the annotation, and `item` is the item being modified.\n // FIXME Decorators should follow the same pattern too.\n pub trait MultiItemModifier {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               span: Span,\n               meta_item: &ast::MetaItem,\n               item: Annotatable)\n-              -> Annotatable;\n+              -> Vec<Annotatable>;\n }\n \n-impl<F> MultiItemModifier for F\n-    where F: Fn(&mut ExtCtxt,\n-                Span,\n-                &ast::MetaItem,\n-                Annotatable) -> Annotatable\n+impl<F, T> MultiItemModifier for F\n+    where F: Fn(&mut ExtCtxt, Span, &ast::MetaItem, Annotatable) -> T,\n+          T: Into<Vec<Annotatable>>,\n {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               span: Span,\n               meta_item: &ast::MetaItem,\n               item: Annotatable)\n-              -> Annotatable {\n-        (*self)(ecx, span, meta_item, item)\n+              -> Vec<Annotatable> {\n+        (*self)(ecx, span, meta_item, item).into()\n+    }\n+}\n+\n+impl Into<Vec<Annotatable>> for Annotatable {\n+    fn into(self) -> Vec<Annotatable> {\n+        vec![self]\n     }\n }\n "}, {"sha": "5beb49372077e83bc22e3bf71f2a87830a507380", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 34, "deletions": 65, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/3908913db51d3b9d449206ab5b4a37cf3319d234/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3908913db51d3b9d449206ab5b4a37cf3319d234/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3908913db51d3b9d449206ab5b4a37cf3319d234", "patch": "@@ -13,6 +13,7 @@ use ast::{Local, Ident, Mac_, Name, SpannedIdent};\n use ast::{MacStmtStyle, Mrk, Stmt, StmtKind, ItemKind};\n use ast::TokenTree;\n use ast;\n+use attr::HasAttrs;\n use ext::mtwt;\n use ext::build::AstBuilder;\n use attr;\n@@ -724,11 +725,7 @@ impl<'a> Folder for PatIdentRenamer<'a> {\n     }\n }\n \n-fn expand_annotatable(a: Annotatable,\n-                      fld: &mut MacroExpander)\n-                      -> SmallVector<Annotatable> {\n-    let a = expand_item_multi_modifier(a, fld);\n-\n+fn expand_multi_modified(a: Annotatable, fld: &mut MacroExpander) -> SmallVector<Annotatable> {\n     let new_items: SmallVector<Annotatable> = match a {\n         Annotatable::Item(it) => match it.node {\n             ast::ItemKind::Mac(..) => {\n@@ -796,29 +793,6 @@ fn decorate(a: Annotatable, fld: &mut MacroExpander) -> SmallVector<Annotatable>\n     new_items\n }\n \n-// Partition a set of attributes into one kind of attribute, and other kinds.\n-macro_rules! partition {\n-    ($fn_name: ident, $variant: ident) => {\n-        #[allow(deprecated)] // The `allow` is needed because the `Modifier` variant might be used.\n-        fn $fn_name(attrs: &[ast::Attribute],\n-                    fld: &MacroExpander)\n-                     -> (Vec<ast::Attribute>, Vec<ast::Attribute>) {\n-            attrs.iter().cloned().partition(|attr| {\n-                match fld.cx.syntax_env.find(intern(&attr.name())) {\n-                    Some(rc) => match *rc {\n-                        $variant(..) => true,\n-                        _ => false\n-                    },\n-                    _ => false\n-                }\n-            })\n-        }\n-    }\n-}\n-\n-partition!(multi_modifiers, MultiModifier);\n-\n-\n fn expand_decorators(a: Annotatable,\n                      fld: &mut MacroExpander,\n                      decorator_items: &mut SmallVector<Annotatable>,\n@@ -864,46 +838,41 @@ fn expand_decorators(a: Annotatable,\n     }\n }\n \n-fn expand_item_multi_modifier(mut it: Annotatable,\n-                              fld: &mut MacroExpander)\n-                              -> Annotatable {\n-    let (modifiers, other_attrs) = multi_modifiers(it.attrs(), fld);\n-\n-    // Update the attrs, leave everything else alone. Is this mutation really a good idea?\n-    it = it.fold_attrs(other_attrs);\n-\n-    if modifiers.is_empty() {\n-        return it\n-    }\n-\n-    for attr in &modifiers {\n-        let mname = intern(&attr.name());\n-\n-        match fld.cx.syntax_env.find(mname) {\n-            Some(rc) => match *rc {\n-                MultiModifier(ref mac) => {\n-                    attr::mark_used(attr);\n-                    fld.cx.bt_push(ExpnInfo {\n-                        call_site: attr.span,\n-                        callee: NameAndSpan {\n-                            format: MacroAttribute(mname),\n-                            span: Some(attr.span),\n-                            // attributes can do whatever they like,\n-                            // for now\n-                            allow_internal_unstable: true,\n-                        }\n-                    });\n-                    it = mac.expand(fld.cx, attr.span, &attr.node.value, it);\n-                    fld.cx.bt_pop();\n+fn expand_annotatable(mut item: Annotatable, fld: &mut MacroExpander) -> SmallVector<Annotatable> {\n+    let mut multi_modifier = None;\n+    item = item.map_attrs(|mut attrs| {\n+        for i in 0..attrs.len() {\n+            if let Some(extension) = fld.cx.syntax_env.find(intern(&attrs[i].name())) {\n+                if let MultiModifier(..) = *extension {\n+                    multi_modifier = Some((attrs.remove(i), extension));\n+                    break;\n                 }\n-                _ => unreachable!()\n-            },\n-            _ => unreachable!()\n+            }\n         }\n-    }\n+        attrs\n+    });\n \n-    // Expansion may have added new ItemKind::Modifiers.\n-    expand_item_multi_modifier(it, fld)\n+    match multi_modifier {\n+        None => expand_multi_modified(item, fld),\n+        Some((attr, extension)) => match *extension {\n+            MultiModifier(ref mac) => {\n+                attr::mark_used(&attr);\n+                fld.cx.bt_push(ExpnInfo {\n+                    call_site: attr.span,\n+                    callee: NameAndSpan {\n+                        format: MacroAttribute(intern(&attr.name())),\n+                        span: Some(attr.span),\n+                        // attributes can do whatever they like, for now\n+                        allow_internal_unstable: true,\n+                    }\n+                });\n+                let modified = mac.expand(fld.cx, attr.span, &attr.node.value, item);\n+                fld.cx.bt_pop();\n+                modified.into_iter().flat_map(|it| expand_annotatable(it, fld)).collect()\n+            }\n+            _ => unreachable!(),\n+        }\n+    }\n }\n \n fn expand_impl_item(ii: ast::ImplItem, fld: &mut MacroExpander)"}, {"sha": "a22c3ba48492618347b1c04938f708635e118a3b", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3908913db51d3b9d449206ab5b4a37cf3319d234/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3908913db51d3b9d449206ab5b4a37cf3319d234/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=3908913db51d3b9d449206ab5b4a37cf3319d234", "patch": "@@ -62,15 +62,16 @@ fn expand_identity(cx: &mut ExtCtxt, _span: Span, tts: &[TokenTree])\n fn expand_into_foo_multi(cx: &mut ExtCtxt,\n                          sp: Span,\n                          attr: &MetaItem,\n-                         it: Annotatable) -> Annotatable {\n+                         it: Annotatable) -> Vec<Annotatable> {\n     match it {\n-        Annotatable::Item(it) => {\n+        Annotatable::Item(it) => vec![\n             Annotatable::Item(P(Item {\n                 attrs: it.attrs.clone(),\n                 ..(*quote_item!(cx, enum Foo2 { Bar2, Baz2 }).unwrap()).clone()\n-            }))\n-        }\n-        Annotatable::ImplItem(it) => {\n+            })),\n+            Annotatable::Item(quote_item!(cx, enum Foo3 { Bar }).unwrap()),\n+        ],\n+        Annotatable::ImplItem(it) => vec![\n             quote_item!(cx, impl X { fn foo(&self) -> i32 { 42 } }).unwrap().and_then(|i| {\n                 match i.node {\n                     ItemKind::Impl(_, _, _, _, _, mut items) => {\n@@ -79,8 +80,8 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n                     _ => unreachable!(\"impl parsed to something other than impl\")\n                 }\n             })\n-        }\n-        Annotatable::TraitItem(it) => {\n+        ],\n+        Annotatable::TraitItem(it) => vec![\n             quote_item!(cx, trait X { fn foo(&self) -> i32 { 0 } }).unwrap().and_then(|i| {\n                 match i.node {\n                     ItemKind::Trait(_, _, _, mut items) => {\n@@ -89,7 +90,7 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n                     _ => unreachable!(\"trait parsed to something other than trait\")\n                 }\n             })\n-        }\n+        ],\n     }\n }\n "}, {"sha": "d17adff007c6335b440c4c42063a753f99f2c91c", "filename": "src/test/run-pass-fulldeps/macro-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3908913db51d3b9d449206ab5b4a37cf3319d234/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3908913db51d3b9d449206ab5b4a37cf3319d234/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs?ref=3908913db51d3b9d449206ab5b4a37cf3319d234", "patch": "@@ -40,6 +40,8 @@ pub fn main() {\n     assert_eq!(Foo2::Bar2, Foo2::Bar2);\n     test(None::<Foo2>);\n \n+    let _ = Foo3::Bar;\n+\n     let x = 10i32;\n     assert_eq!(x.foo(), 42);\n     let x = 10u8;"}]}