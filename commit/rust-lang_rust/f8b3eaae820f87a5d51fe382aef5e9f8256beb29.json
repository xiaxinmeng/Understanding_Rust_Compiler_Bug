{"sha": "f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YjNlYWFlODIwZjg3YTVkNTFmZTM4MmFlZjVlOWY4MjU2YmViMjk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-11T01:28:00Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-11T01:28:47Z"}, "message": "Make all moves explicit in libsyntax", "tree": {"sha": "e3a4c5aa467410f26eb249d26aaa8899383d3b3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3a4c5aa467410f26eb249d26aaa8899383d3b3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "html_url": "https://github.com/rust-lang/rust/commit/f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6957af770bb92b71485f852beb9071733e5f178b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6957af770bb92b71485f852beb9071733e5f178b", "html_url": "https://github.com/rust-lang/rust/commit/6957af770bb92b71485f852beb9071733e5f178b"}], "stats": {"total": 81, "additions": 42, "deletions": 39}, "files": [{"sha": "cd22b2c5c04e7f077883a9cc79cbb9ab146911a7", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -181,7 +181,7 @@ mod ct {\n             let rest = copy next.flags;\n             let j = next.next;\n             let curr: ~[flag] = ~[f];\n-            return {flags: vec::append(curr, rest), next: j};\n+            return {flags: vec::append(move curr, rest), next: j};\n         }\n         let more = |x, copy s| more_(x, copy s, i, lim);\n         let f = s[i];\n@@ -195,7 +195,7 @@ mod ct {\n                 more(flag_sign_always)\n             } else if f == '#' as u8 {\n                 more(flag_alternate)\n-            } else { {flags: noflags, next: i} };\n+            } else { {flags: move noflags, next: i} };\n     }\n     fn parse_count(s: ~str, i: uint, lim: uint)\n         -> {count: count, next: uint} {"}, {"sha": "354bb686fef622c62b5d8187b53cd7176fd1cd09", "filename": "src/libcore/mutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibcore%2Fmutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibcore%2Fmutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmutable.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -34,7 +34,7 @@ fn unwrap<T>(+m: Mut<T>) -> T {\n     // Borrowck should prevent us from calling unwrap while the value\n     // is in use, as that would be a move from a borrowed value.\n     assert (m.mode as uint) == (ReadOnly as uint);\n-    let Data {value, mode: _} = m;\n+    let Data {value, mode: _} <- m;\n     return move value;\n }\n "}, {"sha": "b9fed4b46aa7b8a3243dcc95bf7cb82ce92a1e2e", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -2,15 +2,15 @@ use codemap::span;\n use ast::*;\n \n pure fn spanned<T>(lo: uint, hi: uint, +t: T) -> spanned<T> {\n-    respan(mk_sp(lo, hi), t)\n+    respan(mk_sp(lo, hi), move t)\n }\n \n pure fn respan<T>(sp: span, +t: T) -> spanned<T> {\n-    {node: t, span: sp}\n+    {node: move t, span: sp}\n }\n \n pure fn dummy_spanned<T>(+t: T) -> spanned<T> {\n-    respan(dummy_sp(), t)\n+    respan(dummy_sp(), move t)\n }\n \n /* assuming that we're not in macro expansion */"}, {"sha": "d6a08fe1aa4520ac4b1a707841763f8eef245386", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -282,7 +282,7 @@ fn sort_meta_items(+items: ~[@ast::meta_item]) -> ~[@ast::meta_item] {\n     // This is sort of stupid here, converting to a vec of mutables and back\n     let v: ~[mut @ast::meta_item] = vec::to_mut(items);\n     std::sort::quick_sort(lteq, v);\n-    return vec::from_mut(v);\n+    vec::from_mut(move v)\n }\n \n fn remove_meta_items_by_name(items: ~[@ast::meta_item], name: ~str) ->"}, {"sha": "6de6be82ae2bb1f83299c262b2115049c9a5165e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -222,14 +222,14 @@ fn mk_ctxt(parse_sess: parse::parse_sess,\n             self.parse_sess.interner.intern(@st)\n         }\n     }\n-    let imp : ctxt_repr = {\n+    let imp: ctxt_repr = {\n         parse_sess: parse_sess,\n         cfg: cfg,\n         mut backtrace: None,\n         mut mod_path: ~[],\n         mut trace_mac: false\n     };\n-    return imp as ext_ctxt\n+    move (imp as ext_ctxt)\n }\n \n fn expr_to_str(cx: ext_ctxt, expr: @ast::expr, error: ~str) -> ~str {"}, {"sha": "8b17ffc11041562ceee7d99527239e0b1e9b7ae6", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -39,7 +39,7 @@ fn analyze(proto: protocol, _cx: ext_ctxt) {\n         for state.reachable |s| {\n             bv.set(s.id, true);\n         }\n-        bv\n+        move bv\n     };\n \n     let mut i = 0;"}, {"sha": "373f16daeb0e1d38267e2961bcdcd4d94dc8ba25", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -188,7 +188,7 @@ impl protocol {\n             span: self.span,\n             dir: dir,\n             ty_params: ty_params,\n-            messages: messages,\n+            messages: move messages,\n             proto: self\n         });\n "}, {"sha": "08fa427d07859ae18e398c50b3434b32a2e278d6", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -143,7 +143,7 @@ fn pattern_to_selectors(cx: ext_ctxt, e: @expr) -> binders {\n         return Some(leaf(m));\n     }\n     p_t_s_rec(cx, match_expr(e), trivial_selector, res);\n-    return res;\n+    move res\n }\n \n "}, {"sha": "799457381d5f3cf339b21e0e06983adf49a96df6", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -255,8 +255,8 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                                                          sp.hi)));\n                         }\n \n-                        new_pos.idx += 1u;\n-                        vec::push(cur_eis, new_pos);\n+                        new_pos.idx += 1;\n+                        vec::push(cur_eis, move new_pos);\n                     }\n \n                     // can we go around again?\n@@ -266,18 +266,18 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                       Some(t) if idx == len => { // we need a separator\n                         if tok == t { //pass the separator\n                             let ei_t <- ei;\n-                            ei_t.idx += 1u;\n-                            vec::push(next_eis, ei_t);\n+                            ei_t.idx += 1;\n+                            vec::push(next_eis, move ei_t);\n                         }\n                       }\n                       _ => { // we don't need a separator\n                         let ei_t <- ei;\n-                        ei_t.idx = 0u;\n-                        vec::push(cur_eis, ei_t);\n+                        ei_t.idx = 0;\n+                        vec::push(cur_eis, move ei_t);\n                       }\n                     }\n                 } else {\n-                    vec::push(eof_eis, ei);\n+                    vec::push(eof_eis, move ei);\n                 }\n             } else {\n                 match copy ei.elts[idx].node {\n@@ -292,24 +292,27 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                             new_ei.matches[idx].push(@matched_seq(~[], sp));\n                         }\n \n-                        vec::push(cur_eis, new_ei);\n+                        vec::push(cur_eis, move new_ei);\n                     }\n \n                     let matches = vec::map(ei.matches, // fresh, same size:\n                                            |_m| DVec::<@named_match>());\n                     let ei_t <- ei;\n                     vec::push(cur_eis, ~{\n                         elts: matchers, sep: sep, mut idx: 0u,\n-                        mut up: matcher_pos_up(Some(ei_t)),\n-                        matches: matches,\n+                        mut up: matcher_pos_up(Some(move ei_t)),\n+                        matches: move matches,\n                         match_lo: match_idx_lo, match_hi: match_idx_hi,\n                         sp_lo: sp.lo\n                     });\n                   }\n-                  match_nonterminal(_,_,_) => { vec::push(bb_eis, ei) }\n+                  match_nonterminal(_,_,_) => { vec::push(bb_eis, move ei) }\n                   match_tok(t) => {\n                     let ei_t <- ei;\n-                    if t == tok { ei_t.idx += 1u; vec::push(next_eis, ei_t)}\n+                    if t == tok {\n+                        ei_t.idx += 1;\n+                        vec::push(next_eis, move ei_t);\n+                    }\n                   }\n                 }\n             }\n@@ -362,7 +365,7 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                   }\n                   _ => fail\n                 }\n-                vec::push(cur_eis,ei);\n+                vec::push(cur_eis, move ei);\n \n                 /* this would fail if zero-length tokens existed */\n                 while rdr.peek().sp.lo < rust_parser.span.lo {"}, {"sha": "367be53a190c3bc24b4be38e51d12b3fdbc7d7d0", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -157,7 +157,7 @@ fn parse_from_source_str<T>(f: fn (p: parser) -> T,\n     p.abort_if_errors();\n     sess.chpos = rdr.chpos;\n     sess.byte_pos = sess.byte_pos + rdr.pos;\n-    return r;\n+    move r\n }\n \n fn next_node_id(sess: parse_sess) -> node_id {\n@@ -184,7 +184,7 @@ fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n                               +name: ~str, +ss: codemap::file_substr,\n                               source: @~str) -> parser {\n     let (p, _) = new_parser_etc_from_source_str(sess, cfg, name, ss, source);\n-    return p;\n+    move p\n }\n \n \n@@ -208,7 +208,7 @@ fn new_parser_etc_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: &Path,\n                         ftype: parser::file_type) -> parser {\n     let (p, _) = new_parser_etc_from_file(sess, cfg, path, ftype);\n-    return p;\n+    move p\n }\n \n fn new_parser_from_tt(sess: parse_sess, cfg: ast::crate_cfg,"}, {"sha": "6cec730d83dc58abffa1f1fe06b4e85aa04f89fe", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -3578,8 +3578,8 @@ impl parser {\n         }\n \n         {attrs_remaining: attrs,\n-         view_items: vec::from_mut(dvec::unwrap(view_items)),\n-         items: vec::from_mut(dvec::unwrap(items))}\n+         view_items: vec::from_mut(dvec::unwrap(move view_items)),\n+         items: vec::from_mut(dvec::unwrap(move items))}\n     }\n \n     // Parses a source module as a crate"}, {"sha": "6ab936f1448ed636c3c99cd424a8735abac8be09", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -124,7 +124,7 @@ const size_infinity: int = 0xffff;\n fn mk_printer(out: io::Writer, linewidth: uint) -> printer {\n     // Yes 3, it makes the ring buffers big enough to never\n     // fall behind.\n-    let n: uint = 3u * linewidth;\n+    let n: uint = 3 * linewidth;\n     debug!(\"mk_printer %u\", linewidth);\n     let token: ~[mut token] = vec::to_mut(vec::from_elem(n, EOF));\n     let size: ~[mut int] = vec::to_mut(vec::from_elem(n, 0));\n@@ -133,16 +133,16 @@ fn mk_printer(out: io::Writer, linewidth: uint) -> printer {\n                buf_len: n,\n                mut margin: linewidth as int,\n                mut space: linewidth as int,\n-               mut left: 0u,\n-               mut right: 0u,\n-               token: token,\n-               size: size,\n+               mut left: 0,\n+               mut right: 0,\n+               token: move token,\n+               size: move size,\n                mut left_total: 0,\n                mut right_total: 0,\n-               mut scan_stack: scan_stack,\n+               mut scan_stack: move scan_stack,\n                mut scan_stack_empty: true,\n-               mut top: 0u,\n-               mut bottom: 0u,\n+               mut top: 0,\n+               mut bottom: 0,\n                print_stack: DVec(),\n                mut pending_indentation: 0,\n                mut token_tree_last_was_ident: false})"}, {"sha": "1a832bf5af02a7f1c565f111c36a3e6f70c944be", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b3eaae820f87a5d51fe382aef5e9f8256beb29/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "patch": "@@ -16,7 +16,7 @@ fn mk<T:Eq IterBytes Hash Const Copy>() -> interner<T> {\n     let m = map::HashMap::<T, uint>();\n     let hi: hash_interner<T> =\n         {map: m, vect: DVec()};\n-    return hi as interner::<T>;\n+    move (hi as interner::<T>)\n }\n \n fn mk_prefill<T:Eq IterBytes Hash Const Copy>(init: ~[T]) -> interner<T> {"}]}