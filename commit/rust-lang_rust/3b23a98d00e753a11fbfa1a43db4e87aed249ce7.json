{"sha": "3b23a98d00e753a11fbfa1a43db4e87aed249ce7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMjNhOThkMDBlNzUzYTExZmJmYTFhNDNkYjRlODdhZWQyNDljZTc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-13T22:20:51Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-13T22:20:51Z"}, "message": "Support unstable options\n\ncc #1976", "tree": {"sha": "96fb991663490cc2c1e775be28faa23f02fca20d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96fb991663490cc2c1e775be28faa23f02fca20d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b23a98d00e753a11fbfa1a43db4e87aed249ce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b23a98d00e753a11fbfa1a43db4e87aed249ce7", "html_url": "https://github.com/rust-lang/rust/commit/3b23a98d00e753a11fbfa1a43db4e87aed249ce7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b23a98d00e753a11fbfa1a43db4e87aed249ce7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "html_url": "https://github.com/rust-lang/rust/commit/5d9f5aa05a668e7dfef87b46d89dad2884df9d41"}], "stats": {"total": 125, "additions": 64, "deletions": 61}, "files": [{"sha": "1b1c1d412c83ced5949fa33b58adfb5d050581e7", "filename": "src/bin/main.rs", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/3b23a98d00e753a11fbfa1a43db4e87aed249ce7/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b23a98d00e753a11fbfa1a43db4e87aed249ce7/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=3b23a98d00e753a11fbfa1a43db4e87aed249ce7", "patch": "@@ -112,18 +112,6 @@ fn make_opts() -> Options {\n         \"[Path for the configuration file]\",\n     );\n     opts.optopt(\"\", \"emit\", \"What data to emit and how\", WRITE_MODE_LIST);\n-    opts.optflag(\n-        \"\",\n-        \"error-on-unformatted\",\n-        \"Error if unable to get comments or string literals within max_width, \\\n-         or they are left with trailing whitespaces\",\n-    );\n-    opts.optopt(\n-        \"\",\n-        \"file-lines\",\n-        \"Format specified line ranges. Run with `--help file-lines` for more detail.\",\n-        \"JSON\",\n-    );\n     opts.optflagopt(\n         \"h\",\n         \"help\",\n@@ -137,21 +125,48 @@ fn make_opts() -> Options {\n          subset of the current config file used for formatting the current program.\",\n         \"[minimal|default] PATH\",\n     );\n-    opts.optflag(\"\", \"skip-children\", \"Don't reformat child modules\");\n-    opts.optflag(\n-        \"\",\n-        \"unstable-features\",\n-        \"Enables unstable features. Only available on nightly channel\",\n-    );\n     opts.optflag(\"v\", \"verbose\", \"Print verbose output\");\n     opts.optflag(\"q\", \"quiet\", \"Print less output\");\n     opts.optflag(\"V\", \"version\", \"Show version information\");\n \n+    if is_nightly() {\n+        opts.optflag(\n+            \"\",\n+            \"unstable-features\",\n+            \"Enables unstable features. Only available on nightly channel.\",\n+        );\n+        opts.optflag(\n+            \"\",\n+            \"error-on-unformatted\",\n+            \"Error if unable to get comments or string literals within max_width, \\\n+             or they are left with trailing whitespaces (unstable).\",\n+        );\n+        opts.optopt(\n+            \"\",\n+            \"file-lines\",\n+            \"Format specified line ranges. Run with `--help file-lines` for \\\n+             more detail (unstable).\",\n+            \"JSON\",\n+        );\n+        opts.optflag(\n+            \"\",\n+            \"skip-children\",\n+            \"Don't reformat child modules (unstable).\",\n+        );\n+    }\n+\n     opts\n }\n \n+fn is_nightly() -> bool {\n+    option_env!(\"CFG_RELEASE_CHANNEL\")\n+        .map(|c| c == \"nightly\")\n+        .unwrap_or(false)\n+}\n+\n fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n     let matches = opts.parse(env::args().skip(1))?;\n+    let options = CliOptions::from_matches(&matches)?;\n \n     match determine_operation(&matches)? {\n         Operation::Help(HelpOp::None) => {\n@@ -160,7 +175,7 @@ fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n             Ok((WriteMode::None, Summary::default()))\n         }\n         Operation::Help(HelpOp::Config) => {\n-            Config::print_docs(&mut stdout(), matches.opt_present(\"unstable-features\"));\n+            Config::print_docs(&mut stdout(), options.unstable_features);\n             Ok((WriteMode::None, Summary::default()))\n         }\n         Operation::Help(HelpOp::FileLines) => {\n@@ -183,23 +198,18 @@ fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n         }\n         Operation::Stdin { input } => {\n             // try to read config from local directory\n-            let options = CliOptions::from_matches(&matches)?;\n             let (mut config, _) = load_config(Some(Path::new(\".\")), Some(&options))?;\n \n             // write_mode is always Display for Stdin.\n             config.set().write_mode(WriteMode::Display);\n             config.set().verbose(Verbosity::Quiet);\n \n             // parse file_lines\n-            if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n-                config\n-                    .set()\n-                    .file_lines(file_lines.parse().map_err(err_msg)?);\n-                for f in config.file_lines().files() {\n-                    match *f {\n-                        FileName::Custom(ref f) if f == \"stdin\" => {}\n-                        _ => eprintln!(\"Warning: Extra file listed in file_lines option '{}'\", f),\n-                    }\n+            config.set().file_lines(options.file_lines);\n+            for f in config.file_lines().files() {\n+                match *f {\n+                    FileName::Custom(ref f) if f == \"stdin\" => {}\n+                    _ => eprintln!(\"Warning: Extra file listed in file_lines option '{}'\", f),\n                 }\n             }\n \n@@ -216,10 +226,7 @@ fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n         Operation::Format {\n             files,\n             minimal_config_path,\n-        } => {\n-            let options = CliOptions::from_matches(&matches)?;\n-            format(files, minimal_config_path, options)\n-        }\n+        } => format(files, minimal_config_path, options),\n     }\n }\n "}, {"sha": "15915bb99760ee58f48f10cdf8a22a563a00c621", "filename": "src/config/options.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3b23a98d00e753a11fbfa1a43db4e87aed249ce7/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b23a98d00e753a11fbfa1a43db4e87aed249ce7/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=3b23a98d00e753a11fbfa1a43db4e87aed249ce7", "patch": "@@ -327,16 +327,16 @@ impl ::std::str::FromStr for IgnoreList {\n /// Parsed command line options.\n #[derive(Clone, Debug, Default)]\n pub struct CliOptions {\n-    skip_children: Option<bool>,\n-    quiet: bool,\n-    verbose: bool,\n-    pub(super) config_path: Option<PathBuf>,\n-    write_mode: Option<WriteMode>,\n-    check: bool,\n-    color: Option<Color>,\n-    file_lines: FileLines, // Default is all lines in all files.\n-    unstable_features: bool,\n-    error_on_unformatted: Option<bool>,\n+    pub skip_children: Option<bool>,\n+    pub quiet: bool,\n+    pub verbose: bool,\n+    pub config_path: Option<PathBuf>,\n+    pub write_mode: Option<WriteMode>,\n+    pub check: bool,\n+    pub color: Option<Color>,\n+    pub file_lines: FileLines, // Default is all lines in all files.\n+    pub unstable_features: bool,\n+    pub error_on_unformatted: Option<bool>,\n }\n \n impl CliOptions {\n@@ -348,16 +348,23 @@ impl CliOptions {\n             return Err(format_err!(\"Can't use both `--verbose` and `--quiet`\"));\n         }\n \n-        let unstable_features = matches.opt_present(\"unstable-features\");\n         let rust_nightly = option_env!(\"CFG_RELEASE_CHANNEL\")\n             .map(|c| c == \"nightly\")\n             .unwrap_or(false);\n-        if unstable_features && !rust_nightly {\n-            return Err(format_err!(\n-                \"Unstable features are only available on Nightly channel\"\n-            ));\n-        } else {\n-            options.unstable_features = unstable_features;\n+        if rust_nightly {\n+            options.unstable_features = matches.opt_present(\"unstable-features\");\n+        }\n+\n+        if options.unstable_features {\n+            if matches.opt_present(\"skip-children\") {\n+                options.skip_children = Some(true);\n+            }\n+            if matches.opt_present(\"error-on-unformatted\") {\n+                options.error_on_unformatted = Some(true);\n+            }\n+            if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n+                options.file_lines = file_lines.parse().map_err(err_msg)?;\n+            }\n         }\n \n         options.config_path = matches.opt_str(\"config-path\").map(PathBuf::from);\n@@ -389,17 +396,6 @@ impl CliOptions {\n             }\n         }\n \n-        if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n-            options.file_lines = file_lines.parse().map_err(err_msg)?;\n-        }\n-\n-        if matches.opt_present(\"skip-children\") {\n-            options.skip_children = Some(true);\n-        }\n-        if matches.opt_present(\"error-on-unformatted\") {\n-            options.error_on_unformatted = Some(true);\n-        }\n-\n         Ok(options)\n     }\n "}]}