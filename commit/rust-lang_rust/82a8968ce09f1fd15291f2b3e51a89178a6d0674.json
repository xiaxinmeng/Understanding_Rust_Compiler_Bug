{"sha": "82a8968ce09f1fd15291f2b3e51a89178a6d0674", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYTg5NjhjZTA5ZjFmZDE1MjkxZjJiM2U1MWE4OTE3OGE2ZDA2NzQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-01T20:22:44Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-01T20:22:44Z"}, "message": "save-analysis: handle types in turbofish\n\nfixes https://github.com/nrc/rls-analysis/issues/52", "tree": {"sha": "647f33218c86590ad9f2990850258a9b898972d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/647f33218c86590ad9f2990850258a9b898972d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82a8968ce09f1fd15291f2b3e51a89178a6d0674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82a8968ce09f1fd15291f2b3e51a89178a6d0674", "html_url": "https://github.com/rust-lang/rust/commit/82a8968ce09f1fd15291f2b3e51a89178a6d0674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82a8968ce09f1fd15291f2b3e51a89178a6d0674/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d3e441a8c6d24bc61d3deb22a0909401767ada", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d3e441a8c6d24bc61d3deb22a0909401767ada", "html_url": "https://github.com/rust-lang/rust/commit/c1d3e441a8c6d24bc61d3deb22a0909401767ada"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "9a91feb8ebb3aeec43c19eec10165f4a03e33dc4", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/82a8968ce09f1fd15291f2b3e51a89178a6d0674/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a8968ce09f1fd15291f2b3e51a89178a6d0674/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=82a8968ce09f1fd15291f2b3e51a89178a6d0674", "patch": "@@ -775,6 +775,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     }\n \n     fn process_path(&mut self, id: NodeId, path: &'l ast::Path) {\n+        debug!(\"process_path {:?}\", path);\n         let path_data = self.save_ctxt.get_path_data(id, path);\n         if generated_code(path.span) && path_data.is_none() {\n             return;\n@@ -862,14 +863,26 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         walk_list!(self, visit_expr, base);\n     }\n \n-    fn process_method_call(&mut self, ex: &'l ast::Expr, args: &'l [P<ast::Expr>]) {\n+    fn process_method_call(&mut self,\n+                           ex: &'l ast::Expr,\n+                           seg: &'l ast::PathSegment,\n+                           args: &'l [P<ast::Expr>]) {\n         if let Some(mcd) = self.save_ctxt.get_expr_data(ex) {\n             down_cast_data!(mcd, RefData, ex.span);\n             if !generated_code(ex.span) {\n                 self.dumper.dump_ref(mcd);\n             }\n         }\n \n+        // Explicit types in the turbo-fish.\n+        if let Some(ref params) = seg.parameters {\n+            if let ast::PathParameters::AngleBracketed(ref data) = **params {\n+                for t in &data.types {\n+                    self.visit_ty(t);\n+                }\n+            }\n+        }\n+\n         // walk receiver and args\n         walk_list!(self, visit_expr, args);\n     }\n@@ -1330,7 +1343,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 let def = self.save_ctxt.get_path_def(hir_expr.id);\n                 self.process_struct_lit(ex, path, fields, adt.variant_of_def(def), base)\n             }\n-            ast::ExprKind::MethodCall(.., ref args) => self.process_method_call(ex, args),\n+            ast::ExprKind::MethodCall(ref seg, ref args) => self.process_method_call(ex, seg, args),\n             ast::ExprKind::Field(ref sub_ex, _) => {\n                 self.visit_expr(&sub_ex);\n "}]}