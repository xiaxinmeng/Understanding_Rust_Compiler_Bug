{"sha": "710da05af7e4ee13c00b9019752b6076ae6b71b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMGRhMDVhZjdlNGVlMTNjMDBiOTAxOTc1MmI2MDc2YWU2YjcxYjQ=", "commit": {"author": {"name": "Kitsu", "email": "mail@kitsu.me", "date": "2020-04-18T13:16:17Z"}, "committer": {"name": "Kitsu", "email": "mail@kitsu.me", "date": "2020-04-18T13:16:17Z"}, "message": "Dedup file hashing logic with type", "tree": {"sha": "0a757c561c50a89a7f21fca6a21daddc76527e5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a757c561c50a89a7f21fca6a21daddc76527e5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/710da05af7e4ee13c00b9019752b6076ae6b71b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/710da05af7e4ee13c00b9019752b6076ae6b71b4", "html_url": "https://github.com/rust-lang/rust/commit/710da05af7e4ee13c00b9019752b6076ae6b71b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/710da05af7e4ee13c00b9019752b6076ae6b71b4/comments", "author": {"login": "l4l", "id": 5658339, "node_id": "MDQ6VXNlcjU2NTgzMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5658339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l4l", "html_url": "https://github.com/l4l", "followers_url": "https://api.github.com/users/l4l/followers", "following_url": "https://api.github.com/users/l4l/following{/other_user}", "gists_url": "https://api.github.com/users/l4l/gists{/gist_id}", "starred_url": "https://api.github.com/users/l4l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l4l/subscriptions", "organizations_url": "https://api.github.com/users/l4l/orgs", "repos_url": "https://api.github.com/users/l4l/repos", "events_url": "https://api.github.com/users/l4l/events{/privacy}", "received_events_url": "https://api.github.com/users/l4l/received_events", "type": "User", "site_admin": false}, "committer": {"login": "l4l", "id": 5658339, "node_id": "MDQ6VXNlcjU2NTgzMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5658339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l4l", "html_url": "https://github.com/l4l", "followers_url": "https://api.github.com/users/l4l/followers", "following_url": "https://api.github.com/users/l4l/following{/other_user}", "gists_url": "https://api.github.com/users/l4l/gists{/gist_id}", "starred_url": "https://api.github.com/users/l4l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l4l/subscriptions", "organizations_url": "https://api.github.com/users/l4l/orgs", "repos_url": "https://api.github.com/users/l4l/repos", "events_url": "https://api.github.com/users/l4l/events{/privacy}", "received_events_url": "https://api.github.com/users/l4l/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e472531c6bf3bd3b725924918e4dbb49056759f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e472531c6bf3bd3b725924918e4dbb49056759f", "html_url": "https://github.com/rust-lang/rust/commit/1e472531c6bf3bd3b725924918e4dbb49056759f"}], "stats": {"total": 61, "additions": 38, "deletions": 23}, "files": [{"sha": "afef0b8ec2f63450bd6849244dc046fdfc6cb06f", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/710da05af7e4ee13c00b9019752b6076ae6b71b4/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710da05af7e4ee13c00b9019752b6076ae6b71b4/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=710da05af7e4ee13c00b9019752b6076ae6b71b4", "patch": "@@ -1,4 +1,5 @@\n use std::ffi::OsStr;\n+use std::convert::TryFrom;\n use std::path::{Component, Path};\n \n use crate::prelude::*;\n@@ -35,6 +36,33 @@ fn osstr_as_utf8_bytes(path: &OsStr) -> &[u8] {\n     }\n }\n \n+pub(crate) const MD5_LEN: usize = 16;\n+\n+#[derive(Default, Clone, Copy)]\n+pub struct FileHash([u8; MD5_LEN]);\n+\n+impl FileHash {\n+    pub fn inner(self) -> [u8; MD5_LEN] {\n+        self.0\n+    }\n+}\n+\n+pub struct UnsupportedHashType;\n+\n+impl TryFrom<SourceFileHash> for FileHash {\n+    type Error = UnsupportedHashType;\n+\n+    fn try_from(hash: SourceFileHash) -> Result<Self, Self::Error> {\n+        if hash.kind == SourceFileHashAlgorithm::Md5 {\n+            let mut buf = [0u8; MD5_LEN];\n+            buf.copy_from_slice(hash.hash_bytes());\n+            Ok(Self(buf))\n+        } else {\n+            Err(UnsupportedHashType)\n+        }\n+    }\n+}\n+\n fn line_program_add_file(\n     line_program: &mut LineProgram,\n     line_strings: &mut LineStringTable,\n@@ -58,20 +86,13 @@ fn line_program_add_file(\n                 line_strings,\n             );\n \n-            let md5 = Some(file.src_hash)\n-                .filter(|h| matches!(h, SourceFileHash { kind: SourceFileHashAlgorithm::Md5, .. }))\n-                .map(|h| {\n-                    let mut buf = [0u8; super::MD5_LEN];\n-                    buf.copy_from_slice(h.hash_bytes());\n-                    buf\n-                });\n-\n-            line_program.file_has_md5 = md5.is_some();\n+            let file_hash = FileHash::try_from(file.src_hash);\n \n+            line_program.file_has_md5 = file_hash.is_ok();\n             line_program.add_file(file_name, dir_id, Some(FileInfo {\n                 timestamp: 0,\n                 size: 0,\n-                md5: md5.unwrap_or_default(),\n+                md5: file_hash.unwrap_or_default().inner(),\n             }))\n         }\n         // FIXME give more appropriate file names"}, {"sha": "fbf5fa052362ad4c8cd7f222736a80fbc5e472cb", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/710da05af7e4ee13c00b9019752b6076ae6b71b4/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710da05af7e4ee13c00b9019752b6076ae6b71b4/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=710da05af7e4ee13c00b9019752b6076ae6b71b4", "patch": "@@ -1,9 +1,11 @@\n mod emit;\n mod line_info;\n \n+use std::convert::TryFrom;\n+\n use crate::prelude::*;\n \n-use rustc_span::{FileName, SourceFileHash, SourceFileHashAlgorithm};\n+use rustc_span::FileName;\n \n use cranelift_codegen::ir::{StackSlots, ValueLabel, ValueLoc};\n use cranelift_codegen::isa::TargetIsa;\n@@ -26,8 +28,6 @@ fn target_endian(tcx: TyCtxt<'_>) -> RunTimeEndian {\n     }\n }\n \n-const MD5_LEN: usize = 16;\n-\n pub(crate) struct DebugContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n \n@@ -61,19 +61,13 @@ impl<'tcx> DebugContext<'tcx> {\n         // Normally this would use option_env!(\"CFG_VERSION\").\n         let producer = format!(\"cg_clif (rustc {})\", \"unknown version\");\n         let comp_dir = tcx.sess.working_dir.0.to_string_lossy().into_owned();\n-        let (name, md5) = match tcx.sess.local_crate_source_file.clone() {\n+        let (name, file_hash) = match tcx.sess.local_crate_source_file.clone() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();\n                 let hash = tcx.sess\n                     .source_map()\n                     .get_source_file(&FileName::Real(path))\n-                    .map(|f| f.src_hash)\n-                    .filter(|h| matches!(h, SourceFileHash { kind: SourceFileHashAlgorithm::Md5, .. }))\n-                    .map(|h| {\n-                        let mut buf = [0u8; MD5_LEN];\n-                        buf.copy_from_slice(h.hash_bytes());\n-                        buf\n-                    });\n+                    .and_then(|f| line_info::FileHash::try_from(f.src_hash).ok());\n                 (name, hash)\n             },\n             None => (tcx.crate_name(LOCAL_CRATE).to_string(), None),\n@@ -87,10 +81,10 @@ impl<'tcx> DebugContext<'tcx> {\n             Some(FileInfo {\n                 timestamp: 0,\n                 size: 0,\n-                md5: md5.unwrap_or_default(),\n+                md5: file_hash.unwrap_or_default().inner(),\n             }),\n         );\n-        line_program.file_has_md5 = md5.is_some();\n+        line_program.file_has_md5 = file_hash.is_some();\n \n         dwarf.unit.line_program = line_program;\n "}]}