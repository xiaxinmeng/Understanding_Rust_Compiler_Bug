{"sha": "73b0f9dc0461104021a11bdfed0f6f10820a9277", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYjBmOWRjMDQ2MTEwNDAyMWExMWJkZmVkMGY2ZjEwODIwYTkyNzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-15T18:22:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-15T18:22:06Z"}, "message": "internal: remove dead code", "tree": {"sha": "80c1e558feacae9a6216f438e2e7b37403dc4b73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80c1e558feacae9a6216f438e2e7b37403dc4b73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73b0f9dc0461104021a11bdfed0f6f10820a9277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73b0f9dc0461104021a11bdfed0f6f10820a9277", "html_url": "https://github.com/rust-lang/rust/commit/73b0f9dc0461104021a11bdfed0f6f10820a9277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73b0f9dc0461104021a11bdfed0f6f10820a9277/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726a2aa211974a6bb1a612fe8824df7baf59faf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/726a2aa211974a6bb1a612fe8824df7baf59faf6", "html_url": "https://github.com/rust-lang/rust/commit/726a2aa211974a6bb1a612fe8824df7baf59faf6"}], "stats": {"total": 53, "additions": 10, "deletions": 43}, "files": [{"sha": "40dfe6f51172bddc2971ec9b14ff55dca679bde3", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=73b0f9dc0461104021a11bdfed0f6f10820a9277", "patch": "@@ -55,7 +55,7 @@ impl fmt::Display for FlycheckConfig {\n pub struct FlycheckHandle {\n     // XXX: drop order is significant\n     sender: Sender<Restart>,\n-    thread: jod_thread::JoinHandle,\n+    _thread: jod_thread::JoinHandle,\n }\n \n impl FlycheckHandle {\n@@ -71,7 +71,7 @@ impl FlycheckHandle {\n             .name(\"Flycheck\".to_owned())\n             .spawn(move || actor.run(receiver))\n             .expect(\"failed to spawn thread\");\n-        FlycheckHandle { sender, thread }\n+        FlycheckHandle { sender, _thread: thread }\n     }\n \n     /// Schedule a re-start of the cargo check worker."}, {"sha": "960b290e26689759f1ad188179c3c8d3cf79714d", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=73b0f9dc0461104021a11bdfed0f6f10820a9277", "patch": "@@ -43,7 +43,6 @@ pub(crate) struct SourceAnalyzer {\n     body: Option<Arc<Body>>,\n     body_source_map: Option<Arc<BodySourceMap>>,\n     infer: Option<Arc<InferenceResult>>,\n-    scopes: Option<Arc<ExprScopes>>,\n }\n \n impl SourceAnalyzer {\n@@ -65,7 +64,6 @@ impl SourceAnalyzer {\n             body: Some(body),\n             body_source_map: Some(source_map),\n             infer: Some(db.infer(def)),\n-            scopes: Some(scopes),\n             file_id: node.file_id,\n         }\n     }\n@@ -79,7 +77,6 @@ impl SourceAnalyzer {\n             body: None,\n             body_source_map: None,\n             infer: None,\n-            scopes: None,\n             file_id: node.file_id,\n         }\n     }"}, {"sha": "0fcefa69d6a0edd1f552f928abb52ee25d0123ab", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=73b0f9dc0461104021a11bdfed0f6f10820a9277", "patch": "@@ -107,7 +107,6 @@ pub(crate) struct CompletionContext<'a> {\n \n     pub(super) pattern_ctx: Option<PatternContext>,\n     pub(super) path_context: Option<PathCompletionContext>,\n-    pub(super) active_parameter: Option<ActiveParameter>,\n     pub(super) locals: Vec<(String, Local)>,\n \n     pub(super) incomplete_let: bool,\n@@ -170,7 +169,6 @@ impl<'a> CompletionContext<'a> {\n             attribute_under_caret: None,\n             previous_token: None,\n             path_context: None,\n-            active_parameter: ActiveParameter::at(db, position),\n             locals,\n             incomplete_let: false,\n             no_completion_required: false,"}, {"sha": "d5cfd8bba46d49629d7748aa68c2cc72888fb35a", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=73b0f9dc0461104021a11bdfed0f6f10820a9277", "patch": "@@ -26,7 +26,6 @@ pub(crate) fn render_variant(\n #[derive(Debug)]\n struct EnumRender<'a> {\n     ctx: RenderContext<'a>,\n-    name: hir::Name,\n     variant: hir::Variant,\n     path: Option<hir::ModPath>,\n     qualified_name: hir::ModPath,\n@@ -58,7 +57,7 @@ impl<'a> EnumRender<'a> {\n             ),\n         };\n \n-        EnumRender { ctx, name, variant, path, qualified_name, short_qualified_name, variant_kind }\n+        EnumRender { ctx, variant, path, qualified_name, short_qualified_name, variant_kind }\n     }\n     fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n         let mut item = CompletionItem::new("}, {"sha": "3d32fddd9397a1e4524caecfabc9c7e39407fbe7", "filename": "crates/ide_db/src/call_info.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info.rs?ref=73b0f9dc0461104021a11bdfed0f6f10820a9277", "patch": "@@ -154,15 +154,6 @@ pub struct ActiveParameter {\n }\n \n impl ActiveParameter {\n-    pub fn at(db: &RootDatabase, position: FilePosition) -> Option<Self> {\n-        let sema = Semantics::new(db);\n-        let file = sema.parse(position.file_id);\n-        let file = file.syntax();\n-        let token = file.token_at_offset(position.offset).next()?;\n-        let token = sema.descend_into_macros(token);\n-        Self::at_token(&sema, token)\n-    }\n-\n     pub fn at_token(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Option<Self> {\n         let (signature, active_parameter) = call_info_impl(sema, token)?;\n "}, {"sha": "264ea753ef3b59bbd9d5e21f2deb83bbe1f182b5", "filename": "crates/ide_ssr/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fide_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fide_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Flib.rs?ref=73b0f9dc0461104021a11bdfed0f6f10820a9277", "patch": "@@ -103,7 +103,6 @@ pub struct SsrRule {\n \n #[derive(Debug)]\n pub struct SsrPattern {\n-    raw: parsing::RawPattern,\n     parsed_rules: Vec<parsing::ParsedRule>,\n }\n "}, {"sha": "004bbeec5b36abca650c077a3d20b7f03a3d18a3", "filename": "crates/ide_ssr/src/matching.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fide_ssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fide_ssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fmatching.rs?ref=73b0f9dc0461104021a11bdfed0f6f10820a9277", "patch": "@@ -61,9 +61,6 @@ pub struct Match {\n /// Information about a placeholder bound in a match.\n #[derive(Debug)]\n pub(crate) struct PlaceholderMatch {\n-    /// The node that the placeholder matched to. If set, then we'll search for further matches\n-    /// within this node. It isn't set when we match tokens within a macro call's token tree.\n-    pub(crate) node: Option<SyntaxNode>,\n     pub(crate) range: FileRange,\n     /// More matches, found within `node`.\n     pub(crate) inner_matches: SsrMatches,\n@@ -186,7 +183,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n                 self.validate_range(&original_range)?;\n                 matches_out.placeholder_values.insert(\n                     placeholder.ident.clone(),\n-                    PlaceholderMatch::new(Some(code), original_range),\n+                    PlaceholderMatch::from_range(original_range),\n                 );\n             }\n             return Ok(());\n@@ -715,19 +712,14 @@ fn recording_match_fail_reasons() -> bool {\n }\n \n impl PlaceholderMatch {\n-    fn new(node: Option<&SyntaxNode>, range: FileRange) -> Self {\n+    fn from_range(range: FileRange) -> Self {\n         Self {\n-            node: node.cloned(),\n             range,\n             inner_matches: SsrMatches::default(),\n             autoderef_count: 0,\n             autoref_kind: ast::SelfParamKind::Owned,\n         }\n     }\n-\n-    fn from_range(range: FileRange) -> Self {\n-        Self::new(None, range)\n-    }\n }\n \n impl NodeKind {\n@@ -788,7 +780,6 @@ impl PatternIterator {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::{MatchFinder, SsrRule};\n \n     #[test]\n@@ -803,14 +794,6 @@ mod tests {\n         assert_eq!(matches.matches.len(), 1);\n         assert_eq!(matches.matches[0].matched_node.text(), \"foo(1+2)\");\n         assert_eq!(matches.matches[0].placeholder_values.len(), 1);\n-        assert_eq!(\n-            matches.matches[0].placeholder_values[&Var(\"x\".to_string())]\n-                .node\n-                .as_ref()\n-                .unwrap()\n-                .text(),\n-            \"1+2\"\n-        );\n \n         let edits = match_finder.edits();\n         assert_eq!(edits.len(), 1);"}, {"sha": "ed7c033e275b3c9340934de49a2571ccc091a2a5", "filename": "crates/ide_ssr/src/parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fparsing.rs?ref=73b0f9dc0461104021a11bdfed0f6f10820a9277", "patch": "@@ -204,7 +204,7 @@ impl FromStr for SsrPattern {\n     fn from_str(pattern_str: &str) -> Result<SsrPattern, SsrError> {\n         let raw_pattern = pattern_str.parse()?;\n         let parsed_rules = ParsedRule::new(&raw_pattern, None)?;\n-        Ok(SsrPattern { raw: raw_pattern, parsed_rules })\n+        Ok(SsrPattern { parsed_rules })\n     }\n }\n "}, {"sha": "ff4c59447d879e3b9815663554dbfd03b746facd", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=73b0f9dc0461104021a11bdfed0f6f10820a9277", "patch": "@@ -16,7 +16,7 @@ use crate::{\n \n #[derive(Debug)]\n pub(crate) struct ProcMacroProcessSrv {\n-    process: Process,\n+    _process: Process,\n     stdin: ChildStdin,\n     stdout: BufReader<ChildStdout>,\n }\n@@ -29,7 +29,7 @@ impl ProcMacroProcessSrv {\n         let mut process = Process::run(process_path, args)?;\n         let (stdin, stdout) = process.stdio().expect(\"couldn't access child stdio\");\n \n-        let srv = ProcMacroProcessSrv { process, stdin, stdout };\n+        let srv = ProcMacroProcessSrv { _process: process, stdin, stdout };\n \n         Ok(srv)\n     }"}, {"sha": "4fb34aed07a21c6910dfe5ff50d6130c57a1dd73", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b0f9dc0461104021a11bdfed0f6f10820a9277/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=73b0f9dc0461104021a11bdfed0f6f10820a9277", "patch": "@@ -18,7 +18,7 @@ use walkdir::WalkDir;\n pub struct NotifyHandle {\n     // Relative order of fields below is significant.\n     sender: Sender<Message>,\n-    thread: jod_thread::JoinHandle,\n+    _thread: jod_thread::JoinHandle,\n }\n \n #[derive(Debug)]\n@@ -35,7 +35,7 @@ impl loader::Handle for NotifyHandle {\n             .name(\"VfsLoader\".to_owned())\n             .spawn(move || actor.run(receiver))\n             .expect(\"failed to spawn thread\");\n-        NotifyHandle { sender, thread }\n+        NotifyHandle { sender, _thread: thread }\n     }\n     fn set_config(&mut self, config: loader::Config) {\n         self.sender.send(Message::Config(config)).unwrap()"}]}