{"sha": "509cad7f2f8e6c8985b707cab4ab9e1cd78f63c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOWNhZDdmMmY4ZTZjODk4NWI3MDdjYWI0YWI5ZTFjZDc4ZjYzYzg=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2020-08-17T13:41:57Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2020-08-17T13:42:16Z"}, "message": "Switch to intra-doc links for std/src/error.rs", "tree": {"sha": "41d24c67334b683fdfe7deef4c22907f711fbceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41d24c67334b683fdfe7deef4c22907f711fbceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/509cad7f2f8e6c8985b707cab4ab9e1cd78f63c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/509cad7f2f8e6c8985b707cab4ab9e1cd78f63c8", "html_url": "https://github.com/rust-lang/rust/commit/509cad7f2f8e6c8985b707cab4ab9e1cd78f63c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/509cad7f2f8e6c8985b707cab4ab9e1cd78f63c8/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94d7660d59fadf0ec7887e7a82c32bf1d8f84fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/94d7660d59fadf0ec7887e7a82c32bf1d8f84fb4", "html_url": "https://github.com/rust-lang/rust/commit/94d7660d59fadf0ec7887e7a82c32bf1d8f84fb4"}], "stats": {"total": 28, "additions": 3, "deletions": 25}, "files": [{"sha": "1b7681bd4bb1de0cc282b2efdc972b81bb842659", "filename": "library/std/src/error.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/509cad7f2f8e6c8985b707cab4ab9e1cd78f63c8/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509cad7f2f8e6c8985b707cab4ab9e1cd78f63c8/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=509cad7f2f8e6c8985b707cab4ab9e1cd78f63c8", "patch": "@@ -40,10 +40,8 @@ use crate::string;\n /// provide its own errors while also revealing some of the implementation for\n /// debugging via [`source`] chains.\n ///\n-/// [`Result<T, E>`]: ../result/enum.Result.html\n-/// [`Display`]: ../fmt/trait.Display.html\n-/// [`Debug`]: ../fmt/trait.Debug.html\n-/// [`source`]: trait.Error.html#method.source\n+/// [`Result<T, E>`]: Result\n+/// [`source`]: Error::source\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Error: Debug + Display {\n     /// The lower-level source of this error, if any.\n@@ -164,8 +162,6 @@ mod private {\n impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     /// Converts a type of [`Error`] into a box of dyn [`Error`].\n     ///\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -199,8 +195,6 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     /// Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of\n     /// dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -238,8 +232,6 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n impl From<String> for Box<dyn Error + Send + Sync> {\n     /// Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -283,8 +275,6 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n impl From<String> for Box<dyn Error> {\n     /// Converts a [`String`] into a box of dyn [`Error`].\n     ///\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -306,8 +296,6 @@ impl From<String> for Box<dyn Error> {\n impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -329,8 +317,6 @@ impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n impl From<&str> for Box<dyn Error> {\n     /// Converts a [`str`] into a box of dyn [`Error`].\n     ///\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -350,9 +336,6 @@ impl From<&str> for Box<dyn Error> {\n impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n-    /// [`Cow`]: ../borrow/enum.Cow.html\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -374,9 +357,6 @@ impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     /// Converts a [`Cow`] into a box of dyn [`Error`].\n     ///\n-    /// [`Cow`]: ../borrow/enum.Cow.html\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -703,7 +683,7 @@ impl dyn Error {\n     /// assert!(iter.next().is_none());\n     /// ```\n     ///\n-    /// [`source`]: trait.Error.html#method.source\n+    /// [`source`]: Error::source\n     #[unstable(feature = \"error_iter\", issue = \"58520\")]\n     #[inline]\n     pub fn chain(&self) -> Chain<'_> {\n@@ -715,8 +695,6 @@ impl dyn Error {\n ///\n /// If you want to omit the initial error and only process\n /// its sources, use `skip(1)`.\n-///\n-/// [`Error`]: trait.Error.html\n #[unstable(feature = \"error_iter\", issue = \"58520\")]\n #[derive(Clone, Debug)]\n pub struct Chain<'a> {"}]}