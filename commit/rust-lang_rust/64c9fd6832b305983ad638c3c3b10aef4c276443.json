{"sha": "64c9fd6832b305983ad638c3c3b10aef4c276443", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YzlmZDY4MzJiMzA1OTgzYWQ2MzhjM2MzYjEwYWVmNGMyNzY0NDM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-18T16:04:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-18T16:04:25Z"}, "message": "Rollup merge of #44657 - Ixrec:patch-1, r=eddyb\n\nReplace str's transmute() calls with pointer casts\n\nAfter the following conversation in #rust-lang:\n```\n[14:43:50] <Ixrec> TIL the implementation of from_utf_unchecked is literally just \"mem::transmute(x)\"\n[14:43:59] <Ixrec> no wonder people keep saying transmute is overpowered\n[15:15:30] <eddyb> Ixrec: it should be a pointer cast lol\n[15:15:46] <eddyb> unless it doesn't let you\n[16:50:34] <Ixrec> https://play.rust-lang.org/?gist=d1e6b629ad9ec1baf64ce261c63845e6&version=stable seems like it does let me\n[16:52:35] <eddyb> Ixrec: yeah that's the preferred impl\n[16:52:46] <eddyb> Ixrec: it just wasn't in 1.0\n[16:52:50] <eddyb> IIRC\n[16:53:00] <eddyb> (something something fat pointers)\n```\nSince I already wrote half of the preferred impls in the playground, might as well make an actual PR.", "tree": {"sha": "633ca515683c860a67e1aaf373897c16418786b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/633ca515683c860a67e1aaf373897c16418786b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64c9fd6832b305983ad638c3c3b10aef4c276443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64c9fd6832b305983ad638c3c3b10aef4c276443", "html_url": "https://github.com/rust-lang/rust/commit/64c9fd6832b305983ad638c3c3b10aef4c276443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64c9fd6832b305983ad638c3c3b10aef4c276443/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5b0cbbeea9e792ba6bef27927abd2d6566800fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b0cbbeea9e792ba6bef27927abd2d6566800fc", "html_url": "https://github.com/rust-lang/rust/commit/d5b0cbbeea9e792ba6bef27927abd2d6566800fc"}, {"sha": "38fa340ba263612a6f7351d4800d6d4f57ac1cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/38fa340ba263612a6f7351d4800d6d4f57ac1cdf", "html_url": "https://github.com/rust-lang/rust/commit/38fa340ba263612a6f7351d4800d6d4f57ac1cdf"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c24cdb30badaede0a9c14a9d14982815767c2155", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64c9fd6832b305983ad638c3c3b10aef4c276443/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c9fd6832b305983ad638c3c3b10aef4c276443/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=64c9fd6832b305983ad638c3c3b10aef4c276443", "patch": "@@ -403,7 +403,7 @@ unsafe fn from_raw_parts_mut<'a>(p: *mut u8, len: usize) -> &'a mut str {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n-    mem::transmute(v)\n+    &*(v as *const [u8] as *const str)\n }\n \n /// Converts a slice of bytes to a string slice without checking\n@@ -428,7 +428,7 @@ pub unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n #[inline]\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n-    mem::transmute(v)\n+    &mut *(v as *mut [u8] as *mut str)\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2446,12 +2446,12 @@ impl StrExt for str {\n \n     #[inline]\n     fn as_bytes(&self) -> &[u8] {\n-        unsafe { mem::transmute(self) }\n+        unsafe { &*(self as *const str as *const [u8]) }\n     }\n \n     #[inline]\n     unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {\n-        mem::transmute(self)\n+        &mut *(self as *mut str as *mut [u8])\n     }\n \n     fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {"}]}