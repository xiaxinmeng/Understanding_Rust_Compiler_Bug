{"sha": "fbe738345cfe845f0d3b7b0961258187c3d26550", "node_id": "C_kwDOAAsO6NoAKGZiZTczODM0NWNmZTg0NWYwZDNiN2IwOTYxMjU4MTg3YzNkMjY1NTA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-30T19:42:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-30T19:42:19Z"}, "message": "Rollup merge of #109704 - petrochenkov:effvisclean, r=jackh726\n\nresolve: Minor improvements to effective visibilities\n\nSee individual commits.", "tree": {"sha": "e8b42fbfd20007ec81ad43f1c2fed105903ecd79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8b42fbfd20007ec81ad43f1c2fed105903ecd79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe738345cfe845f0d3b7b0961258187c3d26550", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkJeYbCRBK7hj4Ov3rIwAAVoUIAGiOl60fqGs3wxWy5UE1Ehtw\nd4KMB5tV8DpcSLOORB95bUc/NXRvTUxbV8B3f837SP3UeXm/NKeHE9OLNTZSpvfi\nm0nkqdkMl/C6TRLi3hP3iOSaLDnAfMOF6t+LGiXj4I2Lzf+oyfTzS4/3cVOL4P6B\niWY4uA2j8C7f9UDm7jZXdy6kkcYtRorvj2s1SBawpRIC8Qqu8zQJfImRUwyFsk13\n0VHH8GGQ0S0288YmBQEz/dmyONaIxiy15QudSWrEfUIRFt5Bsv04sIUpfEW0iLiK\nS1wZMM4EOeMDvH4JUvXoEUufw01YAt1xwYKtw4/Yd4uNNfOBqsfFmah9oX6a3m0=\n=iZEe\n-----END PGP SIGNATURE-----\n", "payload": "tree e8b42fbfd20007ec81ad43f1c2fed105903ecd79\nparent 1ffb1afea727c7ffc39f60fd00cf69d3dacb4901\nparent b3bfeaf765463ae634fb0658d1eb14d47a63200b\nauthor Michael Goulet <michael@errs.io> 1680205339 -0700\ncommitter GitHub <noreply@github.com> 1680205339 -0700\n\nRollup merge of #109704 - petrochenkov:effvisclean, r=jackh726\n\nresolve: Minor improvements to effective visibilities\n\nSee individual commits.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe738345cfe845f0d3b7b0961258187c3d26550", "html_url": "https://github.com/rust-lang/rust/commit/fbe738345cfe845f0d3b7b0961258187c3d26550", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe738345cfe845f0d3b7b0961258187c3d26550/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ffb1afea727c7ffc39f60fd00cf69d3dacb4901", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffb1afea727c7ffc39f60fd00cf69d3dacb4901", "html_url": "https://github.com/rust-lang/rust/commit/1ffb1afea727c7ffc39f60fd00cf69d3dacb4901"}, {"sha": "b3bfeaf765463ae634fb0658d1eb14d47a63200b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3bfeaf765463ae634fb0658d1eb14d47a63200b", "html_url": "https://github.com/rust-lang/rust/commit/b3bfeaf765463ae634fb0658d1eb14d47a63200b"}], "stats": {"total": 138, "additions": 72, "deletions": 66}, "files": [{"sha": "967fed687b6a8de21f9d27c20d5c695766314fe4", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fbe738345cfe845f0d3b7b0961258187c3d26550/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe738345cfe845f0d3b7b0961258187c3d26550/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=fbe738345cfe845f0d3b7b0961258187c3d26550", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n-use rustc_span::def_id::LocalDefId;\n+use rustc_span::def_id::{LocalDefId, CRATE_DEF_ID};\n use std::hash::Hash;\n \n /// Represents the levels of effective visibility an item can have.\n@@ -107,6 +107,10 @@ impl EffectiveVisibilities {\n         })\n     }\n \n+    pub fn update_root(&mut self) {\n+        self.map.insert(CRATE_DEF_ID, EffectiveVisibility::from_vis(Visibility::Public));\n+    }\n+\n     // FIXME: Share code with `fn update`.\n     pub fn update_eff_vis(\n         &mut self,"}, {"sha": "51a0a3e9a197c5d7998f69385f5bbc93335ad72c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fbe738345cfe845f0d3b7b0961258187c3d26550/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe738345cfe845f0d3b7b0961258187c3d26550/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=fbe738345cfe845f0d3b7b0961258187c3d26550", "patch": "@@ -2149,6 +2149,7 @@ fn effective_visibilities(tcx: TyCtxt<'_>, (): ()) -> &EffectiveVisibilities {\n \n     let mut check_visitor =\n         TestReachabilityVisitor { tcx, effective_visibilities: &visitor.effective_visibilities };\n+    check_visitor.effective_visibility_diagnostic(CRATE_DEF_ID);\n     tcx.hir().visit_all_item_likes_in_crate(&mut check_visitor);\n \n     tcx.arena.alloc(visitor.effective_visibilities)"}, {"sha": "3673f603d16767eae28d95f800c980cb3136fa58", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 29, "deletions": 41, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/fbe738345cfe845f0d3b7b0961258187c3d26550/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe738345cfe845f0d3b7b0961258187c3d26550/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=fbe738345cfe845f0d3b7b0961258187c3d26550", "patch": "@@ -61,7 +61,7 @@ impl Resolver<'_, '_> {\n         // For mod items `nearest_normal_mod` returns its argument, but we actually need its parent.\n         let normal_mod_id = self.nearest_normal_mod(def_id);\n         if normal_mod_id == def_id {\n-            self.tcx.opt_local_parent(def_id).map_or(Visibility::Public, Visibility::Restricted)\n+            Visibility::Restricted(self.tcx.local_parent(def_id))\n         } else {\n             Visibility::Restricted(normal_mod_id)\n         }\n@@ -80,12 +80,11 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n             r,\n             def_effective_visibilities: Default::default(),\n             import_effective_visibilities: Default::default(),\n-            current_private_vis: Visibility::Public,\n+            current_private_vis: Visibility::Restricted(CRATE_DEF_ID),\n             changed: false,\n         };\n \n-        visitor.update(CRATE_DEF_ID, CRATE_DEF_ID);\n-        visitor.current_private_vis = Visibility::Restricted(CRATE_DEF_ID);\n+        visitor.def_effective_visibilities.update_root();\n         visitor.set_bindings_effective_visibilities(CRATE_DEF_ID);\n \n         while visitor.changed {\n@@ -125,43 +124,32 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n \n         for (_, name_resolution) in resolutions.borrow().iter() {\n             if let Some(mut binding) = name_resolution.borrow().binding() {\n-                if !binding.is_ambiguity() {\n-                    // Set the given effective visibility level to `Level::Direct` and\n-                    // sets the rest of the `use` chain to `Level::Reexported` until\n-                    // we hit the actual exported item.\n-                    let mut parent_id = ParentId::Def(module_id);\n-                    while let NameBindingKind::Import { binding: nested_binding, .. } = binding.kind\n-                    {\n-                        let binding_id = ImportId::new_unchecked(binding);\n-                        self.update_import(binding_id, parent_id);\n-\n-                        parent_id = ParentId::Import(binding_id);\n-                        binding = nested_binding;\n-                    }\n-\n-                    if let Some(def_id) = binding.res().opt_def_id().and_then(|id| id.as_local()) {\n-                        self.update_def(def_id, binding.vis.expect_local(), parent_id);\n+                // Set the given effective visibility level to `Level::Direct` and\n+                // sets the rest of the `use` chain to `Level::Reexported` until\n+                // we hit the actual exported item.\n+                //\n+                // If the binding is ambiguous, put the root ambiguity binding and all reexports\n+                // leading to it into the table. They are used by the `ambiguous_glob_reexports`\n+                // lint. For all bindings added to the table this way `is_ambiguity` returns true.\n+                let mut parent_id = ParentId::Def(module_id);\n+                while let NameBindingKind::Import { binding: nested_binding, .. } = binding.kind {\n+                    let binding_id = ImportId::new_unchecked(binding);\n+                    self.update_import(binding_id, parent_id);\n+\n+                    if binding.ambiguity.is_some() {\n+                        // Stop at the root ambiguity, further bindings in the chain should not\n+                        // be reexported because the root ambiguity blocks any access to them.\n+                        // (Those further bindings are most likely not ambiguities themselves.)\n+                        break;\n                     }\n-                } else {\n-                    // Put the root ambiguity binding and all reexports leading to it into the\n-                    // table. They are used by the `ambiguous_glob_reexports` lint. For all\n-                    // bindings added to the table here `is_ambiguity` returns true.\n-                    let mut parent_id = ParentId::Def(module_id);\n-                    while let NameBindingKind::Import { binding: nested_binding, .. } = binding.kind\n-                    {\n-                        let binding_id = ImportId::new_unchecked(binding);\n-                        self.update_import(binding_id, parent_id);\n \n-                        if binding.ambiguity.is_some() {\n-                            // Stop at the root ambiguity, further bindings in the chain should not\n-                            // be reexported because the root ambiguity blocks any access to them.\n-                            // (Those further bindings are most likely not ambiguities themselves.)\n-                            break;\n-                        }\n+                    parent_id = ParentId::Import(binding_id);\n+                    binding = nested_binding;\n+                }\n \n-                        parent_id = ParentId::Import(binding_id);\n-                        binding = nested_binding;\n-                    }\n+                if binding.ambiguity.is_none()\n+                    && let Some(def_id) = binding.res().opt_def_id().and_then(|id| id.as_local()) {\n+                    self.update_def(def_id, binding.vis.expect_local(), parent_id);\n                 }\n             }\n         }\n@@ -213,7 +201,7 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n         );\n     }\n \n-    fn update(&mut self, def_id: LocalDefId, parent_id: LocalDefId) {\n+    fn update_field(&mut self, def_id: LocalDefId, parent_id: LocalDefId) {\n         self.update_def(def_id, self.r.visibilities[&def_id], ParentId::Def(parent_id));\n     }\n }\n@@ -245,14 +233,14 @@ impl<'r, 'ast, 'tcx> Visitor<'ast> for EffectiveVisibilitiesVisitor<'ast, 'r, 't\n                 for variant in variants {\n                     let variant_def_id = self.r.local_def_id(variant.id);\n                     for field in variant.data.fields() {\n-                        self.update(self.r.local_def_id(field.id), variant_def_id);\n+                        self.update_field(self.r.local_def_id(field.id), variant_def_id);\n                     }\n                 }\n             }\n \n             ast::ItemKind::Struct(ref def, _) | ast::ItemKind::Union(ref def, _) => {\n                 for field in def.fields() {\n-                    self.update(self.r.local_def_id(field.id), def_id);\n+                    self.update_field(self.r.local_def_id(field.id), def_id);\n                 }\n             }\n "}, {"sha": "3e9eef462306cb33c0b17e43e8dfcc4d68e360a6", "filename": "tests/ui/privacy/effective_visibilities.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fbe738345cfe845f0d3b7b0961258187c3d26550/tests%2Fui%2Fprivacy%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe738345cfe845f0d3b7b0961258187c3d26550/tests%2Fui%2Fprivacy%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Feffective_visibilities.rs?ref=fbe738345cfe845f0d3b7b0961258187c3d26550", "patch": "@@ -1,3 +1,4 @@\n+#![rustc_effective_visibility] //~ ERROR Direct: pub, Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n #![feature(rustc_attrs)]\n \n #[rustc_effective_visibility]"}, {"sha": "2618fc427e917c5e7e84648ac7e561d24b86ee59", "filename": "tests/ui/privacy/effective_visibilities.stderr", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fbe738345cfe845f0d3b7b0961258187c3d26550/tests%2Fui%2Fprivacy%2Feffective_visibilities.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbe738345cfe845f0d3b7b0961258187c3d26550/tests%2Fui%2Fprivacy%2Feffective_visibilities.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Feffective_visibilities.stderr?ref=fbe738345cfe845f0d3b7b0961258187c3d26550", "patch": "@@ -1,140 +1,152 @@\n+error: Direct: pub, Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n+  --> $DIR/effective_visibilities.rs:1:1\n+   |\n+LL | / #![rustc_effective_visibility]\n+LL | | #![feature(rustc_attrs)]\n+LL | |\n+LL | | #[rustc_effective_visibility]\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n error: Direct: pub(crate), Reexported: pub(crate), Reachable: pub(crate), ReachableThroughImplTrait: pub(crate)\n-  --> $DIR/effective_visibilities.rs:4:1\n+  --> $DIR/effective_visibilities.rs:5:1\n    |\n LL | mod outer {\n    | ^^^^^^^^^\n \n error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:6:5\n+  --> $DIR/effective_visibilities.rs:7:5\n    |\n LL |     pub mod inner1 {\n    |     ^^^^^^^^^^^^^^\n \n error: not in the table\n-  --> $DIR/effective_visibilities.rs:9:9\n+  --> $DIR/effective_visibilities.rs:10:9\n    |\n LL |         extern \"C\" {}\n    |         ^^^^^^^^^^^^^\n \n error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:12:9\n+  --> $DIR/effective_visibilities.rs:13:9\n    |\n LL |         pub trait PubTrait {\n    |         ^^^^^^^^^^^^^^^^^^\n \n error: Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n-  --> $DIR/effective_visibilities.rs:20:9\n+  --> $DIR/effective_visibilities.rs:21:9\n    |\n LL |         struct PrivStruct;\n    |         ^^^^^^^^^^^^^^^^^\n \n error: Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n-  --> $DIR/effective_visibilities.rs:20:9\n+  --> $DIR/effective_visibilities.rs:21:9\n    |\n LL |         struct PrivStruct;\n    |         ^^^^^^^^^^^^^^^^^\n \n error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:24:9\n+  --> $DIR/effective_visibilities.rs:25:9\n    |\n LL |         pub union PubUnion {\n    |         ^^^^^^^^^^^^^^^^^^\n \n error: Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n-  --> $DIR/effective_visibilities.rs:26:13\n+  --> $DIR/effective_visibilities.rs:27:13\n    |\n LL |             a: u8,\n    |             ^^^^^\n \n error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:28:13\n+  --> $DIR/effective_visibilities.rs:29:13\n    |\n LL |             pub b: u8,\n    |             ^^^^^^^^^\n \n error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:32:9\n+  --> $DIR/effective_visibilities.rs:33:9\n    |\n LL |         pub enum Enum {\n    |         ^^^^^^^^^^^^^\n \n error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:34:13\n+  --> $DIR/effective_visibilities.rs:35:13\n    |\n LL |             A(\n    |             ^\n \n error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:34:13\n+  --> $DIR/effective_visibilities.rs:35:13\n    |\n LL |             A(\n    |             ^\n \n error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:37:17\n+  --> $DIR/effective_visibilities.rs:38:17\n    |\n LL |                 PubUnion,\n    |                 ^^^^^^^^\n \n error: not in the table\n-  --> $DIR/effective_visibilities.rs:43:5\n+  --> $DIR/effective_visibilities.rs:44:5\n    |\n LL |     macro_rules! none_macro {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Direct: pub(self), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:49:5\n+  --> $DIR/effective_visibilities.rs:50:5\n    |\n LL |     macro_rules! public_macro {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Direct: pub(crate), Reexported: pub(crate), Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:54:5\n+  --> $DIR/effective_visibilities.rs:55:5\n    |\n LL |     pub struct ReachableStruct {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Direct: pub(crate), Reexported: pub(crate), Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:56:9\n+  --> $DIR/effective_visibilities.rs:57:9\n    |\n LL |         pub a: u8,\n    |         ^^^^^^^^^\n \n error: Direct: pub, Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:61:9\n+  --> $DIR/effective_visibilities.rs:62:9\n    |\n LL | pub use outer::inner1;\n    |         ^^^^^^^^^^^^^\n \n error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:67:5\n+  --> $DIR/effective_visibilities.rs:68:5\n    |\n LL |     pub type HalfPublicImport = u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Direct: pub(crate), Reexported: pub(crate), Reachable: pub(crate), ReachableThroughImplTrait: pub(crate)\n-  --> $DIR/effective_visibilities.rs:70:5\n+  --> $DIR/effective_visibilities.rs:71:5\n    |\n LL |     pub(crate) const HalfPublicImport: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Direct: pub, Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:74:9\n+  --> $DIR/effective_visibilities.rs:75:9\n    |\n LL | pub use half_public_import::HalfPublicImport;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:14:13\n+  --> $DIR/effective_visibilities.rs:15:13\n    |\n LL |             const A: i32;\n    |             ^^^^^^^^^^^^\n \n error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:16:13\n+  --> $DIR/effective_visibilities.rs:17:13\n    |\n LL |             type B;\n    |             ^^^^^^\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 24 previous errors\n "}]}