{"sha": "e854d39929ffe1e9692be23ac8e7edbcf31b0f24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NTRkMzk5MjlmZmUxZTk2OTJiZTIzYWM4ZTdlZGJjZjMxYjBmMjQ=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-08-28T16:33:45Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-09-20T10:42:36Z"}, "message": "don't index trait impls if the trait isn't also documented", "tree": {"sha": "e4e836b1b7048870fa03fb66fa592eb4d56d6d16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e836b1b7048870fa03fb66fa592eb4d56d6d16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e854d39929ffe1e9692be23ac8e7edbcf31b0f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e854d39929ffe1e9692be23ac8e7edbcf31b0f24", "html_url": "https://github.com/rust-lang/rust/commit/e854d39929ffe1e9692be23ac8e7edbcf31b0f24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e854d39929ffe1e9692be23ac8e7edbcf31b0f24/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e70fee0c76422e986514306b3673f79f7e37ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e70fee0c76422e986514306b3673f79f7e37ec7", "html_url": "https://github.com/rust-lang/rust/commit/7e70fee0c76422e986514306b3673f79f7e37ec7"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "ac3dffa3511ae16de86ac198ee32f67367d1b30d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e854d39929ffe1e9692be23ac8e7edbcf31b0f24/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e854d39929ffe1e9692be23ac8e7edbcf31b0f24/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e854d39929ffe1e9692be23ac8e7edbcf31b0f24", "patch": "@@ -337,6 +337,15 @@ pub struct Cache {\n     // and their parent id here and indexes them at the end of crate parsing.\n     orphan_impl_items: Vec<(DefId, clean::Item)>,\n \n+    // Similarly to `orphan_impl_items`, sometimes trait impls are picked up\n+    // even though the trait itself is not exported. This can happen if a trait\n+    // was defined in function/expression scope, since the impl will be picked\n+    // up by `collect-trait-impls` but the trait won't be scraped out in the HIR\n+    // crawl. In order to prevent crashes when looking for spotlight traits or\n+    // when gathering trait documentation on a type, hold impls here while\n+    // folding and add them to the cache later on if we find the trait.\n+    orphan_trait_impls: Vec<(DefId, FxHashSet<DefId>, Impl)>,\n+\n     /// Aliases added through `#[doc(alias = \"...\")]`. Since a few items can have the same alias,\n     /// we need the alias element to have an array of items.\n     aliases: FxHashMap<String, Vec<IndexItem>>,\n@@ -594,6 +603,7 @@ pub fn run(mut krate: clean::Crate,\n         access_levels: krate.access_levels.clone(),\n         crate_version: krate.version.take(),\n         orphan_impl_items: Vec::new(),\n+        orphan_trait_impls: Vec::new(),\n         traits: mem::replace(&mut krate.external_traits, FxHashMap()),\n         deref_trait_did,\n         deref_mut_trait_did,\n@@ -636,6 +646,14 @@ pub fn run(mut krate: clean::Crate,\n     cache.stack.push(krate.name.clone());\n     krate = cache.fold_crate(krate);\n \n+    for (trait_did, dids, impl_) in cache.orphan_trait_impls.drain(..) {\n+        if cache.traits.contains_key(&trait_did) {\n+            for did in dids {\n+                cache.impls.entry(did).or_insert(vec![]).push(impl_.clone());\n+            }\n+        }\n+    }\n+\n     // Build our search index\n     let index = build_index(&krate, &mut cache);\n \n@@ -1224,7 +1242,7 @@ impl<'a> SourceCollector<'a> {\n impl DocFolder for Cache {\n     fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n         if item.def_id.is_local() {\n-            debug!(\"folding item \\\"{:?}\\\", a {}\", item.name, item.type_());\n+            debug!(\"folding {} \\\"{:?}\\\", id {:?}\", item.type_(), item.name, item.def_id);\n         }\n \n         // If this is a stripped module,\n@@ -1457,10 +1475,16 @@ impl DocFolder for Cache {\n                 } else {\n                     unreachable!()\n                 };\n-                for did in dids {\n-                    self.impls.entry(did).or_default().push(Impl {\n-                        impl_item: item.clone(),\n-                    });\n+                let impl_item = Impl {\n+                    impl_item: item,\n+                };\n+                if impl_item.trait_did().map_or(true, |d| self.traits.contains_key(&d)) {\n+                    for did in dids {\n+                        self.impls.entry(did).or_insert(vec![]).push(impl_item.clone());\n+                    }\n+                } else {\n+                    let trait_did = impl_item.trait_did().unwrap();\n+                    self.orphan_trait_impls.push((trait_did, dids, impl_item));\n                 }\n                 None\n             } else {"}, {"sha": "e7bf7fdf3f651ae8d5cd882fda5a7af836c69fb7", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e854d39929ffe1e9692be23ac8e7edbcf31b0f24/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e854d39929ffe1e9692be23ac8e7edbcf31b0f24/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e854d39929ffe1e9692be23ac8e7edbcf31b0f24", "patch": "@@ -24,6 +24,7 @@\n #![feature(ptr_offset_from)]\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n+#![feature(drain_filter)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "ac3be7e61e9a0177ef673d022db54df71378312f", "filename": "src/test/rustdoc/traits-in-bodies-private.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e854d39929ffe1e9692be23ac8e7edbcf31b0f24/src%2Ftest%2Frustdoc%2Ftraits-in-bodies-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e854d39929ffe1e9692be23ac8e7edbcf31b0f24/src%2Ftest%2Frustdoc%2Ftraits-in-bodies-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftraits-in-bodies-private.rs?ref=e854d39929ffe1e9692be23ac8e7edbcf31b0f24", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// when implementing the fix for traits-in-bodies, there was an ICE when documenting private items\n+// and a trait was defined in non-module scope\n+\n+// compile-flags:--document-private-items\n+\n+// @has traits_in_bodies_private/struct.SomeStruct.html\n+// @!has - '//code' 'impl HiddenTrait for SomeStruct'\n+pub struct SomeStruct;\n+\n+fn __implementation_details() {\n+    trait HiddenTrait {}\n+    impl HiddenTrait for SomeStruct {}\n+}"}]}