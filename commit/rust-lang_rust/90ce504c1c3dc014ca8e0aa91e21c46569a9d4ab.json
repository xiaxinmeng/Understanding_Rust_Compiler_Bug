{"sha": "90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwY2U1MDRjMWMzZGMwMTRjYThlMGFhOTFlMjFjNDY1NjlhOWQ0YWI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-29T05:29:01Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-02T00:35:16Z"}, "message": "Address comments.", "tree": {"sha": "62a7ea89dcb81864fbec2aa7f73640a3938ce956", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62a7ea89dcb81864fbec2aa7f73640a3938ce956"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab", "html_url": "https://github.com/rust-lang/rust/commit/90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f5616e3c43f866f4758a21f67d98da52b89ee20", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5616e3c43f866f4758a21f67d98da52b89ee20", "html_url": "https://github.com/rust-lang/rust/commit/4f5616e3c43f866f4758a21f67d98da52b89ee20"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "3e9b37f0a95a713dcbec1414b417ef8185a4463c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab", "patch": "@@ -32,7 +32,7 @@ use syntax::ast::Name;\n use syntax::attr;\n use syntax::parse::token;\n \n-use syntax::ast::{Block, Crate, DUMMY_NODE_ID};\n+use syntax::ast::{Block, Crate};\n use syntax::ast::{ForeignItem, ForeignItemKind, Item, ItemKind};\n use syntax::ast::{Mutability, StmtKind, TraitItemKind};\n use syntax::ast::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n@@ -208,7 +208,7 @@ impl<'b> Resolver<'b> {\n             ItemKind::Mod(..) => {\n                 let parent_link = ModuleParentLink(parent, name);\n                 let def = Def::Mod(self.definitions.local_def_id(item.id));\n-                let module = self.new_module(parent_link, Some(def), item.id);\n+                let module = self.new_module(parent_link, Some(def), Some(item.id));\n                 module.no_implicit_prelude.set({\n                     parent.no_implicit_prelude.get() ||\n                         attr::contains_name(&item.attrs, \"no_implicit_prelude\")\n@@ -398,7 +398,7 @@ impl<'b> Resolver<'b> {\n                 debug!(\"(building reduced graph for external crate) building module {} {:?}\",\n                        name, vis);\n                 let parent_link = ModuleParentLink(parent, name);\n-                let module = self.new_module(parent_link, Some(def), DUMMY_NODE_ID);\n+                let module = self.new_module(parent_link, Some(def), None);\n                 let _ = self.try_define(parent, name, TypeNS, (module, DUMMY_SP, vis));\n             }\n             Def::Variant(_, variant_id) => {\n@@ -440,7 +440,7 @@ impl<'b> Resolver<'b> {\n                 }\n \n                 let parent_link = ModuleParentLink(parent, name);\n-                let module = self.new_module(parent_link, Some(def), DUMMY_NODE_ID);\n+                let module = self.new_module(parent_link, Some(def), None);\n                 let _ = self.try_define(parent, name, TypeNS, (module, DUMMY_SP, vis));\n             }\n             Def::TyAlias(..) | Def::AssociatedTy(..) => {"}, {"sha": "1224c694a4e6e6e218083c67c031c996a8fccc99", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab", "patch": "@@ -54,7 +54,7 @@ use rustc::util::nodemap::{NodeMap, NodeSet, FnvHashMap, FnvHashSet};\n \n use syntax::ext::hygiene::Mark;\n use syntax::ast::{self, FloatTy};\n-use syntax::ast::{CRATE_NODE_ID, DUMMY_NODE_ID, Name, NodeId, CrateNum, IntTy, UintTy};\n+use syntax::ast::{CRATE_NODE_ID, Name, NodeId, CrateNum, IntTy, UintTy};\n use syntax::parse::token::{self, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n@@ -765,7 +765,7 @@ pub struct ModuleS<'a> {\n     def: Option<Def>,\n \n     // The node id of the closest normal module (`mod`) ancestor (including this module).\n-    normal_ancestor_id: NodeId,\n+    normal_ancestor_id: Option<NodeId>,\n \n     // If the module is an extern crate, `def` is root of the external crate and `extern_crate_id`\n     // is the NodeId of the local `extern crate` item (otherwise, `extern_crate_id` is None).\n@@ -790,7 +790,8 @@ pub struct ModuleS<'a> {\n pub type Module<'a> = &'a ModuleS<'a>;\n \n impl<'a> ModuleS<'a> {\n-    fn new(parent_link: ParentLink<'a>, def: Option<Def>, normal_ancestor_id: NodeId) -> Self {\n+    fn new(parent_link: ParentLink<'a>, def: Option<Def>, normal_ancestor_id: Option<NodeId>)\n+           -> Self {\n         ModuleS {\n             parent_link: parent_link,\n             def: def,\n@@ -801,7 +802,7 @@ impl<'a> ModuleS<'a> {\n             glob_importers: RefCell::new(Vec::new()),\n             globs: RefCell::new((Vec::new())),\n             traits: RefCell::new(None),\n-            populated: Cell::new(normal_ancestor_id != DUMMY_NODE_ID),\n+            populated: Cell::new(normal_ancestor_id.is_some()),\n         }\n     }\n \n@@ -1104,7 +1105,7 @@ impl<'a> ty::NodeIdTree for Resolver<'a> {\n     fn is_descendant_of(&self, mut node: NodeId, ancestor: NodeId) -> bool {\n         while node != ancestor {\n             node = match self.module_map[&node].parent() {\n-                Some(parent) => parent.normal_ancestor_id,\n+                Some(parent) => parent.normal_ancestor_id.unwrap(),\n                 None => return false,\n             }\n         }\n@@ -1168,7 +1169,8 @@ impl<'a> Resolver<'a> {\n     pub fn new(session: &'a Session, make_glob_map: MakeGlobMap, arenas: &'a ResolverArenas<'a>)\n                -> Resolver<'a> {\n         let root_def_id = DefId::local(CRATE_DEF_INDEX);\n-        let graph_root = ModuleS::new(NoParentLink, Some(Def::Mod(root_def_id)), CRATE_NODE_ID);\n+        let graph_root =\n+            ModuleS::new(NoParentLink, Some(Def::Mod(root_def_id)), Some(CRATE_NODE_ID));\n         let graph_root = arenas.alloc_module(graph_root);\n         let mut module_map = NodeMap();\n         module_map.insert(CRATE_NODE_ID, graph_root);\n@@ -1247,14 +1249,17 @@ impl<'a> Resolver<'a> {\n         self.report_errors();\n     }\n \n-    fn new_module(&self, parent_link: ParentLink<'a>, def: Option<Def>, normal_ancestor_id: NodeId)\n+    fn new_module(&self,\n+                  parent_link: ParentLink<'a>,\n+                  def: Option<Def>,\n+                  normal_ancestor_id: Option<NodeId>)\n                   -> Module<'a> {\n         self.arenas.alloc_module(ModuleS::new(parent_link, def, normal_ancestor_id))\n     }\n \n     fn new_extern_crate_module(&self, parent_link: ParentLink<'a>, def: Def, local_node_id: NodeId)\n                                -> Module<'a> {\n-        let mut module = ModuleS::new(parent_link, Some(def), local_node_id);\n+        let mut module = ModuleS::new(parent_link, Some(def), Some(local_node_id));\n         module.extern_crate_id = Some(local_node_id);\n         self.arenas.modules.alloc(module)\n     }\n@@ -1530,14 +1535,15 @@ impl<'a> Resolver<'a> {\n             _ => return Success(NoPrefixFound),\n         };\n \n-        let mut containing_module = self.module_map[&self.current_module.normal_ancestor_id];\n+        let mut containing_module =\n+            self.module_map[&self.current_module.normal_ancestor_id.unwrap()];\n \n         // Now loop through all the `super`s we find.\n         while i < module_path.len() && \"super\" == module_path[i].as_str() {\n             debug!(\"(resolving module prefix) resolving `super` at {}\",\n                    module_to_string(&containing_module));\n             if let Some(parent) = containing_module.parent() {\n-                containing_module = self.module_map[&parent.normal_ancestor_id];\n+                containing_module = self.module_map[&parent.normal_ancestor_id.unwrap()];\n                 i += 1;\n             } else {\n                 let msg = \"There are too many initial `super`s.\".into();\n@@ -3260,7 +3266,7 @@ impl<'a> Resolver<'a> {\n             ast::Visibility::Crate(_) => return ty::Visibility::Restricted(ast::CRATE_NODE_ID),\n             ast::Visibility::Restricted { ref path, id } => (path, id),\n             ast::Visibility::Inherited => {\n-                return ty::Visibility::Restricted(self.current_module.normal_ancestor_id);\n+                return ty::Visibility::Restricted(self.current_module.normal_ancestor_id.unwrap());\n             }\n         };\n \n@@ -3269,7 +3275,7 @@ impl<'a> Resolver<'a> {\n         let vis = match self.resolve_module_path(&segments, DontUseLexicalScope, Some(path.span)) {\n             Success(module) => {\n                 path_resolution = PathResolution::new(module.def.unwrap());\n-                ty::Visibility::Restricted(module.normal_ancestor_id)\n+                ty::Visibility::Restricted(module.normal_ancestor_id.unwrap())\n             }\n             Indeterminate => unreachable!(),\n             Failed(err) => {\n@@ -3288,11 +3294,11 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn is_accessible(&self, vis: ty::Visibility) -> bool {\n-        vis.is_accessible_from(self.current_module.normal_ancestor_id, self)\n+        vis.is_accessible_from(self.current_module.normal_ancestor_id.unwrap(), self)\n     }\n \n     fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {\n-        vis.is_accessible_from(module.normal_ancestor_id, self)\n+        vis.is_accessible_from(module.normal_ancestor_id.unwrap(), self)\n     }\n \n     fn report_errors(&self) {"}, {"sha": "875d6745f6b2e26f7c5da2d45d0a0f5052a570db", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab", "patch": "@@ -55,6 +55,7 @@ pub enum ImportDirectiveSubclass<'a> {\n     GlobImport {\n         is_prelude: bool,\n         max_vis: Cell<ty::Visibility>, // The visibility of the greatest reexport.\n+        // n.b. `max_vis` is only used in `finalize_import` to check for reexport errors.\n     },\n }\n "}, {"sha": "9851dfe0262f8ce28a17fd645ed78a9bbd0f7740", "filename": "src/test/run-pass/imports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab/src%2Ftest%2Frun-pass%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab/src%2Ftest%2Frun-pass%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimports.rs?ref=90ce504c1c3dc014ca8e0aa91e21c46569a9d4ab", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when ending with // comments\n+\n #![feature(item_like_imports)]\n #![allow(unused)]\n "}]}