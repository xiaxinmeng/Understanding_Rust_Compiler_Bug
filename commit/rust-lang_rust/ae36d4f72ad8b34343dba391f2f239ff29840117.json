{"sha": "ae36d4f72ad8b34343dba391f2f239ff29840117", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMzZkNGY3MmFkOGIzNDM0M2RiYTM5MWYyZjIzOWZmMjk4NDAxMTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-25T22:30:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-27T20:02:18Z"}, "message": "mk: Add support for i686-pc-windows-msvc\n\nThis commit modifies the configure script and our makefiles to support building\n32-bit MSVC targets. The MSVC toolchain is now parameterized over whether it can\nproduce a 32-bit or 64-bit binary. The configure script was updated to export\nmore variables at configure time, and the makefiles were rejiggered to\nselectively reexport the relevant environment variables for the applicable\ntargets they're going to run for.", "tree": {"sha": "84e65c53488982f9444eb1475753713dc99d15c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e65c53488982f9444eb1475753713dc99d15c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae36d4f72ad8b34343dba391f2f239ff29840117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae36d4f72ad8b34343dba391f2f239ff29840117", "html_url": "https://github.com/rust-lang/rust/commit/ae36d4f72ad8b34343dba391f2f239ff29840117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae36d4f72ad8b34343dba391f2f239ff29840117/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb", "html_url": "https://github.com/rust-lang/rust/commit/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb"}], "stats": {"total": 173, "additions": 138, "deletions": 35}, "files": [{"sha": "5d4a017b6fbfaa8f9624dd5f1c76dc7b975b7abb", "filename": "configure", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ae36d4f72ad8b34343dba391f2f239ff29840117/configure", "raw_url": "https://github.com/rust-lang/rust/raw/ae36d4f72ad8b34343dba391f2f239ff29840117/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=ae36d4f72ad8b34343dba391f2f239ff29840117", "patch": "@@ -1114,7 +1114,7 @@ do\n             fi\n             ;;\n \n-        x86_64-*-msvc)\n+        *-msvc)\n             # Currently the build system is not configured to build jemalloc\n             # with MSVC, so we omit this optional dependency.\n             step_msg \"targeting MSVC, disabling jemalloc\"\n@@ -1154,22 +1154,45 @@ do\n             CFG_MSVC_ROOT=$(echo \"$install\" | grep InstallDir | sed 's/.*REG_SZ[ ]*//')\n             CFG_MSVC_ROOT=$(dirname \"$CFG_MSVC_ROOT\")\n             CFG_MSVC_ROOT=$(dirname \"$CFG_MSVC_ROOT\")\n-            CFG_MSVC_CL=\"${CFG_MSVC_ROOT}/VC/bin/amd64/cl.exe\"\n-            CFG_MSVC_LIB=\"${CFG_MSVC_ROOT}/VC/bin/amd64/lib.exe\"\n-            CFG_MSVC_LINK=\"${CFG_MSVC_ROOT}/VC/bin/amd64/link.exe\"\n+            putvar CFG_MSVC_ROOT\n+\n+            case $i in\n+                x86_64-*)\n+                    bits=x86_64\n+                    msvc_part=amd64\n+                    ;;\n+                i686-*)\n+                    bits=i386\n+                    msvc_part=\n+                    ;;\n+                *)\n+                    err \"can only target x86 targets for MSVC\"\n+                    ;;\n+            esac\n+            bindir=\"${CFG_MSVC_ROOT}/VC/bin\"\n+            if [ ! -z \"$msvc_part\" ]; then\n+                bindir=\"$bindir/$msvc_part\"\n+            fi\n+            eval CFG_MSVC_BINDIR_$bits=\"\\\"$bindir\\\"\"\n+            eval CFG_MSVC_CL_$bits=\"\\\"$bindir/cl.exe\\\"\"\n+            eval CFG_MSVC_LIB_$bits=\"\\\"$bindir/lib.exe\\\"\"\n+            eval CFG_MSVC_LINK_$bits=\"\\\"$bindir/link.exe\\\"\"\n \n             vcvarsall=\"${CFG_MSVC_ROOT}/VC/vcvarsall.bat\"\n-            CFG_MSVC_INCLUDE_PATH=$(cmd /c \"\\\"$vcvarsall\\\" amd64 && cmd /c echo %INCLUDE%\")\n+            include_path=$(cmd /c \"\\\"$vcvarsall\\\" $msvc_part && cmd /c echo %INCLUDE%\")\n             need_ok \"failed to learn about MSVC's INCLUDE\"\n-            CFG_MSVC_LIB_PATH=$(cmd /c \"\\\"$vcvarsall\\\" amd64 && cmd /c echo %LIB%\")\n+            lib_path=$(cmd /c \"\\\"$vcvarsall\\\" $msvc_part && cmd /c echo %LIB%\")\n             need_ok \"failed to learn about MSVC's LIB\"\n \n-            putvar CFG_MSVC_ROOT\n-            putvar CFG_MSVC_CL\n-            putvar CFG_MSVC_LIB\n-            putvar CFG_MSVC_LINK\n-            putvar CFG_MSVC_INCLUDE_PATH\n-            putvar CFG_MSVC_LIB_PATH\n+            eval CFG_MSVC_INCLUDE_PATH_${bits}=\"\\\"$include_path\\\"\"\n+            eval CFG_MSVC_LIB_PATH_${bits}=\"\\\"$lib_path\\\"\"\n+\n+            putvar CFG_MSVC_BINDIR_${bits}\n+            putvar CFG_MSVC_CL_${bits}\n+            putvar CFG_MSVC_LIB_${bits}\n+            putvar CFG_MSVC_LINK_${bits}\n+            putvar CFG_MSVC_INCLUDE_PATH_${bits}\n+            putvar CFG_MSVC_LIB_PATH_${bits}\n             ;;\n \n         *)\n@@ -1408,8 +1431,19 @@ do\n \n         msg \"configuring LLVM with:\"\n         msg \"$CMAKE_ARGS\"\n+        case \"$t\" in\n+            x86_64-*)\n+                generator=\"Visual Studio 12 2013 Win64\"\n+                ;;\n+            i686-*)\n+                generator=\"Visual Studio 12 2013\"\n+                ;;\n+            *)\n+                err \"can only build LLVM for x86 platforms\"\n+                ;;\n+        esac\n         (cd $LLVM_BUILD_DIR && \"$CFG_CMAKE\" $CFG_LLVM_SRC_DIR \\\n-                                            -G \"Visual Studio 12 2013 Win64\" \\\n+                                            -G \"$generator\" \\\n                                             $CMAKE_ARGS)\n         need_ok \"LLVM cmake configure failed\"\n     fi"}, {"sha": "bb1280688a7168dd96f5a66025e080ab68fe117f", "filename": "mk/cfg/i686-pc-windows-msvc.mk", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ae36d4f72ad8b34343dba391f2f239ff29840117/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ae36d4f72ad8b34343dba391f2f239ff29840117/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-msvc.mk?ref=ae36d4f72ad8b34343dba391f2f239ff29840117", "patch": "@@ -0,0 +1,29 @@\n+# i686-pc-windows-msvc configuration\n+CC_i686-pc-windows-msvc=\"$(CFG_MSVC_CL_i386)\" -nologo\n+LINK_i686-pc-windows-msvc=\"$(CFG_MSVC_LINK_i386)\" -nologo\n+CXX_i686-pc-windows-msvc=\"$(CFG_MSVC_CL_i386)\" -nologo\n+CPP_i686-pc-windows-msvc=\"$(CFG_MSVC_CL_i386)\" -nologo\n+AR_i686-pc-windows-msvc=\"$(CFG_MSVC_LIB_i386)\" -nologo\n+CFG_LIB_NAME_i686-pc-windows-msvc=$(1).dll\n+CFG_STATIC_LIB_NAME_i686-pc-windows-msvc=$(1).lib\n+CFG_LIB_GLOB_i686-pc-windows-msvc=$(1)-*.{dll,lib}\n+CFG_LIB_DSYM_GLOB_i686-pc-windows-msvc=$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_i686-pc-windows-msvc :=\n+CFG_GCCISH_CFLAGS_i686-pc-windows-msvc := -MD\n+CFG_GCCISH_CXXFLAGS_i686-pc-windows-msvc := -MD\n+CFG_GCCISH_LINK_FLAGS_i686-pc-windows-msvc :=\n+CFG_GCCISH_DEF_FLAG_i686-pc-windows-msvc :=\n+CFG_LLC_FLAGS_i686-pc-windows-msvc :=\n+CFG_INSTALL_NAME_i686-pc-windows-msvc =\n+CFG_EXE_SUFFIX_i686-pc-windows-msvc := .exe\n+CFG_WINDOWSY_i686-pc-windows-msvc := 1\n+CFG_UNIXY_i686-pc-windows-msvc :=\n+CFG_LDPATH_i686-pc-windows-msvc :=\n+CFG_RUN_i686-pc-windows-msvc=$(2)\n+CFG_RUN_TARG_i686-pc-windows-msvc=$(call CFG_RUN_i686-pc-windows-msvc,,$(2))\n+CFG_GNU_TRIPLE_i686-pc-windows-msvc := i686-pc-win32\n+\n+# All windows nightiles are currently a GNU triple, so this MSVC triple is not\n+# bootstrapping from itself. This is relevant during stage0, and other parts of\n+# the build system take this into account.\n+BOOTSTRAP_FROM_i686-pc-windows-msvc := i686-pc-windows-gnu"}, {"sha": "6f12836f05624fd52561fb585a0d21d2517ad33f", "filename": "mk/cfg/x86_64-pc-windows-msvc.mk", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae36d4f72ad8b34343dba391f2f239ff29840117/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ae36d4f72ad8b34343dba391f2f239ff29840117/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk?ref=ae36d4f72ad8b34343dba391f2f239ff29840117", "patch": "@@ -1,9 +1,9 @@\n # x86_64-pc-windows-msvc configuration\n-CC_x86_64-pc-windows-msvc=\"$(CFG_MSVC_CL)\" -nologo\n-LINK_x86_64-pc-windows-msvc=\"$(CFG_MSVC_LINK)\" -nologo\n-CXX_x86_64-pc-windows-msvc=\"$(CFG_MSVC_CL)\" -nologo\n-CPP_x86_64-pc-windows-msvc=\"$(CFG_MSVC_CL)\" -nologo\n-AR_x86_64-pc-windows-msvc=\"$(CFG_MSVC_LIB)\" -nologo\n+CC_x86_64-pc-windows-msvc=\"$(CFG_MSVC_CL_x86_64)\" -nologo\n+LINK_x86_64-pc-windows-msvc=\"$(CFG_MSVC_LINK_x86_64)\" -nologo\n+CXX_x86_64-pc-windows-msvc=\"$(CFG_MSVC_CL_x86_64)\" -nologo\n+CPP_x86_64-pc-windows-msvc=\"$(CFG_MSVC_CL_x86_64)\" -nologo\n+AR_x86_64-pc-windows-msvc=\"$(CFG_MSVC_LIB_x86_64)\" -nologo\n CFG_LIB_NAME_x86_64-pc-windows-msvc=$(1).dll\n CFG_STATIC_LIB_NAME_x86_64-pc-windows-msvc=$(1).lib\n CFG_LIB_GLOB_x86_64-pc-windows-msvc=$(1)-*.{dll,lib}"}, {"sha": "60fe22cb32ee695a4a749d0af0a677b727a2cf0a", "filename": "mk/platform.mk", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae36d4f72ad8b34343dba391f2f239ff29840117/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ae36d4f72ad8b34343dba391f2f239ff29840117/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=ae36d4f72ad8b34343dba391f2f239ff29840117", "patch": "@@ -239,23 +239,6 @@ endef\n $(foreach target,$(CFG_TARGET), \\\n   $(eval $(call CFG_MAKE_TOOLCHAIN,$(target))))\n \n-# These two environment variables are scraped by the `./configure` script and\n-# are necessary for `cl.exe` to find standard headers (the INCLUDE variable) and\n-# for `link.exe` to find standard libraries (the LIB variable).\n-ifdef CFG_MSVC_INCLUDE_PATH\n-export INCLUDE := $(CFG_MSVC_INCLUDE_PATH)\n-endif\n-ifdef CFG_MSVC_LIB_PATH\n-export LIB := $(CFG_MSVC_LIB_PATH)\n-endif\n-\n-# Unfortunately `link.exe` is also a program in `/usr/bin` on MinGW installs,\n-# but it's not the one that we want. As a result we make sure that our detected\n-# `link.exe` shows up in PATH first.\n-ifdef CFG_MSVC_LINK\n-export PATH := $(CFG_MSVC_ROOT)/VC/bin/amd64:$(PATH)\n-endif\n-\n # There are more comments about this available in the target specification for\n # Windows MSVC in the compiler, but the gist of it is that we use `llvm-ar.exe`\n # instead of `lib.exe` for assembling archives, so we need to inject this custom\n@@ -307,3 +290,4 @@ endef\n \n $(foreach target,$(CFG_TARGET), \\\n   $(eval $(call ADD_RUSTC_LLVM_DEF_TO_MSVC,$(target))))\n+"}, {"sha": "c70f9e8a37addfd80a78855c85de180943602719", "filename": "mk/rt.mk", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ae36d4f72ad8b34343dba391f2f239ff29840117/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ae36d4f72ad8b34343dba391f2f239ff29840117/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=ae36d4f72ad8b34343dba391f2f239ff29840117", "patch": "@@ -55,7 +55,11 @@ NATIVE_DEPS_rust_builtin_$(1) := rust_builtin.c \\\n \t\t\trust_android_dummy.c\n NATIVE_DEPS_rustrt_native_$(1) := arch/$$(HOST_$(1))/record_sp.S\n ifeq ($$(findstring msvc,$(1)),msvc)\n+ifeq ($$(findstring i686,$(1)),i686)\n+NATIVE_DEPS_rustrt_native_$(1) += rust_try_msvc_32.ll\n+else\n NATIVE_DEPS_rustrt_native_$(1) += rust_try_msvc_64.ll\n+endif\n else\n NATIVE_DEPS_rustrt_native_$(1) += rust_try.ll\n endif\n@@ -93,6 +97,17 @@ $$(RT_OUTPUT_DIR_$(1))/%.o: $(S)src/rt/%.S $$(MKFILE_DEPS) \\\n \t@mkdir -p $$(@D)\n \t@$$(call E, compile: $$@)\n \t$$(Q)$$(call CFG_ASSEMBLE_$(1),$$@,$$<)\n+\n+# On MSVC targets the compiler's default include path (e.g. where to find system\n+# headers) is specified by the INCLUDE environment variable. This may not be set\n+# so the ./configure script scraped the relevant values and this is the location\n+# that we put them into cl.exe's environment.\n+ifeq ($$(findstring msvc,$(1)),msvc)\n+$$(RT_OUTPUT_DIR_$(1))/%.o: \\\n+\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(1)))\n+$(1)/rustllvm/%.o: \\\n+\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(1)))\n+endif\n endef\n \n $(foreach target,$(CFG_TARGET),$(eval $(call NATIVE_LIBRARIES,$(target))))\n@@ -240,8 +255,12 @@ COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1))\n ifeq ($$(findstring msvc,$(1)),msvc)\n COMPRT_CC_$(1) := gcc\n COMPRT_AR_$(1) := ar\n+ifeq ($$(findstring i686,$(1)),i686)\n+COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1)) -m32\n+else\n COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1)) -m64\n endif\n+endif\n \n $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n \t@$$(call E, make: compiler-rt)"}, {"sha": "c398950965f54765968d26d5630d0836d4e7a04e", "filename": "mk/target.mk", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ae36d4f72ad8b34343dba391f2f239ff29840117/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ae36d4f72ad8b34343dba391f2f239ff29840117/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=ae36d4f72ad8b34343dba391f2f239ff29840117", "patch": "@@ -220,3 +220,40 @@ $(foreach target,$(CFG_TARGET), \\\n  $(foreach crate,$(CRATES), \\\n   $(foreach tool,$(NATIVE_TOOL_DEPS_$(crate)_T_$(target)), \\\n    $(eval $(call MOVE_TOOLS_TO_SNAPSHOT_HOST_DIR,0,$(target),$(BOOTSTRAP_FROM_$(target)),$(crate),$(tool))))))\n+\n+# For MSVC targets we need to set up some environment variables for the linker\n+# to work correctly when building Rust crates. These two variables are:\n+#\n+# - LIB tells the linker the default search path for finding system libraries,\n+#   for example kernel32.dll\n+# - PATH needs to be modified to ensure that MSVC's link.exe is first in the\n+#   path instead of MinGW's /usr/bin/link.exe (entirely unrelated)\n+#\n+# The values for these variables are detected by the configure script.\n+define SETUP_LIB_MSVC_ENV_VARS\n+ifeq ($$(findstring msvc,$(2)),msvc)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n+\texport LIB := $$(CFG_MSVC_LIB_PATH_$$(HOST_$(2)))\n+$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n+\texport PATH := $$(CFG_MSVC_BINDIR_$$(HOST_$(2))):$$(PATH)\n+endif\n+endef\n+define SETUP_TOOL_MSVC_ENV_VARS\n+ifeq ($$(findstring msvc,$(2)),msvc)\n+$$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n+\texport LIB := $$(CFG_MSVC_LIB_PATH_$$(HOST_$(2)))\n+$$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n+\texport PATH := $$(CFG_MSVC_BINDIR_$$(HOST_$(2))):$$(PATH)\n+endif\n+endef\n+\n+$(foreach host,$(CFG_HOST), \\\n+ $(foreach target,$(CFG_TARGET), \\\n+  $(foreach stage,$(STAGES), \\\n+   $(foreach crate,$(CRATES), \\\n+    $(eval $(call SETUP_LIB_MSVC_ENV_VARS,$(stage),$(target),$(host),$(crate)))))))\n+$(foreach host,$(CFG_HOST), \\\n+ $(foreach target,$(CFG_TARGET), \\\n+  $(foreach stage,$(STAGES), \\\n+   $(foreach tool,$(TOOLS), \\\n+    $(eval $(call SETUP_TOOL_MSVC_ENV_VARS,$(stage),$(target),$(host),$(tool)))))))"}]}