{"sha": "b8e95c46024754b49bdeb24b338e4b24e7c0ef23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZTk1YzQ2MDI0NzU0YjQ5YmRlYjI0YjMzOGU0YjI0ZTdjMGVmMjM=", "commit": {"author": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2013-07-11T23:52:49Z"}, "committer": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2013-07-11T23:52:49Z"}, "message": "Make Bitv::eq_vec take ~[bool] rather than ~[uint]\n\nFixes #7711.", "tree": {"sha": "318d349e2c3d1598c13c5d6acd03b23125dcf2b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/318d349e2c3d1598c13c5d6acd03b23125dcf2b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8e95c46024754b49bdeb24b338e4b24e7c0ef23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e95c46024754b49bdeb24b338e4b24e7c0ef23", "html_url": "https://github.com/rust-lang/rust/commit/b8e95c46024754b49bdeb24b338e4b24e7c0ef23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8e95c46024754b49bdeb24b338e4b24e7c0ef23/comments", "author": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f92b75ac06a86daac8d230285b605ec2ed97214b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f92b75ac06a86daac8d230285b605ec2ed97214b", "html_url": "https://github.com/rust-lang/rust/commit/f92b75ac06a86daac8d230285b605ec2ed97214b"}], "stats": {"total": 136, "additions": 67, "deletions": 69}, "files": [{"sha": "0a5a7d11c6cd9cc96b1b6d00f94430d5393397dd", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 67, "deletions": 69, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/b8e95c46024754b49bdeb24b338e4b24e7c0ef23/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e95c46024754b49bdeb24b338e4b24e7c0ef23/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=b8e95c46024754b49bdeb24b338e4b24e7c0ef23", "patch": "@@ -489,18 +489,15 @@ impl Bitv {\n \n \n     /**\n-     * Compare a bitvector to a vector of uint\n+     * Compare a bitvector to a vector of bool.\n      *\n-     * The uint vector is expected to only contain the values 0u and 1u. Both\n-     * the bitvector and vector must have the same length\n+     * Both the bitvector and vector must have the same length.\n      */\n-    pub fn eq_vec(&self, v: ~[uint]) -> bool {\n+    pub fn eq_vec(&self, v: ~[bool]) -> bool {\n         assert_eq!(self.nbits, v.len());\n         let mut i = 0;\n         while i < self.nbits {\n-            let w0 = self.get(i);\n-            let w1 = v[i];\n-            if !w0 && w1 != 0u || w0 && w1 == 0u { return false; }\n+            if self.get(i) != v[i] { return false; }\n             i = i + 1;\n         }\n         true\n@@ -887,16 +884,16 @@ mod tests {\n     #[test]\n     fn test_0_elements() {\n         let act = Bitv::new(0u, false);\n-        let exp = vec::from_elem::<uint>(0u, 0u);\n+        let exp = vec::from_elem::<bool>(0u, false);\n         assert!(act.eq_vec(exp));\n     }\n \n     #[test]\n     fn test_1_element() {\n         let mut act = Bitv::new(1u, false);\n-        assert!(act.eq_vec(~[0u]));\n+        assert!(act.eq_vec(~[false]));\n         act = Bitv::new(1u, true);\n-        assert!(act.eq_vec(~[1u]));\n+        assert!(act.eq_vec(~[true]));\n     }\n \n     #[test]\n@@ -913,11 +910,12 @@ mod tests {\n         // all 0\n \n         act = Bitv::new(10u, false);\n-        assert!((act.eq_vec(~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u])));\n+        assert!((act.eq_vec(\n+                    ~[false, false, false, false, false, false, false, false, false, false])));\n         // all 1\n \n         act = Bitv::new(10u, true);\n-        assert!((act.eq_vec(~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u])));\n+        assert!((act.eq_vec(~[true, true, true, true, true, true, true, true, true, true])));\n         // mixed\n \n         act = Bitv::new(10u, false);\n@@ -926,7 +924,7 @@ mod tests {\n         act.set(2u, true);\n         act.set(3u, true);\n         act.set(4u, true);\n-        assert!((act.eq_vec(~[1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u])));\n+        assert!((act.eq_vec(~[true, true, true, true, true, false, false, false, false, false])));\n         // mixed\n \n         act = Bitv::new(10u, false);\n@@ -935,15 +933,15 @@ mod tests {\n         act.set(7u, true);\n         act.set(8u, true);\n         act.set(9u, true);\n-        assert!((act.eq_vec(~[0u, 0u, 0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u])));\n+        assert!((act.eq_vec(~[false, false, false, false, false, true, true, true, true, true])));\n         // mixed\n \n         act = Bitv::new(10u, false);\n         act.set(0u, true);\n         act.set(3u, true);\n         act.set(6u, true);\n         act.set(9u, true);\n-        assert!((act.eq_vec(~[1u, 0u, 0u, 1u, 0u, 0u, 1u, 0u, 0u, 1u])));\n+        assert!((act.eq_vec(~[true, false, false, true, false, false, true, false, false, true])));\n     }\n \n     #[test]\n@@ -953,16 +951,16 @@ mod tests {\n \n         act = Bitv::new(31u, false);\n         assert!(act.eq_vec(\n-                       ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u]));\n+                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false]));\n         // all 1\n \n         act = Bitv::new(31u, true);\n         assert!(act.eq_vec(\n-                       ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n-                        1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n-                        1u, 1u, 1u, 1u, 1u]));\n+                ~[true, true, true, true, true, true, true, true, true, true, true, true, true,\n+                true, true, true, true, true, true, true, true, true, true, true, true, true, true,\n+                true, true, true, true]));\n         // mixed\n \n         act = Bitv::new(31u, false);\n@@ -975,9 +973,9 @@ mod tests {\n         act.set(6u, true);\n         act.set(7u, true);\n         assert!(act.eq_vec(\n-                       ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u]));\n+                ~[true, true, true, true, true, true, true, true, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, false]));\n         // mixed\n \n         act = Bitv::new(31u, false);\n@@ -990,9 +988,9 @@ mod tests {\n         act.set(22u, true);\n         act.set(23u, true);\n         assert!(act.eq_vec(\n-                       ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u]));\n+                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, true, true, true, true, true, true, true, true,\n+                false, false, false, false, false, false, false]));\n         // mixed\n \n         act = Bitv::new(31u, false);\n@@ -1004,19 +1002,19 @@ mod tests {\n         act.set(29u, true);\n         act.set(30u, true);\n         assert!(act.eq_vec(\n-                       ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n-                        1u, 1u, 1u, 1u, 1u]));\n+                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false, false, false, false, false,\n+                false, true, true, true, true, true, true, true]));\n         // mixed\n \n         act = Bitv::new(31u, false);\n         act.set(3u, true);\n         act.set(17u, true);\n         act.set(30u, true);\n         assert!(act.eq_vec(\n-                       ~[0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 1u]));\n+                ~[false, false, false, true, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, true, false, false, false, false, false, false,\n+                false, false, false, false, false, false, true]));\n     }\n \n     #[test]\n@@ -1026,16 +1024,16 @@ mod tests {\n \n         act = Bitv::new(32u, false);\n         assert!(act.eq_vec(\n-                       ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u]));\n+                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false, false]));\n         // all 1\n \n         act = Bitv::new(32u, true);\n         assert!(act.eq_vec(\n-                       ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n-                        1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n-                        1u, 1u, 1u, 1u, 1u, 1u]));\n+                ~[true, true, true, true, true, true, true, true, true, true, true, true, true,\n+                true, true, true, true, true, true, true, true, true, true, true, true, true, true,\n+                true, true, true, true, true]));\n         // mixed\n \n         act = Bitv::new(32u, false);\n@@ -1048,9 +1046,9 @@ mod tests {\n         act.set(6u, true);\n         act.set(7u, true);\n         assert!(act.eq_vec(\n-                       ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u]));\n+                ~[true, true, true, true, true, true, true, true, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, false, false]));\n         // mixed\n \n         act = Bitv::new(32u, false);\n@@ -1063,9 +1061,9 @@ mod tests {\n         act.set(22u, true);\n         act.set(23u, true);\n         assert!(act.eq_vec(\n-                       ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u]));\n+                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, true, true, true, true, true, true, true, true,\n+                false, false, false, false, false, false, false, false]));\n         // mixed\n \n         act = Bitv::new(32u, false);\n@@ -1078,9 +1076,9 @@ mod tests {\n         act.set(30u, true);\n         act.set(31u, true);\n         assert!(act.eq_vec(\n-                       ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n-                        1u, 1u, 1u, 1u, 1u, 1u]));\n+                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false, false, false, false, false,\n+                false, true, true, true, true, true, true, true, true]));\n         // mixed\n \n         act = Bitv::new(32u, false);\n@@ -1089,9 +1087,9 @@ mod tests {\n         act.set(30u, true);\n         act.set(31u, true);\n         assert!(act.eq_vec(\n-                       ~[0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 1u, 1u]));\n+                ~[false, false, false, true, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, true, false, false, false, false, false, false,\n+                false, false, false, false, false, false, true, true]));\n     }\n \n     #[test]\n@@ -1101,16 +1099,16 @@ mod tests {\n \n         act = Bitv::new(33u, false);\n         assert!(act.eq_vec(\n-                       ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n+                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false, false, false]));\n         // all 1\n \n         act = Bitv::new(33u, true);\n         assert!(act.eq_vec(\n-                       ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n-                        1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n-                        1u, 1u, 1u, 1u, 1u, 1u, 1u]));\n+                ~[true, true, true, true, true, true, true, true, true, true, true, true, true,\n+                true, true, true, true, true, true, true, true, true, true, true, true, true, true,\n+                true, true, true, true, true, true]));\n         // mixed\n \n         act = Bitv::new(33u, false);\n@@ -1123,9 +1121,9 @@ mod tests {\n         act.set(6u, true);\n         act.set(7u, true);\n         assert!(act.eq_vec(\n-                       ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n+                ~[true, true, true, true, true, true, true, true, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false]));\n         // mixed\n \n         act = Bitv::new(33u, false);\n@@ -1138,9 +1136,9 @@ mod tests {\n         act.set(22u, true);\n         act.set(23u, true);\n         assert!(act.eq_vec(\n-                       ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n+                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, true, true, true, true, true, true, true, true,\n+                false, false, false, false, false, false, false, false, false]));\n         // mixed\n \n         act = Bitv::new(33u, false);\n@@ -1153,9 +1151,9 @@ mod tests {\n         act.set(30u, true);\n         act.set(31u, true);\n         assert!(act.eq_vec(\n-                       ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n-                        1u, 1u, 1u, 1u, 1u, 1u, 0u]));\n+                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, false, false, false, false, false, false, false,\n+                false, true, true, true, true, true, true, true, true, false]));\n         // mixed\n \n         act = Bitv::new(33u, false);\n@@ -1165,9 +1163,9 @@ mod tests {\n         act.set(31u, true);\n         act.set(32u, true);\n         assert!(act.eq_vec(\n-                       ~[0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                        0u, 0u, 0u, 0u, 1u, 1u, 1u]));\n+                ~[false, false, false, true, false, false, false, false, false, false, false, false,\n+                false, false, false, false, false, true, false, false, false, false, false, false,\n+                false, false, false, false, false, false, true, true, true]));\n     }\n \n     #[test]"}]}