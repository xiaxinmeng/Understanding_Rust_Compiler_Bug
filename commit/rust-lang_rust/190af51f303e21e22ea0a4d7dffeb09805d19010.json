{"sha": "190af51f303e21e22ea0a4d7dffeb09805d19010", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MGFmNTFmMzAzZTIxZTIyZWEwYTRkN2RmZmViMDk4MDVkMTkwMTA=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-02-29T20:27:20Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-02-29T20:27:20Z"}, "message": "derive: Avoid emitting PartialEq::ne for c-like enums\n\n`ne` is completely symmetrical with the method `eq`, and we can save\nrust code size and compilation time here if we only emit one of them\nwhen possible.\n\nOne case where it's easy to recognize is when it's a C-like enum. Most\nother cases can not omit ne, because any value field may have a custom\nPartialEq implementation.", "tree": {"sha": "8b67a748b9c4b880533a465a0b1927a2ea2f1ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b67a748b9c4b880533a465a0b1927a2ea2f1ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/190af51f303e21e22ea0a4d7dffeb09805d19010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/190af51f303e21e22ea0a4d7dffeb09805d19010", "html_url": "https://github.com/rust-lang/rust/commit/190af51f303e21e22ea0a4d7dffeb09805d19010", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/190af51f303e21e22ea0a4d7dffeb09805d19010/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09130044ce7429beb95742afa7fd371960dbe607", "url": "https://api.github.com/repos/rust-lang/rust/commits/09130044ce7429beb95742afa7fd371960dbe607", "html_url": "https://github.com/rust-lang/rust/commit/09130044ce7429beb95742afa7fd371960dbe607"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "dac25112112edc49b19d49469a597145295fcbb5", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/190af51f303e21e22ea0a4d7dffeb09805d19010/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190af51f303e21e22ea0a4d7dffeb09805d19010/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=190af51f303e21e22ea0a4d7dffeb09805d19010", "patch": "@@ -11,13 +11,33 @@\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n-use syntax::ast::{MetaItem, Expr, BinOpKind};\n+use syntax::ast::{MetaItem, Expr, BinOpKind, ItemKind, VariantData};\n use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n \n+fn is_clike_enum(item: &Annotatable) -> bool {\n+    match *item {\n+        Annotatable::Item(ref item) => {\n+            match item.node {\n+                ItemKind::Enum(ref enum_def, _) => {\n+                    enum_def.variants.iter().all(|v|\n+                        if let VariantData::Unit(..) = v.node.data {\n+                            true\n+                        } else {\n+                            false\n+                        }\n+                    )\n+                }\n+                _ => false,\n+            }\n+        }\n+        _ => false,\n+    }\n+}\n+\n pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n                                   span: Span,\n                                   mitem: &MetaItem,\n@@ -80,17 +100,20 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n         } }\n     }\n \n+    // avoid defining `ne` if we can\n+    let mut methods = vec![md!(\"eq\", cs_eq)];\n+    if !is_clike_enum(item) {\n+        methods.push(md!(\"ne\", cs_ne));\n+    }\n+\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n         path: path_std!(cx, core::cmp::PartialEq),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,\n-        methods: vec!(\n-            md!(\"eq\", cs_eq),\n-            md!(\"ne\", cs_ne)\n-        ),\n+        methods: methods,\n         associated_types: Vec::new(),\n     };\n     trait_def.expand(cx, mitem, item, push)"}]}