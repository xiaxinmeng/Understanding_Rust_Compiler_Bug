{"sha": "19ea3ab480ad273420837da25e428fae597ef9f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZWEzYWI0ODBhZDI3MzQyMDgzN2RhMjVlNDI4ZmFlNTk3ZWY5Zjc=", "commit": {"author": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2012-08-28T01:39:34Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-31T23:20:36Z"}, "message": "jit: Add passes and cleanup code", "tree": {"sha": "b62cdba4670f239e1a49d316adcde6b1b81f979a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b62cdba4670f239e1a49d316adcde6b1b81f979a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19ea3ab480ad273420837da25e428fae597ef9f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19ea3ab480ad273420837da25e428fae597ef9f7", "html_url": "https://github.com/rust-lang/rust/commit/19ea3ab480ad273420837da25e428fae597ef9f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19ea3ab480ad273420837da25e428fae597ef9f7/comments", "author": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "795acb73950adf632d1e3fb48ea6104b4d61f3cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/795acb73950adf632d1e3fb48ea6104b4d61f3cd", "html_url": "https://github.com/rust-lang/rust/commit/795acb73950adf632d1e3fb48ea6104b4d61f3cd"}], "stats": {"total": 70, "additions": 26, "deletions": 44}, "files": [{"sha": "4de4a27e182a0073977ca1e1333d58a07065c9f7", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/19ea3ab480ad273420837da25e428fae597ef9f7/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ea3ab480ad273420837da25e428fae597ef9f7/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=19ea3ab480ad273420837da25e428fae597ef9f7", "patch": "@@ -152,27 +152,14 @@ mod write {\n             if opts.jit {\n                 // If we are using JIT, go ahead and create and\n                 // execute the engine now.\n-\n-                /*llvm::LLVMAddBasicAliasAnalysisPass(pm.llpm);\n-                llvm::LLVMAddInstructionCombiningPass(pm.llpm);\n-                llvm::LLVMAddReassociatePass(pm.llpm);\n-                llvm::LLVMAddGVNPass(pm.llpm);\n-                llvm::LLVMAddCFGSimplificationPass(pm.llpm);*/\n-\n                 // JIT execution takes ownership of the module,\n-                // so don't dispose and return. Due to a weird bug\n-                // with dynamic libraries, we need to separate jitting\n-                // into two functions and load crates inbetween.\n-\n-                if !llvm::LLVMRustPrepareJIT(pm.llpm,\n-                                             llmod,\n-                                             CodeGenOptLevel,\n-                                             true) {\n-                    llvm_err(sess, ~\"Could not JIT\");\n-                }\n+                // so don't dispose and return.\n \n                 // We need to tell LLVM where to resolve all linked\n                 // symbols from. The equivalent of -lstd, -lcore, etc.\n+                // By default the JIT will resolve symbols from the std and\n+                // core linked into rustc. We don't want that,\n+                // incase the user wants to use an older std library.\n                 /*let cstore = sess.cstore;\n                 for cstore::get_used_crate_files(cstore).each |cratepath| {\n                     debug!{\"linking: %s\", cratepath};\n@@ -187,7 +174,10 @@ mod write {\n                         });\n                 }*/\n \n-                if !llvm::LLVMRustExecuteJIT() {\n+                if !llvm::LLVMRustJIT(pm.llpm,\n+                                      llmod,\n+                                      CodeGenOptLevel,\n+                                      true) {\n                     llvm_err(sess, ~\"Could not JIT\");\n                 }\n "}, {"sha": "f325b3a3d03511e4bcbc3aa840ee9aad3ae2ff47", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19ea3ab480ad273420837da25e428fae597ef9f7/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ea3ab480ad273420837da25e428fae597ef9f7/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=19ea3ab480ad273420837da25e428fae597ef9f7", "patch": "@@ -989,15 +989,12 @@ extern mod llvm {\n     /** Load a shared library to resolve symbols against. */\n     fn LLVMRustLoadLibrary(Filename: *c_char) -> bool;\n \n-    /** Create the JIT engine. */\n-    fn LLVMRustPrepareJIT(PM: PassManagerRef,\n+    /** Create and execute the JIT engine. */\n+    fn LLVMRustJIT(PM: PassManagerRef,\n                    M: ModuleRef,\n                    OptLevel: c_int,\n                    EnableSegmentedStacks: bool) -> bool;\n \n-    /** Execute the JIT engine. */\n-    fn LLVMRustExecuteJIT() -> bool;\n-\n     /** Parses the bitcode in the given memory buffer. */\n     fn LLVMRustParseBitcode(MemBuf: MemoryBufferRef) -> ModuleRef;\n "}, {"sha": "92675fd11fbde529dc46d630b9241e40123d237b", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/19ea3ab480ad273420837da25e428fae597ef9f7/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/19ea3ab480ad273420837da25e428fae597ef9f7/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=19ea3ab480ad273420837da25e428fae597ef9f7", "patch": "@@ -15,6 +15,9 @@\n #include \"llvm/LLVMContext.h\"\n #include \"llvm/Linker.h\"\n #include \"llvm/PassManager.h\"\n+#include \"llvm/Analysis/Verifier.h\"\n+#include \"llvm/Analysis/Passes.h\"\n+#include \"llvm/Transforms/Scalar.h\"\n #include \"llvm/ADT/Triple.h\"\n #include \"llvm/Assembly/Parser.h\"\n #include \"llvm/Assembly/PrintModulePass.h\"\n@@ -35,7 +38,6 @@\n #include \"llvm/ExecutionEngine/JITMemoryManager.h\"\n #include \"llvm/ExecutionEngine/MCJIT.h\"\n #include \"llvm/ExecutionEngine/Interpreter.h\"\n-#include \"llvm/ExecutionEngine/GenericValue.h\"\n #include \"llvm-c/Core.h\"\n #include \"llvm-c/BitReader.h\"\n #include \"llvm-c/Object.h\"\n@@ -291,11 +293,8 @@ RustMCJITMemoryManager::~RustMCJITMemoryManager() {\n     free(AllocatedDataMem[i].base());\n }\n \n-// Separated functions because loading libraries before creating\n-// an execution engine seems to break stuff.\n-\n extern \"C\" bool\n-LLVMRustPrepareJIT(LLVMPassManagerRef PMR,\n+LLVMRustJIT(LLVMPassManagerRef PMR,\n             LLVMModuleRef M,\n             CodeGenOpt::Level OptLevel,\n             bool EnableSegmentedStacks) {\n@@ -309,8 +308,16 @@ LLVMRustPrepareJIT(LLVMPassManagerRef PMR,\n   Options.JITEmitDebugInfo = true;\n   Options.NoFramePointerElim = true;\n   Options.EnableSegmentedStacks = EnableSegmentedStacks;\n+  PassManager *PM = unwrap<PassManager>(PMR);\n \n-  unwrap<PassManager>(PMR)->run(*unwrap(M));\n+  PM->add(createBasicAliasAnalysisPass());\n+  PM->add(createInstructionCombiningPass());\n+  PM->add(createReassociatePass());\n+  PM->add(createGVNPass());\n+  PM->add(createPromoteMemoryToRegisterPass());\n+  PM->add(createCFGSimplificationPass());\n+  PM->add(createFunctionInliningPass());\n+  PM->run(*unwrap(M));\n \n   RustMCJITMemoryManager* MM = new RustMCJITMemoryManager();\n   EE = EngineBuilder(unwrap(M))\n@@ -326,29 +333,18 @@ LLVMRustPrepareJIT(LLVMPassManagerRef PMR,\n   }\n \n   MM->invalidateInstructionCache();\n-\n-  return true;\n-}\n-\n-extern \"C\" bool\n-LLVMRustExecuteJIT() {\n-  assert(EE);\n-\n-  std::string Err;\n   Function* func = EE->FindFunctionNamed(\"main\");\n \n   if(!func || Err != \"\") {\n     LLVMRustError = Err.c_str();\n     return false;\n   }\n \n-  //std::vector<GenericValue> args;\n-  typedef int (*entry_t)(int, int);\n-  entry_t entry = (entry_t) EE->getPointerToFunction(func);\n+  typedef int (*Entry)(int, int);\n+  Entry entry = (Entry) EE->getPointerToFunction(func);\n \n   assert(entry);\n   entry(0, 0);\n-  //EE->runFunction(func, args);\n \n   return true;\n }"}, {"sha": "1de1e3ba58f2ca4d35490adef0f4b0603ae81348", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19ea3ab480ad273420837da25e428fae597ef9f7/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/19ea3ab480ad273420837da25e428fae597ef9f7/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=19ea3ab480ad273420837da25e428fae597ef9f7", "patch": "@@ -5,8 +5,7 @@ LLVMRustGetLastError\n LLVMRustConstSmallInt\n LLVMRustConstInt\n LLVMRustLoadLibrary\n-LLVMRustPrepareJIT\n-LLVMRustExecuteJIT\n+LLVMRustJIT\n LLVMRustParseBitcode\n LLVMRustParseAssemblyFile\n LLVMRustPrintPassTimings"}]}