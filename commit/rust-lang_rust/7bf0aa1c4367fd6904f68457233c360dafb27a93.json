{"sha": "7bf0aa1c4367fd6904f68457233c360dafb27a93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZjBhYTFjNDM2N2ZkNjkwNGY2ODQ1NzIzM2MzNjBkYWZiMjdhOTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-20T00:17:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-20T00:17:19Z"}, "message": "core: More doc cleanup", "tree": {"sha": "939dd0e914f30ab034b4097e1bd3d5f2fe189892", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/939dd0e914f30ab034b4097e1bd3d5f2fe189892"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bf0aa1c4367fd6904f68457233c360dafb27a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf0aa1c4367fd6904f68457233c360dafb27a93", "html_url": "https://github.com/rust-lang/rust/commit/7bf0aa1c4367fd6904f68457233c360dafb27a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bf0aa1c4367fd6904f68457233c360dafb27a93/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfed923600e2f7ad34241501200d595abccdeb54", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfed923600e2f7ad34241501200d595abccdeb54", "html_url": "https://github.com/rust-lang/rust/commit/cfed923600e2f7ad34241501200d595abccdeb54"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "096770842573e3798e1de6b5b05469f9c4b01067", "filename": "src/libcore/core.rc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7bf0aa1c4367fd6904f68457233c360dafb27a93/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7bf0aa1c4367fd6904f68457233c360dafb27a93/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=7bf0aa1c4367fd6904f68457233c360dafb27a93", "patch": "@@ -10,12 +10,14 @@ used features.\n `core` includes modules corresponding to each of the integer types, each of\n the floating point types, the `bool` type, tuples, characters, strings,\n vectors (`vec`), shared boxes (`box`), and unsafe and borrowed pointers\n-(`ptr`).  Additionally, `core` provides very commonly used built-in types\n-and operations, concurrency primitives, platform abstractions, I/O, and\n-complete bindings to the C standard library.\n-\n-`core` is linked to all crates and its contents imported.  Implicitly, all\n-crates behave as if they included the following prologue:\n+(`ptr`).  Additionally, `core` provides task management and creation (`task`),\n+communication primitives (`comm` and `pipes`), an efficient vector builder\n+(`dvec`), platform abstractions (`os` and `path`), basic I/O abstractions\n+(`io`), common traits (`cmp`, `num`, `to_str`), and complete bindings\n+to the C standard library (`libc`).\n+\n+`core` is linked to all crates by default and its contents imported.\n+Implicitly, all crates behave as if they included the following prologue:\n \n     extern mod core;\n     use core::*;"}, {"sha": "fbac23289647d3df97e543ef262fddf67a997132", "filename": "src/libcore/task.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bf0aa1c4367fd6904f68457233c360dafb27a93/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf0aa1c4367fd6904f68457233c360dafb27a93/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=7bf0aa1c4367fd6904f68457233c360dafb27a93", "patch": "@@ -82,8 +82,6 @@ macro_rules! move_it (\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); move y } }\n )\n \n-/* Data types */\n-\n /// A handle to a task\n enum Task {\n     TaskHandle(task_id)\n@@ -800,7 +798,7 @@ unsafe fn atomically<U>(f: fn() -> U) -> U {\n     f()\n }\n \n-/****************************************************************************\n+/* **************************************************************************\n  * Spawning & linked failure\n  *\n  * Several data structures are involved in task management to allow properly\n@@ -1431,7 +1429,7 @@ fn spawn_raw(+opts: TaskOpts, +f: fn~()) {\n     }\n }\n \n-/****************************************************************************\n+/* **************************************************************************\n  * Task local data management\n  *\n  * Allows storing boxes with arbitrary types inside, to be accessed anywhere"}]}