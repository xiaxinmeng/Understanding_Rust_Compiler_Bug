{"sha": "79dd70fd9bd2de5a0b2dd4697905571f39012dc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZGQ3MGZkOWJkMmRlNWEwYjJkZDQ2OTc5MDU1NzFmMzkwMTJkYzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-28T16:41:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-28T16:41:30Z"}, "message": "Stacked Borrows: don't read from memory during retagging", "tree": {"sha": "3b532c0ff8dbf0eb4cfb884525824b5c81a616ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b532c0ff8dbf0eb4cfb884525824b5c81a616ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79dd70fd9bd2de5a0b2dd4697905571f39012dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79dd70fd9bd2de5a0b2dd4697905571f39012dc7", "html_url": "https://github.com/rust-lang/rust/commit/79dd70fd9bd2de5a0b2dd4697905571f39012dc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79dd70fd9bd2de5a0b2dd4697905571f39012dc7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "283928ad554e95b7619846df04e19aefb3e0d671", "url": "https://api.github.com/repos/rust-lang/rust/commits/283928ad554e95b7619846df04e19aefb3e0d671", "html_url": "https://github.com/rust-lang/rust/commit/283928ad554e95b7619846df04e19aefb3e0d671"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "e5203becd5cf37ebc438718cde78168d4edb08f3", "filename": "src/helpers.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/79dd70fd9bd2de5a0b2dd4697905571f39012dc7/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79dd70fd9bd2de5a0b2dd4697905571f39012dc7/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=79dd70fd9bd2de5a0b2dd4697905571f39012dc7", "patch": "@@ -222,8 +222,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     // This is `Freeze`, there cannot be an `UnsafeCell`\n                     Ok(())\n                 } else {\n-                    // Proceed further\n-                    self.walk_value(v)\n+                    // We want to not actually read from memory for this visit. So, before\n+                    // walking this value, we have to make sure it is not a\n+                    // `Variants::Multiple`.\n+                    match v.layout.variants {\n+                        layout::Variants::Multiple { .. } => {\n+                            // A multi-variant enum, or generator, or so.\n+                            // Treat this like a union: without reading from memory,\n+                            // we cannot determine the variant we are in. Reading from\n+                            // memory would be subject to Stacked Borrows rules, leading\n+                            // to all sorts of \"funny\" recursion.\n+                            self.visit_union(v)\n+                        }\n+                        layout::Variants::Single { .. } => {\n+                            // Proceed further\n+                            self.walk_value(v)\n+                        }\n+                    }\n                 }\n             }\n "}]}