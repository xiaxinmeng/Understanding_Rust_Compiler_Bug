{"sha": "90634121b39ca2e15abc40ee2622b3d7e42d823c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNjM0MTIxYjM5Y2EyZTE1YWJjNDBlZTI2MjJiM2Q3ZTQyZDgyM2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-30T14:05:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-30T14:05:44Z"}, "message": "fix typo", "tree": {"sha": "2f3a3817f3495e105d447531122a59a928bb8c51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f3a3817f3495e105d447531122a59a928bb8c51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90634121b39ca2e15abc40ee2622b3d7e42d823c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90634121b39ca2e15abc40ee2622b3d7e42d823c", "html_url": "https://github.com/rust-lang/rust/commit/90634121b39ca2e15abc40ee2622b3d7e42d823c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90634121b39ca2e15abc40ee2622b3d7e42d823c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c09bfee2f44754bed46673517ba906f362d951e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c09bfee2f44754bed46673517ba906f362d951e", "html_url": "https://github.com/rust-lang/rust/commit/8c09bfee2f44754bed46673517ba906f362d951e"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "6e63bb073c8c4378a27ac9f2c94fa28971381ce2", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90634121b39ca2e15abc40ee2622b3d7e42d823c/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90634121b39ca2e15abc40ee2622b3d7e42d823c/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=90634121b39ca2e15abc40ee2622b3d7e42d823c", "patch": "@@ -241,7 +241,7 @@ impl<'tcx> Stack {\n \n     /// Find the first write-incompatible item above the given one --\n     /// i.e, find the height to which the stack will be truncated when writing to `granting`.\n-    fn find_first_write_incompaible(&self, granting: usize) -> usize {\n+    fn find_first_write_incompatible(&self, granting: usize) -> usize {\n         let perm = self.borrows[granting].perm;\n         match perm {\n             Permission::SharedReadOnly =>\n@@ -309,7 +309,7 @@ impl<'tcx> Stack {\n         if access == AccessKind::Write {\n             // Remove everything above the write-compatible items, like a proper stack. This makes sure read-only and unique\n             // pointers become invalid on write accesses (ensures F2a, and ensures U2 for write accesses).\n-            let first_incompatible_idx = self.find_first_write_incompaible(granting_idx);\n+            let first_incompatible_idx = self.find_first_write_incompatible(granting_idx);\n             for item in self.borrows.drain(first_incompatible_idx..).rev() {\n                 trace!(\"access: popping item {:?}\", item);\n                 Stack::check_protector(&item, Some(tag), global)?;\n@@ -391,7 +391,7 @@ impl<'tcx> Stack {\n             // access.  Instead of popping the stack, we insert the item at the place the stack would\n             // be popped to (i.e., we insert it above all the write-compatible items).\n             // This ensures F2b by adding the new item below any potentially existing `SharedReadOnly`.\n-            self.find_first_write_incompaible(granting_idx)\n+            self.find_first_write_incompatible(granting_idx)\n         } else {\n             // A \"safe\" reborrow for a pointer that actually expects some aliasing guarantees.\n             // Here, creating a reference actually counts as an access."}]}