{"sha": "295225b660e1ddfd4a476a14aa12b37ae140f91d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NTIyNWI2NjBlMWRkZmQ0YTQ3NmExNGFhMTJiMzdhZTE0MGY5MWQ=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-12-02T23:16:12Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-08-16T03:55:27Z"}, "message": "Uplift the `invalid_atomic_ordering` lint from clippy to rustc\n\n- Deprecate clippy::invalid_atomic_ordering\n- Use rustc_diagnostic_item for the orderings in the invalid_atomic_ordering lint\n- Reduce code duplication\n- Give up on making enum variants diagnostic items and just look for\n`Ordering` instead\n\n  I ran into tons of trouble with this because apparently the change to\n  store HIR attrs in a side table also gave the DefIds of the\n  constructor instead of the variant itself. So I had to change\n  `matches_ordering` to also check the grandparent of the defid as well.\n\n- Rename `atomic_ordering_x` symbols to just the name of the variant\n- Fix typos in checks - there were a few places that said \"may not be\n  Release\" in the diagnostic but actually checked for SeqCst in the lint.\n- Make constant items const\n- Use fewer diagnostic items\n- Only look at arguments after making sure the method matches\n\n  This prevents an ICE when there aren't enough arguments.\n\n- Ignore trait methods\n- Only check Ctors instead of going through `qpath_res`\n\n  The functions take values, so this couldn't ever be anything else.\n\n- Add if_chain to allowed dependencies\n- Fix grammar\n- Remove unnecessary allow", "tree": {"sha": "115d01a5d050c4dd85dc56826e9cf71bd5af9dbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/115d01a5d050c4dd85dc56826e9cf71bd5af9dbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/295225b660e1ddfd4a476a14aa12b37ae140f91d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/295225b660e1ddfd4a476a14aa12b37ae140f91d", "html_url": "https://github.com/rust-lang/rust/commit/295225b660e1ddfd4a476a14aa12b37ae140f91d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/295225b660e1ddfd4a476a14aa12b37ae140f91d/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "html_url": "https://github.com/rust-lang/rust/commit/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc"}], "stats": {"total": 1434, "additions": 9, "deletions": 1425}, "files": [{"sha": "cece28e8b3c3f110afa7a5d1c7224d9b26441efd", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "removed", "additions": 0, "deletions": 230, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,230 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::match_def_path;\n-use if_chain::if_chain;\n-use rustc_hir::def_id::DefId;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for usage of invalid atomic\n-    /// ordering in atomic loads/stores/exchanges/updates and\n-    /// memory fences.\n-    ///\n-    /// ### Why is this bad?\n-    /// Using an invalid atomic ordering\n-    /// will cause a panic at run-time.\n-    ///\n-    /// ### Example\n-    /// ```rust,no_run\n-    /// # use std::sync::atomic::{self, AtomicU8, Ordering};\n-    ///\n-    /// let x = AtomicU8::new(0);\n-    ///\n-    /// // Bad: `Release` and `AcqRel` cannot be used for `load`.\n-    /// let _ = x.load(Ordering::Release);\n-    /// let _ = x.load(Ordering::AcqRel);\n-    ///\n-    /// // Bad: `Acquire` and `AcqRel` cannot be used for `store`.\n-    /// x.store(1, Ordering::Acquire);\n-    /// x.store(2, Ordering::AcqRel);\n-    ///\n-    /// // Bad: `Relaxed` cannot be used as a fence's ordering.\n-    /// atomic::fence(Ordering::Relaxed);\n-    /// atomic::compiler_fence(Ordering::Relaxed);\n-    ///\n-    /// // Bad: `Release` and `AcqRel` are both always invalid\n-    /// // for the failure ordering (the last arg).\n-    /// let _ = x.compare_exchange(1, 2, Ordering::SeqCst, Ordering::Release);\n-    /// let _ = x.compare_exchange_weak(2, 3, Ordering::AcqRel, Ordering::AcqRel);\n-    ///\n-    /// // Bad: The failure ordering is not allowed to be\n-    /// // stronger than the success order, and `SeqCst` is\n-    /// // stronger than `Relaxed`.\n-    /// let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |val| Some(val + val));\n-    /// ```\n-    pub INVALID_ATOMIC_ORDERING,\n-    correctness,\n-    \"usage of invalid atomic ordering in atomic operations and memory fences\"\n-}\n-\n-declare_lint_pass!(AtomicOrdering => [INVALID_ATOMIC_ORDERING]);\n-\n-const ATOMIC_TYPES: [&str; 12] = [\n-    \"AtomicBool\",\n-    \"AtomicI8\",\n-    \"AtomicI16\",\n-    \"AtomicI32\",\n-    \"AtomicI64\",\n-    \"AtomicIsize\",\n-    \"AtomicPtr\",\n-    \"AtomicU8\",\n-    \"AtomicU16\",\n-    \"AtomicU32\",\n-    \"AtomicU64\",\n-    \"AtomicUsize\",\n-];\n-\n-fn type_is_atomic(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    if let ty::Adt(&ty::AdtDef { did, .. }, _) = cx.typeck_results().expr_ty(expr).kind() {\n-        ATOMIC_TYPES\n-            .iter()\n-            .any(|ty| match_def_path(cx, did, &[\"core\", \"sync\", \"atomic\", ty]))\n-    } else {\n-        false\n-    }\n-}\n-\n-fn match_ordering_def_path(cx: &LateContext<'_>, did: DefId, orderings: &[&str]) -> bool {\n-    orderings\n-        .iter()\n-        .any(|ordering| match_def_path(cx, did, &[\"core\", \"sync\", \"atomic\", \"Ordering\", ordering]))\n-}\n-\n-fn check_atomic_load_store(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-    if_chain! {\n-        if let ExprKind::MethodCall(method_path, _, args, _) = &expr.kind;\n-        let method = method_path.ident.name.as_str();\n-        if type_is_atomic(cx, &args[0]);\n-        if method == \"load\" || method == \"store\";\n-        let ordering_arg = if method == \"load\" { &args[1] } else { &args[2] };\n-        if let ExprKind::Path(ref ordering_qpath) = ordering_arg.kind;\n-        if let Some(ordering_def_id) = cx.qpath_res(ordering_qpath, ordering_arg.hir_id).opt_def_id();\n-        then {\n-            if method == \"load\" &&\n-                match_ordering_def_path(cx, ordering_def_id, &[\"Release\", \"AcqRel\"]) {\n-                span_lint_and_help(\n-                    cx,\n-                    INVALID_ATOMIC_ORDERING,\n-                    ordering_arg.span,\n-                    \"atomic loads cannot have `Release` and `AcqRel` ordering\",\n-                    None,\n-                    \"consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\"\n-                );\n-            } else if method == \"store\" &&\n-                match_ordering_def_path(cx, ordering_def_id, &[\"Acquire\", \"AcqRel\"]) {\n-                span_lint_and_help(\n-                    cx,\n-                    INVALID_ATOMIC_ORDERING,\n-                    ordering_arg.span,\n-                    \"atomic stores cannot have `Acquire` and `AcqRel` ordering\",\n-                    None,\n-                    \"consider using ordering modes `Release`, `SeqCst` or `Relaxed`\"\n-                );\n-            }\n-        }\n-    }\n-}\n-\n-fn check_memory_fence(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-    if_chain! {\n-        if let ExprKind::Call(func, args) = expr.kind;\n-        if let ExprKind::Path(ref func_qpath) = func.kind;\n-        if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n-        if [\"fence\", \"compiler_fence\"]\n-            .iter()\n-            .any(|func| match_def_path(cx, def_id, &[\"core\", \"sync\", \"atomic\", func]));\n-        if let ExprKind::Path(ref ordering_qpath) = &args[0].kind;\n-        if let Some(ordering_def_id) = cx.qpath_res(ordering_qpath, args[0].hir_id).opt_def_id();\n-        if match_ordering_def_path(cx, ordering_def_id, &[\"Relaxed\"]);\n-        then {\n-            span_lint_and_help(\n-                cx,\n-                INVALID_ATOMIC_ORDERING,\n-                args[0].span,\n-                \"memory fences cannot have `Relaxed` ordering\",\n-                None,\n-                \"consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`\"\n-            );\n-        }\n-    }\n-}\n-\n-fn opt_ordering_defid(cx: &LateContext<'_>, ord_arg: &Expr<'_>) -> Option<DefId> {\n-    if let ExprKind::Path(ref ord_qpath) = ord_arg.kind {\n-        cx.qpath_res(ord_qpath, ord_arg.hir_id).opt_def_id()\n-    } else {\n-        None\n-    }\n-}\n-\n-fn check_atomic_compare_exchange(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-    if_chain! {\n-        if let ExprKind::MethodCall(method_path, _, args, _) = &expr.kind;\n-        let method = method_path.ident.name.as_str();\n-        if type_is_atomic(cx, &args[0]);\n-        if method == \"compare_exchange\" || method == \"compare_exchange_weak\" || method == \"fetch_update\";\n-        let (success_order_arg, failure_order_arg) = if method == \"fetch_update\" {\n-            (&args[1], &args[2])\n-        } else {\n-            (&args[3], &args[4])\n-        };\n-        if let Some(fail_ordering_def_id) = opt_ordering_defid(cx, failure_order_arg);\n-        then {\n-            // Helper type holding on to some checking and error reporting data. Has\n-            // - (success ordering name,\n-            // - list of failure orderings forbidden by the success order,\n-            // - suggestion message)\n-            type OrdLintInfo = (&'static str, &'static [&'static str], &'static str);\n-            let relaxed: OrdLintInfo = (\"Relaxed\", &[\"SeqCst\", \"Acquire\"], \"ordering mode `Relaxed`\");\n-            let acquire: OrdLintInfo = (\"Acquire\", &[\"SeqCst\"], \"ordering modes `Acquire` or `Relaxed`\");\n-            let seq_cst: OrdLintInfo = (\"SeqCst\", &[], \"ordering modes `Acquire`, `SeqCst` or `Relaxed`\");\n-            let release = (\"Release\", relaxed.1, relaxed.2);\n-            let acqrel = (\"AcqRel\", acquire.1, acquire.2);\n-            let search = [relaxed, acquire, seq_cst, release, acqrel];\n-\n-            let success_lint_info = opt_ordering_defid(cx, success_order_arg)\n-                .and_then(|success_ord_def_id| -> Option<OrdLintInfo> {\n-                    search\n-                        .iter()\n-                        .find(|(ordering, ..)| {\n-                            match_def_path(cx, success_ord_def_id,\n-                                &[\"core\", \"sync\", \"atomic\", \"Ordering\", ordering])\n-                        })\n-                        .copied()\n-                });\n-\n-            if match_ordering_def_path(cx, fail_ordering_def_id, &[\"Release\", \"AcqRel\"]) {\n-                // If we don't know the success order is, use what we'd suggest\n-                // if it were maximally permissive.\n-                let suggested = success_lint_info.unwrap_or(seq_cst).2;\n-                span_lint_and_help(\n-                    cx,\n-                    INVALID_ATOMIC_ORDERING,\n-                    failure_order_arg.span,\n-                    &format!(\n-                        \"{}'s failure ordering may not be `Release` or `AcqRel`\",\n-                        method,\n-                    ),\n-                    None,\n-                    &format!(\"consider using {} instead\", suggested),\n-                );\n-            } else if let Some((success_ord_name, bad_ords_given_success, suggested)) = success_lint_info {\n-                if match_ordering_def_path(cx, fail_ordering_def_id, bad_ords_given_success) {\n-                    span_lint_and_help(\n-                        cx,\n-                        INVALID_ATOMIC_ORDERING,\n-                        failure_order_arg.span,\n-                        &format!(\n-                            \"{}'s failure ordering may not be stronger than the success ordering of `{}`\",\n-                            method,\n-                            success_ord_name,\n-                        ),\n-                        None,\n-                        &format!(\"consider using {} instead\", suggested),\n-                    );\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-impl<'tcx> LateLintPass<'tcx> for AtomicOrdering {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        check_atomic_load_store(cx, expr);\n-        check_memory_fence(cx, expr);\n-        check_atomic_compare_exchange(cx, expr);\n-    }\n-}"}, {"sha": "e455c8db03f52a559982252084cda9349b5efc56", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/295225b660e1ddfd4a476a14aa12b37ae140f91d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295225b660e1ddfd4a476a14aa12b37ae140f91d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=295225b660e1ddfd4a476a14aa12b37ae140f91d", "patch": "@@ -165,7 +165,6 @@ mod asm_syntax;\n mod assertions_on_constants;\n mod assign_ops;\n mod async_yields_async;\n-mod atomic_ordering;\n mod attrs;\n mod await_holding_invalid;\n mod bit_mask;\n@@ -537,7 +536,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         assign_ops::ASSIGN_OP_PATTERN,\n         assign_ops::MISREFACTORED_ASSIGN_OP,\n         async_yields_async::ASYNC_YIELDS_ASYNC,\n-        atomic_ordering::INVALID_ATOMIC_ORDERING,\n         attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n         attrs::DEPRECATED_CFG_ATTR,\n         attrs::DEPRECATED_SEMVER,\n@@ -1174,7 +1172,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(assign_ops::ASSIGN_OP_PATTERN),\n         LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n         LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n-        LintId::of(atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n         LintId::of(attrs::DEPRECATED_CFG_ATTR),\n         LintId::of(attrs::DEPRECATED_SEMVER),\n@@ -1670,7 +1667,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n         LintId::of(approx_const::APPROX_CONSTANT),\n         LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n-        LintId::of(atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(attrs::DEPRECATED_SEMVER),\n         LintId::of(attrs::MISMATCHED_TARGET_OS),\n         LintId::of(attrs::USELESS_ATTRIBUTE),\n@@ -2044,7 +2040,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box floating_point_arithmetic::FloatingPointArithmetic);\n     store.register_early_pass(|| box as_conversions::AsConversions);\n     store.register_late_pass(|| box let_underscore::LetUnderscore);\n-    store.register_late_pass(|| box atomic_ordering::AtomicOrdering);\n     store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports);\n     let max_fn_params_bools = conf.max_fn_params_bools;\n     let max_struct_bools = conf.max_struct_bools;\n@@ -2183,6 +2178,7 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::temporary_cstring_as_ptr\", \"temporary_cstring_as_ptr\");\n     ls.register_renamed(\"clippy::panic_params\", \"non_fmt_panics\");\n     ls.register_renamed(\"clippy::unknown_clippy_lints\", \"unknown_lints\");\n+    ls.register_renamed(\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "cdbde79b19ebf53f8db58975f6258a9bd13e6abc", "filename": "tests/ui/atomic_ordering_bool.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_bool.rs?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,25 +0,0 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n-use std::sync::atomic::{AtomicBool, Ordering};\n-\n-fn main() {\n-    let x = AtomicBool::new(true);\n-\n-    // Allowed load ordering modes\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-\n-    // Disallowed load ordering modes\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    // Allowed store ordering modes\n-    x.store(false, Ordering::Release);\n-    x.store(false, Ordering::SeqCst);\n-    x.store(false, Ordering::Relaxed);\n-\n-    // Disallowed store ordering modes\n-    x.store(false, Ordering::Acquire);\n-    x.store(false, Ordering::AcqRel);\n-}"}, {"sha": "397b893aed96478901847e26a6b0ae032b57ca51", "filename": "tests/ui/atomic_ordering_bool.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_bool.stderr?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,35 +0,0 @@\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_bool.rs:14:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_bool.rs:15:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_bool.rs:23:20\n-   |\n-LL |     x.store(false, Ordering::Acquire);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_bool.rs:24:20\n-   |\n-LL |     x.store(false, Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "1ddc12f9ab21341b5c93998a2ab12136a09b6e9a", "filename": "tests/ui/atomic_ordering_exchange.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_exchange.rs?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,45 +0,0 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n-use std::sync::atomic::{AtomicUsize, Ordering};\n-\n-fn main() {\n-    // `compare_exchange` (not weak) testing\n-    let x = AtomicUsize::new(0);\n-\n-    // Allowed ordering combos\n-    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Relaxed);\n-    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Acquire);\n-    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Relaxed);\n-    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Relaxed);\n-    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Acquire);\n-    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Relaxed);\n-    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Relaxed);\n-    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Acquire);\n-    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::SeqCst);\n-\n-    // AcqRel is always forbidden as a failure ordering\n-    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n-    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n-    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n-    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n-    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n-\n-    // Release is always forbidden as a failure ordering\n-    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n-    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n-    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n-    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n-    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n-\n-    // Release success order forbids failure order of Acquire or SeqCst\n-    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n-    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n-\n-    // Relaxed success order also forbids failure order of Acquire or SeqCst\n-    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n-    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n-\n-    // Acquire/AcqRel forbids failure order of SeqCst\n-    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n-    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n-}"}, {"sha": "4b9bfef79748ce66008ee19963669a5c943c7c17", "filename": "tests/ui/atomic_ordering_exchange.stderr", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_exchange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_exchange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_exchange.stderr?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,131 +0,0 @@\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:21:57\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n-   |                                                         ^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:22:57\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n-   |                                                         ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:23:57\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n-   |                                                         ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:24:56\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n-   |                                                        ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:25:56\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n-   |                                                        ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:28:57\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:29:57\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:30:57\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:31:56\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n-   |                                                        ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:32:56\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n-   |                                                        ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/atomic_ordering_exchange.rs:35:57\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/atomic_ordering_exchange.rs:36:57\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n-   |                                                         ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/atomic_ordering_exchange.rs:39:57\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n-   |                                                         ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/atomic_ordering_exchange.rs:40:57\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Acquire`\n-  --> $DIR/atomic_ordering_exchange.rs:43:57\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n-   |                                                         ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:44:56\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n-   |                                                        ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: aborting due to 16 previous errors\n-"}, {"sha": "5906990250728851196101c3da284ba9c7faedd0", "filename": "tests/ui/atomic_ordering_exchange_weak.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_exchange_weak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_exchange_weak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_exchange_weak.rs?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,47 +0,0 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n-use std::sync::atomic::{AtomicPtr, Ordering};\n-\n-fn main() {\n-    let ptr = &mut 5;\n-    let ptr2 = &mut 10;\n-    // `compare_exchange_weak` testing\n-    let x = AtomicPtr::new(ptr);\n-\n-    // Allowed ordering combos\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Relaxed);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Acquire);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Relaxed);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Relaxed);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Acquire);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Relaxed);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Relaxed);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Acquire);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::SeqCst);\n-\n-    // AcqRel is always forbidden as a failure ordering\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n-\n-    // Release is always forbidden as a failure ordering\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n-\n-    // Release success order forbids failure order of Acquire or SeqCst\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n-\n-    // Relaxed success order also forbids failure order of Acquire or SeqCst\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n-\n-    // Acquire/AcqRel forbids failure order of SeqCst\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n-}"}, {"sha": "de7026f3ffafa1ecdc9c1bc7ddcfdd1ae445a3da", "filename": "tests/ui/atomic_ordering_exchange_weak.stderr", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_exchange_weak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_exchange_weak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_exchange_weak.stderr?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,131 +0,0 @@\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:23:67\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:24:67\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:25:67\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:26:66\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n-   |                                                                  ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:27:66\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n-   |                                                                  ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:30:67\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:31:67\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:32:67\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:33:66\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n-   |                                                                  ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:34:66\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n-   |                                                                  ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:37:67\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:38:67\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:41:67\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:42:67\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Acquire`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:45:67\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:46:66\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n-   |                                                                  ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: aborting due to 16 previous errors\n-"}, {"sha": "5ee5182ca051ade720278e764c4d9b5edb3d3d7a", "filename": "tests/ui/atomic_ordering_fence.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_fence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_fence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_fence.rs?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,20 +0,0 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n-use std::sync::atomic::{compiler_fence, fence, Ordering};\n-\n-fn main() {\n-    // Allowed fence ordering modes\n-    fence(Ordering::Acquire);\n-    fence(Ordering::Release);\n-    fence(Ordering::AcqRel);\n-    fence(Ordering::SeqCst);\n-\n-    // Disallowed fence ordering modes\n-    fence(Ordering::Relaxed);\n-\n-    compiler_fence(Ordering::Acquire);\n-    compiler_fence(Ordering::Release);\n-    compiler_fence(Ordering::AcqRel);\n-    compiler_fence(Ordering::SeqCst);\n-    compiler_fence(Ordering::Relaxed);\n-}"}, {"sha": "3ceff27d9ad5e7164e95f565a9e906140e2b5550", "filename": "tests/ui/atomic_ordering_fence.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_fence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_fence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_fence.stderr?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,19 +0,0 @@\n-error: memory fences cannot have `Relaxed` ordering\n-  --> $DIR/atomic_ordering_fence.rs:13:11\n-   |\n-LL |     fence(Ordering::Relaxed);\n-   |           ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n-   = help: consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`\n-\n-error: memory fences cannot have `Relaxed` ordering\n-  --> $DIR/atomic_ordering_fence.rs:19:20\n-   |\n-LL |     compiler_fence(Ordering::Relaxed);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "550bdb001e4cd1270b3bc6d32fd5e53c04f28bfe", "filename": "tests/ui/atomic_ordering_fetch_update.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_fetch_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_fetch_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_fetch_update.rs?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,45 +0,0 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n-use std::sync::atomic::{AtomicIsize, Ordering};\n-\n-fn main() {\n-    // `fetch_update` testing\n-    let x = AtomicIsize::new(0);\n-\n-    // Allowed ordering combos\n-    let _ = x.fetch_update(Ordering::Relaxed, Ordering::Relaxed, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::Acquire, Ordering::Acquire, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::Acquire, Ordering::Relaxed, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::Release, Ordering::Relaxed, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::AcqRel, Ordering::Acquire, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::AcqRel, Ordering::Relaxed, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::SeqCst, Ordering::Relaxed, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::SeqCst, Ordering::Acquire, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |old| Some(old + 1));\n-\n-    // AcqRel is always forbidden as a failure ordering\n-    let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n-\n-    // Release is always forbidden as a failure ordering\n-    let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n-\n-    // Release success order forbids failure order of Acquire or SeqCst\n-    let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n-\n-    // Relaxed success order also forbids failure order of Acquire or SeqCst\n-    let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n-\n-    // Acquire/AcqRel forbids failure order of SeqCst\n-    let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n-}"}, {"sha": "694548ece97b250b52d756ee143437646e1a7353", "filename": "tests/ui/atomic_ordering_fetch_update.stderr", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_fetch_update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_fetch_update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_fetch_update.stderr?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,131 +0,0 @@\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:21:47\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:22:47\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:23:47\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:24:46\n-   |\n-LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:25:46\n-   |\n-LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:28:47\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:29:47\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:30:47\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:31:46\n-   |\n-LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:32:46\n-   |\n-LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/atomic_ordering_fetch_update.rs:35:47\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/atomic_ordering_fetch_update.rs:36:47\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/atomic_ordering_fetch_update.rs:39:47\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/atomic_ordering_fetch_update.rs:40:47\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Acquire`\n-  --> $DIR/atomic_ordering_fetch_update.rs:43:47\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: fetch_update's failure ordering may not be stronger than the success ordering of `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:44:46\n-   |\n-LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n-\n-error: aborting due to 16 previous errors\n-"}, {"sha": "40a00ba3de3505435770d984a270a36bd98d88ae", "filename": "tests/ui/atomic_ordering_int.rs", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_int.rs?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,86 +0,0 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n-use std::sync::atomic::{AtomicI16, AtomicI32, AtomicI64, AtomicI8, AtomicIsize, Ordering};\n-\n-fn main() {\n-    // `AtomicI8` test cases\n-    let x = AtomicI8::new(0);\n-\n-    // Allowed load ordering modes\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-\n-    // Disallowed load ordering modes\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    // Allowed store ordering modes\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-\n-    // Disallowed store ordering modes\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicI16` test cases\n-    let x = AtomicI16::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicI32` test cases\n-    let x = AtomicI32::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicI64` test cases\n-    let x = AtomicI64::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicIsize` test cases\n-    let x = AtomicIsize::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-}"}, {"sha": "bbaf234d3c9f8d0ef3d5ba2a828d9bb05d2af2fb", "filename": "tests/ui/atomic_ordering_int.stderr", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_int.stderr?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,163 +0,0 @@\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:15:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:16:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:24:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:25:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:33:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:34:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:39:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:40:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:48:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:49:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:54:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:55:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:63:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:64:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:69:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:70:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:78:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:79:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:84:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:85:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: aborting due to 20 previous errors\n-"}, {"sha": "ecbb05c7fbc39508e993bc56b5822fbedf5f03d8", "filename": "tests/ui/atomic_ordering_ptr.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_ptr.rs?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,27 +0,0 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n-use std::sync::atomic::{AtomicPtr, Ordering};\n-\n-fn main() {\n-    let ptr = &mut 5;\n-    let other_ptr = &mut 10;\n-    let x = AtomicPtr::new(ptr);\n-\n-    // Allowed load ordering modes\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-\n-    // Disallowed load ordering modes\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    // Allowed store ordering modes\n-    x.store(other_ptr, Ordering::Release);\n-    x.store(other_ptr, Ordering::SeqCst);\n-    x.store(other_ptr, Ordering::Relaxed);\n-\n-    // Disallowed store ordering modes\n-    x.store(other_ptr, Ordering::Acquire);\n-    x.store(other_ptr, Ordering::AcqRel);\n-}"}, {"sha": "558ae55518d5a9e26e302a715d0976beeeb2593f", "filename": "tests/ui/atomic_ordering_ptr.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_ptr.stderr?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,35 +0,0 @@\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_ptr.rs:16:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_ptr.rs:17:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_ptr.rs:25:24\n-   |\n-LL |     x.store(other_ptr, Ordering::Acquire);\n-   |                        ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_ptr.rs:26:24\n-   |\n-LL |     x.store(other_ptr, Ordering::AcqRel);\n-   |                        ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "a0d5d7c401035d686cd18a90617d5d7c81c28a1e", "filename": "tests/ui/atomic_ordering_uint.rs", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_uint.rs?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,86 +0,0 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n-use std::sync::atomic::{AtomicU16, AtomicU32, AtomicU64, AtomicU8, AtomicUsize, Ordering};\n-\n-fn main() {\n-    // `AtomicU8` test cases\n-    let x = AtomicU8::new(0);\n-\n-    // Allowed load ordering modes\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-\n-    // Disallowed load ordering modes\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    // Allowed store ordering modes\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-\n-    // Disallowed store ordering modes\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicU16` test cases\n-    let x = AtomicU16::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicU32` test cases\n-    let x = AtomicU32::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicU64` test cases\n-    let x = AtomicU64::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicUsize` test cases\n-    let x = AtomicUsize::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-}"}, {"sha": "5703135bcf1e2a4bb613eba2bfa984f7002ae9b0", "filename": "tests/ui/atomic_ordering_uint.stderr", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc/tests%2Fui%2Fatomic_ordering_uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_uint.stderr?ref=c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "patch": "@@ -1,163 +0,0 @@\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:15:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:16:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:24:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:25:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:33:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:34:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:39:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:40:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:48:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:49:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:54:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:55:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:63:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:64:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:69:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:70:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:78:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:79:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:84:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:85:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: aborting due to 20 previous errors\n-"}, {"sha": "1943d0092e6244851b9c5480a879116b788e56b9", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/295225b660e1ddfd4a476a14aa12b37ae140f91d/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295225b660e1ddfd4a476a14aa12b37ae140f91d/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=295225b660e1ddfd4a476a14aa12b37ae140f91d", "patch": "@@ -14,5 +14,6 @@\n #[warn(clippy::filter_map)]\n #[warn(clippy::pub_enum_variant_names)]\n #[warn(clippy::wrong_pub_self_convention)]\n+#[warn(clippy::invalid_atomic_ordering)]\n \n fn main() {}"}, {"sha": "51048e45c0677c208bb8e050edc7fa0169eb8a82", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/295225b660e1ddfd4a476a14aa12b37ae140f91d/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295225b660e1ddfd4a476a14aa12b37ae140f91d/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=295225b660e1ddfd4a476a14aa12b37ae140f91d", "patch": "@@ -96,5 +96,11 @@ error: lint `clippy::wrong_pub_self_convention` has been removed: set the `avoid\n LL | #[warn(clippy::wrong_pub_self_convention)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 16 previous errors\n+error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n+  --> $DIR/deprecated.rs:17:8\n+   |\n+LL | #[warn(clippy::invalid_atomic_ordering)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n+\n+error: aborting due to 17 previous errors\n "}]}