{"sha": "b247594a39cb8e2c3d8d193860eac0eb1c63e1ae", "node_id": "C_kwDOAAsO6NoAKGIyNDc1OTRhMzljYjhlMmMzZDhkMTkzODYwZWFjMGViMWM2M2UxYWU", "commit": {"author": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-07-28T20:54:23Z"}, "committer": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-08-08T19:04:44Z"}, "message": "Prevent some false positives", "tree": {"sha": "3eb5e46a2c06f80491ae17db8f1e4aa2be8cd365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eb5e46a2c06f80491ae17db8f1e4aa2be8cd365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae", "html_url": "https://github.com/rust-lang/rust/commit/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/comments", "author": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e", "html_url": "https://github.com/rust-lang/rust/commit/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "96b1484528c74da10c7ca46ed15e121db7ae2b93", "filename": "clippy_lints/src/methods/iter_once_empty.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/clippy_lints%2Fsrc%2Fmethods%2Fiter_once_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/clippy_lints%2Fsrc%2Fmethods%2Fiter_once_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_once_empty.rs?ref=b247594a39cb8e2c3d8d193860eac0eb1c63e1ae", "patch": "@@ -1,11 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::is_lang_ctor;\n-use clippy_utils::is_no_std_crate;\n use clippy_utils::source::snippet;\n+use clippy_utils::{get_expr_use_or_unification_node, is_lang_ctor, is_no_std_crate};\n \n use rustc_errors::Applicability;\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::{Expr, ExprKind, Node};\n use rustc_lint::LateContext;\n \n use super::{ITER_EMPTY, ITER_ONCE};\n@@ -56,6 +55,24 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, method_name:\n         _ => return,\n     };\n \n+    let is_unified = match get_expr_use_or_unification_node(cx.tcx, expr) {\n+        Some((Node::Expr(parent), child_id)) => match parent.kind {\n+            ExprKind::If(e, _, _) | ExprKind::Match(e, _, _) if e.hir_id == child_id => false,\n+            ExprKind::If(_, _, _)\n+            | ExprKind::Match(_, _, _)\n+            | ExprKind::Closure(_)\n+            | ExprKind::Ret(_)\n+            | ExprKind::Break(_, _) => true,\n+            _ => false,\n+        },\n+        Some((Node::Stmt(_) | Node::Local(_), _)) => false,\n+        _ => true,\n+    };\n+\n+    if is_unified {\n+        return;\n+    }\n+\n     if let Some(i) = item {\n         let sugg = format!(\n             \"{}::iter::once({}{})\","}, {"sha": "353a6f6b899ea3e743ed57982b8acd130d185e14", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=b247594a39cb8e2c3d8d193860eac0eb1c63e1ae", "patch": "@@ -490,7 +490,6 @@ impl Types {\n                         }\n                     }\n                 }\n-                #[allow(clippy::iter_empty)]\n                 match *qpath {\n                     QPath::Resolved(Some(ty), p) => {\n                         context.is_nested_call = true;"}, {"sha": "dcfc03475b423d134252b1eedd5c1db22e972a1d", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=b247594a39cb8e2c3d8d193860eac0eb1c63e1ae", "patch": "@@ -484,7 +484,6 @@ pub fn def_path_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n     }\n     fn find_primitive<'tcx>(tcx: TyCtxt<'tcx>, name: &str) -> impl Iterator<Item = DefId> + 'tcx {\n         let single = |ty| tcx.incoherent_impls(ty).iter().copied();\n-        #[allow(clippy::iter_empty)]\n         let empty = || [].iter().copied();\n         match name {\n             \"bool\" => single(BoolSimplifiedType),"}, {"sha": "ad1e106d2b1cd9fcb05407acb8b84ead14d01505", "filename": "tests/ui/iter_empty.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/tests%2Fui%2Fiter_empty.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/tests%2Fui%2Fiter_empty.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_empty.fixed?ref=b247594a39cb8e2c3d8d193860eac0eb1c63e1ae", "patch": "@@ -13,6 +13,14 @@ fn array() {\n     // Don't trigger on non-iter methods\n     let _: Option<String> = None.clone();\n     let _: [String; 0] = [].clone();\n+\n+    // Don't trigger on match or if branches\n+    let _ = match 123 {\n+        123 => [].iter(),\n+        _ => [\"test\"].iter(),\n+    };\n+\n+    let _ = if false { [\"test\"].iter() } else { [].iter() };\n }\n \n macro_rules! in_macros {"}, {"sha": "625149b5da5111199cc3ab419eb12c3f978176dd", "filename": "tests/ui/iter_empty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/tests%2Fui%2Fiter_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/tests%2Fui%2Fiter_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_empty.rs?ref=b247594a39cb8e2c3d8d193860eac0eb1c63e1ae", "patch": "@@ -13,6 +13,14 @@ fn array() {\n     // Don't trigger on non-iter methods\n     let _: Option<String> = None.clone();\n     let _: [String; 0] = [].clone();\n+\n+    // Don't trigger on match or if branches\n+    let _ = match 123 {\n+        123 => [].iter(),\n+        _ => [\"test\"].iter(),\n+    };\n+\n+    let _ = if false { [\"test\"].iter() } else { [].iter() };\n }\n \n macro_rules! in_macros {"}, {"sha": "0495bc47e4b214e5a507fb33289f0cbde7f88a52", "filename": "tests/ui/iter_once.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/tests%2Fui%2Fiter_once.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/tests%2Fui%2Fiter_once.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_once.fixed?ref=b247594a39cb8e2c3d8d193860eac0eb1c63e1ae", "patch": "@@ -13,6 +13,14 @@ fn array() {\n     // Don't trigger on non-iter methods\n     let _: Option<String> = Some(\"test\".to_string()).clone();\n     let _: [String; 1] = [\"test\".to_string()].clone();\n+\n+    // Don't trigger on match or if branches\n+    let _ = match 123 {\n+        123 => [].iter(),\n+        _ => [\"test\"].iter(),\n+    };\n+\n+    let _ = if false { [\"test\"].iter() } else { [].iter() };\n }\n \n macro_rules! in_macros {"}, {"sha": "96641109bb98455ce8ce28e661d78d46a99daba5", "filename": "tests/ui/iter_once.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/tests%2Fui%2Fiter_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b247594a39cb8e2c3d8d193860eac0eb1c63e1ae/tests%2Fui%2Fiter_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_once.rs?ref=b247594a39cb8e2c3d8d193860eac0eb1c63e1ae", "patch": "@@ -13,6 +13,14 @@ fn array() {\n     // Don't trigger on non-iter methods\n     let _: Option<String> = Some(\"test\".to_string()).clone();\n     let _: [String; 1] = [\"test\".to_string()].clone();\n+\n+    // Don't trigger on match or if branches\n+    let _ = match 123 {\n+        123 => [].iter(),\n+        _ => [\"test\"].iter(),\n+    };\n+\n+    let _ = if false { [\"test\"].iter() } else { [].iter() };\n }\n \n macro_rules! in_macros {"}]}