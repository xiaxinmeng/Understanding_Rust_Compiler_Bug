{"sha": "6b7cacb2c99567a76cf0d5ce6833a129c8bb8814", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiN2NhY2IyYzk5NTY3YTc2Y2YwZDVjZTY4MzNhMTI5YzhiYjg4MTQ=", "commit": {"author": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-06-08T08:37:11Z"}, "committer": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-06-15T08:40:56Z"}, "message": "Export all fns with extern indicator", "tree": {"sha": "f0a358cb6e0cb9ea6a0aeedc366b00dd66b3a4a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0a358cb6e0cb9ea6a0aeedc366b00dd66b3a4a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814", "html_url": "https://github.com/rust-lang/rust/commit/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/comments", "author": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f62903b74a8630fa62e721f69e6621d1d441e7f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f62903b74a8630fa62e721f69e6621d1d441e7f1", "html_url": "https://github.com/rust-lang/rust/commit/f62903b74a8630fa62e721f69e6621d1d441e7f1"}], "stats": {"total": 124, "additions": 74, "deletions": 50}, "files": [{"sha": "98f7da8361cc408b9041265f0e9a43dfa2bd5bf8", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=6b7cacb2c99567a76cf0d5ce6833a129c8bb8814", "patch": "@@ -90,10 +90,11 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n                     let def_id = tcx.hir().local_def_id(hir_id);\n                     let generics = tcx.generics_of(def_id);\n                     if !generics.requires_monomorphization(tcx)\n-                        && (!Instance::mono(tcx, def_id.to_def_id())\n-                            .def\n-                            .generates_cgu_internal_copy(tcx)\n-                            || tcx.inline_exportable(def_id.to_def_id()))\n+                        // Functions marked with #[inline] are codegened with \"internal\"\n+                        // linkage and are not exported unless marked with an extern\n+                        // inidicator\n+                        && (!Instance::mono(tcx, def_id.to_def_id()).def.generates_cgu_internal_copy(tcx)\n+                            || tcx.codegen_fn_attrs(def_id.to_def_id()).contains_extern_indicator())\n                     {\n                         Some(def_id)\n                     } else {"}, {"sha": "886690da212d3ef12dc89c593aaa5bf568fea4d9", "filename": "src/librustc_middle/mir/mono.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmono.rs?ref=6b7cacb2c99567a76cf0d5ce6833a129c8bb8814", "patch": "@@ -92,19 +92,23 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::Fn(ref instance) => {\n                 let entry_def_id = tcx.entry_fn(LOCAL_CRATE).map(|(id, _)| id);\n                 // If this function isn't inlined or otherwise has explicit\n-                // linkage, then we'll be creating a globally shared version.\n+                // linkage or an extern indicator, then we'll be creating a\n+                // globally shared version.\n                 if self.explicit_linkage(tcx).is_some()\n                     || !instance.def.generates_cgu_internal_copy(tcx)\n-                    || tcx.inline_exportable(instance.def_id())\n                     || Some(instance.def_id()) == entry_def_id.map(LocalDefId::to_def_id)\n                 {\n                     return InstantiationMode::GloballyShared { may_conflict: false };\n                 }\n \n                 // At this point we don't have explicit linkage and we're an\n                 // inlined function. If we're inlining into all CGUs then we'll\n-                // be creating a local copy per CGU\n-                if generate_cgu_internal_copies {\n+                // be creating a local copy per CGU. We need to watch out here\n+                // for an extern indicator as we don't want to optimise away\n+                // inlined functions that should be exported.\n+                if generate_cgu_internal_copies\n+                    && !tcx.codegen_fn_attrs(instance.def_id()).contains_extern_indicator()\n+                {\n                     return InstantiationMode::LocalCopy;\n                 }\n "}, {"sha": "be15e6c576f69379f628818b89adda626770167b", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=6b7cacb2c99567a76cf0d5ce6833a129c8bb8814", "patch": "@@ -697,10 +697,6 @@ rustc_queries! {\n             storage(ArenaCacheSelector<'tcx>)\n             cache_on_disk_if { true }\n         }\n-\n-        query inline_exportable(def_id: DefId) -> bool {\n-            desc { |tcx| \"computing whether `{}` should be explicitly exported\", tcx.def_path_str(def_id) }\n-        }\n     }\n \n     Other {"}, {"sha": "1d59d749634ee1cae5ac8913cf7ba5c8f6bdf596", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6b7cacb2c99567a76cf0d5ce6833a129c8bb8814", "patch": "@@ -40,7 +40,6 @@ use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, ToPolyTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n-use rustc_session::config::CrateType;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -80,7 +79,6 @@ pub fn provide(providers: &mut Providers<'_>) {\n         static_mutability,\n         generator_kind,\n         codegen_fn_attrs,\n-        inline_exportable,\n         collect_mod_item_types,\n         ..*providers\n     };\n@@ -2601,16 +2599,6 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     codegen_fn_attrs\n }\n \n-fn inline_exportable(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    // Functions marked with #[inline] are only ever codegened\n-    // with \"internal\" linkage and are never exported unless we're\n-    // building a `staticlib` or `cdylib` and they are marked\n-    // `#[no_mangle]`.\n-    tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::NO_MANGLE)\n-        && (tcx.sess.crate_types().contains(&CrateType::Cdylib)\n-            || tcx.sess.crate_types().contains(&CrateType::Staticlib))\n-}\n-\n /// Checks if the provided DefId is a method in a trait impl for a trait which has track_caller\n /// applied to the method prototype.\n fn should_inherit_track_caller(tcx: TyCtxt<'_>, def_id: DefId) -> bool {"}, {"sha": "58f806b5a1f34091fe6741fc6ff930458d9a9dce", "filename": "src/test/codegen/cdylib-external-inline-fns.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Ftest%2Fcodegen%2Fcdylib-external-inline-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Ftest%2Fcodegen%2Fcdylib-external-inline-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcdylib-external-inline-fns.rs?ref=6b7cacb2c99567a76cf0d5ce6833a129c8bb8814", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"cdylib\"]\n+\n+// CHECK: define void @a()\n+#[no_mangle]\n+#[inline]\n+pub extern \"C\" fn a() {}\n+\n+// CHECK: define void @b()\n+#[export_name = \"b\"]\n+#[inline]\n+pub extern \"C\" fn b() {}\n+\n+// CHECK: define void @c()\n+#[no_mangle]\n+#[inline]\n+extern \"C\" fn c() {}\n+\n+// CHECK: define void @d()\n+#[export_name = \"d\"]\n+#[inline]\n+extern \"C\" fn d() {}"}, {"sha": "827de7e5c11d9341647b014a79d684fb1dacd32e", "filename": "src/test/codegen/cdylib-external-no-mangle-fns.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Ftest%2Fcodegen%2Fcdylib-external-no-mangle-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Ftest%2Fcodegen%2Fcdylib-external-no-mangle-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcdylib-external-no-mangle-fns.rs?ref=f62903b74a8630fa62e721f69e6621d1d441e7f1", "patch": "@@ -1,13 +0,0 @@\n-// compile-flags: -C no-prepopulate-passes\n-\n-#![crate_type = \"cdylib\"]\n-\n-// CHECK: define void @a()\n-#[no_mangle]\n-#[inline]\n-pub extern \"C\" fn a() {\n-    // side effect to keep `a` around\n-    unsafe {\n-        core::ptr::read_volatile(&42);\n-    }\n-}"}, {"sha": "793636bb1b030097d0fb02dba2d067cc0dfacc1b", "filename": "src/test/codegen/export-no-mangle.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs?ref=6b7cacb2c99567a76cf0d5ce6833a129c8bb8814", "patch": "@@ -18,4 +18,9 @@ mod private {\n     // CHECK: void @bar()\n     #[export_name = \"bar\"]\n     extern fn bar() {}\n+    \n+    // CHECK: void @baz()\n+    #[export_name = \"baz\"]\n+    #[inline]\n+    extern fn baz() {}\n }"}, {"sha": "aefa9ce21c3ee98dcc7eff91a50e9ff670b68e00", "filename": "src/test/codegen/external-no-mangle-fns.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs?ref=6b7cacb2c99567a76cf0d5ce6833a129c8bb8814", "patch": "@@ -53,3 +53,13 @@ fn x() {\n         core::ptr::read_volatile(&42);\n     }\n }\n+\n+// CHECK: define void @i()\n+#[no_mangle]\n+#[inline]\n+fn i() {}\n+\n+// CHECK: define void @j()\n+#[no_mangle]\n+#[inline]\n+pub fn j() {}"}, {"sha": "8f55a5303311cb3ea17233e36228cad0922de4df", "filename": "src/test/codegen/staticlib-external-inline-fns.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Ftest%2Fcodegen%2Fstaticlib-external-inline-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cacb2c99567a76cf0d5ce6833a129c8bb8814/src%2Ftest%2Fcodegen%2Fstaticlib-external-inline-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstaticlib-external-inline-fns.rs?ref=6b7cacb2c99567a76cf0d5ce6833a129c8bb8814", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"staticlib\"]\n+\n+// CHECK: define void @a()\n+#[no_mangle]\n+#[inline]\n+pub extern \"C\" fn a() {}\n+\n+// CHECK: define void @b()\n+#[export_name = \"b\"]\n+#[inline]\n+pub extern \"C\" fn b() {}\n+\n+// CHECK: define void @c()\n+#[no_mangle]\n+#[inline]\n+extern \"C\" fn c() {}\n+\n+// CHECK: define void @d()\n+#[export_name = \"d\"]\n+#[inline]\n+extern \"C\" fn d() {}"}, {"sha": "0b4a37febb209c5475f6f3600a4aea0215242e32", "filename": "src/test/codegen/staticlib-external-no-mangle-fns.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Ftest%2Fcodegen%2Fstaticlib-external-no-mangle-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Ftest%2Fcodegen%2Fstaticlib-external-no-mangle-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstaticlib-external-no-mangle-fns.rs?ref=f62903b74a8630fa62e721f69e6621d1d441e7f1", "patch": "@@ -1,13 +0,0 @@\n-// compile-flags: -C no-prepopulate-passes\n-\n-#![crate_type = \"staticlib\"]\n-\n-// CHECK: define void @a()\n-#[no_mangle]\n-#[inline]\n-pub extern \"C\" fn a() {\n-    // side effect to keep `a` around\n-    unsafe {\n-        core::ptr::read_volatile(&42);\n-    }\n-}"}]}