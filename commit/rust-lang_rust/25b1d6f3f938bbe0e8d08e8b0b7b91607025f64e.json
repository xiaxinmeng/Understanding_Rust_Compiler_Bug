{"sha": "25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "node_id": "C_kwDOAAsO6NoAKDI1YjFkNmYzZjkzOGJiZTBlOGQwOGU4YjBiN2I5MTYwNzAyNWY2NGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-05T12:41:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-05T12:41:23Z"}, "message": "Auto merge of #13435 - DropDemBits:assists-format-args-capture-pt3, r=Veykril\n\nMigrate assists to format args captures, part 3\n\nContinuation of https://github.com/rust-lang/rust-analyzer/pull/13379\n\nMigrates:\n\n- `inline_call`\n- `inline_local_variable`\n- `introduce_named_lifetime`\n- `merge_match_arms`\n- `move_from_mod_rs`\n- `move_guard`\n- `move_module_to_file`\n- `move_to_mod_rs`\n- `number_representation`\n- `qualify_method_call`\n- `qualify_path`\n- `raw_string`\n- `remove_dbg`\n- `replace_derive_with_manual_impl`\n- `replace_or_with_or_else`\n- `replace_turbofish_with_explicit_type`\n- `unwrap_tuple`\n- `wrap_return_type_in_result`", "tree": {"sha": "bb8e9f128b92545538c84e2bd0bbc3b4d84aea78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb8e9f128b92545538c84e2bd0bbc3b4d84aea78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "html_url": "https://github.com/rust-lang/rust/commit/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afe8f6b92210505ddf69d6056a9bd197c0bf7fa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/afe8f6b92210505ddf69d6056a9bd197c0bf7fa1", "html_url": "https://github.com/rust-lang/rust/commit/afe8f6b92210505ddf69d6056a9bd197c0bf7fa1"}, {"sha": "b1909a80af489974edb625dbd2c481b2001ecb53", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1909a80af489974edb625dbd2c481b2001ecb53", "html_url": "https://github.com/rust-lang/rust/commit/b1909a80af489974edb625dbd2c481b2001ecb53"}], "stats": {"total": 105, "additions": 48, "deletions": 57}, "files": [{"sha": "0c546ce5d41c6520bc9df8402d8d77753f6933b6", "filename": "crates/ide-assists/src/handlers/inline_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -192,10 +192,10 @@ pub(crate) fn inline_call(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<\n                 PathResolution::Def(hir::ModuleDef::Function(f)) => f,\n                 _ => return None,\n             };\n-            (function, format!(\"Inline `{}`\", path))\n+            (function, format!(\"Inline `{path}`\"))\n         }\n         ast::CallableExpr::MethodCall(call) => {\n-            (ctx.sema.resolve_method_call(call)?, format!(\"Inline `{}`\", name_ref))\n+            (ctx.sema.resolve_method_call(call)?, format!(\"Inline `{name_ref}`\"))\n         }\n     };\n "}, {"sha": "ce44100e34bebee523197b6bf66035b810459917", "filename": "crates/ide-assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -113,7 +113,7 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext<'_>)\n         .collect::<Option<Vec<_>>>()?;\n \n     let init_str = initializer_expr.syntax().text().to_string();\n-    let init_in_paren = format!(\"({})\", &init_str);\n+    let init_in_paren = format!(\"({init_str})\");\n \n     let target = match target {\n         ast::NameOrNameRef::Name(it) => it.syntax().text_range(),\n@@ -132,7 +132,7 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext<'_>)\n                 let replacement = if should_wrap { &init_in_paren } else { &init_str };\n                 if ast::RecordExprField::for_field_name(&name).is_some() {\n                     cov_mark::hit!(inline_field_shorthand);\n-                    builder.insert(range.end(), format!(\": {}\", replacement));\n+                    builder.insert(range.end(), format!(\": {replacement}\"));\n                 } else {\n                     builder.replace(range, replacement.clone())\n                 }"}, {"sha": "a54dc4f96de00e0f198b8c86b9d26a6d8b8bd484", "filename": "crates/ide-assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -127,7 +127,7 @@ fn generate_unique_lifetime_param_name(\n         Some(type_params) => {\n             let used_lifetime_params: FxHashSet<_> =\n                 type_params.lifetime_params().map(|p| p.syntax().text().to_string()).collect();\n-            ('a'..='z').map(|it| format!(\"'{}\", it)).find(|it| !used_lifetime_params.contains(it))\n+            ('a'..='z').map(|it| format!(\"'{it}\")).find(|it| !used_lifetime_params.contains(it))\n         }\n         None => Some(\"'a\".to_string()),\n     }"}, {"sha": "641c90885bf530d09a509a10e496879f5f61598a", "filename": "crates/ide-assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -78,7 +78,7 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext<'_>) -> Op\n                     .join(\" | \")\n             };\n \n-            let arm = format!(\"{} => {},\", pats, current_expr.syntax().text());\n+            let arm = format!(\"{pats} => {current_expr},\");\n \n             if let [first, .., last] = &*arms_to_merge {\n                 let start = first.syntax().text_range().start();"}, {"sha": "1728c03cd03e2e36f553c5dc6af983edbcfab83e", "filename": "crates/ide-assists/src/handlers/move_from_mod_rs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_from_mod_rs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_from_mod_rs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_from_mod_rs.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -40,11 +40,11 @@ pub(crate) fn move_from_mod_rs(acc: &mut Assists, ctx: &AssistContext<'_>) -> Op\n \n     let target = source_file.syntax().text_range();\n     let module_name = module.name(ctx.db())?.to_string();\n-    let path = format!(\"../{}.rs\", module_name);\n+    let path = format!(\"../{module_name}.rs\");\n     let dst = AnchoredPathBuf { anchor: ctx.file_id(), path };\n     acc.add(\n         AssistId(\"move_from_mod_rs\", AssistKind::Refactor),\n-        format!(\"Convert {}/mod.rs to {}.rs\", module_name, module_name),\n+        format!(\"Convert {module_name}/mod.rs to {module_name}.rs\"),\n         target,\n         |builder| {\n             builder.move_file(ctx.file_id(), dst);"}, {"sha": "ec3281619cc3ff7bb21d889d63dfc0d268582632", "filename": "crates/ide-assists/src/handlers/move_guard.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -133,16 +133,16 @@ pub(crate) fn move_arm_cond_to_match_guard(\n             };\n             let then_arm_end = match_arm.syntax().text_range().end();\n             let indent_level = match_arm.indent_level();\n-            let spaces = \"    \".repeat(indent_level.0 as _);\n+            let spaces = indent_level;\n \n             let mut first = true;\n             for (cond, block) in conds_blocks {\n                 if !first {\n-                    edit.insert(then_arm_end, format!(\"\\n{}\", spaces));\n+                    edit.insert(then_arm_end, format!(\"\\n{spaces}\"));\n                 } else {\n                     first = false;\n                 }\n-                let guard = format!(\"{} if {} => \", match_pat, cond.syntax().text());\n+                let guard = format!(\"{match_pat} if {cond} => \");\n                 edit.insert(then_arm_end, guard);\n                 let only_expr = block.statements().next().is_none();\n                 match &block.tail_expr() {\n@@ -158,7 +158,7 @@ pub(crate) fn move_arm_cond_to_match_guard(\n             }\n             if let Some(e) = tail {\n                 cov_mark::hit!(move_guard_ifelse_else_tail);\n-                let guard = format!(\"\\n{}{} => \", spaces, match_pat);\n+                let guard = format!(\"\\n{spaces}{match_pat} => \");\n                 edit.insert(then_arm_end, guard);\n                 let only_expr = e.statements().next().is_none();\n                 match &e.tail_expr() {\n@@ -183,7 +183,7 @@ pub(crate) fn move_arm_cond_to_match_guard(\n                     {\n                         cov_mark::hit!(move_guard_ifelse_has_wildcard);\n                     }\n-                    _ => edit.insert(then_arm_end, format!(\"\\n{}{} => {{}}\", spaces, match_pat)),\n+                    _ => edit.insert(then_arm_end, format!(\"\\n{spaces}{match_pat} => {{}}\")),\n                 }\n             }\n         },"}, {"sha": "a7c605325ea6938cfe3f102bf500add03efdf5da", "filename": "crates/ide-assists/src/handlers/move_module_to_file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn move_module_to_file(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n                 let mut buf = String::from(\"./\");\n                 match parent_module.name(ctx.db()) {\n                     Some(name) if !parent_module.is_mod_rs(ctx.db()) => {\n-                        format_to!(buf, \"{}/\", name)\n+                        format_to!(buf, \"{name}/\")\n                     }\n                     _ => (),\n                 }\n@@ -82,7 +82,7 @@ pub(crate) fn move_module_to_file(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n                 items\n             };\n \n-            let buf = format!(\"mod {};\", module_name);\n+            let buf = format!(\"mod {module_name};\");\n \n             let replacement_start = match module_ast.mod_token() {\n                 Some(mod_token) => mod_token.text_range(),"}, {"sha": "076d25411a8180e7627fbf93084b786144270443", "filename": "crates/ide-assists/src/handlers/move_to_mod_rs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -40,11 +40,11 @@ pub(crate) fn move_to_mod_rs(acc: &mut Assists, ctx: &AssistContext<'_>) -> Opti\n \n     let target = source_file.syntax().text_range();\n     let module_name = module.name(ctx.db())?.to_string();\n-    let path = format!(\"./{}/mod.rs\", module_name);\n+    let path = format!(\"./{module_name}/mod.rs\");\n     let dst = AnchoredPathBuf { anchor: ctx.file_id(), path };\n     acc.add(\n         AssistId(\"move_to_mod_rs\", AssistKind::Refactor),\n-        format!(\"Convert {}.rs to {}/mod.rs\", module_name, module_name),\n+        format!(\"Convert {module_name}.rs to {module_name}/mod.rs\"),\n         target,\n         |builder| {\n             builder.move_file(ctx.file_id(), dst);"}, {"sha": "7e3fef516bfd8f2f399aba6e2c97e4fee3d6b792", "filename": "crates/ide-assists/src/handlers/number_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -38,7 +38,7 @@ pub(crate) fn reformat_number_literal(acc: &mut Assists, ctx: &AssistContext<'_>\n     converted.push_str(suffix);\n \n     let group_id = GroupLabel(\"Reformat number literal\".into());\n-    let label = format!(\"Convert {} to {}\", literal, converted);\n+    let label = format!(\"Convert {literal} to {converted}\");\n     let range = literal.syntax().text_range();\n     acc.add_group(\n         &group_id,"}, {"sha": "1ea87429c50928bc3dfc5cffe738c46c3297b4a9", "filename": "crates/ide-assists/src/handlers/qualify_method_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -54,7 +54,7 @@ pub(crate) fn qualify_method_call(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n \n     acc.add(\n         AssistId(\"qualify_method_call\", AssistKind::RefactorInline),\n-        format!(\"Qualify `{}` method call\", ident.text()),\n+        format!(\"Qualify `{ident}` method call\"),\n         range,\n         |builder| {\n             qualify_candidate.qualify("}, {"sha": "e759e1561cbd0a5ba956f42bacabd232de330d58", "filename": "crates/ide-assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -118,14 +118,14 @@ impl QualifyCandidate<'_> {\n         match self {\n             QualifyCandidate::QualifierStart(segment, generics) => {\n                 let generics = generics.as_ref().map_or_else(String::new, ToString::to_string);\n-                replacer(format!(\"{}{}::{}\", import, generics, segment));\n+                replacer(format!(\"{import}{generics}::{segment}\"));\n             }\n             QualifyCandidate::UnqualifiedName(generics) => {\n                 let generics = generics.as_ref().map_or_else(String::new, ToString::to_string);\n-                replacer(format!(\"{}{}\", import, generics));\n+                replacer(format!(\"{import}{generics}\"));\n             }\n             QualifyCandidate::TraitAssocItem(qualifier, segment) => {\n-                replacer(format!(\"<{} as {}>::{}\", qualifier, import, segment));\n+                replacer(format!(\"<{qualifier} as {import}>::{segment}\"));\n             }\n             QualifyCandidate::TraitMethod(db, mcall_expr) => {\n                 Self::qualify_trait_method(db, mcall_expr, replacer, import, item);\n@@ -155,16 +155,11 @@ impl QualifyCandidate<'_> {\n                 hir::Access::Exclusive => make::expr_ref(receiver, true),\n                 hir::Access::Owned => receiver,\n             };\n-            replacer(format!(\n-                \"{}::{}{}{}\",\n-                import,\n-                method_name,\n-                generics,\n-                match arg_list {\n-                    Some(args) => make::arg_list(iter::once(receiver).chain(args)),\n-                    None => make::arg_list(iter::once(receiver)),\n-                }\n-            ));\n+            let arg_list = match arg_list {\n+                Some(args) => make::arg_list(iter::once(receiver).chain(args)),\n+                None => make::arg_list(iter::once(receiver)),\n+            };\n+            replacer(format!(\"{import}::{method_name}{generics}{arg_list}\"));\n         }\n         Some(())\n     }\n@@ -218,15 +213,17 @@ fn group_label(candidate: &ImportCandidate) -> GroupLabel {\n         }\n     }\n     .text();\n-    GroupLabel(format!(\"Qualify {}\", name))\n+    GroupLabel(format!(\"Qualify {name}\"))\n }\n \n fn label(candidate: &ImportCandidate, import: &LocatedImport) -> String {\n+    let import_path = &import.import_path;\n+\n     match candidate {\n         ImportCandidate::Path(candidate) if candidate.qualifier.is_none() => {\n-            format!(\"Qualify as `{}`\", import.import_path)\n+            format!(\"Qualify as `{import_path}`\")\n         }\n-        _ => format!(\"Qualify with `{}`\", import.import_path),\n+        _ => format!(\"Qualify with `{import_path}`\"),\n     }\n }\n "}, {"sha": "c9bc25b27a5ed8c0d1c3543d1d2be932cb50c139", "filename": "crates/ide-assists/src/handlers/raw_string.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -34,13 +34,10 @@ pub(crate) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext<'_>) -> Opt\n             let hashes = \"#\".repeat(required_hashes(&value).max(1));\n             if matches!(value, Cow::Borrowed(_)) {\n                 // Avoid replacing the whole string to better position the cursor.\n-                edit.insert(token.syntax().text_range().start(), format!(\"r{}\", hashes));\n+                edit.insert(token.syntax().text_range().start(), format!(\"r{hashes}\"));\n                 edit.insert(token.syntax().text_range().end(), hashes);\n             } else {\n-                edit.replace(\n-                    token.syntax().text_range(),\n-                    format!(\"r{}\\\"{}\\\"{}\", hashes, value, hashes),\n-                );\n+                edit.replace(token.syntax().text_range(), format!(\"r{hashes}\\\"{value}\\\"{hashes}\"));\n             }\n         },\n     )\n@@ -83,7 +80,7 @@ pub(crate) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n                 }\n             }\n \n-            edit.replace(token.syntax().text_range(), format!(\"\\\"{}\\\"\", escaped));\n+            edit.replace(token.syntax().text_range(), format!(\"\\\"{escaped}\\\"\"));\n         },\n     )\n }"}, {"sha": "3d9cbff177ba9c68bfed291a2c2ca58eea3c1051", "filename": "crates/ide-assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -102,7 +102,7 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<(\n             };\n             (\n                 macro_call.syntax().text_range(),\n-                if wrap { format!(\"({})\", expr) } else { expr.to_string() },\n+                if wrap { format!(\"({expr})\") } else { expr.to_string() },\n             )\n         }\n         // dbg!(expr0, expr1, ...)\n@@ -127,8 +127,8 @@ mod tests {\n     fn check(ra_fixture_before: &str, ra_fixture_after: &str) {\n         check_assist(\n             remove_dbg,\n-            &format!(\"fn main() {{\\n{}\\n}}\", ra_fixture_before),\n-            &format!(\"fn main() {{\\n{}\\n}}\", ra_fixture_after),\n+            &format!(\"fn main() {{\\n{ra_fixture_before}\\n}}\"),\n+            &format!(\"fn main() {{\\n{ra_fixture_after}\\n}}\"),\n         );\n     }\n "}, {"sha": "f9ba289ee175fe76d554aeb28811b774b5fc34a1", "filename": "crates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -124,7 +124,7 @@ fn add_assist(\n ) -> Option<()> {\n     let target = attr.syntax().text_range();\n     let annotated_name = adt.name()?;\n-    let label = format!(\"Convert to manual `impl {} for {}`\", replace_trait_path, annotated_name);\n+    let label = format!(\"Convert to manual `impl {replace_trait_path} for {annotated_name}`\");\n \n     acc.add(\n         AssistId(\"replace_derive_with_manual_impl\", AssistKind::Refactor),\n@@ -158,11 +158,8 @@ fn add_assist(\n                         }\n                     }\n \n-                    builder.insert_snippet(\n-                        cap,\n-                        insert_pos,\n-                        format!(\"\\n\\n{}\", render_snippet(cap, impl_def.syntax(), cursor)),\n-                    )\n+                    let rendered = render_snippet(cap, impl_def.syntax(), cursor);\n+                    builder.insert_snippet(cap, insert_pos, format!(\"\\n\\n{rendered}\"))\n                 }\n             };\n         },"}, {"sha": "77382056c18339eb8d29335c5aa50d2cc8d58106", "filename": "crates/ide-assists/src/handlers/replace_or_with_or_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_or_with_or_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_or_with_or_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_or_with_or_else.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -62,7 +62,7 @@ pub(crate) fn replace_or_with_or_else(acc: &mut Assists, ctx: &AssistContext<'_>\n \n     acc.add(\n         AssistId(\"replace_or_with_or_else\", AssistKind::RefactorRewrite),\n-        format!(\"Replace {} with {}\", name.text(), replace),\n+        format!(\"Replace {name} with {replace}\"),\n         call.syntax().text_range(),\n         |builder| {\n             builder.replace(name.syntax().text_range(), replace);\n@@ -138,7 +138,7 @@ pub(crate) fn replace_or_else_with_or(acc: &mut Assists, ctx: &AssistContext<'_>\n \n     acc.add(\n         AssistId(\"replace_or_else_with_or\", AssistKind::RefactorRewrite),\n-        format!(\"Replace {} with {}\", name.text(), replace),\n+        format!(\"Replace {name} with {replace}\"),\n         call.syntax().text_range(),\n         |builder| {\n             builder.replace(name.syntax().text_range(), replace);"}, {"sha": "c177adc7a10d73a78cb034e8388f4e0200d79852", "filename": "crates/ide-assists/src/handlers/replace_turbofish_with_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -79,7 +79,7 @@ pub(crate) fn replace_turbofish_with_explicit_type(\n             \"Replace turbofish with explicit type\",\n             TextRange::new(initializer_start, turbofish_range.end()),\n             |builder| {\n-                builder.insert(ident_range.end(), format!(\": {}\", returned_type));\n+                builder.insert(ident_range.end(), format!(\": {returned_type}\"));\n                 builder.delete(turbofish_range);\n             },\n         );"}, {"sha": "d09614c51127ed8232c86e8c02b3cc4f57ddd858", "filename": "crates/ide-assists/src/handlers/unwrap_tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funwrap_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funwrap_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funwrap_tuple.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -69,13 +69,13 @@ pub(crate) fn unwrap_tuple(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option\n                 for (pat, ty, expr) in\n                     itertools::izip!(tuple_pat.fields(), tys.fields(), tuple_init.fields())\n                 {\n-                    zipped_decls.push_str(&format!(\"{}let {pat}: {ty} = {expr};\\n\", indents))\n+                    zipped_decls.push_str(&format!(\"{indents}let {pat}: {ty} = {expr};\\n\"))\n                 }\n                 edit.replace(parent.text_range(), zipped_decls.trim());\n             } else {\n                 let mut zipped_decls = String::new();\n                 for (pat, expr) in itertools::izip!(tuple_pat.fields(), tuple_init.fields()) {\n-                    zipped_decls.push_str(&format!(\"{}let {pat} = {expr};\\n\", indents));\n+                    zipped_decls.push_str(&format!(\"{indents}let {pat} = {expr};\\n\"));\n                 }\n                 edit.replace(parent.text_range(), zipped_decls.trim());\n             }"}, {"sha": "b6c489eb62eef2c734e9fdf726f5fcd455ef22c0", "filename": "crates/ide-assists/src/handlers/wrap_return_type_in_result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs?ref=25b1d6f3f938bbe0e8d08e8b0b7b91607025f64e", "patch": "@@ -76,11 +76,11 @@ pub(crate) fn wrap_return_type_in_result(acc: &mut Assists, ctx: &AssistContext<\n \n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n-                    let snippet = format!(\"Result<{}, ${{0:_}}>\", type_ref);\n+                    let snippet = format!(\"Result<{type_ref}, ${{0:_}}>\");\n                     builder.replace_snippet(cap, type_ref.syntax().text_range(), snippet)\n                 }\n                 None => builder\n-                    .replace(type_ref.syntax().text_range(), format!(\"Result<{}, _>\", type_ref)),\n+                    .replace(type_ref.syntax().text_range(), format!(\"Result<{type_ref}, _>\")),\n             }\n         },\n     )"}]}