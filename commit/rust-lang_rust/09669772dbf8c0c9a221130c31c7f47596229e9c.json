{"sha": "09669772dbf8c0c9a221130c31c7f47596229e9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NjY5NzcyZGJmOGMwYzlhMjIxMTMwYzMxYzdmNDc1OTYyMjllOWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-30T15:57:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-30T16:29:24Z"}, "message": "rollup merge of #18417 : P1start/lint-fixes", "tree": {"sha": "e2e939edb17f87a2c6ecb8390382e9b11a2ea020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2e939edb17f87a2c6ecb8390382e9b11a2ea020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09669772dbf8c0c9a221130c31c7f47596229e9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09669772dbf8c0c9a221130c31c7f47596229e9c", "html_url": "https://github.com/rust-lang/rust/commit/09669772dbf8c0c9a221130c31c7f47596229e9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09669772dbf8c0c9a221130c31c7f47596229e9c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc3ed0c8084960ea40e95ee0505d42ede96e8158", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3ed0c8084960ea40e95ee0505d42ede96e8158", "html_url": "https://github.com/rust-lang/rust/commit/fc3ed0c8084960ea40e95ee0505d42ede96e8158"}, {"sha": "737e39696ba0964729f29410cf4e75a061ce120a", "url": "https://api.github.com/repos/rust-lang/rust/commits/737e39696ba0964729f29410cf4e75a061ce120a", "html_url": "https://github.com/rust-lang/rust/commit/737e39696ba0964729f29410cf4e75a061ce120a"}], "stats": {"total": 105, "additions": 90, "deletions": 15}, "files": [{"sha": "028d0ec607ab66832c5d08fee2a1fcc33da242c9", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=09669772dbf8c0c9a221130c31c7f47596229e9c", "patch": "@@ -255,7 +255,8 @@ Available lint options:\n         for (name, to) in lints.into_iter() {\n             let name = name.chars().map(|x| x.to_lowercase())\n                            .collect::<String>().replace(\"_\", \"-\");\n-            let desc = to.into_iter().map(|x| x.as_str()).collect::<Vec<String>>().connect(\", \");\n+            let desc = to.into_iter().map(|x| x.as_str().replace(\"_\", \"-\"))\n+                         .collect::<Vec<String>>().connect(\", \");\n             println!(\"    {}  {}\",\n                      padded(name.as_slice()), desc);\n         }"}, {"sha": "0c9e129ef72f0a182d7f55dbb35f57ed260bc5c4", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=09669772dbf8c0c9a221130c31c7f47596229e9c", "patch": "@@ -221,8 +221,8 @@ impl LintStore {\n \n         add_lint_group!(sess, \"unused\",\n                         UNUSED_IMPORTS, UNUSED_VARIABLES, UNUSED_ASSIGNMENTS, DEAD_CODE,\n-                        UNUSED_MUT, UNREACHABLE_CODE, UNUSED_EXTERN_CRATES, UNUSED_MUST_USE,\n-                        UNUSED_UNSAFE, UNUSED_RESULTS, PATH_STATEMENTS)\n+                        UNUSED_MUT, UNREACHABLE_CODE, UNUSED_MUST_USE,\n+                        UNUSED_UNSAFE, PATH_STATEMENTS)\n \n         // We have one lint pass defined in this module.\n         self.register_pass(sess, false, box GatherNodeLevels as LintPassObject);"}, {"sha": "a17194f0085654446499bff354f3dc9c43690133", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=09669772dbf8c0c9a221130c31c7f47596229e9c", "patch": "@@ -402,15 +402,25 @@ pub fn maybe_report_ambiguity(fcx: &FnCtxt, obligation: &Obligation) {\n         // has_errors() to be sure that compilation isn't happening\n         // anyway. In that case, why inundate the user.\n         if !fcx.tcx().sess.has_errors() {\n-            fcx.tcx().sess.span_err(\n-                obligation.cause.span,\n-                format!(\n-                    \"unable to infer enough type information to \\\n-                     locate the impl of the trait `{}` for \\\n-                     the type `{}`; type annotations required\",\n-                    trait_ref.user_string(fcx.tcx()),\n-                    self_ty.user_string(fcx.tcx())).as_slice());\n-            note_obligation_cause(fcx, obligation);\n+            if fcx.ccx.tcx.lang_items.sized_trait()\n+                  .map_or(false, |sized_id| sized_id == trait_ref.def_id) {\n+                fcx.tcx().sess.span_err(\n+                    obligation.cause.span,\n+                    format!(\n+                        \"unable to infer enough type information about `{}`; type annotations \\\n+                         required\",\n+                        self_ty.user_string(fcx.tcx())).as_slice());\n+            } else {\n+                fcx.tcx().sess.span_err(\n+                    obligation.cause.span,\n+                    format!(\n+                        \"unable to infer enough type information to \\\n+                         locate the impl of the trait `{}` for \\\n+                         the type `{}`; type annotations required\",\n+                        trait_ref.user_string(fcx.tcx()),\n+                        self_ty.user_string(fcx.tcx())).as_slice());\n+                note_obligation_cause(fcx, obligation);\n+            }\n         }\n     } else if !fcx.tcx().sess.has_errors() {\n          // Ambiguity. Coherence should have reported an error."}, {"sha": "f04f9efd7a761820ee592ad6c9ac80576627e100", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=09669772dbf8c0c9a221130c31c7f47596229e9c", "patch": "@@ -2730,6 +2730,8 @@ impl<'a> Parser<'a> {\n                 return self.parse_dot_or_call_expr();\n             }\n \n+            let lo = self.span.lo;\n+\n             self.bump();\n \n             // Check for a place: `box(PLACE) EXPR`.\n@@ -2738,6 +2740,18 @@ impl<'a> Parser<'a> {\n                 if !self.eat(&token::RParen) {\n                     let place = self.parse_expr();\n                     self.expect(&token::RParen);\n+                    // Give a suggestion to use `box()` when a parenthesised expression is used\n+                    if !self.token.can_begin_expr() {\n+                        let span = self.span;\n+                        let this_token_to_string = self.this_token_to_string();\n+                        self.span_err(span,\n+                                      format!(\"expected expression, found `{}`\",\n+                                              this_token_to_string).as_slice());\n+                        let box_span = mk_sp(lo, self.last_span.hi);\n+                        self.span_help(box_span,\n+                                       \"perhaps you meant `box() (foo)` instead?\");\n+                        self.abort_if_errors();\n+                    }\n                     let subexpression = self.parse_prefix_expr();\n                     hi = subexpression.span.hi;\n                     ex = ExprBox(place, subexpression);\n@@ -3578,6 +3592,16 @@ impl<'a> Parser<'a> {\n             let hi = self.span.hi;\n \n             if id.name == token::special_idents::invalid.name {\n+                if self.token == token::Dot {\n+                    let span = self.span;\n+                    let token_string = self.this_token_to_string();\n+                    self.span_err(span,\n+                                  format!(\"expected statement, found `{}`\",\n+                                          token_string).as_slice());\n+                    let mac_span = mk_sp(lo, hi);\n+                    self.span_help(mac_span, \"try parenthesizing this macro invocation\");\n+                    self.abort_if_errors();\n+                }\n                 P(spanned(lo, hi, StmtMac(\n                     spanned(lo, hi, MacInvocTT(pth, tts, EMPTY_CTXT)), false)))\n             } else {"}, {"sha": "2207e10add451719ba53b51ebdf986f3180a0a92", "filename": "src/test/compile-fail/issue-16562.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Ftest%2Fcompile-fail%2Fissue-16562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Ftest%2Fcompile-fail%2Fissue-16562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16562.rs?ref=09669772dbf8c0c9a221130c31c7f47596229e9c", "patch": "@@ -16,8 +16,7 @@ struct Col<D, C> {\n }\n \n impl<T, M: MatrixShape> Collection for Col<M, uint> {\n-//~^ ERROR unable to infer enough type information to locate the impl of the trait\n-//~^^ NOTE the trait `core::kinds::Sized` must be implemented because it is required by\n+//~^ ERROR unable to infer enough type information\n     fn len(&self) -> uint {\n         unimplemented!()\n     }"}, {"sha": "e7f61a4f3ff5f55329866531dc631c1db77c534f", "filename": "src/test/compile-fail/issue-17551.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs?ref=09669772dbf8c0c9a221130c31c7f47596229e9c", "patch": "@@ -13,6 +13,6 @@\n struct B<T>;\n \n fn main() {\n-    let foo = B; //~ ERROR unable to infer enough type information to locate the impl of the trait\n+    let foo = B; //~ ERROR unable to infer enough type information\n     let closure = |:| foo;\n }"}, {"sha": "e46bcf46cc3983dca3e36ab72d65278b3db1bb23", "filename": "src/test/compile-fail/issue-18159.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs?ref=09669772dbf8c0c9a221130c31c7f47596229e9c", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x; //~ ERROR unable to infer enough type information\n+}"}, {"sha": "bd45b76dd5afcdd2cfac74c5cb948d52cb4bfeff", "filename": "src/test/compile-fail/macro-invocation-dot-help.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Ftest%2Fcompile-fail%2Fmacro-invocation-dot-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Ftest%2Fcompile-fail%2Fmacro-invocation-dot-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-invocation-dot-help.rs?ref=09669772dbf8c0c9a221130c31c7f47596229e9c", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    foo!() //~ HELP try parenthesizing this macro invocation\n+    .bar //~ ERROR expected statement\n+}"}, {"sha": "05bbaec37af02339feb045d1449ba88e5e729bde", "filename": "src/test/compile-fail/parenthesized-box-expr-message.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Ftest%2Fcompile-fail%2Fparenthesized-box-expr-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09669772dbf8c0c9a221130c31c7f47596229e9c/src%2Ftest%2Fcompile-fail%2Fparenthesized-box-expr-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fparenthesized-box-expr-message.rs?ref=09669772dbf8c0c9a221130c31c7f47596229e9c", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    box(1 + 1) //~ HELP perhaps you meant `box() (foo)` instead?\n+    ; //~ ERROR expected expression, found `;`\n+}"}]}