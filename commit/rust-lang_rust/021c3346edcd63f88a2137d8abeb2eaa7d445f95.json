{"sha": "021c3346edcd63f88a2137d8abeb2eaa7d445f95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMWMzMzQ2ZWRjZDYzZjg4YTIxMzdkOGFiZWIyZWFhN2Q0NDVmOTU=", "commit": {"author": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-08-28T09:04:23Z"}, "committer": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-09-09T08:41:18Z"}, "message": "derive Copy for WrappingRange and Scalar", "tree": {"sha": "c1a4b3fadc35286065cc44416c8b6d814cc15494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1a4b3fadc35286065cc44416c8b6d814cc15494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/021c3346edcd63f88a2137d8abeb2eaa7d445f95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/021c3346edcd63f88a2137d8abeb2eaa7d445f95", "html_url": "https://github.com/rust-lang/rust/commit/021c3346edcd63f88a2137d8abeb2eaa7d445f95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/021c3346edcd63f88a2137d8abeb2eaa7d445f95/comments", "author": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c46296f22ee4a6b9106849e8a0c5362d06e78d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c46296f22ee4a6b9106849e8a0c5362d06e78d4", "html_url": "https://github.com/rust-lang/rust/commit/4c46296f22ee4a6b9106849e8a0c5362d06e78d4"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "545b939d0590ddda6960203fe929597ab9d83dd4", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021c3346edcd63f88a2137d8abeb2eaa7d445f95/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021c3346edcd63f88a2137d8abeb2eaa7d445f95/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=021c3346edcd63f88a2137d8abeb2eaa7d445f95", "patch": "@@ -300,7 +300,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let llval = operand.immediate();\n \n                         let mut signed = false;\n-                        if let Abi::Scalar(ref scalar) = operand.layout.abi {\n+                        if let Abi::Scalar(scalar) = operand.layout.abi {\n                             if let Int(_, s) = scalar.value {\n                                 // We use `i1` for bytes that are always `0` or `1`,\n                                 // e.g., `#[repr(i8)] enum E { A, B }`, but we can't"}, {"sha": "85c0d022e8e06e38b79332416d1998ec354dbee0", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/021c3346edcd63f88a2137d8abeb2eaa7d445f95/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021c3346edcd63f88a2137d8abeb2eaa7d445f95/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=021c3346edcd63f88a2137d8abeb2eaa7d445f95", "patch": "@@ -741,7 +741,7 @@ impl Primitive {\n ///\n /// This is intended specifically to mirror LLVM\u2019s `!range` metadata,\n /// semantics.\n-#[derive(Clone, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n #[derive(HashStable_Generic)]\n pub struct WrappingRange {\n     pub start: u128,\n@@ -797,7 +797,7 @@ impl fmt::Debug for WrappingRange {\n }\n \n /// Information about one scalar component of a Rust type.\n-#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n #[derive(HashStable_Generic)]\n pub struct Scalar {\n     pub value: Primitive,\n@@ -1070,7 +1070,7 @@ impl Niche {\n     }\n \n     pub fn available<C: HasDataLayout>(&self, cx: &C) -> u128 {\n-        let Scalar { value, valid_range: ref v } = self.scalar;\n+        let Scalar { value, valid_range: v } = self.scalar;\n         let bits = value.size(cx).bits();\n         assert!(bits <= 128);\n         let max_value = !0u128 >> (128 - bits);\n@@ -1083,7 +1083,7 @@ impl Niche {\n     pub fn reserve<C: HasDataLayout>(&self, cx: &C, count: u128) -> Option<(u128, Scalar)> {\n         assert!(count > 0);\n \n-        let Scalar { value, valid_range: v } = self.scalar.clone();\n+        let Scalar { value, valid_range: v } = self.scalar;\n         let bits = value.size(cx).bits();\n         assert!(bits <= 128);\n         let max_value = !0u128 >> (128 - bits);\n@@ -1137,7 +1137,7 @@ pub struct Layout {\n \n impl Layout {\n     pub fn scalar<C: HasDataLayout>(cx: &C, scalar: Scalar) -> Self {\n-        let largest_niche = Niche::from_scalar(cx, Size::ZERO, scalar.clone());\n+        let largest_niche = Niche::from_scalar(cx, Size::ZERO, scalar);\n         let size = scalar.value.size(cx);\n         let align = scalar.value.align(cx);\n         Layout {"}]}