{"sha": "908c1f2f0cbd80d62b148ef88859655c2f28bc8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOGMxZjJmMGNiZDgwZDYyYjE0OGVmODg4NTk2NTVjMmYyOGJjOGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-06T16:06:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-09T15:06:41Z"}, "message": "use `DUMMY_NODE_ID` as the `body_id` during NLL type-checking\n\nThe choice is arbitrary since there is only one involved.", "tree": {"sha": "b5d3994cd0ec888feed21a4ef5a0b4b79f46b3f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5d3994cd0ec888feed21a4ef5a0b4b79f46b3f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/908c1f2f0cbd80d62b148ef88859655c2f28bc8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/908c1f2f0cbd80d62b148ef88859655c2f28bc8f", "html_url": "https://github.com/rust-lang/rust/commit/908c1f2f0cbd80d62b148ef88859655c2f28bc8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/908c1f2f0cbd80d62b148ef88859655c2f28bc8f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a5a4874a07767eb2f21b9fa2a3a7f71daaeb130", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5a4874a07767eb2f21b9fa2a3a7f71daaeb130", "html_url": "https://github.com/rust-lang/rust/commit/6a5a4874a07767eb2f21b9fa2a3a7f71daaeb130"}], "stats": {"total": 68, "additions": 36, "deletions": 32}, "files": [{"sha": "6441bdcf26287a126b69dc9e2789fbfef05a533e", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/908c1f2f0cbd80d62b148ef88859655c2f28bc8f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908c1f2f0cbd80d62b148ef88859655c2f28bc8f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=908c1f2f0cbd80d62b148ef88859655c2f28bc8f", "patch": "@@ -23,7 +23,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::InferOk;\n use rustc::mir::visit::TyContext;\n use rustc::mir::*;\n-use rustc::traits::PredicateObligations;\n+use rustc::traits::{ObligationCause, PredicateObligations};\n use rustc::ty::subst::Subst;\n use rustc::ty::Ty;\n \n@@ -84,9 +84,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 |cx| {\n                     let mut obligations = ObligationAccumulator::default();\n \n+                    let dummy_body_id = ObligationCause::dummy().body_id;\n                     let (output_ty, anon_type_map) = obligations.add(infcx.instantiate_anon_types(\n                         mir_def_id,\n-                        cx.body_id,\n+                        dummy_body_id,\n                         cx.param_env,\n                         &output_ty,\n                     ));\n@@ -105,7 +106,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                     obligations.add(\n                         infcx\n-                            .at(&cx.misc(cx.last_span), cx.param_env)\n+                            .at(&ObligationCause::dummy(), cx.param_env)\n                             .eq(output_ty, mir_output_ty)?,\n                     );\n \n@@ -124,7 +125,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         debug!(\"equate_inputs_and_outputs: anon_defn_ty={:?}\", anon_defn_ty);\n                         obligations.add(\n                             infcx\n-                                .at(&cx.misc(cx.last_span), cx.param_env)\n+                                .at(&ObligationCause::dummy(), cx.param_env)\n                                 .eq(anon_decl.concrete_ty, anon_defn_ty)?,\n                         );\n                     }"}, {"sha": "61a2373997752cbeb8a3c4e195aa1eeb05be3e64", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/908c1f2f0cbd80d62b148ef88859655c2f28bc8f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908c1f2f0cbd80d62b148ef88859655c2f28bc8f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=908c1f2f0cbd80d62b148ef88859655c2f28bc8f", "patch": "@@ -16,11 +16,11 @@ use dataflow::{FlowAtLocation, FlowsAtLocation};\n use rustc::infer::region_constraints::RegionConstraintData;\n use rustc::mir::Local;\n use rustc::mir::{BasicBlock, Location, Mir};\n+use rustc::traits::ObligationCause;\n use rustc::ty::subst::Kind;\n use rustc::ty::{Ty, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n use std::rc::Rc;\n-use syntax::codemap::DUMMY_SP;\n use util::liveness::LivenessResults;\n \n use super::TypeChecker;\n@@ -223,11 +223,9 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n             cx.fully_perform_op_and_get_region_constraint_data(\n                 || format!(\"compute_drop_data(dropped_ty={:?})\", dropped_ty),\n                 |cx| {\n-                    // crappy span, but I don't think it really matters\n-                    let span = DUMMY_SP;\n                     Ok(cx\n                         .infcx\n-                        .at(&cx.misc(span), cx.param_env)\n+                        .at(&ObligationCause::dummy(), cx.param_env)\n                         .dropck_outlives(dropped_ty))\n                 },\n             ).unwrap();"}, {"sha": "76da74b18105067215c1d9da8c90484c4ecc1435", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/908c1f2f0cbd80d62b148ef88859655c2f28bc8f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908c1f2f0cbd80d62b148ef88859655c2f28bc8f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=908c1f2f0cbd80d62b148ef88859655c2f28bc8f", "patch": "@@ -27,13 +27,12 @@ use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::*;\n use rustc::traits::query::NoSolution;\n-use rustc::traits::{self, Normalized, TraitEngine};\n+use rustc::traits::{self, ObligationCause, Normalized, TraitEngine};\n use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeVariants};\n use std::fmt;\n use std::rc::Rc;\n-use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n use transform::{MirPass, MirSource};\n use util::liveness::LivenessResults;\n@@ -48,7 +47,7 @@ macro_rules! span_mirbug {\n             $context.last_span,\n             &format!(\n                 \"broken MIR in {:?} ({:?}): {}\",\n-                $context.body_id,\n+                $context.mir_def_id,\n                 $elem,\n                 format_args!($($message)*),\n             ),\n@@ -110,11 +109,10 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n     flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n ) -> MirTypeckRegionConstraints<'tcx> {\n-    let body_id = infcx.tcx.hir.as_local_node_id(mir_def_id).unwrap();\n     let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n     type_check_internal(\n         infcx,\n-        body_id,\n+        mir_def_id,\n         param_env,\n         mir,\n         &universal_regions.region_bound_pairs,\n@@ -134,7 +132,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n \n fn type_check_internal<'gcx, 'tcx>(\n     infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-    body_id: ast::NodeId,\n+    mir_def_id: DefId,\n     param_env: ty::ParamEnv<'gcx>,\n     mir: &Mir<'tcx>,\n     region_bound_pairs: &[(ty::Region<'tcx>, GenericKind<'tcx>)],\n@@ -144,7 +142,7 @@ fn type_check_internal<'gcx, 'tcx>(\n ) -> MirTypeckRegionConstraints<'tcx> {\n     let mut checker = TypeChecker::new(\n         infcx,\n-        body_id,\n+        mir_def_id,\n         param_env,\n         region_bound_pairs,\n         implicit_region_bound,\n@@ -187,7 +185,7 @@ struct TypeVerifier<'a, 'b: 'a, 'gcx: 'b + 'tcx, 'tcx: 'b> {\n     cx: &'a mut TypeChecker<'b, 'gcx, 'tcx>,\n     mir: &'a Mir<'tcx>,\n     last_span: Span,\n-    body_id: ast::NodeId,\n+    mir_def_id: DefId,\n     errors_reported: bool,\n }\n \n@@ -235,7 +233,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n     fn new(cx: &'a mut TypeChecker<'b, 'gcx, 'tcx>, mir: &'a Mir<'tcx>) -> Self {\n         TypeVerifier {\n             mir,\n-            body_id: cx.body_id,\n+            mir_def_id: cx.mir_def_id,\n             cx,\n             last_span: mir.span,\n             errors_reported: false,\n@@ -595,7 +593,7 @@ struct TypeChecker<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n     param_env: ty::ParamEnv<'gcx>,\n     last_span: Span,\n-    body_id: ast::NodeId,\n+    mir_def_id: DefId,\n     region_bound_pairs: &'a [(ty::Region<'tcx>, GenericKind<'tcx>)],\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n@@ -699,7 +697,7 @@ impl Locations {\n impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     fn new(\n         infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-        body_id: ast::NodeId,\n+        mir_def_id: DefId,\n         param_env: ty::ParamEnv<'gcx>,\n         region_bound_pairs: &'a [(ty::Region<'tcx>, GenericKind<'tcx>)],\n         implicit_region_bound: Option<ty::Region<'tcx>>,\n@@ -709,7 +707,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         TypeChecker {\n             infcx,\n             last_span: DUMMY_SP,\n-            body_id,\n+            mir_def_id,\n             param_env,\n             region_bound_pairs,\n             implicit_region_bound,\n@@ -720,10 +718,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn misc(&self, span: Span) -> traits::ObligationCause<'tcx> {\n-        traits::ObligationCause::misc(span, self.body_id)\n-    }\n-\n     /// Given some operation `op` that manipulates types, proves\n     /// predicates, or otherwise uses the inference context, executes\n     /// `op` and then executes all the further obligations that `op`\n@@ -794,7 +788,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n \n         let mut fulfill_cx = TraitEngine::new(self.infcx.tcx);\n+        let dummy_body_id = ObligationCause::dummy().body_id;\n         let InferOk { value, obligations } = self.infcx.commit_if_ok(|_| op(self))?;\n+        debug_assert!(obligations.iter().all(|o| o.cause.body_id == dummy_body_id));\n         fulfill_cx.register_predicate_obligations(self.infcx, obligations);\n         if let Err(e) = fulfill_cx.select_all_or_error(self.infcx) {\n             span_mirbug!(self, \"\", \"errors selecting obligation: {:?}\", e);\n@@ -804,7 +800,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             self.region_bound_pairs,\n             self.implicit_region_bound,\n             self.param_env,\n-            self.body_id,\n+            dummy_body_id,\n         );\n \n         let data = self.infcx.take_and_reset_region_constraints();\n@@ -832,7 +828,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             || format!(\"sub_types({:?} <: {:?})\", sub, sup),\n             |this| {\n                 this.infcx\n-                    .at(&this.misc(this.last_span), this.param_env)\n+                    .at(&ObligationCause::dummy(), this.param_env)\n                     .sup(sup, sub)\n             },\n         )\n@@ -850,7 +846,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             || format!(\"eq_types({:?} = {:?})\", a, b),\n             |this| {\n                 this.infcx\n-                    .at(&this.misc(this.last_span), this.param_env)\n+                    .at(&ObligationCause::dummy(), this.param_env)\n                     .eq(b, a)\n             },\n         )\n@@ -1575,9 +1571,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 if let Some(closure_region_requirements) =\n                     tcx.mir_borrowck(*def_id).closure_requirements\n                 {\n+                    let dummy_body_id = ObligationCause::dummy().body_id;\n                     closure_region_requirements.apply_requirements(\n                         self.infcx,\n-                        self.body_id,\n+                        dummy_body_id,\n                         location,\n                         *def_id,\n                         *substs,\n@@ -1613,7 +1610,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     where\n         T: IntoIterator<Item = ty::Predicate<'tcx>> + Clone,\n     {\n-        let cause = self.misc(self.last_span);\n+        let cause = ObligationCause::dummy();\n         let obligations: Vec<_> = predicates\n             .into_iter()\n             .map(|p| traits::Obligation::new(cause.clone(), self.param_env, p))\n@@ -1694,7 +1691,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             |this| {\n                 let Normalized { value, obligations } = this\n                     .infcx\n-                    .at(&this.misc(this.last_span), this.param_env)\n+                    .at(&ObligationCause::dummy(), this.param_env)\n                     .normalize(value)\n                     .unwrap_or_else(|NoSolution| {\n                         span_bug!(\n@@ -1715,7 +1712,6 @@ pub struct TypeckMir;\n impl MirPass for TypeckMir {\n     fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource, mir: &mut Mir<'tcx>) {\n         let def_id = src.def_id;\n-        let id = tcx.hir.as_local_node_id(def_id).unwrap();\n         debug!(\"run_pass: {:?}\", def_id);\n \n         // When NLL is enabled, the borrow checker runs the typeck\n@@ -1731,7 +1727,16 @@ impl MirPass for TypeckMir {\n         }\n         let param_env = tcx.param_env(def_id);\n         tcx.infer_ctxt().enter(|infcx| {\n-            let _ = type_check_internal(&infcx, id, param_env, mir, &[], None, None, &mut |_| ());\n+            let _ = type_check_internal(\n+                &infcx,\n+                def_id,\n+                param_env,\n+                mir,\n+                &[],\n+                None,\n+                None,\n+                &mut |_| (),\n+            );\n \n             // For verification purposes, we just ignore the resulting\n             // region constraint sets. Not our problem. =)"}]}