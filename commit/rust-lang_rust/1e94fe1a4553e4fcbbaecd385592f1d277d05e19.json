{"sha": "1e94fe1a4553e4fcbbaecd385592f1d277d05e19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlOTRmZTFhNDU1M2U0ZmNiYmFlY2QzODU1OTJmMWQyNzdkMDVlMTk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-08-26T19:38:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-26T19:38:09Z"}, "message": "Rollup merge of #88270 - lqd:hrtb-type-ascription, r=nikomatsakis\n\nHandle type ascription type ops in NLL HRTB diagnostics\n\nCurrently, there are still a few cases of the \"higher-ranked subtype error\" of yore, 4 of which are related to type ascription.\n\nThis PR is a follow-up to #86700, adding support for type ascription type ops, and makes 3 of these tests output the same diagnostics in NLL mode as the migrate mode (and 1 is now much closer, especially if you ignore that it already outputs an additional error in NLL mode -- which could be a duplicate caused by a lack of normalization like [these comments point out](https://github.com/rust-lang/rust/blob/9583fd1bdd0127328e25e5b8c24dff575ec2c86b/compiler/rustc_traits/src/type_op.rs#L122-L157), or an imprecision in some parts of normalization as [described here](https://github.com/rust-lang/rust/pull/86700#discussion_r689086688)).\n\nSince we discussed these recently:\n- [here](https://github.com/rust-lang/rust/pull/86700#discussion_r689158868), cc ````@matthewjasper,````\n- and [here](https://github.com/rust-lang/rust/issues/57374#issuecomment-901500856), cc ````@Aaron1011.````\n\nIt should only leave [this TAIT test](https://github.com/rust-lang/rust/blob/9583fd1bdd0127328e25e5b8c24dff575ec2c86b/src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs) as still emitting [the terse error](https://github.com/rust-lang/rust/blob/9583fd1bdd0127328e25e5b8c24dff575ec2c86b/src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr).\n\nr? ````@estebank```` (so that they shake their fist at NLL's general direction less often) or ````@nikomatsakis```` or matthew or aaron, the more the merrier.", "tree": {"sha": "d57f9c79878de0ce03baf15ce4c9fa69ae9b1964", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d57f9c79878de0ce03baf15ce4c9fa69ae9b1964"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e94fe1a4553e4fcbbaecd385592f1d277d05e19", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhJ+2hCRBK7hj4Ov3rIwAAxlQIAGq1of6xXiomh5ECd/C1UmnI\nahuz8lsL0i2jTXSKQvCoCD/tEU6TXjxrNdNZ3Gcs63OQJH96nIeXKtuOCw8ox5Um\nhb7rUR4rJzz5Ug6mVGwWoQSM5jRG8iKgGyGQ/ccCqG/bCoyc33hylIRXOp7SBPQT\npxxmTFjWZJhKu+I2GnAwRbniv23nyfqPxiCuzwTTIMN/0/mBnQjSE5Bw+Y+JwJ7N\n7dmZ1PCxGT1Yu/5oLknVN8HQ+pyr+u0MqxKrpIhheLFTHuNlYUrD0lHjjittNHyl\n+eLw1u44IeOezPHxyfUZ+rre+DqTlO/vyT5Pc5p6YQB5VBMAaRvXCMJN0Vj1APs=\n=rdsE\n-----END PGP SIGNATURE-----\n", "payload": "tree d57f9c79878de0ce03baf15ce4c9fa69ae9b1964\nparent cf5e362fd5d228e172ba8765ab0127448aaee832\nparent 7b0e564e7cd3bebea7c41165db42a7b15010d2cc\nauthor Manish Goregaokar <manishsmail@gmail.com> 1630006689 -0700\ncommitter GitHub <noreply@github.com> 1630006689 -0700\n\nRollup merge of #88270 - lqd:hrtb-type-ascription, r=nikomatsakis\n\nHandle type ascription type ops in NLL HRTB diagnostics\n\nCurrently, there are still a few cases of the \"higher-ranked subtype error\" of yore, 4 of which are related to type ascription.\n\nThis PR is a follow-up to #86700, adding support for type ascription type ops, and makes 3 of these tests output the same diagnostics in NLL mode as the migrate mode (and 1 is now much closer, especially if you ignore that it already outputs an additional error in NLL mode -- which could be a duplicate caused by a lack of normalization like [these comments point out](https://github.com/rust-lang/rust/blob/9583fd1bdd0127328e25e5b8c24dff575ec2c86b/compiler/rustc_traits/src/type_op.rs#L122-L157), or an imprecision in some parts of normalization as [described here](https://github.com/rust-lang/rust/pull/86700#discussion_r689086688)).\n\nSince we discussed these recently:\n- [here](https://github.com/rust-lang/rust/pull/86700#discussion_r689158868), cc ````@matthewjasper,````\n- and [here](https://github.com/rust-lang/rust/issues/57374#issuecomment-901500856), cc ````@Aaron1011.````\n\nIt should only leave [this TAIT test](https://github.com/rust-lang/rust/blob/9583fd1bdd0127328e25e5b8c24dff575ec2c86b/src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs) as still emitting [the terse error](https://github.com/rust-lang/rust/blob/9583fd1bdd0127328e25e5b8c24dff575ec2c86b/src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr).\n\nr? ````@estebank```` (so that they shake their fist at NLL's general direction less often) or ````@nikomatsakis```` or matthew or aaron, the more the merrier.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e94fe1a4553e4fcbbaecd385592f1d277d05e19", "html_url": "https://github.com/rust-lang/rust/commit/1e94fe1a4553e4fcbbaecd385592f1d277d05e19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e94fe1a4553e4fcbbaecd385592f1d277d05e19/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf5e362fd5d228e172ba8765ab0127448aaee832", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5e362fd5d228e172ba8765ab0127448aaee832", "html_url": "https://github.com/rust-lang/rust/commit/cf5e362fd5d228e172ba8765ab0127448aaee832"}, {"sha": "7b0e564e7cd3bebea7c41165db42a7b15010d2cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0e564e7cd3bebea7c41165db42a7b15010d2cc", "html_url": "https://github.com/rust-lang/rust/commit/7b0e564e7cd3bebea7c41165db42a7b15010d2cc"}], "stats": {"total": 123, "additions": 77, "deletions": 46}, "files": [{"sha": "ac30093ba826015fba0f9859172857b2f2d3861b", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1e94fe1a4553e4fcbbaecd385592f1d277d05e19/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e94fe1a4553e4fcbbaecd385592f1d277d05e19/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fbound_region_errors.rs?ref=1e94fe1a4553e4fcbbaecd385592f1d277d05e19", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::type_op;\n use rustc_trait_selection::traits::{SelectionContext, TraitEngineExt as _};\n-use rustc_traits::type_op_prove_predicate_with_span;\n+use rustc_traits::{type_op_ascribe_user_type_with_span, type_op_prove_predicate_with_span};\n \n use std::fmt;\n use std::rc::Rc;\n@@ -104,10 +104,11 @@ impl<'tcx, T: Copy + fmt::Display + TypeFoldable<'tcx> + 'tcx> ToUniverseInfo<'t\n impl<'tcx> ToUniverseInfo<'tcx>\n     for Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::AscribeUserType<'tcx>>>\n {\n-    fn to_universe_info(self, _base_universe: ty::UniverseIndex) -> UniverseInfo<'tcx> {\n-        // Ascribe user type isn't usually called on types that have different\n-        // bound regions.\n-        UniverseInfo::other()\n+    fn to_universe_info(self, base_universe: ty::UniverseIndex) -> UniverseInfo<'tcx> {\n+        UniverseInfo(UniverseInfoInner::TypeOp(Rc::new(AscribeUserTypeQuery {\n+            canonical_query: self,\n+            base_universe,\n+        })))\n     }\n }\n \n@@ -267,6 +268,37 @@ where\n     }\n }\n \n+struct AscribeUserTypeQuery<'tcx> {\n+    canonical_query: Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::AscribeUserType<'tcx>>>,\n+    base_universe: ty::UniverseIndex,\n+}\n+\n+impl TypeOpInfo<'tcx> for AscribeUserTypeQuery<'tcx> {\n+    fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        // FIXME: This error message isn't great, but it doesn't show up in the existing UI tests,\n+        // and is only the fallback when the nice error fails. Consider improving this some more.\n+        tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\")\n+    }\n+\n+    fn base_universe(&self) -> ty::UniverseIndex {\n+        self.base_universe\n+    }\n+\n+    fn nice_error(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        span: Span,\n+        placeholder_region: ty::Region<'tcx>,\n+        error_region: Option<ty::Region<'tcx>>,\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n+        tcx.infer_ctxt().enter_with_canonical(span, &self.canonical_query, |ref infcx, key, _| {\n+            let mut fulfill_cx = <dyn TraitEngine<'_>>::new(tcx);\n+            type_op_ascribe_user_type_with_span(infcx, &mut *fulfill_cx, key, Some(span)).ok()?;\n+            try_extract_error_from_fulfill_cx(fulfill_cx, infcx, placeholder_region, error_region)\n+        })\n+    }\n+}\n+\n fn try_extract_error_from_fulfill_cx<'tcx>(\n     mut fulfill_cx: Box<dyn TraitEngine<'tcx> + 'tcx>,\n     infcx: &InferCtxt<'_, 'tcx>,"}, {"sha": "48c46c3069328e584d86ecca8ad052c54c62526f", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e94fe1a4553e4fcbbaecd385592f1d277d05e19/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e94fe1a4553e4fcbbaecd385592f1d277d05e19/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=1e94fe1a4553e4fcbbaecd385592f1d277d05e19", "patch": "@@ -19,7 +19,7 @@ mod normalize_erasing_regions;\n mod normalize_projection_ty;\n mod type_op;\n \n-pub use type_op::type_op_prove_predicate_with_span;\n+pub use type_op::{type_op_ascribe_user_type_with_span, type_op_prove_predicate_with_span};\n \n use rustc_middle::ty::query::Providers;\n "}, {"sha": "a76fb842616152af6da34f435c8a1b6a4dd69073", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1e94fe1a4553e4fcbbaecd385592f1d277d05e19/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e94fe1a4553e4fcbbaecd385592f1d277d05e19/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=1e94fe1a4553e4fcbbaecd385592f1d277d05e19", "patch": "@@ -40,18 +40,28 @@ fn type_op_ascribe_user_type<'tcx>(\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, AscribeUserType<'tcx>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt().enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n-        let (param_env, AscribeUserType { mir_ty, def_id, user_substs }) = key.into_parts();\n-\n-        debug!(\n-            \"type_op_ascribe_user_type: mir_ty={:?} def_id={:?} user_substs={:?}\",\n-            mir_ty, def_id, user_substs\n-        );\n+        type_op_ascribe_user_type_with_span(infcx, fulfill_cx, key, None)\n+    })\n+}\n \n-        let mut cx = AscribeUserTypeCx { infcx, param_env, fulfill_cx };\n-        cx.relate_mir_and_user_ty(mir_ty, def_id, user_substs)?;\n+/// The core of the `type_op_ascribe_user_type` query: for diagnostics purposes in NLL HRTB errors,\n+/// this query can be re-run to better track the span of the obligation cause, and improve the error\n+/// message. Do not call directly unless you're in that very specific context.\n+pub fn type_op_ascribe_user_type_with_span<'a, 'tcx: 'a>(\n+    infcx: &'a InferCtxt<'a, 'tcx>,\n+    fulfill_cx: &'a mut dyn TraitEngine<'tcx>,\n+    key: ParamEnvAnd<'tcx, AscribeUserType<'tcx>>,\n+    span: Option<Span>,\n+) -> Result<(), NoSolution> {\n+    let (param_env, AscribeUserType { mir_ty, def_id, user_substs }) = key.into_parts();\n+    debug!(\n+        \"type_op_ascribe_user_type: mir_ty={:?} def_id={:?} user_substs={:?}\",\n+        mir_ty, def_id, user_substs\n+    );\n \n-        Ok(())\n-    })\n+    let mut cx = AscribeUserTypeCx { infcx, param_env, fulfill_cx };\n+    cx.relate_mir_and_user_ty(mir_ty, def_id, user_substs, span)?;\n+    Ok(())\n }\n \n struct AscribeUserTypeCx<'me, 'tcx> {\n@@ -85,10 +95,15 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n         Ok(())\n     }\n \n-    fn prove_predicate(&mut self, predicate: Predicate<'tcx>) {\n+    fn prove_predicate(&mut self, predicate: Predicate<'tcx>, span: Option<Span>) {\n+        let cause = if let Some(span) = span {\n+            ObligationCause::dummy_with_span(span)\n+        } else {\n+            ObligationCause::dummy()\n+        };\n         self.fulfill_cx.register_predicate_obligation(\n             self.infcx,\n-            Obligation::new(ObligationCause::dummy(), self.param_env, predicate),\n+            Obligation::new(cause, self.param_env, predicate),\n         );\n     }\n \n@@ -108,6 +123,7 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n         mir_ty: Ty<'tcx>,\n         def_id: DefId,\n         user_substs: UserSubsts<'tcx>,\n+        span: Option<Span>,\n     ) -> Result<(), NoSolution> {\n         let UserSubsts { user_self_ty, substs } = user_substs;\n         let tcx = self.tcx();\n@@ -129,7 +145,7 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n         debug!(?instantiated_predicates.predicates);\n         for instantiated_predicate in instantiated_predicates.predicates {\n             let instantiated_predicate = self.normalize(instantiated_predicate);\n-            self.prove_predicate(instantiated_predicate);\n+            self.prove_predicate(instantiated_predicate, span);\n         }\n \n         if let Some(UserSelfTy { impl_def_id, self_ty }) = user_self_ty {\n@@ -141,6 +157,7 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n \n             self.prove_predicate(\n                 ty::PredicateKind::WellFormed(impl_self_ty.into()).to_predicate(self.tcx()),\n+                span,\n             );\n         }\n \n@@ -155,7 +172,10 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n         // them?  This would only be relevant if some input\n         // type were ill-formed but did not appear in `ty`,\n         // which...could happen with normalization...\n-        self.prove_predicate(ty::PredicateKind::WellFormed(ty.into()).to_predicate(self.tcx()));\n+        self.prove_predicate(\n+            ty::PredicateKind::WellFormed(ty.into()).to_predicate(self.tcx()),\n+            span,\n+        );\n         Ok(())\n     }\n }"}, {"sha": "90803a0adb01bf8cb1083f1fd396eb2a5aec79d9", "filename": "src/test/ui/hrtb/due-to-where-clause.nll.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf5e362fd5d228e172ba8765ab0127448aaee832/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf5e362fd5d228e172ba8765ab0127448aaee832/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.nll.stderr?ref=cf5e362fd5d228e172ba8765ab0127448aaee832", "patch": "@@ -1,8 +0,0 @@\n-error: higher-ranked subtype error\n-  --> $DIR/due-to-where-clause.rs:2:5\n-   |\n-LL |     test::<FooS>(&mut 42);\n-   |     ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "4de35d70c30a3d64be372a21fe519fa2d8ec6f5f", "filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.nll.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf5e362fd5d228e172ba8765ab0127448aaee832/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf5e362fd5d228e172ba8765ab0127448aaee832/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.nll.stderr?ref=cf5e362fd5d228e172ba8765ab0127448aaee832", "patch": "@@ -1,8 +0,0 @@\n-error: higher-ranked subtype error\n-  --> $DIR/hrtb-cache-issue-54302.rs:19:5\n-   |\n-LL |     assert_deserialize_owned::<&'static str>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "17d59bb321a453436bbbd8973e936846a8ac75cf", "filename": "src/test/ui/hrtb/hrtb-just-for-static.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1e94fe1a4553e4fcbbaecd385592f1d277d05e19/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e94fe1a4553e4fcbbaecd385592f1d277d05e19/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr?ref=1e94fe1a4553e4fcbbaecd385592f1d277d05e19", "patch": "@@ -17,11 +17,14 @@ LL |     want_hrtb::<&'a u32>()\n    |\n    = help: consider replacing `'a` with `'static`\n \n-error: higher-ranked subtype error\n+error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5\n    |\n LL |     want_hrtb::<&'a u32>()\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo<&'0 isize>` would have to be implemented for the type `&u32`, for any lifetime `'0`...\n+   = note: ...but `Foo<&'1 isize>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e68de0312824dac08f14311bbc394c73f608e7ac", "filename": "src/test/ui/issues/issue-54302.nll.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf5e362fd5d228e172ba8765ab0127448aaee832/src%2Ftest%2Fui%2Fissues%2Fissue-54302.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf5e362fd5d228e172ba8765ab0127448aaee832/src%2Ftest%2Fui%2Fissues%2Fissue-54302.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.nll.stderr?ref=cf5e362fd5d228e172ba8765ab0127448aaee832", "patch": "@@ -1,8 +0,0 @@\n-error: higher-ranked subtype error\n-  --> $DIR/issue-54302.rs:13:5\n-   |\n-LL |     assert_deserialize_owned::<&'static str>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}]}