{"sha": "45a73c8c0cf2d5a181be2c1e927212975e0cffc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YTczYzhjMGNmMmQ1YTE4MWJlMmMxZTkyNzIxMjk3NWUwY2ZmYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-12T14:35:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-12T14:35:43Z"}, "message": "Auto merge of #30110 - oli-obk:pretty_const_trans, r=pnkfelix\n\nturned some `match`es into `if let`s.", "tree": {"sha": "ae9531561f3d9e3334e4f44c777b9b01bd0f0613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae9531561f3d9e3334e4f44c777b9b01bd0f0613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45a73c8c0cf2d5a181be2c1e927212975e0cffc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45a73c8c0cf2d5a181be2c1e927212975e0cffc7", "html_url": "https://github.com/rust-lang/rust/commit/45a73c8c0cf2d5a181be2c1e927212975e0cffc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45a73c8c0cf2d5a181be2c1e927212975e0cffc7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0ed9f91690a205dd60a7b27dc01674bd03b87ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ed9f91690a205dd60a7b27dc01674bd03b87ca", "html_url": "https://github.com/rust-lang/rust/commit/f0ed9f91690a205dd60a7b27dc01674bd03b87ca"}, {"sha": "b85311506dda787216179a438fd2379588f255c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b85311506dda787216179a438fd2379588f255c6", "html_url": "https://github.com/rust-lang/rust/commit/b85311506dda787216179a438fd2379588f255c6"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "77664f19aac2ae0c0f1776a366e978616b92dba8", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/45a73c8c0cf2d5a181be2c1e927212975e0cffc7/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a73c8c0cf2d5a181be2c1e927212975e0cffc7/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=45a73c8c0cf2d5a181be2c1e927212975e0cffc7", "patch": "@@ -321,27 +321,26 @@ pub fn get_const_expr_as_global<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                           -> Result<ValueRef, ConstEvalFailure> {\n     debug!(\"get_const_expr_as_global: {:?}\", expr.id);\n     // Special-case constants to cache a common global for all uses.\n-    match expr.node {\n-        hir::ExprPath(..) => {\n-            let def = ccx.tcx().def_map.borrow().get(&expr.id).unwrap().full_def();\n-            match def {\n-                def::DefConst(def_id) | def::DefAssociatedConst(def_id) => {\n-                    if !ccx.tcx().tables.borrow().adjustments.contains_key(&expr.id) {\n-                        debug!(\"get_const_expr_as_global ({:?}): found const {:?}\",\n-                               expr.id, def_id);\n-                        return get_const_val(ccx, def_id, expr);\n-                    }\n+    if let hir::ExprPath(..) = expr.node {\n+        // `def` must be its own statement and cannot be in the `match`\n+        // otherwise the `def_map` will be borrowed for the entire match instead\n+        // of just to get the `def` value\n+        let def = ccx.tcx().def_map.borrow().get(&expr.id).unwrap().full_def();\n+        match def {\n+            def::DefConst(def_id) | def::DefAssociatedConst(def_id) => {\n+                if !ccx.tcx().tables.borrow().adjustments.contains_key(&expr.id) {\n+                    debug!(\"get_const_expr_as_global ({:?}): found const {:?}\",\n+                           expr.id, def_id);\n+                    return get_const_val(ccx, def_id, expr);\n                 }\n-                _ => {}\n-            }\n+            },\n+            _ => {},\n         }\n-        _ => {}\n     }\n \n     let key = (expr.id, param_substs);\n-    match ccx.const_values().borrow().get(&key) {\n-        Some(&val) => return Ok(val),\n-        None => {}\n+    if let Some(&val) = ccx.const_values().borrow().get(&key) {\n+        return Ok(val);\n     }\n     let ty = monomorphize::apply_param_substs(ccx.tcx(), param_substs,\n                                               &ccx.tcx().expr_ty(expr));\n@@ -350,10 +349,7 @@ pub fn get_const_expr_as_global<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // references, even when only the latter are correct.\n         try!(const_expr_unadjusted(ccx, expr, ty, param_substs, None, trueconst))\n     } else {\n-        match const_expr(ccx, expr, param_substs, None, trueconst) {\n-            Err(err) => return Err(err),\n-            Ok((ok, _)) => ok,\n-        }\n+        try!(const_expr(ccx, expr, param_substs, None, trueconst)).0\n     };\n \n     // boolean SSA values are i1, but they have to be stored in i8 slots,\n@@ -611,9 +607,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     };\n     let _icx = push_ctxt(\"const_expr\");\n     Ok(match e.node {\n-        hir::ExprLit(ref lit) => {\n-            const_lit(cx, e, &**lit)\n-        },\n+        hir::ExprLit(ref lit) => const_lit(cx, e, &**lit),\n         hir::ExprBinary(b, ref e1, ref e2) => {\n             /* Neither type is bottom, and we expect them to be unified\n              * already, so the following is safe. */"}]}