{"sha": "94736c434ee154b30e2ec22ec112b79e3f6c5884", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NzM2YzQzNGVlMTU0YjMwZTJlYzIyZWMxMTJiNzllM2Y2YzU4ODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-27T17:35:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-27T17:35:35Z"}, "message": "Auto merge of #80454 - JulianKnodt:ob_forest_op, r=matthewjasper\n\nSkip Ty w/o infer ty/const in trait select\n\nRemove some allocations & also add `skip_current_subtree` to skip subtrees with no inferred items.\n\nr? `@eddyb` since marked in the FIXME", "tree": {"sha": "493de6d48473f8ffa0a0a3811f8e3f4904b66c21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/493de6d48473f8ffa0a0a3811f8e3f4904b66c21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94736c434ee154b30e2ec22ec112b79e3f6c5884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94736c434ee154b30e2ec22ec112b79e3f6c5884", "html_url": "https://github.com/rust-lang/rust/commit/94736c434ee154b30e2ec22ec112b79e3f6c5884", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94736c434ee154b30e2ec22ec112b79e3f6c5884/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec7f8d94df0251532c47330abcb7988d77a1f818", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7f8d94df0251532c47330abcb7988d77a1f818", "html_url": "https://github.com/rust-lang/rust/commit/ec7f8d94df0251532c47330abcb7988d77a1f818"}, {"sha": "899f27d272a42dd1fb8ee7fe3db0fbb35b2fb3fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/899f27d272a42dd1fb8ee7fe3db0fbb35b2fb3fa", "html_url": "https://github.com/rust-lang/rust/commit/899f27d272a42dd1fb8ee7fe3db0fbb35b2fb3fa"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "bb7fc661d2d8a193411b0c5e0609b35aea721c83", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94736c434ee154b30e2ec22ec112b79e3f6c5884/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94736c434ee154b30e2ec22ec112b79e3f6c5884/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=94736c434ee154b30e2ec22ec112b79e3f6c5884", "patch": "@@ -13,7 +13,7 @@ type TypeWalkerStack<'tcx> = SmallVec<[GenericArg<'tcx>; 8]>;\n pub struct TypeWalker<'tcx> {\n     stack: TypeWalkerStack<'tcx>,\n     last_subtree: usize,\n-    visited: SsoHashSet<GenericArg<'tcx>>,\n+    pub visited: SsoHashSet<GenericArg<'tcx>>,\n }\n \n /// An iterator for walking the type tree."}, {"sha": "3c447a7d1f9bbb6fe49b54343e6c2fcadbeb5c20", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/94736c434ee154b30e2ec22ec112b79e3f6c5884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94736c434ee154b30e2ec22ec112b79e3f6c5884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=94736c434ee154b30e2ec22ec112b79e3f6c5884", "patch": "@@ -499,10 +499,10 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                     ) {\n                         Ok(()) => ProcessResult::Changed(vec![]),\n                         Err(ErrorHandled::TooGeneric) => {\n-                            pending_obligation.stalled_on = substs\n-                                .iter()\n-                                .filter_map(TyOrConstInferVar::maybe_from_generic_arg)\n-                                .collect();\n+                            pending_obligation.stalled_on.clear();\n+                            pending_obligation.stalled_on.extend(\n+                                substs.iter().filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n+                            );\n                             ProcessResult::Unchanged\n                         }\n                         Err(e) => ProcessResult::Error(CodeSelectionError(ConstEvalFailure(e))),\n@@ -544,13 +544,10 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                             ) {\n                                 Ok(val) => Ok(Const::from_value(self.selcx.tcx(), val, c.ty)),\n                                 Err(ErrorHandled::TooGeneric) => {\n-                                    stalled_on.append(\n-                                        &mut substs\n+                                    stalled_on.extend(\n+                                        substs\n                                             .iter()\n-                                            .filter_map(|arg| {\n-                                                TyOrConstInferVar::maybe_from_generic_arg(arg)\n-                                            })\n-                                            .collect(),\n+                                            .filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n                                     );\n                                     Err(ErrorHandled::TooGeneric)\n                                 }\n@@ -634,10 +631,11 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 // only reason we can fail to make progress on\n                 // trait selection is because we don't have enough\n                 // information about the types in the trait.\n-                *stalled_on = substs_infer_vars(\n+                stalled_on.clear();\n+                stalled_on.extend(substs_infer_vars(\n                     self.selcx,\n                     trait_obligation.predicate.map_bound(|pred| pred.trait_ref.substs),\n-                );\n+                ));\n \n                 debug!(\n                     \"process_predicate: pending obligation {:?} now stalled on {:?}\",\n@@ -664,10 +662,11 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n         match project::poly_project_and_unify_type(self.selcx, &project_obligation) {\n             Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),\n             Ok(Ok(None)) => {\n-                *stalled_on = substs_infer_vars(\n+                stalled_on.clear();\n+                stalled_on.extend(substs_infer_vars(\n                     self.selcx,\n                     project_obligation.predicate.map_bound(|pred| pred.projection_ty.substs),\n-                );\n+                ));\n                 ProcessResult::Unchanged\n             }\n             // Let the caller handle the recursion\n@@ -683,18 +682,24 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n fn substs_infer_vars<'a, 'tcx>(\n     selcx: &mut SelectionContext<'a, 'tcx>,\n     substs: ty::Binder<SubstsRef<'tcx>>,\n-) -> Vec<TyOrConstInferVar<'tcx>> {\n+) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {\n     selcx\n         .infcx()\n         .resolve_vars_if_possible(substs)\n         .skip_binder() // ok because this check doesn't care about regions\n         .iter()\n-        // FIXME(eddyb) try using `skip_current_subtree` to skip everything that\n-        // doesn't contain inference variables, not just the outermost level.\n         .filter(|arg| arg.has_infer_types_or_consts())\n-        .flat_map(|arg| arg.walk())\n+        .flat_map(|arg| {\n+            let mut walker = arg.walk();\n+            while let Some(c) = walker.next() {\n+                if !c.has_infer_types_or_consts() {\n+                    walker.visited.remove(&c);\n+                    walker.skip_current_subtree();\n+                }\n+            }\n+            walker.visited.into_iter()\n+        })\n         .filter_map(TyOrConstInferVar::maybe_from_generic_arg)\n-        .collect()\n }\n \n fn to_fulfillment_error<'tcx>("}]}