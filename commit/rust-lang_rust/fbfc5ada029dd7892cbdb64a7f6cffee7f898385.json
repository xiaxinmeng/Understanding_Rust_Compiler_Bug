{"sha": "fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "node_id": "C_kwDOAAsO6NoAKGZiZmM1YWRhMDI5ZGQ3ODkyY2JkYjY0YTdmNmNmZmVlN2Y4OTgzODU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-08T11:57:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-08T11:57:32Z"}, "message": "Rollup merge of #105423 - oli-obk:symbols, r=jackh726\n\nUse `Symbol` for the crate name instead of `String`/`str`\n\nIt always got converted to a symbol anyway", "tree": {"sha": "6d0c14a26a4b1c031f34dd2341d690520f00e00e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d0c14a26a4b1c031f34dd2341d690520f00e00e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjkdEsCRBK7hj4Ov3rIwAA6PcIABO0wPLppBLHgoXI/aN+2ERG\nrjuYeNH8Jyb/q0adY5a3ibW5npCA70dcfTTJwU3Bd0yvEvFAR/TgnkyhDkP2ASkA\n8cII6JGNSch5ukzszqeGuTzvnIvShMs1kiT/ix0cTw8kyLb7ytY3c1Z9p5puycZh\nmeB6Qe3pFr1W2PwP7s1Sp+LYugaghhghnniAspAjctcQx6xzlhrmjPB51rS5Au1E\ngljxcJYNnZZwGST29LQHdTOUlbsm9XllQN2Jr7bHtrI2ZVaFkpfVbcA/wQrl4yuX\n+5kdMSFva+1cXSo5pBwreEFz8fr603+X3VJZyBNELGluqkPSaIh6Q1bzn8wWLrY=\n=CviM\n-----END PGP SIGNATURE-----\n", "payload": "tree 6d0c14a26a4b1c031f34dd2341d690520f00e00e\nparent 2fbde2b028126f20fbf4dbca58a7cdbd7f93a456\nparent d30848b30a4ba328b482e2e601de7517be2e5397\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670500652 +0100\ncommitter GitHub <noreply@github.com> 1670500652 +0100\n\nRollup merge of #105423 - oli-obk:symbols, r=jackh726\n\nUse `Symbol` for the crate name instead of `String`/`str`\n\nIt always got converted to a symbol anyway\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "html_url": "https://github.com/rust-lang/rust/commit/fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbde2b028126f20fbf4dbca58a7cdbd7f93a456", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbde2b028126f20fbf4dbca58a7cdbd7f93a456", "html_url": "https://github.com/rust-lang/rust/commit/2fbde2b028126f20fbf4dbca58a7cdbd7f93a456"}, {"sha": "d30848b30a4ba328b482e2e601de7517be2e5397", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30848b30a4ba328b482e2e601de7517be2e5397", "html_url": "https://github.com/rust-lang/rust/commit/d30848b30a4ba328b482e2e601de7517be2e5397"}], "stats": {"total": 195, "additions": 103, "deletions": 92}, "files": [{"sha": "882430694e16d7f65668154330f9796d7f8ff924", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -102,7 +102,7 @@ pub fn link_binary<'a>(\n                 sess,\n                 crate_type,\n                 outputs,\n-                codegen_results.crate_info.local_crate_name.as_str(),\n+                codegen_results.crate_info.local_crate_name,\n             );\n             match crate_type {\n                 CrateType::Rlib => {"}, {"sha": "f06ca5a0733a58039724c244df9f27ba871be246", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -25,6 +25,7 @@ use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_feature::find_gated_cfg;\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n@@ -374,14 +375,14 @@ fn run_compiler(\n             queries.global_ctxt()?.peek_mut().enter(|tcx| {\n                 let result = tcx.analysis(());\n                 if sess.opts.unstable_opts.save_analysis {\n-                    let crate_name = queries.crate_name()?.peek().clone();\n+                    let crate_name = tcx.crate_name(LOCAL_CRATE);\n                     sess.time(\"save_analysis\", || {\n                         save::process_crate(\n                             tcx,\n-                            &crate_name,\n+                            crate_name,\n                             compiler.input(),\n                             None,\n-                            DumpHandler::new(compiler.output_dir().as_deref(), &crate_name),\n+                            DumpHandler::new(compiler.output_dir().as_deref(), crate_name),\n                         )\n                     });\n                 }\n@@ -678,7 +679,7 @@ fn print_crate_info(\n                 let crate_types = collect_crate_types(sess, attrs);\n                 for &style in &crate_types {\n                     let fname =\n-                        rustc_session::output::filename_for_input(sess, style, &id, &t_outputs);\n+                        rustc_session::output::filename_for_input(sess, style, id, &t_outputs);\n                     println!(\"{}\", fname.file_name().unwrap().to_string_lossy());\n                 }\n             }"}, {"sha": "9d6a4f9a1fd7d063dfc06c704e5084abf31de117", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -960,7 +960,7 @@ pub trait LintStoreExpand {\n         node_id: NodeId,\n         attrs: &[Attribute],\n         items: &[P<Item>],\n-        name: &str,\n+        name: Symbol,\n     );\n }\n "}, {"sha": "1014ec2209c614cec4fef55cbbc9481be3192792", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -1122,7 +1122,7 @@ impl InvocationCollectorNode for P<ast::Item> {\n                         ecx.current_expansion.lint_node_id,\n                         &attrs,\n                         &items,\n-                        ident.name.as_str(),\n+                        ident.name,\n                     );\n                 }\n "}, {"sha": "d4791150947fb1fa3fa9f7a529ee113f59fea059", "filename": "compiler/rustc_hir/src/tests.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_hir%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_hir%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftests.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -1,5 +1,7 @@\n use crate::definitions::{DefKey, DefPathData, DisambiguatedDefPathData};\n use rustc_span::def_id::{DefPathHash, StableCrateId};\n+use rustc_span::edition::Edition;\n+use rustc_span::{create_session_if_not_set_then, Symbol};\n \n #[test]\n fn def_path_hash_depends_on_crate_id() {\n@@ -11,26 +13,28 @@ fn def_path_hash_depends_on_crate_id() {\n     // the crate by changing the crate disambiguator (e.g. via bumping the\n     // crate's version number).\n \n-    let id0 = StableCrateId::new(\"foo\", false, vec![\"1\".to_string()]);\n-    let id1 = StableCrateId::new(\"foo\", false, vec![\"2\".to_string()]);\n+    create_session_if_not_set_then(Edition::Edition2024, |_| {\n+        let id0 = StableCrateId::new(Symbol::intern(\"foo\"), false, vec![\"1\".to_string()]);\n+        let id1 = StableCrateId::new(Symbol::intern(\"foo\"), false, vec![\"2\".to_string()]);\n \n-    let h0 = mk_test_hash(id0);\n-    let h1 = mk_test_hash(id1);\n+        let h0 = mk_test_hash(id0);\n+        let h1 = mk_test_hash(id1);\n \n-    assert_ne!(h0.stable_crate_id(), h1.stable_crate_id());\n-    assert_ne!(h0.local_hash(), h1.local_hash());\n+        assert_ne!(h0.stable_crate_id(), h1.stable_crate_id());\n+        assert_ne!(h0.local_hash(), h1.local_hash());\n \n-    fn mk_test_hash(stable_crate_id: StableCrateId) -> DefPathHash {\n-        let parent_hash = DefPathHash::new(stable_crate_id, 0);\n+        fn mk_test_hash(stable_crate_id: StableCrateId) -> DefPathHash {\n+            let parent_hash = DefPathHash::new(stable_crate_id, 0);\n \n-        let key = DefKey {\n-            parent: None,\n-            disambiguated_data: DisambiguatedDefPathData {\n-                data: DefPathData::CrateRoot,\n-                disambiguator: 0,\n-            },\n-        };\n+            let key = DefKey {\n+                parent: None,\n+                disambiguated_data: DisambiguatedDefPathData {\n+                    data: DefPathData::CrateRoot,\n+                    disambiguator: 0,\n+                },\n+            };\n \n-        key.compute_stable_hash(parent_hash)\n-    }\n+            key.compute_stable_hash(parent_hash)\n+        }\n+    })\n }"}, {"sha": "97ebed0585579ab99bb60bc2b6eb0889f842261c", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -109,6 +109,7 @@ use rustc_data_structures::{base_n, flock};\n use rustc_errors::ErrorGuaranteed;\n use rustc_fs_util::{link_or_copy, LinkOrCopy};\n use rustc_session::{Session, StableCrateId};\n+use rustc_span::Symbol;\n \n use std::fs as std_fs;\n use std::io::{self, ErrorKind};\n@@ -202,7 +203,7 @@ pub fn in_incr_comp_dir(incr_comp_session_dir: &Path, file_name: &str) -> PathBu\n /// [`rustc_interface::queries::dep_graph`]: ../../rustc_interface/struct.Queries.html#structfield.dep_graph\n pub fn prepare_session_directory(\n     sess: &Session,\n-    crate_name: &str,\n+    crate_name: Symbol,\n     stable_crate_id: StableCrateId,\n ) -> Result<(), ErrorGuaranteed> {\n     if sess.opts.incremental.is_none() {\n@@ -657,7 +658,7 @@ fn string_to_timestamp(s: &str) -> Result<SystemTime, ()> {\n     Ok(UNIX_EPOCH + duration)\n }\n \n-fn crate_path(sess: &Session, crate_name: &str, stable_crate_id: StableCrateId) -> PathBuf {\n+fn crate_path(sess: &Session, crate_name: Symbol, stable_crate_id: StableCrateId) -> PathBuf {\n     let incr_dir = sess.opts.incremental.as_ref().unwrap().clone();\n \n     let stable_crate_id = base_n::encode(stable_crate_id.to_u64() as u128, INT_ENCODE_BASE);"}, {"sha": "f808c1438bfc5b91b5b4bed4eaf5acbd7e0960b3", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -158,7 +158,7 @@ pub fn create_resolver(\n     sess: Lrc<Session>,\n     metadata_loader: Box<MetadataLoaderDyn>,\n     krate: &ast::Crate,\n-    crate_name: &str,\n+    crate_name: Symbol,\n ) -> BoxedResolver {\n     trace!(\"create_resolver\");\n     BoxedResolver::new(sess, move |sess, resolver_arenas| {\n@@ -171,7 +171,7 @@ pub fn register_plugins<'a>(\n     metadata_loader: &'a dyn MetadataLoader,\n     register_lints: impl Fn(&Session, &mut LintStore),\n     mut krate: ast::Crate,\n-    crate_name: &str,\n+    crate_name: Symbol,\n ) -> Result<(ast::Crate, LintStore)> {\n     krate = sess.time(\"attributes_injection\", || {\n         rustc_builtin_macros::cmdline_attrs::inject(\n@@ -228,19 +228,21 @@ fn pre_expansion_lint<'a>(\n     lint_store: &LintStore,\n     registered_tools: &RegisteredTools,\n     check_node: impl EarlyCheckNode<'a>,\n-    node_name: &str,\n+    node_name: Symbol,\n ) {\n-    sess.prof.generic_activity_with_arg(\"pre_AST_expansion_lint_checks\", node_name).run(|| {\n-        rustc_lint::check_ast_node(\n-            sess,\n-            true,\n-            lint_store,\n-            registered_tools,\n-            None,\n-            rustc_lint::BuiltinCombinedPreExpansionLintPass::new(),\n-            check_node,\n-        );\n-    });\n+    sess.prof.generic_activity_with_arg(\"pre_AST_expansion_lint_checks\", node_name.as_str()).run(\n+        || {\n+            rustc_lint::check_ast_node(\n+                sess,\n+                true,\n+                lint_store,\n+                registered_tools,\n+                None,\n+                rustc_lint::BuiltinCombinedPreExpansionLintPass::new(),\n+                check_node,\n+            );\n+        },\n+    );\n }\n \n // Cannot implement directly for `LintStore` due to trait coherence.\n@@ -254,7 +256,7 @@ impl LintStoreExpand for LintStoreExpandImpl<'_> {\n         node_id: ast::NodeId,\n         attrs: &[ast::Attribute],\n         items: &[rustc_ast::ptr::P<ast::Item>],\n-        name: &str,\n+        name: Symbol,\n     ) {\n         pre_expansion_lint(sess, self.0, registered_tools, (node_id, attrs, items), name);\n     }\n@@ -268,7 +270,7 @@ pub fn configure_and_expand(\n     sess: &Session,\n     lint_store: &LintStore,\n     mut krate: ast::Crate,\n-    crate_name: &str,\n+    crate_name: Symbol,\n     resolver: &mut Resolver<'_>,\n ) -> Result<ast::Crate> {\n     trace!(\"configure_and_expand\");\n@@ -462,7 +464,7 @@ fn generated_output_paths(\n     sess: &Session,\n     outputs: &OutputFilenames,\n     exact_name: bool,\n-    crate_name: &str,\n+    crate_name: Symbol,\n ) -> Vec<PathBuf> {\n     let mut out_filenames = Vec::new();\n     for output_type in sess.opts.output_types.keys() {\n@@ -661,7 +663,7 @@ pub fn prepare_outputs(\n     compiler: &Compiler,\n     krate: &ast::Crate,\n     boxed_resolver: &RefCell<BoxedResolver>,\n-    crate_name: &str,\n+    crate_name: Symbol,\n ) -> Result<OutputFilenames> {\n     let _timer = sess.timer(\"prepare_outputs\");\n \n@@ -771,7 +773,7 @@ pub fn create_global_ctxt<'tcx>(\n     dep_graph: DepGraph,\n     resolver: Rc<RefCell<BoxedResolver>>,\n     outputs: OutputFilenames,\n-    crate_name: &str,\n+    crate_name: Symbol,\n     queries: &'tcx OnceCell<TcxQueries<'tcx>>,\n     global_ctxt: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,"}, {"sha": "39e1f2204b002010176277dadfb531098f096730", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -17,6 +17,7 @@ use rustc_query_impl::Queries as TcxQueries;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n use rustc_session::{output::find_crate_name, Session};\n use rustc_span::symbol::sym;\n+use rustc_span::Symbol;\n use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n use std::rc::Rc;\n@@ -74,7 +75,7 @@ pub struct Queries<'tcx> {\n \n     dep_graph_future: Query<Option<DepGraphFuture>>,\n     parse: Query<ast::Crate>,\n-    crate_name: Query<String>,\n+    crate_name: Query<Symbol>,\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n@@ -135,7 +136,7 @@ impl<'tcx> Queries<'tcx> {\n                 &*self.codegen_backend().metadata_loader(),\n                 self.compiler.register_lints.as_deref().unwrap_or_else(|| empty),\n                 krate,\n-                &crate_name,\n+                crate_name,\n             )?;\n \n             // Compute the dependency graph (in the background). We want to do\n@@ -149,7 +150,7 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn crate_name(&self) -> Result<&Query<String>> {\n+    pub fn crate_name(&self) -> Result<&Query<Symbol>> {\n         self.crate_name.compute(|| {\n             Ok({\n                 let parse_result = self.parse()?;\n@@ -165,18 +166,18 @@ impl<'tcx> Queries<'tcx> {\n     ) -> Result<&Query<(Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>> {\n         trace!(\"expansion\");\n         self.expansion.compute(|| {\n-            let crate_name = self.crate_name()?.peek().clone();\n+            let crate_name = *self.crate_name()?.peek();\n             let (krate, lint_store) = self.register_plugins()?.take();\n             let _timer = self.session().timer(\"configure_and_expand\");\n             let sess = self.session();\n             let mut resolver = passes::create_resolver(\n                 sess.clone(),\n                 self.codegen_backend().metadata_loader(),\n                 &krate,\n-                &crate_name,\n+                crate_name,\n             );\n             let krate = resolver.access(|resolver| {\n-                passes::configure_and_expand(sess, &lint_store, krate, &crate_name, resolver)\n+                passes::configure_and_expand(sess, &lint_store, krate, crate_name, resolver)\n             })?;\n             Ok((Lrc::new(krate), Rc::new(RefCell::new(resolver)), lint_store))\n         })\n@@ -201,20 +202,20 @@ impl<'tcx> Queries<'tcx> {\n     pub fn prepare_outputs(&self) -> Result<&Query<OutputFilenames>> {\n         self.prepare_outputs.compute(|| {\n             let (krate, boxed_resolver, _) = &*self.expansion()?.peek();\n-            let crate_name = self.crate_name()?.peek();\n+            let crate_name = *self.crate_name()?.peek();\n             passes::prepare_outputs(\n                 self.session(),\n                 self.compiler,\n                 krate,\n                 &*boxed_resolver,\n-                &crate_name,\n+                crate_name,\n             )\n         })\n     }\n \n     pub fn global_ctxt(&'tcx self) -> Result<&Query<QueryContext<'tcx>>> {\n         self.global_ctxt.compute(|| {\n-            let crate_name = self.crate_name()?.peek().clone();\n+            let crate_name = *self.crate_name()?.peek();\n             let outputs = self.prepare_outputs()?.take();\n             let dep_graph = self.dep_graph()?.peek().clone();\n             let (krate, resolver, lint_store) = self.expansion()?.take();\n@@ -225,7 +226,7 @@ impl<'tcx> Queries<'tcx> {\n                 dep_graph,\n                 resolver,\n                 outputs,\n-                &crate_name,\n+                crate_name,\n                 &self.queries,\n                 &self.gcx,\n                 &self.arena,"}, {"sha": "efeaac8fe9a0f8523c1861ae8dd6fb6160af091b", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -245,15 +245,15 @@ impl<'a> CrateLoader<'a> {\n     pub fn new(\n         sess: &'a Session,\n         metadata_loader: Box<MetadataLoaderDyn>,\n-        local_crate_name: &str,\n+        local_crate_name: Symbol,\n     ) -> Self {\n         let mut stable_crate_ids = FxHashMap::default();\n         stable_crate_ids.insert(sess.local_stable_crate_id(), LOCAL_CRATE);\n \n         CrateLoader {\n             sess,\n             metadata_loader,\n-            local_crate_name: Symbol::intern(local_crate_name),\n+            local_crate_name,\n             cstore: CStore {\n                 // We add an empty entry for LOCAL_CRATE (which maps to zero) in\n                 // order to make array indices in `metas` match with the\n@@ -1000,7 +1000,7 @@ impl<'a> CrateLoader<'a> {\n                 );\n                 let name = match orig_name {\n                     Some(orig_name) => {\n-                        validate_crate_name(self.sess, orig_name.as_str(), Some(item.span));\n+                        validate_crate_name(self.sess, orig_name, Some(item.span));\n                         orig_name\n                     }\n                     None => item.ident.name,"}, {"sha": "7601f6bd3221efaae15ef9b76f4c54366cd9628c", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -61,8 +61,7 @@ pub fn encode_and_write_metadata(tcx: TyCtxt<'_>) -> (EncodedMetadata, bool) {\n         .unwrap_or(MetadataKind::None);\n \n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n-    let out_filename =\n-        filename_for_metadata(tcx.sess, crate_name.as_str(), tcx.output_filenames(()));\n+    let out_filename = filename_for_metadata(tcx.sess, crate_name, tcx.output_filenames(()));\n     // To avoid races with another rustc process scanning the output directory,\n     // we need to write the file somewhere else and atomically move it to its\n     // final destination, with an `fs::rename` call. In order for the rename to"}, {"sha": "b44bc14ec26c83bc75bb746d2d831e3634a3159a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -1285,7 +1285,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n         queries: &'tcx dyn query::QueryEngine<'tcx>,\n         query_kinds: &'tcx [DepKindStruct<'tcx>],\n-        crate_name: &str,\n+        crate_name: Symbol,\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = s.target.parse_data_layout().unwrap_or_else(|err| {\n@@ -1325,7 +1325,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             pred_rcache: Default::default(),\n             selection_cache: Default::default(),\n             evaluation_cache: Default::default(),\n-            crate_name: Symbol::intern(crate_name),\n+            crate_name,\n             data_layout,\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n             output_filenames: Arc::new(output_filenames),"}, {"sha": "82f5d0f534a4bf76d6ca2e37bc7a83015abc92ca", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -1196,7 +1196,7 @@ impl<'a> Resolver<'a> {\n     pub fn new(\n         session: &'a Session,\n         krate: &Crate,\n-        crate_name: &str,\n+        crate_name: Symbol,\n         metadata_loader: Box<MetadataLoaderDyn>,\n         arenas: &'a ResolverArenas<'a>,\n     ) -> Resolver<'a> {"}, {"sha": "9ae07cb005bd41b0db70ee91e528cf9db13bd741", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         self.save_ctxt.lookup_def_id(ref_id)\n     }\n \n-    pub fn dump_crate_info(&mut self, name: &str) {\n+    pub fn dump_crate_info(&mut self, name: Symbol) {\n         let source_file = self.tcx.sess.local_crate_source_file.as_ref();\n         let crate_root = source_file.map(|source_file| {\n             let source_file = Path::new(source_file);\n@@ -124,7 +124,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n \n         let data = CratePreludeData {\n             crate_id: GlobalCrateId {\n-                name: name.into(),\n+                name: name.to_string(),\n                 disambiguator: (self.tcx.sess.local_stable_crate_id().to_u64(), 0),\n             },\n             crate_root: crate_root.unwrap_or_else(|| \"<no source>\".to_owned()),\n@@ -135,7 +135,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         self.dumper.crate_prelude(data);\n     }\n \n-    pub fn dump_compilation_options(&mut self, input: &Input, crate_name: &str) {\n+    pub fn dump_compilation_options(&mut self, input: &Input, crate_name: Symbol) {\n         // Apply possible `remap-path-prefix` remapping to the input source file\n         // (and don't include remapping args anymore)\n         let (program, arguments) = {"}, {"sha": "7735c571310dd2c4e3018026b956d08e23334754", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -95,7 +95,7 @@ impl<'tcx> SaveContext<'tcx> {\n     }\n \n     /// Returns path to the compilation output (e.g., libfoo-12345678.rmeta)\n-    pub fn compilation_output(&self, crate_name: &str) -> PathBuf {\n+    pub fn compilation_output(&self, crate_name: Symbol) -> PathBuf {\n         let sess = &self.tcx.sess;\n         // Save-analysis is emitted per whole session, not per each crate type\n         let crate_type = sess.crate_types()[0];\n@@ -894,8 +894,8 @@ pub struct DumpHandler<'a> {\n }\n \n impl<'a> DumpHandler<'a> {\n-    pub fn new(odir: Option<&'a Path>, cratename: &str) -> DumpHandler<'a> {\n-        DumpHandler { odir, cratename: cratename.to_owned() }\n+    pub fn new(odir: Option<&'a Path>, cratename: Symbol) -> DumpHandler<'a> {\n+        DumpHandler { odir, cratename: cratename.to_string() }\n     }\n \n     fn output_file(&self, ctx: &SaveContext<'_>) -> (BufWriter<File>, PathBuf) {\n@@ -960,7 +960,7 @@ impl SaveHandler for CallbackHandler<'_> {\n \n pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n     tcx: TyCtxt<'tcx>,\n-    cratename: &str,\n+    cratename: Symbol,\n     input: &'l Input,\n     config: Option<Config>,\n     mut handler: H,"}, {"sha": "ee492f802a70c08d21fcd119dc81755cb307aa4e", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -129,10 +129,10 @@ pub struct FileIsNotWriteable<'a> {\n \n #[derive(Diagnostic)]\n #[diag(session_crate_name_does_not_match)]\n-pub struct CrateNameDoesNotMatch<'a> {\n+pub struct CrateNameDoesNotMatch {\n     #[primary_span]\n     pub span: Span,\n-    pub s: &'a str,\n+    pub s: Symbol,\n     pub name: Symbol,\n }\n \n@@ -151,11 +151,11 @@ pub struct CrateNameEmpty {\n \n #[derive(Diagnostic)]\n #[diag(session_invalid_character_in_create_name)]\n-pub struct InvalidCharacterInCrateName<'a> {\n+pub struct InvalidCharacterInCrateName {\n     #[primary_span]\n     pub span: Option<Span>,\n     pub character: char,\n-    pub crate_name: &'a str,\n+    pub crate_name: Symbol,\n }\n \n #[derive(Subdiagnostic)]"}, {"sha": "8ee3057de625ef3b08c9faad46c824ae9c685130", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -7,14 +7,14 @@ use crate::errors::{\n use crate::Session;\n use rustc_ast as ast;\n use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n use std::path::{Path, PathBuf};\n \n pub fn out_filename(\n     sess: &Session,\n     crate_type: CrateType,\n     outputs: &OutputFilenames,\n-    crate_name: &str,\n+    crate_name: Symbol,\n ) -> PathBuf {\n     let default_filename = filename_for_input(sess, crate_type, crate_name, outputs);\n     let out_filename = outputs\n@@ -45,9 +45,9 @@ fn is_writeable(p: &Path) -> bool {\n     }\n }\n \n-pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input) -> String {\n-    let validate = |s: String, span: Option<Span>| {\n-        validate_crate_name(sess, &s, span);\n+pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input) -> Symbol {\n+    let validate = |s: Symbol, span: Option<Span>| {\n+        validate_crate_name(sess, s, span);\n         s\n     };\n \n@@ -59,38 +59,39 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n         sess.find_by_name(attrs, sym::crate_name).and_then(|at| at.value_str().map(|s| (at, s)));\n \n     if let Some(ref s) = sess.opts.crate_name {\n+        let s = Symbol::intern(s);\n         if let Some((attr, name)) = attr_crate_name {\n-            if name.as_str() != s {\n+            if name != s {\n                 sess.emit_err(CrateNameDoesNotMatch { span: attr.span, s, name });\n             }\n         }\n-        return validate(s.clone(), None);\n+        return validate(s, None);\n     }\n \n     if let Some((attr, s)) = attr_crate_name {\n-        return validate(s.to_string(), Some(attr.span));\n+        return validate(s, Some(attr.span));\n     }\n     if let Input::File(ref path) = *input {\n         if let Some(s) = path.file_stem().and_then(|s| s.to_str()) {\n             if s.starts_with('-') {\n                 sess.emit_err(CrateNameInvalid { s });\n             } else {\n-                return validate(s.replace('-', \"_\"), None);\n+                return validate(Symbol::intern(&s.replace('-', \"_\")), None);\n             }\n         }\n     }\n \n-    \"rust_out\".to_string()\n+    Symbol::intern(\"rust_out\")\n }\n \n-pub fn validate_crate_name(sess: &Session, s: &str, sp: Option<Span>) {\n+pub fn validate_crate_name(sess: &Session, s: Symbol, sp: Option<Span>) {\n     let mut err_count = 0;\n     {\n         if s.is_empty() {\n             err_count += 1;\n             sess.emit_err(CrateNameEmpty { span: sp });\n         }\n-        for c in s.chars() {\n+        for c in s.as_str().chars() {\n             if c.is_alphanumeric() {\n                 continue;\n             }\n@@ -109,7 +110,7 @@ pub fn validate_crate_name(sess: &Session, s: &str, sp: Option<Span>) {\n \n pub fn filename_for_metadata(\n     sess: &Session,\n-    crate_name: &str,\n+    crate_name: Symbol,\n     outputs: &OutputFilenames,\n ) -> PathBuf {\n     // If the command-line specified the path, use that directly.\n@@ -132,7 +133,7 @@ pub fn filename_for_metadata(\n pub fn filename_for_input(\n     sess: &Session,\n     crate_type: CrateType,\n-    crate_name: &str,\n+    crate_name: Symbol,\n     outputs: &OutputFilenames,\n ) -> PathBuf {\n     let libname = format!(\"{}{}\", crate_name, sess.opts.cg.extra_filename);"}, {"sha": "e62ce2c266aa04ca507edd377ab92672d193a336", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -1,4 +1,4 @@\n-use crate::HashStableContext;\n+use crate::{HashStableContext, Symbol};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_data_structures::AtomicRef;\n@@ -149,9 +149,11 @@ impl StableCrateId {\n \n     /// Computes the stable ID for a crate with the given name and\n     /// `-Cmetadata` arguments.\n-    pub fn new(crate_name: &str, is_exe: bool, mut metadata: Vec<String>) -> StableCrateId {\n+    pub fn new(crate_name: Symbol, is_exe: bool, mut metadata: Vec<String>) -> StableCrateId {\n         let mut hasher = StableHasher::new();\n-        crate_name.hash(&mut hasher);\n+        // We must hash the string text of the crate name, not the id, as the id is not stable\n+        // across builds.\n+        crate_name.as_str().hash(&mut hasher);\n \n         // We don't want the stable crate ID to depend on the order of\n         // -C metadata arguments, so sort them:"}, {"sha": "3aa57d58908bb7b30d61a7eff9ffff9e7af95eff", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc5ada029dd7892cbdb64a7f6cffee7f898385/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=fbfc5ada029dd7892cbdb64a7f6cffee7f898385", "patch": "@@ -67,7 +67,7 @@ impl CodegenBackend for TheBackend {\n             if crate_type != CrateType::Rlib {\n                 sess.fatal(&format!(\"Crate type is {:?}\", crate_type));\n             }\n-            let output_name = out_filename(sess, crate_type, &outputs, &*crate_name.as_str());\n+            let output_name = out_filename(sess, crate_type, &outputs, crate_name);\n             let mut out_file = ::std::fs::File::create(output_name).unwrap();\n             write!(out_file, \"This has been \\\"compiled\\\" successfully.\").unwrap();\n         }"}]}