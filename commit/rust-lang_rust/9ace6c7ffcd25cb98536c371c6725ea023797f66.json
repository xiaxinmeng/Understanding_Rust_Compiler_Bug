{"sha": "9ace6c7ffcd25cb98536c371c6725ea023797f66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhY2U2YzdmZmNkMjVjYjk4NTM2YzM3MWM2NzI1ZWEwMjM3OTdmNjY=", "commit": {"author": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-04T13:13:36Z"}, "committer": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-04T13:13:36Z"}, "message": "Consider expression with macro for possible missing comma lint", "tree": {"sha": "757f58c91d93d0ee607ef197e387e36b6712c2d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/757f58c91d93d0ee607ef197e387e36b6712c2d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ace6c7ffcd25cb98536c371c6725ea023797f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ace6c7ffcd25cb98536c371c6725ea023797f66", "html_url": "https://github.com/rust-lang/rust/commit/9ace6c7ffcd25cb98536c371c6725ea023797f66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ace6c7ffcd25cb98536c371c6725ea023797f66/comments", "author": null, "committer": null, "parents": [{"sha": "97301434cded4b6dd0413650aa82cb8f507e5f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/97301434cded4b6dd0413650aa82cb8f507e5f94", "html_url": "https://github.com/rust-lang/rust/commit/97301434cded4b6dd0413650aa82cb8f507e5f94"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "4eb7e1a4acd398929db4c163c94e9f1e6e04b119", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9ace6c7ffcd25cb98536c371c6725ea023797f66/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ace6c7ffcd25cb98536c371c6725ea023797f66/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=9ace6c7ffcd25cb98536c371c6725ea023797f66", "patch": "@@ -154,16 +154,18 @@ fn check_array(cx: &EarlyContext, expr: &ast::Expr) {\n     if let ast::ExprKind::Array(ref array) = expr.node {\n         for element in array {\n             if let ast::ExprKind::Binary(ref op, ref lhs, _) = element.node {\n-                let space_span = mk_sp(lhs.span.hi, op.span.lo);\n-                if let Some(space_snippet) = snippet_opt(cx, space_span) {\n-                    let lint_span = mk_sp(lhs.span.hi, lhs.span.hi);\n-                    if space_snippet.contains('\\n') {\n-                        span_note_and_lint(cx,\n-                                           POSSIBLE_MISSING_COMMA_IN_ARRAY_FORMATTING,\n-                                           lint_span,\n-                                           \"possibly missing a comma here\",\n-                                           lint_span,\n-                                           \"to remove this lint, add a comma or write the expr in a single line\");\n+                if !differing_macro_contexts(lhs.span, op.span) {\n+                    let space_span = mk_sp(lhs.span.hi, op.span.lo);\n+                    if let Some(space_snippet) = snippet_opt(cx, space_span) {\n+                        let lint_span = mk_sp(lhs.span.hi, lhs.span.hi);\n+                        if space_snippet.contains('\\n') {\n+                            span_note_and_lint(cx,\n+                                               POSSIBLE_MISSING_COMMA,\n+                                               lint_span,\n+                                               \"possibly missing a comma here\",\n+                                               lint_span,\n+                                               \"to remove this lint, add a comma or write the expr in a single line\");\n+                        }\n                     }\n                 }\n             }"}]}