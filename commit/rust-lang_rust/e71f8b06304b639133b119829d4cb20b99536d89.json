{"sha": "e71f8b06304b639133b119829d4cb20b99536d89", "node_id": "C_kwDOAAsO6NoAKGU3MWY4YjA2MzA0YjYzOTEzM2IxMTk4MjlkNGNiMjBiOTk1MzZkODk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-03T12:35:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-03T12:35:44Z"}, "message": "fix ./miri run with MIRI_TEST_TARGET", "tree": {"sha": "f1adf0fdb6350a7fc2ea98108576b1d510d37138", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1adf0fdb6350a7fc2ea98108576b1d510d37138"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e71f8b06304b639133b119829d4cb20b99536d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e71f8b06304b639133b119829d4cb20b99536d89", "html_url": "https://github.com/rust-lang/rust/commit/e71f8b06304b639133b119829d4cb20b99536d89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e71f8b06304b639133b119829d4cb20b99536d89/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6f44c1639e6c7ce5f84213649967d8542b51b3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f44c1639e6c7ce5f84213649967d8542b51b3b", "html_url": "https://github.com/rust-lang/rust/commit/c6f44c1639e6c7ce5f84213649967d8542b51b3b"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "d831b4979b2564f9df480246df91b30cc212f18d", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e71f8b06304b639133b119829d4cb20b99536d89/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e71f8b06304b639133b119829d4cb20b99536d89/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e71f8b06304b639133b119829d4cb20b99536d89", "patch": "@@ -418,9 +418,9 @@ Moreover, Miri recognizes some environment variables:\n   sysroot to use. Only set this if you do not want to use the automatically\n   created sysroot. (The `miri` driver sysroot is controlled via the `--sysroot`\n   flag instead.)\n-* `MIRI_TEST_TARGET` (recognized by the test suite) indicates which target\n-  architecture to test against.  `miri` and `cargo miri` accept the `--target`\n-  flag for the same purpose.\n+* `MIRI_TEST_TARGET` (recognized by the test suite and the `./miri` script) indicates which target\n+  architecture to test against.  `miri` and `cargo miri` accept the `--target` flag for the same\n+  purpose.\n * `MIRI_NO_STD` (recognized by `cargo miri` and the test suite) makes sure that the target's\n   sysroot is built without libstd. This allows testing and running no_std programs.\n * `MIRI_BLESS` (recognized by the test suite) overwrite all `stderr` and `stdout` files"}, {"sha": "da5634d6a95c1b6e1a607c64276e17d07b8bfe56", "filename": "miri", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e71f8b06304b639133b119829d4cb20b99536d89/miri", "raw_url": "https://github.com/rust-lang/rust/raw/e71f8b06304b639133b119829d4cb20b99536d89/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=e71f8b06304b639133b119829d4cb20b99536d89", "patch": "@@ -167,17 +167,21 @@ test|test-debug|bless|bless-debug)\n     $CARGO test $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/ui_test/Cargo.toml \"$@\"\n     ;;\n run|run-debug)\n-    # Scan for \"--target\" to set the \"MIRI_TEST_TARGET\" env var so\n+    # Scan for \"--target\" to overwrite the \"MIRI_TEST_TARGET\" env var so\n     # that we set the MIRI_SYSROOT up the right way.\n-    if [ -z \"$MIRI_TEST_TARGET\" ]; then\n-        for ARG in \"$@\"; do\n-            if [ \"$LAST_ARG\" = \"--target\" ]; then\n-                # Found it!\n-                export MIRI_TEST_TARGET=\"$ARG\"\n-                break\n-            fi\n-            LAST_ARG=\"$ARG\"\n-        done\n+    FOUND_TARGET_OPT=0\n+    for ARG in \"$@\"; do\n+        if [ \"$LAST_ARG\" = \"--target\" ]; then\n+            # Found it!\n+            export MIRI_TEST_TARGET=\"$ARG\"\n+            FOUND_TARGET_OPT=1\n+            break\n+        fi\n+        LAST_ARG=\"$ARG\"\n+    done\n+    if [ \"$FOUND_TARGET_OPT\" = \"0\" ] && [ -n \"$MIRI_TEST_TARGET\" ]; then\n+        # Make sure Miri actually uses this target.\n+        MIRIFLAGS=\"$MIRIFLAGS --target $MIRI_TEST_TARGET\"\n     fi\n     # First build and get a sysroot.\n     $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml"}]}