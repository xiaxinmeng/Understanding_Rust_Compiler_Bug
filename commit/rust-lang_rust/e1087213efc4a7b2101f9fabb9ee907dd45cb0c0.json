{"sha": "e1087213efc4a7b2101f9fabb9ee907dd45cb0c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMDg3MjEzZWZjNGE3YjIxMDFmOWZhYmI5ZWU5MDdkZDQ1Y2IwYzA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-02T02:48:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-04T18:03:27Z"}, "message": "hir::hir: simplify some imports", "tree": {"sha": "b4457f6bd79c402cd6fb97cf1a2f5fed7091ecfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4457f6bd79c402cd6fb97cf1a2f5fed7091ecfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1087213efc4a7b2101f9fabb9ee907dd45cb0c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1087213efc4a7b2101f9fabb9ee907dd45cb0c0", "html_url": "https://github.com/rust-lang/rust/commit/e1087213efc4a7b2101f9fabb9ee907dd45cb0c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1087213efc4a7b2101f9fabb9ee907dd45cb0c0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b66f4e79244bdc3749177ca679a29cd878a315c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b66f4e79244bdc3749177ca679a29cd878a315c", "html_url": "https://github.com/rust-lang/rust/commit/3b66f4e79244bdc3749177ca679a29cd878a315c"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "da67cf3ccba22e076cae1b1efd4e53fcd834253c", "filename": "src/librustc/hir/hir.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e1087213efc4a7b2101f9fabb9ee907dd45cb0c0/src%2Flibrustc%2Fhir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1087213efc4a7b2101f9fabb9ee907dd45cb0c0/src%2Flibrustc%2Fhir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fhir.rs?ref=e1087213efc4a7b2101f9fabb9ee907dd45cb0c0", "patch": "@@ -2,21 +2,15 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n \n-pub use self::BlockCheckMode::*;\n-pub use self::FunctionRetTy::*;\n-pub use self::PrimTy::*;\n-pub use self::UnOp::*;\n-pub use self::UnsafeSource::*;\n-\n use crate::hir::def::{DefKind, Res};\n use crate::hir::def_id::DefId;\n use crate::hir::itemlikevisit;\n use crate::hir::print;\n+use rustc_hir::hir_id::HirId;\n \n use errors::FatalError;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n-use rustc_hir::hir_id::*;\n use rustc_macros::HashStable;\n use rustc_session::node_id::NodeMap;\n use rustc_span::source_map::{SourceMap, Spanned};\n@@ -1068,16 +1062,16 @@ pub enum UnOp {\n impl UnOp {\n     pub fn as_str(self) -> &'static str {\n         match self {\n-            UnDeref => \"*\",\n-            UnNot => \"!\",\n-            UnNeg => \"-\",\n+            Self::UnDeref => \"*\",\n+            Self::UnNot => \"!\",\n+            Self::UnNeg => \"-\",\n         }\n     }\n \n     /// Returns `true` if the unary operator takes its argument by value.\n     pub fn is_by_value(self) -> bool {\n         match self {\n-            UnNeg | UnNot => true,\n+            Self::UnNeg | Self::UnNot => true,\n             _ => false,\n         }\n     }\n@@ -1387,7 +1381,7 @@ impl Expr<'_> {\n             // https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md#type-ascription-and-temporaries\n             ExprKind::Type(ref e, _) => e.is_place_expr(allow_projections_from),\n \n-            ExprKind::Unary(UnDeref, _) => true,\n+            ExprKind::Unary(UnOp::UnDeref, _) => true,\n \n             ExprKind::Field(ref base, _) | ExprKind::Index(ref base, _) => {\n                 allow_projections_from(base) || base.is_place_expr(allow_projections_from)\n@@ -2145,17 +2139,17 @@ pub enum FunctionRetTy<'hir> {\n impl fmt::Display for FunctionRetTy<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            Return(ref ty) => print::to_string(print::NO_ANN, |s| s.print_type(ty)).fmt(f),\n-            DefaultReturn(_) => \"()\".fmt(f),\n+            Self::Return(ref ty) => print::to_string(print::NO_ANN, |s| s.print_type(ty)).fmt(f),\n+            Self::DefaultReturn(_) => \"()\".fmt(f),\n         }\n     }\n }\n \n impl FunctionRetTy<'_> {\n     pub fn span(&self) -> Span {\n         match *self {\n-            DefaultReturn(span) => span,\n-            Return(ref ty) => ty.span,\n+            Self::DefaultReturn(span) => span,\n+            Self::Return(ref ty) => ty.span,\n         }\n     }\n }"}]}