{"sha": "a3a10c59e00906265ab177042948621540067f3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYTEwYzU5ZTAwOTA2MjY1YWIxNzcwNDI5NDg2MjE1NDAwNjdmM2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-24T16:30:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-24T16:30:15Z"}, "message": "Merge #2062\n\n2062: refactor comment extraction from tasks r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "dbbb4a6c5a762661cde00d5e7b1650ab984d885a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbbb4a6c5a762661cde00d5e7b1650ab984d885a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3a10c59e00906265ab177042948621540067f3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdsdGXCRBK7hj4Ov3rIwAAdHIIAGMsBaKESx8fiKoKmsXpx4px\n3jMiHAjZBPYlafaMCRy+lTW1zals+99hIef6Rojj3c4NW+nTg2jmwf1lKHdJs6h6\nr4EZbJlZ3+OURX39DzOyosrPxzXPgWVsK6r+XPisziZABYheHr4tgqWGjA67+pgq\nyVOM9d1GZeOQ8W37XxX/upiYCZ9Pr2nRP5XniZZSs6fnY0whTjnU6EA21PdIV4me\nrdKKRaQqvo+2JyZBkf+j33FqNTHVMp8mj9SAi7rmlYa6o0K6Os93ewju/GOx8dsS\nQetvD13xE6qzZx+kaJOBeVRmuaPper6xFpZij4NSXi1a0qnuUex9rT4ri4xstyM=\n=WMcv\n-----END PGP SIGNATURE-----\n", "payload": "tree dbbb4a6c5a762661cde00d5e7b1650ab984d885a\nparent 81677c3232fc4e6a9fb52889b4e82a8afdee9c7e\nparent a40d02c9eb1c7226bc7db87b014dc827e77f2a08\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1571934615 +0000\ncommitter GitHub <noreply@github.com> 1571934615 +0000\n\nMerge #2062\n\n2062: refactor comment extraction from tasks r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a10c59e00906265ab177042948621540067f3b", "html_url": "https://github.com/rust-lang/rust/commit/a3a10c59e00906265ab177042948621540067f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3a10c59e00906265ab177042948621540067f3b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81677c3232fc4e6a9fb52889b4e82a8afdee9c7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/81677c3232fc4e6a9fb52889b4e82a8afdee9c7e", "html_url": "https://github.com/rust-lang/rust/commit/81677c3232fc4e6a9fb52889b4e82a8afdee9c7e"}, {"sha": "a40d02c9eb1c7226bc7db87b014dc827e77f2a08", "url": "https://api.github.com/repos/rust-lang/rust/commits/a40d02c9eb1c7226bc7db87b014dc827e77f2a08", "html_url": "https://github.com/rust-lang/rust/commit/a40d02c9eb1c7226bc7db87b014dc827e77f2a08"}], "stats": {"total": 88, "additions": 46, "deletions": 42}, "files": [{"sha": "bf3a9011950d737b4e5627edf2f506980baf10ea", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a3a10c59e00906265ab177042948621540067f3b/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a10c59e00906265ab177042948621540067f3b/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=a3a10c59e00906265ab177042948621540067f3b", "patch": "@@ -8,7 +8,7 @@\n mod gen_syntax;\n mod gen_parser_tests;\n \n-use std::{fs, path::Path};\n+use std::{fs, mem, path::Path};\n \n use crate::Result;\n \n@@ -44,3 +44,26 @@ pub fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n     fs::write(path, contents)?;\n     Ok(())\n }\n+\n+fn extract_comment_blocks(text: &str) -> Vec<Vec<String>> {\n+    let mut res = Vec::new();\n+\n+    let prefix = \"// \";\n+    let lines = text.lines().map(str::trim_start);\n+\n+    let mut block = vec![];\n+    for line in lines {\n+        let is_comment = line.starts_with(prefix);\n+        if is_comment {\n+            block.push(line[prefix.len()..].to_string());\n+        } else {\n+            if !block.is_empty() {\n+                res.push(mem::replace(&mut block, Vec::new()))\n+            }\n+        }\n+    }\n+    if !block.is_empty() {\n+        res.push(mem::replace(&mut block, Vec::new()))\n+    }\n+    res\n+}"}, {"sha": "db1e59daccc1d18b9bdadc7147ecd3b35b73a2bf", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 22, "deletions": 41, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a3a10c59e00906265ab177042948621540067f3b/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a10c59e00906265ab177042948621540067f3b/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=a3a10c59e00906265ab177042948621540067f3b", "patch": "@@ -3,12 +3,12 @@\n \n use std::{\n     collections::HashMap,\n-    fs,\n+    fs, iter,\n     path::{Path, PathBuf},\n };\n \n use crate::{\n-    codegen::{self, update, Mode},\n+    codegen::{self, extract_comment_blocks, update, Mode},\n     project_root, Result,\n };\n \n@@ -56,48 +56,29 @@ struct Tests {\n     pub err: HashMap<String, Test>,\n }\n \n-fn collect_tests(s: &str) -> Vec<(usize, Test)> {\n-    let mut res = vec![];\n-    let prefix = \"// \";\n-    let lines = s.lines().map(str::trim_start).enumerate();\n-\n-    let mut block = vec![];\n-    for (line_idx, line) in lines {\n-        let is_comment = line.starts_with(prefix);\n-        if is_comment {\n-            block.push((line_idx, &line[prefix.len()..]));\n+fn collect_tests(s: &str) -> Vec<Test> {\n+    let mut res = Vec::new();\n+    for comment_block in extract_comment_blocks(s) {\n+        let first_line = &comment_block[0];\n+        let (name, ok) = if first_line.starts_with(\"test \") {\n+            let name = first_line[\"test \".len()..].to_string();\n+            (name, true)\n+        } else if first_line.starts_with(\"test_err \") {\n+            let name = first_line[\"test_err \".len()..].to_string();\n+            (name, false)\n         } else {\n-            process_block(&mut res, &block);\n-            block.clear();\n-        }\n-    }\n-    process_block(&mut res, &block);\n-    return res;\n-\n-    fn process_block(acc: &mut Vec<(usize, Test)>, block: &[(usize, &str)]) {\n-        if block.is_empty() {\n-            return;\n-        }\n-        let mut ok = true;\n-        let mut block = block.iter();\n-        let (start_line, name) = loop {\n-            match block.next() {\n-                Some(&(idx, line)) if line.starts_with(\"test \") => {\n-                    break (idx, line[\"test \".len()..].to_string());\n-                }\n-                Some(&(idx, line)) if line.starts_with(\"test_err \") => {\n-                    ok = false;\n-                    break (idx, line[\"test_err \".len()..].to_string());\n-                }\n-                Some(_) => (),\n-                None => return,\n-            }\n+            continue;\n         };\n-        let text: String =\n-            block.map(|(_, line)| *line).chain(std::iter::once(\"\")).collect::<Vec<_>>().join(\"\\n\");\n+        let text: String = comment_block[1..]\n+            .iter()\n+            .cloned()\n+            .chain(iter::once(String::new()))\n+            .collect::<Vec<_>>()\n+            .join(\"\\n\");\n         assert!(!text.trim().is_empty() && text.ends_with('\\n'));\n-        acc.push((start_line, Test { name, text, ok }))\n+        res.push(Test { name, text, ok })\n     }\n+    res\n }\n \n fn tests_from_dir(dir: &Path) -> Result<Tests> {\n@@ -118,7 +99,7 @@ fn tests_from_dir(dir: &Path) -> Result<Tests> {\n     fn process_file(res: &mut Tests, path: &Path) -> Result<()> {\n         let text = fs::read_to_string(path)?;\n \n-        for (_, test) in collect_tests(&text) {\n+        for test in collect_tests(&text) {\n             if test.ok {\n                 if let Some(old_test) = res.ok.insert(test.name.clone(), test) {\n                     Err(format!(\"Duplicate test: {}\", old_test.name))?"}]}