{"sha": "93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZWU4MGFjM2U5ZWNjM2VlZTQyNDZjNTZmY2U1NTgyYTZlMWExNWY=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-12T17:09:19Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-12T17:10:54Z"}, "message": "Use sym::Iterator instead of paths::ITERATOR", "tree": {"sha": "5281174850fdf672c88bdccc2bef468ec4c4c9c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5281174850fdf672c88bdccc2bef468ec4c4c9c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "html_url": "https://github.com/rust-lang/rust/commit/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ed6f1e6a1a8f414ba7e6d9b8222e7e5a1686e42", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed6f1e6a1a8f414ba7e6d9b8222e7e5a1686e42", "html_url": "https://github.com/rust-lang/rust/commit/6ed6f1e6a1a8f414ba7e6d9b8222e7e5a1686e42"}], "stats": {"total": 171, "additions": 97, "deletions": 74}, "files": [{"sha": "59bddb8473b032e3abc34e666d4764bc85471336", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    differing_macro_contexts, get_parent_expr, get_trait_def_id, implements_trait, paths,\n-    snippet_block_with_applicability, span_lint, span_lint_and_sugg,\n+    differing_macro_contexts, get_parent_expr, implements_trait, snippet_block_with_applicability, span_lint,\n+    span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -10,6 +10,7 @@ use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `if` conditions that use blocks containing an\n@@ -61,7 +62,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n                 if let Some(parent) = get_parent_expr(self.cx, expr);\n                 if let ExprKind::MethodCall(_, _, args, _) = parent.kind;\n                 let caller = self.cx.typeck_results().expr_ty(&args[0]);\n-                if let Some(iter_id) = get_trait_def_id(self.cx, &paths::ITERATOR);\n+                if let Some(iter_id) = self.cx.tcx.get_diagnostic_item(sym::Iterator);\n                 if implements_trait(self.cx, caller, iter_id, &[]);\n                 then {\n                     return;"}, {"sha": "0502f725efbf917449d831a0be9b7d2d2f53a6f0", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,7 +1,10 @@\n-use crate::utils::{is_copy, match_path, paths, span_lint_and_note};\n+use crate::utils::{is_copy, span_lint_and_note};\n use rustc_hir::{Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+use if_chain::if_chain;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for types that implement `Copy` as well as\n@@ -33,14 +36,16 @@ declare_lint_pass!(CopyIterator => [COPY_ITERATOR]);\n \n impl<'tcx> LateLintPass<'tcx> for CopyIterator {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl(Impl {\n-            of_trait: Some(ref trait_ref),\n-            ..\n-        }) = item.kind\n-        {\n+        if_chain! {\n+            if let ItemKind::Impl(Impl {\n+                of_trait: Some(ref trait_ref),\n+                ..\n+            }) = item.kind;\n             let ty = cx.tcx.type_of(item.def_id);\n-\n-            if is_copy(cx, ty) && match_path(&trait_ref.path, &paths::ITERATOR) {\n+            if is_copy(cx, ty);\n+            if let Some(trait_id) = trait_ref.trait_def_id();\n+            if cx.tcx.is_diagnostic_item(sym::Iterator, trait_id);\n+            then {\n                 span_lint_and_note(\n                     cx,\n                     COPY_ITERATOR,"}, {"sha": "d6b40fa9fa87fab140ec28076f21015e4907d872", "filename": "clippy_lints/src/loops/iter_next_loop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,10 +1,12 @@\n use super::ITER_NEXT_LOOP;\n-use crate::utils::{match_trait_method, paths, span_lint};\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use crate::utils::{is_trait_method, span_lint};\n \n pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, expr: &Expr<'_>) -> bool {\n-    if match_trait_method(cx, arg, &paths::ITERATOR) {\n+    if is_trait_method(cx, arg, sym::Iterator) {\n         span_lint(\n             cx,\n             ITER_NEXT_LOOP,"}, {"sha": "f8432abfa8a9bbb0129c669116a68b4a7bc3eb96", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,7 +1,7 @@\n use super::NEEDLESS_COLLECT;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    is_type_diagnostic_item, match_trait_method, match_type, path_to_local_id, paths, snippet, span_lint_and_sugg,\n+    is_trait_method, is_type_diagnostic_item, match_type, path_to_local_id, paths, snippet, span_lint_and_sugg,\n     span_lint_and_then,\n };\n use if_chain::if_chain;\n@@ -23,7 +23,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n     if_chain! {\n         if let ExprKind::MethodCall(ref method, _, ref args, _) = expr.kind;\n         if let ExprKind::MethodCall(ref chain_method, _, _, _) = args[0].kind;\n-        if chain_method.ident.name == sym!(collect) && match_trait_method(cx, &args[0], &paths::ITERATOR);\n+        if chain_method.ident.name == sym!(collect) && is_trait_method(cx, &args[0], sym::Iterator);\n         if let Some(ref generic_args) = chain_method.args;\n         if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n         then {\n@@ -94,7 +94,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                     init: Some(ref init_expr), .. }\n                 ) = stmt.kind;\n                 if let ExprKind::MethodCall(ref method_name, _, &[ref iter_source], ..) = init_expr.kind;\n-                if method_name.ident.name == sym!(collect) && match_trait_method(cx, &init_expr, &paths::ITERATOR);\n+                if method_name.ident.name == sym!(collect) && is_trait_method(cx, &init_expr, sym::Iterator);\n                 if let Some(ref generic_args) = method_name.args;\n                 if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n                 if let ty = cx.typeck_results().node_type(ty.hir_id);"}, {"sha": "e62b2ab16d1f1dcd94f95df60bddc044f928d3dd", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,6 +1,5 @@\n use crate::utils::{\n-    get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, is_integer_const, path_to_local,\n-    path_to_local_id, paths, sugg,\n+    get_parent_expr, has_iter_method, implements_trait, is_integer_const, path_to_local, path_to_local_id, sugg,\n };\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n@@ -10,7 +9,7 @@ use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, Mutability, Pat, P\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{sym, Symbol};\n use std::iter::Iterator;\n \n #[derive(Debug, PartialEq)]\n@@ -316,7 +315,7 @@ pub(super) fn get_span_of_entire_for_loop(expr: &Expr<'_>) -> Span {\n /// If `arg` was the argument to a `for` loop, return the \"cleanest\" way of writing the\n /// actual `Iterator` that the loop uses.\n pub(super) fn make_iterator_snippet(cx: &LateContext<'_>, arg: &Expr<'_>, applic_ref: &mut Applicability) -> String {\n-    let impls_iterator = get_trait_def_id(cx, &paths::ITERATOR).map_or(false, |id| {\n+    let impls_iterator = cx.tcx.get_diagnostic_item(sym::Iterator).map_or(false, |id| {\n         implements_trait(cx, cx.typeck_results().expr_ty(arg), id, &[])\n     });\n     if impls_iterator {"}, {"sha": "f3b8d0da9cd293a13d23b97ee8a0ab0b9841ccc7", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -2,8 +2,8 @@ use super::utils::{LoopNestVisitor, Nesting};\n use super::WHILE_LET_ON_ITERATOR;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    get_enclosing_block, get_trait_def_id, implements_trait, is_refutable, last_path_segment, match_trait_method,\n-    path_to_local, path_to_local_id, paths, snippet_with_applicability, span_lint_and_sugg,\n+    get_enclosing_block, implements_trait, is_refutable, is_trait_method, last_path_segment, path_to_local,\n+    path_to_local_id, snippet_with_applicability, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -27,7 +27,7 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n             // Don't lint when the iterator is recreated on every iteration\n             if_chain! {\n                 if let ExprKind::MethodCall(..) | ExprKind::Call(..) = iter_expr.kind;\n-                if let Some(iter_def_id) = get_trait_def_id(cx, &paths::ITERATOR);\n+                if let Some(iter_def_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n                 if implements_trait(cx, cx.typeck_results().expr_ty(iter_expr), iter_def_id, &[]);\n                 then {\n                     return;\n@@ -36,7 +36,7 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n \n             let lhs_constructor = last_path_segment(qpath);\n             if method_path.ident.name == sym::next\n-                && match_trait_method(cx, match_expr, &paths::ITERATOR)\n+                && is_trait_method(cx, match_expr, sym::Iterator)\n                 && lhs_constructor.ident.name == sym::Some\n                 && (pat_args.is_empty()\n                     || !is_refutable(cx, &pat_args[0])"}, {"sha": "61cf768bcabc7b1ecdd093496ae69b95134cb6ae", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::paths;\n use crate::utils::{\n-    is_copy, is_type_diagnostic_item, match_trait_method, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n+    is_copy, is_trait_method, is_type_diagnostic_item, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -55,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n             if args.len() == 2;\n             if method.ident.name == sym::map;\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n-            if is_type_diagnostic_item(cx, ty, sym::option_type) || match_trait_method(cx, e, &paths::ITERATOR);\n+            if is_type_diagnostic_item(cx, ty, sym::option_type) || is_trait_method(cx, e, sym::Iterator);\n             if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].kind;\n             let closure_body = cx.tcx.hir().body(body_id);\n             let closure_expr = remove_blocks(&closure_body.value);"}, {"sha": "7202a29edd9eb44c7ebdfd946ab8fb0025a11f1f", "filename": "clippy_lints/src/map_identity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_identity.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    is_adjusted, is_type_diagnostic_item, match_path, match_trait_method, match_var, paths, remove_blocks,\n+    is_adjusted, is_trait_method, is_type_diagnostic_item, match_path, match_var, paths, remove_blocks,\n     span_lint_and_sugg,\n };\n use if_chain::if_chain;\n@@ -65,7 +65,7 @@ fn get_map_argument<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<&'a\n         if let ExprKind::MethodCall(ref method, _, ref args, _) = expr.kind;\n         if args.len() == 2 && method.ident.name == sym::map;\n         let caller_ty = cx.typeck_results().expr_ty(&args[0]);\n-        if match_trait_method(cx, expr, &paths::ITERATOR)\n+        if is_trait_method(cx, expr, sym::Iterator)\n             || is_type_diagnostic_item(cx, caller_ty, sym::result_type)\n             || is_type_diagnostic_item(cx, caller_ty, sym::option_type);\n         then {"}, {"sha": "e6c2885eb4da6b764caf4664ff3f9af98f3afff5", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1614,7 +1614,7 @@ where\n \n mod redundant_pattern_match {\n     use super::REDUNDANT_PATTERN_MATCHING;\n-    use crate::utils::{match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n+    use crate::utils::{is_trait_method, match_qpath, paths, snippet, span_lint_and_then};\n     use if_chain::if_chain;\n     use rustc_ast::ast::LitKind;\n     use rustc_errors::Applicability;\n@@ -1679,7 +1679,7 @@ mod redundant_pattern_match {\n             if keyword == \"while\";\n             if let ExprKind::MethodCall(method_path, _, _, _) = op.kind;\n             if method_path.ident.name == sym::next;\n-            if match_trait_method(cx, op, &paths::ITERATOR);\n+            if is_trait_method(cx, op, sym::Iterator);\n             then {\n                 return;\n             }"}, {"sha": "42f05aa0b3af7b257ec544b106bcf58500ce53c8", "filename": "clippy_lints/src/methods/filter_flat_map.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_flat_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_flat_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_flat_map.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,6 +1,7 @@\n-use crate::utils::{match_trait_method, paths, span_lint_and_help};\n+use crate::utils::{is_trait_method, span_lint_and_help};\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::FILTER_MAP;\n \n@@ -12,7 +13,7 @@ pub(super) fn check<'tcx>(\n     _map_args: &'tcx [hir::Expr<'_>],\n ) {\n     // lint if caller of `.filter().flat_map()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let msg = \"called `filter(..).flat_map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n                     and filtering by returning `iter::empty()`\";"}, {"sha": "91c11afcaafc02febecbfe3e72aa6651acb4d09b", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_trait_method, path_to_local_id, paths, snippet, span_lint_and_sugg, SpanlessEq};\n+use crate::utils::{is_trait_method, path_to_local_id, snippet, span_lint_and_sugg, SpanlessEq};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -15,7 +15,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, is_\n     if_chain! {\n         if let ExprKind::MethodCall(_, _, [map_recv, map_arg], map_span) = expr.kind;\n         if let ExprKind::MethodCall(_, _, [_, filter_arg], filter_span) = map_recv.kind;\n-        if match_trait_method(cx, map_recv, &paths::ITERATOR);\n+        if is_trait_method(cx, map_recv, sym::Iterator);\n \n         // filter(|x| ...is_some())...\n         if let ExprKind::Closure(_, _, filter_body_id, ..) = filter_arg.kind;"}, {"sha": "e113f3f71b150c95338e0297e07544f0482c5b44", "filename": "clippy_lints/src/methods/filter_map_flat_map.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_flat_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_flat_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_flat_map.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,6 +1,7 @@\n-use crate::utils::{match_trait_method, paths, span_lint_and_help};\n+use crate::utils::{is_trait_method, span_lint_and_help};\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::FILTER_MAP;\n \n@@ -12,7 +13,7 @@ pub(super) fn check<'tcx>(\n     _map_args: &'tcx [hir::Expr<'_>],\n ) {\n     // lint if caller of `.filter_map().flat_map()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let msg = \"called `filter_map(..).flat_map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n                     and filtering by returning `iter::empty()`\";"}, {"sha": "5f627b42abcc8310c96579bc057be59f05605d49", "filename": "clippy_lints/src/methods/filter_map_identity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_identity.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,9 +1,9 @@\n-use crate::utils::{match_qpath, match_trait_method, path_to_local_id, paths, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, match_qpath, path_to_local_id, paths, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_span::source_map::Span;\n+use rustc_span::{source_map::Span, sym};\n \n use super::FILTER_MAP_IDENTITY;\n \n@@ -13,7 +13,7 @@ pub(super) fn check(\n     filter_map_args: &[hir::Expr<'_>],\n     filter_map_span: Span,\n ) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let arg_node = &filter_map_args[1].kind;\n \n         let apply_lint = |message: &str| {"}, {"sha": "2e704c4c555d444aad193037d49b28246af6cfd0", "filename": "clippy_lints/src/methods/filter_map_map.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_map.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,6 +1,7 @@\n-use crate::utils::{match_trait_method, paths, span_lint_and_help};\n+use crate::utils::{is_trait_method, span_lint_and_help};\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::FILTER_MAP;\n \n@@ -12,7 +13,7 @@ pub(super) fn check<'tcx>(\n     _map_args: &'tcx [hir::Expr<'_>],\n ) {\n     // lint if caller of `.filter_map().map()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let msg = \"called `filter_map(..).map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by only calling `.filter_map(..)` instead\";\n         span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);"}, {"sha": "9019202df0c5bf1dfdba0a36c8509b55c357b6a8", "filename": "clippy_lints/src/methods/filter_map_next.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,8 +1,9 @@\n-use crate::utils::{match_trait_method, meets_msrv, paths, snippet, span_lint, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, meets_msrv, snippet, span_lint, span_lint_and_sugg};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_semver::RustcVersion;\n+use rustc_span::sym;\n \n use super::FILTER_MAP_NEXT;\n \n@@ -14,7 +15,7 @@ pub(super) fn check<'tcx>(\n     filter_args: &'tcx [hir::Expr<'_>],\n     msrv: Option<&RustcVersion>,\n ) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         if !meets_msrv(msrv, &FILTER_MAP_NEXT_MSRV) {\n             return;\n         }"}, {"sha": "34787b9a828ee8f048c0eef869265980576d09ed", "filename": "clippy_lints/src/methods/filter_next.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,14 +1,15 @@\n-use crate::utils::{match_trait_method, paths, snippet, span_lint, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, snippet, span_lint, span_lint_and_sugg};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::FILTER_NEXT;\n \n /// lint use of `filter().next()` for `Iterators`\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, filter_args: &'tcx [hir::Expr<'_>]) {\n     // lint if caller of `.filter().next()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let msg = \"called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n                    `.find(..)` instead\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");"}, {"sha": "19ddceeccce7b6941c1e9913cd30556821502376", "filename": "clippy_lints/src/methods/flat_map_identity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_identity.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,9 +1,9 @@\n-use crate::utils::{match_qpath, match_trait_method, paths, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, match_qpath, paths, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_span::source_map::Span;\n+use rustc_span::{source_map::Span, sym};\n \n use super::FLAT_MAP_IDENTITY;\n \n@@ -14,7 +14,7 @@ pub(super) fn check<'tcx>(\n     flat_map_args: &'tcx [hir::Expr<'_>],\n     flat_map_span: Span,\n ) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let arg_node = &flat_map_args[1].kind;\n \n         let apply_lint = |message: &str| {"}, {"sha": "a5c5bc0e4e2623dc2fb736a97bece2403c29103a", "filename": "clippy_lints/src/methods/from_iter_instead_of_collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -4,6 +4,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty::Ty;\n+use rustc_span::sym;\n \n use super::FROM_ITER_INSTEAD_OF_COLLECT;\n \n@@ -13,7 +14,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Exp\n \n     if_chain! {\n         if let Some(from_iter_id) = get_trait_def_id(cx, &paths::FROM_ITERATOR);\n-        if let Some(iter_id) = get_trait_def_id(cx, &paths::ITERATOR);\n+        if let Some(iter_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n \n         if implements_trait(cx, ty, from_iter_id, &[]) && implements_trait(cx, arg_ty, iter_id, &[]);\n         then {"}, {"sha": "e7c3a433fe1bd52a2abd421696230e6347c4e93e", "filename": "clippy_lints/src/methods/inspect_for_each.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Finspect_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Finspect_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finspect_for_each.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,14 +1,14 @@\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_span::source_map::Span;\n+use rustc_span::{source_map::Span, sym};\n \n-use crate::utils::{match_trait_method, paths, span_lint_and_help};\n+use crate::utils::{is_trait_method, span_lint_and_help};\n \n use super::INSPECT_FOR_EACH;\n \n /// lint use of `inspect().for_each()` for `Iterators`\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, inspect_span: Span) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let msg = \"called `inspect(..).for_each(..)` on an `Iterator`\";\n         let hint = \"move the code from `inspect(..)` to `for_each(..)` and remove the `inspect(..)`\";\n         span_lint_and_help("}, {"sha": "ca2e5db4382538e209ee4a8015dcbe1d93e15731", "filename": "clippy_lints/src/methods/iter_nth_zero.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,15 +1,16 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{match_trait_method, paths, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::ITER_NTH_ZERO;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, nth_args: &'tcx [hir::Expr<'_>]) {\n     if_chain! {\n-        if match_trait_method(cx, expr, &paths::ITERATOR);\n+        if is_trait_method(cx, expr, sym::Iterator);\n         if let Some((Constant::Int(0), _)) = constant(cx, cx.typeck_results(), &nth_args[1]);\n         then {\n             let mut applicability = Applicability::MachineApplicable;"}, {"sha": "bdfa133b9e2851c8a394605cdb2e1578bed794d4", "filename": "clippy_lints/src/methods/iter_skip_next.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,13 +1,14 @@\n-use crate::utils::{match_trait_method, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, snippet, span_lint_and_sugg};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::ITER_SKIP_NEXT;\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, skip_args: &[hir::Expr<'_>]) {\n     // lint if caller of skip is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         if let [caller, n] = skip_args {\n             let hint = format!(\".nth({})\", snippet(cx, n.span, \"..\"));\n             span_lint_and_sugg("}, {"sha": "019a08f746eb7bb06a3b16dae845552b396d2e84", "filename": "clippy_lints/src/methods/iterator_step_by_zero.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fiterator_step_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fiterator_step_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiterator_step_by_zero.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,12 +1,13 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{match_trait_method, paths, span_lint};\n+use crate::utils::{is_trait_method, span_lint};\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::ITERATOR_STEP_BY_ZERO;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, args: &'tcx [hir::Expr<'_>]) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         if let Some((Constant::Int(0), _)) = constant(cx, cx.typeck_results(), &args[1]) {\n             span_lint(\n                 cx,"}, {"sha": "8f4de00a2b7d5fd1e2d58b15502964120962495e", "filename": "clippy_lints/src/methods/map_collect_result_unit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_type_diagnostic_item, match_trait_method, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, is_type_diagnostic_item, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -17,7 +17,7 @@ pub(super) fn check(\n     if_chain! {\n         // called on Iterator\n         if let [map_expr] = collect_args;\n-        if match_trait_method(cx, map_expr, &paths::ITERATOR);\n+        if is_trait_method(cx, map_expr, sym::Iterator);\n         // return of collect `Result<(),_>`\n         let collect_ret_ty = cx.typeck_results().expr_ty(expr);\n         if is_type_diagnostic_item(cx, collect_ret_ty, sym::result_type);"}, {"sha": "afd76e8b95950d4471847141e48930fbf65388af", "filename": "clippy_lints/src/methods/map_flatten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_type_diagnostic_item, match_trait_method, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, is_type_diagnostic_item, snippet, span_lint_and_sugg};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -10,7 +10,7 @@ use super::MAP_FLATTEN;\n /// lint use of `map().flatten()` for `Iterators` and 'Options'\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map_args: &'tcx [hir::Expr<'_>]) {\n     // lint if caller of `.map().flatten()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let map_closure_ty = cx.typeck_results().expr_ty(&map_args[1]);\n         let is_map_to_option = match map_closure_ty.kind() {\n             ty::Closure(_, _) | ty::FnDef(_, _) | ty::FnPtr(_) => {"}, {"sha": "eb3dc308722274a22708f46835dd8d02f8506d14", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    is_type_diagnostic_item, match_trait_method, paths, snippet, snippet_with_applicability, span_lint_and_help,\n+    is_trait_method, is_type_diagnostic_item, snippet, snippet_with_applicability, span_lint_and_help,\n     span_lint_and_sugg, strip_pat_refs,\n };\n use if_chain::if_chain;\n@@ -24,7 +24,7 @@ pub(super) fn check<'tcx>(\n     method_span: Span,\n ) {\n     // lint if caller of search is an Iterator\n-    if match_trait_method(cx, &is_some_args[0], &paths::ITERATOR) {\n+    if is_trait_method(cx, &is_some_args[0], sym::Iterator) {\n         let msg = format!(\n             \"called `is_some()` after searching an `Iterator` with `{}`\",\n             search_method"}, {"sha": "a9ff78c3260ec811e1aa05f5dcff50777c5b0eb5", "filename": "clippy_lints/src/methods/skip_while_next.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fskip_while_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Fskip_while_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fskip_while_next.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,13 +1,14 @@\n-use crate::utils::{match_trait_method, paths, span_lint_and_help};\n+use crate::utils::{is_trait_method, span_lint_and_help};\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::SKIP_WHILE_NEXT;\n \n /// lint use of `skip_while().next()` for `Iterators`\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, _skip_while_args: &'tcx [hir::Expr<'_>]) {\n     // lint if caller of `.skip_while().next()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         span_lint_and_help(\n             cx,\n             SKIP_WHILE_NEXT,"}, {"sha": "686874c0a24b01fa06e14a4723fd67a7200d19fe", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,16 +1,17 @@\n use crate::utils::usage::mutated_variables;\n-use crate::utils::{match_qpath, match_trait_method, path_to_local_id, paths, span_lint};\n+use crate::utils::{is_trait_method, match_qpath, path_to_local_id, paths, span_lint};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n+use rustc_span::sym;\n \n use if_chain::if_chain;\n \n use super::UNNECESSARY_FILTER_MAP;\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n-    if !match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if !is_trait_method(cx, expr, sym::Iterator) {\n         return;\n     }\n "}, {"sha": "9aa53f02ef069c185b36503f3f45b317b7b157fb", "filename": "clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -1,14 +1,13 @@\n use crate::utils::{\n-    match_trait_method, path_to_local_id, paths, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n-    strip_pat_refs,\n+    is_trait_method, path_to_local_id, remove_blocks, snippet_with_applicability, span_lint_and_sugg, strip_pat_refs,\n };\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::PatKind;\n use rustc_lint::LateContext;\n-use rustc_span::source_map::Span;\n+use rustc_span::{source_map::Span, sym};\n \n use super::UNNECESSARY_FOLD;\n \n@@ -71,7 +70,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, fold_args: &[hir\n     }\n \n     // Check that this is a call to Iterator::fold rather than just some function called fold\n-    if !match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if !is_trait_method(cx, expr, sym::Iterator) {\n         return;\n     }\n "}, {"sha": "3dad21d2028d93b10d05d1c2f6cbdc93a994ece8", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -273,6 +273,7 @@ pub fn is_isize_or_usize(typ: Ty<'_>) -> bool {\n }\n \n /// Checks if the method call given in `expr` belongs to the given trait.\n+/// This is a deprecated function, consider using [`is_trait_method`].\n pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str]) -> bool {\n     let def_id = cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n     let trt_id = cx.tcx.trait_of_item(def_id);\n@@ -295,6 +296,13 @@ pub fn is_diagnostic_assoc_item(cx: &LateContext<'_>, def_id: DefId, diag_item:\n         .map_or(false, |assoc_def_id| cx.tcx.is_diagnostic_item(diag_item, assoc_def_id))\n }\n \n+/// Checks if the method call given in `expr` belongs to the given trait.\n+pub fn is_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, diag_item: Symbol) -> bool {\n+    cx.typeck_results()\n+        .type_dependent_def_id(expr.hir_id)\n+        .map_or(false, |did| is_diagnostic_assoc_item(cx, did, diag_item))\n+}\n+\n /// Checks if an expression references a variable of the given name.\n pub fn match_var(expr: &Expr<'_>, var: Symbol) -> bool {\n     if let ExprKind::Path(QPath::Resolved(None, ref path)) = expr.kind {"}, {"sha": "11a446e42a4e185c846f4e42bf145b3a9f5a27c1", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=93ee80ac3e9ecc3eee4246c56fce5582a6e1a15f", "patch": "@@ -61,7 +61,6 @@ pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const IPADDR_V4: [&str; 4] = [\"std\", \"net\", \"IpAddr\", \"V4\"];\n pub const IPADDR_V6: [&str; 4] = [\"std\", \"net\", \"IpAddr\", \"V6\"];\n-pub const ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\"];\n #[cfg(feature = \"internal-lints\")]\n pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n #[cfg(feature = \"internal-lints\")]"}]}