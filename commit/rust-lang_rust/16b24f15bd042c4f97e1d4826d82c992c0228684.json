{"sha": "16b24f15bd042c4f97e1d4826d82c992c0228684", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YjI0ZjE1YmQwNDJjNGY5N2UxZDQ4MjZkODJjOTkyYzAyMjg2ODQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-15T13:06:20Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-15T13:12:48Z"}, "message": "Rollup merge of #22285 - kmcallister:pub-macro, r=nick29581\n\n It's not clear what this means, because a macro in item position can expand to zero or more items.  For now we disallow it, which is technically a\n\n    [breaking-change]\n\nbut is landing without an RFC.  The `pub` keyword previously had no effect, which seems quite unintended.\n\nFixes #18317.\nFixes #14660.", "tree": {"sha": "025ec78ee602bfc8a7ad87dd0b89a764c8186810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/025ec78ee602bfc8a7ad87dd0b89a764c8186810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16b24f15bd042c4f97e1d4826d82c992c0228684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16b24f15bd042c4f97e1d4826d82c992c0228684", "html_url": "https://github.com/rust-lang/rust/commit/16b24f15bd042c4f97e1d4826d82c992c0228684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16b24f15bd042c4f97e1d4826d82c992c0228684/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed728ec145d7b7819bcbd1a8fefaeeeccdcf897a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed728ec145d7b7819bcbd1a8fefaeeeccdcf897a", "html_url": "https://github.com/rust-lang/rust/commit/ed728ec145d7b7819bcbd1a8fefaeeeccdcf897a"}, {"sha": "dcd4cef119dc2fdac43b86cfb3694756d8c23f9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd4cef119dc2fdac43b86cfb3694756d8c23f9f", "html_url": "https://github.com/rust-lang/rust/commit/dcd4cef119dc2fdac43b86cfb3694756d8c23f9f"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "407740e580d2e30eff0e5d720d78dfc7490ee62a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16b24f15bd042c4f97e1d4826d82c992c0228684/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b24f15bd042c4f97e1d4826d82c992c0228684/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=16b24f15bd042c4f97e1d4826d82c992c0228684", "patch": "@@ -4650,6 +4650,17 @@ impl<'a> Parser<'a> {\n         self.parse_method(attrs, visa)\n     }\n \n+    fn complain_if_pub_macro(&mut self, visa: Visibility, span: Span) {\n+        match visa {\n+            Public => {\n+                self.span_err(span, \"can't qualify macro invocation with `pub`\");\n+                self.span_help(span, \"try adjusting the macro to put `pub` inside \\\n+                                      the invocation\");\n+            }\n+            Inherited => (),\n+        }\n+    }\n+\n     /// Parse a method in a trait impl, starting with `attrs` attributes.\n     pub fn parse_method(&mut self,\n                         attrs: Vec<Attribute>,\n@@ -4664,6 +4675,10 @@ impl<'a> Parser<'a> {\n                 && (self.look_ahead(2, |t| *t == token::OpenDelim(token::Paren))\n                     || self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace))) {\n                 // method macro.\n+\n+                let last_span = self.last_span;\n+                self.complain_if_pub_macro(visa, last_span);\n+\n                 let pth = self.parse_path(NoTypesAllowed);\n                 self.expect(&token::Not);\n \n@@ -5867,6 +5882,9 @@ impl<'a> Parser<'a> {\n                     || self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace))) {\n             // MACRO INVOCATION ITEM\n \n+            let last_span = self.last_span;\n+            self.complain_if_pub_macro(visibility, last_span);\n+\n             // item macro.\n             let pth = self.parse_path(NoTypesAllowed);\n             self.expect(&token::Not);"}, {"sha": "8809e9a257ddb0bd46cdb9abb22249102c508c8f", "filename": "src/test/compile-fail/pub-item-macro.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/16b24f15bd042c4f97e1d4826d82c992c0228684/src%2Ftest%2Fcompile-fail%2Fpub-item-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b24f15bd042c4f97e1d4826d82c992c0228684/src%2Ftest%2Fcompile-fail%2Fpub-item-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpub-item-macro.rs?ref=16b24f15bd042c4f97e1d4826d82c992c0228684", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #14660\n+\n+macro_rules! priv_x { () => {\n+    static x: u32 = 0;\n+}}\n+\n+macro_rules! pub_x { () => {\n+    pub priv_x!(); //~ ERROR can't qualify macro invocation with `pub`\n+    //~^ HELP try adjusting the macro to put `pub` inside the invocation\n+}}\n+\n+mod foo {\n+    pub_x!();\n+}\n+\n+fn main() {\n+    let y: u32 = foo::x;\n+}"}, {"sha": "aa890550f1c4868aa6ac3a4734bb98dc02fe19c6", "filename": "src/test/compile-fail/pub-method-macro.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/16b24f15bd042c4f97e1d4826d82c992c0228684/src%2Ftest%2Fcompile-fail%2Fpub-method-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b24f15bd042c4f97e1d4826d82c992c0228684/src%2Ftest%2Fcompile-fail%2Fpub-method-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpub-method-macro.rs?ref=16b24f15bd042c4f97e1d4826d82c992c0228684", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #18317\n+\n+mod bleh {\n+    macro_rules! defn {\n+        ($n:ident) => (\n+            fn $n (&self) -> i32 {\n+                println!(\"{}\", stringify!($n));\n+                1\n+            }\n+        )\n+    }\n+\n+    #[derive(Copy)]\n+    pub struct S;\n+\n+    impl S {\n+        pub defn!(f); //~ ERROR can't qualify macro invocation with `pub`\n+        //~^ HELP try adjusting the macro to put `pub` inside the invocation\n+    }\n+}\n+\n+fn main() {\n+    bleh::S.f();\n+}"}, {"sha": "442eea13d6bacb6c8cf69c767be40d3c8d6d68ba", "filename": "src/test/run-pass/pub-item-inside-macro.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/16b24f15bd042c4f97e1d4826d82c992c0228684/src%2Ftest%2Frun-pass%2Fpub-item-inside-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b24f15bd042c4f97e1d4826d82c992c0228684/src%2Ftest%2Frun-pass%2Fpub-item-inside-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpub-item-inside-macro.rs?ref=16b24f15bd042c4f97e1d4826d82c992c0228684", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #14660\n+\n+mod bleh {\n+    macro_rules! foo {\n+        () => {\n+            pub fn bar() { }\n+        }\n+    }\n+\n+    foo!();\n+}\n+\n+fn main() {\n+    bleh::bar();\n+}"}]}