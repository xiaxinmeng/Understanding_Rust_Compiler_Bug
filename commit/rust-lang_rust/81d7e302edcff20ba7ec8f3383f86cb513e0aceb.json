{"sha": "81d7e302edcff20ba7ec8f3383f86cb513e0aceb", "node_id": "C_kwDOAAsO6NoAKDgxZDdlMzAyZWRjZmYyMGJhN2VjOGYzMzgzZjg2Y2I1MTNlMGFjZWI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-14T12:18:51Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-16T12:44:39Z"}, "message": "Add basic tooltips to adjustment hints", "tree": {"sha": "ae7e4c6d71eb4a286bff2f479ed50cc23a3add40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae7e4c6d71eb4a286bff2f479ed50cc23a3add40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81d7e302edcff20ba7ec8f3383f86cb513e0aceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81d7e302edcff20ba7ec8f3383f86cb513e0aceb", "html_url": "https://github.com/rust-lang/rust/commit/81d7e302edcff20ba7ec8f3383f86cb513e0aceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81d7e302edcff20ba7ec8f3383f86cb513e0aceb/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff4d55e480470fd6e3c3c003703612294fd09d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4d55e480470fd6e3c3c003703612294fd09d15", "html_url": "https://github.com/rust-lang/rust/commit/ff4d55e480470fd6e3c3c003703612294fd09d15"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "45e85a338a452f36298ab441bcb432c4538d5fcc", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 43, "deletions": 21, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/81d7e302edcff20ba7ec8f3383f86cb513e0aceb/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d7e302edcff20ba7ec8f3383f86cb513e0aceb/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=81d7e302edcff20ba7ec8f3383f86cb513e0aceb", "patch": "@@ -3,15 +3,18 @@\n //! let _: u32  = /* <never-to-any> */ loop {};\n //! let _: &u32 = /* &* */ &mut 0;\n //! ```\n-use hir::{Adjust, AutoBorrow, Mutability, OverloadedDeref, PointerCast, Safety, Semantics};\n+use hir::{Adjust, Adjustment, AutoBorrow, HirDisplay, Mutability, PointerCast, Safety, Semantics};\n use ide_db::RootDatabase;\n \n use syntax::{\n     ast::{self, make, AstNode},\n     ted,\n };\n \n-use crate::{AdjustmentHints, AdjustmentHintsMode, InlayHint, InlayHintsConfig, InlayKind};\n+use crate::{\n+    AdjustmentHints, AdjustmentHintsMode, InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind,\n+    InlayTooltip,\n+};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -61,44 +64,63 @@ pub(super) fn hints(\n         &mut tmp1\n     };\n \n-    for adjustment in iter {\n-        if adjustment.source == adjustment.target {\n+    for Adjustment { source, target, kind } in iter {\n+        if source == target {\n             continue;\n         }\n \n         // FIXME: Add some nicer tooltips to each of these\n-        let text = match adjustment.kind {\n+        let (text, coercion) = match kind {\n             Adjust::NeverToAny if config.adjustment_hints == AdjustmentHints::Always => {\n-                \"<never-to-any>\"\n+                (\"<never-to-any>\", \"never to any\")\n+            }\n+            Adjust::Deref(_) => (\"*\", \"dereference\"),\n+            Adjust::Borrow(AutoBorrow::Ref(Mutability::Shared)) => (\"&\", \"borrow\"),\n+            Adjust::Borrow(AutoBorrow::Ref(Mutability::Mut)) => (\"&mut \", \"unique borrow\"),\n+            Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Shared)) => {\n+                (\"&raw const \", \"const pointer borrow\")\n+            }\n+            Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Mut)) => {\n+                (\"&raw mut \", \"mut pointer borrow\")\n             }\n-            Adjust::Deref(None) => \"*\",\n-            Adjust::Deref(Some(OverloadedDeref(Mutability::Mut))) => \"*\",\n-            Adjust::Deref(Some(OverloadedDeref(Mutability::Shared))) => \"*\",\n-            Adjust::Borrow(AutoBorrow::Ref(Mutability::Shared)) => \"&\",\n-            Adjust::Borrow(AutoBorrow::Ref(Mutability::Mut)) => \"&mut \",\n-            Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Shared)) => \"&raw const \",\n-            Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Mut)) => \"&raw mut \",\n             // some of these could be represented via `as` casts, but that's not too nice and\n             // handling everything as a prefix expr makes the `(` and `)` insertion easier\n             Adjust::Pointer(cast) if config.adjustment_hints == AdjustmentHints::Always => {\n                 match cast {\n-                    PointerCast::ReifyFnPointer => \"<fn-item-to-fn-pointer>\",\n-                    PointerCast::UnsafeFnPointer => \"<safe-fn-pointer-to-unsafe-fn-pointer>\",\n+                    PointerCast::ReifyFnPointer => {\n+                        (\"<fn-item-to-fn-pointer>\", \"fn item to fn pointer\")\n+                    }\n+                    PointerCast::UnsafeFnPointer => (\n+                        \"<safe-fn-pointer-to-unsafe-fn-pointer>\",\n+                        \"safe fn pointer to unsafe fn pointer\",\n+                    ),\n                     PointerCast::ClosureFnPointer(Safety::Unsafe) => {\n-                        \"<closure-to-unsafe-fn-pointer>\"\n+                        (\"<closure-to-unsafe-fn-pointer>\", \"closure to unsafe fn pointer\")\n+                    }\n+                    PointerCast::ClosureFnPointer(Safety::Safe) => {\n+                        (\"<closure-to-fn-pointer>\", \"closure to fn pointer\")\n+                    }\n+                    PointerCast::MutToConstPointer => {\n+                        (\"<mut-ptr-to-const-ptr>\", \"mut ptr to const ptr\")\n                     }\n-                    PointerCast::ClosureFnPointer(Safety::Safe) => \"<closure-to-fn-pointer>\",\n-                    PointerCast::MutToConstPointer => \"<mut-ptr-to-const-ptr>\",\n-                    PointerCast::ArrayToPointer => \"<array-ptr-to-element-ptr>\",\n-                    PointerCast::Unsize => \"<unsize>\",\n+                    PointerCast::ArrayToPointer => (\"<array-ptr-to-element-ptr>\", \"\"),\n+                    PointerCast::Unsize => (\"<unsize>\", \"unsize\"),\n                 }\n             }\n             _ => continue,\n         };\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n             kind: if postfix { InlayKind::AdjustmentPostfix } else { InlayKind::Adjustment },\n-            label: if postfix { format!(\".{}\", text.trim_end()).into() } else { text.into() },\n+            label: InlayHintLabel::simple(\n+                if postfix { format!(\".{}\", text.trim_end()) } else { text.to_owned() },\n+                Some(InlayTooltip::Markdown(format!(\n+                    \"`{}` \u2192 `{}` ({coercion} coercion)\",\n+                    source.display(sema.db),\n+                    target.display(sema.db),\n+                ))),\n+                None,\n+            ),\n         });\n     }\n     if !postfix && needs_inner_parens {"}]}