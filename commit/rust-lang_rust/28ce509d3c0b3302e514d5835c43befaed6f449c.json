{"sha": "28ce509d3c0b3302e514d5835c43befaed6f449c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Y2U1MDlkM2MwYjMzMDJlNTE0ZDU4MzVjNDNiZWZhZWQ2ZjQ0OWM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-07-19T16:21:31Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-07-19T21:16:37Z"}, "message": "clean-up find_bound_for_assoc_item", "tree": {"sha": "48dd9c5f57f29c061bafbb357bdb0b588d7c0ef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48dd9c5f57f29c061bafbb357bdb0b588d7c0ef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ce509d3c0b3302e514d5835c43befaed6f449c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ce509d3c0b3302e514d5835c43befaed6f449c", "html_url": "https://github.com/rust-lang/rust/commit/28ce509d3c0b3302e514d5835c43befaed6f449c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ce509d3c0b3302e514d5835c43befaed6f449c/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8edcff59d9131dfd78cf1897e861f0ee4140db10", "url": "https://api.github.com/repos/rust-lang/rust/commits/8edcff59d9131dfd78cf1897e861f0ee4140db10", "html_url": "https://github.com/rust-lang/rust/commit/8edcff59d9131dfd78cf1897e861f0ee4140db10"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "837f1be8511e700dfd674b721c6a9317b44b4daa", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28ce509d3c0b3302e514d5835c43befaed6f449c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce509d3c0b3302e514d5835c43befaed6f449c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=28ce509d3c0b3302e514d5835c43befaed6f449c", "patch": "@@ -1112,7 +1112,7 @@ fn report_ambiguous_associated_type(tcx: &ty::ctxt,\n // any ambiguity.\n fn find_bound_for_assoc_item<'tcx>(this: &AstConv<'tcx>,\n                                    ty_param_node_id: ast::NodeId,\n-                                   ty_param_name: Option<ast::Name>,\n+                                   ty_param_name: ast::Name,\n                                    assoc_name: ast::Name,\n                                    span: Span)\n                                    -> Result<ty::PolyTraitRef<'tcx>, ErrorReported>\n@@ -1138,21 +1138,11 @@ fn find_bound_for_assoc_item<'tcx>(this: &AstConv<'tcx>,\n         .filter(|b| this.trait_defines_associated_type_named(b.def_id(), assoc_name))\n         .collect();\n \n-    if let Some(s) = ty_param_name {\n-        // borrowck doesn't like this any other way\n-        one_bound_for_assoc_type(tcx,\n-                                 suitable_bounds,\n-                                 &token::get_name(s),\n-                                 &token::get_name(assoc_name),\n-                                 span)\n-    } else {\n-        one_bound_for_assoc_type(tcx,\n-                                 suitable_bounds,\n-                                 \"Self\",\n-                                 &token::get_name(assoc_name),\n-                                 span)\n-\n-    }\n+    one_bound_for_assoc_type(tcx,\n+                             suitable_bounds,\n+                             &token::get_name(ty_param_name),\n+                             &token::get_name(assoc_name),\n+                             span)\n }\n \n \n@@ -1251,7 +1241,11 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n         }\n         (&ty::TyParam(_), def::DefSelfTy(Some(trait_did),  None)) => {\n             assert_eq!(trait_did.krate, ast::LOCAL_CRATE);\n-            match find_bound_for_assoc_item(this, trait_did.node, None, assoc_name, span) {\n+            match find_bound_for_assoc_item(this,\n+                                            trait_did.node,\n+                                            token::special_idents::type_self.name,\n+                                            assoc_name,\n+                                            span) {\n                 Ok(bound) => bound,\n                 Err(ErrorReported) => return (tcx.types.err, ty_path_def),\n             }\n@@ -1260,7 +1254,7 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n             assert_eq!(param_did.krate, ast::LOCAL_CRATE);\n             match find_bound_for_assoc_item(this,\n                                             param_did.node,\n-                                            Some(param_name),\n+                                            param_name,\n                                             assoc_name,\n                                             span) {\n                 Ok(bound) => bound,"}]}