{"sha": "cac489115458af3eed301d8d4f9c6c7d6779b058", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYzQ4OTExNTQ1OGFmM2VlZDMwMWQ4ZDRmOWM2YzdkNjc3OWIwNTg=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-06-06T20:34:50Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-06-06T20:40:35Z"}, "message": "Fixups", "tree": {"sha": "829ac746ec1726fb7acd900ad2cd9768713a6d8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/829ac746ec1726fb7acd900ad2cd9768713a6d8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cac489115458af3eed301d8d4f9c6c7d6779b058", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cac489115458af3eed301d8d4f9c6c7d6779b058", "html_url": "https://github.com/rust-lang/rust/commit/cac489115458af3eed301d8d4f9c6c7d6779b058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cac489115458af3eed301d8d4f9c6c7d6779b058/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "070015468d014f93da2a366f7f5e37c0678f6c5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/070015468d014f93da2a366f7f5e37c0678f6c5b", "html_url": "https://github.com/rust-lang/rust/commit/070015468d014f93da2a366f7f5e37c0678f6c5b"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "3528f20cfb3cff9fda3e76e7b92905b903ce6c66", "filename": "src/librustc/util/enum_set.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cac489115458af3eed301d8d4f9c6c7d6779b058/src%2Flibrustc%2Futil%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac489115458af3eed301d8d4f9c6c7d6779b058/src%2Flibrustc%2Futil%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fenum_set.rs?ref=cac489115458af3eed301d8d4f9c6c7d6779b058", "patch": "@@ -207,19 +207,19 @@ mod test {\n     fn test_each() {\n         let mut e1: EnumSet<Foo> = EnumSet::empty();\n \n-        assert_eq!(~[], iter::to_vec(|f| e1.each(f)))\n+        assert_eq!(~[], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n \n         e1.add(A);\n-        assert_eq!(~[A], iter::to_vec(|f| e1.each(f)))\n+        assert_eq!(~[A], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n \n         e1.add(C);\n-        assert_eq!(~[A,C], iter::to_vec(|f| e1.each(f)))\n+        assert_eq!(~[A,C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n \n         e1.add(C);\n-        assert_eq!(~[A,C], iter::to_vec(|f| e1.each(f)))\n+        assert_eq!(~[A,C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n \n         e1.add(B);\n-        assert_eq!(~[A,B,C], iter::to_vec(|f| e1.each(f)))\n+        assert_eq!(~[A,B,C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n@@ -236,12 +236,12 @@ mod test {\n         e2.add(C);\n \n         let e_union = e1 | e2;\n-        assert_eq!(~[A,B,C], iter::to_vec(|f| e_union.each(f)))\n+        assert_eq!(~[A,B,C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e_union.each(f)))\n \n         let e_intersection = e1 & e2;\n-        assert_eq!(~[C], iter::to_vec(|f| e_intersection.each(f)))\n+        assert_eq!(~[C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e_intersection.each(f)))\n \n         let e_subtract = e1 - e2;\n-        assert_eq!(~[A], iter::to_vec(|f| e_subtract.each(f)))\n+        assert_eq!(~[A], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e_subtract.each(f)))\n     }\n }"}, {"sha": "8a0ec3ade4d4e0ae76c7e2a7596740c49143dcc2", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cac489115458af3eed301d8d4f9c6c7d6779b058/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac489115458af3eed301d8d4f9c6c7d6779b058/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=cac489115458af3eed301d8d4f9c6c7d6779b058", "patch": "@@ -65,16 +65,6 @@ pub trait FromIter<T> {\n     pub fn from_iter(iter: &fn(f: &fn(T) -> bool) -> bool) -> Self;\n }\n \n-// NOTE: This should be in vec but can't because of coherence\n-impl<T> FromIter<T> for ~[T]{\n-    #[inline(always)]\n-    pub fn from_iter(iter: &fn(f: &fn(T) -> bool) -> bool) -> ~[T] {\n-        let mut v = ~[];\n-        for iter |x| { v.push(x) }\n-        v\n-    }\n-}\n-\n /**\n  * Return true if `predicate` is true for any values yielded by an internal iterator.\n  *\n@@ -269,7 +259,7 @@ mod tests {\n \n     #[test]\n     fn test_from_iter() {\n-        let xs: = ~[1, 2, 3];\n+        let xs = ~[1, 2, 3];\n         let ys: ~[int] = do FromIter::from_iter |f| { xs.each(|x| f(*x)) };\n         assert_eq!(xs, ys);\n     }"}, {"sha": "7f723e44c2b056d2658b229a6df1d81341180fa9", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cac489115458af3eed301d8d4f9c6c7d6779b058/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac489115458af3eed301d8d4f9c6c7d6779b058/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=cac489115458af3eed301d8d4f9c6c7d6779b058", "patch": "@@ -19,9 +19,12 @@ implementing the `Iterator` trait.\n \n use cmp;\n use iter;\n-use iter::FromIter;\n+use iter::{FromIter, Times};\n use num::{Zero, One};\n-use prelude::*;\n+use option::{Option, Some, None};\n+use ops::{Add, Mul};\n+use cmp::Ord;\n+use clone::Clone;\n \n /// An interface for dealing with \"external iterators\". These types of iterators\n /// can be resumed at any time as all state is stored internally as opposed to\n@@ -871,9 +874,9 @@ mod tests {\n     use uint;\n \n     #[test]\n-    fn test_counter_to_vec() {\n+    fn test_counter_from_iter() {\n         let mut it = Counter::new(0, 5).take(10);\n-        let xs = iter::to_vec(|f| it.advance(f));\n+        let xs: ~[int] = iter::FromIter::from_iter::<int, ~[int]>(|f| it.advance(f));\n         assert_eq!(xs, ~[0, 5, 10, 15, 20, 25, 30, 35, 40, 45]);\n     }\n \n@@ -904,7 +907,7 @@ mod tests {\n     fn test_filter_map() {\n         let mut it = Counter::new(0u, 1u).take(10)\n             .filter_map(|x: uint| if x.is_even() { Some(x*x) } else { None });\n-        assert_eq!(it.to_vec(), ~[0*0, 2*2, 4*4, 6*6, 8*8]);\n+        assert_eq!(it.collect::<~[uint]>(), ~[0*0, 2*2, 4*4, 6*6, 8*8]);\n     }\n \n     #[test]\n@@ -1065,7 +1068,7 @@ mod tests {\n \n     #[test]\n     fn test_collect() {\n-        let a = [1, 2, 3, 4, 5];\n+        let a = ~[1, 2, 3, 4, 5];\n         let b: ~[int] = a.iter().transform(|&x| x).collect();\n         assert_eq!(a, b);\n     }"}, {"sha": "bb10cec30edf77d4925bdca3dfbfefca89aae410", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cac489115458af3eed301d8d4f9c6c7d6779b058/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac489115458af3eed301d8d4f9c6c7d6779b058/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=cac489115458af3eed301d8d4f9c6c7d6779b058", "patch": "@@ -14,7 +14,7 @@ Many programming languages have a 'prelude': a particular subset of the\n libraries that come with the language. Every program imports the prelude by\n default.\n \n-For example, it would be annoying to add `use io::println;` to every single\n+For example, it would be annoying to add `use std::io::println;` to every single\n program, and the vast majority of Rust programs will wish to print to standard\n output. Therefore, it makes sense to import it into every program.\n \n@@ -49,7 +49,8 @@ pub use hash::Hash;\n pub use old_iter::{BaseIter, ReverseIter, MutableIter, ExtendedIter, EqIter};\n pub use old_iter::{CopyableIter, CopyableOrderedIter, CopyableNonstrictIter};\n pub use old_iter::{ExtendedMutableIter};\n-pub use iter::Times;\n+pub use iter::{Times, FromIter};\n+// FIXME: #5898 pub use iterator::{Iterator, IteratorUtil};\n pub use num::{Num, NumCast};\n pub use num::{Orderable, Signed, Unsigned, Round};\n pub use num::{Algebraic, Trigonometric, Exponential, Hyperbolic};"}, {"sha": "8340b956b658fd09171523d4bc4c610d29533cfe", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cac489115458af3eed301d8d4f9c6c7d6779b058/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac489115458af3eed301d8d4f9c6c7d6779b058/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=cac489115458af3eed301d8d4f9c6c7d6779b058", "patch": "@@ -20,6 +20,7 @@ use clone::Clone;\n use old_iter::BaseIter;\n use old_iter;\n use iterator::Iterator;\n+use iter::FromIter;\n use kinds::Copy;\n use libc;\n use old_iter::CopyableIter;\n@@ -2996,6 +2997,15 @@ impl<'self, T> Iterator<&'self mut T> for MutVecIterator<'self, T> {\n     }\n }\n \n+impl<T> FromIter<T> for ~[T]{\n+    #[inline(always)]\n+    pub fn from_iter(iter: &fn(f: &fn(T) -> bool) -> bool) -> ~[T] {\n+        let mut v = ~[];\n+        for iter |x| { v.push(x) }\n+        v\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use option::{None, Option, Some};"}]}