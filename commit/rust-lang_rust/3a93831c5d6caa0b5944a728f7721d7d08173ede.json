{"sha": "3a93831c5d6caa0b5944a728f7721d7d08173ede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOTM4MzFjNWQ2Y2FhMGI1OTQ0YTcyOGY3NzIxZDdkMDgxNzNlZGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-18T17:35:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-18T17:35:45Z"}, "message": "Merge pull request #574 from solson/rustup2\n\nfix for latest nightly", "tree": {"sha": "cacca1377ae0e03bc167f45574cd18e7fab13a6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cacca1377ae0e03bc167f45574cd18e7fab13a6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a93831c5d6caa0b5944a728f7721d7d08173ede", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcGS/xCRBK7hj4Ov3rIwAAdHIIAICCyyYPpbUb7aoM0Fe9u9Xc\nfqqsHt1JfiOrS94wdBIgTkjzYmcd2F92oqvoTxYITFGn/xwEc8SFqVi/l3LA0uXx\ncl/w1Nbie3GZQxdqKf8p8rlfBUQmiZlxbfUskzeK4S8kNtFMmO3isoNmJT3QZ6jT\nEni50ODQmrO1zq/ymVwUDcoQWZCOtx57v29YD7SSmFNdLME5uN0QqljkblpI3BCK\nZRXF3tTiDDljbOEhDyseww+YBkQbh9OzVcxUTzyukWoX44PlZ6KvSBrUt4OSoWDV\nG1s/MQSwblUII/XOXDjQrsCJD+eZ9gAoeH+ulgaI4yOv0SQS/+AEM4CZX8t4jXQ=\n=nzzj\n-----END PGP SIGNATURE-----\n", "payload": "tree cacca1377ae0e03bc167f45574cd18e7fab13a6f\nparent 5956b5845717fbd974b7de330ff4fa4ffdff973a\nparent 5fd0639cbdd3c70a409837ba443a9767f9e3073b\nauthor Ralf Jung <post@ralfj.de> 1545154545 +0100\ncommitter GitHub <noreply@github.com> 1545154545 +0100\n\nMerge pull request #574 from solson/rustup2\n\nfix for latest nightly"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a93831c5d6caa0b5944a728f7721d7d08173ede", "html_url": "https://github.com/rust-lang/rust/commit/3a93831c5d6caa0b5944a728f7721d7d08173ede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a93831c5d6caa0b5944a728f7721d7d08173ede/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5956b5845717fbd974b7de330ff4fa4ffdff973a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5956b5845717fbd974b7de330ff4fa4ffdff973a", "html_url": "https://github.com/rust-lang/rust/commit/5956b5845717fbd974b7de330ff4fa4ffdff973a"}, {"sha": "5fd0639cbdd3c70a409837ba443a9767f9e3073b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd0639cbdd3c70a409837ba443a9767f9e3073b", "html_url": "https://github.com/rust-lang/rust/commit/5fd0639cbdd3c70a409837ba443a9767f9e3073b"}], "stats": {"total": 82, "additions": 56, "deletions": 26}, "files": [{"sha": "2ad896fe0519dfbd78c255f969aaf00badeed3da", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a93831c5d6caa0b5944a728f7721d7d08173ede/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/3a93831c5d6caa0b5944a728f7721d7d08173ede/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=3a93831c5d6caa0b5944a728f7721d7d08173ede", "patch": "@@ -1 +1 @@\n-nightly-2018-12-08\n+nightly-2018-12-14"}, {"sha": "5b1b720da749b59a293c0c31dcb87a6390965cae", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3a93831c5d6caa0b5944a728f7721d7d08173ede/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a93831c5d6caa0b5944a728f7721d7d08173ede/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=3a93831c5d6caa0b5944a728f7721d7d08173ede", "patch": "@@ -3,7 +3,7 @@\n extern crate cargo_metadata;\n \n use std::path::{PathBuf, Path};\n-use std::io::{self, Write};\n+use std::io::{self, Write, BufRead};\n use std::process::Command;\n use std::fs::{self, File};\n \n@@ -114,6 +114,36 @@ fn list_targets() -> impl Iterator<Item=cargo_metadata::Target> {\n     package.targets.into_iter()\n }\n \n+fn xargo_version() -> Option<(u32, u32, u32)> {\n+    let out = Command::new(\"xargo\").arg(\"--version\").output().ok()?;\n+    if !out.status.success() {\n+        return None;\n+    }\n+    // Parse output. The first line looks like \"xargo 0.3.12 (b004f1c 2018-12-13)\".\n+    let line = out.stderr.lines().nth(0)\n+        .expect(\"malformed `xargo --version` output: not at least one line\")\n+        .expect(\"malformed `xargo --version` output: error reading first line\");\n+    let version = line.split(' ').nth(1)\n+        .expect(\"malformed `xargo --version` output: not at least two words\");\n+    let mut version_pieces = version.split('.');\n+    let major = version_pieces.next()\n+        .expect(\"malformed `xargo --version` output: not a major version piece\")\n+        .parse()\n+        .expect(\"malformed `xargo --version` output: major version is not an integer\");\n+    let minor = version_pieces.next()\n+        .expect(\"malformed `xargo --version` output: not a minor version piece\")\n+        .parse()\n+        .expect(\"malformed `xargo --version` output: minor version is not an integer\");\n+    let patch = version_pieces.next()\n+        .expect(\"malformed `xargo --version` output: not a patch version piece\")\n+        .parse()\n+        .expect(\"malformed `xargo --version` output: patch version is not an integer\");\n+    if !version_pieces.next().is_none() {\n+        panic!(\"malformed `xargo --version` output: more than three pieces in version\");\n+    }\n+    Some((major, minor, patch))\n+}\n+\n fn ask(question: &str) {\n     let mut buf = String::new();\n     print!(\"{} [Y/n] \", question);\n@@ -134,14 +164,15 @@ fn setup(ask_user: bool) {\n     }\n \n     // First, we need xargo\n-    if Command::new(\"xargo\").arg(\"--version\").output().is_err()\n-    {\n+    let xargo = xargo_version();\n+    if xargo.map_or(true, |v| v < (0, 3, 13)) {\n         if ask_user {\n-            ask(\"It seems you do not have xargo installed. I will run `cargo install xargo`. Proceed?\");\n+            ask(\"It seems you do not have a recent enough xargo installed. I will run `cargo install xargo -f`. Proceed?\");\n         } else {\n-            println!(\"Installing xargo: `cargo install xargo`\");\n+            println!(\"Installing xargo: `cargo install xargo -f`\");\n         }\n-        if !Command::new(\"cargo\").args(&[\"install\", \"xargo\"]).status().unwrap().success() {\n+        // FIXME: Go back to using releases, once a 0.3.13 got released.\n+        if !Command::new(\"cargo\").args(&[\"install\", \"xargo\", \"-f\", \"--git\", \"https://github.com/japaric/xargo\"]).status().unwrap().success() {\n             show_error(format!(\"Failed to install xargo\"));\n         }\n     }"}, {"sha": "f125100f834385b60f35bdd5ba94d0bd77314e43", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=3a93831c5d6caa0b5944a728f7721d7d08173ede", "patch": "@@ -77,9 +77,7 @@ fn miri_pass(path: &str, target: &str, opt: bool) {\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     flags.push(\"--edition 2018\".to_owned());\n     if opt {\n-        // FIXME: We use opt level 1 because MIR inlining defeats the validation\n-        // whitelist.\n-        flags.push(\"-Zmir-opt-level=1\".to_owned());\n+        flags.push(\"-Zmir-opt-level=3\".to_owned());\n     }\n \n     let mut config = mk_config(\"ui\");"}, {"sha": "f2ed67385cdc775d3320fb70389d449b339b67c9", "filename": "tests/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fforeign-fn-linkname.rs?ref=3a93831c5d6caa0b5944a728f7721d7d08173ede", "patch": "@@ -10,7 +10,7 @@\n \n //ignore-windows: Uses POSIX APIs\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n #![allow(unused_extern_crates)] // rustc bug https://github.com/rust-lang/rust/issues/56098\n \n extern crate libc;"}, {"sha": "6819a2af3ed8f9612d389853308010c5f4aa1271", "filename": "tests/run-pass/function_pointers.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Frun-pass%2Ffunction_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Frun-pass%2Ffunction_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffunction_pointers.rs?ref=3a93831c5d6caa0b5944a728f7721d7d08173ede", "patch": "@@ -10,12 +10,12 @@ fn h(i: i32, j: i32) -> i32 {\n     j * i * 7\n }\n \n-fn return_fn_ptr() -> fn() -> i32 {\n+fn return_fn_ptr(f: fn() -> i32) -> fn() -> i32 {\n     f\n }\n \n fn call_fn_ptr() -> i32 {\n-    return_fn_ptr()()\n+    return_fn_ptr(f)()\n }\n \n fn indirect<F: Fn() -> i32>(f: F) -> i32 { f() }\n@@ -41,6 +41,7 @@ fn main() {\n     assert_eq!(indirect3(h), 210);\n     assert_eq!(indirect_mut3(h), 210);\n     assert_eq!(indirect_once3(h), 210);\n-    assert!(return_fn_ptr() == f);\n-    assert!(return_fn_ptr() as unsafe fn() -> i32 == f as fn() -> i32 as unsafe fn() -> i32);\n+    let g = f as fn() -> i32;\n+    assert!(return_fn_ptr(g) == g);\n+    assert!(return_fn_ptr(g) as unsafe fn() -> i32 == g as fn() -> i32 as unsafe fn() -> i32);\n }"}, {"sha": "1dab492f9da3bfe4821e19cfc52a7fcf8f9e9d78", "filename": "tests/run-pass/mir_coercions.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Frun-pass%2Fmir_coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Frun-pass%2Fmir_coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmir_coercions.rs?ref=3a93831c5d6caa0b5944a728f7721d7d08173ede", "patch": "@@ -60,7 +60,10 @@ fn main() {\n     let a = [0,1,2];\n     let square_local : fn(u32) -> u32 = square;\n     let (f,g) = fn_coercions(&square_local);\n-    assert_eq!(f as *const (), square as *const());\n+    // cannot use `square as *const ()` because we can't know whether the compiler duplicates\n+    // functions, so two function pointers are only equal if they result from the same function\n+    // to function pointer cast\n+    assert_eq!(f as *const (), square_local as *const());\n     assert_eq!(g(4), 16);\n     assert_eq!(identity_coercion(g)(5), 25);\n "}, {"sha": "62931493aa00c7120e01e53ce42f2fe16866cd95", "filename": "tests/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregions-mock-trans.rs?ref=3a93831c5d6caa0b5944a728f7721d7d08173ede", "patch": "@@ -10,7 +10,7 @@\n \n //ignore-windows: Uses POSIX APIs\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n #![allow(dead_code)]\n "}, {"sha": "aeedb7034ce5e3b9853ab7d9cee38568ca47b9e7", "filename": "tests/run-pass/thread-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Frun-pass%2Fthread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Frun-pass%2Fthread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fthread-local.rs?ref=3a93831c5d6caa0b5944a728f7721d7d08173ede", "patch": "@@ -1,6 +1,6 @@\n //ignore-windows: Uses POSIX APIs\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n extern crate libc;\n \n use std::mem;"}, {"sha": "381169505ec9f50b5bfca110635935372e24ee4a", "filename": "tests/run-pass/vecdeque.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Frun-pass%2Fvecdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a93831c5d6caa0b5944a728f7721d7d08173ede/tests%2Frun-pass%2Fvecdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvecdeque.rs?ref=3a93831c5d6caa0b5944a728f7721d7d08173ede", "patch": "@@ -1,6 +1,3 @@\n-// FIXME: Validation disabled until https://github.com/rust-lang/rust/pull/56161 lands\n-// compile-flags: -Zmiri-disable-validation\n-\n use std::collections::VecDeque;\n \n fn main() {"}, {"sha": "aded53b1579d647cfad2bb2ff894e21aa8d98035", "filename": "travis.sh", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a93831c5d6caa0b5944a728f7721d7d08173ede/travis.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3a93831c5d6caa0b5944a728f7721d7d08173ede/travis.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/travis.sh?ref=3a93831c5d6caa0b5944a728f7721d7d08173ede", "patch": "@@ -11,20 +11,20 @@ else\n fi\n \n echo \"Build and install miri\"\n-cargo build --release --all-features --all-targets &&\n+cargo build --release --all-features --all-targets\n cargo install --all-features --force --path .\n echo\n \n echo \"Get ourselves a MIR-full libstd for the host and a foreign architecture\"\n-cargo miri setup &&\n+cargo miri setup\n cargo miri setup --target \"$FOREIGN_TARGET\"\n echo\n \n echo \"Test miri with full MIR, on the host and other architectures\"\n-MIRI_SYSROOT=$MIRI_SYSROOT_BASE/HOST cargo test --release --all-features &&\n-MIRI_SYSROOT=$MIRI_SYSROOT_BASE MIRI_TARGET=$FOREIGN_TARGET cargo test --release --all-features\n+MIRI_SYSROOT=\"$MIRI_SYSROOT_BASE\"/HOST cargo test --release --all-features\n+MIRI_SYSROOT=\"$MIRI_SYSROOT_BASE\" MIRI_TARGET=\"$FOREIGN_TARGET\" cargo test --release --all-features\n echo\n \n echo \"Test cargo integration\"\n-(cd test-cargo-miri && MIRI_SYSROOT=$MIRI_SYSROOT_BASE/HOST ./run-test.py)\n+(cd test-cargo-miri && MIRI_SYSROOT=\"$MIRI_SYSROOT_BASE\"/HOST ./run-test.py)\n echo"}]}