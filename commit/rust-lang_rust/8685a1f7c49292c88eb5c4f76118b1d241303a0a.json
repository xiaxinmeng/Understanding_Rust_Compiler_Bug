{"sha": "8685a1f7c49292c88eb5c4f76118b1d241303a0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ODVhMWY3YzQ5MjkyYzg4ZWI1YzRmNzYxMThiMWQyNDEzMDNhMGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-12T23:38:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-13T17:31:40Z"}, "message": "distinguish \"any closure\" and \"stack closure\" (block)", "tree": {"sha": "0c36735b89da87da226aadfcef110e40d2c4d832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c36735b89da87da226aadfcef110e40d2c4d832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8685a1f7c49292c88eb5c4f76118b1d241303a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8685a1f7c49292c88eb5c4f76118b1d241303a0a", "html_url": "https://github.com/rust-lang/rust/commit/8685a1f7c49292c88eb5c4f76118b1d241303a0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8685a1f7c49292c88eb5c4f76118b1d241303a0a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47a534c197444f3af04994350dfdf83bd97316bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/47a534c197444f3af04994350dfdf83bd97316bb", "html_url": "https://github.com/rust-lang/rust/commit/47a534c197444f3af04994350dfdf83bd97316bb"}], "stats": {"total": 172, "additions": 102, "deletions": 70}, "files": [{"sha": "8de3aa95e62446d53b56dc796c09eb95c22a7e17", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -161,6 +161,17 @@ fn parse_ty_rust_fn(st: @pstate, conv: conv_did, p: ast::proto) -> ty::t {\n     ret ty::mk_fn(st.tcx, {proto: p with parse_ty_fn(st, conv)});\n }\n \n+fn parse_proto(c: char) -> ast::proto {\n+    alt c {\n+      '~' { ast::proto_uniq }\n+      '@' { ast::proto_box }\n+      '*' { ast::proto_any }\n+      '&' { ast::proto_block }\n+      'n' { ast::proto_bare }\n+      _ { fail \"illegal fn type kind \" + str::from_char(c); }\n+    }\n+}\n+\n fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n     alt next(st) as char {\n       'n' { ret ty::mk_nil(st.tcx); }\n@@ -230,17 +241,9 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         st.pos = st.pos + 1u;\n         ret ty::mk_tup(st.tcx, params);\n       }\n-      's' {\n-        ret parse_ty_rust_fn(st, conv, ast::proto_uniq);\n-      }\n-      'F' {\n-        ret parse_ty_rust_fn(st, conv, ast::proto_box);\n-      }\n       'f' {\n-        ret parse_ty_rust_fn(st, conv, ast::proto_bare);\n-      }\n-      'B' {\n-        ret parse_ty_rust_fn(st, conv, ast::proto_block);\n+        let proto = parse_proto(next(st) as char);\n+        parse_ty_rust_fn(st, conv, proto)\n       }\n       'N' {\n         let func = parse_ty_fn(st, conv);"}, {"sha": "d08beba73113947a937e34fe8a460e7add5bdb77", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -192,10 +192,11 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n }\n fn enc_proto(w: io::writer, proto: proto) {\n     alt proto {\n-      proto_uniq. { w.write_char('s'); }\n-      proto_box. { w.write_char('F'); }\n-      proto_block. { w.write_char('B'); }\n-      proto_bare. { w.write_char('f'); }\n+      proto_uniq. { w.write_str(\"f~\"); }\n+      proto_box. { w.write_str(\"f@\"); }\n+      proto_block. { w.write_str(\"f&\"); }\n+      proto_any. { w.write_str(\"f*\"); }\n+      proto_bare. { w.write_str(\"fn\"); }\n     }\n }\n "}, {"sha": "e10dec83a678cfaa0f0c0757b661f81a3ba496d9", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -88,11 +88,14 @@ fn visit_fn(cx: @ctx, _fk: visit::fn_kind, decl: ast::fn_decl,\n     // Blocks need to obey any restrictions from the enclosing scope, and may\n     // be called multiple times.\n     let proto = ty::ty_fn_proto(cx.tcx, fty);\n-    if proto == ast::proto_block {\n+    alt proto {\n+      ast::proto_block. | ast::proto_any. {\n         check_loop(*cx, sc) {|| v.visit_block(body, sc, v);}\n-    } else {\n+      }\n+      ast::proto_box. | ast::proto_uniq. | ast::proto_bare. {\n         let sc = {bs: [], invalid: @mutable list::nil};\n         v.visit_block(body, sc, v);\n+      }\n     }\n }\n "}, {"sha": "4357f754a58609f85c2e5d69db0b179627282f27", "filename": "src/comp/middle/block_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Fblock_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Fblock_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fblock_use.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -14,7 +14,7 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n     if !cx.allow_block {\n         alt ty::struct(cx.tcx, ty::expr_ty(cx.tcx, ex)) {\n-          ty::ty_fn({proto: proto_block., _}) {\n+          ty::ty_fn({proto: p, _}) if is_blockish(p) {\n             cx.tcx.sess.span_err(ex.span, \"expressions with block type \\\n                 can only appear in callee or (by-ref) argument position\");\n           }"}, {"sha": "b9e9a02c0f04b2ed203a63fcebe17e5b1af01fa9", "filename": "src/comp/middle/capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcapture.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -75,7 +75,7 @@ fn check_capture_clause(tcx: ty::ctxt,\n     };\n \n     alt fn_proto {\n-      ast::proto_block. {\n+      ast::proto_any. | ast::proto_block. {\n         check_block_captures(cap_clause.copies);\n         check_block_captures(cap_clause.moves);\n       }\n@@ -113,7 +113,7 @@ fn compute_capture_vars(tcx: ty::ctxt,\n     }\n \n     let implicit_mode = alt fn_proto {\n-      ast::proto_block. { cap_ref }\n+      ast::proto_any. | ast::proto_block. { cap_ref }\n       ast::proto_bare. | ast::proto_box. | ast::proto_uniq. { cap_copy }\n     };\n "}, {"sha": "575b1cc0189813d4b257ebd67e539065841e94b5", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -63,8 +63,8 @@ fn with_appropriate_checker(cx: ctx, id: node_id,\n     alt ty::ty_fn_proto(cx.tcx, fty) {\n       proto_uniq. { b(check_send); }\n       proto_box. { b(check_copy); }\n-      proto_block. { /* no check needed */ }\n       proto_bare. { b(check_none); }\n+      proto_any. | proto_block. { /* no check needed */ }\n     }\n }\n "}, {"sha": "7126199349d7f9588007b59d8cd1a2914c60c2b2", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -63,9 +63,9 @@ fn find_last_uses(c: @crate, def_map: resolve::def_map,\n     ret mini_table;\n }\n \n-fn is_block(cx: ctx, id: node_id) -> bool {\n+fn ex_is_blockish(cx: ctx, id: node_id) -> bool {\n     alt ty::struct(cx.tcx, ty::node_id_to_monotype(cx.tcx, id)) {\n-      ty::ty_fn({proto: proto_block., _}) { true }\n+      ty::ty_fn({proto: p, _}) if is_blockish(p) { true }\n       _ { false }\n     }\n }\n@@ -152,8 +152,12 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n         let arg_ts = ty::ty_fn_args(cx.tcx, ty::expr_ty(cx.tcx, f));\n         for arg in args {\n             alt arg.node {\n-              expr_fn(proto_block., _, _, _) { fns += [arg]; }\n-              expr_fn_block(_, _) if is_block(cx, arg.id) { fns += [arg]; }\n+              expr_fn(p, _, _, _) if is_blockish(p) {\n+                fns += [arg];\n+              }\n+              expr_fn_block(_, _) if ex_is_blockish(cx, arg.id) {\n+                fns += [arg];\n+              }\n               _ {\n                 alt arg_ts[i].mode {\n                   by_mut_ref. { clear_if_path(cx, arg, v, false); }\n@@ -174,11 +178,13 @@ fn visit_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n             cx: ctx, v: visit::vt<ctx>) {\n     let fty = ty::node_id_to_type(cx.tcx, id);\n     let proto = ty::ty_fn_proto(cx.tcx, fty);\n-    if proto == proto_block {\n+    alt proto {\n+      proto_any. | proto_block. {\n         visit_block(func, cx, {||\n             visit::visit_fn(fk, decl, body, sp, id, cx, v);\n         });\n-    } else {\n+      }\n+      proto_box. | proto_uniq. | proto_bare. {\n         alt cx.tcx.freevars.find(id) {\n           some(vars) {\n             for v in *vars {\n@@ -193,6 +199,7 @@ fn visit_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n         visit::visit_fn(fk, decl, body, sp, id, cx, v);\n         cx.blocks <-> old;\n         leave_fn(cx);\n+      }\n     }\n }\n "}, {"sha": "8071ea0972fa495923765764a00a5ee21bc0d632", "filename": "src/comp/middle/mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmut.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -269,7 +269,7 @@ fn is_immutable_def(cx: @ctx, def: def) -> option::t<str> {\n         let ty = ty::node_id_to_monotype(cx.tcx, node_id);\n         let proto = ty::ty_fn_proto(cx.tcx, ty);\n         ret alt proto {\n-          proto_block. { is_immutable_def(cx, *inner) }\n+          proto_any. | proto_block. { is_immutable_def(cx, *inner) }\n           _ { some(\"upvar\") }\n         };\n       }"}, {"sha": "21e9a87686635a350d5c8ec6c43137c2ef09780f", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -523,6 +523,7 @@ fn trans_expr_fn(bcx: @block_ctxt,\n     };\n \n     let closure = alt proto {\n+      ast::proto_any. { fail \"proto_any cannot appear in an expr\"; }\n       ast::proto_block. { trans_closure_env(ty::ck_block) }\n       ast::proto_box. { trans_closure_env(ty::ck_box) }\n       ast::proto_uniq. { trans_closure_env(ty::ck_uniq) }\n@@ -664,6 +665,7 @@ fn make_fn_glue(\n     ret alt ty::struct(tcx, t) {\n       ty::ty_native_fn(_, _) | ty::ty_fn({proto: ast::proto_bare., _}) { bcx }\n       ty::ty_fn({proto: ast::proto_block., _}) { bcx }\n+      ty::ty_fn({proto: ast::proto_any., _}) { bcx }\n       ty::ty_fn({proto: ast::proto_uniq., _}) { fn_env(ty::ck_uniq) }\n       ty::ty_fn({proto: ast::proto_box., _}) { fn_env(ty::ck_box) }\n       _ { fail \"make_fn_glue invoked on non-function type\" }"}, {"sha": "c6777bfd491f6304c9c3f23954ba2b1676b58f13", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -993,6 +993,7 @@ pure fn kind_can_be_sent(k: kind) -> bool {\n \n fn proto_kind(p: proto) -> kind {\n     alt p {\n+      ast::proto_any. { kind_noncopyable }\n       ast::proto_block. { kind_noncopyable }\n       ast::proto_box. { kind_copyable }\n       ast::proto_uniq. { kind_sendable }\n@@ -1925,7 +1926,8 @@ mod unify {\n         // subtype).\n         fn sub_proto(p_sub: ast::proto, p_sup: ast::proto) -> bool {\n             ret alt (p_sub, p_sup) {\n-              (_, ast::proto_block.) { true }\n+              (_, ast::proto_any.) { true }\n+              (_, ast::proto_block.) { true } /* NDM temporary */\n               (ast::proto_bare., _) { true }\n \n               // Equal prototypes are always subprotos:"}, {"sha": "d6b921bd6f991eb00ddfd18ebe18411b7ddf5df3", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -2874,7 +2874,7 @@ mod dict {\n               _ {}\n             }\n           }\n-          ast::expr_fn(ast::proto_block., _, _, _) {}\n+          ast::expr_fn(p, _, _, _) if ast::is_blockish(p) {}\n           ast::expr_fn(_, _, _, _) { ret; }\n           _ {}\n         }"}, {"sha": "4ce4e1ab111395dbca4dea8b597150e8e03fad51", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -117,6 +117,13 @@ tag proto {\n     proto_block;   // fn&\n }\n \n+pure fn is_blockish(p: ast::proto) -> bool {\n+    alt p {\n+      proto_any. | proto_block. { true }\n+      proto_bare. | proto_uniq. | proto_box. { false }\n+    }\n+}\n+\n tag binop {\n     add;\n     sub;"}, {"sha": "3aa56d669174cc4ec3b3b62822d95949132a5ec3", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -481,11 +481,12 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n     } else if eat_word(p, \"fn\") {\n         let proto = parse_fn_ty_proto(p);\n         alt proto {\n-          ast::proto_bare. { p.fatal(\"fn is deprecated, use native fn\"); }\n+          ast::proto_bare. { p.warn(\"fn is deprecated, use native fn\"); }\n           _ { /* fallthrough */ }\n         }\n         t = parse_ty_fn(proto, p);\n     } else if eat_word(p, \"block\") {\n+        //p.warn(\"block is deprecated, use fn& or fn\");\n         t = parse_ty_fn(ast::proto_block, p);\n     } else if eat_word(p, \"native\") {\n         expect_word(p, \"fn\");\n@@ -788,11 +789,13 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n     } else if eat_word(p, \"fn\") {\n         let proto = parse_fn_ty_proto(p);\n         alt proto {\n-          ast::proto_bare. { p.warn(\"fn expr are deprecated, use fn@\"); }\n+          ast::proto_bare. { p.fatal(\"fn expr are deprecated, use fn@\"); }\n+          ast::proto_any. { p.fatal(\"fn* cannot be used in an expression\"); }\n           _ { /* fallthrough */ }\n         }\n         ret pexpr(parse_fn_expr(p, proto));\n     } else if eat_word(p, \"block\") {\n+        p.warn(\"block is deprecated, use fn& or fn\");\n         ret pexpr(parse_fn_expr(p, ast::proto_block));\n     } else if eat_word(p, \"unchecked\") {\n         ret pexpr(parse_block_expr(p, lo, ast::unchecked_blk));\n@@ -2055,26 +2058,23 @@ fn parse_item_tag(p: parser, attrs: [ast::attribute]) -> @ast::item {\n }\n \n fn parse_fn_ty_proto(p: parser) -> ast::proto {\n-<<<<<<< HEAD\n-    if p.token == token::AT {\n-        p.bump();\n-        ast::proto_box\n-    } else if p.token == token::TILDE {\n-=======\n-    alt p.peek() {\n+    alt p.token {\n       token::AT. {\n         p.bump();\n         ast::proto_box\n       }\n       token::TILDE. {\n->>>>>>> make blocks fn& and fn stand for \"any closure\"\n         p.bump();\n         ast::proto_uniq\n       }\n       token::BINOP(token::AND.) {\n         p.bump();\n         ast::proto_block\n       }\n+      token::BINOP(token::STAR.) {\n+        p.bump(); // temporary: fn* for any closure\n+        ast::proto_any\n+      }\n       _ {\n         ast::proto_bare\n       }"}, {"sha": "f2f714e72d295adb2c25803e723468008e1e74ed", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -1611,11 +1611,12 @@ fn opt_proto_to_str(opt_p: option<ast::proto>) -> str {\n \n fn proto_to_str(p: ast::proto) -> str {\n     ret alt p {\n-          ast::proto_bare. { \"native fn\" }\n-          ast::proto_block. { \"block\" }\n-          ast::proto_uniq. { \"fn~\" }\n-          ast::proto_box. { \"fn@\" }\n-        };\n+      ast::proto_bare. { \"native fn\" }\n+      ast::proto_any. { \"fn*\" }\n+      ast::proto_block. { \"fn&\" }\n+      ast::proto_uniq. { \"fn~\" }\n+      ast::proto_box. { \"fn@\" }\n+    };\n }\n \n fn ty_constr_to_str(c: @ast::ty_constr) -> str {"}, {"sha": "dfd3b69d0910e665df084666f6fb69430b2ebc8b", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -116,13 +116,19 @@ fn safe_to_steal_ty(t: @ast::ty, tm: test_mode) -> bool {\n }\n \n // Not type-parameterized: https://github.com/graydon/rust/issues/898\n-fn stash_expr_if(c: fn(@ast::expr, test_mode)->bool, es: @mutable [ast::expr], e: @ast::expr, tm: test_mode) {\n+fn stash_expr_if(c: fn@(@ast::expr, test_mode)->bool,\n+                 es: @mutable [ast::expr],\n+                 e: @ast::expr,\n+                 tm: test_mode) {\n     if c(e, tm) {\n         *es += [*e];\n     } else {/* now my indices are wrong :( */ }\n }\n \n-fn stash_ty_if(c: fn(@ast::ty, test_mode)->bool, es: @mutable [ast::ty], e: @ast::ty, tm: test_mode) {\n+fn stash_ty_if(c: fn@(@ast::ty, test_mode)->bool,\n+               es: @mutable [ast::ty],\n+               e: @ast::ty,\n+               tm: test_mode) {\n     if c(e, tm) {\n         *es += [*e];\n     } else {/* now my indices are wrong :( */ }\n@@ -236,8 +242,8 @@ fn check_variants_T<T: copy>(\n   filename: str,\n   thing_label: str,\n   things: [T],\n-  stringifier: fn(@T) -> str,\n-  replacer: fn(ast::crate, uint, T, test_mode) -> ast::crate,\n+  stringifier: fn@(@T) -> str,\n+  replacer: fn@(ast::crate, uint, T, test_mode) -> ast::crate,\n   cx: context\n   ) {\n     #error(\"%s contains %u %s objects\", filename, vec::len(things), thing_label);"}, {"sha": "57c09fd57f39b0735117eef04236d73daa727c3a", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -49,7 +49,7 @@ type test_name = str;\n // to support isolation of tests into tasks.\n type test_fn<T> = T;\n \n-type default_test_fn = test_fn<sendfn()>;\n+type default_test_fn = test_fn<fn~()>;\n \n // The definition of a single test. A test runner will run a list of\n // these.\n@@ -336,7 +336,7 @@ fn run_test<T: copy>(test: test_desc<T>,\n // We need to run our tests in another task in order to trap test failures.\n // This function only works with functions that don't contain closures.\n fn default_test_to_task(&&f: default_test_fn) -> joinable {\n-    ret task::spawn_joinable(sendfn[copy f]() {\n+    ret task::spawn_joinable(fn~[copy f]() {\n         configure_test_task();\n         f();\n     });"}, {"sha": "c44897df737140d114370b327cfcd91dd110d408", "filename": "src/test/compile-fail/cap-clause-both-copy-and-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-both-copy-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-both-copy-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-both-copy-and-move.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Variable 'x' captured more than once\n fn main() {\n     let x = 5;\n-    let y = sendfn[move x; copy x]() -> int { x };\n+    let y = fn~[move x; copy x]() -> int { x };\n }"}, {"sha": "f4135fec248fae248fdfb675908e829b48e95ca1", "filename": "src/test/compile-fail/cap-clause-double-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-copy.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Variable 'x' captured more than once\n fn main() {\n     let x = 5;\n-    let y = sendfn[copy x, x]() -> int { x };\n+    let y = fn~[copy x, x]() -> int { x };\n }"}, {"sha": "498eb8255afe13fe5886c2a0a77c94abb6a2dd79", "filename": "src/test/compile-fail/cap-clause-double-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-move.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Variable 'x' captured more than once\n fn main() {\n     let x = 5;\n-    let y = sendfn[move x, x]() -> int { x };\n+    let y = fn~[move x, x]() -> int { x };\n }"}, {"sha": "3d8ab43cc7725b0525cf84332b502ec609dc90d5", "filename": "src/test/compile-fail/cap-clause-move-upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-move-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-move-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-move-upvar.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -1,8 +1,8 @@\n // error-pattern:Upvars (like 'x') cannot be moved into a closure\n fn main() {\n     let x = 5;\n-    let _y = sendfn[move x]() -> int {\n-        let _z = sendfn[move x]() -> int { x };\n+    let _y = fn~[move x]() -> int {\n+        let _z = fn~[move x]() -> int { x };\n         22\n     };\n }"}, {"sha": "9141df06c5e24ec443da933fecdc6fc038e09213", "filename": "src/test/compile-fail/cap-clause-unresolved-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-copy.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:unresolved name: z\n fn main() {\n     let x = 5;\n-    let y = sendfn[copy z, x]() {\n+    let y = fn~[copy z, x]() {\n     };\n }\n\\ No newline at end of file"}, {"sha": "be89012bf80a0b3c1f9d002635b1aae5e3495764", "filename": "src/test/compile-fail/cap-clause-unresolved-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-move.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:unresolved name: z\n fn main() {\n     let x = 5;\n-    let y = sendfn[move z, x]() {\n+    let y = fn~[move z, x]() {\n     };\n }\n\\ No newline at end of file"}, {"sha": "0b30036112d6f91553f2ca68837f76ae14d43fc5", "filename": "src/test/compile-fail/cap-clause-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fcap-clause-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-use-after-move.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     let x = 5;\n-    let _y = sendfn[move x]() { };\n+    let _y = fn~[move x]() { };\n     let _z = x; //< error: Unsatisfied precondition constraint\n }"}, {"sha": "935adc16ded358ea2e0c3f812e14fce5c25a3694", "filename": "src/test/compile-fail/fn-expr-type-state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     // Typestate should work even in a fn@. we should reject this program.\n-    let f = fn () -> int { let i: int; ret i; };\n+    let f = fn@() -> int { let i: int; ret i; };\n     log(error, f());\n }"}, {"sha": "816593e0875cb2bf074f4d02e4abc100de430607", "filename": "src/test/compile-fail/fn-expr-typestate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Ffn-expr-typestate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Ffn-expr-typestate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-expr-typestate-2.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:Unsatisfied precondition\n \n fn main() {\n-    let j = fn () -> int { let i: int; ret i; }();\n+    let j = fn@() -> int { let i: int; ret i; }();\n     log(error, j);\n }"}, {"sha": "fae7e3d9174092594613ac90c5d8b2b249eaac3f", "filename": "src/test/compile-fail/sendfn-captures-nonsendable-state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fsendfn-captures-nonsendable-state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fsendfn-captures-nonsendable-state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-captures-nonsendable-state.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let x = @3u;\n-    let _f = sendfn(y: uint) -> uint { ret *x+y; };\n+    let _f = fn~(y: uint) -> uint { ret *x+y; };\n }\n\\ No newline at end of file"}, {"sha": "5394fca6b3bd50355d43c860881c1127ef20b584", "filename": "src/test/compile-fail/spawn-non-nil-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -3,4 +3,4 @@\n use std;\n import task;\n \n-fn main() { task::spawn(sendfn() -> int { 10 }); }\n+fn main() { task::spawn(fn~() -> int { 10 }); }"}, {"sha": "3050d534ac81551b717e8630fc2623ba523c6cf7", "filename": "src/test/run-pass/cap-clause-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -9,8 +9,8 @@ fn main() {\n \n     let x = ~2;\n     let y = ptr::addr_of(*x) as uint;\n-    let snd_copy = sendfn[copy x]() -> uint { ptr::addr_of(*x) as uint };\n-    let snd_move = sendfn[move x]() -> uint { ptr::addr_of(*x) as uint };\n+    let snd_copy = fn~[copy x]() -> uint { ptr::addr_of(*x) as uint };\n+    let snd_move = fn~[move x]() -> uint { ptr::addr_of(*x) as uint };\n     assert snd_copy() != y;\n     assert snd_move() == y;\n }"}, {"sha": "742214ee2a19fb3ef8785c8a1c318d8fd594f8a4", "filename": "src/test/run-pass/cap-clause-not-used.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Frun-pass%2Fcap-clause-not-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Frun-pass%2Fcap-clause-not-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-not-used.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: warning: Captured variable 'y' not used in closure\n fn main() {\n     let x = 5;\n-    let _y = sendfn[copy x]() { };\n+    let _y = fn~[copy x]() { };\n }"}, {"sha": "71ac2fc0c623e57ae35b612c7a75be864c36ccda", "filename": "src/test/run-pass/sendfn-is-a-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -3,6 +3,6 @@ fn test(f: block(uint) -> uint) -> uint {\n }\n \n fn main() {\n-    let y = test(sendfn(x: uint) -> uint { ret 4u * x; });\n+    let y = test(fn~(x: uint) -> uint { ret 4u * x; });\n     assert y == 88u;\n }\n\\ No newline at end of file"}, {"sha": "028bcf583bdc3548b7c63edcef928fb03eba2a99", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let y = ~2;\n     let y_in_parent = ptr::addr_of(*y) as uint;\n \n-    task::spawn(sendfn[copy ch, y; move x]() {\n+    task::spawn(fn~[copy ch, y; move x]() {\n         let x_in_child = ptr::addr_of(*x) as uint;\n         comm::send(ch, x_in_child);\n "}, {"sha": "78f67c83d3bfcdc55c42e43101a8c929bee8701f", "filename": "src/test/stdtest/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fstdtest%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8685a1f7c49292c88eb5c4f76118b1d241303a0a/src%2Ftest%2Fstdtest%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftest.rs?ref=8685a1f7c49292c88eb5c4f76118b1d241303a0a", "patch": "@@ -63,8 +63,8 @@ fn filter_for_ignored_option() {\n \n     let opts = {filter: option::none, run_ignored: true};\n     let tests =\n-        [{name: \"1\", fn: fn () { }, ignore: true, should_fail: false},\n-         {name: \"2\", fn: fn () { }, ignore: false, should_fail: false}];\n+        [{name: \"1\", fn: fn@() { }, ignore: true, should_fail: false},\n+         {name: \"2\", fn: fn@() { }, ignore: false, should_fail: false}];\n     let filtered = test::filter_tests(opts, tests);\n \n     assert (vec::len(filtered) == 1u);\n@@ -85,7 +85,7 @@ fn sort_tests() {\n          \"test::sort_tests\"];\n     let tests =\n         {\n-            let testfn = fn () { };\n+            let testfn = fn@() { };\n             let tests = [];\n             for name: str in names {\n                 let test = {name: name, fn: testfn, ignore: false,"}]}