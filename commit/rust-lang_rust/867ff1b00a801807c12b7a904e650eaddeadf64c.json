{"sha": "867ff1b00a801807c12b7a904e650eaddeadf64c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2N2ZmMWIwMGE4MDE4MDdjMTJiN2E5MDRlNjUwZWFkZGVhZGY2NGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:19:23Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:19:23Z"}, "message": "typeck/expr.rs: extract out check_expr_while.", "tree": {"sha": "9fdae3419d32c106659fc1514454f3097c7918b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fdae3419d32c106659fc1514454f3097c7918b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/867ff1b00a801807c12b7a904e650eaddeadf64c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/867ff1b00a801807c12b7a904e650eaddeadf64c", "html_url": "https://github.com/rust-lang/rust/commit/867ff1b00a801807c12b7a904e650eaddeadf64c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/867ff1b00a801807c12b7a904e650eaddeadf64c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af800c7873b7dfa28a8583e2e89d4c573d525bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/af800c7873b7dfa28a8583e2e89d4c573d525bb5", "html_url": "https://github.com/rust-lang/rust/commit/af800c7873b7dfa28a8583e2e89d4c573d525bb5"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "6bf13f6a2f6a85471449926a710e45e04408ac92", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/867ff1b00a801807c12b7a904e650eaddeadf64c/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867ff1b00a801807c12b7a904e650eaddeadf64c/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=867ff1b00a801807c12b7a904e650eaddeadf64c", "patch": "@@ -93,28 +93,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_expr_assign(expr, expected, lhs, rhs)\n             }\n             ExprKind::While(ref cond, ref body, _) => {\n-                let ctxt = BreakableCtxt {\n-                    // cannot use break with a value from a while loop\n-                    coerce: None,\n-                    may_break: false,  // Will get updated if/when we find a `break`.\n-                };\n-\n-                let (ctxt, ()) = self.with_breakable_ctxt(expr.hir_id, ctxt, || {\n-                    self.check_expr_has_type_or_error(&cond, tcx.types.bool);\n-                    let cond_diverging = self.diverges.get();\n-                    self.check_block_no_value(&body);\n-\n-                    // We may never reach the body so it diverging means nothing.\n-                    self.diverges.set(cond_diverging);\n-                });\n-\n-                if ctxt.may_break {\n-                    // No way to know whether it's diverging because\n-                    // of a `break` or an outer `break` or `return`.\n-                    self.diverges.set(Diverges::Maybe);\n-                }\n-\n-                self.tcx.mk_unit()\n+                self.check_expr_while(cond, body, expr)\n             }\n             ExprKind::Loop(ref body, _, source) => {\n                 let coerce = match source {\n@@ -787,4 +766,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.mk_unit()\n         }\n     }\n+\n+    fn check_expr_while(\n+        &self,\n+        cond: &'tcx hir::Expr,\n+        body: &'tcx hir::Block,\n+        expr: &'tcx hir::Expr\n+    ) -> Ty<'tcx> {\n+        let ctxt = BreakableCtxt {\n+            // Cannot use break with a value from a while loop.\n+            coerce: None,\n+            may_break: false, // Will get updated if/when we find a `break`.\n+        };\n+\n+        let (ctxt, ()) = self.with_breakable_ctxt(expr.hir_id, ctxt, || {\n+            self.check_expr_has_type_or_error(&cond, self.tcx.types.bool);\n+            let cond_diverging = self.diverges.get();\n+            self.check_block_no_value(&body);\n+\n+            // We may never reach the body so it diverging means nothing.\n+            self.diverges.set(cond_diverging);\n+        });\n+\n+        if ctxt.may_break {\n+            // No way to know whether it's diverging because\n+            // of a `break` or an outer `break` or `return`.\n+            self.diverges.set(Diverges::Maybe);\n+        }\n+\n+        self.tcx.mk_unit()\n+    }\n }"}]}