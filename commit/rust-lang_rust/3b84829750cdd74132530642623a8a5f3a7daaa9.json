{"sha": "3b84829750cdd74132530642623a8a5f3a7daaa9", "node_id": "C_kwDOAAsO6NoAKDNiODQ4Mjk3NTBjZGQ3NDEzMjUzMDY0MjYyM2E4YTVmM2E3ZGFhYTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-20T08:35:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-20T08:35:40Z"}, "message": "Auto merge of #95133 - matthiaskrgr:rollup-4q0u804, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #94749 (remove_dir_all: use fallback implementation on Miri)\n - #94948 (Fix diagnostics for `#![feature(deprecated_suggestion)]`)\n - #94989 (Add Stream alias for AsyncIterator)\n - #95108 (Give more details in `Display` for `hir::Target`)\n - #95110 (Provide more useful documentation of conversion methods)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "952233740dd64f26bec70a5b55f1671170e6da37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/952233740dd64f26bec70a5b55f1671170e6da37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b84829750cdd74132530642623a8a5f3a7daaa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b84829750cdd74132530642623a8a5f3a7daaa9", "html_url": "https://github.com/rust-lang/rust/commit/3b84829750cdd74132530642623a8a5f3a7daaa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b84829750cdd74132530642623a8a5f3a7daaa9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "499d4a56840e3760905fbda95550553281828dc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/499d4a56840e3760905fbda95550553281828dc6", "html_url": "https://github.com/rust-lang/rust/commit/499d4a56840e3760905fbda95550553281828dc6"}, {"sha": "9725caf9e9303d96f4e0ef40e69b4d16bec7bf5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9725caf9e9303d96f4e0ef40e69b4d16bec7bf5a", "html_url": "https://github.com/rust-lang/rust/commit/9725caf9e9303d96f4e0ef40e69b4d16bec7bf5a"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "8e748aaa58b598bf33f9c0329108406228bb55ec", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b84829750cdd74132530642623a8a5f3a7daaa9/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b84829750cdd74132530642623a8a5f3a7daaa9/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=3b84829750cdd74132530642623a8a5f3a7daaa9", "patch": "@@ -758,8 +758,7 @@ where\n                                     if sess.is_nightly_build() {\n                                         diag.help(\"add `#![feature(deprecated_suggestion)]` to the crate root\");\n                                     }\n-                                    // FIXME(jhpratt) change this to an actual tracking issue\n-                                    diag.note(\"see #XXX for more details\").emit();\n+                                    diag.note(\"see #94785 for more details\").emit();\n                                 }\n \n                                 if !get(mi, &mut suggestion) {\n@@ -772,10 +771,10 @@ where\n                                     meta.span(),\n                                     AttrError::UnknownMetaItem(\n                                         pprust::path_to_string(&mi.path),\n-                                        if attr.has_name(sym::deprecated) {\n-                                            &[\"since\", \"note\"]\n-                                        } else {\n+                                        if sess.features_untracked().deprecated_suggestion {\n                                             &[\"since\", \"note\", \"suggestion\"]\n+                                        } else {\n+                                            &[\"since\", \"note\"]\n                                         },\n                                     ),\n                                 );"}, {"sha": "70d9db4a84ba1e2910a0b8ff2c6ebfc9710fd8ba", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b84829750cdd74132530642623a8a5f3a7daaa9/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b84829750cdd74132530642623a8a5f3a7daaa9/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=3b84829750cdd74132530642623a8a5f3a7daaa9", "patch": "@@ -86,7 +86,11 @@ impl Display for Target {\n                 Target::Statement => \"statement\",\n                 Target::Arm => \"match arm\",\n                 Target::AssocConst => \"associated const\",\n-                Target::Method(_) => \"method\",\n+                Target::Method(kind) => match kind {\n+                    MethodKind::Inherent => \"inherent method\",\n+                    MethodKind::Trait { body: false } => \"required trait method\",\n+                    MethodKind::Trait { body: true } => \"provided trait method\",\n+                },\n                 Target::AssocTy => \"associated type\",\n                 Target::ForeignFn => \"foreign function\",\n                 Target::ForeignStatic => \"foreign static item\","}, {"sha": "016a3685e850cd23e1a93e74369b265edc2a0219", "filename": "library/core/src/async_iter/async_iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b84829750cdd74132530642623a8a5f3a7daaa9/library%2Fcore%2Fsrc%2Fasync_iter%2Fasync_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b84829750cdd74132530642623a8a5f3a7daaa9/library%2Fcore%2Fsrc%2Fasync_iter%2Fasync_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fasync_iter%2Fasync_iter.rs?ref=3b84829750cdd74132530642623a8a5f3a7daaa9", "patch": "@@ -12,6 +12,7 @@ use crate::task::{Context, Poll};\n /// [impl]: index.html#implementing-async-iterator\n #[unstable(feature = \"async_iterator\", issue = \"79024\")]\n #[must_use = \"async iterators do nothing unless polled\"]\n+#[doc(alias = \"Stream\")]\n pub trait AsyncIterator {\n     /// The type of items yielded by the async iterator.\n     type Item;"}, {"sha": "c7a9a8183789fa6191a257c6a5717de001c2d10a", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b84829750cdd74132530642623a8a5f3a7daaa9/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b84829750cdd74132530642623a8a5f3a7daaa9/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=3b84829750cdd74132530642623a8a5f3a7daaa9", "patch": "@@ -154,7 +154,7 @@ pub const fn identity<T>(x: T) -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"AsRef\")]\n pub trait AsRef<T: ?Sized> {\n-    /// Performs the conversion.\n+    /// Converts this type into a shared reference of the (usually inferred) input type.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_ref(&self) -> &T;\n }\n@@ -196,7 +196,7 @@ pub trait AsRef<T: ?Sized> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"AsMut\")]\n pub trait AsMut<T: ?Sized> {\n-    /// Performs the conversion.\n+    /// Converts this type into a mutable reference of the (usually inferred) input type.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_mut(&mut self) -> &mut T;\n }\n@@ -272,7 +272,7 @@ pub trait AsMut<T: ?Sized> {\n #[rustc_diagnostic_item = \"Into\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n-    /// Performs the conversion.\n+    /// Converts this type into the (usually inferred) input type.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into(self) -> T;\n@@ -367,7 +367,7 @@ pub trait Into<T>: Sized {\n     note = \"to coerce a `{T}` into a `{Self}`, use `&*` as a prefix\",\n ))]\n pub trait From<T>: Sized {\n-    /// Performs the conversion.\n+    /// Converts to this type from the input type.\n     #[lang = \"from\"]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "d4e103ab525e8b880ebe1750e8826235bc32c090", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3b84829750cdd74132530642623a8a5f3a7daaa9/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b84829750cdd74132530642623a8a5f3a7daaa9/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=3b84829750cdd74132530642623a8a5f3a7daaa9", "patch": "@@ -2049,9 +2049,10 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///\n /// [changes]: io#platform-specific-behavior\n ///\n-/// On macOS before version 10.10 and REDOX this function is not protected against time-of-check to\n-/// time-of-use (TOCTOU) race conditions, and should not be used in security-sensitive code on\n-/// those platforms. All other platforms are protected.\n+/// On macOS before version 10.10 and REDOX, as well as when running in Miri for any target, this\n+/// function is not protected against time-of-check to time-of-use (TOCTOU) race conditions, and\n+/// should not be used in security-sensitive code on those platforms. All other platforms are\n+/// protected.\n ///\n /// # Errors\n ///"}, {"sha": "b93a3d677711f75bee4115c1ea41acad072f81ab", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b84829750cdd74132530642623a8a5f3a7daaa9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b84829750cdd74132530642623a8a5f3a7daaa9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=3b84829750cdd74132530642623a8a5f3a7daaa9", "patch": "@@ -1517,14 +1517,14 @@ pub fn chroot(dir: &Path) -> io::Result<()> {\n \n pub use remove_dir_impl::remove_dir_all;\n \n-// Fallback for REDOX and ESP-IDF\n-#[cfg(any(target_os = \"redox\", target_os = \"espidf\"))]\n+// Fallback for REDOX and ESP-IDF (and Miri)\n+#[cfg(any(target_os = \"redox\", target_os = \"espidf\", miri))]\n mod remove_dir_impl {\n     pub use crate::sys_common::fs::remove_dir_all;\n }\n \n // Modern implementation using openat(), unlinkat() and fdopendir()\n-#[cfg(not(any(target_os = \"redox\", target_os = \"espidf\")))]\n+#[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", miri)))]\n mod remove_dir_impl {\n     use super::{cstr, lstat, Dir, DirEntry, InnerReadDir, ReadDir};\n     use crate::ffi::CStr;"}, {"sha": "438ce3349d252eec8bc705461c5ab4eb72519795", "filename": "src/test/ui/deprecation/feature-gate-deprecated_suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b84829750cdd74132530642623a8a5f3a7daaa9/src%2Ftest%2Fui%2Fdeprecation%2Ffeature-gate-deprecated_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b84829750cdd74132530642623a8a5f3a7daaa9/src%2Ftest%2Fui%2Fdeprecation%2Ffeature-gate-deprecated_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Ffeature-gate-deprecated_suggestion.stderr?ref=3b84829750cdd74132530642623a8a5f3a7daaa9", "patch": "@@ -5,7 +5,7 @@ LL | #[deprecated(suggestion = \"foo\")]\n    |              ^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(deprecated_suggestion)]` to the crate root\n-   = note: see #XXX for more details\n+   = note: see #94785 for more details\n \n error: aborting due to previous error\n "}]}