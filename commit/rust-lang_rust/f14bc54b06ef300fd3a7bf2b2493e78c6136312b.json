{"sha": "f14bc54b06ef300fd3a7bf2b2493e78c6136312b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNGJjNTRiMDZlZjMwMGZkM2E3YmYyYjI0OTNlNzhjNjEzNjMxMmI=", "commit": {"author": {"name": "Graham Fawcett", "email": "fawcett@uwindsor.ca", "date": "2011-12-16T16:04:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-16T23:29:59Z"}, "message": "allow #[link_args] with #[nolink]. For now, fail if two modules link same lib, and second has link_args.\n\nI think it should undefined to have multiple modules that link in the same\nlibrary, but provide different link arguments. Unfortunately we don't track\nlink_args by module -- they are just appended as discovered into the crate\nstore -- but for now, it should be an error to provide link_args on a module\nthat's already been included (with or without link_args).", "tree": {"sha": "bee3711e8fb10af4baa07ac9e84ee09ab9f84b13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee3711e8fb10af4baa07ac9e84ee09ab9f84b13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f14bc54b06ef300fd3a7bf2b2493e78c6136312b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f14bc54b06ef300fd3a7bf2b2493e78c6136312b", "html_url": "https://github.com/rust-lang/rust/commit/f14bc54b06ef300fd3a7bf2b2493e78c6136312b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f14bc54b06ef300fd3a7bf2b2493e78c6136312b/comments", "author": {"login": "gmfawcett", "id": 49970, "node_id": "MDQ6VXNlcjQ5OTcw", "avatar_url": "https://avatars.githubusercontent.com/u/49970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmfawcett", "html_url": "https://github.com/gmfawcett", "followers_url": "https://api.github.com/users/gmfawcett/followers", "following_url": "https://api.github.com/users/gmfawcett/following{/other_user}", "gists_url": "https://api.github.com/users/gmfawcett/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmfawcett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmfawcett/subscriptions", "organizations_url": "https://api.github.com/users/gmfawcett/orgs", "repos_url": "https://api.github.com/users/gmfawcett/repos", "events_url": "https://api.github.com/users/gmfawcett/events{/privacy}", "received_events_url": "https://api.github.com/users/gmfawcett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ddd353ef693bd19b5058f89d01529407d6aa926", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ddd353ef693bd19b5058f89d01529407d6aa926", "html_url": "https://github.com/rust-lang/rust/commit/7ddd353ef693bd19b5058f89d01529407d6aa926"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "9f74f7afece1128a6e75a9e6ffa05a7d9f9fdeca", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f14bc54b06ef300fd3a7bf2b2493e78c6136312b/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14bc54b06ef300fd3a7bf2b2493e78c6136312b/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=f14bc54b06ef300fd3a7bf2b2493e78c6136312b", "patch": "@@ -60,23 +60,28 @@ fn visit_item(e: env, i: @ast::item) {\n \n         let cstore = e.sess.get_cstore();\n         let native_name = i.ident;\n-        if vec::len(attr::find_attrs_by_name(i.attrs, \"nolink\")) > 0u {\n-            ret;\n-        }\n-        alt attr::get_meta_item_value_str_by_name(i.attrs, \"link_name\") {\n-          some(nn) { native_name = nn; }\n-          none. { }\n+        let already_added = false;\n+        if vec::len(attr::find_attrs_by_name(i.attrs, \"nolink\")) == 0u {\n+            alt attr::get_meta_item_value_str_by_name(i.attrs, \"link_name\") {\n+              some(nn) { native_name = nn; }\n+              none. { }\n+            }\n+            if native_name == \"\" {\n+                e.sess.span_fatal(i.span,\n+                    \"empty #[link_name] not allowed; use #[nolink].\");\n+            }\n+            already_added = !cstore::add_used_library(cstore, native_name);\n         }\n-        if native_name == \"\" {\n-            e.sess.span_fatal(i.span,\n-                \"empty #[link_name] not allowed; use #[nolink].\");\n+        let link_args = attr::find_attrs_by_name(i.attrs, \"link_args\");\n+        if vec::len(link_args) > 0u && already_added {\n+            e.sess.span_fatal(i.span, \"library '\" + native_name +\n+                              \"' already added: can't specify link_args.\");\n         }\n-        if !cstore::add_used_library(cstore, native_name) { ret; }\n-        for a: ast::attribute in\n-            attr::find_attrs_by_name(i.attrs, \"link_args\") {\n-\n+        for a: ast::attribute in link_args {\n             alt attr::get_meta_item_value_str(attr::attr_meta(a)) {\n-              some(linkarg) { cstore::add_used_link_args(cstore, linkarg); }\n+              some(linkarg) {\n+                cstore::add_used_link_args(cstore, linkarg);\n+              }\n               none. {/* fallthrough */ }\n             }\n         }"}, {"sha": "ae7119fbeed6051165d02c451030a5f019b5715c", "filename": "src/comp/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f14bc54b06ef300fd3a7bf2b2493e78c6136312b/src%2Fcomp%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14bc54b06ef300fd3a7bf2b2493e78c6136312b/src%2Fcomp%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcstore.rs?ref=f14bc54b06ef300fd3a7bf2b2493e78c6136312b", "patch": "@@ -90,7 +90,7 @@ fn get_used_crate_files(cstore: cstore) -> [str] {\n }\n \n fn add_used_library(cstore: cstore, lib: str) -> bool {\n-    if lib == \"\" { ret false; }\n+    assert lib != \"\";\n \n     if vec::member(lib, p(cstore).used_libraries) { ret false; }\n     p(cstore).used_libraries += [lib];"}, {"sha": "07efff7571c33854ed8f3854aa74300be30a7abb", "filename": "src/test/compile-fail/nolink-with-link-args.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f14bc54b06ef300fd3a7bf2b2493e78c6136312b/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14bc54b06ef300fd3a7bf2b2493e78c6136312b/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs?ref=f14bc54b06ef300fd3a7bf2b2493e78c6136312b", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern:aFdEfSeVEE\n+\n+/* We're testing that link_args are indeed passed when nolink is specified.\n+So we try to compile with junk link_args and make sure they are visible in\n+the compiler output. */\n+\n+#[link_args = \"aFdEfSeVEEE\"]\n+#[nolink]\n+native mod m1 { }\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "ca06125880e3d153eb6f2eac53df8c978bd7c80c", "filename": "src/test/compile-fail/redundant-link-args.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f14bc54b06ef300fd3a7bf2b2493e78c6136312b/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14bc54b06ef300fd3a7bf2b2493e78c6136312b/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs?ref=f14bc54b06ef300fd3a7bf2b2493e78c6136312b", "patch": "@@ -0,0 +1,17 @@\n+// error-pattern:library 'm' already added: can't specify link_args.\n+\n+/* I think it should undefined to have multiple modules that link in the same\n+  library, but provide different link arguments. Unfortunately we don't track\n+  link_args by module -- they are just appended as discovered into the crate\n+  store -- but for now, it should be an error to provide link_args on a module\n+  that's already been included (with or without link_args). */\n+\n+#[link_name= \"m\"]\n+#[link_args=\"-foo\"]             // this could have been elided.\n+native mod m1 {\n+}\n+\n+#[link_name= \"m\"]\n+#[link_args=\"-bar\"]             // this is the actual error trigger.\n+native mod m2 {\n+}"}]}