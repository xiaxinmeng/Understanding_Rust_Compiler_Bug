{"sha": "301907497fa16e8df8d86eecaff3bf4639fd5e00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMTkwNzQ5N2ZhMTZlOGRmOGQ4NmVlY2FmZjNiZjQ2MzlmZDVlMDA=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-14T12:22:22Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-14T12:23:32Z"}, "message": "Remove needless alloc_slice\n\nDon't invoke alloc_slice.\n\nArenas are temporary,\nempty slices are eternal!", "tree": {"sha": "b03361a7a44e098d3e9c92f56815f610ab6c5b9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b03361a7a44e098d3e9c92f56815f610ab6c5b9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/301907497fa16e8df8d86eecaff3bf4639fd5e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/301907497fa16e8df8d86eecaff3bf4639fd5e00", "html_url": "https://github.com/rust-lang/rust/commit/301907497fa16e8df8d86eecaff3bf4639fd5e00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/301907497fa16e8df8d86eecaff3bf4639fd5e00/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f243a2ad904705a1e340a08639dca105605b4175", "url": "https://api.github.com/repos/rust-lang/rust/commits/f243a2ad904705a1e340a08639dca105605b4175", "html_url": "https://github.com/rust-lang/rust/commit/f243a2ad904705a1e340a08639dca105605b4175"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "4b235e1aa4a50f46df1363134181168e496eaa1c", "filename": "compiler/rustc_mir/src/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/301907497fa16e8df8d86eecaff3bf4639fd5e00/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/301907497fa16e8df8d86eecaff3bf4639fd5e00/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs?ref=301907497fa16e8df8d86eecaff3bf4639fd5e00", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn destructure_const<'tcx>(\n     let (field_count, variant, down) = match val.ty.kind() {\n         ty::Array(_, len) => (usize::try_from(len.eval_usize(tcx, param_env)).unwrap(), None, op),\n         ty::Adt(def, _) if def.variants.is_empty() => {\n-            return mir::DestructuredConst { variant: None, fields: tcx.arena.alloc_slice(&[]) };\n+            return mir::DestructuredConst { variant: None, fields: &[] };\n         }\n         ty::Adt(def, _) => {\n             let variant = ecx.read_discriminant(op).unwrap().1;"}]}