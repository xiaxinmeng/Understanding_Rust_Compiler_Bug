{"sha": "0258c6dacaa6e187ae9bf744fd3184e79f78f2ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNThjNmRhY2FhNmUxODdhZTliZjc0NGZkMzE4NGU3OWY3OGYyZWY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-12-19T14:14:41Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-12-19T14:27:50Z"}, "message": "incr.comp.: Precompute small hash for filenames to save some work.", "tree": {"sha": "93126f94926ad0ef74e640f0ff2be0e60a4b84a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93126f94926ad0ef74e640f0ff2be0e60a4b84a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef", "html_url": "https://github.com/rust-lang/rust/commit/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b39c4bc12358078f77ddd01288b24252f757f37d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b39c4bc12358078f77ddd01288b24252f757f37d", "html_url": "https://github.com/rust-lang/rust/commit/b39c4bc12358078f77ddd01288b24252f757f37d"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "2945b1ab912450c488bbcf85f8578c3a34c28a42", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=0258c6dacaa6e187ae9bf744fd3184e79f78f2ef", "patch": "@@ -341,7 +341,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for Span {\n         std_hash::Hash::hash(&TAG_VALID_SPAN, hasher);\n         // We truncate the stable_id hash and line and col numbers. The chances\n         // of causing a collision this way should be minimal.\n-        std_hash::Hash::hash(&file_lo.name, hasher);\n+        std_hash::Hash::hash(&(file_lo.name_hash as u64), hasher);\n \n         let col = (col_lo.0 as u64) & 0xFF;\n         let line = ((line_lo as u64) & 0xFF_FF_FF) << 8;"}, {"sha": "57120d61e7c7b820e3f3978a1ee2f085356a96ee", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=0258c6dacaa6e187ae9bf744fd3184e79f78f2ef", "patch": "@@ -387,7 +387,8 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for FileMap {\n                                           hcx: &mut StableHashingContext<'gcx>,\n                                           hasher: &mut StableHasher<W>) {\n         let FileMap {\n-            ref name,\n+            name: _, // We hash the smaller name_hash instead of this\n+            name_hash,\n             name_was_remapped,\n             unmapped_path: _,\n             crate_of_origin,\n@@ -402,7 +403,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for FileMap {\n             ref non_narrow_chars,\n         } = *self;\n \n-        name.hash_stable(hcx, hasher);\n+        (name_hash as u64).hash_stable(hcx, hasher);\n         name_was_remapped.hash_stable(hcx, hasher);\n \n         DefId {"}, {"sha": "0e9f4a8f1784b7a392a14d7356261fdc3b198133", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=0258c6dacaa6e187ae9bf744fd3184e79f78f2ef", "patch": "@@ -1129,6 +1129,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                       lines,\n                                       multibyte_chars,\n                                       non_narrow_chars,\n+                                      name_hash,\n                                       .. } = filemap_to_import;\n \n             let source_length = (end_pos - start_pos).to_usize();\n@@ -1155,6 +1156,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                                                    name_was_remapped,\n                                                                    self.cnum.as_u32(),\n                                                                    src_hash,\n+                                                                   name_hash,\n                                                                    source_length,\n                                                                    lines,\n                                                                    multibyte_chars,"}, {"sha": "2df57597045a08b252186ca0b1fe047b3e47e7c3", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=0258c6dacaa6e187ae9bf744fd3184e79f78f2ef", "patch": "@@ -28,8 +28,10 @@ use rustc::ty::codec::{self as ty_codec, TyEncoder};\n use rustc::session::config::{self, CrateTypeProcMacro};\n use rustc::util::nodemap::{FxHashMap, NodeSet};\n \n+use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_serialize::{Encodable, Encoder, SpecializedEncoder, opaque};\n \n+use std::hash::Hash;\n use std::io::prelude::*;\n use std::io::Cursor;\n use std::path::Path;\n@@ -290,6 +292,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                         } else {\n                             let mut adapted = (**filemap).clone();\n                             adapted.name = Path::new(&working_dir).join(name).into();\n+                            adapted.name_hash = {\n+                                let mut hasher: StableHasher<u128> = StableHasher::new();\n+                                adapted.name.hash(&mut hasher);\n+                                hasher.finish()\n+                            };\n                             Rc::new(adapted)\n                         }\n                     },"}, {"sha": "e49a7117192d37d24dfe932a68d98a82d505e8a1", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=0258c6dacaa6e187ae9bf744fd3184e79f78f2ef", "patch": "@@ -246,6 +246,7 @@ impl CodeMap {\n                                 name_was_remapped: bool,\n                                 crate_of_origin: u32,\n                                 src_hash: u128,\n+                                name_hash: u128,\n                                 source_len: usize,\n                                 mut file_local_lines: Vec<BytePos>,\n                                 mut file_local_multibyte_chars: Vec<MultiByteChar>,\n@@ -282,6 +283,7 @@ impl CodeMap {\n             lines: RefCell::new(file_local_lines),\n             multibyte_chars: RefCell::new(file_local_multibyte_chars),\n             non_narrow_chars: RefCell::new(file_local_non_narrow_chars),\n+            name_hash,\n         });\n \n         files.push(filemap.clone());"}, {"sha": "85f0925b98210383459cc783e35cc131af6165aa", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0258c6dacaa6e187ae9bf744fd3184e79f78f2ef/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=0258c6dacaa6e187ae9bf744fd3184e79f78f2ef", "patch": "@@ -30,7 +30,7 @@ use std::borrow::Cow;\n use std::cell::{Cell, RefCell};\n use std::cmp::{self, Ordering};\n use std::fmt;\n-use std::hash::Hasher;\n+use std::hash::{Hasher, Hash};\n use std::ops::{Add, Sub};\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -691,6 +691,8 @@ pub struct FileMap {\n     pub multibyte_chars: RefCell<Vec<MultiByteChar>>,\n     /// Width of characters that are not narrow in the source code\n     pub non_narrow_chars: RefCell<Vec<NonNarrowChar>>,\n+    /// A hash of the filename, used for speeding up the incr. comp. hashing.\n+    pub name_hash: u128,\n }\n \n impl Encodable for FileMap {\n@@ -752,6 +754,9 @@ impl Encodable for FileMap {\n             })?;\n             s.emit_struct_field(\"non_narrow_chars\", 8, |s| {\n                 (*self.non_narrow_chars.borrow()).encode(s)\n+            })?;\n+            s.emit_struct_field(\"name_hash\", 9, |s| {\n+                self.name_hash.encode(s)\n             })\n         })\n     }\n@@ -801,6 +806,8 @@ impl Decodable for FileMap {\n                 d.read_struct_field(\"multibyte_chars\", 7, |d| Decodable::decode(d))?;\n             let non_narrow_chars: Vec<NonNarrowChar> =\n                 d.read_struct_field(\"non_narrow_chars\", 8, |d| Decodable::decode(d))?;\n+            let name_hash: u128 =\n+                d.read_struct_field(\"name_hash\", 9, |d| Decodable::decode(d))?;\n             Ok(FileMap {\n                 name,\n                 name_was_remapped,\n@@ -816,7 +823,8 @@ impl Decodable for FileMap {\n                 external_src: RefCell::new(ExternalSource::AbsentOk),\n                 lines: RefCell::new(lines),\n                 multibyte_chars: RefCell::new(multibyte_chars),\n-                non_narrow_chars: RefCell::new(non_narrow_chars)\n+                non_narrow_chars: RefCell::new(non_narrow_chars),\n+                name_hash,\n             })\n         })\n     }\n@@ -836,9 +844,16 @@ impl FileMap {\n                start_pos: BytePos) -> FileMap {\n         remove_bom(&mut src);\n \n-        let mut hasher: StableHasher<u128> = StableHasher::new();\n-        hasher.write(src.as_bytes());\n-        let src_hash = hasher.finish();\n+        let src_hash = {\n+            let mut hasher: StableHasher<u128> = StableHasher::new();\n+            hasher.write(src.as_bytes());\n+            hasher.finish()\n+        };\n+        let name_hash = {\n+            let mut hasher: StableHasher<u128> = StableHasher::new();\n+            name.hash(&mut hasher);\n+            hasher.finish()\n+        };\n         let end_pos = start_pos.to_usize() + src.len();\n \n         FileMap {\n@@ -854,6 +869,7 @@ impl FileMap {\n             lines: RefCell::new(Vec::new()),\n             multibyte_chars: RefCell::new(Vec::new()),\n             non_narrow_chars: RefCell::new(Vec::new()),\n+            name_hash,\n         }\n     }\n "}]}