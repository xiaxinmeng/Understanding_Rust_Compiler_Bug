{"sha": "4246f37588a83bda7ce885926c2ec88b7ccc3d44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNDZmMzc1ODhhODNiZGE3Y2U4ODU5MjZjMmVjODhiN2NjYzNkNDQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-14T15:07:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-14T15:07:36Z"}, "message": "Rollup merge of #39790 - zackw:tidy-linelen-exempt-urls, r=alexcrichton\n\ntidy: exempt URLs from the line length restriction\n\nThe length of a URL is usually not under our control, and Markdown\nprovides no way to split a URL in the middle.  Therefore, comment\nlines consisting _solely_ of a URL (possibly with a Markdown link\nlabel in front) should be exempt from the line-length restriction.\n\nInline hyperlink destinations ( `[foo](http://...)` notation ) are\n_not_ exempt, because it is my arrogant opinion that long lines of\nthat type make the source text illegible.\n\nThe patch adds dependencies on the `regex` and `lazy_static` crates\nto the tidy utility.  This _appears_ to Just Work, but if you would\nrather not have that dependency I am willing to provide a hand-written\nparser instead.", "tree": {"sha": "06eb5c192daab4b022509306990591aa869e8497", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06eb5c192daab4b022509306990591aa869e8497"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4246f37588a83bda7ce885926c2ec88b7ccc3d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4246f37588a83bda7ce885926c2ec88b7ccc3d44", "html_url": "https://github.com/rust-lang/rust/commit/4246f37588a83bda7ce885926c2ec88b7ccc3d44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4246f37588a83bda7ce885926c2ec88b7ccc3d44/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "376e24697f76e17ede36610921750a6371e086d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/376e24697f76e17ede36610921750a6371e086d1", "html_url": "https://github.com/rust-lang/rust/commit/376e24697f76e17ede36610921750a6371e086d1"}, {"sha": "ff4758c2a0dffef264fe73b90668bd04b1b2fa89", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4758c2a0dffef264fe73b90668bd04b1b2fa89", "html_url": "https://github.com/rust-lang/rust/commit/ff4758c2a0dffef264fe73b90668bd04b1b2fa89"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "2233f8c3529748dcc43bdd6e0f333bc147172548", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4246f37588a83bda7ce885926c2ec88b7ccc3d44/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4246f37588a83bda7ce885926c2ec88b7ccc3d44/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=4246f37588a83bda7ce885926c2ec88b7ccc3d44", "patch": "@@ -38,6 +38,60 @@ http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n option. This file may not be copied, modified, or distributed\n except according to those terms.\";\n \n+/// Parser states for line_is_url.\n+#[derive(PartialEq)]\n+#[allow(non_camel_case_types)]\n+enum LIUState { EXP_COMMENT_START,\n+                EXP_LINK_LABEL_OR_URL,\n+                EXP_URL,\n+                EXP_END }\n+\n+/// True if LINE appears to be a line comment containing an URL,\n+/// possibly with a Markdown link label in front, and nothing else.\n+/// The Markdown link label, if present, may not contain whitespace.\n+/// Lines of this form are allowed to be overlength, because Markdown\n+/// offers no way to split a line in the middle of a URL, and the lengths\n+/// of URLs to external references are beyond our control.\n+fn line_is_url(line: &str) -> bool {\n+    use self::LIUState::*;\n+    let mut state: LIUState = EXP_COMMENT_START;\n+\n+    for tok in line.split_whitespace() {\n+        match (state, tok) {\n+            (EXP_COMMENT_START, \"//\") => state = EXP_LINK_LABEL_OR_URL,\n+            (EXP_COMMENT_START, \"///\") => state = EXP_LINK_LABEL_OR_URL,\n+            (EXP_COMMENT_START, \"//!\") => state = EXP_LINK_LABEL_OR_URL,\n+\n+            (EXP_LINK_LABEL_OR_URL, w)\n+                if w.len() >= 4 && w.starts_with(\"[\") && w.ends_with(\"]:\")\n+                => state = EXP_URL,\n+\n+            (EXP_LINK_LABEL_OR_URL, w)\n+                if w.starts_with(\"http://\") || w.starts_with(\"https://\")\n+                => state = EXP_END,\n+\n+            (EXP_URL, w)\n+                if w.starts_with(\"http://\") || w.starts_with(\"https://\")\n+                => state = EXP_END,\n+\n+            (_, _) => return false,\n+        }\n+    }\n+\n+    state == EXP_END\n+}\n+\n+/// True if LINE is allowed to be longer than the normal limit.\n+/// Currently there is only one exception, for long URLs, but more\n+/// may be added in the future.\n+fn long_line_is_ok(line: &str) -> bool {\n+    if line_is_url(line) {\n+        return true;\n+    }\n+\n+    false\n+}\n+\n pub fn check(path: &Path, bad: &mut bool) {\n     let mut contents = String::new();\n     super::walk(path, &mut super::filter_dirs, &mut |file| {\n@@ -61,8 +115,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 println!(\"{}:{}: {}\", file.display(), i + 1, msg);\n                 *bad = true;\n             };\n-            if line.chars().count() > COLS && !skip_length {\n-                err(&format!(\"line longer than {} chars\", COLS));\n+            if !skip_length && line.chars().count() > COLS\n+                && !long_line_is_ok(line) {\n+                    err(&format!(\"line longer than {} chars\", COLS));\n             }\n             if line.contains(\"\\t\") && !skip_tab {\n                 err(\"tab character\");"}]}