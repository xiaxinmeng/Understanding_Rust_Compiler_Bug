{"sha": "f255734bae43e4d9769308439b3881aeb70fa854", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNTU3MzRiYWU0M2U0ZDk3NjkzMDg0MzliMzg4MWFlYjcwZmE4NTQ=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-03-11T13:23:45Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-03-11T13:23:45Z"}, "message": "Merge pull request #754 from mcarton/rustup\n\nRustup to 1.9.0-nightly (c9629d61c 2016-03-10)", "tree": {"sha": "ae66656e33dcb2d369d30ca1c81042cf8191cd97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae66656e33dcb2d369d30ca1c81042cf8191cd97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f255734bae43e4d9769308439b3881aeb70fa854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f255734bae43e4d9769308439b3881aeb70fa854", "html_url": "https://github.com/rust-lang/rust/commit/f255734bae43e4d9769308439b3881aeb70fa854", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f255734bae43e4d9769308439b3881aeb70fa854/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d41ec98466b33ec4b6fdd14ff6528284adc6c8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d41ec98466b33ec4b6fdd14ff6528284adc6c8f", "html_url": "https://github.com/rust-lang/rust/commit/1d41ec98466b33ec4b6fdd14ff6528284adc6c8f"}, {"sha": "74412d9574139e6e7fb41da4b21ae83413f5213f", "url": "https://api.github.com/repos/rust-lang/rust/commits/74412d9574139e6e7fb41da4b21ae83413f5213f", "html_url": "https://github.com/rust-lang/rust/commit/74412d9574139e6e7fb41da4b21ae83413f5213f"}], "stats": {"total": 72, "additions": 41, "deletions": 31}, "files": [{"sha": "853815e049f70117e33d161ec9a3bb38850d98b9", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f255734bae43e4d9769308439b3881aeb70fa854/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f255734bae43e4d9769308439b3881aeb70fa854/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=f255734bae43e4d9769308439b3881aeb70fa854", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.49\"\n+version = \"0.0.50\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\","}, {"sha": "bc13576fe3bc139beaaa0da17df963f74fea68e1", "filename": "src/cyclomatic_complexity.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f255734bae43e4d9769308439b3881aeb70fa854/src%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f255734bae43e4d9769308439b3881aeb70fa854/src%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcyclomatic_complexity.rs?ref=f255734bae43e4d9769308439b3881aeb70fa854", "patch": "@@ -124,13 +124,14 @@ impl<'a, 'b, 'tcx> Visitor<'a> for CCHelper<'b, 'tcx> {\n             ExprCall(ref callee, _) => {\n                 walk_expr(self, e);\n                 let ty = self.tcx.node_id_to_type(callee.id);\n-                if let ty::TyBareFn(_, ty) = ty.sty {\n-                    if ty.sig.skip_binder().output.diverges() {\n+                match ty.sty {\n+                    ty::TyFnDef(_, _, ty) | ty::TyFnPtr(ty) if ty.sig.skip_binder().output.diverges() => {\n                         self.divergence += 1;\n                     }\n+                    _ => (),\n                 }\n             }\n-            ExprClosure(..) => {}\n+            ExprClosure(..) => (),\n             ExprBinary(op, _, _) => {\n                 walk_expr(self, e);\n                 match op.node {"}, {"sha": "380ff0a30f9270bc70be205c0531afef6fbd26ce", "filename": "src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f255734bae43e4d9769308439b3881aeb70fa854/src%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f255734bae43e4d9769308439b3881aeb70fa854/src%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fderive.rs?ref=f255734bae43e4d9769308439b3881aeb70fa854", "patch": "@@ -155,7 +155,7 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n                             TypeVariants::TyArray(_, size) if size > 32 => {\n                                 return;\n                             }\n-                            TypeVariants::TyBareFn(..) => {\n+                            TypeVariants::TyFnPtr(..) => {\n                                 return;\n                             }\n                             TypeVariants::TyTuple(ref tys) if tys.len() > 12 => {"}, {"sha": "6335f3f13980d5250bb2020c8433dc4125254a97", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f255734bae43e4d9769308439b3881aeb70fa854/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f255734bae43e4d9769308439b3881aeb70fa854/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=f255734bae43e4d9769308439b3881aeb70fa854", "patch": "@@ -58,11 +58,14 @@ fn check_closure(cx: &LateContext, expr: &Expr) {\n                     return;\n                 }\n                 let fn_ty = cx.tcx.expr_ty(caller);\n-                if let ty::TyBareFn(_, fn_ty) = fn_ty.sty {\n+                match fn_ty.sty {\n                     // Is it an unsafe function? They don't implement the closure traits\n-                    if fn_ty.unsafety == Unsafety::Unsafe {\n-                        return;\n+                    ty::TyFnDef(_, _, fn_ty) | ty::TyFnPtr(fn_ty) => {\n+                        if fn_ty.unsafety == Unsafety::Unsafe {\n+                            return;\n+                        }\n                     }\n+                    _ => (),\n                 }\n                 for (ref a1, ref a2) in decl.inputs.iter().zip(args) {\n                     if let PatKind::Ident(_, ident, _) = a1.pat.node {"}, {"sha": "707ce8efaeb50917aec61390ac67cbe43c9c0341", "filename": "src/mut_reference.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f255734bae43e4d9769308439b3881aeb70fa854/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f255734bae43e4d9769308439b3881aeb70fa854/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=f255734bae43e4d9769308439b3881aeb70fa854", "patch": "@@ -53,21 +53,24 @@ impl LateLintPass for UnnecessaryMutPassed {\n }\n \n fn check_arguments(cx: &LateContext, arguments: &[P<Expr>], type_definition: &TyS, name: &str) {\n-    if let TypeVariants::TyBareFn(_, ref fn_type) = type_definition.sty {\n-        let parameters = &fn_type.sig.skip_binder().inputs;\n-        for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n-            match parameter.sty {\n-                TypeVariants::TyRef(_, TypeAndMut {mutbl: MutImmutable, ..}) |\n-                TypeVariants::TyRawPtr(TypeAndMut {mutbl: MutImmutable, ..}) => {\n-                    if let ExprAddrOf(MutMutable, _) = argument.node {\n-                        span_lint(cx,\n-                                  UNNECESSARY_MUT_PASSED,\n-                                  argument.span,\n-                                  &format!(\"The function/method \\\"{}\\\" doesn't need a mutable reference\", name));\n+    match type_definition.sty {\n+        TypeVariants::TyFnDef(_, _, ref fn_type) | TypeVariants::TyFnPtr(ref fn_type) => {\n+            let parameters = &fn_type.sig.skip_binder().inputs;\n+            for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n+                match parameter.sty {\n+                    TypeVariants::TyRef(_, TypeAndMut {mutbl: MutImmutable, ..}) |\n+                    TypeVariants::TyRawPtr(TypeAndMut {mutbl: MutImmutable, ..}) => {\n+                        if let ExprAddrOf(MutMutable, _) = argument.node {\n+                            span_lint(cx,\n+                                      UNNECESSARY_MUT_PASSED,\n+                                      argument.span,\n+                                      &format!(\"The function/method \\\"{}\\\" doesn't need a mutable reference\", name));\n+                        }\n                     }\n+                    _ => {}\n                 }\n-                _ => {}\n             }\n         }\n+        _ => (),\n     }\n }"}, {"sha": "1d81ed14e4edce3791a3368090cfed1c761b7129", "filename": "tests/compile-fail/mut_reference.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f255734bae43e4d9769308439b3881aeb70fa854/tests%2Fcompile-fail%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f255734bae43e4d9769308439b3881aeb70fa854/tests%2Fcompile-fail%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_reference.rs?ref=f255734bae43e4d9769308439b3881aeb70fa854", "patch": "@@ -3,12 +3,8 @@\n \n #![allow(unused_variables)]\n \n-fn takes_an_immutable_reference(a: &i32) {\n-}\n-\n-\n-fn takes_a_mutable_reference(a: &mut i32) {\n-}\n+fn takes_an_immutable_reference(a: &i32) {}\n+fn takes_a_mutable_reference(a: &mut i32) {}\n \n struct MyStruct;\n \n@@ -24,23 +20,30 @@ impl MyStruct {\n fn main() {\n     // Functions\n     takes_an_immutable_reference(&mut 42); //~ERROR The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n-    \n+    let foo: fn(&i32) = takes_an_immutable_reference;\n+    foo(&mut 42); //~ERROR The function/method \"foo\" doesn't need a mutable reference\n+\n     // Methods\n     let my_struct = MyStruct;\n     my_struct.takes_an_immutable_reference(&mut 42); //~ERROR The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n-    \n+\n \n     // No error\n-    \n+\n     // Functions\n     takes_an_immutable_reference(&42);\n+    let foo: fn(&i32) = takes_an_immutable_reference;\n+    foo(&42);\n+\n     takes_a_mutable_reference(&mut 42);\n+    let foo: fn(&mut i32) = takes_a_mutable_reference;\n+    foo(&mut 42);\n+\n     let a = &mut 42;\n     takes_an_immutable_reference(a);\n-    \n+\n     // Methods\n     my_struct.takes_an_immutable_reference(&42);\n     my_struct.takes_a_mutable_reference(&mut 42);\n     my_struct.takes_an_immutable_reference(a);\n-    \n }"}]}