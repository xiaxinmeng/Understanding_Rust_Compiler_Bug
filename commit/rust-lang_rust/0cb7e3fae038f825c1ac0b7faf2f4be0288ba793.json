{"sha": "0cb7e3fae038f825c1ac0b7faf2f4be0288ba793", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYjdlM2ZhZTAzOGY4MjVjMWFjMGI3ZmFmMmY0YmUwMjg4YmE3OTM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T14:22:18Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T14:22:18Z"}, "message": "Support SwitchInt for integer types.", "tree": {"sha": "4822091bd9c3961f444797e2a524ddc4a7f199b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4822091bd9c3961f444797e2a524ddc4a7f199b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793", "html_url": "https://github.com/rust-lang/rust/commit/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e41af43dbf874a4a16e33470cd49ec15ed05799c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e41af43dbf874a4a16e33470cd49ec15ed05799c", "html_url": "https://github.com/rust-lang/rust/commit/e41af43dbf874a4a16e33470cd49ec15ed05799c"}], "stats": {"total": 79, "additions": 44, "deletions": 35}, "files": [{"sha": "27f0081184c11a435687d243a5de02b5ab9536e4", "filename": "src/interpreter.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=0cb7e3fae038f825c1ac0b7faf2f4be0288ba793", "patch": "@@ -171,8 +171,26 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n \n                 If { ref cond, targets: (then_target, else_target) } => {\n                     let cond_ptr = try!(self.operand_to_ptr(cond));\n-                    let cond = try!(self.memory.read_bool(cond_ptr));\n-                    current_block = if cond { then_target } else { else_target };\n+                    let cond_val = try!(self.memory.read_bool(cond_ptr));\n+                    current_block = if cond_val { then_target } else { else_target };\n+                }\n+\n+                SwitchInt { ref discr, ref values, ref targets, .. } => {\n+                    // FIXME(tsion): Handle non-integer switch types.\n+                    let discr_ptr = try!(self.lvalue_to_ptr(discr));\n+                    let discr_val = try!(self.memory.read_int(discr_ptr));\n+\n+                    // Branch to the `otherwise` case by default, if no match is found.\n+                    current_block = targets[targets.len() - 1];\n+\n+                    for (index, val_const) in values.iter().enumerate() {\n+                        let ptr = try!(self.const_to_ptr(val_const));\n+                        let val = try!(self.memory.read_int(ptr));\n+                        if discr_val == val {\n+                            current_block = targets[index];\n+                            break;\n+                        }\n+                    }\n                 }\n \n                 // Call { ref func, ref args, ref destination, .. } => {\n@@ -203,15 +221,6 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 //     }\n                 // }\n \n-                // SwitchInt { ref discr, ref values, ref targets, .. } => {\n-                //     let discr_val = self.read_lvalue(discr);\n-\n-                //     let index = values.iter().position(|v| discr_val == self.const_to_ptr(v))\n-                //         .expect(\"discriminant matched no values\");\n-\n-                //     current_block = targets[index];\n-                // }\n-\n                 // Switch { ref discr, ref targets, .. } => {\n                 //     let discr_val = self.read_lvalue(discr);\n "}, {"sha": "bb6cadd026a10a3dbbf903e383ccc8a1c2c7a583", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=0cb7e3fae038f825c1ac0b7faf2f4be0288ba793", "patch": "@@ -159,7 +159,7 @@ impl Repr {\n                 Repr::Aggregate { size: size, fields: fields }\n             },\n \n-            _ => unimplemented!(),\n+            ref t => panic!(\"can't convert type to repr: {:?}\", t),\n         }\n     }\n "}, {"sha": "b3da0562fc5101e33f0c15fd97e50f6e2327682d", "filename": "test/new_values.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793/test%2Fnew_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793/test%2Fnew_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fnew_values.rs?ref=0cb7e3fae038f825c1ac0b7faf2f4be0288ba793", "patch": "@@ -70,18 +70,18 @@ fn if_true() -> i32 {\n //     increment(1)\n // }\n \n-// // #[miri_run(expected = \"Int(3628800)\")]\n-// // fn factorial_loop() -> i32 {\n-// //     let mut product = 1;\n-// //     let mut i = 1;\n-\n-// //     while i <= 10 {\n-// //         product *= i;\n-// //         i += 1;\n-// //     }\n+// #[miri_run(expected = \"Int(3628800)\")]\n+// fn factorial_loop() -> i32 {\n+//     let mut product = 1;\n+//     let mut i = 1;\n \n-// //     product\n-// // }\n+//     while i <= 10 {\n+//         product *= i;\n+//         i += 1;\n+//     }\n+\n+//     product\n+// }\n \n // #[miri_run(expected = \"Int(3628800)\")]\n // fn factorial_recursive() -> i32 {\n@@ -96,7 +96,7 @@ fn if_true() -> i32 {\n //     fact(10)\n // }\n \n-// #[miri_run(expected = \"Int(1)\")]\n+// #[miri_run]\n // fn match_bool() -> i32 {\n //     let b = true;\n //     match b {\n@@ -105,17 +105,17 @@ fn if_true() -> i32 {\n //     }\n // }\n \n-// #[miri_run(expected = \"Int(20)\")]\n-// fn match_int() -> i32 {\n-//     let n = 2;\n-//     match n {\n-//         0 => 0,\n-//         1 => 10,\n-//         2 => 20,\n-//         3 => 30,\n-//         _ => 100,\n-//     }\n-// }\n+#[miri_run]\n+fn match_int() -> i32 {\n+    let n = 2;\n+    match n {\n+        0 => 0,\n+        1 => 10,\n+        2 => 20,\n+        3 => 30,\n+        _ => 100,\n+    }\n+}\n \n // #[miri_run(expected = \"Int(1)\")]\n // fn one_line_ref() -> i32 {"}]}