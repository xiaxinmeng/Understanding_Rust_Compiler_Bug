{"sha": "d425116bdc764bdd46bf482c91aeef38fe4480e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MjUxMTZiZGM3NjRiZGQ0NmJmNDgyYzkxYWVlZjM4ZmU0NDgwZTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-23T14:33:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-23T14:36:14Z"}, "message": "Implement some intrinsics", "tree": {"sha": "03f171aa35d133d4438f3d39fd3ae2ecae955ca2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03f171aa35d133d4438f3d39fd3ae2ecae955ca2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d425116bdc764bdd46bf482c91aeef38fe4480e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d425116bdc764bdd46bf482c91aeef38fe4480e7", "html_url": "https://github.com/rust-lang/rust/commit/d425116bdc764bdd46bf482c91aeef38fe4480e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d425116bdc764bdd46bf482c91aeef38fe4480e7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7274ac5fdf84452cdfd09727e106bac2bf50e36", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7274ac5fdf84452cdfd09727e106bac2bf50e36", "html_url": "https://github.com/rust-lang/rust/commit/d7274ac5fdf84452cdfd09727e106bac2bf50e36"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "c13cc72b88d00b15f45770806a1a2b64908706d0", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d425116bdc764bdd46bf482c91aeef38fe4480e7/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d425116bdc764bdd46bf482c91aeef38fe4480e7/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=d425116bdc764bdd46bf482c91aeef38fe4480e7", "patch": "@@ -106,7 +106,7 @@ pub fn force_eval_const<'a, 'tcx: 'a>(\n     }\n }\n \n-fn trans_const_value<'a, 'tcx: 'a>(\n+pub fn trans_const_value<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     const_: Const<'tcx>,\n ) -> CValue<'tcx> {"}, {"sha": "18a300ed12e28facac35fd650ea0c6a02d1c51e3", "filename": "src/intrinsics.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d425116bdc764bdd46bf482c91aeef38fe4480e7/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d425116bdc764bdd46bf482c91aeef38fe4480e7/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=d425116bdc764bdd46bf482c91aeef38fe4480e7", "patch": "@@ -186,11 +186,24 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             };\n             ret.write_cvalue(fx, CValue::by_val(align, usize_layout));\n         };\n+        pref_align_of, <T> () {\n+            let pref_align = fx.layout_of(T).align.pref.bytes();\n+            let pref_align = CValue::const_val(fx, usize_layout.ty, pref_align as i64);\n+            ret.write_cvalue(fx, pref_align);\n+        };\n+\n+\n         type_id, <T> () {\n             let type_id = fx.tcx.type_id_hash(T);\n             let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n             ret.write_cvalue(fx, type_id);\n         };\n+        type_name, <T> () {\n+            let type_name = fx.tcx.type_name(T);\n+            let type_name = crate::constant::trans_const_value(fx, *type_name);\n+            ret.write_cvalue(fx, type_name);\n+        };\n+\n         _ if intrinsic.starts_with(\"unchecked_\") || intrinsic == \"exact_div\", (c x, c y) {\n             // FIXME trap on overflow\n             let bin_op = match intrinsic {\n@@ -418,6 +431,19 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             }\n         };\n \n+        volatile_load, (c ptr) {\n+            // Cranelift treats loads as volatile by default\n+            let inner_layout =\n+                fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n+            let val = CValue::by_ref(ptr.load_scalar(fx), inner_layout);\n+            ret.write_cvalue(fx, val);\n+        };\n+        volatile_store, (v ptr, c val) {\n+            // Cranelift treats stores as volatile by default\n+            let dest = CPlace::for_addr(ptr, val.layout());\n+            dest.write_cvalue(fx, val);\n+        };\n+\n         _ if intrinsic.starts_with(\"atomic_fence\"), () {};\n         _ if intrinsic.starts_with(\"atomic_singlethreadfence\"), () {};\n         _ if intrinsic.starts_with(\"atomic_load\"), (c ptr) {"}]}