{"sha": "a65c881aa3c3c065277375c592bea539ebaa3d4d", "node_id": "C_kwDOAAsO6NoAKGE2NWM4ODFhYTNjM2MwNjUyNzczNzVjNTkyYmVhNTM5ZWJhYTNkNGQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-28T17:41:36Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-12T10:35:38Z"}, "message": "Introduce hyperfine_command helper", "tree": {"sha": "f086e9265534476cb42e29b7c2fc26063c2fdd24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f086e9265534476cb42e29b7c2fc26063c2fdd24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a65c881aa3c3c065277375c592bea539ebaa3d4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a65c881aa3c3c065277375c592bea539ebaa3d4d", "html_url": "https://github.com/rust-lang/rust/commit/a65c881aa3c3c065277375c592bea539ebaa3d4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a65c881aa3c3c065277375c592bea539ebaa3d4d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be305c2b1f4be31c66c3f646a85dc459d6ee5807", "url": "https://api.github.com/repos/rust-lang/rust/commits/be305c2b1f4be31c66c3f646a85dc459d6ee5807", "html_url": "https://github.com/rust-lang/rust/commit/be305c2b1f4be31c66c3f646a85dc459d6ee5807"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "74042bc92183e819bbaeb79cbef3f58e5ced21c9", "filename": "build_system/tests.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a65c881aa3c3c065277375c592bea539ebaa3d4d/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65c881aa3c3c065277375c592bea539ebaa3d4d/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=a65c881aa3c3c065277375c592bea539ebaa3d4d", "patch": "@@ -1,7 +1,7 @@\n use super::build_sysroot;\n use super::config;\n use super::rustc_info::get_wrapper_file_name;\n-use super::utils::{cargo_command, spawn_and_wait, spawn_and_wait_with_input};\n+use super::utils::{cargo_command, hyperfine_command, spawn_and_wait, spawn_and_wait_with_input};\n use build_system::SysrootKind;\n use std::env;\n use std::ffi::OsStr;\n@@ -231,40 +231,37 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     }),\n     TestCase::new(\"bench.simple-raytracer\", &|runner| {\n         runner.in_dir([\"simple-raytracer\"], |runner| {\n-            let run_runs = env::var(\"RUN_RUNS\").unwrap_or(\"10\".to_string());\n+            let run_runs = env::var(\"RUN_RUNS\").unwrap_or(\"10\".to_string()).parse().unwrap();\n \n             if runner.host_triple == runner.target_triple {\n                 eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n-                let mut bench_compile = Command::new(\"hyperfine\");\n-                bench_compile.arg(\"--runs\");\n-                bench_compile.arg(&run_runs);\n-                bench_compile.arg(\"--warmup\");\n-                bench_compile.arg(\"1\");\n-                bench_compile.arg(\"--prepare\");\n-                bench_compile.arg(format!(\"{:?}\", runner.cargo_command(\"clean\", [])));\n+                let prepare = runner.cargo_command(\"clean\", []);\n \n-                bench_compile.arg(\"cargo build\");\n+                let llvm_build_cmd = cargo_command(\"cargo\", \"build\", None, Path::new(\".\"));\n \n                 let cargo_clif = runner\n                     .root_dir\n                     .clone()\n                     .join(\"build\")\n                     .join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n-                let mut clif_build_cmd = cargo_command(cargo_clif, \"build\", None, Path::new(\".\"));\n-                clif_build_cmd.env(\"RUSTFLAGS\", &runner.rust_flags);\n-                bench_compile.arg(format!(\"{:?}\", clif_build_cmd));\n+                let clif_build_cmd = cargo_command(cargo_clif, \"build\", None, Path::new(\".\"));\n+\n+                let bench_compile =\n+                    hyperfine_command(1, run_runs, Some(prepare), llvm_build_cmd, clif_build_cmd);\n \n                 spawn_and_wait(bench_compile);\n \n                 eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n                 fs::copy(PathBuf::from(\"./target/debug/main\"), PathBuf::from(\"raytracer_cg_clif\"))\n                     .unwrap();\n \n-                let mut bench_run = Command::new(\"hyperfine\");\n-                bench_run.arg(\"--runs\");\n-                bench_run.arg(&run_runs);\n-                bench_run.arg(PathBuf::from(\"./raytracer_cg_llvm\"));\n-                bench_run.arg(PathBuf::from(\"./raytracer_cg_clif\"));\n+                let bench_run = hyperfine_command(\n+                    0,\n+                    run_runs,\n+                    None,\n+                    Command::new(\"./raytracer_cg_llvm\"),\n+                    Command::new(\"./raytracer_cg_clif\"),\n+                );\n                 spawn_and_wait(bench_run);\n             } else {\n                 runner.run_cargo(\"clean\", []);"}, {"sha": "48da64906e2a4b30189c82535f560a899e547510", "filename": "build_system/utils.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a65c881aa3c3c065277375c592bea539ebaa3d4d/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65c881aa3c3c065277375c592bea539ebaa3d4d/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=a65c881aa3c3c065277375c592bea539ebaa3d4d", "patch": "@@ -24,6 +24,32 @@ pub(crate) fn cargo_command(\n     cmd\n }\n \n+pub(crate) fn hyperfine_command(\n+    warmup: u64,\n+    runs: u64,\n+    prepare: Option<Command>,\n+    a: Command,\n+    b: Command,\n+) -> Command {\n+    let mut bench = Command::new(\"hyperfine\");\n+\n+    if warmup != 0 {\n+        bench.arg(\"--warmup\").arg(warmup.to_string());\n+    }\n+\n+    if runs != 0 {\n+        bench.arg(\"--runs\").arg(runs.to_string());\n+    }\n+\n+    if let Some(prepare) = prepare {\n+        bench.arg(\"--prepare\").arg(format!(\"{:?}\", prepare));\n+    }\n+\n+    bench.arg(format!(\"{:?}\", a)).arg(format!(\"{:?}\", b));\n+\n+    bench\n+}\n+\n #[track_caller]\n pub(crate) fn try_hard_link(src: impl AsRef<Path>, dst: impl AsRef<Path>) {\n     let src = src.as_ref();"}]}