{"sha": "60affafdcdc5a2f2174502b08f696b1aaf89c33b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYWZmYWZkY2RjNWEyZjIxNzQ1MDJiMDhmNjk2YjFhYWY4OWMzM2I=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-11T01:25:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-11T01:25:22Z"}, "message": "Implement expr_vec.", "tree": {"sha": "72106756c8793b14d6efa172c140fa0b971446ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72106756c8793b14d6efa172c140fa0b971446ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60affafdcdc5a2f2174502b08f696b1aaf89c33b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60affafdcdc5a2f2174502b08f696b1aaf89c33b", "html_url": "https://github.com/rust-lang/rust/commit/60affafdcdc5a2f2174502b08f696b1aaf89c33b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60affafdcdc5a2f2174502b08f696b1aaf89c33b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "779b9133484864d0de0fdd20eca52ba08abdb3af", "url": "https://api.github.com/repos/rust-lang/rust/commits/779b9133484864d0de0fdd20eca52ba08abdb3af", "html_url": "https://github.com/rust-lang/rust/commit/779b9133484864d0de0fdd20eca52ba08abdb3af"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "34325d486bd0beb826872d5948adcf6160d50b62", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/60affafdcdc5a2f2174502b08f696b1aaf89c33b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60affafdcdc5a2f2174502b08f696b1aaf89c33b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=60affafdcdc5a2f2174502b08f696b1aaf89c33b", "patch": "@@ -1539,13 +1539,50 @@ impure fn trans_tup(@block_ctxt cx, vec[ast.elt] elts,\n         auto t = typeck.expr_ty(e.expr);\n         auto src_res = trans_expr(r.bcx, e.expr);\n         auto dst_elt = r.bcx.build.GEP(tup_val, vec(C_int(0), C_int(i)));\n-        // FIXME: calculate copy init-ness in typestate.\n         r = copy_ty(src_res.bcx, true, dst_elt, src_res.val, t);\n         i += 1;\n     }\n     ret res(r.bcx, tup_val);\n }\n \n+impure fn trans_vec(@block_ctxt cx, vec[@ast.expr] args,\n+                    &ast.ann ann) -> result {\n+    auto ty = node_ann_type(cx.fcx.ccx, ann);\n+    auto unit_ty = ty;\n+    alt (ty.struct) {\n+        case (typeck.ty_vec(?t)) {\n+            unit_ty = t;\n+        }\n+        case (_) {\n+            cx.fcx.ccx.sess.bug(\"non-vec type in trans_vec\");\n+        }\n+    }\n+\n+    auto llunit_ty = type_of(cx.fcx.ccx, unit_ty);\n+    auto unit_sz = llvm.LLVMConstIntCast(llvm.LLVMSizeOf(llunit_ty),\n+                                         T_int(), False);\n+    auto data_sz = llvm.LLVMConstMul(C_int(_vec.len[@ast.expr](args) as int),\n+                                     unit_sz);\n+\n+    // FIXME: pass tydesc properly.\n+    auto sub = trans_upcall(cx, \"upcall_new_vec\", vec(data_sz, C_int(0)));\n+\n+    auto llty = type_of(cx.fcx.ccx, ty);\n+    auto vec_val = sub.bcx.build.IntToPtr(sub.val, llty);\n+    find_scope_cx(cx).cleanups += clean(bind drop_ty(_, vec_val, ty));\n+\n+    auto body = sub.bcx.build.GEP(vec_val, vec(C_int(0),\n+                                               C_int(abi.vec_elt_data)));\n+    let int i = 0;\n+    for (@ast.expr e in args) {\n+        auto src_res = trans_expr(sub.bcx, e);\n+        auto dst_elt = sub.bcx.build.GEP(body, vec(C_int(0), C_int(i)));\n+        sub = copy_ty(src_res.bcx, true, dst_elt, src_res.val, unit_ty);\n+        i += 1;\n+    }\n+    ret res(sub.bcx, vec_val);\n+}\n+\n impure fn trans_rec(@block_ctxt cx, vec[ast.field] fields,\n                     &ast.ann ann) -> result {\n     auto ty = node_ann_type(cx.fcx.ccx, ann);\n@@ -1633,6 +1670,10 @@ impure fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret trans_cast(cx, e, ann);\n         }\n \n+        case (ast.expr_vec(?args, ?ann)) {\n+            ret trans_vec(cx, args, ann);\n+        }\n+\n         case (ast.expr_tup(?args, ?ann)) {\n             ret trans_tup(cx, args, ann);\n         }"}]}