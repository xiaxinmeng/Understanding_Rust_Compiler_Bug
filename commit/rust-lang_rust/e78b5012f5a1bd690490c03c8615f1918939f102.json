{"sha": "e78b5012f5a1bd690490c03c8615f1918939f102", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3OGI1MDEyZjVhMWJkNjkwNDkwYzAzYzg2MTVmMTkxODkzOWYxMDI=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-02-17T20:40:23Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-02-17T20:48:22Z"}, "message": "Provide NonZero_c_* integers\n\nI'm pretty sure I am going want this for #73125 and it seems like an\nomission that would be in any case good to remedy.\n\nIt's a shame we don't have competent token pasting and case mangling\nfor use in macro_rules!.\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "3ee58b5db193b900fd89f01f23df07301c427d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ee58b5db193b900fd89f01f23df07301c427d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e78b5012f5a1bd690490c03c8615f1918939f102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e78b5012f5a1bd690490c03c8615f1918939f102", "html_url": "https://github.com/rust-lang/rust/commit/e78b5012f5a1bd690490c03c8615f1918939f102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e78b5012f5a1bd690490c03c8615f1918939f102/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6b9d9a1d6a73cd99b0a1f959d3afa77a44bb8bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b9d9a1d6a73cd99b0a1f959d3afa77a44bb8bd", "html_url": "https://github.com/rust-lang/rust/commit/d6b9d9a1d6a73cd99b0a1f959d3afa77a44bb8bd"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "bef13e71c55d8458387686d4db08a15a9ad913da", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e78b5012f5a1bd690490c03c8615f1918939f102/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78b5012f5a1bd690490c03c8615f1918939f102/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e78b5012f5a1bd690490c03c8615f1918939f102", "patch": "@@ -263,6 +263,7 @@\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]\n #![feature(extend_one)]\n+#![feature(extended_key_value_attributes)]\n #![feature(external_doc)]\n #![feature(fn_traits)]\n #![feature(format_args_nl)]"}, {"sha": "3dc97a0c458aff5db3c14d18d67474f3cb1bf154", "filename": "library/std/src/os/raw/mod.rs", "status": "modified", "additions": 47, "deletions": 18, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e78b5012f5a1bd690490c03c8615f1918939f102/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78b5012f5a1bd690490c03c8615f1918939f102/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs?ref=e78b5012f5a1bd690490c03c8615f1918939f102", "patch": "@@ -11,16 +11,41 @@\n #[cfg(test)]\n mod tests;\n \n-macro_rules! type_alias {\n-    { $Docfile:tt, $Alias:ident = $Real:ty; $( $Cfg:tt )* } => {\n+use core::num::*;\n+\n+macro_rules! type_alias_no_nz {\n+    {\n+      $Docfile:tt, $Alias:ident = $Real:ty;\n+      $( $Cfg:tt )*\n+    } => {\n         #[doc(include = $Docfile)]\n         $( $Cfg )*\n         #[stable(feature = \"raw_os\", since = \"1.1.0\")]\n         pub type $Alias = $Real;\n     }\n }\n \n-type_alias! { \"char.md\", c_char = u8;\n+// To verify that the NonZero types in this file's macro invocations correspond\n+//\n+//  perl -n < library/std/src/os/raw/mod.rs -e 'next unless m/type_alias\\!/; die \"$_ ?\" unless m/, (c_\\w+) = (\\w+), NonZero_(\\w+) = NonZero(\\w+)/; die \"$_ ?\" unless $3 eq $1 and $4 eq ucfirst $2'\n+//\n+// NB this does not check that the main c_* types are right.\n+\n+macro_rules! type_alias {\n+    {\n+      $Docfile:tt, $Alias:ident = $Real:ty, $NZAlias:ident = $NZReal:ty;\n+      $( $Cfg:tt )*\n+    } => {\n+        type_alias_no_nz! { $Docfile, $Alias = $Real; $( $Cfg )* }\n+\n+        #[doc = concat!(\"Type alias for `NonZero` version of [`\", stringify!($Alias), \"`]\")]\n+        #[unstable(feature = \"raw_os_nonzero\", issue = \"none\")]\n+        $( $Cfg )*\n+        pub type $NZAlias = $NZReal;\n+    }\n+}\n+\n+type_alias! { \"char.md\", c_char = u8, NonZero_c_char = NonZeroU8;\n #[cfg(any(\n     all(\n         target_os = \"linux\",\n@@ -62,7 +87,7 @@ type_alias! { \"char.md\", c_char = u8;\n     ),\n     all(target_os = \"fuchsia\", target_arch = \"aarch64\")\n ))]}\n-type_alias! { \"char.md\", c_char = i8;\n+type_alias! { \"char.md\", c_char = i8, NonZero_c_char = NonZeroI8;\n #[cfg(not(any(\n     all(\n         target_os = \"linux\",\n@@ -104,20 +129,24 @@ type_alias! { \"char.md\", c_char = i8;\n     ),\n     all(target_os = \"fuchsia\", target_arch = \"aarch64\")\n )))]}\n-type_alias! { \"schar.md\", c_schar = i8; }\n-type_alias! { \"uchar.md\", c_uchar = u8; }\n-type_alias! { \"short.md\", c_short = i16; }\n-type_alias! { \"ushort.md\", c_ushort = u16; }\n-type_alias! { \"int.md\", c_int = i32; }\n-type_alias! { \"uint.md\", c_uint = u32; }\n-type_alias! { \"long.md\", c_long = i32; #[cfg(any(target_pointer_width = \"32\", windows))] }\n-type_alias! { \"ulong.md\", c_ulong = u32; #[cfg(any(target_pointer_width = \"32\", windows))] }\n-type_alias! { \"long.md\", c_long = i64; #[cfg(all(target_pointer_width = \"64\", not(windows)))] }\n-type_alias! { \"ulong.md\", c_ulong = u64; #[cfg(all(target_pointer_width = \"64\", not(windows)))] }\n-type_alias! { \"longlong.md\", c_longlong = i64; }\n-type_alias! { \"ulonglong.md\", c_ulonglong = u64; }\n-type_alias! { \"float.md\", c_float = f32; }\n-type_alias! { \"double.md\", c_double = f64; }\n+type_alias! { \"schar.md\", c_schar = i8, NonZero_c_schar = NonZeroI8; }\n+type_alias! { \"uchar.md\", c_uchar = u8, NonZero_c_uchar = NonZeroU8; }\n+type_alias! { \"short.md\", c_short = i16, NonZero_c_short = NonZeroI16; }\n+type_alias! { \"ushort.md\", c_ushort = u16, NonZero_c_ushort = NonZeroU16; }\n+type_alias! { \"int.md\", c_int = i32, NonZero_c_int = NonZeroI32; }\n+type_alias! { \"uint.md\", c_uint = u32, NonZero_c_uint = NonZeroU32; }\n+type_alias! { \"long.md\", c_long = i32, NonZero_c_long = NonZeroI32;\n+#[cfg(any(target_pointer_width = \"32\", windows))] }\n+type_alias! { \"ulong.md\", c_ulong = u32, NonZero_c_ulong = NonZeroU32;\n+#[cfg(any(target_pointer_width = \"32\", windows))] }\n+type_alias! { \"long.md\", c_long = i64, NonZero_c_long = NonZeroI64;\n+#[cfg(all(target_pointer_width = \"64\", not(windows)))] }\n+type_alias! { \"ulong.md\", c_ulong = u64, NonZero_c_ulong = NonZeroU64;\n+#[cfg(all(target_pointer_width = \"64\", not(windows)))] }\n+type_alias! { \"longlong.md\", c_longlong = i64, NonZero_c_longlong = NonZeroI64; }\n+type_alias! { \"ulonglong.md\", c_ulonglong = u64, NonZero_c_ulonglong = NonZeroU64; }\n+type_alias_no_nz! { \"float.md\", c_float = f32; }\n+type_alias_no_nz! { \"double.md\", c_double = f64; }\n \n #[stable(feature = \"raw_os\", since = \"1.1.0\")]\n #[doc(no_inline)]"}]}