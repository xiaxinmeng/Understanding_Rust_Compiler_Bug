{"sha": "a7f58af9fe53bbdbc7a4ca9de049f9647c29d16f", "node_id": "C_kwDOAAsO6NoAKGE3ZjU4YWY5ZmU1M2JiZGJjN2E0Y2E5ZGUwNDlmOTY0N2MyOWQxNmY", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-10-12T00:46:52Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-10-12T00:46:52Z"}, "message": "unify `IsPattern` and `IsImport` enum", "tree": {"sha": "aacaf654af94760a5258c77279134df35ccd697c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aacaf654af94760a5258c77279134df35ccd697c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7f58af9fe53bbdbc7a4ca9de049f9647c29d16f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f58af9fe53bbdbc7a4ca9de049f9647c29d16f", "html_url": "https://github.com/rust-lang/rust/commit/a7f58af9fe53bbdbc7a4ca9de049f9647c29d16f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7f58af9fe53bbdbc7a4ca9de049f9647c29d16f/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0571b0af65dcc0dd97cce4b976887ab436e5780d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0571b0af65dcc0dd97cce4b976887ab436e5780d", "html_url": "https://github.com/rust-lang/rust/commit/0571b0af65dcc0dd97cce4b976887ab436e5780d"}], "stats": {"total": 68, "additions": 33, "deletions": 35}, "files": [{"sha": "d4d9e5c5607851be0ea43e5efe4f202af3766c25", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a7f58af9fe53bbdbc7a4ca9de049f9647c29d16f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f58af9fe53bbdbc7a4ca9de049f9647c29d16f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=a7f58af9fe53bbdbc7a4ca9de049f9647c29d16f", "patch": "@@ -139,8 +139,7 @@ impl<'a> Resolver<'a> {\n                     &candidates,\n                     if instead { Instead::Yes } else { Instead::No },\n                     found_use,\n-                    IsPattern::No,\n-                    IsImport::No,\n+                    DiagnosticMode::Normal,\n                     path,\n                 );\n                 err.emit();\n@@ -699,8 +698,7 @@ impl<'a> Resolver<'a> {\n                         &import_suggestions,\n                         Instead::No,\n                         FoundUse::Yes,\n-                        IsPattern::Yes,\n-                        IsImport::No,\n+                        DiagnosticMode::Pattern,\n                         vec![],\n                     );\n                 }\n@@ -1483,8 +1481,7 @@ impl<'a> Resolver<'a> {\n             &import_suggestions,\n             Instead::No,\n             FoundUse::Yes,\n-            IsPattern::No,\n-            IsImport::No,\n+            DiagnosticMode::Normal,\n             vec![],\n         );\n \n@@ -2445,18 +2442,13 @@ enum FoundUse {\n     No,\n }\n \n-/// Whether a binding is part of a pattern or an expression. Used for diagnostics.\n-enum IsPattern {\n+/// Whether a binding is part of a pattern or a use statement. Used for diagnostics.\n+enum DiagnosticMode {\n+    Normal,\n     /// The binding is part of a pattern\n-    Yes,\n-    /// The binding is part of an expression\n-    No,\n-}\n-\n-/// Whether a binding is part of a use statement. Used for diagnostics.\n-enum IsImport {\n-    Yes,\n-    No,\n+    Pattern,\n+    /// The binding is part of a use statement\n+    Import,\n }\n \n pub(crate) fn import_candidates(\n@@ -2475,8 +2467,7 @@ pub(crate) fn import_candidates(\n         candidates,\n         Instead::Yes,\n         FoundUse::Yes,\n-        IsPattern::No,\n-        IsImport::Yes,\n+        DiagnosticMode::Import,\n         vec![],\n     );\n }\n@@ -2493,8 +2484,7 @@ fn show_candidates(\n     candidates: &[ImportSuggestion],\n     instead: Instead,\n     found_use: FoundUse,\n-    is_pattern: IsPattern,\n-    is_import: IsImport,\n+    mode: DiagnosticMode,\n     path: Vec<Segment>,\n ) {\n     if candidates.is_empty() {\n@@ -2529,7 +2519,7 @@ fn show_candidates(\n         };\n \n         let instead = if let Instead::Yes = instead { \" instead\" } else { \"\" };\n-        let mut msg = if let IsPattern::Yes = is_pattern {\n+        let mut msg = if let DiagnosticMode::Pattern = mode {\n             format!(\n                 \"if you meant to match on {}{}{}, use the full path in the pattern\",\n                 kind, instead, name\n@@ -2542,19 +2532,24 @@ fn show_candidates(\n             err.note(note);\n         }\n \n-        if let (IsPattern::Yes, Some(span)) = (is_pattern, use_placement_span) {\n-            err.span_suggestions(\n-                span,\n-                &msg,\n-                accessible_path_strings.into_iter().map(|a| a.0),\n-                Applicability::MaybeIncorrect,\n-            );\n-        } else if let Some(span) = use_placement_span {\n+        if let Some(span) = use_placement_span {\n+            let add_use = match mode {\n+                DiagnosticMode::Pattern => {\n+                    err.span_suggestions(\n+                        span,\n+                        &msg,\n+                        accessible_path_strings.into_iter().map(|a| a.0),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    return;\n+                }\n+                DiagnosticMode::Import => \"\",\n+                DiagnosticMode::Normal => \"use \",\n+            };\n             for candidate in &mut accessible_path_strings {\n                 // produce an additional newline to separate the new use statement\n                 // from the directly following item.\n                 let additional_newline = if let FoundUse::Yes = found_use { \"\" } else { \"\\n\" };\n-                let add_use = if let IsImport::Yes = is_import { \"\" } else { \"use \" };\n                 candidate.0 = format!(\"{}{};\\n{}\", add_use, &candidate.0, additional_newline);\n             }\n \n@@ -2585,19 +2580,22 @@ fn show_candidates(\n \n             err.note(&msg);\n         }\n-    } else if matches!(is_import, IsImport::No) {\n+    } else if !matches!(mode, DiagnosticMode::Import) {\n         assert!(!inaccessible_path_strings.is_empty());\n \n-        let prefix =\n-            if let IsPattern::Yes = is_pattern { \"you might have meant to match on \" } else { \"\" };\n+        let prefix = if let DiagnosticMode::Pattern = mode {\n+            \"you might have meant to match on \"\n+        } else {\n+            \"\"\n+        };\n         if inaccessible_path_strings.len() == 1 {\n             let (name, descr, def_id, note) = &inaccessible_path_strings[0];\n             let msg = format!(\n                 \"{}{} `{}`{} exists but is inaccessible\",\n                 prefix,\n                 descr,\n                 name,\n-                if let IsPattern::Yes = is_pattern { \", which\" } else { \"\" }\n+                if let DiagnosticMode::Pattern = mode { \", which\" } else { \"\" }\n             );\n \n             if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {"}]}