{"sha": "695640816a48098efaddc83d1abaa9edcc4fd109", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NTY0MDgxNmE0ODA5OGVmYWRkYzgzZDFhYmFhOWVkY2M0ZmQxMDk=", "commit": {"author": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-12-02T17:44:23Z"}, "committer": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-12-06T10:50:02Z"}, "message": "bless polonius output of test ui/nll/outlives-suggestion-simple.rs\n\nThe polonius output has one more error which should be displayed\nin the regular case, but error reporting in the regular case stopped\nat the first error.\n\nAdmittedly it would be nice to combine suggestions for the same source\nlifetime so that `'a: 'b` and `'a: 'c` are not bothsuggested, but instead\na single `'a: 'b + 'c` is.", "tree": {"sha": "0ba28985aeb937e599437f0427df6d4bf9ff3561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ba28985aeb937e599437f0427df6d4bf9ff3561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/695640816a48098efaddc83d1abaa9edcc4fd109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/695640816a48098efaddc83d1abaa9edcc4fd109", "html_url": "https://github.com/rust-lang/rust/commit/695640816a48098efaddc83d1abaa9edcc4fd109", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/695640816a48098efaddc83d1abaa9edcc4fd109/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67b04d5f641efe6bc0dd989d0a2747c210c134eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/67b04d5f641efe6bc0dd989d0a2747c210c134eb", "html_url": "https://github.com/rust-lang/rust/commit/67b04d5f641efe6bc0dd989d0a2747c210c134eb"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "815744618f62c69e2b51b8157c0bc405b0f74621", "filename": "src/test/ui/nll/outlives-suggestion-simple.polonius.stderr", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/695640816a48098efaddc83d1abaa9edcc4fd109/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695640816a48098efaddc83d1abaa9edcc4fd109/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.polonius.stderr?ref=695640816a48098efaddc83d1abaa9edcc4fd109", "patch": "@@ -0,0 +1,121 @@\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:6:5\n+   |\n+LL | fn foo1<'a, 'b>(x: &'a usize) -> &'b usize {\n+   |         --  -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+LL |     x\n+   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:10:5\n+   |\n+LL | fn foo2<'a>(x: &'a usize) -> &'static usize {\n+   |         -- lifetime `'a` defined here\n+LL |     x\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:14:5\n+   |\n+LL | fn foo3<'a, 'b>(x: &'a usize, y: &'b usize) -> (&'b usize, &'a usize) {\n+   |         --  -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+LL |     (x, y)\n+   |     ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:14:5\n+   |\n+LL | fn foo3<'a, 'b>(x: &'a usize, y: &'b usize) -> (&'b usize, &'a usize) {\n+   |         --  -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+LL |     (x, y)\n+   |     ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+help: `'a` and `'b` must be the same: replace one with the other\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:22:5\n+   |\n+LL | fn foo4<'a, 'b, 'c>(x: &'a usize) -> (&'b usize, &'c usize) {\n+   |         --  -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+...\n+LL |     (x, x)\n+   |     ^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:22:5\n+   |\n+LL | fn foo4<'a, 'b, 'c>(x: &'a usize) -> (&'b usize, &'c usize) {\n+   |         --      -- lifetime `'c` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+...\n+LL |     (x, x)\n+   |     ^^^^^^ returning this value requires that `'a` must outlive `'c`\n+   |\n+   = help: consider adding the following bound: `'a: 'c`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:31:9\n+   |\n+LL |     pub fn foo<'a>(x: &'a usize) -> Self {\n+   |                -- lifetime `'a` defined here\n+LL |         Foo { x }\n+   |         ^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:41:9\n+   |\n+LL | impl<'a> Bar<'a> {\n+   |      -- lifetime `'a` defined here\n+LL |     pub fn get<'b>(&self) -> &'b usize {\n+   |                -- lifetime `'b` defined here\n+LL |         self.x\n+   |         ^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:52:9\n+   |\n+LL | impl<'a> Baz<'a> {\n+   |      -- lifetime `'a` defined here\n+LL |     fn get<'b>(&'b self) -> &'a i32 {\n+   |            -- lifetime `'b` defined here\n+LL |         self.x\n+   |         ^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/outlives-suggestion-simple.rs:73:9\n+   |\n+LL |     fn get_bar(&self) -> Bar2 {\n+   |                -----\n+   |                |\n+   |                `self` is declared here, outside of the function body\n+   |                `self` is a reference that is only valid in the function body\n+LL |         Bar2::new(&self)\n+   |         ^^^^^^^^^^^^^^^^ `self` escapes the function body here\n+\n+error: aborting due to 10 previous errors\n+"}]}