{"sha": "f51d2d07ec5752eb0bbd17fc2172354b434040b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MWQyZDA3ZWM1NzUyZWIwYmJkMTdmYzIxNzIzNTRiNDM0MDQwYjE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-16T21:34:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-16T21:34:46Z"}, "message": "Rollup merge of #71221 - cuviper:rustdoc_or_patterns, r=Mark-Simulacrum\n\nDogfood or_patterns in rustdoc\n\nWe can start using `or_patterns` in `rustdoc` as a step toward stabilization.\n\ncc #54883 @Centril", "tree": {"sha": "e4330f6772caec6661b8229b5f88eca7b988138b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4330f6772caec6661b8229b5f88eca7b988138b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f51d2d07ec5752eb0bbd17fc2172354b434040b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemM92CRBK7hj4Ov3rIwAAdHIIAJugJ6U/c7YEIWDqLVKllIq8\nLjernX65eFI1zIcQc33vPZPa1eiLxtBCtVY4VS6dbqvhKfmLGkAPq6/4Z/JYZ0gO\nS+jrXa45y6ELR+Xt9eplO1TI6tKCtkzDTbpgkBFcuAhAcSGad+aoGB+33D1rRhyA\n+e1Lpw+X5fhAesi2hnuD0ikNQuf+Wrj1b0+cvMF3YOFyOHJSqrd3tGMPsjS1gNRB\nZXZa/mUi5tngSPAtvsrRG9b0pjGFyI44wWPDuwjz/XRwCNXZAtPHssYXM+b6PoSt\nWKR/JFdGEPL66c/ePQZaoH7JPbKZNc5TkfsmI8VOBOkxYl/XOoybSx4jZ1KTSyA=\n=1rmO\n-----END PGP SIGNATURE-----\n", "payload": "tree e4330f6772caec6661b8229b5f88eca7b988138b\nparent 53f3130bdb5bd49982b5112cece9f96ad705fbad\nparent 554847c513cecbc66ab20d253f8f7ce077b75256\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587072886 +0200\ncommitter GitHub <noreply@github.com> 1587072886 +0200\n\nRollup merge of #71221 - cuviper:rustdoc_or_patterns, r=Mark-Simulacrum\n\nDogfood or_patterns in rustdoc\n\nWe can start using `or_patterns` in `rustdoc` as a step toward stabilization.\n\ncc #54883 @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f51d2d07ec5752eb0bbd17fc2172354b434040b1", "html_url": "https://github.com/rust-lang/rust/commit/f51d2d07ec5752eb0bbd17fc2172354b434040b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f51d2d07ec5752eb0bbd17fc2172354b434040b1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53f3130bdb5bd49982b5112cece9f96ad705fbad", "url": "https://api.github.com/repos/rust-lang/rust/commits/53f3130bdb5bd49982b5112cece9f96ad705fbad", "html_url": "https://github.com/rust-lang/rust/commit/53f3130bdb5bd49982b5112cece9f96ad705fbad"}, {"sha": "554847c513cecbc66ab20d253f8f7ce077b75256", "url": "https://api.github.com/repos/rust-lang/rust/commits/554847c513cecbc66ab20d253f8f7ce077b75256", "html_url": "https://github.com/rust-lang/rust/commit/554847c513cecbc66ab20d253f8f7ce077b75256"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "ad9d54c345cfa0f32cb0a1de967c5c9b07b8c8ed", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f51d2d07ec5752eb0bbd17fc2172354b434040b1", "patch": "@@ -377,9 +377,11 @@ impl Clean<Lifetime> for hir::Lifetime {\n     fn clean(&self, cx: &DocContext<'_>) -> Lifetime {\n         let def = cx.tcx.named_region(self.hir_id);\n         match def {\n-            Some(rl::Region::EarlyBound(_, node_id, _))\n-            | Some(rl::Region::LateBound(_, node_id, _))\n-            | Some(rl::Region::Free(_, node_id)) => {\n+            Some(\n+                rl::Region::EarlyBound(_, node_id, _)\n+                | rl::Region::LateBound(_, node_id, _)\n+                | rl::Region::Free(_, node_id),\n+            ) => {\n                 if let Some(lt) = cx.lt_substs.borrow().get(&node_id).cloned() {\n                     return lt;\n                 }"}, {"sha": "24817170e36ee0768ba387c5bd2d15607906ca7d", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=f51d2d07ec5752eb0bbd17fc2172354b434040b1", "patch": "@@ -586,7 +586,7 @@ pub fn resolve_type(cx: &DocContext<'_>, path: Path, id: hir::HirId) -> Type {\n         Res::Def(DefKind::TyParam, _) if path.segments.len() == 1 => {\n             return Generic(format!(\"{:#}\", path.print()));\n         }\n-        Res::SelfTy(..) | Res::Def(DefKind::TyParam, _) | Res::Def(DefKind::AssocTy, _) => true,\n+        Res::SelfTy(..) | Res::Def(DefKind::TyParam | DefKind::AssocTy, _) => true,\n         _ => false,\n     };\n     let did = register_res(&*cx, path.res);"}, {"sha": "c4bc73770a76b3981f2a8e0ed7225d8a1ccdad45", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=f51d2d07ec5752eb0bbd17fc2172354b434040b1", "patch": "@@ -235,9 +235,7 @@ impl<'a> Classifier<'a> {\n             // If this '&' or '*' token is followed by a non-whitespace token, assume that it's the\n             // reference or dereference operator or a reference or pointer type, instead of the\n             // bit-and or multiplication operator.\n-            token::BinOp(token::And) | token::BinOp(token::Star)\n-                if self.peek()? != &token::Whitespace =>\n-            {\n+            token::BinOp(token::And | token::Star) if self.peek()? != &token::Whitespace => {\n                 Class::RefKeyWord\n             }\n \n@@ -275,9 +273,7 @@ impl<'a> Classifier<'a> {\n             | token::ModSep\n             | token::LArrow\n             | token::OpenDelim(_)\n-            | token::CloseDelim(token::Brace)\n-            | token::CloseDelim(token::Paren)\n-            | token::CloseDelim(token::NoDelim) => Class::None,\n+            | token::CloseDelim(token::Brace | token::Paren | token::NoDelim) => Class::None,\n \n             token::Question => Class::QuestionMark,\n "}, {"sha": "941e3a5fa985bdaaf1abd1a6806b41f379f0ca94", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=f51d2d07ec5752eb0bbd17fc2172354b434040b1", "patch": "@@ -850,7 +850,7 @@ pub fn plain_summary_line(md: &str) -> String {\n                 Event::Start(Tag::Heading(_)) => (None, 1),\n                 Event::Code(code) => (Some(format!(\"`{}`\", code)), 0),\n                 Event::Text(ref s) if self.is_in > 0 => (Some(s.as_ref().to_owned()), 0),\n-                Event::End(Tag::Paragraph) | Event::End(Tag::Heading(_)) => (None, -1),\n+                Event::End(Tag::Paragraph | Tag::Heading(_)) => (None, -1),\n                 _ => (None, 0),\n             };\n             if is_in > 0 || (is_in < 0 && self.is_in > 0) {\n@@ -909,7 +909,7 @@ pub fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n                 debug!(\"found link: {}\", dest);\n                 links.push(match dest {\n                     CowStr::Borrowed(s) => (s.to_owned(), locate(s)),\n-                    s @ CowStr::Boxed(..) | s @ CowStr::Inlined(..) => (s.into_string(), None),\n+                    s @ (CowStr::Boxed(..) | CowStr::Inlined(..)) => (s.into_string(), None),\n                 });\n             }\n         }"}, {"sha": "f3c5c12810bf2b2727458ce84b7df16abfcdaa58", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=f51d2d07ec5752eb0bbd17fc2172354b434040b1", "patch": "@@ -294,10 +294,13 @@ impl DocFolder for Cache {\n                             // for where the type was defined. On the other\n                             // hand, `paths` always has the right\n                             // information if present.\n-                            Some(&(ref fqp, ItemType::Trait))\n-                            | Some(&(ref fqp, ItemType::Struct))\n-                            | Some(&(ref fqp, ItemType::Union))\n-                            | Some(&(ref fqp, ItemType::Enum)) => Some(&fqp[..fqp.len() - 1]),\n+                            Some(&(\n+                                ref fqp,\n+                                ItemType::Trait\n+                                | ItemType::Struct\n+                                | ItemType::Union\n+                                | ItemType::Enum,\n+                            )) => Some(&fqp[..fqp.len() - 1]),\n                             Some(..) => Some(&*self.stack),\n                             None => None,\n                         };"}, {"sha": "5fb7b7bf959cf2cf33041e93fa9753e8192cce59", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f51d2d07ec5752eb0bbd17fc2172354b434040b1", "patch": "@@ -7,6 +7,7 @@\n #![feature(box_syntax)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![feature(test)]\n #![feature(vec_remove_item)]\n #![feature(ptr_offset_from)]"}, {"sha": "8bfd42ac56a8e5152d15f514395487846501439c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f51d2d07ec5752eb0bbd17fc2172354b434040b1", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 // In case this is a trait item, skip the\n                 // early return and try looking for the trait.\n                 let value = match res {\n-                    Res::Def(DefKind::AssocFn, _) | Res::Def(DefKind::AssocConst, _) => true,\n+                    Res::Def(DefKind::AssocFn | DefKind::AssocConst, _) => true,\n                     Res::Def(DefKind::AssocTy, _) => false,\n                     Res::Def(DefKind::Variant, _) => {\n                         return handle_variant(cx, res, extra_fragment);\n@@ -226,10 +226,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             }\n             let ty_res = ty_res.map_id(|_| panic!(\"unexpected node_id\"));\n             match ty_res {\n-                Res::Def(DefKind::Struct, did)\n-                | Res::Def(DefKind::Union, did)\n-                | Res::Def(DefKind::Enum, did)\n-                | Res::Def(DefKind::TyAlias, did) => {\n+                Res::Def(\n+                    DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::TyAlias,\n+                    did,\n+                ) => {\n                     let item = cx\n                         .tcx\n                         .inherent_impls(did)\n@@ -814,7 +814,7 @@ fn ambiguity_error(\n \n                     for (res, ns) in candidates {\n                         let (action, mut suggestion) = match res {\n-                            Res::Def(DefKind::AssocFn, _) | Res::Def(DefKind::Fn, _) => {\n+                            Res::Def(DefKind::AssocFn | DefKind::Fn, _) => {\n                                 (\"add parentheses\", format!(\"{}()\", path_str))\n                             }\n                             Res::Def(DefKind::Macro(..), _) => {"}, {"sha": "b7a3b13cf04919f4575ebb82e760220174036622", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51d2d07ec5752eb0bbd17fc2172354b434040b1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=f51d2d07ec5752eb0bbd17fc2172354b434040b1", "patch": "@@ -309,14 +309,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             let attrs = clean::inline::load_attrs(self.cx, res_did);\n             let self_is_hidden = attrs.lists(sym::doc).has_word(sym::hidden);\n             match res {\n-                Res::Def(DefKind::Trait, did)\n-                | Res::Def(DefKind::Struct, did)\n-                | Res::Def(DefKind::Union, did)\n-                | Res::Def(DefKind::Enum, did)\n-                | Res::Def(DefKind::ForeignTy, did)\n-                | Res::Def(DefKind::TyAlias, did)\n-                    if !self_is_hidden =>\n-                {\n+                Res::Def(\n+                    DefKind::Trait\n+                    | DefKind::Struct\n+                    | DefKind::Union\n+                    | DefKind::Enum\n+                    | DefKind::ForeignTy\n+                    | DefKind::TyAlias,\n+                    did,\n+                ) if !self_is_hidden => {\n                     self.cx.renderinfo.get_mut().access_levels.map.insert(did, AccessLevel::Public);\n                 }\n                 Res::Def(DefKind::Mod, did) => {"}]}