{"sha": "09739c22db948a7a2ed13e8f466cb22adb1d7818", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NzM5YzIyZGI5NDhhN2EyZWQxM2U4ZjQ2NmNiMjJhZGIxZDc4MTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-17T01:31:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-17T01:31:15Z"}, "message": "Auto merge of #72286 - Dylan-DPC:rollup-n3rk6df, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #72233 (Fix {:#?} representation of proc_macro::Literal)\n - #72277 (emphasize that ManuallyDrop is safe-to-access and unsafe-to-drop)\n - #72281 (Fix whitespace in `?Sized` structured suggestion)\n - #72282 (Fix issue number typo in note)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "dbb130c9403855e3f8e224690f1f9d1960c57be9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbb130c9403855e3f8e224690f1f9d1960c57be9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09739c22db948a7a2ed13e8f466cb22adb1d7818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09739c22db948a7a2ed13e8f466cb22adb1d7818", "html_url": "https://github.com/rust-lang/rust/commit/09739c22db948a7a2ed13e8f466cb22adb1d7818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09739c22db948a7a2ed13e8f466cb22adb1d7818/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ec4b065243f38f711a55563bff7d0c66eea1b4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec4b065243f38f711a55563bff7d0c66eea1b4a", "html_url": "https://github.com/rust-lang/rust/commit/0ec4b065243f38f711a55563bff7d0c66eea1b4a"}, {"sha": "1d09a7b693323a3cd4d7d32f6102f58854830f72", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d09a7b693323a3cd4d7d32f6102f58854830f72", "html_url": "https://github.com/rust-lang/rust/commit/1d09a7b693323a3cd4d7d32f6102f58854830f72"}], "stats": {"total": 266, "additions": 251, "deletions": 15}, "files": [{"sha": "18767c482c77ea47cd863685db33ee1110ffe1dc", "filename": "src/libcore/mem/manually_drop.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibcore%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibcore%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmanually_drop.rs?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -2,7 +2,6 @@ use crate::ops::{Deref, DerefMut};\n use crate::ptr;\n \n /// A wrapper to inhibit compiler from automatically calling `T`\u2019s destructor.\n-///\n /// This wrapper is 0-cost.\n ///\n /// `ManuallyDrop<T>` is subject to the same layout optimizations as `T`.\n@@ -11,6 +10,11 @@ use crate::ptr;\n /// with [`mem::zeroed`] is undefined behavior.\n /// If you need to handle uninitialized data, use [`MaybeUninit<T>`] instead.\n ///\n+/// Note that accessing the value inside a `ManuallyDrop<T>` is safe.\n+/// This means that a `ManuallyDrop<T>` whose content has been dropped must not\n+/// be exposed through a public safe API.\n+/// Correspondingly, `ManuallyDrop::drop` is unsafe.\n+///\n /// # Examples\n ///\n /// This wrapper can be used to enforce a particular drop order on fields, regardless"}, {"sha": "283aa25b0ea13e1603903972505699c560f4d89a", "filename": "src/libproc_macro/bridge/client.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -202,10 +202,16 @@ impl Clone for Literal {\n     }\n }\n \n-// FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n impl fmt::Debug for Literal {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.debug())\n+        f.debug_struct(\"Literal\")\n+            // format the kind without quotes, as in `kind: Float`\n+            .field(\"kind\", &format_args!(\"{}\", &self.debug_kind()))\n+            .field(\"symbol\", &self.symbol())\n+            // format `Some(\"...\")` on one line even in {:#?} mode\n+            .field(\"suffix\", &format_args!(\"{:?}\", &self.suffix()))\n+            .field(\"span\", &self.span())\n+            .finish()\n     }\n }\n "}, {"sha": "bf0d8fcee5b8f4cd31b9fe908f0316874c2a7792", "filename": "src/libproc_macro/bridge/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fmod.rs?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -103,8 +103,9 @@ macro_rules! with_api {\n             Literal {\n                 fn drop($self: $S::Literal);\n                 fn clone($self: &$S::Literal) -> $S::Literal;\n-                // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n-                fn debug($self: &$S::Literal) -> String;\n+                fn debug_kind($self: &$S::Literal) -> String;\n+                fn symbol($self: &$S::Literal) -> String;\n+                fn suffix($self: &$S::Literal) -> Option<String>;\n                 fn integer(n: &str) -> $S::Literal;\n                 fn typed_integer(n: &str, kind: &str) -> $S::Literal;\n                 fn float(n: &str) -> $S::Literal;"}, {"sha": "f11401b5a0c7c2afc2558d4d9c833de4022fbd77", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -1141,7 +1141,6 @@ impl fmt::Display for Literal {\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Literal {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n         self.0.fmt(f)\n     }\n }"}, {"sha": "b9693c2c862785dc52138c470950b728db073218", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -507,9 +507,14 @@ impl server::Ident for Rustc<'_> {\n }\n \n impl server::Literal for Rustc<'_> {\n-    // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n-    fn debug(&mut self, literal: &Self::Literal) -> String {\n-        format!(\"{:?}\", literal)\n+    fn debug_kind(&mut self, literal: &Self::Literal) -> String {\n+        format!(\"{:?}\", literal.lit.kind)\n+    }\n+    fn symbol(&mut self, literal: &Self::Literal) -> String {\n+        literal.lit.symbol.to_string()\n+    }\n+    fn suffix(&mut self, literal: &Self::Literal) -> Option<String> {\n+        literal.lit.suffix.as_ref().map(Symbol::to_string)\n     }\n     fn integer(&mut self, n: &str) -> Self::Literal {\n         self.lit(token::Integer, Symbol::intern(n), None)"}, {"sha": "0d53df3bf4b466ecba0500bc69560e8a7e498df8", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -1655,7 +1655,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     {\n                         let (span, separator) = match param.bounds {\n                             [] => (span.shrink_to_hi(), \":\"),\n-                            [.., bound] => (bound.span().shrink_to_hi(), \" + \"),\n+                            [.., bound] => (bound.span().shrink_to_hi(), \" +\"),\n                         };\n                         err.span_suggestion_verbose(\n                             span,"}, {"sha": "c098e44fa065c449704fd0a63bb7fef6f6213d39", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -1685,7 +1685,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 if suggest_const_in_array_repeat_expressions {\n                     err.note(\n                         \"this array initializer can be evaluated at compile-time, see issue \\\n-                         #48147 <https://github.com/rust-lang/rust/issues/49147> \\\n+                         #49147 <https://github.com/rust-lang/rust/issues/49147> \\\n                          for more information\",\n                     );\n                     if tcx.sess.opts.unstable_features.is_nightly_build() {"}, {"sha": "6772178068289ace157d8d8e4b1a64040b485541", "filename": "src/test/ui/feature-gates/feature-gate-const_in_array_repeat_expressions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -7,7 +7,7 @@ LL |     let arr: [Option<String>; 2] = [None::<String>; 2];\n    = help: the following implementations were found:\n              <std::option::Option<T> as std::marker::Copy>\n    = note: the `Copy` trait is required because the repeated element will be copied\n-   = note: this array initializer can be evaluated at compile-time, see issue #48147 <https://github.com/rust-lang/rust/issues/49147> for more information\n+   = note: this array initializer can be evaluated at compile-time, see issue #49147 <https://github.com/rust-lang/rust/issues/49147> for more information\n    = help: add `#![feature(const_in_array_repeat_expressions)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `std::option::Option<std::string::String>: std::marker::Copy` is not satisfied"}, {"sha": "bc0c533032413f3f3d40ea3821c01ed8b5ebb566", "filename": "src/test/ui/lint/redundant-semicolon/redundant-semi-proc-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -1,4 +1,4 @@\n-TokenStream [Ident { ident: \"fn\", span: #0 bytes(198..200) }, Ident { ident: \"span_preservation\", span: #0 bytes(201..218) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(218..220) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(228..231) }, Ident { ident: \"tst\", span: #0 bytes(232..235) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(236..237) }, Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(238), hi: BytePos(241), ctxt: #0 } }, Punct { ch: ';', spacing: Joint, span: #0 bytes(241..242) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(242..243) }, Ident { ident: \"match\", span: #0 bytes(289..294) }, Ident { ident: \"tst\", span: #0 bytes(295..298) }, Group { delimiter: Brace, stream: TokenStream [Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(483), hi: BytePos(486), ctxt: #0 } }, Punct { ch: '=', spacing: Joint, span: #0 bytes(487..489) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(487..489) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(490..492) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(492..493) }, Ident { ident: \"_\", span: #0 bytes(502..503) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(504..506) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(504..506) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(507..509) }], span: #0 bytes(299..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(516..517) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(517..518) }], span: #0 bytes(222..562) }]\n+TokenStream [Ident { ident: \"fn\", span: #0 bytes(198..200) }, Ident { ident: \"span_preservation\", span: #0 bytes(201..218) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(218..220) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(228..231) }, Ident { ident: \"tst\", span: #0 bytes(232..235) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(236..237) }, Literal { kind: Integer, symbol: \"123\", suffix: None, span: #0 bytes(238..241) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(241..242) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(242..243) }, Ident { ident: \"match\", span: #0 bytes(289..294) }, Ident { ident: \"tst\", span: #0 bytes(295..298) }, Group { delimiter: Brace, stream: TokenStream [Literal { kind: Integer, symbol: \"123\", suffix: None, span: #0 bytes(483..486) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(487..489) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(487..489) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(490..492) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(492..493) }, Ident { ident: \"_\", span: #0 bytes(502..503) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(504..506) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(504..506) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(507..509) }], span: #0 bytes(299..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(516..517) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(517..518) }], span: #0 bytes(222..562) }]\n error: unnecessary trailing semicolon\n   --> $DIR/redundant-semi-proc-macro.rs:9:19\n    |"}, {"sha": "56ad0612f74bd8c83b4d54b29fff6d12291e8295", "filename": "src/test/ui/proc-macro/debug/auxiliary/macro-dump-debug.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fauxiliary%2Fmacro-dump-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fauxiliary%2Fmacro-dump-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fauxiliary%2Fmacro-dump-debug.rs?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -0,0 +1,15 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![crate_name = \"macro_dump_debug\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn dump_debug(tokens: TokenStream) -> TokenStream {\n+    eprintln!(\"{:?}\", tokens);\n+    eprintln!(\"{:#?}\", tokens);\n+    TokenStream::new()\n+}"}, {"sha": "0ed36b690f49b8620ca1adc4fb98373bfdb41d5e", "filename": "src/test/ui/proc-macro/debug/dump-debug.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.rs?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -0,0 +1,40 @@\n+// run-pass\n+// aux-build:macro-dump-debug.rs\n+\n+extern crate macro_dump_debug;\n+use macro_dump_debug::dump_debug;\n+\n+dump_debug! {\n+    ident   // ident\n+    r#ident // raw ident\n+    ,       // alone punct\n+    ==>     // joint punct\n+    ()      // empty group\n+    [_]     // nonempty group\n+\n+    // unsuffixed literals\n+    0\n+    1.0\n+    \"S\"\n+    b\"B\"\n+    r\"R\"\n+    r##\"R\"##\n+    br\"BR\"\n+    br##\"BR\"##\n+    'C'\n+    b'B'\n+\n+    // suffixed literals\n+    0q\n+    1.0q\n+    \"S\"q\n+    b\"B\"q\n+    r\"R\"q\n+    r##\"R\"##q\n+    br\"BR\"q\n+    br##\"BR\"##q\n+    'C'q\n+    b'B'q\n+}\n+\n+fn main() {}"}, {"sha": "0aedefd4e6091f4b5d03d872e88919141049e076", "filename": "src/test/ui/proc-macro/debug/dump-debug.stderr", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.stderr?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -0,0 +1,166 @@\n+TokenStream [Ident { ident: \"ident\", span: #0 bytes(130..135) }, Ident { ident: \"r#ident\", span: #0 bytes(151..158) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(176..177) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(203..205) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(203..205) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(205..206) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(230..232) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: \"_\", span: #0 bytes(258..259) }], span: #0 bytes(257..260) }, Literal { kind: Integer, symbol: \"0\", suffix: None, span: #0 bytes(315..316) }, Literal { kind: Float, symbol: \"1.0\", suffix: None, span: #0 bytes(321..324) }, Literal { kind: Str, symbol: \"S\", suffix: None, span: #0 bytes(329..332) }, Literal { kind: ByteStr, symbol: \"B\", suffix: None, span: #0 bytes(337..341) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: None, span: #0 bytes(346..350) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: None, span: #0 bytes(355..363) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: None, span: #0 bytes(368..374) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: None, span: #0 bytes(379..389) }, Literal { kind: Char, symbol: \"C\", suffix: None, span: #0 bytes(394..397) }, Literal { kind: Byte, symbol: \"B\", suffix: None, span: #0 bytes(402..406) }, Literal { kind: Integer, symbol: \"0\", suffix: Some(\"q\"), span: #0 bytes(437..439) }, Literal { kind: Float, symbol: \"1.0\", suffix: Some(\"q\"), span: #0 bytes(444..448) }, Literal { kind: Str, symbol: \"S\", suffix: Some(\"q\"), span: #0 bytes(453..457) }, Literal { kind: ByteStr, symbol: \"B\", suffix: Some(\"q\"), span: #0 bytes(462..467) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: Some(\"q\"), span: #0 bytes(472..477) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: Some(\"q\"), span: #0 bytes(482..491) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: Some(\"q\"), span: #0 bytes(496..503) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: Some(\"q\"), span: #0 bytes(508..519) }, Literal { kind: Char, symbol: \"C\", suffix: Some(\"q\"), span: #0 bytes(524..528) }, Literal { kind: Byte, symbol: \"B\", suffix: Some(\"q\"), span: #0 bytes(533..538) }]\n+TokenStream [\n+    Ident {\n+        ident: \"ident\",\n+        span: #0 bytes(130..135),\n+    },\n+    Ident {\n+        ident: \"r#ident\",\n+        span: #0 bytes(151..158),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: #0 bytes(176..177),\n+    },\n+    Punct {\n+        ch: '=',\n+        spacing: Joint,\n+        span: #0 bytes(203..205),\n+    },\n+    Punct {\n+        ch: '=',\n+        spacing: Joint,\n+        span: #0 bytes(203..205),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: #0 bytes(205..206),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: #0 bytes(230..232),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"_\",\n+                span: #0 bytes(258..259),\n+            },\n+        ],\n+        span: #0 bytes(257..260),\n+    },\n+    Literal {\n+        kind: Integer,\n+        symbol: \"0\",\n+        suffix: None,\n+        span: #0 bytes(315..316),\n+    },\n+    Literal {\n+        kind: Float,\n+        symbol: \"1.0\",\n+        suffix: None,\n+        span: #0 bytes(321..324),\n+    },\n+    Literal {\n+        kind: Str,\n+        symbol: \"S\",\n+        suffix: None,\n+        span: #0 bytes(329..332),\n+    },\n+    Literal {\n+        kind: ByteStr,\n+        symbol: \"B\",\n+        suffix: None,\n+        span: #0 bytes(337..341),\n+    },\n+    Literal {\n+        kind: StrRaw(0),\n+        symbol: \"R\",\n+        suffix: None,\n+        span: #0 bytes(346..350),\n+    },\n+    Literal {\n+        kind: StrRaw(2),\n+        symbol: \"R\",\n+        suffix: None,\n+        span: #0 bytes(355..363),\n+    },\n+    Literal {\n+        kind: ByteStrRaw(0),\n+        symbol: \"BR\",\n+        suffix: None,\n+        span: #0 bytes(368..374),\n+    },\n+    Literal {\n+        kind: ByteStrRaw(2),\n+        symbol: \"BR\",\n+        suffix: None,\n+        span: #0 bytes(379..389),\n+    },\n+    Literal {\n+        kind: Char,\n+        symbol: \"C\",\n+        suffix: None,\n+        span: #0 bytes(394..397),\n+    },\n+    Literal {\n+        kind: Byte,\n+        symbol: \"B\",\n+        suffix: None,\n+        span: #0 bytes(402..406),\n+    },\n+    Literal {\n+        kind: Integer,\n+        symbol: \"0\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(437..439),\n+    },\n+    Literal {\n+        kind: Float,\n+        symbol: \"1.0\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(444..448),\n+    },\n+    Literal {\n+        kind: Str,\n+        symbol: \"S\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(453..457),\n+    },\n+    Literal {\n+        kind: ByteStr,\n+        symbol: \"B\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(462..467),\n+    },\n+    Literal {\n+        kind: StrRaw(0),\n+        symbol: \"R\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(472..477),\n+    },\n+    Literal {\n+        kind: StrRaw(2),\n+        symbol: \"R\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(482..491),\n+    },\n+    Literal {\n+        kind: ByteStrRaw(0),\n+        symbol: \"BR\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(496..503),\n+    },\n+    Literal {\n+        kind: ByteStrRaw(2),\n+        symbol: \"BR\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(508..519),\n+    },\n+    Literal {\n+        kind: Char,\n+        symbol: \"C\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(524..528),\n+    },\n+    Literal {\n+        kind: Byte,\n+        symbol: \"B\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(533..538),\n+    },\n+]"}, {"sha": "828e8bc9f4aa17fc6393a963b77a33a734516ec6", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09739c22db948a7a2ed13e8f466cb22adb1d7818/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=09739c22db948a7a2ed13e8f466cb22adb1d7818", "patch": "@@ -31,8 +31,8 @@ LL | fn f4<X: T>(x: &X) {\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n-LL | fn f4<X: T +  ?Sized>(x: &X) {\n-   |            ^^^^^^^^^\n+LL | fn f4<X: T + ?Sized>(x: &X) {\n+   |            ^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:33:8"}]}