{"sha": "37e918526a7107bc3c8de48f9a535b0100da40f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZTkxODUyNmE3MTA3YmMzYzhkZTQ4ZjlhNTM1YjAxMDBkYTQwZjU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-01-10T11:26:35Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: split off most of ty::print::PrintCx's fields into a separate struct.", "tree": {"sha": "579d87126d04c47e8e00cadca7286204c937456a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/579d87126d04c47e8e00cadca7286204c937456a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37e918526a7107bc3c8de48f9a535b0100da40f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37e918526a7107bc3c8de48f9a535b0100da40f5", "html_url": "https://github.com/rust-lang/rust/commit/37e918526a7107bc3c8de48f9a535b0100da40f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37e918526a7107bc3c8de48f9a535b0100da40f5/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5616ca857dd05e5e62b4bfcd11bd1ea0f2e22f5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5616ca857dd05e5e62b4bfcd11bd1ea0f2e22f5e", "html_url": "https://github.com/rust-lang/rust/commit/5616ca857dd05e5e62b4bfcd11bd1ea0f2e22f5e"}], "stats": {"total": 152, "additions": 86, "deletions": 66}, "files": [{"sha": "68b2d201fb00a071b8cf4623d6c15452add9253d", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37e918526a7107bc3c8de48f9a535b0100da40f5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e918526a7107bc3c8de48f9a535b0100da40f5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=37e918526a7107bc3c8de48f9a535b0100da40f5", "patch": "@@ -498,8 +498,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // module we could have false positives\n             if !(did1.is_local() || did2.is_local()) && did1.krate != did2.krate {\n                 let abs_path = |def_id| {\n-                    PrintCx::new(self.tcx, AbsolutePathPrinter)\n-                        .print_def_path(def_id, None, Namespace::TypeNS, iter::empty())\n+                    PrintCx::with(self.tcx, AbsolutePathPrinter, |mut cx| {\n+                        cx.print_def_path(def_id, None, Namespace::TypeNS, iter::empty())\n+                    })\n                 };\n \n                 // We compare strings because DefPath can be different"}, {"sha": "7ee8eec11ee42002a6267e014378bf142bdc1784", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37e918526a7107bc3c8de48f9a535b0100da40f5/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e918526a7107bc3c8de48f9a535b0100da40f5/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=37e918526a7107bc3c8de48f9a535b0100da40f5", "patch": "@@ -2369,8 +2369,8 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                 };\n \n                 // When printing regions, add trailing space if necessary.\n-                ty::print::PrintCx::with(ty::print::FmtPrinter { fmt }, |cx| {\n-                    let region = if cx.is_verbose || cx.identify_regions {\n+                ty::print::PrintCx::with_tls_tcx(ty::print::FmtPrinter { fmt }, |cx| {\n+                    let region = if cx.config.is_verbose || cx.config.identify_regions {\n                         let mut region = region.to_string();\n                         if region.len() > 0 {\n                             region.push(' ');"}, {"sha": "d385d183e2b32ee18c1f6520176c051792b2dcee", "filename": "src/librustc/ty/print.rs", "status": "modified", "additions": 43, "deletions": 26, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/37e918526a7107bc3c8de48f9a535b0100da40f5/src%2Flibrustc%2Fty%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e918526a7107bc3c8de48f9a535b0100da40f5/src%2Flibrustc%2Fty%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint.rs?ref=37e918526a7107bc3c8de48f9a535b0100da40f5", "patch": "@@ -60,9 +60,7 @@ impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector {\n     }\n }\n \n-pub struct PrintCx<'a, 'gcx, 'tcx, P> {\n-    pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    pub printer: P,\n+pub(crate) struct PrintConfig {\n     pub(crate) is_debug: bool,\n     pub(crate) is_verbose: bool,\n     pub(crate) identify_regions: bool,\n@@ -71,6 +69,25 @@ pub struct PrintCx<'a, 'gcx, 'tcx, P> {\n     pub(crate) binder_depth: usize,\n }\n \n+impl PrintConfig {\n+    pub(crate) fn new(tcx: TyCtxt<'_, '_, '_>) -> Self {\n+        PrintConfig {\n+            is_debug: false,\n+            is_verbose: tcx.sess.verbose(),\n+            identify_regions: tcx.sess.opts.debugging_opts.identify_regions,\n+            used_region_names: None,\n+            region_index: 0,\n+            binder_depth: 0,\n+        }\n+    }\n+}\n+\n+pub struct PrintCx<'a, 'gcx, 'tcx, P> {\n+    pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    pub printer: P,\n+    pub(crate) config: &'a mut PrintConfig,\n+}\n+\n // HACK(eddyb) this is solely for `self: &mut PrintCx<Self>`, e.g. to\n // implement traits on the printer and call the methods on the context.\n impl<P> Deref for PrintCx<'_, '_, '_, P> {\n@@ -80,30 +97,29 @@ impl<P> Deref for PrintCx<'_, '_, '_, P> {\n     }\n }\n \n-impl<P> PrintCx<'a, 'gcx, 'tcx, P> {\n-    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>, printer: P) -> Self {\n-        PrintCx {\n+impl<'a, 'gcx, 'tcx, P> PrintCx<'a, 'gcx, 'tcx, P> {\n+    pub fn with<R>(\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        printer: P,\n+        f: impl FnOnce(PrintCx<'_, 'gcx, 'tcx, P>) -> R,\n+    ) -> R {\n+        f(PrintCx {\n             tcx,\n             printer,\n-            is_debug: false,\n-            is_verbose: tcx.sess.verbose(),\n-            identify_regions: tcx.sess.opts.debugging_opts.identify_regions,\n-            used_region_names: None,\n-            region_index: 0,\n-            binder_depth: 0,\n-        }\n+            config: &mut PrintConfig::new(tcx),\n+        })\n     }\n \n-    pub(crate) fn with<R>(printer: P, f: impl FnOnce(PrintCx<'_, '_, '_, P>) -> R) -> R {\n-        ty::tls::with(|tcx| f(PrintCx::new(tcx, printer)))\n+    pub(crate) fn with_tls_tcx<R>(printer: P, f: impl FnOnce(PrintCx<'_, '_, '_, P>) -> R) -> R {\n+        ty::tls::with(|tcx| PrintCx::with(tcx, printer, f))\n     }\n     pub(crate) fn prepare_late_bound_region_info<T>(&mut self, value: &ty::Binder<T>)\n     where T: TypeFoldable<'tcx>\n     {\n         let mut collector = LateBoundRegionNameCollector(Default::default());\n         value.visit_with(&mut collector);\n-        self.used_region_names = Some(collector.0);\n-        self.region_index = 0;\n+        self.config.used_region_names = Some(collector.0);\n+        self.config.region_index = 0;\n     }\n }\n \n@@ -116,17 +132,17 @@ pub trait Print<'tcx, P> {\n         &self,\n         cx: &mut PrintCx<'_, '_, 'tcx, P>,\n     ) -> Result<Self::Output, Self::Error> {\n-        let old_debug = cx.is_debug;\n-        cx.is_debug = false;\n+        let old_debug = cx.config.is_debug;\n+        cx.config.is_debug = false;\n         let result = self.print(cx);\n-        cx.is_debug = old_debug;\n+        cx.config.is_debug = old_debug;\n         result\n     }\n     fn print_debug(&self, cx: &mut PrintCx<'_, '_, 'tcx, P>) -> Result<Self::Output, Self::Error> {\n-        let old_debug = cx.is_debug;\n-        cx.is_debug = true;\n+        let old_debug = cx.config.is_debug;\n+        cx.config.is_debug = true;\n         let result = self.print(cx);\n-        cx.is_debug = old_debug;\n+        cx.config.is_debug = old_debug;\n         result\n     }\n }\n@@ -215,8 +231,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let ns = self.guess_def_namespace(def_id);\n         debug!(\"def_path_str: def_id={:?}, ns={:?}\", def_id, ns);\n         let mut s = String::new();\n-        let _ = PrintCx::new(self, FmtPrinter { fmt: &mut s })\n-            .print_def_path(def_id, None, ns, iter::empty());\n+        let _ = PrintCx::with(self, FmtPrinter { fmt: &mut s }, |mut cx| {\n+            cx.print_def_path(def_id, None, ns, iter::empty())\n+        });\n         s\n     }\n }\n@@ -613,7 +630,7 @@ impl<P: PrettyPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n         });\n \n         // Don't print args that are the defaults of their respective parameters.\n-        let num_supplied_defaults = if self.is_verbose {\n+        let num_supplied_defaults = if self.config.is_verbose {\n             0\n         } else {\n             params.iter().rev().take_while(|param| {"}, {"sha": "90300ecde2e5ce0f900912bab97cefd360e66652", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/37e918526a7107bc3c8de48f9a535b0100da40f5/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e918526a7107bc3c8de48f9a535b0100da40f5/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=37e918526a7107bc3c8de48f9a535b0100da40f5", "patch": "@@ -161,7 +161,7 @@ impl RegionHighlightMode {\n macro_rules! gen_display_debug_body {\n     ( $with:path ) => {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            PrintCx::with(FmtPrinter { fmt: f }, |mut cx| {\n+            PrintCx::with_tls_tcx(FmtPrinter { fmt: f }, |mut cx| {\n                 $with(&cx.tcx.lift(self).expect(\"could not lift for printing\"), &mut cx)\n             })\n         }\n@@ -197,7 +197,7 @@ macro_rules! gen_print_impl {\n             type Error = fmt::Error;\n             fn print(&$self, $cx: &mut PrintCx<'_, '_, 'tcx, P>) -> fmt::Result {\n                 define_scoped_cx!($cx);\n-                if $cx.is_debug $dbg\n+                if $cx.config.is_debug $dbg\n                 else $disp\n             }\n         }\n@@ -208,7 +208,7 @@ macro_rules! gen_print_impl {\n             type Error = fmt::Error;\n             fn print(&$self, $cx: &mut PrintCx<'_, '_, 'tcx, P>) -> fmt::Result {\n                 define_scoped_cx!($cx);\n-                if $cx.is_debug $dbg\n+                if $cx.config.is_debug $dbg\n                 else $disp\n             }\n         }\n@@ -316,7 +316,7 @@ impl<P: PrettyPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n         // clearly differentiate between named and unnamed regions in\n         // the output. We'll probably want to tweak this over time to\n         // decide just how much information to give.\n-        if self.binder_depth == 0 {\n+        if self.config.binder_depth == 0 {\n             self.prepare_late_bound_region_info(value);\n         }\n \n@@ -337,7 +337,7 @@ impl<P: PrettyPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n         // is disallowed (name resolution thinks `scoped_cx!` is ambiguous).\n         define_scoped_cx!(self);\n \n-        let old_region_index = self.region_index;\n+        let old_region_index = self.config.region_index;\n         let mut region_index = old_region_index;\n         let new_value = self.tcx.replace_late_bound_regions(value, |br| {\n             let _ = start_or_continue(self, \"for<\", \", \");\n@@ -365,16 +365,16 @@ impl<P: PrettyPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n         start_or_continue(self, \"\", \"> \")?;\n \n         // Push current state to gcx, and restore after writing new_value.\n-        self.binder_depth += 1;\n-        self.region_index = region_index;\n+        self.config.binder_depth += 1;\n+        self.config.region_index = region_index;\n         let result = new_value.print_display(self);\n-        self.region_index = old_region_index;\n-        self.binder_depth -= 1;\n+        self.config.region_index = old_region_index;\n+        self.config.binder_depth -= 1;\n         result\n     }\n \n     fn is_name_used(&self, name: &InternedString) -> bool {\n-        match self.used_region_names {\n+        match self.config.used_region_names {\n             Some(ref names) => names.contains(name),\n             None => false,\n         }\n@@ -387,7 +387,7 @@ pub fn parameterized<F: fmt::Write>(\n     substs: SubstsRef<'_>,\n     ns: Namespace,\n ) -> fmt::Result {\n-    PrintCx::with(FmtPrinter { fmt: f }, |mut cx| {\n+    PrintCx::with_tls_tcx(FmtPrinter { fmt: f }, |mut cx| {\n         let substs = cx.tcx.lift(&substs).expect(\"could not lift for printing\");\n         let _ = cx.print_def_path(did, Some(substs), ns, iter::empty())?;\n         Ok(())\n@@ -404,8 +404,9 @@ define_print! {\n                 let mut resugared_principal = false;\n \n                 // Special-case `Fn(...) -> ...` and resugar it.\n-                if !cx.is_verbose && cx.tcx.lang_items().fn_trait_kind(principal.def_id).is_some() {\n-                    if let Tuple(ref args) = principal.substs.type_at(0).sty {\n+                let fn_trait_kind = cx.tcx.lang_items().fn_trait_kind(principal.def_id);\n+                if !cx.config.is_verbose && fn_trait_kind.is_some() {\n+                    if let ty::Tuple(ref args) = principal.substs.type_at(0).sty {\n                         let mut projections = self.projection_bounds();\n                         if let (Some(proj), None) = (projections.next(), projections.next()) {\n                             let _ = cx.print_def_path(\n@@ -486,7 +487,7 @@ impl fmt::Debug for ty::GenericParamDef {\n \n impl fmt::Debug for ty::TraitDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        PrintCx::with(FmtPrinter { fmt: f }, |mut cx| {\n+        PrintCx::with_tls_tcx(FmtPrinter { fmt: f }, |mut cx| {\n             let _ = cx.print_def_path(\n                 self.def_id,\n                 None,\n@@ -500,7 +501,7 @@ impl fmt::Debug for ty::TraitDef {\n \n impl fmt::Debug for ty::AdtDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        PrintCx::with(FmtPrinter { fmt: f }, |mut cx| {\n+        PrintCx::with_tls_tcx(FmtPrinter { fmt: f }, |mut cx| {\n             let _ = cx.print_def_path(\n                 self.did,\n                 None,\n@@ -522,7 +523,7 @@ impl<'tcx> fmt::Debug for ty::ClosureUpvar<'tcx> {\n \n impl fmt::Debug for ty::UpvarId {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        PrintCx::with(FmtPrinter { fmt: f }, |mut cx| {\n+        PrintCx::with_tls_tcx(FmtPrinter { fmt: f }, |mut cx| {\n             define_scoped_cx!(cx);\n             p!(write(\"UpvarId({:?};`{}`;{:?})\",\n                 self.var_path.hir_id,\n@@ -592,7 +593,7 @@ define_print! {\n define_print! {\n     () ty::BoundRegion, (self, cx) {\n         display {\n-            if cx.is_verbose {\n+            if cx.config.is_verbose {\n                 return self.print_debug(cx);\n             }\n \n@@ -630,7 +631,7 @@ define_print! {\n // NB: this must be kept in sync with the printing logic above.\n impl ty::BoundRegion {\n     fn display_outputs_anything<P>(&self, cx: &mut PrintCx<'_, '_, '_, P>) -> bool {\n-        if cx.is_verbose {\n+        if cx.config.is_verbose {\n             return true;\n         }\n \n@@ -654,7 +655,7 @@ impl ty::BoundRegion {\n define_print! {\n     () ty::PlaceholderRegion, (self, cx) {\n         display {\n-            if cx.is_verbose {\n+            if cx.config.is_verbose {\n                 return self.print_debug(cx);\n             }\n \n@@ -673,7 +674,7 @@ define_print! {\n // NB: this must be kept in sync with the printing logic above.\n impl ty::PlaceholderRegion {\n     fn display_outputs_anything<P>(&self, cx: &mut PrintCx<'_, '_, '_, P>) -> bool {\n-        if cx.is_verbose {\n+        if cx.config.is_verbose {\n             return true;\n         }\n \n@@ -689,7 +690,7 @@ impl ty::PlaceholderRegion {\n define_print! {\n     () ty::RegionKind, (self, cx) {\n         display {\n-            if cx.is_verbose {\n+            if cx.config.is_verbose {\n                 return self.print_debug(cx);\n             }\n \n@@ -717,7 +718,7 @@ define_print! {\n                 ty::RePlaceholder(p) => {\n                     p!(print_display(p))\n                 }\n-                ty::ReScope(scope) if cx.identify_regions => {\n+                ty::ReScope(scope) if cx.config.identify_regions => {\n                     match scope.data {\n                         region::ScopeData::Node =>\n                             p!(write(\"'{}s\", scope.item_local_id().as_usize())),\n@@ -734,7 +735,7 @@ define_print! {\n                         )),\n                     }\n                 }\n-                ty::ReVar(region_vid) if cx.identify_regions => {\n+                ty::ReVar(region_vid) if cx.config.identify_regions => {\n                     p!(print_debug(region_vid))\n                 }\n                 ty::ReVar(region_vid) => {\n@@ -801,7 +802,7 @@ define_print! {\n impl ty::RegionKind {\n     // HACK(eddyb) `pub(crate)` only for `ty::print`.\n     pub(crate) fn display_outputs_anything<P>(&self, cx: &mut PrintCx<'_, '_, '_, P>) -> bool {\n-        if cx.is_verbose {\n+        if cx.config.is_verbose {\n             return true;\n         }\n \n@@ -822,7 +823,7 @@ impl ty::RegionKind {\n             ty::RePlaceholder(p) => p.display_outputs_anything(cx),\n \n             ty::ReScope(_) |\n-            ty::ReVar(_) if cx.identify_regions => true,\n+            ty::ReVar(_) if cx.config.identify_regions => true,\n \n             ty::ReVar(region_vid) => region_vid.display_outputs_anything(cx),\n \n@@ -905,7 +906,7 @@ impl fmt::Debug for ty::FloatVid {\n define_print! {\n     () ty::RegionVid, (self, cx) {\n         display {\n-            if cx.is_verbose {\n+            if cx.config.is_verbose {\n                 return self.print_debug(cx);\n             }\n \n@@ -934,7 +935,7 @@ define_print! {\n // NB: this must be kept in sync with the printing logic above.\n impl ty::RegionVid {\n     fn display_outputs_anything<P>(&self, cx: &mut PrintCx<'_, '_, '_, P>) -> bool {\n-        if cx.is_verbose {\n+        if cx.config.is_verbose {\n             return true;\n         }\n \n@@ -950,7 +951,7 @@ impl ty::RegionVid {\n define_print! {\n     () ty::InferTy, (self, cx) {\n         display {\n-            if cx.is_verbose {\n+            if cx.config.is_verbose {\n                 return self.print_debug(cx);\n             }\n             match *self {\n@@ -997,7 +998,7 @@ impl fmt::Debug for ty::FloatVarValue {\n           for<'a> <T as ty::Lift<'a>>::Lifted: fmt::Display + TypeFoldable<'a>\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        PrintCx::with(|cx| cx.in_binder(cx.tcx.lift(self)\n+        PrintCx::with_tls_tcx(|cx| cx.in_binder(cx.tcx.lift(self)\n             .expect(\"could not lift for printing\")))\n     }\n }*/\n@@ -1146,7 +1147,7 @@ define_print! {\n                     p!(write(\"Placeholder({:?})\", placeholder))\n                 }\n                 Opaque(def_id, substs) => {\n-                    if cx.is_verbose {\n+                    if cx.config.is_verbose {\n                         return p!(write(\"Opaque({:?}, {:?})\", def_id, substs));\n                     }\n "}, {"sha": "8f4b1d1638a80e383768d4c067f28c63e4dfe6fc", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37e918526a7107bc3c8de48f9a535b0100da40f5/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e918526a7107bc3c8de48f9a535b0100da40f5/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=37e918526a7107bc3c8de48f9a535b0100da40f5", "patch": "@@ -225,9 +225,10 @@ fn get_symbol_hash<'a, 'tcx>(\n }\n \n fn def_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> ty::SymbolName {\n-    let mut cx = PrintCx::new(tcx, SymbolPath::new(tcx));\n-    let _ = cx.print_def_path(def_id, None, Namespace::ValueNS, iter::empty());\n-    cx.printer.into_interned()\n+    PrintCx::with(tcx, SymbolPath::new(tcx), |mut cx| {\n+        let _ = cx.print_def_path(def_id, None, Namespace::ValueNS, iter::empty());\n+        cx.printer.into_interned()\n+    })\n }\n \n fn symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance<'tcx>) -> ty::SymbolName {"}, {"sha": "ffdf47db54723bdfea2f4b03ad664e4477a627d8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37e918526a7107bc3c8de48f9a535b0100da40f5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e918526a7107bc3c8de48f9a535b0100da40f5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=37e918526a7107bc3c8de48f9a535b0100da40f5", "patch": "@@ -4278,9 +4278,9 @@ where F: Fn(DefId) -> Def {\n         }\n     }\n \n-    let names = PrintCx::new(tcx, AbsolutePathPrinter)\n-        .print_def_path(def_id, None, Namespace::TypeNS, iter::empty())\n-        .unwrap();\n+    let names = PrintCx::with(tcx, AbsolutePathPrinter, |mut cx| {\n+        cx.print_def_path(def_id, None, Namespace::TypeNS, iter::empty()).unwrap()\n+    });\n \n     hir::Path {\n         span: DUMMY_SP,"}]}