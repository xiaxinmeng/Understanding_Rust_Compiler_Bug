{"sha": "029e930ab7bb3ee3b664b70d8243b7e042d16d6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOWU5MzBhYjdiYjNlZTNiNjY0YjcwZDgyNDNiN2UwNDJkMTZkNmU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-17T18:35:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-17T18:35:24Z"}, "message": "Rollup merge of #71247 - ldm0:minor, r=estebank\n\nRemove unnecessary variable intialization\n\nMinor fix.", "tree": {"sha": "bb5e5f957e40cf62f5402efed1c46e3c81230a9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb5e5f957e40cf62f5402efed1c46e3c81230a9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/029e930ab7bb3ee3b664b70d8243b7e042d16d6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemfbsCRBK7hj4Ov3rIwAAdHIIAELqmmkNa3L8pj3JdEI6SzV+\nLv5AlsNwUDtVbbzRaODF+DDxkDhPBUPh368VRGZIkWZrDadJblm4cjSXxtTAawH1\nqmW2l4gchaj8G4sgjQGNrUyAHbSfAjhi81mqinPoe0C3Upeu74OwfnHxgVZPCWmp\nN8kB547Yj9yBGM9B/zMge+QsO8cn41QdqUGl4tASvWcFQ+ZNJdc6Gdayp0NCKilQ\n5PGU6M6VnJuPg7HLsFcZsftJs5fEaqy6HAPctGQAnP92I3T3GccxEIjM0vZGcJdA\n0czWtNccoCL+9wkUUff3vhNEUlYbcY1Wl5tWIc9neBuE3a6NuspRRD3KU+FpcgQ=\n=rDU4\n-----END PGP SIGNATURE-----\n", "payload": "tree bb5e5f957e40cf62f5402efed1c46e3c81230a9a\nparent 07cb4f44e4b159a6be3e837be5b9c134f51f2485\nparent be6716f7f9b26bab52bb1879b273df515fe181e9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587148524 +0200\ncommitter GitHub <noreply@github.com> 1587148524 +0200\n\nRollup merge of #71247 - ldm0:minor, r=estebank\n\nRemove unnecessary variable intialization\n\nMinor fix.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/029e930ab7bb3ee3b664b70d8243b7e042d16d6e", "html_url": "https://github.com/rust-lang/rust/commit/029e930ab7bb3ee3b664b70d8243b7e042d16d6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/029e930ab7bb3ee3b664b70d8243b7e042d16d6e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07cb4f44e4b159a6be3e837be5b9c134f51f2485", "url": "https://api.github.com/repos/rust-lang/rust/commits/07cb4f44e4b159a6be3e837be5b9c134f51f2485", "html_url": "https://github.com/rust-lang/rust/commit/07cb4f44e4b159a6be3e837be5b9c134f51f2485"}, {"sha": "be6716f7f9b26bab52bb1879b273df515fe181e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/be6716f7f9b26bab52bb1879b273df515fe181e9", "html_url": "https://github.com/rust-lang/rust/commit/be6716f7f9b26bab52bb1879b273df515fe181e9"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "dbda735aa99c85df8a9091158ea7f98a95c27137", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/029e930ab7bb3ee3b664b70d8243b7e042d16d6e/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029e930ab7bb3ee3b664b70d8243b7e042d16d6e/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=029e930ab7bb3ee3b664b70d8243b7e042d16d6e", "patch": "@@ -975,18 +975,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Expectation<'tcx>,\n         expr: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n-        let uty = expected.to_option(self).and_then(|uty| match uty.kind {\n-            ty::Array(ty, _) | ty::Slice(ty) => Some(ty),\n-            _ => None,\n-        });\n-\n         let element_ty = if !args.is_empty() {\n-            let coerce_to = uty.unwrap_or_else(|| {\n-                self.next_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::TypeInference,\n-                    span: expr.span,\n+            let coerce_to = expected\n+                .to_option(self)\n+                .and_then(|uty| match uty.kind {\n+                    ty::Array(ty, _) | ty::Slice(ty) => Some(ty),\n+                    _ => None,\n                 })\n-            });\n+                .unwrap_or_else(|| {\n+                    self.next_ty_var(TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::TypeInference,\n+                        span: expr.span,\n+                    })\n+                });\n             let mut coerce = CoerceMany::with_coercion_sites(coerce_to, args);\n             assert_eq!(self.diverges.get(), Diverges::Maybe);\n             for e in args {"}]}