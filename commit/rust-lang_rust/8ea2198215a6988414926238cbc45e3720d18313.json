{"sha": "8ea2198215a6988414926238cbc45e3720d18313", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYTIxOTgyMTVhNjk4ODQxNDkyNjIzOGNiYzQ1ZTM3MjBkMTgzMTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-17T16:22:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-17T16:22:46Z"}, "message": "Auto merge of #28421 - alexcrichton:msvc-rmake, r=alexcrichton\n\nWork carried over from #27938", "tree": {"sha": "539a7e0e5a73c7951867e8cc1d4b1fefbbf288d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/539a7e0e5a73c7951867e8cc1d4b1fefbbf288d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ea2198215a6988414926238cbc45e3720d18313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea2198215a6988414926238cbc45e3720d18313", "html_url": "https://github.com/rust-lang/rust/commit/8ea2198215a6988414926238cbc45e3720d18313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ea2198215a6988414926238cbc45e3720d18313/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be0d0ad924f9fd0162d31669b58bc39734e91d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be0d0ad924f9fd0162d31669b58bc39734e91d8", "html_url": "https://github.com/rust-lang/rust/commit/2be0d0ad924f9fd0162d31669b58bc39734e91d8"}, {"sha": "0675dffac48101faa2bdb634682b2ddf3975bf31", "url": "https://api.github.com/repos/rust-lang/rust/commits/0675dffac48101faa2bdb634682b2ddf3975bf31", "html_url": "https://github.com/rust-lang/rust/commit/0675dffac48101faa2bdb634682b2ddf3975bf31"}], "stats": {"total": 233, "additions": 155, "deletions": 78}, "files": [{"sha": "d004558d1bf3f58f11aab507552ca36c921ea7c7", "filename": "mk/tests.mk", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1046,6 +1046,10 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),rmake): \\\n \t\t$$(RMAKE_TESTS:%=$(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok)\n \t@touch $$@\n \n+$(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n+\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(3)))\n+$(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n+\texport LIB := $$(CFG_MSVC_LIB_PATH_$$(HOST_$(3)))\n $(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n \t\t$(S)src/test/run-make/%/Makefile \\\n \t\t$$(CSREQ$(1)_T_$(2)_H_$(3))\n@@ -1056,15 +1060,16 @@ $(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n         $$(MAKE) \\\n \t    $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n \t    $(3)/test/run-make/$$* \\\n-\t    $$(CC_$(3)) \\\n+\t    '$$(CC_$(3))' \\\n \t    \"$$(CFG_GCCISH_CFLAGS_$(3))\" \\\n \t    $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n \t    \"$$(TESTNAME)\" \\\n \t    $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3)) \\\n \t    \"$$(LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3))\" \\\n \t    \"$$(LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3))\" \\\n \t    $(1) \\\n-\t    $$(S)\n+\t    $$(S) \\\n+\t    $(3)\n \t@touch -r $$@.start_time $$@ && rm $$@.start_time\n else\n # FIXME #11094 - The above rule doesn't work right for multiple targets"}, {"sha": "c2958caddc40098e22d677c9e282fe73a74f0c83", "filename": "src/etc/maketest.py", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Fetc%2Fmaketest.py", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Fetc%2Fmaketest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmaketest.py?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -12,6 +12,7 @@\n import os\n import sys\n \n+target_triple = sys.argv[14]\n \n def normalize_path(v):\n     \"\"\"msys1/msys2 automatically converts `/abs/path1:/abs/path2` into\n@@ -22,8 +23,11 @@ def normalize_path(v):\n     windows paths so it is really error-prone. revert it for peace.\"\"\"\n     v = v.replace('\\\\', '/')\n     # c:/path -> /c/path\n-    if ':/' in v:\n-        v = '/' + v.replace(':/', '/')\n+    # \"c:/path\" -> \"/c/path\"\n+    start = v.find(':/')\n+    while start != -1:\n+        v = v[:start - 1] + '/' + v[start - 1:start] + v[start + 1:]\n+        start = v.find(':/')\n     return v\n \n \n@@ -50,6 +54,10 @@ def convert_path_spec(name, value):\n putenv('RUST_BUILD_STAGE', sys.argv[12])\n putenv('S', os.path.abspath(sys.argv[13]))\n putenv('PYTHON', sys.executable)\n+os.putenv('TARGET', target_triple)\n+\n+if 'msvc' in target_triple:\n+    os.putenv('IS_MSVC', '1')\n \n if filt not in sys.argv[1]:\n     sys.exit(0)"}, {"sha": "5202e6dea541ee396c97d99c249d7cbce84fccca", "filename": "src/test/run-make/archive-duplicate-names/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Farchive-duplicate-names%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Farchive-duplicate-names%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Farchive-duplicate-names%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -3,8 +3,8 @@\n all:\n \tmkdir $(TMPDIR)/a\n \tmkdir $(TMPDIR)/b\n-\t$(CC) -c -o $(TMPDIR)/a/foo.o foo.c\n-\t$(CC) -c -o $(TMPDIR)/b/foo.o bar.c\n+\t$(call COMPILE_OBJ,$(TMPDIR)/a/foo.o,foo.c)\n+\t$(call COMPILE_OBJ,$(TMPDIR)/b/foo.o,bar.c)\n \tar crus $(TMPDIR)/libfoo.a $(TMPDIR)/a/foo.o $(TMPDIR)/b/foo.o\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs"}, {"sha": "a97554935412332df45cf1a7ddf47334770780ea", "filename": "src/test/run-make/c-dynamic-dylib/cfoo.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fcfoo.c?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,2 +1,5 @@\n // ignore-license\n+#ifdef _WIN32\n+__declspec(dllexport)\n+#endif\n int foo() { return 0; }"}, {"sha": "b2849326a7588583aaea7f7badaff2abb855e174", "filename": "src/test/run-make/c-dynamic-rlib/cfoo.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fcfoo.c?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,2 +1,6 @@\n // ignore-license\n+\n+#ifdef _WIN32\n+__declspec(dllexport)\n+#endif\n int foo() { return 0; }"}, {"sha": "7b2130cd4ed96bdc2dc402c67b677da4907bdfe5", "filename": "src/test/run-make/c-link-to-rust-dylib/Makefile", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,10 +1,17 @@\n -include ../tools.mk\n \n-HOST_LIB_DIR=$(TMPDIR)/../../../stage$(RUST_BUILD_STAGE)/lib\n-\n-all:\n-\t$(RUSTC) foo.rs\n-\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(call RPATH_LINK_SEARCH,$(HOST_LIB_DIR)) -Wl,-rpath,$(TMPDIR) $(EXTRACFLAGS)\n+all: $(TMPDIR)/$(call BIN,bar)\n \t$(call RUN,bar)\n \t$(call REMOVE_DYLIBS,foo)\n \t$(call FAIL,bar)\n+\n+ifdef IS_MSVC\n+$(TMPDIR)/$(call BIN,bar): $(call DYLIB,foo)\n+\t$(CC) bar.c $(TMPDIR)/foo.lib $(call OUT_EXE,bar)\n+else\n+$(TMPDIR)/$(call BIN,bar): $(call DYLIB,foo)\n+\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) -L $(TMPDIR)\n+endif\n+\n+$(call DYLIB,foo): foo.rs\n+\t$(RUSTC) foo.rs"}, {"sha": "3d44b3c256efcaa4da06c40f260b2f88fd0e88ac", "filename": "src/test/run-make/c-link-to-rust-staticlib/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,12 +1,12 @@\n -include ../tools.mk\n \n-EXTRAFLAGS := $(EXTRACFLAGS)\n-\n # FIXME: ignore freebsd\n ifneq ($(shell uname),FreeBSD)\n all:\n \t$(RUSTC) foo.rs\n-\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(EXTRAFLAGS) $(EXTRACXXFLAGS)\n+\tcp $(TMPDIR)/libfoo.a $(call NATIVE_STATICLIB,foo2)\n+\t$(CC) bar.c $(call NATIVE_STATICLIB,foo2) $(call OUT_EXE,bar) \\\n+\t\t$(EXTRACFLAGS) $(EXTRACXXFLAGS)\n \t$(call RUN,bar)\n \trm $(call STATICLIB,foo*)\n \t$(call RUN,bar)"}, {"sha": "f88786857ccdc26bd247f326fffc2c349d4b9bb7", "filename": "src/test/run-make/c-static-dylib/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fc-static-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fc-static-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-dylib%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,9 +1,9 @@\n -include ../tools.mk\n \n-all: $(call STATICLIB,cfoo)\n+all: $(call NATIVE_STATICLIB,cfoo)\n \t$(RUSTC) foo.rs -C prefer-dynamic\n \t$(RUSTC) bar.rs\n-\trm $(TMPDIR)/$(call STATICLIB_GLOB,cfoo)\n+\trm $(call NATIVE_STATICLIB,cfoo)\n \t$(call RUN,bar)\n \t$(call REMOVE_DYLIBS,foo)\n \t$(call FAIL,bar)"}, {"sha": "be22b2728f05b0eca8e1a1e4d82cc86b8b2ba80d", "filename": "src/test/run-make/c-static-rlib/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fc-static-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fc-static-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-rlib%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,8 +1,8 @@\n -include ../tools.mk\n \n-all: $(call STATICLIB,cfoo)\n+all: $(call NATIVE_STATICLIB,cfoo)\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n \t$(call REMOVE_RLIBS,foo)\n-\trm $(TMPDIR)/$(call STATICLIB_GLOB,cfoo)\n+\trm $(call NATIVE_STATICLIB,cfoo)\n \t$(call RUN,bar)"}, {"sha": "17ecb33ab28d0124e3a11891a493e786c0eeab74", "filename": "src/test/run-make/crate-name-priority/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fcrate-name-priority%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fcrate-name-priority%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-name-priority%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -7,5 +7,5 @@ all:\n \trm $(TMPDIR)/$(call BIN,bar)\n \t$(RUSTC) foo1.rs\n \trm $(TMPDIR)/$(call BIN,foo)\n-\t$(RUSTC) foo1.rs -o $(TMPDIR)/bar1\n+\t$(RUSTC) foo1.rs -o $(TMPDIR)/$(call BIN,bar1)\n \trm $(TMPDIR)/$(call BIN,bar1)"}, {"sha": "cf897dba1f2798ba4944b6523eeba7c1def1b9cf", "filename": "src/test/run-make/extern-fn-generic/Makefile", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fextern-fn-generic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fextern-fn-generic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-generic%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,8 +1,6 @@\n -include ../tools.mk\n \n-all:\n-\t$(CC) -std=c99 test.c -c -o $(TMPDIR)/test.o\n-\t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n-\t$(RUSTC) testcrate.rs -L $(TMPDIR)\n-\t$(RUSTC) test.rs -L $(TMPDIR)\n+all: $(call NATIVE_STATICLIB,test)\n+\t$(RUSTC) testcrate.rs\n+\t$(RUSTC) test.rs\n \t$(call RUN,test) || exit 1"}, {"sha": "042048ec25f63c05096693257dff6b2d8f6a3a2d", "filename": "src/test/run-make/extern-fn-mangle/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,7 +1,5 @@\n -include ../tools.mk\n \n-all:\n-\t$(CC) -std=c99 test.c -c -o $(TMPDIR)/test.o\n-\t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n-\t$(RUSTC) test.rs -L $(TMPDIR)\n+all: $(call NATIVE_STATICLIB,test)\n+\t$(RUSTC) test.rs\n \t$(call RUN,test) || exit 1"}, {"sha": "042048ec25f63c05096693257dff6b2d8f6a3a2d", "filename": "src/test/run-make/extern-fn-with-packed-struct/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,7 +1,5 @@\n -include ../tools.mk\n \n-all:\n-\t$(CC) -std=c99 test.c -c -o $(TMPDIR)/test.o\n-\t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n-\t$(RUSTC) test.rs -L $(TMPDIR)\n+all: $(call NATIVE_STATICLIB,test)\n+\t$(RUSTC) test.rs\n \t$(call RUN,test) || exit 1"}, {"sha": "506954fca46172efde81f8e1fd5b79ac11667ebd", "filename": "src/test/run-make/extern-fn-with-packed-struct/test.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.c?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,11 +1,21 @@\n // ignore-license\n // Pragma needed cause of gcc bug on windows: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52991\n+\n+#ifdef _MSC_VER\n+#pragma pack(push,1)\n+struct Foo {\n+    char a;\n+    short b;\n+    char c;\n+};\n+#else\n #pragma pack(1)\n struct __attribute__((packed)) Foo {\n     char a;\n     short b;\n     char c;\n };\n+#endif\n \n struct Foo foo(struct Foo foo) {\n     return foo;"}, {"sha": "cf897dba1f2798ba4944b6523eeba7c1def1b9cf", "filename": "src/test/run-make/extern-fn-with-union/Makefile", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,8 +1,6 @@\n -include ../tools.mk\n \n-all:\n-\t$(CC) -std=c99 test.c -c -o $(TMPDIR)/test.o\n-\t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n-\t$(RUSTC) testcrate.rs -L $(TMPDIR)\n-\t$(RUSTC) test.rs -L $(TMPDIR)\n+all: $(call NATIVE_STATICLIB,test)\n+\t$(RUSTC) testcrate.rs\n+\t$(RUSTC) test.rs\n \t$(call RUN,test) || exit 1"}, {"sha": "1268022e37b744294eb2772f96333598109f9e33", "filename": "src/test/run-make/interdependent-c-libraries/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -8,7 +8,7 @@\n # correct to complete the linkage. If passed as \"-lfoo -lbar\", then the 'foo'\n # library will be stripped out, and the linkage will fail.\n \n-all: $(call STATICLIB,foo) $(call STATICLIB,bar)\n+all: $(call NATIVE_STATICLIB,foo) $(call NATIVE_STATICLIB,bar)\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n \t$(RUSTC) main.rs -Z print-link-args"}, {"sha": "c412b0479fb84b32afc2ca6fa0323065b65f216e", "filename": "src/test/run-make/issue-12446/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-12446%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-12446%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-12446%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-all: $(call STATICLIB,foo)\n+all: $(call NATIVE_STATICLIB,foo)\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n \t$(call RUN,bar)"}, {"sha": "bd94db09520288c593995cd866c8f043435f6223", "filename": "src/test/run-make/issue-14500/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-14500%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-14500%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-14500%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -13,5 +13,5 @@ endif\n all:\n \t$(RUSTC) foo.rs --crate-type=rlib\n \t$(RUSTC) bar.rs --crate-type=staticlib -C lto -L. -o $(TMPDIR)/libbar.a\n-\t$(CC) foo.c -lbar -o $(call RUN_BINFILE,foo) $(EXTRACFLAGS)\n+\t$(CC) foo.c $(TMPDIR)/libbar.a $(EXTRACFLAGS) $(call OUT_EXE,foo)\n \t$(call RUN,foo)"}, {"sha": "846805686a12a82a8598b24a7e14fd17b00f1c7b", "filename": "src/test/run-make/issue-15460/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-15460%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-15460%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-15460%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-all: $(TMPDIR)/libfoo.a\n+all: $(call NATIVE_STATICLIB,foo)\n \t$(RUSTC) foo.rs -C extra-filename=-383hf8 -C prefer-dynamic\n \t$(RUSTC) bar.rs\n \t$(call RUN,bar)"}, {"sha": "fdf595b574e3397280431138651de0bfd5c85c6f", "filename": "src/test/run-make/issue-15460/foo.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.c?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,2 +1,6 @@\n // ignore-license\n+\n+#ifdef _WIN32\n+__declspec(dllexport)\n+#endif\n void foo() {}"}, {"sha": "8b96fe36824715b3197e36ee72f5cd3e595cac55", "filename": "src/test/run-make/issue-15460/foo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.rs?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(linked_from)]\n #![crate_type = \"dylib\"]\n \n #[link(name = \"foo\", kind = \"static\")]\n+#[linked_from = \"foo\"]\n extern {\n     pub fn foo();\n }"}, {"sha": "042048ec25f63c05096693257dff6b2d8f6a3a2d", "filename": "src/test/run-make/issue-25581/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-25581%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-25581%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-25581%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,7 +1,5 @@\n -include ../tools.mk\n \n-all:\n-\t$(CC) -std=c99 test.c -c -o $(TMPDIR)/test.o\n-\t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n-\t$(RUSTC) test.rs -L $(TMPDIR)\n+all: $(call NATIVE_STATICLIB,test)\n+\t$(RUSTC) test.rs\n \t$(call RUN,test) || exit 1"}, {"sha": "0d94c99a3948a9553c98cdd08195e224a26d7b0a", "filename": "src/test/run-make/issue-26092/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-26092%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fissue-26092%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-26092%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -2,4 +2,4 @@\n \n all:\n \t\t$(RUSTC) -o \"\" blank.rs 2>&1 | \\\n-\t\t\tgrep 'No such file or directory'\n+\t\t\tgrep -i 'No such file or directory'"}, {"sha": "eeea0e3714e7f18444b0ffd738b522ca5e7b42c7", "filename": "src/test/run-make/link-path-order/Makefile", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Flink-path-order%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Flink-path-order%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-path-order%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -6,10 +6,12 @@\n CORRECT_DIR=$(TMPDIR)/correct\n WRONG_DIR=$(TMPDIR)/wrong\n \n-all: $(TMPDIR)/libcorrect.a $(TMPDIR)/libwrong.a\n+F := $(call NATIVE_STATICLIB_FILE,foo)\n+\n+all: $(call NATIVE_STATICLIB,correct) $(call NATIVE_STATICLIB,wrong)\n \tmkdir -p $(CORRECT_DIR) $(WRONG_DIR)\n-\tmv $(TMPDIR)/libcorrect.a $(CORRECT_DIR)/libfoo.a\n-\tmv $(TMPDIR)/libwrong.a $(WRONG_DIR)/libfoo.a\n+\tmv $(call NATIVE_STATICLIB,correct) $(CORRECT_DIR)/$(F)\n+\tmv $(call NATIVE_STATICLIB,wrong) $(WRONG_DIR)/$(F)\n \t$(RUSTC) main.rs -o $(TMPDIR)/should_succeed -L $(CORRECT_DIR) -L $(WRONG_DIR)\n \t$(call RUN,should_succeed)\n \t$(RUSTC) main.rs -o $(TMPDIR)/should_fail -L $(WRONG_DIR) -L $(CORRECT_DIR)"}, {"sha": "4befbe1446542ed99f22c695d4fc2aa001c8931d", "filename": "src/test/run-make/linkage-attr-on-static/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,7 +1,5 @@\n -include ../tools.mk\n \n-all:\n-\t$(CC) foo.c -c -o $(TMPDIR)/foo.o\n-\t$(AR) rcs $(TMPDIR)/libfoo.a $(TMPDIR)/foo.o\n-\t$(RUSTC) bar.rs -lfoo -L $(TMPDIR)\n+all: $(call NATIVE_STATICLIB,foo)\n+\t$(RUSTC) bar.rs\n \t$(call RUN,bar) || exit 1"}, {"sha": "274401c448bada6adabad33b0c7acc3553973c75", "filename": "src/test/run-make/linkage-attr-on-static/bar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Fbar.rs?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -14,6 +14,7 @@\n #[linkage = \"external\"]\n static BAZ: i32 = 21;\n \n+#[link(name = \"foo\", kind = \"static\")]\n extern {\n     fn what() -> i32;\n }"}, {"sha": "72c161abe9113f10665f6ea3449b843b4adecf55", "filename": "src/test/run-make/lto-smoke-c/Makefile", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -5,5 +5,7 @@ CC := $(CC:-g=)\n \n all:\n \t$(RUSTC) foo.rs -C lto\n-\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(EXTRACFLAGS) $(EXTRACXXFLAGS)\n+\t$(CC) bar.c $(TMPDIR)/libfoo.a \\\n+\t\t$(call OUT_EXE,bar) \\\n+\t\t$(EXTRACFLAGS) $(EXTRACXXFLAGS)\n \t$(call RUN,bar)"}, {"sha": "3f6a28c251a2fad4e3cd7a72bba83d89b94d54cb", "filename": "src/test/run-make/no-duplicate-libs/Makefile", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,7 +1,12 @@\n -include ../tools.mk\n \n+ifdef IS_MSVC\n+# FIXME(#27979)\n+all:\n+else\n all:\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n \t$(RUSTC) main.rs\n \t$(call RUN,main)\n+endif"}, {"sha": "a7b02a2f10b635341d9dc9f3239a4f39fa3b6c60", "filename": "src/test/run-make/no-duplicate-libs/bar.c", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2be0d0ad924f9fd0162d31669b58bc39734e91d8/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/2be0d0ad924f9fd0162d31669b58bc39734e91d8/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.c?ref=2be0d0ad924f9fd0162d31669b58bc39734e91d8", "patch": "@@ -1,4 +0,0 @@\n-// ignore-license\n-extern void foo();\n-\n-void bar() { foo(); }"}, {"sha": "2895ad473bf966158015a0295e161767b673f29a", "filename": "src/test/run-make/no-duplicate-libs/foo.c", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2be0d0ad924f9fd0162d31669b58bc39734e91d8/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/2be0d0ad924f9fd0162d31669b58bc39734e91d8/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.c?ref=2be0d0ad924f9fd0162d31669b58bc39734e91d8", "patch": "@@ -1,2 +0,0 @@\n-// ignore-license\n-void foo() {}"}, {"sha": "e3c36b9c0b7017b96bfb3df9d5c8388b72697456", "filename": "src/test/run-make/output-type-permutations/Makefile", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -4,7 +4,8 @@ all:\n \t$(RUSTC) foo.rs --crate-type=rlib,dylib,staticlib\n \t$(call REMOVE_RLIBS,bar)\n \t$(call REMOVE_DYLIBS,bar)\n-\trm $(TMPDIR)/$(call STATICLIB_GLOB,bar)\n+\trm $(TMPDIR)/libbar.a\n+\trm -f $(TMPDIR)/bar.{exp,lib}\n \t# Check that $(TMPDIR) is empty.\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n@@ -36,31 +37,32 @@ all:\n \trm $(TMPDIR)/foo\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n-\t$(RUSTC) foo.rs --emit=link -o $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --emit=link -o $(TMPDIR)/$(call BIN,foo)\n \trm $(TMPDIR)/$(call BIN,foo)\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n \t$(RUSTC) foo.rs --crate-type=rlib -o $(TMPDIR)/foo\n \trm $(TMPDIR)/foo\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n-\t$(RUSTC) foo.rs --crate-type=dylib -o $(TMPDIR)/foo\n-\trm $(TMPDIR)/$(call BIN,foo)  # FIXME 13794\n+\t$(RUSTC) foo.rs --crate-type=dylib -o $(TMPDIR)/$(call BIN,foo)\n+\trm $(TMPDIR)/$(call BIN,foo)\n+\trm -f $(TMPDIR)/foo.{exp,lib}\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n \t$(RUSTC) foo.rs --crate-type=staticlib -o $(TMPDIR)/foo\n \trm $(TMPDIR)/foo\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n-\t$(RUSTC) foo.rs --crate-type=bin -o $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --crate-type=bin -o $(TMPDIR)/$(call BIN,foo)\n \trm $(TMPDIR)/$(call BIN,foo)\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n \t$(RUSTC) foo.rs --emit=asm,llvm-ir,llvm-bc,obj,link --crate-type=staticlib\n \trm $(TMPDIR)/bar.ll\n \trm $(TMPDIR)/bar.s\n \trm $(TMPDIR)/bar.o\n-\trm $(TMPDIR)/$(call STATICLIB_GLOB,bar)\n+\trm $(TMPDIR)/libbar.a\n \tmv $(TMPDIR)/bar.bc $(TMPDIR)/foo.bc\n \t# Don't check that the $(TMPDIR) is empty - we left `foo.bc` for later\n \t# comparison."}, {"sha": "b22f34fa35b54af8b262159d26d461e6dc301db6", "filename": "src/test/run-make/relocation-model/Makefile", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Frelocation-model%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Frelocation-model%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frelocation-model%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,15 +1,21 @@\n -include ../tools.mk\n \n-all:\n+all: others\n \t$(RUSTC) -C relocation-model=dynamic-no-pic foo.rs\n \t$(call RUN,foo)\n \n \t$(RUSTC) -C relocation-model=default foo.rs\n \t$(call RUN,foo)\n \n+\t$(RUSTC) -C relocation-model=default --crate-type=dylib foo.rs\n+\t$(RUSTC) -C relocation-model=dynamic-no-pic --crate-type=dylib foo.rs\n+\n+ifdef IS_MSVC\n+# FIXME(#28026)\n+others:\n+else\n+others:\n \t$(RUSTC) -C relocation-model=static foo.rs\n \t$(call RUN,foo)\n-\n-\t$(RUSTC) -C relocation-model=default --crate-type=dylib foo.rs\n \t$(RUSTC) -C relocation-model=static --crate-type=dylib foo.rs\n-\t$(RUSTC) -C relocation-model=dynamic-no-pic --crate-type=dylib foo.rs\n+endif"}, {"sha": "8bd05dc201fcfa1bf0b97ad3aef3aac29d029536", "filename": "src/test/run-make/static-dylib-by-default/Makefile", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fstatic-dylib-by-default%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Fstatic-dylib-by-default%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-dylib-by-default%2FMakefile?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -1,9 +1,16 @@\n -include ../tools.mk\n \n+TO_LINK := $(call DYLIB,bar)\n+ifdef IS_MSVC\n+LINK_ARG = $(TO_LINK:dll=lib)\n+else\n+LINK_ARG = $(TO_LINK)\n+endif\n+\n all:\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n-\t$(CC) main.c -o $(call RUN_BINFILE,main) -lbar $(EXTRACFLAGS)\n+\t$(CC) main.c $(call OUT_EXE,main) $(LINK_ARG) $(EXTRACFLAGS)\n \trm $(TMPDIR)/*.rlib\n \trm $(call DYLIB,foo)\n \t$(call RUN,main)"}, {"sha": "14d8e468f50d36fafc0b2bc1b90c583c73b62bfe", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8ea2198215a6988414926238cbc45e3720d18313/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=8ea2198215a6988414926238cbc45e3720d18313", "patch": "@@ -7,7 +7,7 @@ TARGET_RPATH_ENV = \\\n \n BARE_RUSTC := $(HOST_RPATH_ENV) $(RUSTC)\n RUSTC := $(BARE_RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR)\n-CC := $(CC) -L $(TMPDIR)\n+#CC := $(CC) -L $(TMPDIR)\n HTMLDOCCK := $(PYTHON) $(S)/src/etc/htmldocck.py\n \n # This is the name of the binary we will generate and run; use this\n@@ -19,8 +19,6 @@ RUN_BINFILE = $(TMPDIR)/$(1)\n # variable before running the binary.\n \n RLIB_GLOB = lib$(1)*.rlib\n-STATICLIB = $(TMPDIR)/lib$(1).a\n-STATICLIB_GLOB = lib$(1)*.a\n BIN = $(1)\n \n UNAME = $(shell uname)\n@@ -33,27 +31,48 @@ RUN = $(TARGET_RPATH_ENV) $(RUN_BINFILE)\n FAIL = $(TARGET_RPATH_ENV) $(RUN_BINFILE) && exit 1 || exit 0\n DYLIB_GLOB = lib$(1)*.dylib\n DYLIB = $(TMPDIR)/lib$(1).dylib\n-RPATH_LINK_SEARCH =\n+STATICLIB = $(TMPDIR)/lib$(1).a\n+STATICLIB_GLOB = lib$(1)*.a\n else\n ifdef IS_WINDOWS\n RUN = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(RUN_BINFILE)\n FAIL = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(RUN_BINFILE) && exit 1 || exit 0\n DYLIB_GLOB = $(1)*.dll\n DYLIB = $(TMPDIR)/$(1).dll\n+STATICLIB = $(TMPDIR)/$(1).lib\n+STATICLIB_GLOB = $(1)*.lib\n BIN = $(1).exe\n-RPATH_LINK_SEARCH =\n else\n RUN = $(TARGET_RPATH_ENV) $(RUN_BINFILE)\n FAIL = $(TARGET_RPATH_ENV) $(RUN_BINFILE) && exit 1 || exit 0\n DYLIB_GLOB = lib$(1)*.so\n DYLIB = $(TMPDIR)/lib$(1).so\n-RPATH_LINK_SEARCH = -Wl,-rpath-link=$(1)\n+STATICLIB = $(TMPDIR)/lib$(1).a\n+STATICLIB_GLOB = lib$(1)*.a\n+endif\n endif\n+\n+ifdef IS_MSVC\n+COMPILE_OBJ = $(CC) -c -Fo:`cygpath -w $(1)` $(2)\n+NATIVE_STATICLIB_FILE = $(1).lib\n+NATIVE_STATICLIB = $(TMPDIR)/$(call NATIVE_STATICLIB_FILE,$(1))\n+OUT_EXE=-Fe:`cygpath -w $(TMPDIR)/$(call BIN,$(1))` \\\n+\t-Fo:`cygpath -w $(TMPDIR)/$(1).obj`\n+else\n+COMPILE_OBJ = $(CC) -c -o $(1) $(2)\n+NATIVE_STATICLIB_FILE = lib$(1).a\n+NATIVE_STATICLIB = $(call STATICLIB,$(1))\n+OUT_EXE=-o $(TMPDIR)/$(1)\n endif\n \n+\n # Extra flags needed to compile a working executable with the standard library\n ifdef IS_WINDOWS\n+ifdef IS_MSVC\n+\tEXTRACFLAGS := ws2_32.lib userenv.lib shell32.lib advapi32.lib\n+else\n \tEXTRACFLAGS := -lws2_32 -luserenv\n+endif\n else\n ifeq ($(UNAME),Darwin)\n else\n@@ -80,12 +99,20 @@ REMOVE_RLIBS      = rm $(TMPDIR)/$(call RLIB_GLOB,$(1))\n \n %.a: %.o\n \tar crus $@ $<\n+%.lib: lib%.o\n+\tar crus $@ $<\n %.dylib: %.o\n \t$(CC) -dynamiclib -Wl,-dylib -o $@ $<\n %.so: %.o\n \t$(CC) -o $@ $< -shared\n+\n+ifdef IS_MSVC\n+%.dll: lib%.o\n+\t$(CC) $< -link -dll -out:`cygpath -w $@`\n+else\n %.dll: lib%.o\n \t$(CC) -o $@ $< -shared\n+endif\n \n $(TMPDIR)/lib%.o: %.c\n-\t$(CC) -c -o $@ $<\n+\t$(call COMPILE_OBJ,$@,$<)"}]}