{"sha": "c8257488c178d1828159ae931a5539c9a10219f8", "node_id": "C_kwDOAAsO6NoAKGM4MjU3NDg4YzE3OGQxODI4MTU5YWU5MzFhNTUzOWM5YTEwMjE5Zjg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-25T13:34:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-25T13:34:18Z"}, "message": "Merge #11549\n\n11549: feat: support concat_bytes r=jonas-schievink a=ihciah\n\nSupport `concat_bytes`.\r\nSolve #11544.\n\nCo-authored-by: ihciah <ihciah@gmail.com>", "tree": {"sha": "51eca3fe009cffbc824904ec4d2c7da652dd079d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51eca3fe009cffbc824904ec4d2c7da652dd079d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8257488c178d1828159ae931a5539c9a10219f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiGNraCRBK7hj4Ov3rIwAAltQIAB6Ru9Xneb6AB9I9xVw3aFKP\nTrO8w3oA4z+HblWjrnep26kPq6PyglAp9Hi9zKE7gySdRl5tKkJG00P4OQRLXKyM\nLQsqVa0/xP/1+p3tiYd2/0amSz0b7mTuzmb/bX3T8qDGqbZ+yIDxhkcjXWrmrLIE\nREMaXer5RBl4oMa3fZ6y+YU/Svj2NMvn7y0vJ4NwRHoO3YQFGsZ14X13TrWuuwSl\nH/v6+ClX/ZhX4zc815O6UOZ5UDKlYnUsiTmCnvSB3ViQPexTrL8uXa1Fa3NCaJnv\nLjWI0tteyPMFxz6W1L0eo1oPuuayGskDcj+B1aybA+FFijhoN0WmXQeGK5XCjm8=\n=DXtw\n-----END PGP SIGNATURE-----\n", "payload": "tree 51eca3fe009cffbc824904ec4d2c7da652dd079d\nparent 1d5df5ea941ec814649ebe5e16c8c324fdc9cebd\nparent 494fab202a7ec00f79636dcece8ca5e2742efff0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645796058 +0000\ncommitter GitHub <noreply@github.com> 1645796058 +0000\n\nMerge #11549\n\n11549: feat: support concat_bytes r=jonas-schievink a=ihciah\n\nSupport `concat_bytes`.\r\nSolve #11544.\n\nCo-authored-by: ihciah <ihciah@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8257488c178d1828159ae931a5539c9a10219f8", "html_url": "https://github.com/rust-lang/rust/commit/c8257488c178d1828159ae931a5539c9a10219f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8257488c178d1828159ae931a5539c9a10219f8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d5df5ea941ec814649ebe5e16c8c324fdc9cebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5df5ea941ec814649ebe5e16c8c324fdc9cebd", "html_url": "https://github.com/rust-lang/rust/commit/1d5df5ea941ec814649ebe5e16c8c324fdc9cebd"}, {"sha": "494fab202a7ec00f79636dcece8ca5e2742efff0", "url": "https://api.github.com/repos/rust-lang/rust/commits/494fab202a7ec00f79636dcece8ca5e2742efff0", "html_url": "https://github.com/rust-lang/rust/commit/494fab202a7ec00f79636dcece8ca5e2742efff0"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "919dd6c07f039a3c9977ec4870c4779fac429d98", "filename": "crates/hir_def/src/macro_expansion_tests/builtin_fn_macro.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c8257488c178d1828159ae931a5539c9a10219f8/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8257488c178d1828159ae931a5539c9a10219f8/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs?ref=c8257488c178d1828159ae931a5539c9a10219f8", "patch": "@@ -313,6 +313,24 @@ fn main() { \"foor0bar\\nfalse\"; }\n     );\n }\n \n+#[test]\n+fn test_concat_bytes_expand() {\n+    check(\n+        r##\"\n+#[rustc_builtin_macro]\n+macro_rules! concat_bytes {}\n+\n+fn main() { concat_bytes!(b'A', b\"BC\", [68, b'E', 70]); }\n+\"##,\n+        expect![[r##\"\n+#[rustc_builtin_macro]\n+macro_rules! concat_bytes {}\n+\n+fn main() { [b'A', 66, 67, 68, b'E', 70]; }\n+\"##]],\n+    );\n+}\n+\n #[test]\n fn test_concat_with_captured_expr() {\n     check("}, {"sha": "bf6cc9989a6bfa6d873c2885bb8a8ba3f5d39e5a", "filename": "crates/hir_expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c8257488c178d1828159ae931a5539c9a10219f8/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8257488c178d1828159ae931a5539c9a10219f8/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=c8257488c178d1828159ae931a5539c9a10219f8", "patch": "@@ -121,6 +121,7 @@ register_builtin! {\n     (compile_error, CompileError) => compile_error_expand,\n     (concat, Concat) => concat_expand,\n     (concat_idents, ConcatIdents) => concat_idents_expand,\n+    (concat_bytes, ConcatBytes) => concat_bytes_expand,\n     (include, Include) => include_expand,\n     (include_bytes, IncludeBytes) => include_bytes_expand,\n     (include_str, IncludeStr) => include_str_expand,\n@@ -359,6 +360,12 @@ fn unquote_str(lit: &tt::Literal) -> Option<String> {\n     token.value().map(|it| it.into_owned())\n }\n \n+fn unquote_byte_string(lit: &tt::Literal) -> Option<Vec<u8>> {\n+    let lit = ast::make::tokens::literal(&lit.to_string());\n+    let token = ast::ByteString::cast(lit)?;\n+    token.value().map(|it| it.into_owned())\n+}\n+\n fn compile_error_expand(\n     _db: &dyn AstDatabase,\n     _id: MacroCallId,\n@@ -422,6 +429,74 @@ fn concat_expand(\n     ExpandResult { value: ExpandedEager::new(quote!(#text)), err }\n }\n \n+fn concat_bytes_expand(\n+    _db: &dyn AstDatabase,\n+    _arg_id: MacroCallId,\n+    tt: &tt::Subtree,\n+) -> ExpandResult<ExpandedEager> {\n+    let mut bytes = Vec::new();\n+    let mut err = None;\n+    for (i, t) in tt.token_trees.iter().enumerate() {\n+        match t {\n+            tt::TokenTree::Leaf(tt::Leaf::Literal(lit)) => {\n+                let token = ast::make::tokens::literal(&lit.to_string());\n+                match token.kind() {\n+                    syntax::SyntaxKind::BYTE => bytes.push(token.text().to_string()),\n+                    syntax::SyntaxKind::BYTE_STRING => {\n+                        let components = unquote_byte_string(lit).unwrap_or_else(|| Vec::new());\n+                        components.into_iter().for_each(|x| bytes.push(x.to_string()));\n+                    }\n+                    _ => {\n+                        err.get_or_insert(mbe::ExpandError::UnexpectedToken.into());\n+                        break;\n+                    }\n+                }\n+            }\n+            tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) if i % 2 == 1 && punct.char == ',' => (),\n+            tt::TokenTree::Subtree(tree)\n+                if tree.delimiter_kind() == Some(tt::DelimiterKind::Bracket) =>\n+            {\n+                if let Err(e) = concat_bytes_expand_subtree(tree, &mut bytes) {\n+                    err.get_or_insert(e);\n+                    break;\n+                }\n+            }\n+            _ => {\n+                err.get_or_insert(mbe::ExpandError::UnexpectedToken.into());\n+                break;\n+            }\n+        }\n+    }\n+    let ident = tt::Ident { text: bytes.join(\", \").into(), id: tt::TokenId::unspecified() };\n+    ExpandResult { value: ExpandedEager::new(quote!([#ident])), err }\n+}\n+\n+fn concat_bytes_expand_subtree(\n+    tree: &tt::Subtree,\n+    bytes: &mut Vec<String>,\n+) -> Result<(), ExpandError> {\n+    for (ti, tt) in tree.token_trees.iter().enumerate() {\n+        match tt {\n+            tt::TokenTree::Leaf(tt::Leaf::Literal(lit)) => {\n+                let lit = ast::make::tokens::literal(&lit.to_string());\n+                match lit.kind() {\n+                    syntax::SyntaxKind::BYTE | syntax::SyntaxKind::INT_NUMBER => {\n+                        bytes.push(lit.text().to_string())\n+                    }\n+                    _ => {\n+                        return Err(mbe::ExpandError::UnexpectedToken.into());\n+                    }\n+                }\n+            }\n+            tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) if ti % 2 == 1 && punct.char == ',' => (),\n+            _ => {\n+                return Err(mbe::ExpandError::UnexpectedToken.into());\n+            }\n+        }\n+    }\n+    Ok(())\n+}\n+\n fn concat_idents_expand(\n     _db: &dyn AstDatabase,\n     _arg_id: MacroCallId,"}, {"sha": "7deec253da806f48d014815b8d0cee1762419ecd", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8257488c178d1828159ae931a5539c9a10219f8/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8257488c178d1828159ae931a5539c9a10219f8/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=c8257488c178d1828159ae931a5539c9a10219f8", "patch": "@@ -233,6 +233,7 @@ pub mod known {\n         column,\n         compile_error,\n         concat_idents,\n+        concat_bytes,\n         concat,\n         const_format_args,\n         core_panic,"}]}