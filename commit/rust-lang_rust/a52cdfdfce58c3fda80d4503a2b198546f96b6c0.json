{"sha": "a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MmNkZmRmY2U1OGMzZmRhODBkNDUwM2EyYjE5ODU0NmY5NmI2YzA=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-12-27T05:48:35Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-01-01T10:10:43Z"}, "message": "rustc::driver: Remove two @s", "tree": {"sha": "f7664559227c48e492f216964ea94fb2ddd87663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7664559227c48e492f216964ea94fb2ddd87663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "html_url": "https://github.com/rust-lang/rust/commit/a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e61937a6bf5e3a612dd8e2aa92061345f73d4b30", "url": "https://api.github.com/repos/rust-lang/rust/commits/e61937a6bf5e3a612dd8e2aa92061345f73d4b30", "html_url": "https://github.com/rust-lang/rust/commit/e61937a6bf5e3a612dd8e2aa92061345f73d4b30"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "7d5846ebd6ab67770e41a7886cfd8470bdfc9651", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "patch": "@@ -686,7 +686,7 @@ pub fn host_triple() -> ~str {\n     (env!(\"CFG_COMPILER\")).to_owned()\n }\n \n-pub fn build_session_options(binary: @str,\n+pub fn build_session_options(binary: ~str,\n                              matches: &getopts::Matches,\n                              demitter: @diagnostic::Emitter)\n                              -> @session::options {\n@@ -1105,7 +1105,7 @@ pub fn build_output_filenames(input: &input,\n     }\n }\n \n-pub fn early_error(emitter: @diagnostic::Emitter, msg: &str) -> ! {\n+pub fn early_error(emitter: &diagnostic::Emitter, msg: &str) -> ! {\n     emitter.emit(None, msg, diagnostic::fatal);\n     fail!();\n }\n@@ -1135,7 +1135,7 @@ mod test {\n               Err(f) => fail!(\"test_switch_implies_cfg_test: {}\", f.to_err_msg())\n             };\n         let sessopts = build_session_options(\n-            @\"rustc\",\n+            ~\"rustc\",\n             matches,\n             @diagnostic::DefaultEmitter as @diagnostic::Emitter);\n         let sess = build_session(sessopts,\n@@ -1158,7 +1158,7 @@ mod test {\n               }\n             };\n         let sessopts = build_session_options(\n-            @\"rustc\",\n+            ~\"rustc\",\n             matches,\n             @diagnostic::DefaultEmitter as @diagnostic::Emitter);\n         let sess = build_session(sessopts,"}, {"sha": "55822b66ae45074f72367336f0068ceb3e4b4c62", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "patch": "@@ -163,7 +163,7 @@ pub struct options {\n     // will be added to the crate AST node.  This should not be used for\n     // anything except building the full crate config prior to parsing.\n     cfg: ast::CrateConfig,\n-    binary: @str,\n+    binary: ~str,\n     test: bool,\n     parse_only: bool,\n     no_trans: bool,\n@@ -395,7 +395,7 @@ pub fn basic_options() -> @options {\n         target_cpu: ~\"generic\",\n         target_feature: ~\"\",\n         cfg: ~[],\n-        binary: @\"rustc\",\n+        binary: ~\"rustc\",\n         test: false,\n         parse_only: false,\n         no_trans: false,"}, {"sha": "5ce25513399b3bc8e29af6e078a8f1b25c3f6046", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "patch": "@@ -197,7 +197,7 @@ pub fn describe_debug_flags() {\n \n pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n     let mut args = args.to_owned();\n-    let binary = args.shift().to_managed();\n+    let binary = args.shift();\n \n     if args.is_empty() { usage(binary); return; }\n "}, {"sha": "63b923943656504fdc5123d4656e23d5e67370cf", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "patch": "@@ -49,7 +49,7 @@ fn get_ast_and_resolve(cpath: &Path,\n     let input = file_input(cpath.clone());\n \n     let sessopts = @driver::session::options {\n-        binary: @\"rustdoc\",\n+        binary: ~\"rustdoc\",\n         maybe_sysroot: Some(@os::self_exe_path().unwrap().dir_path()),\n         addl_lib_search_paths: @RefCell::new(libs),\n         outputs: ~[driver::session::OutputDylib],"}, {"sha": "480ace2e4194824a13b3a55f3a5b41cae9f757c6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "patch": "@@ -38,7 +38,7 @@ pub fn run(input: &str, matches: &getopts::Matches) -> int {\n     let libs = @RefCell::new(libs.move_iter().collect());\n \n     let sessopts = @session::options {\n-        binary: @\"rustdoc\",\n+        binary: ~\"rustdoc\",\n         maybe_sysroot: Some(@os::self_exe_path().unwrap().dir_path()),\n         addl_lib_search_paths: libs,\n         outputs: ~[session::OutputDylib],\n@@ -98,7 +98,7 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>) {\n     let input = driver::str_input(test);\n \n     let sessopts = @session::options {\n-        binary: @\"rustdoctest\",\n+        binary: ~\"rustdoctest\",\n         maybe_sysroot: Some(@os::self_exe_path().unwrap().dir_path()),\n         addl_lib_search_paths: @RefCell::new(libs),\n         outputs: ~[session::OutputExecutable],"}, {"sha": "ae58495fa8a7a1a7b3493a8ac9de49d772aa8700", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "patch": "@@ -101,7 +101,7 @@ impl<'a> PkgScript<'a> {\n                  workspace: &Path,\n                  id: &'a CrateId) -> PkgScript<'a> {\n         // Get the executable name that was invoked\n-        let binary = os::args()[0].to_managed();\n+        let binary = os::args()[0].to_owned();\n         // Build the rustc session data structures to pass\n         // to the compiler\n         debug!(\"pkgscript parse: {}\", sysroot.display());"}, {"sha": "2ceed4f3df7e4803e4de3e3e731731da98d198a1", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "patch": "@@ -1823,7 +1823,7 @@ fn test_linker_build() {\n     let workspace = create_local_package(&p_id);\n     let workspace = workspace.path();\n     let matches = getopts([], optgroups());\n-    let options = build_session_options(@\"rustpkg\",\n+    let options = build_session_options(~\"rustpkg\",\n                                         matches.as_ref().unwrap(),\n                                         @diagnostic::DefaultEmitter as\n                                             @diagnostic::Emitter);"}, {"sha": "87657f729f916c9fc3c28441459a8786ed85ee5b", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52cdfdfce58c3fda80d4503a2b198546f96b6c0/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "patch": "@@ -189,7 +189,7 @@ pub fn compile_input(context: &BuildContext,\n     // Make the output directory if it doesn't exist already\n     fs::mkdir_recursive(&out_dir, io::UserRWX);\n \n-    let binary = os::args()[0].to_managed();\n+    let binary = os::args()[0].to_owned();\n \n     debug!(\"flags: {}\", flags.connect(\" \"));\n     debug!(\"cfgs: {}\", cfgs.connect(\" \"));"}]}