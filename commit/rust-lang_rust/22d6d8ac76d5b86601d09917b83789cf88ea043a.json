{"sha": "22d6d8ac76d5b86601d09917b83789cf88ea043a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZDZkOGFjNzZkNWI4NjYwMWQwOTkxN2I4Mzc4OWNmODhlYTA0M2E=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-23T13:37:28Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-06T13:59:08Z"}, "message": "`#[rustc_transparent_macro]` -> `#[rustc_macro_transparency = ...]`", "tree": {"sha": "1a3074676ea7bd9789c1572ce0ad6d06d4768408", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a3074676ea7bd9789c1572ce0ad6d06d4768408"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d6d8ac76d5b86601d09917b83789cf88ea043a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d6d8ac76d5b86601d09917b83789cf88ea043a", "html_url": "https://github.com/rust-lang/rust/commit/22d6d8ac76d5b86601d09917b83789cf88ea043a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d6d8ac76d5b86601d09917b83789cf88ea043a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15042a3c1c5ec836d8aa5473a405ee245aec1a3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/15042a3c1c5ec836d8aa5473a405ee245aec1a3a", "html_url": "https://github.com/rust-lang/rust/commit/15042a3c1c5ec836d8aa5473a405ee245aec1a3a"}], "stats": {"total": 108, "additions": 83, "deletions": 25}, "files": [{"sha": "cec59b8a40e9f9c5f97e066ce63b7fffeea4620a", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=22d6d8ac76d5b86601d09917b83789cf88ea043a", "patch": "@@ -380,13 +380,17 @@ pub fn compile(\n     let expander: Box<_> =\n         Box::new(MacroRulesMacroExpander { name: def.ident, lhses, rhses, valid });\n \n-    let default_transparency = if attr::contains_name(&def.attrs, sym::rustc_transparent_macro) {\n-        Transparency::Transparent\n-    } else if body.legacy {\n-        Transparency::SemiTransparent\n-    } else {\n-        Transparency::Opaque\n-    };\n+    let value_str = attr::first_attr_value_str_by_name(&def.attrs, sym::rustc_macro_transparency);\n+    let default_transparency = value_str.and_then(|s| Some(match &*s.as_str() {\n+        \"transparent\" => Transparency::Transparent,\n+        \"semitransparent\" => Transparency::SemiTransparent,\n+        \"opaque\" => Transparency::Opaque,\n+        _ => {\n+            let msg = format!(\"unknown macro transparency: `{}`\", s);\n+            sess.span_diagnostic.span_err(def.span, &msg);\n+            return None;\n+        }\n+    })).unwrap_or(if body.legacy { Transparency::SemiTransparent } else { Transparency::Opaque });\n \n     let allow_internal_unstable =\n         attr::find_by_name(&def.attrs, sym::allow_internal_unstable).map(|attr| {"}, {"sha": "1329e6f7fce83e5ca231e4a42c0e1a025414ffc4", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=22d6d8ac76d5b86601d09917b83789cf88ea043a", "patch": "@@ -1313,7 +1313,9 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n                                     \"the `#[rustc_test_marker]` attribute \\\n                                     is used internally to track tests\",\n                                     cfg_fn!(rustc_attrs))),\n-    (sym::rustc_transparent_macro, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_macro_transparency, Whitelisted, template!(NameValueStr:\n+                                                           \"transparent|semitransparent|opaque\"),\n+                                                Gated(Stability::Unstable,\n                                                 sym::rustc_attrs,\n                                                 \"used internally for testing macro hygiene\",\n                                                     cfg_fn!(rustc_attrs))),"}, {"sha": "410f4b36b67f29c1976ddf890df586237873a40e", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=22d6d8ac76d5b86601d09917b83789cf88ea043a", "patch": "@@ -557,6 +557,7 @@ symbols! {\n         rustc_layout,\n         rustc_layout_scalar_valid_range_end,\n         rustc_layout_scalar_valid_range_start,\n+        rustc_macro_transparency,\n         rustc_mir,\n         rustc_nonnull_optimization_guaranteed,\n         rustc_object_lifetime_default,\n@@ -579,7 +580,6 @@ symbols! {\n         rustc_synthetic,\n         rustc_test_marker,\n         rustc_then_this_would_need,\n-        rustc_transparent_macro,\n         rustc_variance,\n         rustdoc,\n         rust_eh_personality,"}, {"sha": "37de27ee8005da3a26f9b59cbb3ddeec4e338f7d", "filename": "src/test/ui/hygiene/auxiliary/transparent-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Ftransparent-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Ftransparent-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Ftransparent-basic.rs?ref=22d6d8ac76d5b86601d09917b83789cf88ea043a", "patch": "@@ -1,6 +1,6 @@\n #![feature(decl_macro, rustc_attrs)]\n \n-#[rustc_transparent_macro]\n+#[rustc_macro_transparency = \"transparent\"]\n pub macro dollar_crate() {\n     let s = $crate::S;\n }"}, {"sha": "8826293542c9736e0b5944885ee56a2eb58b623a", "filename": "src/test/ui/hygiene/generate-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.rs?ref=22d6d8ac76d5b86601d09917b83789cf88ea043a", "patch": "@@ -11,7 +11,7 @@ macro genmod($FromOutside: ident, $Outer: ident) {\n     }\n }\n \n-#[rustc_transparent_macro]\n+#[rustc_macro_transparency = \"transparent\"]\n macro genmod_transparent() {\n     type A = FromOutside;\n     struct Outer;"}, {"sha": "a0a3d411d28b26b55907281b18e93f261fbb76d6", "filename": "src/test/ui/hygiene/rustc-macro-transparency.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.rs?ref=22d6d8ac76d5b86601d09917b83789cf88ea043a", "patch": "@@ -0,0 +1,31 @@\n+#![feature(decl_macro, rustc_attrs)]\n+\n+#[rustc_macro_transparency = \"transparent\"]\n+macro transparent() {\n+    struct Transparent;\n+    let transparent = 0;\n+}\n+#[rustc_macro_transparency = \"semitransparent\"]\n+macro semitransparent() {\n+    struct SemiTransparent;\n+    let semitransparent = 0;\n+}\n+#[rustc_macro_transparency = \"opaque\"]\n+macro opaque() {\n+    struct Opaque;\n+    let opaque = 0;\n+}\n+\n+fn main() {\n+    transparent!();\n+    semitransparent!();\n+    opaque!();\n+\n+    Transparent; // OK\n+    SemiTransparent; // OK\n+    Opaque; //~ ERROR cannot find value `Opaque` in this scope\n+\n+    transparent; // OK\n+    semitransparent; //~ ERROR cannot find value `semitransparent` in this scope\n+    opaque; //~ ERROR cannot find value `opaque` in this scope\n+}"}, {"sha": "2a9df221e2c87e115190dd23b25c265ba1f615a7", "filename": "src/test/ui/hygiene/rustc-macro-transparency.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr?ref=22d6d8ac76d5b86601d09917b83789cf88ea043a", "patch": "@@ -0,0 +1,21 @@\n+error[E0425]: cannot find value `Opaque` in this scope\n+  --> $DIR/rustc-macro-transparency.rs:26:5\n+   |\n+LL |     Opaque;\n+   |     ^^^^^^ help: a local variable with a similar name exists: `opaque`\n+\n+error[E0425]: cannot find value `semitransparent` in this scope\n+  --> $DIR/rustc-macro-transparency.rs:29:5\n+   |\n+LL |     semitransparent;\n+   |     ^^^^^^^^^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `opaque` in this scope\n+  --> $DIR/rustc-macro-transparency.rs:30:5\n+   |\n+LL |     opaque;\n+   |     ^^^^^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "69dfc524989a44c98c50a5f3f33ecb18a1262dd0", "filename": "src/test/ui/hygiene/transparent-basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Ftest%2Fui%2Fhygiene%2Ftransparent-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Ftest%2Fui%2Fhygiene%2Ftransparent-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftransparent-basic.rs?ref=22d6d8ac76d5b86601d09917b83789cf88ea043a", "patch": "@@ -5,12 +5,12 @@\n \n extern crate transparent_basic;\n \n-#[rustc_transparent_macro]\n+#[rustc_macro_transparency = \"transparent\"]\n macro binding() {\n     let x = 10;\n }\n \n-#[rustc_transparent_macro]\n+#[rustc_macro_transparency = \"transparent\"]\n macro label() {\n     break 'label\n }"}, {"sha": "a8818507d75d21cf07737c97410b5cdb7e6fd0ca", "filename": "src/test/ui/macros/restricted-shadowing-modern.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d6d8ac76d5b86601d09917b83789cf88ea043a/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.rs?ref=22d6d8ac76d5b86601d09917b83789cf88ea043a", "patch": "@@ -80,17 +80,17 @@\n struct Right;\n // struct Wrong; // not defined\n \n-#[rustc_transparent_macro]\n+#[rustc_macro_transparency = \"transparent\"]\n macro include() {\n-    #[rustc_transparent_macro]\n+    #[rustc_macro_transparency = \"transparent\"]\n     macro gen_outer() {\n         macro m() { Wrong }\n     }\n-    #[rustc_transparent_macro]\n+    #[rustc_macro_transparency = \"transparent\"]\n     macro gen_inner() {\n         macro m() { Right }\n     }\n-    #[rustc_transparent_macro]\n+    #[rustc_macro_transparency = \"transparent\"]\n     macro gen_invoc() {\n         m!()\n     }\n@@ -100,7 +100,7 @@ macro include() {\n     fn check1() {\n         macro m() {}\n         {\n-            #[rustc_transparent_macro]\n+            #[rustc_macro_transparency = \"transparent\"]\n             macro gen_gen_inner_invoc() {\n                 gen_inner!();\n                 m!(); //~ ERROR `m` is ambiguous\n@@ -112,7 +112,7 @@ macro include() {\n     fn check5() {\n         macro m() { Wrong }\n         {\n-            #[rustc_transparent_macro]\n+            #[rustc_macro_transparency = \"transparent\"]\n             macro gen_inner_invoc() {\n                 macro m() { Right }\n                 m!(); // OK\n@@ -124,7 +124,7 @@ macro include() {\n     fn check9() {\n         macro m() { Wrong }\n         {\n-            #[rustc_transparent_macro]\n+            #[rustc_macro_transparency = \"transparent\"]\n             macro gen_inner_gen_invoc() {\n                 macro m() { Right }\n                 gen_invoc!(); // OK\n@@ -145,7 +145,7 @@ macro include() {\n         macro m() {}\n         {\n             gen_inner!();\n-            #[rustc_transparent_macro]\n+            #[rustc_macro_transparency = \"transparent\"]\n             macro gen_invoc() { m!() } //~ ERROR `m` is ambiguous\n             gen_invoc!();\n         }\n@@ -186,7 +186,7 @@ macro include() {\n     fn check52() {\n         gen_outer!();\n         {\n-            #[rustc_transparent_macro]\n+            #[rustc_macro_transparency = \"transparent\"]\n             macro gen_gen_inner_invoc() {\n                 gen_inner!();\n                 m!(); //~ ERROR `m` is ambiguous\n@@ -198,7 +198,7 @@ macro include() {\n     fn check56() {\n         gen_outer!();\n         {\n-            #[rustc_transparent_macro]\n+            #[rustc_macro_transparency = \"transparent\"]\n             macro gen_inner_invoc() {\n                 macro m() { Right }\n                 m!(); // OK\n@@ -218,7 +218,7 @@ macro include() {\n     fn check60() {\n         gen_outer!();\n         {\n-            #[rustc_transparent_macro]\n+            #[rustc_macro_transparency = \"transparent\"]\n             macro gen_inner_gen_invoc() {\n                 macro m() { Right }\n                 gen_invoc!(); // OK\n@@ -231,7 +231,7 @@ macro include() {\n         gen_outer!();\n         {\n             gen_inner!();\n-            #[rustc_transparent_macro]\n+            #[rustc_macro_transparency = \"transparent\"]\n             macro gen_invoc() { m!() } //~ ERROR `m` is ambiguous\n             gen_invoc!();\n         }"}]}