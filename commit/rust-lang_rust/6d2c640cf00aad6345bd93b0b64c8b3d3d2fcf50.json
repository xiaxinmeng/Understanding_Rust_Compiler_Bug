{"sha": "6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMmM2NDBjZjAwYWFkNjM0NWJkOTNiMGI2NGM4YjNkM2QyZmNmNTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T17:15:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T22:49:11Z"}, "message": "rollup merge of #23886: demelev/remove_as_slice_usage", "tree": {"sha": "bd5aad8208dbc01ab2834d2a1e0444444ce18959", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd5aad8208dbc01ab2834d2a1e0444444ce18959"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "html_url": "https://github.com/rust-lang/rust/commit/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e0bda0448283c3045c1e96b99e90ebbc3746e12", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e0bda0448283c3045c1e96b99e90ebbc3746e12", "html_url": "https://github.com/rust-lang/rust/commit/5e0bda0448283c3045c1e96b99e90ebbc3746e12"}, {"sha": "df65f59fe9dd856c96a383c01067a176fee0dbb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/df65f59fe9dd856c96a383c01067a176fee0dbb6", "html_url": "https://github.com/rust-lang/rust/commit/df65f59fe9dd856c96a383c01067a176fee0dbb6"}], "stats": {"total": 83, "additions": 41, "deletions": 42}, "files": [{"sha": "855c86f08e7451acca9f0b042c4ed33653cf07a6", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -110,7 +110,7 @@ use heap::deallocate;\n ///         let child_numbers = shared_numbers.clone();\n ///\n ///         thread::spawn(move || {\n-///             let local_numbers = child_numbers.as_slice();\n+///             let local_numbers = &child_numbers[..];\n ///\n ///             // Work with the local numbers\n ///         });"}, {"sha": "929c97dceb26e797fd5b291ec7599a1282ba2ae2", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -557,7 +557,6 @@ impl<T> [T] {\n     /// ```rust\n     /// # #![feature(core)]\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n-    /// let s = s.as_slice();\n     ///\n     /// let seek = 13;\n     /// assert_eq!(s.binary_search_by(|probe| probe.cmp(&seek)), Ok(9));\n@@ -924,7 +923,6 @@ impl<T> [T] {\n     /// ```rust\n     /// # #![feature(core)]\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n-    /// let s = s.as_slice();\n     ///\n     /// assert_eq!(s.binary_search(&13),  Ok(9));\n     /// assert_eq!(s.binary_search(&4),   Err(7));"}, {"sha": "f517ce7d535d53c0cc3e80fdd8f165d71ba30aba", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -1470,12 +1470,12 @@ impl str {\n     /// let gr1 = \"a\\u{310}e\\u{301}o\\u{308}\\u{332}\".graphemes(true).collect::<Vec<&str>>();\n     /// let b: &[_] = &[\"a\\u{310}\", \"e\\u{301}\", \"o\\u{308}\\u{332}\"];\n     ///\n-    /// assert_eq!(gr1.as_slice(), b);\n+    /// assert_eq!(&gr1[..], b);\n     ///\n     /// let gr2 = \"a\\r\\nb\ud83c\uddf7\ud83c\uddfa\ud83c\uddf8\ud83c\uddf9\".graphemes(true).collect::<Vec<&str>>();\n     /// let b: &[_] = &[\"a\", \"\\r\\n\", \"b\", \"\ud83c\uddf7\ud83c\uddfa\ud83c\uddf8\ud83c\uddf9\"];\n     ///\n-    /// assert_eq!(gr2.as_slice(), b);\n+    /// assert_eq!(&gr2[..], b);\n     /// ```\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may only be provided by libunicode\")]\n@@ -1493,7 +1493,7 @@ impl str {\n     /// let gr_inds = \"a\u0310e\u0301o\u0308\u0332\\r\\n\".grapheme_indices(true).collect::<Vec<(usize, &str)>>();\n     /// let b: &[_] = &[(0, \"a\u0310\"), (3, \"e\u0301\"), (6, \"o\u0308\u0332\"), (11, \"\\r\\n\")];\n     ///\n-    /// assert_eq!(gr_inds.as_slice(), b);\n+    /// assert_eq!(&gr_inds[..], b);\n     /// ```\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may only be provided by libunicode\")]"}, {"sha": "2adece30307290e8c672881aa0f7189de8012a11", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -93,7 +93,7 @@ impl String {\n     /// ```\n     /// # #![feature(collections, core)]\n     /// let s = String::from_str(\"hello\");\n-    /// assert_eq!(s.as_slice(), \"hello\");\n+    /// assert_eq!(&s[..], \"hello\");\n     /// ```\n     #[inline]\n     #[unstable(feature = \"collections\","}, {"sha": "242efbcd45b22b59b7f6f2649e4311c924dbd890", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -823,13 +823,13 @@ impl<T> Vec<T> {\n     /// # #![feature(collections, core)]\n     /// let v = vec![0, 1, 2];\n     /// let w = v.map_in_place(|i| i + 3);\n-    /// assert_eq!(w.as_slice(), [3, 4, 5].as_slice());\n+    /// assert_eq!(&w[..], &[3, 4, 5]);\n     ///\n     /// #[derive(PartialEq, Debug)]\n     /// struct Newtype(u8);\n     /// let bytes = vec![0x11, 0x22];\n     /// let newtyped_bytes = bytes.map_in_place(|x| Newtype(x));\n-    /// assert_eq!(newtyped_bytes.as_slice(), [Newtype(0x11), Newtype(0x22)].as_slice());\n+    /// assert_eq!(&newtyped_bytes[..], &[Newtype(0x11), Newtype(0x22)]);\n     /// ```\n     #[unstable(feature = \"collections\",\n                reason = \"API may change to provide stronger guarantees\")]"}, {"sha": "6083f03477ca251a7c26546fbfdee1b8e0cc653e", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -527,7 +527,8 @@ impl<T> VecDeque<T> {\n     /// buf.push_back(3);\n     /// buf.push_back(4);\n     /// let b: &[_] = &[&5, &3, &4];\n-    /// assert_eq!(buf.iter().collect::<Vec<&i32>>().as_slice(), b);\n+    /// let c: Vec<&i32> = buf.iter().collect();\n+    /// assert_eq!(&c[..], b);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<T> {"}, {"sha": "abd1262dbf1d5805e766efd54f402d81d3b3a6d5", "filename": "src/libcollectionstest/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollectionstest%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollectionstest%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Ffmt.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -13,5 +13,5 @@ use std::fmt;\n #[test]\n fn test_format() {\n     let s = fmt::format(format_args!(\"Hello, {}!\", \"world\"));\n-    assert_eq!(s.as_slice(), \"Hello, world!\");\n+    assert_eq!(&s[..], \"Hello, world!\");\n }"}, {"sha": "24cafa9f1c64d1aad1925ab9996874efd6c0f405", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -59,7 +59,7 @@ fn test_from_elem() {\n     // Test on-heap from_elem.\n     v = vec![20; 6];\n     {\n-        let v = v.as_slice();\n+        let v = &v[..];\n         assert_eq!(v[0], 20);\n         assert_eq!(v[1], 20);\n         assert_eq!(v[2], 20);"}, {"sha": "5b390befebe83e2cbc893eb7a973239ae9e921d8", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -1470,9 +1470,9 @@ fn test_split_strator() {\n fn test_str_default() {\n     use std::default::Default;\n \n-    fn t<S: Default + Str>() {\n+    fn t<S: Default + AsRef<str>>() {\n         let s: S = Default::default();\n-        assert_eq!(s.as_slice(), \"\");\n+        assert_eq!(s.as_ref(), \"\");\n     }\n \n     t::<&str>();"}, {"sha": "7e6789c3da1c515a069d931d41fe1877abf1a9cc", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -624,7 +624,7 @@ pub trait Iterator {\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert!(it.any(|x| *x == 3));\n-    /// assert_eq!(it.as_slice(), [4, 5]);\n+    /// assert_eq!(&it[..], [4, 5]);\n     ///\n     /// ```\n     #[inline]\n@@ -648,7 +648,7 @@ pub trait Iterator {\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert_eq!(it.find(|&x| *x == 3).unwrap(), &3);\n-    /// assert_eq!(it.as_slice(), [4, 5]);\n+    /// assert_eq!(&it[..], [4, 5]);\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n@@ -672,7 +672,7 @@ pub trait Iterator {\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert_eq!(it.position(|x| *x == 3).unwrap(), 2);\n-    /// assert_eq!(it.as_slice(), [4, 5]);\n+    /// assert_eq!(&it[..], [4, 5]);\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn position<P>(&mut self, mut predicate: P) -> Option<usize> where\n@@ -702,7 +702,7 @@ pub trait Iterator {\n     /// let a = [1, 2, 2, 4, 5];\n     /// let mut it = a.iter();\n     /// assert_eq!(it.rposition(|x| *x == 2).unwrap(), 2);\n-    /// assert_eq!(it.as_slice(), [1, 2]);\n+    /// assert_eq!(&it[..], [1, 2]);\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where"}, {"sha": "74be96235d2d767918f2a3b91bcf5ad7e780eec2", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -84,7 +84,7 @@\n //!\n //!     fn edges(&'a self) -> dot::Edges<'a,Ed> {\n //!         let &Edges(ref edges) = self;\n-//!         edges.as_slice().into_cow()\n+//!         (&edges[..]).into_cow()\n //!     }\n //!\n //!     fn source(&self, e: &Ed) -> Nd { let &(s,_) = e; s }"}, {"sha": "44187a4fc99429002d292e679fb4af77bc5260d7", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -198,7 +198,7 @@ impl Rand for ChaChaRng {\n         for word in &mut key {\n             *word = other.gen();\n         }\n-        SeedableRng::from_seed(key.as_slice())\n+        SeedableRng::from_seed(&key[..])\n     }\n }\n "}, {"sha": "d859f1c109e3cf1b3936fd8a64e62696850b60ae", "filename": "src/librand/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -154,7 +154,7 @@ pub trait Rng : Sized {\n     ///\n     /// let mut v = [0; 13579];\n     /// thread_rng().fill_bytes(&mut v);\n-    /// println!(\"{:?}\", v.as_slice());\n+    /// println!(\"{:?}\", v);\n     /// ```\n     fn fill_bytes(&mut self, dest: &mut [u8]) {\n         // this could, in theory, be done by transmuting dest to a\n@@ -310,9 +310,9 @@ pub trait Rng : Sized {\n     /// let mut rng = thread_rng();\n     /// let mut y = [1, 2, 3];\n     /// rng.shuffle(&mut y);\n-    /// println!(\"{:?}\", y.as_slice());\n+    /// println!(\"{:?}\", y);\n     /// rng.shuffle(&mut y);\n-    /// println!(\"{:?}\", y.as_slice());\n+    /// println!(\"{:?}\", y);\n     /// ```\n     fn shuffle<T>(&mut self, values: &mut [T]) {\n         let mut i = values.len();"}, {"sha": "c47568520a0ba829a28f8f65d671dca20c153e3a", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -100,7 +100,7 @@\n //!     let encoded = json::encode(&object).unwrap();\n //!\n //!     // Deserialize using `json::decode`\n-//!     let decoded: TestStruct = json::decode(encoded.as_slice()).unwrap();\n+//!     let decoded: TestStruct = json::decode(&encoded[..]).unwrap();\n //! }\n //! ```\n //!"}, {"sha": "2f57d82e6f7c9502f4994d3851f150d508b95d85", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -1333,7 +1333,7 @@ mod tests {\n         check!(fs::copy(&input, &out));\n         let mut v = Vec::new();\n         check!(check!(File::open(&out)).read_to_end(&mut v));\n-        assert_eq!(v.as_slice(), b\"hello\");\n+        assert_eq!(&v[..], b\"hello\");\n \n         assert_eq!(check!(input.metadata()).permissions(),\n                    check!(out.metadata()).permissions());\n@@ -1628,7 +1628,7 @@ mod tests {\n         check!(check!(File::create(&tmpdir.join(\"test\"))).write(&bytes));\n         let mut v = Vec::new();\n         check!(check!(File::open(&tmpdir.join(\"test\"))).read_to_end(&mut v));\n-        assert!(v == bytes.as_slice());\n+        assert!(v == &bytes[..]);\n     }\n \n     #[test]"}, {"sha": "da2cfdf7681b2bd7ba8d1938423b5c51cfc3322e", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -281,19 +281,19 @@ mod tests {\n     #[test]\n     fn test_slice_reader() {\n         let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];\n-        let mut reader = &mut in_buf.as_slice();\n+        let mut reader = &mut &in_buf[..];\n         let mut buf = [];\n         assert_eq!(reader.read(&mut buf), Ok(0));\n         let mut buf = [0];\n         assert_eq!(reader.read(&mut buf), Ok(1));\n         assert_eq!(reader.len(), 7);\n         let b: &[_] = &[0];\n-        assert_eq!(buf.as_slice(), b);\n+        assert_eq!(buf, b);\n         let mut buf = [0; 4];\n         assert_eq!(reader.read(&mut buf), Ok(4));\n         assert_eq!(reader.len(), 3);\n         let b: &[_] = &[1, 2, 3, 4];\n-        assert_eq!(buf.as_slice(), b);\n+        assert_eq!(buf, b);\n         assert_eq!(reader.read(&mut buf), Ok(3));\n         let b: &[_] = &[5, 6, 7];\n         assert_eq!(&buf[..3], b);\n@@ -303,7 +303,7 @@ mod tests {\n     #[test]\n     fn test_buf_reader() {\n         let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];\n-        let mut reader = Cursor::new(in_buf.as_slice());\n+        let mut reader = Cursor::new(&in_buf[..]);\n         let mut buf = [];\n         assert_eq!(reader.read(&mut buf), Ok(0));\n         assert_eq!(reader.position(), 0);"}, {"sha": "c5fd10a9e859600e8c4eb303719e18d455023ed6", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -1639,7 +1639,7 @@ mod test {\n \n         check!(File::create(&tmpdir.join(\"test\")).write(&bytes));\n         let actual = check!(File::open(&tmpdir.join(\"test\")).read_to_end());\n-        assert!(actual == bytes.as_slice());\n+        assert!(actual == &bytes[..]);\n     }\n \n     #[test]"}, {"sha": "7d491c8e8fe29a2cdf79ca042a5d20f1cd6b459a", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -744,7 +744,7 @@ mod test {\n                     wr.write(&[5; 10]).unwrap();\n                 }\n             }\n-            assert_eq!(buf.as_slice(), [5; 100].as_slice());\n+            assert_eq!(buf.as_ref(), [5; 100].as_ref());\n         });\n     }\n "}, {"sha": "d405bde19cb726941b21999578184fa14bf41550", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -435,7 +435,7 @@ pub struct ParseError;\n ///     let tcp_l = TcpListener::bind(\"localhost:12345\");\n ///\n ///     let mut udp_s = UdpSocket::bind((\"127.0.0.1\", 23451)).unwrap();\n-///     udp_s.send_to([7, 7, 7].as_slice(), (Ipv4Addr(127, 0, 0, 1), 23451));\n+///     udp_s.send_to([7, 7, 7].as_ref(), (Ipv4Addr(127, 0, 0, 1), 23451));\n /// }\n /// ```\n pub trait ToSocketAddr {"}, {"sha": "a2129fcde5864ab37f7b24bad24360710cefaf7b", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -376,8 +376,8 @@ impl Command {\n     /// };\n     ///\n     /// println!(\"status: {}\", output.status);\n-    /// println!(\"stdout: {}\", String::from_utf8_lossy(output.output.as_slice()));\n-    /// println!(\"stderr: {}\", String::from_utf8_lossy(output.error.as_slice()));\n+    /// println!(\"stdout: {}\", String::from_utf8_lossy(output.output.as_ref()));\n+    /// println!(\"stderr: {}\", String::from_utf8_lossy(output.error.as_ref()));\n     /// ```\n     pub fn output(&self) -> IoResult<ProcessOutput> {\n         self.spawn().and_then(|p| p.wait_with_output())"}, {"sha": "2e3f47fea86d6e5c0b440fd4055d9254b56282a2", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -311,7 +311,7 @@ pub fn split_paths<T: BytesContainer>(unparsed: T) -> Vec<Path> {\n /// let key = \"PATH\";\n /// let mut paths = os::getenv_as_bytes(key).map_or(Vec::new(), os::split_paths);\n /// paths.push(Path::new(\"/home/xyz/bin\"));\n-/// os::setenv(key, os::join_paths(paths.as_slice()).unwrap());\n+/// os::setenv(key, os::join_paths(&paths[..]).unwrap());\n /// ```\n #[unstable(feature = \"os\")]\n pub fn join_paths<T: BytesContainer>(paths: &[T]) -> Result<Vec<u8>, &'static str> {"}, {"sha": "7033ab5f09fc3380e56897155449dc460cfcea49", "filename": "src/libstd/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -678,7 +678,7 @@ mod tests {\n     fn test_process_output_output() {\n         let Output {status, stdout, stderr}\n              = Command::new(\"echo\").arg(\"hello\").output().unwrap();\n-        let output_str = str::from_utf8(stdout.as_slice()).unwrap();\n+        let output_str = str::from_utf8(&stdout[..]).unwrap();\n \n         assert!(status.success());\n         assert_eq!(output_str.trim().to_string(), \"hello\");\n@@ -720,7 +720,7 @@ mod tests {\n         let prog = Command::new(\"echo\").arg(\"hello\").stdout(Stdio::piped())\n             .spawn().unwrap();\n         let Output {status, stdout, stderr} = prog.wait_with_output().unwrap();\n-        let output_str = str::from_utf8(stdout.as_slice()).unwrap();\n+        let output_str = str::from_utf8(&stdout[..]).unwrap();\n \n         assert!(status.success());\n         assert_eq!(output_str.trim().to_string(), \"hello\");\n@@ -855,7 +855,7 @@ mod tests {\n             cmd.env(\"PATH\", &p);\n         }\n         let result = cmd.output().unwrap();\n-        let output = String::from_utf8_lossy(result.stdout.as_slice()).to_string();\n+        let output = String::from_utf8_lossy(&result.stdout[..]).to_string();\n \n         assert!(output.contains(\"RUN_TEST_NEW_ENV=123\"),\n                 \"didn't find RUN_TEST_NEW_ENV inside of:\\n\\n{}\", output);\n@@ -864,7 +864,7 @@ mod tests {\n     #[test]\n     fn test_add_to_env() {\n         let result = env_cmd().env(\"RUN_TEST_NEW_ENV\", \"123\").output().unwrap();\n-        let output = String::from_utf8_lossy(result.stdout.as_slice()).to_string();\n+        let output = String::from_utf8_lossy(&result.stdout[..]).to_string();\n \n         assert!(output.contains(\"RUN_TEST_NEW_ENV=123\"),\n                 \"didn't find RUN_TEST_NEW_ENV inside of:\\n\\n{}\", output);"}, {"sha": "fdc670c6b71727474e856a01d30198dd090f087b", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -77,6 +77,6 @@ fn main() {\n     let mut tc = TestCalls { count: 1 };\n     // we should never get use this filename, but lets make sure they are valid args.\n     let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n-    rustc_driver::run_compiler(args.as_slice(), &mut tc);\n+    rustc_driver::run_compiler(&args[..], &mut tc);\n     assert!(tc.count == 30);\n }"}, {"sha": "63525b36206a419d1b78fb4e9259a531bca3876f", "filename": "src/test/run-pass/regions-refcell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Ftest%2Frun-pass%2Fregions-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50/src%2Ftest%2Frun-pass%2Fregions-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-refcell.rs?ref=6d2c640cf00aad6345bd93b0b64c8b3d3d2fcf50", "patch": "@@ -29,7 +29,7 @@ fn foo<'a>(map: RefCell<HashMap<&'static str, &'a [u8]>>) {\n // supposed to match the lifetime `'a`) ...\n fn foo<'a>(map: RefCell<HashMap<&'static str, &'a [u8]>>) {\n     let one = [1];\n-    assert_eq!(map.borrow().get(\"one\"), Some(&one.as_slice()));\n+    assert_eq!(map.borrow().get(\"one\"), Some(&&one[..]));\n }\n \n #[cfg(all(not(cannot_use_this_yet),not(cannot_use_this_yet_either)))]"}]}