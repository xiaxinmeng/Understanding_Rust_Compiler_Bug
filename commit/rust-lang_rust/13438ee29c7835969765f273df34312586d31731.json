{"sha": "13438ee29c7835969765f273df34312586d31731", "node_id": "C_kwDOAAsO6NoAKDEzNDM4ZWUyOWM3ODM1OTY5NzY1ZjI3M2RmMzQzMTI1ODZkMzE3MzE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-22T08:20:13Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-22T08:20:13Z"}, "message": "Const unification is already infallible, remove the error handling logic", "tree": {"sha": "a029aa8e291be31d99b066bdb8f474d6a00761f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a029aa8e291be31d99b066bdb8f474d6a00761f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13438ee29c7835969765f273df34312586d31731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13438ee29c7835969765f273df34312586d31731", "html_url": "https://github.com/rust-lang/rust/commit/13438ee29c7835969765f273df34312586d31731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13438ee29c7835969765f273df34312586d31731/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "url": "https://api.github.com/repos/rust-lang/rust/commits/b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "html_url": "https://github.com/rust-lang/rust/commit/b79b7d8b4e0f2b112142a9ce1fea335f321a6558"}], "stats": {"total": 39, "additions": 12, "deletions": 27}, "files": [{"sha": "682ad02da8635be045259acaa80c344ac51ea4ac", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/13438ee29c7835969765f273df34312586d31731/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13438ee29c7835969765f273df34312586d31731/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=13438ee29c7835969765f273df34312586d31731", "patch": "@@ -147,11 +147,7 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n                 ty::ConstKind::Infer(InferConst::Var(a_vid)),\n                 ty::ConstKind::Infer(InferConst::Var(b_vid)),\n             ) => {\n-                self.inner\n-                    .borrow_mut()\n-                    .const_unification_table()\n-                    .unify_var_var(a_vid, b_vid)\n-                    .map_err(|e| const_unification_error(a_is_expected, e))?;\n+                self.inner.borrow_mut().const_unification_table().union(a_vid, b_vid);\n                 return Ok(a);\n             }\n \n@@ -246,21 +242,17 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n         let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }\n             .relate(ct, ct)?;\n \n-        self.inner\n-            .borrow_mut()\n-            .const_unification_table()\n-            .unify_var_value(\n-                target_vid,\n-                ConstVarValue {\n-                    origin: ConstVariableOrigin {\n-                        kind: ConstVariableOriginKind::ConstInference,\n-                        span: DUMMY_SP,\n-                    },\n-                    val: ConstVariableValue::Known { value },\n+        self.inner.borrow_mut().const_unification_table().union_value(\n+            target_vid,\n+            ConstVarValue {\n+                origin: ConstVariableOrigin {\n+                    kind: ConstVariableOriginKind::ConstInference,\n+                    span: DUMMY_SP,\n                 },\n-            )\n-            .map(|()| value)\n-            .map_err(|e| const_unification_error(vid_is_expected, e))\n+                val: ConstVariableValue::Known { value },\n+            },\n+        );\n+        Ok(value)\n     }\n \n     fn unify_integral_variable(\n@@ -768,13 +760,6 @@ pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {\n     fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>);\n }\n \n-pub fn const_unification_error<'tcx>(\n-    a_is_expected: bool,\n-    (a, b): (ty::Const<'tcx>, ty::Const<'tcx>),\n-) -> TypeError<'tcx> {\n-    TypeError::ConstMismatch(ExpectedFound::new(a_is_expected, a, b))\n-}\n-\n fn int_unification_error<'tcx>(\n     a_is_expected: bool,\n     v: (ty::IntVarValue, ty::IntVarValue),"}, {"sha": "41d8c7ffdb945e23bccf1953ddb87f20464f0bda", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13438ee29c7835969765f273df34312586d31731/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13438ee29c7835969765f273df34312586d31731/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=13438ee29c7835969765f273df34312586d31731", "patch": "@@ -129,7 +129,7 @@ impl<'tcx> UnifyKey for ty::ConstVid<'tcx> {\n }\n \n impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n-    type Error = (ty::Const<'tcx>, ty::Const<'tcx>);\n+    type Error = NoError;\n \n     fn unify_values(&value1: &Self, &value2: &Self) -> Result<Self, Self::Error> {\n         Ok(match (value1.val, value2.val) {"}]}