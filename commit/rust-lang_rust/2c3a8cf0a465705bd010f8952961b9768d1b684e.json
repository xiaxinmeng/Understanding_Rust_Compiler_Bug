{"sha": "2c3a8cf0a465705bd010f8952961b9768d1b684e", "node_id": "C_kwDOAAsO6NoAKDJjM2E4Y2YwYTQ2NTcwNWJkMDEwZjg5NTI5NjFiOTc2OGQxYjY4NGU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-01T14:36:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-01T14:36:52Z"}, "message": "Rollup merge of #97611 - azdavis:master, r=Dylan-DPC\n\nTweak insert docs\n\nFor `{Hash, BTree}Map::insert`, I always have to take a few extra seconds to think about the slight weirdness about the fact that if we \"did not\" insert (which \"sounds\" false), we return true, and if we \"did\" insert, (which \"sounds\" true), we return false.\n\nThis tweaks the doc comments for the `insert` methods of those types (as well as what looks like a rustc internal data structure that I found just by searching the codebase for \"If the set did\") to first use the \"Returns whether _something_\" pattern used in e.g. `remove`, where we say that `remove` \"returns whether the value was present\".", "tree": {"sha": "134d2a7af7e7ee836a7d96cd403ffb559a1217c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/134d2a7af7e7ee836a7d96cd403ffb559a1217c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c3a8cf0a465705bd010f8952961b9768d1b684e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJil3mECRBK7hj4Ov3rIwAAUNAIAA4BiP9TYVV27ZC650y2oVzC\nfAbFgH+6zlGd+0K/ij3c//Wpn5qYn0Ad7P1X5QlaUlMPAbQkroBtMbNOo1IDxTeg\nojxZqVAPWG8uGkBbanVLAsfSD0GmGEefZPGfemZ5HJI2ipLbM5X9tEcih+oynygg\nE4Q4A8Ae+sTQaSLLSJ/OUvIxNG/BSmInM8Z0U21ZBlgSA2zCnQU5tntz7kvAA4hY\nAwdfxfq9tIam8AYOs4fDKiYkYOkvTuQKghIb90cEn000RUQ+SUWVclzYgiWis7FE\nxpKwRTZHsOcelaum47xAkHMrXseBj8KXnwU3OsSBcAxJ2fwGwQxdz016mxUdxvs=\n=yrWm\n-----END PGP SIGNATURE-----\n", "payload": "tree 134d2a7af7e7ee836a7d96cd403ffb559a1217c8\nparent a7bd0d0e07ae1c5c680a32ecf2b5e5556c6935f6\nparent b02146a370e8e07186d4bd2c264699300ca925df\nauthor Yuki Okushi <jtitor@2k36.org> 1654094212 +0900\ncommitter GitHub <noreply@github.com> 1654094212 +0900\n\nRollup merge of #97611 - azdavis:master, r=Dylan-DPC\n\nTweak insert docs\n\nFor `{Hash, BTree}Map::insert`, I always have to take a few extra seconds to think about the slight weirdness about the fact that if we \"did not\" insert (which \"sounds\" false), we return true, and if we \"did\" insert, (which \"sounds\" true), we return false.\n\nThis tweaks the doc comments for the `insert` methods of those types (as well as what looks like a rustc internal data structure that I found just by searching the codebase for \"If the set did\") to first use the \"Returns whether _something_\" pattern used in e.g. `remove`, where we say that `remove` \"returns whether the value was present\".\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c3a8cf0a465705bd010f8952961b9768d1b684e", "html_url": "https://github.com/rust-lang/rust/commit/2c3a8cf0a465705bd010f8952961b9768d1b684e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c3a8cf0a465705bd010f8952961b9768d1b684e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7bd0d0e07ae1c5c680a32ecf2b5e5556c6935f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7bd0d0e07ae1c5c680a32ecf2b5e5556c6935f6", "html_url": "https://github.com/rust-lang/rust/commit/a7bd0d0e07ae1c5c680a32ecf2b5e5556c6935f6"}, {"sha": "b02146a370e8e07186d4bd2c264699300ca925df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b02146a370e8e07186d4bd2c264699300ca925df", "html_url": "https://github.com/rust-lang/rust/commit/b02146a370e8e07186d4bd2c264699300ca925df"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "4fda3adb7b87829deda1f3f00fe9f82c5e245a71", "filename": "compiler/rustc_data_structures/src/sso/set.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c3a8cf0a465705bd010f8952961b9768d1b684e/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3a8cf0a465705bd010f8952961b9768d1b684e/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs?ref=2c3a8cf0a465705bd010f8952961b9768d1b684e", "patch": "@@ -126,9 +126,10 @@ impl<T: Eq + Hash> SsoHashSet<T> {\n \n     /// Adds a value to the set.\n     ///\n-    /// If the set did not have this value present, `true` is returned.\n+    /// Returns whether the value was newly inserted. That is:\n     ///\n-    /// If the set did have this value present, `false` is returned.\n+    /// - If the set did not previously contain this value, `true` is returned.\n+    /// - If the set already contained this value, `false` is returned.\n     #[inline]\n     pub fn insert(&mut self, elem: T) -> bool {\n         self.map.insert(elem, ()).is_none()"}, {"sha": "caa629cf4e65e412e4ec9461343b083cf4032f73", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c3a8cf0a465705bd010f8952961b9768d1b684e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3a8cf0a465705bd010f8952961b9768d1b684e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=2c3a8cf0a465705bd010f8952961b9768d1b684e", "patch": "@@ -770,10 +770,14 @@ impl<T> BTreeSet<T> {\n \n     /// Adds a value to the set.\n     ///\n-    /// If the set did not have an equal element present, `true` is returned.\n+    /// Returns whether the value was newly inserted. That is:\n     ///\n-    /// If the set did have an equal element present, `false` is returned, and\n-    /// the entry is not updated. See the [module-level documentation] for more.\n+    /// - If the set did not previously contain an equal value, `true` is\n+    ///   returned.\n+    /// - If the set already contained an equal value, `false` is returned, and\n+    ///   the entry is not updated.\n+    ///\n+    /// See the [module-level documentation] for more.\n     ///\n     /// [module-level documentation]: index.html#insert-and-complex-keys\n     ///"}, {"sha": "19428fe9a2339c315b461b0f7b176fa14072b505", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c3a8cf0a465705bd010f8952961b9768d1b684e/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3a8cf0a465705bd010f8952961b9768d1b684e/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=2c3a8cf0a465705bd010f8952961b9768d1b684e", "patch": "@@ -858,9 +858,10 @@ where\n \n     /// Adds a value to the set.\n     ///\n-    /// If the set did not have this value present, `true` is returned.\n+    /// Returns whether the value was newly inserted. That is:\n     ///\n-    /// If the set did have this value present, `false` is returned.\n+    /// - If the set did not previously contain this value, `true` is returned.\n+    /// - If the set already contained this value, `false` is returned.\n     ///\n     /// # Examples\n     ///"}]}