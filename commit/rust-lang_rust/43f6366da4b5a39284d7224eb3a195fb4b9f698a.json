{"sha": "43f6366da4b5a39284d7224eb3a195fb4b9f698a", "node_id": "C_kwDOAAsO6NoAKDQzZjYzNjZkYTRiNWEzOTI4NGQ3MjI0ZWIzYTE5NWZiNGI5ZjY5OGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-20T16:58:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-20T16:58:15Z"}, "message": "Rollup merge of #99352 - compiler-errors:tighter-spans-on-generic-call, r=spastorino\n\nUse `typeck_results` to avoid duplicate `ast_ty_to_ty` call\n\nComes with a bunch of improvements in spans :heart_eyes:", "tree": {"sha": "ab61c0db6ba19ee9ee7434d15ae6b1c63e2e841b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab61c0db6ba19ee9ee7434d15ae6b1c63e2e841b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43f6366da4b5a39284d7224eb3a195fb4b9f698a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi2DQoCRBK7hj4Ov3rIwAAmnEIAHmi+/hSGOtqbA++qms14U6s\naPqPv5QtjVgAk/kwmCgCcel36znLHHXGH2KgwaZ4yBlFj8DX2GCFn8p5zI7JbsaE\niOvyO0aYNzYKzr/umL3r//IM7sFL8S2zifZnEXIL0eQFaJL1siYGX6VolBbI/L5L\nljadjts7TCpS8f7xT7YmmdNG+kuLmehg+rwQoj2q2I8nufs3+2DY4xUoNz5lFb06\nArzb/nfHMdqeiBdZHKTG4x5P9RxT614d5Hd/Q3o9TsyK83P56jZtzhORCwMWylr+\nDXLid182boF8vlh/YzY0/VfIIw6bff8Dfi4fqGQfrGh0myy7PhgGvQbQImv5fJg=\n=Goqk\n-----END PGP SIGNATURE-----\n", "payload": "tree ab61c0db6ba19ee9ee7434d15ae6b1c63e2e841b\nparent 857afc75e6ca69cc7dcae36a6fac8c093ee6fa31\nparent d672fea64a599337d010d35278bb0746c097d8b9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658336295 +0200\ncommitter GitHub <noreply@github.com> 1658336295 +0200\n\nRollup merge of #99352 - compiler-errors:tighter-spans-on-generic-call, r=spastorino\n\nUse `typeck_results` to avoid duplicate `ast_ty_to_ty` call\n\nComes with a bunch of improvements in spans :heart_eyes:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43f6366da4b5a39284d7224eb3a195fb4b9f698a", "html_url": "https://github.com/rust-lang/rust/commit/43f6366da4b5a39284d7224eb3a195fb4b9f698a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43f6366da4b5a39284d7224eb3a195fb4b9f698a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "857afc75e6ca69cc7dcae36a6fac8c093ee6fa31", "url": "https://api.github.com/repos/rust-lang/rust/commits/857afc75e6ca69cc7dcae36a6fac8c093ee6fa31", "html_url": "https://github.com/rust-lang/rust/commit/857afc75e6ca69cc7dcae36a6fac8c093ee6fa31"}, {"sha": "d672fea64a599337d010d35278bb0746c097d8b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d672fea64a599337d010d35278bb0746c097d8b9", "html_url": "https://github.com/rust-lang/rust/commit/d672fea64a599337d010d35278bb0746c097d8b9"}], "stats": {"total": 72, "additions": 27, "deletions": 45}, "files": [{"sha": "8aa8ac90b4c56cae649bebcdd68e436c5392c810", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/43f6366da4b5a39284d7224eb3a195fb4b9f698a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f6366da4b5a39284d7224eb3a195fb4b9f698a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=43f6366da4b5a39284d7224eb3a195fb4b9f698a", "patch": "@@ -1757,19 +1757,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .flat_map(|a| a.args.iter())\n                         {\n                             if let hir::GenericArg::Type(hir_ty) = &arg {\n-                                if let hir::TyKind::Path(hir::QPath::TypeRelative(..)) =\n-                                    &hir_ty.kind\n-                                {\n-                                    // Avoid ICE with associated types. As this is best\n-                                    // effort only, it's ok to ignore the case. It\n-                                    // would trigger in `is_send::<T::AssocType>();`\n-                                    // from `typeck-default-trait-impl-assoc-type.rs`.\n-                                } else {\n-                                    let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, hir_ty);\n-                                    let ty = self.resolve_vars_if_possible(ty);\n-                                    if ty == predicate.self_ty() {\n-                                        error.obligation.cause.span = hir_ty.span;\n-                                    }\n+                                let ty = self.resolve_vars_if_possible(\n+                                    self.typeck_results.borrow().node_type(hir_ty.hir_id),\n+                                );\n+                                if ty == predicate.self_ty() {\n+                                    error.obligation.cause.span = hir_ty.span;\n                                 }\n                             }\n                         }"}, {"sha": "025a5008d0f11f0d1aacfb8d041554be1dd149fc", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=43f6366da4b5a39284d7224eb3a195fb4b9f698a", "patch": "@@ -91,10 +91,10 @@ LL | fn assert_copy<T:Copy>() { }\n    |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `Box<dyn Dummy>: Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:42:5\n+  --> $DIR/kindck-copy.rs:42:19\n    |\n LL |     assert_copy::<Box<dyn Dummy>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<dyn Dummy>`\n+   |                   ^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<dyn Dummy>`\n    |\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n@@ -103,10 +103,10 @@ LL | fn assert_copy<T:Copy>() { }\n    |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `Box<dyn Dummy + Send>: Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:43:5\n+  --> $DIR/kindck-copy.rs:43:19\n    |\n LL |     assert_copy::<Box<dyn Dummy + Send>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<dyn Dummy + Send>`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<dyn Dummy + Send>`\n    |\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18"}, {"sha": "2cd51a439988db0102d10499e56f5e6aad70064b", "filename": "src/test/ui/not-panic/not-panic-safe.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr?ref=43f6366da4b5a39284d7224eb3a195fb4b9f698a", "patch": "@@ -1,8 +1,11 @@\n error[E0277]: the type `&mut i32` may not be safely transferred across an unwind boundary\n-  --> $DIR/not-panic-safe.rs:8:5\n+  --> $DIR/not-panic-safe.rs:8:14\n    |\n LL |     assert::<&mut i32>();\n-   |     ^^^^^^^^^^^^^^^^^^ `&mut i32` may not be safely transferred across an unwind boundary\n+   |              -^^^^^^^\n+   |              |\n+   |              `&mut i32` may not be safely transferred across an unwind boundary\n+   |              help: consider removing the leading `&`-reference\n    |\n    = help: the trait `UnwindSafe` is not implemented for `&mut i32`\n    = note: `UnwindSafe` is implemented for `&i32`, but not for `&mut i32`"}, {"sha": "56a68f3a2312c92f33d47fe4aba3f390344338ae", "filename": "src/test/ui/traits/issue-32963.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Ftraits%2Fissue-32963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Ftraits%2Fissue-32963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-32963.rs?ref=43f6366da4b5a39284d7224eb3a195fb4b9f698a", "patch": "@@ -7,6 +7,5 @@ fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n fn main() {\n     size_of_copy::<dyn Misc + Copy>();\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n-    //~| ERROR only auto traits can be used as additional traits in a trait object\n     //~| ERROR the trait bound `dyn Misc: Copy` is not satisfied\n }"}, {"sha": "bad45e54d64288053c9e35355542f3b95019a5a7", "filename": "src/test/ui/traits/issue-32963.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Ftraits%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Ftraits%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-32963.stderr?ref=43f6366da4b5a39284d7224eb3a195fb4b9f698a", "patch": "@@ -9,30 +9,19 @@ LL |     size_of_copy::<dyn Misc + Copy>();\n    = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Misc + Copy {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n-error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/issue-32963.rs:8:31\n-   |\n-LL |     size_of_copy::<dyn Misc + Copy>();\n-   |                        ----   ^^^^ additional non-auto trait\n-   |                        |\n-   |                        first non-auto trait\n-   |\n-   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Misc + Copy {}`\n-   = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n-\n error[E0277]: the trait bound `dyn Misc: Copy` is not satisfied\n-  --> $DIR/issue-32963.rs:8:5\n+  --> $DIR/issue-32963.rs:8:20\n    |\n LL |     size_of_copy::<dyn Misc + Copy>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `dyn Misc`\n+   |                    ^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `dyn Misc`\n    |\n note: required by a bound in `size_of_copy`\n   --> $DIR/issue-32963.rs:5:20\n    |\n LL | fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n    |                    ^^^^ required by this bound in `size_of_copy`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0225, E0277.\n For more information about an error, try `rustc --explain E0225`."}, {"sha": "d4d9b4967478ada0cedd6115bc14d1a5638b3b4b", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=43f6366da4b5a39284d7224eb3a195fb4b9f698a", "patch": "@@ -85,10 +85,10 @@ LL | pub const fn size_of<T>() -> usize {\n    |                      ^ required by this bound in `std::mem::size_of`\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n-  --> $DIR/suggest-where-clause.rs:31:5\n+  --> $DIR/suggest-where-clause.rs:31:20\n    |\n LL |     mem::size_of::<[&U]>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[&U]`\n note: required by a bound in `std::mem::size_of`"}, {"sha": "468a14762c0d70e14504c26b6e1993f745896b7a", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr?ref=43f6366da4b5a39284d7224eb3a195fb4b9f698a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `<T as Trait>::AssocType` cannot be sent between threads safely\n-  --> $DIR/typeck-default-trait-impl-assoc-type.rs:11:5\n+  --> $DIR/typeck-default-trait-impl-assoc-type.rs:11:15\n    |\n LL |     is_send::<T::AssocType>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ `<T as Trait>::AssocType` cannot be sent between threads safely\n+   |               ^^^^^^^^^^^^ `<T as Trait>::AssocType` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `<T as Trait>::AssocType`\n note: required by a bound in `is_send`"}, {"sha": "a3b32d2c1c8ceeabc6986304b9878eb2dac09496", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr?ref=43f6366da4b5a39284d7224eb3a195fb4b9f698a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `dyn Foo<(isize,), isize, Output = ()>: Eq<dyn Foo<(isize,), Output = ()>>` is not satisfied\n-  --> $DIR/unboxed-closure-sugar-default.rs:21:5\n+  --> $DIR/unboxed-closure-sugar-default.rs:21:10\n    |\n LL |     eq::<dyn Foo<(isize,), isize, Output=()>, dyn Foo(isize)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Eq<dyn Foo<(isize,), Output = ()>>` is not implemented for `dyn Foo<(isize,), isize, Output = ()>`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Eq<dyn Foo<(isize,), Output = ()>>` is not implemented for `dyn Foo<(isize,), isize, Output = ()>`\n    |\n note: required by a bound in `eq`\n   --> $DIR/unboxed-closure-sugar-default.rs:14:40"}, {"sha": "acf0227a79b8c523702c3245721656ab39707e1a", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-equiv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.rs?ref=43f6366da4b5a39284d7224eb3a195fb4b9f698a", "patch": "@@ -42,7 +42,7 @@ fn test<'a,'b>() {\n     // Errors expected:\n     eq::< dyn Foo<(),Output=()>,\n           dyn Foo(char)                                               >();\n-    //~^^ ERROR E0277\n+    //~^ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "bccbf307ae15734e6212a7e1f7e3b2b6d17b1313", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-equiv.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43f6366da4b5a39284d7224eb3a195fb4b9f698a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr?ref=43f6366da4b5a39284d7224eb3a195fb4b9f698a", "patch": "@@ -1,9 +1,8 @@\n error[E0277]: the trait bound `dyn Foo<(char,), Output = ()>: Eq<dyn Foo<(), Output = ()>>` is not satisfied\n-  --> $DIR/unboxed-closure-sugar-equiv.rs:43:5\n+  --> $DIR/unboxed-closure-sugar-equiv.rs:44:11\n    |\n-LL | /     eq::< dyn Foo<(),Output=()>,\n-LL | |           dyn Foo(char)                                               >();\n-   | |_______________________________________________________________________^ the trait `Eq<dyn Foo<(), Output = ()>>` is not implemented for `dyn Foo<(char,), Output = ()>`\n+LL |           dyn Foo(char)                                               >();\n+   |           ^^^^^^^^^^^^^ the trait `Eq<dyn Foo<(), Output = ()>>` is not implemented for `dyn Foo<(char,), Output = ()>`\n    |\n note: required by a bound in `eq`\n   --> $DIR/unboxed-closure-sugar-equiv.rs:16:28"}]}