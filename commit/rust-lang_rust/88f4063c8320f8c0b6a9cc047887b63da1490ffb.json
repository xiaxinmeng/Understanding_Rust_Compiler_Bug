{"sha": "88f4063c8320f8c0b6a9cc047887b63da1490ffb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZjQwNjNjODMyMGY4YzBiNmE5Y2MwNDc4ODdiNjNkYTE0OTBmZmI=", "commit": {"author": {"name": "Kyle Stachowicz", "email": "kylestach99@gmail.com", "date": "2018-05-18T00:20:30Z"}, "committer": {"name": "Kyle Stachowicz", "email": "kylestach99@gmail.com", "date": "2018-05-18T23:57:15Z"}, "message": "Reimplement unused_labels lint as a compiler builtin in the resolver", "tree": {"sha": "360a40010ae6c546579912ea0261f43c25f26461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/360a40010ae6c546579912ea0261f43c25f26461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88f4063c8320f8c0b6a9cc047887b63da1490ffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88f4063c8320f8c0b6a9cc047887b63da1490ffb", "html_url": "https://github.com/rust-lang/rust/commit/88f4063c8320f8c0b6a9cc047887b63da1490ffb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88f4063c8320f8c0b6a9cc047887b63da1490ffb/comments", "author": {"login": "kylestach", "id": 9097872, "node_id": "MDQ6VXNlcjkwOTc4NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/9097872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylestach", "html_url": "https://github.com/kylestach", "followers_url": "https://api.github.com/users/kylestach/followers", "following_url": "https://api.github.com/users/kylestach/following{/other_user}", "gists_url": "https://api.github.com/users/kylestach/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylestach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylestach/subscriptions", "organizations_url": "https://api.github.com/users/kylestach/orgs", "repos_url": "https://api.github.com/users/kylestach/repos", "events_url": "https://api.github.com/users/kylestach/events{/privacy}", "received_events_url": "https://api.github.com/users/kylestach/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylestach", "id": 9097872, "node_id": "MDQ6VXNlcjkwOTc4NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/9097872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylestach", "html_url": "https://github.com/kylestach", "followers_url": "https://api.github.com/users/kylestach/followers", "following_url": "https://api.github.com/users/kylestach/following{/other_user}", "gists_url": "https://api.github.com/users/kylestach/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylestach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylestach/subscriptions", "organizations_url": "https://api.github.com/users/kylestach/orgs", "repos_url": "https://api.github.com/users/kylestach/repos", "events_url": "https://api.github.com/users/kylestach/events{/privacy}", "received_events_url": "https://api.github.com/users/kylestach/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7676982e90120cf4edacc6b1ed8a8cebce12b97c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7676982e90120cf4edacc6b1ed8a8cebce12b97c", "html_url": "https://github.com/rust-lang/rust/commit/7676982e90120cf4edacc6b1ed8a8cebce12b97c"}], "stats": {"total": 191, "additions": 170, "deletions": 21}, "files": [{"sha": "71eefec2210e46fb324b8e33fb2f85634425f833", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=88f4063c8320f8c0b6a9cc047887b63da1490ffb", "patch": "@@ -279,6 +279,12 @@ declare_lint! {\n     \"detects name collision with an existing but unstable method\"\n }\n \n+declare_lint! {\n+    pub UNUSED_LABELS,\n+    Warn,\n+    \"detects labels that are never used\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -325,6 +331,7 @@ impl LintPass for HardwiredLints {\n             UNUSED_MUT,\n             SINGLE_USE_LIFETIME,\n             UNUSED_LIFETIME,\n+            UNUSED_LABELS,\n             TYVAR_BEHIND_RAW_POINTER,\n             ELIDED_LIFETIME_IN_PATH,\n             BARE_TRAIT_OBJECT,"}, {"sha": "590ce168d5d0fdac64d6dd81967a5aa308d5d881", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=88f4063c8320f8c0b6a9cc047887b63da1490ffb", "patch": "@@ -142,6 +142,10 @@ pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n         }\n     }\n \n+    for (id, span) in resolver.unused_labels.iter() {\n+        resolver.session.buffer_lint(lint::builtin::UNUSED_LABELS, *id, *span, \"unused label\");\n+    }\n+\n     let mut visitor = UnusedImportCheckVisitor {\n         resolver,\n         unused_imports: NodeMap(),"}, {"sha": "feb5af571e43505038bc9753a711ddda8f6f0793", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=88f4063c8320f8c0b6a9cc047887b63da1490ffb", "patch": "@@ -1473,6 +1473,10 @@ pub struct Resolver<'a> {\n     pub maybe_unused_trait_imports: NodeSet,\n     pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n \n+    /// A list of labels as of yet unused. Labels will be removed from this map when\n+    /// they are used (in a `break` or `continue` statement)\n+    pub unused_labels: FxHashMap<NodeId, Span>,\n+\n     /// privacy errors are delayed until the end in order to deduplicate them\n     privacy_errors: Vec<PrivacyError<'a>>,\n     /// ambiguity errors are delayed for deduplication\n@@ -1752,6 +1756,8 @@ impl<'a> Resolver<'a> {\n             maybe_unused_trait_imports: NodeSet(),\n             maybe_unused_extern_crates: Vec::new(),\n \n+            unused_labels: FxHashMap(),\n+\n             privacy_errors: Vec::new(),\n             ambiguity_errors: Vec::new(),\n             use_injections: Vec::new(),\n@@ -3694,6 +3700,7 @@ impl<'a> Resolver<'a> {\n         where F: FnOnce(&mut Resolver)\n     {\n         if let Some(label) = label {\n+            self.unused_labels.insert(id, label.ident.span);\n             let def = Def::Label(id);\n             self.with_label_rib(|this| {\n                 this.label_ribs.last_mut().unwrap().bindings.insert(label.ident, def);\n@@ -3742,9 +3749,10 @@ impl<'a> Resolver<'a> {\n                                       ResolutionError::UndeclaredLabel(&label.ident.name.as_str(),\n                                                                        close_match));\n                     }\n-                    Some(def @ Def::Label(_)) => {\n+                    Some(Def::Label(id)) => {\n                         // Since this def is a label, it is never read.\n-                        self.record_def(expr.id, PathResolution::new(def));\n+                        self.record_def(expr.id, PathResolution::new(Def::Label(id)));\n+                        self.unused_labels.remove(&id);\n                     }\n                     Some(_) => {\n                         span_bug!(expr.span, \"label wasn't mapped to a label def!\");"}, {"sha": "86abb34658a39e887b61adb169b355d0b346bace", "filename": "src/test/ui/lint/unused_labels.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Flint%2Funused_labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Flint%2Funused_labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_labels.rs?ref=88f4063c8320f8c0b6a9cc047887b63da1490ffb", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// The output should warn when a loop label is not used. However, it\n+// should also deal with the edge cases where a label is shadowed,\n+// within nested loops\n+\n+// compile-pass\n+\n+fn main() {\n+    'unused_while_label: while 0 == 0 {\n+        //~^ WARN unused label\n+    }\n+\n+    let opt = Some(0);\n+    'unused_while_let_label: while let Some(_) = opt {\n+        //~^ WARN unused label\n+    }\n+\n+    'unused_for_label: for _ in 0..10 {\n+        //~^ WARN unused label\n+    }\n+\n+    'used_loop_label: loop {\n+        break 'used_loop_label;\n+    }\n+\n+    'used_loop_label_outer_1: for _ in 0..10 {\n+        'used_loop_label_inner_1: for _ in 0..10 {\n+            break 'used_loop_label_inner_1;\n+        }\n+        break 'used_loop_label_outer_1;\n+    }\n+\n+    'used_loop_label_outer_2: for _ in 0..10 {\n+        'unused_loop_label_inner_2: for _ in 0..10 {\n+            //~^ WARN unused label\n+            break 'used_loop_label_outer_2;\n+        }\n+    }\n+\n+    'unused_loop_label_outer_3: for _ in 0..10 {\n+        //~^ WARN unused label\n+        'used_loop_label_inner_3: for _ in 0..10 {\n+            break 'used_loop_label_inner_3;\n+        }\n+    }\n+\n+    // Test breaking many times with the same inner label doesn't break the\n+    // warning on the outer label\n+    'many_used_shadowed: for _ in 0..10 {\n+        //~^ WARN unused label\n+        'many_used_shadowed: for _ in 0..10 {\n+            //~^ WARN label name `'many_used_shadowed` shadows a label name that is already in scope\n+            if 1 % 2 == 0 {\n+                break 'many_used_shadowed;\n+            } else {\n+                break 'many_used_shadowed;\n+            }\n+        }\n+    }\n+\n+    // This is diverging, so put it at the end so we don't get\n+    // unreachable_code errors everywhere else\n+    'unused_loop_label: loop {\n+        //~^ WARN unused label\n+    }\n+}"}, {"sha": "425b0b1769dc73c5afeb5095a36ad4b19ea22700", "filename": "src/test/ui/lint/unused_labels.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Flint%2Funused_labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Flint%2Funused_labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_labels.stderr?ref=88f4063c8320f8c0b6a9cc047887b63da1490ffb", "patch": "@@ -0,0 +1,53 @@\n+warning: unused label\n+  --> $DIR/unused_labels.rs:18:5\n+   |\n+LL |     'unused_while_label: while 0 == 0 {\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(unused_labels)] on by default\n+\n+warning: unused label\n+  --> $DIR/unused_labels.rs:23:5\n+   |\n+LL |     'unused_while_let_label: while let Some(_) = opt {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused label\n+  --> $DIR/unused_labels.rs:27:5\n+   |\n+LL |     'unused_for_label: for _ in 0..10 {\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+warning: unused label\n+  --> $DIR/unused_labels.rs:43:9\n+   |\n+LL |         'unused_loop_label_inner_2: for _ in 0..10 {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused label\n+  --> $DIR/unused_labels.rs:49:5\n+   |\n+LL |     'unused_loop_label_outer_3: for _ in 0..10 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused label\n+  --> $DIR/unused_labels.rs:58:5\n+   |\n+LL |     'many_used_shadowed: for _ in 0..10 {\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused label\n+  --> $DIR/unused_labels.rs:72:5\n+   |\n+LL |     'unused_loop_label: loop {\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: label name `'many_used_shadowed` shadows a label name that is already in scope\n+  --> $DIR/unused_labels.rs:60:9\n+   |\n+LL |     'many_used_shadowed: for _ in 0..10 {\n+   |     ------------------- first declared here\n+LL |         //~^ WARN unused label\n+LL |         'many_used_shadowed: for _ in 0..10 {\n+   |         ^^^^^^^^^^^^^^^^^^^ lifetime 'many_used_shadowed already in scope\n+"}, {"sha": "b273e7a0c7c9e750e02fc085d2ef8c31603b70d9", "filename": "src/test/ui/loops-reject-duplicate-labels-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Floops-reject-duplicate-labels-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Floops-reject-duplicate-labels-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-duplicate-labels-2.rs?ref=88f4063c8320f8c0b6a9cc047887b63da1490ffb", "patch": "@@ -18,6 +18,7 @@\n // discussed here:\n // https://internals.rust-lang.org/t/psa-rejecting-duplicate-loop-labels/1833\n \n+#[allow(unused_labels)]\n pub fn foo() {\n     { 'fl: for _ in 0..10 { break; } }\n     { 'fl: loop { break; } }             //~ WARN label name `'fl` shadows a label name that is already in scope"}, {"sha": "41b4a850f1bfb28c5c426665c45ad2b494e88b52", "filename": "src/test/ui/loops-reject-duplicate-labels-2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Floops-reject-duplicate-labels-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Floops-reject-duplicate-labels-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-duplicate-labels-2.stderr?ref=88f4063c8320f8c0b6a9cc047887b63da1490ffb", "patch": "@@ -1,69 +1,69 @@\n warning: label name `'fl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:23:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:24:7\n    |\n LL |     { 'fl: for _ in 0..10 { break; } }\n    |       --- first declared here\n LL |     { 'fl: loop { break; } }             //~ WARN label name `'fl` shadows a label name that is already in scope\n    |       ^^^ lifetime 'fl already in scope\n \n warning: label name `'lf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:25:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:26:7\n    |\n LL |     { 'lf: loop { break; } }\n    |       --- first declared here\n LL |     { 'lf: for _ in 0..10 { break; } }   //~ WARN label name `'lf` shadows a label name that is already in scope\n    |       ^^^ lifetime 'lf already in scope\n \n warning: label name `'wl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:27:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:28:7\n    |\n LL |     { 'wl: while 2 > 1 { break; } }\n    |       --- first declared here\n LL |     { 'wl: loop { break; } }             //~ WARN label name `'wl` shadows a label name that is already in scope\n    |       ^^^ lifetime 'wl already in scope\n \n warning: label name `'lw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:29:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:30:7\n    |\n LL |     { 'lw: loop { break; } }\n    |       --- first declared here\n LL |     { 'lw: while 2 > 1 { break; } }      //~ WARN label name `'lw` shadows a label name that is already in scope\n    |       ^^^ lifetime 'lw already in scope\n \n warning: label name `'fw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:31:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:32:7\n    |\n LL |     { 'fw: for _ in 0..10 { break; } }\n    |       --- first declared here\n LL |     { 'fw: while 2 > 1 { break; } }      //~ WARN label name `'fw` shadows a label name that is already in scope\n    |       ^^^ lifetime 'fw already in scope\n \n warning: label name `'wf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:33:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:34:7\n    |\n LL |     { 'wf: while 2 > 1 { break; } }\n    |       --- first declared here\n LL |     { 'wf: for _ in 0..10 { break; } }   //~ WARN label name `'wf` shadows a label name that is already in scope\n    |       ^^^ lifetime 'wf already in scope\n \n warning: label name `'tl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:35:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:36:7\n    |\n LL |     { 'tl: while let Some(_) = None::<i32> { break; } }\n    |       --- first declared here\n LL |     { 'tl: loop { break; } }             //~ WARN label name `'tl` shadows a label name that is already in scope\n    |       ^^^ lifetime 'tl already in scope\n \n warning: label name `'lt` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:37:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:38:7\n    |\n LL |     { 'lt: loop { break; } }\n    |       --- first declared here\n LL |     { 'lt: while let Some(_) = None::<i32> { break; } }\n    |       ^^^ lifetime 'lt already in scope\n \n error: compilation successful\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:42:1\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:43:1\n    |\n LL | / pub fn main() { //~ ERROR compilation successful\n LL | |     foo();"}, {"sha": "ad24f69871c85cdf3bd4e1076d4e4a4dac401695", "filename": "src/test/ui/loops-reject-duplicate-labels.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.rs?ref=88f4063c8320f8c0b6a9cc047887b63da1490ffb", "patch": "@@ -15,6 +15,7 @@\n // Issue #21633: reject duplicate loop labels in function bodies.\n // This is testing the exact cases that are in the issue description.\n \n+#[allow(unused_labels)]\n fn foo() {\n     'fl: for _ in 0..10 { break; }\n     'fl: loop { break; }           //~ WARN label name `'fl` shadows a label name that is already in scope"}, {"sha": "d0cb81544f8280840c91e866b01c3bc00f7af807", "filename": "src/test/ui/loops-reject-duplicate-labels.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.stderr?ref=88f4063c8320f8c0b6a9cc047887b63da1490ffb", "patch": "@@ -1,69 +1,69 @@\n warning: label name `'fl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:20:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:21:5\n    |\n LL |     'fl: for _ in 0..10 { break; }\n    |     --- first declared here\n LL |     'fl: loop { break; }           //~ WARN label name `'fl` shadows a label name that is already in scope\n    |     ^^^ lifetime 'fl already in scope\n \n warning: label name `'lf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:23:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:24:5\n    |\n LL |     'lf: loop { break; }\n    |     --- first declared here\n LL |     'lf: for _ in 0..10 { break; } //~ WARN label name `'lf` shadows a label name that is already in scope\n    |     ^^^ lifetime 'lf already in scope\n \n warning: label name `'wl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:25:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:26:5\n    |\n LL |     'wl: while 2 > 1 { break; }\n    |     --- first declared here\n LL |     'wl: loop { break; }           //~ WARN label name `'wl` shadows a label name that is already in scope\n    |     ^^^ lifetime 'wl already in scope\n \n warning: label name `'lw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:27:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:28:5\n    |\n LL |     'lw: loop { break; }\n    |     --- first declared here\n LL |     'lw: while 2 > 1 { break; }    //~ WARN label name `'lw` shadows a label name that is already in scope\n    |     ^^^ lifetime 'lw already in scope\n \n warning: label name `'fw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:29:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:30:5\n    |\n LL |     'fw: for _ in 0..10 { break; }\n    |     --- first declared here\n LL |     'fw: while 2 > 1 { break; }    //~ WARN label name `'fw` shadows a label name that is already in scope\n    |     ^^^ lifetime 'fw already in scope\n \n warning: label name `'wf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:31:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:32:5\n    |\n LL |     'wf: while 2 > 1 { break; }\n    |     --- first declared here\n LL |     'wf: for _ in 0..10 { break; } //~ WARN label name `'wf` shadows a label name that is already in scope\n    |     ^^^ lifetime 'wf already in scope\n \n warning: label name `'tl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:33:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:34:5\n    |\n LL |     'tl: while let Some(_) = None::<i32> { break; }\n    |     --- first declared here\n LL |     'tl: loop { break; }           //~ WARN label name `'tl` shadows a label name that is already in scope\n    |     ^^^ lifetime 'tl already in scope\n \n warning: label name `'lt` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:35:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:36:5\n    |\n LL |     'lt: loop { break; }\n    |     --- first declared here\n LL |     'lt: while let Some(_) = None::<i32> { break; }\n    |     ^^^ lifetime 'lt already in scope\n \n error: compilation successful\n-  --> $DIR/loops-reject-duplicate-labels.rs:49:1\n+  --> $DIR/loops-reject-duplicate-labels.rs:50:1\n    |\n LL | / pub fn main() { //~ ERROR compilation successful\n LL | |     let s = S;"}, {"sha": "9fb519c57edf35dbfade0332a3fa1fe5eb2d8b05", "filename": "src/test/ui/suggestions/suggest-labels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f4063c8320f8c0b6a9cc047887b63da1490ffb/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.rs?ref=88f4063c8320f8c0b6a9cc047887b63da1490ffb", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(unreachable_code)]\n+#[allow(unreachable_code, unused_labels)]\n fn main() {\n     'foo: loop {\n         break 'fo; //~ ERROR use of undeclared label"}]}