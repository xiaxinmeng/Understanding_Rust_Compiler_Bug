{"sha": "0377990dc6c0d238e750965f017401efec7da4fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNzc5OTBkYzZjMGQyMzhlNzUwOTY1ZjAxNzQwMWVmZWM3ZGE0ZmM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-07T10:04:32Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-07T10:04:46Z"}, "message": "fix turning function items into closure trait objects", "tree": {"sha": "690d953e842f13af5fc6b1c7b47025527f93d60e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/690d953e842f13af5fc6b1c7b47025527f93d60e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0377990dc6c0d238e750965f017401efec7da4fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAliZm74ACgkQpp+NIls6\n19njZhAAjEsMVXHG08H0HddfGd9w7NSX3ipK5HQcBwLFGRkW3qC4W8A8P9S17CND\n4/2sLLJAkUy/ZVW66KhNpasjtTR+pgIWlNXukE4JkysuPBA0ArsyzCc6Q4OiLeNx\no/t0pMygcSzzqE/YrZan1ysoIQTVkcTOhuU0qRc999pPzaF2DOvADNCq+M5RsgkH\nuI9nbwZTXCZI+naONQ8iHS8AJ9/X7PmAfFAgDRsEDZ8ZtNd+QI2pOG/Ii2Itxtmf\nG7uuoAVLTLDJ1JXW4Au4pruw1I5RfRG+Z8Ctde1sbk+hA59xi8fJb85Las+qudb4\nCwuJx4BiQPCJ6fyNsyFhOfRf8AMFp79+u4gdMDHsd8785p5Eee65BE4M+yfeRooe\nAaQSeISrCW4cBGJybt/naM+902lDVVFMWu474d1sagVNDs8ZBxTLpJVY9uPqruCY\ntcChs7WXCtR6ZFlqyzrYW6Vm141IP5DFKy44HLviNlAeDZM9kaTrBVIGwRIZ4KlY\n1bpmM066h7KbYu45mjjbLJKVevGw3xmHo+Q8TVzf/h4kY7bUGOcXT8lnj1mAZuxF\ngOlWteZnPh/H4b7UjpwCNJ9gZrmzaDrhXx5GsiPAK/af7Evxn+VCHrcJKcsqsr05\n9VV5d6ZQPz4CJOVGu4JwW+PqMbP6/eIHMqwnDUOi5o0y1G34lIw=\n=Ng7B\n-----END PGP SIGNATURE-----", "payload": "tree 690d953e842f13af5fc6b1c7b47025527f93d60e\nparent 9f7ca351e02e0b75b32f9deda96cb6ad25323d09\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1486461872 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1486461886 +0100\n\nfix turning function items into closure trait objects"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0377990dc6c0d238e750965f017401efec7da4fc", "html_url": "https://github.com/rust-lang/rust/commit/0377990dc6c0d238e750965f017401efec7da4fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0377990dc6c0d238e750965f017401efec7da4fc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f7ca351e02e0b75b32f9deda96cb6ad25323d09", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7ca351e02e0b75b32f9deda96cb6ad25323d09", "html_url": "https://github.com/rust-lang/rust/commit/9f7ca351e02e0b75b32f9deda96cb6ad25323d09"}], "stats": {"total": 73, "additions": 61, "deletions": 12}, "files": [{"sha": "95b62a0bcc074f17ad963db6160248e250a8adfe", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0377990dc6c0d238e750965f017401efec7da4fc/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0377990dc6c0d238e750965f017401efec7da4fc/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=0377990dc6c0d238e750965f017401efec7da4fc", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::layout::{Layout, Size};\n use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::{self, Ty, TyCtxt, BareFnTy};\n use syntax::codemap::{DUMMY_SP, Span};\n-use syntax::{ast, attr};\n+use syntax::{ast, attr, abi};\n \n use error::{EvalError, EvalResult};\n use eval_context::{EvalContext, IntegerExt, StackPopCleanup, monomorphize_field_ty, is_inhabited};\n@@ -313,6 +313,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 )?;\n \n                 let arg_locals = self.frame().mir.args_iter();\n+                // FIXME: impl ExactSizeIterator and use args_locals.len()\n+                // FIXME: last-use-in-cap-clause works by chance, insert some arguments and it will fail\n+                // we currently write the first argument (unit) to the return field (unit)\n+                //assert_eq!(self.frame().mir.args_iter().count(), args.len());\n                 for (arg_local, (arg_val, arg_ty)) in arg_locals.zip(args) {\n                     let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n                     self.write_value(arg_val, dest, arg_ty)?;\n@@ -624,18 +628,31 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             traits::VtableObject(ref data) => {\n                 let idx = self.tcx.get_vtable_index_of_object_method(data, def_id) as u64;\n-                if let Some(&mut(ref mut first_arg, ref mut first_ty)) = args.get_mut(0) {\n-                    let (self_ptr, vtable) = first_arg.expect_ptr_vtable_pair(&self.memory)?;\n-                    *first_arg = Value::ByVal(PrimVal::Ptr(self_ptr));\n-                    let idx = idx + 3;\n-                    let offset = idx * self.memory.pointer_size();\n-                    let fn_ptr = self.memory.read_ptr(vtable.offset(offset))?;\n-                    let (def_id, substs, _abi, sig) = self.memory.get_fn(fn_ptr.alloc_id)?;\n-                    *first_ty = sig.inputs()[0];\n-                    Ok((def_id, substs, Vec::new()))\n-                } else {\n-                    Err(EvalError::VtableForArgumentlessMethod)\n+                if args.is_empty() {\n+                    return Err(EvalError::VtableForArgumentlessMethod);\n+                }\n+                let (self_ptr, vtable) = args[0].0.expect_ptr_vtable_pair(&self.memory)?;\n+                let idx = idx + 3;\n+                let offset = idx * self.memory.pointer_size();\n+                let fn_ptr = self.memory.read_ptr(vtable.offset(offset))?;\n+                let (def_id, substs, abi, sig) = self.memory.get_fn(fn_ptr.alloc_id)?;\n+                trace!(\"args: {:#?}\", args);\n+                trace!(\"sig: {:#?}\", sig);\n+                if abi != abi::Abi::RustCall && args.len() == 2 {\n+                    if let ty::TyTuple(wrapped_args) = args[1].1.sty {\n+                        assert_eq!(sig.inputs(), &wrapped_args[..]);\n+                        // a function item turned into a closure trait object\n+                        // the first arg is just there to give use the vtable\n+                        args.remove(0);\n+                        self.unpack_fn_args(args)?;\n+                        return Ok((def_id, substs, Vec::new()));\n+                    }\n                 }\n+                args[0] = (\n+                    Value::ByVal(PrimVal::Ptr(self_ptr)),\n+                    sig.inputs()[0],\n+                );\n+                Ok((def_id, substs, Vec::new()))\n             },\n             vtable => bug!(\"resolved vtable bad vtable {:?} in trans\", vtable),\n         }"}, {"sha": "799f97a4f6fdedd6a25bc64d26ae3c7522ad52db", "filename": "tests/run-pass/fn_item_as_closure_trait_object.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0377990dc6c0d238e750965f017401efec7da4fc/tests%2Frun-pass%2Ffn_item_as_closure_trait_object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0377990dc6c0d238e750965f017401efec7da4fc/tests%2Frun-pass%2Ffn_item_as_closure_trait_object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffn_item_as_closure_trait_object.rs?ref=0377990dc6c0d238e750965f017401efec7da4fc", "patch": "@@ -0,0 +1,6 @@\n+fn foo() {}\n+\n+fn main() {\n+    let f: &Fn() = &foo;\n+    f();\n+}"}, {"sha": "79ece75c773bb2a7b6c26b07c8a79a8a82090c37", "filename": "tests/run-pass/fn_item_with_args_as_closure_trait_object.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0377990dc6c0d238e750965f017401efec7da4fc/tests%2Frun-pass%2Ffn_item_with_args_as_closure_trait_object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0377990dc6c0d238e750965f017401efec7da4fc/tests%2Frun-pass%2Ffn_item_with_args_as_closure_trait_object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffn_item_with_args_as_closure_trait_object.rs?ref=0377990dc6c0d238e750965f017401efec7da4fc", "patch": "@@ -0,0 +1,8 @@\n+fn foo(i: i32) {\n+    assert_eq!(i, 42);\n+}\n+\n+fn main() {\n+    let f: &Fn(i32) = &foo;\n+    f(42);\n+}"}, {"sha": "f4b5b449aa587b1da36d06b8d9d5be8b5da9ba57", "filename": "tests/run-pass/fn_item_with_multiple_args_as_closure_trait_object.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0377990dc6c0d238e750965f017401efec7da4fc/tests%2Frun-pass%2Ffn_item_with_multiple_args_as_closure_trait_object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0377990dc6c0d238e750965f017401efec7da4fc/tests%2Frun-pass%2Ffn_item_with_multiple_args_as_closure_trait_object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffn_item_with_multiple_args_as_closure_trait_object.rs?ref=0377990dc6c0d238e750965f017401efec7da4fc", "patch": "@@ -0,0 +1,18 @@\n+fn foo(i: i32, j: i32) {\n+    assert_eq!(i, 42);\n+    assert_eq!(j, 55);\n+}\n+\n+fn bar(i: i32, j: i32, k: f32) {\n+    assert_eq!(i, 42);\n+    assert_eq!(j, 55);\n+    assert_eq!(k, 3.14159)\n+}\n+\n+\n+fn main() {\n+    let f: &Fn(i32, i32) = &foo;\n+    f(42, 55);\n+    let f: &Fn(i32, i32, f32) = &bar;\n+    f(42, 55, 3.14159);\n+}"}]}