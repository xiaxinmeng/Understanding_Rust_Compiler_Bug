{"sha": "5db789df9c767985a564a31cc593ce7f5964100e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYjc4OWRmOWM3Njc5ODVhNTY0YTMxY2M1OTNjZTdmNTk2NDEwMGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-06T21:52:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-06T21:52:42Z"}, "message": "Cleanup API", "tree": {"sha": "d912c15567800abbcaeb04798b8daf9eb1431f7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d912c15567800abbcaeb04798b8daf9eb1431f7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5db789df9c767985a564a31cc593ce7f5964100e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5db789df9c767985a564a31cc593ce7f5964100e", "html_url": "https://github.com/rust-lang/rust/commit/5db789df9c767985a564a31cc593ce7f5964100e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5db789df9c767985a564a31cc593ce7f5964100e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f12a1f225c7d3397f27964ce039b55d680772d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f12a1f225c7d3397f27964ce039b55d680772d3", "html_url": "https://github.com/rust-lang/rust/commit/7f12a1f225c7d3397f27964ce039b55d680772d3"}], "stats": {"total": 180, "additions": 84, "deletions": 96}, "files": [{"sha": "1094ed3f3acd7839453a35986fa8b0d9c6a5e5bf", "filename": "crates/assists/src/handlers/convert_integer_literal.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5db789df9c767985a564a31cc593ce7f5964100e/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db789df9c767985a564a31cc593ce7f5964100e/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs?ref=5db789df9c767985a564a31cc593ce7f5964100e", "patch": "@@ -14,7 +14,11 @@ use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n // const _: i32 = 0b1010;\n // ```\n pub(crate) fn convert_integer_literal(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let literal = ctx.find_node_at_offset::<ast::Literal>()?.as_int_number()?;\n+    let literal = ctx.find_node_at_offset::<ast::Literal>()?;\n+    let literal = match literal.kind() {\n+        ast::LiteralKind::IntNumber(it) => it,\n+        _ => return None,\n+    };\n     let radix = literal.radix();\n     let value = literal.value()?;\n     let suffix = literal.suffix();"}, {"sha": "cd795874619779b13f8303ad4f57cf40d98bd63c", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5db789df9c767985a564a31cc593ce7f5964100e/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db789df9c767985a564a31cc593ce7f5964100e/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=5db789df9c767985a564a31cc593ce7f5964100e", "patch": "@@ -953,18 +953,19 @@ impl From<ast::BinOp> for BinaryOp {\n impl From<ast::LiteralKind> for Literal {\n     fn from(ast_lit_kind: ast::LiteralKind) -> Self {\n         match ast_lit_kind {\n-            LiteralKind::IntNumber { suffix } => {\n-                let known_name = suffix.and_then(|it| BuiltinInt::from_suffix(&it));\n-\n-                Literal::Int(Default::default(), known_name)\n+            LiteralKind::IntNumber(lit) => {\n+                if let Some(float_suffix) = lit.suffix().and_then(BuiltinFloat::from_suffix) {\n+                    return Literal::Float(Default::default(), Some(float_suffix));\n+                }\n+                let ty = lit.suffix().and_then(|it| BuiltinInt::from_suffix(&it));\n+                Literal::Int(Default::default(), ty)\n             }\n-            LiteralKind::FloatNumber { suffix } => {\n-                let known_name = suffix.and_then(|it| BuiltinFloat::from_suffix(&it));\n-\n-                Literal::Float(Default::default(), known_name)\n+            LiteralKind::FloatNumber(lit) => {\n+                let ty = lit.suffix().and_then(|it| BuiltinFloat::from_suffix(&it));\n+                Literal::Float(Default::default(), ty)\n             }\n-            LiteralKind::ByteString => Literal::ByteString(Default::default()),\n-            LiteralKind::String => Literal::String(Default::default()),\n+            LiteralKind::ByteString(_) => Literal::ByteString(Default::default()),\n+            LiteralKind::String(_) => Literal::String(Default::default()),\n             LiteralKind::Byte => Literal::Int(Default::default(), Some(BuiltinInt::U8)),\n             LiteralKind::Bool(val) => Literal::Bool(val),\n             LiteralKind::Char => Literal::Char(Default::default()),"}, {"sha": "9253c97d084f6286f6e71c1f8f7ac7d711b91e2d", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 18, "deletions": 46, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5db789df9c767985a564a31cc593ce7f5964100e/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db789df9c767985a564a31cc593ce7f5964100e/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=5db789df9c767985a564a31cc593ce7f5964100e", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     ast::{self, support, AstChildren, AstNode},\n-    AstToken, SmolStr,\n+    AstToken,\n     SyntaxKind::*,\n     SyntaxToken, T,\n };\n@@ -298,12 +298,12 @@ impl ast::ArrayExpr {\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub enum LiteralKind {\n-    String,\n-    ByteString,\n+    String(ast::String),\n+    ByteString(ast::ByteString),\n+    IntNumber(ast::IntNumber),\n+    FloatNumber(ast::FloatNumber),\n     Char,\n     Byte,\n-    IntNumber { suffix: Option<SmolStr> },\n-    FloatNumber { suffix: Option<SmolStr> },\n     Bool(bool),\n }\n \n@@ -315,53 +315,25 @@ impl ast::Literal {\n             .and_then(|e| e.into_token())\n             .unwrap()\n     }\n-\n-    pub fn as_int_number(&self) -> Option<ast::IntNumber> {\n-        ast::IntNumber::cast(self.token())\n-    }\n-\n-    pub fn as_string(&self) -> Option<ast::String> {\n-        ast::String::cast(self.token())\n-    }\n-    pub fn as_byte_string(&self) -> Option<ast::ByteString> {\n-        ast::ByteString::cast(self.token())\n-    }\n-\n-    fn find_suffix(text: &str, possible_suffixes: &[&str]) -> Option<SmolStr> {\n-        possible_suffixes\n-            .iter()\n-            .find(|&suffix| text.ends_with(suffix))\n-            .map(|&suffix| SmolStr::new(suffix))\n-    }\n-\n     pub fn kind(&self) -> LiteralKind {\n         let token = self.token();\n \n+        if let Some(t) = ast::IntNumber::cast(token.clone()) {\n+            return LiteralKind::IntNumber(t);\n+        }\n+        if let Some(t) = ast::FloatNumber::cast(token.clone()) {\n+            return LiteralKind::FloatNumber(t);\n+        }\n+        if let Some(t) = ast::String::cast(token.clone()) {\n+            return LiteralKind::String(t);\n+        }\n+        if let Some(t) = ast::ByteString::cast(token.clone()) {\n+            return LiteralKind::ByteString(t);\n+        }\n+\n         match token.kind() {\n-            INT_NUMBER => {\n-                // FYI: there was a bug here previously, thus the if statement below is necessary.\n-                // The lexer treats e.g. `1f64` as an integer literal. See\n-                // https://github.com/rust-analyzer/rust-analyzer/issues/1592\n-                // and the comments on the linked PR.\n-                let text = token.text();\n-                if let suffix @ Some(_) = Self::find_suffix(&text, &ast::FloatNumber::SUFFIXES) {\n-                    LiteralKind::FloatNumber { suffix }\n-                } else {\n-                    LiteralKind::IntNumber {\n-                        suffix: Self::find_suffix(&text, &ast::IntNumber::SUFFIXES),\n-                    }\n-                }\n-            }\n-            FLOAT_NUMBER => {\n-                let text = token.text();\n-                LiteralKind::FloatNumber {\n-                    suffix: Self::find_suffix(&text, &ast::FloatNumber::SUFFIXES),\n-                }\n-            }\n-            STRING => LiteralKind::String,\n             T![true] => LiteralKind::Bool(true),\n             T![false] => LiteralKind::Bool(false),\n-            BYTE_STRING => LiteralKind::ByteString,\n             CHAR => LiteralKind::Char,\n             BYTE => LiteralKind::Byte,\n             _ => unreachable!(),"}, {"sha": "e4e512f2e057420579e87048ad0938afc491a8b2", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5db789df9c767985a564a31cc593ce7f5964100e/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db789df9c767985a564a31cc593ce7f5964100e/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=5db789df9c767985a564a31cc593ce7f5964100e", "patch": "@@ -517,10 +517,9 @@ impl HasFormatSpecifier for ast::String {\n }\n \n impl ast::IntNumber {\n-    #[rustfmt::skip]\n-    pub(crate) const SUFFIXES: &'static [&'static str] = &[\n-        \"u8\", \"u16\", \"u32\", \"u64\", \"u128\", \"usize\",\n-        \"i8\", \"i16\", \"i32\", \"i64\", \"i128\", \"isize\",\n+    const SUFFIXES: &'static [&'static str] = &[\n+        \"u8\", \"u16\", \"u32\", \"u64\", \"u128\", \"usize\", // Unsigned.\n+        \"i8\", \"i16\", \"i32\", \"i64\", \"i128\", \"isize\", // Signed.\n     ];\n \n     pub fn radix(&self) -> Radix {\n@@ -555,9 +554,24 @@ impl ast::IntNumber {\n \n     pub fn suffix(&self) -> Option<&str> {\n         let text = self.text();\n-        // FIXME: don't check a fixed set of suffixes, `1_0_1___lol` is valid\n-        // syntax, suffix is `lol`.\n-        ast::IntNumber::SUFFIXES.iter().find_map(|suffix| {\n+        // FIXME: don't check a fixed set of suffixes, `1_0_1_l_o_l` is valid\n+        // syntax, suffix is `l_o_l`.\n+        ast::IntNumber::SUFFIXES.iter().chain(ast::FloatNumber::SUFFIXES.iter()).find_map(\n+            |suffix| {\n+                if text.ends_with(suffix) {\n+                    return Some(&text[text.len() - suffix.len()..]);\n+                }\n+                None\n+            },\n+        )\n+    }\n+}\n+\n+impl ast::FloatNumber {\n+    const SUFFIXES: &'static [&'static str] = &[\"f32\", \"f64\"];\n+    pub fn suffix(&self) -> Option<&str> {\n+        let text = self.text();\n+        ast::FloatNumber::SUFFIXES.iter().find_map(|suffix| {\n             if text.ends_with(suffix) {\n                 return Some(&text[text.len() - suffix.len()..]);\n             }\n@@ -566,10 +580,6 @@ impl ast::IntNumber {\n     }\n }\n \n-impl ast::FloatNumber {\n-    pub(crate) const SUFFIXES: &'static [&'static str] = &[\"f32\", \"f64\"];\n-}\n-\n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n pub enum Radix {\n     Binary = 2,"}, {"sha": "6f45149bf65a85cc42ea3e3a0636b9bec1669e0c", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5db789df9c767985a564a31cc593ce7f5964100e/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db789df9c767985a564a31cc593ce7f5964100e/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=5db789df9c767985a564a31cc593ce7f5964100e", "patch": "@@ -4,7 +4,7 @@ mod block;\n \n use crate::{\n     algo, ast, match_ast, AstNode, SyntaxError,\n-    SyntaxKind::{BYTE, CHAR, CONST, FN, INT_NUMBER, TYPE_ALIAS},\n+    SyntaxKind::{CONST, FN, INT_NUMBER, TYPE_ALIAS},\n     SyntaxNode, SyntaxToken, TextSize, T,\n };\n use rowan::Direction;\n@@ -121,41 +121,42 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n         acc.push(SyntaxError::new_at_offset(rustc_unescape_error_to_string(err), off));\n     };\n \n-    if let Some(s) = literal.as_string() {\n-        if !s.is_raw() {\n-            if let Some(without_quotes) = unquote(text, 1, '\"') {\n-                unescape_literal(without_quotes, Mode::Str, &mut |range, char| {\n-                    if let Err(err) = char {\n-                        push_err(1, (range.start, err));\n-                    }\n-                })\n-            }\n-        }\n-    }\n-    if let Some(s) = literal.as_byte_string() {\n-        if !s.is_raw() {\n-            if let Some(without_quotes) = unquote(text, 2, '\"') {\n-                unescape_byte_literal(without_quotes, Mode::ByteStr, &mut |range, char| {\n-                    if let Err(err) = char {\n-                        push_err(2, (range.start, err));\n-                    }\n-                })\n+    match literal.kind() {\n+        ast::LiteralKind::String(s) => {\n+            if !s.is_raw() {\n+                if let Some(without_quotes) = unquote(text, 1, '\"') {\n+                    unescape_literal(without_quotes, Mode::Str, &mut |range, char| {\n+                        if let Err(err) = char {\n+                            push_err(1, (range.start, err));\n+                        }\n+                    })\n+                }\n             }\n         }\n-    }\n-\n-    match token.kind() {\n-        BYTE => {\n-            if let Some(Err(e)) = unquote(text, 2, '\\'').map(unescape_byte) {\n-                push_err(2, e);\n+        ast::LiteralKind::ByteString(s) => {\n+            if !s.is_raw() {\n+                if let Some(without_quotes) = unquote(text, 2, '\"') {\n+                    unescape_byte_literal(without_quotes, Mode::ByteStr, &mut |range, char| {\n+                        if let Err(err) = char {\n+                            push_err(2, (range.start, err));\n+                        }\n+                    })\n+                }\n             }\n         }\n-        CHAR => {\n+        ast::LiteralKind::Char => {\n             if let Some(Err(e)) = unquote(text, 1, '\\'').map(unescape_char) {\n                 push_err(1, e);\n             }\n         }\n-        _ => (),\n+        ast::LiteralKind::Byte => {\n+            if let Some(Err(e)) = unquote(text, 2, '\\'').map(unescape_byte) {\n+                push_err(2, e);\n+            }\n+        }\n+        ast::LiteralKind::IntNumber(_)\n+        | ast::LiteralKind::FloatNumber(_)\n+        | ast::LiteralKind::Bool(_) => {}\n     }\n }\n "}]}