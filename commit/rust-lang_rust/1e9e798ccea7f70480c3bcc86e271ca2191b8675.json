{"sha": "1e9e798ccea7f70480c3bcc86e271ca2191b8675", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlOWU3OThjY2VhN2Y3MDQ4MGMzYmNjODZlMjcxY2EyMTkxYjg2NzU=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2016-08-07T21:33:35Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2016-08-28T05:43:51Z"}, "message": "Move E0379 check from typeck to ast validation", "tree": {"sha": "101518975e431334726a05b595a3966b8320836a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/101518975e431334726a05b595a3966b8320836a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e9e798ccea7f70480c3bcc86e271ca2191b8675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9e798ccea7f70480c3bcc86e271ca2191b8675", "html_url": "https://github.com/rust-lang/rust/commit/1e9e798ccea7f70480c3bcc86e271ca2191b8675", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e9e798ccea7f70480c3bcc86e271ca2191b8675/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e17d6db80a6baeb43cf37b784e58128c81d5a462", "url": "https://api.github.com/repos/rust-lang/rust/commits/e17d6db80a6baeb43cf37b784e58128c81d5a462", "html_url": "https://github.com/rust-lang/rust/commit/e17d6db80a6baeb43cf37b784e58128c81d5a462"}], "stats": {"total": 71, "additions": 37, "deletions": 34}, "files": [{"sha": "f10f1fba4c25eb21a2e263815e8561b330cdc0f7", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1e9e798ccea7f70480c3bcc86e271ca2191b8675/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9e798ccea7f70480c3bcc86e271ca2191b8675/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=1e9e798ccea7f70480c3bcc86e271ca2191b8675", "patch": "@@ -69,6 +69,17 @@ impl<'a> AstValidator<'a> {\n             }\n         }\n     }\n+\n+    fn check_trait_fn_not_const(&self, span: Span, constness: Constness) {\n+        match constness {\n+            Constness::Const => {\n+                struct_span_err!(self.session, span, E0379, \"trait fns cannot be declared const\")\n+                    .span_label(span, &format!(\"trait fns cannot be const\"))\n+                    .emit();\n+            }\n+            _ => {}\n+        }\n+    }\n }\n \n impl<'a> Visitor for AstValidator<'a> {\n@@ -146,6 +157,9 @@ impl<'a> Visitor for AstValidator<'a> {\n                 self.invalid_visibility(&item.vis, item.span, None);\n                 for impl_item in impl_items {\n                     self.invalid_visibility(&impl_item.vis, impl_item.span, None);\n+                    if let ImplItemKind::Method(ref sig, _) = impl_item.node {\n+                        self.check_trait_fn_not_const(impl_item.span, sig.constness);\n+                    }\n                 }\n             }\n             ItemKind::Impl(_, _, _, None, _, _) => {\n@@ -169,6 +183,13 @@ impl<'a> Visitor for AstValidator<'a> {\n                     }\n                 }\n             }\n+            ItemKind::Trait(_, _, _, ref trait_items) => {\n+                for trait_item in trait_items {\n+                    if let TraitItemKind::Method(ref sig, _) = trait_item.node {\n+                        self.check_trait_fn_not_const(trait_item.span, sig.constness);\n+                    }\n+                }\n+            }\n             ItemKind::Mod(_) => {\n                 // Ensure that `path` attributes on modules are recorded as used (c.f. #35584).\n                 attr::first_attr_value_str_by_name(&item.attrs, \"path\");"}, {"sha": "89b8aa81411b381ed7b1de79470440acb81e2be0", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1e9e798ccea7f70480c3bcc86e271ca2191b8675/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9e798ccea7f70480c3bcc86e271ca2191b8675/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=1e9e798ccea7f70480c3bcc86e271ca2191b8675", "patch": "@@ -176,6 +176,13 @@ fn some_func() {\n ```\n \"##,\n \n+E0379: r##\"\n+Trait methods cannot be declared `const` by design. For more information, see\n+[RFC 911].\n+\n+[RFC 911]: https://github.com/rust-lang/rfcs/pull/911\n+\"##,\n+\n E0449: r##\"\n A visibility qualifier was used when it was unnecessary. Erroneous code\n examples:"}, {"sha": "c8d2f9144dcc69d7f5f2321658cf334fae4112d9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1e9e798ccea7f70480c3bcc86e271ca2191b8675/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9e798ccea7f70480c3bcc86e271ca2191b8675/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1e9e798ccea7f70480c3bcc86e271ca2191b8675", "patch": "@@ -836,13 +836,9 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n                     check_const(ccx, &expr, trait_item.id)\n                 }\n                 hir::MethodTraitItem(ref sig, Some(ref body)) => {\n-                    check_trait_fn_not_const(ccx, trait_item.span, sig.constness);\n-\n                     check_bare_fn(ccx, &sig.decl, body, trait_item.id);\n                 }\n-                hir::MethodTraitItem(ref sig, None) => {\n-                    check_trait_fn_not_const(ccx, trait_item.span, sig.constness);\n-                }\n+                hir::MethodTraitItem(_, None) |\n                 hir::ConstTraitItem(_, None) |\n                 hir::TypeTraitItem(..) => {\n                     // Nothing to do.\n@@ -854,22 +850,6 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n     }\n }\n \n-fn check_trait_fn_not_const<'a,'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n-                                     span: Span,\n-                                     constness: hir::Constness)\n-{\n-    match constness {\n-        hir::Constness::NotConst => {\n-            // good\n-        }\n-        hir::Constness::Const => {\n-            struct_span_err!(ccx.tcx.sess, span, E0379, \"trait fns cannot be declared const\")\n-                .span_label(span, &format!(\"trait fns cannot be const\"))\n-                .emit()\n-        }\n-    }\n-}\n-\n fn check_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                     def_id: DefId,\n                                     item: &hir::Item) {\n@@ -1027,9 +1007,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                          err.emit()\n                     }\n                 }\n-                hir::ImplItemKind::Method(ref sig, ref body) => {\n-                    check_trait_fn_not_const(ccx, impl_item.span, sig.constness);\n-\n+                hir::ImplItemKind::Method(_, ref body) => {\n                     let impl_method = match ty_impl_item {\n                         ty::MethodTraitItem(ref mti) => mti,\n                         _ => span_bug!(impl_item.span, \"non-method impl-item for method\")"}, {"sha": "3f1374db36936093418193e6b326429b41a4e6b8", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1e9e798ccea7f70480c3bcc86e271ca2191b8675/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9e798ccea7f70480c3bcc86e271ca2191b8675/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=1e9e798ccea7f70480c3bcc86e271ca2191b8675", "patch": "@@ -3422,13 +3422,6 @@ containing the unsized type is the last and only unsized type field in the\n struct.\n \"##,\n \n-E0379: r##\"\n-Trait methods cannot be declared `const` by design. For more information, see\n-[RFC 911].\n-\n-[RFC 911]: https://github.com/rust-lang/rfcs/pull/911\n-\"##,\n-\n E0380: r##\"\n Default impls are only allowed for traits with no methods or associated items.\n For more information see the [opt-in builtin traits RFC](https://github.com/rust"}, {"sha": "7ea72e23779ec5f40871851c233fc0a401aff4c8", "filename": "src/test/compile-fail/const-fn-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e9e798ccea7f70480c3bcc86e271ca2191b8675/src%2Ftest%2Fcompile-fail%2Fconst-fn-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9e798ccea7f70480c3bcc86e271ca2191b8675/src%2Ftest%2Fcompile-fail%2Fconst-fn-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-mismatch.rs?ref=1e9e798ccea7f70480c3bcc86e271ca2191b8675", "patch": "@@ -21,7 +21,7 @@ trait Foo {\n \n impl Foo for u32 {\n     const fn f() -> u32 { 22 }\n-    //~^ ERROR E0379\n+    //~^ ERROR trait fns cannot be declared const\n     //~| NOTE trait fns cannot be const\n }\n "}, {"sha": "257d4d5ee99210fbe514ba571378836f23fa51a4", "filename": "src/test/compile-fail/const-fn-not-in-trait.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e9e798ccea7f70480c3bcc86e271ca2191b8675/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9e798ccea7f70480c3bcc86e271ca2191b8675/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-in-trait.rs?ref=1e9e798ccea7f70480c3bcc86e271ca2191b8675", "patch": "@@ -14,8 +14,12 @@\n #![feature(const_fn)]\n \n trait Foo {\n-    const fn f() -> u32; //~ ERROR trait fns cannot be declared const\n-    const fn g() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n+    const fn f() -> u32;\n+    //~^ ERROR trait fns cannot be declared const\n+    //~| NOTE trait fns cannot be const\n+    const fn g() -> u32 { 0 }\n+    //~^ ERROR trait fns cannot be declared const\n+    //~| NOTE trait fns cannot be const\n }\n \n fn main() { }"}]}