{"sha": "84edc0a089d164ffc121d0566358718046c4a06d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZWRjMGEwODlkMTY0ZmZjMTIxZDA1NjYzNTg3MTgwNDZjNGEwNmQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-03T15:14:43Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:32Z"}, "message": "Move lifetime calculation outside loop", "tree": {"sha": "86e16af93e74d50f7b4e53e7445d8abf37da9f6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86e16af93e74d50f7b4e53e7445d8abf37da9f6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84edc0a089d164ffc121d0566358718046c4a06d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84edc0a089d164ffc121d0566358718046c4a06d", "html_url": "https://github.com/rust-lang/rust/commit/84edc0a089d164ffc121d0566358718046c4a06d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84edc0a089d164ffc121d0566358718046c4a06d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6eef180cdd47f078e9f920d7466dbdd580c2cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6eef180cdd47f078e9f920d7466dbdd580c2cf4", "html_url": "https://github.com/rust-lang/rust/commit/b6eef180cdd47f078e9f920d7466dbdd580c2cf4"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "8286004c2679a4dbe6d7a63251beac40e0ed2a95", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84edc0a089d164ffc121d0566358718046c4a06d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84edc0a089d164ffc121d0566358718046c4a06d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=84edc0a089d164ffc121d0566358718046c4a06d", "patch": "@@ -4951,14 +4951,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let supress_mismatch = self.check_impl_trait(span, seg, &generics);\n             supress_errors.insert(index,\n                 self.check_generic_arg_count(span, seg, &generics, false, supress_mismatch));\n-            infer_lifetimes.insert(index, if let Some(ref data) = seg.args {\n+            let inferred_lifetimes = if if let Some(ref data) = seg.args {\n                 !data.args.iter().any(|arg| match arg {\n                     GenericArg::Lifetime(_) => true,\n                     _ => false,\n                 })\n             } else {\n                 true\n-            });\n+            } {\n+                generics.own_counts().lifetimes\n+            } else {\n+                0\n+            };\n+            infer_lifetimes.insert(index, inferred_lifetimes);\n         }\n \n         let has_self = path_segs.last().map(|PathSeg(def_id, _)| {\n@@ -4997,15 +5002,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         true\n                     } else {\n                         if let Some(ref data) = segments[index].args {\n-                            let lifetime_offset = if infer_lifetimes[&index] {\n-                                defs.own_counts().lifetimes\n-                            } else {\n-                                0\n-                            };\n                             let self_offset = (defs.parent_count == 0 && has_self) as usize;\n                             let param_idx =\n                                 (param.index as usize - defs.parent_count - self_offset as usize)\n-                                .saturating_sub(lifetime_offset);\n+                                .saturating_sub(infer_lifetimes[&index]);\n                             if let Some(arg) = data.args.get(param_idx) {\n                                 match param.kind {\n                                     GenericParamDefKind::Lifetime => match arg {"}]}