{"sha": "cede907e91cb5aba641cf12d4f956ec994a5196f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZGU5MDdlOTFjYjVhYmE2NDFjZjEyZDRmOTU2ZWM5OTRhNTE5NmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-02T02:43:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-02T02:43:04Z"}, "message": "Auto merge of #30155 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #30129, #30134, #30136, #30144, #30150, #30153, #30154\n- Failed merges:", "tree": {"sha": "c454b60d8a109bea38394231259ab3e660abbd3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c454b60d8a109bea38394231259ab3e660abbd3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cede907e91cb5aba641cf12d4f956ec994a5196f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cede907e91cb5aba641cf12d4f956ec994a5196f", "html_url": "https://github.com/rust-lang/rust/commit/cede907e91cb5aba641cf12d4f956ec994a5196f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cede907e91cb5aba641cf12d4f956ec994a5196f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f95de3b3b99954f48f189bcca195eb43c67844e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f95de3b3b99954f48f189bcca195eb43c67844e", "html_url": "https://github.com/rust-lang/rust/commit/2f95de3b3b99954f48f189bcca195eb43c67844e"}, {"sha": "9823511b2a2d052c47af7cc4795d26b17a8baf06", "url": "https://api.github.com/repos/rust-lang/rust/commits/9823511b2a2d052c47af7cc4795d26b17a8baf06", "html_url": "https://github.com/rust-lang/rust/commit/9823511b2a2d052c47af7cc4795d26b17a8baf06"}], "stats": {"total": 93, "additions": 54, "deletions": 39}, "files": [{"sha": "0d0fd8cf1d0a641e1c4f526be1f79181532e3f58", "filename": "src/doc/book/documentation.md", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Fdoc%2Fbook%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Fdoc%2Fbook%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fdocumentation.md?ref=cede907e91cb5aba641cf12d4f956ec994a5196f", "patch": "@@ -213,8 +213,8 @@ Let's discuss our sample example documentation:\n ```\n \n You'll notice that you don't need a `fn main()` or anything here. `rustdoc` will\n-automatically add a `main()` wrapper around your code, and in the right place.\n-For example:\n+automatically add a `main()` wrapper around your code, using heuristics to attempt\n+to put it in the right place. For example:\n \n ```rust\n /// ```\n@@ -242,11 +242,18 @@ Here's the full algorithm rustdoc uses to preprocess examples:\n    `unused_attributes`, and `dead_code`. Small examples often trigger\n    these lints.\n 3. If the example does not contain `extern crate`, then `extern crate\n-   <mycrate>;` is inserted.\n-2. Finally, if the example does not contain `fn main`, the remainder of the\n-   text is wrapped in `fn main() { your_code }`\n-\n-Sometimes, this isn't enough, though. For example, all of these code samples\n+   <mycrate>;` is inserted (note the lack of `#[macro_use]`).\n+4. Finally, if the example does not contain `fn main`, the remainder of the\n+   text is wrapped in `fn main() { your_code }`.\n+\n+This generated `fn main` can be a problem! If you have `extern crate` or a `mod`\n+statements in the example code that are referred to by `use` statements, they will\n+fail to resolve unless you include at least `fn main() {}` to inhibit step 4.\n+`#[macro_use] extern crate` also does not work except at the crate root, so when\n+testing macros an explicit `main` is always required. It doesn't have to clutter\n+up your docs, though -- keep reading!\n+\n+Sometimes this algorithm isn't enough, though. For example, all of these code samples\n with `///` we've been talking about? The raw text:\n \n ```text\n@@ -370,8 +377,8 @@ macro_rules! panic_unless {\n \n You\u2019ll note three things: we need to add our own `extern crate` line, so that\n we can add the `#[macro_use]` attribute. Second, we\u2019ll need to add our own\n-`main()` as well. Finally, a judicious use of `#` to comment out those two\n-things, so they don\u2019t show up in the output.\n+`main()` as well (for reasons discussed above). Finally, a judicious use of\n+`#` to comment out those two things, so they don\u2019t show up in the output.\n \n Another case where the use of `#` is handy is when you want to ignore\n error handling. Lets say you want the following,"}, {"sha": "8cb00f26ba526fe0da95613a0b49751b71ca31aa", "filename": "src/doc/book/guessing-game.md", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Fdoc%2Fbook%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Fdoc%2Fbook%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fguessing-game.md?ref=cede907e91cb5aba641cf12d4f956ec994a5196f", "patch": "@@ -357,9 +357,13 @@ Cargo uses the dependencies section to know what dependencies on external\n crates you have, and what versions you require. In this case, we\u2019ve specified version `0.3.0`,\n which Cargo understands to be any release that\u2019s compatible with this specific version.\n Cargo understands [Semantic Versioning][semver], which is a standard for writing version\n-numbers. If we wanted to use only `0.3.0` exactly, we could use `=0.3.0`. If we\n-wanted to use the latest version we could use `*`; We could use a range of\n-versions. [Cargo\u2019s documentation][cargodoc] contains more details.\n+numbers. A bare number like above is actually shorthand for `^0.3.0`,\n+meaning \"anything compatible with 0.3.0\".\n+If we wanted to use only `0.3.0` exactly, we could say `rand=\"=0.3.0\"`\n+(note the two equal signs).\n+And if we wanted to use the latest version we could use `*`.\n+We could also use a range of versions.\n+[Cargo\u2019s documentation][cargodoc] contains more details.\n \n [semver]: http://semver.org\n [cargodoc]: http://doc.crates.io/crates-io.html\n@@ -521,11 +525,11 @@ Please input your guess.\n You guessed: 5\n ```\n \n-Great! Next up: let\u2019s compare our guess to the secret guess.\n+Great! Next up: comparing our guess to the secret number.\n \n # Comparing guesses\n \n-Now that we\u2019ve got user input, let\u2019s compare our guess to the random guess.\n+Now that we\u2019ve got user input, let\u2019s compare our guess to the secret number.\n Here\u2019s our next step, though it doesn\u2019t quite compile yet:\n \n ```rust,ignore\n@@ -775,7 +779,7 @@ fn main() {\n ```\n \n And try it out. But wait, didn\u2019t we just add an infinite loop? Yup. Remember\n-our discussion about `parse()`? If we give a non-number answer, we\u2019ll `return`\n+our discussion about `parse()`? If we give a non-number answer, we\u2019ll `panic!`\n and quit. Observe:\n \n ```bash"}, {"sha": "df620d4a04e7fd7aaf5544abf44c2389d92ee042", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=cede907e91cb5aba641cf12d4f956ec994a5196f", "patch": "@@ -159,8 +159,8 @@ pub enum RegionResolutionError<'tcx> {\n /// like to indicate so to the user.\n /// For example, the following function\n /// ```\n-/// struct Foo { bar: int }\n-/// fn foo2<'a, 'b>(x: &'a Foo) -> &'b int {\n+/// struct Foo { bar: isize }\n+/// fn foo2<'a, 'b>(x: &'a Foo) -> &'b isize {\n ///    &x.bar\n /// }\n /// ```"}, {"sha": "14c2e1f5aacbf7da0a5b04d7f78fedde0447c40f", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=cede907e91cb5aba641cf12d4f956ec994a5196f", "patch": "@@ -1583,7 +1583,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             let r = self.should_warn(var);\n             if let Some(name) = r {\n \n-                // annoying: for parameters in funcs like `fn(x: int)\n+                // annoying: for parameters in funcs like `fn(x: isize)\n                 // {ret}`, there is only one node, so asking about\n                 // assigned_on_exit() is not meaningful.\n                 let is_assigned = if ln == self.s.exit_ln {"}, {"sha": "b460c0ec4d0c474a3893351aa03f8eb42271e0d6", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=cede907e91cb5aba641cf12d4f956ec994a5196f", "patch": "@@ -718,8 +718,8 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n     ///\n     /// For example:\n     ///\n-    /// ```\n-    /// let a: int;\n+    /// ```ignore\n+    /// let a: isize;\n     /// a = 10; // ok, even though a is uninitialized\n     ///\n     /// struct Point { x: usize, y: usize }"}, {"sha": "f3addf381e0d0c05f52414061e08a76ea4e1bf25", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=cede907e91cb5aba641cf12d4f956ec994a5196f", "patch": "@@ -486,7 +486,9 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n         //! come about when variables of `&mut` type are re-borrowed,\n         //! as in this example:\n         //!\n-        //!     fn counter<'a>(v: &'a mut Foo) -> &'a mut uint {\n+        //!     struct Foo { counter: usize }\n+        //!\n+        //!     fn counter<'a>(v: &'a mut Foo) -> &'a mut usize {\n         //!         &mut v.counter\n         //!     }\n         //!"}, {"sha": "c7d9e3de5a19fa112d91fe87133067e7e673b71b", "filename": "src/librustc_trans/trans/debuginfo/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fdoc.rs?ref=cede907e91cb5aba641cf12d4f956ec994a5196f", "patch": "@@ -66,7 +66,7 @@\n //!\n //! ```\n //! struct List {\n-//!     value: int,\n+//!     value: isize,\n //!     tail: Option<Box<List>>,\n //! }\n //! ```"}, {"sha": "795a56b2dcf4773bcf5d4660752ea28b02daa31b", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=cede907e91cb5aba641cf12d4f956ec994a5196f", "patch": "@@ -456,7 +456,7 @@ fn trans_trait_callee_from_llval<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n /// Generate a shim function that allows an object type like `SomeTrait` to\n /// implement the type `SomeTrait`. Imagine a trait definition:\n ///\n-///    trait SomeTrait { fn get(&self) -> int; ... }\n+///    trait SomeTrait { fn get(&self) -> isize; ... }\n ///\n /// And a generic bit of code:\n ///\n@@ -468,7 +468,7 @@ fn trans_trait_callee_from_llval<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n /// What is the value of `x` when `foo` is invoked with `T=SomeTrait`?\n /// The answer is that it is a shim function generated by this routine:\n ///\n-///    fn shim(t: &SomeTrait) -> int {\n+///    fn shim(t: &SomeTrait) -> isize {\n ///        // ... call t.get() virtually ...\n ///    }\n ///"}, {"sha": "4f897d91b078e6c732fa4f0c2540293181f8caf8", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=cede907e91cb5aba641cf12d4f956ec994a5196f", "patch": "@@ -59,7 +59,7 @@\n //! There are a number of troublesome scenarios in the tests\n //! `region-dependent-*.rs`, but here is one example:\n //!\n-//!     struct Foo { i: int }\n+//!     struct Foo { i: isize }\n //!     struct Bar { foo: Foo  }\n //!     fn get_i(x: &'a Bar) -> &'a int {\n //!        let foo = &x.foo; // Lifetime L1\n@@ -233,8 +233,8 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n     /// Consider this silly example:\n     ///\n     /// ```\n-    /// fn borrow(x: &int) -> &int {x}\n-    /// fn foo(x: @int) -> int {  // block: B\n+    /// fn borrow(x: &int) -> &isize {x}\n+    /// fn foo(x: @int) -> isize {  // block: B\n     ///     let b = borrow(x);    // region: <R0>\n     ///     *b\n     /// }\n@@ -243,7 +243,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n     /// Here, the region of `b` will be `<R0>`.  `<R0>` is constrained to be some subregion of the\n     /// block B and some superregion of the call.  If we forced it now, we'd choose the smaller\n     /// region (the call).  But that would make the *b illegal.  Since we don't resolve, the type\n-    /// of b will be `&<R0>.int` and then `*b` will require that `<R0>` be bigger than the let and\n+    /// of b will be `&<R0>.isize` and then `*b` will require that `<R0>` be bigger than the let and\n     /// the `*b` expression, so we will effectively resolve `<R0>` to be the block B.\n     pub fn resolve_type(&self, unresolved_ty: Ty<'tcx>) -> Ty<'tcx> {\n         self.fcx.infcx().resolve_type_vars_if_possible(&unresolved_ty)"}, {"sha": "910f3b713cf86fff32a12393c4845833cad6d7f4", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=cede907e91cb5aba641cf12d4f956ec994a5196f", "patch": "@@ -172,14 +172,14 @@\n //!\n //! Now imagine that I have an implementation of `ConvertTo` for `Object`:\n //!\n-//!     impl ConvertTo<int> for Object { ... }\n+//!     impl ConvertTo<isize> for Object { ... }\n //!\n //! And I want to call `convertAll` on an array of strings. Suppose\n //! further that for whatever reason I specifically supply the value of\n //! `String` for the type parameter `T`:\n //!\n //!     let mut vector = vec![\"string\", ...];\n-//!     convertAll::<int, String>(vector);\n+//!     convertAll::<isize, String>(vector);\n //!\n //! Is this legal? To put another way, can we apply the `impl` for\n //! `Object` to the type `String`? The answer is yes, but to see why\n@@ -190,25 +190,25 @@\n //! - It will then call the impl of `convertTo()` that is intended\n //!   for use with objects. This has the type:\n //!\n-//!       fn(self: &Object) -> int\n+//!       fn(self: &Object) -> isize\n //!\n //!   It is ok to provide a value for `self` of type `&String` because\n //!   `&String <: &Object`.\n //!\n //! OK, so intuitively we want this to be legal, so let's bring this back\n //! to variance and see whether we are computing the correct result. We\n //! must first figure out how to phrase the question \"is an impl for\n-//! `Object,int` usable where an impl for `String,int` is expected?\"\n+//! `Object,isize` usable where an impl for `String,isize` is expected?\"\n //!\n //! Maybe it's helpful to think of a dictionary-passing implementation of\n //! type classes. In that case, `convertAll()` takes an implicit parameter\n //! representing the impl. In short, we *have* an impl of type:\n //!\n-//!     V_O = ConvertTo<int> for Object\n+//!     V_O = ConvertTo<isize> for Object\n //!\n //! and the function prototype expects an impl of type:\n //!\n-//!     V_S = ConvertTo<int> for String\n+//!     V_S = ConvertTo<isize> for String\n //!\n //! As with any argument, this is legal if the type of the value given\n //! (`V_O`) is a subtype of the type expected (`V_S`). So is `V_O <: V_S`?\n@@ -217,7 +217,7 @@\n //! covariant, it means that:\n //!\n //!     V_O <: V_S iff\n-//!         int <: int\n+//!         isize <: isize\n //!         String <: Object\n //!\n //! These conditions are satisfied and so we are happy."}, {"sha": "760733872ea190c8d2498e9f1f9f2641ac2ca6ac", "filename": "src/libstd/env.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cede907e91cb5aba641cf12d4f956ec994a5196f/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=cede907e91cb5aba641cf12d4f956ec994a5196f", "patch": "@@ -671,9 +671,9 @@ pub mod consts {\n     ///\n     /// Some possible values:\n     ///\n-    /// - .so\n-    /// - .dylib\n-    /// - .dll\n+    /// - so\n+    /// - dylib\n+    /// - dll\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const DLL_EXTENSION: &'static str = super::os::DLL_EXTENSION;\n \n@@ -682,7 +682,9 @@ pub mod consts {\n     ///\n     /// Some possible values:\n     ///\n-    /// - exe\n+    /// - .exe\n+    /// - .nexe\n+    /// - .pexe\n     /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const EXE_SUFFIX: &'static str = super::os::EXE_SUFFIX;"}]}