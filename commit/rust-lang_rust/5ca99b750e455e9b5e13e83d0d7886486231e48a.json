{"sha": "5ca99b750e455e9b5e13e83d0d7886486231e48a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYTk5Yjc1MGU0NTVlOWI1ZTEzZTgzZDBkNzg4NjQ4NjIzMWU0OGE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-25T21:06:00Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-29T23:05:36Z"}, "message": "Avoid `chain()` in `find_constraint_paths_between_regions()`.\n\nThis iterator can be hot, and chained iterators are slow. The second\nhalf of the chain is almost always empty, so this commit changes the\ncode to avoid the chained iteration.\n\nThis change reduces instruction counts for the `wg-grammar` benchmark by\nup to 1.5%.", "tree": {"sha": "3c35d77076843ddf122b4aa114573fbd02a1ec01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c35d77076843ddf122b4aa114573fbd02a1ec01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ca99b750e455e9b5e13e83d0d7886486231e48a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca99b750e455e9b5e13e83d0d7886486231e48a", "html_url": "https://github.com/rust-lang/rust/commit/5ca99b750e455e9b5e13e83d0d7886486231e48a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ca99b750e455e9b5e13e83d0d7886486231e48a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c2c29c43206d6e2f1091fa278d2792ea10e3659", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2c29c43206d6e2f1091fa278d2792ea10e3659", "html_url": "https://github.com/rust-lang/rust/commit/6c2c29c43206d6e2f1091fa278d2792ea10e3659"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "c2cf4b58b733b1957f982f2f7fcf5cc07e0097ad", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5ca99b750e455e9b5e13e83d0d7886486231e48a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca99b750e455e9b5e13e83d0d7886486231e48a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=5ca99b750e455e9b5e13e83d0d7886486231e48a", "patch": "@@ -1,5 +1,4 @@\n use crate::borrow_check::nll::constraints::OutlivesConstraint;\n-use crate::borrow_check::nll::region_infer::AppliedMemberConstraint;\n use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n use crate::borrow_check::nll::type_check::Locations;\n use crate::borrow_check::nll::universal_regions::DefiningTy;\n@@ -253,29 +252,33 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             let outgoing_edges_from_graph = self.constraint_graph\n                 .outgoing_edges(r, &self.constraints, fr_static);\n \n-\n-            // But member constraints can also give rise to `'r: 'x`\n-            // edges that were not part of the graph initially, so\n-            // watch out for those.\n-            let outgoing_edges_from_picks = self.applied_member_constraints(r)\n-                .iter()\n-                .map(|&AppliedMemberConstraint { min_choice, member_constraint_index, .. }| {\n-                    let p_c = &self.member_constraints[member_constraint_index];\n-                    OutlivesConstraint {\n-                        sup: r,\n-                        sub: min_choice,\n-                        locations: Locations::All(p_c.definition_span),\n-                        category: ConstraintCategory::OpaqueType,\n-                    }\n-                });\n-\n-            for constraint in outgoing_edges_from_graph.chain(outgoing_edges_from_picks) {\n+            // Always inline this closure because it can be hot.\n+            let mut handle_constraint = #[inline(always)] |constraint: OutlivesConstraint| {\n                 debug_assert_eq!(constraint.sup, r);\n                 let sub_region = constraint.sub;\n                 if let Trace::NotVisited = context[sub_region] {\n                     context[sub_region] = Trace::FromOutlivesConstraint(constraint);\n                     deque.push_back(sub_region);\n                 }\n+            };\n+\n+            // This loop can be hot.\n+            for constraint in outgoing_edges_from_graph {\n+                handle_constraint(constraint);\n+            }\n+\n+            // Member constraints can also give rise to `'r: 'x` edges that\n+            // were not part of the graph initially, so watch out for those.\n+            // (But they are extremely rare; this loop is very cold.)\n+            for constraint in self.applied_member_constraints(r) {\n+                let p_c = &self.member_constraints[constraint.member_constraint_index];\n+                let constraint = OutlivesConstraint {\n+                    sup: r,\n+                    sub: constraint.min_choice,\n+                    locations: Locations::All(p_c.definition_span),\n+                    category: ConstraintCategory::OpaqueType,\n+                };\n+                handle_constraint(constraint);\n             }\n         }\n "}, {"sha": "81c08ee87e985ecab89b9f4b78ac868ef94d1282", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ca99b750e455e9b5e13e83d0d7886486231e48a/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca99b750e455e9b5e13e83d0d7886486231e48a/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=5ca99b750e455e9b5e13e83d0d7886486231e48a", "patch": "@@ -25,6 +25,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(mem_take)]\n #![feature(associated_type_bounds)]\n #![feature(range_is_empty)]\n+#![feature(stmt_expr_attributes)]\n \n #![recursion_limit=\"256\"]\n "}]}