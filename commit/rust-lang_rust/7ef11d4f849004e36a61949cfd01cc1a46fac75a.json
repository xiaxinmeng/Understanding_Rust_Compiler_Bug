{"sha": "7ef11d4f849004e36a61949cfd01cc1a46fac75a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZjExZDRmODQ5MDA0ZTM2YTYxOTQ5Y2ZkMDFjYzFhNDZmYWM3NWE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-19T17:13:25Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-20T03:58:42Z"}, "message": "Rollup merge of #58530 - scottmcm:monomorphize-less, r=TimNN\n\nMonomorphize less code in fs::{read|write}\n\nSince the generic-ness is only for the as_refs, might as well have std just compile the important part once instead of on every use.", "tree": {"sha": "60f2a0a8d0deb66f89f68a4b93a1fc4a8e11668f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60f2a0a8d0deb66f89f68a4b93a1fc4a8e11668f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ef11d4f849004e36a61949cfd01cc1a46fac75a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlxs0HIACgkQ/vbIBR0O\nATz3qA//U62qy7p7kRo31HZWeTTntUxBcLCk/8LaSObe/i0YKNbt4FQDjDRboSz1\n9JLngotBw1RvBeFvlA97IX/vsQao92GAXDq7U9d1Z1mWYsPa5mKIOQ1iHvzJn0kN\nlmrOSQrpErSAzAB5eNMBcnJyRbdZl8B8lnJwq3uz7Z3KsKKB3LdI+mENeQSs2/Rf\npPL2OlWuUc/QmVRCMs3naJoV/l1pkkaP/okXIp1k/UjrNhIP1eqwOc24JlnkHdUz\nq0/RVZiXGya9qKeV3UgJcTEVdaTKYN/eImtnvDv9cxpTClcgARv80zuWHN7mO7o6\n+HOQxcSAnEc5ZCY0TqitLHL/QRlAu0otPtJaqhcxLbWSOe20L7sIqinyVEFXT/mo\npHMYyHIn2wiM2RDxYas/jhPA9asMlL7KFKpeJZ+OoPMUC4XebmC2YxIAd+gOspIy\nGsR0ORbnJ2o/qRMnb+yCtpdhT2lG2aGvkcFVXvqPMQxGkC/0ik39dtQ1W2ByldF1\nbYmPiJI3A+mxkLMdA+F7rYfpwh83GDe7v8BicRqPEdo0ytRBWvELw+Ar2YKFlXka\nuNG44gQgrP+3wslOxjODa3XHwPwjjMsUVTfzYUUXpOuE6TjhBkWHxPBPaj/gW6Eb\nyMnIIL9mMsIU4fp0l0uvRzfnvMtZ8+rrFYx2HAJQIklvN91WEuM=\n=7/1o\n-----END PGP SIGNATURE-----", "payload": "tree 60f2a0a8d0deb66f89f68a4b93a1fc4a8e11668f\nparent e95297ca15d00363cafe2f56159898b7fa2e9e21\nparent 564c569bcb1b85ec3b1f93de60b7f7b385c5bd17\nauthor kennytm <kennytm@gmail.com> 1550596405 +0800\ncommitter kennytm <kennytm@gmail.com> 1550635122 +0800\n\nRollup merge of #58530 - scottmcm:monomorphize-less, r=TimNN\n\nMonomorphize less code in fs::{read|write}\n\nSince the generic-ness is only for the as_refs, might as well have std just compile the important part once instead of on every use.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ef11d4f849004e36a61949cfd01cc1a46fac75a", "html_url": "https://github.com/rust-lang/rust/commit/7ef11d4f849004e36a61949cfd01cc1a46fac75a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ef11d4f849004e36a61949cfd01cc1a46fac75a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e95297ca15d00363cafe2f56159898b7fa2e9e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/e95297ca15d00363cafe2f56159898b7fa2e9e21", "html_url": "https://github.com/rust-lang/rust/commit/e95297ca15d00363cafe2f56159898b7fa2e9e21"}, {"sha": "564c569bcb1b85ec3b1f93de60b7f7b385c5bd17", "url": "https://api.github.com/repos/rust-lang/rust/commits/564c569bcb1b85ec3b1f93de60b7f7b385c5bd17", "html_url": "https://github.com/rust-lang/rust/commit/564c569bcb1b85ec3b1f93de60b7f7b385c5bd17"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "def51c79a8562cc73d55a9f07c232348dc4c8501", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7ef11d4f849004e36a61949cfd01cc1a46fac75a/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef11d4f849004e36a61949cfd01cc1a46fac75a/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=7ef11d4f849004e36a61949cfd01cc1a46fac75a", "patch": "@@ -254,10 +254,13 @@ fn initial_buffer_size(file: &File) -> usize {\n /// ```\n #[stable(feature = \"fs_read_write_bytes\", since = \"1.26.0\")]\n pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n-    let mut file = File::open(path)?;\n-    let mut bytes = Vec::with_capacity(initial_buffer_size(&file));\n-    file.read_to_end(&mut bytes)?;\n-    Ok(bytes)\n+    fn inner(path: &Path) -> io::Result<Vec<u8>> {\n+        let mut file = File::open(path)?;\n+        let mut bytes = Vec::with_capacity(initial_buffer_size(&file));\n+        file.read_to_end(&mut bytes)?;\n+        Ok(bytes)\n+    }\n+    inner(path.as_ref())\n }\n \n /// Read the entire contents of a file into a string.\n@@ -296,10 +299,13 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// ```\n #[stable(feature = \"fs_read_write\", since = \"1.26.0\")]\n pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n-    let mut file = File::open(path)?;\n-    let mut string = String::with_capacity(initial_buffer_size(&file));\n-    file.read_to_string(&mut string)?;\n-    Ok(string)\n+    fn inner(path: &Path) -> io::Result<String> {\n+        let mut file = File::open(path)?;\n+        let mut string = String::with_capacity(initial_buffer_size(&file));\n+        file.read_to_string(&mut string)?;\n+        Ok(string)\n+    }\n+    inner(path.as_ref())\n }\n \n /// Write a slice as the entire contents of a file.\n@@ -326,7 +332,10 @@ pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n /// ```\n #[stable(feature = \"fs_read_write_bytes\", since = \"1.26.0\")]\n pub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> {\n-    File::create(path)?.write_all(contents.as_ref())\n+    fn inner(path: &Path, contents: &[u8]) -> io::Result<()> {\n+        File::create(path)?.write_all(contents)\n+    }\n+    inner(path.as_ref(), contents.as_ref())\n }\n \n impl File {"}]}