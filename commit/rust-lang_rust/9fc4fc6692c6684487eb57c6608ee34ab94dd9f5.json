{"sha": "9fc4fc6692c6684487eb57c6608ee34ab94dd9f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYzRmYzY2OTJjNjY4NDQ4N2ViNTdjNjYwOGVlMzRhYjk0ZGQ5ZjU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-20T18:40:59Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-20T18:42:44Z"}, "message": "Add _uint module to std, move some code around.", "tree": {"sha": "cddbecd3d439f36d27c4549700d25ab3c23f1f52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cddbecd3d439f36d27c4549700d25ab3c23f1f52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5", "html_url": "https://github.com/rust-lang/rust/commit/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f9750ca2c0c7ae744f35ec0949527f106c10099", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9750ca2c0c7ae744f35ec0949527f106c10099", "html_url": "https://github.com/rust-lang/rust/commit/5f9750ca2c0c7ae744f35ec0949527f106c10099"}], "stats": {"total": 135, "additions": 75, "deletions": 60}, "files": [{"sha": "396dd33190a439e512c722a9babd4f7a4f718c50", "filename": "src/lib/_int.rs", "status": "modified", "additions": 2, "deletions": 56, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/src%2Flib%2F_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/src%2Flib%2F_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_int.rs?ref=9fc4fc6692c6684487eb57c6608ee34ab94dd9f5", "patch": "@@ -25,66 +25,12 @@ iter range(mutable int lo, int hi) -> int {\n   }\n }\n \n-iter urange(mutable uint lo, uint hi) -> uint {\n-  while (lo < hi) {\n-    put lo;\n-    lo += 1u;\n-  }\n-}\n-\n-fn next_power_of_two(uint n) -> uint {\n-  // FIXME change |* uint(4)| below to |* uint(8) / uint(2)| and watch the\n-  // world explode.\n-  let uint halfbits = sys.rustrt.size_of[uint]() * 4u;\n-  let uint tmp = n - 1u;\n-  let uint shift = 1u;\n-  while (shift <= halfbits) {\n-    tmp |= tmp >> shift;\n-    shift <<= 1u;\n-  }\n-  ret tmp + 1u;\n-}\n-\n-fn uto_str(mutable uint n, uint radix) -> str\n-{\n-  check (0u < radix && radix <= 16u);\n-  fn digit(uint n) -> str {\n-    alt (n) {\n-      case (0u) { ret \"0\"; }\n-      case (1u) { ret \"1\"; }\n-      case (2u) { ret \"2\"; }\n-      case (3u) { ret \"3\"; }\n-      case (4u) { ret \"4\"; }\n-      case (5u) { ret \"5\"; }\n-      case (6u) { ret \"6\"; }\n-      case (7u) { ret \"7\"; }\n-      case (8u) { ret \"8\"; }\n-      case (9u) { ret \"9\"; }\n-      case (10u) { ret \"a\"; }\n-      case (11u) { ret \"b\"; }\n-      case (12u) { ret \"c\"; }\n-      case (13u) { ret \"d\"; }\n-      case (14u) { ret \"e\"; }\n-      case (15u) { ret \"f\"; }\n-    }\n-  }\n-\n-  if (n == 0u) { ret \"0\"; }\n-\n-  let str s = \"\";\n-  while (n > 0u) {\n-    s = digit(n % radix) + s;\n-    n /= radix;\n-  }\n-  ret s;\n-}\n-\n fn to_str(mutable int n, uint radix) -> str\n {\n   check (0u < radix && radix <= 16u);\n   if (n < 0) {\n-    ret \"-\" + uto_str((-n) as uint, radix);\n+    ret \"-\" + _uint.to_str((-n) as uint, radix);\n   } else {\n-    ret uto_str(n as uint, radix);\n+    ret _uint.to_str(n as uint, radix);\n   }\n }"}, {"sha": "46ba21cfcb0852e720804d156fffb53993a8942f", "filename": "src/lib/_io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/src%2Flib%2F_io.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/src%2Flib%2F_io.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_io.rs?ref=9fc4fc6692c6684487eb57c6608ee34ab94dd9f5", "patch": "@@ -146,7 +146,7 @@ fn file_writer(str path,\n   unsafe obj fw(buf_writer out) {\n     fn write_str(str s)   { out.write(_str.bytes(s)); }\n     fn write_int(int n)   { out.write(_str.bytes(_int.to_str(n, 10u))); }\n-    fn write_uint(uint n) { out.write(_str.bytes(_int.uto_str(n, 10u))); }\n+    fn write_uint(uint n) { out.write(_str.bytes(_uint.to_str(n, 10u))); }\n   }\n   ret fw(new_buf_writer(path, flags));\n }"}, {"sha": "8a03d00b9dc892177af68b37c7dd85a88f80f2e8", "filename": "src/lib/_uint.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/src%2Flib%2F_uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/src%2Flib%2F_uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_uint.rs?ref=9fc4fc6692c6684487eb57c6608ee34ab94dd9f5", "patch": "@@ -0,0 +1,68 @@\n+import std.sys;\n+\n+fn add(uint x, uint y) -> uint { ret x + y; }\n+fn sub(uint x, uint y) -> uint { ret x - y; }\n+fn mul(uint x, uint y) -> uint { ret x * y; }\n+fn div(uint x, uint y) -> uint { ret x / y; }\n+fn rem(uint x, uint y) -> uint { ret x % y; }\n+\n+fn lt(uint x, uint y) -> bool { ret x < y; }\n+fn le(uint x, uint y) -> bool { ret x <= y; }\n+fn eq(uint x, uint y) -> bool { ret x == y; }\n+fn ne(uint x, uint y) -> bool { ret x != y; }\n+fn ge(uint x, uint y) -> bool { ret x >= y; }\n+fn gt(uint x, uint y) -> bool { ret x > y; }\n+\n+iter range(mutable uint lo, uint hi) -> uint {\n+  while (lo < hi) {\n+    put lo;\n+    lo += 1u;\n+  }\n+}\n+\n+fn next_power_of_two(uint n) -> uint {\n+  // FIXME change |* uint(4)| below to |* uint(8) / uint(2)| and watch the\n+  // world explode.\n+  let uint halfbits = sys.rustrt.size_of[uint]() * 4u;\n+  let uint tmp = n - 1u;\n+  let uint shift = 1u;\n+  while (shift <= halfbits) {\n+    tmp |= tmp >> shift;\n+    shift <<= 1u;\n+  }\n+  ret tmp + 1u;\n+}\n+\n+fn to_str(mutable uint n, uint radix) -> str\n+{\n+  check (0u < radix && radix <= 16u);\n+  fn digit(uint n) -> str {\n+    alt (n) {\n+      case (0u) { ret \"0\"; }\n+      case (1u) { ret \"1\"; }\n+      case (2u) { ret \"2\"; }\n+      case (3u) { ret \"3\"; }\n+      case (4u) { ret \"4\"; }\n+      case (5u) { ret \"5\"; }\n+      case (6u) { ret \"6\"; }\n+      case (7u) { ret \"7\"; }\n+      case (8u) { ret \"8\"; }\n+      case (9u) { ret \"9\"; }\n+      case (10u) { ret \"a\"; }\n+      case (11u) { ret \"b\"; }\n+      case (12u) { ret \"c\"; }\n+      case (13u) { ret \"d\"; }\n+      case (14u) { ret \"e\"; }\n+      case (15u) { ret \"f\"; }\n+    }\n+  }\n+\n+  if (n == 0u) { ret \"0\"; }\n+\n+  let str s = \"\";\n+  while (n > 0u) {\n+    s = digit(n % radix) + s;\n+    n /= radix;\n+  }\n+  ret s;\n+}"}, {"sha": "54dca00bf6657bfd52f0cb1efd6cde76c616cf23", "filename": "src/lib/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/src%2Flib%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/src%2Flib%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdeque.rs?ref=9fc4fc6692c6684487eb57c6608ee34ab94dd9f5", "patch": "@@ -42,7 +42,7 @@ fn create[T]() -> t[T] {\n       }\n     }\n \n-    let uint nalloc = _int.next_power_of_two(nelts + 1u);\n+    let uint nalloc = _uint.next_power_of_two(nelts + 1u);\n     let _vec.init_op[cell[T]] copy_op = bind fill[T](_, nelts, lo, elts);\n     ret _vec.init_fn[cell[T]](copy_op, nalloc);\n   }"}, {"sha": "786e5ba1ba2d908b5c2efe1b08d51d183666950c", "filename": "src/lib/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=9fc4fc6692c6684487eb57c6608ee34ab94dd9f5", "patch": "@@ -145,7 +145,7 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n     fn insert(&K key, &V val) -> bool {\n       let util.rational load = rec(num=(nelts + 1u) as int, den=nbkts as int);\n       if (!util.rational_leq(load, lf)) {\n-        let uint nnewbkts = _int.next_power_of_two(nbkts + 1u);\n+        let uint nnewbkts = _uint.next_power_of_two(nbkts + 1u);\n \n         let vec[mutable bucket[K, V]] newbkts = make_buckets[K, V](nnewbkts);\n         rehash[K, V](hasher, eqer, bkts, nbkts, newbkts, nnewbkts);"}, {"sha": "ea8e50eb3a64a994e2fe3db81a728d1691a4d7bc", "filename": "src/lib/std.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=9fc4fc6692c6684487eb57c6608ee34ab94dd9f5", "patch": "@@ -7,6 +7,7 @@ meta (name = \"std\",\n // Built-in types support modules.\n \n mod _int;\n+mod _uint;\n mod _u8;\n mod _vec;\n mod _str;\n@@ -28,7 +29,7 @@ auth _str = unsafe;\n auth _vec = unsafe;\n auth _task = unsafe;\n \n-auth _int.next_power_of_two = unsafe;\n+auth _uint.next_power_of_two = unsafe;\n auth map.mk_hashmap = unsafe;\n auth rand.mk_rng = unsafe;\n "}]}