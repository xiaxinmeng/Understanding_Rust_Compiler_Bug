{"sha": "66e8751afce516a2ee9fb3324e755f7ad0c42629", "node_id": "C_kwDOAAsO6NoAKDY2ZTg3NTFhZmNlNTE2YTJlZTlmYjMzMjRlNzU1ZjdhZDBjNDI2Mjk", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-20T03:33:59Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-20T09:23:53Z"}, "message": "Format tests and benches with rustfmt (1-50 of 300)", "tree": {"sha": "8d790467d8cbce7935aee6647a836bbc7928dc69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d790467d8cbce7935aee6647a836bbc7928dc69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66e8751afce516a2ee9fb3324e755f7ad0c42629", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmKwPKkACgkQ+boUO5X/\nbYK7ThAAhcp39nDiRT0bfZJD0MEVD890/PZfKiHatnxvgdms64hVyUi0Sa1tXcvM\nQksF1fPJZQu8iIte6vdaeERdq9EcH0x7k07bbjsJS3KE2jgLF+BVDZXLpWmSqQCi\n0IMHuEOvoG6stgJkPLmUZVAp/mp41doAWmqLV+74cHhpDF0f0tiejVtu0eSBjHAz\n2yQOVZxkP9Cbp/7tRis6jAER1AdEEbrwbKfJ05XB3XuN3GTQayPJWf063ocaIrT6\nrZ1MIdKZ7aZS6IGQSVchNbiLFf5wo8inQvWV5MgNnOWDViiDWiUnL0Azvg3kDV4O\nksaxSp8pKd0idyfiJ89xu5HrMUNdngg5yQIvyDCjRhPetFaYnKAvwZtHSXl0XBmE\ntIoJIdLMEC/ZXW2y6N3PEDUM0U2p/zCv1VbbVhNULI5n2rBMvCs6d5hv2SGX+U1x\ncz5DSydEHlveAaswrlFkdR6lzQJdcUSJ3QQiFPNtJMEExs8g76O38iCLlOioVoSb\nJWMOLe+JP9ZD09DJ50aJOZabM2TUggUkYHn8yRoIFrkDL7i4y5JYdLqYPXLVNxO3\n4BnEoQQXeNy+ju8mkDU/qq5O3OwU/H5U3Qk8Lb+Okjx7t9bEfcfPkVc9jdLRPsuL\na75N9ApO0Ffd0m8uwq1WdtwmLkIw8AM4248RG0mcLT4rPlrLBbQ=\n=X45d\n-----END PGP SIGNATURE-----", "payload": "tree 8d790467d8cbce7935aee6647a836bbc7928dc69\nparent fe04faf0cef555bfd2d7077dc5d29427940903bf\nauthor David Tolnay <dtolnay@gmail.com> 1655696039 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1655717033 -0700\n\nFormat tests and benches with rustfmt (1-50 of 300)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66e8751afce516a2ee9fb3324e755f7ad0c42629", "html_url": "https://github.com/rust-lang/rust/commit/66e8751afce516a2ee9fb3324e755f7ad0c42629", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66e8751afce516a2ee9fb3324e755f7ad0c42629/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe04faf0cef555bfd2d7077dc5d29427940903bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe04faf0cef555bfd2d7077dc5d29427940903bf", "html_url": "https://github.com/rust-lang/rust/commit/fe04faf0cef555bfd2d7077dc5d29427940903bf"}], "stats": {"total": 256, "additions": 129, "deletions": 127}, "files": [{"sha": "c09dc2484d380f65d573905afc41d35cee618abe", "filename": "bench-cargo-miri/mse/src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/bench-cargo-miri%2Fmse%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/bench-cargo-miri%2Fmse%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/bench-cargo-miri%2Fmse%2Fsrc%2Fmain.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -30,4 +30,3 @@ fn mse(samples: usize, frame_buf: &[i16], buf_ref: &[u8]) -> f64 {\n     }\n     mse / max_samples as f64\n }\n-"}, {"sha": "bd5d6b1e1264b71293c6f3f2d28c8a3088a0a94c", "filename": "benches/helpers/repeat_manual.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/benches%2Fhelpers%2Frepeat_manual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/benches%2Fhelpers%2Frepeat_manual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Frepeat_manual.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,7 +1,9 @@\n fn main() {\n     let mut data: [u8; 1024] = unsafe { std::mem::uninitialized() };\n     for i in 0..data.len() {\n-        unsafe { std::ptr::write(&mut data[i], 0); }\n+        unsafe {\n+            std::ptr::write(&mut data[i], 0);\n+        }\n     }\n     assert_eq!(data.len(), 1024);\n }"}, {"sha": "e47e588251e4ed81f7bd23a313dd68a2474ce6f0", "filename": "test-cargo-miri/cdylib/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/test-cargo-miri%2Fcdylib%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/test-cargo-miri%2Fcdylib%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fcdylib%2Fsrc%2Flib.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -2,5 +2,5 @@ use byteorder::{BigEndian, ByteOrder};\n \n #[no_mangle]\n extern \"C\" fn use_the_dependency() {\n-    let _n = <BigEndian as ByteOrder>::read_u64(&[1,2,3,4,5,6,7,8]);\n+    let _n = <BigEndian as ByteOrder>::read_u64(&[1, 2, 3, 4, 5, 6, 7, 8]);\n }"}, {"sha": "5479216832388d3fb6495e2fbe7e315b1b3c3cb3", "filename": "test-cargo-miri/issue-1567/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/test-cargo-miri%2Fissue-1567%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/test-cargo-miri%2Fissue-1567%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fissue-1567%2Fsrc%2Flib.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,5 +1,5 @@\n use byteorder::{BigEndian, ByteOrder};\n \n pub fn use_the_dependency() {\n-    let _n = <BigEndian as ByteOrder>::read_u32(&[1,2,3,4]);\n+    let _n = <BigEndian as ByteOrder>::read_u32(&[1, 2, 3, 4]);\n }"}, {"sha": "64633490f84b92a3a7bdf740749dbd7cce2795dd", "filename": "test-cargo-miri/issue-1705/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/test-cargo-miri%2Fissue-1705%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/test-cargo-miri%2Fissue-1705%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fissue-1705%2Fsrc%2Flib.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,5 +1,5 @@\n-use byteorder::{LittleEndian, ByteOrder};\n+use byteorder::{ByteOrder, LittleEndian};\n \n pub fn use_the_dependency() {\n-    let _n = <LittleEndian as ByteOrder>::read_u32(&[1,2,3,4]);\n+    let _n = <LittleEndian as ByteOrder>::read_u32(&[1, 2, 3, 4]);\n }"}, {"sha": "1947c38b7745518418b22eec09955c37d865162f", "filename": "test-cargo-miri/issue-rust-86261/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/test-cargo-miri%2Fissue-rust-86261%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/test-cargo-miri%2Fissue-rust-86261%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fissue-rust-86261%2Fsrc%2Flib.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -3,7 +3,7 @@\n // Regression test for https://github.com/rust-lang/rust/issues/86261:\n // `#[no_mangle]` on a `use` item.\n #[no_mangle]\n-use std::{thread,panic, io, boxed, any, string};\n+use std::{any, boxed, io, panic, string, thread};\n \n // `#[no_mangle]` on a struct has a similar problem.\n #[no_mangle]"}, {"sha": "5807d0765fb31daff1fafbf170d5e1bda9d74f03", "filename": "test-cargo-miri/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/test-cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/test-cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsrc%2Fmain.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     assert_eq!(env!(\"MIRITESTVAR\"), \"testval\");\n \n     // Exercise external crate, printing to stdout.\n-    let buf = &[1,2,3,4];\n+    let buf = &[1, 2, 3, 4];\n     let n = <BigEndian as ByteOrder>::read_u32(buf);\n     assert_eq!(n, 0x01020304);\n     println!(\"{:#010x}\", n);\n@@ -32,7 +32,7 @@ fn main() {\n         #[cfg(unix)]\n         for line in io::stdin().lock().lines() {\n             let num: i32 = line.unwrap().parse().unwrap();\n-            println!(\"{}\", 2*num);\n+            println!(\"{}\", 2 * num);\n         }\n         // On non-Unix, reading from stdin is not supported. So we hard-code the right answer.\n         #[cfg(not(unix))]"}, {"sha": "8a938ef3c25f6861a5c2d4c00c1aa8e3f8fdef18", "filename": "test-cargo-miri/tests/test.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/test-cargo-miri%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/test-cargo-miri%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ftest.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -67,9 +67,5 @@ fn page_size() {\n     let page_size = page_size::get();\n \n     // In particular, this checks that it is not 0.\n-    assert!(\n-        page_size.is_power_of_two(),\n-        \"page size not a power of two: {}\",\n-        page_size\n-    );\n+    assert!(page_size.is_power_of_two(), \"page size not a power of two: {}\", page_size);\n }"}, {"sha": "20859047c620e87292c74b1bf30c846bc5f3d37c", "filename": "tests/fail/abort-terminator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fabort-terminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fabort-terminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fabort-terminator.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,7 +1,9 @@\n // error-pattern: the program aborted\n #![feature(c_unwind)]\n \n-extern \"C\" fn panic_abort() { panic!() }\n+extern \"C\" fn panic_abort() {\n+    panic!()\n+}\n \n fn main() {\n     panic_abort();"}, {"sha": "735c52500af677ce3e7aaac269b2aa1b4290b9ec", "filename": "tests/fail/alloc/global_system_mixup.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Falloc%2Fglobal_system_mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Falloc%2Fglobal_system_mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fglobal_system_mixup.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -8,10 +8,12 @@\n \n #![feature(allocator_api, slice_ptr_get)]\n \n-use std::alloc::{Allocator, Global, System, Layout};\n+use std::alloc::{Allocator, Global, Layout, System};\n \n fn main() {\n     let l = Layout::from_size_align(1, 1).unwrap();\n     let ptr = Global.allocate(l).unwrap().as_non_null_ptr();\n-    unsafe { System.deallocate(ptr, l); }\n+    unsafe {\n+        System.deallocate(ptr, l);\n+    }\n }"}, {"sha": "35412353ace4a7e358fe2a2504a3f06d12b47d11", "filename": "tests/fail/concurrency/too_few_args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -19,7 +19,8 @@ fn main() {\n         let attr: libc::pthread_attr_t = mem::zeroed();\n         // assert_eq!(libc::pthread_attr_init(&mut attr), 0); FIXME: this function is not yet implemented.\n         let thread_start: extern \"C\" fn() -> *mut libc::c_void = thread_start;\n-        let thread_start: extern \"C\" fn(*mut libc::c_void) -> *mut libc::c_void = mem::transmute(thread_start);\n+        let thread_start: extern \"C\" fn(*mut libc::c_void) -> *mut libc::c_void =\n+            mem::transmute(thread_start);\n         assert_eq!(libc::pthread_create(&mut native, &attr, thread_start, ptr::null_mut()), 0);\n         assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n     }"}, {"sha": "b6156091b0aaf2418a4451df464269299a29bbb4", "filename": "tests/fail/concurrency/too_many_args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -19,7 +19,8 @@ fn main() {\n         let attr: libc::pthread_attr_t = mem::zeroed();\n         // assert_eq!(libc::pthread_attr_init(&mut attr), 0); FIXME: this function is not yet implemented.\n         let thread_start: extern \"C\" fn(*mut libc::c_void, i32) -> *mut libc::c_void = thread_start;\n-        let thread_start: extern \"C\" fn(*mut libc::c_void) -> *mut libc::c_void = mem::transmute(thread_start);\n+        let thread_start: extern \"C\" fn(*mut libc::c_void) -> *mut libc::c_void =\n+            mem::transmute(thread_start);\n         assert_eq!(libc::pthread_create(&mut native, &attr, thread_start, ptr::null_mut()), 0);\n         assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n     }"}, {"sha": "e1c17d07b286a94b666ed7c5124190201a30e081", "filename": "tests/fail/concurrency/unwind_top_of_stack.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -20,8 +20,10 @@ fn main() {\n         let attr: libc::pthread_attr_t = mem::zeroed();\n         // assert_eq!(libc::pthread_attr_init(&mut attr), 0); FIXME: this function is not yet implemented.\n         // Cast to avoid inserting abort-on-unwind.\n-        let thread_start: extern \"C-unwind\" fn(*mut libc::c_void) -> *mut libc::c_void = thread_start;\n-        let thread_start: extern \"C\" fn(*mut libc::c_void) -> *mut libc::c_void = mem::transmute(thread_start);\n+        let thread_start: extern \"C-unwind\" fn(*mut libc::c_void) -> *mut libc::c_void =\n+            thread_start;\n+        let thread_start: extern \"C\" fn(*mut libc::c_void) -> *mut libc::c_void =\n+            mem::transmute(thread_start);\n         assert_eq!(libc::pthread_create(&mut native, &attr, thread_start, ptr::null_mut()), 0);\n         assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n     }"}, {"sha": "c87db4b0225a2902e654ffe4868fd68154bddf86", "filename": "tests/fail/dangling_pointers/storage_dead_dangling.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -4,7 +4,9 @@\n static mut LEAK: usize = 0;\n \n fn fill(v: &mut i32) {\n-    unsafe { LEAK = v as *mut _ as usize; }\n+    unsafe {\n+        LEAK = v as *mut _ as usize;\n+    }\n }\n \n fn evil() {"}, {"sha": "12c1b6ec876a153d619a27b959fcb7e02c3ec3a0", "filename": "tests/fail/data_race/alloc_read_race.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -2,10 +2,10 @@\n // compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n #![feature(new_uninit)]\n \n-use std::thread::spawn;\n-use std::ptr::null_mut;\n-use std::sync::atomic::{Ordering, AtomicPtr};\n use std::mem::MaybeUninit;\n+use std::ptr::null_mut;\n+use std::sync::atomic::{AtomicPtr, Ordering};\n+use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);"}, {"sha": "c050d24bee10de231750e70ac8f38e8db6cccbc8", "filename": "tests/fail/data_race/alloc_write_race.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -2,9 +2,9 @@\n // compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n #![feature(new_uninit)]\n \n-use std::thread::spawn;\n use std::ptr::null_mut;\n-use std::sync::atomic::{Ordering, AtomicPtr};\n+use std::sync::atomic::{AtomicPtr, Ordering};\n+use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);\n@@ -30,7 +30,8 @@ pub fn main() {\n             // Uses relaxed semantics to not generate\n             // a release sequence.\n             let pointer = &*ptr.0;\n-            pointer.store(Box::into_raw(Box::<usize>::new_uninit()) as *mut usize, Ordering::Relaxed);\n+            pointer\n+                .store(Box::into_raw(Box::<usize>::new_uninit()) as *mut usize, Ordering::Relaxed);\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "5131e33fef86306d428b24819a5725e5d264bb14", "filename": "tests/fail/data_race/atomic_read_na_write_race1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,9 +1,9 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n #![feature(core_intrinsics)]\n \n-use std::thread::spawn;\n-use std::sync::atomic::AtomicUsize;\n use std::intrinsics::atomic_load;\n+use std::sync::atomic::AtomicUsize;\n+use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);"}, {"sha": "1c0146367ad5550203943f54bc62c722bfc357a0", "filename": "tests/fail/data_race/atomic_read_na_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,8 +1,8 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n \n-use std::thread::spawn;\n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n+use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);"}, {"sha": "a63aafb0453c9d24b1caf4d97653cb5dc9352cb3", "filename": "tests/fail/data_race/atomic_write_na_read_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,8 +1,8 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n \n-use std::thread::spawn;\n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n+use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);"}, {"sha": "359970dfff8f3d774fea3fa621825d3357e21442", "filename": "tests/fail/data_race/atomic_write_na_read_race2.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,9 +1,9 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n #![feature(core_intrinsics)]\n \n-use std::thread::spawn;\n-use std::sync::atomic::AtomicUsize;\n use std::intrinsics::atomic_store;\n+use std::sync::atomic::AtomicUsize;\n+use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);\n@@ -16,9 +16,7 @@ pub fn main() {\n     let b = &mut a as *mut AtomicUsize;\n     let c = EvilSend(b);\n     unsafe {\n-        let j1 = spawn(move || {\n-            *(c.0 as *mut usize)\n-        });\n+        let j1 = spawn(move || *(c.0 as *mut usize));\n \n         let j2 = spawn(move || {\n             //Equivalent to: (&*c.0).store(32, Ordering::SeqCst)"}, {"sha": "8268924e3c1ac3f483b72b6221aa763083660e56", "filename": "tests/fail/data_race/atomic_write_na_write_race1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,9 +1,9 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n #![feature(core_intrinsics)]\n \n-use std::thread::spawn;\n-use std::sync::atomic::AtomicUsize;\n use std::intrinsics::atomic_store;\n+use std::sync::atomic::AtomicUsize;\n+use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);"}, {"sha": "440c72a059d8cbc6f3dca07cc6b42e21140b0033", "filename": "tests/fail/data_race/atomic_write_na_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,8 +1,8 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n \n-use std::thread::spawn;\n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n+use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);"}, {"sha": "2656f4b7af14892e94717f9c3bff288c0c2b2fd7", "filename": "tests/fail/data_race/dangling_thread_async_race.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,18 +1,16 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n // compile-flags: -Zmiri-disable-isolation\n \n-use std::thread::{spawn, sleep};\n-use std::time::Duration;\n use std::mem;\n-\n+use std::thread::{sleep, spawn};\n+use std::time::Duration;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);\n \n unsafe impl<T> Send for EvilSend<T> {}\n unsafe impl<T> Sync for EvilSend<T> {}\n \n-\n fn main() {\n     let mut a = 0u32;\n     let b = &mut a as *mut u32;"}, {"sha": "f1174d8ff6ee1ac5758a33700f743d77dee924e5", "filename": "tests/fail/data_race/dangling_thread_race.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,18 +1,16 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n // compile-flags: -Zmiri-disable-isolation\n \n-use std::thread::{spawn, sleep};\n-use std::time::Duration;\n use std::mem;\n-\n+use std::thread::{sleep, spawn};\n+use std::time::Duration;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);\n \n unsafe impl<T> Send for EvilSend<T> {}\n unsafe impl<T> Sync for EvilSend<T> {}\n \n-\n fn main() {\n     let mut a = 0u32;\n     let b = &mut a as *mut u32;\n@@ -34,7 +32,6 @@ fn main() {\n     // remains enabled nevertheless.\n     spawn(|| ()).join().unwrap();\n \n-\n     unsafe {\n         *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 0, name = \"main\") and Write on Thread(id = 1)\n     }"}, {"sha": "984268dca149d154e9c09563c1ecae0fe92d2044", "filename": "tests/fail/data_race/dealloc_read_race2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -19,7 +19,11 @@ pub fn main() {\n \n     unsafe {\n         let j1 = spawn(move || {\n-            __rust_dealloc(ptr.0 as *mut _, std::mem::size_of::<usize>(), std::mem::align_of::<usize>())\n+            __rust_dealloc(\n+                ptr.0 as *mut _,\n+                std::mem::size_of::<usize>(),\n+                std::mem::align_of::<usize>(),\n+            )\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "cdb6c182307f84e74d7a3c0d01f3534675b2dc57", "filename": "tests/fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,9 +1,9 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n // compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n-use std::thread::{spawn, sleep};\n use std::ptr::null_mut;\n-use std::sync::atomic::{Ordering, AtomicPtr};\n+use std::sync::atomic::{AtomicPtr, Ordering};\n+use std::thread::{sleep, spawn};\n use std::time::Duration;\n \n #[derive(Copy, Clone)]\n@@ -36,7 +36,6 @@ pub fn main() {\n                 sleep(Duration::from_millis(200));\n \n                 // Now `stack_var` gets deallocated.\n-\n             } //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Read on Thread(id = 2)\n         });\n "}, {"sha": "2f4b9a194c05e3b05a40739a800fe7fb2de0d2fd", "filename": "tests/fail/data_race/dealloc_write_race2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -18,7 +18,11 @@ pub fn main() {\n \n     unsafe {\n         let j1 = spawn(move || {\n-            __rust_dealloc(ptr.0 as *mut _, std::mem::size_of::<usize>(), std::mem::align_of::<usize>());\n+            __rust_dealloc(\n+                ptr.0 as *mut _,\n+                std::mem::size_of::<usize>(),\n+                std::mem::align_of::<usize>(),\n+            );\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "a209a2cd7dbfba7d57dfb29c5ff386b05bf4a449", "filename": "tests/fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,9 +1,9 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n // compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n-use std::thread::{spawn, sleep};\n use std::ptr::null_mut;\n-use std::sync::atomic::{Ordering, AtomicPtr};\n+use std::sync::atomic::{AtomicPtr, Ordering};\n+use std::thread::{sleep, spawn};\n use std::time::Duration;\n \n #[derive(Copy, Clone)]\n@@ -36,7 +36,6 @@ pub fn main() {\n                 sleep(Duration::from_millis(200));\n \n                 // Now `stack_var` gets deallocated.\n-\n             } //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Write on Thread(id = 2)\n         });\n "}, {"sha": "c209ef1812530f6cd23b0ea08dbea9d15295b588", "filename": "tests/fail/data_race/fence_after_load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Ffence_after_load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Ffence_after_load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Ffence_after_load.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,10 +1,10 @@\n // We want to control preemption here.\n // compile-flags: -Zmiri-disable-isolation -Zmiri-preemption-rate=0\n // ignore-windows: Concurrency on Windows is not supported yet.\n+use std::sync::atomic::{fence, AtomicUsize, Ordering};\n use std::sync::Arc;\n-use std::sync::atomic::{AtomicUsize, Ordering, fence};\n-use std::time::Duration;\n use std::thread;\n+use std::time::Duration;\n \n fn main() {\n     static mut V: u32 = 0;"}, {"sha": "976ace6e4b6ff1e51c397f8efa12c9af60209b3f", "filename": "tests/fail/data_race/read_write_race.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fread_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fread_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -13,9 +13,7 @@ pub fn main() {\n     let b = &mut a as *mut u32;\n     let c = EvilSend(b);\n     unsafe {\n-        let j1 = spawn(move || {\n-            *c.0\n-        });\n+        let j1 = spawn(move || *c.0);\n \n         let j2 = spawn(move || {\n             *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 2) and Read on Thread(id = 1)"}, {"sha": "00c36176a9f1e84d68ab807d31b0ac7abb83407b", "filename": "tests/fail/data_race/read_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -4,9 +4,9 @@\n // Note: mir-opt-level set to 0 to prevent the read of stack_var in thread 1\n // from being optimized away and preventing the detection of the data-race.\n \n-use std::thread::{spawn, sleep};\n use std::ptr::null_mut;\n-use std::sync::atomic::{Ordering, AtomicPtr};\n+use std::sync::atomic::{AtomicPtr, Ordering};\n+use std::thread::{sleep, spawn};\n use std::time::Duration;\n \n #[derive(Copy, Clone)]"}, {"sha": "3b350f5c89f2d1a21b13f5463f25147ad16ef568", "filename": "tests/fail/data_race/relax_acquire_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,8 +1,8 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n // compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n-use std::thread::spawn;\n use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);"}, {"sha": "ec03888c76b188e264fdbe41983e379a25b0936f", "filename": "tests/fail/data_race/release_seq_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,8 +1,8 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n // compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n-use std::thread::{spawn, sleep};\n use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::thread::{sleep, spawn};\n use std::time::Duration;\n \n #[derive(Copy, Clone)]"}, {"sha": "187623828947523e5771e80c140491c324cd1530", "filename": "tests/fail/data_race/release_seq_race_same_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,8 +1,8 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n // compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n-use std::thread::spawn;\n use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);"}, {"sha": "51577b3b7b191026c66579b04a998c564580b82c", "filename": "tests/fail/data_race/rmw_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Frmw_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Frmw_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frmw_race.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,8 +1,8 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n // compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n-use std::thread::spawn;\n use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);"}, {"sha": "49de5db43b720feeb1a78b656daf3407871689c7", "filename": "tests/fail/data_race/write_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,9 +1,9 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n // compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n-use std::thread::{spawn, sleep};\n use std::ptr::null_mut;\n-use std::sync::atomic::{Ordering, AtomicPtr};\n+use std::sync::atomic::{AtomicPtr, Ordering};\n+use std::thread::{sleep, spawn};\n use std::time::Duration;\n \n #[derive(Copy, Clone)]"}, {"sha": "4df9be2bf24dedbedae91647ebd0d4dbcc91e796", "filename": "tests/fail/environ-gets-deallocated.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fenviron-gets-deallocated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fenviron-gets-deallocated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fenviron-gets-deallocated.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,14 +1,14 @@\n // ignore-windows: Windows does not have a global environ list that the program can access directly\n \n-#[cfg(target_os=\"linux\")]\n+#[cfg(target_os = \"linux\")]\n fn get_environ() -> *const *const u8 {\n-  extern \"C\" {\n-    static mut environ: *const *const u8;\n-  }\n-  unsafe { environ }\n+    extern \"C\" {\n+        static mut environ: *const *const u8;\n+    }\n+    unsafe { environ }\n }\n \n-#[cfg(target_os=\"macos\")]\n+#[cfg(target_os = \"macos\")]\n fn get_environ() -> *const *const u8 {\n     extern \"C\" {\n         fn _NSGetEnviron() -> *mut *const *const u8;"}, {"sha": "f7640cadcbcf19a0087433e0df6aae1b6fcfa4a3", "filename": "tests/fail/function_pointers/cast_box_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -3,9 +3,7 @@\n \n fn main() {\n     let b = Box::new(42);\n-    let g = unsafe {\n-        std::mem::transmute::<&Box<usize>, &fn(i32)>(&b)\n-    };\n+    let g = unsafe { std::mem::transmute::<&Box<usize>, &fn(i32)>(&b) };\n \n     (*g)(42) //~ ERROR it does not point to a function\n }"}, {"sha": "e4463210dda9b5d177f042d885c1b4a5b31188e6", "filename": "tests/fail/function_pointers/cast_fn_ptr1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,9 +1,7 @@\n fn main() {\n     fn f() {}\n \n-    let g = unsafe {\n-        std::mem::transmute::<fn(), fn(i32)>(f)\n-    };\n+    let g = unsafe { std::mem::transmute::<fn(), fn(i32)>(f) };\n \n     g(42) //~ ERROR calling a function with more arguments than it expected\n }"}, {"sha": "5d3222548a7d486a9fabd6e0b15d6d0f628a8f96", "filename": "tests/fail/function_pointers/cast_fn_ptr2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,9 +1,7 @@\n fn main() {\n-    fn f(_ : (i32,i32)) {}\n+    fn f(_: (i32, i32)) {}\n \n-    let g = unsafe {\n-        std::mem::transmute::<fn((i32,i32)), fn(i32)>(f)\n-    };\n+    let g = unsafe { std::mem::transmute::<fn((i32, i32)), fn(i32)>(f) };\n \n     g(42) //~ ERROR calling a function with argument of type (i32, i32) passing data of type i32\n }"}, {"sha": "943175c347026e04746bd02e9d33dc631cacbc57", "filename": "tests/fail/function_pointers/cast_fn_ptr3.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,10 +1,7 @@\n fn main() {\n-    fn f(_ : (i32,i32)) {}\n+    fn f(_: (i32, i32)) {}\n \n-    let g = unsafe {\n-        std::mem::transmute::<fn((i32,i32)), fn()>(f)\n-    };\n+    let g = unsafe { std::mem::transmute::<fn((i32, i32)), fn()>(f) };\n \n     g() //~ ERROR calling a function with fewer arguments than it requires\n }\n-"}, {"sha": "238b09b162d2df0a2a594faa997375d563efd69b", "filename": "tests/fail/function_pointers/cast_fn_ptr4.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,9 +1,7 @@\n fn main() {\n-    fn f(_ : *const [i32]) {}\n+    fn f(_: *const [i32]) {}\n \n-    let g = unsafe {\n-        std::mem::transmute::<fn(*const [i32]), fn(*const i32)>(f)\n-    };\n+    let g = unsafe { std::mem::transmute::<fn(*const [i32]), fn(*const i32)>(f) };\n \n     g(&42 as *const i32) //~ ERROR calling a function with argument of type *const [i32] passing data of type *const i32\n }"}, {"sha": "effbd6db18844683ef159c32b8e7bdfb276746eb", "filename": "tests/fail/function_pointers/cast_fn_ptr5.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -1,9 +1,9 @@\n fn main() {\n-    fn f() -> u32 { 42 }\n+    fn f() -> u32 {\n+        42\n+    }\n \n-    let g = unsafe {\n-        std::mem::transmute::<fn() -> u32, fn()>(f)\n-    };\n+    let g = unsafe { std::mem::transmute::<fn() -> u32, fn()>(f) };\n \n     g() //~ ERROR calling a function with return type u32 passing return place of type ()\n }"}, {"sha": "0adbda50bfe50be2d64ee99a39610256e18ddddf", "filename": "tests/fail/function_pointers/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -2,9 +2,7 @@\n // compile-flags: -Zmiri-disable-validation\n \n fn main() {\n-    let g = unsafe {\n-        std::mem::transmute::<usize, fn(i32)>(42)\n-    };\n+    let g = unsafe { std::mem::transmute::<usize, fn(i32)>(42) };\n \n     g(42) //~ ERROR not a valid pointer\n }"}, {"sha": "04c54c015922c5ca34e2a18869edb6cdee3ab9cf", "filename": "tests/fail/function_pointers/fn_ptr_offset.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -6,9 +6,9 @@ use std::mem;\n fn f() {}\n \n fn main() {\n-    let x : fn() = f;\n-    let y : *mut u8 = unsafe { mem::transmute(x) };\n+    let x: fn() = f;\n+    let y: *mut u8 = unsafe { mem::transmute(x) };\n     let y = y.wrapping_offset(1);\n-    let x : fn() = unsafe { mem::transmute(y) };\n+    let x: fn() = unsafe { mem::transmute(y) };\n     x(); //~ ERROR function pointer but it does not point to a function\n }"}, {"sha": "6fdcb875acc1311f1c80003981ac319b141bad2f", "filename": "tests/fail/intrinsics/simd-div-by-zero.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -8,8 +8,10 @@ extern \"platform-intrinsic\" {\n #[allow(non_camel_case_types)]\n struct i32x2(i32, i32);\n \n-fn main() { unsafe {\n-    let x = i32x2(1, 1);\n-    let y = i32x2(1, 0);\n-    simd_div(x, y); //~ERROR Undefined Behavior: dividing by zero\n-} }\n+fn main() {\n+    unsafe {\n+        let x = i32x2(1, 1);\n+        let y = i32x2(1, 0);\n+        simd_div(x, y); //~ERROR Undefined Behavior: dividing by zero\n+    }\n+}"}, {"sha": "6d52a72e4c6e4a459d4432ec4edafc16d1c3a8e4", "filename": "tests/fail/intrinsics/simd-div-overflow.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -8,8 +8,10 @@ extern \"platform-intrinsic\" {\n #[allow(non_camel_case_types)]\n struct i32x2(i32, i32);\n \n-fn main() { unsafe {\n-    let x = i32x2(1, i32::MIN);\n-    let y = i32x2(1, -1);\n-    simd_div(x, y); //~ERROR Undefined Behavior: overflow in signed division\n-} }\n+fn main() {\n+    unsafe {\n+        let x = i32x2(1, i32::MIN);\n+        let y = i32x2(1, -1);\n+        simd_div(x, y); //~ERROR Undefined Behavior: overflow in signed division\n+    }\n+}"}, {"sha": "bb9adf07c9e973cec86b88cae606bd2a0e247f65", "filename": "tests/fail/intrinsics/simd-float-to-int.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -2,6 +2,8 @@\n #![feature(portable_simd)]\n use std::simd::*;\n \n-fn main() { unsafe {\n-    let _x : i32x2 = f32x2::from_array([f32::MAX, f32::MIN]).to_int_unchecked();\n-} }\n+fn main() {\n+    unsafe {\n+        let _x: i32x2 = f32x2::from_array([f32::MAX, f32::MIN]).to_int_unchecked();\n+    }\n+}"}, {"sha": "ab9cb56ed0bdd6af487c9a746903284520a6dd97", "filename": "tests/fail/intrinsics/simd-gather.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fintrinsics%2Fsimd-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fintrinsics%2Fsimd-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-gather.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -2,8 +2,10 @@\n #![feature(portable_simd)]\n use std::simd::*;\n \n-fn main() { unsafe {\n-    let vec: &[i8] = &[10, 11, 12, 13, 14, 15, 16, 17, 18];\n-    let idxs = Simd::from_array([9, 3, 0, 17]);\n-    let _result = Simd::gather_select_unchecked(&vec, Mask::splat(true), idxs, Simd::splat(0));\n-} }\n+fn main() {\n+    unsafe {\n+        let vec: &[i8] = &[10, 11, 12, 13, 14, 15, 16, 17, 18];\n+        let idxs = Simd::from_array([9, 3, 0, 17]);\n+        let _result = Simd::gather_select_unchecked(&vec, Mask::splat(true), idxs, Simd::splat(0));\n+    }\n+}"}, {"sha": "c697fd526f8691b3646d8426e3aaf38cb3c74ce3", "filename": "tests/fail/intrinsics/simd-reduce-invalid-bool.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e8751afce516a2ee9fb3324e755f7ad0c42629/tests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.rs?ref=66e8751afce516a2ee9fb3324e755f7ad0c42629", "patch": "@@ -8,7 +8,9 @@ extern \"platform-intrinsic\" {\n #[allow(non_camel_case_types)]\n struct i32x2(i32, i32);\n \n-fn main() { unsafe {\n-    let x = i32x2(0, 1);\n-    simd_reduce_any(x); //~ERROR must be all-0-bits or all-1-bits\n-} }\n+fn main() {\n+    unsafe {\n+        let x = i32x2(0, 1);\n+        simd_reduce_any(x); //~ERROR must be all-0-bits or all-1-bits\n+    }\n+}"}]}