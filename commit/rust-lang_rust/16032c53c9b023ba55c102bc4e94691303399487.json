{"sha": "16032c53c9b023ba55c102bc4e94691303399487", "node_id": "C_kwDOAAsO6NoAKDE2MDMyYzUzYzliMDIzYmE1NWMxMDJiYzRlOTQ2OTEzMDMzOTk0ODc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-19T01:23:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-19T01:23:15Z"}, "message": "Auto merge of #8310 - camelid:rm-stringification, r=Manishearth\n\nRemove unnecessary `Symbol` stringification\n\nThis should (slightly) improve performance and enhance code quality.\n\nchangelog: none", "tree": {"sha": "2398abe0fcbf70de4c91e21db9252f3c51c195fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2398abe0fcbf70de4c91e21db9252f3c51c195fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16032c53c9b023ba55c102bc4e94691303399487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16032c53c9b023ba55c102bc4e94691303399487", "html_url": "https://github.com/rust-lang/rust/commit/16032c53c9b023ba55c102bc4e94691303399487", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16032c53c9b023ba55c102bc4e94691303399487/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff8e78f6d6699a8a05acb94fa0e6dd461d0bd86", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff8e78f6d6699a8a05acb94fa0e6dd461d0bd86", "html_url": "https://github.com/rust-lang/rust/commit/fff8e78f6d6699a8a05acb94fa0e6dd461d0bd86"}, {"sha": "d9f401a53a4eb6231c38323fb283d9a593f6c438", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f401a53a4eb6231c38323fb283d9a593f6c438", "html_url": "https://github.com/rust-lang/rust/commit/d9f401a53a4eb6231c38323fb283d9a593f6c438"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "017e4a33980e41abee285321bc9cd975d24f762a", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16032c53c9b023ba55c102bc4e94691303399487/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16032c53c9b023ba55c102bc4e94691303399487/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=16032c53c9b023ba55c102bc4e94691303399487", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::ty::{self, Ty, TyS, VariantDef};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n-use rustc_span::sym;\n+use rustc_span::{sym, symbol::kw};\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry;\n \n@@ -961,13 +961,13 @@ fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm\n                 let path_str = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false));\n                 if path_str == \"Err\" {\n                     let mut matching_wild = inner.iter().any(is_wild);\n-                    let mut ident_bind_name = String::from(\"_\");\n+                    let mut ident_bind_name = kw::Underscore;\n                     if !matching_wild {\n                         // Looking for unused bindings (i.e.: `_e`)\n                         for pat in inner.iter() {\n                             if let PatKind::Binding(_, id, ident, None) = pat.kind {\n                                 if ident.as_str().starts_with('_') && !is_local_used(cx, arm.body, id) {\n-                                    ident_bind_name = ident.name.as_str().to_string();\n+                                    ident_bind_name = ident.name;\n                                     matching_wild = true;\n                                 }\n                             }\n@@ -982,7 +982,7 @@ fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm\n                             span_lint_and_note(cx,\n                                 MATCH_WILD_ERR_ARM,\n                                 arm.pat.span,\n-                                &format!(\"`Err({})` matches all errors\", &ident_bind_name),\n+                                &format!(\"`Err({})` matches all errors\", ident_bind_name),\n                                 None,\n                                 \"match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\",\n                             );"}]}