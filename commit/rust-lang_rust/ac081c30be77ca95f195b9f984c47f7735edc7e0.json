{"sha": "ac081c30be77ca95f195b9f984c47f7735edc7e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMDgxYzMwYmU3N2NhOTVmMTk1YjlmOTg0YzQ3Zjc3MzVlZGM3ZTA=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-06-27T19:24:44Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-06-27T19:24:44Z"}, "message": "Record and link with used native libraries.", "tree": {"sha": "241c004f2c7e5aa15fd7ccd5596eff3d8571a3bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/241c004f2c7e5aa15fd7ccd5596eff3d8571a3bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac081c30be77ca95f195b9f984c47f7735edc7e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac081c30be77ca95f195b9f984c47f7735edc7e0", "html_url": "https://github.com/rust-lang/rust/commit/ac081c30be77ca95f195b9f984c47f7735edc7e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac081c30be77ca95f195b9f984c47f7735edc7e0/comments", "author": null, "committer": null, "parents": [{"sha": "8fc51dfc6524d0a4e8ddd80a567b266792170ff0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc51dfc6524d0a4e8ddd80a567b266792170ff0", "html_url": "https://github.com/rust-lang/rust/commit/8fc51dfc6524d0a4e8ddd80a567b266792170ff0"}], "stats": {"total": 107, "additions": 76, "deletions": 31}, "files": [{"sha": "9a924b7b913b1c23de87e3aa95c47efa2a58db08", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=ac081c30be77ca95f195b9f984c47f7735edc7e0", "patch": "@@ -273,7 +273,7 @@ fn build_session(@session::options sopts) -> session::session {\n     auto target_crate_num = 0;\n     auto sess =\n         session::session(target_crate_num, target_cfg, sopts, crate_cache, [],\n-                         front::codemap::new_codemap(), 0u);\n+                         [], front::codemap::new_codemap(), 0u);\n     ret sess;\n }\n \n@@ -419,12 +419,19 @@ fn main(vec[str] args) {\n             }\n         }\n \n-        gcc_args += sess.get_used_libraries();\n+        gcc_args += sess.get_used_crate_files();\n+\n+        auto used_libs = sess.get_used_libraries();\n+        for (str l in used_libs) {\n+            gcc_args += [\"-l\" + l];\n+        }\n \n         if (sopts.shared) {\n             gcc_args += [shared_cmd];\n         } else {\n-            gcc_args += [\"-Lrustllvm\", \"-lrustllvm\", \"-lm\", main];\n+            // FIXME: having -Lrustllvm hardcoded in here is hack\n+            // FIXME: same for -lm\n+            gcc_args += [\"-Lrustllvm\", \"-lm\", main];\n         }\n         // We run 'gcc' here\n "}, {"sha": "30a14f45bd7b9e1b6bb866b9205e2799122d22c1", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=ac081c30be77ca95f195b9f984c47f7735edc7e0", "patch": "@@ -66,6 +66,7 @@ obj session(ast::crate_num cnum,\n             @config targ_cfg,\n             @options opts,\n             map::hashmap[int, crate_metadata] crates,\n+            mutable vec[str] used_crate_files,\n             mutable vec[str] used_libraries,\n             codemap::codemap cm,\n             mutable uint err_count) {\n@@ -136,6 +137,19 @@ obj session(ast::crate_num cnum,\n     fn get_used_libraries() -> vec[str] {\n        ret used_libraries;\n     }\n+    fn add_used_crate_file(&str lib) {\n+        // A program has a small number of crates, so a vector is probably\n+        // a good data structure in here.\n+        for (str l in used_crate_files) {\n+            if (l == lib) {\n+                ret;\n+            }\n+        }\n+        used_crate_files += [lib];\n+    }\n+    fn get_used_crate_files() -> vec[str] {\n+       ret used_crate_files;\n+    }\n     fn get_codemap() -> codemap::codemap { ret cm; }\n     fn lookup_pos(uint pos) -> codemap::loc {\n         ret codemap::lookup_pos(cm, pos);"}, {"sha": "90e22db9ba70a6206c6e0e88405e465f44d62e07", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=ac081c30be77ca95f195b9f984c47f7735edc7e0", "patch": "@@ -590,6 +590,15 @@ fn metadata_matches(hashmap[str, str] mm, &vec[@ast::meta_item] metas) ->\n     ret true;\n }\n \n+fn default_native_lib_naming(session::session sess) ->\n+   rec(str prefix, str suffix) {\n+    alt (sess.get_targ_cfg().os) {\n+        case (session::os_win32) { ret rec(prefix=\"\", suffix=\".dll\"); }\n+        case (session::os_macos) { ret rec(prefix=\"lib\", suffix=\".dylib\"); }\n+        case (session::os_linux) { ret rec(prefix=\"lib\", suffix=\".so\"); }\n+    }\n+}\n+\n fn find_library_crate(&session::session sess, &ast::ident ident,\n                       &vec[@ast::meta_item] metas,\n                       &vec[str] library_search_paths) ->\n@@ -609,7 +618,7 @@ fn find_library_crate(&session::session sess, &ast::ident ident,\n             }\n         }\n     }\n-    auto nn = parser::default_native_lib_naming(sess);\n+    auto nn = default_native_lib_naming(sess);\n     let str prefix = nn.prefix + crate_name;\n     // FIXME: we could probably use a 'glob' function in std::fs but it will\n     // be much easier to write once the unsafe module knows more about FFI\n@@ -649,7 +658,7 @@ fn load_library_crate(&session::session sess, int cnum, &ast::ident ident,\n     alt (find_library_crate(sess, ident, metas, library_search_paths)) {\n         case (some(?t)) {\n             sess.set_external_crate(cnum, rec(name=ident, data=t._1));\n-            sess.add_used_library(t._0);\n+            sess.add_used_crate_file(t._0);\n             ret;\n         }\n         case (_) { }\n@@ -682,6 +691,32 @@ fn visit_view_item(env e, &@ast::view_item i) {\n     }\n }\n \n+fn visit_item(env e, &@ast::item i) {\n+    alt (i.node) {\n+        case (ast::item_native_mod(?m)) {\n+            auto name;\n+            if (m.native_name == \"\" ) {\n+                name = i.ident;\n+            } else {\n+                name = m.native_name;\n+            }\n+            alt (m.abi) {\n+                case (ast::native_abi_rust) {\n+                    e.sess.add_used_library(name);\n+                }\n+                case (ast::native_abi_cdecl) {\n+                    e.sess.add_used_library(name);\n+                }\n+                case (ast::native_abi_llvm) {\n+                }\n+                case (ast::native_abi_rust_intrinsic) {\n+                }\n+            }\n+        }\n+        case (_) {\n+        }\n+    }\n+}\n \n // Reads external crates referenced by \"use\" directives.\n fn read_crates(session::session sess, resolve::crate_map crate_map,\n@@ -693,7 +728,8 @@ fn read_crates(session::session sess, resolve::crate_map crate_map,\n              library_search_paths=sess.get_opts().library_search_paths,\n              mutable next_crate_num=1);\n     auto v =\n-        rec(visit_view_item_pre=bind visit_view_item(e, _)\n+        rec(visit_view_item_pre=bind visit_view_item(e, _),\n+            visit_item_pre=bind visit_item(e, _)\n             with walk::default_visitor());\n     walk::walk_crate(v, crate);\n }"}, {"sha": "d153f0273f88720123fe83ef363c51a3da9dd909", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=ac081c30be77ca95f195b9f984c47f7735edc7e0", "patch": "@@ -1899,20 +1899,6 @@ fn parse_native_mod_items(&parser p, &str native_name, ast::native_abi abi) ->\n             items=items);\n }\n \n-fn default_native_lib_naming(session::session sess) ->\n-   rec(str prefix, str suffix) {\n-    alt (sess.get_targ_cfg().os) {\n-        case (session::os_win32) { ret rec(prefix=\"\", suffix=\".dll\"); }\n-        case (session::os_macos) { ret rec(prefix=\"lib\", suffix=\".dylib\"); }\n-        case (session::os_linux) { ret rec(prefix=\"lib\", suffix=\".so\"); }\n-    }\n-}\n-\n-fn default_native_name(session::session sess, str id) -> str {\n-    auto n = default_native_lib_naming(sess);\n-    ret n.prefix + id + n.suffix;\n-}\n-\n fn parse_item_native_mod(&parser p, vec[ast::attribute] attrs) -> @ast::item {\n     auto lo = p.get_last_lo_pos();\n     auto abi = ast::native_abi_cdecl;\n@@ -1933,7 +1919,9 @@ fn parse_item_native_mod(&parser p, vec[ast::attribute] attrs) -> @ast::item {\n     if (p.peek() == token::EQ) {\n         expect(p, token::EQ);\n         native_name = parse_str(p);\n-    } else { native_name = default_native_name(p.get_session(), id); }\n+    } else {\n+        native_name = \"\";\n+    }\n     expect(p, token::LBRACE);\n     auto m = parse_native_mod_items(p, native_name, abi);\n     auto hi = p.get_hi_pos();"}, {"sha": "fbd5c138bdc1e8d942ee89c44103faffba333b8d", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=ac081c30be77ca95f195b9f984c47f7735edc7e0", "patch": "@@ -5,7 +5,7 @@ import vec::vbuf;\n \n // FIXME Somehow merge stuff duplicated here and macosx_os.rs. Made difficult\n // by https://github.com/graydon/rust/issues#issue/268\n-native \"cdecl\" mod libc {\n+native \"cdecl\" mod libc = \"c\" {\n     fn open(sbuf s, int flags, uint mode) -> int;\n     fn read(int fd, vbuf buf, uint count) -> int;\n     fn write(int fd, vbuf buf, uint count) -> int;"}, {"sha": "b20ea8e50193e246b133b0dbcae6b810384e12c9", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=ac081c30be77ca95f195b9f984c47f7735edc7e0", "patch": "@@ -2,7 +2,7 @@\n import str::sbuf;\n import vec::vbuf;\n \n-native \"cdecl\" mod libc {\n+native \"cdecl\" mod libc = \"c\" {\n     fn open(sbuf s, int flags, uint mode) -> int;\n     fn read(int fd, vbuf buf, uint count) -> int;\n     fn write(int fd, vbuf buf, uint count) -> int;"}, {"sha": "f8b38b30538a9bd6edfc8f435f0d7e010cf9c0f8", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=ac081c30be77ca95f195b9f984c47f7735edc7e0", "patch": "@@ -2,7 +2,7 @@\n import str::sbuf;\n import vec::vbuf;\n \n-native \"cdecl\" mod libc {\n+native \"cdecl\" mod libc = \"c\" {\n     fn open(sbuf s, int flags, uint mode) -> int = \"_open\";\n     fn read(int fd, vbuf buf, uint count) -> int = \"_read\";\n     fn write(int fd, vbuf buf, uint count) -> int = \"_write\";"}, {"sha": "e265028af8ca5d75689e95019bfd7c42f903f821", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=ac081c30be77ca95f195b9f984c47f7735edc7e0", "patch": "@@ -112,7 +112,7 @@ fn test_fn() {\n   assert (h1 >= h2);\n }\n \n-native \"rust\" mod native_mod {\n+native \"rust\" mod native_mod = \"c\" {\n   fn str_byte_len(str s) -> vec[u8];\n   fn str_alloc(uint n_bytes) -> str;\n }"}, {"sha": "717e722a87a4575e00edd08c428f89877860bcc1", "filename": "src/test/run-pass/import-glob-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs?ref=ac081c30be77ca95f195b9f984c47f7735edc7e0", "patch": "@@ -12,7 +12,7 @@ mod a1 {                    //\n }                           //   |   |   |\n                             //   |   |   |\n mod a2 {                    //   |   |   |\n-  native mod b1 {           //   |   |   |\n+  native mod b1 = \"c\" {     //   |   |   |\n     import a1::b2::*;       //   | <-/  -/\n     export word_traveler;   //   |\n   }                         //   |"}, {"sha": "1a304fddf83479683a9d309ac6b8a02808825e15", "filename": "src/test/run-pass/native-opaque-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Ftest%2Frun-pass%2Fnative-opaque-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Ftest%2Frun-pass%2Fnative-opaque-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-opaque-type.rs?ref=ac081c30be77ca95f195b9f984c47f7735edc7e0", "patch": "@@ -1,6 +1,6 @@\n \n \n-native \"cdecl\" mod libc {\n+native \"cdecl\" mod libc = \"c\" {\n     type file_handle;\n }\n "}, {"sha": "40bb8304d7fece22148154e986379ee63c3c91bb", "filename": "src/test/run-pass/native2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Ftest%2Frun-pass%2Fnative2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac081c30be77ca95f195b9f984c47f7735edc7e0/src%2Ftest%2Frun-pass%2Fnative2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative2.rs?ref=ac081c30be77ca95f195b9f984c47f7735edc7e0", "patch": "@@ -5,14 +5,14 @@ native \"rust\" mod rustrt {\n     fn vec_buf[T](vec[T] v, uint offset) -> vbuf;\n }\n \n-native \"rust\" mod bar { }\n+native \"rust\" mod bar = \"c\" { }\n \n-native \"cdecl\" mod zed { }\n+native \"cdecl\" mod zed = \"c\" { }\n \n-native \"cdecl\" mod libc {\n+native \"cdecl\" mod libc = \"c\" {\n     fn write(int fd, rustrt::vbuf buf, uint count) -> int;\n }\n \n-native \"cdecl\" mod baz { }\n+native \"cdecl\" mod baz = \"c\" { }\n \n fn main(vec[str] args) { }\n\\ No newline at end of file"}]}