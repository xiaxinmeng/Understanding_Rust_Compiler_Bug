{"sha": "1069c0e38f28539ab29c32921435b3f28eb63808", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNjljMGUzOGYyODUzOWFiMjljMzI5MjE0MzViM2YyOGViNjM4MDg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-09-28T21:22:35Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-10-01T19:44:45Z"}, "message": "add a special case for literal `'static: 'a` where-clauses\n\nThis makes evaluation more consistent with fulfillment.", "tree": {"sha": "e013610f0cc2eec2807baa30beebadb8a16da024", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e013610f0cc2eec2807baa30beebadb8a16da024"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1069c0e38f28539ab29c32921435b3f28eb63808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1069c0e38f28539ab29c32921435b3f28eb63808", "html_url": "https://github.com/rust-lang/rust/commit/1069c0e38f28539ab29c32921435b3f28eb63808", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1069c0e38f28539ab29c32921435b3f28eb63808/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d44e9eb7ce65d1ae13db56c56713de4f4ef95bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d44e9eb7ce65d1ae13db56c56713de4f4ef95bd", "html_url": "https://github.com/rust-lang/rust/commit/9d44e9eb7ce65d1ae13db56c56713de4f4ef95bd"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "860914d1984ecd90de81822eafdaf410b9e629e8", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1069c0e38f28539ab29c32921435b3f28eb63808/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1069c0e38f28539ab29c32921435b3f28eb63808/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=1069c0e38f28539ab29c32921435b3f28eb63808", "patch": "@@ -727,26 +727,42 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 if r_a == r_b {\n                     // for<'a> 'a: 'a. OK\n                     Ok(EvaluatedToOk)\n+                } else if **r_a == ty::ReStatic {\n+                    // 'static: 'x always holds.\n+                    //\n+                    // This special case is handled somewhat inconsistently - if we\n+                    // have an inference variable that is supposed to be equal to\n+                    // `'static`, then we don't allow it to be equated to an LBR,\n+                    // but if we have a literal `'static`, then we *do*.\n+                    //\n+                    // This is actually consistent with how our region inference works.\n+                    //\n+                    // It would appear that this sort of inconsistency would\n+                    // cause \"instability\" problems with evaluation caching. However,\n+                    // evaluation caching is only for trait predicates, and when\n+                    // trait predicates create nested obligations, they contain\n+                    // inference variables for all the regions in the trait - the\n+                    // only way this codepath can be reached from trait predicate\n+                    // evaluation is when the user typed an explicit `where 'static: 'a`\n+                    // lifetime bound (in which case we want to return EvaluatedToOk).\n+                    //\n+                    // If we ever want to handle inference variables that might be\n+                    // equatable with ReStatic, we need to make sure we are not confused by\n+                    // technically-allowed-by-RFC-447-but-probably-should-not-be\n+                    // impls such as\n+                    // ```Rust\n+                    // impl<'a, 's, T> X<'s> for T where T: Debug + 'a, 'a: 's\n+                    // ```\n+                    Ok(EvaluatedToOk)\n                 } else if r_a.is_late_bound() || r_b.is_late_bound() {\n                     // There is no current way to prove `for<'a> 'a: 'x`\n                     // unless `'a = 'x`, because there are no bounds involving\n                     // lifetimes.\n \n-                    // It is possible to solve `for<'a> 'x: 'a` where `'x`\n-                    // is a free region by forcing `'x = 'static`. However,\n-                    // fulfillment does not *quite* do this ATM (it calls\n-                    // `region_outlives_predicate`, which is OK if `'x` is\n-                    // literally ReStatic, but is *not* OK if `'x` is any\n-                    // sort of inference variable, even if it *is* equal\n-                    // to `'static`).\n-\n-                    // If we ever want to handle that sort of obligations,\n-                    // we need to make sure we are not confused by\n-                    // technically-allowed-by-RFC-447-but-probably-should-not-be\n-                    // impls such as\n-                    // ```Rust\n-                    // impl<'a, 's, T> X<'s> for T where T: Debug + 's, 'a: 's\n-                    // ```\n+                    // It might be possible to prove `for<'a> 'x: 'a` by forcing `'x`\n+                    // to be `'static`. However, this is not currently done by type\n+                    // inference unless `'x` is literally ReStatic. See the comment\n+                    // above.\n \n                     // We don't want to allow this sort of reasoning in intercrate\n                     // mode, for backwards-compatibility reasons."}, {"sha": "1051bec63079e8f75facc2ab8abaac3fb229bcdf", "filename": "src/test/ui/run-pass/traits/traits-static-outlives-a-where-clause.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1069c0e38f28539ab29c32921435b3f28eb63808/src%2Ftest%2Fui%2Frun-pass%2Ftraits%2Ftraits-static-outlives-a-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1069c0e38f28539ab29c32921435b3f28eb63808/src%2Ftest%2Fui%2Frun-pass%2Ftraits%2Ftraits-static-outlives-a-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Ftraits%2Ftraits-static-outlives-a-where-clause.rs?ref=1069c0e38f28539ab29c32921435b3f28eb63808", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+\n+trait Foo<'a> {\n+    fn xyz(self);\n+}\n+impl<'a, T> Foo<'a> for T where 'static: 'a {\n+    fn xyz(self) {}\n+}\n+\n+trait Bar {\n+    fn uvw(self);\n+}\n+impl<T> Bar for T where for<'a> T: Foo<'a> {\n+    fn uvw(self) { self.xyz(); }\n+}\n+\n+fn foo<T>(t: T) where T: Bar {\n+    t.uvw();\n+}\n+\n+fn main() {\n+    foo(0);\n+}"}]}