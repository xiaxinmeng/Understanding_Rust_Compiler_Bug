{"sha": "bad8147d01df374e3daa37fe36446781df2eac2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZDgxNDdkMDFkZjM3NGUzZGFhMzdmZTM2NDQ2NzgxZGYyZWFjMmQ=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-09-05T21:52:44Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-09-05T21:52:49Z"}, "message": "fix reviewer comments", "tree": {"sha": "72c4f9f21e2745bfe8073bad69badf81ed16cce3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72c4f9f21e2745bfe8073bad69badf81ed16cce3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bad8147d01df374e3daa37fe36446781df2eac2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bad8147d01df374e3daa37fe36446781df2eac2d", "html_url": "https://github.com/rust-lang/rust/commit/bad8147d01df374e3daa37fe36446781df2eac2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bad8147d01df374e3daa37fe36446781df2eac2d/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f6db849f7270b9126e6609a87058c1bc3aef1da", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6db849f7270b9126e6609a87058c1bc3aef1da", "html_url": "https://github.com/rust-lang/rust/commit/3f6db849f7270b9126e6609a87058c1bc3aef1da"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "d5dc9a79b5acb5678113e37d77cc446b10425f9c", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bad8147d01df374e3daa37fe36446781df2eac2d/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad8147d01df374e3daa37fe36446781df2eac2d/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=bad8147d01df374e3daa37fe36446781df2eac2d", "patch": "@@ -8,6 +8,7 @@ use clap::{App, AppSettings, ArgMatches, SubCommand};\n use mdbook::errors::Result as Result3;\n use mdbook::MDBook;\n \n+#[cfg(feature = \"linkcheck\")]\n use failure::Error;\n #[cfg(feature = \"linkcheck\")]\n use mdbook::renderer::RenderContext;\n@@ -52,36 +53,41 @@ fn main() {\n             }\n         }\n         (\"linkcheck\", Some(sub_matches)) => {\n-            if let Err(err) = linkcheck(sub_matches) {\n-                eprintln!(\"Error: {}\", err);\n-\n-                // HACK: ignore timeouts\n-                let actually_broken = {\n-                    #[cfg(feature = \"linkcheck\")]\n-                    {\n-                        err.downcast::<BrokenLinks>()\n-                            .map(|broken_links| {\n-                                broken_links\n-                                    .links()\n-                                    .iter()\n-                                    .inspect(|cause| eprintln!(\"\\tCaused By: {}\", cause))\n-                                    .any(|cause| !format!(\"{}\", cause).contains(\"timed out\"))\n-                            })\n-                            .unwrap_or(false)\n-                    }\n-\n-                    #[cfg(not(feature = \"linkcheck\"))]\n-                    {\n-                        false\n+            #[cfg(feature = \"linkcheck\")]\n+            {\n+                if let Err(err) = linkcheck(sub_matches) {\n+                    eprintln!(\"Error: {}\", err);\n+\n+                    // HACK: ignore timeouts\n+                    let actually_broken = err\n+                        .downcast::<BrokenLinks>()\n+                        .map(|broken_links| {\n+                            broken_links\n+                                .links()\n+                                .iter()\n+                                .inspect(|cause| eprintln!(\"\\tCaused By: {}\", cause))\n+                                .fold(false, |already_broken, cause| {\n+                                    already_broken || !format!(\"{}\", cause).contains(\"timed out\")\n+                                })\n+                        })\n+                        .unwrap_or(false);\n+\n+                    if actually_broken {\n+                        std::process::exit(101);\n+                    } else {\n+                        std::process::exit(0);\n                     }\n-                };\n-\n-                if actually_broken {\n-                    std::process::exit(101);\n-                } else {\n-                    std::process::exit(0);\n                 }\n             }\n+\n+            #[cfg(not(feature = \"linkcheck\"))]\n+            {\n+                // This avoids the `unused_binding` lint.\n+                println!(\n+                    \"mdbook-linkcheck is disabled, but arguments were passed: {:?}\",\n+                    sub_matches\n+                );\n+            }\n         }\n         (_, _) => unreachable!(),\n     };\n@@ -97,12 +103,6 @@ pub fn linkcheck(args: &ArgMatches<'_>) -> Result<(), Error> {\n     mdbook_linkcheck::check_links(&render_ctx)\n }\n \n-#[cfg(not(feature = \"linkcheck\"))]\n-pub fn linkcheck(_args: &ArgMatches<'_>) -> Result<(), Error> {\n-    println!(\"mdbook-linkcheck is disabled.\");\n-    Ok(())\n-}\n-\n // Build command implementation\n pub fn build(args: &ArgMatches<'_>) -> Result3<()> {\n     let book_dir = get_book_dir(args);"}]}