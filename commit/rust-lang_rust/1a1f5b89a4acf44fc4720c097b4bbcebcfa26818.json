{"sha": "1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "node_id": "C_kwDOAAsO6NoAKDFhMWY1Yjg5YTRhY2Y0NGZjNDcyMGMwOTdiNGJiY2ViY2ZhMjY4MTg", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-04-03T16:42:39Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-04-03T19:29:57Z"}, "message": "Cleanup after some refactoring in rustc_target", "tree": {"sha": "38936a74b195682852c20a6dca322bb4d762bfa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38936a74b195682852c20a6dca322bb4d762bfa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "html_url": "https://github.com/rust-lang/rust/commit/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c16a558f245cdf363ede29bed0d682434885f826", "url": "https://api.github.com/repos/rust-lang/rust/commits/c16a558f245cdf363ede29bed0d682434885f826", "html_url": "https://github.com/rust-lang/rust/commit/c16a558f245cdf363ede29bed0d682434885f826"}], "stats": {"total": 191, "additions": 79, "deletions": 112}, "files": [{"sha": "5e1e1c81d26ea368e61f234f4ea7dc03be3010af", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -304,8 +304,12 @@ pub(crate) fn run_aot(\n     };\n \n     // FIXME handle `-Ctarget-cpu=native`\n-    let target_cpu =\n-        tcx.sess.opts.cg.target_cpu.as_ref().unwrap_or(&tcx.sess.target.cpu).to_owned();\n+    let target_cpu = match tcx.sess.opts.cg.target_cpu {\n+        Some(ref name) => name,\n+        None => tcx.sess.target.cpu.as_ref(),\n+    }\n+    .to_owned();\n+\n     Box::new((\n         CodegenResults {\n             modules,"}, {"sha": "497a28354d813b837c378a3ae87b857c02768908", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -287,8 +287,10 @@ fn handle_native(name: &str) -> &str {\n }\n \n pub fn target_cpu(sess: &Session) -> &str {\n-    let name = sess.opts.cg.target_cpu.as_ref().unwrap_or(&sess.target.cpu);\n-    handle_native(name)\n+    match sess.opts.cg.target_cpu {\n+        Some(ref name) => handle_native(name),\n+        None => handle_native(sess.target.cpu.as_ref()),\n+    }\n }\n \n pub fn target_features(sess: &Session) -> Vec<Symbol> {"}, {"sha": "84a1043a6a0f5d331b1da837837edae0395a814f", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -675,10 +675,10 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n     linker::disable_localization(&mut cmd);\n \n-    for &(ref k, ref v) in sess.target.link_env.iter() {\n+    for &(ref k, ref v) in sess.target.link_env.as_ref() {\n         cmd.env(k.as_ref(), v.as_ref());\n     }\n-    for k in sess.target.link_env_remove.iter() {\n+    for k in sess.target.link_env_remove.as_ref() {\n         cmd.env_remove(k.as_ref());\n     }\n \n@@ -1217,7 +1217,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n \n     if let Some(ret) = infer_from(\n         sess,\n-        sess.target.linker.as_ref().map(|l| PathBuf::from(l.as_ref())),\n+        sess.target.linker.as_deref().map(PathBuf::from),\n         Some(sess.target.linker_flavor),\n     ) {\n         return ret;"}, {"sha": "4182a5d07118e0652ff63c4bec28bde0775d0c59", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -956,7 +956,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.reserve(7); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((sym::target_os, Some(Symbol::intern(os))));\n-    for fam in sess.target.families.iter() {\n+    for fam in sess.target.families.as_ref() {\n         ret.insert((sym::target_family, Some(Symbol::intern(fam))));\n         if fam == \"windows\" {\n             ret.insert((sym::windows, None));"}, {"sha": "238d3f8bda5ffbff32515b910e7fa1804dc42f0c", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,8 +1,6 @@\n use std::{borrow::Cow, env};\n \n-use crate::spec::{FramePointer, LldFlavor, SplitDebuginfo, TargetOptions};\n-\n-use super::cvs;\n+use crate::spec::{cvs, FramePointer, LldFlavor, SplitDebuginfo, TargetOptions};\n \n pub fn opts(os: &'static str) -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6"}, {"sha": "ffcd1a3f4df757e8262f01270021eafe13aa854f", "filename": "compiler/rustc_target/src/spec/armv6k_nintendo_3ds.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,6 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, RelocModel, Target, TargetOptions};\n-\n-use super::cvs;\n+use crate::spec::{cvs, LinkArgs, LinkerFlavor, RelocModel, Target, TargetOptions};\n \n /// A base target for Nintendo 3DS devices using the devkitARM toolchain.\n ///"}, {"sha": "b59322d07f57aeff0b1f920a771e1a911d1d2fd9", "filename": "compiler/rustc_target/src/spec/dragonfly_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,6 +1,4 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n-\n-use super::cvs;\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "a7e0f9f7041273069d4c3d5a72460c8df0fb81f8", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,6 +1,4 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n-\n-use super::cvs;\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "04e30ff0c3e6e90b03d63625fe5396341d0dd610", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{crt_objects, LinkArgs, LinkOutputKind, LinkerFlavor, LldFlavor, TargetOptions};\n-\n-use super::cvs;\n+use crate::spec::{\n+    crt_objects, cvs, LinkArgs, LinkOutputKind, LinkerFlavor, LldFlavor, TargetOptions,\n+};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();"}, {"sha": "61c05a2bdb621257402bd2074b04c08de4bd8db0", "filename": "compiler/rustc_target/src/spec/haiku_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,6 +1,4 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n-\n-use super::cvs;\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "ef8f90a4da8c46dc04c420d75f763896be8ba8fc", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,7 +1,4 @@\n-use crate::spec::{FramePointer, LinkArgs, LinkerFlavor, TargetOptions};\n-use std::default::Default;\n-\n-use super::cvs;\n+use crate::spec::{cvs, FramePointer, LinkArgs, LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut late_link_args = LinkArgs::new();"}, {"sha": "7a051532f82e39b8f7ac38d9c5eafb21466ef2a7", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,7 +1,4 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, TargetOptions};\n-use std::default::Default;\n-\n-use super::cvs;\n+use crate::spec::{cvs, LinkerFlavor, PanicStrategy, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "0f79ada0d933219b2b95ba1774cd7a8b3af980bf", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,6 +1,4 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n-\n-use super::cvs;\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "45966b97d6abcb074a225ead00bf1abd4774576c", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,7 +1,5 @@\n+use crate::spec::{cvs, Target, TargetOptions};\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n-\n-use super::cvs;\n \n // The PSP has custom linker requirements.\n const LINKER_SCRIPT: &str = include_str!(\"./mipsel_sony_psp_linker_script.ld\");"}, {"sha": "bd5b712c143c5047c133fb62db6771b447c98eec", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 43, "deletions": 44, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -459,7 +459,7 @@ impl fmt::Display for LinkOutputKind {\n     }\n }\n \n-pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<Cow<'static, str>>>;\n+pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<StaticCow<str>>>;\n \n #[derive(Clone, Copy, Hash, Debug, PartialEq, Eq)]\n pub enum SplitDebuginfo {\n@@ -1028,19 +1028,16 @@ supported_targets! {\n }\n \n /// Cow-Vec-Str: Cow<'static, [Cow<'static, str>]>\n-// FIXME(Urgau): Figure out why the obvious form `[\"\".into()].into()` doesn't work.\n macro_rules! cvs {\n     () => {\n         ::std::borrow::Cow::Borrowed(&[])\n     };\n     ($($x:expr),+ $(,)?) => {\n-        {\n-            ::std::borrow::Cow::Borrowed(&[\n-                $(\n-                    ::std::borrow::Cow::Borrowed($x),\n-                )*\n-            ])\n-        }\n+        ::std::borrow::Cow::Borrowed(&[\n+            $(\n+                ::std::borrow::Cow::Borrowed($x),\n+            )*\n+        ])\n     };\n }\n \n@@ -1084,14 +1081,14 @@ impl TargetWarnings {\n #[derive(PartialEq, Clone, Debug)]\n pub struct Target {\n     /// Target triple to pass to LLVM.\n-    pub llvm_target: Cow<'static, str>,\n+    pub llvm_target: StaticCow<str>,\n     /// Number of bits in a pointer. Influences the `target_pointer_width` `cfg` variable.\n     pub pointer_width: u32,\n     /// Architecture to use for ABI considerations. Valid options include: \"x86\",\n     /// \"x86_64\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"powerpc64\", and others.\n-    pub arch: Cow<'static, str>,\n+    pub arch: StaticCow<str>,\n     /// [Data layout](https://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n-    pub data_layout: Cow<'static, str>,\n+    pub data_layout: StaticCow<str>,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,\n }\n@@ -1107,6 +1104,8 @@ impl HasTargetSpec for Target {\n     }\n }\n \n+type StaticCow<T> = Cow<'static, T>;\n+\n /// Optional aspects of a target specification.\n ///\n /// This has an implementation of `Default`, see each field for what the default is. In general,\n@@ -1123,25 +1122,25 @@ pub struct TargetOptions {\n     /// Used as the `target_endian` `cfg` variable. Defaults to little endian.\n     pub endian: Endian,\n     /// Width of c_int type. Defaults to \"32\".\n-    pub c_int_width: Cow<'static, str>,\n+    pub c_int_width: StaticCow<str>,\n     /// OS name to use for conditional compilation (`target_os`). Defaults to \"none\".\n     /// \"none\" implies a bare metal target without `std` library.\n     /// A couple of targets having `std` also use \"unknown\" as an `os` value,\n     /// but they are exceptions.\n-    pub os: Cow<'static, str>,\n+    pub os: StaticCow<str>,\n     /// Environment name to use for conditional compilation (`target_env`). Defaults to \"\".\n-    pub env: Cow<'static, str>,\n+    pub env: StaticCow<str>,\n     /// ABI name to distinguish multiple ABIs on the same OS and architecture. For instance, `\"eabi\"`\n     /// or `\"eabihf\"`. Defaults to \"\".\n-    pub abi: Cow<'static, str>,\n+    pub abi: StaticCow<str>,\n     /// Vendor name to use for conditional compilation (`target_vendor`). Defaults to \"unknown\".\n-    pub vendor: Cow<'static, str>,\n+    pub vendor: StaticCow<str>,\n     /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n     /// on the command line. Defaults to `LinkerFlavor::Gcc`.\n     pub linker_flavor: LinkerFlavor,\n \n     /// Linker to invoke\n-    pub linker: Option<Cow<'static, str>>,\n+    pub linker: Option<StaticCow<str>>,\n \n     /// LLD flavor used if `lld` (or `rust-lld`) is specified as a linker\n     /// without clarifying its flavor in any way.\n@@ -1176,23 +1175,23 @@ pub struct TargetOptions {\n     /// Optional link script applied to `dylib` and `executable` crate types.\n     /// This is a string containing the script, not a path. Can only be applied\n     /// to linkers where `linker_is_gnu` is true.\n-    pub link_script: Option<Cow<'static, str>>,\n+    pub link_script: Option<StaticCow<str>>,\n \n     /// Environment variables to be set for the linker invocation.\n-    pub link_env: Cow<'static, [(Cow<'static, str>, Cow<'static, str>)]>,\n+    pub link_env: StaticCow<[(StaticCow<str>, StaticCow<str>)]>,\n     /// Environment variables to be removed for the linker invocation.\n-    pub link_env_remove: Cow<'static, [Cow<'static, str>]>,\n+    pub link_env_remove: StaticCow<[StaticCow<str>]>,\n \n     /// Extra arguments to pass to the external assembler (when used)\n-    pub asm_args: Cow<'static, [Cow<'static, str>]>,\n+    pub asm_args: StaticCow<[StaticCow<str>]>,\n \n     /// Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults\n     /// to \"generic\".\n-    pub cpu: Cow<'static, str>,\n+    pub cpu: StaticCow<str>,\n     /// Default target features to pass to LLVM. These features will *always* be\n     /// passed, and cannot be disabled even via `-C`. Corresponds to `llc\n     /// -mattr=$features`.\n-    pub features: Cow<'static, str>,\n+    pub features: StaticCow<str>,\n     /// Whether dynamic linking is available on this target. Defaults to false.\n     pub dynamic_linking: bool,\n     /// If dynamic linking is available, whether only cdylibs are supported.\n@@ -1216,21 +1215,21 @@ pub struct TargetOptions {\n     /// Emit each function in its own section. Defaults to true.\n     pub function_sections: bool,\n     /// String to prepend to the name of every dynamic library. Defaults to \"lib\".\n-    pub dll_prefix: Cow<'static, str>,\n+    pub dll_prefix: StaticCow<str>,\n     /// String to append to the name of every dynamic library. Defaults to \".so\".\n-    pub dll_suffix: Cow<'static, str>,\n+    pub dll_suffix: StaticCow<str>,\n     /// String to append to the name of every executable.\n-    pub exe_suffix: Cow<'static, str>,\n+    pub exe_suffix: StaticCow<str>,\n     /// String to prepend to the name of every static library. Defaults to \"lib\".\n-    pub staticlib_prefix: Cow<'static, str>,\n+    pub staticlib_prefix: StaticCow<str>,\n     /// String to append to the name of every static library. Defaults to \".a\".\n-    pub staticlib_suffix: Cow<'static, str>,\n+    pub staticlib_suffix: StaticCow<str>,\n     /// Values of the `target_family` cfg set for this target.\n     ///\n     /// Common options are: \"unix\", \"windows\". Defaults to no families.\n     ///\n     /// See <https://doc.rust-lang.org/reference/conditional-compilation.html#target_family>.\n-    pub families: Cow<'static, [Cow<'static, str>]>,\n+    pub families: StaticCow<[StaticCow<str>]>,\n     /// Whether the target toolchain's ABI supports returning small structs as an integer.\n     pub abi_return_struct_as_int: bool,\n     /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n@@ -1302,7 +1301,7 @@ pub struct TargetOptions {\n     /// LLVM to assemble an archive or fall back to the system linker, and\n     /// currently only \"gnu\" is used to fall into LLVM. Unknown strings cause\n     /// the system linker to be used.\n-    pub archive_format: Cow<'static, str>,\n+    pub archive_format: StaticCow<str>,\n     /// Is asm!() allowed? Defaults to true.\n     pub allow_asm: bool,\n     /// Whether the runtime startup code requires the `main` function be passed\n@@ -1318,7 +1317,7 @@ pub struct TargetOptions {\n     /// Whether the target requires that emitted object code includes bitcode.\n     pub forces_embed_bitcode: bool,\n     /// Content of the LLVM cmdline section associated with embedded bitcode.\n-    pub bitcode_llvm_cmdline: Cow<'static, str>,\n+    pub bitcode_llvm_cmdline: StaticCow<str>,\n \n     /// Don't use this field; instead use the `.min_atomic_width()` method.\n     pub min_atomic_width: Option<u64>,\n@@ -1390,7 +1389,7 @@ pub struct TargetOptions {\n \n     /// If set, have the linker export exactly these symbols, instead of using\n     /// the usual logic to figure this out from the crate itself.\n-    pub override_export_symbols: Option<Cow<'static, [Cow<'static, str>]>>,\n+    pub override_export_symbols: Option<StaticCow<[StaticCow<str>]>>,\n \n     /// Determines how or whether the MergeFunctions LLVM pass should run for\n     /// this target. Either \"disabled\", \"trampolines\", or \"aliases\".\n@@ -1401,16 +1400,16 @@ pub struct TargetOptions {\n     pub merge_functions: MergeFunctions,\n \n     /// Use platform dependent mcount function\n-    pub mcount: Cow<'static, str>,\n+    pub mcount: StaticCow<str>,\n \n     /// LLVM ABI name, corresponds to the '-mabi' parameter available in multilib C compilers\n-    pub llvm_abiname: Cow<'static, str>,\n+    pub llvm_abiname: StaticCow<str>,\n \n     /// Whether or not RelaxElfRelocation flag will be passed to the linker\n     pub relax_elf_relocations: bool,\n \n     /// Additional arguments to pass to LLVM, similar to the `-C llvm-args` codegen option.\n-    pub llvm_args: Cow<'static, [Cow<'static, str>]>,\n+    pub llvm_args: StaticCow<[StaticCow<str>]>,\n \n     /// Whether to use legacy .ctors initialization hooks rather than .init_array. Defaults\n     /// to false (uses .init_array).\n@@ -1459,18 +1458,18 @@ impl Default for TargetOptions {\n             endian: Endian::Little,\n             c_int_width: \"32\".into(),\n             os: \"none\".into(),\n-            env: Cow::from(\"\"),\n-            abi: Cow::from(\"\"),\n+            env: \"\".into(),\n+            abi: \"\".into(),\n             vendor: \"unknown\".into(),\n             linker_flavor: LinkerFlavor::Gcc,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.into()),\n             lld_flavor: LldFlavor::Ld,\n             pre_link_args: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n             link_script: None,\n-            asm_args: Cow::Borrowed(&[]),\n+            asm_args: cvs![],\n             cpu: \"generic\".into(),\n-            features: Cow::from(\"\"),\n+            features: \"\".into(),\n             dynamic_linking: false,\n             only_cdylib: false,\n             executables: false,\n@@ -1482,7 +1481,7 @@ impl Default for TargetOptions {\n             function_sections: true,\n             dll_prefix: \"lib\".into(),\n             dll_suffix: \".so\".into(),\n-            exe_suffix: Cow::from(\"\"),\n+            exe_suffix: \"\".into(),\n             staticlib_prefix: \"lib\".into(),\n             staticlib_suffix: \".a\".into(),\n             families: cvs![],\n@@ -1511,15 +1510,15 @@ impl Default for TargetOptions {\n             late_link_args: LinkArgs::new(),\n             late_link_args_dynamic: LinkArgs::new(),\n             late_link_args_static: LinkArgs::new(),\n-            link_env: Cow::Borrowed(&[]),\n-            link_env_remove: Cow::Borrowed(&[]),\n+            link_env: cvs![],\n+            link_env_remove: cvs![],\n             archive_format: \"gnu\".into(),\n             main_needs_argc_argv: true,\n             allow_asm: true,\n             has_thread_local: false,\n             obj_is_bitcode: false,\n             forces_embed_bitcode: false,\n-            bitcode_llvm_cmdline: Cow::from(\"\"),\n+            bitcode_llvm_cmdline: \"\".into(),\n             min_atomic_width: None,\n             max_atomic_width: None,\n             atomic_cas: true,"}, {"sha": "cedacb60f3197ee4276df0968c0ab9c16e739c26", "filename": "compiler/rustc_target/src/spec/msp430_none_elf.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,5 +1,4 @@\n-use super::cvs;\n-use crate::spec::{PanicStrategy, RelocModel, Target, TargetOptions};\n+use crate::spec::{cvs, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {"}, {"sha": "69016d77cf97be88af4735e3183c6014adb0ac6a", "filename": "compiler/rustc_target/src/spec/netbsd_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,6 +1,4 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n-\n-use super::cvs;\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "bbd322bb6ce2b66ef1d37235425b864c05ade1b8", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,6 +1,4 @@\n-use crate::spec::{FramePointer, RelroLevel, TargetOptions};\n-\n-use super::cvs;\n+use crate::spec::{cvs, FramePointer, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "1878cc3fc11db2086b696c2bb2de1c2b9caf94f7", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,6 +1,4 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n-\n-use super::cvs;\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "0200862c7e013d726a7f5e7d2ddcea0d8e8a4dd1", "filename": "compiler/rustc_target/src/spec/riscv32imc_esp_espidf.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,7 +1,5 @@\n+use crate::spec::{cvs, Target, TargetOptions};\n use crate::spec::{LinkerFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n-\n-use super::cvs;\n \n pub fn target() -> Target {\n     Target {"}, {"sha": "d61e1b2ec1048d1519c6c76e512733c9b270b855", "filename": "compiler/rustc_target/src/spec/solaris_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,6 +1,4 @@\n-use crate::spec::TargetOptions;\n-\n-use super::cvs;\n+use crate::spec::{cvs, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "8d6130a8a7936dbe0e0f74b0500216a85d64cda2", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -8,8 +8,7 @@\n //!\n //! **Important:** This target profile **does not** specify a linker script. You just get the default link script when you build a binary for this target. The default link script is very likely wrong, so you should use `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n \n-use super::cvs;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{cvs, LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {"}, {"sha": "2beb279e3986160abc8b50bc2ed98a1018b0d85d", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,6 +1,4 @@\n-use crate::spec::TargetOptions;\n-\n-use super::cvs;\n+use crate::spec::{cvs, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "d11f1f7d3f856003d1fd731fa6c253d14b571da3", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,7 +1,5 @@\n use crate::spec::crt_objects::{self, CrtObjectsFallback};\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n-\n-use super::cvs;\n+use crate::spec::{cvs, LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();"}, {"sha": "21062c337d82522c7920162cfbbbd48ad8e57124", "filename": "compiler/rustc_target/src/spec/windows_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1f5b89a4acf44fc4720c097b4bbcebcfa26818/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs?ref=1a1f5b89a4acf44fc4720c097b4bbcebcfa26818", "patch": "@@ -1,6 +1,4 @@\n-use crate::spec::TargetOptions;\n-\n-use super::cvs;\n+use crate::spec::{cvs, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let base = super::msvc_base::opts();"}]}