{"sha": "e0f682e5fb3a4d860afe38b74673c61ab0193c8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZjY4MmU1ZmIzYTRkODYwYWZlMzhiNzQ2NzNjNjFhYjAxOTNjOGU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-22T22:20:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-22T22:27:40Z"}, "message": "Add some basic string functions: index, rindes, find, substr, split, concat, connect.", "tree": {"sha": "d9175a81b6d24c9306c20bd23255e67306cf0a06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9175a81b6d24c9306c20bd23255e67306cf0a06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0f682e5fb3a4d860afe38b74673c61ab0193c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f682e5fb3a4d860afe38b74673c61ab0193c8e", "html_url": "https://github.com/rust-lang/rust/commit/e0f682e5fb3a4d860afe38b74673c61ab0193c8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0f682e5fb3a4d860afe38b74673c61ab0193c8e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc6f307787c7533e33269cc2c7a9cb878f5bf69a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6f307787c7533e33269cc2c7a9cb878f5bf69a", "html_url": "https://github.com/rust-lang/rust/commit/fc6f307787c7533e33269cc2c7a9cb878f5bf69a"}], "stats": {"total": 203, "additions": 203, "deletions": 0}, "files": [{"sha": "81bbd91fef5df26fdc06206573b2a901a2e5787c", "filename": "src/lib/_str.rs", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/e0f682e5fb3a4d860afe38b74673c61ab0193c8e/src%2Flib%2F_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f682e5fb3a4d860afe38b74673c61ab0193c8e/src%2Flib%2F_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_str.rs?ref=e0f682e5fb3a4d860afe38b74673c61ab0193c8e", "patch": "@@ -100,3 +100,122 @@ fn refcount(str s) -> uint {\n   // -1 because calling this function incremented the refcount.\n   ret rustrt.refcount[u8](s) - 1u;\n }\n+\n+\n+// Standard bits from the world of string libraries.\n+\n+fn index(str s, u8 c) -> int {\n+  let int i = 0;\n+  for (u8 k in s) {\n+    if (k == c) {\n+      ret i;\n+    }\n+    i += 1;\n+  }\n+  ret -1;\n+}\n+\n+fn rindex(str s, u8 c) -> int {\n+  let int n = _str.byte_len(s) as int;\n+  while (n >= 0) {\n+    if (s.(n) == c) {\n+      ret n;\n+    }\n+    n -= 1;\n+  }\n+  ret n;\n+}\n+\n+fn find(str haystack, str needle) -> int {\n+\n+  let int haystack_len = byte_len(haystack) as int;\n+  let int needle_len = byte_len(needle) as int;\n+\n+  if (needle_len == 0) {\n+    ret 0;\n+  }\n+\n+  fn match_at(&str haystack,\n+              &str needle,\n+              int i) -> bool {\n+    let int j = i;\n+    for (u8 c in needle) {\n+      if (haystack.(j) != c) {\n+        ret false;\n+      }\n+      j += 1;\n+    }\n+    ret true;\n+  }\n+\n+  let int i = 0;\n+  while (i <= haystack_len - needle_len) {\n+    if (match_at(haystack, needle, i)) {\n+      ret i;\n+    }\n+    i += 1;\n+  }\n+  ret  -1;\n+}\n+\n+fn substr(str s, uint begin, uint len) -> str {\n+  let str accum = \"\";\n+  let uint i = begin;\n+  while (i < begin+len) {\n+    accum += s.(i);\n+    i += 1u;\n+  }\n+  ret accum;\n+}\n+\n+fn split(str s, u8 sep) -> vec[str] {\n+  let vec[str] v = vec();\n+  let str accum = \"\";\n+  let bool ends_with_sep = false;\n+  for (u8 c in s) {\n+    if (c == sep) {\n+      v += accum;\n+      accum = \"\";\n+      ends_with_sep = true;\n+    } else {\n+      accum += c;\n+      ends_with_sep = false;\n+    }\n+  }\n+  if (_str.byte_len(accum) != 0u ||\n+      ends_with_sep) {\n+    v += accum;\n+  }\n+  ret v;\n+}\n+\n+fn concat(vec[str] v) -> str {\n+  let str s = \"\";\n+  for (str ss in v) {\n+    s += ss;\n+  }\n+  ret s;\n+}\n+\n+fn connect(vec[str] v, str sep) -> str {\n+  let str s = \"\";\n+  let bool first = true;\n+  for (str ss in v) {\n+    if (first) {\n+      first = false;\n+    } else {\n+      s += sep;\n+    }\n+    s += ss;\n+  }\n+  ret s;\n+}\n+\n+\n+// Local Variables:\n+// mode: rust;\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "f3552aad373a5414065e756522b8c2af985182e6", "filename": "src/test/run-pass/lib-str.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/e0f682e5fb3a4d860afe38b74673c61ab0193c8e/src%2Ftest%2Frun-pass%2Flib-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f682e5fb3a4d860afe38b74673c61ab0193c8e/src%2Ftest%2Frun-pass%2Flib-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-str.rs?ref=e0f682e5fb3a4d860afe38b74673c61ab0193c8e", "patch": "@@ -11,6 +11,90 @@ fn test_bytes_len() {\n   check (_str.byte_len(\"\\U0001d11e\") == 4u);\n }\n \n+fn test_index_and_rindex() {\n+  check(_str.index(\"hello\", 'e' as u8) == 1);\n+  check(_str.index(\"hello\", 'o' as u8) == 4);\n+  check(_str.index(\"hello\", 'z' as u8) == -1);\n+  check(_str.rindex(\"hello\", 'l' as u8) == 3);\n+  check(_str.rindex(\"hello\", 'h' as u8) == 0);\n+  check(_str.rindex(\"hello\", 'z' as u8) == -1);\n+}\n+\n+fn test_split() {\n+  fn t(&str s, char c, int i, &str k) {\n+    log \"splitting: \" + s;\n+    log i;\n+    auto v = _str.split(s, c as u8);\n+    log \"split to: \";\n+    for (str z in v) {\n+      log z;\n+    }\n+    log \"comparing: \" + v.(i) + \" vs. \" + k;\n+    check(_str.eq(v.(i), k));\n+  }\n+  t(\"abc.hello.there\", '.', 0, \"abc\");\n+  t(\"abc.hello.there\", '.', 1, \"hello\");\n+  t(\"abc.hello.there\", '.', 2, \"there\");\n+  t(\".hello.there\", '.', 0, \"\");\n+  t(\".hello.there\", '.', 1, \"hello\");\n+  t(\"...hello.there.\", '.', 3, \"hello\");\n+  t(\"...hello.there.\", '.', 5, \"\");\n+}\n+\n+fn test_find() {\n+  fn t(&str haystack, &str needle, int i) {\n+    let int j = _str.find(haystack,needle);\n+    log \"searched for \" + needle;\n+    log j;\n+    check (i == j);\n+  }\n+  t(\"this is a simple\", \"is a\", 5);\n+  t(\"this is a simple\", \"is z\", -1);\n+  t(\"this is a simple\", \"\", 0);\n+  t(\"this is a simple\", \"simple\", 10);\n+  t(\"this\", \"simple\", -1);\n+}\n+\n+fn test_substr() {\n+  fn t(&str a, &str b, int start) {\n+    check(_str.eq(_str.substr(a, start as uint,\n+                              _str.byte_len(b)), b));\n+  }\n+\n+  t(\"hello\", \"llo\", 2);\n+  t(\"hello\", \"el\", 1);\n+  t(\"substr should not be a challenge\", \"not\", 14);\n+}\n+\n+fn test_concat() {\n+  fn t(&vec[str] v, &str s) {\n+    check(_str.eq(_str.concat(v), s));\n+  }\n+\n+  t(vec(\"you\", \"know\", \"I'm\", \"no\", \"good\"), \"youknowI'mnogood\");\n+  let vec[str] v = vec();\n+  t(v, \"\");\n+  t(vec(\"hi\"), \"hi\");\n+}\n+\n+fn test_connect() {\n+  fn t(&vec[str] v, &str sep, &str s) {\n+    check(_str.eq(_str.connect(v, sep), s));\n+  }\n+\n+  t(vec(\"you\", \"know\", \"I'm\", \"no\", \"good\"), \" \", \"you know I'm no good\");\n+  let vec[str] v = vec();\n+  t(v, \" \", \"\");\n+  t(vec(\"hi\"), \" \", \"hi\");\n+}\n+\n+\n fn main() {\n   test_bytes_len();\n+  test_index_and_rindex();\n+  test_split();\n+  test_find();\n+  test_substr();\n+  test_concat();\n+  test_connect();\n }"}]}