{"sha": "90686ded25ee4f7f6676141a0413c066a2a4d393", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNjg2ZGVkMjVlZTRmN2Y2Njc2MTQxYTA0MTNjMDY2YTJhNGQzOTM=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-12-14T17:13:26Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-12-14T17:13:26Z"}, "message": "add ImmTy::try_from_(u)int methods", "tree": {"sha": "2363ff79ff1fc426d3e6bc8258c1aa71860b0f90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2363ff79ff1fc426d3e6bc8258c1aa71860b0f90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90686ded25ee4f7f6676141a0413c066a2a4d393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90686ded25ee4f7f6676141a0413c066a2a4d393", "html_url": "https://github.com/rust-lang/rust/commit/90686ded25ee4f7f6676141a0413c066a2a4d393", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90686ded25ee4f7f6676141a0413c066a2a4d393/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bce91ff0b3252b736040087f9b768027422f3f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bce91ff0b3252b736040087f9b768027422f3f0", "html_url": "https://github.com/rust-lang/rust/commit/0bce91ff0b3252b736040087f9b768027422f3f0"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "072152a388775acb8a7a11b9118504185c9229db", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90686ded25ee4f7f6676141a0413c066a2a4d393/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90686ded25ee4f7f6676141a0413c066a2a4d393/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=90686ded25ee4f7f6676141a0413c066a2a4d393", "patch": "@@ -218,14 +218,23 @@ impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n         ImmTy { imm: val.into(), layout }\n     }\n \n+    #[inline]\n+    pub fn try_from_uint(i: impl Into<u128>, layout: TyLayout<'tcx>) -> InterpResult<'tcx, Self> {\n+        Ok(Self::from_scalar(Scalar::try_from_uint(i, layout.size)?, layout))\n+    }\n     #[inline]\n     pub fn from_uint(i: impl Into<u128>, layout: TyLayout<'tcx>) -> Self {\n-        Self::from_scalar(Scalar::from_uint(i, layout.size), layout)\n+        Self::try_from_uint(i, layout).unwrap()\n+    }\n+\n+    #[inline]\n+    pub fn try_from_int(i: impl Into<i128>, layout: TyLayout<'tcx>) -> InterpResult<'tcx, Self> {\n+        Ok(Self::from_scalar(Scalar::try_from_int(i, layout.size)?, layout))\n     }\n \n     #[inline]\n     pub fn from_int(i: impl Into<i128>, layout: TyLayout<'tcx>) -> Self {\n-        Self::from_scalar(Scalar::from_int(i, layout.size), layout)\n+        Self::try_from_int(i, layout).unwrap()\n     }\n \n     #[inline]"}]}