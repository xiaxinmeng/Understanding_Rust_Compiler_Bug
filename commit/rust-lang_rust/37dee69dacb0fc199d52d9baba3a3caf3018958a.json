{"sha": "37dee69dacb0fc199d52d9baba3a3caf3018958a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZGVlNjlkYWNiMGZjMTk5ZDUyZDliYWJhM2EzY2FmMzAxODk1OGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-16T15:18:19Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-17T14:03:59Z"}, "message": "Add `bless` x.py subcommand for easy ui test replacement", "tree": {"sha": "1fabdaecf0b46a7fe4aea47fcb50c64daeca0283", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fabdaecf0b46a7fe4aea47fcb50c64daeca0283"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37dee69dacb0fc199d52d9baba3a3caf3018958a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37dee69dacb0fc199d52d9baba3a3caf3018958a", "html_url": "https://github.com/rust-lang/rust/commit/37dee69dacb0fc199d52d9baba3a3caf3018958a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37dee69dacb0fc199d52d9baba3a3caf3018958a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3150564f889a3bad01795d9fcb31d4f14d58a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3150564f889a3bad01795d9fcb31d4f14d58a99", "html_url": "https://github.com/rust-lang/rust/commit/e3150564f889a3bad01795d9fcb31d4f14d58a99"}], "stats": {"total": 170, "additions": 111, "deletions": 59}, "files": [{"sha": "4607ca5cf9f48e72b32672d424f97c48399c2e6c", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=37dee69dacb0fc199d52d9baba3a3caf3018958a", "patch": "@@ -297,7 +297,12 @@ fn main() {\n     }\n \n     if verbose > 1 {\n-        eprintln!(\"rustc command: {:?}\", cmd);\n+        eprintln!(\n+            \"rustc command: {:?}={:?} {:?}\",\n+            bootstrap::util::dylib_path_var(),\n+            env::join_paths(&dylib_path).unwrap(),\n+            cmd,\n+        );\n         eprintln!(\"sysroot: {:?}\", sysroot);\n         eprintln!(\"libdir: {:?}\", libdir);\n     }"}, {"sha": "d453e92289280e2855e0c5194dff9effc668b463", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=37dee69dacb0fc199d52d9baba3a3caf3018958a", "patch": "@@ -311,6 +311,8 @@ impl<'a> ShouldRun<'a> {\n pub enum Kind {\n     Build,\n     Check,\n+    /// Run tests and replace any failing tests' output files (stderr/stout) with the correct ones\n+    Bless,\n     Test,\n     Bench,\n     Dist,\n@@ -334,6 +336,7 @@ impl<'a> Builder<'a> {\n                 native::Llvm, tool::Rustfmt, tool::Miri, native::Lld),\n             Kind::Check => describe!(check::Std, check::Test, check::Rustc, check::CodegenBackend,\n                 check::Rustdoc),\n+            Kind::Bless |\n             Kind::Test => describe!(test::Tidy, test::Bootstrap, test::Ui, test::RunPass,\n                 test::CompileFail, test::ParseFail, test::RunFail, test::RunPassValgrind,\n                 test::MirOpt, test::Codegen, test::CodegenUnits, test::Incremental, test::Debuginfo,\n@@ -367,6 +370,7 @@ impl<'a> Builder<'a> {\n         let kind = match subcommand {\n             \"build\" => Kind::Build,\n             \"doc\" => Kind::Doc,\n+            \"bless\" => Kind::Bless,\n             \"test\" => Kind::Test,\n             \"bench\" => Kind::Bench,\n             \"dist\" => Kind::Dist,\n@@ -408,6 +412,7 @@ impl<'a> Builder<'a> {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n             Subcommand::Check { ref paths } => (Kind::Check, &paths[..]),\n             Subcommand::Doc { ref paths } => (Kind::Doc, &paths[..]),\n+            Subcommand::Test { ref paths, bless: true, .. } => (Kind::Bless, &paths[..]),\n             Subcommand::Test { ref paths, .. } => (Kind::Test, &paths[..]),\n             Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),"}, {"sha": "8753ccc93cf9a47f305d5928000ed48b0ae23e50", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=37dee69dacb0fc199d52d9baba3a3caf3018958a", "patch": "@@ -59,6 +59,8 @@ pub enum Subcommand {\n     },\n     Test {\n         paths: Vec<PathBuf>,\n+        /// Whether to automatically update stderr/stdout files\n+        bless: bool,\n         test_args: Vec<String>,\n         rustc_args: Vec<String>,\n         fail_fast: bool,\n@@ -142,6 +144,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n         let subcommand = args.iter().find(|&s|\n             (s == \"build\")\n             || (s == \"check\")\n+            || (s == \"bless\")\n             || (s == \"test\")\n             || (s == \"bench\")\n             || (s == \"doc\")\n@@ -162,6 +165,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n \n         // Some subcommands get extra options\n         match subcommand.as_str() {\n+            \"bless\" |\n             \"test\"  => {\n                 opts.optflag(\"\", \"no-fail-fast\", \"Run all tests regardless of failure\");\n                 opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n@@ -248,6 +252,12 @@ Arguments:\n     compilation, so there's no need to pass it separately, though it won't hurt. We also completely\n     ignore the stage passed, as there's no way to compile in non-stage 0 without actually building\n     the compiler.\");\n+            }\n+            \"bless\" => {\n+                subcommand_help.push_str(\"\\n\n+Arguments:\n+    This subcommand works exactly like the `test` subcommand, but also updates stderr/stdout files\n+    before they cause a test failure\");\n             }\n             \"test\" => {\n                 subcommand_help.push_str(\"\\n\n@@ -319,9 +329,11 @@ Arguments:\n             \"check\" => {\n                 Subcommand::Check { paths: paths }\n             }\n+            \"bless\" |\n             \"test\" => {\n                 Subcommand::Test {\n                     paths,\n+                    bless: subcommand.as_str() == \"bless\",\n                     test_args: matches.opt_strs(\"test-args\"),\n                     rustc_args: matches.opt_strs(\"rustc-args\"),\n                     fail_fast: !matches.opt_present(\"no-fail-fast\"),"}, {"sha": "ecb463fda2804f51063caed7881f79ce6f5473b2", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=37dee69dacb0fc199d52d9baba3a3caf3018958a", "patch": "@@ -41,16 +41,31 @@ const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n /// The two modes of the test runner; tests or benchmarks.\n #[derive(Debug, PartialEq, Eq, Hash, Copy, Clone, PartialOrd, Ord)]\n pub enum TestKind {\n+    /// Run `cargo bless`\n+    Bless,\n     /// Run `cargo test`\n     Test,\n     /// Run `cargo bench`\n     Bench,\n }\n \n+impl From<Kind> for TestKind {\n+    fn from(kind: Kind) -> Self {\n+        match kind {\n+            Kind::Test => TestKind::Test,\n+            Kind::Bless => TestKind::Bless,\n+            Kind::Bench => TestKind::Bench,\n+            _ => panic!(\"unexpected kind in crate: {:?}\", kind)\n+        }\n+    }\n+}\n+\n impl TestKind {\n     // Return the cargo subcommand for this test kind\n     fn subcommand(self) -> &'static str {\n         match self {\n+            // bless and test are both `test` for folder names and cargo subcommands\n+            TestKind::Bless |\n             TestKind::Test => \"test\",\n             TestKind::Bench => \"bench\",\n         }\n@@ -60,6 +75,7 @@ impl TestKind {\n impl fmt::Display for TestKind {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(match *self {\n+            TestKind::Bless => \"Testing (bless)\",\n             TestKind::Test => \"Testing\",\n             TestKind::Bench => \"Benchmarking\",\n         })\n@@ -951,6 +967,10 @@ impl Step for Compiletest {\n         cmd.arg(\"--host\").arg(&*compiler.host);\n         cmd.arg(\"--llvm-filecheck\").arg(builder.llvm_filecheck(builder.config.build));\n \n+        if builder.kind == Kind::Bless {\n+            cmd.arg(\"--bless\");\n+        }\n+\n         if let Some(ref nodejs) = builder.config.nodejs {\n             cmd.arg(\"--nodejs\").arg(nodejs);\n         }\n@@ -1342,13 +1362,7 @@ impl Step for CrateLibrustc {\n \n         for krate in builder.in_tree_crates(\"rustc-main\") {\n             if run.path.ends_with(&krate.path) {\n-                let test_kind = if builder.kind == Kind::Test {\n-                    TestKind::Test\n-                } else if builder.kind == Kind::Bench {\n-                    TestKind::Bench\n-                } else {\n-                    panic!(\"unexpected builder.kind in crate: {:?}\", builder.kind);\n-                };\n+                let test_kind = builder.kind.into();\n \n                 builder.ensure(CrateLibrustc {\n                     compiler,\n@@ -1394,13 +1408,7 @@ impl Step for CrateNotDefault {\n         let builder = run.builder;\n         let compiler = builder.compiler(builder.top_stage, run.host);\n \n-        let test_kind = if builder.kind == Kind::Test {\n-            TestKind::Test\n-        } else if builder.kind == Kind::Bench {\n-            TestKind::Bench\n-        } else {\n-            panic!(\"unexpected builder.kind in crate: {:?}\", builder.kind);\n-        };\n+        let test_kind = builder.kind.into();\n \n         builder.ensure(CrateNotDefault {\n             compiler,\n@@ -1461,13 +1469,7 @@ impl Step for Crate {\n         let compiler = builder.compiler(builder.top_stage, run.host);\n \n         let make = |mode: Mode, krate: &CargoCrate| {\n-            let test_kind = if builder.kind == Kind::Test {\n-                TestKind::Test\n-            } else if builder.kind == Kind::Bench {\n-                TestKind::Bench\n-            } else {\n-                panic!(\"unexpected builder.kind in crate: {:?}\", builder.kind);\n-            };\n+            let test_kind = builder.kind.into();\n \n             builder.ensure(Crate {\n                 compiler,\n@@ -1625,13 +1627,7 @@ impl Step for CrateRustdoc {\n     fn make_run(run: RunConfig) {\n         let builder = run.builder;\n \n-        let test_kind = if builder.kind == Kind::Test {\n-            TestKind::Test\n-        } else if builder.kind == Kind::Bench {\n-            TestKind::Bench\n-        } else {\n-            panic!(\"unexpected builder.kind in crate: {:?}\", builder.kind);\n-        };\n+        let test_kind = builder.kind.into();\n \n         builder.ensure(CrateRustdoc {\n             host: run.host,"}, {"sha": "b2ce5ce52f719ef2c073f83e946e3370150cecba", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=37dee69dacb0fc199d52d9baba3a3caf3018958a", "patch": "@@ -118,6 +118,9 @@ impl CompareMode {\n \n #[derive(Clone)]\n pub struct Config {\n+    /// Whether to overwrite stderr/stdout files instead of complaining about changes in output\n+    pub bless: bool,\n+\n     /// The library paths required for running the compiler\n     pub compile_lib_path: PathBuf,\n "}, {"sha": "2bfc1ece09590687d7df1001a544b861cbccad22", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=37dee69dacb0fc199d52d9baba3a3caf3018958a", "patch": "@@ -166,6 +166,11 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"FLAGS\",\n         )\n         .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n+        .optflag(\n+            \"\",\n+            \"bless\",\n+            \"overwrite stderr/stdout files instead of complaining about a mismatch\",\n+        )\n         .optflag(\n             \"\",\n             \"quiet\",\n@@ -290,6 +295,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n     let src_base = opt_path(matches, \"src-base\");\n     let run_ignored = matches.opt_present(\"ignored\");\n     Config {\n+        bless: matches.opt_present(\"bless\"),\n         compile_lib_path: make_absolute(opt_path(matches, \"compile-lib-path\")),\n         run_lib_path: make_absolute(opt_path(matches, \"run-lib-path\")),\n         rustc_path: opt_path(matches, \"rustc-path\"),"}, {"sha": "743d7fa93c29b50b2141fcea3d1492a84fc38c44", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 55, "deletions": 30, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dee69dacb0fc199d52d9baba3a3caf3018958a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=37dee69dacb0fc199d52d9baba3a3caf3018958a", "patch": "@@ -2926,29 +2926,31 @@ impl<'test> TestCx<'test> {\n             return 0;\n         }\n \n-        if expected.is_empty() {\n-            println!(\"normalized {}:\\n{}\\n\", kind, actual);\n-        } else {\n-            println!(\"diff of {}:\\n\", kind);\n-            let diff_results = make_diff(expected, actual, 3);\n-            for result in diff_results {\n-                let mut line_number = result.line_number;\n-                for line in result.lines {\n-                    match line {\n-                        DiffLine::Expected(e) => {\n-                            println!(\"-\\t{}\", e);\n-                            line_number += 1;\n-                        }\n-                        DiffLine::Context(c) => {\n-                            println!(\"{}\\t{}\", line_number, c);\n-                            line_number += 1;\n-                        }\n-                        DiffLine::Resulting(r) => {\n-                            println!(\"+\\t{}\", r);\n+        if !self.config.bless {\n+            if expected.is_empty() {\n+                println!(\"normalized {}:\\n{}\\n\", kind, actual);\n+            } else {\n+                println!(\"diff of {}:\\n\", kind);\n+                let diff_results = make_diff(expected, actual, 3);\n+                for result in diff_results {\n+                    let mut line_number = result.line_number;\n+                    for line in result.lines {\n+                        match line {\n+                            DiffLine::Expected(e) => {\n+                                println!(\"-\\t{}\", e);\n+                                line_number += 1;\n+                            }\n+                            DiffLine::Context(c) => {\n+                                println!(\"{}\\t{}\", line_number, c);\n+                                line_number += 1;\n+                            }\n+                            DiffLine::Resulting(r) => {\n+                                println!(\"+\\t{}\", r);\n+                            }\n                         }\n                     }\n+                    println!(\"\");\n                 }\n-                println!(\"\");\n             }\n         }\n \n@@ -2958,19 +2960,42 @@ impl<'test> TestCx<'test> {\n             .with_extra_extension(mode)\n             .with_extra_extension(kind);\n \n-        match File::create(&output_file).and_then(|mut f| f.write_all(actual.as_bytes())) {\n-            Ok(()) => {}\n-            Err(e) => self.fatal(&format!(\n-                \"failed to write {} to `{}`: {}\",\n-                kind,\n-                output_file.display(),\n-                e\n-            )),\n+        let mut files = vec![output_file];\n+        if self.config.bless {\n+            files.push(self.expected_output_path(kind));\n+        }\n+\n+        for output_file in &files {\n+            if actual.is_empty() {\n+                if let Err(e) = ::std::fs::remove_file(output_file) {\n+                    self.fatal(&format!(\n+                        \"failed to delete `{}`: {}\",\n+                        output_file.display(),\n+                        e,\n+                    ));\n+                }\n+            } else {\n+                match File::create(&output_file).and_then(|mut f| f.write_all(actual.as_bytes())) {\n+                    Ok(()) => {}\n+                    Err(e) => self.fatal(&format!(\n+                        \"failed to write {} to `{}`: {}\",\n+                        kind,\n+                        output_file.display(),\n+                        e\n+                    )),\n+                }\n+            }\n         }\n \n         println!(\"\\nThe actual {0} differed from the expected {0}.\", kind);\n-        println!(\"Actual {} saved to {}\", kind, output_file.display());\n-        1\n+        for output_file in files {\n+            println!(\"Actual {} saved to {}\", kind, output_file.display());\n+        }\n+        if self.config.bless {\n+            0\n+        } else {\n+            1\n+        }\n     }\n \n     fn create_stamp(&self) {"}]}