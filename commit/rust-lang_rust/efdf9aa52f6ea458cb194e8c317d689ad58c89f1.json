{"sha": "efdf9aa52f6ea458cb194e8c317d689ad58c89f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZGY5YWE1MmY2ZWE0NThjYjE5NGU4YzMxN2Q2ODlhZDU4Yzg5ZjE=", "commit": {"author": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2015-10-09T02:08:07Z"}, "committer": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2015-11-04T14:33:09Z"}, "message": "target_family configuration", "tree": {"sha": "7690b5bcb1fc4a7c5f38d13592b9e1aaa14ab92a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7690b5bcb1fc4a7c5f38d13592b9e1aaa14ab92a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efdf9aa52f6ea458cb194e8c317d689ad58c89f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efdf9aa52f6ea458cb194e8c317d689ad58c89f1", "html_url": "https://github.com/rust-lang/rust/commit/efdf9aa52f6ea458cb194e8c317d689ad58c89f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efdf9aa52f6ea458cb194e8c317d689ad58c89f1/comments", "author": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a7bd082ac8443dc74628b9b21686b84b7440d6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7bd082ac8443dc74628b9b21686b84b7440d6b", "html_url": "https://github.com/rust-lang/rust/commit/2a7bd082ac8443dc74628b9b21686b84b7440d6b"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "75b758649a63e5538fac36ec0fed7085a3889c10", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/efdf9aa52f6ea458cb194e8c317d689ad58c89f1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdf9aa52f6ea458cb194e8c317d689ad58c89f1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=efdf9aa52f6ea458cb194e8c317d689ad58c89f1", "patch": "@@ -610,22 +610,28 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let env = &sess.target.target.target_env;\n     let vendor = &sess.target.target.target_vendor;\n \n-    let fam = match sess.target.target.options.is_like_windows {\n-        true  => InternedString::new(\"windows\"),\n-        false => InternedString::new(\"unix\")\n+    let fam = if let Some(ref fam) = sess.target.target.options.target_family {\n+        intern(fam)\n+    } else if sess.target.target.options.is_like_windows {\n+        InternedString::new(\"windows\")\n+    } else {\n+        InternedString::new(\"unix\")\n     };\n \n     let mk = attr::mk_name_value_item_str;\n     let mut ret = vec![ // Target bindings.\n-         attr::mk_word_item(fam.clone()),\n-         mk(InternedString::new(\"target_os\"), intern(os)),\n-         mk(InternedString::new(\"target_family\"), fam),\n-         mk(InternedString::new(\"target_arch\"), intern(arch)),\n-         mk(InternedString::new(\"target_endian\"), intern(end)),\n-         mk(InternedString::new(\"target_pointer_width\"), intern(wordsz)),\n-         mk(InternedString::new(\"target_env\"), intern(env)),\n-         mk(InternedString::new(\"target_vendor\"), intern(vendor)),\n+        mk(InternedString::new(\"target_os\"), intern(os)),\n+        mk(InternedString::new(\"target_family\"), fam.clone()),\n+        mk(InternedString::new(\"target_arch\"), intern(arch)),\n+        mk(InternedString::new(\"target_endian\"), intern(end)),\n+        mk(InternedString::new(\"target_pointer_width\"), intern(wordsz)),\n+        mk(InternedString::new(\"target_env\"), intern(env)),\n+        mk(InternedString::new(\"target_vendor\"), intern(vendor)),\n     ];\n+    match &fam[..] {\n+        \"windows\" | \"unix\" => ret.push(attr::mk_word_item(fam)),\n+        _ => (),\n+    }\n     if sess.opts.debug_assertions {\n         ret.push(attr::mk_word_item(InternedString::new(\"debug_assertions\")));\n     }"}, {"sha": "0d53b0db34ec106bb4454ef32177131d1f9191b1", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efdf9aa52f6ea458cb194e8c317d689ad58c89f1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdf9aa52f6ea458cb194e8c317d689ad58c89f1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=efdf9aa52f6ea458cb194e8c317d689ad58c89f1", "patch": "@@ -150,6 +150,8 @@ pub struct TargetOptions {\n     pub staticlib_prefix: String,\n     /// String to append to the name of every static library. Defaults to \".a\".\n     pub staticlib_suffix: String,\n+    /// OS family to use for conditional compilation. Valid options: \"unix\", \"windows\".\n+    pub target_family: Option<String>,\n     /// Whether the target toolchain is like OSX's. Only useful for compiling against iOS/OS X, in\n     /// particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n     pub is_like_osx: bool,\n@@ -219,6 +221,7 @@ impl Default for TargetOptions {\n             exe_suffix: \"\".to_string(),\n             staticlib_prefix: \"lib\".to_string(),\n             staticlib_suffix: \".a\".to_string(),\n+            target_family: None,\n             is_like_osx: false,\n             is_like_windows: false,\n             is_like_android: false,\n@@ -339,6 +342,7 @@ impl Target {\n         key!(disable_redzone, bool);\n         key!(eliminate_frame_pointer, bool);\n         key!(function_sections, bool);\n+        key!(target_family, optional);\n         key!(is_like_osx, bool);\n         key!(is_like_windows, bool);\n         key!(linker_is_gnu, bool);"}]}