{"sha": "8f5858007c7e5f8c4f348f22005018fb41750d02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNTg1ODAwN2M3ZTVmOGM0ZjM0OGYyMjAwNTAxOGZiNDE3NTBkMDI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-01-31T00:21:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-31T00:21:24Z"}, "message": "Rollup merge of #68588 - Centril:check-unsafety-clean, r=Mark-Simulacrum\n\ncheck_unsafety: more code reuse\n\nr? oli-obk", "tree": {"sha": "c67c8cdf602975d88908ca833873b73207099f88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c67c8cdf602975d88908ca833873b73207099f88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f5858007c7e5f8c4f348f22005018fb41750d02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeM3MECRBK7hj4Ov3rIwAAdHIIAIRTVjnwBy4k3Vs+1UdqGV63\nPUChGMqtuOKNPro49e6wU0vzjtMzyLaBhFZqWCBNYlPGU7ysyHsvYmGu4fxHUyvg\nDyq+cmP8TppsR3P7U3vt4ctMB9pyqpw1MPO9byCT/Ab2IJQe2W1vGWjVnMZKhFVH\nRTXOHp2aZ+SSQPhTFSV5Sl8kDCm0rtMfeNTEu29jhhty++DiqeJgCamJNheZElll\nuh5rjBd4mmFPd/ZwD2G9JE+Wk1avueloCQ7tnkXu7zrn9wv8iyflw6VeplEuy7V1\n7KjTlQjz9t0av978s/q8VaN8MN7/TskG8sdfWXKWDI7FQvoszUluRJxY886b6iU=\n=K2wg\n-----END PGP SIGNATURE-----\n", "payload": "tree c67c8cdf602975d88908ca833873b73207099f88\nparent 34700c15c7a49d400951da385b2eacab6fb6fe86\nparent dc17f38e041e6bde95c6f6c5c6170dbb3917d51e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1580430084 +0100\ncommitter GitHub <noreply@github.com> 1580430084 +0100\n\nRollup merge of #68588 - Centril:check-unsafety-clean, r=Mark-Simulacrum\n\ncheck_unsafety: more code reuse\n\nr? oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f5858007c7e5f8c4f348f22005018fb41750d02", "html_url": "https://github.com/rust-lang/rust/commit/8f5858007c7e5f8c4f348f22005018fb41750d02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f5858007c7e5f8c4f348f22005018fb41750d02/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34700c15c7a49d400951da385b2eacab6fb6fe86", "url": "https://api.github.com/repos/rust-lang/rust/commits/34700c15c7a49d400951da385b2eacab6fb6fe86", "html_url": "https://github.com/rust-lang/rust/commit/34700c15c7a49d400951da385b2eacab6fb6fe86"}, {"sha": "dc17f38e041e6bde95c6f6c5c6170dbb3917d51e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc17f38e041e6bde95c6f6c5c6170dbb3917d51e", "html_url": "https://github.com/rust-lang/rust/commit/dc17f38e041e6bde95c6f6c5c6170dbb3917d51e"}], "stats": {"total": 57, "additions": 18, "deletions": 39}, "files": [{"sha": "8dc185cd82b3b41c97d60c558b64efe7444c702c", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8f5858007c7e5f8c4f348f22005018fb41750d02/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5858007c7e5f8c4f348f22005018fb41750d02/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=8f5858007c7e5f8c4f348f22005018fb41750d02", "patch": "@@ -148,16 +148,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n                 match (cast_in, cast_out) {\n                     (CastTy::Ptr(_), CastTy::Int(_)) | (CastTy::FnPtr, CastTy::Int(_)) => {\n-                        self.register_violations(\n-                            &[UnsafetyViolation {\n-                                source_info: self.source_info,\n-                                description: Symbol::intern(\"cast of pointer to int\"),\n-                                details: Symbol::intern(\n-                                    \"casting pointers to integers in constants\",\n-                                ),\n-                                kind: UnsafetyViolationKind::General,\n-                            }],\n-                            &[],\n+                        self.require_unsafe(\n+                            \"cast of pointer to int\",\n+                            \"casting pointers to integers in constants\",\n+                            UnsafetyViolationKind::General,\n                         );\n                     }\n                     _ => {}\n@@ -171,14 +165,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 if self.const_context && self.tcx.features().const_compare_raw_pointers =>\n             {\n                 if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.body, self.tcx).kind {\n-                    self.register_violations(\n-                        &[UnsafetyViolation {\n-                            source_info: self.source_info,\n-                            description: Symbol::intern(\"pointer operation\"),\n-                            details: Symbol::intern(\"operations on pointers in constants\"),\n-                            kind: UnsafetyViolationKind::General,\n-                        }],\n-                        &[],\n+                    self.require_unsafe(\n+                        \"pointer operation\",\n+                        \"operations on pointers in constants\",\n+                        UnsafetyViolationKind::General,\n                     );\n                 }\n             }\n@@ -199,18 +189,12 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         .as_ref()\n                         .assert_crate_local()\n                         .lint_root;\n-                    self.register_violations(\n-                        &[UnsafetyViolation {\n-                            source_info,\n-                            description: Symbol::intern(\"borrow of packed field\"),\n-                            details: Symbol::intern(\n-                                \"fields of packed structs might be misaligned: dereferencing a \\\n-                            misaligned pointer or even just creating a misaligned reference \\\n-                            is undefined behavior\",\n-                            ),\n-                            kind: UnsafetyViolationKind::BorrowPacked(lint_root),\n-                        }],\n-                        &[],\n+                    self.require_unsafe(\n+                        \"borrow of packed field\",\n+                        \"fields of packed structs might be misaligned: dereferencing a \\\n+                        misaligned pointer or even just creating a misaligned reference \\\n+                        is undefined behavior\",\n+                        UnsafetyViolationKind::BorrowPacked(lint_root),\n                     );\n                 }\n             }\n@@ -434,15 +418,10 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                         the field can be changed to invalid values\",\n                                     )\n                                 };\n-                                let source_info = self.source_info;\n-                                self.register_violations(\n-                                    &[UnsafetyViolation {\n-                                        source_info,\n-                                        description: Symbol::intern(description),\n-                                        details: Symbol::intern(details),\n-                                        kind: UnsafetyViolationKind::GeneralAndConstFn,\n-                                    }],\n-                                    &[],\n+                                self.require_unsafe(\n+                                    description,\n+                                    details,\n+                                    UnsafetyViolationKind::GeneralAndConstFn,\n                                 );\n                             }\n                         },"}]}