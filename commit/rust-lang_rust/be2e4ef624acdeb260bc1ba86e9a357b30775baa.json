{"sha": "be2e4ef624acdeb260bc1ba86e9a357b30775baa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMmU0ZWY2MjRhY2RlYjI2MGJjMWJhODZlOWEzNTdiMzA3NzViYWE=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-09T18:55:54Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-09T21:22:19Z"}, "message": "Allow failing in arc::exclusive; poison to fail subsequent accesses (fix #3092)", "tree": {"sha": "152fa3efed05a1ccf367581e95ab565e6eac33cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/152fa3efed05a1ccf367581e95ab565e6eac33cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be2e4ef624acdeb260bc1ba86e9a357b30775baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be2e4ef624acdeb260bc1ba86e9a357b30775baa", "html_url": "https://github.com/rust-lang/rust/commit/be2e4ef624acdeb260bc1ba86e9a357b30775baa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be2e4ef624acdeb260bc1ba86e9a357b30775baa/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190ecc220ab9c259b77caee36fc39aeda7d8b52e", "url": "https://api.github.com/repos/rust-lang/rust/commits/190ecc220ab9c259b77caee36fc39aeda7d8b52e", "html_url": "https://github.com/rust-lang/rust/commit/190ecc220ab9c259b77caee36fc39aeda7d8b52e"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "fe359646868824400758dcb54a364d318afd80b1", "filename": "src/libcore/arc.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/be2e4ef624acdeb260bc1ba86e9a357b30775baa/src%2Flibcore%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2e4ef624acdeb260bc1ba86e9a357b30775baa/src%2Flibcore%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farc.rs?ref=be2e4ef624acdeb260bc1ba86e9a357b30775baa", "patch": "@@ -81,11 +81,12 @@ fn clone<T: const send>(rc: &arc<T>) -> arc<T> {\n }\n \n // An arc over mutable data that is protected by a lock.\n-type ex_data<T: send> = {lock: sys::little_lock, mut data: T};\n+type ex_data<T: send> =\n+    {lock: sys::little_lock, mut failed: bool, mut data: T};\n type exclusive<T: send> = arc_destruct<ex_data<T>>;\n \n fn exclusive<T:send >(-data: T) -> exclusive<T> {\n-    let data = ~{mut count: 1, data: {lock: sys::little_lock(),\n+    let data = ~{mut count: 1, data: {lock: sys::little_lock(), failed: false,\n                                       data: data}};\n     unsafe {\n         let ptr = unsafe::reinterpret_cast(data);\n@@ -128,12 +129,18 @@ impl<T: send> exclusive<T> {\n         let ptr: ~arc_data<ex_data<T>> =\n             unsafe::reinterpret_cast(self.data);\n         assert ptr.count > 0;\n-        let r = {\n-            let rec: &ex_data<T> = &(*ptr).data;\n-            do rec.lock.lock { f(&mut rec.data) }\n-        };\n+        let ptr2: &arc_data<ex_data<T>> = unsafe::reinterpret_cast(&*ptr);\n         unsafe::forget(ptr);\n-        r\n+        let rec: &ex_data<T> = &(*ptr2).data;\n+        do rec.lock.lock {\n+            if rec.failed {\n+                fail ~\"Poisoned arc::exclusive - another task failed inside!\";\n+            }\n+            rec.failed = true;\n+            let result = f(&mut rec.data);\n+            rec.failed = false;\n+            result\n+        }\n     }\n }\n \n@@ -168,12 +175,11 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore] // this can probably infinite loop too.\n     fn exclusive_arc() {\n         let mut futures = ~[];\n \n         let num_tasks = 10u;\n-        let count = 1000u;\n+        let count = 10u;\n \n         let total = exclusive(~mut 0u);\n \n@@ -194,4 +200,20 @@ mod tests {\n             assert **total == num_tasks * count\n         };\n     }\n+\n+    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    fn exclusive_poison() {\n+        // Tests that if one task fails inside of an exclusive, subsequent\n+        // accesses will also fail.\n+        let x = arc::exclusive(1);\n+        let x2 = x.clone();\n+        do task::try {\n+            do x2.with |one| {\n+                assert *one == 2;\n+            }\n+        };\n+        do x.with |one| {\n+            assert *one == 1;\n+        }\n+    }\n }"}]}