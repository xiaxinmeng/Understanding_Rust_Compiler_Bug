{"sha": "ab059671cb78016bb039b3db07c62279d37ef42b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMDU5NjcxY2I3ODAxNmJiMDM5YjNkYjA3YzYyMjc5ZDM3ZWY0MmI=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-19T19:13:49Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-19T19:13:49Z"}, "message": "Change comparison order for clarity", "tree": {"sha": "b2dbf4f6e1ce0a67c949d4558806c2f2cfa50215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2dbf4f6e1ce0a67c949d4558806c2f2cfa50215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab059671cb78016bb039b3db07c62279d37ef42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab059671cb78016bb039b3db07c62279d37ef42b", "html_url": "https://github.com/rust-lang/rust/commit/ab059671cb78016bb039b3db07c62279d37ef42b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab059671cb78016bb039b3db07c62279d37ef42b/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0201cc55873dd27f0be148482ad3619083fed80b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0201cc55873dd27f0be148482ad3619083fed80b", "html_url": "https://github.com/rust-lang/rust/commit/0201cc55873dd27f0be148482ad3619083fed80b"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "ddaf8f48a5aaef2c8482041f0520dc8babb028f9", "filename": "src/helpers.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ab059671cb78016bb039b3db07c62279d37ef42b/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab059671cb78016bb039b3db07c62279d37ef42b/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=ab059671cb78016bb039b3db07c62279d37ef42b", "patch": "@@ -356,19 +356,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let len = bytes.len();\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an overflow.\n-        if (len as u64) < size {\n-            let this = self.eval_context_mut();\n-            let tcx = &{ this.tcx.tcx };\n-            let buffer = this.memory.get_mut(ptr.alloc_id)?.get_bytes_mut(tcx, ptr, Size::from_bytes(len as u64 + 1))?;\n-            buffer[..len].copy_from_slice(bytes);\n-            // This is ok because the buffer was strictly larger than `bytes`, so after adding the\n-            // null terminator, the buffer size is larger or equal to `bytes.len()`, meaning that\n-            // `bytes` actually fit inside tbe buffer.\n-            buffer[len] = 0;\n-            Ok(())\n-        } else {\n-            throw_unsup_format!(\"OsString is larger than destination\")\n+        if size <= bytes.len() as u64 {\n+            throw_unsup_format!(\"OsString of length {} is too large for destination buffer of size {}\", len, size)\n         }\n+\n+        let this = self.eval_context_mut();\n+        let buffer = this.memory.get_mut(ptr.alloc_id)?.get_bytes_mut(&*this.tcx, ptr, Size::from_bytes(len as u64 + 1))?;\n+        buffer[..len].copy_from_slice(bytes);\n+        // This is ok because the buffer was strictly larger than `bytes`, so after adding the\n+        // null terminator, the buffer size is larger or equal to `bytes.len()`, meaning that\n+        // `bytes` actually fit inside tbe buffer.\n+        buffer[len] = 0;\n+        Ok(())\n     }\n }\n "}]}