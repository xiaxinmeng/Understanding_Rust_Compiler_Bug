{"sha": "c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MmU1MWRmYjdhM2QyYjkwMjdhMzZiYTkzZWM3M2E1YzFiN2YwMGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-20T18:08:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-22T08:51:56Z"}, "message": "normalize types in ADT constructor\n\nFixes #45940", "tree": {"sha": "b828871429f726d7c9e21cde9027dea90f34afe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b828871429f726d7c9e21cde9027dea90f34afe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a", "html_url": "https://github.com/rust-lang/rust/commit/c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10b8faccd0baeda52c0767e01d12c08440830805", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b8faccd0baeda52c0767e01d12c08440830805", "html_url": "https://github.com/rust-lang/rust/commit/10b8faccd0baeda52c0767e01d12c08440830805"}], "stats": {"total": 44, "additions": 12, "deletions": 32}, "files": [{"sha": "15c68954230ba2c319a9b66a9292ad3e734ce79e", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a", "patch": "@@ -825,10 +825,16 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n                                       -> Mir<'tcx>\n {\n     let tcx = infcx.tcx;\n+    let gcx = tcx.global_tcx();\n     let def_id = tcx.hir.local_def_id(ctor_id);\n-    let sig = tcx.no_late_bound_regions(&tcx.fn_sig(def_id))\n+    let sig = gcx.no_late_bound_regions(&gcx.fn_sig(def_id))\n         .expect(\"LBR in ADT constructor signature\");\n-    let sig = tcx.erase_regions(&sig);\n+    let sig = gcx.erase_regions(&sig);\n+    let param_env = gcx.param_env(def_id);\n+\n+    // Normalize the sig now that we have liberated the late-bound\n+    // regions.\n+    let sig = gcx.normalize_associated_type_in_env(&sig, param_env);\n \n     let (adt_def, substs) = match sig.output().sty {\n         ty::TyAdt(adt_def, substs) => (adt_def, substs),"}, {"sha": "147f061ad113f52509fb0368bf5cda605473a545", "filename": "src/librustc_mir/transform/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs?ref=c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a", "patch": "@@ -47,7 +47,7 @@ pub fn compute_regions<'a, 'gcx, 'tcx>(\n \n     // Run the MIR type-checker.\n     let mir_node_id = infcx.tcx.hir.as_local_node_id(def_id).unwrap();\n-    let constraint_sets = &type_check::type_check(infcx, mir_node_id, param_env, mir, def_id);\n+    let constraint_sets = &type_check::type_check(infcx, mir_node_id, param_env, mir);\n \n     // Create the region inference context, taking ownership of the region inference\n     // data that was contained in `infcx`."}, {"sha": "ade5cf8b70c2b6427662f1a66c1e6c0652ce69fb", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=c52e51dfb7a3d2b9027a36ba93ec73a5c1b7f00a", "patch": "@@ -11,8 +11,6 @@\n //! This pass type-checks the MIR to ensure it is not broken.\n #![allow(unreachable_code)]\n \n-use rustc::hir::def_id::DefId;\n-use rustc::hir::map::DefPathData;\n use rustc::infer::{InferCtxt, InferOk, InferResult, LateBoundRegionConversionTime, UnitResult};\n use rustc::infer::region_constraints::RegionConstraintData;\n use rustc::traits::{self, FulfillmentContext};\n@@ -43,9 +41,8 @@ pub fn type_check<'a, 'gcx, 'tcx>(\n     body_id: ast::NodeId,\n     param_env: ty::ParamEnv<'gcx>,\n     mir: &Mir<'tcx>,\n-    mir_def_id: DefId,\n ) -> MirTypeckRegionConstraints<'tcx> {\n-    let mut checker = TypeChecker::new(infcx, body_id, param_env, mir_def_id);\n+    let mut checker = TypeChecker::new(infcx, body_id, param_env);\n     let errors_reported = {\n         let mut verifier = TypeVerifier::new(&mut checker, mir);\n         verifier.visit_mir(mir);\n@@ -411,11 +408,6 @@ pub struct TypeChecker<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     body_id: ast::NodeId,\n     reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n     constraints: MirTypeckRegionConstraints<'tcx>,\n-\n-    // FIXME(#45940) - True if this is a MIR shim or ADT constructor\n-    // (e.g., for a tuple struct.) In that case, the internal types of\n-    // operands and things require normalization.\n-    is_adt_constructor: bool,\n }\n \n /// A collection of region constraints that must be satisfied for the\n@@ -467,22 +459,14 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n         body_id: ast::NodeId,\n         param_env: ty::ParamEnv<'gcx>,\n-        mir_def_id: DefId,\n     ) -> Self {\n-        let def_key = infcx.tcx.def_key(mir_def_id);\n-        let is_adt_constructor = match def_key.disambiguated_data.data {\n-            DefPathData::StructCtor => true,\n-            _ => false,\n-        };\n-\n         TypeChecker {\n             infcx,\n             last_span: DUMMY_SP,\n             body_id,\n             param_env,\n             reported_errors: FxHashSet(),\n             constraints: MirTypeckRegionConstraints::default(),\n-            is_adt_constructor,\n         }\n     }\n \n@@ -1099,17 +1083,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                                     continue;\n                                 }\n                             };\n-                            let op_ty = match op {\n-                                Operand::Consume(lv) => {\n-                                    let lv_ty = lv.ty(mir, tcx).to_ty(tcx);\n-                                    if self.is_adt_constructor {\n-                                        self.normalize(&lv_ty, location)\n-                                    } else {\n-                                        lv_ty\n-                                    }\n-                                }\n-                                Operand::Constant(c) => c.ty,\n-                            };\n+                            let op_ty = op.ty(mir, tcx);\n                             if let Err(terr) = self.sub_types(\n                                 op_ty,\n                                 field_ty,\n@@ -1198,7 +1172,7 @@ impl MirPass for TypeckMir {\n         }\n         let param_env = tcx.param_env(def_id);\n         tcx.infer_ctxt().enter(|infcx| {\n-            let _region_constraint_sets = type_check(&infcx, id, param_env, mir, def_id);\n+            let _region_constraint_sets = type_check(&infcx, id, param_env, mir);\n \n             // For verification purposes, we just ignore the resulting\n             // region constraint sets. Not our problem. =)"}]}