{"sha": "13cee1e1987936514266861a4afa231d7224ad93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzY2VlMWUxOTg3OTM2NTE0MjY2ODYxYTRhZmEyMzFkNzIyNGFkOTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-06-15T21:30:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-06-15T21:31:27Z"}, "message": "This new caching sometimes suppresses duplicate errors that occur in\ndifferent parts of the crate, so modify the test cases that were relying\non that to test distinct types etc.", "tree": {"sha": "f1110f626dbe24af8539999301d66580aa675fb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1110f626dbe24af8539999301d66580aa675fb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13cee1e1987936514266861a4afa231d7224ad93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13cee1e1987936514266861a4afa231d7224ad93", "html_url": "https://github.com/rust-lang/rust/commit/13cee1e1987936514266861a4afa231d7224ad93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13cee1e1987936514266861a4afa231d7224ad93/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0f13f86ef434809282bc5eca1bd04a23fdf88d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f13f86ef434809282bc5eca1bd04a23fdf88d2", "html_url": "https://github.com/rust-lang/rust/commit/f0f13f86ef434809282bc5eca1bd04a23fdf88d2"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "e603cca7f384b838f6ff6313de42723bdf088025", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=13cee1e1987936514266861a4afa231d7224ad93", "patch": "@@ -45,7 +45,6 @@ pub fn f1_uint_uint() {\n pub fn f1_uint_int() {\n     f1(2u32, 4i32);\n     //~^ ERROR the trait `Foo` is not implemented\n-    //~| ERROR the trait `Foo` is not implemented\n }\n \n pub fn f2_int() {"}, {"sha": "da667dcb1e88253feba1aa1682adfbd2f201ef6b", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=13cee1e1987936514266861a4afa231d7224ad93", "patch": "@@ -12,6 +12,7 @@\n \n trait Foo { fn foo(&self) {} }\n impl Foo for str {}\n+impl Foo for [u8] {}\n \n fn test1<T: ?Sized + Foo>(t: &T) {\n     let u: &Foo = t;\n@@ -28,9 +29,9 @@ fn test3() {\n     //~^ ERROR `core::marker::Sized` is not implemented for the type `str`\n }\n \n-fn test4() {\n-    let _: &Foo = \"hi\" as &Foo;\n-    //~^ ERROR `core::marker::Sized` is not implemented for the type `str`\n+fn test4(x: &[u8]) {\n+    let _: &Foo = x as &Foo;\n+    //~^ ERROR `core::marker::Sized` is not implemented for the type `[u8]`\n }\n \n fn main() { }"}, {"sha": "3474a73b31fdcab834dc557911b1eab3eb09f15a", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=13cee1e1987936514266861a4afa231d7224ad93", "patch": "@@ -50,8 +50,10 @@ fn foo2<'a>() {\n }\n \n fn foo3<'a>() {\n-    let t: Box<S<String>> = box S(marker::PhantomData);\n-    let a: Box<Gettable<String>> = t;\n+    struct Foo; // does not impl Copy\n+\n+    let t: Box<S<Foo>> = box S(marker::PhantomData);\n+    let a: Box<Gettable<Foo>> = t;\n     //~^ ERROR the trait `core::marker::Copy` is not implemented\n }\n "}, {"sha": "988961e7fa14a7d522c4f3c13fa4cce01e00f3fb", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs?ref=13cee1e1987936514266861a4afa231d7224ad93", "patch": "@@ -52,7 +52,7 @@ struct TupleLike(\n );\n \n enum Enum {\n-    DictionaryLike { field: Bar<i32> }, //~ ERROR not implemented\n+    DictionaryLike { field: Bar<u8> }, //~ ERROR not implemented\n }\n \n trait PolyTrait<T>\n@@ -62,7 +62,7 @@ trait PolyTrait<T>\n \n struct Struct;\n \n-impl PolyTrait<Foo<usize>> for Struct {\n+impl PolyTrait<Foo<u16>> for Struct {\n //~^ ERROR not implemented\n }\n "}, {"sha": "8dc977a8e490bf3aa213e447e39046e2e2e681c5", "filename": "src/test/compile-fail/traits-negative-impls.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs?ref=13cee1e1987936514266861a4afa231d7224ad93", "patch": "@@ -19,9 +19,6 @@ use std::marker::Send;\n \n struct Outer<T: Send>(T);\n \n-struct TestType;\n-impl !Send for TestType {}\n-\n struct Outer2<T>(T);\n \n unsafe impl<T: Send> Sync for Outer2<T> {}\n@@ -30,29 +27,41 @@ fn is_send<T: Send>(_: T) {}\n fn is_sync<T: Sync>(_: T) {}\n \n fn dummy() {\n+    struct TestType;\n+    impl !Send for TestType {}\n+\n     Outer(TestType);\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy::TestType`\n \n     is_send(TestType);\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy::TestType`\n \n     is_send((8, TestType));\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy::TestType`\n }\n \n fn dummy2() {\n+    struct TestType;\n+    impl !Send for TestType {}\n+\n     is_send(Box::new(TestType));\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy2::TestType`\n }\n \n fn dummy3() {\n+    struct TestType;\n+    impl !Send for TestType {}\n+\n     is_send(Box::new(Outer2(TestType)));\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy3::TestType`\n }\n \n fn main() {\n+    struct TestType;\n+    impl !Send for TestType {}\n+\n     // This will complain about a missing Send impl because `Sync` is implement *just*\n     // for T that are `Send`. Look at #20366 and #19950\n     is_sync(Outer2(TestType));\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `main::TestType`\n }"}, {"sha": "8057ca56621c12930278034aee6bc98b119f3821", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs?ref=13cee1e1987936514266861a4afa231d7224ad93", "patch": "@@ -40,6 +40,6 @@ fn test() {\n }\n \n fn main() {\n-    foo::<i32>();\n-    //~^ ERROR the trait `NotImplemented` is not implemented for the type `core::option::Option<i32>`\n+    foo::<u32>();\n+    //~^ ERROR the trait `NotImplemented` is not implemented for the type `core::option::Option<u32>`\n }"}, {"sha": "afa574bf85a8d950f5c2d77f61b336c270e304a7", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cee1e1987936514266861a4afa231d7224ad93/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=13cee1e1987936514266861a4afa231d7224ad93", "patch": "@@ -24,7 +24,7 @@ struct S3 {\n     g: [usize]\n }\n struct S4 {\n-    f: str, //~ ERROR `core::marker::Sized` is not implemented\n+    f: [u8], //~ ERROR `core::marker::Sized` is not implemented\n     g: usize\n }\n enum E<X: ?Sized> {"}]}