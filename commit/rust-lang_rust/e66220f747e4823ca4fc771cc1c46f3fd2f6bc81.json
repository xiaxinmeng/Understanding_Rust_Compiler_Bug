{"sha": "e66220f747e4823ca4fc771cc1c46f3fd2f6bc81", "node_id": "C_kwDOAAsO6NoAKGU2NjIyMGY3NDdlNDgyM2NhNGZjNzcxY2MxYzQ2ZjNmZDJmNmJjODE", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-11-30T15:55:10Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-11-30T15:55:10Z"}, "message": "Reduce the number of unstable features in tests", "tree": {"sha": "4a2e0313f46518e350ba267864f6bf8ef94f66f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a2e0313f46518e350ba267864f6bf8ef94f66f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e66220f747e4823ca4fc771cc1c46f3fd2f6bc81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e66220f747e4823ca4fc771cc1c46f3fd2f6bc81", "html_url": "https://github.com/rust-lang/rust/commit/e66220f747e4823ca4fc771cc1c46f3fd2f6bc81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e66220f747e4823ca4fc771cc1c46f3fd2f6bc81/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5e0b760d0ef062447f4f5b35adef5c75c8c69ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e0b760d0ef062447f4f5b35adef5c75c8c69ff", "html_url": "https://github.com/rust-lang/rust/commit/f5e0b760d0ef062447f4f5b35adef5c75c8c69ff"}], "stats": {"total": 104, "additions": 34, "deletions": 70}, "files": [{"sha": "28926243390932390a6873f0c85fea9b707e6493", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-custom.rs", "status": "modified", "additions": 19, "deletions": 38, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e66220f747e4823ca4fc771cc1c46f3fd2f6bc81/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e66220f747e4823ca4fc771cc1c46f3fd2f6bc81/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs?ref=e66220f747e4823ca4fc771cc1c46f3fd2f6bc81", "patch": "@@ -7,9 +7,10 @@\n // compile-flags:-C panic=abort\n // aux-build:helper.rs\n \n-#![feature(start, rustc_private, new_uninit, panic_info_message, lang_items)]\n+#![feature(rustc_private, lang_items)]\n #![feature(alloc_error_handler)]\n #![no_std]\n+#![no_main]\n \n extern crate alloc;\n extern crate libc;\n@@ -21,35 +22,30 @@ pub fn __aeabi_unwind_cpp_pr0() {}\n #[no_mangle]\n pub fn __aeabi_unwind_cpp_pr1() {}\n \n-use core::ptr::null_mut;\n-use core::alloc::{GlobalAlloc, Layout};\n use alloc::boxed::Box;\n+use alloc::string::ToString;\n+use core::alloc::{GlobalAlloc, Layout};\n+use core::ptr::null_mut;\n \n extern crate helper;\n \n struct MyAllocator;\n \n #[alloc_error_handler]\n-fn my_oom(layout: Layout) -> !\n-{\n+fn my_oom(layout: Layout) -> ! {\n     use alloc::fmt::write;\n     unsafe {\n         let size = layout.size();\n         let mut s = alloc::string::String::new();\n         write(&mut s, format_args!(\"My OOM: failed to allocate {} bytes!\\n\", size)).unwrap();\n-        let s = s.as_str();\n-        libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n+        libc::write(libc::STDERR_FILENO, s.as_ptr() as *const _, s.len());\n         libc::exit(0)\n     }\n }\n \n unsafe impl GlobalAlloc for MyAllocator {\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-        if layout.size() < 4096 {\n-            libc::malloc(layout.size()) as _\n-        } else {\n-            null_mut()\n-        }\n+        if layout.size() < 4096 { libc::malloc(layout.size()) as _ } else { null_mut() }\n     }\n     unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n }\n@@ -60,26 +56,12 @@ static A: MyAllocator = MyAllocator;\n #[panic_handler]\n fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n     unsafe {\n-        if let Some(s) = panic_info.payload().downcast_ref::<&str>() {\n-            const PSTR: &str = \"panic occurred: \";\n-            const CR: &str = \"\\n\";\n-            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n-            libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n-            libc::write(libc::STDERR_FILENO, CR as *const _ as _, CR.len());\n-        }\n-        if let Some(args) = panic_info.message() {\n-            let mut s = alloc::string::String::new();\n-            alloc::fmt::write(&mut s, *args).unwrap();\n-            let s = s.as_str();\n-            const PSTR: &str = \"panic occurred: \";\n-            const CR: &str = \"\\n\";\n-            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n-            libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n-            libc::write(libc::STDERR_FILENO, CR as *const _ as _, CR.len());\n-        } else {\n-            const PSTR: &str = \"panic occurred\\n\";\n-            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n-        }\n+        let s = panic_info.to_string();\n+        const PSTR: &str = \"panic occurred: \";\n+        const CR: &str = \"\\n\";\n+        libc::write(libc::STDERR_FILENO, PSTR.as_ptr() as *const _, PSTR.len());\n+        libc::write(libc::STDERR_FILENO, s.as_ptr() as *const _, s.len());\n+        libc::write(libc::STDERR_FILENO, CR.as_ptr() as *const _, CR.len());\n         libc::exit(1)\n     }\n }\n@@ -89,15 +71,14 @@ fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n // in these libraries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n // unwind. So, for this test case we will define the symbol.\n #[lang = \"eh_personality\"]\n-extern fn rust_eh_personality() {}\n+extern \"C\" fn rust_eh_personality() {}\n \n-#[derive(Debug)]\n+#[derive(Default, Debug)]\n struct Page(#[allow(unused_tuple_struct_fields)] [[u64; 32]; 16]);\n \n-#[start]\n-pub fn main(_argc: isize, _argv: *const *const u8) -> isize {\n-    let zero = Box::<Page>::new_zeroed();\n-    let zero = unsafe { zero.assume_init() };\n+#[no_mangle]\n+fn main(_argc: i32, _argv: *const *const u8) -> isize {\n+    let zero = Box::<Page>::new(Default::default());\n     helper::work_with(&zero);\n     1\n }"}, {"sha": "56409e71339148d845199c63a58bf0d601db5a1d", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-default.rs", "status": "modified", "additions": 15, "deletions": 32, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e66220f747e4823ca4fc771cc1c46f3fd2f6bc81/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e66220f747e4823ca4fc771cc1c46f3fd2f6bc81/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs?ref=e66220f747e4823ca4fc771cc1c46f3fd2f6bc81", "patch": "@@ -7,8 +7,9 @@\n // compile-flags:-C panic=abort\n // aux-build:helper.rs\n \n-#![feature(start, rustc_private, new_uninit, panic_info_message, lang_items)]\n+#![feature(rustc_private, lang_items)]\n #![no_std]\n+#![no_main]\n \n extern crate alloc;\n extern crate libc;\n@@ -21,6 +22,7 @@ pub fn __aeabi_unwind_cpp_pr0() {}\n pub fn __aeabi_unwind_cpp_pr1() {}\n \n use alloc::boxed::Box;\n+use alloc::string::ToString;\n use core::alloc::{GlobalAlloc, Layout};\n use core::ptr::null_mut;\n \n@@ -30,11 +32,7 @@ struct MyAllocator;\n \n unsafe impl GlobalAlloc for MyAllocator {\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-        if layout.size() < 4096 {\n-            libc::malloc(layout.size()) as _\n-        } else {\n-            null_mut()\n-        }\n+        if layout.size() < 4096 { libc::malloc(layout.size()) as _ } else { null_mut() }\n     }\n     unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n }\n@@ -45,26 +43,12 @@ static A: MyAllocator = MyAllocator;\n #[panic_handler]\n fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n     unsafe {\n-        if let Some(s) = panic_info.payload().downcast_ref::<&str>() {\n-            const PSTR: &str = \"panic occurred: \";\n-            const CR: &str = \"\\n\";\n-            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n-            libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n-            libc::write(libc::STDERR_FILENO, CR as *const _ as _, CR.len());\n-        }\n-        if let Some(args) = panic_info.message() {\n-            let mut s = alloc::string::String::new();\n-            alloc::fmt::write(&mut s, *args).unwrap();\n-            let s = s.as_str();\n-            const PSTR: &str = \"panic occurred: \";\n-            const CR: &str = \"\\n\";\n-            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n-            libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n-            libc::write(libc::STDERR_FILENO, CR as *const _ as _, CR.len());\n-        } else {\n-            const PSTR: &str = \"panic occurred\\n\";\n-            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n-        }\n+        let s = panic_info.to_string();\n+        const PSTR: &str = \"panic occurred: \";\n+        const CR: &str = \"\\n\";\n+        libc::write(libc::STDERR_FILENO, PSTR.as_ptr() as *const _, PSTR.len());\n+        libc::write(libc::STDERR_FILENO, s.as_ptr() as *const _, s.len());\n+        libc::write(libc::STDERR_FILENO, CR.as_ptr() as *const _, CR.len());\n         libc::exit(0)\n     }\n }\n@@ -74,15 +58,14 @@ fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n // in these libraries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n // unwind. So, for this test case we will define the symbol.\n #[lang = \"eh_personality\"]\n-extern fn rust_eh_personality() {}\n+extern \"C\" fn rust_eh_personality() {}\n \n-#[derive(Debug)]\n+#[derive(Default, Debug)]\n struct Page(#[allow(unused_tuple_struct_fields)] [[u64; 32]; 16]);\n \n-#[start]\n-pub fn main(_argc: isize, _argv: *const *const u8) -> isize {\n-    let zero = Box::<Page>::new_zeroed();\n-    let zero = unsafe { zero.assume_init() };\n+#[no_mangle]\n+fn main(_argc: i32, _argv: *const *const u8) -> isize {\n+    let zero = Box::<Page>::new(Default::default());\n     helper::work_with(&zero);\n     1\n }"}]}