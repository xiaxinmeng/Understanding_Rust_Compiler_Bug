{"sha": "b34cb1b631d7979307bec26905a1a9298ec4f17a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNGNiMWI2MzFkNzk3OTMwN2JlYzI2OTA1YTFhOTI5OGVjNGYxN2E=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-20T01:41:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-20T01:42:32Z"}, "message": "Fix a bunch of typestate bugs in handling if and while statement wirings.", "tree": {"sha": "0d3f0bf4330e64795297f45227040f6f73980edd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d3f0bf4330e64795297f45227040f6f73980edd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b34cb1b631d7979307bec26905a1a9298ec4f17a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b34cb1b631d7979307bec26905a1a9298ec4f17a", "html_url": "https://github.com/rust-lang/rust/commit/b34cb1b631d7979307bec26905a1a9298ec4f17a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b34cb1b631d7979307bec26905a1a9298ec4f17a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd", "html_url": "https://github.com/rust-lang/rust/commit/4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "5e1be7885e1119f8977bba9ef8a4a89c7568fb6b", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b34cb1b631d7979307bec26905a1a9298ec4f17a/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b34cb1b631d7979307bec26905a1a9298ec4f17a/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=b34cb1b631d7979307bec26905a1a9298ec4f17a", "patch": "@@ -555,6 +555,7 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       vec-lib.rs \\\n                       vec-slice.rs \\\n                       vec.rs \\\n+                      while-flow-graph.rs \\\n                       writealias.rs \\\n                       yield.rs \\\n                       yield2.rs \\"}, {"sha": "25eb544ad92c34257fa79d58f9da5063f7de014d", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b34cb1b631d7979307bec26905a1a9298ec4f17a/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b34cb1b631d7979307bec26905a1a9298ec4f17a/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=b34cb1b631d7979307bec26905a1a9298ec4f17a", "patch": "@@ -48,6 +48,7 @@ let stmt_collecting_visitor\n     : Walk.visitor =\n   let block_ids = Stack.create () in\n   let visit_block_pre (b:Ast.block) =\n+    htab_put cx.ctxt_all_blocks b.id b.node;\n     Stack.push b.id block_ids;\n     inner.Walk.visit_block_pre b\n   in"}, {"sha": "7d1b21ef1093f86e92e2b818428d88b1d266b245", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34cb1b631d7979307bec26905a1a9298ec4f17a/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b34cb1b631d7979307bec26905a1a9298ec4f17a/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=b34cb1b631d7979307bec26905a1a9298ec4f17a", "patch": "@@ -98,6 +98,7 @@ type ctxt =\n       ctxt_all_cast_types: (node_id,Ast.ty) Hashtbl.t;\n       ctxt_all_type_items: (node_id,Ast.ty) Hashtbl.t;\n       ctxt_all_stmts: (node_id,Ast.stmt) Hashtbl.t;\n+      ctxt_all_blocks: (node_id,Ast.block') Hashtbl.t;\n       ctxt_item_files: (node_id,filename) Hashtbl.t;\n       ctxt_all_lvals: (node_id,Ast.lval) Hashtbl.t;\n       ctxt_call_lval_params: (node_id,Ast.ty array) Hashtbl.t;\n@@ -183,6 +184,7 @@ let new_ctxt sess abi crate =\n     ctxt_all_cast_types = Hashtbl.create 0;\n     ctxt_all_type_items = Hashtbl.create 0;\n     ctxt_all_stmts = Hashtbl.create 0;\n+    ctxt_all_blocks = Hashtbl.create 0;\n     ctxt_item_files = crate.Ast.crate_files;\n     ctxt_all_lvals = Hashtbl.create 0;\n     ctxt_all_defns = Hashtbl.create 0;"}, {"sha": "8f8d717911161244b3859cc4514c3c67c61fbdec", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b34cb1b631d7979307bec26905a1a9298ec4f17a/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b34cb1b631d7979307bec26905a1a9298ec4f17a/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=b34cb1b631d7979307bec26905a1a9298ec4f17a", "patch": "@@ -697,7 +697,8 @@ let condition_assigning_visitor\n         | Ast.STMT_while sw ->\n             let (_, expr) = sw.Ast.while_lval in\n             let precond = slot_inits (expr_slots cx expr) in\n-              raise_pre_post_cond s.id precond\n+              raise_precondition sw.Ast.while_body.id precond;\n+              raise_postcondition sw.Ast.while_body.id precond\n \n         | Ast.STMT_alt_tag at ->\n             let precond = slot_inits (lval_slots cx at.Ast.alt_tag_lval) in\n@@ -947,16 +948,17 @@ let graph_special_block_structure_building_visitor\n             let ts = tables () in\n             let graph = ts.ts_graph in\n             let cond_id = s.id in\n+            let succ = Hashtbl.find graph cond_id in\n             let then_id = sif.Ast.if_then.id in\n             let then_end_id = last_id_or_block_id sif.Ast.if_then in\n             let show_node = show_node cx graph in\n+            let succ = List.filter (fun x -> not (x = then_id)) succ in\n               show_node \"initial cond\" cond_id;\n               show_node \"initial then\" then_id;\n               show_node \"initial then_end\" then_end_id;\n               begin\n                 match sif.Ast.if_else with\n                     None ->\n-                      let succ = Hashtbl.find graph then_end_id in\n                         Hashtbl.replace graph cond_id (then_id :: succ);\n                         (* Kill residual messed-up block wiring.*)\n                         remove_flow_edges graph then_end_id [then_id];\n@@ -966,8 +968,10 @@ let graph_special_block_structure_building_visitor\n \n                   | Some e ->\n                       let else_id = e.id in\n+                      let succ =\n+                        List.filter (fun x -> not (x = else_id)) succ\n+                      in\n                       let else_end_id = last_id_or_block_id e in\n-                      let succ = Hashtbl.find graph else_end_id in\n                         show_node \"initial else\" else_id;\n                         show_node \"initial else_end\" else_end_id;\n                         Hashtbl.replace graph cond_id [then_id; else_id];\n@@ -1049,19 +1053,23 @@ let graph_special_block_structure_building_visitor\n ;;\n \n let find_roots\n+    (cx:ctxt)\n     (graph:(node_id, (node_id list)) Hashtbl.t)\n     : (node_id,unit) Hashtbl.t =\n   let roots = Hashtbl.create 0 in\n     Hashtbl.iter (fun src _ -> Hashtbl.replace roots src ()) graph;\n     Hashtbl.iter (fun _ dsts ->\n                     List.iter (fun d -> Hashtbl.remove roots d) dsts) graph;\n+    iflog cx\n+      (fun _ -> Hashtbl.iter\n+         (fun k _ -> log cx \"root: %d\" (int_of_node k)) roots);\n     roots\n ;;\n \n let run_dataflow (cx:ctxt) (ts:typestate_tables) : unit =\n   let graph = ts.ts_graph in\n   let idref = ts.ts_maxid in\n-  let roots = find_roots graph in\n+  let roots = find_roots cx graph in\n   let nodes = Queue.create () in\n \n   let progress = ref true in\n@@ -1138,9 +1146,17 @@ let run_dataflow (cx:ctxt) (ts:typestate_tables) : unit =\n                 begin\n                   fun _ ->\n                     log cx \"stmt %d: '%s'\" (int_of_node node)\n-                      (match htab_search cx.ctxt_all_stmts node with\n-                           None -> \"??\"\n-                         | Some stmt -> Fmt.fmt_to_str Ast.fmt_stmt stmt);\n+                      begin\n+                        match htab_search cx.ctxt_all_stmts node with\n+                            None ->\n+                              begin\n+                                match htab_search cx.ctxt_all_blocks node with\n+                                    None -> \"??\"\n+                                  | Some b ->\n+                                      Fmt.fmt_to_str Ast.fmt_block b\n+                              end\n+                          | Some stmt -> Fmt.fmt_to_str Ast.fmt_stmt stmt\n+                      end;\n                     log cx \"stmt %d:\" (int_of_node node);\n \n                     log cx \"    prestate %s\" (fmt_constr_bitv prestate);\n@@ -1227,27 +1243,35 @@ let typestate_verify_visitor\n \n   let tables _ = Stack.top tables_stack in\n \n-  let visit_stmt_pre s =\n+  let check_states id =\n     let ts = tables () in\n-    let prestate = Hashtbl.find ts.ts_prestates s.id in\n-    let precond = Hashtbl.find ts.ts_preconditions s.id in\n+    let prestate = Hashtbl.find ts.ts_prestates id in\n+    let precond = Hashtbl.find ts.ts_preconditions id in\n       List.iter\n         (fun i ->\n            if not (Bits.get prestate i)\n            then\n              let ckey = Hashtbl.find ts.ts_constrs (Constr i) in\n              let constr_str = fmt_constr_key cx ckey in\n-               err (Some s.id)\n-                 \"Unsatisfied precondition constraint %s at stmt %d: %s\"\n-                 constr_str\n-                 (int_of_node s.id)\n-                 (Fmt.fmt_to_str Ast.fmt_stmt\n-                    (Hashtbl.find cx.ctxt_all_stmts s.id)))\n-        (Bits.to_list precond);\n-      inner.Walk.visit_stmt_pre s\n+               err (Some id)\n+                 \"Unsatisfied precondition constraint %s\"\n+                 constr_str)\n+        (Bits.to_list precond)\n+  in\n+\n+  let visit_stmt_pre s =\n+    check_states s.id;\n+    inner.Walk.visit_stmt_pre s\n+  in\n+\n+  let visit_block_pre b =\n+    check_states b.id;\n+    inner.Walk.visit_block_pre b\n   in\n+\n     { inner with\n-        Walk.visit_stmt_pre = visit_stmt_pre }\n+        Walk.visit_stmt_pre = visit_stmt_pre;\n+        Walk.visit_block_pre = visit_block_pre }\n ;;\n \n let lifecycle_visitor"}, {"sha": "49e7810a0de80e6c190fd7896b2cfe01a471949e", "filename": "src/test/run-pass/while-flow-graph.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b34cb1b631d7979307bec26905a1a9298ec4f17a/src%2Ftest%2Frun-pass%2Fwhile-flow-graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34cb1b631d7979307bec26905a1a9298ec4f17a/src%2Ftest%2Frun-pass%2Fwhile-flow-graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-flow-graph.rs?ref=b34cb1b631d7979307bec26905a1a9298ec4f17a", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+  let int x = 10;\n+  while (x == 10 && x == 11) { auto y = 0xf00; }\n+}\n\\ No newline at end of file"}]}