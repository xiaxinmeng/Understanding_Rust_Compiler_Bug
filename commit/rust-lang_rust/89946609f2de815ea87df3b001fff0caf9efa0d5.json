{"sha": "89946609f2de815ea87df3b001fff0caf9efa0d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5OTQ2NjA5ZjJkZTgxNWVhODdkZjNiMDAxZmZmMGNhZjllZmEwZDU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-09T22:15:07Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-09T22:15:07Z"}, "message": "Support a special const-value refcount, use it for const strings.", "tree": {"sha": "0945861dddd480b822827d77205f90584d0c2586", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0945861dddd480b822827d77205f90584d0c2586"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89946609f2de815ea87df3b001fff0caf9efa0d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89946609f2de815ea87df3b001fff0caf9efa0d5", "html_url": "https://github.com/rust-lang/rust/commit/89946609f2de815ea87df3b001fff0caf9efa0d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89946609f2de815ea87df3b001fff0caf9efa0d5/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e9be14757bfcaa65e388a9acd7e2ca97cccfbd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9be14757bfcaa65e388a9acd7e2ca97cccfbd0", "html_url": "https://github.com/rust-lang/rust/commit/3e9be14757bfcaa65e388a9acd7e2ca97cccfbd0"}], "stats": {"total": 127, "additions": 97, "deletions": 30}, "files": [{"sha": "9f2e819cd4c20a5d4027241b614a2a34a03d3163", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=89946609f2de815ea87df3b001fff0caf9efa0d5", "patch": "@@ -12,6 +12,9 @@\n \n let rc_base_field_refcnt = 0;;\n \n+(* FIXME: this needs updating if you ever want to work on 64 bit. *)\n+let const_refcount = 0x7badfaceL;;\n+\n let task_field_refcnt = rc_base_field_refcnt;;\n let task_field_stk = task_field_refcnt + 2;;\n let task_field_runtime_sp = task_field_stk + 1;;"}, {"sha": "686e7417a0bed699d9066156e04cc0240e15d0da", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=89946609f2de815ea87df3b001fff0caf9efa0d5", "patch": "@@ -1531,13 +1531,32 @@ let trans_visitor\n     if not init\n     then drop_ty_in_current_frame cell ty\n \n-  and trans_new_str (initializing:bool) (dst:Ast.lval) (s:string) : unit =\n+  and trans_new_str\n+      (initializing:bool)\n+      (dst:Ast.lval)\n+      (s:string)\n+      (id:node_id)\n+      : unit =\n     (* Include null byte. *)\n     let init_sz = Int64.of_int ((String.length s) + 1) in\n-    let static = trans_static_string s in\n     let (dst_cell, dst_ty) = trans_lval_maybe_init initializing dst in\n       drop_existing_if_not_init initializing dst_cell dst_ty;\n-      trans_upcall \"upcall_new_str\" dst_cell [| static; imm init_sz |]\n+      let ptr =\n+        crate_rel_to_ptr\n+          (trans_crate_rel_data_operand\n+             (DATA_const id)\n+             (fun _ ->\n+               Asm.SEQ\n+                 [|\n+                   Asm.WORD (word_ty_signed_mach,\n+                             Asm.IMM Abi.const_refcount);\n+                   Asm.WORD (word_ty_mach, Asm.IMM init_sz);\n+                   Asm.WORD (word_ty_mach, Asm.IMM init_sz);\n+                   Asm.ZSTRING s\n+                 |]))\n+          (referent_type cx Ast.TY_str)\n+      in\n+        mov dst_cell (Il.Cell ptr);\n \n   and trans_lit (lit:Ast.lit) : Il.operand =\n     match lit with\n@@ -3185,7 +3204,7 @@ let trans_visitor\n             in\n             let _ = check_box_rty box_ptr in\n             let null_jmp = null_check box_ptr in\n-            let rc_jmp = drop_refcount_and_cmp box_ptr in\n+            let rc_jmps = drop_refcount_and_cmp box_ptr in\n             let box = deref box_ptr in\n             let body = get_element_ptr box Abi.box_rc_field_body in\n             let tydesc = get_element_ptr body Abi.obj_body_elt_tydesc in\n@@ -3230,7 +3249,7 @@ let trans_visitor\n               note_drop_step ty \"drop_ty: freeing obj/fn body\";\n               trans_free box_ptr (type_has_state cx ty);\n               mov box_ptr zero;\n-              patch rc_jmp;\n+              List.iter patch rc_jmps;\n               patch null_jmp;\n               note_drop_step ty \"drop_ty: done obj path\";\n \n@@ -3262,7 +3281,7 @@ let trans_visitor\n \n                   let _ = check_box_rty cell in\n                   let null_jmp = null_check cell in\n-                  let j = drop_refcount_and_cmp cell in\n+                  let js = drop_refcount_and_cmp cell in\n \n                     (* FIXME (issue #25): check to see that the box has\n                      * further box members; if it doesn't we can elide the\n@@ -3277,7 +3296,7 @@ let trans_visitor\n                     (* Null the slot out to prevent double-free if the frame\n                      * unwinds.  *)\n                     mov cell zero;\n-                    patch j;\n+                    List.iter patch js;\n                     patch null_jmp;\n                     note_drop_step ty \"drop_ty: done box-drop path\";\n \n@@ -3525,7 +3544,7 @@ let trans_visitor\n   (* Returns a mark for a jmp that must be patched to the continuation of\n    * the non-zero refcount case (i.e. fall-through means zero refcount).\n    *)\n-  and drop_refcount_and_cmp (boxed:Il.cell) : quad_idx =\n+  and drop_refcount_and_cmp (boxed:Il.cell) : quad_idx list =\n     in_quad_category \"refcount\"\n       begin\n         fun _ ->\n@@ -3539,11 +3558,14 @@ let trans_visitor\n                 trace_word true boxed;\n                 trace_word true rc\n               end;\n-            emit (Il.binary Il.SUB rc (Il.Cell rc) one);\n-            emit (Il.cmp (Il.Cell rc) zero);\n-            let j = mark () in\n-              emit (Il.jmp Il.JNE Il.CodeNone);\n-              j\n+            emit (Il.cmp (Il.Cell rc) (simm Abi.const_refcount));\n+            let j0 = mark() in\n+              emit (Il.jmp Il.JE Il.CodeNone);\n+              emit (Il.binary Il.SUB rc (Il.Cell rc) one);\n+              emit (Il.cmp (Il.Cell rc) zero);\n+              let j1 = mark () in\n+                emit (Il.jmp Il.JNE Il.CodeNone);\n+                [j0; j1]\n       end\n \n   and incr_refcount (boxed:Il.cell) : unit =\n@@ -3559,7 +3581,11 @@ let trans_visitor\n                 trace_word true boxed;\n                 trace_word true rc\n               end;\n-            add_to rc one\n+            emit (Il.cmp (Il.Cell rc) (simm Abi.const_refcount));\n+            let j = mark() in\n+              emit (Il.jmp Il.JE Il.CodeNone);\n+              add_to rc one;\n+              patch j;\n       end\n \n   and drop_slot\n@@ -5316,7 +5342,7 @@ let trans_visitor\n \n       | Ast.STMT_new_str (dst, s) ->\n           let init = maybe_init stmt.id \"new str\" dst in\n-            trans_new_str init dst s\n+            trans_new_str init dst s stmt.id\n \n       | Ast.STMT_new_vec (dst, _, atoms) ->\n           let init = maybe_init stmt.id \"new vec\" dst in"}, {"sha": "4ea5ca2844f441b7f80539f0d0cc00c82ff3d407", "filename": "src/lib/_str.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Flib%2F_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Flib%2F_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_str.rs?ref=89946609f2de815ea87df3b001fff0caf9efa0d5", "patch": "@@ -97,8 +97,13 @@ fn from_bytes(vec[u8] v) : is_utf8(v) -> str {\n }\n \n fn refcount(str s) -> uint {\n-    // -1 because calling this function incremented the refcount.\n-    ret rustrt.refcount[u8](s) - 1u;\n+    auto r = rustrt.refcount[u8](s);\n+    if (r == dbg.const_refcount) {\n+        ret r;\n+    } else {\n+        // -1 because calling this function incremented the refcount.\n+        ret  r - 1u;\n+    }\n }\n \n "}, {"sha": "6fa0ed425acb8c34923c2a7d494c8da93db68f2d", "filename": "src/lib/_vec.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Flib%2F_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Flib%2F_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_vec.rs?ref=89946609f2de815ea87df3b001fff0caf9efa0d5", "patch": "@@ -30,8 +30,13 @@ fn alloc[T](uint n_elts) -> vec[T] {\n }\n \n fn refcount[T](vec[T] v) -> uint {\n-    // -1 because calling this function incremented the refcount.\n-    ret rustrt.refcount[T](v) - 1u;\n+    auto r = rustrt.refcount[T](v);\n+    if (r == dbg.const_refcount) {\n+        ret r;\n+    } else {\n+        // -1 because calling this function incremented the refcount.\n+        ret  r - 1u;\n+    }\n }\n \n type init_op[T] = fn(uint i) -> T;"}, {"sha": "51a31e07d13023c7fb5e9087f1de07bd21637b58", "filename": "src/lib/dbg.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Flib%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Flib%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdbg.rs?ref=89946609f2de815ea87df3b001fff0caf9efa0d5", "patch": "@@ -7,6 +7,9 @@\n \n import std._vec;\n \n+// FIXME: handle 64-bit case.\n+const uint const_refcount = 0x7bad_face_u;\n+\n native \"rust\" mod rustrt {\n     fn debug_tydesc[T]();\n     fn debug_opaque[T](&T x);"}, {"sha": "cb16fbf067daf45ab37de61cc9f5094777307ef6", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=89946609f2de815ea87df3b001fff0caf9efa0d5", "patch": "@@ -61,8 +61,12 @@ align_of(rust_task *task, type_desc *t) {\n   return t->align;\n }\n \n-extern \"C\" CDECL size_t\n-refcount(rust_task *task, type_desc *t, size_t *v) {\n+extern \"C\" CDECL intptr_t\n+refcount(rust_task *task, type_desc *t, intptr_t *v) {\n+\n+    if (*v == CONST_REFCOUNT)\n+        return CONST_REFCOUNT;\n+\n     // Passed-in value has refcount 1 too high\n     // because it was ref'ed while making the call.\n     return (*v) - 1;\n@@ -277,7 +281,9 @@ debug_box(rust_task *task, type_desc *t, rust_box *box)\n     task->log(rust_log::STDLIB, \"debug_box(0x%\" PRIxPTR \")\", box);\n     debug_tydesc_helper(task, t);\n     task->log(rust_log::STDLIB, \"  refcount %\" PRIdPTR,\n-              box->ref_count - 1);  // -1 because we ref'ed for this call\n+              box->ref_count == CONST_REFCOUNT\n+              ? CONST_REFCOUNT\n+              : box->ref_count - 1);  // -1 because we ref'ed for this call\n     for (uintptr_t i = 0; i < t->size; ++i) {\n         task->log(rust_log::STDLIB,\n                   \"  byte %\" PRIdPTR \": 0x%\" PRIx8, i, box->data[i]);"}, {"sha": "f008d9f6bdb6d6a3258acfb7d7b48e9a0225cb58", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=89946609f2de815ea87df3b001fff0caf9efa0d5", "patch": "@@ -81,6 +81,13 @@ struct frame_glue_fns;\n \n static size_t const TIME_SLICE_IN_MS = 10;\n \n+// Since every refcounted object is > 4 bytes, any refcount with any of the\n+// top two bits set is invalid. We reserve a particular bit pattern in this\n+// set for indicating objects that are \"constant\" as far as the memory model\n+// knows.\n+\n+static intptr_t const CONST_REFCOUNT = 0x7badface;\n+\n // Every reference counted object should derive from this base class.\n \n template <typename T> struct rc_base {"}, {"sha": "ebf81faf3acb0a87a56a59768dac5fab1e352ff2", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=89946609f2de815ea87df3b001fff0caf9efa0d5", "patch": "@@ -424,7 +424,10 @@ upcall_vec_grow(rust_task *task,\n             task->fail(4);\n             return NULL;\n         }\n-        v->deref();\n+\n+        if (v->ref_count != CONST_REFCOUNT)\n+            v->deref();\n+\n         v = new (mem) rust_vec(dom, alloc, 0, NULL);\n         *need_copy = 1;\n     }"}, {"sha": "4ee2c12bec25d957f95fcc92e3576df03310ec72", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=89946609f2de815ea87df3b001fff0caf9efa0d5", "patch": "@@ -3,6 +3,10 @@\n use std;\n import std._str;\n \n+// FIXME: import std.dbg.const_refcount. Currently\n+// cross-crate const references don't work.\n+const uint const_refcount = 0x7bad_face_u;\n+\n tag t {\n   make_t(str);\n   clam;\n@@ -17,12 +21,12 @@ fn foo(str s) {\n   }\n \n   log _str.refcount(s);\n-  check (_str.refcount(s) == 3u);\n+  check (_str.refcount(s) == const_refcount);\n }\n \n fn main() {\n   let str s = \"hi\";     // ref up\n   foo(s);               // ref up then down\n   log _str.refcount(s);\n-  check (_str.refcount(s) == 1u);\n+  check (_str.refcount(s) == const_refcount);\n }"}, {"sha": "ca906e5568ecfba589526c1df0cb8ef9d27723d2", "filename": "src/test/run-pass/vec-append.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Ftest%2Frun-pass%2Fvec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89946609f2de815ea87df3b001fff0caf9efa0d5/src%2Ftest%2Frun-pass%2Fvec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-append.rs?ref=89946609f2de815ea87df3b001fff0caf9efa0d5", "patch": "@@ -4,6 +4,11 @@ use std;\n import std._str;\n import std._vec;\n \n+\n+// FIXME: import std.dbg.const_refcount. Currently\n+// cross-crate const references don't work.\n+const uint const_refcount = 0x7bad_face_u;\n+\n fn fast_growth() {\n   let vec[int] v = vec(1,2,3,4,5);\n   v += vec(6,7,8,9,0);\n@@ -55,8 +60,8 @@ fn slow_growth2_helper(str s) {   // ref up: s\n     log _str.refcount(mumble);\n \n     check (_vec.refcount[str](v) == 1u);\n-    check (_str.refcount(s) == 4u);\n-    check (_str.refcount(mumble) == 3u);\n+    check (_str.refcount(s) == const_refcount);\n+    check (_str.refcount(mumble) == const_refcount);\n \n     log v.(0);\n     log _vec.len[str](v);\n@@ -67,8 +72,8 @@ fn slow_growth2_helper(str s) {   // ref up: s\n   log _str.refcount(s);\n   log _str.refcount(mumble);\n \n-  check (_str.refcount(s) == 3u);\n-  check (_str.refcount(mumble) == 1u);\n+  check (_str.refcount(s) == const_refcount);\n+  check (_str.refcount(mumble) == const_refcount);\n \n   log mumble;\n   log ss;\n@@ -78,7 +83,7 @@ fn slow_growth2() {\n   let str s = \"hi\";               // ref up: s\n   slow_growth2_helper(s);\n   log _str.refcount(s);\n-  check (_str.refcount(s) == 1u);\n+  check (_str.refcount(s) == const_refcount);\n }\n \n fn main() {"}]}