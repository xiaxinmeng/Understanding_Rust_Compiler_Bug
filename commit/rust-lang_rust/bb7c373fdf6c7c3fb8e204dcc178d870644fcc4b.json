{"sha": "bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "node_id": "C_kwDOAAsO6NoAKGJiN2MzNzNmZGY2YzdjM2ZiOGUyMDRkY2MxNzhkODcwNjQ0ZmNjNGI", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2023-01-15T18:43:15Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2023-03-20T17:19:35Z"}, "message": "migrate compiler, bootstrap, and compiletest to windows-rs", "tree": {"sha": "32094fdb49a0bb37a86af2e10f3189c9070cf513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32094fdb49a0bb37a86af2e10f3189c9070cf513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAmQYlakWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdLUiCACts4fpJvruq3Wa3Uq5r+5f5eUD\n6TlNK7fPpLR7rHWl5bYE6PN05Q+0ue8KYfc7jZP2ecL3Z+aa32Bow38dmaK4mNcQ\n3SNkmN85Y5KO8sX68h99ckokWwsxnTl9IXWu1cXtkvR17RmTDq4hqtCUt8uNGvqa\nqzPUibwGuaKR+F8Y7W+aILbZmevo4lS6PBE3Bq0dMJKOz820G/nHPIoRpAaXwqTC\n3lbN4TSXPuZEBoxUCbLevBsnEcTz9fFAgslPBlsjeouDItWyWwX90a9PQH4wa7PT\nEgAnxck9wCdA1OZvEKW8dhxvkNtEm1mFW/nxoqeWPKhWcffBYk5BTT000Jxc\n=71Oa\n-----END PGP SIGNATURE-----", "payload": "tree 32094fdb49a0bb37a86af2e10f3189c9070cf513\nparent 13b7aa4d7faafbed78d195c27f6868f6bd90c2f8\nauthor Andy Russell <arussell123@gmail.com> 1673808195 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1679332775 -0400\n\nmigrate compiler, bootstrap, and compiletest to windows-rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "html_url": "https://github.com/rust-lang/rust/commit/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13b7aa4d7faafbed78d195c27f6868f6bd90c2f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/13b7aa4d7faafbed78d195c27f6868f6bd90c2f8", "html_url": "https://github.com/rust-lang/rust/commit/13b7aa4d7faafbed78d195c27f6868f6bd90c2f8"}], "stats": {"total": 659, "additions": 379, "deletions": 280}, "files": [{"sha": "23a9f2bd2b7986bc2c8ac08bee072107701da447", "filename": "Cargo.lock", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -898,7 +898,7 @@ dependencies = [\n  \"tracing-subscriber\",\n  \"unified-diff\",\n  \"walkdir\",\n- \"winapi\",\n+ \"windows 0.46.0\",\n ]\n \n [[package]]\n@@ -2273,7 +2273,7 @@ dependencies = [\n  \"dirs\",\n  \"gix-path\",\n  \"libc\",\n- \"windows\",\n+ \"windows 0.43.0\",\n ]\n \n [[package]]\n@@ -4529,7 +4529,7 @@ dependencies = [\n  \"tempfile\",\n  \"thin-vec\",\n  \"tracing\",\n- \"winapi\",\n+ \"windows 0.46.0\",\n ]\n \n [[package]]\n@@ -4588,7 +4588,7 @@ dependencies = [\n  \"rustc_ty_utils\",\n  \"serde_json\",\n  \"tracing\",\n- \"winapi\",\n+ \"windows 0.46.0\",\n ]\n \n [[package]]\n@@ -4636,7 +4636,7 @@ dependencies = [\n  \"termize\",\n  \"tracing\",\n  \"unicode-width\",\n- \"winapi\",\n+ \"windows 0.46.0\",\n ]\n \n [[package]]\n@@ -5277,7 +5277,7 @@ dependencies = [\n  \"smallvec\",\n  \"termize\",\n  \"tracing\",\n- \"winapi\",\n+ \"windows 0.46.0\",\n ]\n \n [[package]]\n@@ -6908,6 +6908,15 @@ dependencies = [\n  \"windows_x86_64_msvc\",\n ]\n \n+[[package]]\n+name = \"windows\"\n+version = \"0.46.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cdacb41e6a96a052c6cb63a144f24900236121c6f63f4f8219fef5977ecb0c25\"\n+dependencies = [\n+ \"windows-targets\",\n+]\n+\n [[package]]\n name = \"windows-sys\"\n version = \"0.42.0\"\n@@ -6934,9 +6943,9 @@ dependencies = [\n \n [[package]]\n name = \"windows-targets\"\n-version = \"0.42.1\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8e2522491fbfcd58cc84d47aeb2958948c4b8982e9a2d8a2a35bbaed431390e7\"\n+checksum = \"8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071\"\n dependencies = [\n  \"windows_aarch64_gnullvm\",\n  \"windows_aarch64_msvc\",\n@@ -6949,45 +6958,45 @@ dependencies = [\n \n [[package]]\n name = \"windows_aarch64_gnullvm\"\n-version = \"0.42.1\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8c9864e83243fdec7fc9c5444389dcbbfd258f745e7853198f365e3c4968a608\"\n+checksum = \"597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8\"\n \n [[package]]\n name = \"windows_aarch64_msvc\"\n-version = \"0.42.1\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4c8b1b673ffc16c47a9ff48570a9d85e25d265735c503681332589af6253c6c7\"\n+checksum = \"e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43\"\n \n [[package]]\n name = \"windows_i686_gnu\"\n-version = \"0.42.1\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"de3887528ad530ba7bdbb1faa8275ec7a1155a45ffa57c37993960277145d640\"\n+checksum = \"c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f\"\n \n [[package]]\n name = \"windows_i686_msvc\"\n-version = \"0.42.1\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf4d1122317eddd6ff351aa852118a2418ad4214e6613a50e0191f7004372605\"\n+checksum = \"44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060\"\n \n [[package]]\n name = \"windows_x86_64_gnu\"\n-version = \"0.42.1\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c1040f221285e17ebccbc2591ffdc2d44ee1f9186324dd3e84e99ac68d699c45\"\n+checksum = \"8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36\"\n \n [[package]]\n name = \"windows_x86_64_gnullvm\"\n-version = \"0.42.1\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"628bfdf232daa22b0d64fdb62b09fcc36bb01f05a3939e20ab73aaf9470d0463\"\n+checksum = \"26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3\"\n \n [[package]]\n name = \"windows_x86_64_msvc\"\n-version = \"0.42.1\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"447660ad36a13288b1db4d4248e857b510e8c3a225c822ba4fb748c0aafecffd\"\n+checksum = \"9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0\"\n \n [[package]]\n name = \"writeable\""}, {"sha": "24cf9812a25a1ba226a6e279414b50fc52fb8f70", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -36,8 +36,15 @@ elsa = \"1.8\"\n [dependencies.parking_lot]\n version = \"0.11\"\n \n-[target.'cfg(windows)'.dependencies]\n-winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\", \"winerror\"] }\n+[target.'cfg(windows)'.dependencies.windows]\n+version = \"0.46.0\"\n+features = [\n+    \"Win32_Foundation\",\n+    \"Win32_Storage_FileSystem\",\n+    \"Win32_System_IO\",\n+    \"Win32_System_ProcessStatus\",\n+    \"Win32_System_Threading\",\n+]\n \n [target.'cfg(not(target_arch = \"wasm32\"))'.dependencies]\n memmap2 = \"0.2.1\""}, {"sha": "efdb44248d1d7ef98657be0b6c3cfd7448c5281b", "filename": "compiler/rustc_data_structures/src/flock.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_data_structures%2Fsrc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_data_structures%2Fsrc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fflock.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -4,9 +4,6 @@\n //! green/native threading. This is just a bare-bones enough solution for\n //! librustdoc, it is not production quality at all.\n \n-#![allow(non_camel_case_types)]\n-#![allow(nonstandard_style)]\n-\n cfg_if! {\n     if #[cfg(target_os = \"linux\")] {\n         mod linux;\n@@ -16,7 +13,7 @@ cfg_if! {\n         use unix as imp;\n     } else if #[cfg(windows)] {\n         mod windows;\n-        use windows as imp;\n+        use self::windows as imp;\n     } else {\n         mod unsupported;\n         use unsupported as imp;"}, {"sha": "da128f464a607b59447316d8c404fe2bdd7b9548", "filename": "compiler/rustc_data_structures/src/flock/windows.rs", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_data_structures%2Fsrc%2Fflock%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_data_structures%2Fsrc%2Fflock%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fflock%2Fwindows.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -1,13 +1,16 @@\n use std::fs::{File, OpenOptions};\n use std::io;\n-use std::mem;\n use std::os::windows::prelude::*;\n use std::path::Path;\n \n-use winapi::shared::winerror::ERROR_INVALID_FUNCTION;\n-use winapi::um::fileapi::LockFileEx;\n-use winapi::um::minwinbase::{LOCKFILE_EXCLUSIVE_LOCK, LOCKFILE_FAIL_IMMEDIATELY, OVERLAPPED};\n-use winapi::um::winnt::{FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE};\n+use windows::{\n+    Win32::Foundation::{ERROR_INVALID_FUNCTION, HANDLE},\n+    Win32::Storage::FileSystem::{\n+        LockFileEx, FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE, LOCKFILE_EXCLUSIVE_LOCK,\n+        LOCKFILE_FAIL_IMMEDIATELY, LOCK_FILE_FLAGS,\n+    },\n+    Win32::System::IO::OVERLAPPED,\n+};\n \n #[derive(Debug)]\n pub struct Lock {\n@@ -25,7 +28,7 @@ impl Lock {\n         let share_mode = FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE;\n \n         let mut open_options = OpenOptions::new();\n-        open_options.read(true).share_mode(share_mode);\n+        open_options.read(true).share_mode(share_mode.0);\n \n         if create {\n             open_options.create(true).write(true);\n@@ -43,33 +46,42 @@ impl Lock {\n             }\n         };\n \n-        let ret = unsafe {\n-            let mut overlapped: OVERLAPPED = mem::zeroed();\n+        let mut flags = LOCK_FILE_FLAGS::default();\n+        if !wait {\n+            flags |= LOCKFILE_FAIL_IMMEDIATELY;\n+        }\n \n-            let mut dwFlags = 0;\n-            if !wait {\n-                dwFlags |= LOCKFILE_FAIL_IMMEDIATELY;\n-            }\n+        if exclusive {\n+            flags |= LOCKFILE_EXCLUSIVE_LOCK;\n+        }\n \n-            if exclusive {\n-                dwFlags |= LOCKFILE_EXCLUSIVE_LOCK;\n-            }\n+        let mut overlapped = OVERLAPPED::default();\n \n-            debug!(\"attempting to acquire lock on lock file `{}`\", p.display());\n-            LockFileEx(file.as_raw_handle(), dwFlags, 0, 0xFFFF_FFFF, 0xFFFF_FFFF, &mut overlapped)\n-        };\n-        if ret == 0 {\n-            let err = io::Error::last_os_error();\n-            debug!(\"failed acquiring file lock: {}\", err);\n-            Err(err)\n-        } else {\n-            debug!(\"successfully acquired lock\");\n-            Ok(Lock { _file: file })\n+        debug!(\"attempting to acquire lock on lock file `{}`\", p.display());\n+\n+        unsafe {\n+            LockFileEx(\n+                HANDLE(file.as_raw_handle() as isize),\n+                flags,\n+                0,\n+                u32::MAX,\n+                u32::MAX,\n+                &mut overlapped,\n+            )\n         }\n+        .ok()\n+        .map_err(|e| {\n+            let err = io::Error::from_raw_os_error(e.code().0);\n+            debug!(\"failed acquiring file lock: {}\", err);\n+            err\n+        })?;\n+\n+        debug!(\"successfully acquired lock\");\n+        Ok(Lock { _file: file })\n     }\n \n     pub fn error_unsupported(err: &io::Error) -> bool {\n-        err.raw_os_error() == Some(ERROR_INVALID_FUNCTION as i32)\n+        err.raw_os_error() == Some(ERROR_INVALID_FUNCTION.0 as i32)\n     }\n }\n "}, {"sha": "3d9c7f6eae276405b60ea82409165ce1bbaccda8", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -796,21 +796,26 @@ fn get_thread_id() -> u32 {\n cfg_if! {\n     if #[cfg(windows)] {\n         pub fn get_resident_set_size() -> Option<usize> {\n-            use std::mem::{self, MaybeUninit};\n-            use winapi::shared::minwindef::DWORD;\n-            use winapi::um::processthreadsapi::GetCurrentProcess;\n-            use winapi::um::psapi::{GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS};\n-\n-            let mut pmc = MaybeUninit::<PROCESS_MEMORY_COUNTERS>::uninit();\n-            match unsafe {\n-                GetProcessMemoryInfo(GetCurrentProcess(), pmc.as_mut_ptr(), mem::size_of_val(&pmc) as DWORD)\n-            } {\n-                0 => None,\n-                _ => {\n-                    let pmc = unsafe { pmc.assume_init() };\n-                    Some(pmc.WorkingSetSize as usize)\n-                }\n+            use std::mem;\n+\n+            use windows::{\n+                Win32::System::ProcessStatus::{K32GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS},\n+                Win32::System::Threading::GetCurrentProcess,\n+            };\n+\n+            let mut pmc = PROCESS_MEMORY_COUNTERS::default();\n+            let pmc_size = mem::size_of_val(&pmc);\n+            unsafe {\n+                K32GetProcessMemoryInfo(\n+                    GetCurrentProcess(),\n+                    &mut pmc,\n+                    pmc_size as u32,\n+                )\n             }\n+            .ok()\n+            .ok()?;\n+\n+            Some(pmc.WorkingSetSize)\n         }\n     } else if #[cfg(target_os = \"macos\")] {\n         pub fn get_resident_set_size() -> Option<usize> {"}, {"sha": "73a1f79a020f1da162ee5f2b6a6a5faeb9318906", "filename": "compiler/rustc_driver_impl/Cargo.toml", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_driver_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_driver_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2FCargo.toml?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -54,8 +54,11 @@ rustc_hir_analysis = { path = \"../rustc_hir_analysis\" }\n [target.'cfg(unix)'.dependencies]\n libc = \"0.2\"\n \n-[target.'cfg(windows)'.dependencies]\n-winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"] }\n+[target.'cfg(windows)'.dependencies.windows]\n+version = \"0.46.0\"\n+features = [\n+    \"Win32_System_Diagnostics_Debug\",\n+]\n \n [features]\n llvm = ['rustc_interface/llvm']"}, {"sha": "8634c64417654e115190895ce5f0a806d3e3b446", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -1246,11 +1246,9 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     interface::try_print_query_stack(&handler, num_frames);\n \n     #[cfg(windows)]\n-    unsafe {\n-        if env::var(\"RUSTC_BREAK_ON_ICE\").is_ok() {\n-            // Trigger a debugger if we crashed during bootstrap\n-            winapi::um::debugapi::DebugBreak();\n-        }\n+    if env::var(\"RUSTC_BREAK_ON_ICE\").is_ok() {\n+        // Trigger a debugger if we crashed during bootstrap\n+        unsafe { windows::Win32::System::Diagnostics::Debug::DebugBreak() };\n     }\n }\n "}, {"sha": "e1ead08ea66bdf9dd4ad4919010627cb855e49d5", "filename": "compiler/rustc_errors/Cargo.toml", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2FCargo.toml?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -25,8 +25,14 @@ termize = \"0.1.1\"\n serde = { version = \"1.0.125\", features = [ \"derive\" ] }\n serde_json = \"1.0.59\"\n \n-[target.'cfg(windows)'.dependencies]\n-winapi = { version = \"0.3\", features = [ \"handleapi\", \"synchapi\", \"winbase\" ] }\n+[target.'cfg(windows)'.dependencies.windows]\n+version = \"0.46.0\"\n+features = [\n+    \"Win32_Foundation\",\n+    \"Win32_Security\",\n+    \"Win32_System_Threading\",\n+    \"Win32_System_WindowsProgramming\",\n+]\n \n [features]\n rustc_use_parallel_compiler = ['rustc_error_messages/rustc_use_parallel_compiler']"}, {"sha": "7db262abfde267ebb46dc85d49a19a3140446b9a", "filename": "compiler/rustc_errors/src/lock.rs", "status": "modified", "additions": 36, "deletions": 45, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_errors%2Fsrc%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_errors%2Fsrc%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flock.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -16,10 +16,12 @@ pub fn acquire_global_lock(name: &str) -> Box<dyn Any> {\n     use std::ffi::CString;\n     use std::io;\n \n-    use winapi::shared::ntdef::HANDLE;\n-    use winapi::um::handleapi::CloseHandle;\n-    use winapi::um::synchapi::{CreateMutexA, ReleaseMutex, WaitForSingleObject};\n-    use winapi::um::winbase::{INFINITE, WAIT_ABANDONED, WAIT_OBJECT_0};\n+    use windows::{\n+        core::PCSTR,\n+        Win32::Foundation::{CloseHandle, HANDLE, WAIT_ABANDONED, WAIT_OBJECT_0},\n+        Win32::System::Threading::{CreateMutexA, ReleaseMutex, WaitForSingleObject},\n+        Win32::System::WindowsProgramming::INFINITE,\n+    };\n \n     struct Handle(HANDLE);\n \n@@ -42,49 +44,38 @@ pub fn acquire_global_lock(name: &str) -> Box<dyn Any> {\n     }\n \n     let cname = CString::new(name).unwrap();\n-    unsafe {\n-        // Create a named mutex, with no security attributes and also not\n-        // acquired when we create it.\n-        //\n-        // This will silently create one if it doesn't already exist, or it'll\n-        // open up a handle to one if it already exists.\n-        let mutex = CreateMutexA(std::ptr::null_mut(), 0, cname.as_ptr());\n-        if mutex.is_null() {\n-            panic!(\n-                \"failed to create global mutex named `{}`: {}\",\n-                name,\n-                io::Error::last_os_error()\n-            );\n-        }\n-        let mutex = Handle(mutex);\n+    // Create a named mutex, with no security attributes and also not\n+    // acquired when we create it.\n+    //\n+    // This will silently create one if it doesn't already exist, or it'll\n+    // open up a handle to one if it already exists.\n+    let mutex = unsafe { CreateMutexA(None, false, PCSTR::from_raw(cname.as_ptr().cast())) }\n+        .unwrap_or_else(|_| panic!(\"failed to create global mutex named `{}`\", name));\n+    let mutex = Handle(mutex);\n \n-        // Acquire the lock through `WaitForSingleObject`.\n-        //\n-        // A return value of `WAIT_OBJECT_0` means we successfully acquired it.\n-        //\n-        // A return value of `WAIT_ABANDONED` means that the previous holder of\n-        // the thread exited without calling `ReleaseMutex`. This can happen,\n-        // for example, when the compiler crashes or is interrupted via ctrl-c\n-        // or the like. In this case, however, we are still transferred\n-        // ownership of the lock so we continue.\n-        //\n-        // If an error happens.. well... that's surprising!\n-        match WaitForSingleObject(mutex.0, INFINITE) {\n-            WAIT_OBJECT_0 | WAIT_ABANDONED => {}\n-            code => {\n-                panic!(\n-                    \"WaitForSingleObject failed on global mutex named \\\n-                        `{}`: {} (ret={:x})\",\n-                    name,\n-                    io::Error::last_os_error(),\n-                    code\n-                );\n-            }\n-        }\n-\n-        // Return a guard which will call `ReleaseMutex` when dropped.\n-        Box::new(Guard(mutex))\n+    // Acquire the lock through `WaitForSingleObject`.\n+    //\n+    // A return value of `WAIT_OBJECT_0` means we successfully acquired it.\n+    //\n+    // A return value of `WAIT_ABANDONED` means that the previous holder of\n+    // the thread exited without calling `ReleaseMutex`. This can happen,\n+    // for example, when the compiler crashes or is interrupted via ctrl-c\n+    // or the like. In this case, however, we are still transferred\n+    // ownership of the lock so we continue.\n+    //\n+    // If an error happens.. well... that's surprising!\n+    match unsafe { WaitForSingleObject(mutex.0, INFINITE) } {\n+        WAIT_OBJECT_0 | WAIT_ABANDONED => (),\n+        err => panic!(\n+            \"WaitForSingleObject failed on global mutex named `{}`: {} (ret={:x})\",\n+            name,\n+            io::Error::last_os_error(),\n+            err.0\n+        ),\n     }\n+\n+    // Return a guard which will call `ReleaseMutex` when dropped.\n+    Box::new(Guard(mutex))\n }\n \n #[cfg(not(windows))]"}, {"sha": "9e337dde99531bafa754854f5734a955a11f61f8", "filename": "compiler/rustc_session/Cargo.toml", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2FCargo.toml?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -24,5 +24,9 @@ termize = \"0.1.1\"\n [target.'cfg(unix)'.dependencies]\n libc = \"0.2\"\n \n-[target.'cfg(windows)'.dependencies]\n-winapi = { version = \"0.3\", features = [\"libloaderapi\"] }\n+[target.'cfg(windows)'.dependencies.windows]\n+version = \"0.46.0\"\n+features = [\n+    \"Win32_Foundation\",\n+    \"Win32_System_LibraryLoader\",\n+]"}, {"sha": "e734599cbfc18590651cc56e0403ca12136a4bbd", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -87,35 +87,38 @@ fn current_dll_path() -> Result<PathBuf, String> {\n     use std::ffi::OsString;\n     use std::io;\n     use std::os::windows::prelude::*;\n-    use std::ptr;\n \n-    use winapi::um::libloaderapi::{\n-        GetModuleFileNameW, GetModuleHandleExW, GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,\n+    use windows::{\n+        core::PCWSTR,\n+        Win32::Foundation::HINSTANCE,\n+        Win32::System::LibraryLoader::{\n+            GetModuleFileNameW, GetModuleHandleExW, GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,\n+        },\n     };\n \n+    let mut module = HINSTANCE::default();\n     unsafe {\n-        let mut module = ptr::null_mut();\n-        let r = GetModuleHandleExW(\n+        GetModuleHandleExW(\n             GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,\n-            current_dll_path as usize as *mut _,\n+            PCWSTR(current_dll_path as *mut u16),\n             &mut module,\n-        );\n-        if r == 0 {\n-            return Err(format!(\"GetModuleHandleExW failed: {}\", io::Error::last_os_error()));\n-        }\n-        let mut space = Vec::with_capacity(1024);\n-        let r = GetModuleFileNameW(module, space.as_mut_ptr(), space.capacity() as u32);\n-        if r == 0 {\n-            return Err(format!(\"GetModuleFileNameW failed: {}\", io::Error::last_os_error()));\n-        }\n-        let r = r as usize;\n-        if r >= space.capacity() {\n-            return Err(format!(\"our buffer was too small? {}\", io::Error::last_os_error()));\n-        }\n-        space.set_len(r);\n-        let os = OsString::from_wide(&space);\n-        Ok(PathBuf::from(os))\n+        )\n     }\n+    .ok()\n+    .map_err(|e| e.to_string())?;\n+\n+    let mut filename = vec![0; 1024];\n+    let n = unsafe { GetModuleFileNameW(module, &mut filename) } as usize;\n+    if n == 0 {\n+        return Err(format!(\"GetModuleFileNameW failed: {}\", io::Error::last_os_error()));\n+    }\n+    if n >= filename.capacity() {\n+        return Err(format!(\"our buffer was too small? {}\", io::Error::last_os_error()));\n+    }\n+\n+    filename.truncate(n);\n+\n+    Ok(OsString::from_wide(&filename).into())\n }\n \n pub fn sysroot_candidates() -> SmallVec<[PathBuf; 2]> {"}, {"sha": "833e155ed87926743d0a6c66ba6a61bfa3f432e5", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -57,7 +57,7 @@ dependencies = [\n  \"tar\",\n  \"toml\",\n  \"walkdir\",\n- \"winapi\",\n+ \"windows\",\n  \"xz2\",\n ]\n \n@@ -720,6 +720,15 @@ version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n \n+[[package]]\n+name = \"windows\"\n+version = \"0.46.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cdacb41e6a96a052c6cb63a144f24900236121c6f63f4f8219fef5977ecb0c25\"\n+dependencies = [\n+ \"windows-targets\",\n+]\n+\n [[package]]\n name = \"windows-sys\"\n version = \"0.42.0\"\n@@ -735,47 +744,62 @@ dependencies = [\n  \"windows_x86_64_msvc\",\n ]\n \n+[[package]]\n+name = \"windows-targets\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071\"\n+dependencies = [\n+ \"windows_aarch64_gnullvm\",\n+ \"windows_aarch64_msvc\",\n+ \"windows_i686_gnu\",\n+ \"windows_i686_msvc\",\n+ \"windows_x86_64_gnu\",\n+ \"windows_x86_64_gnullvm\",\n+ \"windows_x86_64_msvc\",\n+]\n+\n [[package]]\n name = \"windows_aarch64_gnullvm\"\n-version = \"0.42.0\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"41d2aa71f6f0cbe00ae5167d90ef3cfe66527d6f613ca78ac8024c3ccab9a19e\"\n+checksum = \"597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8\"\n \n [[package]]\n name = \"windows_aarch64_msvc\"\n-version = \"0.42.0\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dd0f252f5a35cac83d6311b2e795981f5ee6e67eb1f9a7f64eb4500fbc4dcdb4\"\n+checksum = \"e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43\"\n \n [[package]]\n name = \"windows_i686_gnu\"\n-version = \"0.42.0\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fbeae19f6716841636c28d695375df17562ca208b2b7d0dc47635a50ae6c5de7\"\n+checksum = \"c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f\"\n \n [[package]]\n name = \"windows_i686_msvc\"\n-version = \"0.42.0\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"84c12f65daa39dd2babe6e442988fc329d6243fdce47d7d2d155b8d874862246\"\n+checksum = \"44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060\"\n \n [[package]]\n name = \"windows_x86_64_gnu\"\n-version = \"0.42.0\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf7b1b21b5362cbc318f686150e5bcea75ecedc74dd157d874d754a2ca44b0ed\"\n+checksum = \"8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36\"\n \n [[package]]\n name = \"windows_x86_64_gnullvm\"\n-version = \"0.42.0\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"09d525d2ba30eeb3297665bd434a54297e4170c7f1a44cad4ef58095b4cd2028\"\n+checksum = \"26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3\"\n \n [[package]]\n name = \"windows_x86_64_msvc\"\n-version = \"0.42.0\"\n+version = \"0.42.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f40009d85759725a34da6d89a94e63d7bdc50a862acf0dbc7c8e488f1edcb6f5\"\n+checksum = \"9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0\"\n \n [[package]]\n name = \"xattr\""}, {"sha": "13ebd8af15b2e2e55750e030a9ab37d79f163a5f", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -59,18 +59,20 @@ sysinfo = { version = \"0.26.0\", optional = true }\n [target.'cfg(not(target_os = \"solaris\"))'.dependencies]\n fd-lock = \"3.0.8\"\n \n-[target.'cfg(windows)'.dependencies.winapi]\n-version = \"0.3\"\n+[target.'cfg(windows)'.dependencies.windows]\n+version = \"0.46.0\"\n features = [\n-    \"fileapi\",\n-    \"ioapiset\",\n-    \"jobapi2\",\n-    \"handleapi\",\n-    \"winioctl\",\n-    \"psapi\",\n-    \"impl-default\",\n-    \"timezoneapi\",\n-    \"winbase\",\n+    \"Win32_Foundation\",\n+    \"Win32_Security\",\n+    \"Win32_Storage_FileSystem\",\n+    \"Win32_System_Diagnostics_Debug\",\n+    \"Win32_System_IO\",\n+    \"Win32_System_Ioctl\",\n+    \"Win32_System_JobObjects\",\n+    \"Win32_System_ProcessStatus\",\n+    \"Win32_System_SystemServices\",\n+    \"Win32_System_Threading\",\n+    \"Win32_System_Time\",\n ]\n \n [dev-dependencies]"}, {"sha": "040fec3615b6e260569544b0a75eaf650a8ad9dc", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -281,41 +281,49 @@ fn format_rusage_data(_child: Child) -> Option<String> {\n #[cfg(windows)]\n fn format_rusage_data(child: Child) -> Option<String> {\n     use std::os::windows::io::AsRawHandle;\n-    use winapi::um::{processthreadsapi, psapi, timezoneapi};\n-    let handle = child.as_raw_handle();\n-    macro_rules! try_bool {\n-        ($e:expr) => {\n-            if $e != 1 {\n-                return None;\n-            }\n-        };\n-    }\n+\n+    use windows::{\n+        Win32::Foundation::HANDLE,\n+        Win32::System::ProcessStatus::{\n+            K32GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS, PROCESS_MEMORY_COUNTERS_EX,\n+        },\n+        Win32::System::Threading::GetProcessTimes,\n+        Win32::System::Time::FileTimeToSystemTime,\n+    };\n+\n+    let handle = HANDLE(child.as_raw_handle() as isize);\n \n     let mut user_filetime = Default::default();\n     let mut user_time = Default::default();\n     let mut kernel_filetime = Default::default();\n     let mut kernel_time = Default::default();\n-    let mut memory_counters = psapi::PROCESS_MEMORY_COUNTERS::default();\n+    let mut memory_counters = PROCESS_MEMORY_COUNTERS::default();\n \n     unsafe {\n-        try_bool!(processthreadsapi::GetProcessTimes(\n+        GetProcessTimes(\n             handle,\n             &mut Default::default(),\n             &mut Default::default(),\n             &mut kernel_filetime,\n             &mut user_filetime,\n-        ));\n-        try_bool!(timezoneapi::FileTimeToSystemTime(&user_filetime, &mut user_time));\n-        try_bool!(timezoneapi::FileTimeToSystemTime(&kernel_filetime, &mut kernel_time));\n-\n-        // Unlike on Linux with RUSAGE_CHILDREN, this will only return memory information for the process\n-        // with the given handle and none of that process's children.\n-        try_bool!(psapi::GetProcessMemoryInfo(\n-            handle as _,\n-            &mut memory_counters as *mut _ as _,\n-            std::mem::size_of::<psapi::PROCESS_MEMORY_COUNTERS_EX>() as u32,\n-        ));\n+        )\n+    }\n+    .ok()\n+    .ok()?;\n+    unsafe { FileTimeToSystemTime(&user_filetime, &mut user_time) }.ok().ok()?;\n+    unsafe { FileTimeToSystemTime(&kernel_filetime, &mut kernel_time) }.ok().ok()?;\n+\n+    // Unlike on Linux with RUSAGE_CHILDREN, this will only return memory information for the process\n+    // with the given handle and none of that process's children.\n+    unsafe {\n+        K32GetProcessMemoryInfo(\n+            handle,\n+            &mut memory_counters,\n+            std::mem::size_of::<PROCESS_MEMORY_COUNTERS_EX>() as u32,\n+        )\n     }\n+    .ok()\n+    .ok()?;\n \n     // Guide on interpreting these numbers:\n     // https://docs.microsoft.com/en-us/windows/win32/psapi/process-memory-usage-information"}, {"sha": "cbf0f1c37a2cf66f27732911aaa865ff955d2a30", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -1303,6 +1303,14 @@ impl<'a> Builder<'a> {\n             }\n         };\n \n+        // By default, windows-rs depends on a native library that doesn't get copied into the\n+        // sysroot. Passing this cfg enables raw-dylib support instead, which makes the native\n+        // library unnecessary. This can be removed when windows-rs enables raw-dylib\n+        // unconditionally.\n+        if let Mode::Rustc | Mode::ToolRustc = mode {\n+            rustflags.arg(\"--cfg=windows_raw_dylib\");\n+        }\n+\n         if use_new_symbol_mangling {\n             rustflags.arg(\"-Csymbol-mangling-version=v0\");\n         } else {"}, {"sha": "4fb00f65dc19d9ae2e49b685edff37b90230abe4", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 44, "deletions": 41, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -27,52 +27,54 @@\n //! Note that this module has a #[cfg(windows)] above it as none of this logic\n //! is required on Unix.\n \n-#![allow(nonstandard_style, dead_code)]\n-\n use crate::Build;\n use std::env;\n+use std::ffi::c_void;\n use std::io;\n use std::mem;\n-use std::ptr;\n \n-use winapi::shared::minwindef::{DWORD, FALSE, LPVOID};\n-use winapi::um::errhandlingapi::SetErrorMode;\n-use winapi::um::handleapi::{CloseHandle, DuplicateHandle};\n-use winapi::um::jobapi2::{AssignProcessToJobObject, CreateJobObjectW, SetInformationJobObject};\n-use winapi::um::processthreadsapi::{GetCurrentProcess, OpenProcess};\n-use winapi::um::winbase::{BELOW_NORMAL_PRIORITY_CLASS, SEM_NOGPFAULTERRORBOX};\n-use winapi::um::winnt::{\n-    JobObjectExtendedLimitInformation, DUPLICATE_SAME_ACCESS, JOBOBJECT_EXTENDED_LIMIT_INFORMATION,\n-    JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE, JOB_OBJECT_LIMIT_PRIORITY_CLASS, PROCESS_DUP_HANDLE,\n+use windows::{\n+    core::PCWSTR,\n+    Win32::Foundation::{CloseHandle, DuplicateHandle, DUPLICATE_SAME_ACCESS, HANDLE},\n+    Win32::System::Diagnostics::Debug::{SetErrorMode, SEM_NOGPFAULTERRORBOX, THREAD_ERROR_MODE},\n+    Win32::System::JobObjects::{\n+        AssignProcessToJobObject, CreateJobObjectW, JobObjectExtendedLimitInformation,\n+        SetInformationJobObject, JOBOBJECT_EXTENDED_LIMIT_INFORMATION,\n+        JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE, JOB_OBJECT_LIMIT_PRIORITY_CLASS,\n+    },\n+    Win32::System::Threading::{\n+        GetCurrentProcess, OpenProcess, BELOW_NORMAL_PRIORITY_CLASS, PROCESS_DUP_HANDLE,\n+    },\n };\n \n pub unsafe fn setup(build: &mut Build) {\n     // Enable the Windows Error Reporting dialog which msys disables,\n     // so we can JIT debug rustc\n-    let mode = SetErrorMode(0);\n+    let mode = SetErrorMode(THREAD_ERROR_MODE::default());\n+    let mode = THREAD_ERROR_MODE(mode);\n     SetErrorMode(mode & !SEM_NOGPFAULTERRORBOX);\n \n     // Create a new job object for us to use\n-    let job = CreateJobObjectW(ptr::null_mut(), ptr::null());\n-    assert!(!job.is_null(), \"{}\", io::Error::last_os_error());\n+    let job = CreateJobObjectW(None, PCWSTR::null()).unwrap();\n \n     // Indicate that when all handles to the job object are gone that all\n     // process in the object should be killed. Note that this includes our\n     // entire process tree by default because we've added ourselves and our\n     // children will reside in the job by default.\n-    let mut info = mem::zeroed::<JOBOBJECT_EXTENDED_LIMIT_INFORMATION>();\n+    let mut info = JOBOBJECT_EXTENDED_LIMIT_INFORMATION::default();\n     info.BasicLimitInformation.LimitFlags = JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE;\n     if build.config.low_priority {\n         info.BasicLimitInformation.LimitFlags |= JOB_OBJECT_LIMIT_PRIORITY_CLASS;\n-        info.BasicLimitInformation.PriorityClass = BELOW_NORMAL_PRIORITY_CLASS;\n+        info.BasicLimitInformation.PriorityClass = BELOW_NORMAL_PRIORITY_CLASS.0;\n     }\n     let r = SetInformationJobObject(\n         job,\n         JobObjectExtendedLimitInformation,\n-        &mut info as *mut _ as LPVOID,\n-        mem::size_of_val(&info) as DWORD,\n-    );\n-    assert!(r != 0, \"{}\", io::Error::last_os_error());\n+        &info as *const _ as *const c_void,\n+        mem::size_of_val(&info) as u32,\n+    )\n+    .ok();\n+    assert!(r.is_ok(), \"{}\", io::Error::last_os_error());\n \n     // Assign our process to this job object. Note that if this fails, one very\n     // likely reason is that we are ourselves already in a job object! This can\n@@ -83,8 +85,8 @@ pub unsafe fn setup(build: &mut Build) {\n     // Also note that nested jobs (why this might fail) are supported in recent\n     // versions of Windows, but the version of Windows that our bots are running\n     // at least don't support nested job objects.\n-    let r = AssignProcessToJobObject(job, GetCurrentProcess());\n-    if r == 0 {\n+    let r = AssignProcessToJobObject(job, GetCurrentProcess()).ok();\n+    if r.is_err() {\n         CloseHandle(job);\n         return;\n     }\n@@ -102,39 +104,40 @@ pub unsafe fn setup(build: &mut Build) {\n         Err(..) => return,\n     };\n \n-    let parent = OpenProcess(PROCESS_DUP_HANDLE, FALSE, pid.parse().unwrap());\n-\n-    // If we get a null parent pointer here, it is possible that either\n-    // we have got an invalid pid or the parent process has been closed.\n-    // Since the first case rarely happens\n-    // (only when wrongly setting the environmental variable),\n-    // so it might be better to improve the experience of the second case\n-    // when users have interrupted the parent process and we don't finish\n-    // duplicating the handle yet.\n-    // We just need close the job object if that occurs.\n-    if parent.is_null() {\n-        CloseHandle(job);\n-        return;\n-    }\n+    let parent = match OpenProcess(PROCESS_DUP_HANDLE, false, pid.parse().unwrap()).ok() {\n+        Some(parent) => parent,\n+        _ => {\n+            // If we get a null parent pointer here, it is possible that either\n+            // we have an invalid pid or the parent process has been closed.\n+            // Since the first case rarely happens\n+            // (only when wrongly setting the environmental variable),\n+            // it might be better to improve the experience of the second case\n+            // when users have interrupted the parent process and we haven't finish\n+            // duplicating the handle yet. We just need close the job object if that occurs.\n+            CloseHandle(job);\n+            return;\n+        }\n+    };\n \n-    let mut parent_handle = ptr::null_mut();\n+    let mut parent_handle = HANDLE::default();\n     let r = DuplicateHandle(\n         GetCurrentProcess(),\n         job,\n         parent,\n         &mut parent_handle,\n         0,\n-        FALSE,\n+        false,\n         DUPLICATE_SAME_ACCESS,\n-    );\n+    )\n+    .ok();\n \n     // If this failed, well at least we tried! An example of DuplicateHandle\n     // failing in the past has been when the wrong python2 package spawned this\n     // build system (e.g., the `python2` package in MSYS instead of\n     // `mingw-w64-x86_64-python2`. Not sure why it failed, but the \"failure\n     // mode\" here is that we only clean everything up when the build system\n     // dies, not when the python parent does, so not too bad.\n-    if r != 0 {\n+    if r.is_err() {\n         CloseHandle(job);\n     }\n }"}, {"sha": "d23c262aad2f4584465adb89f2fb1fdb8e7f00f2", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -144,6 +144,9 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     // FIXME: Used by filetime, but we should not be triggering on external dependencies.\n     (Some(Mode::Rustc), \"emulate_second_only_system\", None),\n     (Some(Mode::ToolRustc), \"emulate_second_only_system\", None),\n+    // Needed to avoid the need to copy windows.lib into the sysroot.\n+    (Some(Mode::Rustc), \"windows_raw_dylib\", None),\n+    (Some(Mode::ToolRustc), \"windows_raw_dylib\", None),\n ];\n \n /// A structure representing a Rust compiler."}, {"sha": "9a6aaffe22b2412cedd3ec3293146d7c0f4ac942", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -155,29 +155,30 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n     fn symlink_dir_inner(target: &Path, junction: &Path) -> io::Result<()> {\n         use std::ffi::OsStr;\n         use std::os::windows::ffi::OsStrExt;\n-        use std::ptr;\n-\n-        use winapi::shared::minwindef::{DWORD, WORD};\n-        use winapi::um::fileapi::{CreateFileW, OPEN_EXISTING};\n-        use winapi::um::handleapi::CloseHandle;\n-        use winapi::um::ioapiset::DeviceIoControl;\n-        use winapi::um::winbase::{FILE_FLAG_BACKUP_SEMANTICS, FILE_FLAG_OPEN_REPARSE_POINT};\n-        use winapi::um::winioctl::FSCTL_SET_REPARSE_POINT;\n-        use winapi::um::winnt::{\n-            FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE, GENERIC_WRITE,\n-            IO_REPARSE_TAG_MOUNT_POINT, MAXIMUM_REPARSE_DATA_BUFFER_SIZE, WCHAR,\n+\n+        use windows::{\n+            core::PCWSTR,\n+            Win32::Foundation::{CloseHandle, HANDLE},\n+            Win32::Storage::FileSystem::{\n+                CreateFileW, FILE_ACCESS_FLAGS, FILE_FLAG_BACKUP_SEMANTICS,\n+                FILE_FLAG_OPEN_REPARSE_POINT, FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE,\n+                MAXIMUM_REPARSE_DATA_BUFFER_SIZE, OPEN_EXISTING,\n+            },\n+            Win32::System::Ioctl::FSCTL_SET_REPARSE_POINT,\n+            Win32::System::SystemServices::{GENERIC_WRITE, IO_REPARSE_TAG_MOUNT_POINT},\n+            Win32::System::IO::DeviceIoControl,\n         };\n \n         #[allow(non_snake_case)]\n         #[repr(C)]\n         struct REPARSE_MOUNTPOINT_DATA_BUFFER {\n-            ReparseTag: DWORD,\n-            ReparseDataLength: DWORD,\n-            Reserved: WORD,\n-            ReparseTargetLength: WORD,\n-            ReparseTargetMaximumLength: WORD,\n-            Reserved1: WORD,\n-            ReparseTarget: WCHAR,\n+            ReparseTag: u32,\n+            ReparseDataLength: u32,\n+            Reserved: u16,\n+            ReparseTargetLength: u16,\n+            ReparseTargetMaximumLength: u16,\n+            Reserved1: u16,\n+            ReparseTarget: u16,\n         }\n \n         fn to_u16s<S: AsRef<OsStr>>(s: S) -> io::Result<Vec<u16>> {\n@@ -193,17 +194,20 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n \n         let path = to_u16s(junction)?;\n \n-        unsafe {\n-            let h = CreateFileW(\n-                path.as_ptr(),\n-                GENERIC_WRITE,\n+        let h = unsafe {\n+            CreateFileW(\n+                PCWSTR(path.as_ptr()),\n+                FILE_ACCESS_FLAGS(GENERIC_WRITE),\n                 FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,\n-                ptr::null_mut(),\n+                None,\n                 OPEN_EXISTING,\n                 FILE_FLAG_OPEN_REPARSE_POINT | FILE_FLAG_BACKUP_SEMANTICS,\n-                ptr::null_mut(),\n-            );\n+                HANDLE::default(),\n+            )\n+        }\n+        .map_err(|_| io::Error::last_os_error())?;\n \n+        unsafe {\n             #[repr(C, align(8))]\n             struct Align8<T>(T);\n             let mut data = Align8([0u8; MAXIMUM_REPARSE_DATA_BUFFER_SIZE as usize]);\n@@ -219,27 +223,29 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n             }\n             *buf.offset(i) = 0;\n             i += 1;\n+\n             (*db).ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;\n-            (*db).ReparseTargetMaximumLength = (i * 2) as WORD;\n-            (*db).ReparseTargetLength = ((i - 1) * 2) as WORD;\n-            (*db).ReparseDataLength = (*db).ReparseTargetLength as DWORD + 12;\n+            (*db).ReparseTargetMaximumLength = (i * 2) as u16;\n+            (*db).ReparseTargetLength = ((i - 1) * 2) as u16;\n+            (*db).ReparseDataLength = ((*db).ReparseTargetLength + 12) as u32;\n \n-            let mut ret = 0;\n-            let res = DeviceIoControl(\n-                h as *mut _,\n+            let mut ret = 0u32;\n+            DeviceIoControl(\n+                h,\n                 FSCTL_SET_REPARSE_POINT,\n-                db.cast(),\n+                Some(db.cast()),\n                 (*db).ReparseDataLength + 8,\n-                ptr::null_mut(),\n+                None,\n                 0,\n-                &mut ret,\n-                ptr::null_mut(),\n-            );\n-\n-            let out = if res == 0 { Err(io::Error::last_os_error()) } else { Ok(()) };\n-            CloseHandle(h);\n-            out\n+                Some(&mut ret),\n+                None,\n+            )\n+            .ok()\n+            .map_err(|_| io::Error::last_os_error())?;\n         }\n+\n+        unsafe { CloseHandle(h) };\n+        Ok(())\n     }\n }\n "}, {"sha": "85fd6523c82b190128d11bcfb714449ed9ddaaa9", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -26,4 +26,10 @@ libc = \"0.2\"\n \n [target.'cfg(windows)'.dependencies]\n miow = \"0.5\"\n-winapi = { version = \"0.3\", features = [\"winerror\"] }\n+\n+[target.'cfg(windows)'.dependencies.windows]\n+version = \"0.46.0\"\n+features = [\n+    \"Win32_Foundation\",\n+    \"Win32_System_Diagnostics_Debug\",\n+]"}, {"sha": "725f7a1515c626449c7a8115cdac5318e0af2f59", "filename": "src/tools/compiletest/src/read2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -232,7 +232,7 @@ mod imp {\n     use miow::iocp::{CompletionPort, CompletionStatus};\n     use miow::pipe::NamedPipe;\n     use miow::Overlapped;\n-    use winapi::shared::winerror::ERROR_BROKEN_PIPE;\n+    use windows::Win32::Foundation::ERROR_BROKEN_PIPE;\n \n     struct Pipe<'a> {\n         dst: &'a mut Vec<u8>,\n@@ -295,7 +295,7 @@ mod imp {\n             match self.pipe.read_overlapped(dst, self.overlapped.raw()) {\n                 Ok(_) => Ok(()),\n                 Err(e) => {\n-                    if e.raw_os_error() == Some(ERROR_BROKEN_PIPE as i32) {\n+                    if e.raw_os_error() == Some(ERROR_BROKEN_PIPE.0 as i32) {\n                         self.done = true;\n                         Ok(())\n                     } else {"}, {"sha": "a40030723105272df2a266187a7977eb92503b72", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -49,8 +49,10 @@ const FAKE_SRC_BASE: &str = \"fake-test-src-base\";\n #[cfg(windows)]\n fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n     use std::sync::Mutex;\n-    use winapi::um::errhandlingapi::SetErrorMode;\n-    use winapi::um::winbase::SEM_NOGPFAULTERRORBOX;\n+\n+    use windows::Win32::System::Diagnostics::Debug::{\n+        SetErrorMode, SEM_NOGPFAULTERRORBOX, THREAD_ERROR_MODE,\n+    };\n \n     static LOCK: Mutex<()> = Mutex::new(());\n \n@@ -62,6 +64,7 @@ fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n     // termination by design. This mode is inherited by all child processes.\n     unsafe {\n         let old_mode = SetErrorMode(SEM_NOGPFAULTERRORBOX); // read inherited flags\n+        let old_mode = THREAD_ERROR_MODE(old_mode);\n         SetErrorMode(old_mode | SEM_NOGPFAULTERRORBOX);\n         let r = f();\n         SetErrorMode(old_mode);"}, {"sha": "a9eb6c8d03f72bbbf14ccd236740486df25c9e7e", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=bb7c373fdf6c7c3fb8e204dcc178d870644fcc4b", "patch": "@@ -260,6 +260,7 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"valuable\",\n     \"version_check\",\n     \"wasi\",\n+    \"windows\",\n     \"winapi\",\n     \"winapi-i686-pc-windows-gnu\",\n     \"winapi-util\","}]}