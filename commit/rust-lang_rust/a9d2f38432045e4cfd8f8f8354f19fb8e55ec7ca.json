{"sha": "a9d2f38432045e4cfd8f8f8354f19fb8e55ec7ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZDJmMzg0MzIwNDVlNGNmZDhmOGY4MzU0ZjE5ZmI4ZTU1ZWM3Y2E=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-09-18T05:00:09Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-09-20T15:39:09Z"}, "message": "dbg_macro: output tests.", "tree": {"sha": "289d571fccf94a07967758f3ea583f87110d5762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289d571fccf94a07967758f3ea583f87110d5762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9d2f38432045e4cfd8f8f8354f19fb8e55ec7ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d2f38432045e4cfd8f8f8354f19fb8e55ec7ca", "html_url": "https://github.com/rust-lang/rust/commit/a9d2f38432045e4cfd8f8f8354f19fb8e55ec7ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9d2f38432045e4cfd8f8f8354f19fb8e55ec7ca/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d0882127120df865debd02a08e4f7642739c58e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0882127120df865debd02a08e4f7642739c58e", "html_url": "https://github.com/rust-lang/rust/commit/6d0882127120df865debd02a08e4f7642739c58e"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "3f4656004e7a5d800b9fde9eaf25a82a4410c4be", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/a9d2f38432045e4cfd8f8f8354f19fb8e55ec7ca/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d2f38432045e4cfd8f8f8354f19fb8e55ec7ca/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=a9d2f38432045e4cfd8f8f8354f19fb8e55ec7ca", "patch": "@@ -0,0 +1,119 @@\n+// run-pass\n+\n+// Tests ensuring that `dbg!(expr)` has the expected run-time behavior.\n+// as well as some compile time properties we expect.\n+\n+#![feature(dbg_macro)]\n+\n+#[derive(Copy, Clone, Debug)]\n+struct Unit;\n+\n+#[derive(Copy, Clone, Debug, PartialEq)]\n+struct Point<T> {\n+    x: T,\n+    y: T,\n+}\n+\n+#[derive(Debug, PartialEq)]\n+struct NoCopy(usize);\n+\n+fn test() {\n+    let a: Unit = dbg!(Unit);\n+    let _: Unit = dbg!(a);\n+    // We can move `a` because it's Copy.\n+    drop(a);\n+\n+    // `Point<T>` will be faithfully formatted according to `{:#?}`.\n+    let a = Point { x: 42, y: 24 };\n+    let b: Point<u8> = dbg!(Point { x: 42, y: 24 }); // test stringify!(..)\n+    let c: Point<u8> = dbg!(b);\n+    // Identity conversion:\n+    assert_eq!(a, b);\n+    assert_eq!(a, c);\n+    // We can move `b` because it's Copy.\n+    drop(b);\n+\n+    // Test that we can borrow and that successive applications is still identity.\n+    let a = NoCopy(1337);\n+    let b: &NoCopy = dbg!(dbg!(&a));\n+    assert_eq!(&a, b);\n+\n+    // Test involving lifetimes of temporaries:\n+    fn f<'a>(x: &'a u8) -> &'a u8 { x }\n+    let a: &u8 = dbg!(f(&42));\n+    assert_eq!(a, &42);\n+\n+    // Test side effects:\n+    let mut foo = 41;\n+    assert_eq!(7331, dbg!({\n+        foo += 1;\n+        eprintln!(\"before\");\n+        7331\n+    }));\n+    assert_eq!(foo, 42);\n+}\n+\n+fn validate_stderr(stderr: Vec<String>) {\n+    assert_eq!(stderr, &[\n+        \":21] Unit = Unit\",\n+\n+        \":22] a = Unit\",\n+\n+        \":28] Point{x: 42, y: 24,} = Point {\",\n+        \"    x: 42,\",\n+        \"    y: 24\",\n+        \"}\",\n+\n+        \":29] b = Point {\",\n+        \"    x: 42,\",\n+        \"    y: 24\",\n+        \"}\",\n+\n+        \":38] &a = NoCopy(\",\n+        \"    1337\",\n+        \")\",\n+\n+        \":38] dbg!(& a) = NoCopy(\",\n+        \"    1337\",\n+        \")\",\n+        \":43] f(&42) = 42\",\n+\n+        \"before\",\n+        \":48] { foo += 1; eprintln!(\\\"before\\\"); 7331 } = 7331\",\n+    ]);\n+}\n+\n+fn main() {\n+    // The following is a hack to deal with compiletest's inability\n+    // to check the output (to stdout) of run-pass tests.\n+    use std::env;\n+    use std::process::Command;\n+\n+    let mut args = env::args();\n+    let prog = args.next().unwrap();\n+    let child = args.next();\n+    if let Some(\"child\") = child.as_ref().map(|s| &**s) {\n+        // Only run the test if we've been spawned as 'child'\n+        test()\n+    } else {\n+        // This essentially spawns as 'child' to run the tests\n+        // and then it collects output of stderr and checks the output\n+        // against what we expect.\n+        let out = Command::new(&prog).arg(\"child\").output().unwrap();\n+        assert!(out.status.success());\n+        assert!(out.stdout.is_empty());\n+\n+        let stderr = String::from_utf8(out.stderr).unwrap();\n+        let stderr = stderr.lines().map(|mut s| {\n+            if s.starts_with(\"[\") {\n+                // Strip `[` and file path:\n+                s = s.trim_start_matches(\"[\");\n+                assert!(s.starts_with(file!()));\n+                s = s.trim_start_matches(file!());\n+            }\n+            s.to_owned()\n+        }).collect();\n+\n+        validate_stderr(stderr);\n+    }\n+}"}]}