{"sha": "71a75cc2ce6d6eed2557e6c585e81abcdad86827", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYTc1Y2MyY2U2ZDZlZWQyNTU3ZTZjNTg1ZTgxYWJjZGFkODY4Mjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-21T00:57:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-23T20:20:17Z"}, "message": "Just land already", "tree": {"sha": "ac696d4f9367cd51ce22be670ca364894782740e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac696d4f9367cd51ce22be670ca364894782740e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71a75cc2ce6d6eed2557e6c585e81abcdad86827", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71a75cc2ce6d6eed2557e6c585e81abcdad86827", "html_url": "https://github.com/rust-lang/rust/commit/71a75cc2ce6d6eed2557e6c585e81abcdad86827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71a75cc2ce6d6eed2557e6c585e81abcdad86827/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27e70c5d4946e07dc25b8fb86ecc379b8b3eeb5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/27e70c5d4946e07dc25b8fb86ecc379b8b3eeb5f", "html_url": "https://github.com/rust-lang/rust/commit/27e70c5d4946e07dc25b8fb86ecc379b8b3eeb5f"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "68b6416b69bf5c16142775cd1cbfd81b8f2d2634", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/71a75cc2ce6d6eed2557e6c585e81abcdad86827/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a75cc2ce6d6eed2557e6c585e81abcdad86827/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=71a75cc2ce6d6eed2557e6c585e81abcdad86827", "patch": "@@ -279,12 +279,12 @@ impl<T> DList<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::collections::{DList, Deque};\n+    /// use std::collections::DList;\n     ///\n     /// let mut dl = DList::new();\n-    /// dl.push_back(1i);\n-    /// dl.push_back(2);\n-    /// dl.push_back(3);\n+    /// dl.push(1i);\n+    /// dl.push(2);\n+    /// dl.push(3);\n     ///\n     /// dl.rotate_forward();\n     ///\n@@ -306,12 +306,12 @@ impl<T> DList<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::collections::{DList, Deque};\n+    /// use std::collections::DList;\n     ///\n     /// let mut dl = DList::new();\n-    /// dl.push_back(1i);\n-    /// dl.push_back(2);\n-    /// dl.push_back(3);\n+    /// dl.push(1i);\n+    /// dl.push(2);\n+    /// dl.push(3);\n     ///\n     /// dl.rotate_backward();\n     ///\n@@ -333,14 +333,14 @@ impl<T> DList<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::collections::{DList, Deque};\n+    /// use std::collections::DList;\n     ///\n     /// let mut a = DList::new();\n     /// let mut b = DList::new();\n-    /// a.push_back(1i);\n-    /// a.push_back(2);\n-    /// b.push_back(3i);\n-    /// b.push_back(4);\n+    /// a.push(1i);\n+    /// a.push(2);\n+    /// b.push(3i);\n+    /// b.push(4);\n     ///\n     /// a.append(b);\n     ///\n@@ -374,14 +374,14 @@ impl<T> DList<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::collections::{DList, Deque};\n+    /// use std::collections::DList;\n     ///\n     /// let mut a = DList::new();\n     /// let mut b = DList::new();\n-    /// a.push_back(1i);\n-    /// a.push_back(2);\n-    /// b.push_back(3i);\n-    /// b.push_back(4);\n+    /// a.push(1i);\n+    /// a.push(2);\n+    /// b.push(3i);\n+    /// b.push(4);\n     ///\n     /// a.prepend(b);\n     ///\n@@ -403,13 +403,13 @@ impl<T> DList<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::collections::{DList, Deque};\n+    /// use std::collections::DList;\n     ///\n     /// let mut a: DList<int> = DList::new();\n-    /// a.push_back(2i);\n-    /// a.push_back(4);\n-    /// a.push_back(7);\n-    /// a.push_back(8);\n+    /// a.push(2i);\n+    /// a.push(4);\n+    /// a.push(7);\n+    /// a.push(8);\n     ///\n     /// // insert 11 before the first odd number in the list\n     /// a.insert_when(11, |&e, _| e % 2 == 1);"}, {"sha": "d2d8ad696d7c5e4f77ecaab8c1a94fc19a8cc2ce", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/71a75cc2ce6d6eed2557e6c585e81abcdad86827/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a75cc2ce6d6eed2557e6c585e81abcdad86827/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=71a75cc2ce6d6eed2557e6c585e81abcdad86827", "patch": "@@ -360,9 +360,9 @@ pub trait MutableSeq<T>: Mutable {\n /// use std::collections::{RingBuf, Deque};\n ///\n /// let mut queue = RingBuf::new();\n-/// queue.push_back(1i);\n-/// queue.push_back(2i);\n-/// queue.push_back(3i);\n+/// queue.push(1i);\n+/// queue.push(2i);\n+/// queue.push(3i);\n ///\n /// // Will print 1, 2, 3\n /// while !queue.is_empty() {\n@@ -398,13 +398,13 @@ pub trait MutableSeq<T>: Mutable {\n /// // Init deque with 1, 2, 3, 4\n /// deque.push_front(2i);\n /// deque.push_front(1i);\n-/// deque.push_back(3i);\n-/// deque.push_back(4i);\n+/// deque.push(3i);\n+/// deque.push(4i);\n ///\n /// // Will print (1, 4) and (2, 3)\n /// while !deque.is_empty() {\n ///     let f = deque.pop_front().unwrap();\n-///     let b = deque.pop_back().unwrap();\n+///     let b = deque.pop().unwrap();\n ///     println!(\"{}\", (f, b));\n /// }\n /// ```\n@@ -420,8 +420,8 @@ pub trait Deque<T> : MutableSeq<T> {\n     /// let mut d = RingBuf::new();\n     /// assert_eq!(d.front(), None);\n     ///\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push(1i);\n+    /// d.push(2i);\n     /// assert_eq!(d.front(), Some(&1i));\n     /// ```\n     fn front<'a>(&'a self) -> Option<&'a T>;\n@@ -437,8 +437,8 @@ pub trait Deque<T> : MutableSeq<T> {\n     /// let mut d = RingBuf::new();\n     /// assert_eq!(d.front_mut(), None);\n     ///\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push(1i);\n+    /// d.push(2i);\n     /// match d.front_mut() {\n     ///     Some(x) => *x = 9i,\n     ///     None => (),\n@@ -458,8 +458,8 @@ pub trait Deque<T> : MutableSeq<T> {\n     /// let mut d = DList::new();\n     /// assert_eq!(d.back(), None);\n     ///\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push(1i);\n+    /// d.push(2i);\n     /// assert_eq!(d.back(), Some(&2i));\n     /// ```\n     fn back<'a>(&'a self) -> Option<&'a T>;\n@@ -475,8 +475,8 @@ pub trait Deque<T> : MutableSeq<T> {\n     /// let mut d = DList::new();\n     /// assert_eq!(d.back(), None);\n     ///\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push(1i);\n+    /// d.push(2i);\n     /// match d.back_mut() {\n     ///     Some(x) => *x = 9i,\n     ///     None => (),\n@@ -503,7 +503,7 @@ pub trait Deque<T> : MutableSeq<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```\n+    /// ```ignore\n     /// use std::collections::{DList, Deque};\n     ///\n     /// let mut d = DList::new();\n@@ -518,7 +518,7 @@ pub trait Deque<T> : MutableSeq<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```\n+    /// ```ignore\n     /// use std::collections::{RingBuf, Deque};\n     ///\n     /// let mut d = RingBuf::new();\n@@ -540,8 +540,8 @@ pub trait Deque<T> : MutableSeq<T> {\n     /// use std::collections::{RingBuf, Deque};\n     ///\n     /// let mut d = RingBuf::new();\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push(1i);\n+    /// d.push(2i);\n     ///\n     /// assert_eq!(d.pop_front(), Some(1i));\n     /// assert_eq!(d.pop_front(), Some(2i));"}, {"sha": "d58dfdd10d131202ed7f200d1321e8167003daea", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a75cc2ce6d6eed2557e6c585e81abcdad86827/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a75cc2ce6d6eed2557e6c585e81abcdad86827/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=71a75cc2ce6d6eed2557e6c585e81abcdad86827", "patch": "@@ -575,7 +575,7 @@ mod tests {\n     use std::prelude::*;\n     use test::Bencher;\n \n-    use Mutable;\n+    use {Mutable, MutableSeq};\n     use str;\n     use str::{Str, StrSlice, Owned, Slice};\n     use super::String;"}, {"sha": "dcee92f6dbced22f29859845f33cd66932ca5cc4", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a75cc2ce6d6eed2557e6c585e81abcdad86827/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a75cc2ce6d6eed2557e6c585e81abcdad86827/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=71a75cc2ce6d6eed2557e6c585e81abcdad86827", "patch": "@@ -981,7 +981,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```\n+    /// ```ignore\n     /// let mut vec = vec![1i, 2, 3];\n     /// vec.unshift(4);\n     /// assert_eq!(vec, vec![4, 1, 2, 3]);"}, {"sha": "922858e963c0a70bd628fd58c05fb242a5364ecd", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a75cc2ce6d6eed2557e6c585e81abcdad86827/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a75cc2ce6d6eed2557e6c585e81abcdad86827/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=71a75cc2ce6d6eed2557e6c585e81abcdad86827", "patch": "@@ -1291,7 +1291,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///         // new value based on the first letter of the key.\n     ///         |key, already, new| {\n     ///             if key.as_slice().starts_with(\"z\") {\n-    ///                 already.unshift(new);\n+    ///                 already.insert(0, new);\n     ///             } else {\n     ///                 already.push(new);\n     ///             }"}]}