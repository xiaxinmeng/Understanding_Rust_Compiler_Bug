{"sha": "a5ae8b8b92748e1b876002799d160136a7836212", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YWU4YjhiOTI3NDhlMWI4NzYwMDI3OTlkMTYwMTM2YTc4MzYyMTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T19:51:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T19:51:44Z"}, "message": "Inlay hints use callables", "tree": {"sha": "d6d8bfd99ef8c33eba4e679d4556c84aaf69bebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6d8bfd99ef8c33eba4e679d4556c84aaf69bebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5ae8b8b92748e1b876002799d160136a7836212", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ae8b8b92748e1b876002799d160136a7836212", "html_url": "https://github.com/rust-lang/rust/commit/a5ae8b8b92748e1b876002799d160136a7836212", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5ae8b8b92748e1b876002799d160136a7836212/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edc0190f7a2a701ef7c8534b053070212798cd8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/edc0190f7a2a701ef7c8534b053070212798cd8b", "html_url": "https://github.com/rust-lang/rust/commit/edc0190f7a2a701ef7c8534b053070212798cd8b"}], "stats": {"total": 175, "additions": 35, "deletions": 140}, "files": [{"sha": "6cbcc3850e60c23563ad32d068716163a49be022", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5ae8b8b92748e1b876002799d160136a7836212/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5ae8b8b92748e1b876002799d160136a7836212/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=a5ae8b8b92748e1b876002799d160136a7836212", "patch": "@@ -1552,6 +1552,9 @@ impl Callable {\n         let param_list = src.value.param_list()?;\n         param_list.self_param()\n     }\n+    pub fn n_params(&self) -> usize {\n+        self.sig.params().len()\n+    }\n     pub fn params(\n         &self,\n         db: &dyn HirDatabase,"}, {"sha": "f6e11357f8512783975bd6f9a944c420b6522f01", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 1, "deletions": 95, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/a5ae8b8b92748e1b876002799d160136a7836212/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5ae8b8b92748e1b876002799d160136a7836212/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=a5ae8b8b92748e1b876002799d160136a7836212", "patch": "@@ -4,8 +4,7 @@\n // rewritten (matklad 2020-05-07)\n use std::convert::From;\n \n-use hir::{Docs, Documentation, HasSource, HirDisplay};\n-use ra_ide_db::RootDatabase;\n+use hir::Documentation;\n use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n use stdx::split_delim;\n \n@@ -14,8 +13,6 @@ use crate::display::{generic_parameters, where_predicates};\n #[derive(Debug)]\n pub(crate) enum CallableKind {\n     Function,\n-    StructConstructor,\n-    VariantConstructor,\n }\n \n /// Contains information about a function signature\n@@ -56,97 +53,6 @@ pub(crate) struct FunctionQualifier {\n     pub(crate) extern_abi: Option<String>,\n }\n \n-impl FunctionSignature {\n-    pub(crate) fn from_hir(db: &RootDatabase, function: hir::Function) -> Self {\n-        let ast_node = function.source(db).value;\n-        let mut res = FunctionSignature::from(&ast_node);\n-        res.doc = function.docs(db);\n-        res\n-    }\n-\n-    pub(crate) fn from_struct(db: &RootDatabase, st: hir::Struct) -> Option<Self> {\n-        let node: ast::StructDef = st.source(db).value;\n-        if let ast::StructKind::Record(_) = node.kind() {\n-            return None;\n-        };\n-\n-        let mut params = vec![];\n-        let mut parameter_types = vec![];\n-        for field in st.fields(db).into_iter() {\n-            let ty = field.signature_ty(db);\n-            let raw_param = format!(\"{}\", ty.display(db));\n-\n-            if let Some(param_type) = raw_param.split(':').nth(1).and_then(|it| it.get(1..)) {\n-                parameter_types.push(param_type.to_string());\n-            } else {\n-                // useful when you have tuple struct\n-                parameter_types.push(raw_param.clone());\n-            }\n-            params.push(raw_param);\n-        }\n-\n-        Some(FunctionSignature {\n-            kind: CallableKind::StructConstructor,\n-            visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n-            // Do we need `const`?\n-            qualifier: Default::default(),\n-            name: node.name().map(|n| n.text().to_string()),\n-            ret_type: node.name().map(|n| n.text().to_string()),\n-            parameters: params,\n-            parameter_names: vec![],\n-            parameter_types,\n-            generic_parameters: generic_parameters(&node),\n-            where_predicates: where_predicates(&node),\n-            doc: st.docs(db),\n-            has_self_param: false,\n-        })\n-    }\n-\n-    pub(crate) fn from_enum_variant(db: &RootDatabase, variant: hir::EnumVariant) -> Option<Self> {\n-        let node: ast::EnumVariant = variant.source(db).value;\n-        match node.kind() {\n-            ast::StructKind::Record(_) | ast::StructKind::Unit => return None,\n-            _ => (),\n-        };\n-\n-        let parent_name = variant.parent_enum(db).name(db).to_string();\n-\n-        let name = format!(\"{}::{}\", parent_name, variant.name(db));\n-\n-        let mut params = vec![];\n-        let mut parameter_types = vec![];\n-        for field in variant.fields(db).into_iter() {\n-            let ty = field.signature_ty(db);\n-            let raw_param = format!(\"{}\", ty.display(db));\n-            if let Some(param_type) = raw_param.split(':').nth(1).and_then(|it| it.get(1..)) {\n-                parameter_types.push(param_type.to_string());\n-            } else {\n-                // The unwrap_or_else is useful when you have tuple\n-                parameter_types.push(raw_param);\n-            }\n-            let name = field.name(db);\n-\n-            params.push(format!(\"{}: {}\", name, ty.display(db)));\n-        }\n-\n-        Some(FunctionSignature {\n-            kind: CallableKind::VariantConstructor,\n-            visibility: None,\n-            // Do we need `const`?\n-            qualifier: Default::default(),\n-            name: Some(name),\n-            ret_type: None,\n-            parameters: params,\n-            parameter_names: vec![],\n-            parameter_types,\n-            generic_parameters: vec![],\n-            where_predicates: vec![],\n-            doc: variant.docs(db),\n-            has_self_param: false,\n-        })\n-    }\n-}\n-\n impl From<&'_ ast::FnDef> for FunctionSignature {\n     fn from(node: &ast::FnDef) -> FunctionSignature {\n         fn param_list(node: &ast::FnDef) -> (bool, Vec<String>, Vec<String>) {"}, {"sha": "cec3b04e86e639f0fb84bfdf8d8896d1e2d9083f", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 31, "deletions": 45, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a5ae8b8b92748e1b876002799d160136a7836212/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5ae8b8b92748e1b876002799d160136a7836212/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=a5ae8b8b92748e1b876002799d160136a7836212", "patch": "@@ -1,4 +1,4 @@\n-use hir::{Adt, HirDisplay, Semantics, Type};\n+use hir::{Adt, Callable, HirDisplay, Semantics, Type};\n use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n@@ -7,7 +7,9 @@ use ra_syntax::{\n };\n use stdx::to_lower_snake_case;\n \n-use crate::{display::function_signature::FunctionSignature, FileId};\n+use crate::FileId;\n+use ast::NameOwner;\n+use either::Either;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct InlayHintsConfig {\n@@ -150,23 +152,26 @@ fn get_param_name_hints(\n         _ => return None,\n     };\n \n-    let fn_signature = get_fn_signature(sema, &expr)?;\n-    let n_params_to_skip =\n-        if fn_signature.has_self_param && matches!(&expr, ast::Expr::MethodCallExpr(_)) {\n-            1\n-        } else {\n-            0\n-        };\n-    let hints = fn_signature\n-        .parameter_names\n-        .iter()\n-        .skip(n_params_to_skip)\n+    let callable = get_callable(sema, &expr)?;\n+    let hints = callable\n+        .params(sema.db)\n+        .into_iter()\n         .zip(args)\n-        .filter(|(param, arg)| should_show_param_name_hint(sema, &fn_signature, param, &arg))\n+        .filter_map(|((param, _ty), arg)| match param? {\n+            Either::Left(self_param) => Some((self_param.to_string(), arg)),\n+            Either::Right(pat) => {\n+                let param_name = match pat {\n+                    ast::Pat::BindPat(it) => it.name()?.to_string(),\n+                    it => it.to_string(),\n+                };\n+                Some((param_name, arg))\n+            }\n+        })\n+        .filter(|(param_name, arg)| should_show_param_name_hint(sema, &callable, &param_name, &arg))\n         .map(|(param_name, arg)| InlayHint {\n             range: arg.syntax().text_range(),\n             kind: InlayKind::ParameterHint,\n-            label: param_name.into(),\n+            label: param_name.to_string().into(),\n         });\n \n     acc.extend(hints);\n@@ -250,28 +255,26 @@ fn should_not_display_type_hint(db: &RootDatabase, bind_pat: &ast::BindPat, pat_\n \n fn should_show_param_name_hint(\n     sema: &Semantics<RootDatabase>,\n-    fn_signature: &FunctionSignature,\n+    callable: &Callable,\n     param_name: &str,\n     argument: &ast::Expr,\n ) -> bool {\n     let param_name = param_name.trim_start_matches('_');\n+    let fn_name = match callable.kind() {\n+        hir::CallableKind::Function(it) => Some(it.name(sema.db).to_string()),\n+        hir::CallableKind::TupleStruct(_) | hir::CallableKind::TupleEnumVariant(_) => None,\n+    };\n     if param_name.is_empty()\n-        || Some(param_name) == fn_signature.name.as_ref().map(|s| s.trim_start_matches('_'))\n+        || Some(param_name) == fn_name.as_ref().map(|s| s.trim_start_matches('_'))\n         || is_argument_similar_to_param_name(sema, argument, param_name)\n         || param_name.starts_with(\"ra_fixture\")\n     {\n         return false;\n     }\n \n-    let parameters_len = if fn_signature.has_self_param {\n-        fn_signature.parameters.len() - 1\n-    } else {\n-        fn_signature.parameters.len()\n-    };\n-\n     // avoid displaying hints for common functions like map, filter, etc.\n     // or other obvious words used in std\n-    !(parameters_len == 1 && is_obvious_param(param_name))\n+    !(callable.n_params() == 1 && is_obvious_param(param_name))\n }\n \n fn is_argument_similar_to_param_name(\n@@ -318,27 +321,10 @@ fn is_obvious_param(param_name: &str) -> bool {\n     param_name.len() == 1 || is_obvious_param_name\n }\n \n-fn get_fn_signature(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<FunctionSignature> {\n+fn get_callable(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<Callable> {\n     match expr {\n-        ast::Expr::CallExpr(expr) => {\n-            // FIXME: Type::as_callable is broken for closures\n-            let callable = sema.type_of_expr(&expr.expr()?)?.as_callable(sema.db)?;\n-            match callable.kind() {\n-                hir::CallableKind::Function(it) => {\n-                    Some(FunctionSignature::from_hir(sema.db, it.into()))\n-                }\n-                hir::CallableKind::TupleStruct(it) => {\n-                    FunctionSignature::from_struct(sema.db, it.into())\n-                }\n-                hir::CallableKind::TupleEnumVariant(it) => {\n-                    FunctionSignature::from_enum_variant(sema.db, it.into())\n-                }\n-            }\n-        }\n-        ast::Expr::MethodCallExpr(expr) => {\n-            let fn_def = sema.resolve_method_call(&expr)?;\n-            Some(FunctionSignature::from_hir(sema.db, fn_def))\n-        }\n+        ast::Expr::CallExpr(expr) => sema.type_of_expr(&expr.expr()?)?.as_callable(sema.db),\n+        ast::Expr::MethodCallExpr(expr) => sema.resolve_method_call_as_callable(expr),\n         _ => None,\n     }\n }\n@@ -360,7 +346,7 @@ mod tests {\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n         let actual =\n             inlay_hints.into_iter().map(|it| (it.range, it.label.to_string())).collect::<Vec<_>>();\n-        assert_eq!(expected, actual);\n+        assert_eq!(expected, actual, \"\\nExpected:\\n{:#?}\\n\\nActual:\\n{:#?}\", expected, actual);\n     }\n \n     fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {"}]}