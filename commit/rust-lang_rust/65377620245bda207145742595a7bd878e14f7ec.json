{"sha": "65377620245bda207145742595a7bd878e14f7ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1Mzc3NjIwMjQ1YmRhMjA3MTQ1NzQyNTk1YTdiZDg3OGUxNGY3ZWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-20T11:43:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T11:43:19Z"}, "message": "Merge #2608\n\n2608: Support for nested traits r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d2016e6e3ce596e6a4b3e44f4894b5a411c62789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2016e6e3ce596e6a4b3e44f4894b5a411c62789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65377620245bda207145742595a7bd878e14f7ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/LPXCRBK7hj4Ov3rIwAAdHIIAAUPx2Y3NtqdhCzd2w6GB5KT\nJeP9uFAbUi3y9AldzY82f87ugevxJakNT6TCSaQHwT0GStVJgLNkri+Cs33tPQ0P\nuzABdkBugQHwFBqZHwiWS0Xh6zzaWByEH9WspVdS1zIIoHR6DNwFjYfTVvF2LwHG\n7DoQx5IUKV9N7P0ROkqZhxZpHzjtArrf52YkRx0y5PcgeaPU4xKpX7FfXxcRIXaM\nZK1mtV3SfUg102fQs/NfyaJeWHW+XkVN/5uc0OG3tfDVnO3iEcmAvcCpuNYS8d3b\nA2WLbcfUS8s4loIHkcD14tCDW5RLaAUnrnbEnr4O4Z1Tk2oEM0GasLkEnXys9Uc=\n=FF16\n-----END PGP SIGNATURE-----\n", "payload": "tree d2016e6e3ce596e6a4b3e44f4894b5a411c62789\nparent 6e9335d311c058986c4bbef5aadbe208b87f63c7\nparent f42697e54b9d0a040011cb04c266d51710e249f1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576842199 +0000\ncommitter GitHub <noreply@github.com> 1576842199 +0000\n\nMerge #2608\n\n2608: Support for nested traits r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65377620245bda207145742595a7bd878e14f7ec", "html_url": "https://github.com/rust-lang/rust/commit/65377620245bda207145742595a7bd878e14f7ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65377620245bda207145742595a7bd878e14f7ec/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e9335d311c058986c4bbef5aadbe208b87f63c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9335d311c058986c4bbef5aadbe208b87f63c7", "html_url": "https://github.com/rust-lang/rust/commit/6e9335d311c058986c4bbef5aadbe208b87f63c7"}, {"sha": "f42697e54b9d0a040011cb04c266d51710e249f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f42697e54b9d0a040011cb04c266d51710e249f1", "html_url": "https://github.com/rust-lang/rust/commit/f42697e54b9d0a040011cb04c266d51710e249f1"}], "stats": {"total": 202, "additions": 130, "deletions": 72}, "files": [{"sha": "35e1f752be06d53312754e72d49be5789a345ea5", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -269,7 +269,7 @@ pub struct Struct {\n \n impl Struct {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.lookup(db).container }\n+        Module { id: self.id.lookup(db).container.module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -290,7 +290,7 @@ impl Struct {\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        Type::from_def(db, self.id.lookup(db).container.krate, self.id)\n+        Type::from_def(db, self.id.lookup(db).container.module(db).krate, self.id)\n     }\n \n     fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n@@ -309,11 +309,11 @@ impl Union {\n     }\n \n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.lookup(db).container }\n+        Module { id: self.id.lookup(db).container.module(db) }\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        Type::from_def(db, self.id.lookup(db).container.krate, self.id)\n+        Type::from_def(db, self.id.lookup(db).container.module(db).krate, self.id)\n     }\n \n     pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n@@ -337,7 +337,7 @@ pub struct Enum {\n \n impl Enum {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.lookup(db).container }\n+        Module { id: self.id.lookup(db).container.module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -357,7 +357,7 @@ impl Enum {\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        Type::from_def(db, self.id.lookup(db).container.krate, self.id)\n+        Type::from_def(db, self.id.lookup(db).container.module(db).krate, self.id)\n     }\n }\n \n@@ -553,7 +553,7 @@ pub struct Trait {\n \n impl Trait {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.lookup(db).container }\n+        Module { id: self.id.lookup(db).container.module(db) }\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Name {"}, {"sha": "853e17bae7f6ade304692b872a495f7b146bc997", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -25,7 +25,8 @@ use crate::{\n     path::GenericArgs,\n     path::Path,\n     type_ref::{Mutability, TypeRef},\n-    ContainerId, DefWithBodyId, FunctionLoc, Intern,\n+    ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId, StaticLoc,\n+    StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n };\n \n pub(super) fn lower(\n@@ -492,14 +493,45 @@ where\n     fn collect_block_items(&mut self, block: &ast::Block) {\n         let container = ContainerId::DefWithBodyId(self.def);\n         for item in block.items() {\n-            match item {\n+            let def: ModuleDefId = match item {\n                 ast::ModuleItem::FnDef(def) => {\n                     let ast_id = self.expander.ast_id(&def);\n-                    self.body.defs.push(FunctionLoc { container, ast_id }.intern(self.db).into())\n+                    FunctionLoc { container: container.into(), ast_id }.intern(self.db).into()\n                 }\n-                // FIXME: handle other items\n-                _ => (),\n-            }\n+                ast::ModuleItem::TypeAliasDef(def) => {\n+                    let ast_id = self.expander.ast_id(&def);\n+                    TypeAliasLoc { container: container.into(), ast_id }.intern(self.db).into()\n+                }\n+                ast::ModuleItem::ConstDef(def) => {\n+                    let ast_id = self.expander.ast_id(&def);\n+                    ConstLoc { container: container.into(), ast_id }.intern(self.db).into()\n+                }\n+                ast::ModuleItem::StaticDef(def) => {\n+                    let ast_id = self.expander.ast_id(&def);\n+                    StaticLoc { container, ast_id }.intern(self.db).into()\n+                }\n+                ast::ModuleItem::StructDef(def) => {\n+                    let ast_id = self.expander.ast_id(&def);\n+                    StructLoc { container, ast_id }.intern(self.db).into()\n+                }\n+                ast::ModuleItem::EnumDef(def) => {\n+                    let ast_id = self.expander.ast_id(&def);\n+                    EnumLoc { container, ast_id }.intern(self.db).into()\n+                }\n+                ast::ModuleItem::UnionDef(def) => {\n+                    let ast_id = self.expander.ast_id(&def);\n+                    UnionLoc { container, ast_id }.intern(self.db).into()\n+                }\n+                ast::ModuleItem::TraitDef(def) => {\n+                    let ast_id = self.expander.ast_id(&def);\n+                    TraitLoc { container, ast_id }.intern(self.db).into()\n+                }\n+                ast::ModuleItem::ImplBlock(_)\n+                | ast::ModuleItem::UseItem(_)\n+                | ast::ModuleItem::ExternCrateItem(_)\n+                | ast::ModuleItem::Module(_) => continue,\n+            };\n+            self.body.defs.push(def)\n         }\n     }\n "}, {"sha": "14e86936bc9da8225154703f0853c488fd2ea9d3", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -12,8 +12,8 @@ use crate::{\n     db::DefDatabase,\n     src::HasSource,\n     type_ref::{Mutability, TypeRef},\n-    AssocItemId, ConstId, ConstLoc, ContainerId, FunctionId, FunctionLoc, ImplId, Intern, Lookup,\n-    StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n+    AssocContainerId, AssocItemId, ConstId, ConstLoc, FunctionId, FunctionLoc, ImplId, Intern,\n+    Lookup, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -99,7 +99,7 @@ impl TraitData {\n         let auto = src.value.is_auto();\n         let ast_id_map = db.ast_id_map(src.file_id);\n \n-        let container = ContainerId::TraitId(tr);\n+        let container = AssocContainerId::TraitId(tr);\n         let items = if let Some(item_list) = src.value.item_list() {\n             item_list\n                 .impl_items()\n@@ -180,23 +180,23 @@ impl ImplData {\n                 .map(|item_node| match item_node {\n                     ast::ImplItem::FnDef(it) => {\n                         let def = FunctionLoc {\n-                            container: ContainerId::ImplId(id),\n+                            container: AssocContainerId::ImplId(id),\n                             ast_id: AstId::new(src.file_id, items.ast_id(&it)),\n                         }\n                         .intern(db);\n                         def.into()\n                     }\n                     ast::ImplItem::ConstDef(it) => {\n                         let def = ConstLoc {\n-                            container: ContainerId::ImplId(id),\n+                            container: AssocContainerId::ImplId(id),\n                             ast_id: AstId::new(src.file_id, items.ast_id(&it)),\n                         }\n                         .intern(db);\n                         def.into()\n                     }\n                     ast::ImplItem::TypeAliasDef(it) => {\n                         let def = TypeAliasLoc {\n-                            container: ContainerId::ImplId(id),\n+                            container: AssocContainerId::ImplId(id),\n                             ast_id: AstId::new(src.file_id, items.ast_id(&it)),\n                         }\n                         .intern(db);"}, {"sha": "140eccf267c83edb64303fe1fcc56e2fd9109166", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -71,7 +71,7 @@ impl_intern_key!(FunctionId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FunctionLoc {\n-    pub container: ContainerId,\n+    pub container: AssocContainerId,\n     pub ast_id: AstId<ast::FnDef>,\n }\n \n@@ -95,7 +95,7 @@ impl_intern_key!(StructId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StructLoc {\n-    pub container: ModuleId,\n+    pub container: ContainerId,\n     pub ast_id: AstId<ast::StructDef>,\n }\n \n@@ -119,7 +119,7 @@ impl_intern_key!(UnionId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UnionLoc {\n-    pub container: ModuleId,\n+    pub container: ContainerId,\n     pub ast_id: AstId<ast::UnionDef>,\n }\n \n@@ -143,7 +143,7 @@ impl_intern_key!(EnumId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct EnumLoc {\n-    pub container: ModuleId,\n+    pub container: ContainerId,\n     pub ast_id: AstId<ast::EnumDef>,\n }\n \n@@ -187,7 +187,7 @@ pub struct ConstId(salsa::InternId);\n impl_intern_key!(ConstId);\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ConstLoc {\n-    pub container: ContainerId,\n+    pub container: AssocContainerId,\n     pub ast_id: AstId<ast::ConstDef>,\n }\n \n@@ -211,7 +211,7 @@ impl_intern_key!(StaticId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StaticLoc {\n-    pub container: ModuleId,\n+    pub container: ContainerId,\n     pub ast_id: AstId<ast::StaticDef>,\n }\n \n@@ -235,7 +235,7 @@ impl_intern_key!(TraitId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TraitLoc {\n-    pub container: ModuleId,\n+    pub container: ContainerId,\n     pub ast_id: AstId<ast::TraitDef>,\n }\n \n@@ -259,7 +259,7 @@ impl_intern_key!(TypeAliasId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeAliasLoc {\n-    pub container: ContainerId,\n+    pub container: AssocContainerId,\n     pub ast_id: AstId<ast::TypeAliasDef>,\n }\n \n@@ -333,10 +333,16 @@ impl_arena_id!(LocalTypeParamId);\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ContainerId {\n     ModuleId(ModuleId),\n+    DefWithBodyId(DefWithBodyId),\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum AssocContainerId {\n+    ContainerId(ContainerId),\n     ImplId(ImplId),\n     TraitId(TraitId),\n-    DefWithBodyId(DefWithBodyId),\n }\n+impl_froms!(AssocContainerId: ContainerId);\n \n /// A Data Type\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -483,13 +489,21 @@ impl HasModule for ContainerId {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match *self {\n             ContainerId::ModuleId(it) => it,\n-            ContainerId::ImplId(it) => it.lookup(db).container,\n-            ContainerId::TraitId(it) => it.lookup(db).container,\n             ContainerId::DefWithBodyId(it) => it.module(db),\n         }\n     }\n }\n \n+impl HasModule for AssocContainerId {\n+    fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n+        match *self {\n+            AssocContainerId::ContainerId(it) => it.module(db),\n+            AssocContainerId::ImplId(it) => it.lookup(db).container,\n+            AssocContainerId::TraitId(it) => it.lookup(db).container.module(db),\n+        }\n+    }\n+}\n+\n impl HasModule for FunctionLoc {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         self.container.module(db)\n@@ -515,6 +529,7 @@ impl HasModule for AdtId {\n             AdtId::UnionId(it) => it.lookup(db).container,\n             AdtId::EnumId(it) => it.lookup(db).container,\n         }\n+        .module(db)\n     }\n }\n \n@@ -533,17 +548,17 @@ impl HasModule for GenericDefId {\n         match self {\n             GenericDefId::FunctionId(it) => it.lookup(db).module(db),\n             GenericDefId::AdtId(it) => it.module(db),\n-            GenericDefId::TraitId(it) => it.lookup(db).container,\n+            GenericDefId::TraitId(it) => it.lookup(db).container.module(db),\n             GenericDefId::TypeAliasId(it) => it.lookup(db).module(db),\n             GenericDefId::ImplId(it) => it.lookup(db).container,\n-            GenericDefId::EnumVariantId(it) => it.parent.lookup(db).container,\n+            GenericDefId::EnumVariantId(it) => it.parent.lookup(db).container.module(db),\n             GenericDefId::ConstId(it) => it.lookup(db).module(db),\n         }\n     }\n }\n \n impl HasModule for StaticLoc {\n-    fn module(&self, _db: &impl db::DefDatabase) -> ModuleId {\n-        self.container\n+    fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n+        self.container.module(db)\n     }\n }"}, {"sha": "a1ea130e0865ff6912568370b80c32d3fece3b79", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -760,55 +760,56 @@ where\n         self.collect_derives(attrs, def);\n \n         let name = def.name.clone();\n+        let container = ContainerId::ModuleId(module);\n         let def: PerNs = match def.kind {\n             raw::DefKind::Function(ast_id) => {\n                 let def = FunctionLoc {\n-                    container: ContainerId::ModuleId(module),\n+                    container: container.into(),\n                     ast_id: AstId::new(self.file_id, ast_id),\n                 }\n                 .intern(self.def_collector.db);\n \n                 PerNs::values(def.into())\n             }\n             raw::DefKind::Struct(ast_id) => {\n-                let def = StructLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                let def = StructLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                     .intern(self.def_collector.db);\n                 PerNs::both(def.into(), def.into())\n             }\n             raw::DefKind::Union(ast_id) => {\n-                let def = UnionLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                let def = UnionLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                     .intern(self.def_collector.db);\n                 PerNs::both(def.into(), def.into())\n             }\n             raw::DefKind::Enum(ast_id) => {\n-                let def = EnumLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                let def = EnumLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                     .intern(self.def_collector.db);\n                 PerNs::types(def.into())\n             }\n             raw::DefKind::Const(ast_id) => {\n                 let def = ConstLoc {\n-                    container: ContainerId::ModuleId(module),\n+                    container: container.into(),\n                     ast_id: AstId::new(self.file_id, ast_id),\n                 }\n                 .intern(self.def_collector.db);\n \n                 PerNs::values(def.into())\n             }\n             raw::DefKind::Static(ast_id) => {\n-                let def = StaticLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                let def = StaticLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                     .intern(self.def_collector.db);\n \n                 PerNs::values(def.into())\n             }\n             raw::DefKind::Trait(ast_id) => {\n-                let def = TraitLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                let def = TraitLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                     .intern(self.def_collector.db);\n \n                 PerNs::types(def.into())\n             }\n             raw::DefKind::TypeAlias(ast_id) => {\n                 let def = TypeAliasLoc {\n-                    container: ContainerId::ModuleId(module),\n+                    container: container.into(),\n                     ast_id: AstId::new(self.file_id, ast_id),\n                 }\n                 .intern(self.def_collector.db);"}, {"sha": "af9d194f8a5c9ec42249a9e042616f1450a97f3d", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -17,9 +17,9 @@ use crate::{\n     nameres::{BuiltinShadowMode, CrateDefMap},\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n-    AdtId, ConstId, ContainerId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId,\n-    HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId,\n-    TypeAliasId, TypeParamId, VariantId,\n+    AdtId, AssocContainerId, ConstId, ContainerId, DefWithBodyId, EnumId, EnumVariantId,\n+    FunctionId, GenericDefId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId,\n+    StaticId, StructId, TraitId, TypeAliasId, TypeParamId, VariantId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -583,14 +583,22 @@ impl HasResolver for DefWithBodyId {\n impl HasResolver for ContainerId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         match self {\n-            ContainerId::TraitId(it) => it.resolver(db),\n-            ContainerId::ImplId(it) => it.resolver(db),\n             ContainerId::ModuleId(it) => it.resolver(db),\n             ContainerId::DefWithBodyId(it) => it.resolver(db),\n         }\n     }\n }\n \n+impl HasResolver for AssocContainerId {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        match self {\n+            AssocContainerId::ContainerId(it) => it.resolver(db),\n+            AssocContainerId::TraitId(it) => it.resolver(db),\n+            AssocContainerId::ImplId(it) => it.resolver(db),\n+        }\n+    }\n+}\n+\n impl HasResolver for GenericDefId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         match self {"}, {"sha": "6917c183b3cbc597225cf18220f069eb4887d976", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -8,7 +8,7 @@ use hir_def::{\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n-    AdtId, ContainerId, Lookup, StructFieldId,\n+    AdtId, AssocContainerId, Lookup, StructFieldId,\n };\n use hir_expand::name::{name, Name};\n use ra_syntax::ast::RangeOp;\n@@ -672,7 +672,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 // add obligation for trait implementation, if this is a trait method\n                 match def {\n                     CallableDef::FunctionId(f) => {\n-                        if let ContainerId::TraitId(trait_) = f.lookup(self.db).container {\n+                        if let AssocContainerId::TraitId(trait_) = f.lookup(self.db).container {\n                             // construct a TraitDef\n                             let substs =\n                                 a_ty.parameters.prefix(generics(self.db, trait_.into()).len());"}, {"sha": "ffd3583675f842f2f59241d1a00cc36a2f57e784", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -5,7 +5,7 @@ use std::iter;\n use hir_def::{\n     path::{Path, PathSegment},\n     resolver::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n-    AssocItemId, ContainerId, Lookup,\n+    AssocContainerId, AssocItemId, Lookup,\n };\n use hir_expand::name::Name;\n \n@@ -209,7 +209,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     AssocItemId::TypeAliasId(_) => unreachable!(),\n                 };\n                 let substs = match container {\n-                    ContainerId::ImplId(impl_id) => {\n+                    AssocContainerId::ImplId(impl_id) => {\n                         let impl_substs = Substs::build_for_def(self.db, impl_id)\n                             .fill(iter::repeat_with(|| self.table.new_type_var()))\n                             .build();\n@@ -221,7 +221,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         self.unify(&impl_self_ty, &ty);\n                         Some(substs)\n                     }\n-                    ContainerId::TraitId(trait_) => {\n+                    AssocContainerId::TraitId(trait_) => {\n                         // we're picking this method\n                         let trait_substs = Substs::build_for_def(self.db, trait_)\n                             .push(ty.clone())\n@@ -237,7 +237,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         }));\n                         Some(substs)\n                     }\n-                    ContainerId::ModuleId(_) | ContainerId::DefWithBodyId(_) => None,\n+                    AssocContainerId::ContainerId(_) => None,\n                 };\n \n                 self.write_assoc_resolution(id, item.into());"}, {"sha": "7310ef10d91f727691e76bcabb148e337eaa5d3e", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -44,8 +44,8 @@ use std::sync::Arc;\n use std::{fmt, iter, mem};\n \n use hir_def::{\n-    expr::ExprId, type_ref::Mutability, AdtId, ContainerId, DefWithBodyId, GenericDefId, HasModule,\n-    Lookup, TraitId, TypeAliasId,\n+    expr::ExprId, type_ref::Mutability, AdtId, AssocContainerId, DefWithBodyId, GenericDefId,\n+    HasModule, Lookup, TraitId, TypeAliasId,\n };\n use hir_expand::name::Name;\n use ra_db::{impl_intern_key, salsa, CrateId};\n@@ -251,7 +251,7 @@ impl ProjectionTy {\n \n     fn trait_(&self, db: &impl HirDatabase) -> TraitId {\n         match self.associated_ty.lookup(db).container {\n-            ContainerId::TraitId(it) => it,\n+            AssocContainerId::TraitId(it) => it,\n             _ => panic!(\"projection ty without parent trait\"),\n         }\n     }\n@@ -943,7 +943,7 @@ impl HirDisplay for ApplicationTy {\n             }\n             TypeCtor::AssociatedType(type_alias) => {\n                 let trait_ = match type_alias.lookup(f.db).container {\n-                    ContainerId::TraitId(it) => it,\n+                    AssocContainerId::TraitId(it) => it,\n                     _ => panic!(\"not an associated type\"),\n                 };\n                 let trait_name = f.db.trait_data(trait_).name.clone();"}, {"sha": "af3db2e1d7c4f7b21fa08c6716f2b8bf3f26231f", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -697,8 +697,8 @@ impl CallableDef {\n     pub fn krate(self, db: &impl HirDatabase) -> CrateId {\n         match self {\n             CallableDef::FunctionId(f) => f.lookup(db).module(db),\n-            CallableDef::StructId(s) => s.lookup(db).container,\n-            CallableDef::EnumVariantId(e) => e.parent.lookup(db).container,\n+            CallableDef::StructId(s) => s.lookup(db).container.module(db),\n+            CallableDef::EnumVariantId(e) => e.parent.lookup(db).container.module(db),\n         }\n         .krate\n     }"}, {"sha": "1b2f4014c62c640bffceeeda2e565336d2db7d1c", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -6,8 +6,8 @@ use std::sync::Arc;\n \n use arrayvec::ArrayVec;\n use hir_def::{\n-    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocItemId, ContainerId,\n-    FunctionId, HasModule, ImplId, Lookup, TraitId,\n+    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocContainerId,\n+    AssocItemId, FunctionId, HasModule, ImplId, Lookup, TraitId,\n };\n use hir_expand::name::Name;\n use ra_db::CrateId;\n@@ -451,12 +451,12 @@ fn transform_receiver_ty(\n     self_ty: &Canonical<Ty>,\n ) -> Option<Ty> {\n     let substs = match function_id.lookup(db).container {\n-        ContainerId::TraitId(_) => Substs::build_for_def(db, function_id)\n+        AssocContainerId::TraitId(_) => Substs::build_for_def(db, function_id)\n             .push(self_ty.value.clone())\n             .fill_with_unknown()\n             .build(),\n-        ContainerId::ImplId(impl_id) => inherent_impl_substs(db, impl_id, &self_ty)?,\n-        ContainerId::ModuleId(_) | ContainerId::DefWithBodyId(_) => unreachable!(),\n+        AssocContainerId::ImplId(impl_id) => inherent_impl_substs(db, impl_id, &self_ty)?,\n+        AssocContainerId::ContainerId(_) => unreachable!(),\n     };\n     let sig = db.callable_item_signature(function_id.into());\n     Some(sig.params()[0].clone().subst(&substs))"}, {"sha": "dd4fa9664a776b1c94939b40498d6b7f00e08a82", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -9,7 +9,9 @@ use chalk_ir::{\n };\n use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum, TraitDatum};\n \n-use hir_def::{AssocItemId, ContainerId, GenericDefId, ImplId, Lookup, TraitId, TypeAliasId};\n+use hir_def::{\n+    AssocContainerId, AssocItemId, GenericDefId, HasModule, ImplId, Lookup, TraitId, TypeAliasId,\n+};\n use ra_db::{\n     salsa::{InternId, InternKey},\n     CrateId,\n@@ -542,7 +544,7 @@ pub(crate) fn associated_ty_data_query(\n     debug!(\"associated_ty_data {:?}\", id);\n     let type_alias: TypeAliasId = from_chalk(db, id);\n     let trait_ = match type_alias.lookup(db).container {\n-        ContainerId::TraitId(t) => t,\n+        AssocContainerId::TraitId(t) => t,\n         _ => panic!(\"associated type not in trait\"),\n     };\n     let generic_params = generics(db, type_alias.into());\n@@ -591,7 +593,7 @@ pub(crate) fn trait_datum_query(\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let flags = chalk_rust_ir::TraitFlags {\n         auto: trait_data.auto,\n-        upstream: trait_.lookup(db).container.krate != krate,\n+        upstream: trait_.lookup(db).container.module(db).krate != krate,\n         non_enumerable: true,\n         coinductive: false, // only relevant for Chalk testing\n         // FIXME set these flags correctly\n@@ -755,7 +757,7 @@ fn type_alias_associated_ty_value(\n ) -> Arc<AssociatedTyValue<ChalkIr>> {\n     let type_alias_data = db.type_alias_data(type_alias);\n     let impl_id = match type_alias.lookup(db).container {\n-        ContainerId::ImplId(it) => it,\n+        AssocContainerId::ImplId(it) => it,\n         _ => panic!(\"assoc ty value should be in impl\"),\n     };\n "}, {"sha": "0b1806a84fd40faa15e896910d2b60c5443e22b3", "filename": "crates/ra_hir_ty/src/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65377620245bda207145742595a7bd878e14f7ec/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Futils.rs?ref=65377620245bda207145742595a7bd878e14f7ec", "patch": "@@ -9,7 +9,7 @@ use hir_def::{\n     path::Path,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n-    ContainerId, GenericDefId, Lookup, TraitId, TypeAliasId, TypeParamId, VariantId,\n+    AssocContainerId, GenericDefId, Lookup, TraitId, TypeAliasId, TypeParamId, VariantId,\n };\n use hir_expand::name::{name, Name};\n \n@@ -155,8 +155,8 @@ fn parent_generic_def(db: &impl DefDatabase, def: GenericDefId) -> Option<Generi\n     };\n \n     match container {\n-        ContainerId::ImplId(it) => Some(it.into()),\n-        ContainerId::TraitId(it) => Some(it.into()),\n-        ContainerId::ModuleId(_) | ContainerId::DefWithBodyId(_) => None,\n+        AssocContainerId::ImplId(it) => Some(it.into()),\n+        AssocContainerId::TraitId(it) => Some(it.into()),\n+        AssocContainerId::ContainerId(_) => None,\n     }\n }"}]}