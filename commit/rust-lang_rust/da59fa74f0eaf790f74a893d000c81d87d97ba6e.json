{"sha": "da59fa74f0eaf790f74a893d000c81d87d97ba6e", "node_id": "C_kwDOAAsO6NoAKGRhNTlmYTc0ZjBlYWY3OTBmNzRhODkzZDAwMGM4MWQ4N2Q5N2JhNmU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-26T03:18:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-04T13:42:12Z"}, "message": "Use ObligationCtxt in main fn return type check", "tree": {"sha": "5df7a663adb1dcd10ee3faca335c26ce2fd74f25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df7a663adb1dcd10ee3faca335c26ce2fd74f25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da59fa74f0eaf790f74a893d000c81d87d97ba6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da59fa74f0eaf790f74a893d000c81d87d97ba6e", "html_url": "https://github.com/rust-lang/rust/commit/da59fa74f0eaf790f74a893d000c81d87d97ba6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da59fa74f0eaf790f74a893d000c81d87d97ba6e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f18f0a9d4548bc87afff1e4c0fe9081c35002c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f18f0a9d4548bc87afff1e4c0fe9081c35002c2", "html_url": "https://github.com/rust-lang/rust/commit/6f18f0a9d4548bc87afff1e4c0fe9081c35002c2"}], "stats": {"total": 31, "additions": 7, "deletions": 24}, "files": [{"sha": "04c54589d687e14a8e2b776bad0b6eb9dffc8701", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/da59fa74f0eaf790f74a893d000c81d87d97ba6e/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da59fa74f0eaf790f74a893d000c81d87d97ba6e/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=da59fa74f0eaf790f74a893d000c81d87d97ba6e", "patch": "@@ -112,7 +112,6 @@ use rustc_middle::util;\n use rustc_session::config::EntryFnType;\n use rustc_span::{symbol::sym, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n-use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::{\n     self, ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt as _,\n@@ -303,7 +302,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n     }\n \n     let expected_return_type;\n-    if let Some(term_id) = tcx.lang_items().termination() {\n+    if let Some(term_did) = tcx.lang_items().termination() {\n         let return_ty = main_fnsig.output();\n         let return_ty_span = main_fn_return_type_span(tcx, main_def_id).unwrap_or(main_span);\n         if !return_ty.bound_vars().is_empty() {\n@@ -314,33 +313,17 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         }\n         let return_ty = return_ty.skip_binder();\n         tcx.infer_ctxt().enter(|infcx| {\n+            // Main should have no WC, so empty param env is OK here.\n+            let param_env = ty::ParamEnv::empty();\n             let cause = traits::ObligationCause::new(\n                 return_ty_span,\n                 main_diagnostics_hir_id,\n                 ObligationCauseCode::MainFunctionType,\n             );\n-            let mut fulfillment_cx = traits::FulfillmentContext::new();\n-            // normalize any potential projections in the return type, then add\n-            // any possible obligations to the fulfillment context.\n-            // HACK(ThePuzzlemaker) this feels symptomatic of a problem within\n-            // checking trait fulfillment, not this here. I'm not sure why it\n-            // works in the example in `fn test()` given in #88609? This also\n-            // probably isn't the best way to do this.\n-            let InferOk { value: norm_return_ty, obligations } = infcx\n-                .partially_normalize_associated_types_in(\n-                    cause.clone(),\n-                    ty::ParamEnv::empty(),\n-                    return_ty,\n-                );\n-            fulfillment_cx.register_predicate_obligations(&infcx, obligations);\n-            fulfillment_cx.register_bound(\n-                &infcx,\n-                ty::ParamEnv::empty(),\n-                norm_return_ty,\n-                term_id,\n-                cause,\n-            );\n-            let errors = fulfillment_cx.select_all_or_error(&infcx);\n+            let ocx = traits::ObligationCtxt::new(&infcx);\n+            let norm_return_ty = ocx.normalize(cause.clone(), param_env, return_ty);\n+            ocx.register_bound(cause, param_env, norm_return_ty, term_did);\n+            let errors = ocx.select_all_or_error();\n             if !errors.is_empty() {\n                 infcx.report_fulfillment_errors(&errors, None, false);\n                 error = true;"}]}