{"sha": "5b58095f68e971b952310b5a402a287f252936d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNTgwOTVmNjhlOTcxYjk1MjMxMGI1YTQwMmEyODdmMjUyOTM2ZDk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-11T02:25:34Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-22T19:42:15Z"}, "message": "Handle projection obligation errors", "tree": {"sha": "924dcf51edfd5544d8ef4db27ea73a9258f2295f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/924dcf51edfd5544d8ef4db27ea73a9258f2295f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b58095f68e971b952310b5a402a287f252936d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b58095f68e971b952310b5a402a287f252936d9", "html_url": "https://github.com/rust-lang/rust/commit/5b58095f68e971b952310b5a402a287f252936d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b58095f68e971b952310b5a402a287f252936d9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88e4e2a2089992ec6e33e29d66986f7574412dbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/88e4e2a2089992ec6e33e29d66986f7574412dbb", "html_url": "https://github.com/rust-lang/rust/commit/88e4e2a2089992ec6e33e29d66986f7574412dbb"}], "stats": {"total": 108, "additions": 98, "deletions": 10}, "files": [{"sha": "f9abd3185052758220cee090c33c3f66762c558b", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5b58095f68e971b952310b5a402a287f252936d9/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b58095f68e971b952310b5a402a287f252936d9/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=5b58095f68e971b952310b5a402a287f252936d9", "patch": "@@ -164,37 +164,60 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n     /// Pushes the obligations required for `trait_ref` to be WF into `self.out`.\n     fn compute_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>, elaborate: Elaborate) {\n+        let tcx = self.infcx.tcx;\n         let obligations = self.nominal_obligations(trait_ref.def_id, trait_ref.substs);\n-        let assoc_items = self.infcx.tcx.associated_items(trait_ref.def_id);\n+\n         let cause = self.cause(traits::MiscObligation);\n         let param_env = self.param_env;\n \n         if let Elaborate::All = elaborate {\n+            let trait_assoc_items = tcx.associated_items(trait_ref.def_id);\n+\n             let predicates = obligations.iter()\n                 .map(|obligation| obligation.predicate.clone())\n                 .collect();\n-            let implied_obligations = traits::elaborate_predicates(self.infcx.tcx, predicates);\n+            let implied_obligations = traits::elaborate_predicates(tcx, predicates);\n             let item_span: Option<Span> = self.item.map(|i| i.span);\n             let item = &self.item;\n             let implied_obligations = implied_obligations.map(|pred| {\n                 let mut cause = cause.clone();\n-                if let ty::Predicate::Trait(proj) = &pred {\n+                match &pred {\n+                    ty::Predicate::Projection(proj) => {\n+                        if let Some(hir::ItemKind::Impl(.., impl_items)) = item.map(|i| &i.kind) {\n+                            let trait_assoc_item = tcx.associated_item(proj.projection_def_id());\n+                            if let Some(impl_item) = impl_items.iter().filter(|item| {\n+                                item.ident == trait_assoc_item.ident\n+                            }).next() {\n+                                cause.span = impl_item.span;\n+                                cause.code = traits::AssocTypeBound(\n+                                    item_span,\n+                                    trait_assoc_item.ident.span,\n+                                );\n+                            }\n+                        }\n+                    }\n+                    ty::Predicate::Trait(proj) => {\n                     if let (\n                         ty::Projection(ty::ProjectionTy { item_def_id, .. }),\n-                        Some(hir::ItemKind::Impl(.., bounds)),\n+                            Some(hir::ItemKind::Impl(.., impl_items)),\n                      ) = (&proj.skip_binder().self_ty().kind, item.map(|i| &i.kind)) {\n-                        if let Some((bound, assoc_item)) = assoc_items.clone()\n+                            if let Some((impl_item, trait_assoc_item)) = trait_assoc_items.clone()\n                             .filter(|i| i.def_id == *item_def_id)\n                             .next()\n-                            .and_then(|assoc_item| bounds.iter()\n-                                    .filter(|b| b.ident == assoc_item.ident)\n+                                .and_then(|trait_assoc_item| impl_items.iter()\n+                                    .filter(|i| i.ident == trait_assoc_item.ident)\n                                     .next()\n-                                    .map(|bound| (bound, assoc_item)))\n+                                    .map(|impl_item| (impl_item, trait_assoc_item)))\n                         {\n-                            cause.span = bound.span;\n-                            cause.code = traits::AssocTypeBound(item_span, assoc_item.ident.span);\n+                                cause.span = impl_item.span;\n+                                cause.code = traits::AssocTypeBound(\n+                                    item_span,\n+                                    trait_assoc_item.ident.span,\n+                                );\n+                            }\n                         }\n                     }\n+                    _ => {}\n                 }\n                 traits::Obligation::new(cause, param_env, pred)\n             });"}, {"sha": "9360d96f05e174a29c7a38389f3f37c7e6e621a8", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b58095f68e971b952310b5a402a287f252936d9/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b58095f68e971b952310b5a402a287f252936d9/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.rs?ref=5b58095f68e971b952310b5a402a287f252936d9", "patch": "@@ -0,0 +1,11 @@\n+trait Bar {}\n+\n+trait Foo {\n+    type Assoc: Bar;\n+}\n+\n+impl Foo for () {\n+    type Assoc = bool; //~ ERROR the trait bound `bool: Bar` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "62bb9388633b08dda76c4ef7157c324ab659c12d", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b58095f68e971b952310b5a402a287f252936d9/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b58095f68e971b952310b5a402a287f252936d9/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr?ref=5b58095f68e971b952310b5a402a287f252936d9", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `bool: Bar` is not satisfied\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n+   |\n+LL |       type Assoc: Bar;\n+   |            ----- associated type defined here\n+...\n+LL | / impl Foo for () {\n+LL | |     type Assoc = bool;\n+   | |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+LL | | }\n+   | |_- in this `impl` item\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "dc43dbaf54b99b1669ff85137f5f2b80dfec5cb9", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b58095f68e971b952310b5a402a287f252936d9/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b58095f68e971b952310b5a402a287f252936d9/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.rs?ref=5b58095f68e971b952310b5a402a287f252936d9", "patch": "@@ -0,0 +1,20 @@\n+trait Bar {\n+    type Ok;\n+    type Sibling: Bar2<Ok=Self::Ok>;\n+}\n+trait Bar2 {\n+    type Ok;\n+}\n+\n+struct Foo;\n+struct Foo2;\n+\n+impl Bar for Foo {\n+    type Ok = ();  //~ ERROR type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n+    type Sibling = Foo2;\n+}\n+impl Bar2 for Foo2 {\n+    type Ok = u32;\n+}\n+\n+fn main() {}"}, {"sha": "95e8ebdd180b0ac2d657e67f5e97cf27eb942fd4", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b58095f68e971b952310b5a402a287f252936d9/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b58095f68e971b952310b5a402a287f252936d9/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=5b58095f68e971b952310b5a402a287f252936d9", "patch": "@@ -0,0 +1,19 @@\n+error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n+  --> $DIR/point-at-type-on-obligation-failure.rs:13:5\n+   |\n+LL |       type Ok;\n+   |            -- associated type defined here\n+...\n+LL | / impl Bar for Foo {\n+LL | |     type Ok = ();\n+   | |     ^^^^^^^^^^^^^ expected u32, found ()\n+LL | |     type Sibling = Foo2;\n+LL | | }\n+   | |_- in this `impl` item\n+   |\n+   = note: expected type `u32`\n+              found type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}]}