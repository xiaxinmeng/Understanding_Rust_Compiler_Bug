{"sha": "c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMWMyNGRlMzZjMjM4NGM4OGNiZDllOGM2YjljZjIwOTNlYWJiMWE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-10-04T12:18:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-04T12:18:02Z"}, "message": "Merge pull request #2014 from topecongiro/fn-sig\n\nReduce number of arguments in rewrite_fn()", "tree": {"sha": "c60ff964744d975c2b10fffac18c19ff30d55fdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c60ff964744d975c2b10fffac18c19ff30d55fdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a", "html_url": "https://github.com/rust-lang/rust/commit/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aa2d4ebe3aa02999558b8aa1c75cf1a0855cb34", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa2d4ebe3aa02999558b8aa1c75cf1a0855cb34", "html_url": "https://github.com/rust-lang/rust/commit/2aa2d4ebe3aa02999558b8aa1c75cf1a0855cb34"}, {"sha": "921e0c22ab0999e963fef21a0f2e162a9c809542", "url": "https://api.github.com/repos/rust-lang/rust/commits/921e0c22ab0999e963fef21a0f2e162a9c809542", "html_url": "https://github.com/rust-lang/rust/commit/921e0c22ab0999e963fef21a0f2e162a9c809542"}], "stats": {"total": 214, "additions": 120, "deletions": 94}, "files": [{"sha": "e936999ac7d18373c7c431a617df2e451cf29e9d", "filename": "src/items.rs", "status": "modified", "additions": 105, "deletions": 67, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a", "patch": "@@ -10,11 +10,13 @@\n \n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n+use std::borrow::Cow;\n use std::cmp::min;\n \n use syntax::{abi, ast, ptr, symbol};\n use syntax::ast::ImplItem;\n use syntax::codemap::{BytePos, Span};\n+use syntax::visit;\n \n use spanned::Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n@@ -125,22 +127,17 @@ impl Rewrite for ast::Local {\n #[allow(dead_code)]\n struct Item<'a> {\n     keyword: &'static str,\n-    abi: String,\n+    abi: Cow<'static, str>,\n     vis: Option<&'a ast::Visibility>,\n     body: Vec<BodyElement<'a>>,\n     span: Span,\n }\n \n impl<'a> Item<'a> {\n     fn from_foreign_mod(fm: &'a ast::ForeignMod, span: Span, config: &Config) -> Item<'a> {\n-        let abi = if fm.abi == abi::Abi::C && !config.force_explicit_abi() {\n-            \"extern\".into()\n-        } else {\n-            format!(\"extern {}\", fm.abi)\n-        };\n         Item {\n             keyword: \"\",\n-            abi: abi,\n+            abi: format_abi(fm.abi, config.force_explicit_abi(), true),\n             vis: None,\n             body: fm.items\n                 .iter()\n@@ -159,10 +156,92 @@ enum BodyElement<'a> {\n     ForeignItem(&'a ast::ForeignItem),\n }\n \n+/// Represents a fn's signature.\n+pub struct FnSig<'a> {\n+    decl: &'a ast::FnDecl,\n+    generics: &'a ast::Generics,\n+    abi: abi::Abi,\n+    constness: ast::Constness,\n+    defaultness: ast::Defaultness,\n+    unsafety: ast::Unsafety,\n+    visibility: ast::Visibility,\n+}\n+\n+impl<'a> FnSig<'a> {\n+    pub fn new(\n+        decl: &'a ast::FnDecl,\n+        generics: &'a ast::Generics,\n+        vis: ast::Visibility,\n+    ) -> FnSig<'a> {\n+        FnSig {\n+            decl: decl,\n+            generics: generics,\n+            abi: abi::Abi::Rust,\n+            constness: ast::Constness::NotConst,\n+            defaultness: ast::Defaultness::Final,\n+            unsafety: ast::Unsafety::Normal,\n+            visibility: vis,\n+        }\n+    }\n+\n+    pub fn from_method_sig(method_sig: &'a ast::MethodSig) -> FnSig {\n+        FnSig {\n+            unsafety: method_sig.unsafety,\n+            constness: method_sig.constness.node,\n+            defaultness: ast::Defaultness::Final,\n+            abi: method_sig.abi,\n+            decl: &*method_sig.decl,\n+            generics: &method_sig.generics,\n+            visibility: ast::Visibility::Inherited,\n+        }\n+    }\n+\n+    pub fn from_fn_kind(\n+        fn_kind: &'a visit::FnKind,\n+        decl: &'a ast::FnDecl,\n+        defualtness: ast::Defaultness,\n+    ) -> FnSig<'a> {\n+        match *fn_kind {\n+            visit::FnKind::ItemFn(_, generics, unsafety, constness, abi, visibility, _) => FnSig {\n+                decl: decl,\n+                generics: generics,\n+                abi: abi,\n+                constness: constness.node,\n+                defaultness: defualtness,\n+                unsafety: unsafety,\n+                visibility: visibility.clone(),\n+            },\n+            visit::FnKind::Method(_, ref method_sig, vis, _) => {\n+                let mut fn_sig = FnSig::from_method_sig(method_sig);\n+                fn_sig.defaultness = defualtness;\n+                if let Some(vis) = vis {\n+                    fn_sig.visibility = vis.clone();\n+                }\n+                fn_sig\n+            }\n+            _ => unreachable!(),\n+        }\n+    }\n+\n+    fn to_str(&self, context: &RewriteContext) -> String {\n+        let mut result = String::with_capacity(128);\n+        // Vis defaultness constness unsafety abi.\n+        result.push_str(&*format_visibility(&self.visibility));\n+        result.push_str(format_defaultness(self.defaultness));\n+        result.push_str(format_constness(self.constness));\n+        result.push_str(format_unsafety(self.unsafety));\n+        result.push_str(&format_abi(\n+            self.abi,\n+            context.config.force_explicit_abi(),\n+            false,\n+        ));\n+        result\n+    }\n+}\n+\n impl<'a> FmtVisitor<'a> {\n     fn format_item(&mut self, item: Item) {\n         self.buffer.push_str(&item.abi);\n-        self.buffer.push_str(\" \");\n \n         let snippet = self.snippet(item.span);\n         let brace_pos = snippet.find_uncommented(\"{\").unwrap();\n@@ -216,37 +295,24 @@ impl<'a> FmtVisitor<'a> {\n         &mut self,\n         indent: Indent,\n         ident: ast::Ident,\n-        fd: &ast::FnDecl,\n-        generics: &ast::Generics,\n-        unsafety: ast::Unsafety,\n-        constness: ast::Constness,\n-        defaultness: ast::Defaultness,\n-        abi: abi::Abi,\n-        vis: &ast::Visibility,\n+        fn_sig: &FnSig,\n         span: Span,\n         block: &ast::Block,\n     ) -> Option<String> {\n         let context = self.get_context();\n \n-        let block_snippet = self.snippet(mk_sp(block.span.lo(), block.span.hi()));\n-        let has_body = !block_snippet[1..block_snippet.len() - 1].trim().is_empty()\n-            || !context.config.fn_empty_single_line();\n-        let mut newline_brace = newline_for_brace(self.config, &generics.where_clause, has_body);\n+        let has_body =\n+            !is_empty_block(block, self.codemap) || !context.config.fn_empty_single_line();\n+        let mut newline_brace =\n+            newline_for_brace(self.config, &fn_sig.generics.where_clause, has_body);\n \n         let (mut result, force_newline_brace) = try_opt!(rewrite_fn_base(\n             &context,\n             indent,\n             ident,\n-            fd,\n-            generics,\n-            unsafety,\n-            constness,\n-            defaultness,\n-            abi,\n-            vis,\n+            fn_sig,\n             span,\n             newline_brace,\n-            has_body,\n             true,\n         ));\n \n@@ -289,17 +355,10 @@ impl<'a> FmtVisitor<'a> {\n             &context,\n             indent,\n             ident,\n-            &sig.decl,\n-            &sig.generics,\n-            sig.unsafety,\n-            sig.constness.node,\n-            ast::Defaultness::Final,\n-            sig.abi,\n-            &ast::Visibility::Inherited,\n+            &FnSig::from_method_sig(sig),\n             span,\n             false,\n             false,\n-            false,\n         ));\n \n         // Re-attach semicolon\n@@ -1696,38 +1755,24 @@ fn rewrite_fn_base(\n     context: &RewriteContext,\n     indent: Indent,\n     ident: ast::Ident,\n-    fd: &ast::FnDecl,\n-    generics: &ast::Generics,\n-    unsafety: ast::Unsafety,\n-    constness: ast::Constness,\n-    defaultness: ast::Defaultness,\n-    abi: abi::Abi,\n-    vis: &ast::Visibility,\n+    fn_sig: &FnSig,\n     span: Span,\n     newline_brace: bool,\n     has_body: bool,\n-    has_braces: bool,\n ) -> Option<(String, bool)> {\n     let mut force_new_line_for_brace = false;\n \n-    let where_clause = &generics.where_clause;\n+    let where_clause = &fn_sig.generics.where_clause;\n \n     let mut result = String::with_capacity(1024);\n-    // Vis defaultness constness unsafety abi.\n-    result.push_str(&*format_visibility(vis));\n-    result.push_str(format_defaultness(defaultness));\n-    result.push_str(format_constness(constness));\n-    result.push_str(format_unsafety(unsafety));\n-    if abi != abi::Abi::Rust {\n-        result.push_str(&format_abi(abi, context.config.force_explicit_abi()));\n-    }\n+    result.push_str(&fn_sig.to_str(context));\n \n     // fn foo\n     result.push_str(\"fn \");\n     result.push_str(&ident.to_string());\n \n     // Generics.\n-    let overhead = if has_braces && !newline_brace {\n+    let overhead = if has_body && !newline_brace {\n         // 4 = `() {`\n         4\n     } else {\n@@ -1741,8 +1786,9 @@ fn rewrite_fn_base(\n         indent: indent,\n         offset: used_width,\n     };\n+    let fd = fn_sig.decl;\n     let g_span = mk_sp(span.lo(), fd.output.span().lo());\n-    let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n+    let generics_str = try_opt!(rewrite_generics(context, fn_sig.generics, shape, g_span));\n     result.push_str(&generics_str);\n \n     let snuggle_angle_bracket = generics_str\n@@ -1767,7 +1813,7 @@ fn rewrite_fn_base(\n         indent,\n         ret_str_len,\n         newline_brace,\n-        has_braces,\n+        has_body,\n         multi_line_ret_str,\n     ));\n \n@@ -1804,7 +1850,8 @@ fn rewrite_fn_base(\n     }\n \n     // A conservative estimation, to goal is to be over all parens in generics\n-    let args_start = generics\n+    let args_start = fn_sig\n+        .generics\n         .ty_params\n         .last()\n         .map_or(span.lo(), |tp| end_typaram(tp));\n@@ -1987,7 +2034,7 @@ fn rewrite_fn_base(\n         }\n     }\n \n-    let option = WhereClauseOption::new(!has_braces, put_args_in_block && ret_str.is_empty());\n+    let option = WhereClauseOption::new(!has_body, put_args_in_block && ret_str.is_empty());\n     let where_clause_str = try_opt!(rewrite_where_clause(\n         context,\n         where_clause,\n@@ -2757,19 +2804,10 @@ impl Rewrite for ast::ForeignItem {\n                     context,\n                     shape.indent,\n                     self.ident,\n-                    fn_decl,\n-                    generics,\n-                    ast::Unsafety::Normal,\n-                    ast::Constness::NotConst,\n-                    ast::Defaultness::Final,\n-                    // These are not actually rust functions,\n-                    // but we format them as such.\n-                    abi::Abi::Rust,\n-                    &self.vis,\n+                    &FnSig::new(fn_decl, generics, self.vis.clone()),\n                     span,\n                     false,\n                     false,\n-                    false,\n                 ).map(|(s, _)| format!(\"{};\", s))\n             }\n             ast::ForeignItemKind::Static(ref ty, is_mutable) => {"}, {"sha": "1d6c80fb9394470a3bedf66e00fcabd4e4385de0", "filename": "src/types.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a", "patch": "@@ -11,7 +11,6 @@\n use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n-use syntax::abi;\n use syntax::ast::{self, FunctionRetTy, Mutability};\n use syntax::codemap::{self, BytePos, Span};\n use syntax::print::pprust;\n@@ -26,7 +25,7 @@ use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTac\n             SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n-use utils::{colon_spaces, extra_offset, format_mutability, last_line_width, mk_sp};\n+use utils::{colon_spaces, extra_offset, format_abi, format_mutability, last_line_width, mk_sp};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum PathContext {\n@@ -792,12 +791,11 @@ fn rewrite_bare_fn(\n \n     result.push_str(::utils::format_unsafety(bare_fn.unsafety));\n \n-    if bare_fn.abi != abi::Abi::Rust {\n-        result.push_str(&::utils::format_abi(\n-            bare_fn.abi,\n-            context.config.force_explicit_abi(),\n-        ));\n-    }\n+    result.push_str(&format_abi(\n+        bare_fn.abi,\n+        context.config.force_explicit_abi(),\n+        false,\n+    ));\n \n     result.push_str(\"fn\");\n "}, {"sha": "a01e22aae29a029d0cb4a739cf84e81ef57844bd", "filename": "src/utils.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a", "patch": "@@ -88,8 +88,10 @@ pub fn format_mutability(mutability: ast::Mutability) -> &'static str {\n }\n \n #[inline]\n-pub fn format_abi(abi: abi::Abi, explicit_abi: bool) -> Cow<'static, str> {\n-    if abi == abi::Abi::C && !explicit_abi {\n+pub fn format_abi(abi: abi::Abi, explicit_abi: bool, is_mod: bool) -> Cow<'static, str> {\n+    if abi == abi::Abi::Rust && !is_mod {\n+        Cow::from(\"\")\n+    } else if abi == abi::Abi::C && !explicit_abi {\n         Cow::from(\"extern \")\n     } else {\n         Cow::from(format!(\"extern {} \", abi))"}, {"sha": "b4657f2e0d97388d33093f2043750e145a868669", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a", "patch": "@@ -24,7 +24,7 @@ use comment::rewrite_comment;\n use config::{BraceStyle, Config};\n use items::{format_impl, format_struct, format_struct_struct, format_trait,\n             rewrite_associated_impl_type, rewrite_associated_type, rewrite_static,\n-            rewrite_type_alias};\n+            rewrite_type_alias, FnSig};\n use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorPlace,\n             SeparatorTactic};\n use macros::{rewrite_macro, MacroPosition};\n@@ -237,34 +237,22 @@ impl<'a> FmtVisitor<'a> {\n         let indent = self.block_indent;\n         let block;\n         let rewrite = match fk {\n-            visit::FnKind::ItemFn(ident, generics, unsafety, constness, abi, vis, b) => {\n+            visit::FnKind::ItemFn(ident, _, _, _, _, _, b) => {\n                 block = b;\n                 self.rewrite_fn(\n                     indent,\n                     ident,\n-                    fd,\n-                    generics,\n-                    unsafety,\n-                    constness.node,\n-                    defaultness,\n-                    abi,\n-                    vis,\n+                    &FnSig::from_fn_kind(&fk, fd, defaultness),\n                     mk_sp(s.lo(), b.span.lo()),\n                     b,\n                 )\n             }\n-            visit::FnKind::Method(ident, sig, vis, b) => {\n+            visit::FnKind::Method(ident, _, _, b) => {\n                 block = b;\n                 self.rewrite_fn(\n                     indent,\n                     ident,\n-                    fd,\n-                    &sig.generics,\n-                    sig.unsafety,\n-                    sig.constness.node,\n-                    defaultness,\n-                    sig.abi,\n-                    vis.unwrap_or(&ast::Visibility::Inherited),\n+                    &FnSig::from_fn_kind(&fk, fd, defaultness),\n                     mk_sp(s.lo(), b.span.lo()),\n                     b,\n                 )"}]}