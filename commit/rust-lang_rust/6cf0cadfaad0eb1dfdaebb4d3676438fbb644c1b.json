{"sha": "6cf0cadfaad0eb1dfdaebb4d3676438fbb644c1b", "node_id": "C_kwDOAAsO6NoAKDZjZjBjYWRmYWFkMGViMWRmZGFlYmI0ZDM2NzY0MzhmYmI2NDRjMWI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-07T20:51:59Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-07T20:52:37Z"}, "message": "Simplify", "tree": {"sha": "77a7d2ae56d840c8d4eadb4a0f4bc24285363aca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77a7d2ae56d840c8d4eadb4a0f4bc24285363aca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cf0cadfaad0eb1dfdaebb4d3676438fbb644c1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf0cadfaad0eb1dfdaebb4d3676438fbb644c1b", "html_url": "https://github.com/rust-lang/rust/commit/6cf0cadfaad0eb1dfdaebb4d3676438fbb644c1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cf0cadfaad0eb1dfdaebb4d3676438fbb644c1b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c9268c1ee315adf038573890b58ee93c1083501", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9268c1ee315adf038573890b58ee93c1083501", "html_url": "https://github.com/rust-lang/rust/commit/0c9268c1ee315adf038573890b58ee93c1083501"}], "stats": {"total": 79, "additions": 33, "deletions": 46}, "files": [{"sha": "1ef41d90b5122990ac605975a7d486adc4763744", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 33, "deletions": 46, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/6cf0cadfaad0eb1dfdaebb4d3676438fbb644c1b/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf0cadfaad0eb1dfdaebb4d3676438fbb644c1b/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=6cf0cadfaad0eb1dfdaebb4d3676438fbb644c1b", "patch": "@@ -31,30 +31,8 @@ impl ChildBySource for TraitId {\n     fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, file_id: HirFileId) {\n         let data = db.trait_data(*self);\n         // FIXME attribute macros\n-        for (_name, item) in data.items.iter() {\n-            match *item {\n-                AssocItemId::FunctionId(func) => {\n-                    let loc = func.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        res[keys::FUNCTION].insert(src, func)\n-                    }\n-                }\n-                AssocItemId::ConstId(konst) => {\n-                    let loc = konst.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        res[keys::CONST].insert(src, konst)\n-                    }\n-                }\n-                AssocItemId::TypeAliasId(ty) => {\n-                    let loc = ty.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        res[keys::TYPE_ALIAS].insert(src, ty)\n-                    }\n-                }\n-            }\n+        for &(_, item) in data.items.iter() {\n+            child_by_source_assoc_items(db, res, file_id, item);\n         }\n     }\n }\n@@ -64,28 +42,37 @@ impl ChildBySource for ImplId {\n         let data = db.impl_data(*self);\n         // FIXME attribute macros\n         for &item in data.items.iter() {\n-            match item {\n-                AssocItemId::FunctionId(func) => {\n-                    let loc = func.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        res[keys::FUNCTION].insert(src, func)\n-                    }\n-                }\n-                AssocItemId::ConstId(konst) => {\n-                    let loc = konst.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        res[keys::CONST].insert(src, konst)\n-                    }\n-                }\n-                AssocItemId::TypeAliasId(ty) => {\n-                    let loc = ty.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        res[keys::TYPE_ALIAS].insert(src, ty)\n-                    }\n-                }\n+            child_by_source_assoc_items(db, res, file_id, item);\n+        }\n+    }\n+}\n+\n+fn child_by_source_assoc_items(\n+    db: &dyn DefDatabase,\n+    res: &mut DynMap,\n+    file_id: HirFileId,\n+    item: AssocItemId,\n+) {\n+    match item {\n+        AssocItemId::FunctionId(func) => {\n+            let loc = func.lookup(db);\n+            if loc.id.file_id() == file_id {\n+                let src = loc.source(db);\n+                res[keys::FUNCTION].insert(src, func)\n+            }\n+        }\n+        AssocItemId::ConstId(konst) => {\n+            let loc = konst.lookup(db);\n+            if loc.id.file_id() == file_id {\n+                let src = loc.source(db);\n+                res[keys::CONST].insert(src, konst)\n+            }\n+        }\n+        AssocItemId::TypeAliasId(ty) => {\n+            let loc = ty.lookup(db);\n+            if loc.id.file_id() == file_id {\n+                let src = loc.source(db);\n+                res[keys::TYPE_ALIAS].insert(src, ty)\n             }\n         }\n     }"}]}