{"sha": "27694abd9473c53cee4549dfe5ef5d28d0c01bed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3Njk0YWJkOTQ3M2M1M2NlZTQ1NDlkZmU1ZWY1ZDI4ZDBjMDFiZWQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-22T21:14:38Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-22T21:14:38Z"}, "message": "Merge #138\n\n138: Fix some clippy lints r=matklad a=alanhdu\n\nI went ahead and fixed all the clippy lints (there were a couple I thought would be better unfixed and added `cfg` statements to allow them) and also re-enabled clippy and rustfmt in CI.\r\n\r\nThey were disabled with `no time to explain, disable clippy checks`, so hopefully this won't go against whatever the reason at the time was :laughing:.\r\n\r\nOne question about the CI though: right now, it's an allowed failure that runs against the latest nightly each time. Would it be better to pin it to a specific nightly (or use the `beta` versions) to lower the churn?\n\nCo-authored-by: Alan Du <alanhdu@gmail.com>", "tree": {"sha": "6f51587dc28fc8fe28c0971a810541421ea2d829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f51587dc28fc8fe28c0971a810541421ea2d829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27694abd9473c53cee4549dfe5ef5d28d0c01bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27694abd9473c53cee4549dfe5ef5d28d0c01bed", "html_url": "https://github.com/rust-lang/rust/commit/27694abd9473c53cee4549dfe5ef5d28d0c01bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27694abd9473c53cee4549dfe5ef5d28d0c01bed/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "5a64b9a811554473e65db7e7ae515079ca48c70b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a64b9a811554473e65db7e7ae515079ca48c70b", "html_url": "https://github.com/rust-lang/rust/commit/5a64b9a811554473e65db7e7ae515079ca48c70b"}, {"sha": "dc9ce8ff7494f641c7102785cdef95489f2fc3d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc9ce8ff7494f641c7102785cdef95489f2fc3d6", "html_url": "https://github.com/rust-lang/rust/commit/dc9ce8ff7494f641c7102785cdef95489f2fc3d6"}], "stats": {"total": 135, "additions": 67, "deletions": 68}, "files": [{"sha": "956cbe162fece535d76d7cb2bc721fe0879e617f", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -87,12 +87,18 @@ salsa::query_group! {\n     }\n }\n \n-#[derive(Default, Debug, PartialEq, Eq)]\n+#[derive(Default, Debug, Eq)]\n pub(crate) struct FileSet {\n     pub(crate) files: FxHashSet<FileId>,\n     pub(crate) resolver: FileResolverImp,\n }\n \n+impl PartialEq for FileSet {\n+    fn eq(&self, other: &FileSet) -> bool {\n+        self.files == other.files && self.resolver == other.resolver\n+    }\n+}\n+\n impl Hash for FileSet {\n     fn hash<H: Hasher>(&self, hasher: &mut H) {\n         let mut files = self.files.iter().cloned().collect::<Vec<_>>();"}, {"sha": "92da264939bb78cc6afbbaa881a7ff320b924b3d", "filename": "crates/ra_analysis/src/descriptors.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_analysis%2Fsrc%2Fdescriptors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_analysis%2Fsrc%2Fdescriptors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -22,7 +22,7 @@ impl ModuleDescriptor {\n     }\n }\n \n-fn modules<'a>(root: ast::Root<'a>) -> impl Iterator<Item = (SmolStr, ast::Module<'a>)> {\n+fn modules(root: ast::Root<'_>) -> impl Iterator<Item = (SmolStr, ast::Module<'_>)> {\n     root.modules().filter_map(|module| {\n         let name = module.name()?.text();\n         if !module.has_semi() {\n@@ -184,8 +184,7 @@ impl Link {\n         root: ast::Root<'a>,\n     ) -> ast::Module<'a> {\n         modules(root)\n-            .filter(|(name, _)| name == &tree.link(self).name)\n-            .next()\n+            .find(|(name, _)| name == &tree.link(self).name)\n             .unwrap()\n             .1\n     }"}, {"sha": "19662753901da9ce1f3e865fccb35b59b5dd2014", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -426,12 +426,12 @@ impl AnalysisImpl {\n                                     .text()\n                                     .slice(range_search)\n                                     .to_string()\n-                                    .matches(\",\")\n+                                    .matches(',')\n                                     .count();\n \n                                 // If we have a method call eat the first param since it's just self.\n                                 if has_self {\n-                                    commas = commas + 1;\n+                                    commas += 1;\n                                 }\n \n                                 current_parameter = Some(commas);"}, {"sha": "9d8df25c3adb5a3599c9cb2384cbe4c39e52335a", "filename": "crates/ra_editor/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -63,7 +63,7 @@ fn extend_ws(root: SyntaxNodeRef, ws: SyntaxNodeRef, offset: TextUnit) -> TextRa\n     let prefix = TextRange::from_to(ws.range().start(), offset) - ws.range().start();\n     let ws_suffix = &ws_text.as_str()[suffix];\n     let ws_prefix = &ws_text.as_str()[prefix];\n-    if ws_text.contains(\"\\n\") && !ws_suffix.contains(\"\\n\") {\n+    if ws_text.contains('\\n') && !ws_suffix.contains('\\n') {\n         if let Some(node) = ws.next_sibling() {\n             let start = match ws_prefix.rfind('\\n') {\n                 Some(idx) => ws.range().start() + TextUnit::from((idx + 1) as u32),"}, {"sha": "d0d4ed3d3db0a83fd6300ec23b38044b277983d5", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -38,12 +38,12 @@ pub fn folding_ranges(file: &File) -> Vec<Fold> {\n             continue;\n         }\n         if node.kind() == COMMENT {\n-            contiguous_range_for_comment(node, &mut visited_comments).map(|range| {\n+            if let Some(range) = contiguous_range_for_comment(node, &mut visited_comments) {\n                 res.push(Fold {\n                     range,\n                     kind: FoldKind::Comment,\n                 })\n-            });\n+            }\n         }\n     }\n "}, {"sha": "9abbb0d0955185edf22a6f1559559dbfffd071e6", "filename": "crates/ra_editor/src/line_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fline_index.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -29,10 +29,10 @@ impl LineIndex {\n         let line = self.newlines.upper_bound(&offset) - 1;\n         let line_start_offset = self.newlines[line];\n         let col = offset - line_start_offset;\n-        return LineCol {\n+        LineCol {\n             line: line as u32,\n             col,\n-        };\n+        }\n     }\n \n     pub fn offset(&self, line_col: LineCol) -> TextUnit {"}, {"sha": "956ee0e2f18a5baf359f995e20567b67b06e2fd2", "filename": "crates/ra_editor/src/scope/mod_scope.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_editor%2Fsrc%2Fscope%2Fmod_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_editor%2Fsrc%2Fscope%2Fmod_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Fmod_scope.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -22,14 +22,14 @@ impl ModuleScope {\n         let mut entries = Vec::new();\n         for item in items {\n             let entry = match item {\n-                ast::ModuleItem::StructDef(item) => Entry::new(item),\n-                ast::ModuleItem::EnumDef(item) => Entry::new(item),\n-                ast::ModuleItem::FnDef(item) => Entry::new(item),\n-                ast::ModuleItem::ConstDef(item) => Entry::new(item),\n-                ast::ModuleItem::StaticDef(item) => Entry::new(item),\n-                ast::ModuleItem::TraitDef(item) => Entry::new(item),\n-                ast::ModuleItem::TypeDef(item) => Entry::new(item),\n-                ast::ModuleItem::Module(item) => Entry::new(item),\n+                ast::ModuleItem::StructDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::EnumDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::FnDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::ConstDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::StaticDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::TraitDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::TypeDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::Module(item) => Entry::new_item(item),\n                 ast::ModuleItem::UseItem(item) => {\n                     if let Some(tree) = item.use_tree() {\n                         collect_imports(tree, &mut entries);\n@@ -50,7 +50,7 @@ impl ModuleScope {\n }\n \n impl Entry {\n-    fn new<'a>(item: impl ast::NameOwner<'a>) -> Option<Entry> {\n+    fn new_item<'a>(item: impl ast::NameOwner<'a>) -> Option<Entry> {\n         let name = item.name()?;\n         Some(Entry {\n             node: name.syntax().owned(),"}, {"sha": "0bab9dd6725e5c831f9075db77f547968c8bc0d6", "filename": "crates/ra_editor/src/symbols.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fsymbols.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -54,15 +54,15 @@ pub fn file_structure(file: &File) -> Vec<StructureNode> {\n     let mut res = Vec::new();\n     let mut stack = Vec::new();\n \n+\n     for event in file.syntax().preorder() {\n         match event {\n-            WalkEvent::Enter(node) => match structure_node(node) {\n-                Some(mut symbol) => {\n+            WalkEvent::Enter(node) => {\n+                if let Some(mut symbol) = structure_node(node) {\n                     symbol.parent = stack.last().map(|&n| n);\n                     stack.push(res.len());\n                     res.push(symbol);\n                 }\n-                None => (),\n             },\n             WalkEvent::Leave(node) => {\n                 if structure_node(node).is_some() {"}, {"sha": "5a457d14829b4793c919429f50735c9b7662dee6", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -58,7 +58,7 @@ pub fn join_lines(file: &File, range: TextRange) -> LocalEdit {\n pub fn on_enter(file: &File, offset: TextUnit) -> Option<LocalEdit> {\n     let comment = find_leaf_at_offset(file.syntax(), offset)\n         .left_biased()\n-        .and_then(|it| ast::Comment::cast(it))?;\n+        .and_then(ast::Comment::cast)?;\n \n     if let ast::CommentFlavor::Multiline = comment.flavor() {\n         return None;"}, {"sha": "bc0cf7c688259e09571be1b9215807021c84e946", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -65,7 +65,7 @@ impl ConvWith for TextUnit {\n     fn conv_with(self, line_index: &LineIndex) -> Position {\n         let line_col = line_index.line_col(self);\n         // TODO: UTF-16\n-        Position::new(line_col.line as u64, u32::from(line_col.col) as u64)\n+        Position::new(u64::from(line_col.line), u64::from(u32::from(line_col.col)))\n     }\n }\n \n@@ -192,7 +192,7 @@ impl TryConvWith for SourceChange {\n                     .map(|it| it.edits.as_slice())\n                     .unwrap_or(&[]);\n                 let line_col = translate_offset_with_edit(&*line_index, pos.offset, edits);\n-                let position = Position::new(line_col.line as u64, u32::from(line_col.col) as u64);\n+                let position = Position::new(u64::from(line_col.line), u64::from(u32::from(line_col.col)));\n                 Some(TextDocumentPositionParams {\n                     text_document: TextDocumentIdentifier::new(pos.file_id.try_conv_with(world)?),\n                     position,"}, {"sha": "c07eb01404dcb63bf1e9ca30eca66ce8b94c2189", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -18,7 +18,7 @@ fn main() -> Result<()> {\n         .directory(\"log\")\n         .start()?;\n     info!(\"lifecycle: server started\");\n-    match ::std::panic::catch_unwind(|| main_inner()) {\n+    match ::std::panic::catch_unwind(main_inner) {\n         Ok(res) => {\n             info!(\"lifecycle: terminating process with {:?}\", res);\n             res"}, {"sha": "11f34eb9354543c0077173055e56a3198183602c", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -154,8 +154,8 @@ pub fn handle_workspace_symbol(\n     world: ServerWorld,\n     params: req::WorkspaceSymbolParams,\n ) -> Result<Option<Vec<SymbolInformation>>> {\n-    let all_symbols = params.query.contains(\"#\");\n-    let libs = params.query.contains(\"*\");\n+    let all_symbols = params.query.contains('#');\n+    let libs = params.query.contains('*');\n     let query = {\n         let query: String = params\n             .query\n@@ -279,8 +279,8 @@ pub fn handle_runnables(\n                 .filter_map(|ws| {\n                     let tgt = ws.target_by_root(path)?;\n                     Some((\n-                        tgt.package(ws).name(ws).clone(),\n-                        tgt.name(ws).clone(),\n+                        tgt.package(ws).name(ws),\n+                        tgt.name(ws),\n                         tgt.kind(ws),\n                     ))\n                 })"}, {"sha": "cabb336a3131d8b3c1c282756e1cc810b9139554", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -173,7 +173,6 @@ pub fn workspace_loader() -> (Worker<PathBuf, Result<CargoWorkspace>>, ThreadWat\n         1,\n         |input_receiver, output_sender| {\n             input_receiver\n-                .into_iter()\n                 .map(|path| CargoWorkspace::from_cargo_metadata(path.as_path()))\n                 .for_each(|it| output_sender.send(it))\n         },"}, {"sha": "69b2a1cd1597a0f17ac3835b66a73cc7c777bc59", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -73,9 +73,7 @@ impl ServerWorldState {\n             events\n                 .into_iter()\n                 .map(|event| {\n-                    let text = match event.kind {\n-                        FileEventKind::Add(text) => text,\n-                    };\n+                    let FileEventKind::Add(text) = event.kind;\n                     (event.path, text)\n                 })\n                 .map(|(path, text)| (pm.get_or_insert(path, Root::Lib), text))"}, {"sha": "5143c77ae68b7e16bbffdfadc5d00acc1f0e2760", "filename": "crates/ra_lsp_server/src/thread_watcher.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fthread_watcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fthread_watcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fthread_watcher.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -17,8 +17,7 @@ impl<I, O> Worker<I, O> {\n         I: Send + 'static,\n         O: Send + 'static,\n     {\n-        let ((inp, out), inp_r, out_s) = worker_chan(buf);\n-        let worker = Worker { inp, out };\n+        let (worker, inp_r, out_s) = worker_chan(buf);\n         let watcher = ThreadWatcher::spawn(name, move || f(inp_r, out_s));\n         (worker, watcher)\n     }\n@@ -67,11 +66,14 @@ impl ThreadWatcher {\n /// Sets up worker channels in a deadlock-avoind way.\n /// If one sets both input and output buffers to a fixed size,\n /// a worker might get stuck.\n-fn worker_chan<I, O>(buf: usize) -> ((Sender<I>, Receiver<O>), Receiver<I>, Sender<O>) {\n+fn worker_chan<I, O>(buf: usize) -> (Worker<I, O>, Receiver<I>, Sender<O>) {\n     let (input_sender, input_receiver) = bounded::<I>(buf);\n     let (output_sender, output_receiver) = unbounded::<O>();\n     (\n-        (input_sender, output_receiver),\n+        Worker {\n+            inp: input_sender,\n+            out: output_receiver,\n+        },\n         input_receiver,\n         output_sender,\n     )"}, {"sha": "6e317d85462224cc629988a8b734eeba92dad81c", "filename": "crates/ra_lsp_server/src/vfs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_lsp_server%2Fsrc%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fvfs.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -24,7 +24,6 @@ pub fn roots_loader() -> (Worker<PathBuf, (PathBuf, Vec<FileEvent>)>, ThreadWatc\n         128,\n         |input_receiver, output_sender| {\n             input_receiver\n-                .into_iter()\n                 .map(|path| {\n                     debug!(\"loading {} ...\", path.as_path().display());\n                     let events = load_root(path.as_path());"}, {"sha": "d82c42b3e469d22eb12ab830a2dd4d6b185513aa", "filename": "crates/ra_syntax/src/algo/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -30,7 +30,8 @@ pub fn find_leaf_at_offset(node: SyntaxNodeRef, offset: TextUnit) -> LeafAtOffse\n     let left = children.next().unwrap();\n     let right = children.next();\n     assert!(children.next().is_none());\n-    return if let Some(right) = right {\n+\n+    if let Some(right) = right {\n         match (\n             find_leaf_at_offset(left, offset),\n             find_leaf_at_offset(right, offset),\n@@ -42,10 +43,10 @@ pub fn find_leaf_at_offset(node: SyntaxNodeRef, offset: TextUnit) -> LeafAtOffse\n         }\n     } else {\n         find_leaf_at_offset(left, offset)\n-    };\n+    }\n }\n \n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Debug)]\n pub enum LeafAtOffset<'a> {\n     None,\n     Single(SyntaxNodeRef<'a>),"}, {"sha": "900426a8a91a9a9fe8e1acc27e2f6eb70505230e", "filename": "crates/ra_syntax/src/ast/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -259,9 +259,8 @@ impl<'a, N: AstNode<'a>> Iterator for AstChildren<'a, N> {\n     type Item = N;\n     fn next(&mut self) -> Option<N> {\n         loop {\n-            match N::cast(self.inner.next()?) {\n-                Some(n) => return Some(n),\n-                None => (),\n+            if let Some(n) = N::cast(self.inner.next()?) {\n+                return Some(n);\n             }\n         }\n     }"}, {"sha": "04087fd6004b9d61212e920f8c1ca71048fd6e4e", "filename": "crates/ra_syntax/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -62,9 +62,8 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet = token_set_union![\n const EXPR_RECOVERY_SET: TokenSet = token_set![LET_KW];\n \n pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n-    match literal(p) {\n-        Some(m) => return Some(m),\n-        None => (),\n+    if let Some(m) = literal(p) {\n+        return Some(m);\n     }\n     if paths::is_path_start(p) || p.at(L_ANGLE) {\n         return Some(path_expr(p, r));"}, {"sha": "06c6b5e6ebf01abaa7ea34250eceaddf5d4f993e", "filename": "crates/ra_syntax/src/grammar/items/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -352,7 +352,7 @@ fn macro_call(p: &mut Parser) -> BlockLike {\n pub(super) fn macro_call_after_excl(p: &mut Parser) -> BlockLike {\n     p.expect(EXCL);\n     p.eat(IDENT);\n-    let flavor = match p.current() {\n+    match p.current() {\n         L_CURLY => {\n             token_tree(p);\n             BlockLike::Block\n@@ -365,9 +365,7 @@ pub(super) fn macro_call_after_excl(p: &mut Parser) -> BlockLike {\n             p.error(\"expected `{`, `[`, `(`\");\n             BlockLike::NotBlock\n         }\n-    };\n-\n-    flavor\n+    }\n }\n \n pub(crate) fn token_tree(p: &mut Parser) {"}, {"sha": "10fa0e0be14bd1b6205f4555b4f650f5773adc7f", "filename": "crates/ra_syntax/src/grammar/patterns.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -49,9 +49,8 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n     //         \"hello\" => (),\n     //     }\n     // }\n-    match expressions::literal(p) {\n-        Some(m) => return Some(m),\n-        None => (),\n+    if let Some(m) = expressions::literal(p) {\n+        return Some(m);\n     }\n \n     let m = match la0 {"}, {"sha": "4c291b9c4dfe6fa4b59295d425bf395398ee0a86", "filename": "crates/ra_syntax/src/lexer/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Flexer%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Flexer%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flexer%2Fptr.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -31,7 +31,7 @@ impl<'s> Ptr<'s> {\n     /// For example, 0 will return the current token, 1 will return the next, etc.\n     pub fn nth(&self, n: u32) -> Option<char> {\n         let mut chars = self.chars().peekable();\n-        chars.by_ref().skip(n as usize).next()\n+        chars.by_ref().nth(n as usize)\n     }\n \n     /// Checks whether the current character is `c`."}, {"sha": "eae01b1d5e72d2fc92f25d0ee0fc8ee8471668ca", "filename": "crates/ra_syntax/src/reparsing.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Freparsing.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -98,17 +98,18 @@ fn is_contextual_kw(text: &str) -> bool {\n     }\n }\n \n-fn find_reparsable_node<'node>(\n-    node: SyntaxNodeRef<'node>,\n+type ParseFn = fn(&mut Parser);\n+fn find_reparsable_node(\n+    node: SyntaxNodeRef<'_>,\n     range: TextRange,\n-) -> Option<(SyntaxNodeRef<'node>, fn(&mut Parser))> {\n+) -> Option<(SyntaxNodeRef<'_>, ParseFn)> {\n     let node = algo::find_covering_node(node, range);\n     return node\n         .ancestors()\n         .filter_map(|node| reparser(node).map(|r| (node, r)))\n         .next();\n \n-    fn reparser(node: SyntaxNodeRef) -> Option<fn(&mut Parser)> {\n+    fn reparser(node: SyntaxNodeRef) -> Option<ParseFn> {\n         let res = match node.kind() {\n             BLOCK => grammar::block,\n             NAMED_FIELD_DEF_LIST => grammar::named_field_def_list,\n@@ -134,7 +135,7 @@ fn find_reparsable_node<'node>(\n }\n \n fn is_balanced(tokens: &[Token]) -> bool {\n-    if tokens.len() == 0\n+    if tokens.is_empty()\n         || tokens.first().unwrap().kind != L_CURLY\n         || tokens.last().unwrap().kind != R_CURLY\n     {"}, {"sha": "8ee02724da1a851decaadfd632471712b829aad1", "filename": "crates/ra_syntax/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Fra_syntax%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Futils.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -5,7 +5,7 @@ use std::fmt::Write;\n \n /// Parse a file and create a string representation of the resulting parse tree.\n pub fn dump_tree(syntax: SyntaxNodeRef) -> String {\n-    let mut errors: Vec<_> = syntax.root_data().iter().cloned().collect();\n+    let mut errors: Vec<_> = syntax.root_data().to_vec();\n     errors.sort_by_key(|e| e.offset);\n     let mut err_pos = 0;\n     let mut level = 0;\n@@ -42,7 +42,7 @@ pub fn dump_tree(syntax: SyntaxNodeRef) -> String {\n         writeln!(buf, \"err: `{}`\", err.msg).unwrap();\n     }\n \n-    return buf;\n+    buf\n }\n \n pub fn check_fuzz_invariants(text: &str) {"}, {"sha": "7c5410d3c7865ecded0a28b9ed111f5ee2c26aa1", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -50,7 +50,7 @@ pub fn collect_tests(s: &str) -> Vec<(usize, Test)> {\n             block.map(|(_, line)| line).chain(::std::iter::once(\"\")),\n             \"\\n\",\n         );\n-        assert!(!text.trim().is_empty() && text.ends_with(\"\\n\"));\n+        assert!(!text.trim().is_empty() && text.ends_with('\\n'));\n         res.push((start_line, Test { name, text }))\n     }\n     res"}, {"sha": "fdb443690bd97b03ff3077ee83833f9958a598e5", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27694abd9473c53cee4549dfe5ef5d28d0c01bed/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=27694abd9473c53cee4549dfe5ef5d28d0c01bed", "patch": "@@ -112,9 +112,8 @@ fn existing_tests(dir: &Path) -> Result<HashMap<String, (PathBuf, Test)>> {\n             name: name.clone(),\n             text,\n         };\n-        match res.insert(name, (path, test)) {\n-            Some(old) => println!(\"Duplicate test: {:?}\", old),\n-            None => (),\n+        if let Some(old) = res.insert(name, (path, test)) {\n+            println!(\"Duplicate test: {:?}\", old);\n         }\n     }\n     Ok(res)"}]}