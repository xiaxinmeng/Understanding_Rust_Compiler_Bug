{"sha": "2fc9064921ce0afd2c07c5b576f95c7adf731541", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYzkwNjQ5MjFjZTBhZmQyYzA3YzViNTc2Zjk1YzdhZGY3MzE1NDE=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-17T07:37:42Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-17T07:48:40Z"}, "message": "rewrite the test and fix a minor fp\n\n* rewrite the test for `declare_interior_mutable_const from scratch`\n\n* fix a minor false positive where `Cell<\"const T>` gets linted twice", "tree": {"sha": "12b05cc8c9e4b85a240a3ce91cc31e3506095c62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12b05cc8c9e4b85a240a3ce91cc31e3506095c62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fc9064921ce0afd2c07c5b576f95c7adf731541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc9064921ce0afd2c07c5b576f95c7adf731541", "html_url": "https://github.com/rust-lang/rust/commit/2fc9064921ce0afd2c07c5b576f95c7adf731541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fc9064921ce0afd2c07c5b576f95c7adf731541/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d655c0a938c16d30ae6824713165c749eff7210f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d655c0a938c16d30ae6824713165c749eff7210f", "html_url": "https://github.com/rust-lang/rust/commit/d655c0a938c16d30ae6824713165c749eff7210f"}], "stats": {"total": 241, "additions": 166, "deletions": 75}, "files": [{"sha": "bb44eeb6adc51b30b056e80306b4448479161427", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2fc9064921ce0afd2c07c5b576f95c7adf731541/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc9064921ce0afd2c07c5b576f95c7adf731541/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=2fc9064921ce0afd2c07c5b576f95c7adf731541", "patch": "@@ -9,8 +9,7 @@ use rustc_hir::{Expr, ExprKind, ImplItem, ImplItemKind, Item, ItemKind, Node, Tr\n use rustc_infer::traits::specialization_graph;\n use rustc_lint::{LateContext, LateLintPass, Lint};\n use rustc_middle::ty::adjustment::Adjust;\n-use rustc_middle::ty::fold::TypeFoldable as _;\n-use rustc_middle::ty::{AssocKind, Ty, TypeFlags};\n+use rustc_middle::ty::{AssocKind, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use rustc_typeck::hir_ty_to_ty;\n@@ -178,15 +177,18 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                         if let Some(of_trait_def_id) = of_trait_ref.trait_def_id();\n                         if let Some(of_assoc_item) = specialization_graph::Node::Trait(of_trait_def_id)\n                             .item(cx.tcx, impl_item.ident, AssocKind::Const, of_trait_def_id);\n-                        if cx.tcx\n-                            // Normalize assoc types because ones originated from generic params\n-                            // bounded other traits could have their bound at the trait defs;\n-                            // and, in that case, the definition is *not* generic.\n-                            .normalize_erasing_regions(\n-                                cx.tcx.param_env(of_trait_def_id),\n-                                cx.tcx.type_of(of_assoc_item.def_id),\n-                            )\n-                            .has_type_flags(TypeFlags::HAS_PROJECTION | TypeFlags::HAS_TY_PARAM);\n+                        if cx\n+                            .tcx\n+                            .layout_of(cx.tcx.param_env(of_trait_def_id).and(\n+                                // Normalize assoc types because ones originated from generic params\n+                                // bounded other traits could have their bound at the trait defs;\n+                                // and, in that case, the definition is *not* generic.\n+                                cx.tcx.normalize_erasing_regions(\n+                                    cx.tcx.param_env(of_trait_def_id),\n+                                    cx.tcx.type_of(of_assoc_item.def_id),\n+                                ),\n+                            ))\n+                            .is_err();\n                         then {\n                             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n                             let normalized = cx.tcx.normalize_erasing_regions(cx.param_env, ty);"}, {"sha": "646d3ec8b472ef6c25f25003e6a774b333a4a388", "filename": "tests/ui/declare_interior_mutable_const.rs", "status": "modified", "additions": 115, "deletions": 44, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/2fc9064921ce0afd2c07c5b576f95c7adf731541/tests%2Fui%2Fdeclare_interior_mutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc9064921ce0afd2c07c5b576f95c7adf731541/tests%2Fui%2Fdeclare_interior_mutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const.rs?ref=2fc9064921ce0afd2c07c5b576f95c7adf731541", "patch": "@@ -34,64 +34,135 @@ static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);\n #[allow(clippy::declare_interior_mutable_const)]\n const ONCE_INIT: Once = Once::new();\n \n-struct Wrapper<T>(T);\n-\n-trait Trait<T: Trait2<AssocType5 = AtomicUsize>> {\n-    type AssocType;\n-    type AssocType2;\n-    type AssocType3;\n-\n+// a constant whose type is a concrete type should be linted at the definition site.\n+trait ConcreteTypes {\n     const ATOMIC: AtomicUsize; //~ ERROR interior mutable\n     const INTEGER: u64;\n     const STRING: String;\n-    const SELF: Self;\n-    const INPUT: T;\n-    const INPUT_ASSOC: T::AssocType4;\n-    const INPUT_ASSOC_2: T::AssocType5; //~ ERROR interior mutable\n-    const ASSOC: Self::AssocType;\n-    const ASSOC_2: Self::AssocType2;\n-    const WRAPPED_ASSOC_2: Wrapper<Self::AssocType2>;\n-    const WRAPPED_ASSOC_3: Wrapper<Self::AssocType3>;\n-\n-    const AN_INPUT: T = Self::INPUT;\n-    declare_const!(ANOTHER_INPUT: T = Self::INPUT);\n     declare_const!(ANOTHER_ATOMIC: AtomicUsize = Self::ATOMIC); //~ ERROR interior mutable\n }\n \n-trait Trait2 {\n-    type AssocType4;\n-    type AssocType5;\n+impl ConcreteTypes for u64 {\n+    const ATOMIC: AtomicUsize = AtomicUsize::new(9);\n+    const INTEGER: u64 = 10;\n+    const STRING: String = String::new();\n+}\n \n-    const SELF_2: Self;\n-    const ASSOC_4: Self::AssocType4;\n+// a helper trait used below\n+trait ConstDefault {\n+    const DEFAULT: Self;\n }\n \n-impl<T: Trait2<AssocType5 = AtomicUsize>> Trait<T> for u64 {\n-    type AssocType = u16;\n-    type AssocType2 = AtomicUsize;\n-    type AssocType3 = T;\n+// a constant whose type is a generic type should be linted at the implementation site.\n+trait GenericTypes<T, U> {\n+    const TO_REMAIN_GENERIC: T;\n+    const TO_BE_CONCRETE: U;\n \n-    const ATOMIC: AtomicUsize = AtomicUsize::new(9);\n-    const INTEGER: u64 = 10;\n-    const STRING: String = String::new();\n-    const SELF: Self = 11;\n-    const INPUT: T = T::SELF_2;\n-    const INPUT_ASSOC: T::AssocType4 = T::ASSOC_4;\n-    const INPUT_ASSOC_2: T::AssocType5 = AtomicUsize::new(16);\n-    const ASSOC: Self::AssocType = 13;\n-    const ASSOC_2: Self::AssocType2 = AtomicUsize::new(15); //~ ERROR interior mutable\n-    const WRAPPED_ASSOC_2: Wrapper<Self::AssocType2> = Wrapper(AtomicUsize::new(16)); //~ ERROR interior mutable\n-    const WRAPPED_ASSOC_3: Wrapper<Self::AssocType3> = Wrapper(T::SELF_2);\n+    const HAVING_DEFAULT: T = Self::TO_REMAIN_GENERIC;\n+    declare_const!(IN_MACRO: T = Self::TO_REMAIN_GENERIC);\n+}\n+\n+impl<T: ConstDefault> GenericTypes<T, AtomicUsize> for u64 {\n+    const TO_REMAIN_GENERIC: T = T::DEFAULT;\n+    const TO_BE_CONCRETE: AtomicUsize = AtomicUsize::new(11); //~ ERROR interior mutable\n+}\n+\n+// a helper type used below\n+struct Wrapper<T>(T);\n+\n+// a constant whose type is an associated type should be linted at the implementation site, too.\n+trait AssocTypes {\n+    type ToBeFrozen;\n+    type ToBeUnfrozen;\n+    type ToBeGenericParam;\n+\n+    const TO_BE_FROZEN: Self::ToBeFrozen;\n+    const TO_BE_UNFROZEN: Self::ToBeUnfrozen;\n+    const WRAPPED_TO_BE_UNFROZEN: Wrapper<Self::ToBeUnfrozen>;\n+    // to ensure it can handle things when a generic type remains after normalization.\n+    const WRAPPED_TO_BE_GENERIC_PARAM: Wrapper<Self::ToBeGenericParam>;\n+}\n+\n+impl<T: ConstDefault> AssocTypes for Vec<T> {\n+    type ToBeFrozen = u16;\n+    type ToBeUnfrozen = AtomicUsize;\n+    type ToBeGenericParam = T;\n+\n+    const TO_BE_FROZEN: Self::ToBeFrozen = 12;\n+    const TO_BE_UNFROZEN: Self::ToBeUnfrozen = AtomicUsize::new(13); //~ ERROR interior mutable\n+    const WRAPPED_TO_BE_UNFROZEN: Wrapper<Self::ToBeUnfrozen> = Wrapper(AtomicUsize::new(14)); //~ ERROR interior mutable\n+    const WRAPPED_TO_BE_GENERIC_PARAM: Wrapper<Self::ToBeGenericParam> = Wrapper(T::DEFAULT);\n }\n \n-struct Local<T, U>(T, U);\n+// a helper trait used below\n+trait AssocTypesHelper {\n+    type NotToBeBounded;\n+    type ToBeBounded;\n \n-impl<T: Trait<U>, U: Trait2<AssocType5 = AtomicUsize>> Local<T, U> {\n-    const ASSOC_5: AtomicUsize = AtomicUsize::new(14); //~ ERROR interior mutable\n+    const NOT_TO_BE_BOUNDED: Self::NotToBeBounded;\n+}\n+\n+// a constant whose type is an assoc type originated from a generic param bounded at the definition\n+// site should be linted at there.\n+trait AssocTypesFromGenericParam<T>\n+where\n+    T: AssocTypesHelper<ToBeBounded = AtomicUsize>,\n+{\n+    const NOT_BOUNDED: T::NotToBeBounded;\n+    const BOUNDED: T::ToBeBounded; //~ ERROR interior mutable\n+}\n+\n+impl<T> AssocTypesFromGenericParam<T> for u64\n+where\n+    T: AssocTypesHelper<ToBeBounded = AtomicUsize>,\n+{\n+    // an associated type could remain unknown in a trait impl.\n+    const NOT_BOUNDED: T::NotToBeBounded = T::NOT_TO_BE_BOUNDED;\n+    const BOUNDED: T::ToBeBounded = AtomicUsize::new(15);\n+}\n+\n+trait SelfType {\n+    const SELF: Self;\n+}\n+\n+impl SelfType for u64 {\n+    const SELF: Self = 16;\n+}\n+\n+impl SelfType for AtomicUsize {\n+    // this (interior mutable `Self` const) exists in `parking_lot`.\n+    // `const_trait_impl` will replace it in the future, hopefully.\n+    const SELF: Self = AtomicUsize::new(17); //~ ERROR interior mutable\n+}\n+\n+// Even though a constant contains a generic type, if it also have a interior mutable type,\n+// it should be linted at the definition site.\n+trait BothOfCellAndGeneric<T> {\n+    // this is a false negative in the current implementation.\n+    const DIRECT: Cell<T>;\n+    const INDIRECT: Cell<*const T>; //~ ERROR interior mutable\n+}\n+\n+impl<T: ConstDefault> BothOfCellAndGeneric<T> for u64 {\n+    const DIRECT: Cell<T> = Cell::new(T::DEFAULT);\n+    const INDIRECT: Cell<*const T> = Cell::new(std::ptr::null());\n+}\n+\n+struct Local<T>(T);\n+\n+// a constant in an inherent impl are essentially the same as a normal const item\n+// except there can be a generic or associated type.\n+impl<T> Local<T>\n+where\n+    T: ConstDefault + AssocTypesHelper<ToBeBounded = AtomicUsize>,\n+{\n+    const ATOMIC: AtomicUsize = AtomicUsize::new(18); //~ ERROR interior mutable\n     const COW: Cow<'static, str> = Cow::Borrowed(\"tuvwxy\");\n-    const U_SELF: U = U::SELF_2;\n-    const T_ASSOC: T::AssocType = T::ASSOC;\n-    const U_ASSOC: U::AssocType5 = AtomicUsize::new(17); //~ ERROR interior mutable\n+\n+    const GENERIC_TYPE: T = T::DEFAULT;\n+\n+    const ASSOC_TYPE: T::NotToBeBounded = T::NOT_TO_BE_BOUNDED;\n+    const BOUNDED_ASSOC_TYPE: T::ToBeBounded = AtomicUsize::new(19); //~ ERROR interior mutable\n }\n \n fn main() {}"}, {"sha": "0a0b818b8b7f1ca05ec346c6c830e24970378e92", "filename": "tests/ui/declare_interior_mutable_const.stderr", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2fc9064921ce0afd2c07c5b576f95c7adf731541/tests%2Fui%2Fdeclare_interior_mutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fc9064921ce0afd2c07c5b576f95c7adf731541/tests%2Fui%2Fdeclare_interior_mutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const.stderr?ref=2fc9064921ce0afd2c07c5b576f95c7adf731541", "patch": "@@ -36,17 +36,11 @@ LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:44:5\n+  --> $DIR/declare_interior_mutable_const.rs:39:5\n    |\n LL |     const ATOMIC: AtomicUsize; //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:50:5\n-   |\n-LL |     const INPUT_ASSOC_2: T::AssocType5; //~ ERROR interior mutable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: a `const` item should never be interior mutable\n   --> $DIR/declare_interior_mutable_const.rs:16:9\n    |\n@@ -59,28 +53,52 @@ LL |     declare_const!(ANOTHER_ATOMIC: AtomicUsize = Self::ATOMIC); //~ ERROR i\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:82:5\n+  --> $DIR/declare_interior_mutable_const.rs:67:5\n+   |\n+LL |     const TO_BE_CONCRETE: AtomicUsize = AtomicUsize::new(11); //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:92:5\n+   |\n+LL |     const TO_BE_UNFROZEN: Self::ToBeUnfrozen = AtomicUsize::new(13); //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:93:5\n+   |\n+LL |     const WRAPPED_TO_BE_UNFROZEN: Wrapper<Self::ToBeUnfrozen> = Wrapper(AtomicUsize::new(14)); //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:112:5\n+   |\n+LL |     const BOUNDED: T::ToBeBounded; //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:135:5\n    |\n-LL |     const ASSOC_2: Self::AssocType2 = AtomicUsize::new(15); //~ ERROR interior mutable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     const SELF: Self = AtomicUsize::new(17); //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:83:5\n+  --> $DIR/declare_interior_mutable_const.rs:143:5\n    |\n-LL |     const WRAPPED_ASSOC_2: Wrapper<Self::AssocType2> = Wrapper(AtomicUsize::new(16)); //~ ERROR interior mutable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     const INDIRECT: Cell<*const T>; //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:90:5\n+  --> $DIR/declare_interior_mutable_const.rs:159:5\n    |\n-LL |     const ASSOC_5: AtomicUsize = AtomicUsize::new(14); //~ ERROR interior mutable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     const ATOMIC: AtomicUsize = AtomicUsize::new(18); //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:94:5\n+  --> $DIR/declare_interior_mutable_const.rs:165:5\n    |\n-LL |     const U_ASSOC: U::AssocType5 = AtomicUsize::new(17); //~ ERROR interior mutable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     const BOUNDED_ASSOC_TYPE: T::ToBeBounded = AtomicUsize::new(19); //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 14 previous errors\n "}]}