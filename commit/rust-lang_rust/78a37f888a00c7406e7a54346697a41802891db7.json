{"sha": "78a37f888a00c7406e7a54346697a41802891db7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YTM3Zjg4OGEwMGM3NDA2ZTdhNTQzNDY2OTdhNDE4MDI4OTFkYjc=", "commit": {"author": {"name": "cjkenn", "email": "cjkenn@users.noreply.github.com", "date": "2020-11-16T23:09:10Z"}, "committer": {"name": "cjkenn", "email": "cjkenn@users.noreply.github.com", "date": "2020-11-16T23:09:10Z"}, "message": "add optimization fuel checks to some mir passes", "tree": {"sha": "dd45bc29b04dec285f89cba443104856a1fd0531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd45bc29b04dec285f89cba443104856a1fd0531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78a37f888a00c7406e7a54346697a41802891db7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78a37f888a00c7406e7a54346697a41802891db7", "html_url": "https://github.com/rust-lang/rust/commit/78a37f888a00c7406e7a54346697a41802891db7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78a37f888a00c7406e7a54346697a41802891db7/comments", "author": {"login": "cjkenn", "id": 6255842, "node_id": "MDQ6VXNlcjYyNTU4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6255842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjkenn", "html_url": "https://github.com/cjkenn", "followers_url": "https://api.github.com/users/cjkenn/followers", "following_url": "https://api.github.com/users/cjkenn/following{/other_user}", "gists_url": "https://api.github.com/users/cjkenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjkenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjkenn/subscriptions", "organizations_url": "https://api.github.com/users/cjkenn/orgs", "repos_url": "https://api.github.com/users/cjkenn/repos", "events_url": "https://api.github.com/users/cjkenn/events{/privacy}", "received_events_url": "https://api.github.com/users/cjkenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjkenn", "id": 6255842, "node_id": "MDQ6VXNlcjYyNTU4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6255842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjkenn", "html_url": "https://github.com/cjkenn", "followers_url": "https://api.github.com/users/cjkenn/followers", "following_url": "https://api.github.com/users/cjkenn/following{/other_user}", "gists_url": "https://api.github.com/users/cjkenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjkenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjkenn/subscriptions", "organizations_url": "https://api.github.com/users/cjkenn/orgs", "repos_url": "https://api.github.com/users/cjkenn/repos", "events_url": "https://api.github.com/users/cjkenn/events{/privacy}", "received_events_url": "https://api.github.com/users/cjkenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5230fbf76bafd86ee4376a0e26e551df8d17fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5230fbf76bafd86ee4376a0e26e551df8d17fec", "html_url": "https://github.com/rust-lang/rust/commit/f5230fbf76bafd86ee4376a0e26e551df8d17fec"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "1f266a95f03f6536547f82b73681d560e79924b9", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=78a37f888a00c7406e7a54346697a41802891db7", "patch": "@@ -89,6 +89,10 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             return;\n         }\n \n+        if !tcx.consider_optimizing(|| format!(\"ConstantPropagation {:?} {:?}\", def_id, hir_id)) {\n+            return;\n+        }\n+\n         // Check if it's even possible to satisfy the 'where' clauses\n         // for this item.\n         // This branch will never be taken for any normal function."}, {"sha": "f91477911a489015363ab72bcd08ca9c6dbfd1aa", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=78a37f888a00c7406e7a54346697a41802891db7", "patch": "@@ -46,6 +46,10 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n         let should_cleanup = !opts_to_apply.is_empty();\n \n         for opt_to_apply in opts_to_apply {\n+            if !tcx.consider_optimizing(|| format!(\"EarlyOtherwiseBranch {:?}\", &opt_to_apply)) {\n+                break;\n+            }\n+\n             trace!(\"SUCCESS: found optimization possibility to apply: {:?}\", &opt_to_apply);\n \n             let statements_before ="}, {"sha": "5a21cdc6891f4020797a7e69673a0a0dbabde001", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=78a37f888a00c7406e7a54346697a41802891db7", "patch": "@@ -20,6 +20,13 @@ pub struct InstCombine;\n \n impl<'tcx> MirPass<'tcx> for InstCombine {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        // Check for fuel here before gathering the optimization list. If we're out of fuel,\n+        // we don't want to take the time to pass over the MIR only to find optimizations\n+        // we won't run.\n+        if !tcx.consider_optimizing(|| format!(\"InstCombine {:?} \", body.source.def_id())) {\n+            return;\n+        }\n+\n         // First, find optimization opportunities. This is done in a pre-pass to keep the MIR\n         // read-only so that we can do global analyses on the MIR in the process (e.g.\n         // `Place::ty()`)."}, {"sha": "53eeecc780f6f1ed628c1ec766ac147b24aa3d1f", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=78a37f888a00c7406e7a54346697a41802891db7", "patch": "@@ -43,8 +43,13 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n         }\n \n         let param_env = tcx.param_env(body.source.def_id());\n+        let def_id = body.source.def_id();\n         let (bbs, local_decls) = body.basic_blocks_and_local_decls_mut();\n         'outer: for bb_idx in bbs.indices() {\n+            if !tcx.consider_optimizing(|| format!(\"MatchBranchSimplification {:?} \", def_id)) {\n+                continue;\n+            }\n+\n             let (discr, val, switch_ty, first, second) = match bbs[bb_idx].terminator().kind {\n                 TerminatorKind::SwitchInt {\n                     discr: ref discr @ (Operand::Copy(_) | Operand::Move(_)),"}, {"sha": "4a66bc45ae37b959319ba7d3545da06663cb266e", "filename": "compiler/rustc_mir/src/transform/multiple_return_terminators.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs?ref=78a37f888a00c7406e7a54346697a41802891db7", "patch": "@@ -14,6 +14,12 @@ impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n             return;\n         }\n \n+        if !tcx.consider_optimizing(|| {\n+            format!(\"MultipleReturnTerminators {:?} \", body.source.def_id())\n+        }) {\n+            return;\n+        }\n+\n         // find basic blocks with no statement and a return terminator\n         let mut bbs_simple_returns = BitSet::new_empty(body.basic_blocks().len());\n         let bbs = body.basic_blocks_mut();"}, {"sha": "ce02fb261df6f981991fa955cc3772d72861fe65", "filename": "compiler/rustc_mir/src/transform/nrvo.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs?ref=78a37f888a00c7406e7a54346697a41802891db7", "patch": "@@ -38,18 +38,22 @@ impl<'tcx> MirPass<'tcx> for RenameReturnPlace {\n             return;\n         }\n \n+        let def_id = body.source.def_id();\n         let returned_local = match local_eligible_for_nrvo(body) {\n             Some(l) => l,\n             None => {\n-                debug!(\"`{:?}` was ineligible for NRVO\", body.source.def_id());\n+                debug!(\"`{:?}` was ineligible for NRVO\", def_id);\n                 return;\n             }\n         };\n \n+        if !tcx.consider_optimizing(|| format!(\"RenameReturnPlace {:?}\", def_id)) {\n+            return;\n+        }\n+\n         debug!(\n             \"`{:?}` was eligible for NRVO, making {:?} the return place\",\n-            body.source.def_id(),\n-            returned_local\n+            def_id, returned_local\n         );\n \n         RenameToReturnPlace { tcx, to_rename: returned_local }.visit_body(body);"}, {"sha": "0539d8fffabc8413bb5c53dd94d6ea8b708899a5", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=78a37f888a00c7406e7a54346697a41802891db7", "patch": "@@ -60,6 +60,10 @@ impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n             return;\n         }\n \n+        if !tcx.consider_optimizing(|| format!(\"PromoteTemps {:?} \", body.source.def_id())) {\n+            return;\n+        }\n+\n         let mut rpo = traversal::reverse_postorder(body);\n         let ccx = ConstCx::new(tcx, body);\n         let (temps, all_candidates) = collect_temps_and_candidates(&ccx, &mut rpo);"}, {"sha": "2a72751071bb1907b94dc86cf0bb477780a9d437", "filename": "compiler/rustc_mir/src/transform/remove_unneeded_drops.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs?ref=78a37f888a00c7406e7a54346697a41802891db7", "patch": "@@ -11,6 +11,10 @@ pub struct RemoveUnneededDrops;\n \n impl<'tcx> MirPass<'tcx> for RemoveUnneededDrops {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        if !tcx.consider_optimizing(|| format!(\"RemoveUnneededDrops {:?} \", body.source.def_id())) {\n+            return;\n+        }\n+\n         trace!(\"Running RemoveUnneededDrops on {:?}\", body.source);\n         let mut opt_finder = RemoveUnneededDropsOptimizationFinder {\n             tcx,"}, {"sha": "4100a50c225b35fe4646d0e0c67d615ecd9eda8e", "filename": "compiler/rustc_mir/src/transform/unreachable_prop.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a37f888a00c7406e7a54346697a41802891db7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs?ref=78a37f888a00c7406e7a54346697a41802891db7", "patch": "@@ -18,6 +18,12 @@ impl MirPass<'_> for UnreachablePropagation {\n             return;\n         }\n \n+        if !tcx\n+            .consider_optimizing(|| format!(\"UnreachablePropagation {:?} \", body.source.def_id()))\n+        {\n+            return;\n+        }\n+\n         let mut unreachable_blocks = FxHashSet::default();\n         let mut replacements = FxHashMap::default();\n "}]}