{"sha": "1442235d3feab4c5ca3f55e2b3345583f640a17e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NDIyMzVkM2ZlYWI0YzVjYTNmNTVlMmIzMzQ1NTgzZjY0MGExN2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-01T01:41:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-01T01:41:45Z"}, "message": "auto merge of #18371 : nikomatsakis/rust/issue-18262, r=pcwalton\n\nTeach variance checker about the lifetime bounds that appear in trait object types.\r\n\r\n[breaking-change] This patch fixes a hole in the type system which resulted in lifetime parameters that were only used in trait objects not being checked. It's hard to characterize precisely the changes that might be needed to fix target code.\r\n\r\ncc #18262 (this fixes the test case by @jakub- but I am not sure if this is the same issue that @alexcrichton was reporting)\r\n\r\nr? @pnkfelix \r\n\r\nFixes #18205", "tree": {"sha": "1883c6ac50cc96daf4bd3efca9c29d355f91c55d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1883c6ac50cc96daf4bd3efca9c29d355f91c55d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1442235d3feab4c5ca3f55e2b3345583f640a17e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1442235d3feab4c5ca3f55e2b3345583f640a17e", "html_url": "https://github.com/rust-lang/rust/commit/1442235d3feab4c5ca3f55e2b3345583f640a17e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1442235d3feab4c5ca3f55e2b3345583f640a17e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88b6e93d35c34e143ba060a617e71c8af10fa15e", "url": "https://api.github.com/repos/rust-lang/rust/commits/88b6e93d35c34e143ba060a617e71c8af10fa15e", "html_url": "https://github.com/rust-lang/rust/commit/88b6e93d35c34e143ba060a617e71c8af10fa15e"}, {"sha": "9a5e7ba4c7eefb2f40389966c562fbadcc778625", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5e7ba4c7eefb2f40389966c562fbadcc778625", "html_url": "https://github.com/rust-lang/rust/commit/9a5e7ba4c7eefb2f40389966c562fbadcc778625"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "9a90381854a6ce62050f33b74f8b9b91cd01fcf4", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1442235d3feab4c5ca3f55e2b3345583f640a17e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1442235d3feab4c5ca3f55e2b3345583f640a17e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=1442235d3feab4c5ca3f55e2b3345583f640a17e", "patch": "@@ -778,7 +778,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     variance);\n             }\n \n-            ty::ty_trait(box ty::TyTrait { def_id, ref substs, .. }) => {\n+            ty::ty_trait(box ty::TyTrait { def_id, ref substs, bounds }) => {\n                 let trait_def = ty::lookup_trait_def(self.tcx(), def_id);\n                 let generics = &trait_def.generics;\n \n@@ -796,6 +796,10 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 assert!(generics.types.is_empty_in(subst::FnSpace));\n                 assert!(generics.regions.is_empty_in(subst::FnSpace));\n \n+                // The type `Foo<T+'a>` is contravariant w/r/t `'a`:\n+                let contra = self.contravariant(variance);\n+                self.add_constraints_from_region(bounds.region_bound, contra);\n+\n                 self.add_constraints_from_substs(\n                     def_id,\n                     generics.types.get_slice(subst::TypeSpace),"}, {"sha": "c61f2ff79c0192b5120796fd23e291c0acef6c92", "filename": "src/test/compile-fail/variance-trait-object-bound.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1442235d3feab4c5ca3f55e2b3345583f640a17e/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1442235d3feab4c5ca3f55e2b3345583f640a17e/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs?ref=1442235d3feab4c5ca3f55e2b3345583f640a17e", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks that regions which appear in a trait object type are\n+// observed by the variance inference algorithm (and hence\n+// `TOption` is contavariant w/r/t `'a` and not bivariant).\n+//\n+// Issue #18262.\n+\n+use std::mem;\n+\n+trait T { fn foo(); }\n+\n+#[rustc_variance]\n+struct TOption<'a> { //~ ERROR regions=[[-];[];[]]\n+    v: Option<Box<T + 'a>>,\n+}\n+\n+fn main() { }"}, {"sha": "92f8030a0dc566c76c73739612842976182a199f", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1442235d3feab4c5ca3f55e2b3345583f640a17e/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1442235d3feab4c5ca3f55e2b3345583f640a17e/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=1442235d3feab4c5ca3f55e2b3345583f640a17e", "patch": "@@ -17,7 +17,7 @@ struct Parser<'a, I, O> {\n }\n \n impl<'a, I, O: 'a> Parser<'a, I, O> {\n-    fn compose<K: 'a>(mut self, mut rhs: Parser<O, K>) -> Parser<'a, I, K> {\n+    fn compose<K: 'a>(mut self, mut rhs: Parser<'a, O, K>) -> Parser<'a, I, K> {\n         Parser {\n             parse: box move |&mut: x: I| {\n                 match self.parse.call_mut((x,)) {"}]}