{"sha": "c3afb16e1608929a816d6c0e2a0118185199aef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYWZiMTZlMTYwODkyOWE4MTZkNmMwZTJhMDExODE4NTE5OWFlZjE=", "commit": {"author": {"name": "Tinco Andringa", "email": "mail@tinco.nl", "date": "2018-07-11T13:19:32Z"}, "committer": {"name": "Tinco Andringa", "email": "mail@tinco.nl", "date": "2018-09-10T10:33:37Z"}, "message": "Track whether module declarations are inline (fixes #12590)", "tree": {"sha": "65c1eeacf1972ad17c40407efd04091156aac7e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65c1eeacf1972ad17c40407efd04091156aac7e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3afb16e1608929a816d6c0e2a0118185199aef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3afb16e1608929a816d6c0e2a0118185199aef1", "html_url": "https://github.com/rust-lang/rust/commit/c3afb16e1608929a816d6c0e2a0118185199aef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3afb16e1608929a816d6c0e2a0118185199aef1/comments", "author": {"login": "tinco", "id": 22532, "node_id": "MDQ6VXNlcjIyNTMy", "avatar_url": "https://avatars.githubusercontent.com/u/22532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinco", "html_url": "https://github.com/tinco", "followers_url": "https://api.github.com/users/tinco/followers", "following_url": "https://api.github.com/users/tinco/following{/other_user}", "gists_url": "https://api.github.com/users/tinco/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinco/subscriptions", "organizations_url": "https://api.github.com/users/tinco/orgs", "repos_url": "https://api.github.com/users/tinco/repos", "events_url": "https://api.github.com/users/tinco/events{/privacy}", "received_events_url": "https://api.github.com/users/tinco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tinco", "id": 22532, "node_id": "MDQ6VXNlcjIyNTMy", "avatar_url": "https://avatars.githubusercontent.com/u/22532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinco", "html_url": "https://github.com/tinco", "followers_url": "https://api.github.com/users/tinco/followers", "following_url": "https://api.github.com/users/tinco/following{/other_user}", "gists_url": "https://api.github.com/users/tinco/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinco/subscriptions", "organizations_url": "https://api.github.com/users/tinco/orgs", "repos_url": "https://api.github.com/users/tinco/repos", "events_url": "https://api.github.com/users/tinco/events{/privacy}", "received_events_url": "https://api.github.com/users/tinco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8d45da2747c0b0943f48854e653ebe0d1ba60c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d45da2747c0b0943f48854e653ebe0d1ba60c9", "html_url": "https://github.com/rust-lang/rust/commit/b8d45da2747c0b0943f48854e653ebe0d1ba60c9"}], "stats": {"total": 124, "additions": 114, "deletions": 10}, "files": [{"sha": "0fd59d8d9f4d9e64809107e9c8688864600793ce", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c3afb16e1608929a816d6c0e2a0118185199aef1", "patch": "@@ -1841,6 +1841,8 @@ pub struct Mod {\n     /// to the last token in the external file.\n     pub inner: Span,\n     pub items: Vec<P<Item>>,\n+    /// For `mod foo;` inline is false, for `mod foo { .. }` it is true.\n+    pub inline: bool,\n }\n \n /// Foreign module declaration."}, {"sha": "6210003a40da41d1e63fb64a5e4f41a94ee75253", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=c3afb16e1608929a816d6c0e2a0118185199aef1", "patch": "@@ -1101,6 +1101,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             ast::ItemKind::Mod(ast::Mod {\n                 inner: inner_span,\n                 items,\n+                inline: true\n             })\n         )\n     }"}, {"sha": "389224e013edb3cdbd02a470fae631145589a18e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c3afb16e1608929a816d6c0e2a0118185199aef1", "patch": "@@ -290,6 +290,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 krate.module = ast::Mod {\n                     inner: orig_mod_span,\n                     items: vec![],\n+                    inline: true,\n                 };\n             },\n             _ => unreachable!(),"}, {"sha": "b95ef5f4b7abf39569ea39739013be0d055fea85", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c3afb16e1608929a816d6c0e2a0118185199aef1", "patch": "@@ -1036,10 +1036,11 @@ pub fn noop_fold_fn_header<T: Folder>(mut header: FnHeader, folder: &mut T) -> F\n     header\n }\n \n-pub fn noop_fold_mod<T: Folder>(Mod {inner, items}: Mod, folder: &mut T) -> Mod {\n+pub fn noop_fold_mod<T: Folder>(Mod {inner, items, inline}: Mod, folder: &mut T) -> Mod {\n     Mod {\n         inner: folder.new_span(inner),\n         items: items.move_flat_map(|x| folder.fold_item(x)),\n+        inline: inline,\n     }\n }\n \n@@ -1069,6 +1070,7 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, span}: Crate,\n         None => (ast::Mod {\n             inner: span,\n             items: vec![],\n+            inline: true,\n         }, vec![], span)\n     };\n "}, {"sha": "121565222429c7828e1e4c478ae492f677060c96", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c3afb16e1608929a816d6c0e2a0118185199aef1", "patch": "@@ -6252,6 +6252,7 @@ impl<'a> Parser<'a> {\n         Ok(ast::Mod {\n             inner: inner_lo.to(hi),\n             items,\n+            inline: true\n         })\n     }\n \n@@ -6287,8 +6288,10 @@ impl<'a> Parser<'a> {\n                 // This mod is in an external file. Let's go get it!\n                 let ModulePathSuccess { path, directory_ownership, warn } =\n                     self.submod_path(id, &outer_attrs, id_span)?;\n-                let (module, mut attrs) =\n+                let (mut module, mut attrs) =\n                     self.eval_src_mod(path, directory_ownership, id.to_string(), id_span)?;\n+                // Record that we fetched the mod from an external file\n+                module.inline = false;\n                 if warn {\n                     let attr = Attribute {\n                         id: attr::mk_attr_id(),\n@@ -6301,9 +6304,13 @@ impl<'a> Parser<'a> {\n                     attr::mark_known(&attr);\n                     attrs.push(attr);\n                 }\n-                Ok((id, module, Some(attrs)))\n+                Ok((id, ItemKind::Mod(module), Some(attrs)))\n             } else {\n-                let placeholder = ast::Mod { inner: syntax_pos::DUMMY_SP, items: Vec::new() };\n+                let placeholder = ast::Mod {\n+                    inner: syntax_pos::DUMMY_SP,\n+                    items: Vec::new(),\n+                    inline: false\n+                };\n                 Ok((id, ItemKind::Mod(placeholder), None))\n             }\n         } else {\n@@ -6503,7 +6510,7 @@ impl<'a> Parser<'a> {\n                     directory_ownership: DirectoryOwnership,\n                     name: String,\n                     id_sp: Span)\n-                    -> PResult<'a, (ast::ItemKind, Vec<Attribute> )> {\n+                    -> PResult<'a, (ast::Mod, Vec<Attribute> )> {\n         let mut included_mod_stack = self.sess.included_mod_stack.borrow_mut();\n         if let Some(i) = included_mod_stack.iter().position(|p| *p == path) {\n             let mut err = String::from(\"circular modules: \");\n@@ -6525,7 +6532,7 @@ impl<'a> Parser<'a> {\n         let mod_attrs = p0.parse_inner_attributes()?;\n         let m0 = p0.parse_mod_items(&token::Eof, mod_inner_lo)?;\n         self.sess.included_mod_stack.borrow_mut().pop();\n-        Ok((ast::ItemKind::Mod(m0), mod_attrs))\n+        Ok((m0, mod_attrs))\n     }\n \n     /// Parse a function declaration from a foreign module"}, {"sha": "fb4000294ea6059501b466f710b6bbbdceea3499", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c3afb16e1608929a816d6c0e2a0118185199aef1", "patch": "@@ -1260,10 +1260,16 @@ impl<'a> State<'a> {\n             ast::ItemKind::Mod(ref _mod) => {\n                 self.head(&visibility_qualified(&item.vis, \"mod\"))?;\n                 self.print_ident(item.ident)?;\n-                self.nbsp()?;\n-                self.bopen()?;\n-                self.print_mod(_mod, &item.attrs)?;\n-                self.bclose(item.span)?;\n+\n+                if _mod.inline {\n+                    self.nbsp()?;\n+                    self.bopen()?;\n+                    self.print_mod(_mod, &item.attrs)?;\n+                    self.bclose(item.span)?;\n+                } else {\n+                    self.s.word(\";\")?;\n+                }\n+\n             }\n             ast::ItemKind::ForeignMod(ref nmod) => {\n                 self.head(\"extern\")?;"}, {"sha": "408f250fd4505cfd80496d5f0ad31f20ca70f7eb", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=c3afb16e1608929a816d6c0e2a0118185199aef1", "patch": "@@ -240,6 +240,7 @@ fn mk_reexport_mod(cx: &mut TestCtxt,\n     let reexport_mod = ast::Mod {\n         inner: DUMMY_SP,\n         items,\n+        inline: true,\n     };\n \n     let sym = Ident::with_empty_ctxt(Symbol::gensym(\"__test_reexports\"));\n@@ -392,6 +393,59 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n         tokens: None,\n     })\n \n+    let testmod = ast::Mod {\n+        inner: DUMMY_SP,\n+        items: vec![import, mainfn, tests],\n+        inline: true,\n+    };\n+    let item_ = ast::ItemKind::Mod(testmod);\n+    let mod_ident = Ident::with_empty_ctxt(Symbol::gensym(\"__test\"));\n+\n+    let mut expander = cx.ext_cx.monotonic_expander();\n+    let item = expander.fold_item(P(ast::Item {\n+        id: ast::DUMMY_NODE_ID,\n+        ident: mod_ident,\n+        attrs: vec![],\n+        node: item_,\n+        vis: dummy_spanned(ast::VisibilityKind::Public),\n+        span: DUMMY_SP,\n+        tokens: None,\n+    })).pop().unwrap();\n+    let reexport = cx.reexport_test_harness_main.map(|s| {\n+        // building `use __test::main as <ident>;`\n+        let rename = Ident::with_empty_ctxt(s);\n+\n+        let use_path = ast::UseTree {\n+            span: DUMMY_SP,\n+            prefix: path_node(vec![mod_ident, Ident::from_str(\"main\")]),\n+            kind: ast::UseTreeKind::Simple(Some(rename), ast::DUMMY_NODE_ID, ast::DUMMY_NODE_ID),\n+        };\n+\n+        expander.fold_item(P(ast::Item {\n+            id: ast::DUMMY_NODE_ID,\n+            ident: keywords::Invalid.ident(),\n+            attrs: vec![],\n+            node: ast::ItemKind::Use(P(use_path)),\n+            vis: dummy_spanned(ast::VisibilityKind::Inherited),\n+            span: DUMMY_SP,\n+            tokens: None,\n+        })).pop().unwrap()\n+    });\n+\n+    debug!(\"Synthetic test module:\\n{}\\n\", pprust::item_to_string(&item));\n+\n+    (item, reexport)\n+}\n+\n+fn nospan<T>(t: T) -> codemap::Spanned<T> {\n+    codemap::Spanned { node: t, span: DUMMY_SP }\n+}\n+\n+fn path_node(ids: Vec<Ident>) -> ast::Path {\n+    ast::Path {\n+        span: DUMMY_SP,\n+        segments: ids.into_iter().map(|id| ast::PathSegment::from_ident(id)).collect(),\n+    }\n }\n \n fn path_name_i(idents: &[Ident]) -> String {"}, {"sha": "0087c3c455897b85df0731de818488d4dc21a330", "filename": "src/test/pretty/issue_12590_a.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Ftest%2Fpretty%2Fissue_12590_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Ftest%2Fpretty%2Fissue_12590_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue_12590_a.rs?ref=c3afb16e1608929a816d6c0e2a0118185199aef1", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pp-exact\n+\n+// The next line should not be expanded\n+\n+mod issue_12590_b;\n+\n+fn main() { }"}, {"sha": "ebb6310b047648f48b833f52c28666ba3137e876", "filename": "src/test/pretty/issue_12590_b.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Ftest%2Fpretty%2Fissue_12590_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3afb16e1608929a816d6c0e2a0118185199aef1/src%2Ftest%2Fpretty%2Fissue_12590_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue_12590_b.rs?ref=c3afb16e1608929a816d6c0e2a0118185199aef1", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Second part of two file test\n+fn b() { }\n+\n+fn main() { }"}]}