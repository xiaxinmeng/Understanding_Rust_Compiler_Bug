{"sha": "1870537f2701e5aa47080a879b63a4d6b391553b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NzA1MzdmMjcwMWU1YWE0NzA4MGE4NzliNjNhNGQ2YjM5MTU1M2I=", "commit": {"author": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2019-07-14T01:05:52Z"}, "committer": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2019-08-17T15:55:40Z"}, "message": "initial implementation of or-pattern parsing\n\nInitial implementation of parsing or-patterns e.g., `Some(Foo | Bar)`.\nThis is a partial implementation of RFC 2535.", "tree": {"sha": "c8d3e59938a5dc0aefca4de9ee95ab753099cd81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8d3e59938a5dc0aefca4de9ee95ab753099cd81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1870537f2701e5aa47080a879b63a4d6b391553b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF5dO2RaKc5C+SCJ9RcSmUsR+QqUFAl1YI4AACgkQRcSmUsR+\nQqXJ2A//adt8tLMt5eGmQBpQ2N8oTAxfM/o8OAfEU/9WAL/8o/8qU/SyuPdcxeK0\nLuh/LwqiYs/hf43Yd2KVONz0/QqhUM4khq2K6ffsuGriSvdJ9XAjTO8V2VdWwLrj\nKVqG9gbw+yJCyZUU0Nx88oEHVr15zypwktBDnJNhYjTNuBnbnDck/VILnJWx8WzI\n7F1HCY7HjzRKgdaN5PwKO0yKDe/3jJEVAR7bV9/gO9FDKHedt/Pp4g80+ePq0Chj\nKZFlIOGxCuEUQN8m0BeNfcatHWFNWlrJd0CK3RQk5cGrDJWDMTF6BbkofL/Zoic1\nn1yiBXxhOEd6inxxhN4erktmism+ip68UZMZqCsYnTzeI/2UYgxb82oG6ulMNRkT\nuQlkMHqUTb2eeH1aty3OqlNLqxCTsWUJqLjnqn2VfpdcJTP4Q7tBYBOBlst1SlqJ\nVR6MVqmccvYQXvkCrp6IciSqxKksDmHZ+8c8dn+zlxDUH7hUu4j+IQ/cQgshKsPT\n7/GpHQo3Bh5c9b3g8Qoy15bW60b2frFDuLdw/hRBbT3caEWNqHAEiYQEQhpuX1BY\nV8j0ODbkzCsajOcamtSMhCm5mbqeN+xVfK44BCSk4S9g1jIZdCh/KrZ60KIieGeJ\nYSM0wdVOjn8E+kEnEQOYz1o1yqlYyH2eu+A/zpDwvhZQcStAhGY=\n=9JZT\n-----END PGP SIGNATURE-----", "payload": "tree c8d3e59938a5dc0aefca4de9ee95ab753099cd81\nparent 1713ac4bf5c992f40d667c929c1e1ce9c3a51204\nauthor Dan Robertson <dan@dlrobertson.com> 1563066352 +0000\ncommitter Dan Robertson <dan@dlrobertson.com> 1566057340 +0000\n\ninitial implementation of or-pattern parsing\n\nInitial implementation of parsing or-patterns e.g., `Some(Foo | Bar)`.\nThis is a partial implementation of RFC 2535.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1870537f2701e5aa47080a879b63a4d6b391553b", "html_url": "https://github.com/rust-lang/rust/commit/1870537f2701e5aa47080a879b63a4d6b391553b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1870537f2701e5aa47080a879b63a4d6b391553b/comments", "author": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "url": "https://api.github.com/repos/rust-lang/rust/commits/1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "html_url": "https://github.com/rust-lang/rust/commit/1713ac4bf5c992f40d667c929c1e1ce9c3a51204"}], "stats": {"total": 202, "additions": 142, "deletions": 60}, "files": [{"sha": "8ebacb44d37cc2151f4883020e499d23f9bab0ef", "filename": "src/doc/unstable-book/src/language-features/or-patterns.md", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2For-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2For-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2For-patterns.md?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -0,0 +1,36 @@\n+# `or_patterns`\n+\n+The tracking issue for this feature is: [#54883]\n+\n+[#54883]: https://github.com/rust-lang/rust/issues/54883\n+\n+------------------------\n+\n+The `or_pattern` language feature allows `|` to be arbitrarily nested within\n+a pattern, for example, `Some(A(0) | B(1 | 2))` becomes a valid pattern.\n+\n+## Examples\n+\n+```rust,ignore\n+#![feature(or_patterns)]\n+\n+pub enum Foo {\n+    Bar,\n+    Baz,\n+    Quux,\n+}\n+\n+pub fn example(maybe_foo: Option<Foo>) {\n+    match maybe_foo {\n+        Some(Foo::Bar | Foo::Baz) => {\n+            println!(\"The value contained `Bar` or `Baz`\");\n+        }\n+        Some(_) => {\n+            println!(\"The value did not contain `Bar` or `Baz`\");\n+        }\n+        None => {\n+            println!(\"The value was `None`\");\n+        }\n+    }\n+}\n+```"}, {"sha": "5b15cf9a6c90f8a3cc42ccc00e0f1389515e0584", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -978,7 +978,8 @@ pub enum PatKind {\n     TupleStruct(QPath, HirVec<P<Pat>>, Option<usize>),\n \n     /// An or-pattern `A | B | C`.\n-    Or(Vec<P<Pat>>),\n+    /// Invariant: `pats.len() >= 2`.\n+    Or(HirVec<P<Pat>>),\n \n     /// A path pattern for an unit struct/variant or a (maybe-associated) constant.\n     Path(QPath),"}, {"sha": "632a13f9183b2c7c7f3b0feb172497cfd54f6972", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -4,7 +4,7 @@ use syntax::source_map::{SourceMap, Spanned};\n use syntax::parse::ParseSess;\n use syntax::print::pp::{self, Breaks};\n use syntax::print::pp::Breaks::{Consistent, Inconsistent};\n-use syntax::print::pprust::{self, Comments, PrintState, SeparatorSpacing};\n+use syntax::print::pprust::{self, Comments, PrintState};\n use syntax::symbol::kw;\n use syntax::util::parser::{self, AssocOp, Fixity};\n use syntax_pos::{self, BytePos, FileName};\n@@ -1688,8 +1688,7 @@ impl<'a> State<'a> {\n                 self.s.word(\"}\");\n             }\n             PatKind::Or(ref pats) => {\n-                let spacing = SeparatorSpacing::Both;\n-                self.strsep(\"|\", spacing, Inconsistent, &pats[..], |s, p| s.print_pat(&p))?;\n+                self.strsep(\"|\", true, Inconsistent, &pats[..], |s, p| s.print_pat(&p));\n             }\n             PatKind::Tuple(ref elts, ddpos) => {\n                 self.popen();"}, {"sha": "94323b15b696fb3ba91aa1460317ea2eddec56b1", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -658,9 +658,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n             }\n             PatternKind::Or { ref pats } => {\n-                // FIXME(#47184): extract or handle `pattern_user_ty` somehow\n                 for pat in pats {\n-                    self.visit_bindings(&pat, &pattern_user_ty.clone(), f);\n+                    self.visit_bindings(&pat, pattern_user_ty.clone(), f);\n                 }\n             }\n         }"}, {"sha": "222750e602df92f5ff30b37c5230b3c94086e105", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -75,6 +75,9 @@\n ///                     D((r_1, p_(i,2), .., p_(i,n)))\n ///                     D((r_2, p_(i,2), .., p_(i,n)))\n ///\n+///     Note that the OR-patterns are not always used directly in Rust, but are used to derive\n+///     the exhaustive integer matching rules, so they're written here for posterity.\n+///\n /// The algorithm for computing `U`\n /// -------------------------------\n /// The algorithm is inductive (on the number of columns: i.e., components of tuple patterns)."}, {"sha": "6caccfddfa422f6724180e8199b5d1824edae489", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -176,7 +176,8 @@ pub enum PatternKind<'tcx> {\n         suffix: Vec<Pattern<'tcx>>,\n     },\n \n-    /// or-pattern\n+    /// An or-pattern, e.g. `p | q`.\n+    /// Invariant: `pats.len() >= 2`.\n     Or {\n         pats: Vec<Pattern<'tcx>>,\n     },"}, {"sha": "fc25eb44cbd888888c1b01b47622e16472754230", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -313,7 +313,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             PatKind::Or(ref pats) => {\n                 let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                 for pat in pats {\n-                    self.check_pat_walk(pat, expected, def_bm, false);\n+                    self.check_pat_walk(pat, expected, def_bm, discrim_span);\n                 }\n                 expected_ty\n             }"}, {"sha": "3d15782df34e2956935508007df12d8753a67233", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -650,6 +650,7 @@ pub enum PatKind {\n     TupleStruct(Path, Vec<P<Pat>>),\n \n     /// An or-pattern `A | B | C`.\n+    /// Invariant: `pats.len() >= 2`.\n     Or(Vec<P<Pat>>),\n \n     /// A possibly qualified path pattern."}, {"sha": "bbc3ae28225587491bc700aa5633de2eb25736d8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -559,6 +559,9 @@ declare_features! (\n     // Allows `impl Trait` to be used inside type aliases (RFC 2515).\n     (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n \n+    // Allows the use of or-patterns, e.g. `0 | 1`.\n+    (active, or_patterns, \"1.38.0\", Some(54883), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -571,6 +574,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::impl_trait_in_bindings,\n     sym::generic_associated_types,\n     sym::const_generics,\n+    sym::or_patterns,\n     sym::let_chains,\n ];\n \n@@ -2443,6 +2447,7 @@ pub fn check_crate(krate: &ast::Crate,\n     gate_all!(let_chains_spans, let_chains, \"`let` expressions in this position are experimental\");\n     gate_all!(async_closure_spans, async_closure, \"async closures are unstable\");\n     gate_all!(yield_spans, generators, \"yield syntax is experimental\");\n+    gate_all!(or_pattern_spans, or_patterns, \"or-patterns syntax is experimental\");\n \n     let visitor = &mut PostExpansionVisitor {\n         context: &ctx,"}, {"sha": "b1f3612a839a2cb41bbe106053a9187257ef7ae6", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -66,6 +66,8 @@ pub struct ParseSess {\n     // Places where `yield e?` exprs were used and should be feature gated.\n     pub yield_spans: Lock<Vec<Span>>,\n     pub injected_crate_name: Once<Symbol>,\n+    // Places where or-patterns e.g. `Some(Foo | Bar)` were used and should be feature gated.\n+    pub or_pattern_spans: Lock<Vec<Span>>,\n }\n \n impl ParseSess {\n@@ -96,6 +98,7 @@ impl ParseSess {\n             async_closure_spans: Lock::new(Vec::new()),\n             yield_spans: Lock::new(Vec::new()),\n             injected_crate_name: Once::new(),\n+            or_pattern_spans: Lock::new(Vec::new()),\n         }\n     }\n "}, {"sha": "fd458aec743315792463c1e3d0024734b6d3a5a3", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -14,7 +14,10 @@ use errors::{Applicability, DiagnosticBuilder};\n \n impl<'a> Parser<'a> {\n     /// Parses a pattern.\n-    pub fn parse_pat(&mut self, expected: Option<&'static str>) -> PResult<'a, P<Pat>> {\n+    pub fn parse_pat(\n+        &mut self,\n+        expected: Option<&'static str>\n+    ) -> PResult<'a, P<Pat>> {\n         self.parse_pat_with_range_pat(true, expected)\n     }\n \n@@ -97,6 +100,34 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n+    /// Parses a pattern, that may be a or-pattern (e.g. `Some(Foo | Bar)`).\n+    fn parse_pat_with_or(&mut self, expected: Option<&'static str>) -> PResult<'a, P<Pat>> {\n+        // Parse the first pattern.\n+        let first_pat = self.parse_pat(expected)?;\n+\n+        // If the next token is not a `|`, this is not an or-pattern and\n+        // we should exit here.\n+        if !self.check(&token::BinOp(token::Or)) {\n+            return Ok(first_pat)\n+        }\n+\n+        let lo = first_pat.span;\n+\n+        let mut pats = vec![first_pat];\n+\n+        while self.eat(&token::BinOp(token::Or)) {\n+            pats.push(self.parse_pat_with_range_pat(\n+                true, expected\n+            )?);\n+        }\n+\n+        let or_pattern_span = lo.to(self.prev_span);\n+\n+        self.sess.or_pattern_spans.borrow_mut().push(or_pattern_span);\n+\n+        Ok(self.mk_pat(or_pattern_span, PatKind::Or(pats)))\n+    }\n+\n     /// Parses a pattern, with a setting whether modern range patterns (e.g., `a..=b`, `a..b` are\n     /// allowed).\n     fn parse_pat_with_range_pat(\n@@ -240,7 +271,9 @@ impl<'a> Parser<'a> {\n \n     /// Parse a tuple or parenthesis pattern.\n     fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n-        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| p.parse_pat(None))?;\n+        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| {\n+            p.parse_pat_with_or(None)\n+        })?;\n \n         // Here, `(pat,)` is a tuple pattern.\n         // For backward compatibility, `(..)` is a tuple pattern as well.\n@@ -483,7 +516,7 @@ impl<'a> Parser<'a> {\n             err.span_label(self.token.span, msg);\n             return Err(err);\n         }\n-        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat(None))?;\n+        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or(None))?;\n         Ok(PatKind::TupleStruct(path, fields))\n     }\n \n@@ -627,7 +660,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form \"fieldname: pat\"\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat(None)?;\n+            let pat = self.parse_pat_with_or(None)?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {"}, {"sha": "4dc00af486013c6973958a3d3eac9d9618eb1afa", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 35, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -431,46 +431,33 @@ impl std::ops::DerefMut for State<'_> {\n     }\n }\n \n-pub enum SeparatorSpacing {\n-    After,\n-    Both,\n-}\n-\n pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefMut {\n     fn comments(&mut self) -> &mut Option<Comments<'a>>;\n     fn print_ident(&mut self, ident: ast::Ident);\n     fn print_generic_args(&mut self, args: &ast::GenericArgs, colons_before_params: bool);\n \n-    fn strsep<T, F>(\n-        &mut self,\n-        sep: &'static str,\n-        spacing: SeparatorSpacing,\n-        b: Breaks,\n-        elts: &[T],\n-        mut op: F\n-    ) -> io::Result<()>\n+    fn strsep<T, F>(&mut self, sep: &'static str, space_before: bool,\n+                    b: Breaks, elts: &[T], mut op: F)\n         where F: FnMut(&mut Self, &T),\n     {\n         self.rbox(0, b);\n-        let mut first = true;\n-        for elt in elts {\n-            if first {\n-                first = false;\n-            } else {\n-                if let SeparatorSpacing::Both = spacing {\n-                    self.writer().space();\n+        if let Some((first, rest)) = elts.split_first() {\n+            op(self, first);\n+            for elt in rest {\n+                if space_before {\n+                    self.space();\n                 }\n                 self.word_space(sep);\n+                op(self, elt);\n             }\n-            op(self, elt);\n         }\n         self.end();\n     }\n \n-    fn commasep<T, F>(&mut self, b: Breaks, elts: &[T], mut op: F)\n+    fn commasep<T, F>(&mut self, b: Breaks, elts: &[T], op: F)\n         where F: FnMut(&mut Self, &T),\n     {\n-        self.strsep(\",\", SeparatorSpacing::After, b, elts, op)\n+        self.strsep(\",\", false, b, elts, op)\n     }\n \n     fn maybe_print_comment(&mut self, pos: BytePos) {\n@@ -2379,8 +2366,7 @@ impl<'a> State<'a> {\n                 self.pclose();\n             }\n             PatKind::Or(ref pats) => {\n-                let spacing = SeparatorSpacing::Both;\n-                self.strsep(\"|\", spacing, Inconsistent, &pats[..], |s, p| s.print_pat(p))?;\n+                self.strsep(\"|\", true, Inconsistent, &pats[..], |s, p| s.print_pat(p));\n             }\n             PatKind::Path(None, ref path) => {\n                 self.print_path(path, true, 0);\n@@ -2458,16 +2444,7 @@ impl<'a> State<'a> {\n     }\n \n     fn print_pats(&mut self, pats: &[P<ast::Pat>]) {\n-        let mut first = true;\n-        for p in pats {\n-            if first {\n-                first = false;\n-            } else {\n-                self.s.space();\n-                self.word_space(\"|\");\n-            }\n-            self.print_pat(p);\n-        }\n+        self.strsep(\"|\", true, Inconsistent, pats, |s, p| s.print_pat(p));\n     }\n \n     fn print_arm(&mut self, arm: &ast::Arm) {"}, {"sha": "91b92d84a811fde2a3336ca6e4c2000bb1391264", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -462,7 +462,7 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n             visitor.visit_expr(upper_bound);\n         }\n         PatKind::Wild | PatKind::Rest => {},\n-        PatKind::Tuple(ref elems) => {\n+        PatKind::Tuple(ref elems)\n         | PatKind::Slice(ref elems)\n         | PatKind::Or(ref elems) => {\n             walk_list!(visitor, visit_pat, elems);"}, {"sha": "361e01781b1ad6cf0b77af1b39219a580525a0ac", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -469,6 +469,7 @@ symbols! {\n         option_env,\n         opt_out_copy,\n         or,\n+        or_patterns,\n         Ord,\n         Ordering,\n         Output,"}, {"sha": "036a6095965bdd0c6689284b0db25d832d60d375", "filename": "src/test/ui/feature-gate/feature-gate-or_patterns.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -0,0 +1,9 @@\n+#![crate_type=\"lib\"]\n+\n+pub fn example(x: Option<usize>) {\n+    match x {\n+        Some(0 | 1 | 2) => {}\n+        //~^ ERROR: or-patterns syntax is experimental\n+        _ => {}\n+    }\n+}"}, {"sha": "aaabb54c1f017914a818f45d9f2f3516b51a8fa0", "filename": "src/test/ui/feature-gate/feature-gate-or_patterns.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.stderr?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:5:14\n+   |\n+LL |         Some(0 | 1 | 2) => {}\n+   |              ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f27caa5d78c8eaf42be834c1f8963dbadea97f53", "filename": "src/test/ui/parser/pat-lt-bracket-6.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -2,8 +2,9 @@ fn main() {\n     struct Test(&'static u8, [u8; 0]);\n     let x = Test(&0, []);\n \n-    let Test(&desc[..]) = x; //~ ERROR: expected one of `)`, `,`, or `@`, found `[`\n-    //~^ ERROR subslice patterns are unstable\n+    let Test(&desc[..]) = x;\n+    //~^ ERROR: expected one of `)`, `,`, `@`, or `|`, found `[`\n+    //~^^ ERROR subslice patterns are unstable\n }\n \n const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types"}, {"sha": "6f08f0a9d95ef117bf83899a3b28a08e725f7ada", "filename": "src/test/ui/parser/pat-lt-bracket-6.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `)`, `,`, or `@`, found `[`\n+error: expected one of `)`, `,`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-6.rs:5:19\n    |\n LL |     let Test(&desc[..]) = x;\n-   |                   ^ expected one of `)`, `,`, or `@` here\n+   |                   ^ expected one of `)`, `,`, `@`, or `|` here\n \n error[E0658]: subslice patterns are unstable\n   --> $DIR/pat-lt-bracket-6.rs:5:20\n@@ -14,7 +14,7 @@ LL |     let Test(&desc[..]) = x;\n    = help: add `#![feature(slice_patterns)]` to the crate attributes to enable\n \n error[E0308]: mismatched types\n-  --> $DIR/pat-lt-bracket-6.rs:9:30\n+  --> $DIR/pat-lt-bracket-6.rs:10:30\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer"}, {"sha": "327aef5ad15703cd16770ccdcd00dd8803c5e0ea", "filename": "src/test/ui/parser/pat-lt-bracket-7.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -2,7 +2,8 @@ fn main() {\n     struct Thing(u8, [u8; 0]);\n     let foo = core::iter::empty();\n \n-    for Thing(x[]) in foo {} //~ ERROR: expected one of `)`, `,`, or `@`, found `[`\n+    for Thing(x[]) in foo {}\n+    //~^ ERROR: expected one of `)`, `,`, `@`, or `|`, found `[`\n }\n \n const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types"}, {"sha": "196f1c0ae914f51b5f1a963e9bbd723277c8333c", "filename": "src/test/ui/parser/pat-lt-bracket-7.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -1,11 +1,11 @@\n-error: expected one of `)`, `,`, or `@`, found `[`\n+error: expected one of `)`, `,`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-7.rs:5:16\n    |\n LL |     for Thing(x[]) in foo {}\n-   |                ^ expected one of `)`, `,`, or `@` here\n+   |                ^ expected one of `)`, `,`, `@`, or `|` here\n \n error[E0308]: mismatched types\n-  --> $DIR/pat-lt-bracket-7.rs:8:30\n+  --> $DIR/pat-lt-bracket-7.rs:9:30\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer"}, {"sha": "c6be2c90667c2626242fb4ea62b3dabd365023f5", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let vec = vec![1, 2, 3];\n \n     for ( elem in vec ) {\n-        //~^ ERROR expected one of `)`, `,`, or `@`, found `in`\n+        //~^ ERROR expected one of `)`, `,`, `@`, or `|`, found `in`\n         //~| ERROR unexpected closing `)`\n         const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types\n     }"}, {"sha": "1b5b6cca09243a63f1746cf1d836933148611bd5", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1870537f2701e5aa47080a879b63a4d6b391553b/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=1870537f2701e5aa47080a879b63a4d6b391553b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `)`, `,`, or `@`, found `in`\n+error: expected one of `)`, `,`, `@`, or `|`, found `in`\n   --> $DIR/recover-for-loop-parens-around-head.rs:10:16\n    |\n LL |     for ( elem in vec ) {\n-   |                ^^ expected one of `)`, `,`, or `@` here\n+   |                ^^ expected one of `)`, `,`, `@`, or `|` here\n \n error: unexpected closing `)`\n   --> $DIR/recover-for-loop-parens-around-head.rs:10:23"}]}