{"sha": "affddf68c623390aa5566dad6357892d9e0ae278", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZmRkZjY4YzYyMzM5MGFhNTU2NmRhZDYzNTc4OTJkOWUwYWUyNzg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-05T12:49:58Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-05T14:26:02Z"}, "message": "Make `ui/issues/issue-17263.rs` robust w.r.t. NLL.", "tree": {"sha": "865dd5410ada7e9686f2aebfbeb4fe304a427b34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/865dd5410ada7e9686f2aebfbeb4fe304a427b34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/affddf68c623390aa5566dad6357892d9e0ae278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/affddf68c623390aa5566dad6357892d9e0ae278", "html_url": "https://github.com/rust-lang/rust/commit/affddf68c623390aa5566dad6357892d9e0ae278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/affddf68c623390aa5566dad6357892d9e0ae278/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd52b3c2dccf64829112fe56995e25f2b75591df", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd52b3c2dccf64829112fe56995e25f2b75591df", "html_url": "https://github.com/rust-lang/rust/commit/cd52b3c2dccf64829112fe56995e25f2b75591df"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "3d42dcb52f5db1966810ef67f5269a04c6b22b21", "filename": "src/test/ui/issues/issue-17263.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affddf68c623390aa5566dad6357892d9e0ae278/src%2Ftest%2Fui%2Fissues%2Fissue-17263.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/affddf68c623390aa5566dad6357892d9e0ae278/src%2Ftest%2Fui%2Fissues%2Fissue-17263.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17263.ast.stderr?ref=affddf68c623390aa5566dad6357892d9e0ae278", "patch": "@@ -16,7 +16,7 @@ LL |     let (c, d) = (&mut foo.a, &foo.b);\n    |                        -----   ^^^^^ immutable borrow occurs here (via `foo.b`)\n    |                        |\n    |                        mutable borrow occurs here (via `foo.a`)\n-LL |     //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+...\n LL | }\n    | - mutable borrow ends here\n ", "previous_filename": "src/test/ui/issues/issue-17263.stderr"}, {"sha": "cdb574b8b9f942f8e3d069b5a3051660d89b25af", "filename": "src/test/ui/issues/issue-17263.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/affddf68c623390aa5566dad6357892d9e0ae278/src%2Ftest%2Fui%2Fissues%2Fissue-17263.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/affddf68c623390aa5566dad6357892d9e0ae278/src%2Ftest%2Fui%2Fissues%2Fissue-17263.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17263.nll.stderr?ref=affddf68c623390aa5566dad6357892d9e0ae278", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n   --> $DIR/issue-17263.rs:15:1\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | / fn main() { //[nll]~ ERROR compilation successful\n LL | |     let mut x: Box<_> = box Foo { a: 1, b: 2 };\n LL | |     let (a, b) = (&mut x.a, &mut x.b);\n-LL | |     //~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n+LL | |     //[ast]~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n ...  |\n-LL | |     //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+LL | |     use_mut(a);\n LL | | }\n    | |_^\n "}, {"sha": "754f3b90aacf1f47de9ce15674126dc94370edf6", "filename": "src/test/ui/issues/issue-17263.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/affddf68c623390aa5566dad6357892d9e0ae278/src%2Ftest%2Fui%2Fissues%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affddf68c623390aa5566dad6357892d9e0ae278/src%2Ftest%2Fui%2Fissues%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17263.rs?ref=affddf68c623390aa5566dad6357892d9e0ae278", "patch": "@@ -1,23 +1,35 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// This checks diagnostic quality for cases where AST-borrowck treated\n+// `Box<T>` as other types (see rust-lang/rfcs#130). NLL again treats\n+// `Box<T>` specially. We capture the differences via revisions.\n \n+// revisions: ast nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// don't worry about the --compare-mode=nll on this test.\n+// ignore-compare-mode-nll\n #![feature(box_syntax, rustc_attrs)]\n \n struct Foo { a: isize, b: isize }\n-\n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+#[rustc_error] // rust-lang/rust#49855\n+fn main() { //[nll]~ ERROR compilation successful\n     let mut x: Box<_> = box Foo { a: 1, b: 2 };\n     let (a, b) = (&mut x.a, &mut x.b);\n-    //~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n+    //[ast]~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n \n     let mut foo: Box<_> = box Foo { a: 1, b: 2 };\n     let (c, d) = (&mut foo.a, &foo.b);\n-    //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+    //[ast]~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+\n+    // We explicitly use the references created above to illustrate\n+    // that NLL is accepting this code *not* because of artificially\n+    // short lifetimes, but rather because it understands that all the\n+    // references are of disjoint parts of memory.\n+    use_imm(d);\n+    use_mut(c);\n+    use_mut(b);\n+    use_mut(a);\n }\n+\n+fn use_mut<T>(_: &mut T) { }\n+fn use_imm<T>(_: &T) { }"}]}