{"sha": "9f7514bfaeef44077c5ecb78fb8571e6f0979ece", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNzUxNGJmYWVlZjQ0MDc3YzVlY2I3OGZiODU3MWU2ZjA5NzllY2U=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-18T00:30:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-18T00:30:59Z"}, "message": "test: Fix busted compile-fail tests. rs=bustage", "tree": {"sha": "9c679b306f862e7e7977ba59cf2521ae8c2719d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c679b306f862e7e7977ba59cf2521ae8c2719d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f7514bfaeef44077c5ecb78fb8571e6f0979ece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7514bfaeef44077c5ecb78fb8571e6f0979ece", "html_url": "https://github.com/rust-lang/rust/commit/9f7514bfaeef44077c5ecb78fb8571e6f0979ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f405e41d7a43ebd7fdd0fcd90f6e0542a5a6ccf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f405e41d7a43ebd7fdd0fcd90f6e0542a5a6ccf6", "html_url": "https://github.com/rust-lang/rust/commit/f405e41d7a43ebd7fdd0fcd90f6e0542a5a6ccf6"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "cb106963d1b270fef501c1d6a3be5ab8dcc14bf1", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=9f7514bfaeef44077c5ecb78fb8571e6f0979ece", "patch": "@@ -55,9 +55,8 @@ fn c() {\n     *q + 3;\n \n \n-    // ...but not impure fns\n-    (*q).times(3); //~ ERROR illegal borrow unless pure\n-    //~^ NOTE impure due to access to impure function\n+    // ...and impure fns\n+    (*q).times(3);\n }\n \n fn main() {"}, {"sha": "48ec7db63e9536e4f3f7af0d46a9a428ae0c8e42", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=9f7514bfaeef44077c5ecb78fb8571e6f0979ece", "patch": "@@ -62,9 +62,8 @@ fn c() {\n     // ...this is ok for pure fns\n     (*q).purem();\n \n-    // ...but not impure fns\n-    (*q).impurem(); //~ ERROR illegal borrow unless pure\n-    //~^ NOTE impure due to access to impure function\n+    // ...and impure fns\n+    (*q).impurem();\n }\n \n fn main() {"}, {"sha": "f0a5ea034557b61191298c50e4a36407c0373067", "filename": "src/test/compile-fail/liveness-move-in-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs?ref=9f7514bfaeef44077c5ecb78fb8571e6f0979ece", "patch": "@@ -19,9 +19,9 @@ fn main() {\n                 loop {\n // tjc: Not sure why it prints the same error twice\n                     x = move y; //~ ERROR use of moved value\n-                    //~^ NOTE move of value occurred here\n+                    //~^ NOTE move of variable occurred here\n                     //~^^ ERROR use of moved value\n-                    //~^^^ NOTE move of value occurred here\n+                    //~^^^ NOTE move of variable occurred here\n \n                     copy x;\n                 }"}, {"sha": "6110f2261b88f14893bf04959f9acedbb582e1f5", "filename": "src/test/compile-fail/liveness-move-in-while.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs?ref=9f7514bfaeef44077c5ecb78fb8571e6f0979ece", "patch": "@@ -17,8 +17,8 @@ fn main() {\n // tjc: not sure why it prints the same error twice\n         while true { while true { while true { x = move y; copy x; } } }\n         //~^ ERROR use of moved value: `y`\n-        //~^^ NOTE move of value occurred here\n+        //~^^ NOTE move of variable occurred here\n         //~^^^ ERROR use of moved value: `y`\n-        //~^^^^ NOTE move of value occurred here\n+        //~^^^^ NOTE move of variable occurred here\n     }\n }"}, {"sha": "9113ed535b70b6fdef8793a93b49daea5e890655", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=9f7514bfaeef44077c5ecb78fb8571e6f0979ece", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let x = @5;\n-    let y = move x; //~ NOTE move of value occurred here\n+    let y = move x; //~ NOTE move of variable occurred here\n     log(debug, *x); //~ ERROR use of moved value: `x`\n     copy y;\n }"}, {"sha": "5d347fce10a09fea2abbd9c2d33dbe3b2fc5f8b2", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=9f7514bfaeef44077c5ecb78fb8571e6f0979ece", "patch": "@@ -19,7 +19,7 @@ enum _chan<T> = int;\n // Tests that \"log(debug, message);\" is flagged as using\n // message after the send deinitializes it\n fn test00_start(ch: _chan<int>, message: int, _count: int) {\n-    send(ch, move message); //~ NOTE move of value occurred here\n+    send(ch, move message); //~ NOTE move of variable occurred here\n     log(debug, message); //~ ERROR use of moved value: `message`\n }\n "}, {"sha": "e3408b6372b1c083a3ba080092a97ea8d40b5be0", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=9f7514bfaeef44077c5ecb78fb8571e6f0979ece", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = arc::ARC(v);\n \n-    do task::spawn() |move arc_v| { //~ NOTE move of value occurred here\n+    do task::spawn() |move arc_v| { //~ NOTE move of variable occurred here\n         let v = *arc::get(&arc_v);\n         assert v[3] == 4;\n     };"}, {"sha": "7490448caf004fabbca5a8022a65d91f82bace54", "filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7514bfaeef44077c5ecb78fb8571e6f0979ece/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs?ref=9f7514bfaeef44077c5ecb78fb8571e6f0979ece", "patch": "@@ -9,15 +9,14 @@\n // except according to those terms.\n \n // The type of `y` ends up getting inferred to the type of the block.\n-fn broken() -> int {\n+fn broken() {\n     let mut x = 3;\n-    let mut y = ~[&mut x];\n+    let mut _y = ~[&mut x];\n     while x < 10 {\n         let mut z = x;\n-        y += ~[&mut z]; //~ ERROR illegal borrow\n+        _y.push(&mut z); //~ ERROR illegal borrow\n         x += 1;\n     }\n-    vec::foldl(0, y, |v, p| v + **p )\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}]}