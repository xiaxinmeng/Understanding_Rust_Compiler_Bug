{"sha": "6af096851124a515fa13e8cf07c646b70fce41d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZjA5Njg1MTEyNGE1MTVmYTEzZThjZjA3YzY0NmI3MGZjZTQxZDk=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-03-31T15:45:02Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-04-03T04:58:46Z"}, "message": "Change return type of 'from_toml' from 'Config' to 'Result<Config>'\n\nCloses #1426.", "tree": {"sha": "b672706b38e6c97730868d3bf19446f62dcf2358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b672706b38e6c97730868d3bf19446f62dcf2358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6af096851124a515fa13e8cf07c646b70fce41d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6af096851124a515fa13e8cf07c646b70fce41d9", "html_url": "https://github.com/rust-lang/rust/commit/6af096851124a515fa13e8cf07c646b70fce41d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6af096851124a515fa13e8cf07c646b70fce41d9/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3edc184221e53c28775873801ad2fbfa3a337af7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3edc184221e53c28775873801ad2fbfa3a337af7", "html_url": "https://github.com/rust-lang/rust/commit/3edc184221e53c28775873801ad2fbfa3a337af7"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "c60201bbb2551166d0e36811cff9414617c9122f", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6af096851124a515fa13e8cf07c646b70fce41d9/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af096851124a515fa13e8cf07c646b70fce41d9/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=6af096851124a515fa13e8cf07c646b70fce41d9", "patch": "@@ -149,7 +149,10 @@ fn resolve_config(dir: &Path) -> FmtResult<(Config, Option<PathBuf>)> {\n     let mut file = try!(File::open(&path));\n     let mut toml = String::new();\n     try!(file.read_to_string(&mut toml));\n-    Ok((Config::from_toml(&toml), Some(path)))\n+    match Config::from_toml(&toml) {\n+        Ok(cfg) => Ok((cfg, Some(path))),\n+        Err(err) => Err(FmtError::from(err)),\n+    }\n }\n \n /// read the given config file path recursively if present else read the project file path\n@@ -211,8 +214,8 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n         }\n         Operation::Stdin { input, config_path } => {\n             // try to read config from local directory\n-            let (mut config, _) = match_cli_path_or_file(config_path, &env::current_dir().unwrap())\n-                .expect(\"Error resolving config\");\n+            let (mut config, _) = match_cli_path_or_file(config_path,\n+                                                         &env::current_dir().unwrap())?;\n \n             // write_mode is always Plain for Stdin.\n             config.write_mode = WriteMode::Plain;\n@@ -232,8 +235,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             let mut path = None;\n             // Load the config path file if provided\n             if let Some(config_file) = config_path {\n-                let (cfg_tmp, path_tmp) = resolve_config(config_file.as_ref())\n-                    .expect(&format!(\"Error resolving config for {:?}\", config_file));\n+                let (cfg_tmp, path_tmp) = resolve_config(config_file.as_ref())?;\n                 config = cfg_tmp;\n                 path = path_tmp;\n             };\n@@ -248,8 +250,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             for file in files {\n                 // Check the file directory if the config-path could not be read or not provided\n                 if path.is_none() {\n-                    let (config_tmp, path_tmp) = resolve_config(file.parent().unwrap())\n-                        .expect(&format!(\"Error resolving config for {}\", file.display()));\n+                    let (config_tmp, path_tmp) = resolve_config(file.parent().unwrap())?;\n                     if options.verbose {\n                         if let Some(path) = path_tmp.as_ref() {\n                             println!(\"Using rustfmt config file {} for {}\","}, {"sha": "21ab6cd54475e3d9db18dc501eb5ed2e5a181caf", "filename": "src/config.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6af096851124a515fa13e8cf07c646b70fce41d9/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af096851124a515fa13e8cf07c646b70fce41d9/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=6af096851124a515fa13e8cf07c646b70fce41d9", "patch": "@@ -12,7 +12,6 @@ extern crate toml;\n \n use file_lines::FileLines;\n use lists::{SeparatorTactic, ListTactic};\n-use std::io::Write;\n \n macro_rules! configuration_option_enum{\n     ($e:ident: $( $x:ident ),+ $(,)*) => {\n@@ -237,26 +236,29 @@ macro_rules! create_config {\n                 self\n             }\n \n-            pub fn from_toml(toml: &str) -> Config {\n+            pub fn from_toml(toml: &str) -> Result<Config, String> {\n                 let parsed: toml::Value = toml.parse().expect(\"Could not parse TOML\");\n+                let mut err: String = String::new();\n                 for (key, _) in parsed.as_table().expect(\"Parsed config was not table\") {\n                     match &**key {\n                         $(\n                             stringify!($i) => (),\n                         )+\n-                        _ => msg!(\"Warning: Unused configuration option {}\", key),\n+                        _ => {\n+                            let msg = &format!(\"Warning: Unknown configuration option `{}`\\n\", key);\n+                            err.push_str(msg)\n+                        }\n                     }\n                 }\n-                let parsed_config:ParsedConfig = match toml::decode(parsed) {\n-                    Some(decoded) => decoded,\n+                match toml::decode(parsed) {\n+                    Some(parsed_config) =>\n+                        Ok(Config::default().fill_from_parsed_config(parsed_config)),\n                     None => {\n-                        msg!(\"Decoding config file failed. Config:\\n{}\", toml);\n-                        let parsed: toml::Value = toml.parse().expect(\"Could not parse TOML\");\n-                        msg!(\"\\n\\nParsed:\\n{:?}\", parsed);\n-                        panic!();\n+                        err.push_str(\"Error: Decoding config file failed. \");\n+                        err.push_str(\"Please check your config file.\\n\");\n+                        Err(err)\n                     }\n-                };\n-                Config::default().fill_from_parsed_config(parsed_config)\n+                }\n             }\n \n             pub fn override_value(&mut self, key: &str, val: &str) {"}, {"sha": "0d7c47feb32fb43b1b1c4c8e1fddfc0844a10845", "filename": "tests/system.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af096851124a515fa13e8cf07c646b70fce41d9/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af096851124a515fa13e8cf07c646b70fce41d9/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=6af096851124a515fa13e8cf07c646b70fce41d9", "patch": "@@ -285,7 +285,7 @@ fn get_config(config_file: Option<&str>) -> Config {\n         .read_to_string(&mut def_config)\n         .expect(\"Couldn't read config\");\n \n-    Config::from_toml(&def_config)\n+    Config::from_toml(&def_config).expect(\"Invalid toml\")\n }\n \n // Reads significant comments of the form: // rustfmt-key: value"}]}