{"sha": "e3e93f28679b58c28c02720d2281f1a79751394e", "node_id": "C_kwDOAAsO6NoAKGUzZTkzZjI4Njc5YjU4YzI4YzAyNzIwZDIyODFmMWE3OTc1MTM5NGU", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-05-02T15:42:36Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-05-02T15:42:36Z"}, "message": "Use `GrowableBitSet` to store positional indexes in `asm!`", "tree": {"sha": "f471057734a324772e721fd031e6b6593e8cb87e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f471057734a324772e721fd031e6b6593e8cb87e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3e93f28679b58c28c02720d2281f1a79751394e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3e93f28679b58c28c02720d2281f1a79751394e", "html_url": "https://github.com/rust-lang/rust/commit/e3e93f28679b58c28c02720d2281f1a79751394e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3e93f28679b58c28c02720d2281f1a79751394e/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1590350836e36dde1190c28af0e521f63994b47f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1590350836e36dde1190c28af0e521f63994b47f", "html_url": "https://github.com/rust-lang/rust/commit/1590350836e36dde1190c28af0e521f63994b47f"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "6679cfbae773510f551c085fa2ce94d8438370d7", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3e93f28679b58c28c02720d2281f1a79751394e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e3e93f28679b58c28c02720d2281f1a79751394e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e3e93f28679b58c28c02720d2281f1a79751394e", "patch": "@@ -3164,6 +3164,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_fluent_macro\",\n+ \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_lint_defs\",\n  \"rustc_macros\","}, {"sha": "44012e802aa7bb472e8a864e756e2dd70621daaf", "filename": "compiler/rustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3e93f28679b58c28c02720d2281f1a79751394e/compiler%2Frustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e3e93f28679b58c28c02720d2281f1a79751394e/compiler%2Frustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2FCargo.toml?ref=e3e93f28679b58c28c02720d2281f1a79751394e", "patch": "@@ -14,6 +14,7 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_expand = { path = \"../rustc_expand\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_index = { path = \"../rustc_index\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_macros = { path = \"../rustc_macros\" }"}, {"sha": "58b976109243b38a27f010b16a21fbeb20f7cac2", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e3e93f28679b58c28c02720d2281f1a79751394e/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e93f28679b58c28c02720d2281f1a79751394e/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=e3e93f28679b58c28c02720d2281f1a79751394e", "patch": "@@ -2,9 +2,10 @@ use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter};\n use rustc_ast::tokenstream::TokenStream;\n-use rustc_data_structures::fx::{FxHashMap, FxIndexMap, FxIndexSet};\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_errors::PResult;\n use rustc_expand::base::{self, *};\n+use rustc_index::bit_set::GrowableBitSet;\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n use rustc_session::lint;\n@@ -21,7 +22,7 @@ pub struct AsmArgs {\n     pub templates: Vec<P<ast::Expr>>,\n     pub operands: Vec<(ast::InlineAsmOperand, Span)>,\n     named_args: FxIndexMap<Symbol, usize>,\n-    reg_args: FxIndexSet<usize>,\n+    reg_args: GrowableBitSet<usize>,\n     pub clobber_abis: Vec<(Symbol, Span)>,\n     options: ast::InlineAsmOptions,\n     pub options_spans: Vec<Span>,\n@@ -213,7 +214,7 @@ pub fn parse_asm_args<'a>(\n         } else {\n             if !args.named_args.is_empty() || !args.reg_args.is_empty() {\n                 let named = args.named_args.values().map(|p| args.operands[*p].1).collect();\n-                let explicit = args.reg_args.iter().map(|p| args.operands[*p].1).collect();\n+                let explicit = args.reg_args.iter().map(|p| args.operands[p].1).collect();\n \n                 diag.emit_err(errors::AsmPositionalAfter { span, named, explicit });\n             }\n@@ -446,8 +447,8 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n     // Register operands are implicitly used since they are not allowed to be\n     // referenced in the template string.\n     let mut used = vec![false; args.operands.len()];\n-    for pos in &args.reg_args {\n-        used[*pos] = true;\n+    for pos in args.reg_args.iter() {\n+        used[pos] = true;\n     }\n     let named_pos: FxHashMap<usize, Symbol> =\n         args.named_args.iter().map(|(&sym, &idx)| (idx, sym)).collect();\n@@ -581,7 +582,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                         parse::ArgumentIs(idx) | parse::ArgumentImplicitlyIs(idx) => {\n                             if idx >= args.operands.len()\n                                 || named_pos.contains_key(&idx)\n-                                || args.reg_args.contains(&idx)\n+                                || args.reg_args.contains(idx)\n                             {\n                                 let msg = format!(\"invalid reference to argument at index {}\", idx);\n                                 let mut err = ecx.struct_span_err(span, &msg);\n@@ -608,7 +609,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                                         args.operands[idx].1,\n                                         \"named arguments cannot be referenced by position\",\n                                     );\n-                                } else if args.reg_args.contains(&idx) {\n+                                } else if args.reg_args.contains(idx) {\n                                     err.span_label(\n                                         args.operands[idx].1,\n                                         \"explicit register argument\","}]}