{"sha": "5924c2511e43dd077df78d9936ccd0d76168ad30", "node_id": "C_kwDOAAsO6NoAKDU5MjRjMjUxMWU0M2RkMDc3ZGY3OGQ5OTM2Y2NkMGQ3NjE2OGFkMzA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-12T20:28:57Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-12T22:25:30Z"}, "message": "Only point at impl self ty in WF if trait predicate shares self ty", "tree": {"sha": "e37dddc14fe997b1da19c30318cd4de3bb57a304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e37dddc14fe997b1da19c30318cd4de3bb57a304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5924c2511e43dd077df78d9936ccd0d76168ad30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5924c2511e43dd077df78d9936ccd0d76168ad30", "html_url": "https://github.com/rust-lang/rust/commit/5924c2511e43dd077df78d9936ccd0d76168ad30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5924c2511e43dd077df78d9936ccd0d76168ad30/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aabb0fd5da283129205acb9c3e4d70a01238a93", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aabb0fd5da283129205acb9c3e4d70a01238a93", "html_url": "https://github.com/rust-lang/rust/commit/2aabb0fd5da283129205acb9c3e4d70a01238a93"}], "stats": {"total": 83, "additions": 45, "deletions": 38}, "files": [{"sha": "92fd4625ee83574dbe515e06928cfe2373b5878a", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -1267,14 +1267,21 @@ fn check_impl<'tcx>(\n                     },\n                     polarity: ty::ImplPolarity::Positive,\n                 };\n-                let obligations = traits::wf::trait_obligations(\n+                let mut obligations = traits::wf::trait_obligations(\n                     wfcx.infcx,\n                     wfcx.param_env,\n                     wfcx.body_id,\n                     &trait_pred,\n-                    ast_self_ty.span,\n+                    ast_trait_ref.path.span,\n                     item,\n                 );\n+                for obligation in &mut obligations {\n+                    if let Some(pred) = obligation.predicate.to_opt_poly_trait_pred()\n+                        && pred.self_ty().skip_binder() == trait_ref.self_ty()\n+                    {\n+                        obligation.cause.span = ast_self_ty.span;\n+                    }\n+                }\n                 debug!(?obligations);\n                 wfcx.register_obligations(obligations);\n             }"}, {"sha": "bd6e627a3d0d577f43fbc1f76769991681a52ff5", "filename": "tests/ui/associated-types/hr-associated-type-bound-param-6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `for<'b> T: X<'b, T>` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-6.rs:12:25\n+  --> $DIR/hr-associated-type-bound-param-6.rs:12:12\n    |\n LL | impl<S, T> X<'_, T> for (S,) {\n-   |                         ^^^^ the trait `for<'b> X<'b, T>` is not implemented for `T`\n+   |            ^^^^^^^^ the trait `for<'b> X<'b, T>` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "a65f84ae58eadd479dffcd1d22aac7e643993330", "filename": "tests/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -1,8 +1,8 @@\n error[E0271]: type mismatch resolving `<T as Deref>::Target == T`\n-  --> $DIR/hr-associated-type-projection-1.rs:13:55\n+  --> $DIR/hr-associated-type-projection-1.rs:13:33\n    |\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n-   |      - this type parameter                            ^ expected type parameter `T`, found associated type\n+   |      - this type parameter      ^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n    |\n    = note: expected type parameter `T`\n              found associated type `<T as Deref>::Target`"}, {"sha": "e2b177b951cc9a2c2bda0f492468fc4e97faa295", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-self-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -1,8 +1,8 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/builtin-superkinds-self-type.rs:10:24\n+  --> $DIR/builtin-superkinds-self-type.rs:10:16\n    |\n LL | impl <T: Sync> Foo for T { }\n-   |                        ^ ...so that the type `T` will meet its required lifetime bounds...\n+   |                ^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n   --> $DIR/builtin-superkinds-self-type.rs:6:24"}, {"sha": "c7be8e14a10d5889b440a92fb47a3b02c11fbe13", "filename": "tests/ui/const-generics/issues/issue-67185-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -23,10 +23,10 @@ LL |     [<u8 as Baz>::Quaks; 2]: Bar,\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:21:14\n+  --> $DIR/issue-67185-2.rs:21:6\n    |\n LL | impl Foo for FooImpl {}\n-   |              ^^^^^^^ the trait `Bar` is not implemented for `[u16; 3]`\n+   |      ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n    = help: the following other types implement trait `Bar`:\n              [[u16; 3]; 3]\n@@ -41,10 +41,10 @@ LL |     <u8 as Baz>::Quaks: Bar,\n    |                         ^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:21:14\n+  --> $DIR/issue-67185-2.rs:21:6\n    |\n LL | impl Foo for FooImpl {}\n-   |              ^^^^^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+   |      ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n    = help: the following other types implement trait `Bar`:\n              [[u16; 3]; 3]"}, {"sha": "60e9de90332cc381dff3058e401659ece13e34f4", "filename": "tests/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `[isize]` cannot be known at compilation time\n-  --> $DIR/dst-sized-trait-param.rs:7:23\n+  --> $DIR/dst-sized-trait-param.rs:7:6\n    |\n LL | impl Foo<[isize]> for usize { }\n-   |                       ^^^^^ doesn't have a size known at compile-time\n+   |      ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[isize]`\n note: required by a bound in `Foo`"}, {"sha": "458756a3dcd9625a62a8393eb61e68c572de2446", "filename": "tests/ui/fn/implied-bounds-unnorm-associated-type-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-5.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -1,8 +1,8 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/implied-bounds-unnorm-associated-type-5.rs:6:27\n+  --> $DIR/implied-bounds-unnorm-associated-type-5.rs:6:13\n    |\n LL | impl<'a, T> Trait<'a> for T {\n-   |                           ^ ...so that the type `T` will meet its required lifetime bounds...\n+   |             ^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n   --> $DIR/implied-bounds-unnorm-associated-type-5.rs:1:18"}, {"sha": "6791182238c72d978041c2bb39edbdd1e69a6c5c", "filename": "tests/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `[()]` cannot be known at compilation time\n-  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:19:17\n+  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:19:6\n    |\n LL | impl Tsized for () {}\n-   |                 ^^ doesn't have a size known at compile-time\n+   |      ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[()]`\n note: required by a bound in `Tsized`"}, {"sha": "46b9fd541adfa59f07df1d46b90611b4cd2594c1", "filename": "tests/ui/issues/issue-10412.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fissues%2Fissue-10412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fissues%2Fissue-10412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-10412.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -53,10 +53,10 @@ LL | impl<'self> Serializable<'_, str> for &'self str {\n    |                          +++\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/issue-10412.rs:7:35\n+  --> $DIR/issue-10412.rs:7:13\n    |\n LL | impl<'self> Serializable<str> for &'self str {\n-   |                                   ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n note: required by a bound in `Serializable`"}, {"sha": "2e16007825935a159bf5d213f332dd096b54d483", "filename": "tests/ui/overloaded/overloaded-calls-nontuple.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -1,17 +1,17 @@\n error[E0059]: type parameter to bare `FnMut` trait must be a tuple\n-  --> $DIR/overloaded-calls-nontuple.rs:10:23\n+  --> $DIR/overloaded-calls-nontuple.rs:10:6\n    |\n LL | impl FnMut<isize> for S {\n-   |                       ^ the trait `Tuple` is not implemented for `isize`\n+   |      ^^^^^^^^^^^^ the trait `Tuple` is not implemented for `isize`\n    |\n note: required by a bound in `FnMut`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n \n error[E0059]: type parameter to bare `FnOnce` trait must be a tuple\n-  --> $DIR/overloaded-calls-nontuple.rs:18:24\n+  --> $DIR/overloaded-calls-nontuple.rs:18:6\n    |\n LL | impl FnOnce<isize> for S {\n-   |                        ^ the trait `Tuple` is not implemented for `isize`\n+   |      ^^^^^^^^^^^^^ the trait `Tuple` is not implemented for `isize`\n    |\n note: required by a bound in `FnOnce`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL"}, {"sha": "e7801603493d2e77cdd69cdfa9531c9dab07630e", "filename": "tests/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -9,10 +9,10 @@ LL | #![feature(specialization)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0277]: the trait bound `U: Eq` is not satisfied\n-  --> $DIR/specialization-wfcheck.rs:7:37\n+  --> $DIR/specialization-wfcheck.rs:7:17\n    |\n LL | default impl<U> Foo<'static, U> for () {}\n-   |                                     ^^ the trait `Eq` is not implemented for `U`\n+   |                 ^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `U`\n    |\n note: required by a bound in `Foo`\n   --> $DIR/specialization-wfcheck.rs:5:18"}, {"sha": "4af3370c799448eee1a2db4ff7841cfffbad12dd", "filename": "tests/ui/static/static-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fstatic%2Fstatic-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Fstatic%2Fstatic-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fstatic-lifetime.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -1,8 +1,8 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/static-lifetime.rs:3:34\n+  --> $DIR/static-lifetime.rs:3:20\n    |\n LL | impl<'a, A: Clone> Arbitrary for ::std::borrow::Cow<'a, A> {}\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/static-lifetime.rs:3:6"}, {"sha": "da27ba1c58dbee7913b913838477ca5d751859c7", "filename": "tests/ui/trait-bounds/unsized-bound.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -223,10 +223,10 @@ LL | trait Trait6<A: ?Sized, B> {}\n    |               ++++++++\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:26:29\n+  --> $DIR/unsized-bound.rs:26:12\n    |\n LL | impl<X, Y> Trait7<X, Y> for X where Y: ?Sized {}\n-   |         -                   ^ doesn't have a size known at compile-time\n+   |         -  ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n@@ -246,10 +246,10 @@ LL | trait Trait7<A, B: ?Sized> {}\n    |                  ++++++++\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:29:37\n+  --> $DIR/unsized-bound.rs:29:20\n    |\n LL | impl<X, Y: ?Sized> Trait8<X, Y> for X {}\n-   |         -                           ^ doesn't have a size known at compile-time\n+   |         -          ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |"}, {"sha": "8a43742260bb2230a328a5460c93ae893575f724", "filename": "tests/ui/traits/bound/on-structs-and-enums-in-impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `u16: Trait` is not satisfied\n-  --> $DIR/on-structs-and-enums-in-impls.rs:20:30\n+  --> $DIR/on-structs-and-enums-in-impls.rs:20:6\n    |\n LL | impl PolyTrait<Foo<u16>> for Struct {\n-   |                              ^^^^^^ the trait `Trait` is not implemented for `u16`\n+   |      ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u16`\n    |\n note: required by a bound in `Foo`\n   --> $DIR/on-structs-and-enums-in-impls.rs:3:14"}, {"sha": "f81487d5231ab514249c0222b0a85fc8aad3282a", "filename": "tests/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized-trait-impl-trait-arg.rs:8:27\n+  --> $DIR/unsized-trait-impl-trait-arg.rs:8:17\n    |\n LL | impl<X: ?Sized> T2<X> for S4<X> {\n-   |      -                    ^^^^^ doesn't have a size known at compile-time\n+   |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |"}, {"sha": "1555b9df4f8d43b0f7381fc095d251b28f253d5a", "filename": "tests/ui/unsized/unsized7.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Funsized%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5924c2511e43dd077df78d9936ccd0d76168ad30/tests%2Fui%2Funsized%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized7.stderr?ref=5924c2511e43dd077df78d9936ccd0d76168ad30", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized7.rs:12:31\n+  --> $DIR/unsized7.rs:12:21\n    |\n LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n-   |      -                        ^^^^^ doesn't have a size known at compile-time\n+   |      -              ^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |"}]}