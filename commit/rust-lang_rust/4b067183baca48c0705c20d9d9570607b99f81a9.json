{"sha": "4b067183baca48c0705c20d9d9570607b99f81a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMDY3MTgzYmFjYTQ4YzA3MDVjMjBkOWQ5NTcwNjA3Yjk5ZjgxYTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-05T08:35:54Z"}, "committer": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-09T15:53:43Z"}, "message": "Allow registering MIR-passes through compiler plugins", "tree": {"sha": "d996ef96fb6acc619550eb26147078603c593a64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d996ef96fb6acc619550eb26147078603c593a64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b067183baca48c0705c20d9d9570607b99f81a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b067183baca48c0705c20d9d9570607b99f81a9", "html_url": "https://github.com/rust-lang/rust/commit/4b067183baca48c0705c20d9d9570607b99f81a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b067183baca48c0705c20d9d9570607b99f81a9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "030b237476e1aef16dc01f3efef12d0dba765c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/030b237476e1aef16dc01f3efef12d0dba765c07", "html_url": "https://github.com/rust-lang/rust/commit/030b237476e1aef16dc01f3efef12d0dba765c07"}], "stats": {"total": 113, "additions": 110, "deletions": 3}, "files": [{"sha": "3021727cb109f7a58f3ce6bc77df13481979d02a", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b067183baca48c0705c20d9d9570607b99f81a9/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4b067183baca48c0705c20d9d9570607b99f81a9/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=4b067183baca48c0705c20d9d9570607b99f81a9", "patch": "@@ -106,7 +106,7 @@ DEPS_rustc_passes := syntax rustc core rustc_front\n DEPS_rustc_mir := rustc rustc_front syntax\n DEPS_rustc_resolve := arena rustc rustc_front log syntax\n DEPS_rustc_platform_intrinsics := rustc rustc_llvm\n-DEPS_rustc_plugin := rustc rustc_metadata syntax\n+DEPS_rustc_plugin := rustc rustc_metadata syntax rustc_mir\n DEPS_rustc_privacy := rustc rustc_front log syntax\n DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back rustc_mir \\\n                     log syntax serialize rustc_llvm rustc_front rustc_platform_intrinsics"}, {"sha": "aa24f6d89796971a3350ef62dc60a23d5d0c9b6c", "filename": "src/librustc/mir/mir_map.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Flibrustc%2Fmir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Flibrustc%2Fmir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmir_map.rs?ref=4b067183baca48c0705c20d9d9570607b99f81a9", "patch": "@@ -10,8 +10,19 @@\n \n use util::nodemap::NodeMap;\n use mir::repr::Mir;\n+use mir::transform::MirPass;\n+use middle::ty;\n \n pub struct MirMap<'tcx> {\n     pub map: NodeMap<Mir<'tcx>>,\n }\n \n+impl<'tcx> MirMap<'tcx> {\n+    pub fn run_passes(&mut self, passes: &mut [Box<MirPass>], tcx: &ty::ctxt<'tcx>) {\n+        for (_, ref mut mir) in &mut self.map {\n+            for pass in &mut *passes {\n+                pass.run_on_mir(mir, tcx)\n+            }\n+        }\n+    }\n+}"}, {"sha": "d2f8d3f09fd7c9fb35e6ceb648ba01b3deb3561d", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=4b067183baca48c0705c20d9d9570607b99f81a9", "patch": "@@ -13,6 +13,7 @@ use middle::cstore::CrateStore;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n use util::nodemap::{NodeMap, FnvHashMap};\n+use mir::transform::MirPass;\n \n use syntax::ast::{NodeId, NodeIdAssigner, Name};\n use syntax::codemap::{Span, MultiSpan};\n@@ -59,6 +60,7 @@ pub struct Session {\n     pub lint_store: RefCell<lint::LintStore>,\n     pub lints: RefCell<NodeMap<Vec<(lint::LintId, Span, String)>>>,\n     pub plugin_llvm_passes: RefCell<Vec<String>>,\n+    pub plugin_mir_passes: RefCell<Vec<Box<MirPass>>>,\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n@@ -475,6 +477,7 @@ pub fn build_session_(sopts: config::Options,\n         lint_store: RefCell::new(lint::LintStore::new()),\n         lints: RefCell::new(NodeMap()),\n         plugin_llvm_passes: RefCell::new(Vec::new()),\n+        plugin_mir_passes: RefCell::new(Vec::new()),\n         plugin_attributes: RefCell::new(Vec::new()),\n         crate_types: RefCell::new(Vec::new()),\n         dependency_formats: RefCell::new(FnvHashMap()),"}, {"sha": "6c5b577e0d1a4f5dc7af579347fe5029c57c2e3d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4b067183baca48c0705c20d9d9570607b99f81a9", "patch": "@@ -545,7 +545,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     });\n \n     let Registry { syntax_exts, early_lint_passes, late_lint_passes, lint_groups,\n-                   llvm_passes, attributes, .. } = registry;\n+                   llvm_passes, attributes, mir_passes, .. } = registry;\n \n     try!(sess.track_errors(|| {\n         let mut ls = sess.lint_store.borrow_mut();\n@@ -561,6 +561,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n \n         *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n+        *sess.plugin_mir_passes.borrow_mut() = mir_passes;\n         *sess.plugin_attributes.borrow_mut() = attributes.clone();\n     }));\n \n@@ -843,11 +844,15 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n              \"match checking\",\n              || middle::check_match::check_crate(tcx));\n \n-        let mir_map =\n+        let mut mir_map =\n             time(time_passes,\n                  \"MIR dump\",\n                  || mir::mir_map::build_mir_for_crate(tcx));\n \n+        time(time_passes,\n+             \"MIR passes\",\n+             || mir_map.run_passes(&mut sess.plugin_mir_passes.borrow_mut(), tcx));\n+\n         time(time_passes,\n              \"liveness checking\",\n              || middle::liveness::check_crate(tcx));"}, {"sha": "464899d5d4fe390e61ebf53c8509d8dc6e801f3f", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=4b067183baca48c0705c20d9d9570607b99f81a9", "patch": "@@ -71,6 +71,7 @@\n extern crate rustc;\n extern crate rustc_front;\n extern crate rustc_metadata;\n+extern crate rustc_mir;\n \n pub use self::registry::Registry;\n "}, {"sha": "a51fd58db88dd1cda706cba1b62616d93b35a7e1", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=4b067183baca48c0705c20d9d9570607b99f81a9", "patch": "@@ -13,6 +13,8 @@\n use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n use rustc::session::Session;\n \n+use rustc::mir::transform::MirPass;\n+\n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n use syntax::ext::base::{IdentTT, MultiModifier, MultiDecorator};\n use syntax::ext::base::{MacroExpanderFn, MacroRulesTT};\n@@ -53,6 +55,9 @@ pub struct Registry<'a> {\n     #[doc(hidden)]\n     pub late_lint_passes: Vec<LateLintPassObject>,\n \n+    #[doc(hidden)]\n+    pub mir_passes: Vec<Box<MirPass>>,\n+\n     #[doc(hidden)]\n     pub lint_groups: HashMap<&'static str, Vec<LintId>>,\n \n@@ -76,6 +81,7 @@ impl<'a> Registry<'a> {\n             lint_groups: HashMap::new(),\n             llvm_passes: vec!(),\n             attributes: vec!(),\n+            mir_passes: Vec::new(),\n         }\n     }\n \n@@ -134,6 +140,11 @@ impl<'a> Registry<'a> {\n         self.lint_groups.insert(name, to.into_iter().map(|x| LintId::of(x)).collect());\n     }\n \n+    /// Register a MIR pass\n+    pub fn register_mir_pass(&mut self, pass: Box<MirPass>) {\n+        self.mir_passes.push(pass);\n+    }\n+\n     /// Register an LLVM pass.\n     ///\n     /// Registration with LLVM itself is handled through static C++ objects with"}, {"sha": "df9ea4ab012e7dc9cabab129296cc0a4236378e4", "filename": "src/test/auxiliary/dummy_mir_pass.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs?ref=4b067183baca48c0705c20d9d9570607b99f81a9", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![feature(plugin_registrar, rustc_private)]\n+#![feature(box_syntax)]\n+\n+#[macro_use] extern crate rustc;\n+extern crate rustc_front;\n+extern crate rustc_plugin;\n+extern crate syntax;\n+\n+use rustc::mir::transform::MirPass;\n+use rustc::mir::repr::{Mir, Literal};\n+use rustc::mir::visit::MutVisitor;\n+use rustc::middle::ty;\n+use rustc::middle::const_eval::ConstVal;\n+use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n+use rustc_plugin::Registry;\n+use rustc_front::hir;\n+use syntax::attr;\n+\n+struct Pass;\n+\n+impl MirPass for Pass {\n+    fn run_on_mir<'tcx>(&mut self, mir: &mut Mir<'tcx>, tcx: &ty::ctxt<'tcx>) {\n+        Visitor.visit_mir(mir)\n+    }\n+}\n+\n+struct Visitor;\n+\n+impl<'tcx> MutVisitor<'tcx> for Visitor {\n+    fn visit_literal(&mut self, literal: &mut Literal<'tcx>) {\n+        if let Literal::Value { value: ConstVal::Int(ref mut i @ 11) } = *literal {\n+            *i = 42;\n+        }\n+    }\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_mir_pass(box Pass);\n+}"}, {"sha": "acf11e241033cccf6ab5b8e4c8053555201d9943", "filename": "src/test/run-pass-fulldeps/mir-pass.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Ftest%2Frun-pass-fulldeps%2Fmir-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b067183baca48c0705c20d9d9570607b99f81a9/src%2Ftest%2Frun-pass-fulldeps%2Fmir-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmir-pass.rs?ref=4b067183baca48c0705c20d9d9570607b99f81a9", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:dummy_mir_pass.rs\n+// ignore-stage1\n+\n+#![feature(plugin, rustc_attrs)]\n+#![plugin(dummy_mir_pass)]\n+\n+#[rustc_mir]\n+fn math() -> i32 {\n+    11\n+}\n+\n+pub fn main() {\n+    assert_eq!(math(), 42);\n+}"}]}