{"sha": "1fe2e2941d93da397c8ace5f410c0ab3dc5a3049", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZTJlMjk0MWQ5M2RhMzk3YzhhY2U1ZjQxMGMwYWIzZGM1YTMwNDk=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-08-15T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-08-15T00:00:00Z"}, "message": "MatchBranchSimplification: fix equal const bool assignments\n\nThe match branch simplification is applied when target blocks contain\nstatements that are either equal or perform a const bool assignment with\ndifferent values to the same place.\n\nPreviously, when constructing new statements, only statements from a\nsingle block had been examined. This lead to a misoptimization when\nstatements are equal because the assign the *same* const bool value to\nthe same place.\n\nFix the issue by examining statements from both blocks when deciding on\nreplacement.", "tree": {"sha": "d0dc222ef5e016c57c05e9bdc163adffa49e59ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0dc222ef5e016c57c05e9bdc163adffa49e59ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049", "html_url": "https://github.com/rust-lang/rust/commit/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fae04968eccb8797000b5a42760005b35504136", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fae04968eccb8797000b5a42760005b35504136", "html_url": "https://github.com/rust-lang/rust/commit/4fae04968eccb8797000b5a42760005b35504136"}], "stats": {"total": 506, "additions": 447, "deletions": 59}, "files": [{"sha": "b78dee753f85f9f95029c40ea453a488993506ed", "filename": "src/librustc_mir/transform/match_branches.rs", "status": "modified", "additions": 82, "deletions": 35, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs?ref=1fe2e2941d93da397c8ace5f410c0ab3dc5a3049", "patch": "@@ -4,10 +4,37 @@ use rustc_middle::ty::TyCtxt;\n \n pub struct MatchBranchSimplification;\n \n-// What's the intent of this pass?\n-// If one block is found that switches between blocks which both go to the same place\n-// AND both of these blocks set a similar const in their ->\n-// condense into 1 block based on discriminant AND goto the destination afterwards\n+/// If a source block is found that switches between two blocks that are exactly\n+/// the same modulo const bool assignments (e.g., one assigns true another false\n+/// to the same place), merge a target block statements into the source block,\n+/// using Eq / Ne comparison with switch value where const bools value differ.\n+///\n+/// For example:\n+///\n+/// ```rust\n+/// bb0: {\n+///     switchInt(move _3) -> [42_isize: bb1, otherwise: bb2];\n+/// }\n+///\n+/// bb1: {\n+///     _2 = const true;\n+///     goto -> bb3;\n+/// }\n+///\n+/// bb2: {\n+///     _2 = const false;\n+///     goto -> bb3;\n+/// }\n+/// ```\n+///\n+/// into:\n+///\n+/// ```rust\n+/// bb0: {\n+///    _2 = Eq(move _3, const 42_isize);\n+///    goto -> bb3;\n+/// }\n+/// ```\n \n impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n@@ -42,48 +69,68 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n             }\n             for (f, s) in first_stmts.iter().zip(scnd_stmts.iter()) {\n                 match (&f.kind, &s.kind) {\n-                    // If two statements are exactly the same just ignore them.\n-                    (f_s, s_s) if f_s == s_s => (),\n+                    // If two statements are exactly the same, we can optimize.\n+                    (f_s, s_s) if f_s == s_s => {}\n \n+                    // If two statements are const bool assignments to the same place, we can optimize.\n                     (\n                         StatementKind::Assign(box (lhs_f, Rvalue::Use(Operand::Constant(f_c)))),\n                         StatementKind::Assign(box (lhs_s, Rvalue::Use(Operand::Constant(s_c)))),\n-                    ) if lhs_f == lhs_s && f_c.literal.ty.is_bool() && s_c.literal.ty.is_bool() => {\n-                        let f_c = f_c.literal.try_eval_bool(tcx, param_env).unwrap();\n-                        let s_c = s_c.literal.try_eval_bool(tcx, param_env).unwrap();\n-                        if f_c != s_c {\n-                            // have to check this here because f_c & s_c might have\n-                            // different spans.\n-                            continue;\n-                        }\n-                        continue 'outer;\n-                    }\n-                    // If there are not exclusively assignments, then ignore this\n+                    ) if lhs_f == lhs_s\n+                        && f_c.literal.ty.is_bool()\n+                        && s_c.literal.ty.is_bool()\n+                        && f_c.literal.try_eval_bool(tcx, param_env).is_some()\n+                        && s_c.literal.try_eval_bool(tcx, param_env).is_some() => {}\n+\n+                    // Otherwise we cannot optimize. Try another block.\n                     _ => continue 'outer,\n                 }\n             }\n-            // Take owenership of items now that we know we can optimize.\n+            // Take ownership of items now that we know we can optimize.\n             let discr = discr.clone();\n-            let (from, first) = bbs.pick2_mut(bb_idx, first);\n \n-            let new_stmts = first.statements.iter().cloned().map(|mut s| {\n-                if let StatementKind::Assign(box (_, ref mut rhs)) = s.kind {\n-                    if let Rvalue::Use(Operand::Constant(c)) = rhs {\n-                        let size = tcx.layout_of(param_env.and(switch_ty)).unwrap().size;\n-                        let const_cmp = Operand::const_from_scalar(\n-                            tcx,\n-                            switch_ty,\n-                            crate::interpret::Scalar::from_uint(val, size),\n-                            rustc_span::DUMMY_SP,\n-                        );\n-                        if let Some(c) = c.literal.try_eval_bool(tcx, param_env) {\n-                            let op = if c { BinOp::Eq } else { BinOp::Ne };\n-                            *rhs = Rvalue::BinaryOp(op, Operand::Copy(discr), const_cmp);\n+            let new_stmts = first_stmts\n+                .iter()\n+                .zip(scnd_stmts.iter())\n+                .map(|(f, s)| {\n+                    match (&f.kind, &s.kind) {\n+                        (f_s, s_s) if f_s == s_s => (*f).clone(),\n+\n+                        (\n+                            StatementKind::Assign(box (lhs, Rvalue::Use(Operand::Constant(f_c)))),\n+                            StatementKind::Assign(box (_, Rvalue::Use(Operand::Constant(s_c)))),\n+                        ) => {\n+                            // From earlier loop we know that we are dealing with bool constants only:\n+                            let f_b = f_c.literal.try_eval_bool(tcx, param_env).unwrap();\n+                            let s_b = s_c.literal.try_eval_bool(tcx, param_env).unwrap();\n+                            if f_b == s_b {\n+                                // Same value in both blocks. Use statement as is.\n+                                (*f).clone()\n+                            } else {\n+                                // Different value between blocks. Make value conditional on switch condition.\n+                                let size = tcx.layout_of(param_env.and(switch_ty)).unwrap().size;\n+                                let const_cmp = Operand::const_from_scalar(\n+                                    tcx,\n+                                    switch_ty,\n+                                    crate::interpret::Scalar::from_uint(val, size),\n+                                    rustc_span::DUMMY_SP,\n+                                );\n+                                let op = if f_b { BinOp::Eq } else { BinOp::Ne };\n+                                let rhs =\n+                                    Rvalue::BinaryOp(op, Operand::Copy(discr.clone()), const_cmp);\n+                                Statement {\n+                                    source_info: f.source_info,\n+                                    kind: StatementKind::Assign(box (*lhs, rhs)),\n+                                }\n+                            }\n                         }\n+\n+                        _ => unreachable!(),\n                     }\n-                }\n-                s\n-            });\n+                })\n+                .collect::<Vec<_>>();\n+\n+            let (from, first) = bbs.pick2_mut(bb_idx, first);\n             from.statements.extend(new_stmts);\n             from.terminator_mut().kind = first.terminator().kind.clone();\n         }"}, {"sha": "968890e3a298c2ab0578145afb5a55ea2b19de3c", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.diff.32bit", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff.32bit?ref=1fe2e2941d93da397c8ace5f410c0ab3dc5a3049", "patch": "@@ -0,0 +1,156 @@\n+- // MIR for `bar` before MatchBranchSimplification\n++ // MIR for `bar` after MatchBranchSimplification\n+  \n+  fn bar(_1: i32) -> (bool, bool, bool, bool) {\n+      debug i => _1;                       // in scope 0 at $DIR/matches_reduce_branches.rs:11:8: 11:9\n+      let mut _0: (bool, bool, bool, bool); // return place in scope 0 at $DIR/matches_reduce_branches.rs:11:19: 11:43\n+      let _2: bool;                        // in scope 0 at $DIR/matches_reduce_branches.rs:12:9: 12:10\n+      let _6: ();                          // in scope 0 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n+      let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:34:6: 34:7\n+      let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:34:9: 34:10\n+      let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:34:12: 34:13\n+      let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:34:15: 34:16\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/matches_reduce_branches.rs:12:9: 12:10\n+          let _3: bool;                    // in scope 1 at $DIR/matches_reduce_branches.rs:13:9: 13:10\n+          scope 2 {\n+              debug b => _3;               // in scope 2 at $DIR/matches_reduce_branches.rs:13:9: 13:10\n+              let _4: bool;                // in scope 2 at $DIR/matches_reduce_branches.rs:14:9: 14:10\n+              scope 3 {\n+                  debug c => _4;           // in scope 3 at $DIR/matches_reduce_branches.rs:14:9: 14:10\n+                  let _5: bool;            // in scope 3 at $DIR/matches_reduce_branches.rs:15:9: 15:10\n+                  scope 4 {\n+                      debug d => _5;       // in scope 4 at $DIR/matches_reduce_branches.rs:15:9: 15:10\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:12:9: 12:10\n+          StorageLive(_3);                 // scope 1 at $DIR/matches_reduce_branches.rs:13:9: 13:10\n+          StorageLive(_4);                 // scope 2 at $DIR/matches_reduce_branches.rs:14:9: 14:10\n+          StorageLive(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:15:9: 15:10\n+          StorageLive(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n+-         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:18:9: 18:10\n++         _2 = Ne(_1, const 7_i32);        // scope 4 at $DIR/matches_reduce_branches.rs:19:13: 19:22\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000007))\n++                                          // mir::Constant\n++                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000007)) }\n++         _3 = Eq(_1, const 7_i32);        // scope 4 at $DIR/matches_reduce_branches.rs:20:13: 20:21\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000007))\n++                                          // mir::Constant\n++                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000007)) }\n++         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:22\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/matches_reduce_branches.rs:21:17: 21:22\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/matches_reduce_branches.rs:22:17: 22:21\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:18:9: 18:10\n+      }\n+  \n+      bb1: {\n+          _2 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:26:13: 26:21\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:26:17: 26:21\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:27:13: 27:22\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:27:17: 27:22\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:28:13: 28:22\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:28:17: 28:22\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:29:13: 29:21\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:29:17: 29:21\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n+      }\n+  \n+      bb2: {\n+          _2 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:19:13: 19:22\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:19:17: 19:22\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          _3 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:20:13: 20:21\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:20:17: 20:21\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:22\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:21:17: 21:22\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:22:17: 22:21\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n+      }\n+  \n+      bb3: {\n+          StorageDead(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:32:6: 32:7\n+          StorageLive(_7);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:6: 34:7\n+          _7 = _2;                         // scope 4 at $DIR/matches_reduce_branches.rs:34:6: 34:7\n+          StorageLive(_8);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:9: 34:10\n+          _8 = _3;                         // scope 4 at $DIR/matches_reduce_branches.rs:34:9: 34:10\n+          StorageLive(_9);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:12: 34:13\n+          _9 = _4;                         // scope 4 at $DIR/matches_reduce_branches.rs:34:12: 34:13\n+          StorageLive(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:34:15: 34:16\n+          _10 = _5;                        // scope 4 at $DIR/matches_reduce_branches.rs:34:15: 34:16\n+          (_0.0: bool) = move _7;          // scope 4 at $DIR/matches_reduce_branches.rs:34:5: 34:17\n+          (_0.1: bool) = move _8;          // scope 4 at $DIR/matches_reduce_branches.rs:34:5: 34:17\n+          (_0.2: bool) = move _9;          // scope 4 at $DIR/matches_reduce_branches.rs:34:5: 34:17\n+          (_0.3: bool) = move _10;         // scope 4 at $DIR/matches_reduce_branches.rs:34:5: 34:17\n+          StorageDead(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:34:16: 34:17\n+          StorageDead(_9);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:16: 34:17\n+          StorageDead(_8);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:16: 34:17\n+          StorageDead(_7);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:16: 34:17\n+          StorageDead(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:35:1: 35:2\n+          StorageDead(_4);                 // scope 2 at $DIR/matches_reduce_branches.rs:35:1: 35:2\n+          StorageDead(_3);                 // scope 1 at $DIR/matches_reduce_branches.rs:35:1: 35:2\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:35:1: 35:2\n+          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:35:2: 35:2\n+      }\n+  }\n+  "}, {"sha": "968890e3a298c2ab0578145afb5a55ea2b19de3c", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.diff.64bit", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff.64bit?ref=1fe2e2941d93da397c8ace5f410c0ab3dc5a3049", "patch": "@@ -0,0 +1,156 @@\n+- // MIR for `bar` before MatchBranchSimplification\n++ // MIR for `bar` after MatchBranchSimplification\n+  \n+  fn bar(_1: i32) -> (bool, bool, bool, bool) {\n+      debug i => _1;                       // in scope 0 at $DIR/matches_reduce_branches.rs:11:8: 11:9\n+      let mut _0: (bool, bool, bool, bool); // return place in scope 0 at $DIR/matches_reduce_branches.rs:11:19: 11:43\n+      let _2: bool;                        // in scope 0 at $DIR/matches_reduce_branches.rs:12:9: 12:10\n+      let _6: ();                          // in scope 0 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n+      let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:34:6: 34:7\n+      let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:34:9: 34:10\n+      let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:34:12: 34:13\n+      let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:34:15: 34:16\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/matches_reduce_branches.rs:12:9: 12:10\n+          let _3: bool;                    // in scope 1 at $DIR/matches_reduce_branches.rs:13:9: 13:10\n+          scope 2 {\n+              debug b => _3;               // in scope 2 at $DIR/matches_reduce_branches.rs:13:9: 13:10\n+              let _4: bool;                // in scope 2 at $DIR/matches_reduce_branches.rs:14:9: 14:10\n+              scope 3 {\n+                  debug c => _4;           // in scope 3 at $DIR/matches_reduce_branches.rs:14:9: 14:10\n+                  let _5: bool;            // in scope 3 at $DIR/matches_reduce_branches.rs:15:9: 15:10\n+                  scope 4 {\n+                      debug d => _5;       // in scope 4 at $DIR/matches_reduce_branches.rs:15:9: 15:10\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:12:9: 12:10\n+          StorageLive(_3);                 // scope 1 at $DIR/matches_reduce_branches.rs:13:9: 13:10\n+          StorageLive(_4);                 // scope 2 at $DIR/matches_reduce_branches.rs:14:9: 14:10\n+          StorageLive(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:15:9: 15:10\n+          StorageLive(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n+-         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:18:9: 18:10\n++         _2 = Ne(_1, const 7_i32);        // scope 4 at $DIR/matches_reduce_branches.rs:19:13: 19:22\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000007))\n++                                          // mir::Constant\n++                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000007)) }\n++         _3 = Eq(_1, const 7_i32);        // scope 4 at $DIR/matches_reduce_branches.rs:20:13: 20:21\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000007))\n++                                          // mir::Constant\n++                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000007)) }\n++         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:22\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/matches_reduce_branches.rs:21:17: 21:22\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/matches_reduce_branches.rs:22:17: 22:21\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:18:9: 18:10\n+      }\n+  \n+      bb1: {\n+          _2 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:26:13: 26:21\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:26:17: 26:21\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:27:13: 27:22\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:27:17: 27:22\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:28:13: 28:22\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:28:17: 28:22\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:29:13: 29:21\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:29:17: 29:21\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n+      }\n+  \n+      bb2: {\n+          _2 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:19:13: 19:22\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:19:17: 19:22\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          _3 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:20:13: 20:21\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:20:17: 20:21\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:22\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:21:17: 21:22\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:22:17: 22:21\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n+      }\n+  \n+      bb3: {\n+          StorageDead(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:32:6: 32:7\n+          StorageLive(_7);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:6: 34:7\n+          _7 = _2;                         // scope 4 at $DIR/matches_reduce_branches.rs:34:6: 34:7\n+          StorageLive(_8);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:9: 34:10\n+          _8 = _3;                         // scope 4 at $DIR/matches_reduce_branches.rs:34:9: 34:10\n+          StorageLive(_9);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:12: 34:13\n+          _9 = _4;                         // scope 4 at $DIR/matches_reduce_branches.rs:34:12: 34:13\n+          StorageLive(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:34:15: 34:16\n+          _10 = _5;                        // scope 4 at $DIR/matches_reduce_branches.rs:34:15: 34:16\n+          (_0.0: bool) = move _7;          // scope 4 at $DIR/matches_reduce_branches.rs:34:5: 34:17\n+          (_0.1: bool) = move _8;          // scope 4 at $DIR/matches_reduce_branches.rs:34:5: 34:17\n+          (_0.2: bool) = move _9;          // scope 4 at $DIR/matches_reduce_branches.rs:34:5: 34:17\n+          (_0.3: bool) = move _10;         // scope 4 at $DIR/matches_reduce_branches.rs:34:5: 34:17\n+          StorageDead(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:34:16: 34:17\n+          StorageDead(_9);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:16: 34:17\n+          StorageDead(_8);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:16: 34:17\n+          StorageDead(_7);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:16: 34:17\n+          StorageDead(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:35:1: 35:2\n+          StorageDead(_4);                 // scope 2 at $DIR/matches_reduce_branches.rs:35:1: 35:2\n+          StorageDead(_3);                 // scope 1 at $DIR/matches_reduce_branches.rs:35:1: 35:2\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:35:1: 35:2\n+          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:35:2: 35:2\n+      }\n+  }\n+  "}, {"sha": "a33db001f443825afa04d428fb934cc71d27b2e3", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit?ref=1fe2e2941d93da397c8ace5f410c0ab3dc5a3049", "patch": "@@ -2,23 +2,23 @@\n + // MIR for `foo` after MatchBranchSimplification\n   \n   fn foo(_1: std::option::Option<()>) -> () {\n-      debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:4:8: 4:11\n-      let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:4:25: 4:25\n+      debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:5:8: 5:11\n+      let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:5:25: 5:25\n       let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n+      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n--         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n+          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n+-         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n +         _2 = Eq(_3, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x00000000))\n +                                          // mir::Constant\n +                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000000)) }\n-+         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n++         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n       }\n   \n       bb1: {\n@@ -44,23 +44,23 @@\n       }\n   \n       bb3: {\n-          switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6\n+          switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:6:5: 8:6\n       }\n   \n       bb4: {\n-          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6\n+          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:6:5: 8:6\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:5:5: 7:6\n+                                           // + span: $DIR/matches_reduce_branches.rs:6:5: 8:6\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          goto -> bb5;                     // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6\n+          goto -> bb5;                     // scope 0 at $DIR/matches_reduce_branches.rs:6:5: 8:6\n       }\n   \n       bb5: {\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:8:1: 8:2\n-          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:8:2: 8:2\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "3eb5b01fbf4960034dc09ef2ce9ff34e9a9394f5", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit?ref=1fe2e2941d93da397c8ace5f410c0ab3dc5a3049", "patch": "@@ -2,23 +2,23 @@\n + // MIR for `foo` after MatchBranchSimplification\n   \n   fn foo(_1: std::option::Option<()>) -> () {\n-      debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:4:8: 4:11\n-      let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:4:25: 4:25\n+      debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:5:8: 5:11\n+      let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:5:25: 5:25\n       let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n+      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n--         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n+          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n+-         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n +         _2 = Eq(_3, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x0000000000000000))\n +                                          // mir::Constant\n +                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000000)) }\n-+         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26\n++         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n       }\n   \n       bb1: {\n@@ -44,23 +44,23 @@\n       }\n   \n       bb3: {\n-          switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6\n+          switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:6:5: 8:6\n       }\n   \n       bb4: {\n-          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6\n+          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:6:5: 8:6\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:5:5: 7:6\n+                                           // + span: $DIR/matches_reduce_branches.rs:6:5: 8:6\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          goto -> bb5;                     // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6\n+          goto -> bb5;                     // scope 0 at $DIR/matches_reduce_branches.rs:6:5: 8:6\n       }\n   \n       bb5: {\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:8:1: 8:2\n-          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:8:2: 8:2\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "ebc88d2fbd1dacb113957cd4ddc1309766cde654", "filename": "src/test/mir-opt/matches_reduce_branches.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe2e2941d93da397c8ace5f410c0ab3dc5a3049/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs?ref=1fe2e2941d93da397c8ace5f410c0ab3dc5a3049", "patch": "@@ -1,13 +1,42 @@\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR matches_reduce_branches.foo.MatchBranchSimplification.diff\n+// EMIT_MIR matches_reduce_branches.bar.MatchBranchSimplification.diff\n \n fn foo(bar: Option<()>) {\n     if matches!(bar, None) {\n       ()\n     }\n }\n \n+fn bar(i: i32) -> (bool, bool, bool, bool) {\n+    let a;\n+    let b;\n+    let c;\n+    let d;\n+\n+    match i {\n+        7 => {\n+            a = false;\n+            b = true;\n+            c = false;\n+            d = true;\n+            ()\n+        }\n+        _ => {\n+            a = true;\n+            b = false;\n+            c = false;\n+            d = true;\n+            ()\n+        }\n+    };\n+\n+    (a, b, c, d)\n+}\n+\n+\n fn main() {\n   let _ = foo(None);\n   let _ = foo(Some(()));\n+  let _ = bar(0);\n }"}]}