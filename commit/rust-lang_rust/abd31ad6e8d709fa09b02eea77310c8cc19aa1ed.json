{"sha": "abd31ad6e8d709fa09b02eea77310c8cc19aa1ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZDMxYWQ2ZThkNzA5ZmEwOWIwMmVlYTc3MzEwYzhjYzE5YWExZWQ=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-17T14:25:44Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-27T20:50:17Z"}, "message": "Use `LocalDefId` in `unsafety_check_result` query", "tree": {"sha": "d056730c5057029b072a8c56c0ef51e6f3b33fb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d056730c5057029b072a8c56c0ef51e6f3b33fb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd31ad6e8d709fa09b02eea77310c8cc19aa1ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd31ad6e8d709fa09b02eea77310c8cc19aa1ed", "html_url": "https://github.com/rust-lang/rust/commit/abd31ad6e8d709fa09b02eea77310c8cc19aa1ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd31ad6e8d709fa09b02eea77310c8cc19aa1ed/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de7c9e753d449a02a39610cf657c11dc6af86774", "url": "https://api.github.com/repos/rust-lang/rust/commits/de7c9e753d449a02a39610cf657c11dc6af86774", "html_url": "https://github.com/rust-lang/rust/commit/de7c9e753d449a02a39610cf657c11dc6af86774"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "fdefb8eee2e29c92ca8ffc876a569fbb72daa15b", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abd31ad6e8d709fa09b02eea77310c8cc19aa1ed/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd31ad6e8d709fa09b02eea77310c8cc19aa1ed/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=abd31ad6e8d709fa09b02eea77310c8cc19aa1ed", "patch": "@@ -389,9 +389,9 @@ rustc_queries! {\n \n     TypeChecking {\n         /// The result of unsafety-checking this `DefId`.\n-        query unsafety_check_result(key: DefId) -> mir::UnsafetyCheckResult {\n-            desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key) }\n-            cache_on_disk_if { key.is_local() }\n+        query unsafety_check_result(key: LocalDefId) -> mir::UnsafetyCheckResult {\n+            desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+            cache_on_disk_if { true }\n         }\n \n         /// HACK: when evaluated, this reports a \"unsafe derive on repr(packed)\" error"}, {"sha": "1c1560cbf9de711461615c8361113b4dd588086d", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/abd31ad6e8d709fa09b02eea77310c8cc19aa1ed/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd31ad6e8d709fa09b02eea77310c8cc19aa1ed/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=abd31ad6e8d709fa09b02eea77310c8cc19aa1ed", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 }\n                 &AggregateKind::Closure(def_id, _) | &AggregateKind::Generator(def_id, _, _) => {\n                     let UnsafetyCheckResult { violations, unsafe_blocks } =\n-                        self.tcx.unsafety_check_result(def_id);\n+                        self.tcx.unsafety_check_result(def_id.expect_local());\n                     self.register_violations(&violations, &unsafe_blocks);\n                 }\n             },\n@@ -485,7 +485,7 @@ fn check_unused_unsafe(\n     intravisit::Visitor::visit_body(&mut visitor, body);\n }\n \n-fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult {\n+fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: LocalDefId) -> UnsafetyCheckResult {\n     debug!(\"unsafety_violations({:?})\", def_id);\n \n     // N.B., this borrow is valid because all the consumers of\n@@ -494,21 +494,18 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult\n \n     let param_env = tcx.param_env(def_id);\n \n-    let id = tcx.hir().as_local_hir_id(def_id.expect_local());\n+    let id = tcx.hir().as_local_hir_id(def_id);\n     let (const_context, min_const_fn) = match tcx.hir().body_owner_kind(id) {\n         hir::BodyOwnerKind::Closure => (false, false),\n-        hir::BodyOwnerKind::Fn => (is_const_fn(tcx, def_id), is_min_const_fn(tcx, def_id)),\n+        hir::BodyOwnerKind::Fn => {\n+            (is_const_fn(tcx, def_id.to_def_id()), is_min_const_fn(tcx, def_id.to_def_id()))\n+        }\n         hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => (true, false),\n     };\n     let mut checker = UnsafetyChecker::new(const_context, min_const_fn, body, tcx, param_env);\n     checker.visit_body(&body);\n \n-    check_unused_unsafe(\n-        tcx,\n-        def_id.expect_local(),\n-        &checker.used_unsafe,\n-        &mut checker.inherited_blocks,\n-    );\n+    check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);\n     UnsafetyCheckResult {\n         violations: checker.violations.into(),\n         unsafe_blocks: checker.inherited_blocks.into(),\n@@ -600,7 +597,8 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n         return;\n     }\n \n-    let UnsafetyCheckResult { violations, unsafe_blocks } = tcx.unsafety_check_result(def_id);\n+    let UnsafetyCheckResult { violations, unsafe_blocks } =\n+        tcx.unsafety_check_result(def_id.expect_local());\n \n     for &UnsafetyViolation { source_info, description, details, kind } in violations.iter() {\n         // Report an error."}, {"sha": "a13ecdccc43076a0488b67339ddf83f646916aa7", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd31ad6e8d709fa09b02eea77310c8cc19aa1ed/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd31ad6e8d709fa09b02eea77310c8cc19aa1ed/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=abd31ad6e8d709fa09b02eea77310c8cc19aa1ed", "patch": "@@ -212,7 +212,7 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n \n fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n-    let _ = tcx.unsafety_check_result(def_id);\n+    let _ = tcx.unsafety_check_result(def_id.expect_local());\n \n     let mut body = tcx.mir_built(def_id).steal();\n "}]}