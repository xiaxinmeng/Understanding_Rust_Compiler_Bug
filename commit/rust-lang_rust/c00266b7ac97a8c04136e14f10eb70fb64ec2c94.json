{"sha": "c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMDI2NmI3YWM5N2E4YzA0MTM2ZTE0ZjEwZWI3MGZiNjRlYzJjOTQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-01-15T11:47:26Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-02-08T11:16:25Z"}, "message": "Encode (in MIR) whether borrows are explicit in source or arise due to autoref.\n\nThis is foundation for issue 46747 (limit two-phase borrows to method-call autorefs).", "tree": {"sha": "039c47192cc088e324251295e0353d44c5fa4812", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/039c47192cc088e324251295e0353d44c5fa4812"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "html_url": "https://github.com/rust-lang/rust/commit/c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f93357d3b8938dfe439329c43c1e4f919a70869", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f93357d3b8938dfe439329c43c1e4f919a70869", "html_url": "https://github.com/rust-lang/rust/commit/4f93357d3b8938dfe439329c43c1e4f919a70869"}], "stats": {"total": 102, "additions": 67, "deletions": 35}, "files": [{"sha": "03a369577a31e3e85e27e7555e27b521e14ab890", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -20,7 +20,6 @@ use std::mem;\n impl_stable_hash_for!(struct mir::GeneratorLayout<'tcx> { fields });\n impl_stable_hash_for!(struct mir::SourceInfo { span, scope });\n impl_stable_hash_for!(enum mir::Mutability { Mut, Not });\n-impl_stable_hash_for!(enum mir::BorrowKind { Shared, Unique, Mut });\n impl_stable_hash_for!(enum mir::LocalKind { Var, Temp, Arg, ReturnPointer });\n impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n     mutability,\n@@ -36,6 +35,25 @@ impl_stable_hash_for!(struct mir::BasicBlockData<'tcx> { statements, terminator,\n impl_stable_hash_for!(struct mir::UnsafetyViolation { source_info, description, kind });\n impl_stable_hash_for!(struct mir::UnsafetyCheckResult { violations, unsafe_blocks });\n \n+impl<'gcx> HashStable<StableHashingContext<'gcx>>\n+for mir::BorrowKind {\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+\n+        match *self {\n+            mir::BorrowKind::Shared |\n+            mir::BorrowKind::Unique => {}\n+            mir::BorrowKind::Mut { allow_two_phase_borrow } => {\n+                allow_two_phase_borrow.hash_stable(hcx, hasher);\n+            }\n+        }\n+    }\n+}\n+\n+\n impl<'gcx> HashStable<StableHashingContext<'gcx>>\n for mir::UnsafetyViolationKind {\n     #[inline]"}, {"sha": "70bfc1e2d327f0b644a1794d3485be5fe7256abb", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -413,7 +413,11 @@ pub enum BorrowKind {\n     Unique,\n \n     /// Data is mutable and not aliasable.\n-    Mut,\n+    Mut {\n+        /// True if this borrow arose from method-call auto-ref\n+        /// (i.e. `adjustment::Adjust::Borrow`)\n+        allow_two_phase_borrow: bool\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -1611,7 +1615,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             Ref(region, borrow_kind, ref place) => {\n                 let kind_str = match borrow_kind {\n                     BorrowKind::Shared => \"\",\n-                    BorrowKind::Mut | BorrowKind::Unique => \"mut \",\n+                    BorrowKind::Mut { .. } | BorrowKind::Unique => \"mut \",\n                 };\n \n                 // When printing regions, add trailing space if necessary."}, {"sha": "5433c54fb949cd54196f1e1eb06b23c9bff4e0cb", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -264,7 +264,7 @@ impl<'tcx> BinOp {\n impl BorrowKind {\n     pub fn to_mutbl_lossy(self) -> hir::Mutability {\n         match self {\n-            BorrowKind::Mut => hir::MutMutable,\n+            BorrowKind::Mut { .. } => hir::MutMutable,\n             BorrowKind::Shared => hir::MutImmutable,\n \n             // We have no type corresponding to a unique imm borrow, so"}, {"sha": "afaf7d41e92ffc4cc8288b794fc440cf0b4155ba", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -951,9 +951,10 @@ impl<'tcx> PlaceContext<'tcx> {\n     pub fn is_mutating_use(&self) -> bool {\n         match *self {\n             PlaceContext::Store | PlaceContext::AsmOutput | PlaceContext::Call |\n-            PlaceContext::Borrow { kind: BorrowKind::Mut, .. } |\n+            PlaceContext::Borrow { kind: BorrowKind::Mut { .. }, .. } |\n             PlaceContext::Projection(Mutability::Mut) |\n             PlaceContext::Drop => true,\n+\n             PlaceContext::Inspect |\n             PlaceContext::Borrow { kind: BorrowKind::Shared, .. } |\n             PlaceContext::Borrow { kind: BorrowKind::Unique, .. } |\n@@ -971,7 +972,8 @@ impl<'tcx> PlaceContext<'tcx> {\n             PlaceContext::Borrow { kind: BorrowKind::Unique, .. } |\n             PlaceContext::Projection(Mutability::Not) |\n             PlaceContext::Copy | PlaceContext::Move => true,\n-            PlaceContext::Borrow { kind: BorrowKind::Mut, .. } | PlaceContext::Store |\n+\n+            PlaceContext::Borrow { kind: BorrowKind::Mut { .. }, .. } | PlaceContext::Store |\n             PlaceContext::AsmOutput |\n             PlaceContext::Call | PlaceContext::Projection(Mutability::Mut) |\n             PlaceContext::Drop | PlaceContext::StorageLive | PlaceContext::StorageDead |"}, {"sha": "bdb1001124de6bdd314959fce6a689622a085f39", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -134,7 +134,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                     BindingMode::ByValue => mutability == Mutability::Mut,\n                     BindingMode::ByRef(_, bk) => {\n                         write!(f, \"ref \")?;\n-                        bk == BorrowKind::Mut\n+                        match bk { BorrowKind::Mut { .. } => true, _ => false }\n                     }\n                 };\n                 if is_mut {\n@@ -429,7 +429,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         (Mutability::Not, BindingMode::ByValue),\n                     ty::BindByReference(hir::MutMutable) =>\n                         (Mutability::Not, BindingMode::ByRef(\n-                            region.unwrap(), BorrowKind::Mut)),\n+                            region.unwrap(), BorrowKind::Mut { allow_two_phase_borrow: false })),\n                     ty::BindByReference(hir::MutImmutable) =>\n                         (Mutability::Not, BindingMode::ByRef(\n                             region.unwrap(), BorrowKind::Shared)),"}, {"sha": "34551e8e76f5993cf92be5afb6efdf226f90ba37", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -256,8 +256,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             \"immutable\",\n             \"mutable\",\n         ) {\n-            (BorrowKind::Shared, lft, _, BorrowKind::Mut, _, rgt) |\n-            (BorrowKind::Mut, _, lft, BorrowKind::Shared, rgt, _) => self.tcx\n+            (BorrowKind::Shared, lft, _, BorrowKind::Mut { .. }, _, rgt) |\n+            (BorrowKind::Mut { .. }, _, lft, BorrowKind::Shared, rgt, _) => self.tcx\n                 .cannot_reborrow_already_borrowed(\n                     span,\n                     &desc_place,\n@@ -271,7 +271,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Origin::Mir,\n                 ),\n \n-            (BorrowKind::Mut, _, _, BorrowKind::Mut, _, _) => self.tcx\n+            (BorrowKind::Mut { .. }, _, _, BorrowKind::Mut { .. }, _, _) => self.tcx\n                 .cannot_mutably_borrow_multiply(\n                     span,\n                     &desc_place,\n@@ -314,7 +314,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Origin::Mir,\n                 ),\n \n-            (BorrowKind::Mut, _, lft, BorrowKind::Unique, _, _) => self.tcx\n+            (BorrowKind::Mut { .. }, _, lft, BorrowKind::Unique, _, _) => self.tcx\n                 .cannot_reborrow_already_uniquely_borrowed(\n                     span,\n                     &desc_place,"}, {"sha": "647cf178310ad2d213bc08c89d5eebf5a440450a", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -797,7 +797,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Control::Continue\n                 }\n \n-                (Read(kind), BorrowKind::Unique) | (Read(kind), BorrowKind::Mut) => {\n+                (Read(kind), BorrowKind::Unique) | (Read(kind), BorrowKind::Mut { .. }) => {\n                     // Reading from mere reservations of mutable-borrows is OK.\n                     if this.tcx.sess.two_phase_borrows() && index.is_reservation()\n                     {\n@@ -828,7 +828,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 }\n \n                 (Reservation(kind), BorrowKind::Unique)\n-                | (Reservation(kind), BorrowKind::Mut)\n+                | (Reservation(kind), BorrowKind::Mut { .. })\n                 | (Activation(kind, _), _)\n                 | (Write(kind), _) => {\n                     match rw {\n@@ -945,7 +945,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Rvalue::Ref(_ /*rgn*/, bk, ref place) => {\n                 let access_kind = match bk {\n                     BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),\n-                    BorrowKind::Unique | BorrowKind::Mut => {\n+                    BorrowKind::Unique | BorrowKind::Mut { .. } => {\n                         let wk = WriteKind::MutableBorrow(bk);\n                         if self.tcx.sess.two_phase_borrows() {\n                             (Deep, Reservation(wk))\n@@ -1196,7 +1196,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 // mutable borrow before we check it.\n                 match borrow.kind {\n                     BorrowKind::Shared => return,\n-                    BorrowKind::Unique | BorrowKind::Mut => {}\n+                    BorrowKind::Unique | BorrowKind::Mut { .. } => {}\n                 }\n \n                 self.access_place(\n@@ -1467,8 +1467,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     span_bug!(span, \"&unique borrow for {:?} should not fail\", place);\n                 }\n             }\n-            Reservation(WriteKind::MutableBorrow(BorrowKind::Mut))\n-            | Write(WriteKind::MutableBorrow(BorrowKind::Mut)) => if let Err(place_err) =\n+            Reservation(WriteKind::MutableBorrow(BorrowKind::Mut { .. }))\n+            | Write(WriteKind::MutableBorrow(BorrowKind::Mut { .. })) => if let Err(place_err) =\n                 self.is_mutable(place, is_local_mutation_allowed)\n             {\n                 error_reported = true;\n@@ -1532,7 +1532,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Activation(..) => {} // permission checks are done at Reservation point.\n \n             Read(ReadKind::Borrow(BorrowKind::Unique))\n-            | Read(ReadKind::Borrow(BorrowKind::Mut))\n+            | Read(ReadKind::Borrow(BorrowKind::Mut { .. }))\n             | Read(ReadKind::Borrow(BorrowKind::Shared))\n             | Read(ReadKind::Copy) => {} // Access authorized\n         }"}, {"sha": "fe9b0b86befc3b8e8a715b375be684af4cabbf88", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -122,7 +122,7 @@ impl<'tcx> fmt::Display for BorrowData<'tcx> {\n         let kind = match self.kind {\n             mir::BorrowKind::Shared => \"\",\n             mir::BorrowKind::Unique => \"uniq \",\n-            mir::BorrowKind::Mut => \"mut \",\n+            mir::BorrowKind::Mut { .. } => \"mut \",\n         };\n         let region = format!(\"{}\", self.region);\n         let region = if region.len() > 0 { format!(\"{} \", region) } else { region };"}, {"sha": "e33147a915b5fce57bcf6c9004424c7bd0a5f76b", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -21,6 +21,7 @@ use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n use rustc::ty::cast::CastKind as TyCastKind;\n use rustc::hir;\n use rustc::hir::def_id::LocalDefId;\n+use rustc::mir::{BorrowKind};\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n     type Output = Expr<'tcx>;\n@@ -111,7 +112,7 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 span,\n                 kind: ExprKind::Borrow {\n                     region: deref.region,\n-                    borrow_kind: to_borrow_kind(deref.mutbl),\n+                    borrow_kind: to_borrow_kind(deref.mutbl, true),\n                     arg: expr.to_ref(),\n                 },\n             };\n@@ -121,7 +122,7 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         Adjust::Borrow(AutoBorrow::Ref(r, m)) => {\n             ExprKind::Borrow {\n                 region: r,\n-                borrow_kind: to_borrow_kind(m),\n+                borrow_kind: to_borrow_kind(m, true),\n                 arg: expr.to_ref(),\n             }\n         }\n@@ -141,7 +142,7 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 span,\n                 kind: ExprKind::Borrow {\n                     region,\n-                    borrow_kind: to_borrow_kind(m),\n+                    borrow_kind: to_borrow_kind(m, true),\n                     arg: expr.to_ref(),\n                 },\n             };\n@@ -287,7 +288,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             };\n             ExprKind::Borrow {\n                 region,\n-                borrow_kind: to_borrow_kind(mutbl),\n+                borrow_kind: to_borrow_kind(mutbl, false),\n                 arg: expr.to_ref(),\n             }\n         }\n@@ -642,9 +643,9 @@ fn method_callee<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     }\n }\n \n-fn to_borrow_kind(m: hir::Mutability) -> BorrowKind {\n+fn to_borrow_kind(m: hir::Mutability, allow_two_phase_borrow: bool) -> BorrowKind {\n     match m {\n-        hir::MutMutable => BorrowKind::Mut,\n+        hir::MutMutable => BorrowKind::Mut { allow_two_phase_borrow },\n         hir::MutImmutable => BorrowKind::Shared,\n     }\n }\n@@ -947,7 +948,7 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let borrow_kind = match upvar_borrow.kind {\n                 ty::BorrowKind::ImmBorrow => BorrowKind::Shared,\n                 ty::BorrowKind::UniqueImmBorrow => BorrowKind::Unique,\n-                ty::BorrowKind::MutBorrow => BorrowKind::Mut,\n+                ty::BorrowKind::MutBorrow => BorrowKind::Mut { allow_two_phase_borrow: false }\n             };\n             Expr {\n                 temp_lifetime,"}, {"sha": "e6ebdd3d6c16702fc2c839f7d23a600bf6bac105", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -716,11 +716,14 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }),\n                 span\n             ));\n+            let borrow_kind = BorrowKind::Mut {\n+                allow_two_phase_borrow: false,\n+            };\n             statements.push(Statement {\n                 source_info,\n                 kind: StatementKind::Assign(\n                     Place::Local(ref_rcvr),\n-                    Rvalue::Ref(tcx.types.re_erased, BorrowKind::Mut, rcvr_l)\n+                    Rvalue::Ref(tcx.types.re_erased, borrow_kind, rcvr_l)\n                 )\n             });\n             Operand::Move(Place::Local(ref_rcvr))"}, {"sha": "15bbcad7325bec57b2f5d296fe427e6b5020f82f", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -426,7 +426,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     debug!(\"Creating temp for return destination\");\n                     let dest = Rvalue::Ref(\n                         self.tcx.types.re_erased,\n-                        BorrowKind::Mut,\n+                        BorrowKind::Mut { allow_two_phase_borrow: false },\n                         destination.0);\n \n                     let ty = dest.ty(caller_mir, self.tcx);\n@@ -511,7 +511,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                          callsite: &CallSite<'tcx>, caller_mir: &mut Mir<'tcx>) -> Local {\n         let arg = Rvalue::Ref(\n             self.tcx.types.re_erased,\n-            BorrowKind::Mut,\n+            BorrowKind::Mut { allow_two_phase_borrow: false },\n             arg.deref());\n \n         let ty = arg.ty(caller_mir, self.tcx);"}, {"sha": "d4ef90a7d7cf28b5eacaf2577cf8629dea74fd7c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -600,7 +600,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 }\n \n                 let ty = place.ty(self.mir, self.tcx).to_ty(self.tcx);\n-                if kind == BorrowKind::Mut {\n+                if let BorrowKind::Mut { .. } = kind {\n                     // In theory, any zero-sized value could be borrowed\n                     // mutably without consequences. However, only &mut []\n                     // is allowed right now, and only in functions."}, {"sha": "e2feb0ed39054c839c26f0e126b91dc0432ba608", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -531,7 +531,9 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let result = BasicBlockData {\n             statements: vec![self.assign(\n                 &Place::Local(ref_place),\n-                Rvalue::Ref(tcx.types.re_erased, BorrowKind::Mut, self.place.clone())\n+                Rvalue::Ref(tcx.types.re_erased,\n+                            BorrowKind::Mut { allow_two_phase_borrow: false },\n+                            self.place.clone())\n             )],\n             terminator: Some(Terminator {\n                 kind: TerminatorKind::Call {\n@@ -591,7 +593,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         } else {\n             (Rvalue::Ref(\n                  tcx.types.re_erased,\n-                 BorrowKind::Mut,\n+                 BorrowKind::Mut { allow_two_phase_borrow: false },\n                  self.place.clone().index(cur)),\n              Rvalue::BinaryOp(BinOp::Add, copy(&Place::Local(cur)), one))\n         };\n@@ -735,7 +737,9 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             // cur = tmp as *mut T;\n             // end = Offset(cur, len);\n             drop_block_stmts.push(self.assign(&tmp, Rvalue::Ref(\n-                tcx.types.re_erased, BorrowKind::Mut, self.place.clone()\n+                tcx.types.re_erased,\n+                BorrowKind::Mut { allow_two_phase_borrow: false },\n+                self.place.clone()\n             )));\n             drop_block_stmts.push(self.assign(&cur, Rvalue::Cast(\n                 CastKind::Misc, Operand::Move(tmp.clone()), iter_ty"}, {"sha": "49b4ef0d38549db657d754baeceec0329a5ff0fa", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00266b7ac97a8c04136e14f10eb70fb64ec2c94/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=c00266b7ac97a8c04136e14f10eb70fb64ec2c94", "patch": "@@ -870,7 +870,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                         } else {\n                             self.cx.tcx.data_layout.pointer_align\n                         };\n-                        if bk == mir::BorrowKind::Mut {\n+                        if let mir::BorrowKind::Mut { .. } = bk {\n                             consts::addr_of_mut(self.cx, llval, align, \"ref_mut\")\n                         } else {\n                             consts::addr_of(self.cx, llval, align, \"ref\")"}]}