{"sha": "16f6583f2d95b53610ee10073752e883dbfa24ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZjY1ODNmMmQ5NWI1MzYxMGVlMTAwNzM3NTJlODgzZGJmYTI0ZWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-17T23:28:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-17T23:28:06Z"}, "message": "Rollup merge of #82270 - asquared31415:asm-syntax-directive-errors, r=nagisa\n\nEmit error when trying to use assembler syntax directives in `asm!`\n\nThe `.intel_syntax` and `.att_syntax` assembler directives should not be used, in favor of not specifying a syntax for intel, and in favor of the explicit `att_syntax` option using the inline assembly options.\n\nCloses #79869", "tree": {"sha": "c1fef8dfd813219bdb24cf68103623a9b9a5e110", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1fef8dfd813219bdb24cf68103623a9b9a5e110"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16f6583f2d95b53610ee10073752e883dbfa24ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUpCGCRBK7hj4Ov3rIwAAdHIIACdhrKwYQWsNCOxuB42EzYWu\nZui37WybuY4wwLV5b6LYwwQCxgRpoLJeDsKx0FUe5cpw3Sn169tlSBg/6dAN9bz6\nYz4Xomo+792qr8E4l2VpRXb4Mdmc1UwWTO5aNNB8Qt/VD48etXOA+540ST4T+oxs\n6Odihvivtbel+vNAfZkdgO9r5E2rmA4c+K1z8hmrlpFGol1onXKf0w1J+ebs2GOp\nsCQ819tHWRJF3tp78JSG27FedwuaAglNxqc5lLQkp0a5K03wj51ZTTZkPGMVZ3Dd\ngx5l4iR71bOihi/yEZTDwds8tS2Z9cKUTRVT9tGLJWFROVgIf0oLKilkdbd9ZZ4=\n=YmGr\n-----END PGP SIGNATURE-----\n", "payload": "tree c1fef8dfd813219bdb24cf68103623a9b9a5e110\nparent 90797ef008a2004e70ff0106c756f24ea63ab236\nparent 4b13b8120e67e2b3173c8f6ce0d175847b745085\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616023686 +0100\ncommitter GitHub <noreply@github.com> 1616023686 +0100\n\nRollup merge of #82270 - asquared31415:asm-syntax-directive-errors, r=nagisa\n\nEmit error when trying to use assembler syntax directives in `asm!`\n\nThe `.intel_syntax` and `.att_syntax` assembler directives should not be used, in favor of not specifying a syntax for intel, and in favor of the explicit `att_syntax` option using the inline assembly options.\n\nCloses #79869\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16f6583f2d95b53610ee10073752e883dbfa24ea", "html_url": "https://github.com/rust-lang/rust/commit/16f6583f2d95b53610ee10073752e883dbfa24ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16f6583f2d95b53610ee10073752e883dbfa24ea/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90797ef008a2004e70ff0106c756f24ea63ab236", "url": "https://api.github.com/repos/rust-lang/rust/commits/90797ef008a2004e70ff0106c756f24ea63ab236", "html_url": "https://github.com/rust-lang/rust/commit/90797ef008a2004e70ff0106c756f24ea63ab236"}, {"sha": "4b13b8120e67e2b3173c8f6ce0d175847b745085", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b13b8120e67e2b3173c8f6ce0d175847b745085", "html_url": "https://github.com/rust-lang/rust/commit/4b13b8120e67e2b3173c8f6ce0d175847b745085"}], "stats": {"total": 182, "additions": 181, "deletions": 1}, "files": [{"sha": "8d8b3f4f6aaaceb955cbe3b670289ff118e244f8", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/16f6583f2d95b53610ee10073752e883dbfa24ea/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f6583f2d95b53610ee10073752e883dbfa24ea/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=16f6583f2d95b53610ee10073752e883dbfa24ea", "patch": "@@ -7,7 +7,10 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::{\n+    symbol::{kw, sym, Symbol},\n+    BytePos,\n+};\n use rustc_span::{InnerSpan, Span};\n \n struct AsmArgs {\n@@ -399,6 +402,8 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n     let mut line_spans = Vec::with_capacity(args.templates.len());\n     let mut curarg = 0;\n \n+    let default_dialect = ecx.sess.inline_asm_dialect();\n+\n     for template_expr in args.templates.into_iter() {\n         if !template.is_empty() {\n             template.push(ast::InlineAsmTemplatePiece::String(\"\\n\".to_string()));\n@@ -424,6 +429,60 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n \n         let template_str = &template_str.as_str();\n         let template_snippet = ecx.source_map().span_to_snippet(template_sp).ok();\n+\n+        if let Some(snippet) = &template_snippet {\n+            let snippet = snippet.trim_matches('\"');\n+            match default_dialect {\n+                ast::LlvmAsmDialect::Intel => {\n+                    if let Some(span) = check_syntax_directive(snippet, \".intel_syntax\") {\n+                        let span = template_span.from_inner(span);\n+                        let mut err = ecx.struct_span_err(span, \"intel syntax is the default syntax on this target, and trying to use this directive may cause issues\");\n+                        err.span_suggestion(\n+                            span,\n+                            \"remove this assembler directive\",\n+                            \"\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.emit();\n+                    }\n+\n+                    if let Some(span) = check_syntax_directive(snippet, \".att_syntax\") {\n+                        let span = template_span.from_inner(span);\n+                        let mut err = ecx.struct_span_err(span, \"using the .att_syntax directive may cause issues, use the att_syntax option instead\");\n+                        let asm_end = sp.hi() - BytePos(2);\n+                        let suggestions = vec![\n+                            (span, \"\".to_string()),\n+                            (\n+                                Span::new(asm_end, asm_end, sp.ctxt()),\n+                                \", options(att_syntax)\".to_string(),\n+                            ),\n+                        ];\n+                        err.multipart_suggestion(\n+                        \"remove the assembler directive and replace it with options(att_syntax)\",\n+                        suggestions,\n+                        Applicability::MachineApplicable,\n+                    );\n+                        err.emit();\n+                    }\n+                }\n+                ast::LlvmAsmDialect::Att => {\n+                    if let Some(span) = check_syntax_directive(snippet, \".att_syntax\") {\n+                        let span = template_span.from_inner(span);\n+                        let mut err = ecx.struct_span_err(span, \"att syntax is the default syntax on this target, and trying to use this directive may cause issues\");\n+                        err.span_suggestion(\n+                            span,\n+                            \"remove this assembler directive\",\n+                            \"\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.emit();\n+                    }\n+\n+                    // Use of .intel_syntax is ignored\n+                }\n+            }\n+        }\n+\n         let mut parser = parse::Parser::new(\n             template_str,\n             str_style,\n@@ -631,3 +690,15 @@ pub fn expand_asm<'cx>(\n         }\n     }\n }\n+\n+fn check_syntax_directive<S: AsRef<str>>(piece: S, syntax: &str) -> Option<InnerSpan> {\n+    let piece = piece.as_ref();\n+    if let Some(idx) = piece.find(syntax) {\n+        let end =\n+            idx + &piece[idx..].find(|c| matches!(c, '\\n' | ';')).unwrap_or(piece[idx..].len());\n+        // Offset by one because these represent the span with the \" removed\n+        Some(InnerSpan::new(idx + 1, end + 1))\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "fc57b6b8acedfa88ad04291827c9c41e2be745d8", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16f6583f2d95b53610ee10073752e883dbfa24ea/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f6583f2d95b53610ee10073752e883dbfa24ea/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=16f6583f2d95b53610ee10073752e883dbfa24ea", "patch": "@@ -793,6 +793,13 @@ impl Session {\n         }\n     }\n \n+    pub fn inline_asm_dialect(&self) -> rustc_ast::LlvmAsmDialect {\n+        match self.asm_arch {\n+            Some(InlineAsmArch::X86 | InlineAsmArch::X86_64) => rustc_ast::LlvmAsmDialect::Intel,\n+            _ => rustc_ast::LlvmAsmDialect::Att,\n+        }\n+    }\n+\n     pub fn relocation_model(&self) -> RelocModel {\n         self.opts.cg.relocation_model.unwrap_or(self.target.relocation_model)\n     }"}, {"sha": "b1b61f0211a37328aa5d25a4e8b9177c705df508", "filename": "src/test/ui/asm/inline-syntax.arm.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16f6583f2d95b53610ee10073752e883dbfa24ea/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16f6583f2d95b53610ee10073752e883dbfa24ea/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr?ref=16f6583f2d95b53610ee10073752e883dbfa24ea", "patch": "@@ -0,0 +1,14 @@\n+error: att syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:22:15\n+   |\n+LL |         asm!(\".att_syntax noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+\n+error: att syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:25:15\n+   |\n+LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9e9c7badfcacec8435d39fd873ba06874dfa38ab", "filename": "src/test/ui/asm/inline-syntax.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/16f6583f2d95b53610ee10073752e883dbfa24ea/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f6583f2d95b53610ee10073752e883dbfa24ea/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs?ref=16f6583f2d95b53610ee10073752e883dbfa24ea", "patch": "@@ -0,0 +1,38 @@\n+// revisions: x86_64 arm\n+//[x86_64] compile-flags: --target x86_64-unknown-linux-gnu\n+//[arm] compile-flags: --target armv7-unknown-linux-gnueabihf\n+\n+#![feature(no_core, lang_items, rustc_attrs)]\n+#![no_core]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+fn main() {\n+    unsafe {\n+        asm!(\".intel_syntax noprefix\", \"nop\");\n+        //[x86_64]~^ ERROR intel syntax is the default syntax on this target\n+        asm!(\".intel_syntax aaa noprefix\", \"nop\");\n+        //[x86_64]~^ ERROR intel syntax is the default syntax on this target\n+        asm!(\".att_syntax noprefix\", \"nop\");\n+        //[x86_64]~^ ERROR using the .att_syntax directive may cause issues\n+        //[arm]~^^ att syntax is the default syntax on this target\n+        asm!(\".att_syntax bbb noprefix\", \"nop\");\n+        //[x86_64]~^ ERROR using the .att_syntax directive may cause issues\n+        //[arm]~^^ att syntax is the default syntax on this target\n+        asm!(\".intel_syntax noprefix; nop\");\n+        //[x86_64]~^ ERROR intel syntax is the default syntax on this target\n+\n+        asm!(\n+            r\"\n+            .intel_syntax noprefix\n+            nop\"\n+        );\n+        //[x86_64]~^^^ ERROR intel syntax is the default syntax on this target\n+    }\n+}"}, {"sha": "c54c2742a57916e17581d36fb42811c301d13b45", "filename": "src/test/ui/asm/inline-syntax.x86_64.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/16f6583f2d95b53610ee10073752e883dbfa24ea/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16f6583f2d95b53610ee10073752e883dbfa24ea/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr?ref=16f6583f2d95b53610ee10073752e883dbfa24ea", "patch": "@@ -0,0 +1,50 @@\n+error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:18:15\n+   |\n+LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+\n+error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:20:15\n+   |\n+LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+\n+error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n+  --> $DIR/inline-syntax.rs:22:15\n+   |\n+LL |         asm!(\".att_syntax noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove the assembler directive and replace it with options(att_syntax)\n+   |\n+LL |         asm!(\"\", \"nop\", options(att_syntax));\n+   |              --       ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n+  --> $DIR/inline-syntax.rs:25:15\n+   |\n+LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove the assembler directive and replace it with options(att_syntax)\n+   |\n+LL |         asm!(\"\", \"nop\", options(att_syntax));\n+   |              --       ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:28:15\n+   |\n+LL |         asm!(\".intel_syntax noprefix; nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+\n+error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:33:14\n+   |\n+LL |               .intel_syntax noprefix\n+   |  ______________^\n+LL | |             nop\"\n+   | |_ help: remove this assembler directive\n+\n+error: aborting due to 6 previous errors\n+"}]}