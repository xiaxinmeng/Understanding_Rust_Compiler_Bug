{"sha": "ff1b533c1383a6dbde3f1d3d5fe467b627281d09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMWI1MzNjMTM4M2E2ZGJkZTNmMWQzZDVmZTQ2N2I2MjcyODFkMDk=", "commit": {"author": {"name": "krk", "email": "keremkat@gmail.com", "date": "2019-06-10T17:01:05Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-06-14T07:41:46Z"}, "message": "Move type-checking logic in StaticConst to RedundantStaticLifetime.", "tree": {"sha": "2d4318338ba4094a006bff8b84ce9d6d2f1897d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d4318338ba4094a006bff8b84ce9d6d2f1897d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff1b533c1383a6dbde3f1d3d5fe467b627281d09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl0DT7oACgkQaTCGhp1Q\nZjdcqw//W2EZsedzZ/dkO4ylmkgKqusCJM1aps6Azq1qbWaW4Ka9ZC6liRZpC1mK\nCak1WyOAb3L5SDXJJsyZQelpW8pAAxXWqHxspcLTJyUeLKSERO94OZhGgxI47rgt\nvX94FyyNDNy8HnIdZuwhEf3Fvya0WgrJuDHdpCbo0kvUA+vS0znfsoEYa1Gbul7K\nIJTEZo3X5xMdNHd4LP6bxemdEwctBw2fjFzJTNpPebZjJdFBQdu+Trk3UuzavNFW\njm3ZuBGqP9iyNOq4v1uuG0u/SMsdLqm7Fh3Dd+WtN8ZVJTTp4pzZp7PrUMLsDG2r\nYfKmc6VDMotHKUI+EjUd6MceiRki/21Usc8dUSaoDVdnVFUp4lST6kFaHdfajhyS\nqXdfh1cU7KbmmKHtfhN0EpSl+Q+ZKnz/UQwCgOsD0Il3btH9sIqqdQRoHIqjniUb\nVmDlCyxCOMWT/xym62SUBlKilCH+NF1+YSfAEdpgrf6y9uVfS7JMOqeF1Obme4eJ\ncsEZ3IVbZlNaerKpgyNSpZ290dwvG0c1MGAo12+EuIw+OTJzYO5S/A8ZPa/GY5ZE\nzoUu0S1J4VShVn/oz/w1PTM0KeBfHnl+5F198yAfmj7upbwy5g5qU/Oe9zO6X8PN\n6W6HFUJ+IOY81PANztUQrvN1wFiZqC4GsXqjuFGzK0OSmCIftj0=\n=1ATL\n-----END PGP SIGNATURE-----", "payload": "tree 2d4318338ba4094a006bff8b84ce9d6d2f1897d9\nparent 16bd4796e998f7ef3c7eaecc60bf03349fdbb859\nauthor krk <keremkat@gmail.com> 1560186065 +0200\ncommitter flip1995 <hello@philkrones.com> 1560498106 +0200\n\nMove type-checking logic in StaticConst to RedundantStaticLifetime.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff1b533c1383a6dbde3f1d3d5fe467b627281d09", "html_url": "https://github.com/rust-lang/rust/commit/ff1b533c1383a6dbde3f1d3d5fe467b627281d09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff1b533c1383a6dbde3f1d3d5fe467b627281d09/comments", "author": {"login": "krk", "id": 1447853, "node_id": "MDQ6VXNlcjE0NDc4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1447853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krk", "html_url": "https://github.com/krk", "followers_url": "https://api.github.com/users/krk/followers", "following_url": "https://api.github.com/users/krk/following{/other_user}", "gists_url": "https://api.github.com/users/krk/gists{/gist_id}", "starred_url": "https://api.github.com/users/krk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krk/subscriptions", "organizations_url": "https://api.github.com/users/krk/orgs", "repos_url": "https://api.github.com/users/krk/repos", "events_url": "https://api.github.com/users/krk/events{/privacy}", "received_events_url": "https://api.github.com/users/krk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16bd4796e998f7ef3c7eaecc60bf03349fdbb859", "url": "https://api.github.com/repos/rust-lang/rust/commits/16bd4796e998f7ef3c7eaecc60bf03349fdbb859", "html_url": "https://github.com/rust-lang/rust/commit/16bd4796e998f7ef3c7eaecc60bf03349fdbb859"}], "stats": {"total": 110, "additions": 63, "deletions": 47}, "files": [{"sha": "a3f88114c3931a6232cf61b0cc5aa262627227c9", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ff1b533c1383a6dbde3f1d3d5fe467b627281d09/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1b533c1383a6dbde3f1d3d5fe467b627281d09/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=ff1b533c1383a6dbde3f1d3d5fe467b627281d09", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::{in_macro_or_desugar, snippet, span_lint_and_then};\n+use crate::redundant_static_lifetime::RedundantStaticLifetime;\n+use crate::utils::in_macro_or_desugar;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n-use rustc_errors::Applicability;\n use syntax::ast::*;\n \n declare_clippy_lint! {\n@@ -31,51 +31,9 @@ declare_lint_pass!(StaticConst => [CONST_STATIC_LIFETIME]);\n impl StaticConst {\n     // Recursively visit types\n     fn visit_type(&mut self, ty: &Ty, cx: &EarlyContext<'_>) {\n-        match ty.node {\n-            // Be careful of nested structures (arrays and tuples)\n-            TyKind::Array(ref ty, _) => {\n-                self.visit_type(&*ty, cx);\n-            },\n-            TyKind::Tup(ref tup) => {\n-                for tup_ty in tup {\n-                    self.visit_type(&*tup_ty, cx);\n-                }\n-            },\n-            // This is what we are looking for !\n-            TyKind::Rptr(ref optional_lifetime, ref borrow_type) => {\n-                // Match the 'static lifetime\n-                if let Some(lifetime) = *optional_lifetime {\n-                    match borrow_type.ty.node {\n-                        TyKind::Path(..) | TyKind::Slice(..) | TyKind::Array(..) | TyKind::Tup(..) => {\n-                            if lifetime.ident.name == syntax::symbol::kw::StaticLifetime {\n-                                let snip = snippet(cx, borrow_type.ty.span, \"<type>\");\n-                                let sugg = format!(\"&{}\", snip);\n-                                span_lint_and_then(\n-                                    cx,\n-                                    CONST_STATIC_LIFETIME,\n-                                    lifetime.ident.span,\n-                                    \"Constants have by default a `'static` lifetime\",\n-                                    |db| {\n-                                        db.span_suggestion(\n-                                            ty.span,\n-                                            \"consider removing `'static`\",\n-                                            sugg,\n-                                            Applicability::MachineApplicable, //snippet\n-                                        );\n-                                    },\n-                                );\n-                            }\n-                        },\n-                        _ => {},\n-                    }\n-                }\n-                self.visit_type(&*borrow_type.ty, cx);\n-            },\n-            TyKind::Slice(ref ty) => {\n-                self.visit_type(ty, cx);\n-            },\n-            _ => {},\n-        }\n+        let mut rsl =\n+            RedundantStaticLifetime::new(CONST_STATIC_LIFETIME, \"Constants have by default a `'static` lifetime\");\n+        rsl.visit_type(ty, cx)\n     }\n }\n "}, {"sha": "563a8c196d56cea5460402336d577e075e711163", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff1b533c1383a6dbde3f1d3d5fe467b627281d09/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1b533c1383a6dbde3f1d3d5fe467b627281d09/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ff1b533c1383a6dbde3f1d3d5fe467b627281d09", "patch": "@@ -141,6 +141,7 @@ macro_rules! declare_clippy_lint {\n mod consts;\n #[macro_use]\n mod utils;\n+mod redundant_static_lifetime;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n pub mod approx_const;"}, {"sha": "efac8bfcc6fffafc73ee0ac555f0f3240b08f0db", "filename": "clippy_lints/src/redundant_static_lifetime.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ff1b533c1383a6dbde3f1d3d5fe467b627281d09/clippy_lints%2Fsrc%2Fredundant_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1b533c1383a6dbde3f1d3d5fe467b627281d09/clippy_lints%2Fsrc%2Fredundant_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetime.rs?ref=ff1b533c1383a6dbde3f1d3d5fe467b627281d09", "patch": "@@ -0,0 +1,57 @@\n+use crate::utils::{snippet, span_lint_and_then};\n+use rustc::lint::{EarlyContext, Lint};\n+use rustc_errors::Applicability;\n+use syntax::ast::*;\n+\n+pub struct RedundantStaticLifetime {\n+    lint: &'static Lint,\n+    reason: &'static str,\n+}\n+\n+impl RedundantStaticLifetime {\n+    pub fn new(lint: &'static Lint, reason: &'static str) -> Self {\n+        Self { lint, reason }\n+    }\n+    // Recursively visit types\n+    pub fn visit_type(&mut self, ty: &Ty, cx: &EarlyContext<'_>) {\n+        match ty.node {\n+            // Be careful of nested structures (arrays and tuples)\n+            TyKind::Array(ref ty, _) => {\n+                self.visit_type(&*ty, cx);\n+            },\n+            TyKind::Tup(ref tup) => {\n+                for tup_ty in tup {\n+                    self.visit_type(&*tup_ty, cx);\n+                }\n+            },\n+            // This is what we are looking for !\n+            TyKind::Rptr(ref optional_lifetime, ref borrow_type) => {\n+                // Match the 'static lifetime\n+                if let Some(lifetime) = *optional_lifetime {\n+                    match borrow_type.ty.node {\n+                        TyKind::Path(..) | TyKind::Slice(..) | TyKind::Array(..) | TyKind::Tup(..) => {\n+                            if lifetime.ident.name == syntax::symbol::kw::StaticLifetime {\n+                                let snip = snippet(cx, borrow_type.ty.span, \"<type>\");\n+                                let sugg = format!(\"&{}\", snip);\n+                                span_lint_and_then(cx, self.lint, lifetime.ident.span, self.reason, |db| {\n+                                    db.span_suggestion(\n+                                        ty.span,\n+                                        \"consider removing `'static`\",\n+                                        sugg,\n+                                        Applicability::MachineApplicable, //snippet\n+                                    );\n+                                });\n+                            }\n+                        },\n+                        _ => {},\n+                    }\n+                }\n+                self.visit_type(&*borrow_type.ty, cx);\n+            },\n+            TyKind::Slice(ref ty) => {\n+                self.visit_type(ty, cx);\n+            },\n+            _ => {},\n+        }\n+    }\n+}"}]}