{"sha": "febf34e2b4ed9b66fc3095d55ae13cef9b6b154b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYmYzNGUyYjRlZDliNjZmYzMwOTVkNTVhZTEzY2VmOWI2YjE1NGI=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-24T14:12:08Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-27T13:49:55Z"}, "message": "Move too_many_arguments to its own module", "tree": {"sha": "92a136cacb684770220bf26d0370383f4846f1e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92a136cacb684770220bf26d0370383f4846f1e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/febf34e2b4ed9b66fc3095d55ae13cef9b6b154b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/febf34e2b4ed9b66fc3095d55ae13cef9b6b154b", "html_url": "https://github.com/rust-lang/rust/commit/febf34e2b4ed9b66fc3095d55ae13cef9b6b154b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/febf34e2b4ed9b66fc3095d55ae13cef9b6b154b/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e56a2b27f005e7f81756ccc281eca69900dddd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e56a2b27f005e7f81756ccc281eca69900dddd7", "html_url": "https://github.com/rust-lang/rust/commit/8e56a2b27f005e7f81756ccc281eca69900dddd7"}], "stats": {"total": 146, "additions": 97, "deletions": 49}, "files": [{"sha": "68badb87b22d7fd6e79eaa304a75dfaf4607dd27", "filename": "clippy_lints/src/functions/mod.rs", "status": "renamed", "additions": 21, "deletions": 46, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/febf34e2b4ed9b66fc3095d55ae13cef9b6b154b/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febf34e2b4ed9b66fc3095d55ae13cef9b6b154b/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=febf34e2b4ed9b66fc3095d55ae13cef9b6b154b", "patch": "@@ -1,9 +1,11 @@\n+mod too_many_arguments;\n+\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_then};\n use clippy_utils::source::{snippet, snippet_opt};\n use clippy_utils::ty::{is_must_use_ty, is_type_diagnostic_item, type_is_unsafe_function};\n use clippy_utils::{\n-    attr_by_name, attrs::is_proc_macro, is_trait_impl_item, iter_input_pats, match_def_path, must_use_attr,\n-    path_to_local, return_ty, trait_ref_of_method,\n+    attr_by_name, attrs::is_proc_macro, iter_input_pats, match_def_path, must_use_attr, path_to_local, return_ty,\n+    trait_ref_of_method,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n@@ -17,9 +19,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::source_map::Span;\n-use rustc_span::sym;\n-use rustc_target::spec::abi::Abi;\n+use rustc_span::{sym, Span};\n use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n@@ -222,13 +222,16 @@ declare_clippy_lint! {\n \n #[derive(Copy, Clone)]\n pub struct Functions {\n-    threshold: u64,\n-    max_lines: u64,\n+    too_many_arguments_threshold: u64,\n+    too_many_lines_threshold: u64,\n }\n \n impl Functions {\n-    pub fn new(threshold: u64, max_lines: u64) -> Self {\n-        Self { threshold, max_lines }\n+    pub fn new(too_many_arguments_threshold: u64, too_many_lines_threshold: u64) -> Self {\n+        Self {\n+            too_many_arguments_threshold,\n+            too_many_lines_threshold,\n+        }\n     }\n }\n \n@@ -252,31 +255,14 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         span: Span,\n         hir_id: hir::HirId,\n     ) {\n+        too_many_arguments::check_fn(cx, kind, decl, span, hir_id, self.too_many_arguments_threshold);\n+\n         let unsafety = match kind {\n             intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _) => unsafety,\n             intravisit::FnKind::Method(_, sig, _) => sig.header.unsafety,\n             intravisit::FnKind::Closure => return,\n         };\n \n-        // don't warn for implementations, it's not their fault\n-        if !is_trait_impl_item(cx, hir_id) {\n-            // don't lint extern functions decls, it's not their fault either\n-            match kind {\n-                intravisit::FnKind::Method(\n-                    _,\n-                    &hir::FnSig {\n-                        header: hir::FnHeader { abi: Abi::Rust, .. },\n-                        ..\n-                    },\n-                    _,\n-                )\n-                | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _) => {\n-                    self.check_arg_number(cx, decl, span.with_hi(decl.output.span().hi()))\n-                },\n-                _ => {},\n-            }\n-        }\n-\n         Self::check_raw_ptr(cx, unsafety, decl, body, hir_id);\n         self.check_line_number(cx, span, body);\n     }\n@@ -335,11 +321,9 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n+        too_many_arguments::check_trait_item(cx, item, self.too_many_arguments_threshold);\n+\n         if let hir::TraitItemKind::Fn(ref sig, ref eid) = item.kind {\n-            // don't lint extern functions decls, it's not their fault\n-            if sig.header.abi == Abi::Rust {\n-                self.check_arg_number(cx, &sig.decl, item.span.with_hi(sig.decl.output.span().hi()));\n-            }\n             let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             if is_public {\n@@ -372,18 +356,6 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n }\n \n impl<'tcx> Functions {\n-    fn check_arg_number(self, cx: &LateContext<'_>, decl: &hir::FnDecl<'_>, fn_span: Span) {\n-        let args = decl.inputs.len() as u64;\n-        if args > self.threshold {\n-            span_lint(\n-                cx,\n-                TOO_MANY_ARGUMENTS,\n-                fn_span,\n-                &format!(\"this function has too many arguments ({}/{})\", args, self.threshold),\n-            );\n-        }\n-    }\n-\n     fn check_line_number(self, cx: &LateContext<'_>, span: Span, body: &'tcx hir::Body<'_>) {\n         if in_external_macro(cx.sess(), span) {\n             return;\n@@ -430,12 +402,15 @@ impl<'tcx> Functions {\n             }\n         }\n \n-        if line_count > self.max_lines {\n+        if line_count > self.too_many_lines_threshold {\n             span_lint(\n                 cx,\n                 TOO_MANY_LINES,\n                 span,\n-                &format!(\"this function has too many lines ({}/{})\", line_count, self.max_lines),\n+                &format!(\n+                    \"this function has too many lines ({}/{})\",\n+                    line_count, self.too_many_lines_threshold\n+                ),\n             )\n         }\n     }", "previous_filename": "clippy_lints/src/functions.rs"}, {"sha": "62b1e6bd7ca4efc9c43eb44d5d4d98b5c126e0e2", "filename": "clippy_lints/src/functions/too_many_arguments.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/febf34e2b4ed9b66fc3095d55ae13cef9b6b154b/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febf34e2b4ed9b66fc3095d55ae13cef9b6b154b/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs?ref=febf34e2b4ed9b66fc3095d55ae13cef9b6b154b", "patch": "@@ -0,0 +1,73 @@\n+use rustc_hir::{self as hir, intravisit};\n+use rustc_lint::LateContext;\n+use rustc_span::Span;\n+use rustc_target::spec::abi::Abi;\n+\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::is_trait_impl_item;\n+\n+use super::TOO_MANY_ARGUMENTS;\n+\n+pub(super) fn check_fn(\n+    cx: &LateContext<'tcx>,\n+    kind: intravisit::FnKind<'tcx>,\n+    decl: &'tcx hir::FnDecl<'_>,\n+    span: Span,\n+    hir_id: hir::HirId,\n+    too_many_arguments_threshold: u64,\n+) {\n+    // don't warn for implementations, it's not their fault\n+    if !is_trait_impl_item(cx, hir_id) {\n+        // don't lint extern functions decls, it's not their fault either\n+        match kind {\n+            intravisit::FnKind::Method(\n+                _,\n+                &hir::FnSig {\n+                    header: hir::FnHeader { abi: Abi::Rust, .. },\n+                    ..\n+                },\n+                _,\n+            )\n+            | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _) => check_arg_number(\n+                cx,\n+                decl,\n+                span.with_hi(decl.output.span().hi()),\n+                too_many_arguments_threshold,\n+            ),\n+            _ => {},\n+        }\n+    }\n+}\n+\n+pub(super) fn check_trait_item(\n+    cx: &LateContext<'tcx>,\n+    item: &'tcx hir::TraitItem<'_>,\n+    too_many_arguments_threshold: u64,\n+) {\n+    if let hir::TraitItemKind::Fn(ref sig, _) = item.kind {\n+        // don't lint extern functions decls, it's not their fault\n+        if sig.header.abi == Abi::Rust {\n+            check_arg_number(\n+                cx,\n+                &sig.decl,\n+                item.span.with_hi(sig.decl.output.span().hi()),\n+                too_many_arguments_threshold,\n+            );\n+        }\n+    }\n+}\n+\n+fn check_arg_number(cx: &LateContext<'_>, decl: &hir::FnDecl<'_>, fn_span: Span, too_many_arguments_threshold: u64) {\n+    let args = decl.inputs.len() as u64;\n+    if args > too_many_arguments_threshold {\n+        span_lint(\n+            cx,\n+            TOO_MANY_ARGUMENTS,\n+            fn_span,\n+            &format!(\n+                \"this function has too many arguments ({}/{})\",\n+                args, too_many_arguments_threshold\n+            ),\n+        );\n+    }\n+}"}, {"sha": "3d3e57f7d2fbe1c72488db40884675522b70503b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/febf34e2b4ed9b66fc3095d55ae13cef9b6b154b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febf34e2b4ed9b66fc3095d55ae13cef9b6b154b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=febf34e2b4ed9b66fc3095d55ae13cef9b6b154b", "patch": "@@ -1124,9 +1124,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box new_without_default::NewWithoutDefault::default());\n     let blacklisted_names = conf.blacklisted_names.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || box blacklisted_name::BlacklistedName::new(blacklisted_names.clone()));\n-    let too_many_arguments_threshold1 = conf.too_many_arguments_threshold;\n-    let too_many_lines_threshold2 = conf.too_many_lines_threshold;\n-    store.register_late_pass(move || box functions::Functions::new(too_many_arguments_threshold1, too_many_lines_threshold2));\n+    let too_many_arguments_threshold = conf.too_many_arguments_threshold;\n+    let too_many_lines_threshold = conf.too_many_lines_threshold;\n+    store.register_late_pass(move || box functions::Functions::new(too_many_arguments_threshold, too_many_lines_threshold));\n     let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || box doc::DocMarkdown::new(doc_valid_idents.clone()));\n     store.register_late_pass(|| box neg_multiply::NegMultiply);"}]}