{"sha": "05a95a43726ff741339205ed4e3fcc0b9b39d415", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YTk1YTQzNzI2ZmY3NDEzMzkyMDVlZDRlM2ZjYzBiOWIzOWQ0MTU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-23T19:16:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-23T19:16:02Z"}, "message": "Rollup merge of #81170 - xfix:vecdeque-bug-fix, r=sfackler\n\nAvoid hash_slice in VecDeque's Hash implementation\n\nFixes #80303.", "tree": {"sha": "48a2fd744c8cca06ca250e85302e8113b8f081ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48a2fd744c8cca06ca250e85302e8113b8f081ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a95a43726ff741339205ed4e3fcc0b9b39d415", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgDHXyCRBK7hj4Ov3rIwAAdHIIABV+HCHUGabHRuMt27zmni0F\nQZW6c8yXDKAyVD4KoCHRNokGhjz6vBsG2FkN3hM1uNKyGgwf9RPJJVzAl+UWfPdy\nzPSL5E6oCQpeIZK4fMzCYXS4DSgyiodg5d9fXztHP6eRIOD0jh/rWIHlSaHdNoNJ\nGf1F4ASLhdI6x3G1MqWh7eNKUfMq77P+Kz+Oy1JUdoxDk4JV8sLAJUveRHF84vYi\ntD1aMT8BVtkhR7av2smduw4C+D8Igp4Y3z7nIfI1kAVJWabwQVvd2yf+OZbYsSQO\n/VMRhEOCVezWNybnEiZ31l53K7dPuwfJh9x0Aj/Q+ao/8pt1ULKAE6dZQdAe9LA=\n=6ObP\n-----END PGP SIGNATURE-----\n", "payload": "tree 48a2fd744c8cca06ca250e85302e8113b8f081ae\nparent 57d655368bd850784e8e394fd06800c92a45eaa6\nparent ae3a5153377f2271ba7dfe686a9b5bca1632c32b\nauthor Jonas Schievink <jonasschievink@gmail.com> 1611429362 +0100\ncommitter GitHub <noreply@github.com> 1611429362 +0100\n\nRollup merge of #81170 - xfix:vecdeque-bug-fix, r=sfackler\n\nAvoid hash_slice in VecDeque's Hash implementation\n\nFixes #80303.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a95a43726ff741339205ed4e3fcc0b9b39d415", "html_url": "https://github.com/rust-lang/rust/commit/05a95a43726ff741339205ed4e3fcc0b9b39d415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a95a43726ff741339205ed4e3fcc0b9b39d415/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d655368bd850784e8e394fd06800c92a45eaa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d655368bd850784e8e394fd06800c92a45eaa6", "html_url": "https://github.com/rust-lang/rust/commit/57d655368bd850784e8e394fd06800c92a45eaa6"}, {"sha": "ae3a5153377f2271ba7dfe686a9b5bca1632c32b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae3a5153377f2271ba7dfe686a9b5bca1632c32b", "html_url": "https://github.com/rust-lang/rust/commit/ae3a5153377f2271ba7dfe686a9b5bca1632c32b"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "6f9133e2811bf18c8c261941b190fdf652b530a0", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05a95a43726ff741339205ed4e3fcc0b9b39d415/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a95a43726ff741339205ed4e3fcc0b9b39d415/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=05a95a43726ff741339205ed4e3fcc0b9b39d415", "patch": "@@ -2646,9 +2646,13 @@ impl<A: Ord> Ord for VecDeque<A> {\n impl<A: Hash> Hash for VecDeque<A> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         self.len().hash(state);\n-        let (a, b) = self.as_slices();\n-        Hash::hash_slice(a, state);\n-        Hash::hash_slice(b, state);\n+        // It's not possible to use Hash::hash_slice on slices\n+        // returned by as_slices method as their length can vary\n+        // in otherwise identical deques.\n+        //\n+        // Hasher only guarantees equivalence for the exact same\n+        // set of calls to its methods.\n+        self.iter().for_each(|elem| elem.hash(state));\n     }\n }\n "}, {"sha": "87e06fa394d38baef06c904aae9cbd968b5bcabe", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/05a95a43726ff741339205ed4e3fcc0b9b39d415/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a95a43726ff741339205ed4e3fcc0b9b39d415/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=05a95a43726ff741339205ed4e3fcc0b9b39d415", "patch": "@@ -599,3 +599,43 @@ fn issue_53529() {\n         assert_eq!(*a, 2);\n     }\n }\n+\n+#[test]\n+fn issue_80303() {\n+    use core::iter;\n+    use core::num::Wrapping;\n+\n+    // This is a valid, albeit rather bad hash function implementation.\n+    struct SimpleHasher(Wrapping<u64>);\n+\n+    impl Hasher for SimpleHasher {\n+        fn finish(&self) -> u64 {\n+            self.0.0\n+        }\n+\n+        fn write(&mut self, bytes: &[u8]) {\n+            // This particular implementation hashes value 24 in addition to bytes.\n+            // Such an implementation is valid as Hasher only guarantees equivalence\n+            // for the exact same set of calls to its methods.\n+            for &v in iter::once(&24).chain(bytes) {\n+                self.0 = Wrapping(31) * self.0 + Wrapping(u64::from(v));\n+            }\n+        }\n+    }\n+\n+    fn hash_code(value: impl Hash) -> u64 {\n+        let mut hasher = SimpleHasher(Wrapping(1));\n+        value.hash(&mut hasher);\n+        hasher.finish()\n+    }\n+\n+    // This creates two deques for which values returned by as_slices\n+    // method differ.\n+    let vda: VecDeque<u8> = (0..10).collect();\n+    let mut vdb = VecDeque::with_capacity(10);\n+    vdb.extend(5..10);\n+    (0..5).rev().for_each(|elem| vdb.push_front(elem));\n+    assert_ne!(vda.as_slices(), vdb.as_slices());\n+    assert_eq!(vda, vdb);\n+    assert_eq!(hash_code(vda), hash_code(vdb));\n+}"}]}