{"sha": "a5de379b55d993db1dafd8e5bbc216d01be83893", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZGUzNzliNTVkOTkzZGIxZGFmZDhlNWJiYzIxNmQwMWJlODM4OTM=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-10-11T03:49:45Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-10-12T04:10:35Z"}, "message": "structured suggestion for E0223 ambiguous associated type\n\nIt looks like we tend to use angle-brackets around the placeholder in\nthe few other places we use `Applicability::HasPlaceholders`, but that\nwould be confusing here, so ...", "tree": {"sha": "af1599b7553800b7dbf180637f0d8fc287e4d5eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af1599b7553800b7dbf180637f0d8fc287e4d5eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5de379b55d993db1dafd8e5bbc216d01be83893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5de379b55d993db1dafd8e5bbc216d01be83893", "html_url": "https://github.com/rust-lang/rust/commit/a5de379b55d993db1dafd8e5bbc216d01be83893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5de379b55d993db1dafd8e5bbc216d01be83893/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77af314083e5acabf9ba5335e47271f35eef2e99", "url": "https://api.github.com/repos/rust-lang/rust/commits/77af314083e5acabf9ba5335e47271f35eef2e99", "html_url": "https://github.com/rust-lang/rust/commit/77af314083e5acabf9ba5335e47271f35eef2e99"}], "stats": {"total": 109, "additions": 31, "deletions": 78}, "files": [{"sha": "32889ef8698339b3c3e153656b9575c28cc0a6fe", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a5de379b55d993db1dafd8e5bbc216d01be83893", "patch": "@@ -30,7 +30,7 @@ use std::slice;\n use require_c_abi_if_variadic;\n use util::common::ErrorReported;\n use util::nodemap::FxHashMap;\n-use errors::{FatalError, DiagnosticId};\n+use errors::{Applicability, FatalError, DiagnosticId};\n use lint;\n \n use std::iter;\n@@ -1092,11 +1092,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                                         trait_str: &str,\n                                         name: &str) {\n         struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\")\n-            .span_label(span, \"ambiguous associated type\")\n-            .note(&format!(\"specify the type using the syntax `<{} as {}>::{}`\",\n-                           type_str, trait_str, name))\n-            .emit();\n-\n+            .span_suggestion_with_applicability(\n+                span,\n+                \"use fully-qualified syntax\",\n+                format!(\"<{} as {}>::{}\", type_str, trait_str, name),\n+                Applicability::HasPlaceholders\n+            ).emit();\n     }\n \n     // Search for a bound on a type parameter which includes the associated item"}, {"sha": "755e83daf4784c5b66a96438830a124cb77fd721", "filename": "src/test/ui/associated-types/associated-types-in-ambiguous-context.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr?ref=a5de379b55d993db1dafd8e5bbc216d01be83893", "patch": "@@ -2,25 +2,19 @@ error[E0223]: ambiguous associated type\n   --> $DIR/associated-types-in-ambiguous-context.rs:16:36\n    |\n LL | fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n-   |                                    ^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<Type as Get>::Value`\n+   |                                    ^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Get>::Value`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/associated-types-in-ambiguous-context.rs:25:10\n    |\n LL | type X = std::ops::Deref::Target;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<Type as std::ops::Deref>::Target`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Type as std::ops::Deref>::Target`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/associated-types-in-ambiguous-context.rs:21:23\n    |\n LL |     fn grab(&self) -> Grab::Value;\n-   |                       ^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<Type as Grab>::Value`\n+   |                       ^^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Grab>::Value`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5de9f5866ff83a1d2cdf2e897c412b1beeb42acb", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=a5de379b55d993db1dafd8e5bbc216d01be83893", "patch": "@@ -44,33 +44,25 @@ error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:11:10\n    |\n LL | type A = [u8; 4]::AssocTy;\n-   |          ^^^^^^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<[u8; _] as Trait>::AssocTy`\n+   |          ^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<[u8; _] as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:15:10\n    |\n LL | type B = [u8]::AssocTy;\n-   |          ^^^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<[u8] as Trait>::AssocTy`\n+   |          ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<[u8] as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:19:10\n    |\n LL | type C = (u8)::AssocTy;\n-   |          ^^^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<u8 as Trait>::AssocTy`\n+   |          ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<u8 as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:23:10\n    |\n LL | type D = (u8, u8)::AssocTy;\n-   |          ^^^^^^^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<(u8, u8) as Trait>::AssocTy`\n+   |          ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(u8, u8) as Trait>::AssocTy`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/bad-assoc-ty.rs:27:10\n@@ -82,25 +74,19 @@ error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:31:19\n    |\n LL | type F = &'static (u8)::AssocTy;\n-   |                   ^^^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<u8 as Trait>::AssocTy`\n+   |                   ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<u8 as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:37:10\n    |\n LL | type G = 'static + (Send)::AssocTy;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<(dyn std::marker::Send + 'static) as Trait>::AssocTy`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(dyn std::marker::Send + 'static) as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:43:10\n    |\n LL | type H = Fn(u8) -> (u8)::Output;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<(dyn std::ops::Fn(u8) -> u8 + 'static) as Trait>::Output`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(dyn std::ops::Fn(u8) -> u8 + 'static) as Trait>::Output`\n \n error: aborting due to 15 previous errors\n "}, {"sha": "87736c10774ffa9cb631986a49caf2e572c4d0f4", "filename": "src/test/ui/error-codes/E0223.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Ferror-codes%2FE0223.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Ferror-codes%2FE0223.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0223.stderr?ref=a5de379b55d993db1dafd8e5bbc216d01be83893", "patch": "@@ -2,9 +2,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/E0223.rs:14:14\n    |\n LL |     let foo: MyTrait::X;\n-   |              ^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<Type as MyTrait>::X`\n+   |              ^^^^^^^^^^ help: use fully-qualified syntax: `<Type as MyTrait>::X`\n \n error: aborting due to previous error\n "}, {"sha": "a6daf898e30b5b476e826c4295a4aea1d17fd034", "filename": "src/test/ui/impl-trait/impl_trait_projections.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_trait_projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_trait_projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_trait_projections.stderr?ref=a5de379b55d993db1dafd8e5bbc216d01be83893", "patch": "@@ -26,9 +26,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/impl_trait_projections.rs:21:50\n    |\n LL | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n-   |                                                  ^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<impl std::iter::Iterator as Trait>::Item`\n+   |                                                  ^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<impl std::iter::Iterator as Trait>::Item`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "ef2430561ec1147d9a9f094cb5df266f6694a8cb", "filename": "src/test/ui/issues/issue-23073.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fissues%2Fissue-23073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fissues%2Fissue-23073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23073.stderr?ref=a5de379b55d993db1dafd8e5bbc216d01be83893", "patch": "@@ -2,9 +2,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/issue-23073.rs:16:17\n    |\n LL |     type FooT = <<Self as Bar>::Foo>::T; //~ ERROR ambiguous associated type\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<<Self as Bar>::Foo as Trait>::T`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<<Self as Bar>::Foo as Trait>::T`\n \n error: aborting due to previous error\n "}, {"sha": "0dfdd8b588634d2dc9c4f6a8d32c7762d803d66c", "filename": "src/test/ui/issues/issue-34209.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr?ref=a5de379b55d993db1dafd8e5bbc216d01be83893", "patch": "@@ -2,9 +2,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/issue-34209.rs:17:9\n    |\n LL |         S::B{ } => { },\n-   |         ^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<S as Trait>::B`\n+   |         ^^^^ help: use fully-qualified syntax: `<S as Trait>::B`\n \n error: aborting due to previous error\n "}, {"sha": "70aac7791035b5983b7e470cc9079dc4f6eed002", "filename": "src/test/ui/qualified/qualified-path-params-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr?ref=a5de379b55d993db1dafd8e5bbc216d01be83893", "patch": "@@ -8,9 +8,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/qualified-path-params-2.rs:28:10\n    |\n LL | type A = <S as Tr>::A::f<u8>;\n-   |          ^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<<S as Tr>::A as Trait>::f`\n+   |          ^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<<S as Tr>::A as Trait>::f`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b951b1194367feede1faab65cec0ea90ccce196e", "filename": "src/test/ui/self/self-impl.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fself%2Fself-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fself%2Fself-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-impl.stderr?ref=a5de379b55d993db1dafd8e5bbc216d01be83893", "patch": "@@ -2,17 +2,13 @@ error[E0223]: ambiguous associated type\n   --> $DIR/self-impl.rs:33:16\n    |\n LL |         let _: <Self>::Baz = true;\n-   |                ^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<Bar as Trait>::Baz`\n+   |                ^^^^^^^^^^^ help: use fully-qualified syntax: `<Bar as Trait>::Baz`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/self-impl.rs:35:16\n    |\n LL |         let _: Self::Baz = true;\n-   |                ^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<Bar as Trait>::Baz`\n+   |                ^^^^^^^^^ help: use fully-qualified syntax: `<Bar as Trait>::Baz`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "873e7bb7b835d39cf8027a3536ea6a0da0157b4f", "filename": "src/test/ui/structs/struct-path-associated-type.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr?ref=a5de379b55d993db1dafd8e5bbc216d01be83893", "patch": "@@ -32,9 +32,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:42:13\n    |\n LL |     let s = S::A {}; //~ ERROR ambiguous associated type\n-   |             ^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<S as Trait>::A`\n+   |             ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n error[E0109]: type parameters are not allowed on this type\n   --> $DIR/struct-path-associated-type.rs:43:20\n@@ -46,17 +44,13 @@ error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:43:13\n    |\n LL |     let z = S::A::<u8> {}; //~ ERROR ambiguous associated type\n-   |             ^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<S as Trait>::A`\n+   |             ^^^^^^^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:46:9\n    |\n LL |         S::A {} => {} //~ ERROR ambiguous associated type\n-   |         ^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<S as Trait>::A`\n+   |         ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "fc14ae91d7b36c3464d4ed1cbb86256c16a54487", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=a5de379b55d993db1dafd8e5bbc216d01be83893", "patch": "@@ -138,25 +138,19 @@ error[E0223]: ambiguous associated type\n   --> $DIR/trait-item-privacy.rs:127:12\n    |\n LL |     let _: S::A; //~ ERROR ambiguous associated type\n-   |            ^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<S as Trait>::A`\n+   |            ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/trait-item-privacy.rs:128:12\n    |\n LL |     let _: S::B; //~ ERROR ambiguous associated type\n-   |            ^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<S as Trait>::B`\n+   |            ^^^^ help: use fully-qualified syntax: `<S as Trait>::B`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/trait-item-privacy.rs:129:12\n    |\n LL |     let _: S::C; //~ ERROR ambiguous associated type\n-   |            ^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<S as Trait>::C`\n+   |            ^^^^ help: use fully-qualified syntax: `<S as Trait>::C`\n \n error: associated type `A` is private\n   --> $DIR/trait-item-privacy.rs:131:12"}, {"sha": "77d887f1d68d8e616070e137c6ff40ac198c5bbf", "filename": "src/test/ui/ufcs/ufcs-partially-resolved.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5de379b55d993db1dafd8e5bbc216d01be83893/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr?ref=a5de379b55d993db1dafd8e5bbc216d01be83893", "patch": "@@ -184,9 +184,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/ufcs-partially-resolved.rs:46:12\n    |\n LL |     let _: <u8 as Tr>::Y::NN; //~ ERROR ambiguous associated type\n-   |            ^^^^^^^^^^^^^^^^^ ambiguous associated type\n-   |\n-   = note: specify the type using the syntax `<<u8 as Tr>::Y as Trait>::NN`\n+   |            ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<<u8 as Tr>::Y as Trait>::NN`\n \n error[E0599]: no associated item named `NN` found for type `<u8 as Tr>::Y` in the current scope\n   --> $DIR/ufcs-partially-resolved.rs:48:5"}]}