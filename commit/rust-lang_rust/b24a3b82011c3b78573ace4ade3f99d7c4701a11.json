{"sha": "b24a3b82011c3b78573ace4ade3f99d7c4701a11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNGEzYjgyMDExYzNiNzg1NzNhY2U0YWRlM2Y5OWQ3YzQ3MDFhMTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-27T00:35:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-27T17:19:59Z"}, "message": "rustc: Remove support for hyphens in crate names\n\nThis commit removes parser support for `extern crate \"foo\" as bar` as the\nrenamed crate is now required to be an identifier. Additionally this commit\nenables hard errors on crate names that contain hyphens in them, they must now\nsolely contain alphanumeric characters or underscores.\n\nIf the crate name is inferred from the file name, however, the file name\n`foo-bar.rs` will have the crate name inferred as `foo_bar`. If a binary is\nbeing emitted it will have the name `foo-bar` and a library will have the name\n`libfoo_bar.rlib`.\n\nThis commit is a breaking change for a number of reasons:\n\n* Old syntax is being removed. This was previously only issuing warnings.\n* The output for the compiler when input is received on stdin is now `rust_out`\n  instead of `rust-out`.\n* The crate name for a crate in the file `foo-bar.rs` is now `foo_bar` which can\n  affect infrastructure such as logging.\n\n[breaking-change]", "tree": {"sha": "9f9ac3cf9772ff71bfe85fba9ee6d870e67dab9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f9ac3cf9772ff71bfe85fba9ee6d870e67dab9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b24a3b82011c3b78573ace4ade3f99d7c4701a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b24a3b82011c3b78573ace4ade3f99d7c4701a11", "html_url": "https://github.com/rust-lang/rust/commit/b24a3b82011c3b78573ace4ade3f99d7c4701a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b24a3b82011c3b78573ace4ade3f99d7c4701a11/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36ef29abf7fa14dc9361d6b30ff7f8d18bfb4157", "url": "https://api.github.com/repos/rust-lang/rust/commits/36ef29abf7fa14dc9361d6b30ff7f8d18bfb4157", "html_url": "https://github.com/rust-lang/rust/commit/36ef29abf7fa14dc9361d6b30ff7f8d18bfb4157"}], "stats": {"total": 113, "additions": 40, "deletions": 73}, "files": [{"sha": "b6a8525675e456c64afad6b7c8ee895eebb3d948", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b24a3b82011c3b78573ace4ade3f99d7c4701a11/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24a3b82011c3b78573ace4ade3f99d7c4701a11/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=b24a3b82011c3b78573ace4ade3f99d7c4701a11", "patch": "@@ -73,24 +73,20 @@ struct CrateInfo {\n }\n \n pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n-    let say = |s: &str, warn: bool| {\n+    let say = |s: &str| {\n         match (sp, sess) {\n             (_, None) => panic!(\"{}\", s),\n-            (Some(sp), Some(sess)) if warn => sess.span_warn(sp, s),\n             (Some(sp), Some(sess)) => sess.span_err(sp, s),\n-            (None, Some(sess)) if warn => sess.warn(s),\n             (None, Some(sess)) => sess.err(s),\n         }\n     };\n     if s.len() == 0 {\n-        say(\"crate name must not be empty\", false);\n-    } else if s.contains(\"-\") {\n-        say(&format!(\"crate names soon cannot contain hyphens: {}\", s), true);\n+        say(\"crate name must not be empty\");\n     }\n     for c in s.chars() {\n         if c.is_alphanumeric() { continue }\n-        if c == '_' || c == '-' { continue }\n-        say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s), false);\n+        if c == '_'  { continue }\n+        say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n     }\n     match sess {\n         Some(sess) => sess.abort_if_errors(),\n@@ -306,13 +302,7 @@ impl<'a> CrateReader<'a> {\n                       -> Option<ast::CrateNum> {\n         let mut ret = None;\n         self.sess.cstore.iter_crate_data(|cnum, data| {\n-            // For now we do a \"fuzzy match\" on crate names by considering\n-            // hyphens equal to underscores. This is purely meant to be a\n-            // transitionary feature while we deprecate the quote syntax of\n-            // `extern crate` statements.\n-            if data.name != name.replace(\"-\", \"_\") {\n-                return\n-            }\n+            if data.name != name { return }\n \n             match hash {\n                 Some(hash) if *hash == data.hash() => { ret = Some(cnum); return }"}, {"sha": "8347571a480590f3fe889bc93be0659bafbbd4f7", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b24a3b82011c3b78573ace4ade3f99d7c4701a11/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24a3b82011c3b78573ace4ade3f99d7c4701a11/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=b24a3b82011c3b78573ace4ade3f99d7c4701a11", "patch": "@@ -159,11 +159,19 @@ pub fn find_crate_name(sess: Option<&Session>,\n     }\n     if let Input::File(ref path) = *input {\n         if let Some(s) = path.file_stem().and_then(|s| s.to_str()) {\n-            return validate(s.to_string(), None);\n+            if s.starts_with(\"-\") {\n+                let msg = format!(\"crate names cannot start with a `-`, but \\\n+                                   `{}` has a leading hyphen\", s);\n+                if let Some(sess) = sess {\n+                    sess.err(&msg);\n+                }\n+            } else {\n+                return validate(s.replace(\"-\", \"_\"), None);\n+            }\n         }\n     }\n \n-    \"rust-out\".to_string()\n+    \"rust_out\".to_string()\n }\n \n pub fn build_link_meta(sess: &Session, krate: &ast::Crate,\n@@ -455,7 +463,11 @@ pub fn filename_for_input(sess: &Session,\n         }\n         config::CrateTypeExecutable => {\n             let suffix = &sess.target.target.options.exe_suffix;\n-            out_filename.with_file_name(&format!(\"{}{}\", libname, suffix))\n+            if suffix.len() == 0 {\n+                out_filename.to_path_buf()\n+            } else {\n+                out_filename.with_extension(&suffix[1..])\n+            }\n         }\n     }\n }"}, {"sha": "8e25ee095a043c5626228d40c5105654c273e066", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24a3b82011c3b78573ace4ade3f99d7c4701a11/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24a3b82011c3b78573ace4ade3f99d7c4701a11/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=b24a3b82011c3b78573ace4ade3f99d7c4701a11", "patch": "@@ -224,7 +224,7 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n     // environment to ensure that the target loads the right libraries at\n     // runtime. It would be a sad day if the *host* libraries were loaded as a\n     // mistake.\n-    let mut cmd = Command::new(&outdir.path().join(\"rust-out\"));\n+    let mut cmd = Command::new(&outdir.path().join(\"rust_out\"));\n     let var = DynamicLibrary::envvar();\n     let newpath = {\n         let path = env::var_os(var).unwrap_or(OsString::new());"}, {"sha": "92795bb200275309e723891ee2ef285ae7401879", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 37, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b24a3b82011c3b78573ace4ade3f99d7c4701a11/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24a3b82011c3b78573ace4ade3f99d7c4701a11/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b24a3b82011c3b78573ace4ade3f99d7c4701a11", "patch": "@@ -4977,46 +4977,19 @@ impl<'a> Parser<'a> {\n     ///\n     /// # Examples\n     ///\n-    /// extern crate url;\n-    /// extern crate foo = \"bar\"; //deprecated\n-    /// extern crate \"bar\" as foo;\n+    /// extern crate foo;\n+    /// extern crate bar as foo;\n     fn parse_item_extern_crate(&mut self,\n-                                lo: BytePos,\n-                                visibility: Visibility,\n-                                attrs: Vec<Attribute>)\n+                               lo: BytePos,\n+                               visibility: Visibility,\n+                               attrs: Vec<Attribute>)\n                                 -> P<Item> {\n \n-        let (maybe_path, ident) = match self.token {\n-            token::Ident(..) => {\n-                let crate_name = self.parse_ident();\n-                if self.eat_keyword(keywords::As) {\n-                    (Some(crate_name.name), self.parse_ident())\n-                } else {\n-                    (None, crate_name)\n-                }\n-            },\n-            token::Literal(token::Str_(..), suf) |\n-            token::Literal(token::StrRaw(..), suf) => {\n-                let sp = self.span;\n-                self.expect_no_suffix(sp, \"extern crate name\", suf);\n-                // forgo the internal suffix check of `parse_str` to\n-                // avoid repeats (this unwrap will always succeed due\n-                // to the restriction of the `match`)\n-                let (s, _, _) = self.parse_optional_str().unwrap();\n-                self.expect_keyword(keywords::As);\n-                let the_ident = self.parse_ident();\n-                self.obsolete(sp, ObsoleteSyntax::ExternCrateString);\n-                let s = token::intern(&s);\n-                (Some(s), the_ident)\n-            },\n-            _ => {\n-                let span = self.span;\n-                let token_str = self.this_token_to_string();\n-                self.span_fatal(span,\n-                                &format!(\"expected extern crate name but \\\n-                                         found `{}`\",\n-                                        token_str));\n-            }\n+        let crate_name = self.parse_ident();\n+        let (maybe_path, ident) = if self.eat_keyword(keywords::As) {\n+            (Some(crate_name.name), self.parse_ident())\n+        } else {\n+            (None, crate_name)\n         };\n         self.expect(&token::Semi);\n "}, {"sha": "29df0fa705e1a72c57624b3260078eac9d9a25ac", "filename": "src/test/compile-fail/bad-crate-id2.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36ef29abf7fa14dc9361d6b30ff7f8d18bfb4157/src%2Ftest%2Fcompile-fail%2Fbad-crate-id2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ef29abf7fa14dc9361d6b30ff7f8d18bfb4157/src%2Ftest%2Fcompile-fail%2Fbad-crate-id2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-crate-id2.rs?ref=36ef29abf7fa14dc9361d6b30ff7f8d18bfb4157", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern crate \"#a\" as bar; //~ ERROR: invalid character `#` in crate name: `#a`\n-//~^ WARNING: obsolete syntax\n-\n-fn main() {}"}, {"sha": "783d826a53dabbd7d4d96197defae5b2ce8de264", "filename": "src/test/run-make/output-with-hyphens/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b24a3b82011c3b78573ace4ade3f99d7c4701a11/src%2Ftest%2Frun-make%2Foutput-with-hyphens%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b24a3b82011c3b78573ace4ade3f99d7c4701a11/src%2Ftest%2Frun-make%2Foutput-with-hyphens%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-with-hyphens%2FMakefile?ref=b24a3b82011c3b78573ace4ade3f99d7c4701a11", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo-bar.rs\n+\t[ -f $(TMPDIR)/$(call BIN,foo-bar) ]\n+\t[ -f $(TMPDIR)/libfoo_bar.rlib ]"}, {"sha": "2f93b2d1ead01a7fba19d14a1aa65db12f0bf669", "filename": "src/test/run-make/output-with-hyphens/foo-bar.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b24a3b82011c3b78573ace4ade3f99d7c4701a11/src%2Ftest%2Frun-make%2Foutput-with-hyphens%2Ffoo-bar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24a3b82011c3b78573ace4ade3f99d7c4701a11/src%2Ftest%2Frun-make%2Foutput-with-hyphens%2Ffoo-bar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-with-hyphens%2Ffoo-bar.rs?ref=b24a3b82011c3b78573ace4ade3f99d7c4701a11", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate \"\" as foo; //~ ERROR: crate name must not be empty\n-//~^ WARNING: obsolete syntax\n+#![crate_type = \"lib\"]\n+#![crate_type = \"bin\"]\n \n fn main() {}", "previous_filename": "src/test/compile-fail/bad-crate-id.rs"}]}