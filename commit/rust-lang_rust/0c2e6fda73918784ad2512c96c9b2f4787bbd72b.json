{"sha": "0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMmU2ZmRhNzM5MTg3ODRhZDI1MTJjOTZjOWIyZjQ3ODdiYmQ3MmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-31T22:09:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-02T17:15:19Z"}, "message": "rustc: Implement ~Trait. r=nmatsakis", "tree": {"sha": "98a997a53856af70e9f766eb14dbfcd4a7af759e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98a997a53856af70e9f766eb14dbfcd4a7af759e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "html_url": "https://github.com/rust-lang/rust/commit/0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65d4dbeb1239896758f4e4ee999879b9c2dc6370", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d4dbeb1239896758f4e4ee999879b9c2dc6370", "html_url": "https://github.com/rust-lang/rust/commit/65d4dbeb1239896758f4e4ee999879b9c2dc6370"}], "stats": {"total": 196, "additions": 164, "deletions": 32}, "files": [{"sha": "8eace4f5cf114fbec703a44ff255eb8c8b2c35c7", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "patch": "@@ -286,6 +286,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n         maybe_copy(cx, source, Some((\"casted values must be copyable\",\n                                      try_adding)));\n         check_cast_for_escaping_regions(cx, source, e);\n+        check_kind_bounds_of_cast(cx, source, e);\n       }\n       expr_copy(expr) => check_copy_ex(cx, expr, false,\n           Some((\"explicit copy requires a copyable argument\", \"\"))),\n@@ -607,6 +608,26 @@ fn check_cast_for_escaping_regions(\n     }\n }\n \n+/// Ensures that values placed into a ~Trait are copyable and sendable.\n+fn check_kind_bounds_of_cast(cx: ctx, source: @expr, target: @expr) {\n+    let target_ty = ty::expr_ty(cx.tcx, target);\n+    match ty::get(target_ty).sty {\n+        ty::ty_trait(_, _, ty::vstore_uniq) => {\n+            let source_ty = ty::expr_ty(cx.tcx, source);\n+            let source_kind = ty::type_kind(cx.tcx, source_ty);\n+            if !ty::kind_can_be_copied(source_kind) {\n+                cx.tcx.sess.span_err(target.span,\n+                    ~\"uniquely-owned trait objects must be copyable\");\n+            }\n+            if !ty::kind_can_be_sent(source_kind) {\n+                cx.tcx.sess.span_err(target.span,\n+                    ~\"uniquely-owned trait objects must be sendable\");\n+            }\n+        }\n+        _ => {} // Nothing to do.\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "b02d12e0b7363f9f52f2d6a988b8c0d565d34f5b", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "patch": "@@ -971,10 +971,15 @@ fn T_captured_tydescs(cx: @crate_ctxt, n: uint) -> TypeRef {\n \n fn T_opaque_trait(cx: @crate_ctxt, vstore: ty::vstore) -> TypeRef {\n     match vstore {\n-        ty::vstore_box =>\n-            T_struct(~[T_ptr(cx.tydesc_type), T_opaque_box_ptr(cx)]),\n-        _ =>\n-            T_struct(~[T_ptr(cx.tydesc_type), T_ptr(T_i8())])\n+        ty::vstore_box => {\n+            T_struct(~[T_ptr(cx.tydesc_type), T_opaque_box_ptr(cx)])\n+        }\n+        ty::vstore_uniq => {\n+            T_struct(~[T_ptr(cx.tydesc_type),\n+                       T_unique_ptr(T_unique(cx, T_i8())),\n+                       T_ptr(cx.tydesc_type)])\n+        }\n+        _ => T_struct(~[T_ptr(cx.tydesc_type), T_ptr(T_i8())])\n     }\n }\n "}, {"sha": "1bd44ee4bda638abb53f556d4d59ef2b7d1f4dec", "filename": "src/rustc/middle/trans/expr.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "patch": "@@ -614,7 +614,16 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n                                        DontAutorefArg);\n         }\n         ast::expr_cast(val, _) => {\n-            return meth::trans_trait_cast(bcx, val, expr.id, dest);\n+            match ty::get(node_id_type(bcx, expr.id)).sty {\n+                ty::ty_trait(_, _, vstore) => {\n+                    return meth::trans_trait_cast(bcx, val, expr.id, dest,\n+                                                  vstore);\n+                }\n+                _ => {\n+                    bcx.tcx().sess.span_bug(expr.span,\n+                                            ~\"expr_cast of non-trait\");\n+                }\n+            }\n         }\n         ast::expr_assign_op(op, dst, src) => {\n             return trans_assign_op(bcx, expr, op, dst, src);"}, {"sha": "76d5770ac3d27ee62913c7ef89c62da8c09ea53d", "filename": "src/rustc/middle/trans/glue.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "patch": "@@ -482,7 +482,11 @@ fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n         decr_refcnt_maybe_free(bcx, llbox, ty::mk_opaque_box(ccx.tcx))\n       }\n       ty::ty_trait(_, _, ty::vstore_uniq) => {\n-        ccx.tcx.sess.unimpl(~\"drop of unique trait\");\n+        let lluniquevalue = GEPi(bcx, v0, [0, 1]);\n+        let lltydesc = Load(bcx, GEPi(bcx, v0, [0, 2]));\n+        call_tydesc_glue_full(bcx, lluniquevalue, lltydesc,\n+                              abi::tydesc_field_free_glue, None);\n+        bcx\n       }\n       ty::ty_opaque_closure_ptr(ck) => {\n         closure::make_opaque_cbox_drop_glue(bcx, ck, v0)\n@@ -536,11 +540,18 @@ fn make_take_glue(bcx: block, v: ValueRef, t: ty::t) {\n       ty::ty_fn(_) => {\n         closure::make_fn_glue(bcx, v, t, take_ty)\n       }\n-      ty::ty_trait(_, _, _) => {\n+      ty::ty_trait(_, _, ty::vstore_box) => {\n         let llbox = Load(bcx, GEPi(bcx, v, [0u, 1u]));\n         incr_refcnt_of_boxed(bcx, llbox);\n         bcx\n       }\n+      ty::ty_trait(_, _, ty::vstore_uniq) => {\n+        let llval = GEPi(bcx, v, [0, 1]);\n+        let lltydesc = Load(bcx, GEPi(bcx, v, [0, 2]));\n+        call_tydesc_glue_full(bcx, llval, lltydesc,\n+                              abi::tydesc_field_take_glue, None);\n+        bcx\n+      }\n       ty::ty_opaque_closure_ptr(ck) => {\n         closure::make_opaque_cbox_take_glue(bcx, ck, v)\n       }"}, {"sha": "ea85453a445b6436e669917405cc8e5bd5b77fea", "filename": "src/rustc/middle/trans/meth.rs", "status": "modified", "additions": 48, "deletions": 18, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "patch": "@@ -650,7 +650,8 @@ fn make_impl_vtable(ccx: @crate_ctxt, impl_id: ast::def_id, substs: ~[ty::t],\n fn trans_trait_cast(bcx: block,\n                     val: @ast::expr,\n                     id: ast::node_id,\n-                    dest: expr::Dest)\n+                    dest: expr::Dest,\n+                    vstore: ty::vstore)\n     -> block\n {\n     let mut bcx = bcx;\n@@ -666,25 +667,54 @@ fn trans_trait_cast(bcx: block,\n     let ccx = bcx.ccx();\n     let v_ty = expr_ty(bcx, val);\n \n-    let mut llboxdest = GEPi(bcx, lldest, [0u, 1u]);\n-    if bcx.tcx().legacy_boxed_traits.contains_key(id) {\n-        // Allocate an @ box and store the value into it\n-        let {bcx: new_bcx, box: llbox, body: body} = malloc_boxed(bcx, v_ty);\n-        bcx = new_bcx;\n-        add_clean_free(bcx, llbox, heap_shared);\n-        bcx = expr::trans_into(bcx, val, SaveIn(body));\n-        revoke_clean(bcx, llbox);\n-\n-        // Store the @ box into the pair\n-        Store(bcx, llbox, PointerCast(bcx, llboxdest, T_ptr(val_ty(llbox))));\n-    } else {\n-        // Just store the @ box into the pair.\n-        llboxdest = PointerCast(bcx, llboxdest,\n-                                T_ptr(type_of::type_of(bcx.ccx(), v_ty)));\n-        bcx = expr::trans_into(bcx, val, SaveIn(llboxdest));\n+    match vstore {\n+        ty::vstore_slice(*) | ty::vstore_box => {\n+            let mut llboxdest = GEPi(bcx, lldest, [0u, 1u]);\n+            if bcx.tcx().legacy_boxed_traits.contains_key(id) {\n+                // Allocate an @ box and store the value into it\n+                let {bcx: new_bcx, box: llbox, body: body} =\n+                    malloc_boxed(bcx, v_ty);\n+                bcx = new_bcx;\n+                add_clean_free(bcx, llbox, heap_shared);\n+                bcx = expr::trans_into(bcx, val, SaveIn(body));\n+                revoke_clean(bcx, llbox);\n+\n+                // Store the @ box into the pair\n+                Store(bcx, llbox, PointerCast(bcx,\n+                                              llboxdest,\n+                                              T_ptr(val_ty(llbox))));\n+            } else {\n+                // Just store the pointer into the pair.\n+                llboxdest = PointerCast(bcx,\n+                                        llboxdest,\n+                                        T_ptr(type_of::type_of(bcx.ccx(),\n+                                                               v_ty)));\n+                bcx = expr::trans_into(bcx, val, SaveIn(llboxdest));\n+            }\n+        }\n+        ty::vstore_uniq => {\n+            // Translate the uniquely-owned value into the second element of\n+            // the triple. (The first element is the vtable.)\n+            let mut llvaldest = GEPi(bcx, lldest, [0, 1]);\n+            llvaldest = PointerCast(bcx,\n+                                    llvaldest,\n+                                    T_ptr(type_of::type_of(bcx.ccx(), v_ty)));\n+            bcx = expr::trans_into(bcx, val, SaveIn(llvaldest));\n+\n+            // Get the type descriptor of the wrapped value and store it into\n+            // the third element of the triple as well.\n+            let tydesc = get_tydesc(bcx.ccx(), v_ty);\n+            glue::lazily_emit_all_tydesc_glue(bcx.ccx(), tydesc);\n+            let lltydescdest = GEPi(bcx, lldest, [0, 2]);\n+            Store(bcx, tydesc.tydesc, lltydescdest);\n+        }\n+        _ => {\n+            bcx.tcx().sess.span_bug(val.span, ~\"unexpected vstore in \\\n+                                                trans_trait_cast\");\n+        }\n     }\n \n-    // Store the vtable into the pair\n+    // Store the vtable into the pair or triple.\n     let orig = ccx.maps.vtable_map.get(id)[0];\n     let orig = resolve_vtable_in_fn_ctxt(bcx.fcx, orig);\n     let vtable = get_vtable(bcx.ccx(), orig);"}, {"sha": "d793955e447dcaa8d48cad9678c6cce0fe36c4cd", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "patch": "@@ -190,13 +190,14 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n                 match ty::get(result.ty).sty {\n                     ty::ty_trait(trait_def_id, substs, _) => {\n                         match vst {\n-                            ty::vstore_box | ty::vstore_slice(*) => {}\n+                            ty::vstore_box | ty::vstore_slice(*) |\n+                            ty::vstore_uniq => {}\n                             _ => {\n-                                tcx.sess.span_unimpl(path.span,\n-                                                     ~\"`~trait` is \\\n-                                                       unimplemented; use \\\n-                                                       `@trait` instead for \\\n-                                                       now\");\n+                                tcx.sess.span_err(path.span,\n+                                                  ~\"@trait, ~trait or &trait \\\n+                                                    are the only supported \\\n+                                                    forms of casting-to-\\\n+                                                    trait\");\n                             }\n                         }\n                         return ty::mk_trait(tcx, trait_def_id, substs, vst);"}, {"sha": "b6f51b4b2c7445548929ff8297e0804723c115db", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "patch": "@@ -540,14 +540,18 @@ fn early_resolve_expr(ex: @ast::expr, &&fcx: @fn_ctxt, is_early: bool) {\n                 None => {\n                     // Try the new-style boxed trait; \"@int as @Trait\".\n                     // Or the new-style region trait; \"&int as &Trait\".\n+                    // Or the new-style uniquely-owned trait; \"~int as\n+                    // ~Trait\".\n                     let mut err = false;\n                     let ty = structurally_resolved_type(fcx, ex.span, ty);\n                     match ty::get(ty).sty {\n-                        ty::ty_box(mt) | ty::ty_rptr(_, mt) => {\n+                        ty::ty_box(mt) | ty::ty_rptr(_, mt) |\n+                        ty::ty_uniq(mt) => {\n                             // Ensure that the trait vstore and the pointer\n                             // type match.\n                             match (ty::get(ty).sty, vstore) {\n                                 (ty::ty_box(_), ty::vstore_box) |\n+                                (ty::ty_uniq(_), ty::vstore_uniq) |\n                                 (ty::ty_rptr(*), ty::vstore_slice(*)) => {\n                                     let vtable_opt =\n                                         lookup_vtable_invariant(fcx,\n@@ -600,6 +604,14 @@ fn early_resolve_expr(ex: @ast::expr, &&fcx: @fn_ctxt, is_early: bool) {\n                                                                 a borrowed \\\n                                                                 trait\");\n                                 }\n+                                (ty::ty_uniq(*), _) => {\n+                                    fcx.ccx.tcx.sess.span_err(ex.span,\n+                                                              ~\"must cast \\\n+                                                                a unique \\\n+                                                                pointer to \\\n+                                                                a uniquely-\\\n+                                                                owned trait\");\n+                                }\n                                 _ => {\n                                     fcx.ccx.tcx.sess.impossible_case(\n                                         ex.span,"}, {"sha": "2d4c391841bf44b14316182181e67a61e4a1015d", "filename": "src/test/compile-fail/unique-object-noncopyable.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs?ref=0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "patch": "@@ -0,0 +1,21 @@\n+trait Foo {\n+    fn f();\n+}\n+\n+struct Bar {\n+    x: int,\n+    drop {}\n+}\n+\n+impl Bar : Foo {\n+    fn f() {\n+        io::println(\"hi\");\n+    }\n+}\n+\n+fn main() {\n+    let x = ~Bar { x: 10 };\n+    let y = (move x) as ~Foo;   //~ ERROR uniquely-owned trait objects must be copyable\n+    let _z = copy y;\n+}\n+"}, {"sha": "952ecde35d1851db71d0f16e50eba1c2ef1bb131", "filename": "src/test/run-pass/unique-object.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Ftest%2Frun-pass%2Funique-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2e6fda73918784ad2512c96c9b2f4787bbd72b/src%2Ftest%2Frun-pass%2Funique-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-object.rs?ref=0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "patch": "@@ -0,0 +1,22 @@\n+trait Foo {\n+    fn f();\n+}\n+\n+struct Bar {\n+    x: int\n+}\n+\n+impl Bar : Foo {\n+    fn f() {\n+        io::println(\"hi\");\n+    }\n+}\n+\n+fn main() {\n+    let x = ~Bar { x: 10 };\n+    let y = x as ~Foo;\n+    let z = copy y;\n+    y.f();\n+    z.f();\n+}\n+"}]}