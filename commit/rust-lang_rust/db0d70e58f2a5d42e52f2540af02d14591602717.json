{"sha": "db0d70e58f2a5d42e52f2540af02d14591602717", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMGQ3MGU1OGYyYTVkNDJlNTJmMjU0MGFmMDJkMTQ1OTE2MDI3MTc=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-05-04T18:25:54Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-06-19T20:54:29Z"}, "message": "Refactor `try_find` a little\n\nThe `E` type parameter was unnecessary, so it's now removed. The folding\nclosure now has reduced parametricity on just `T = Self::Item`, rather\nthan the whole `Self` iterator type. There's otherwise no functional\nchange in this.", "tree": {"sha": "1104273485cea01636b842f621b7b21efef4ff2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1104273485cea01636b842f621b7b21efef4ff2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db0d70e58f2a5d42e52f2540af02d14591602717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db0d70e58f2a5d42e52f2540af02d14591602717", "html_url": "https://github.com/rust-lang/rust/commit/db0d70e58f2a5d42e52f2540af02d14591602717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db0d70e58f2a5d42e52f2540af02d14591602717/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72417d84fb51495a4f1d007fb2397a0b2609ab63", "url": "https://api.github.com/repos/rust-lang/rust/commits/72417d84fb51495a4f1d007fb2397a0b2609ab63", "html_url": "https://github.com/rust-lang/rust/commit/72417d84fb51495a4f1d007fb2397a0b2609ab63"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "530cf881f29da54dc8bede98ea50bcfdc3b696a5", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/db0d70e58f2a5d42e52f2540af02d14591602717/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0d70e58f2a5d42e52f2540af02d14591602717/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=db0d70e58f2a5d42e52f2540af02d14591602717", "patch": "@@ -2265,7 +2265,7 @@ pub trait Iterator {\n     }\n \n     /// Applies function to the elements of iterator and returns\n-    /// the first non-none result or the first error.\n+    /// the first true result or the first error.\n     ///\n     /// # Examples\n     ///\n@@ -2286,19 +2286,26 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]\n-    fn try_find<F, E, R>(&mut self, mut f: F) -> Result<Option<Self::Item>, E>\n+    fn try_find<F, R>(&mut self, f: F) -> Result<Option<Self::Item>, R::Error>\n     where\n         Self: Sized,\n         F: FnMut(&Self::Item) -> R,\n-        R: Try<Ok = bool, Error = E>,\n-    {\n-        self.try_fold((), move |(), x| match f(&x).into_result() {\n-            Ok(false) => LoopState::Continue(()),\n-            Ok(true) => LoopState::Break(Ok(x)),\n-            Err(x) => LoopState::Break(Err(x)),\n-        })\n-        .break_value()\n-        .transpose()\n+        R: Try<Ok = bool>,\n+    {\n+        #[inline]\n+        fn check<F, T, R>(mut f: F) -> impl FnMut((), T) -> LoopState<(), Result<T, R::Error>>\n+        where\n+            F: FnMut(&T) -> R,\n+            R: Try<Ok = bool>,\n+        {\n+            move |(), x| match f(&x).into_result() {\n+                Ok(false) => LoopState::Continue(()),\n+                Ok(true) => LoopState::Break(Ok(x)),\n+                Err(x) => LoopState::Break(Err(x)),\n+            }\n+        }\n+\n+        self.try_fold((), check(f)).break_value().transpose()\n     }\n \n     /// Searches for an element in an iterator, returning its index."}]}