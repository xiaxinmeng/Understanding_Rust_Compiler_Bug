{"sha": "c3e8d7965ccef7fe47db591ae0064af0034e3f25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZThkNzk2NWNjZWY3ZmU0N2RiNTkxYWUwMDY0YWYwMDM0ZTNmMjU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-09-21T20:55:58Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-16T18:15:30Z"}, "message": "Parse inline const expressions", "tree": {"sha": "922d26cccff89f11700bd96e7ca4f6289924f48e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/922d26cccff89f11700bd96e7ca4f6289924f48e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3e8d7965ccef7fe47db591ae0064af0034e3f25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl+J40MACgkQgTGiTgx5\n7684fg/8CEtslBOHJuWjk0gifdnuaGq1rLhP2pdNJmRyVXPO8b0/AN8YH3T+VpPn\nPmgbxk5XG4yb7MKIygdxZ6M6918kovzY69KiEbxBwAhfldRuQpNjirHW81RLM4l8\nHHyzatgQPJvIaMWix+SkEQNpjxXf7XRMzo6QK1bvyrMQjbVmjrFDh1V/TKVLssrI\nHmS4aHdux4fYBiZUbkJV7R11n4QtWFNRFWHb4s5M5AKBMX2vGY3zCfUmYdN3Apah\nzmC0aZdtCZJCPNJq+6r5+fJb4I07Sui+J1pfbwPPOiovOAXEo603toYntjPKRpnZ\nXkZrPEw0z7fclPQnW66fJMk1nHcPFEvi1xkA1oqMonbtRBqSo+TGnipIp1HRYxwU\n+obCubO8oxcX3+f24gjihnfA95JCOvrTQYT6YCc8hfmGJSl9ZdvB3auouL1zEkyl\nP+GFF++wloERI719CFaQhyZQQax1JXPWLwCB1z3K3xynuJRrCan0BcMiMtbPkjjO\n61I6gSoU40mOoCnFyw2cdnA1J17I1DgXSSAhRyYAQAqV99eWo+r0NPzHc6omV+HC\n6C8BmQJxLS0EDyp860M5Aa8NN1k43BesUddLEUCTH6vL385fEP8+NSNwVQD9WWaA\nTD2VjUzqdAynkK46GN0uAPDMlRvKef7vy/iKeOgiU9EjrfPdLrQ=\n=cJot\n-----END PGP SIGNATURE-----", "payload": "tree 922d26cccff89f11700bd96e7ca4f6289924f48e\nparent 3c4ad5508242bd560d095f1380bb8d739a0cbba2\nauthor Santiago Pastorino <spastorino@gmail.com> 1600721758 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1602872130 -0300\n\nParse inline const expressions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e8d7965ccef7fe47db591ae0064af0034e3f25", "html_url": "https://github.com/rust-lang/rust/commit/c3e8d7965ccef7fe47db591ae0064af0034e3f25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3e8d7965ccef7fe47db591ae0064af0034e3f25/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c4ad5508242bd560d095f1380bb8d739a0cbba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4ad5508242bd560d095f1380bb8d739a0cbba2", "html_url": "https://github.com/rust-lang/rust/commit/3c4ad5508242bd560d095f1380bb8d739a0cbba2"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "ea84fc0095f766671190c0d9bc1e36064e1c6061", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=c3e8d7965ccef7fe47db591ae0064af0034e3f25", "patch": "@@ -1152,6 +1152,7 @@ impl Expr {\n         match self.kind {\n             ExprKind::Box(_) => ExprPrecedence::Box,\n             ExprKind::Array(_) => ExprPrecedence::Array,\n+            ExprKind::ConstBlock(_) => ExprPrecedence::ConstBlock,\n             ExprKind::Call(..) => ExprPrecedence::Call,\n             ExprKind::MethodCall(..) => ExprPrecedence::MethodCall,\n             ExprKind::Tup(_) => ExprPrecedence::Tup,\n@@ -1207,6 +1208,8 @@ pub enum ExprKind {\n     Box(P<Expr>),\n     /// An array (`[a, b, c, d]`)\n     Array(Vec<P<Expr>>),\n+    /// Allow anonymous constants from an inline `const` block\n+    ConstBlock(AnonConst),\n     /// A function call\n     ///\n     /// The first field resolves to the function itself,"}, {"sha": "382003c834ec91875056c2e31c10bb9d08d7aa7c", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=c3e8d7965ccef7fe47db591ae0064af0034e3f25", "patch": "@@ -1106,6 +1106,9 @@ pub fn noop_visit_expr<T: MutVisitor>(\n     match kind {\n         ExprKind::Box(expr) => vis.visit_expr(expr),\n         ExprKind::Array(exprs) => visit_exprs(exprs, vis),\n+        ExprKind::ConstBlock(anon_const) => {\n+            vis.visit_anon_const(anon_const);\n+        }\n         ExprKind::Repeat(expr, count) => {\n             vis.visit_expr(expr);\n             vis.visit_anon_const(count);"}, {"sha": "d991027cb45733d51cba7fcc6a2e42abc231c98c", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=c3e8d7965ccef7fe47db591ae0064af0034e3f25", "patch": "@@ -153,6 +153,7 @@ pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {\n             kw::Do,\n             kw::Box,\n             kw::Break,\n+            kw::Const,\n             kw::Continue,\n             kw::False,\n             kw::For,"}, {"sha": "078dd4bd6e60232ed7a118db39e4601d04faa702", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=c3e8d7965ccef7fe47db591ae0064af0034e3f25", "patch": "@@ -282,6 +282,7 @@ pub enum ExprPrecedence {\n     ForLoop,\n     Loop,\n     Match,\n+    ConstBlock,\n     Block,\n     TryBlock,\n     Struct,\n@@ -346,6 +347,7 @@ impl ExprPrecedence {\n             ExprPrecedence::ForLoop |\n             ExprPrecedence::Loop |\n             ExprPrecedence::Match |\n+            ExprPrecedence::ConstBlock |\n             ExprPrecedence::Block |\n             ExprPrecedence::TryBlock |\n             ExprPrecedence::Async |"}, {"sha": "3da078b760b5c66024cd1a7fccc600cb5f2fcc84", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=c3e8d7965ccef7fe47db591ae0064af0034e3f25", "patch": "@@ -717,6 +717,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Array(ref subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }\n+        ExprKind::ConstBlock(ref anon_const) => visitor.visit_anon_const(anon_const),\n         ExprKind::Repeat(ref element, ref count) => {\n             visitor.visit_expr(element);\n             visitor.visit_anon_const(count)"}, {"sha": "1841a06eb898addbb2a6c55e20301e383a32c3a7", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=c3e8d7965ccef7fe47db591ae0064af0034e3f25", "patch": "@@ -30,6 +30,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let kind = match e.kind {\n                 ExprKind::Box(ref inner) => hir::ExprKind::Box(self.lower_expr(inner)),\n                 ExprKind::Array(ref exprs) => hir::ExprKind::Array(self.lower_exprs(exprs)),\n+                ExprKind::ConstBlock(_) => {\n+                    unimplemented!();\n+                }\n                 ExprKind::Repeat(ref expr, ref count) => {\n                     let expr = self.lower_expr(expr);\n                     let count = self.lower_anon_const(count);"}, {"sha": "af8f813278047ffcbd778a7ea28d3096b9ee4868", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=c3e8d7965ccef7fe47db591ae0064af0034e3f25", "patch": "@@ -1714,6 +1714,14 @@ impl<'a> State<'a> {\n         self.end();\n     }\n \n+    fn print_expr_anon_const(&mut self, expr: &ast::AnonConst, attrs: &[ast::Attribute]) {\n+        self.ibox(INDENT_UNIT);\n+        self.s.word(\"const\");\n+        self.print_inner_attributes_inline(attrs);\n+        self.print_expr(&expr.value);\n+        self.end();\n+    }\n+\n     fn print_expr_repeat(\n         &mut self,\n         element: &ast::Expr,\n@@ -1890,6 +1898,9 @@ impl<'a> State<'a> {\n             ast::ExprKind::Array(ref exprs) => {\n                 self.print_expr_vec(&exprs[..], attrs);\n             }\n+            ast::ExprKind::ConstBlock(ref anon_const) => {\n+                self.print_expr_anon_const(anon_const, attrs);\n+            }\n             ast::ExprKind::Repeat(ref element, ref count) => {\n                 self.print_expr_repeat(element, count, attrs);\n             }"}, {"sha": "fb05f8791a505e4d82cadfe2666a257843e822c9", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=c3e8d7965ccef7fe47db591ae0064af0034e3f25", "patch": "@@ -1060,6 +1060,8 @@ impl<'a> Parser<'a> {\n             })\n         } else if self.eat_keyword(kw::Unsafe) {\n             self.parse_block_expr(None, lo, BlockCheckMode::Unsafe(ast::UserProvided), attrs)\n+        } else if self.check_inline_const() {\n+            self.parse_const_expr(lo.to(self.token.span))\n         } else if self.is_do_catch_block() {\n             self.recover_do_catch(attrs)\n         } else if self.is_try_block() {"}, {"sha": "7970ad36456d1d5cf7af984b8bac290e04bc3c3f", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e8d7965ccef7fe47db591ae0064af0034e3f25/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=c3e8d7965ccef7fe47db591ae0064af0034e3f25", "patch": "@@ -18,8 +18,9 @@ use rustc_ast::ptr::P;\n use rustc_ast::token::{self, DelimToken, Token, TokenKind};\n use rustc_ast::tokenstream::{self, DelimSpan, TokenStream, TokenTree, TreeAndSpacing};\n use rustc_ast::DUMMY_NODE_ID;\n-use rustc_ast::{self as ast, AttrStyle, AttrVec, Const, CrateSugar, Extern, Unsafe};\n-use rustc_ast::{Async, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n+use rustc_ast::{self as ast, AnonConst, AttrStyle, AttrVec, Const, CrateSugar, Extern, Unsafe};\n+use rustc_ast::{Async, Expr, ExprKind, MacArgs, MacDelimiter, Mutability, StrLit};\n+use rustc_ast::{Visibility, VisibilityKind};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_session::parse::ParseSess;\n@@ -545,6 +546,11 @@ impl<'a> Parser<'a> {\n         self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)\n     }\n \n+    fn check_inline_const(&mut self) -> bool {\n+        self.check_keyword(kw::Const)\n+            && self.look_ahead(1, |t| t == &token::OpenDelim(DelimToken::Brace))\n+    }\n+\n     /// Checks to see if the next token is either `+` or `+=`.\n     /// Otherwise returns `false`.\n     fn check_plus(&mut self) -> bool {\n@@ -864,13 +870,28 @@ impl<'a> Parser<'a> {\n \n     /// Parses constness: `const` or nothing.\n     fn parse_constness(&mut self) -> Const {\n-        if self.eat_keyword(kw::Const) {\n+        // Avoid const blocks to be parsed as const items\n+        if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))\n+            && self.eat_keyword(kw::Const)\n+        {\n             Const::Yes(self.prev_token.uninterpolated_span())\n         } else {\n             Const::No\n         }\n     }\n \n+    /// Parses inline const expressions.\n+    fn parse_const_expr(&mut self, span: Span) -> PResult<'a, P<Expr>> {\n+        self.sess.gated_spans.gate(sym::inline_const, span);\n+        self.eat_keyword(kw::Const);\n+        let blk = self.parse_block()?;\n+        let anon_const = AnonConst {\n+            id: DUMMY_NODE_ID,\n+            value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),\n+        };\n+        Ok(self.mk_expr(span, ExprKind::ConstBlock(anon_const), AttrVec::new()))\n+    }\n+\n     /// Parses mutability (`mut` or nothing).\n     fn parse_mutability(&mut self) -> Mutability {\n         if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }"}, {"sha": "5319db3482dd9eb76bb5c6555656c18511deb879", "filename": "src/test/ui/parser/inline_const/const_expr_parses.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3e8d7965ccef7fe47db591ae0064af0034e3f25/src%2Ftest%2Fui%2Fparser%2Finline_const%2Fconst_expr_parses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e8d7965ccef7fe47db591ae0064af0034e3f25/src%2Ftest%2Fui%2Fparser%2Finline_const%2Fconst_expr_parses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finline_const%2Fconst_expr_parses.rs?ref=c3e8d7965ccef7fe47db591ae0064af0034e3f25", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+// compile-flags: -Z parse-only\n+\n+#![feature(inline_const)]\n+fn foo() -> i32 {\n+    const {\n+        let x = 5 + 10;\n+        x / 3\n+    }\n+}"}]}