{"sha": "73814654b29604ded9dff105e4156639980d2f2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczODE0NjU0YjI5NjA0ZGVkOWRmZjEwNWU0MTU2NjM5OTgwZDJmMmM=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-04T20:20:21Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-22T10:36:30Z"}, "message": "Move promoted out of mir::Body", "tree": {"sha": "3c76c796f8a69392e7740a8b4719fc4846e4b52f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c76c796f8a69392e7740a8b4719fc4846e4b52f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73814654b29604ded9dff105e4156639980d2f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73814654b29604ded9dff105e4156639980d2f2c", "html_url": "https://github.com/rust-lang/rust/commit/73814654b29604ded9dff105e4156639980d2f2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73814654b29604ded9dff105e4156639980d2f2c/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "666180c3242169fa40ec462617e96ebf831fc62d", "url": "https://api.github.com/repos/rust-lang/rust/commits/666180c3242169fa40ec462617e96ebf831fc62d", "html_url": "https://github.com/rust-lang/rust/commit/666180c3242169fa40ec462617e96ebf831fc62d"}], "stats": {"total": 379, "additions": 253, "deletions": 126}, "files": [{"sha": "a38dbbdd50c57b8d116dc6811a84af780ce1e258", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -25,6 +25,16 @@ macro_rules! arena_types {\n             [] adt_def: rustc::ty::AdtDef,\n             [] steal_mir: rustc::ty::steal::Steal<rustc::mir::Body<$tcx>>,\n             [] mir: rustc::mir::Body<$tcx>,\n+            [] steal_promoted: rustc::ty::steal::Steal<\n+                rustc_data_structures::indexed_vec::IndexVec<\n+                    rustc::mir::Promoted,\n+                    rustc::mir::Body<$tcx>\n+                >\n+            >,\n+            [] promoted: rustc_data_structures::indexed_vec::IndexVec<\n+                rustc::mir::Promoted,\n+                rustc::mir::Body<$tcx>\n+            >,\n             [] tables: rustc::ty::TypeckTables<$tcx>,\n             [] const_allocs: rustc::mir::interpret::Allocation,\n             [] vtable_method: Option<("}, {"sha": "66f5eaeeda1c77f559f1f45d583f8714a69e84c3", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -108,11 +108,6 @@ pub struct Body<'tcx> {\n     /// needn't) be tracked across crates.\n     pub source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n \n-    /// Rvalues promoted from this function, such as borrows of constants.\n-    /// Each of them is the Body of a constant with the fn's type parameters\n-    /// in scope, but a separate set of locals.\n-    pub promoted: IndexVec<Promoted, Body<'tcx>>,\n-\n     /// Yields type of the function, if it is a generator.\n     pub yield_ty: Option<Ty<'tcx>>,\n \n@@ -174,7 +169,6 @@ impl<'tcx> Body<'tcx> {\n         basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n         source_scopes: IndexVec<SourceScope, SourceScopeData>,\n         source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n-        promoted: IndexVec<Promoted, Body<'tcx>>,\n         yield_ty: Option<Ty<'tcx>>,\n         local_decls: LocalDecls<'tcx>,\n         user_type_annotations: CanonicalUserTypeAnnotations<'tcx>,\n@@ -196,7 +190,6 @@ impl<'tcx> Body<'tcx> {\n             basic_blocks,\n             source_scopes,\n             source_scope_local_data,\n-            promoted,\n             yield_ty,\n             generator_drop: None,\n             generator_layout: None,\n@@ -418,7 +411,6 @@ impl_stable_hash_for!(struct Body<'tcx> {\n     basic_blocks,\n     source_scopes,\n     source_scope_local_data,\n-    promoted,\n     yield_ty,\n     generator_drop,\n     generator_layout,\n@@ -3032,7 +3024,6 @@ BraceStructTypeFoldableImpl! {\n         basic_blocks,\n         source_scopes,\n         source_scope_local_data,\n-        promoted,\n         yield_ty,\n         generator_drop,\n         generator_layout,"}, {"sha": "e1dbaeb5b173db922a0faa5376a0aa5c4c9879b2", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -110,7 +110,7 @@ rustc_queries! {\n             no_hash\n         }\n \n-        query mir_validated(_: DefId) -> &'tcx Steal<mir::Body<'tcx>> {\n+        query mir_validated(_: DefId) -> (&'tcx Steal<mir::Body<'tcx>>, &'tcx Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>) {\n             no_hash\n         }\n \n@@ -125,7 +125,17 @@ rustc_queries! {\n             }\n         }\n \n-        query promoted_mir(key: DefId) -> &'tcx IndexVec<mir::Promoted, mir::Body<'tcx>> { }\n+        query promoted_mir(key: DefId) -> &'tcx IndexVec<mir::Promoted, mir::Body<'tcx>> {\n+            cache_on_disk_if { key.is_local() }\n+            load_cached(tcx, id) {\n+                let promoted: Option<\n+                    rustc_data_structures::indexed_vec::IndexVec<\n+                        crate::mir::Promoted,\n+                        crate::mir::Body<'tcx>\n+                    >> = tcx.queries.on_disk_cache.try_load_query_result(tcx, id);\n+                promoted.map(|p| &*tcx.arena.alloc(p))\n+            }\n+        }\n     }\n \n     TypeChecking {"}, {"sha": "9f316e93111a35da5d4e0a1c71f9e5c44bdc9c59", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -21,7 +21,7 @@ use crate::middle::cstore::EncodedMetadata;\n use crate::middle::lang_items;\n use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use crate::middle::stability;\n-use crate::mir::{Body, interpret, ProjectionKind};\n+use crate::mir::{Body, interpret, ProjectionKind, Promoted};\n use crate::mir::interpret::{ConstValue, Allocation, Scalar};\n use crate::ty::subst::{Kind, InternalSubsts, SubstsRef, Subst};\n use crate::ty::ReprOptions;\n@@ -1096,6 +1096,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.arena.alloc(Steal::new(mir))\n     }\n \n+    pub fn alloc_steal_promoted(self, promoted: IndexVec<Promoted, Body<'tcx>>) ->\n+        &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {\n+        self.arena.alloc(Steal::new(promoted))\n+    }\n+\n+    pub fn intern_promoted(self, promoted: IndexVec<Promoted, Body<'tcx>>) ->\n+        &'tcx IndexVec<Promoted, Body<'tcx>> {\n+        self.arena.alloc(promoted)\n+    }\n+\n     pub fn alloc_adt_def(\n         self,\n         did: DefId,"}, {"sha": "7aeeef00ea9349885e112111dc1d896d861bec4c", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -136,6 +136,15 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n         mir\n     }\n+    promoted_mir => {\n+        let promoted = cdata.maybe_get_promoted_mir(tcx, def_id.index).unwrap_or_else(|| {\n+            bug!(\"get_promoted_mir: missing promoted MIR for `{:?}`\", def_id)\n+        });\n+\n+        let promoted = tcx.arena.alloc(promoted);\n+\n+        promoted\n+    }\n     mir_const_qualif => {\n         (cdata.mir_const_qualif(def_id.index), tcx.arena.alloc(BitSet::new_empty(0)))\n     }"}, {"sha": "128e30be79929ea2511369b15d5e0e71344a7465", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -3,6 +3,7 @@\n use crate::cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary, ForeignModule, FullProcMacro};\n use crate::schema::*;\n \n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::{Lrc, ReadGuard};\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc::hir;\n@@ -17,7 +18,7 @@ use rustc::mir::interpret::AllocDecodingSession;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::codec::TyDecoder;\n-use rustc::mir::Body;\n+use rustc::mir::{Body, Promoted};\n use rustc::util::captures::Captures;\n \n use std::io;\n@@ -923,6 +924,13 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n+    pub fn maybe_get_promoted_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Option<IndexVec<Promoted, Body<'tcx>>> {\n+        match self.is_proc_macro(id) {\n+            true => None,\n+            false => self.entry(id).promoted_mir.map(|promoted| promoted.decode((self, tcx)),)\n+        }\n+    }\n+\n     pub fn mir_const_qualif(&self, id: DefIndex) -> u8 {\n         match self.entry(id).kind {\n             EntryKind::Const(qualif, _) |"}, {"sha": "f3863fd788ae00f85a20204173334147923a6120", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 40, "deletions": 24, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -8,6 +8,7 @@ use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LocalDefId,\n use rustc::hir::GenericParamKind;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel,\n                                       metadata_symbol_name};\n@@ -623,6 +624,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n+            promoted_mir: self.encode_promoted_mir(def_id),\n         }\n     }\n \n@@ -677,6 +679,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n+            promoted_mir: self.encode_promoted_mir(def_id),\n         }\n     }\n \n@@ -713,7 +716,8 @@ impl EncodeContext<'tcx> {\n             predicates: None,\n             predicates_defined_on: None,\n \n-            mir: None\n+            mir: None,\n+            promoted_mir: None,\n         }\n     }\n \n@@ -748,6 +752,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: None,\n+            promoted_mir: None,\n         }\n     }\n \n@@ -808,6 +813,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n+            promoted_mir: self.encode_promoted_mir(def_id),\n         }\n     }\n \n@@ -923,6 +929,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n+            promoted_mir: self.encode_promoted_mir(def_id),\n         }\n     }\n \n@@ -1022,6 +1029,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: if mir { self.encode_optimized_mir(def_id) } else { None },\n+            promoted_mir: if mir { self.encode_promoted_mir(def_id) } else { None },\n         }\n     }\n \n@@ -1052,6 +1060,16 @@ impl EncodeContext<'tcx> {\n         }\n     }\n \n+    fn encode_promoted_mir(&mut self, def_id: DefId) -> Option<Lazy<IndexVec<mir::Promoted, mir::Body<'tcx>>>> {\n+        debug!(\"EncodeContext::encode_promoted_mir({:?})\", def_id);\n+        if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n+            let promoted = self.tcx.promoted_mir(def_id);\n+            Some(self.lazy(promoted))\n+        } else {\n+            None\n+        }\n+    }\n+\n     // Encodes the inherent implementations of a structure, enumeration, or trait.\n     fn encode_inherent_implementations(&mut self, def_id: DefId) -> Lazy<[DefIndex]> {\n         debug!(\"EncodeContext::encode_inherent_implementations({:?})\", def_id);\n@@ -1202,6 +1220,20 @@ impl EncodeContext<'tcx> {\n             hir::ItemKind::Use(..) => bug!(\"cannot encode info for item {:?}\", item),\n         };\n \n+        let mir = match item.node {\n+            hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => true,\n+            hir::ItemKind::Fn(_, header, ..) => {\n+                let generics = tcx.generics_of(def_id);\n+                let needs_inline =\n+                    (generics.requires_monomorphization(tcx) ||\n+                        tcx.codegen_fn_attrs(def_id).requests_inline()) &&\n+                        !self.metadata_output_only();\n+                let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n+                needs_inline || header.constness == hir::Constness::Const || always_encode_mir\n+            }\n+            _ => false,\n+        };\n+\n         Entry {\n             kind,\n             visibility: self.lazy(ty::Visibility::from_hir(&item.vis, item.hir_id, tcx)),\n@@ -1301,29 +1333,8 @@ impl EncodeContext<'tcx> {\n                 _ => None, // not *wrong* for other kinds of items, but not needed\n             },\n \n-            mir: match item.node {\n-                hir::ItemKind::Static(..) => {\n-                    self.encode_optimized_mir(def_id)\n-                }\n-                hir::ItemKind::Const(..) => self.encode_optimized_mir(def_id),\n-                hir::ItemKind::Fn(_, header, ..) => {\n-                    let generics = tcx.generics_of(def_id);\n-                    let needs_inline =\n-                        (generics.requires_monomorphization(tcx) ||\n-                         tcx.codegen_fn_attrs(def_id).requests_inline()) &&\n-                            !self.metadata_output_only();\n-                    let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                    if needs_inline\n-                        || header.constness == hir::Constness::Const\n-                        || always_encode_mir\n-                    {\n-                        self.encode_optimized_mir(def_id)\n-                    } else {\n-                        None\n-                    }\n-                }\n-                _ => None,\n-            },\n+            mir: if mir { self.encode_optimized_mir(def_id) } else { None },\n+            promoted_mir: if mir { self.encode_promoted_mir(def_id) } else { None },\n         }\n     }\n \n@@ -1350,6 +1361,7 @@ impl EncodeContext<'tcx> {\n             predicates: None,\n             predicates_defined_on: None,\n             mir: None,\n+            promoted_mir: None,\n         }\n     }\n \n@@ -1376,6 +1388,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: None,\n+            promoted_mir: None,\n         }\n     }\n \n@@ -1436,6 +1449,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n+            promoted_mir: self.encode_promoted_mir(def_id),\n         }\n     }\n \n@@ -1464,6 +1478,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n+            promoted_mir: self.encode_promoted_mir(def_id),\n         }\n     }\n \n@@ -1675,6 +1690,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: None,\n+            promoted_mir: None,\n         }\n     }\n }"}, {"sha": "72a4b527c93d0e36802d7835ef00264dd3593333", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -11,6 +11,7 @@ use rustc::session::CrateDisambiguator;\n use rustc::session::config::SymbolManglingVersion;\n use rustc::ty::{self, Ty, ReprOptions};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::svh::Svh;\n \n use syntax::{ast, attr};\n@@ -231,6 +232,7 @@ pub struct Entry<'tcx> {\n     pub predicates_defined_on: Option<Lazy<ty::GenericPredicates<'tcx>>>,\n \n     pub mir: Option<Lazy<mir::Body<'tcx>>>,\n+    pub promoted_mir: Option<Lazy<IndexVec<mir::Promoted, mir::Body<'tcx>>>>,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "05b396681ac06cee643d41b632758fe9f5357ee9", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -13,7 +13,7 @@ use rustc::mir::{\n     ClearCrossCrate, Local, Location, Body, Mutability, Operand, Place, PlaceBase, PlaceRef,\n     Static, StaticKind\n };\n-use rustc::mir::{Field, Projection, ProjectionElem, Rvalue, Statement, StatementKind};\n+use rustc::mir::{Field, Projection, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n use rustc::mir::{Terminator, TerminatorKind};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n@@ -22,6 +22,7 @@ use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, Level};\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n+use rustc_data_structures::indexed_vec::IndexVec;\n use smallvec::SmallVec;\n \n use std::collections::BTreeMap;\n@@ -86,12 +87,13 @@ pub fn provide(providers: &mut Providers<'_>) {\n }\n \n fn mir_borrowck(tcx: TyCtxt<'_>, def_id: DefId) -> BorrowCheckResult<'_> {\n-    let input_body = tcx.mir_validated(def_id);\n+    let (input_body, promoted) = tcx.mir_validated(def_id);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id));\n \n     let opt_closure_req = tcx.infer_ctxt().enter(|infcx| {\n         let input_body: &Body<'_> = &input_body.borrow();\n-        do_mir_borrowck(&infcx, input_body, def_id)\n+        let promoted: &IndexVec<_, _> = &promoted.borrow();\n+        do_mir_borrowck(&infcx, input_body, promoted, def_id)\n     });\n     debug!(\"mir_borrowck done\");\n \n@@ -101,6 +103,7 @@ fn mir_borrowck(tcx: TyCtxt<'_>, def_id: DefId) -> BorrowCheckResult<'_> {\n fn do_mir_borrowck<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     input_body: &Body<'tcx>,\n+    input_promoted: &IndexVec<Promoted, Body<'tcx>>,\n     def_id: DefId,\n ) -> BorrowCheckResult<'tcx> {\n     debug!(\"do_mir_borrowck(def_id = {:?})\", def_id);\n@@ -147,7 +150,8 @@ fn do_mir_borrowck<'a, 'tcx>(\n     // be modified (in place) to contain non-lexical lifetimes. It\n     // will have a lifetime tied to the inference context.\n     let mut body: Body<'tcx> = input_body.clone();\n-    let free_regions = nll::replace_regions_in_mir(infcx, def_id, param_env, &mut body);\n+    let mut promoted: IndexVec<Promoted, Body<'tcx>> = input_promoted.clone();\n+    let free_regions = nll::replace_regions_in_mir(infcx, def_id, param_env, &mut body, &mut promoted);\n     let body = &body; // no further changes\n     let location_table = &LocationTable::new(body);\n \n@@ -184,6 +188,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         def_id,\n         free_regions,\n         body,\n+        &promoted,\n         &upvars,\n         location_table,\n         param_env,"}, {"sha": "11ec154e5b5c13a769014998c101cc164a34f26d", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -11,8 +11,9 @@ use crate::transform::MirSource;\n use crate::borrow_check::Upvar;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n-use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Local, Body};\n+use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Local, Body, Promoted};\n use rustc::ty::{self, RegionKind, RegionVid};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::Diagnostic;\n use std::fmt::Debug;\n use std::env;\n@@ -52,14 +53,15 @@ pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n     def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n+    promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n ) -> UniversalRegions<'tcx> {\n     debug!(\"replace_regions_in_mir(def_id={:?})\", def_id);\n \n     // Compute named region information. This also renumbers the inputs/outputs.\n     let universal_regions = UniversalRegions::new(infcx, def_id, param_env);\n \n     // Replace all remaining regions with fresh inference variables.\n-    renumber::renumber_mir(infcx, body);\n+    renumber::renumber_mir(infcx, body, promoted);\n \n     let source = MirSource::item(def_id);\n     mir_util::dump_mir(infcx.tcx, None, \"renumber\", &0, source, body, |_, _| Ok(()));\n@@ -75,6 +77,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     def_id: DefId,\n     universal_regions: UniversalRegions<'tcx>,\n     body: &Body<'tcx>,\n+    promoted: &IndexVec<Promoted, Body<'tcx>>,\n     upvars: &[Upvar],\n     location_table: &LocationTable,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -105,6 +108,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         infcx,\n         param_env,\n         body,\n+        promoted,\n         def_id,\n         &universal_regions,\n         location_table,"}, {"sha": "4e3ffb7af1601ef3cafae108911bb81f285039f2", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -1,16 +1,18 @@\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable};\n-use rustc::mir::{Location, Body};\n+use rustc::mir::{Location, Body, Promoted};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n+use rustc_data_structures::indexed_vec::IndexVec;\n \n /// Replaces all free regions appearing in the MIR with fresh\n /// inference variables, returning the number of variables created.\n-pub fn renumber_mir<'tcx>(infcx: &InferCtxt<'_, 'tcx>, body: &mut Body<'tcx>) {\n+pub fn renumber_mir<'tcx>(infcx: &InferCtxt<'_, 'tcx>, body: &mut Body<'tcx>, promoted: &mut IndexVec<Promoted, Body<'tcx>>) {\n     debug!(\"renumber_mir()\");\n     debug!(\"renumber_mir: body.arg_count={:?}\", body.arg_count);\n \n     let mut visitor = NLLVisitor { infcx };\n+    visitor.visit_promoted(promoted);\n     visitor.visit_body(body);\n }\n \n@@ -41,17 +43,16 @@ impl<'a, 'tcx> NLLVisitor<'a, 'tcx> {\n     {\n         renumber_regions(self.infcx, value)\n     }\n-}\n \n-impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n-    fn visit_body(&mut self, body: &mut Body<'tcx>) {\n-        for promoted in body.promoted.iter_mut() {\n-            self.visit_body(promoted);\n+    fn visit_promoted(&mut self, promoted: &mut IndexVec<Promoted, Body<'tcx>>) {\n+        debug!(\"visiting promoted mir\");\n+        for body in promoted.iter_mut() {\n+            self.visit_body(body);\n         }\n-\n-        self.super_body(body);\n     }\n+}\n \n+impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, ty_context: TyContext) {\n         debug!(\"visit_ty(ty={:?}, ty_context={:?})\", ty, ty_context);\n "}, {"sha": "4b4477756bacc9771cfcf24ed0f38dc8372f5281", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -112,6 +112,7 @@ pub(crate) fn type_check<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &Body<'tcx>,\n+    promoted: &IndexVec<Promoted, Body<'tcx>>,\n     mir_def_id: DefId,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     location_table: &LocationTable,\n@@ -157,6 +158,7 @@ pub(crate) fn type_check<'tcx>(\n         mir_def_id,\n         param_env,\n         body,\n+        promoted,\n         &region_bound_pairs,\n         implicit_region_bound,\n         &mut borrowck_context,\n@@ -180,6 +182,7 @@ fn type_check_internal<'a, 'tcx, R>(\n     mir_def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &'a Body<'tcx>,\n+    promoted: &'a IndexVec<Promoted, Body<'tcx>>,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: ty::Region<'tcx>,\n     borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n@@ -197,7 +200,7 @@ fn type_check_internal<'a, 'tcx, R>(\n         universal_region_relations,\n     );\n     let errors_reported = {\n-        let mut verifier = TypeVerifier::new(&mut checker, body);\n+        let mut verifier = TypeVerifier::new(&mut checker, body, promoted);\n         verifier.visit_body(body);\n         verifier.errors_reported\n     };\n@@ -254,6 +257,7 @@ enum FieldAccessError {\n struct TypeVerifier<'a, 'b, 'tcx> {\n     cx: &'a mut TypeChecker<'b, 'tcx>,\n     body: &'b Body<'tcx>,\n+    promoted: &'b IndexVec<Promoted, Body<'tcx>>,\n     last_span: Span,\n     mir_def_id: DefId,\n     errors_reported: bool,\n@@ -380,9 +384,10 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n-    fn new(cx: &'a mut TypeChecker<'b, 'tcx>, body: &'b Body<'tcx>) -> Self {\n+    fn new(cx: &'a mut TypeChecker<'b, 'tcx>, body: &'b Body<'tcx>, promoted: &'b IndexVec<Promoted, Body<'tcx>>) -> Self {\n         TypeVerifier {\n             body,\n+            promoted,\n             mir_def_id: cx.mir_def_id,\n             cx,\n             last_span: body.span,\n@@ -442,7 +447,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                     match kind {\n                         StaticKind::Promoted(promoted) => {\n                             if !self.errors_reported {\n-                                let promoted_body = &self.body.promoted[*promoted];\n+                                let promoted_body = &self.promoted[*promoted];\n                                 self.sanitize_promoted(promoted_body, location);\n \n                                 let promoted_ty = promoted_body.return_ty();"}, {"sha": "3e3558fc6006298ec5cd030c42807d297ca6e2dc", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -763,7 +763,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.cfg.basic_blocks,\n             self.source_scopes,\n             ClearCrossCrate::Set(self.source_scope_local_data),\n-            IndexVec::new(),\n             yield_ty,\n             self.local_decls,\n             self.canonical_user_type_annotations,"}, {"sha": "4ab5c9cc1c498538b8102d4a9cabeb6f8713fd66", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -667,7 +667,7 @@ pub fn const_eval_raw_provider<'tcx>(\n     let res = ecx.load_mir(cid.instance.def);\n     res.map(|body| {\n         if let Some(index) = cid.promoted {\n-            &body.promoted[index]\n+           &tcx.promoted_mir(def_id)[index]\n         } else {\n             body\n         }"}, {"sha": "9d80163f30f9d26276812828dc53ac52a8076769", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -185,7 +185,7 @@ use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind, Instance};\n use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::session::config::EntryFnType;\n-use rustc::mir::{self, Location, PlaceBase, Promoted, Static, StaticKind};\n+use rustc::mir::{self, Location, PlaceBase, Static, StaticKind};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::{MonoItem, InstantiationMode};\n use rustc::mir::interpret::{Scalar, GlobalId, GlobalAlloc, ErrorHandled};\n@@ -1222,6 +1222,7 @@ fn collect_neighbours<'tcx>(\n     instance: Instance<'tcx>,\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n+    debug!(\"collect_neighbours: {:?}\", instance.def_id());\n     let body = tcx.instance_mir(instance.def);\n \n     MirNeighborCollector {\n@@ -1230,20 +1231,22 @@ fn collect_neighbours<'tcx>(\n         output,\n         param_substs: instance.substs,\n     }.visit_body(&body);\n-    let param_env = ty::ParamEnv::reveal_all();\n-    for i in 0..body.promoted.len() {\n-        use rustc_data_structures::indexed_vec::Idx;\n-        let i = Promoted::new(i);\n-        let cid = GlobalId {\n-            instance,\n-            promoted: Some(i),\n-        };\n-        match tcx.const_eval(param_env.and(cid)) {\n-            Ok(val) => collect_const(tcx, val, instance.substs, output),\n-            Err(ErrorHandled::Reported) => {},\n-            Err(ErrorHandled::TooGeneric) => span_bug!(\n-                body.promoted[i].span, \"collection encountered polymorphic constant\",\n-            ),\n+\n+    if let ty::InstanceDef::Item(def_id) = instance.def {\n+        let param_env = ty::ParamEnv::reveal_all();\n+        let promoted = tcx.promoted_mir(def_id);\n+        for (promoted, promoted_body) in promoted.iter_enumerated() {\n+            let cid = GlobalId {\n+                instance,\n+                promoted: Some(promoted),\n+            };\n+            match tcx.const_eval(param_env.and(cid)) {\n+                Ok(val) => collect_const(tcx, val, instance.substs, output),\n+                Err(ErrorHandled::Reported) => {},\n+                Err(ErrorHandled::TooGeneric) => span_bug!(\n+                    promoted_body.span, \"collection encountered polymorphic constant\",\n+                ),\n+            }\n         }\n     }\n }"}, {"sha": "9d31015f845588501bae1770b066db13a538e498", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -201,7 +201,6 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n             SourceScopeData { span: span, parent_scope: None }, 1\n         ),\n         ClearCrossCrate::Clear,\n-        IndexVec::new(),\n         None,\n         local_decls_for_sig(&sig, span),\n         IndexVec::new(),\n@@ -369,7 +368,6 @@ impl CloneShimBuilder<'tcx> {\n                 SourceScopeData { span: self.span, parent_scope: None }, 1\n             ),\n             ClearCrossCrate::Clear,\n-            IndexVec::new(),\n             None,\n             self.local_decls,\n             IndexVec::new(),\n@@ -813,7 +811,6 @@ fn build_call_shim<'tcx>(\n             SourceScopeData { span: span, parent_scope: None }, 1\n         ),\n         ClearCrossCrate::Clear,\n-        IndexVec::new(),\n         None,\n         local_decls,\n         IndexVec::new(),\n@@ -900,7 +897,6 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n             SourceScopeData { span: span, parent_scope: None }, 1\n         ),\n         ClearCrossCrate::Clear,\n-        IndexVec::new(),\n         None,\n         local_decls,\n         IndexVec::new(),"}, {"sha": "790595b4feef9596afc41ee0a1de5335544cf5cd", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -8,7 +8,7 @@ use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue,\n     Local, NullOp, UnOp, StatementKind, Statement, LocalKind, Static, StaticKind,\n     TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp, ProjectionElem,\n-    SourceScope, SourceScopeLocalData, LocalDecl, Promoted,\n+    SourceScope, SourceScopeLocalData, LocalDecl,\n };\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n@@ -64,17 +64,12 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             &mut body.source_scope_local_data,\n             ClearCrossCrate::Clear\n         );\n-        let promoted = std::mem::replace(\n-            &mut body.promoted,\n-            IndexVec::new()\n-        );\n \n         let dummy_body =\n             &Body::new(\n                 body.basic_blocks().clone(),\n                 Default::default(),\n                 ClearCrossCrate::Clear,\n-                Default::default(),\n                 None,\n                 body.local_decls.clone(),\n                 Default::default(),\n@@ -92,22 +87,17 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             body,\n             dummy_body,\n             source_scope_local_data,\n-            promoted,\n             tcx,\n             source\n         );\n         optimization_finder.visit_body(body);\n \n         // put back the data we stole from `mir`\n-        let (source_scope_local_data, promoted) = optimization_finder.release_stolen_data();\n+        let source_scope_local_data = optimization_finder.release_stolen_data();\n         std::mem::replace(\n             &mut body.source_scope_local_data,\n             source_scope_local_data\n         );\n-        std::mem::replace(\n-            &mut body.promoted,\n-            promoted\n-        );\n \n         trace!(\"ConstProp done for {:?}\", source.def_id());\n     }\n@@ -124,7 +114,6 @@ struct ConstPropagator<'mir, 'tcx> {\n     param_env: ParamEnv<'tcx>,\n     source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n-    promoted: IndexVec<Promoted, Body<'tcx>>,\n }\n \n impl<'mir, 'tcx> LayoutOf for ConstPropagator<'mir, 'tcx> {\n@@ -155,7 +144,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         body: &Body<'tcx>,\n         dummy_body: &'mir Body<'tcx>,\n         source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n-        promoted: IndexVec<Promoted, Body<'tcx>>,\n         tcx: TyCtxt<'tcx>,\n         source: MirSource<'tcx>,\n     ) -> ConstPropagator<'mir, 'tcx> {\n@@ -184,17 +172,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             source_scope_local_data,\n             //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n             local_decls: body.local_decls.clone(),\n-            promoted,\n         }\n     }\n \n-    fn release_stolen_data(\n-        self,\n-    ) -> (\n-        ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n-        IndexVec<Promoted, Body<'tcx>>,\n-    ) {\n-        (self.source_scope_local_data, self.promoted)\n+    fn release_stolen_data(self) -> ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>> {\n+        self.source_scope_local_data\n     }\n \n     fn get_const(&self, local: Local) -> Option<Const<'tcx>> {\n@@ -318,7 +300,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     // cannot use `const_eval` here, because that would require having the MIR\n                     // for the current function available, but we're producing said MIR right now\n                     let res = self.use_ecx(source_info, |this| {\n-                        let body = &this.promoted[*promoted];\n+                        let body = &this.tcx.promoted_mir(this.source.def_id())[*promoted];\n                         eval_promoted(this.tcx, cid, body, this.param_env)\n                     })?;\n                     trace!(\"evaluated promoted {:?} to {:?}\", promoted, res);"}, {"sha": "19a8769ce16331ad4783072318ba9c83963e89b9", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -394,7 +394,7 @@ impl Inliner<'tcx> {\n \n                 let mut local_map = IndexVec::with_capacity(callee_body.local_decls.len());\n                 let mut scope_map = IndexVec::with_capacity(callee_body.source_scopes.len());\n-                let mut promoted_map = IndexVec::with_capacity(callee_body.promoted.len());\n+                let promoted_map = IndexVec::with_capacity(self.tcx.promoted_mir(callsite.callee).len());\n \n                 for mut scope in callee_body.source_scopes.iter().cloned() {\n                     if scope.parent_scope.is_none() {\n@@ -420,9 +420,10 @@ impl Inliner<'tcx> {\n                     local_map.push(idx);\n                 }\n \n-                promoted_map.extend(\n-                    callee_body.promoted.iter().cloned().map(|p| caller_body.promoted.push(p))\n-                );\n+                //TODO fixme\n+                //promoted_map.extend(\n+                //    self.tcx.promoted_mir(callsite.callee).iter().cloned().map(|p| caller_body.promoted.push(p))\n+                //);\n \n                 // If the call is something like `a[*i] = f(i)`, where\n                 // `i : &mut usize`, then just duplicating the `a[*i]`"}, {"sha": "a78e78331ee3fde64df59ff6a836d6765de1ce24", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 69, "deletions": 13, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -184,13 +184,6 @@ pub fn run_passes(\n     };\n \n     run_passes(body, None);\n-\n-    for (index, promoted_body) in body.promoted.iter_enumerated_mut() {\n-        run_passes(promoted_body, Some(index));\n-\n-        //Let's make sure we don't miss any nested instances\n-        assert!(promoted_body.promoted.is_empty())\n-    }\n }\n \n fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n@@ -207,7 +200,7 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     tcx.alloc_steal_mir(body)\n }\n \n-fn mir_validated(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_validated(tcx: TyCtxt<'tcx>, def_id: DefId) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     if let hir::BodyOwnerKind::Const = tcx.hir().body_owner_kind(hir_id) {\n         // Ensure that we compute the `mir_const_qualif` for constants at\n@@ -216,12 +209,14 @@ fn mir_validated(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     }\n \n     let mut body = tcx.mir_const(def_id).steal();\n+    let qualify_and_promote_pass = qualify_consts::QualifyAndPromoteConstants::default();\n     run_passes(tcx, &mut body, InstanceDef::Item(def_id), MirPhase::Validated, &[\n         // What we need to run borrowck etc.\n-        &qualify_consts::QualifyAndPromoteConstants,\n+        &qualify_and_promote_pass,\n         &simplify::SimplifyCfg::new(\"qualify-consts\"),\n     ]);\n-    tcx.alloc_steal_mir(body)\n+    let promoted = qualify_and_promote_pass.promoted.into_inner();\n+    (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted.unwrap_or_else(|| IndexVec::new())))\n }\n \n fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n@@ -241,7 +236,8 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n         tcx.ensure().borrowck(def_id);\n     }\n \n-    let mut body = tcx.mir_validated(def_id).steal();\n+    let (body, _) = tcx.mir_validated(def_id);\n+    let mut body = body.steal();\n     run_passes(tcx, &mut body, InstanceDef::Item(def_id), MirPhase::Optimized, &[\n         // Remove all things only needed by analysis\n         &no_landing_pads::NoLandingPads,\n@@ -297,6 +293,66 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n }\n \n fn promoted_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n-    let body = tcx.optimized_mir(def_id);\n-    &body.promoted\n+    if tcx.is_constructor(def_id) {\n+        return tcx.intern_promoted(IndexVec::new());\n+    }\n+\n+    tcx.ensure().mir_borrowck(def_id);\n+    let (_, promoted) = tcx.mir_validated(def_id);\n+    let mut promoted = promoted.steal();\n+\n+    for mut body in promoted.iter_mut() {\n+        run_passes(tcx, &mut body, InstanceDef::Item(def_id), MirPhase::Optimized, &[\n+            // Remove all things only needed by analysis\n+            &no_landing_pads::NoLandingPads,\n+            &simplify_branches::SimplifyBranches::new(\"initial\"),\n+            &remove_noop_landing_pads::RemoveNoopLandingPads,\n+            &cleanup_post_borrowck::CleanupNonCodegenStatements,\n+\n+            &simplify::SimplifyCfg::new(\"early-opt\"),\n+\n+            // These next passes must be executed together\n+            &add_call_guards::CriticalCallEdges,\n+            &elaborate_drops::ElaborateDrops,\n+            &no_landing_pads::NoLandingPads,\n+            // AddMovesForPackedDrops needs to run after drop\n+            // elaboration.\n+            &add_moves_for_packed_drops::AddMovesForPackedDrops,\n+            // AddRetag needs to run after ElaborateDrops, and it needs\n+            // an AllCallEdges pass right before it.  Otherwise it should\n+            // run fairly late, but before optimizations begin.\n+            &add_call_guards::AllCallEdges,\n+            &add_retag::AddRetag,\n+\n+            &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n+\n+            // No lifetime analysis based on borrowing can be done from here on out.\n+\n+            // From here on out, regions are gone.\n+            &erase_regions::EraseRegions,\n+\n+            // Optimizations begin.\n+            &uniform_array_move_out::RestoreSubsliceArrayMoveOut,\n+            &inline::Inline,\n+\n+            // Lowering generator control-flow and variables\n+            // has to happen before we do anything else to them.\n+            &generator::StateTransform,\n+\n+            &instcombine::InstCombine,\n+            &const_prop::ConstProp,\n+            &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n+            &deaggregator::Deaggregator,\n+            &copy_prop::CopyPropagation,\n+            &simplify_branches::SimplifyBranches::new(\"after-copy-prop\"),\n+            &remove_noop_landing_pads::RemoveNoopLandingPads,\n+            &simplify::SimplifyCfg::new(\"final\"),\n+            &simplify::SimplifyLocals,\n+\n+            &add_call_guards::CriticalCallEdges,\n+            &dump_mir::Marker(\"PreCodegen\"),\n+        ]);\n+    }\n+\n+    tcx.intern_promoted(promoted)\n }"}, {"sha": "7015e2c087faa0670f87ad66409f2140f1dd9eed", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -293,10 +293,10 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         new_temp\n     }\n \n-    fn promote_candidate(mut self, candidate: Candidate) {\n+    fn promote_candidate(mut self, candidate: Candidate, next_promoted_id: usize) -> Option<Body<'tcx>> {\n         let mut operand = {\n             let promoted = &mut self.promoted;\n-            let promoted_id = Promoted::new(self.source.promoted.len());\n+            let promoted_id = Promoted::new(next_promoted_id);\n             let mut promoted_place = |ty, span| {\n                 promoted.span = span;\n                 promoted.local_decls[RETURN_PLACE] = LocalDecl::new_return_place(ty, span);\n@@ -353,7 +353,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         // a function requiring a constant argument and as that constant value\n                         // providing a value whose computation contains another call to a function\n                         // requiring a constant argument.\n-                        TerminatorKind::Goto { .. } => return,\n+                        TerminatorKind::Goto { .. } => return None,\n                         _ => bug!()\n                     }\n                 }\n@@ -368,7 +368,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n \n         let span = self.promoted.span;\n         self.assign(RETURN_PLACE, Rvalue::Use(operand), span);\n-        self.source.promoted.push(self.promoted);\n+        Some(self.promoted)\n     }\n }\n \n@@ -389,10 +389,12 @@ pub fn promote_candidates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mut temps: IndexVec<Local, TempState>,\n     candidates: Vec<Candidate>,\n-) {\n+) -> IndexVec<Promoted, Body<'tcx>> {\n     // Visit candidates in reverse, in case they're nested.\n     debug!(\"promote_candidates({:?})\", candidates);\n \n+    let mut promotions = IndexVec::new();\n+\n     for candidate in candidates.into_iter().rev() {\n         match candidate {\n             Candidate::Repeat(Location { block, statement_index }) |\n@@ -426,7 +428,6 @@ pub fn promote_candidates<'tcx>(\n                 // memory usage?\n                 body.source_scopes.clone(),\n                 body.source_scope_local_data.clone(),\n-                IndexVec::new(),\n                 None,\n                 initial_locals,\n                 IndexVec::new(),\n@@ -440,7 +441,10 @@ pub fn promote_candidates<'tcx>(\n             temps: &mut temps,\n             keep_original: false\n         };\n-        promoter.promote_candidate(candidate);\n+\n+        if let Some(promoted) = promoter.promote_candidate(candidate, promotions.len()) {\n+            promotions.push(promoted);\n+        }\n     }\n \n     // Eliminate assignments to, and drops of promoted temps.\n@@ -474,4 +478,6 @@ pub fn promote_candidates<'tcx>(\n             _ => {}\n         }\n     }\n+\n+    promotions\n }"}, {"sha": "dd4db479cc00b29bae32b45dc4502cb85d07e3b0", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73814654b29604ded9dff105e4156639980d2f2c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=73814654b29604ded9dff105e4156639980d2f2c", "patch": "@@ -25,6 +25,7 @@ use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax::symbol::sym;\n use syntax_pos::{Span, DUMMY_SP};\n \n+use std::cell::Cell;\n use std::fmt;\n use std::ops::{Deref, Index, IndexMut};\n use std::usize;\n@@ -1570,9 +1571,19 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> (u8, &BitSet<Local>) {\n     Checker::new(tcx, def_id, body, Mode::Const).check_const()\n }\n \n-pub struct QualifyAndPromoteConstants;\n+pub struct QualifyAndPromoteConstants<'tcx> {\n+    pub promoted: Cell<Option<IndexVec<Promoted, Body<'tcx>>>>,\n+}\n+\n+impl<'tcx> Default for QualifyAndPromoteConstants<'tcx> {\n+    fn default() -> Self {\n+        QualifyAndPromoteConstants {\n+            promoted: Cell::new(None),\n+        }\n+    }\n+}\n \n-impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants {\n+impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n         if body.return_ty().references_error() {\n@@ -1649,7 +1660,9 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants {\n             };\n \n             // Do the actual promotion, now that we know what's viable.\n-            promote_consts::promote_candidates(body, tcx, temps, candidates);\n+            self.promoted.set(\n+                Some(promote_consts::promote_candidates(body, tcx, temps, candidates))\n+            );\n         } else {\n             if !body.control_flow_destroyed.is_empty() {\n                 let mut locals = body.vars_iter();"}]}