{"sha": "bd583d91a1bf3717f724a38531e142aa4a9ee6cc", "node_id": "C_kwDOAAsO6NoAKGJkNTgzZDkxYTFiZjM3MTdmNzI0YTM4NTMxZTE0MmFhNGE5ZWU2Y2M", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-06T18:41:17Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-28T22:05:39Z"}, "message": "Factor out is_qpath_def_path", "tree": {"sha": "e4b9a741e5f61660ab988914aac0bba5e3910ba4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4b9a741e5f61660ab988914aac0bba5e3910ba4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd583d91a1bf3717f724a38531e142aa4a9ee6cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd583d91a1bf3717f724a38531e142aa4a9ee6cc", "html_url": "https://github.com/rust-lang/rust/commit/bd583d91a1bf3717f724a38531e142aa4a9ee6cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd583d91a1bf3717f724a38531e142aa4a9ee6cc/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c", "html_url": "https://github.com/rust-lang/rust/commit/ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c"}], "stats": {"total": 92, "additions": 44, "deletions": 48}, "files": [{"sha": "b6badef02f58a989e4fa23332fded3c3d3fa7a99", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd583d91a1bf3717f724a38531e142aa4a9ee6cc/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd583d91a1bf3717f724a38531e142aa4a9ee6cc/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=bd583d91a1bf3717f724a38531e142aa4a9ee6cc", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n-use clippy_utils::{get_trait_def_id, higher, is_qpath_def_path, paths};\n+use clippy_utils::{get_trait_def_id, higher, match_def_path, path_def_id, paths};\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -167,13 +167,9 @@ fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n         },\n         ExprKind::Block(block, _) => block.expr.as_ref().map_or(Finite, |e| is_infinite(cx, e)),\n         ExprKind::Box(e) | ExprKind::AddrOf(BorrowKind::Ref, _, e) => is_infinite(cx, e),\n-        ExprKind::Call(path, _) => {\n-            if let ExprKind::Path(ref qpath) = path.kind {\n-                is_qpath_def_path(cx, qpath, path.hir_id, &paths::ITER_REPEAT).into()\n-            } else {\n-                Finite\n-            }\n-        },\n+        ExprKind::Call(path, _) => path_def_id(cx, path)\n+            .map_or(false, |id| match_def_path(cx, id, &paths::ITER_REPEAT))\n+            .into(),\n         ExprKind::Struct(..) => higher::Range::hir(expr).map_or(false, |r| r.end.is_none()).into(),\n         _ => Finite,\n     }"}, {"sha": "81ae4dacdf615207d489918fbdd65de60d99f7a4", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bd583d91a1bf3717f724a38531e142aa4a9ee6cc/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd583d91a1bf3717f724a38531e142aa4a9ee6cc/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=bd583d91a1bf3717f724a38531e142aa4a9ee6cc", "patch": "@@ -1765,22 +1765,22 @@ where\n mod redundant_pattern_match {\n     use super::REDUNDANT_PATTERN_MATCHING;\n     use clippy_utils::diagnostics::span_lint_and_then;\n-    use clippy_utils::higher;\n     use clippy_utils::source::snippet;\n     use clippy_utils::sugg::Sugg;\n     use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, is_type_lang_item, match_type};\n-    use clippy_utils::{is_lang_ctor, is_qpath_def_path, is_trait_method, paths};\n+    use clippy_utils::{higher, match_def_path};\n+    use clippy_utils::{is_lang_ctor, is_trait_method, paths};\n     use if_chain::if_chain;\n     use rustc_ast::ast::LitKind;\n     use rustc_data_structures::fx::FxHashSet;\n     use rustc_errors::Applicability;\n-    use rustc_hir::LangItem::{OptionNone, OptionSome, PollPending, PollReady, ResultErr, ResultOk};\n+    use rustc_hir::LangItem::{OptionNone, PollPending};\n     use rustc_hir::{\n         intravisit::{walk_expr, Visitor},\n         Arm, Block, Expr, ExprKind, LangItem, MatchSource, Node, Pat, PatKind, QPath, UnOp,\n     };\n     use rustc_lint::LateContext;\n-    use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n+    use rustc_middle::ty::{self, subst::GenericArgKind, DefIdTree, Ty};\n     use rustc_span::sym;\n \n     pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n@@ -1956,28 +1956,31 @@ mod redundant_pattern_match {\n         has_else: bool,\n     ) {\n         // also look inside refs\n-        let mut kind = &let_pat.kind;\n         // if we have &None for example, peel it so we can detect \"if let None = x\"\n-        if let PatKind::Ref(inner, _mutability) = kind {\n-            kind = &inner.kind;\n-        }\n+        let check_pat = match let_pat.kind {\n+            PatKind::Ref(inner, _mutability) => inner,\n+            _ => let_pat,\n+        };\n         let op_ty = cx.typeck_results().expr_ty(let_expr);\n         // Determine which function should be used, and the type contained by the corresponding\n         // variant.\n-        let (good_method, inner_ty) = match kind {\n-            PatKind::TupleStruct(ref path, [sub_pat], _) => {\n+        let (good_method, inner_ty) = match check_pat.kind {\n+            PatKind::TupleStruct(ref qpath, [sub_pat], _) => {\n                 if let PatKind::Wild = sub_pat.kind {\n-                    if is_lang_ctor(cx, path, ResultOk) {\n+                    let res = cx.typeck_results().qpath_res(qpath, check_pat.hir_id);\n+                    let Some(id) = res.opt_def_id().and_then(|ctor_id| cx.tcx.parent(ctor_id)) else { return };\n+                    let lang_items = cx.tcx.lang_items();\n+                    if Some(id) == lang_items.result_ok_variant() {\n                         (\"is_ok()\", try_get_generic_ty(op_ty, 0).unwrap_or(op_ty))\n-                    } else if is_lang_ctor(cx, path, ResultErr) {\n+                    } else if Some(id) == lang_items.result_err_variant() {\n                         (\"is_err()\", try_get_generic_ty(op_ty, 1).unwrap_or(op_ty))\n-                    } else if is_lang_ctor(cx, path, OptionSome) {\n+                    } else if Some(id) == lang_items.option_some_variant() {\n                         (\"is_some()\", op_ty)\n-                    } else if is_lang_ctor(cx, path, PollReady) {\n+                    } else if Some(id) == lang_items.poll_ready_variant() {\n                         (\"is_ready()\", op_ty)\n-                    } else if is_qpath_def_path(cx, path, sub_pat.hir_id, &paths::IPADDR_V4) {\n+                    } else if match_def_path(cx, id, &paths::IPADDR_V4) {\n                         (\"is_ipv4()\", op_ty)\n-                    } else if is_qpath_def_path(cx, path, sub_pat.hir_id, &paths::IPADDR_V6) {\n+                    } else if match_def_path(cx, id, &paths::IPADDR_V6) {\n                         (\"is_ipv6()\", op_ty)\n                     } else {\n                         return;\n@@ -2177,17 +2180,22 @@ mod redundant_pattern_match {\n         should_be_left: &'a str,\n         should_be_right: &'a str,\n     ) -> Option<&'a str> {\n-        let body_node_pair = if is_qpath_def_path(cx, path_left, arms[0].pat.hir_id, expected_left)\n-            && is_qpath_def_path(cx, path_right, arms[1].pat.hir_id, expected_right)\n-        {\n-            (&(*arms[0].body).kind, &(*arms[1].body).kind)\n-        } else if is_qpath_def_path(cx, path_right, arms[1].pat.hir_id, expected_left)\n-            && is_qpath_def_path(cx, path_left, arms[0].pat.hir_id, expected_right)\n-        {\n-            (&(*arms[1].body).kind, &(*arms[0].body).kind)\n-        } else {\n-            return None;\n-        };\n+        let left_id = cx\n+            .typeck_results()\n+            .qpath_res(path_left, arms[0].pat.hir_id)\n+            .opt_def_id()?;\n+        let right_id = cx\n+            .typeck_results()\n+            .qpath_res(path_right, arms[1].pat.hir_id)\n+            .opt_def_id()?;\n+        let body_node_pair =\n+            if match_def_path(cx, left_id, expected_left) && match_def_path(cx, right_id, expected_right) {\n+                (&(*arms[0].body).kind, &(*arms[1].body).kind)\n+            } else if match_def_path(cx, right_id, expected_left) && match_def_path(cx, right_id, expected_right) {\n+                (&(*arms[1].body).kind, &(*arms[0].body).kind)\n+            } else {\n+                return None;\n+            };\n \n         match body_node_pair {\n             (ExprKind::Lit(ref lit_left), ExprKind::Lit(ref lit_right)) => match (&lit_left.node, &lit_right.node) {"}, {"sha": "0fe510beaa07ee8640d48599b3025775744c8e84", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd583d91a1bf3717f724a38531e142aa4a9ee6cc/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd583d91a1bf3717f724a38531e142aa4a9ee6cc/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=bd583d91a1bf3717f724a38531e142aa4a9ee6cc", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::is_qpath_def_path;\n use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{match_def_path, path_def_id};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n@@ -93,12 +93,12 @@ fn is_min_or_max<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) -> Option<M\n     let ty_str = ty.to_string();\n \n     // `std::T::MAX` `std::T::MIN` constants\n-    if let hir::ExprKind::Path(path) = &expr.kind {\n-        if is_qpath_def_path(cx, path, expr.hir_id, &[\"core\", &ty_str, \"MAX\"][..]) {\n+    if let Some(id) = path_def_id(cx, expr) {\n+        if match_def_path(cx, id, &[\"core\", &ty_str, \"MAX\"]) {\n             return Some(MinMax::Max);\n         }\n \n-        if is_qpath_def_path(cx, path, expr.hir_id, &[\"core\", &ty_str, \"MIN\"][..]) {\n+        if match_def_path(cx, id, &[\"core\", &ty_str, \"MIN\"]) {\n             return Some(MinMax::Min);\n         }\n     }"}, {"sha": "f4fdb7c13d3f50bfe208a7370ef8d0b7537d7e53", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd583d91a1bf3717f724a38531e142aa4a9ee6cc/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd583d91a1bf3717f724a38531e142aa4a9ee6cc/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=bd583d91a1bf3717f724a38531e142aa4a9ee6cc", "patch": "@@ -357,13 +357,6 @@ pub fn match_qpath(path: &QPath<'_>, segments: &[&str]) -> bool {\n     }\n }\n \n-/// Resolves the path to a `DefId` and checks if it matches the given path.\n-pub fn is_qpath_def_path(cx: &LateContext<'_>, path: &QPath<'_>, hir_id: HirId, segments: &[&str]) -> bool {\n-    cx.qpath_res(path, hir_id)\n-        .opt_def_id()\n-        .map_or(false, |id| match_def_path(cx, id, segments))\n-}\n-\n /// If the expression is a path, resolves it to a `DefId` and checks if it matches the given path.\n ///\n /// Please use `is_expr_diagnostic_item` if the target is a diagnostic item.\n@@ -1775,8 +1768,7 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n \n     match expr.kind {\n         ExprKind::Closure(_, _, body_id, _, _) => is_body_identity_function(cx, cx.tcx.hir().body(body_id)),\n-        ExprKind::Path(ref path) => is_qpath_def_path(cx, path, expr.hir_id, &paths::CONVERT_IDENTITY),\n-        _ => false,\n+        _ => path_def_id(cx, expr).map_or(false, |id| match_def_path(cx, id, &paths::CONVERT_IDENTITY)),\n     }\n }\n "}]}