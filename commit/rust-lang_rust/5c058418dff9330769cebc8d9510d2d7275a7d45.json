{"sha": "5c058418dff9330769cebc8d9510d2d7275a7d45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMDU4NDE4ZGZmOTMzMDc2OWNlYmM4ZDk1MTBkMmQ3Mjc1YTdkNDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-11T10:12:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-11T10:12:00Z"}, "message": "auto merge of #18797 : vadimcn/rust/prefer-bundled2, r=alexcrichton\n\nBased on Windows bundle feedback we got to date, \r\n- We *do* want to prefer the bundled linker: The external one might be for the wrong architecture (e.g. 32 bit vs 64 bit).  On the other hand, binutils don't add many new features these days, so using an older bundled linker is not likely to be a problem.\r\n- We *do* want to prefer bundled libraries: The external ones might not have the symbols we expect (e.g. what's needed for DWARF exceptions vs SjLj).  Since `-L rustlib/<triple>/lib` appears first on the linker command line, it's a good place to keep our platform libs that we want to be found first.\r\n\r\nCloses #18325, closes #17726.", "tree": {"sha": "0d01b9e20121b1b01112735d10531e9f6ead3165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d01b9e20121b1b01112735d10531e9f6ead3165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c058418dff9330769cebc8d9510d2d7275a7d45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c058418dff9330769cebc8d9510d2d7275a7d45", "html_url": "https://github.com/rust-lang/rust/commit/5c058418dff9330769cebc8d9510d2d7275a7d45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c058418dff9330769cebc8d9510d2d7275a7d45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d962fb0ec82fe38b4a8915774f823e7802823b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/d962fb0ec82fe38b4a8915774f823e7802823b42", "html_url": "https://github.com/rust-lang/rust/commit/d962fb0ec82fe38b4a8915774f823e7802823b42"}, {"sha": "cb2328f839d3338629ea25e9585074ca2fe2e856", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2328f839d3338629ea25e9585074ca2fe2e856", "html_url": "https://github.com/rust-lang/rust/commit/cb2328f839d3338629ea25e9585074ca2fe2e856"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "c4b2d20719fa42cb9bca72fab6311c7e2e15b3e2", "filename": "src/etc/make-win-dist.py", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5c058418dff9330769cebc8d9510d2d7275a7d45/src%2Fetc%2Fmake-win-dist.py", "raw_url": "https://github.com/rust-lang/rust/raw/5c058418dff9330769cebc8d9510d2d7275a7d45/src%2Fetc%2Fmake-win-dist.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmake-win-dist.py?ref=5c058418dff9330769cebc8d9510d2d7275a7d45", "patch": "@@ -23,7 +23,7 @@ def find_files(files, path):\n     return found\n \n def make_win_dist(dist_root, target_triple):\n-    # Ask gcc where it keeps its' stuff\n+    # Ask gcc where it keeps its stuff\n     gcc_out = subprocess.check_output([\"gcc.exe\", \"-print-search-dirs\"])\n     bin_path = os.environ[\"PATH\"].split(os.pathsep)\n     lib_path = []\n@@ -42,11 +42,48 @@ def make_win_dist(dist_root, target_triple):\n     else:\n         rustc_dlls.append(\"libgcc_s_seh-1.dll\")\n \n-    target_libs = [\"crtbegin.o\", \"crtend.o\", \"crt2.o\", \"dllcrt2.o\",\n-                   \"libadvapi32.a\", \"libcrypt32.a\", \"libgcc.a\", \"libgcc_eh.a\", \"libgcc_s.a\",\n-                   \"libimagehlp.a\", \"libiphlpapi.a\", \"libkernel32.a\", \"libm.a\", \"libmingw32.a\",\n-                   \"libmingwex.a\", \"libmsvcrt.a\", \"libpsapi.a\", \"libshell32.a\", \"libstdc++.a\",\n-                   \"libuser32.a\", \"libws2_32.a\", \"libiconv.a\", \"libmoldname.a\"]\n+    target_libs = [ # MinGW libs\n+                    \"crtbegin.o\",\n+                    \"crtend.o\",\n+                    \"crt2.o\",\n+                    \"dllcrt2.o\",\n+                    \"libgcc.a\",\n+                    \"libgcc_eh.a\",\n+                    \"libgcc_s.a\",\n+                    \"libm.a\",\n+                    \"libmingw32.a\",\n+                    \"libmingwex.a\",\n+                    \"libstdc++.a\",\n+                    \"libiconv.a\",\n+                    \"libmoldname.a\",\n+                    # Windows import libs\n+                    \"libadvapi32.a\",\n+                    \"libbcrypt.a\",\n+                    \"libcomctl32.a\",\n+                    \"libcomdlg32.a\",\n+                    \"libcrypt32.a\",\n+                    \"libctl3d32.a\",\n+                    \"libgdi32.a\",\n+                    \"libimagehlp.a\",\n+                    \"libiphlpapi.a\",\n+                    \"libkernel32.a\",\n+                    \"libmsvcrt.a\",\n+                    \"libodbc32.a\",\n+                    \"libole32.a\",\n+                    \"liboleaut32.a\",\n+                    \"libopengl32.a\",\n+                    \"libpsapi.a\",\n+                    \"librpcrt4.a\",\n+                    \"libsetupapi.a\",\n+                    \"libshell32.a\",\n+                    \"libuser32.a\",\n+                    \"libuuid.a\",\n+                    \"libwinhttp.a\",\n+                    \"libwinmm.a\",\n+                    \"libwinspool.a\",\n+                    \"libws2_32.a\",\n+                    \"libwsock32.a\",\n+                    ]\n \n     # Find mingw artifacts we want to bundle\n     target_tools = find_files(target_tools, bin_path)\n@@ -59,14 +96,14 @@ def make_win_dist(dist_root, target_triple):\n         shutil.copy(src, dist_bin_dir)\n \n     # Copy platform tools to platform-specific bin directory\n-    target_bin_dir = os.path.join(dist_root, \"bin\", \"rustlib\", target_triple, \"gcc\", \"bin\")\n+    target_bin_dir = os.path.join(dist_root, \"bin\", \"rustlib\", target_triple, \"bin\")\n     if not os.path.exists(target_bin_dir):\n         os.makedirs(target_bin_dir)\n     for src in target_tools:\n         shutil.copy(src, target_bin_dir)\n \n     # Copy platform libs to platform-spcific lib directory\n-    target_lib_dir = os.path.join(dist_root, \"bin\", \"rustlib\", target_triple, \"gcc\", \"lib\")\n+    target_lib_dir = os.path.join(dist_root, \"bin\", \"rustlib\", target_triple, \"lib\")\n     if not os.path.exists(target_lib_dir):\n         os.makedirs(target_lib_dir)\n     for src in target_libs:"}, {"sha": "3f76a575a1e38cd4edadfaa60905c40d51172c36", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c058418dff9330769cebc8d9510d2d7275a7d45/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c058418dff9330769cebc8d9510d2d7275a7d45/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=5c058418dff9330769cebc8d9510d2d7275a7d45", "patch": "@@ -890,9 +890,6 @@ fn link_args(cmd: &mut Command,\n         cmd.arg(obj_filename.with_extension(\"metadata.o\"));\n     }\n \n-    // Rust does its' own LTO\n-    cmd.arg(\"-fno-lto\");\n-\n     if t.options.is_like_osx {\n         // The dead_strip option to the linker specifies that functions and data\n         // unreachable by the entry point will be removed. This is quite useful"}, {"sha": "b4fd2ad00ddab781c11766474d1373b722a93fcf", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c058418dff9330769cebc8d9510d2d7275a7d45/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c058418dff9330769cebc8d9510d2d7275a7d45/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=5c058418dff9330769cebc8d9510d2d7275a7d45", "patch": "@@ -568,8 +568,8 @@ pub fn phase_6_link_output(sess: &Session,\n                            trans: &CrateTranslation,\n                            outputs: &OutputFilenames) {\n     let old_path = os::getenv(\"PATH\").unwrap_or_else(||String::new());\n-    let mut new_path = os::split_paths(old_path.as_slice());\n-    new_path.extend(sess.host_filesearch().get_tools_search_paths().into_iter());\n+    let mut new_path = sess.host_filesearch().get_tools_search_paths();\n+    new_path.extend(os::split_paths(old_path.as_slice()).into_iter());\n     os::setenv(\"PATH\", os::join_paths(new_path.as_slice()).unwrap());\n \n     time(sess.time_passes(), \"linking\", (), |_|"}, {"sha": "99e9deb46376c7fc58e9ed77dbf2912d9a09b8e3", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c058418dff9330769cebc8d9510d2d7275a7d45/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c058418dff9330769cebc8d9510d2d7275a7d45/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=5c058418dff9330769cebc8d9510d2d7275a7d45", "patch": "@@ -150,12 +150,8 @@ impl<'a> FileSearch<'a> {\n         p.push(find_libdir(self.sysroot));\n         p.push(rustlibdir());\n         p.push(self.triple);\n-        let mut p1 = p.clone();\n-        p1.push(\"bin\");\n-        let mut p2 = p.clone();\n-        p2.push(\"gcc\");\n-        p2.push(\"bin\");\n-        vec![p1, p2]\n+        p.push(\"bin\");\n+        vec![p]\n     }\n }\n "}]}