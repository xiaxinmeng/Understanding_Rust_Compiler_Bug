{"sha": "f071d1994fabff6e8f34980cc5b63751e8de8ce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNzFkMTk5NGZhYmZmNmU4ZjM0OTgwY2M1YjYzNzUxZThkZThjZTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-03-05T07:38:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-05T07:38:32Z"}, "message": "Merge pull request #2504 from flip1995/lit_float_repr\n\nFix unreadable_literal lint for scientific float notation", "tree": {"sha": "0e22c56ae6391ac4c240148ca478061d769a1bac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e22c56ae6391ac4c240148ca478061d769a1bac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f071d1994fabff6e8f34980cc5b63751e8de8ce6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJanPP4CRBK7hj4Ov3rIwAAdHIIAGzqf6ojq8wYh/SS5QTLRApf\nYjX05PA2ETkCVu6JLUw5XIcqmmgWbi9MMn0Uu5LGFE5q0v3Ogm06blFGnrZQNv6n\nttBQUKsla4iN8QZSoIhgaWIcH8CyQzpsDLhZx7pZQkGLhFjC1VFo1rkTxO/ts1pF\n94RyCDtNHY8l2OsS5MgOo4jeISkCgcMVzs4CDTxr1JcJhcaA/xc5uTNKv/v7qjRd\ntyym5cEFLQSQTxy/ACV1Lb46p7Xq6ncwaDE5UGMq8otw7MArb+A7+s9cjMUUIyI9\n2aB+Z2rwxWz+wbcZynkaJfha7T3T0UxlXsOTgm3Z8YejfrCVEVlhBKEcvtaW0Cc=\n=+KXL\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e22c56ae6391ac4c240148ca478061d769a1bac\nparent 3138c7a8c424787b0329a89f81c38e306c32f390\nparent 86ce897084ecf90238bde0194c07a7886b0c36ba\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1520235512 +0100\ncommitter GitHub <noreply@github.com> 1520235512 +0100\n\nMerge pull request #2504 from flip1995/lit_float_repr\n\nFix unreadable_literal lint for scientific float notation"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f071d1994fabff6e8f34980cc5b63751e8de8ce6", "html_url": "https://github.com/rust-lang/rust/commit/f071d1994fabff6e8f34980cc5b63751e8de8ce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f071d1994fabff6e8f34980cc5b63751e8de8ce6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3138c7a8c424787b0329a89f81c38e306c32f390", "url": "https://api.github.com/repos/rust-lang/rust/commits/3138c7a8c424787b0329a89f81c38e306c32f390", "html_url": "https://github.com/rust-lang/rust/commit/3138c7a8c424787b0329a89f81c38e306c32f390"}, {"sha": "86ce897084ecf90238bde0194c07a7886b0c36ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/86ce897084ecf90238bde0194c07a7886b0c36ba", "html_url": "https://github.com/rust-lang/rust/commit/86ce897084ecf90238bde0194c07a7886b0c36ba"}], "stats": {"total": 126, "additions": 69, "deletions": 57}, "files": [{"sha": "8b8d7903fedf09c58ac92f3fb8ea67d58dcb9cd9", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 59, "deletions": 55, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/f071d1994fabff6e8f34980cc5b63751e8de8ce6/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f071d1994fabff6e8f34980cc5b63751e8de8ce6/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=f071d1994fabff6e8f34980cc5b63751e8de8ce6", "patch": "@@ -134,7 +134,7 @@ impl<'a> DigitInfo<'a> {\n \n         let mut last_d = '\\0';\n         for (d_idx, d) in sans_prefix.char_indices() {\n-            if !float && (d == 'i' || d == 'u') || float && d == 'f' {\n+            if !float && (d == 'i' || d == 'u') || float && (d == 'f' || d == 'e' || d == 'E') {\n                 let suffix_start = if last_d == '_' { d_idx - 1 } else { d_idx };\n                 let (digits, suffix) = sans_prefix.split_at(suffix_start);\n                 return Self {\n@@ -285,60 +285,64 @@ impl EarlyLintPass for LiteralDigitGrouping {\n \n impl LiteralDigitGrouping {\n     fn check_lit(&self, cx: &EarlyContext, lit: &Lit) {\n-        // Lint integral literals.\n-        if_chain! {\n-            if let LitKind::Int(..) = lit.node;\n-            if let Some(src) = snippet_opt(cx, lit.span);\n-            if let Some(firstch) = src.chars().next();\n-            if char::to_digit(firstch, 10).is_some();\n-            then {\n-                let digit_info = DigitInfo::new(&src, false);\n-                let _ = Self::do_lint(digit_info.digits).map_err(|warning_type| {\n-                    warning_type.display(&digit_info.grouping_hint(), cx, &lit.span)\n-                });\n-            }\n-        }\n-\n-        // Lint floating-point literals.\n-        if_chain! {\n-            if let LitKind::Float(..) = lit.node;\n-            if let Some(src) = snippet_opt(cx, lit.span);\n-            if let Some(firstch) = src.chars().next();\n-            if char::to_digit(firstch, 10).is_some();\n-            then {\n-                let digit_info = DigitInfo::new(&src, true);\n-                // Separate digits into integral and fractional parts.\n-                let parts: Vec<&str> = digit_info\n-                    .digits\n-                    .split_terminator('.')\n-                    .collect();\n-\n-                // Lint integral and fractional parts separately, and then check consistency of digit\n-                // groups if both pass.\n-                let _ = Self::do_lint(parts[0])\n-                    .map(|integral_group_size| {\n-                        if parts.len() > 1 {\n-                            // Lint the fractional part of literal just like integral part, but reversed.\n-                            let fractional_part = &parts[1].chars().rev().collect::<String>();\n-                            let _ = Self::do_lint(fractional_part)\n-                                .map(|fractional_group_size| {\n-                                    let consistent = Self::parts_consistent(integral_group_size,\n-                                                                            fractional_group_size,\n-                                                                            parts[0].len(),\n-                                                                            parts[1].len());\n-                                    if !consistent {\n-                                        WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(),\n-                                                                                       cx,\n-                                                                                       &lit.span);\n-                                    }\n-                                })\n-                                .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(),\n-                                                                             cx,\n-                                                                             &lit.span));\n-                        }\n-                    })\n-                    .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(), cx, &lit.span));\n-            }\n+        match lit.node {\n+            LitKind::Int(..) => {\n+                // Lint integral literals.\n+                if_chain! {\n+                    if let Some(src) = snippet_opt(cx, lit.span);\n+                    if let Some(firstch) = src.chars().next();\n+                    if char::to_digit(firstch, 10).is_some();\n+                    then {\n+                        let digit_info = DigitInfo::new(&src, false);\n+                        let _ = Self::do_lint(digit_info.digits).map_err(|warning_type| {\n+                            warning_type.display(&digit_info.grouping_hint(), cx, &lit.span)\n+                        });\n+                    }\n+                }\n+            },\n+            LitKind::Float(..) | LitKind::FloatUnsuffixed(..) => {\n+                // Lint floating-point literals.\n+                if_chain! {\n+                    if let Some(src) = snippet_opt(cx, lit.span);\n+                    if let Some(firstch) = src.chars().next();\n+                    if char::to_digit(firstch, 10).is_some();\n+                    then {\n+                        let digit_info = DigitInfo::new(&src, true);\n+                        // Separate digits into integral and fractional parts.\n+                        let parts: Vec<&str> = digit_info\n+                            .digits\n+                            .split_terminator('.')\n+                            .collect();\n+\n+                        // Lint integral and fractional parts separately, and then check consistency of digit\n+                        // groups if both pass.\n+                        let _ = Self::do_lint(parts[0])\n+                            .map(|integral_group_size| {\n+                                if parts.len() > 1 {\n+                                    // Lint the fractional part of literal just like integral part, but reversed.\n+                                    let fractional_part = &parts[1].chars().rev().collect::<String>();\n+                                    let _ = Self::do_lint(fractional_part)\n+                                        .map(|fractional_group_size| {\n+                                            let consistent = Self::parts_consistent(integral_group_size,\n+                                                                                    fractional_group_size,\n+                                                                                    parts[0].len(),\n+                                                                                    parts[1].len());\n+                                            if !consistent {\n+                                                WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(),\n+                                                cx,\n+                                                &lit.span);\n+                                            }\n+                                        })\n+                                    .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(),\n+                                    cx,\n+                                    &lit.span));\n+                                }\n+                            })\n+                        .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(), cx, &lit.span));\n+                    }\n+                }\n+            },\n+            _ => (),\n         }\n     }\n "}, {"sha": "394aa9d1eb3e085a17cff7beed46909f874ee2b8", "filename": "tests/ui/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f071d1994fabff6e8f34980cc5b63751e8de8ce6/tests%2Fui%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f071d1994fabff6e8f34980cc5b63751e8de8ce6/tests%2Fui%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.rs?ref=f071d1994fabff6e8f34980cc5b63751e8de8ce6", "patch": "@@ -2,7 +2,7 @@\n \n \n #[warn(approx_constant)]\n-#[allow(unused, shadow_unrelated, similar_names)]\n+#[allow(unused, shadow_unrelated, similar_names, unreadable_literal)]\n fn main() {\n     let my_e = 2.7182;\n     let almost_e = 2.718;"}, {"sha": "94b53f80bb2f2be3bf6759acec61fb99af44c807", "filename": "tests/ui/unreadable_literal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f071d1994fabff6e8f34980cc5b63751e8de8ce6/tests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f071d1994fabff6e8f34980cc5b63751e8de8ce6/tests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.rs?ref=f071d1994fabff6e8f34980cc5b63751e8de8ce6", "patch": "@@ -5,4 +5,6 @@\n fn main() {\n     let good = (0b1011_i64, 0o1_234_u32, 0x1_234_567, 1_2345_6789, 1234_f32, 1_234.12_f32, 1_234.123_f32, 1.123_4_f32);\n     let bad = (0b10110_i64, 0x12345678901_usize, 12345_f32, 1.23456_f32);\n+    let good_sci = 1.1234e1;\n+    let bad_sci = 1.12345e1;\n }"}, {"sha": "b16a58ec2456e141a949d528ff7279efca550fda", "filename": "tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f071d1994fabff6e8f34980cc5b63751e8de8ce6/tests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f071d1994fabff6e8f34980cc5b63751e8de8ce6/tests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.stderr?ref=f071d1994fabff6e8f34980cc5b63751e8de8ce6", "patch": "@@ -24,5 +24,11 @@ error: long literal lacking separators\n 7 |     let bad = (0b10110_i64, 0x12345678901_usize, 12345_f32, 1.23456_f32);\n   |                                                             ^^^^^^^^^^^ help: consider: `1.234_56_f32`\n \n-error: aborting due to 4 previous errors\n+error: long literal lacking separators\n+ --> $DIR/unreadable_literal.rs:9:19\n+  |\n+9 |     let bad_sci = 1.12345e1;\n+  |                   ^^^^^^^^^ help: consider: `1.123_45e1`\n+\n+error: aborting due to 5 previous errors\n "}]}