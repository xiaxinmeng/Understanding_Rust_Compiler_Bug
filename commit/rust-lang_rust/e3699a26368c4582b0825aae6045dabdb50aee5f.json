{"sha": "e3699a26368c4582b0825aae6045dabdb50aee5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNjk5YTI2MzY4YzQ1ODJiMDgyNWFhZTYwNDVkYWJkYjUwYWVlNWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-16T00:49:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-16T23:24:56Z"}, "message": "make stdcall use shim", "tree": {"sha": "5f9ee2e6461d0c942c0f32210136e3335adae2c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f9ee2e6461d0c942c0f32210136e3335adae2c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3699a26368c4582b0825aae6045dabdb50aee5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3699a26368c4582b0825aae6045dabdb50aee5f", "html_url": "https://github.com/rust-lang/rust/commit/e3699a26368c4582b0825aae6045dabdb50aee5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3699a26368c4582b0825aae6045dabdb50aee5f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2199e87166e82c394bf7d8c28374287145ff1b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2199e87166e82c394bf7d8c28374287145ff1b7", "html_url": "https://github.com/rust-lang/rust/commit/d2199e87166e82c394bf7d8c28374287145ff1b7"}], "stats": {"total": 69, "additions": 26, "deletions": 43}, "files": [{"sha": "c1dbb15612edb6f8e4a93350f1ee3721235541b3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 26, "deletions": 43, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e3699a26368c4582b0825aae6045dabdb50aee5f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3699a26368c4582b0825aae6045dabdb50aee5f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e3699a26368c4582b0825aae6045dabdb50aee5f", "patch": "@@ -5396,14 +5396,15 @@ fn trans_native_mod(lcx: @local_ctxt, native_mod: ast::native_mod) {\n     fn build_shim_fn(lcx: @local_ctxt,\n                      link_name: str,\n                      native_item: @ast::native_item,\n-                     llshimfn: ValueRef) {\n+                     llshimfn: ValueRef,\n+                     cc: uint) {\n         let ccx = lcx_ccx(lcx);\n         let span = native_item.span;\n         let id = native_item.id;\n         let tys = c_stack_tys(ccx, span, id);\n \n         // Declare the \"prototype\" for the base function F:\n-        let llbasefn = decl_cdecl_fn(ccx.llmod, link_name, tys.base_fn_ty);\n+        let llbasefn = decl_fn(ccx.llmod, link_name, cc, tys.base_fn_ty);\n \n         // Declare the body of the shim function:\n         let fcx = new_fn_ctxt(lcx, span, llshimfn);\n@@ -5439,30 +5440,32 @@ fn trans_native_mod(lcx: @local_ctxt, native_mod: ast::native_mod) {\n     }\n \n     let ccx = lcx_ccx(lcx);\n+    let cc: uint = lib::llvm::LLVMCCallConv;\n     alt native_mod.abi {\n-      ast::native_abi_cdecl. {\n-        for native_item in native_mod.items {\n-            alt native_item.node {\n-              ast::native_item_ty. {}\n-              ast::native_item_fn(name, fn_decl, _) {\n-                let id = native_item.id;\n-                alt ccx.item_ids.find(id) {\n-                  some(llshimfn) {\n-                    let link_name = select_link_name(name, native_item.ident);\n-                    build_shim_fn(lcx, link_name, native_item, llshimfn);\n-                  }\n+      ast::native_abi_rust_intrinsic. { ret; }\n+      ast::native_abi_cdecl. { cc = lib::llvm::LLVMCCallConv; }\n+      ast::native_abi_stdcall. { cc = lib::llvm::LLVMX86StdcallCallConv; }\n+    }\n+\n+    for native_item in native_mod.items {\n+      alt native_item.node {\n+        ast::native_item_ty. {}\n+        ast::native_item_fn(name, fn_decl, _) {\n+          let id = native_item.id;\n+          alt ccx.item_ids.find(id) {\n+            some(llshimfn) {\n+              let link_name = select_link_name(name, native_item.ident);\n+              build_shim_fn(lcx, link_name, native_item, llshimfn, cc);\n+            }\n \n-                  none. {\n-                    ccx.sess.span_fatal(\n-                        native_item.span,\n-                        \"unbound function item in trans_native_mod\");\n-                  }\n-                }\n-              }\n+            none. {\n+              ccx.sess.span_fatal(\n+                  native_item.span,\n+                  \"unbound function item in trans_native_mod\");\n             }\n+          }\n         }\n       }\n-      _ { /* nothing to do for other ABIs */ }\n     }\n }\n \n@@ -5736,7 +5739,8 @@ fn register_native_fn(ccx: @crate_ctxt, sp: span, path: [str], name: str,\n         uses_retptr = true;\n         cast_to_i32 = false;\n       }\n-      ast::native_abi_cdecl. {\n+\n+      ast::native_abi_cdecl. | ast::native_abi_stdcall. {\n         let tys = c_stack_tys(ccx, sp, id);\n         let shim_name = name + \"__c_stack_shim\";\n         let llshimfn = decl_internal_cdecl_fn(\n@@ -5745,27 +5749,6 @@ fn register_native_fn(ccx: @crate_ctxt, sp: span, path: [str], name: str,\n         ccx.item_symbols.insert(id, shim_name);\n         ret;\n       }\n-      ast::native_abi_stdcall. {\n-        // The name of stdcall functions depend on their argument count\n-        // so we have to declare them correctly\n-        let fn_args_tys = ty::ty_fn_args(ccx.tcx, fn_type);\n-        let fn_ret_ty = ty::ty_fn_ret(ccx.tcx, fn_type);\n-        let ll_args_tys = [];\n-        for arg in fn_args_tys {\n-            let arg_ty = arg.ty;\n-            check type_has_static_size(ccx, arg_ty);\n-            ll_args_tys += [type_of(ccx, sp, arg_ty)];\n-        }\n-        check type_has_static_size(ccx, fn_ret_ty);\n-        let ll_ret_ty = type_of(ccx, sp, fn_ret_ty);\n-        let native_fn_ty = T_fn(ll_args_tys, ll_ret_ty);\n-\n-        let llfn = decl_fn(ccx.llmod, name, lib::llvm::LLVMX86StdcallCallConv,\n-                           native_fn_ty);\n-        ccx.item_ids.insert(id, llfn);\n-        ccx.item_symbols.insert(id, name);\n-        ret;\n-      }\n     }\n \n     let path = path;"}]}