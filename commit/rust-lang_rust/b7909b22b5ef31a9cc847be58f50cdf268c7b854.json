{"sha": "b7909b22b5ef31a9cc847be58f50cdf268c7b854", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OTA5YjIyYjVlZjMxYTljYzg0N2JlNThmNTBjZGYyNjhjN2I4NTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-17T07:59:56Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T05:28:55Z"}, "message": "nix remaining rustc_expand::panictry! uses.", "tree": {"sha": "31610524028c5e760c2540a374dbecd4ebc1f9ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31610524028c5e760c2540a374dbecd4ebc1f9ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7909b22b5ef31a9cc847be58f50cdf268c7b854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7909b22b5ef31a9cc847be58f50cdf268c7b854", "html_url": "https://github.com/rust-lang/rust/commit/b7909b22b5ef31a9cc847be58f50cdf268c7b854", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7909b22b5ef31a9cc847be58f50cdf268c7b854/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a8db690a4cffc687bddcaabc762e3e8746adec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8db690a4cffc687bddcaabc762e3e8746adec6", "html_url": "https://github.com/rust-lang/rust/commit/0a8db690a4cffc687bddcaabc762e3e8746adec6"}], "stats": {"total": 54, "additions": 19, "deletions": 35}, "files": [{"sha": "093815dbbcd4f1c1dfb9821119f9a305fbdf2b48", "filename": "src/librustc_builtin_macros/cmdline_attrs.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7909b22b5ef31a9cc847be58f50cdf268c7b854/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7909b22b5ef31a9cc847be58f50cdf268c7b854/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs?ref=b7909b22b5ef31a9cc847be58f50cdf268c7b854", "patch": "@@ -3,7 +3,6 @@\n use rustc_ast::ast::{self, AttrItem, AttrStyle};\n use rustc_ast::attr::mk_attr;\n use rustc_ast::token;\n-use rustc_expand::panictry;\n use rustc_session::parse::ParseSess;\n use rustc_span::FileName;\n \n@@ -16,7 +15,13 @@ pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -\n         );\n \n         let start_span = parser.token.span;\n-        let AttrItem { path, args } = panictry!(parser.parse_attr_item());\n+        let AttrItem { path, args } = match parser.parse_attr_item() {\n+            Ok(ai) => ai,\n+            Err(mut err) => {\n+                err.emit();\n+                continue;\n+            }\n+        };\n         let end_span = parser.token.span;\n         if parser.token != token::Eof {\n             parse_sess.span_diagnostic.span_err(start_span.to(end_span), \"invalid crate attribute\");"}, {"sha": "67145c6bf433be3c2c950ccfc6b5f6197ffd6891", "filename": "src/librustc_builtin_macros/source_util.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b7909b22b5ef31a9cc847be58f50cdf268c7b854/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7909b22b5ef31a9cc847be58f50cdf268c7b854/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fsource_util.rs?ref=b7909b22b5ef31a9cc847be58f50cdf268c7b854", "patch": "@@ -5,7 +5,6 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::{self, *};\n use rustc_expand::module::DirectoryOwnership;\n-use rustc_expand::panictry;\n use rustc_parse::{self, new_parser_from_file, parser::Parser};\n use rustc_session::lint::builtin::INCOMPLETE_INCLUDE;\n use rustc_span::symbol::Symbol;\n@@ -126,7 +125,7 @@ pub fn expand_include<'cx>(\n     }\n     impl<'a> base::MacResult for ExpandResult<'a> {\n         fn make_expr(mut self: Box<ExpandResult<'a>>) -> Option<P<ast::Expr>> {\n-            let r = panictry!(self.p.parse_expr());\n+            let r = base::parse_expr(&mut self.p)?;\n             if self.p.token != token::Eof {\n                 self.p.sess.buffer_lint(\n                     &INCOMPLETE_INCLUDE,\n@@ -141,18 +140,17 @@ pub fn expand_include<'cx>(\n         fn make_items(mut self: Box<ExpandResult<'a>>) -> Option<SmallVec<[P<ast::Item>; 1]>> {\n             let mut ret = SmallVec::new();\n             while self.p.token != token::Eof {\n-                match panictry!(self.p.parse_item()) {\n-                    Some(item) => ret.push(item),\n-                    None => {\n+                match self.p.parse_item() {\n+                    Err(mut err) => {\n+                        err.emit();\n+                        break;\n+                    }\n+                    Ok(Some(item)) => ret.push(item),\n+                    Ok(None) => {\n                         let token = pprust::token_to_string(&self.p.token);\n-                        self.p\n-                            .sess\n-                            .span_diagnostic\n-                            .span_fatal(\n-                                self.p.token.span,\n-                                &format!(\"expected item, found `{}`\", token),\n-                            )\n-                            .raise();\n+                        let msg = format!(\"expected item, found `{}`\", token);\n+                        self.p.struct_span_err(self.p.token.span, &msg).emit();\n+                        break;\n                     }\n                 }\n             }"}, {"sha": "b615b34634fb25654695733b818df88b41849f55", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7909b22b5ef31a9cc847be58f50cdf268c7b854/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7909b22b5ef31a9cc847be58f50cdf268c7b854/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=b7909b22b5ef31a9cc847be58f50cdf268c7b854", "patch": "@@ -1169,7 +1169,7 @@ pub fn check_zero_tts(cx: &ExtCtxt<'_>, sp: Span, tts: TokenStream, name: &str)\n }\n \n /// Parse an expression. On error, emit it, advancing to `Eof`, and return `None`.\n-fn parse_expr(p: &mut parser::Parser<'_>) -> Option<P<ast::Expr>> {\n+pub fn parse_expr(p: &mut parser::Parser<'_>) -> Option<P<ast::Expr>> {\n     match p.parse_expr() {\n         Ok(e) => return Some(e),\n         Err(mut err) => err.emit(),"}, {"sha": "876a26de3fb7e86c8fe355c585d6f8dd3490c840", "filename": "src/librustc_expand/lib.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7909b22b5ef31a9cc847be58f50cdf268c7b854/src%2Flibrustc_expand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7909b22b5ef31a9cc847be58f50cdf268c7b854/src%2Flibrustc_expand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Flib.rs?ref=b7909b22b5ef31a9cc847be58f50cdf268c7b854", "patch": "@@ -9,25 +9,6 @@\n \n extern crate proc_macro as pm;\n \n-// A variant of 'try!' that panics on an Err. This is used as a crutch on the\n-// way towards a non-panic!-prone parser. It should be used for fatal parsing\n-// errors; eventually we plan to convert all code using panictry to just use\n-// normal try.\n-#[macro_export]\n-macro_rules! panictry {\n-    ($e:expr) => {{\n-        use rustc_errors::FatalError;\n-        use std::result::Result::{Err, Ok};\n-        match $e {\n-            Ok(e) => e,\n-            Err(mut e) => {\n-                e.emit();\n-                FatalError.raise()\n-            }\n-        }\n-    }};\n-}\n-\n mod placeholders;\n mod proc_macro_server;\n "}]}