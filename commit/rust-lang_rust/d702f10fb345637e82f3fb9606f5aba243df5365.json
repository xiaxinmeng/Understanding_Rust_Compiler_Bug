{"sha": "d702f10fb345637e82f3fb9606f5aba243df5365", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MDJmMTBmYjM0NTYzN2U4MmYzZmI5NjA2ZjVhYmEyNDNkZjUzNjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-23T20:06:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-23T20:06:44Z"}, "message": "Merge #8159\n\n8159: Ignore proc-macro stdout to prevent IPC crash r=edwin0cheng a=edwin0cheng\n\nfixes  #7954\r\n\r\nr? @flodiebold \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "26867e9f4b59dfb5568d071f09b5b647126c7af8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26867e9f4b59dfb5568d071f09b5b647126c7af8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d702f10fb345637e82f3fb9606f5aba243df5365", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWkpUCRBK7hj4Ov3rIwAAdHIIAHtoa4UPH+mp1nBJ5QX+IGJ8\nRHCnBm1LwIWBisHAYas6+DuB/05zbhZensZcbplQ67l0ANIp+kKxicgVrEC4JlUH\naIKIV5hL7YpoOIEinrziwn1epV5V3H4gxtsWCoTKg06LbM7i4hL6JscerO6iDI18\nNlQloFCWm2h0VnFjjgC662VfNO6mKCv8wL23mIWKsynvN7Rj3wIppuOU0d0dfQ9u\nGYK9C8ZZsk5R54puvDq0eT/rPU11hMcEhGSfs2kts02DP+MVS6uDYIHPGl6dUnYP\n+UfLk3447RNr58BitH0WcuVlfI1imKsKULFfJXiCpcph9mKuHlrCAF4z3fks1uE=\n=BjYL\n-----END PGP SIGNATURE-----\n", "payload": "tree 26867e9f4b59dfb5568d071f09b5b647126c7af8\nparent c6d6a7d41213dc06bb1f36745d5eaf8b91a99b99\nparent 79f583ed6622be591886f99974766a3aeda39182\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616530004 +0000\ncommitter GitHub <noreply@github.com> 1616530004 +0000\n\nMerge #8159\n\n8159: Ignore proc-macro stdout to prevent IPC crash r=edwin0cheng a=edwin0cheng\n\nfixes  #7954\r\n\r\nr? @flodiebold \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d702f10fb345637e82f3fb9606f5aba243df5365", "html_url": "https://github.com/rust-lang/rust/commit/d702f10fb345637e82f3fb9606f5aba243df5365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d702f10fb345637e82f3fb9606f5aba243df5365/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6d6a7d41213dc06bb1f36745d5eaf8b91a99b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6d6a7d41213dc06bb1f36745d5eaf8b91a99b99", "html_url": "https://github.com/rust-lang/rust/commit/c6d6a7d41213dc06bb1f36745d5eaf8b91a99b99"}, {"sha": "79f583ed6622be591886f99974766a3aeda39182", "url": "https://api.github.com/repos/rust-lang/rust/commits/79f583ed6622be591886f99974766a3aeda39182", "html_url": "https://github.com/rust-lang/rust/commit/79f583ed6622be591886f99974766a3aeda39182"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "f525df1525d5fd5740170698494f0f3d9d778cf8", "filename": "crates/proc_macro_api/src/msg.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d702f10fb345637e82f3fb9606f5aba243df5365/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d702f10fb345637e82f3fb9606f5aba243df5365/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs?ref=d702f10fb345637e82f3fb9606f5aba243df5365", "patch": "@@ -55,8 +55,8 @@ pub enum ErrorCode {\n }\n \n pub trait Message: Serialize + DeserializeOwned {\n-    fn read(inp: &mut impl BufRead) -> io::Result<Option<Self>> {\n-        Ok(match read_json(inp)? {\n+    fn read(inp: &mut impl BufRead, buf: &mut String) -> io::Result<Option<Self>> {\n+        Ok(match read_json(inp, buf)? {\n             None => None,\n             Some(text) => {\n                 let mut deserializer = serde_json::Deserializer::from_str(&text);\n@@ -76,14 +76,29 @@ pub trait Message: Serialize + DeserializeOwned {\n impl Message for Request {}\n impl Message for Response {}\n \n-fn read_json(inp: &mut impl BufRead) -> io::Result<Option<String>> {\n-    let mut buf = String::new();\n-    inp.read_line(&mut buf)?;\n-    buf.pop(); // Remove trailing '\\n'\n-    Ok(match buf.len() {\n-        0 => None,\n-        _ => Some(buf),\n-    })\n+fn read_json<'a>(\n+    inp: &mut impl BufRead,\n+    mut buf: &'a mut String,\n+) -> io::Result<Option<&'a String>> {\n+    loop {\n+        buf.clear();\n+\n+        inp.read_line(&mut buf)?;\n+        buf.pop(); // Remove trailing '\\n'\n+\n+        if buf.is_empty() {\n+            return Ok(None);\n+        }\n+\n+        // Some ill behaved macro try to use stdout for debugging\n+        // We ignore it here\n+        if !buf.starts_with(\"{\") {\n+            log::error!(\"proc-macro tried to print : {}\", buf);\n+            continue;\n+        }\n+\n+        return Ok(Some(buf));\n+    }\n }\n \n fn write_json(out: &mut impl Write, msg: &str) -> io::Result<()> {"}, {"sha": "99d05aef37649da7285c36d45c9d94abfa9b11a2", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d702f10fb345637e82f3fb9606f5aba243df5365/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d702f10fb345637e82f3fb9606f5aba243df5365/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=d702f10fb345637e82f3fb9606f5aba243df5365", "patch": "@@ -90,8 +90,10 @@ impl ProcMacroProcessSrv {\n fn client_loop(task_rx: Receiver<Task>, mut process: Process) {\n     let (mut stdin, mut stdout) = process.stdio().expect(\"couldn't access child stdio\");\n \n+    let mut buf = String::new();\n+\n     for Task { req, result_tx } in task_rx {\n-        match send_request(&mut stdin, &mut stdout, req) {\n+        match send_request(&mut stdin, &mut stdout, req, &mut buf) {\n             Ok(res) => result_tx.send(res).unwrap(),\n             Err(err) => {\n                 log::error!(\n@@ -152,7 +154,8 @@ fn send_request(\n     mut writer: &mut impl Write,\n     mut reader: &mut impl BufRead,\n     req: Request,\n+    buf: &mut String,\n ) -> io::Result<Option<Response>> {\n     req.write(&mut writer)?;\n-    Response::read(&mut reader)\n+    Response::read(&mut reader, buf)\n }"}, {"sha": "bc48f1c436cf56030bed80438375faf1b0ec8713", "filename": "crates/proc_macro_srv/src/cli.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d702f10fb345637e82f3fb9606f5aba243df5365/crates%2Fproc_macro_srv%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d702f10fb345637e82f3fb9606f5aba243df5365/crates%2Fproc_macro_srv%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fcli.rs?ref=d702f10fb345637e82f3fb9606f5aba243df5365", "patch": "@@ -6,8 +6,9 @@ use std::io;\n \n pub fn run() -> io::Result<()> {\n     let mut srv = ProcMacroSrv::default();\n+    let mut buf = String::new();\n \n-    while let Some(req) = read_request()? {\n+    while let Some(req) = read_request(&mut buf)? {\n         let res = match req {\n             msg::Request::ListMacro(task) => srv.list_macros(&task).map(msg::Response::ListMacro),\n             msg::Request::ExpansionMacro(task) => {\n@@ -30,8 +31,8 @@ pub fn run() -> io::Result<()> {\n     Ok(())\n }\n \n-fn read_request() -> io::Result<Option<msg::Request>> {\n-    msg::Request::read(&mut io::stdin().lock())\n+fn read_request(buf: &mut String) -> io::Result<Option<msg::Request>> {\n+    msg::Request::read(&mut io::stdin().lock(), buf)\n }\n \n fn write_response(msg: msg::Response) -> io::Result<()> {"}, {"sha": "4442cbff68101f209689822c608789fdeeb3e01a", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d702f10fb345637e82f3fb9606f5aba243df5365/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d702f10fb345637e82f3fb9606f5aba243df5365/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=d702f10fb345637e82f3fb9606f5aba243df5365", "patch": "@@ -712,6 +712,10 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n     // We hard code the output here for preventing to use any deps\n     let mut res = TokenStream::new();\n \n+    // ill behaved proc-macro will use the stdout\n+    // we should ignore it\n+    println!(\"I am bad guy\");\n+\n     // impl Bar for Foo { fn bar() {} }\n     let mut tokens = vec![t!(\"impl\"), t!(\"Bar\"), t!(\"for\"), t!(\"Foo\")];\n     let mut fn_stream = TokenStream::new();"}]}