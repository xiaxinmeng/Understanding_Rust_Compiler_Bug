{"sha": "07f6efc4e7302d05f31a4bde1f5bd23424ba6a45", "node_id": "C_kwDOAAsO6NoAKDA3ZjZlZmM0ZTczMDJkMDVmMzFhNGJkZTFmNWJkMjM0MjRiYTZhNDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-31T15:39:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-31T15:39:20Z"}, "message": "Auto merge of #13523 - lowr:fix/adjust-expectation-for-if, r=lnicola\n\nfix: disregard type variable expectation for if expressions\n\nFixes #13522\n\nAs [the comment](https://github.com/rust-lang/rust-analyzer/blob/8142d1f606dc2e52b1d2b8992671e2bd73379f28/crates/hir-ty/src/infer.rs#L1087-L1090) on `Expectation::adjust_for_branches` explains:\n\n> If the expected type is just a type variable, then don't use an expected type. Otherwise, we might write parts of the type when checking the 'then' block which are incompatible with the 'else' branch.\n\nNote that we already use it in match expressions. I've added tests for them too nevertheless.", "tree": {"sha": "3f2ddde3722210f3d97a6585133dfeaa9080b06d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f2ddde3722210f3d97a6585133dfeaa9080b06d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07f6efc4e7302d05f31a4bde1f5bd23424ba6a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07f6efc4e7302d05f31a4bde1f5bd23424ba6a45", "html_url": "https://github.com/rust-lang/rust/commit/07f6efc4e7302d05f31a4bde1f5bd23424ba6a45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07f6efc4e7302d05f31a4bde1f5bd23424ba6a45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8142d1f606dc2e52b1d2b8992671e2bd73379f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/8142d1f606dc2e52b1d2b8992671e2bd73379f28", "html_url": "https://github.com/rust-lang/rust/commit/8142d1f606dc2e52b1d2b8992671e2bd73379f28"}, {"sha": "db8c7523f85d8f177b2cd9676fd97b90aeea0388", "url": "https://api.github.com/repos/rust-lang/rust/commits/db8c7523f85d8f177b2cd9676fd97b90aeea0388", "html_url": "https://github.com/rust-lang/rust/commit/db8c7523f85d8f177b2cd9676fd97b90aeea0388"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "b1f4de826077542ad5b54ceaa1d52fb16b99d992", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07f6efc4e7302d05f31a4bde1f5bd23424ba6a45/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f6efc4e7302d05f31a4bde1f5bd23424ba6a45/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=07f6efc4e7302d05f31a4bde1f5bd23424ba6a45", "patch": "@@ -85,6 +85,7 @@ impl<'a> InferenceContext<'a> {\n         let ty = match &self.body[tgt_expr] {\n             Expr::Missing => self.err_ty(),\n             &Expr::If { condition, then_branch, else_branch } => {\n+                let expected = &expected.adjust_for_branches(&mut self.table);\n                 self.infer_expr(\n                     condition,\n                     &Expectation::has_type(TyKind::Scalar(Scalar::Bool).intern(Interner)),"}, {"sha": "1abdb0be7f876b82004c67c5299620001284f679", "filename": "crates/hir-ty/src/tests/coercion.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/07f6efc4e7302d05f31a4bde1f5bd23424ba6a45/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f6efc4e7302d05f31a4bde1f5bd23424ba6a45/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=07f6efc4e7302d05f31a4bde1f5bd23424ba6a45", "patch": "@@ -122,6 +122,23 @@ fn test() {\n     )\n }\n \n+#[test]\n+fn if_else_adjust_for_branches_discard_type_var() {\n+    check_no_mismatches(\n+        r#\"\n+fn test() {\n+    let f = || {\n+        if true {\n+            &\"\"\n+        } else {\n+            \"\"\n+        }\n+    };\n+}\n+\"#,\n+    );\n+}\n+\n #[test]\n fn match_first_coerce() {\n     check_no_mismatches(\n@@ -182,6 +199,22 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn match_adjust_for_branches_discard_type_var() {\n+    check_no_mismatches(\n+        r#\"\n+fn test() {\n+    let f = || {\n+        match 0i32 {\n+            0i32 => &\"\",\n+            _ => \"\",\n+        }\n+    };\n+}\n+\"#,\n+    );\n+}\n+\n #[test]\n fn return_coerce_unknown() {\n     check_types("}]}