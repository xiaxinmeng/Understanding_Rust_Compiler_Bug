{"sha": "57bc9d8daf268fa7dc28d89665f4e8ee394ae726", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YmM5ZDhkYWYyNjhmYTdkYzI4ZDg5NjY1ZjRlOGVlMzk0YWU3MjY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-11T16:17:51Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-11T17:04:56Z"}, "message": "Extract jit imported symbols loading functionAlso make the staticlib load error non fatal", "tree": {"sha": "213f690395ea843547edf83e820f41269f298458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/213f690395ea843547edf83e820f41269f298458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57bc9d8daf268fa7dc28d89665f4e8ee394ae726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57bc9d8daf268fa7dc28d89665f4e8ee394ae726", "html_url": "https://github.com/rust-lang/rust/commit/57bc9d8daf268fa7dc28d89665f4e8ee394ae726", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57bc9d8daf268fa7dc28d89665f4e8ee394ae726/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd19af37f48844838ad1d07c0c9eb214e43bd83c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd19af37f48844838ad1d07c0c9eb214e43bd83c", "html_url": "https://github.com/rust-lang/rust/commit/bd19af37f48844838ad1d07c0c9eb214e43bd83c"}], "stats": {"total": 90, "additions": 48, "deletions": 42}, "files": [{"sha": "3c4ce99d982893c9772771ca31c174fcea3e3151", "filename": "src/driver.rs", "status": "modified", "additions": 48, "deletions": 42, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/57bc9d8daf268fa7dc28d89665f4e8ee394ae726/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57bc9d8daf268fa7dc28d89665f4e8ee394ae726/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=57bc9d8daf268fa7dc28d89665f4e8ee394ae726", "patch": "@@ -43,48 +43,7 @@ pub fn codegen_crate(\n fn run_jit(tcx: TyCtxt<'_>, log: &mut Option<File>) -> ! {\n     use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n \n-    let mut dylib_paths = Vec::new();\n-\n-    {\n-        use rustc::middle::dependency_format::Linkage;\n-\n-        let crate_info = CrateInfo::new(tcx);\n-        let formats = tcx.sess.dependency_formats.borrow();\n-        let data = formats.get(&CrateType::Executable).unwrap();\n-        for &(cnum, _) in &crate_info.used_crates_dynamic {\n-            let src = &crate_info.used_crate_source[&cnum];\n-            match data[cnum.as_usize() - 1] {\n-                Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n-                Linkage::Static => {\n-                    let name = tcx.crate_name(cnum);\n-                    let mut err = tcx.sess.struct_fatal(&format!(\"Can't load static lib {}\", name.as_str()));\n-                    err.note(\"rustc_codegen_cranelift can only load dylibs in JIT mode.\");\n-                    err.emit();\n-                }\n-                Linkage::Dynamic => {\n-                    dylib_paths.push(src.dylib.as_ref().unwrap().0.clone());\n-                }\n-            }\n-        }\n-    }\n-\n-    let mut imported_symbols = Vec::new();\n-    for path in dylib_paths {\n-        use object::Object;\n-        let lib = libloading::Library::new(&path).unwrap();\n-        let obj = std::fs::read(path).unwrap();\n-        let obj = object::File::parse(&obj).unwrap();\n-        imported_symbols.extend(obj.dynamic_symbols().filter_map(|(_idx, symbol)| {\n-            let name = symbol.name().unwrap().to_string();\n-            if name.is_empty() || !symbol.is_global() || symbol.is_undefined() {\n-                return None;\n-            }\n-            let symbol: libloading::Symbol<*const u8> =\n-                unsafe { lib.get(name.as_bytes()) }.unwrap();\n-            Some((name, *symbol))\n-        }));\n-        std::mem::forget(lib)\n-    }\n+    let imported_symbols = load_imported_symbols_for_jit(tcx);\n \n     let mut jit_builder = SimpleJITBuilder::with_isa(\n         crate::build_isa(tcx.sess, false),\n@@ -136,6 +95,53 @@ fn run_jit(tcx: TyCtxt<'_>, log: &mut Option<File>) -> ! {\n     std::process::exit(ret);\n }\n \n+fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n+    use rustc::middle::dependency_format::Linkage;\n+\n+    let mut dylib_paths = Vec::new();\n+\n+    let crate_info = CrateInfo::new(tcx);\n+    let formats = tcx.sess.dependency_formats.borrow();\n+    let data = formats.get(&CrateType::Executable).unwrap();\n+    for &(cnum, _) in &crate_info.used_crates_dynamic {\n+        let src = &crate_info.used_crate_source[&cnum];\n+        match data[cnum.as_usize() - 1] {\n+            Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n+            Linkage::Static => {\n+                let name = tcx.crate_name(cnum);\n+                let mut err = tcx.sess.struct_err(&format!(\"Can't load static lib {}\", name.as_str()));\n+                err.note(\"rustc_codegen_cranelift can only load dylibs in JIT mode.\");\n+                err.emit();\n+            }\n+            Linkage::Dynamic => {\n+                dylib_paths.push(src.dylib.as_ref().unwrap().0.clone());\n+            }\n+        }\n+    }\n+\n+    let mut imported_symbols = Vec::new();\n+    for path in dylib_paths {\n+        use object::Object;\n+        let lib = libloading::Library::new(&path).unwrap();\n+        let obj = std::fs::read(path).unwrap();\n+        let obj = object::File::parse(&obj).unwrap();\n+        imported_symbols.extend(obj.dynamic_symbols().filter_map(|(_idx, symbol)| {\n+            let name = symbol.name().unwrap().to_string();\n+            if name.is_empty() || !symbol.is_global() || symbol.is_undefined() {\n+                return None;\n+            }\n+            let symbol: libloading::Symbol<*const u8> =\n+                unsafe { lib.get(name.as_bytes()) }.unwrap();\n+            Some((name, *symbol))\n+        }));\n+        std::mem::forget(lib)\n+    }\n+\n+    tcx.sess.abort_if_errors();\n+\n+    imported_symbols\n+}\n+\n fn run_aot(\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,"}]}