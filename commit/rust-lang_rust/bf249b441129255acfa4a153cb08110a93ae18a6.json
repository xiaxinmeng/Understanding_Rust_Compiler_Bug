{"sha": "bf249b441129255acfa4a153cb08110a93ae18a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMjQ5YjQ0MTEyOTI1NWFjZmE0YTE1M2NiMDgxMTBhOTNhZTE4YTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-13T03:35:23Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-14T21:58:01Z"}, "message": "libhexfloat: Remove all uses of `~str` from `libhexfloat`", "tree": {"sha": "ac632c0ed3a893f896b5955fca10189919f0f22e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac632c0ed3a893f896b5955fca10189919f0f22e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf249b441129255acfa4a153cb08110a93ae18a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf249b441129255acfa4a153cb08110a93ae18a6", "html_url": "https://github.com/rust-lang/rust/commit/bf249b441129255acfa4a153cb08110a93ae18a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf249b441129255acfa4a153cb08110a93ae18a6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27977e41fc28c45af9bd23cd7eefb9dec6e7eab0", "url": "https://api.github.com/repos/rust-lang/rust/commits/27977e41fc28c45af9bd23cd7eefb9dec6e7eab0", "html_url": "https://github.com/rust-lang/rust/commit/27977e41fc28c45af9bd23cd7eefb9dec6e7eab0"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "dda14fb10af027d25086a84a70569316e8f443f7", "filename": "src/libhexfloat/lib.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bf249b441129255acfa4a153cb08110a93ae18a6/src%2Flibhexfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf249b441129255acfa4a153cb08110a93ae18a6/src%2Flibhexfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibhexfloat%2Flib.rs?ref=bf249b441129255acfa4a153cb08110a93ae18a6", "patch": "@@ -70,30 +70,39 @@ pub fn macro_registrar(register: |Name, SyntaxExtension|) {\n \n //Check if the literal is valid (as LLVM expects),\n //and return a descriptive error if not.\n-fn hex_float_lit_err(s: &str) -> Option<(uint, ~str)> {\n+fn hex_float_lit_err(s: &str) -> Option<(uint, StrBuf)> {\n     let mut chars = s.chars().peekable();\n     let mut i = 0;\n     if chars.peek() == Some(&'-') { chars.next(); i+= 1 }\n-    if chars.next() != Some('0') { return Some((i, \"Expected '0'\".to_owned())); } i+=1;\n-    if chars.next() != Some('x') { return Some((i, \"Expected 'x'\".to_owned())); } i+=1;\n+    if chars.next() != Some('0') {\n+        return Some((i, \"Expected '0'\".to_strbuf()));\n+    } i+=1;\n+    if chars.next() != Some('x') {\n+        return Some((i, \"Expected 'x'\".to_strbuf()));\n+    } i+=1;\n     let mut d_len = 0;\n     for _ in chars.take_while(|c| c.is_digit_radix(16)) { chars.next(); i+=1; d_len += 1;}\n-    if chars.next() != Some('.') { return Some((i, \"Expected '.'\".to_owned())); } i+=1;\n+    if chars.next() != Some('.') {\n+        return Some((i, \"Expected '.'\".to_strbuf()));\n+    } i+=1;\n     let mut f_len = 0;\n     for _ in chars.take_while(|c| c.is_digit_radix(16)) { chars.next(); i+=1; f_len += 1;}\n     if d_len == 0 && f_len == 0 {\n-        return Some((i, \"Expected digits before or after decimal point\".to_owned()));\n+        return Some((i, \"Expected digits before or after decimal \\\n+                         point\".to_strbuf()));\n     }\n-    if chars.next() != Some('p') { return Some((i, \"Expected 'p'\".to_owned())); } i+=1;\n+    if chars.next() != Some('p') {\n+        return Some((i, \"Expected 'p'\".to_strbuf()));\n+    } i+=1;\n     if chars.peek() == Some(&'-') { chars.next(); i+= 1 }\n     let mut e_len = 0;\n     for _ in chars.take_while(|c| c.is_digit()) { chars.next(); i+=1; e_len += 1}\n     if e_len == 0 {\n-        return Some((i, \"Expected exponent digits\".to_owned()));\n+        return Some((i, \"Expected exponent digits\".to_strbuf()));\n     }\n     match chars.next() {\n         None => None,\n-        Some(_) => Some((i, \"Expected end of string\".to_owned()))\n+        Some(_) => Some((i, \"Expected end of string\".to_strbuf()))\n     }\n }\n "}]}