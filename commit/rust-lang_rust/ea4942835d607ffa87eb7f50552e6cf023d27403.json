{"sha": "ea4942835d607ffa87eb7f50552e6cf023d27403", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDk0MjgzNWQ2MDdmZmE4N2ViN2Y1MDU1MmU2Y2YwMjNkMjc0MDM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-05-08T12:32:31Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-05-08T12:32:31Z"}, "message": "Don't use Lock for heavily accessed CrateMetadata::cnum_map.", "tree": {"sha": "3ba10f2f8c752b7c51d4f115e96d603f9b0a7b35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ba10f2f8c752b7c51d4f115e96d603f9b0a7b35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea4942835d607ffa87eb7f50552e6cf023d27403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4942835d607ffa87eb7f50552e6cf023d27403", "html_url": "https://github.com/rust-lang/rust/commit/ea4942835d607ffa87eb7f50552e6cf023d27403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea4942835d607ffa87eb7f50552e6cf023d27403/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "295d98069f34dce6f7a88422bfa7fbd0a1425aac", "url": "https://api.github.com/repos/rust-lang/rust/commits/295d98069f34dce6f7a88422bfa7fbd0a1425aac", "html_url": "https://github.com/rust-lang/rust/commit/295d98069f34dce6f7a88422bfa7fbd0a1425aac"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "7efcedd73eddff2ae7c4aa2a6c3b5d15b2106201", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea4942835d607ffa87eb7f50552e6cf023d27403/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4942835d607ffa87eb7f50552e6cf023d27403/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ea4942835d607ffa87eb7f50552e6cf023d27403", "patch": "@@ -219,6 +219,8 @@ impl<'a> CrateLoader<'a> {\n \n         let cnum_map = self.resolve_crate_deps(root, &crate_root, &metadata, cnum, span, dep_kind);\n \n+        let dependencies: Vec<CrateNum> = cnum_map.iter().cloned().collect();\n+\n         let def_path_table = record_time(&self.sess.perf_stats.decode_def_path_tables_time, || {\n             crate_root.def_path_table.decode((&metadata, self.sess))\n         });\n@@ -239,8 +241,9 @@ impl<'a> CrateLoader<'a> {\n             }),\n             root: crate_root,\n             blob: metadata,\n-            cnum_map: Lock::new(cnum_map),\n+            cnum_map,\n             cnum,\n+            dependencies: Lock::new(dependencies),\n             codemap_import_info: RwLock::new(vec![]),\n             attribute_cache: Lock::new([Vec::new(), Vec::new()]),\n             dep_kind: Lock::new(dep_kind),\n@@ -392,7 +395,7 @@ impl<'a> CrateLoader<'a> {\n \n         // Propagate the extern crate info to dependencies.\n         extern_crate.direct = false;\n-        for &dep_cnum in cmeta.cnum_map.borrow().iter() {\n+        for &dep_cnum in cmeta.dependencies.borrow().iter() {\n             self.update_extern_crate(dep_cnum, extern_crate, visited);\n         }\n     }\n@@ -1040,7 +1043,7 @@ impl<'a> CrateLoader<'a> {\n             }\n \n             info!(\"injecting a dep from {} to {}\", cnum, krate);\n-            data.cnum_map.borrow_mut().push(krate);\n+            data.dependencies.borrow_mut().push(krate);\n         });\n     }\n }"}, {"sha": "f4d4bd3589398825b69179f6a47b124caea3b2ef", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea4942835d607ffa87eb7f50552e6cf023d27403/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4942835d607ffa87eb7f50552e6cf023d27403/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=ea4942835d607ffa87eb7f50552e6cf023d27403", "patch": "@@ -64,8 +64,9 @@ pub struct CrateMetadata {\n     pub extern_crate: Lock<Option<ExternCrate>>,\n \n     pub blob: MetadataBlob,\n-    pub cnum_map: Lock<CrateNumMap>,\n+    pub cnum_map: CrateNumMap,\n     pub cnum: CrateNum,\n+    pub dependencies: Lock<Vec<CrateNum>>,\n     pub codemap_import_info: RwLock<Vec<ImportedFileMap>>,\n     pub attribute_cache: Lock<[Vec<Option<Lrc<[ast::Attribute]>>>; 2]>,\n \n@@ -144,7 +145,7 @@ impl CStore {\n         }\n \n         let data = self.get_crate_data(krate);\n-        for &dep in data.cnum_map.borrow().iter() {\n+        for &dep in data.dependencies.borrow().iter() {\n             if dep != krate {\n                 self.push_dependencies_in_postorder(ordering, dep);\n             }"}, {"sha": "53d1ff156274e796c855541d2aeef35699ec8d94", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea4942835d607ffa87eb7f50552e6cf023d27403/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4942835d607ffa87eb7f50552e6cf023d27403/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=ea4942835d607ffa87eb7f50552e6cf023d27403", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'tcx: 'a> TyDecoder<'a, 'tcx> for DecodeContext<'a, 'tcx> {\n         if cnum == LOCAL_CRATE {\n             self.cdata().cnum\n         } else {\n-            self.cdata().cnum_map.borrow()[cnum]\n+            self.cdata().cnum_map[cnum]\n         }\n     }\n }\n@@ -932,7 +932,7 @@ impl<'a, 'tcx> CrateMetadata {\n     // Translate a DefId from the current compilation environment to a DefId\n     // for an external crate.\n     fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {\n-        for (local, &global) in self.cnum_map.borrow().iter_enumerated() {\n+        for (local, &global) in self.cnum_map.iter_enumerated() {\n             if global == did.krate {\n                 return Some(DefId {\n                     krate: local,\n@@ -1007,7 +1007,7 @@ impl<'a, 'tcx> CrateMetadata {\n             .enumerate()\n             .flat_map(|(i, link)| {\n                 let cnum = CrateNum::new(i + 1);\n-                link.map(|link| (self.cnum_map.borrow()[cnum], link))\n+                link.map(|link| (self.cnum_map[cnum], link))\n             })\n             .collect()\n     }"}]}