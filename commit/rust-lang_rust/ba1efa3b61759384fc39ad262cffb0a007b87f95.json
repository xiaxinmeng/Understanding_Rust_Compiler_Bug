{"sha": "ba1efa3b61759384fc39ad262cffb0a007b87f95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMWVmYTNiNjE3NTkzODRmYzM5YWQyNjJjZmZiMGEwMDdiODdmOTU=", "commit": {"author": {"name": "toidiu", "email": "toidiu@protonmail.com", "date": "2017-09-28T01:01:48Z"}, "committer": {"name": "toidiu", "email": "toidiu@protonmail.com", "date": "2017-10-16T18:26:17Z"}, "message": "added components for testing. added outlives test to the check_crate function of librustc_typeck", "tree": {"sha": "7ebd4ec4a1fed80227ef3222fd7e4c0516872238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ebd4ec4a1fed80227ef3222fd7e4c0516872238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba1efa3b61759384fc39ad262cffb0a007b87f95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1efa3b61759384fc39ad262cffb0a007b87f95", "html_url": "https://github.com/rust-lang/rust/commit/ba1efa3b61759384fc39ad262cffb0a007b87f95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba1efa3b61759384fc39ad262cffb0a007b87f95/comments", "author": null, "committer": null, "parents": [{"sha": "7c8a7221a4e3d926c419e1d681db450835733aef", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8a7221a4e3d926c419e1d681db450835733aef", "html_url": "https://github.com/rust-lang/rust/commit/7c8a7221a4e3d926c419e1d681db450835733aef"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "5f74102973170b76ebeb2448e33850bdb549db1f", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba1efa3b61759384fc39ad262cffb0a007b87f95/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1efa3b61759384fc39ad262cffb0a007b87f95/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=ba1efa3b61759384fc39ad262cffb0a007b87f95", "patch": "@@ -4679,4 +4679,5 @@ register_diagnostics! {\n     E0627, // yield statement outside of generator literal\n     E0632, // cannot provide explicit type parameters when `impl Trait` is used in\n            // argument position.\n+    E0628, // infer outlives\n }"}, {"sha": "ea4ce64e487c53877c6fb0f6b74efc5f208c6bd8", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba1efa3b61759384fc39ad262cffb0a007b87f95/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1efa3b61759384fc39ad262cffb0a007b87f95/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=ba1efa3b61759384fc39ad262cffb0a007b87f95", "patch": "@@ -289,6 +289,7 @@ pub fn provide(providers: &mut Providers) {\n     coherence::provide(providers);\n     check::provide(providers);\n     variance::provide(providers);\n+    outlives::provide(providers);\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n@@ -319,10 +320,10 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n              variance::test::test_variance(tcx));\n     })?;\n \n-//    tcx.sess.track_errors(|| {\n-//        time(time_passes, \"outlives testing\", ||\n-//            outlives::test::test_inferred_outlives(tcx));\n-//    })?;\n+    tcx.sess.track_errors(|| {\n+        time(time_passes, \"outlives testing\", ||\n+            outlives::test::test_inferred_outlives(tcx));\n+    })?;\n \n     time(time_passes, \"wf checking\", || check::check_wf_new(tcx))?;\n "}, {"sha": "1127028cbc8c7c052867a20667b29d3791480cb9", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba1efa3b61759384fc39ad262cffb0a007b87f95/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1efa3b61759384fc39ad262cffb0a007b87f95/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=ba1efa3b61759384fc39ad262cffb0a007b87f95", "patch": "@@ -10,13 +10,20 @@\n \n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TyCtxt};\n+use rustc::ty::maps::Providers;\n \n /// Code to write unit test for outlives.\n pub mod test;\n \n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        inferred_outlives_of,\n+        ..*providers\n+    };\n+}\n+\n //todo\n-pub fn inferred_outlives_of<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                  _def_id: DefId)\n+fn inferred_outlives_of<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>, _def_id: DefId)\n                                   -> Vec<ty::Predicate<'tcx>> {\n     Vec::new()\n }"}, {"sha": "665b3d57d9105e9307492962820b3f773366a3dd", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ba1efa3b61759384fc39ad262cffb0a007b87f95/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1efa3b61759384fc39ad262cffb0a007b87f95/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=ba1efa3b61759384fc39ad262cffb0a007b87f95", "patch": "@@ -8,34 +8,34 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//use rustc::hir;\n-//use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n \n-//pub fn test_outlives<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-//    tcx.hir.krate().visit_all_item_likes(&mut OutlivesTest { tcx });\n-//}\n+pub fn test_inferred_outlives<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    tcx.hir.krate().visit_all_item_likes(&mut OutlivesTest { tcx });\n+}\n \n struct OutlivesTest<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>\n }\n \n-//impl<'a, 'tcx> ItemLikeVisitor<'tcx> for OutlivesTest<'a, 'tcx> {\n-//    fn visit_item(&mut self, item: &'tcx hir::Item) {\n-//        let item_def_id = self.tcx.hir.local_def_id(item.id);\n-//\n-//        // For unit testing: check for a special \"rustc_outlives\"\n-//        // attribute and report an error with various results if found.\n-//        if self.tcx.has_attr(item_def_id, \"rustc_outlives\") {\n-//            let outlives_of = self.tcx.outlives_of(item_def_id);\n-//            span_err!(self.tcx.sess,\n-//                      item.span,\n-//                      E0208,\n-//                      \"{:?}\",\n-//                      outlives_of);\n-//        }\n-//    }\n-//\n-//    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) { }\n-//    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n-//}\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for OutlivesTest<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+        let item_def_id = self.tcx.hir.local_def_id(item.id);\n+\n+        // For unit testing: check for a special \"rustc_outlives\"\n+        // attribute and report an error with various results if found.\n+        if self.tcx.has_attr(item_def_id, \"rustc_outlives\") {\n+            let inferred_outlives_of = self.tcx.inferred_outlives_of(item_def_id);\n+            span_err!(self.tcx.sess,\n+                      item.span,\n+                      E0628,\n+                      \"{:?}\",\n+                      inferred_outlives_of);\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) { }\n+    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n+}"}]}