{"sha": "797cd34c7c996251816226dac369fece1587a416", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5N2NkMzRjN2M5OTYyNTE4MTYyMjZkYWMzNjlmZWNlMTU4N2E0MTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T15:00:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T15:00:37Z"}, "message": "Reduce feature flags", "tree": {"sha": "039046514e2623a5f692b846a52744a044d09be1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/039046514e2623a5f692b846a52744a044d09be1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/797cd34c7c996251816226dac369fece1587a416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/797cd34c7c996251816226dac369fece1587a416", "html_url": "https://github.com/rust-lang/rust/commit/797cd34c7c996251816226dac369fece1587a416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/797cd34c7c996251816226dac369fece1587a416/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "facdf56cf6ce8b5853775531734e97deeef87136", "url": "https://api.github.com/repos/rust-lang/rust/commits/facdf56cf6ce8b5853775531734e97deeef87136", "html_url": "https://github.com/rust-lang/rust/commit/facdf56cf6ce8b5853775531734e97deeef87136"}], "stats": {"total": 100, "additions": 48, "deletions": 52}, "files": [{"sha": "94627d35d28f6d5def4079583cbfef46a4f246a6", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/797cd34c7c996251816226dac369fece1587a416/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797cd34c7c996251816226dac369fece1587a416/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=797cd34c7c996251816226dac369fece1587a416", "patch": "@@ -9,24 +9,35 @@\n \n use rustc_hash::FxHashMap;\n \n+use crate::feature_flags::FeatureFlags;\n use lsp_types::TextDocumentClientCapabilities;\n use ra_flycheck::FlycheckConfig;\n-use ra_ide::InlayHintsConfig;\n+use ra_ide::{CompletionConfig, InlayHintsConfig};\n use ra_project_model::CargoFeatures;\n use serde::{Deserialize, Deserializer};\n \n #[derive(Debug, Clone)]\n pub struct Config {\n     pub publish_decorations: bool,\n+    pub publish_diagnostics: bool,\n+    pub notifications: NotificationsConfig,\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n     pub inlay_hints: InlayHintsConfig,\n+    pub completion: CompletionConfig,\n+    pub call_info_full: bool,\n     pub rustfmt: RustfmtConfig,\n     pub check: Option<FlycheckConfig>,\n     pub vscode_lldb: bool,\n     pub proc_macro_srv: Option<String>,\n }\n \n+#[derive(Debug, Clone)]\n+pub struct NotificationsConfig {\n+    pub workspace_loaded: bool,\n+    pub cargo_toml_not_found: bool,\n+}\n+\n #[derive(Debug, Clone)]\n pub enum RustfmtConfig {\n     Rustfmt {\n@@ -49,8 +60,14 @@ pub(crate) fn get_config(\n     config: &ServerConfig,\n     text_document_caps: Option<&TextDocumentClientCapabilities>,\n ) -> Config {\n+    let feature_flags = get_feature_flags(config);\n     Config {\n         publish_decorations: config.publish_decorations,\n+        publish_diagnostics: feature_flags.get(\"lsp.diagnostics\"),\n+        notifications: NotificationsConfig {\n+            workspace_loaded: feature_flags.get(\"notifications.workspace-loaded\"),\n+            cargo_toml_not_found: feature_flags.get(\"notifications.cargo-toml-not-found\"),\n+        },\n         supports_location_link: text_document_caps\n             .and_then(|it| it.definition)\n             .and_then(|it| it.link_support)\n@@ -65,6 +82,13 @@ pub(crate) fn get_config(\n             chaining_hints: config.inlay_hints_chaining,\n             max_length: config.inlay_hints_max_length,\n         },\n+        completion: CompletionConfig {\n+            enable_postfix_completions: feature_flags.get(\"completion.enable-postfix\"),\n+            add_call_parenthesis: feature_flags.get(\"completion.insertion.add-call-parenthesis\"),\n+            add_call_argument_snippets: feature_flags\n+                .get(\"completion.insertion.add-argument-snippets\"),\n+        },\n+        call_info_full: feature_flags.get(\"call-info.full\"),\n         check: if config.cargo_watch_enable {\n             Some(FlycheckConfig::CargoCommand {\n                 command: config.cargo_watch_command.clone(),\n@@ -80,6 +104,17 @@ pub(crate) fn get_config(\n     }\n }\n \n+fn get_feature_flags(config: &ServerConfig) -> FeatureFlags {\n+    let mut ff = FeatureFlags::default();\n+    for (flag, &value) in &config.feature_flags {\n+        if ff.set(flag.as_str(), value).is_err() {\n+            log::error!(\"unknown feature flag: {:?}\", flag);\n+        }\n+    }\n+    log::info!(\"feature_flags: {:#?}\", ff);\n+    ff\n+}\n+\n /// Client provided initialization options\n #[derive(Deserialize, Clone, Debug, PartialEq, Eq)]\n #[serde(rename_all = \"camelCase\", default)]"}, {"sha": "8f89fb7ea2a25eeae8aa2b0e377334a71deb7748", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/797cd34c7c996251816226dac369fece1587a416/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797cd34c7c996251816226dac369fece1587a416/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=797cd34c7c996251816226dac369fece1587a416", "patch": "@@ -33,7 +33,6 @@ use threadpool::ThreadPool;\n use crate::{\n     config::get_config,\n     diagnostics::DiagnosticTask,\n-    feature_flags::FeatureFlags,\n     main_loop::{\n         pending_requests::{PendingRequest, PendingRequests},\n         subscriptions::Subscriptions,\n@@ -66,22 +65,6 @@ impl fmt::Display for LspError {\n \n impl Error for LspError {}\n \n-fn get_feature_flags(config: &ServerConfig, connection: &Connection) -> FeatureFlags {\n-    let mut ff = FeatureFlags::default();\n-    for (flag, &value) in &config.feature_flags {\n-        if ff.set(flag.as_str(), value).is_err() {\n-            log::error!(\"unknown feature flag: {:?}\", flag);\n-            show_message(\n-                req::MessageType::Error,\n-                format!(\"unknown feature flag: {:?}\", flag),\n-                &connection.sender,\n-            );\n-        }\n-    }\n-    log::info!(\"feature_flags: {:#?}\", ff);\n-    ff\n-}\n-\n pub fn main_loop(\n     ws_roots: Vec<PathBuf>,\n     client_caps: ClientCapabilities,\n@@ -112,8 +95,8 @@ pub fn main_loop(\n     let text_document_caps = client_caps.text_document.as_ref();\n     let mut loop_state = LoopState::default();\n     let mut world_state = {\n-        let feature_flags = get_feature_flags(&config, &connection);\n-\n+        // TODO: refactor\n+        let new_config = get_config(&config, text_document_caps);\n         // FIXME: support dynamic workspace loading.\n         let workspaces = {\n             let mut loaded_workspaces = Vec::new();\n@@ -131,7 +114,7 @@ pub fn main_loop(\n                         if let Some(ra_project_model::CargoTomlNotFoundError { .. }) =\n                             e.downcast_ref()\n                         {\n-                            if !feature_flags.get(\"notifications.cargo-toml-not-found\") {\n+                            if !new_config.notifications.cargo_toml_not_found {\n                                 continue;\n                             }\n                         }\n@@ -180,8 +163,7 @@ pub fn main_loop(\n             config.lru_capacity,\n             &globs,\n             Watch(!config.use_client_watching),\n-            get_config(&config, text_document_caps),\n-            feature_flags,\n+            new_config,\n         )\n     };\n \n@@ -406,7 +388,6 @@ fn loop_turn(\n                             world_state.update_configuration(\n                                 new_config.lru_capacity,\n                                 get_config(&new_config, text_document_caps),\n-                                get_feature_flags(&new_config, connection),\n                             );\n                         }\n                         (None, Some(Err(e))) => {\n@@ -441,8 +422,8 @@ fn loop_turn(\n         });\n     }\n \n-    let show_progress = !loop_state.workspace_loaded\n-        && world_state.feature_flags.get(\"notifications.workspace-loaded\");\n+    let show_progress =\n+        !loop_state.workspace_loaded && world_state.config.notifications.workspace_loaded;\n \n     if !loop_state.workspace_loaded\n         && loop_state.roots_scanned == loop_state.roots_total\n@@ -930,7 +911,7 @@ fn update_file_notifications_on_threadpool(\n     subscriptions: Vec<FileId>,\n ) {\n     log::trace!(\"updating notifications for {:?}\", subscriptions);\n-    let publish_diagnostics = world.feature_flags.get(\"lsp.diagnostics\");\n+    let publish_diagnostics = world.config.publish_diagnostics;\n     pool.execute(move || {\n         for file_id in subscriptions {\n             if publish_diagnostics {"}, {"sha": "d0f64f007a0199aab9cd96a8133d207e73e97839", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/797cd34c7c996251816226dac369fece1587a416/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797cd34c7c996251816226dac369fece1587a416/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=797cd34c7c996251816226dac369fece1587a416", "patch": "@@ -19,8 +19,8 @@ use lsp_types::{\n     TextEdit, WorkspaceEdit,\n };\n use ra_ide::{\n-    Assist, AssistId, CompletionConfig, FileId, FilePosition, FileRange, Query, RangeInfo,\n-    Runnable, RunnableKind, SearchScope,\n+    Assist, AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n+    SearchScope,\n };\n use ra_prof::profile;\n use ra_syntax::{AstNode, SyntaxKind, TextRange, TextUnit};\n@@ -426,15 +426,7 @@ pub fn handle_completion(\n         return Ok(None);\n     }\n \n-    let config = CompletionConfig {\n-        enable_postfix_completions: world.feature_flags.get(\"completion.enable-postfix\"),\n-        add_call_parenthesis: world.feature_flags.get(\"completion.insertion.add-call-parenthesis\"),\n-        add_call_argument_snippets: world\n-            .feature_flags\n-            .get(\"completion.insertion.add-argument-snippets\"),\n-    };\n-\n-    let items = match world.analysis().completions(position, &config)? {\n+    let items = match world.analysis().completions(position, &world.config.completion)? {\n         None => return Ok(None),\n         Some(items) => items,\n     };\n@@ -471,7 +463,7 @@ pub fn handle_signature_help(\n     let _p = profile(\"handle_signature_help\");\n     let position = params.try_conv_with(&world)?;\n     if let Some(call_info) = world.analysis().call_info(position)? {\n-        let concise = !world.feature_flags.get(\"call-info.full\");\n+        let concise = !world.config.call_info_full;\n         let mut active_parameter = call_info.active_parameter.map(|it| it as i64);\n         if concise && call_info.signature.has_self_param {\n             active_parameter = active_parameter.map(|it| it.saturating_sub(1));"}, {"sha": "df1b7ceeb09102e59fb3c376f01b6cd5e6600210", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/797cd34c7c996251816226dac369fece1587a416/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797cd34c7c996251816226dac369fece1587a416/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=797cd34c7c996251816226dac369fece1587a416", "patch": "@@ -23,7 +23,6 @@ use stdx::format_to;\n use crate::{\n     config::Config,\n     diagnostics::{CheckFixes, DiagnosticCollection},\n-    feature_flags::FeatureFlags,\n     main_loop::pending_requests::{CompletedRequest, LatestRequests},\n     vfs_glob::{Glob, RustPackageFilterBuilder},\n     LspError, Result,\n@@ -59,7 +58,6 @@ fn create_flycheck(workspaces: &[ProjectWorkspace], config: &Config) -> Option<F\n #[derive(Debug)]\n pub struct WorldState {\n     pub config: Config,\n-    pub feature_flags: Arc<FeatureFlags>,\n     pub roots: Vec<PathBuf>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis_host: AnalysisHost,\n@@ -73,7 +71,6 @@ pub struct WorldState {\n /// An immutable snapshot of the world's state at a point in time.\n pub struct WorldSnapshot {\n     pub config: Config,\n-    pub feature_flags: Arc<FeatureFlags>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis: Analysis,\n     pub latest_requests: Arc<RwLock<LatestRequests>>,\n@@ -89,7 +86,6 @@ impl WorldState {\n         exclude_globs: &[Glob],\n         watch: Watch,\n         config: Config,\n-        feature_flags: FeatureFlags,\n     ) -> WorldState {\n         let mut change = AnalysisChange::new();\n \n@@ -197,7 +193,6 @@ impl WorldState {\n         analysis_host.apply_change(change);\n         WorldState {\n             config: config,\n-            feature_flags: Arc::new(feature_flags),\n             roots: folder_roots,\n             workspaces: Arc::new(workspaces),\n             analysis_host,\n@@ -209,13 +204,7 @@ impl WorldState {\n         }\n     }\n \n-    pub fn update_configuration(\n-        &mut self,\n-        lru_capacity: Option<usize>,\n-        config: Config,\n-        feature_flags: FeatureFlags,\n-    ) {\n-        self.feature_flags = Arc::new(feature_flags);\n+    pub fn update_configuration(&mut self, lru_capacity: Option<usize>, config: Config) {\n         self.analysis_host.update_lru_capacity(lru_capacity);\n         self.flycheck = create_flycheck(&self.workspaces, &config);\n         self.config = config;\n@@ -275,7 +264,6 @@ impl WorldState {\n     pub fn snapshot(&self) -> WorldSnapshot {\n         WorldSnapshot {\n             config: self.config.clone(),\n-            feature_flags: Arc::clone(&self.feature_flags),\n             workspaces: Arc::clone(&self.workspaces),\n             analysis: self.analysis_host.analysis(),\n             vfs: Arc::clone(&self.vfs),"}]}