{"sha": "5202b0ecbaab2d44e886828f0e30dee67fad0c5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMDJiMGVjYmFhYjJkNDRlODg2ODI4ZjBlMzBkZWU2N2ZhZDBjNWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-11T12:39:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-11T12:39:33Z"}, "message": "Merge #2523\n\n2523: Fixed #2250 r=matklad a=gab-umich\n\nBugfix Debriefing:\r\n\r\n1. Tuple in type annotation expands correctly;\r\n2. Expansion will prefer the following delimiter when possible. This involves modification of previous test cases to match current behaviour. \r\n3. New regression tests added to verify the consistency between tuple expansion in type annotation and tuple expansion in rvalue. Both should behave exactly the same. \n\nCo-authored-by: Gabriel Luo <luogm@umich.edu>", "tree": {"sha": "b5a6ae0efb25d4f9a4cb69e626d0600838ccd842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a6ae0efb25d4f9a4cb69e626d0600838ccd842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5202b0ecbaab2d44e886828f0e30dee67fad0c5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd8OOFCRBK7hj4Ov3rIwAAdHIIABdTLNiMHVk62P0hPGfDvDrQ\nvJ3lKr90vDKnLXzdl9J0sP5QCrqUjDdDD39pvCKsdDrc2WsBXyzCnhIeM19DOjs6\ng5M3HG+m1c1jcAgXQz10k2MiVobfi/xYjkEjM+1WJV/fwYtk4aBeXo7jhc98d2oM\nySbAjXuGEaupiOBsrydOXVH9Ig1nBvp23UXWOKgea0BfqWyrKUpuhKFAGXE4ZK79\nQAs2UXspxcEEjNZ8HVloPWIFo8DdjCyEXzHvrult++ETYLZGQxJ4ygIvT6Z+HLaz\n3MvOC8dJLZq+trLKt6SQa3cnmYMCGh2PkWqO6cRwgF8ZF0Jr0zAtrf6gOIMQimc=\n=o8gp\n-----END PGP SIGNATURE-----\n", "payload": "tree b5a6ae0efb25d4f9a4cb69e626d0600838ccd842\nparent ee904594af174866cfa10474fd8fd3f23580b6af\nparent 20ccabc01de7306f44e0b2a460152f0c97f19d76\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576067973 +0000\ncommitter GitHub <noreply@github.com> 1576067973 +0000\n\nMerge #2523\n\n2523: Fixed #2250 r=matklad a=gab-umich\n\nBugfix Debriefing:\r\n\r\n1. Tuple in type annotation expands correctly;\r\n2. Expansion will prefer the following delimiter when possible. This involves modification of previous test cases to match current behaviour. \r\n3. New regression tests added to verify the consistency between tuple expansion in type annotation and tuple expansion in rvalue. Both should behave exactly the same. \n\nCo-authored-by: Gabriel Luo <luogm@umich.edu>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5202b0ecbaab2d44e886828f0e30dee67fad0c5c", "html_url": "https://github.com/rust-lang/rust/commit/5202b0ecbaab2d44e886828f0e30dee67fad0c5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5202b0ecbaab2d44e886828f0e30dee67fad0c5c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee904594af174866cfa10474fd8fd3f23580b6af", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee904594af174866cfa10474fd8fd3f23580b6af", "html_url": "https://github.com/rust-lang/rust/commit/ee904594af174866cfa10474fd8fd3f23580b6af"}, {"sha": "20ccabc01de7306f44e0b2a460152f0c97f19d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ccabc01de7306f44e0b2a460152f0c97f19d76", "html_url": "https://github.com/rust-lang/rust/commit/20ccabc01de7306f44e0b2a460152f0c97f19d76"}], "stats": {"total": 78, "additions": 66, "deletions": 12}, "files": [{"sha": "c096ca6ae44949033e7d58b410285bf3ca1550a9", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 66, "deletions": 12, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5202b0ecbaab2d44e886828f0e30dee67fad0c5c/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5202b0ecbaab2d44e886828f0e30dee67fad0c5c/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=5202b0ecbaab2d44e886828f0e30dee67fad0c5c", "patch": "@@ -34,6 +34,7 @@ fn try_extend_selection(root: &SyntaxNode, range: TextRange) -> Option<TextRange\n         ARG_LIST,\n         ARRAY_EXPR,\n         TUPLE_EXPR,\n+        TUPLE_TYPE,\n         WHERE_CLAUSE,\n     ];\n \n@@ -174,12 +175,7 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n         TYPE_BOUND => T![+],\n         _ => T![,],\n     };\n-    if let Some(delimiter_node) = nearby_delimiter(delimiter, node, Direction::Prev) {\n-        return Some(TextRange::from_to(\n-            delimiter_node.text_range().start(),\n-            node.text_range().end(),\n-        ));\n-    }\n+\n     if let Some(delimiter_node) = nearby_delimiter(delimiter, node, Direction::Next) {\n         // Include any following whitespace when delimiter is after list item.\n         let final_node = delimiter_node\n@@ -190,6 +186,12 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n \n         return Some(TextRange::from_to(node.text_range().start(), final_node.text_range().end()));\n     }\n+    if let Some(delimiter_node) = nearby_delimiter(delimiter, node, Direction::Prev) {\n+        return Some(TextRange::from_to(\n+            delimiter_node.text_range().start(),\n+            node.text_range().end(),\n+        ));\n+    }\n \n     None\n }\n@@ -250,14 +252,14 @@ mod tests {\n     fn test_extend_selection_list() {\n         do_check(r#\"fn foo(<|>x: i32) {}\"#, &[\"x\", \"x: i32\"]);\n         do_check(r#\"fn foo(<|>x: i32, y: i32) {}\"#, &[\"x\", \"x: i32\", \"x: i32, \"]);\n-        do_check(r#\"fn foo(<|>x: i32,y: i32) {}\"#, &[\"x\", \"x: i32\", \"x: i32,\"]);\n+        do_check(r#\"fn foo(<|>x: i32,y: i32) {}\"#, &[\"x\", \"x: i32\", \"x: i32,\", \"(x: i32,y: i32)\"]);\n         do_check(r#\"fn foo(x: i32, <|>y: i32) {}\"#, &[\"y\", \"y: i32\", \", y: i32\"]);\n-        do_check(r#\"fn foo(x: i32, <|>y: i32, ) {}\"#, &[\"y\", \"y: i32\", \", y: i32\"]);\n+        do_check(r#\"fn foo(x: i32, <|>y: i32, ) {}\"#, &[\"y\", \"y: i32\", \"y: i32, \"]);\n         do_check(r#\"fn foo(x: i32,<|>y: i32) {}\"#, &[\"y\", \"y: i32\", \",y: i32\"]);\n \n         do_check(r#\"const FOO: [usize; 2] = [ 22<|> , 33];\"#, &[\"22\", \"22 , \"]);\n         do_check(r#\"const FOO: [usize; 2] = [ 22 , 33<|>];\"#, &[\"33\", \", 33\"]);\n-        do_check(r#\"const FOO: [usize; 2] = [ 22 , 33<|> ,];\"#, &[\"33\", \", 33\"]);\n+        do_check(r#\"const FOO: [usize; 2] = [ 22 , 33<|> ,];\"#, &[\"33\", \"33 ,\", \"[ 22 , 33 ,]\"]);\n \n         do_check(r#\"fn main() { (1, 2<|>) }\"#, &[\"2\", \", 2\", \"(1, 2)\"]);\n \n@@ -276,7 +278,7 @@ const FOO: [usize; 2] = [\n     22\n     , 33<|>,\n ]\"#,\n-            &[\"33\", \", 33\"],\n+            &[\"33\", \"33,\"],\n         );\n     }\n \n@@ -424,7 +426,7 @@ fn foo<R>()\n         do_check(r#\"fn foo<T>() where T: <|>Copy +Display\"#, &[\"Copy\", \"Copy +\"]);\n         do_check(r#\"fn foo<T>() where T: <|>Copy+Display\"#, &[\"Copy\", \"Copy+\"]);\n         do_check(r#\"fn foo<T>() where T: Copy + <|>Display\"#, &[\"Display\", \"+ Display\"]);\n-        do_check(r#\"fn foo<T>() where T: Copy + <|>Display + Sync\"#, &[\"Display\", \"+ Display\"]);\n+        do_check(r#\"fn foo<T>() where T: Copy + <|>Display + Sync\"#, &[\"Display\", \"Display + \"]);\n         do_check(r#\"fn foo<T>() where T: Copy +<|>Display\"#, &[\"Display\", \"+Display\"]);\n     }\n \n@@ -435,7 +437,7 @@ fn foo<R>()\n         do_check(r#\"fn foo<T: <|>Copy +Display>() {}\"#, &[\"Copy\", \"Copy +\"]);\n         do_check(r#\"fn foo<T: <|>Copy+Display>() {}\"#, &[\"Copy\", \"Copy+\"]);\n         do_check(r#\"fn foo<T: Copy + <|>Display>() {}\"#, &[\"Display\", \"+ Display\"]);\n-        do_check(r#\"fn foo<T: Copy + <|>Display + Sync>() {}\"#, &[\"Display\", \"+ Display\"]);\n+        do_check(r#\"fn foo<T: Copy + <|>Display + Sync>() {}\"#, &[\"Display\", \"Display + \"]);\n         do_check(r#\"fn foo<T: Copy +<|>Display>() {}\"#, &[\"Display\", \"+Display\"]);\n         do_check(\n             r#\"fn foo<T: Copy<|> + Display, U: Copy>() {}\"#,\n@@ -449,4 +451,56 @@ fn foo<R>()\n             ],\n         );\n     }\n+\n+    #[test]\n+    fn test_extend_selection_on_tuple_in_type() {\n+        do_check(\n+            r#\"fn main() { let _: (krate, <|>_crate_def_map, module_id) = (); }\"#,\n+            &[\"_crate_def_map\", \"_crate_def_map, \", \"(krate, _crate_def_map, module_id)\"],\n+        );\n+        // white space variations\n+        do_check(\n+            r#\"fn main() { let _: (krate,<|>_crate_def_map,module_id) = (); }\"#,\n+            &[\"_crate_def_map\", \"_crate_def_map,\", \"(krate,_crate_def_map,module_id)\"],\n+        );\n+        do_check(\n+            r#\"\n+fn main() { let _: (\n+    krate,\n+    _crate<|>_def_map,\n+    module_id\n+) = (); }\"#,\n+            &[\n+                \"_crate_def_map\",\n+                \"_crate_def_map,\",\n+                \"(\\n    krate,\\n    _crate_def_map,\\n    module_id\\n)\",\n+            ],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extend_selection_on_tuple_in_rvalue() {\n+        do_check(\n+            r#\"fn main() { let var = (krate, _crate_def_map<|>, module_id); }\"#,\n+            &[\"_crate_def_map\", \"_crate_def_map, \", \"(krate, _crate_def_map, module_id)\"],\n+        );\n+        // white space variations\n+        do_check(\n+            r#\"fn main() { let var = (krate,_crate<|>_def_map,module_id); }\"#,\n+            &[\"_crate_def_map\", \"_crate_def_map,\", \"(krate,_crate_def_map,module_id)\"],\n+        );\n+        do_check(\n+            r#\"\n+fn main() { let var = (\n+    krate,\n+    _crate_def_map<|>,\n+    module_id\n+); }\"#,\n+            &[\n+                \"_crate_def_map\",\n+                \"_crate_def_map,\",\n+                \"(\\n    krate,\\n    _crate_def_map,\\n    module_id\\n)\",\n+            ],\n+        );\n+    }\n }"}]}