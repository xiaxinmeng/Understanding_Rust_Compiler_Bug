{"sha": "2734636c532101565b1a4c4715790d4cc910ad47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MzQ2MzZjNTMyMTAxNTY1YjFhNGM0NzE1NzkwZDRjYzkxMGFkNDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T12:40:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T12:40:52Z"}, "message": "update ide_api to new hir", "tree": {"sha": "e928bd977376f1cbd6b14c15fbe10ade7d09d709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e928bd977376f1cbd6b14c15fbe10ade7d09d709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2734636c532101565b1a4c4715790d4cc910ad47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2734636c532101565b1a4c4715790d4cc910ad47", "html_url": "https://github.com/rust-lang/rust/commit/2734636c532101565b1a4c4715790d4cc910ad47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2734636c532101565b1a4c4715790d4cc910ad47/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1754dd9fdd1bf7d3d72aa2bcb25f33fd8885cd7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1754dd9fdd1bf7d3d72aa2bcb25f33fd8885cd7c", "html_url": "https://github.com/rust-lang/rust/commit/1754dd9fdd1bf7d3d72aa2bcb25f33fd8885cd7c"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "3aef479d97a6ecf64a8e21f16fc1304a1e86c932", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2734636c532101565b1a4c4715790d4cc910ad47/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2734636c532101565b1a4c4715790d4cc910ad47/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=2734636c532101565b1a4c4715790d4cc910ad47", "patch": "@@ -44,6 +44,8 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n             }\n             _ => return,\n         },\n+\n+        hir::ModuleDef::Function(_) => return,\n     };\n }\n "}, {"sha": "578af6e5b3b839043f19dbda25b59e8053ecb54a", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2734636c532101565b1a4c4715790d4cc910ad47/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2734636c532101565b1a4c4715790d4cc910ad47/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=2734636c532101565b1a4c4715790d4cc910ad47", "patch": "@@ -127,7 +127,7 @@ impl<'a> CompletionContext<'a> {\n             .ancestors()\n             .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n             .find_map(ast::FnDef::cast);\n-        match (&self.module, self.function_syntax) {\n+        match (self.module, self.function_syntax) {\n             (Some(module), Some(fn_def)) => {\n                 let function = source_binder::function_from_module(self.db, module, fn_def);\n                 self.function = Some(function);"}, {"sha": "5b2ba7e4a472a0b5cfa892f610cb5b83d69dedfa", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2734636c532101565b1a4c4715790d4cc910ad47/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2734636c532101565b1a4c4715790d4cc910ad47/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=2734636c532101565b1a4c4715790d4cc910ad47", "patch": "@@ -219,14 +219,14 @@ impl Builder {\n         };\n         let (kind, docs) = match def {\n             hir::ModuleDef::Module(_) => (CompletionItemKind::Module, None),\n+            hir::ModuleDef::Function(func) => return self.from_function(ctx, func),\n             hir::ModuleDef::Def(def_id) => match def_id.resolve(ctx.db) {\n                 hir::Def::Struct(it) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n                 hir::Def::Enum(it) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n                 hir::Def::Trait(it) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n                 hir::Def::Type(it) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n                 hir::Def::Const(it) => (CompletionItemKind::Const, it.docs(ctx.db)),\n                 hir::Def::Static(it) => (CompletionItemKind::Static, it.docs(ctx.db)),\n-                hir::Def::Function(function) => return self.from_function(ctx, function),\n                 _ => return self,\n             },\n         };"}, {"sha": "46bdde00d73339cd98388bd70d1da4539c9f5578", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2734636c532101565b1a4c4715790d4cc910ad47/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2734636c532101565b1a4c4715790d4cc910ad47/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=2734636c532101565b1a4c4715790d4cc910ad47", "patch": "@@ -63,13 +63,11 @@ pub(crate) fn reference_definition(\n             let infer_result = function.infer(db);\n             let syntax_mapping = function.body_syntax_mapping(db);\n             let expr = ast::Expr::cast(method_call.syntax()).unwrap();\n-            if let Some(def_id) = syntax_mapping\n+            if let Some(func) = syntax_mapping\n                 .node_expr(expr)\n                 .and_then(|it| infer_result.method_resolution(it))\n             {\n-                if let Some(target) = NavigationTarget::from_def(db, hir::ModuleDef::Def(def_id)) {\n-                    return Exact(target);\n-                }\n+                return Exact(NavigationTarget::from_function(db, func));\n             };\n         }\n     }"}, {"sha": "19cea2fd6756cf309bdea2153ae693c53d76c316", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2734636c532101565b1a4c4715790d4cc910ad47/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2734636c532101565b1a4c4715790d4cc910ad47/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=2734636c532101565b1a4c4715790d4cc910ad47", "patch": "@@ -96,6 +96,11 @@ impl NavigationTarget {\n         NavigationTarget::from_module(db, module)\n     }\n \n+    pub(crate) fn from_function(db: &RootDatabase, func: hir::Function) -> NavigationTarget {\n+        let (file_id, fn_def) = func.source(db);\n+        NavigationTarget::from_named(file_id.original_file(db), &*fn_def)\n+    }\n+\n     // TODO once Def::Item is gone, this should be able to always return a NavigationTarget\n     pub(crate) fn from_def(\n         db: &RootDatabase,\n@@ -106,6 +111,9 @@ impl NavigationTarget {\n             hir::ModuleDef::Module(module) => {\n                 return Some(NavigationTarget::from_module(db, module));\n             }\n+            hir::ModuleDef::Function(func) => {\n+                return Some(NavigationTarget::from_function(db, func));\n+            }\n         };\n \n         let res = match def {\n@@ -121,10 +129,6 @@ impl NavigationTarget {\n                 let (file_id, node) = ev.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n-            Def::Function(f) => {\n-                let (file_id, node) = f.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n-            }\n             Def::Trait(f) => {\n                 let (file_id, node) = f.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)"}]}