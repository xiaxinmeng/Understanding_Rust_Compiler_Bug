{"sha": "92638ef0cb753b2bb25b9cec8b6a1a8dce581327", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNjM4ZWYwY2I3NTNiMmJiMjViOWNlYzhiNmExYThkY2U1ODEzMjc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-07T04:42:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-07T04:42:29Z"}, "message": "Rollup merge of #56000 - hug-dev:armv8m.main, r=alexcrichton\n\nAdd Armv8-M Mainline targets\n\nThis commit enables the Armv8-M Mainline architecture profile.\nIt adds two targets:\n  - `thumbv8m.main-none-eabi`\n  - `thumbv8m.main-none-eabihf`\n\nThe second one uses the Floating Point Unit for floating point\noperations. It mainly targets the Cortex-M33 processor, which\ncan have the optional Floating Point Unit extension.\n\nIt follows #55041 which does it for Baseline. I will rebase this branch on top of it when it is merged to not create conflicts as we have some files in common. To make it work, it still relies on the Cargo change to be merged (accepting \".\" in target names, rust-lang/cargo#6255).\n\nThe goal would also be to add this target in the CI so that the `core` library is available for everybody. To do this, some changes will be needed to compile successfully the needed libraries:\n\n* `cc-rs` needs to be updated to allow compiling C code for Armv8-M architectures profiles. It is only a few lines to add [here](https://github.com/alexcrichton/cc-rs/blob/a76611ad9836fa8c44fa8220a1d2a96dd3b7d4b6/src/lib.rs#L1299).\n* Some assembly files in `builtins` in `compiler-rt` were not assembling for Armv8-M Mainline. I sent changes [upstream](https://reviews.llvm.org/D51854) to that project to fix that. The Rust version of `compiler-rt` will have to be updated to contain [that commit](https://github.com/llvm-mirror/compiler-rt/commit/a34cdf8bb498dc2f5dd415542f8e83261d2eeb88).\n\nI tested it using the [Musca-A Test Chip board](https://developer.arm.com/products/system-design/development-boards/iot-test-chips-and-boards/musca-a-test-chip-board) but more intensively on the [Armv8-M FVP](https://developer.arm.com/products/system-design/fixed-virtual-platforms) (emulation platform). I am going to try to release my test code soon, once I tidy it up :+1:", "tree": {"sha": "3e3d3d9f15b9cdade7987dac45162f04898d9973", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e3d3d9f15b9cdade7987dac45162f04898d9973"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92638ef0cb753b2bb25b9cec8b6a1a8dce581327", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCfo1CRBK7hj4Ov3rIwAAdHIIACBbf9RIlWRiMxOWLlHQEVba\nhMEHVsztpO49U4ZKowQKlkCBvs0uwoqxTcWuIfJfKwddiGmHqE5p43uidOUSwkfX\nEQjTmx3ihdcJ2jPHuI67O1OnM5th2mLYlPVIuA+Avnz4B8oL526KeUApxnKl5sGF\nzZPFaP+YhYP+EgL51ubXkmC2omrswRVpq7rglyDsvPql3P6gvDDWNxmLkxY9MqI8\nnPQPdBH78gILwoXBOxp0f6axqcKTme0uDZp0mPqK3pEDr4b9E+FIAzxFGrBWEkfD\n6CSpv0nFa6NYKpL6z7POumLAfnnusGqC9ClxXI1P07zLzW7PxbSYLrT4qk+0jms=\n=qjrZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e3d3d9f15b9cdade7987dac45162f04898d9973\nparent a2fb99bc17527798aeeef1d7ccc61811a9362131\nparent 0f47c2a078588f4e9d118f7039dc3d10985b68bd\nauthor kennytm <kennytm@gmail.com> 1544157749 +0800\ncommitter GitHub <noreply@github.com> 1544157749 +0800\n\nRollup merge of #56000 - hug-dev:armv8m.main, r=alexcrichton\n\nAdd Armv8-M Mainline targets\n\nThis commit enables the Armv8-M Mainline architecture profile.\nIt adds two targets:\n  - `thumbv8m.main-none-eabi`\n  - `thumbv8m.main-none-eabihf`\n\nThe second one uses the Floating Point Unit for floating point\noperations. It mainly targets the Cortex-M33 processor, which\ncan have the optional Floating Point Unit extension.\n\nIt follows #55041 which does it for Baseline. I will rebase this branch on top of it when it is merged to not create conflicts as we have some files in common. To make it work, it still relies on the Cargo change to be merged (accepting \".\" in target names, rust-lang/cargo#6255).\n\nThe goal would also be to add this target in the CI so that the `core` library is available for everybody. To do this, some changes will be needed to compile successfully the needed libraries:\n\n* `cc-rs` needs to be updated to allow compiling C code for Armv8-M architectures profiles. It is only a few lines to add [here](https://github.com/alexcrichton/cc-rs/blob/a76611ad9836fa8c44fa8220a1d2a96dd3b7d4b6/src/lib.rs#L1299).\n* Some assembly files in `builtins` in `compiler-rt` were not assembling for Armv8-M Mainline. I sent changes [upstream](https://reviews.llvm.org/D51854) to that project to fix that. The Rust version of `compiler-rt` will have to be updated to contain [that commit](https://github.com/llvm-mirror/compiler-rt/commit/a34cdf8bb498dc2f5dd415542f8e83261d2eeb88).\n\nI tested it using the [Musca-A Test Chip board](https://developer.arm.com/products/system-design/development-boards/iot-test-chips-and-boards/musca-a-test-chip-board) but more intensively on the [Armv8-M FVP](https://developer.arm.com/products/system-design/fixed-virtual-platforms) (emulation platform). I am going to try to release my test code soon, once I tidy it up :+1:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92638ef0cb753b2bb25b9cec8b6a1a8dce581327", "html_url": "https://github.com/rust-lang/rust/commit/92638ef0cb753b2bb25b9cec8b6a1a8dce581327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92638ef0cb753b2bb25b9cec8b6a1a8dce581327/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2fb99bc17527798aeeef1d7ccc61811a9362131", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fb99bc17527798aeeef1d7ccc61811a9362131", "html_url": "https://github.com/rust-lang/rust/commit/a2fb99bc17527798aeeef1d7ccc61811a9362131"}, {"sha": "0f47c2a078588f4e9d118f7039dc3d10985b68bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f47c2a078588f4e9d118f7039dc3d10985b68bd", "html_url": "https://github.com/rust-lang/rust/commit/0f47c2a078588f4e9d118f7039dc3d10985b68bd"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "a9aa721f5c3a7f534f8ba5ce15fe5dbc56203668", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92638ef0cb753b2bb25b9cec8b6a1a8dce581327/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92638ef0cb753b2bb25b9cec8b6a1a8dce581327/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=92638ef0cb753b2bb25b9cec8b6a1a8dce581327", "patch": "@@ -400,6 +400,8 @@ supported_targets! {\n     (\"thumbv7em-none-eabi\", thumbv7em_none_eabi),\n     (\"thumbv7em-none-eabihf\", thumbv7em_none_eabihf),\n     (\"thumbv8m.base-none-eabi\", thumbv8m_base_none_eabi),\n+    (\"thumbv8m.main-none-eabi\", thumbv8m_main_none_eabi),\n+    (\"thumbv8m.main-none-eabihf\", thumbv8m_main_none_eabihf),\n \n     (\"msp430-none-elf\", msp430_none_elf),\n "}, {"sha": "a5c4b8925e248e89cac7a7dc1d36d8744bc94df4", "filename": "src/librustc_target/spec/thumb_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92638ef0cb753b2bb25b9cec8b6a1a8dce581327/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92638ef0cb753b2bb25b9cec8b6a1a8dce581327/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs?ref=92638ef0cb753b2bb25b9cec8b6a1a8dce581327", "patch": "@@ -18,6 +18,7 @@\n // - Cortex-M4(F)\n // - Cortex-M7(F)\n // - Cortex-M23\n+// - Cortex-M33\n //\n // We have opted for these instead of one target per processor (e.g. `cortex-m0`, `cortex-m3`,\n // etc) because the differences between some processors like the cortex-m0 and cortex-m1 are almost"}, {"sha": "6dc203e81bf3f60eb1f2617d5690a8dc005413de", "filename": "src/librustc_target/spec/thumbv8m_main_none_eabi.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/92638ef0cb753b2bb25b9cec8b6a1a8dce581327/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92638ef0cb753b2bb25b9cec8b6a1a8dce581327/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabi.rs?ref=92638ef0cb753b2bb25b9cec8b6a1a8dce581327", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Targets the Cortex-M33 processor (Armv8-M Mainline architecture profile),\n+// without the Floating Point extension.\n+\n+use spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"thumbv8m.main-none-eabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+\n+        options: TargetOptions {\n+            max_atomic_width: Some(32),\n+            .. super::thumb_base::opts()\n+        },\n+    })\n+}"}, {"sha": "dc7728c2bd5001e617b45cc04609d0ecfbe63352", "filename": "src/librustc_target/spec/thumbv8m_main_none_eabihf.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/92638ef0cb753b2bb25b9cec8b6a1a8dce581327/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92638ef0cb753b2bb25b9cec8b6a1a8dce581327/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabihf.rs?ref=92638ef0cb753b2bb25b9cec8b6a1a8dce581327", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Targets the Cortex-M33 processor (Armv8-M Mainline architecture profile),\n+// with the Floating Point extension.\n+\n+use spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"thumbv8m.main-none-eabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+\n+        options: TargetOptions {\n+            // If the Floating Point extension is implemented in the Cortex-M33\n+            // processor, the Cortex-M33 Technical Reference Manual states that\n+            // the FPU uses the FPv5 architecture, single-precision instructions\n+            // and 16 D registers.\n+            // These parameters map to the following LLVM features.\n+            features: \"+fp-armv8,+fp-only-sp,+d16\".to_string(),\n+            max_atomic_width: Some(32),\n+            .. super::thumb_base::opts()\n+        },\n+    })\n+}"}]}