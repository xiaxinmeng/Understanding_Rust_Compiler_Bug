{"sha": "6ee9712cd44a9b19132413abfe39d42720724dc6", "node_id": "C_kwDOAAsO6NoAKDZlZTk3MTJjZDQ0YTliMTkxMzI0MTNhYmZlMzlkNDI3MjA3MjRkYzY", "commit": {"author": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-11-17T09:29:32Z"}, "committer": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-11-17T09:58:47Z"}, "message": "Use custom entry name in cranelift\n\nThis is a continuation of 9f0a8620bd7d325e6d42417b08daff3e55cb88f6 for\ncranelift.\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>", "tree": {"sha": "d488c2cadd790a1c2d521d17a2a05faaad4910b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d488c2cadd790a1c2d521d17a2a05faaad4910b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ee9712cd44a9b19132413abfe39d42720724dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee9712cd44a9b19132413abfe39d42720724dc6", "html_url": "https://github.com/rust-lang/rust/commit/6ee9712cd44a9b19132413abfe39d42720724dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ee9712cd44a9b19132413abfe39d42720724dc6/comments", "author": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b166ad0b1ebd65db9241da72e08308f87ce6e50f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b166ad0b1ebd65db9241da72e08308f87ce6e50f", "html_url": "https://github.com/rust-lang/rust/commit/b166ad0b1ebd65db9241da72e08308f87ce6e50f"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "1e22537c2ba42ac27202012738cf55ce004042b7", "filename": "src/abi/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6ee9712cd44a9b19132413abfe39d42720724dc6/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee9712cd44a9b19132413abfe39d42720724dc6/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=6ee9712cd44a9b19132413abfe39d42720724dc6", "patch": "@@ -22,7 +22,19 @@ fn clif_sig_from_fn_abi<'tcx>(\n     default_call_conv: CallConv,\n     fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n ) -> Signature {\n-    let call_conv = match fn_abi.conv {\n+    let call_conv = conv_to_call_conv(fn_abi.conv, default_call_conv);\n+\n+    let inputs = fn_abi.args.iter().map(|arg_abi| arg_abi.get_abi_param(tcx).into_iter()).flatten();\n+\n+    let (return_ptr, returns) = fn_abi.ret.get_abi_return(tcx);\n+    // Sometimes the first param is an pointer to the place where the return value needs to be stored.\n+    let params: Vec<_> = return_ptr.into_iter().chain(inputs).collect();\n+\n+    Signature { params, returns, call_conv }\n+}\n+\n+pub(crate) fn conv_to_call_conv(c: Conv, default_call_conv: CallConv) -> CallConv {\n+    match c {\n         Conv::Rust | Conv::C => default_call_conv,\n         Conv::RustCold => CallConv::Cold,\n         Conv::X86_64SysV => CallConv::SystemV,\n@@ -38,15 +50,8 @@ fn clif_sig_from_fn_abi<'tcx>(\n         | Conv::X86VectorCall\n         | Conv::AmdGpuKernel\n         | Conv::AvrInterrupt\n-        | Conv::AvrNonBlockingInterrupt => todo!(\"{:?}\", fn_abi.conv),\n-    };\n-    let inputs = fn_abi.args.iter().map(|arg_abi| arg_abi.get_abi_param(tcx).into_iter()).flatten();\n-\n-    let (return_ptr, returns) = fn_abi.ret.get_abi_return(tcx);\n-    // Sometimes the first param is an pointer to the place where the return value needs to be stored.\n-    let params: Vec<_> = return_ptr.into_iter().chain(inputs).collect();\n-\n-    Signature { params, returns, call_conv }\n+        | Conv::AvrNonBlockingInterrupt => todo!(\"{:?}\", c),\n+    }\n }\n \n pub(crate) fn get_function_sig<'tcx>("}, {"sha": "f7434633ea442b40fa30f4a85370135e8c134017", "filename": "src/main_shim.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ee9712cd44a9b19132413abfe39d42720724dc6/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee9712cd44a9b19132413abfe39d42720724dc6/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=6ee9712cd44a9b19132413abfe39d42720724dc6", "patch": "@@ -63,10 +63,14 @@ pub(crate) fn maybe_create_entry_wrapper(\n                 AbiParam::new(m.target_config().pointer_type()),\n             ],\n             returns: vec![AbiParam::new(m.target_config().pointer_type() /*isize*/)],\n-            call_conv: CallConv::triple_default(m.isa().triple()),\n+            call_conv: crate::conv_to_call_conv(\n+                tcx.sess.target.options.entry_abi,\n+                CallConv::triple_default(m.isa().triple()),\n+            ),\n         };\n \n-        let cmain_func_id = m.declare_function(\"main\", Linkage::Export, &cmain_sig).unwrap();\n+        let entry_name = tcx.sess.target.options.entry_name.as_ref();\n+        let cmain_func_id = m.declare_function(entry_name, Linkage::Export, &cmain_sig).unwrap();\n \n         let instance = Instance::mono(tcx, rust_main_def_id).polymorphize(tcx);\n "}]}