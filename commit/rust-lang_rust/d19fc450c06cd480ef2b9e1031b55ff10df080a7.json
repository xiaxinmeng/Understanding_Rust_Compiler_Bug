{"sha": "d19fc450c06cd480ef2b9e1031b55ff10df080a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOWZjNDUwYzA2Y2Q0ODBlZjJiOWUxMDMxYjU1ZmYxMGRmMDgwYTc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-04-27T03:14:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-27T03:14:47Z"}, "message": "Merge pull request #2650 from thibaultdelor/useFailureCrate\n\nUse failure crate", "tree": {"sha": "d8dbe4dcea5b97bdfbd078f98ff53c5497d32e57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8dbe4dcea5b97bdfbd078f98ff53c5497d32e57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d19fc450c06cd480ef2b9e1031b55ff10df080a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa4pWnCRBK7hj4Ov3rIwAAdHIIAKWwt/jo2Ei3CxE00+yLS9OY\nOfzGWsL6KyvFnQiiAs2IMku8UoWhnToulruwcgEfi1bLLW0i6WgudHW9TvGsvrsy\n0Bs8zKheWU+FZdYBSKh449kX0RzQ6RX4lc27evxntWVn309fKJWcJJyLvsl6sFP6\nUdgPM/UZF1VUjgUxapT8RIJdPJisocoR+oYtDQJ6IXgHY9Mw/97seYBoKLQEL+Fx\nTAYKiI1TyMSZXHQI/VA/EtGP0fdoEDckwm3gyNKv1Pn+ySuedi1+W3Cc/Gyl+qxy\nPUzMRJKDIEDaDjkYbidUI9lpdXZitFEAfn7SGRJ24NQuKPC4awncDR3XrB90VoY=\n=a6jG\n-----END PGP SIGNATURE-----\n", "payload": "tree d8dbe4dcea5b97bdfbd078f98ff53c5497d32e57\nparent 0f4ed08d0e3d180d66e46904126c3792f57668a9\nparent e06c9c8c5304d1d187e3adb603446bfb63afdd6d\nauthor Nick Cameron <nrc@ncameron.org> 1524798887 +1200\ncommitter GitHub <noreply@github.com> 1524798887 +1200\n\nMerge pull request #2650 from thibaultdelor/useFailureCrate\n\nUse failure crate"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d19fc450c06cd480ef2b9e1031b55ff10df080a7", "html_url": "https://github.com/rust-lang/rust/commit/d19fc450c06cd480ef2b9e1031b55ff10df080a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d19fc450c06cd480ef2b9e1031b55ff10df080a7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4ed08d0e3d180d66e46904126c3792f57668a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4ed08d0e3d180d66e46904126c3792f57668a9", "html_url": "https://github.com/rust-lang/rust/commit/0f4ed08d0e3d180d66e46904126c3792f57668a9"}, {"sha": "e06c9c8c5304d1d187e3adb603446bfb63afdd6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e06c9c8c5304d1d187e3adb603446bfb63afdd6d", "html_url": "https://github.com/rust-lang/rust/commit/e06c9c8c5304d1d187e3adb603446bfb63afdd6d"}], "stats": {"total": 192, "additions": 121, "deletions": 71}, "files": [{"sha": "3d1d1cb200b0aa6c88d10d1f66a41f05c58fa2d3", "filename": "Cargo.lock", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d19fc450c06cd480ef2b9e1031b55ff10df080a7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d19fc450c06cd480ef2b9e1031b55ff10df080a7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d19fc450c06cd480ef2b9e1031b55ff10df080a7", "patch": "@@ -175,6 +175,25 @@ dependencies = [\n  \"backtrace 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"failure\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"backtrace 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure_derive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"failure_derive\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synstructure 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"fuchsia-zircon\"\n version = \"0.3.3\"\n@@ -309,6 +328,11 @@ name = \"quick-error\"\n version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"quote\"\n+version = \"0.3.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"quote\"\n version = \"0.5.2\"\n@@ -453,6 +477,7 @@ dependencies = [\n  \"derive-new 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -566,6 +591,16 @@ name = \"stable_deref_trait\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"syn\"\n+version = \"0.11.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"syn\"\n version = \"0.13.1\"\n@@ -576,6 +611,23 @@ dependencies = [\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"synom\"\n+version = \"0.11.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"synstructure\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"tempdir\"\n version = \"0.3.7\"\n@@ -653,6 +705,11 @@ name = \"unicode-width\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.0.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"unicode-xid\"\n version = \"0.1.0\"\n@@ -747,6 +804,8 @@ dependencies = [\n \"checksum env_logger 0.5.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00c45cec4cde3daac5f036c74098b4956151525cdf360cff5ee0092c98823e54\"\n \"checksum environment 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f4b14e20978669064c33b4c1e0fb4083412e40fe56cbea2eae80fd7591503ee\"\n \"checksum error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff511d5dc435d703f4971bc399647c9bc38e20cb41452e3b9feb4765419ed3f3\"\n+\"checksum failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"934799b6c1de475a012a02dab0ace1ace43789ee4b99bcfbf1a2e3e8ced5de82\"\n+\"checksum failure_derive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c7cdda555bb90c9bb67a3b670a0f42de8e73f5981524123ad8578aafec8ddb8b\"\n \"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n \"checksum getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b900c08c1939860ce8b54dc6a89e26e00c04c380fd0e09796799bd7f12861e05\"\n@@ -766,6 +825,7 @@ dependencies = [\n \"checksum proc-macro2 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b16749538926f394755373f0dfec0852d79b3bd512a5906ceaeb72ee64a4eaa0\"\n \"checksum pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6fdf85cda6cadfae5428a54661d431330b312bc767ddbc57adbedc24da66e32\"\n \"checksum quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eda5fe9b71976e62bc81b781206aaa076401769b2143379d3eb2118388babac4\"\n+\"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum quote 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9949cfe66888ffe1d53e6ec9d9f3b70714083854be20fd5e271b232a017401e8\"\n \"checksum rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eba5f8cb59cc50ed56be8880a5c7b496bfd9bd26394e176bc67884094145c2c5\"\n \"checksum redox_syscall 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d92eecebad22b767915e4d529f89f28ee96dbbf5a4810d2b844373f136417fd\"\n@@ -792,7 +852,10 @@ dependencies = [\n \"checksum skeptic 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8431f8fca168e2db4be547bd8329eac70d095dff1444fee4b0fa0fabc7df75a\"\n \"checksum smallvec 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03dab98ab5ded3a8b43b2c80751194608d0b2aa0f1d46cf95d1c35e192844aa7\"\n \"checksum stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15132e0e364248108c5e2c02e3ab539be8d6f5d52a01ca9bbf27ed657316f02b\"\n+\"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum syn 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"91b52877572087400e83d24b9178488541e3d535259e04ff17a63df1e5ceff59\"\n+\"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n+\"checksum synstructure 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a761d12e6d8dcb4dcf952a7a89b475e3a9d69e4a69307e01a470977642914bd\"\n \"checksum tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15f2b5fb00ccdf689e0149d1b1b3c03fead81c2b37735d812fa8bddbbf41b6d8\"\n \"checksum term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa63644f74ce96fbeb9b794f66aff2a52d601cbd5e80f4b97123e3899f4570f1\"\n \"checksum term 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5e6b677dd1e8214ea1ef4297f85dbcbed8e8cdddb561040cc998ca2551c37561\"\n@@ -803,6 +866,7 @@ dependencies = [\n \"checksum ucd-util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fd2be2d6639d0f8fe6cdda291ad456e23629558d466e2789d2c3e9892bda285d\"\n \"checksum unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a8083c594e02b8ae1654ae26f0ade5158b119bd88ad0e8227a5d8fcd72407946\"\n \"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n+\"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n \"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\""}, {"sha": "4074f67b8756e2cfdc7fc734f03b204b0169a5a9", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d19fc450c06cd480ef2b9e1031b55ff10df080a7/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d19fc450c06cd480ef2b9e1031b55ff10df080a7/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=d19fc450c06cd480ef2b9e1031b55ff10df080a7", "patch": "@@ -47,6 +47,7 @@ getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.5.1\"\n rustc-ap-syntax = \"110.0.0\"\n+failure = \"0.1.1\"\n \n [dev-dependencies]\n assert_cli = \"0.5\""}, {"sha": "0ddf2f8c3df7fb925a372a85dd5a40bc040dd369", "filename": "src/bin/main.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d19fc450c06cd480ef2b9e1031b55ff10df080a7/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19fc450c06cd480ef2b9e1031b55ff10df080a7/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=d19fc450c06cd480ef2b9e1031b55ff10df080a7", "patch": "@@ -11,6 +11,7 @@\n #![cfg(not(test))]\n \n extern crate env_logger;\n+extern crate failure;\n extern crate getopts;\n extern crate rustfmt_nightly as rustfmt;\n \n@@ -19,6 +20,8 @@ use std::fs::File;\n use std::io::{self, stdout, Read, Write};\n use std::path::PathBuf;\n \n+use failure::err_msg;\n+\n use getopts::{Matches, Options};\n \n use rustfmt::{emit_post_matter, emit_pre_matter, load_config, CliOptions, Config, FmtResult,\n@@ -167,7 +170,7 @@ fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n             Ok((WriteMode::None, Summary::default()))\n         }\n         Operation::ConfigOutputDefault { path } => {\n-            let toml = Config::default().all_options().to_toml()?;\n+            let toml = Config::default().all_options().to_toml().map_err(err_msg)?;\n             if let Some(path) = path {\n                 let mut file = File::create(path)?;\n                 file.write_all(toml.as_bytes())?;\n@@ -186,7 +189,9 @@ fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n \n             // parse file_lines\n             if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n-                config.set().file_lines(file_lines.parse()?);\n+                config\n+                    .set()\n+                    .file_lines(file_lines.parse().map_err(err_msg)?);\n                 for f in config.file_lines().files() {\n                     match *f {\n                         FileName::Custom(ref f) if f == \"stdin\" => {}\n@@ -273,7 +278,7 @@ fn format(\n     // that were used during formatting as TOML.\n     if let Some(path) = minimal_config_path {\n         let mut file = File::create(path)?;\n-        let toml = config.used_options().to_toml()?;\n+        let toml = config.used_options().to_toml().map_err(err_msg)?;\n         file.write_all(toml.as_bytes())?;\n     }\n "}, {"sha": "23897f3cc32aa37043ad32c7b6e3a87406b4232f", "filename": "src/config/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d19fc450c06cd480ef2b9e1031b55ff10df080a7/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19fc450c06cd480ef2b9e1031b55ff10df080a7/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=d19fc450c06cd480ef2b9e1031b55ff10df080a7", "patch": "@@ -16,8 +16,6 @@ use std::io::{Error, ErrorKind, Read};\n use std::path::{Path, PathBuf};\n use std::{env, fs};\n \n-use {FmtError, FmtResult};\n-\n use config::config_type::ConfigType;\n use config::file_lines::FileLines;\n pub use config::lists::*;\n@@ -154,18 +152,16 @@ create_config! {\n pub fn load_config(\n     file_path: Option<&Path>,\n     options: Option<&CliOptions>,\n-) -> FmtResult<(Config, Option<PathBuf>)> {\n+) -> Result<(Config, Option<PathBuf>), Error> {\n     let over_ride = match options {\n         Some(opts) => config_path(opts)?,\n         None => None,\n     };\n \n     let result = if let Some(over_ride) = over_ride {\n-        Config::from_toml_path(over_ride.as_ref())\n-            .map(|p| (p, Some(over_ride.to_owned())))\n-            .map_err(FmtError::from)\n+        Config::from_toml_path(over_ride.as_ref()).map(|p| (p, Some(over_ride.to_owned())))\n     } else if let Some(file_path) = file_path {\n-        Config::from_resolved_toml_path(file_path).map_err(FmtError::from)\n+        Config::from_resolved_toml_path(file_path)\n     } else {\n         Ok((Config::default(), None))\n     };\n@@ -202,12 +198,15 @@ fn get_toml_path(dir: &Path) -> Result<Option<PathBuf>, Error> {\n     Ok(None)\n }\n \n-fn config_path(options: &CliOptions) -> FmtResult<Option<PathBuf>> {\n-    let config_path_not_found = |path: &str| -> FmtResult<Option<PathBuf>> {\n-        Err(FmtError::from(format!(\n-            \"Error: unable to find a config file for the given path: `{}`\",\n-            path\n-        )))\n+fn config_path(options: &CliOptions) -> Result<Option<PathBuf>, Error> {\n+    let config_path_not_found = |path: &str| -> Result<Option<PathBuf>, Error> {\n+        Err(Error::new(\n+            ErrorKind::NotFound,\n+            format!(\n+                \"Error: unable to find a config file for the given path: `{}`\",\n+                path\n+            ),\n+        ))\n     };\n \n     // Read the config_path and convert to parent dir if a file is provided."}, {"sha": "9721815eeeeb7d6e753e1592c83418de32046b51", "filename": "src/config/options.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d19fc450c06cd480ef2b9e1031b55ff10df080a7/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19fc450c06cd480ef2b9e1031b55ff10df080a7/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=d19fc450c06cd480ef2b9e1031b55ff10df080a7", "patch": "@@ -14,7 +14,9 @@ use config::config_type::ConfigType;\n use config::file_lines::FileLines;\n use config::lists::*;\n use config::Config;\n-use {FmtError, FmtResult, WRITE_MODE_LIST};\n+use {FmtResult, WRITE_MODE_LIST};\n+\n+use failure::err_msg;\n \n use getopts::Matches;\n use std::collections::HashSet;\n@@ -332,8 +334,8 @@ impl CliOptions {\n             .map(|c| c == \"nightly\")\n             .unwrap_or(false);\n         if unstable_features && !rust_nightly {\n-            return Err(FmtError::from(\n-                \"Unstable features are only available on Nightly channel\",\n+            return Err(format_err!(\n+                \"Unstable features are only available on Nightly channel\"\n             ));\n         } else {\n             options.unstable_features = unstable_features;\n@@ -345,22 +347,23 @@ impl CliOptions {\n             if let Ok(write_mode) = WriteMode::from_str(write_mode) {\n                 options.write_mode = Some(write_mode);\n             } else {\n-                return Err(FmtError::from(format!(\n+                return Err(format_err!(\n                     \"Invalid write-mode: {}, expected one of {}\",\n-                    write_mode, WRITE_MODE_LIST\n-                )));\n+                    write_mode,\n+                    WRITE_MODE_LIST\n+                ));\n             }\n         }\n \n         if let Some(ref color) = matches.opt_str(\"color\") {\n             match Color::from_str(color) {\n                 Ok(color) => options.color = Some(color),\n-                _ => return Err(FmtError::from(format!(\"Invalid color: {}\", color))),\n+                _ => return Err(format_err!(\"Invalid color: {}\", color)),\n             }\n         }\n \n         if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n-            options.file_lines = file_lines.parse()?;\n+            options.file_lines = file_lines.parse().map_err(err_msg)?;\n         }\n \n         if matches.opt_present(\"skip-children\") {"}, {"sha": "fe528a6c0ea7bb9ae57f8f862c5753df5feb9a08", "filename": "src/format-diff/main.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d19fc450c06cd480ef2b9e1031b55ff10df080a7/src%2Fformat-diff%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19fc450c06cd480ef2b9e1031b55ff10df080a7/src%2Fformat-diff%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat-diff%2Fmain.rs?ref=d19fc450c06cd480ef2b9e1031b55ff10df080a7", "patch": "@@ -15,6 +15,8 @@\n #![deny(warnings)]\n \n extern crate env_logger;\n+#[macro_use]\n+extern crate failure;\n extern crate getopts;\n #[macro_use]\n extern crate log;\n@@ -24,9 +26,8 @@ extern crate serde_derive;\n extern crate serde_json as json;\n \n use std::collections::HashSet;\n-use std::error::Error;\n use std::io::{self, BufRead};\n-use std::{env, fmt, process};\n+use std::{env, process};\n \n use regex::Regex;\n \n@@ -35,31 +36,14 @@ use regex::Regex;\n /// We only want to format rust files by default.\n const DEFAULT_PATTERN: &str = r\".*\\.rs\";\n \n-#[derive(Debug)]\n+#[derive(Fail, Debug)]\n enum FormatDiffError {\n-    IncorrectOptions(getopts::Fail),\n-    IncorrectFilter(regex::Error),\n-    IoError(io::Error),\n-}\n-\n-impl fmt::Display for FormatDiffError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        fmt::Display::fmt(self.cause().unwrap(), f)\n-    }\n-}\n-\n-impl Error for FormatDiffError {\n-    fn description(&self) -> &str {\n-        self.cause().unwrap().description()\n-    }\n-\n-    fn cause(&self) -> Option<&Error> {\n-        Some(match *self {\n-            FormatDiffError::IoError(ref e) => e,\n-            FormatDiffError::IncorrectFilter(ref e) => e,\n-            FormatDiffError::IncorrectOptions(ref e) => e,\n-        })\n-    }\n+    #[fail(display = \"{}\", _0)]\n+    IncorrectOptions(#[cause] getopts::Fail),\n+    #[fail(display = \"{}\", _0)]\n+    IncorrectFilter(#[cause] regex::Error),\n+    #[fail(display = \"{}\", _0)]\n+    IoError(#[cause] io::Error),\n }\n \n impl From<getopts::Fail> for FormatDiffError {\n@@ -99,7 +83,7 @@ fn main() {\n     );\n \n     if let Err(e) = run(&opts) {\n-        println!(\"{}\", opts.usage(e.description()));\n+        println!(\"{}\", opts.usage(&format!(\"{}\", e)));\n         process::exit(1);\n     }\n }"}, {"sha": "b272402b20f64efcfc6a7ed91139b71cd12ab077", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d19fc450c06cd480ef2b9e1031b55ff10df080a7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19fc450c06cd480ef2b9e1031b55ff10df080a7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d19fc450c06cd480ef2b9e1031b55ff10df080a7", "patch": "@@ -19,6 +19,8 @@\n #[macro_use]\n extern crate derive_new;\n extern crate diff;\n+#[macro_use]\n+extern crate failure;\n extern crate getopts;\n extern crate itertools;\n #[cfg(test)]\n@@ -37,7 +39,6 @@ extern crate toml;\n extern crate unicode_segmentation;\n \n use std::collections::HashMap;\n-use std::error;\n use std::fmt;\n use std::io::{self, stdout, Write};\n use std::panic::{catch_unwind, AssertUnwindSafe};\n@@ -53,6 +54,7 @@ use syntax::errors::{DiagnosticBuilder, Handler};\n use syntax::parse::{self, ParseSess};\n \n use comment::{CharClasses, FullCodeCharKind, LineClasses};\n+use failure::Fail;\n use issues::{BadIssueSeeker, Issue};\n use shape::Indent;\n use utils::use_colored_tty;\n@@ -62,8 +64,7 @@ pub use config::options::CliOptions;\n pub use config::summary::Summary;\n pub use config::{file_lines, load_config, Config, WriteMode};\n \n-pub type FmtError = Box<error::Error + Send + Sync>;\n-pub type FmtResult<T> = std::result::Result<T, FmtError>;\n+pub type FmtResult<T> = std::result::Result<T, failure::Error>;\n \n pub const WRITE_MODE_LIST: &str =\n     \"[replace|overwrite|display|plain|diff|coverage|checkstyle|check]\";\n@@ -109,33 +110,26 @@ pub(crate) type FileMap = Vec<FileRecord>;\n \n pub(crate) type FileRecord = (FileName, String);\n \n-#[derive(Clone, Copy)]\n+#[derive(Fail, Debug, Clone, Copy)]\n pub enum ErrorKind {\n     // Line has exceeded character limit (found, maximum)\n+    #[fail(\n+        display = \"line formatted, but exceeded maximum width (maximum: {} (see `max_width` option), found: {})\",\n+        _0,\n+        _1\n+    )]\n     LineOverflow(usize, usize),\n     // Line ends in whitespace\n+    #[fail(display = \"left behind trailing whitespace\")]\n     TrailingWhitespace,\n     // TODO or FIXME item without an issue number\n+    #[fail(display = \"found {}\", _0)]\n     BadIssue(Issue),\n     // License check has failed\n+    #[fail(display = \"license check failed\")]\n     LicenseCheck,\n }\n \n-impl fmt::Display for ErrorKind {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        match *self {\n-            ErrorKind::LineOverflow(found, maximum) => write!(\n-                fmt,\n-                \"line formatted, but exceeded maximum width (maximum: {} (see `max_width` option), found: {})\",\n-                maximum, found,\n-            ),\n-            ErrorKind::TrailingWhitespace => write!(fmt, \"left behind trailing whitespace\"),\n-            ErrorKind::BadIssue(issue) => write!(fmt, \"found {}\", issue),\n-            ErrorKind::LicenseCheck => write!(fmt, \"license check failed\"),\n-        }\n-    }\n-}\n-\n // Formatting errors that are identified *after* rustfmt has run.\n struct FormattingError {\n     line: usize,\n@@ -901,7 +895,7 @@ pub enum Input {\n \n pub fn format_and_emit_report(input: Input, config: &Config) -> FmtResult<Summary> {\n     if !config.version_meets_requirement() {\n-        return Err(FmtError::from(\"Version mismatch\"));\n+        return Err(format_err!(\"Version mismatch\"));\n     }\n     let out = &mut stdout();\n     match format_input(input, config, Some(out)) {"}]}