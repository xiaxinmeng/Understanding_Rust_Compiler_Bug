{"sha": "9c275833fcfa488775f6a137282003956d1a807b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMjc1ODMzZmNmYTQ4ODc3NWY2YTEzNzI4MjAwMzk1NmQxYTgwN2I=", "commit": {"author": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-20T05:07:01Z"}, "committer": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-20T05:07:01Z"}, "message": "Get checkstyle tests passing.\n\nFix up the checkstyle test so they pass. There is still an issue with\nthe content, but I think that is caused by a problem with how diffs are\nbeing calculated presently.", "tree": {"sha": "b21b8bc1b552048b2af89ccadc4f471fb99c5043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b21b8bc1b552048b2af89ccadc4f471fb99c5043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c275833fcfa488775f6a137282003956d1a807b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c275833fcfa488775f6a137282003956d1a807b", "html_url": "https://github.com/rust-lang/rust/commit/9c275833fcfa488775f6a137282003956d1a807b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c275833fcfa488775f6a137282003956d1a807b/comments", "author": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8c6f5954ace9890bcdbe46bb618c9465dd1fd71", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c6f5954ace9890bcdbe46bb618c9465dd1fd71", "html_url": "https://github.com/rust-lang/rust/commit/d8c6f5954ace9890bcdbe46bb618c9465dd1fd71"}], "stats": {"total": 35, "additions": 12, "deletions": 23}, "files": [{"sha": "387148136c9b3027ca194e9736058a9078327f24", "filename": "tests/system.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9c275833fcfa488775f6a137282003956d1a807b/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c275833fcfa488775f6a137282003956d1a807b/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=9c275833fcfa488775f6a137282003956d1a807b", "patch": "@@ -65,7 +65,7 @@ fn coverage_tests() {\n \n #[test]\n fn checkstyle_test() {\n-    let filename = \"tests/target/fn-single-line.rs\".to_string();\n+    let filename = \"tests/source/fn-single-line.rs\".to_string();\n     let expected = \"tests/writemode/checkstyle.xml\";\n \n     let output = run_rustfmt(filename.clone(), WriteMode::Checkstyle);\n@@ -78,12 +78,12 @@ fn checkstyle_test() {\n                  .ok()\n                  .expect(\"Failed reading target.\");\n \n-    let mut failures = HashMap::new();\n-    if expected_text != output {\n-        let diff = make_diff(&expected_text, &output, DIFF_CONTEXT_SIZE);\n-        failures.insert(filename, diff);\n-        // print_mismatches(failures);\n-        // assert!(false, \"Text does not match expected output\");\n+    let compare = make_diff(&expected_text, &output, DIFF_CONTEXT_SIZE);\n+    if compare.len() > 0 {\n+        let mut failures = HashMap::new();\n+        failures.insert(filename, compare);\n+        print_mismatches(failures);\n+        assert!(false, \"Text does not match expected output\");\n     }\n }\n \n@@ -183,21 +183,10 @@ pub fn run_rustfmt(filename: String, write_mode: WriteMode) -> String {\n     config.report_todo = ReportTactic::Never;\n \n     // Simulate run()\n-    let mut file_map = format(Path::new(&filename), &config, write_mode);\n-    // TODO this writes directly to stdout making it impossible to test :(\n-    let write_result = filemap::write_all_files(&file_map, write_mode, &config);\n-    let res = write_result.unwrap();\n-    String::new()\n-\n-    // for (filename, text) in file_map.iter() {\n-    //     let mut v = Vec::new();\n-    //     // Won't panic, as we're not doing any IO.\n-    //     write_system_newlines(&mut v, text, &config).unwrap();\n-    //     // Won't panic, we are writing correct utf8.\n-    //     let one_result = String::from_utf8(v).unwrap();\n-    //     write_result.insert(filename, one_result);\n-    // }\n-    // write_result.remove(&filename).unwrap().to_owned()\n+    let mut out = Vec::new();\n+    let file_map = format(Path::new(&filename), &config, write_mode);\n+    let _ = filemap::write_all_files(&file_map, &mut out, write_mode, &config);\n+    String::from_utf8(out).unwrap()\n }\n \n pub fn idempotent_check(filename: String,"}, {"sha": "f655cfb3b6b50c9c5b3bd2409c48b0b16d900091", "filename": "tests/writemode/checkstyle.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c275833fcfa488775f6a137282003956d1a807b/tests%2Fwritemode%2Fcheckstyle.xml", "raw_url": "https://github.com/rust-lang/rust/raw/9c275833fcfa488775f6a137282003956d1a807b/tests%2Fwritemode%2Fcheckstyle.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Fcheckstyle.xml?ref=9c275833fcfa488775f6a137282003956d1a807b", "patch": "@@ -1,2 +1,2 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<checkstyle version=\"4.3\"><file name=\"tests/target/fn-single-line.rs\"><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_expr() {`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    1`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_stmt() {`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    foo();`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_local() {`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    let z = 5;`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) {`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    x = 3;`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `}`\" /><error line=\"22\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String {`\" /><error line=\"22\" severity=\"warning\" message=\"Should be `    &quot;yay&quot;`\" /><error line=\"22\" severity=\"warning\" message=\"Should be `}`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `fn lots_of_space() {`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `    1`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `}`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `fn mac() -&gt; Vec&lt;i32&gt; {`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `    vec![]`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `}`\" /></file></checkstyle>\n+<checkstyle version=\"4.3\"><file name=\"tests/source/fn-single-line.rs\"><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_expr() { 1 }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_stmt() { foo(); }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_local() { let z = 5; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) { x = 3; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn empty() {}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String { &quot;yay&quot; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_where() -&gt; T`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    where T: Sync`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `{`\" /><error line=\"50\" severity=\"warning\" message=\"Should be `fn lots_of_space() { 1 }`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `trait CoolerTypes {`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `fn Foo&lt;T&gt;() where T: Bar {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be ``\" /></file></checkstyle>"}]}