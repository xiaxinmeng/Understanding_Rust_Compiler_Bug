{"sha": "61c07a9a23d8967564bdddb5137efadeb48df271", "node_id": "C_kwDOAAsO6NoAKDYxYzA3YTlhMjNkODk2NzU2NGJkZGRiNTEzN2VmYWRlYjQ4ZGYyNzE", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-01-14T13:44:52Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-01-14T13:45:07Z"}, "message": "reviews ish", "tree": {"sha": "8f14f55fca65df5cc14e97c8f3b98c4ec5e751ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f14f55fca65df5cc14e97c8f3b98c4ec5e751ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61c07a9a23d8967564bdddb5137efadeb48df271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61c07a9a23d8967564bdddb5137efadeb48df271", "html_url": "https://github.com/rust-lang/rust/commit/61c07a9a23d8967564bdddb5137efadeb48df271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61c07a9a23d8967564bdddb5137efadeb48df271/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3d71d900186c3fab2a91d84efcccc739df191d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d71d900186c3fab2a91d84efcccc739df191d5", "html_url": "https://github.com/rust-lang/rust/commit/b3d71d900186c3fab2a91d84efcccc739df191d5"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "76f4df6ec2da8c4080cea1bc4fc93fff2ef34e38", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61c07a9a23d8967564bdddb5137efadeb48df271/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c07a9a23d8967564bdddb5137efadeb48df271/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=61c07a9a23d8967564bdddb5137efadeb48df271", "patch": "@@ -314,6 +314,13 @@ impl GenericArg<'_> {\n             GenericArg::Infer(_) => ast::ParamKindOrd::Infer,\n         }\n     }\n+\n+    pub fn is_ty_or_const(&self) -> bool {\n+        match self {\n+            GenericArg::Lifetime(_) => false,\n+            GenericArg::Type(_) | GenericArg::Const(_) | GenericArg::Infer(_) => true,\n+        }\n+    }\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "0bd96f8f865fcaa33f4882a1c1f5535802300765", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61c07a9a23d8967564bdddb5137efadeb48df271/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c07a9a23d8967564bdddb5137efadeb48df271/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=61c07a9a23d8967564bdddb5137efadeb48df271", "patch": "@@ -31,6 +31,13 @@ impl GenericParamDefKind {\n             GenericParamDefKind::Const { .. } => ast::ParamKindOrd::Const,\n         }\n     }\n+\n+    pub fn is_ty_or_const(&self) -> bool {\n+        match self {\n+            GenericParamDefKind::Lifetime => false,\n+            GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => true,\n+        }\n+    }\n }\n \n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]"}, {"sha": "5ff2a74754117d988c44c17a5b12971f89faac3c", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/61c07a9a23d8967564bdddb5137efadeb48df271/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c07a9a23d8967564bdddb5137efadeb48df271/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=61c07a9a23d8967564bdddb5137efadeb48df271", "patch": "@@ -80,7 +80,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                     .and_then(|args| {\n                         args.args\n                             .iter()\n-                            .filter(|arg| !matches!(arg, GenericArg::Lifetime(_)))\n+                            .filter(|arg| arg.is_ty_or_const())\n                             .position(|arg| arg.id() == hir_id)\n                     })\n                     .unwrap_or_else(|| {\n@@ -113,7 +113,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 .and_then(|args| {\n                     args.args\n                         .iter()\n-                        .filter(|arg| !matches!(arg, GenericArg::Lifetime(_)))\n+                        .filter(|arg| arg.is_ty_or_const())\n                         .position(|arg| arg.id() == hir_id)\n                 })\n                 .unwrap_or_else(|| {\n@@ -169,7 +169,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 .filter_map(|seg| seg.args.map(|args| (args.args, seg)))\n                 .find_map(|(args, seg)| {\n                     args.iter()\n-                        .filter(|arg| !matches!(arg, GenericArg::Lifetime(_)))\n+                        .filter(|arg| arg.is_ty_or_const())\n                         .position(|arg| arg.id() == hir_id)\n                         .map(|index| (index, seg))\n                 });\n@@ -232,12 +232,11 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n     };\n \n     debug!(?parent_node);\n-    debug!(?generics);\n-    debug!(?arg_idx);\n+    debug!(?generics, ?arg_idx);\n     generics\n         .params\n         .iter()\n-        .filter(|param| !matches!(param.kind, ty::GenericParamDefKind::Lifetime { .. }))\n+        .filter(|param| param.kind.is_ty_or_const())\n         .nth(match generics.has_self && generics.parent.is_none() {\n             true => arg_idx + 1,\n             false => arg_idx,"}]}