{"sha": "b69d51162b5391119e86d1c6e884aa09292a7806", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OWQ1MTE2MmI1MzkxMTE5ZTg2ZDFjNmU4ODRhYTA5MjkyYTc4MDY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-29T00:45:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-29T22:53:32Z"}, "message": "Restore the old behavior of `$crate` in nested `macro_rules`\n\n`$crate` is not resolved at def-site of a macro, but rather at \"transitive def-site\"", "tree": {"sha": "7130f277aa610ff99c5de9f51b190153d097ca28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7130f277aa610ff99c5de9f51b190153d097ca28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b69d51162b5391119e86d1c6e884aa09292a7806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b69d51162b5391119e86d1c6e884aa09292a7806", "html_url": "https://github.com/rust-lang/rust/commit/b69d51162b5391119e86d1c6e884aa09292a7806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b69d51162b5391119e86d1c6e884aa09292a7806/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f92fce77c74cf3c47035e9ff69c29daee0517b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f92fce77c74cf3c47035e9ff69c29daee0517b3", "html_url": "https://github.com/rust-lang/rust/commit/9f92fce77c74cf3c47035e9ff69c29daee0517b3"}], "stats": {"total": 76, "additions": 71, "deletions": 5}, "files": [{"sha": "9475b96d30bd96124463ebd78e5d71fed5379ed8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b69d51162b5391119e86d1c6e884aa09292a7806/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69d51162b5391119e86d1c6e884aa09292a7806/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b69d51162b5391119e86d1c6e884aa09292a7806", "patch": "@@ -1989,7 +1989,31 @@ impl<'a> Resolver<'a> {\n             // When resolving `$crate` from a `macro_rules!` invoked in a `macro`,\n             // we don't want to pretend that the `macro_rules!` definition is in the `macro`\n             // as described in `SyntaxContext::apply_mark`, so we ignore prepended modern marks.\n-            ctxt.marks().into_iter().rev().find(|m| m.transparency() != Transparency::Transparent)\n+            // FIXME: This is only a guess and it doesn't work correctly for `macro_rules!`\n+            // definitions actually produced by `macro` and `macro` definitions produced by\n+            // `macro_rules!`, but at least such configurations are not stable yet.\n+            ctxt = ctxt.modern_and_legacy();\n+            let mut iter = ctxt.marks().into_iter().rev().peekable();\n+            let mut result = None;\n+            // Find the last modern mark from the end if it exists.\n+            while let Some(&mark) = iter.peek() {\n+                if mark.transparency() == Transparency::Opaque {\n+                    result = Some(mark);\n+                    iter.next();\n+                } else {\n+                    break;\n+                }\n+            }\n+            // Then find the last legacy mark from the end if it exists.\n+            while let Some(&mark) = iter.peek() {\n+                if mark.transparency() == Transparency::SemiTransparent {\n+                    result = Some(mark);\n+                    iter.next();\n+                } else {\n+                    break;\n+                }\n+            }\n+            result\n         } else {\n             ctxt = ctxt.modern();\n             ctxt.adjust(Mark::root())"}, {"sha": "f917fabbe0c589180a5fc5bddea68df675ce2d93", "filename": "src/test/ui/hygiene/auxiliary/intercrate.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b69d51162b5391119e86d1c6e884aa09292a7806/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fintercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69d51162b5391119e86d1c6e884aa09292a7806/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fintercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fintercrate.rs?ref=b69d51162b5391119e86d1c6e884aa09292a7806", "patch": "@@ -22,6 +22,35 @@ pub mod foo {\n \n pub struct SomeType;\n \n-pub macro uses_dollar_crate() {\n+// `$crate`\n+pub macro uses_dollar_crate_modern() {\n     type Alias = $crate::SomeType;\n }\n+\n+pub macro define_uses_dollar_crate_modern_nested($uses_dollar_crate_modern_nested: ident) {\n+    macro $uses_dollar_crate_modern_nested() {\n+        type AliasCrateModernNested = $crate::SomeType;\n+    }\n+}\n+\n+#[macro_export]\n+macro_rules! define_uses_dollar_crate_legacy_nested {\n+    () => {\n+        macro_rules! uses_dollar_crate_legacy_nested {\n+            () => {\n+                type AliasLegacyNested = $crate::SomeType;\n+            }\n+        }\n+    }\n+}\n+\n+// `crate`\n+pub macro uses_crate_modern() {\n+    type AliasCrate = crate::SomeType;\n+}\n+\n+pub macro define_uses_crate_modern_nested($uses_crate_modern_nested: ident) {\n+    macro $uses_crate_modern_nested() {\n+        type AliasCrateModernNested = crate::SomeType;\n+    }\n+}"}, {"sha": "6e536ab14221557f7b32affb643488a6ac7b97c1", "filename": "src/test/ui/hygiene/dollar-crate-modern.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b69d51162b5391119e86d1c6e884aa09292a7806/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69d51162b5391119e86d1c6e884aa09292a7806/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.rs?ref=b69d51162b5391119e86d1c6e884aa09292a7806", "patch": "@@ -8,15 +8,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Make sure `$crate` works in `macro` macros.\n+// Make sure `$crate` and `crate` work in for basic cases of nested macros.\n \n // compile-pass\n // aux-build:intercrate.rs\n \n-#![feature(use_extern_macros)]\n+#![feature(decl_macro, crate_in_paths)]\n \n extern crate intercrate;\n \n-intercrate::uses_dollar_crate!();\n+// `$crate`\n+intercrate::uses_dollar_crate_modern!();\n+\n+intercrate::define_uses_dollar_crate_modern_nested!(uses_dollar_crate_modern_nested);\n+uses_dollar_crate_modern_nested!();\n+\n+intercrate::define_uses_dollar_crate_legacy_nested!();\n+uses_dollar_crate_legacy_nested!();\n+\n+// `crate`\n+intercrate::uses_crate_modern!();\n+\n+intercrate::define_uses_crate_modern_nested!(uses_crate_modern_nested);\n+uses_crate_modern_nested!();\n \n fn main() {}"}]}