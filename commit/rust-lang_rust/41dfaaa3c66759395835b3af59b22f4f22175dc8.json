{"sha": "41dfaaa3c66759395835b3af59b22f4f22175dc8", "node_id": "C_kwDOAAsO6NoAKDQxZGZhYWEzYzY2NzU5Mzk1ODM1YjNhZjU5YjIyZjRmMjIxNzVkYzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-10T19:05:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-10T19:05:13Z"}, "message": "Auto merge of #89739 - matthiaskrgr:rollup-kskwqy5, r=matthiaskrgr\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #88374 (Fix documentation in Cell)\n - #88713 (Improve docs for int_log)\n - #89428 (Feature gate the non_exhaustive_omitted_patterns lint)\n - #89438 (docs: `std::hash::Hash` should ensure prefix-free data)\n - #89520 (Don't rebuild GUI test crates every time you run test src/test/rustdoc-gui)\n - #89705 (Cfg hide no_global_oom_handling and no_fp_fmt_parse)\n - #89713 (Fix ABNF of inline asm options)\n - #89718 (Add #[must_use] to is_condition tests)\n - #89719 (Add #[must_use] to char escape methods)\n - #89720 (Add #[must_use] to math and bit manipulation methods)\n - #89735 (Stabilize proc_macro::is_available)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5df1f12a0b17519844d1cab0dbdc81be087ddf11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df1f12a0b17519844d1cab0dbdc81be087ddf11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41dfaaa3c66759395835b3af59b22f4f22175dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41dfaaa3c66759395835b3af59b22f4f22175dc8", "html_url": "https://github.com/rust-lang/rust/commit/41dfaaa3c66759395835b3af59b22f4f22175dc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41dfaaa3c66759395835b3af59b22f4f22175dc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "html_url": "https://github.com/rust-lang/rust/commit/68dfa07e3bbbfe9100a9b1047c274717bdf452a1"}, {"sha": "4d89488c413a5e745878575d6af046c7dab76c45", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d89488c413a5e745878575d6af046c7dab76c45", "html_url": "https://github.com/rust-lang/rust/commit/4d89488c413a5e745878575d6af046c7dab76c45"}], "stats": {"total": 589, "additions": 518, "deletions": 71}, "files": [{"sha": "a2fadb13a574179611cca2629ce783776860f3dc", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -678,6 +678,9 @@ declare_features! (\n     /// Allows `#[doc(cfg_hide(...))]`.\n     (active, doc_cfg_hide, \"1.57.0\", Some(43781), None),\n \n+    /// Allows using the `non_exhaustive_omitted_patterns` lint.\n+    (active, non_exhaustive_omitted_patterns_lint, \"1.57.0\", Some(89554), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "a93d18950dba9256364c077fcd85d32afe2504b1", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -6,6 +6,7 @@\n \n use crate::{declare_lint, declare_lint_pass, FutureIncompatibilityReason};\n use rustc_span::edition::Edition;\n+use rustc_span::symbol::sym;\n \n declare_lint! {\n     /// The `forbidden_lint_groups` lint detects violations of\n@@ -3476,6 +3477,8 @@ declare_lint! {\n     /// }\n     ///\n     /// // in crate B\n+    /// #![feature(non_exhaustive_omitted_patterns_lint)]\n+    ///\n     /// match Bar::A {\n     ///     Bar::A => {},\n     ///     #[warn(non_exhaustive_omitted_patterns)]\n@@ -3512,6 +3515,7 @@ declare_lint! {\n     pub NON_EXHAUSTIVE_OMITTED_PATTERNS,\n     Allow,\n     \"detect when patterns of types marked `non_exhaustive` are missed\",\n+    @feature_gate = sym::non_exhaustive_omitted_patterns_lint;\n }\n \n declare_lint! {"}, {"sha": "9551120ca5522450fdac428e999044c33493f69c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -893,6 +893,7 @@ symbols! {\n         nomem,\n         non_ascii_idents,\n         non_exhaustive,\n+        non_exhaustive_omitted_patterns_lint,\n         non_modrs_mods,\n         none_error,\n         nontemporal_store,"}, {"sha": "f4c1010098256f7637ad860f841c6092b4cd9362", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -534,6 +534,7 @@ impl<T> BTreeSet<T> {\n     /// b.insert(1);\n     /// assert_eq!(a.is_disjoint(&b), false);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_disjoint(&self, other: &BTreeSet<T>) -> bool\n     where\n@@ -559,6 +560,7 @@ impl<T> BTreeSet<T> {\n     /// set.insert(4);\n     /// assert_eq!(set.is_subset(&sup), false);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_subset(&self, other: &BTreeSet<T>) -> bool\n     where\n@@ -638,6 +640,7 @@ impl<T> BTreeSet<T> {\n     /// set.insert(2);\n     /// assert_eq!(set.is_superset(&sub), true);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_superset(&self, other: &BTreeSet<T>) -> bool\n     where"}, {"sha": "89ab11fb97e1035d06030d256c08542b8ed40227", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -73,6 +73,7 @@\n         not(test),\n         not(any(test, bootstrap)),\n         any(not(feature = \"miri-test-libstd\"), test, doctest),\n+        no_global_oom_handling,\n         target_has_atomic = \"ptr\"\n     ))\n )]"}, {"sha": "2ca077a98f8dc7500d4569274eb7143a80aee59c", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -349,7 +349,7 @@ impl<T> Cell<T> {\n         drop(old);\n     }\n \n-    /// Swaps the values of two Cells.\n+    /// Swaps the values of two `Cell`s.\n     /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.\n     ///\n     /// # Examples"}, {"sha": "45f7540d314bec77e8e726a50ff6c11c210f5347", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -377,6 +377,8 @@ impl char {\n     /// ```\n     /// assert_eq!('\u2764'.escape_unicode().to_string(), \"\\\\u{2764}\");\n     /// ```\n+    #[must_use = \"this returns the escaped char as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn escape_unicode(self) -> EscapeUnicode {\n@@ -453,6 +455,8 @@ impl char {\n     /// ```\n     /// assert_eq!('\\n'.escape_debug().to_string(), \"\\\\n\");\n     /// ```\n+    #[must_use = \"this returns the escaped char as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n     #[inline]\n     pub fn escape_debug(self) -> EscapeDebug {\n@@ -507,6 +511,8 @@ impl char {\n     /// ```\n     /// assert_eq!('\"'.escape_default().to_string(), \"\\\\\\\"\");\n     /// ```\n+    #[must_use = \"this returns the escaped char as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn escape_default(self) -> EscapeDefault {\n@@ -692,6 +698,7 @@ impl char {\n     /// // love is many things, but it is not alphabetic\n     /// assert!(!c.is_alphabetic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_alphabetic(self) -> bool {\n@@ -724,6 +731,7 @@ impl char {\n     /// assert!(!'\u4e2d'.is_lowercase());\n     /// assert!(!' '.is_lowercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_lowercase(self) -> bool {\n@@ -756,6 +764,7 @@ impl char {\n     /// assert!(!'\u4e2d'.is_uppercase());\n     /// assert!(!' '.is_uppercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_uppercase(self) -> bool {\n@@ -784,6 +793,7 @@ impl char {\n     ///\n     /// assert!(!'\u8d8a'.is_whitespace());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_whitespace(self) -> bool {\n@@ -812,6 +822,7 @@ impl char {\n     /// assert!('\u0648'.is_alphanumeric());\n     /// assert!('\u85cf'.is_alphanumeric());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_alphanumeric(self) -> bool {\n@@ -837,6 +848,7 @@ impl char {\n     /// assert!('\u009c'.is_control());\n     /// assert!(!'q'.is_control());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_control(self) -> bool {\n@@ -852,6 +864,7 @@ impl char {\n     /// [uax29]: https://www.unicode.org/reports/tr29/\n     /// [ucd]: https://www.unicode.org/reports/tr44/\n     /// [`DerivedCoreProperties.txt`]: https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt\n+    #[must_use]\n     #[inline]\n     pub(crate) fn is_grapheme_extended(self) -> bool {\n         unicode::Grapheme_Extend(self)\n@@ -881,6 +894,7 @@ impl char {\n     /// assert!(!'\u0648'.is_numeric());\n     /// assert!(!'\u85cf'.is_numeric());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_numeric(self) -> bool {\n@@ -1060,6 +1074,7 @@ impl char {\n     /// assert!(ascii.is_ascii());\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.32.0\")]\n     #[inline]\n@@ -1237,6 +1252,7 @@ impl char {\n     /// assert!(!lf.is_ascii_alphabetic());\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1270,6 +1286,7 @@ impl char {\n     /// assert!(!lf.is_ascii_uppercase());\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1303,6 +1320,7 @@ impl char {\n     /// assert!(!lf.is_ascii_lowercase());\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1339,6 +1357,7 @@ impl char {\n     /// assert!(!lf.is_ascii_alphanumeric());\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1372,6 +1391,7 @@ impl char {\n     /// assert!(!lf.is_ascii_digit());\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1408,6 +1428,7 @@ impl char {\n     /// assert!(!lf.is_ascii_hexdigit());\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1445,6 +1466,7 @@ impl char {\n     /// assert!(!lf.is_ascii_punctuation());\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1478,6 +1500,7 @@ impl char {\n     /// assert!(!lf.is_ascii_graphic());\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1528,6 +1551,7 @@ impl char {\n     /// assert!(lf.is_ascii_whitespace());\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1563,6 +1587,7 @@ impl char {\n     /// assert!(lf.is_ascii_control());\n     /// assert!(esc.is_ascii_control());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]"}, {"sha": "540160bc4c2a4daadc4d040c58dc529b3d758fe4", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -153,9 +153,21 @@ mod sip;\n /// Thankfully, you won't need to worry about upholding this property when\n /// deriving both [`Eq`] and `Hash` with `#[derive(PartialEq, Eq, Hash)]`.\n ///\n+/// ## Prefix collisions\n+///\n+/// Implementations of `hash` should ensure that the data they\n+/// pass to the `Hasher` are prefix-free. That is,\n+/// unequal values should cause two different sequences of values to be written,\n+/// and neither of the two sequences should be a prefix of the other.\n+///\n+/// For example, the standard implementation of [`Hash` for `&str`][impl] passes an extra\n+/// `0xFF` byte to the `Hasher` so that the values `(\"ab\", \"c\")` and `(\"a\",\n+/// \"bc\")` hash differently.\n+///\n /// [`HashMap`]: ../../std/collections/struct.HashMap.html\n /// [`HashSet`]: ../../std/collections/struct.HashSet.html\n /// [`hash`]: Hash::hash\n+/// [impl]: ../../std/primitive.str.html#impl-Hash\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"Hash\"]\n pub trait Hash {"}, {"sha": "7bc641c52767d6a19f3961f478f1adee6d98e30a", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -65,6 +65,7 @@\n     doc(cfg_hide(\n         not(test),\n         any(not(feature = \"miri-test-libstd\"), test, doctest),\n+        no_fp_fmt_parse,\n         target_pointer_width = \"16\",\n         target_pointer_width = \"32\",\n         target_pointer_width = \"64\","}, {"sha": "4073a38b3cd858577996796cae20c93c0747812c", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -436,6 +436,7 @@ impl f32 {\n     /// assert!(nan.is_nan());\n     /// assert!(!f.is_nan());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -467,6 +468,7 @@ impl f32 {\n     /// assert!(inf.is_infinite());\n     /// assert!(neg_inf.is_infinite());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -488,6 +490,7 @@ impl f32 {\n     /// assert!(!inf.is_finite());\n     /// assert!(!neg_inf.is_finite());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -515,6 +518,7 @@ impl f32 {\n     /// assert!(lower_than_min.is_subnormal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[must_use]\n     #[stable(feature = \"is_subnormal\", since = \"1.53.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -541,6 +545,7 @@ impl f32 {\n     /// assert!(!lower_than_min.is_normal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -587,6 +592,7 @@ impl f32 {\n     /// assert!(f.is_sign_positive());\n     /// assert!(!g.is_sign_positive());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -604,6 +610,7 @@ impl f32 {\n     /// assert!(!f.is_sign_negative());\n     /// assert!(g.is_sign_negative());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -636,6 +643,8 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"f32_deg_rad_conversions\", since = \"1.7.0\")]\n     #[inline]\n     pub fn to_degrees(self) -> f32 {\n@@ -653,6 +662,8 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"f32_deg_rad_conversions\", since = \"1.7.0\")]\n     #[inline]\n     pub fn to_radians(self) -> f32 {\n@@ -712,6 +723,8 @@ impl f32 {\n     /// * Not be `NaN`\n     /// * Not be infinite\n     /// * Be representable in the return type `Int`, after truncating off its fractional part\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_approx_unchecked_to\", since = \"1.44.0\")]\n     #[inline]\n     pub unsafe fn to_int_unchecked<Int>(self) -> Int\n@@ -740,6 +753,8 @@ impl f32 {\n     /// assert_eq!((12.5f32).to_bits(), 0x41480000);\n     ///\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -802,6 +817,8 @@ impl f32 {\n     /// let bytes = 12.5f32.to_be_bytes();\n     /// assert_eq!(bytes, [0x41, 0x48, 0x00, 0x00]);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -818,6 +835,8 @@ impl f32 {\n     /// let bytes = 12.5f32.to_le_bytes();\n     /// assert_eq!(bytes, [0x00, 0x00, 0x48, 0x41]);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -847,6 +866,8 @@ impl f32 {\n     ///     }\n     /// );\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]"}, {"sha": "c6ccff0398000c8ec8978b2052238d2bbf27b34b", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -435,6 +435,7 @@ impl f64 {\n     /// assert!(nan.is_nan());\n     /// assert!(!f.is_nan());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -466,6 +467,7 @@ impl f64 {\n     /// assert!(inf.is_infinite());\n     /// assert!(neg_inf.is_infinite());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -487,6 +489,7 @@ impl f64 {\n     /// assert!(!inf.is_finite());\n     /// assert!(!neg_inf.is_finite());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -514,6 +517,7 @@ impl f64 {\n     /// assert!(lower_than_min.is_subnormal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[must_use]\n     #[stable(feature = \"is_subnormal\", since = \"1.53.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -540,6 +544,7 @@ impl f64 {\n     /// assert!(!lower_than_min.is_normal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -586,13 +591,15 @@ impl f64 {\n     /// assert!(f.is_sign_positive());\n     /// assert!(!g.is_sign_positive());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n     pub const fn is_sign_positive(self) -> bool {\n         !self.is_sign_negative()\n     }\n \n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_positive\")]\n     #[inline]\n@@ -611,13 +618,15 @@ impl f64 {\n     /// assert!(!f.is_sign_negative());\n     /// assert!(g.is_sign_negative());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n     pub const fn is_sign_negative(self) -> bool {\n         self.to_bits() & 0x8000_0000_0000_0000 != 0\n     }\n \n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_negative\")]\n     #[inline]\n@@ -649,6 +658,8 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_degrees(self) -> f64 {\n@@ -667,6 +678,8 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_radians(self) -> f64 {\n@@ -726,6 +739,8 @@ impl f64 {\n     /// * Not be `NaN`\n     /// * Not be infinite\n     /// * Be representable in the return type `Int`, after truncating off its fractional part\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_approx_unchecked_to\", since = \"1.44.0\")]\n     #[inline]\n     pub unsafe fn to_int_unchecked<Int>(self) -> Int\n@@ -754,6 +769,8 @@ impl f64 {\n     /// assert_eq!((12.5f64).to_bits(), 0x4029000000000000);\n     ///\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -816,6 +833,8 @@ impl f64 {\n     /// let bytes = 12.5f64.to_be_bytes();\n     /// assert_eq!(bytes, [0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -832,6 +851,8 @@ impl f64 {\n     /// let bytes = 12.5f64.to_le_bytes();\n     /// assert_eq!(bytes, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -861,6 +882,8 @@ impl f64 {\n     ///     }\n     /// );\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]"}, {"sha": "c90e301a9dd509a18d566487bd3ef3e164a25044", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -81,6 +81,8 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[doc(alias = \"popcount\")]\n         #[doc(alias = \"popcnt\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n \n@@ -95,6 +97,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn count_zeros(self) -> u32 {\n             (!self).count_ones()\n@@ -113,6 +117,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn leading_zeros(self) -> u32 {\n             (self as $UnsignedT).leading_zeros()\n@@ -131,6 +137,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn trailing_zeros(self) -> u32 {\n             (self as $UnsignedT).trailing_zeros()\n@@ -149,6 +157,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn leading_ones(self) -> u32 {\n             (self as $UnsignedT).leading_ones()\n@@ -167,6 +177,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn trailing_ones(self) -> u32 {\n             (self as $UnsignedT).trailing_ones()\n@@ -236,6 +248,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn swap_bytes(self) -> Self {\n             (self as $UnsignedT).swap_bytes() as Self\n@@ -257,8 +271,9 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.37.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n-        #[must_use]\n         pub const fn reverse_bits(self) -> Self {\n             (self as $UnsignedT).reverse_bits() as Self\n         }\n@@ -344,6 +359,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_be(self) -> Self { // or not to be?\n             #[cfg(target_endian = \"big\")]\n@@ -375,6 +392,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_le(self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -689,6 +708,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_neg(self) -> Option<Self> {\n             let (a, b) = self.overflowing_neg();\n@@ -801,6 +822,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n         #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_abs(self) -> Option<Self> {\n             if self.is_negative() {\n@@ -959,6 +982,8 @@ macro_rules! int_impl {\n \n         #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n         #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn saturating_neg(self) -> Self {\n             intrinsics::saturating_sub(0, self)\n@@ -980,6 +1005,8 @@ macro_rules! int_impl {\n \n         #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n         #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn saturating_abs(self) -> Self {\n             if self.is_negative() {\n@@ -1308,6 +1335,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn wrapping_neg(self) -> Self {\n             (0 as $SelfT).wrapping_sub(self)\n@@ -1390,6 +1419,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[allow(unused_attributes)]\n         #[inline]\n         pub const fn wrapping_abs(self) -> Self {\n@@ -1415,6 +1446,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"unsigned_abs\", since = \"1.51.0\")]\n         #[rustc_const_stable(feature = \"unsigned_abs\", since = \"1.51.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn unsigned_abs(self) -> $UnsignedT {\n              self.wrapping_abs() as $UnsignedT\n@@ -1781,6 +1814,8 @@ macro_rules! int_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[allow(unused_attributes)]\n         pub const fn overflowing_neg(self) -> (Self, bool) {\n             if unlikely!(self == Self::MIN) {\n@@ -1855,6 +1890,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn overflowing_abs(self) -> (Self, bool) {\n             (self.wrapping_abs(), self == Self::MIN)\n@@ -2199,7 +2236,8 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the logarithm of the number with respect to an arbitrary base.\n+        /// Returns the logarithm of the number with respect to an arbitrary base,\n+        /// rounded down.\n         ///\n         /// This method might not be optimized owing to implementation details;\n         /// `log2` can produce results more efficiently for base 2, and `log10`\n@@ -2208,8 +2246,8 @@ macro_rules! int_impl {\n         /// # Panics\n         ///\n         /// When the number is zero, or if the base is not at least 2; it\n-        /// panics in debug mode and the return value is wrapped to 0 in release\n-        /// mode (the only situation in which the method can return 0).\n+        /// panics in debug mode and the return value is 0 in release\n+        /// mode.\n         ///\n         /// # Examples\n         ///\n@@ -2219,7 +2257,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -2237,13 +2275,12 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the base 2 logarithm of the number.\n+        /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n         /// When the number is zero it panics in debug mode and the return value\n-        /// is wrapped to 0 in release mode (the only situation in which the\n-        /// method can return 0).\n+        /// is 0 in release mode.\n         ///\n         /// # Examples\n         ///\n@@ -2253,7 +2290,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -2271,13 +2308,12 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the base 10 logarithm of the number.\n+        /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n         /// When the number is zero it panics in debug mode and the return value\n-        /// is wrapped to 0 in release mode (the only situation in which the\n-        /// method can return 0).\n+        /// is 0 in release mode.\n         ///\n         /// # Example\n         ///\n@@ -2287,7 +2323,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -2305,7 +2341,8 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the logarithm of the number with respect to an arbitrary base.\n+        /// Returns the logarithm of the number with respect to an arbitrary base,\n+        /// rounded down.\n         ///\n         /// Returns `None` if the number is negative or zero, or if the base is not at least 2.\n         ///\n@@ -2321,7 +2358,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log(self, base: Self) -> Option<u32> {\n             if self <= 0 || base <= 1 {\n@@ -2345,7 +2382,7 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the base 2 logarithm of the number.\n+        /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// Returns `None` if the number is negative or zero.\n         ///\n@@ -2357,7 +2394,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log2(self) -> Option<u32> {\n             if self <= 0 {\n@@ -2369,7 +2406,7 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the base 10 logarithm of the number.\n+        /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// Returns `None` if the number is negative or zero.\n         ///\n@@ -2381,7 +2418,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log10(self) -> Option<u32> {\n             int_log10::$ActualT(self as $ActualT)\n@@ -2412,6 +2449,8 @@ macro_rules! int_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[allow(unused_attributes)]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn abs(self) -> Self {\n@@ -2443,6 +2482,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.abs_diff(\", stringify!($SelfT), \"::MAX), \", stringify!($UnsignedT), \"::MAX);\")]\n         /// ```\n         #[unstable(feature = \"int_abs_diff\", issue = \"89492\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn abs_diff(self, other: Self) -> $UnsignedT {\n             if self < other {\n@@ -2482,6 +2523,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_sign\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn signum(self) -> Self {\n             match self {\n@@ -2502,6 +2545,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert!(10\", stringify!($SelfT), \".is_positive());\")]\n         #[doc = concat!(\"assert!(!(-10\", stringify!($SelfT), \").is_positive());\")]\n         /// ```\n+        #[must_use]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[inline(always)]\n@@ -2518,6 +2562,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert!((-10\", stringify!($SelfT), \").is_negative());\")]\n         #[doc = concat!(\"assert!(!10\", stringify!($SelfT), \".is_negative());\")]\n         /// ```\n+        #[must_use]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[inline(always)]\n@@ -2536,6 +2581,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_be().to_ne_bytes()\n@@ -2554,6 +2601,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_le().to_ne_bytes()\n@@ -2588,6 +2637,8 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute them to arrays of bytes\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             // SAFETY: integers are plain old datatypes so we can always transmute them to"}, {"sha": "18ebf1cbb1063e51fe3a9970612054d075f2f390", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -259,6 +259,7 @@ impl u8 {\n     /// assert!(ascii.is_ascii());\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.43.0\")]\n     #[inline]\n@@ -419,6 +420,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_alphabetic());\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -452,6 +454,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_uppercase());\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -485,6 +488,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_lowercase());\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -521,6 +525,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_alphanumeric());\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -554,6 +559,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_digit());\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -590,6 +596,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_hexdigit());\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -627,6 +634,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_punctuation());\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -660,6 +668,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_graphic());\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -710,6 +719,7 @@ impl u8 {\n     /// assert!(lf.is_ascii_whitespace());\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -745,6 +755,7 @@ impl u8 {\n     /// assert!(lf.is_ascii_control());\n     /// assert!(esc.is_ascii_control());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]"}, {"sha": "4bb659db3a011137eb9e590ed4435d404c4d84f5", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -198,6 +198,8 @@ macro_rules! nonzero_leading_trailing_zeros {\n                 /// ```\n                 #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n                 #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn leading_zeros(self) -> u32 {\n                     // SAFETY: since `self` can not be zero it is safe to call ctlz_nonzero\n@@ -220,6 +222,8 @@ macro_rules! nonzero_leading_trailing_zeros {\n                 /// ```\n                 #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n                 #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn trailing_zeros(self) -> u32 {\n                     // SAFETY: since `self` can not be zero it is safe to call cttz_nonzero\n@@ -315,6 +319,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_add(self, other: $Int) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_add(other) {\n@@ -348,6 +354,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn saturating_add(self, other: $Int) -> $Ty {\n                     // SAFETY: $Int::saturating_add returns $Int::MAX on overflow\n@@ -378,6 +386,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const unsafe fn unchecked_add(self, other: $Int) -> $Ty {\n                     // SAFETY: The caller ensures there is no overflow.\n@@ -410,6 +420,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_next_power_of_two(self) -> Option<$Ty> {\n                     if let Some(nz) = self.get().checked_next_power_of_two() {\n@@ -460,6 +472,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn abs(self) -> $Ty {\n                     // SAFETY: This cannot overflow to zero.\n@@ -490,6 +504,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_abs(self) -> Option<$Ty> {\n                     if let Some(nz) = self.get().checked_abs() {\n@@ -524,6 +540,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn overflowing_abs(self) -> ($Ty, bool) {\n                     let (nz, flag) = self.get().overflowing_abs();\n@@ -562,6 +580,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn saturating_abs(self) -> $Ty {\n                     // SAFETY: absolute value of nonzero cannot yield zero values.\n@@ -595,6 +615,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn wrapping_abs(self) -> $Ty {\n                     // SAFETY: absolute value of nonzero cannot yield zero values.\n@@ -628,6 +650,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn unsigned_abs(self) -> $Uty {\n                     // SAFETY: absolute value of nonzero cannot yield zero values.\n@@ -675,6 +699,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_mul(self, other: $Ty) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_mul(other.get()) {\n@@ -709,6 +735,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn saturating_mul(self, other: $Ty) -> $Ty {\n                     // SAFETY: saturating_mul returns u*::MAX on overflow\n@@ -749,6 +777,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const unsafe fn unchecked_mul(self, other: $Ty) -> $Ty {\n                     // SAFETY: The caller ensures there is no overflow.\n@@ -778,6 +808,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_pow(self, other: u32) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_pow(other) {\n@@ -820,6 +852,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn saturating_pow(self, other: u32) -> $Ty {\n                     // SAFETY: saturating_pow returns u*::MAX on overflow\n@@ -878,6 +912,7 @@ macro_rules! nonzero_unsigned_is_power_of_two {\n                 #[doc = concat!(\"let ten = std::num::\", stringify!($Ty), \"::new(10).unwrap();\")]\n                 /// assert!(!ten.is_power_of_two());\n                 /// ```\n+                #[must_use]\n                 #[unstable(feature = \"nonzero_is_power_of_two\", issue = \"81106\")]\n                 #[inline]\n                 pub const fn is_power_of_two(self) -> bool {"}, {"sha": "eeaaf38e61dfb7480f7199d1d3b92e0fbf294ffa", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -474,6 +474,8 @@ macro_rules! saturating_int_impl {\n             #[inline]\n             #[doc(alias = \"popcount\")]\n             #[doc(alias = \"popcnt\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn count_ones(self) -> u32 {\n                 self.0.count_ones()\n@@ -492,6 +494,8 @@ macro_rules! saturating_int_impl {\n             #[doc = concat!(\"assert_eq!(Saturating(!0\", stringify!($t), \").count_zeros(), 0);\")]\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn count_zeros(self) -> u32 {\n                 self.0.count_zeros()\n@@ -512,6 +516,8 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn trailing_zeros(self) -> u32 {\n                 self.0.trailing_zeros()\n@@ -538,6 +544,8 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(n.rotate_left(32), m);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn rotate_left(self, n: u32) -> Self {\n                 Saturating(self.0.rotate_left(n))\n@@ -564,6 +572,8 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(n.rotate_right(4), m);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn rotate_right(self, n: u32) -> Self {\n                 Saturating(self.0.rotate_right(n))\n@@ -588,6 +598,8 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(m, Saturating(21760));\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn swap_bytes(self) -> Self {\n                 Saturating(self.0.swap_bytes())\n@@ -614,10 +626,11 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(m.0 as u16, 0b10101010_00000000);\n             /// assert_eq!(m, Saturating(-22016));\n             /// ```\n+            #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             #[rustc_const_stable(feature = \"const_reverse_bits\", since = \"1.37.0\")]\n-            #[inline]\n-            #[must_use]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn reverse_bits(self) -> Self {\n                 Saturating(self.0.reverse_bits())\n             }\n@@ -699,6 +712,8 @@ macro_rules! saturating_int_impl {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn to_be(self) -> Self {\n                 Saturating(self.0.to_be())\n             }\n@@ -726,6 +741,8 @@ macro_rules! saturating_int_impl {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn to_le(self) -> Self {\n                 Saturating(self.0.to_le())\n             }\n@@ -754,6 +771,8 @@ macro_rules! saturating_int_impl {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn pow(self, exp: u32) -> Self {\n                 Saturating(self.0.saturating_pow(exp))\n             }\n@@ -782,6 +801,8 @@ macro_rules! saturating_int_impl_signed {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn leading_zeros(self) -> u32 {\n                 self.0.leading_zeros()\n             }\n@@ -805,6 +826,8 @@ macro_rules! saturating_int_impl_signed {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn abs(self) -> Saturating<$t> {\n                 Saturating(self.0.saturating_abs())\n             }\n@@ -829,6 +852,8 @@ macro_rules! saturating_int_impl_signed {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn signum(self) -> Saturating<$t> {\n                 Saturating(self.0.signum())\n             }\n@@ -847,6 +872,7 @@ macro_rules! saturating_int_impl_signed {\n             #[doc = concat!(\"assert!(Saturating(10\", stringify!($t), \").is_positive());\")]\n             #[doc = concat!(\"assert!(!Saturating(-10\", stringify!($t), \").is_positive());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn is_positive(self) -> bool {\n@@ -867,6 +893,7 @@ macro_rules! saturating_int_impl_signed {\n             #[doc = concat!(\"assert!(Saturating(-10\", stringify!($t), \").is_negative());\")]\n             #[doc = concat!(\"assert!(!Saturating(10\", stringify!($t), \").is_negative());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn is_negative(self) -> bool {\n@@ -908,6 +935,8 @@ macro_rules! saturating_int_impl_unsigned {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn leading_zeros(self) -> u32 {\n                 self.0.leading_zeros()\n             }\n@@ -925,6 +954,7 @@ macro_rules! saturating_int_impl_unsigned {\n             #[doc = concat!(\"assert!(Saturating(16\", stringify!($t), \").is_power_of_two());\")]\n             #[doc = concat!(\"assert!(!Saturating(10\", stringify!($t), \").is_power_of_two());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub fn is_power_of_two(self) -> bool {"}, {"sha": "2a3663f2c0fdeeb02ae17c77e773b10fe3fd89e9", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 65, "deletions": 22, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -80,6 +80,8 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n         #[doc(alias = \"popcount\")]\n         #[doc(alias = \"popcnt\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn count_ones(self) -> u32 {\n             intrinsics::ctpop(self as $ActualT) as u32\n@@ -96,6 +98,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn count_zeros(self) -> u32 {\n             (!self).count_ones()\n@@ -114,6 +118,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn leading_zeros(self) -> u32 {\n             intrinsics::ctlz(self as $ActualT) as u32\n@@ -133,6 +139,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn trailing_zeros(self) -> u32 {\n             intrinsics::cttz(self) as u32\n@@ -151,6 +159,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn leading_ones(self) -> u32 {\n             (!self).leading_zeros()\n@@ -170,6 +180,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn trailing_ones(self) -> u32 {\n             (!self).trailing_zeros()\n@@ -238,6 +250,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn swap_bytes(self) -> Self {\n             intrinsics::bswap(self as $ActualT) as Self\n@@ -259,8 +273,9 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.37.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n-        #[must_use]\n         pub const fn reverse_bits(self) -> Self {\n             intrinsics::bitreverse(self as $ActualT) as Self\n         }\n@@ -349,6 +364,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn to_be(self) -> Self { // or not to be?\n             #[cfg(target_endian = \"big\")]\n@@ -381,6 +398,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn to_le(self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -658,7 +677,8 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the logarithm of the number with respect to an arbitrary base.\n+        /// Returns the logarithm of the number with respect to an arbitrary base,\n+        /// rounded down.\n         ///\n         /// This method might not be optimized owing to implementation details;\n         /// `log2` can produce results more efficiently for base 2, and `log10`\n@@ -667,8 +687,7 @@ macro_rules! uint_impl {\n         /// # Panics\n         ///\n         /// When the number is negative, zero, or if the base is not at least 2;\n-        /// it panics in debug mode and the return value is wrapped to 0 in\n-        /// release mode (the only situation in which the method can return 0).\n+        /// it panics in debug mode and the return value is 0 in release mode.\n         ///\n         /// # Examples\n         ///\n@@ -678,7 +697,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -696,13 +715,12 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the base 2 logarithm of the number.\n+        /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n         /// When the number is negative or zero it panics in debug mode and\n-        /// the return value is wrapped to 0 in release mode (the only situation in\n-        /// which the method can return 0).\n+        /// the return value is 0 in release mode.\n         ///\n         /// # Examples\n         ///\n@@ -712,7 +730,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -730,13 +748,12 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the base 10 logarithm of the number.\n+        /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n         /// When the number is negative or zero it panics in debug mode and the\n-        /// return value is wrapped to 0 in release mode (the only situation in\n-        /// which the method can return 0).\n+        /// return value is 0 in release mode.\n         ///\n         /// # Example\n         ///\n@@ -746,7 +763,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -764,7 +781,8 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the logarithm of the number with respect to an arbitrary base.\n+        /// Returns the logarithm of the number with respect to an arbitrary base,\n+        /// rounded down.\n         ///\n         /// Returns `None` if the number is zero, or if the base is not at least 2.\n         ///\n@@ -780,7 +798,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log(self, base: Self) -> Option<u32> {\n             if self <= 0 || base <= 1 {\n@@ -804,7 +822,7 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the base 2 logarithm of the number.\n+        /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// Returns `None` if the number is zero.\n         ///\n@@ -816,7 +834,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log2(self) -> Option<u32> {\n             if self <= 0 {\n@@ -828,7 +846,7 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the base 10 logarithm of the number.\n+        /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// Returns `None` if the number is zero.\n         ///\n@@ -840,7 +858,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log10(self) -> Option<u32> {\n             int_log10::$ActualT(self as $ActualT)\n@@ -861,6 +879,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_neg(self) -> Option<Self> {\n             let (a, b) = self.overflowing_neg();\n@@ -1222,7 +1242,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                          without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n             intrinsics::wrapping_mul(self, rhs)\n@@ -1347,6 +1367,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn wrapping_neg(self) -> Self {\n             (0 as $SelfT).wrapping_sub(self)\n@@ -1602,6 +1624,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(110), 10\", stringify!($SelfT), \");\")]\n         /// ```\n         #[unstable(feature = \"int_abs_diff\", issue = \"89492\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn abs_diff(self, other: Self) -> Self {\n             if mem::size_of::<Self>() == 1 {\n@@ -1776,6 +1800,8 @@ macro_rules! uint_impl {\n         #[inline(always)]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         pub const fn overflowing_neg(self) -> (Self, bool) {\n             ((!self).wrapping_add(1), self != 0)\n         }\n@@ -1892,7 +1918,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                          without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn pow(self, mut exp: u32) -> Self {\n@@ -1989,6 +2015,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_floor(4), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         #[rustc_inherit_overflow_checks]\n         pub const fn unstable_div_floor(self, rhs: Self) -> Self {\n@@ -2010,6 +2038,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_ceil(4), 2);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn unstable_div_ceil(self, rhs: Self) -> Self {\n@@ -2087,6 +2117,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert!(16\", stringify!($SelfT), \".is_power_of_two());\")]\n         #[doc = concat!(\"assert!(!10\", stringify!($SelfT), \".is_power_of_two());\")]\n         /// ```\n+        #[must_use]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_is_power_of_two\", since = \"1.32.0\")]\n         #[inline(always)]\n@@ -2120,7 +2151,7 @@ macro_rules! uint_impl {\n         /// Returns the smallest power of two greater than or equal to `self`.\n         ///\n         /// When return value overflows (i.e., `self > (1 << (N-1))` for type\n-        /// `uN`), it panics in debug mode and return value is wrapped to 0 in\n+        /// `uN`), it panics in debug mode and the return value is wrapped to 0 in\n         /// release mode (the only situation in which method can return 0).\n         ///\n         /// # Examples\n@@ -2133,6 +2164,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn next_power_of_two(self) -> Self {\n@@ -2155,6 +2188,8 @@ macro_rules! uint_impl {\n         #[inline]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         pub const fn checked_next_power_of_two(self) -> Option<Self> {\n             self.one_less_than_next_power_of_two().checked_add(1)\n         }\n@@ -2177,6 +2212,8 @@ macro_rules! uint_impl {\n         #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n                    reason = \"needs decision on wrapping behaviour\")]\n         #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         pub const fn wrapping_next_power_of_two(self) -> Self {\n             self.one_less_than_next_power_of_two().wrapping_add(1)\n         }\n@@ -2194,6 +2231,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_be().to_ne_bytes()\n@@ -2212,6 +2251,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_le().to_ne_bytes()\n@@ -2244,6 +2285,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute them to arrays of bytes\n         #[inline]"}, {"sha": "66620fc8fd14d5ce335012caa1b8954875298d7c", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -469,6 +469,8 @@ macro_rules! wrapping_int_impl {\n             #[inline]\n             #[doc(alias = \"popcount\")]\n             #[doc(alias = \"popcnt\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn count_ones(self) -> u32 {\n                 self.0.count_ones()\n@@ -487,6 +489,8 @@ macro_rules! wrapping_int_impl {\n             #[doc = concat!(\"assert_eq!(Wrapping(!0\", stringify!($t), \").count_zeros(), 0);\")]\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn count_zeros(self) -> u32 {\n                 self.0.count_zeros()\n@@ -507,6 +511,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn trailing_zeros(self) -> u32 {\n                 self.0.trailing_zeros()\n@@ -533,6 +539,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(n.rotate_left(32), m);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn rotate_left(self, n: u32) -> Self {\n                 Wrapping(self.0.rotate_left(n))\n@@ -559,6 +567,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(n.rotate_right(4), m);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn rotate_right(self, n: u32) -> Self {\n                 Wrapping(self.0.rotate_right(n))\n@@ -583,6 +593,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(m, Wrapping(21760));\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn swap_bytes(self) -> Self {\n                 Wrapping(self.0.swap_bytes())\n@@ -610,8 +622,9 @@ macro_rules! wrapping_int_impl {\n             /// ```\n             #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n             #[rustc_const_stable(feature = \"const_reverse_bits\", since = \"1.37.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n-            #[must_use]\n             pub const fn reverse_bits(self) -> Self {\n                 Wrapping(self.0.reverse_bits())\n             }\n@@ -692,6 +705,8 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn to_be(self) -> Self {\n                 Wrapping(self.0.to_be())\n@@ -719,6 +734,8 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn to_le(self) -> Self {\n                 Wrapping(self.0.to_le())\n@@ -747,6 +764,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub fn pow(self, exp: u32) -> Self {\n                 Wrapping(self.0.wrapping_pow(exp))\n@@ -775,6 +794,8 @@ macro_rules! wrapping_int_impl_signed {\n             /// assert_eq!(n.leading_zeros(), 3);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn leading_zeros(self) -> u32 {\n                 self.0.leading_zeros()\n@@ -801,6 +822,8 @@ macro_rules! wrapping_int_impl_signed {\n             /// assert_eq!(Wrapping(-128i8).abs().0 as u8, 128u8);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub fn abs(self) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_abs())\n@@ -825,6 +848,8 @@ macro_rules! wrapping_int_impl_signed {\n             #[doc = concat!(\"assert_eq!(Wrapping(-10\", stringify!($t), \").signum(), Wrapping(-1));\")]\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub fn signum(self) -> Wrapping<$t> {\n                 Wrapping(self.0.signum())\n@@ -844,6 +869,7 @@ macro_rules! wrapping_int_impl_signed {\n             #[doc = concat!(\"assert!(Wrapping(10\", stringify!($t), \").is_positive());\")]\n             #[doc = concat!(\"assert!(!Wrapping(-10\", stringify!($t), \").is_positive());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn is_positive(self) -> bool {\n@@ -864,6 +890,7 @@ macro_rules! wrapping_int_impl_signed {\n             #[doc = concat!(\"assert!(Wrapping(-10\", stringify!($t), \").is_negative());\")]\n             #[doc = concat!(\"assert!(!Wrapping(10\", stringify!($t), \").is_negative());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn is_negative(self) -> bool {\n@@ -893,6 +920,8 @@ macro_rules! wrapping_int_impl_unsigned {\n             /// assert_eq!(n.leading_zeros(), 2);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn leading_zeros(self) -> u32 {\n                 self.0.leading_zeros()\n@@ -911,6 +940,7 @@ macro_rules! wrapping_int_impl_unsigned {\n             #[doc = concat!(\"assert!(Wrapping(16\", stringify!($t), \").is_power_of_two());\")]\n             #[doc = concat!(\"assert!(!Wrapping(10\", stringify!($t), \").is_power_of_two());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub fn is_power_of_two(self) -> bool {\n@@ -935,6 +965,8 @@ macro_rules! wrapping_int_impl_unsigned {\n             #[doc = concat!(\"assert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\")]\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n                        reason = \"needs decision on wrapping behaviour\")]\n             pub fn next_power_of_two(self) -> Self {"}, {"sha": "14ce94c178c5bdb8785bafd9f98f9b7df6295567", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -188,6 +188,7 @@ impl str {\n     /// // third byte of `\u8001`\n     /// assert!(!s.is_char_boundary(8));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]\n     #[inline]\n     pub fn is_char_boundary(&self, index: usize) -> bool {"}, {"sha": "e1408c7cc2ecc56d89c34583b1d008654f4750d8", "filename": "library/core/src/time.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -291,6 +291,7 @@ impl Duration {\n     /// assert!(!Duration::from_nanos(1).is_zero());\n     /// assert!(!Duration::from_secs(1).is_zero());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"duration_zero\", since = \"1.53.0\")]\n     #[rustc_const_stable(feature = \"duration_zero\", since = \"1.53.0\")]\n     #[inline]\n@@ -464,6 +465,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(1, 0).checked_add(Duration::new(u64::MAX, 0)), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn checked_add(self, rhs: Duration) -> Option<Duration> {\n@@ -497,6 +500,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(1, 0).saturating_add(Duration::new(u64::MAX, 0)), Duration::MAX);\n     /// ```\n     #[stable(feature = \"duration_saturating_ops\", since = \"1.53.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn saturating_add(self, rhs: Duration) -> Duration {\n@@ -520,6 +525,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(0, 0).checked_sub(Duration::new(0, 1)), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn checked_sub(self, rhs: Duration) -> Option<Duration> {\n@@ -551,6 +558,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(0, 0).saturating_sub(Duration::new(0, 1)), Duration::ZERO);\n     /// ```\n     #[stable(feature = \"duration_saturating_ops\", since = \"1.53.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn saturating_sub(self, rhs: Duration) -> Duration {\n@@ -574,6 +583,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(u64::MAX - 1, 0).checked_mul(2), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn checked_mul(self, rhs: u32) -> Option<Duration> {\n@@ -603,6 +614,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(u64::MAX - 1, 0).saturating_mul(2), Duration::MAX);\n     /// ```\n     #[stable(feature = \"duration_saturating_ops\", since = \"1.53.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn saturating_mul(self, rhs: u32) -> Duration {\n@@ -627,6 +640,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(2, 0).checked_div(0), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn checked_div(self, rhs: u32) -> Option<Duration> {\n@@ -814,6 +829,8 @@ impl Duration {\n     /// assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn mul_f64(self, rhs: f64) -> Duration {\n@@ -836,6 +853,8 @@ impl Duration {\n     /// assert_eq!(dur.mul_f32(3.14e5), Duration::new(847799, 969_120_256));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn mul_f32(self, rhs: f32) -> Duration {\n@@ -857,6 +876,8 @@ impl Duration {\n     /// assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_598));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn div_f64(self, rhs: f64) -> Duration {\n@@ -880,6 +901,8 @@ impl Duration {\n     /// assert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_598));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn div_f32(self, rhs: f32) -> Duration {\n@@ -898,6 +921,8 @@ impl Duration {\n     /// assert_eq!(dur1.div_duration_f64(dur2), 0.5);\n     /// ```\n     #[unstable(feature = \"div_duration\", issue = \"63139\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn div_duration_f64(self, rhs: Duration) -> f64 {\n@@ -916,6 +941,8 @@ impl Duration {\n     /// assert_eq!(dur1.div_duration_f32(dur2), 0.5);\n     /// ```\n     #[unstable(feature = \"div_duration\", issue = \"63139\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn div_duration_f32(self, rhs: Duration) -> f32 {"}, {"sha": "3a06cd04ab146345e3d3198a9521d60b7bcc3a98", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -61,7 +61,7 @@ use std::{error, fmt, iter, mem};\n /// non-panicking way to detect whether the infrastructure required to use the\n /// API of proc_macro is presently available. Returns true if invoked from\n /// inside of a procedural macro, false if invoked from any other binary.\n-#[unstable(feature = \"proc_macro_is_available\", issue = \"71436\")]\n+#[stable(feature = \"proc_macro_is_available\", since = \"1.57.0\")]\n pub fn is_available() -> bool {\n     bridge::Bridge::is_available()\n }"}, {"sha": "8594fa42266b41306d242f59c65b27fc5ca732d0", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -898,7 +898,7 @@ impl Step for RustdocGUI {\n         let out_dir = builder.test_out(self.target).join(\"rustdoc-gui\");\n \n         // We remove existing folder to be sure there won't be artifacts remaining.\n-        let _ = fs::remove_dir_all(&out_dir);\n+        builder.clear_if_dirty(&out_dir, &builder.rustdoc(self.compiler));\n \n         let src_path = builder.build.src.join(\"src/test/rustdoc-gui/src\");\n         // We generate docs for the libraries present in the rustdoc-gui's src folder."}, {"sha": "5a2cef24870be49daaff686d45f225e39cfdffd4", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -456,7 +456,7 @@ operand := reg_operand / \"const\" const_expr / \"sym\" path\n clobber_abi := \"clobber_abi(\" <abi> \")\"\n option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\" / \"raw\"\n options := \"options(\" option *[\",\" option] [\",\"] \")\"\n-asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) [\",\" clobber_abi]  [\",\" options] [\",\"] \")\"\n+asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) [\",\" clobber_abi] *(\",\" options) [\",\"] \")\"\n ```\n \n Inline assembly is currently supported on the following architectures:"}, {"sha": "2a34ed4d4f64497177c0845538b2158150eed66c", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -0,0 +1,31 @@\n+#![deny(non_exhaustive_omitted_patterns)]\n+//~^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+//~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+#![allow(non_exhaustive_omitted_patterns)]\n+//~^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+//~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+\n+fn main() {\n+    enum Foo {\n+        A, B, C,\n+    }\n+\n+    #[allow(non_exhaustive_omitted_patterns)]\n+    match Foo::A {\n+        Foo::A => {}\n+        Foo::B => {}\n+    }\n+    //~^^^^^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+\n+    match Foo::A {\n+        Foo::A => {}\n+        Foo::B => {}\n+        #[warn(non_exhaustive_omitted_patterns)]\n+        _ => {}\n+    }\n+    //~^^^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+}"}, {"sha": "691f64cf0addd443a43f258f9ae7ebeda0671058", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -0,0 +1,93 @@\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:1:1\n+   |\n+LL | #![deny(non_exhaustive_omitted_patterns)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:4:1\n+   |\n+LL | #![allow(non_exhaustive_omitted_patterns)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+   |\n+LL |     #[allow(non_exhaustive_omitted_patterns)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+   |\n+LL |     #[allow(non_exhaustive_omitted_patterns)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:26:9\n+   |\n+LL |         #[warn(non_exhaustive_omitted_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:1:1\n+   |\n+LL | #![deny(non_exhaustive_omitted_patterns)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:4:1\n+   |\n+LL | #![allow(non_exhaustive_omitted_patterns)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+   |\n+LL |     #[allow(non_exhaustive_omitted_patterns)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+   |\n+LL |     #[allow(non_exhaustive_omitted_patterns)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:26:9\n+   |\n+LL |         #[warn(non_exhaustive_omitted_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "03f5265e376f060c3a50c4a47d7862ff86055029", "filename": "src/test/ui/proc-macro/auxiliary/is-available.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fis-available.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fis-available.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fis-available.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -2,7 +2,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro_is_available)]\n \n extern crate proc_macro;\n "}, {"sha": "b32bb61b495d3177203a02ca52a6dff1cc00fa4b", "filename": "src/test/ui/proc-macro/is-available.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Fproc-macro%2Fis-available.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Fproc-macro%2Fis-available.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fis-available.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(proc_macro_is_available)]\n-\n extern crate proc_macro;\n \n // aux-build:is-available.rs"}, {"sha": "ce1b5c7c377a49d05ffe10c056a4d506a6739741", "filename": "src/test/ui/rfc-2008-non-exhaustive/reachable-patterns.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -1,5 +1,7 @@\n // Test that the `non_exhaustive_omitted_patterns` lint is triggered correctly.\n \n+#![feature(non_exhaustive_omitted_patterns_lint)]\n+\n // aux-build:enums.rs\n extern crate enums;\n "}, {"sha": "5b21e0402b192795c1008904da22eae97f7d24af", "filename": "src/test/ui/rfc-2008-non-exhaustive/reachable-patterns.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.stderr?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -1,47 +1,47 @@\n warning: some fields are not explicitly listed\n-  --> $DIR/reachable-patterns.rs:127:9\n+  --> $DIR/reachable-patterns.rs:129:9\n    |\n LL |         VariantNonExhaustive::Bar { x, .. } => {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `y` not listed\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:124:12\n+  --> $DIR/reachable-patterns.rs:126:12\n    |\n LL |     #[warn(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n    = note: the pattern is of type `VariantNonExhaustive` and the `non_exhaustive_omitted_patterns` attribute was found\n \n warning: some fields are not explicitly listed\n-  --> $DIR/reachable-patterns.rs:132:9\n+  --> $DIR/reachable-patterns.rs:134:9\n    |\n LL |     let FunctionalRecord { first_field, second_field, .. } = FunctionalRecord::default();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `third_field` not listed\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:131:12\n+  --> $DIR/reachable-patterns.rs:133:12\n    |\n LL |     #[warn(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n    = note: the pattern is of type `FunctionalRecord` and the `non_exhaustive_omitted_patterns` attribute was found\n \n warning: some fields are not explicitly listed\n-  --> $DIR/reachable-patterns.rs:140:29\n+  --> $DIR/reachable-patterns.rs:142:29\n    |\n LL |     let NestedStruct { bar: NormalStruct { first_field, .. }, .. } = NestedStruct::default();\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `second_field` not listed\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:139:12\n+  --> $DIR/reachable-patterns.rs:141:12\n    |\n LL |     #[warn(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n    = note: the pattern is of type `NormalStruct` and the `non_exhaustive_omitted_patterns` attribute was found\n \n warning: some fields are not explicitly listed\n-  --> $DIR/reachable-patterns.rs:140:9\n+  --> $DIR/reachable-patterns.rs:142:9\n    |\n LL |     let NestedStruct { bar: NormalStruct { first_field, .. }, .. } = NestedStruct::default();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `foo` not listed\n@@ -50,63 +50,63 @@ LL |     let NestedStruct { bar: NormalStruct { first_field, .. }, .. } = Nested\n    = note: the pattern is of type `NestedStruct` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:54:9\n+  --> $DIR/reachable-patterns.rs:56:9\n    |\n LL |         _ => {}\n    |         ^ pattern `Struct { .. }` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:53:16\n+  --> $DIR/reachable-patterns.rs:55:16\n    |\n LL |         #[deny(non_exhaustive_omitted_patterns)]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:61:9\n+  --> $DIR/reachable-patterns.rs:63:9\n    |\n LL |         _ => {}\n    |         ^ pattern `Tuple(_)` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:60:16\n+  --> $DIR/reachable-patterns.rs:62:16\n    |\n LL |         #[deny(non_exhaustive_omitted_patterns)]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:71:9\n+  --> $DIR/reachable-patterns.rs:73:9\n    |\n LL |         _ => {}\n    |         ^ pattern `Unit` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:70:16\n+  --> $DIR/reachable-patterns.rs:72:16\n    |\n LL |         #[deny(non_exhaustive_omitted_patterns)]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:88:32\n+  --> $DIR/reachable-patterns.rs:90:32\n    |\n LL |         NestedNonExhaustive::A(_) => {}\n    |                                ^ patterns `Tuple(_)` and `Struct { .. }` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:85:12\n+  --> $DIR/reachable-patterns.rs:87:12\n    |\n LL |     #[deny(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:90:9\n+  --> $DIR/reachable-patterns.rs:92:9\n    |\n LL |         _ => {}\n    |         ^ pattern `C` not covered\n@@ -115,27 +115,27 @@ LL |         _ => {}\n    = note: the matched value is of type `NestedNonExhaustive` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:120:9\n+  --> $DIR/reachable-patterns.rs:122:9\n    |\n LL |         _ => {}\n    |         ^ patterns `HostUnreachable`, `NetworkUnreachable`, `NetworkDown` and 18 more not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:97:12\n+  --> $DIR/reachable-patterns.rs:99:12\n    |\n LL |     #[deny(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `ErrorKind` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:157:9\n+  --> $DIR/reachable-patterns.rs:159:9\n    |\n LL |         _ => {}\n    |         ^ pattern `A(_)` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:155:12\n+  --> $DIR/reachable-patterns.rs:157:12\n    |\n LL |     #[deny(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}