{"sha": "41ae146057431d99d5ab5c87d385dbf787a10ea2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYWUxNDYwNTc0MzFkOTlkNWFiNWM4N2QzODVkYmY3ODdhMTBlYTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-19T04:45:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-19T22:07:46Z"}, "message": "integrate cap clause into type state, but not trans", "tree": {"sha": "fe680d77ad8859f131d4deba3b702c68ce35fa04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe680d77ad8859f131d4deba3b702c68ce35fa04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41ae146057431d99d5ab5c87d385dbf787a10ea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41ae146057431d99d5ab5c87d385dbf787a10ea2", "html_url": "https://github.com/rust-lang/rust/commit/41ae146057431d99d5ab5c87d385dbf787a10ea2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41ae146057431d99d5ab5c87d385dbf787a10ea2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b2a430df33a234be62d97d7efc1f0a3d419b50", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b2a430df33a234be62d97d7efc1f0a3d419b50", "html_url": "https://github.com/rust-lang/rust/commit/b2b2a430df33a234be62d97d7efc1f0a3d419b50"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "bb68175987e9dcb9b4158b39052c296d36fb3775", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ae146057431d99d5ab5c87d385dbf787a10ea2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ae146057431d99d5ab5c87d385dbf787a10ea2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=41ae146057431d99d5ab5c87d385dbf787a10ea2", "patch": "@@ -3551,7 +3551,7 @@ fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n         ret trans_unary(bcx, op, x, e.id, dest);\n       }\n       // NDM captures\n-      ast::expr_fn(f, cap) {\n+      ast::expr_fn(f, cap_clause) {\n         ret trans_closure::trans_expr_fn(bcx, f, e.span, e.id, dest);\n       }\n       ast::expr_bind(f, args) {"}, {"sha": "d105a7dd579830f4cd8aa0e1de88c4a7145a7fde", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41ae146057431d99d5ab5c87d385dbf787a10ea2/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ae146057431d99d5ab5c87d385dbf787a10ea2/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=41ae146057431d99d5ab5c87d385dbf787a10ea2", "patch": "@@ -865,7 +865,6 @@ fn copy_in_poststate_two(fcx: fn_ctxt, src_post: poststate,\n     };\n }\n \n-\n /* FIXME should refactor this better */\n fn forget_in_postcond(fcx: fn_ctxt, parent_exp: node_id, dead_v: node_id) {\n     // In the postcondition given by parent_exp, clear the bits\n@@ -875,6 +874,9 @@ fn forget_in_postcond(fcx: fn_ctxt, parent_exp: node_id, dead_v: node_id) {\n       some(d_id) {\n         for c: norm_constraint in constraints(fcx) {\n             if constraint_mentions(fcx, c, d_id) {\n+                log (\"clearing constraint \",\n+                     c.bit_num,\n+                     constraint_to_str(fcx.ccx.tcx, c.c));\n                 clear_in_postcond(c.bit_num,\n                                   node_id_to_ts_ann(fcx.ccx,\n                                                     parent_exp).conditions);"}, {"sha": "e8a1d2e938ed9c237bd878f1e12954092519844f", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/41ae146057431d99d5ab5c87d385dbf787a10ea2/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ae146057431d99d5ab5c87d385dbf787a10ea2/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=41ae146057431d99d5ab5c87d385dbf787a10ea2", "patch": "@@ -3,7 +3,7 @@ import syntax::ast;\n import ast::{_fn, stmt,\n              fn_ident, node_id, crate, return_val, noreturn,\n              expr};\n-import syntax::visit;\n+import syntax::{visit, print};\n import syntax::codemap::span;\n import middle::ty::{type_is_nil, ret_ty_of_fn};\n import tstate::ann::{\n@@ -73,14 +73,12 @@ fn check_states_stmt(s: @stmt, fcx: fn_ctxt, v: visit::vt<fn_ctxt>) {\n     let pres: prestate = ann_prestate(a);\n \n \n-    /*\n-      log_err(\"check_states_stmt:\");\n-      log_stmt_err(*s);\n-      log_err(\"prec = \");\n-      log_tritv_err(fcx, prec);\n-      log_err(\"pres = \");\n-      log_tritv_err(fcx, pres);\n-    */\n+    log(\"check_states_stmt:\");\n+    log print::pprust::stmt_to_str(*s);\n+    log(\"prec = \");\n+    log_tritv(fcx, prec);\n+    log(\"pres = \");\n+    log_tritv(fcx, pres);\n \n     if !implies(pres, prec) {\n         let ss = \"\";"}, {"sha": "5cfdd0301a6d88668965b515ad8f154ad576836d", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/41ae146057431d99d5ab5c87d385dbf787a10ea2/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ae146057431d99d5ab5c87d385dbf787a10ea2/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=41ae146057431d99d5ab5c87d385dbf787a10ea2", "patch": "@@ -339,13 +339,21 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n         find_pre_post_expr(fcx, arg);\n         copy_pre_post(fcx.ccx, e.id, arg);\n       }\n-      expr_fn(f, _) { // NDM captures\n+      expr_fn(f, cap_clause) {\n         let rslt = expr_pp(fcx.ccx, e);\n         clear_pp(rslt);\n-        for @{def, span} in *freevars::get_freevars(fcx.ccx.tcx, e.id) {\n+        for def in *freevars::get_freevars(fcx.ccx.tcx, e.id) {\n             log (\"handle_var_def: def=\", def);\n-            handle_var_def(fcx, rslt, def, \"upvar\");\n+            handle_var_def(fcx, rslt, def.def, \"upvar\");\n         }\n+\n+        vec::iter(cap_clause.moves) { |cap_item|\n+            log (\"forget_in_postcond: \", cap_item);\n+            forget_in_postcond(fcx, e.id, cap_item.id);\n+        }\n+\n+        let ann = node_id_to_ts_ann(fcx.ccx, e.id);\n+        log_cond(tritv::to_vec(ann.conditions.postcondition));\n       }\n       expr_block(b) {\n         find_pre_post_block(fcx, b);"}, {"sha": "209899c26b166033f45bc054d2768dd0efe66d4d", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/41ae146057431d99d5ab5c87d385dbf787a10ea2/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ae146057431d99d5ab5c87d385dbf787a10ea2/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=41ae146057431d99d5ab5c87d385dbf787a10ea2", "patch": "@@ -320,6 +320,19 @@ fn join_then_else(fcx: fn_ctxt, antec: @expr, conseq: blk,\n     ret changed;\n }\n \n+fn find_pre_post_state_cap_clause(fcx: fn_ctxt, e_id: node_id,\n+                                  pres: prestate, cap_clause: capture_clause)\n+    -> bool\n+{\n+    let ccx = fcx.ccx;\n+    let pres_changed = set_prestate_ann(ccx, e_id, pres);\n+    let post = tritv_clone(pres);\n+    vec::iter(cap_clause.moves) { |cap_item|\n+        forget_in_poststate(fcx, post, cap_item.id);\n+    }\n+    ret set_poststate_ann(ccx, e_id, post) || pres_changed;\n+}\n+\n fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n     let num_constrs = num_constraints(fcx.enclosing);\n \n@@ -358,7 +371,9 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n       }\n       expr_mac(_) { fcx.ccx.tcx.sess.bug(\"unexpanded macro\"); }\n       expr_lit(l) { ret pure_exp(fcx.ccx, e.id, pres); }\n-      expr_fn(f, _) { ret pure_exp(fcx.ccx, e.id, pres); } // NDM Captures\n+      expr_fn(_, cap_clause) {\n+        ret find_pre_post_state_cap_clause(fcx, e.id, pres, *cap_clause);\n+      }\n       expr_block(b) {\n         ret find_pre_post_state_block(fcx, pres, b) |\n                 set_prestate_ann(fcx.ccx, e.id, pres) |"}]}