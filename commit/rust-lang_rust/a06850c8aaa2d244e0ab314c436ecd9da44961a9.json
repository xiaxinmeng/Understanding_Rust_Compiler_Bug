{"sha": "a06850c8aaa2d244e0ab314c436ecd9da44961a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNjg1MGM4YWFhMmQyNDRlMGFiMzE0YzQzNmVjZDlkYTQ0OTYxYTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T01:29:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T01:29:55Z"}, "message": "rustdoc: Prune unexported enums and variants", "tree": {"sha": "e147ecc51769b459b27ce6d86e01102fe18400cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e147ecc51769b459b27ce6d86e01102fe18400cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a06850c8aaa2d244e0ab314c436ecd9da44961a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a06850c8aaa2d244e0ab314c436ecd9da44961a9", "html_url": "https://github.com/rust-lang/rust/commit/a06850c8aaa2d244e0ab314c436ecd9da44961a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a06850c8aaa2d244e0ab314c436ecd9da44961a9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "url": "https://api.github.com/repos/rust-lang/rust/commits/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "html_url": "https://github.com/rust-lang/rust/commit/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "c865d8bd06fce571e22ebd38ffdbd5c9357b5a62", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 92, "deletions": 1, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a06850c8aaa2d244e0ab314c436ecd9da44961a9/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06850c8aaa2d244e0ab314c436ecd9da44961a9/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=a06850c8aaa2d244e0ab314c436ecd9da44961a9", "patch": "@@ -23,7 +23,8 @@ fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n     ~{\n         mods: doc::modlist(exported_mods(fold.ctxt, doc)),\n         fns: doc::fnlist(exported_fns(fold.ctxt, doc)),\n-        consts: doc::constlist(exported_consts(fold.ctxt, doc))\n+        consts: doc::constlist(exported_consts(fold.ctxt, doc)),\n+        enums: doc::enumlist(exported_enums(fold.ctxt, doc))\n         with *doc\n     }\n }\n@@ -52,6 +53,14 @@ fn exported_consts(srv: astsrv::srv, doc: doc::moddoc) -> [doc::constdoc] {\n     )\n }\n \n+fn exported_enums(srv: astsrv::srv, doc: doc::moddoc) -> [doc::enumdoc] {\n+    exported_things(\n+        srv, doc,\n+        exported_enums_from_crate,\n+        exported_enums_from_mod\n+    )\n+}\n+\n fn exported_things<T>(\n     srv: astsrv::srv,\n     doc: doc::moddoc,\n@@ -107,6 +116,20 @@ fn exported_consts_from_mod(\n     exported_consts_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n }\n \n+fn exported_enums_from_crate(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc\n+) -> [doc::enumdoc] {\n+    exported_enums_from(srv, doc, is_exported_from_crate)\n+}\n+\n+fn exported_enums_from_mod(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc\n+) -> [doc::enumdoc] {\n+    exported_enums_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n+}\n+\n fn exported_fns_from(\n     srv: astsrv::srv,\n     doc: doc::moddoc,\n@@ -149,6 +172,38 @@ fn exported_consts_from(\n     }\n }\n \n+fn exported_enums_from(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc,\n+    is_exported: fn(astsrv::srv, str) -> bool\n+) -> [doc::enumdoc] {\n+    vec::filter_map(*doc.enums) { |doc|\n+        if is_exported(srv, doc.name) {\n+            some(~{\n+                variants: exported_variants_from(\n+                    srv, doc, is_exported)\n+                with *doc\n+            })\n+        } else {\n+            none\n+        }\n+    }\n+}\n+\n+fn exported_variants_from(\n+    srv: astsrv::srv,\n+    doc: doc::enumdoc,\n+    is_exported: fn(astsrv::srv, str) -> bool\n+) -> [doc::variantdoc] {\n+    vec::filter_map(doc.variants) { |doc|\n+        if is_exported(srv, doc.name) {\n+            some(doc)\n+        } else {\n+            none\n+        }\n+    }\n+}\n+\n fn is_exported_from_mod(\n     srv: astsrv::srv,\n     mod_id: doc::ast_id,\n@@ -231,3 +286,39 @@ fn should_prune_unexported_consts_from_top_mod() {\n     let doc = run(srv, doc);\n     assert vec::len(*doc.topmod.consts) == 1u;\n }\n+\n+#[test]\n+fn should_prune_unexported_enums_from_top_mod() {\n+    let source = \"export a; mod a { } enum b { c }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::len(*doc.topmod.enums) == 0u;\n+}\n+\n+#[test]\n+fn should_prune_unexported_enums() {\n+    let source = \"mod a { export a; mod a { } enum b { c } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::len(*doc.topmod.mods[0].enums) == 0u;\n+}\n+\n+#[test]\n+fn should_prune_unexported_variants_from_top_mod() {\n+    let source = \"export b::{}; enum b { c }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::len(doc.topmod.enums[0].variants) == 0u;\n+}\n+\n+#[test]\n+fn should_prune_unexported_variants() {\n+    let source = \"mod a { export b::{}; enum b { c } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::len(doc.topmod.mods[0].enums[0].variants) == 0u;\n+}"}]}