{"sha": "552aea508d96a288999e7dd21a5fd7bfbb463048", "node_id": "C_kwDOAAsO6NoAKDU1MmFlYTUwOGQ5NmEyODg5OTllN2RkMjFhNWZkN2JmYmI0NjMwNDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-10T08:10:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-10T08:10:37Z"}, "message": "Auto merge of #14311 - Veykril:lib-diags, r=Veykril\n\ninternal: Don't attempt to calculate diagnostics in library crates\n\nWe already filtered these later on, but we might as well stop calculating them alltogether. This way we also show cargo diagnostics that occur outside of the workspace which can happen when something goes very wrong (and which usually then causes no check diagnostics to appear in the workspace at all)", "tree": {"sha": "0fc8503b4c5aee42767b22190bf7f40253086fc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fc8503b4c5aee42767b22190bf7f40253086fc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/552aea508d96a288999e7dd21a5fd7bfbb463048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/552aea508d96a288999e7dd21a5fd7bfbb463048", "html_url": "https://github.com/rust-lang/rust/commit/552aea508d96a288999e7dd21a5fd7bfbb463048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/552aea508d96a288999e7dd21a5fd7bfbb463048/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14b9d182d54f22eade7afa644d105a18536c596e", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b9d182d54f22eade7afa644d105a18536c596e", "html_url": "https://github.com/rust-lang/rust/commit/14b9d182d54f22eade7afa644d105a18536c596e"}, {"sha": "116775bc83b65ed4c558633d0c9bec31f41b1454", "url": "https://api.github.com/repos/rust-lang/rust/commits/116775bc83b65ed4c558633d0c9bec31f41b1454", "html_url": "https://github.com/rust-lang/rust/commit/116775bc83b65ed4c558633d0c9bec31f41b1454"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "43a0bf8ec05e8aff992a8346e7d36d025ef98fc0", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/552aea508d96a288999e7dd21a5fd7bfbb463048/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552aea508d96a288999e7dd21a5fd7bfbb463048/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=552aea508d96a288999e7dd21a5fd7bfbb463048", "patch": "@@ -323,17 +323,6 @@ impl GlobalState {\n \n         if let Some(diagnostic_changes) = self.diagnostics.take_changes() {\n             for file_id in diagnostic_changes {\n-                let db = self.analysis_host.raw_database();\n-                let source_root = db.file_source_root(file_id);\n-                if db.source_root(source_root).is_library {\n-                    // Only publish diagnostics for files in the workspace, not from crates.io deps\n-                    // or the sysroot.\n-                    // While theoretically these should never have errors, we have quite a few false\n-                    // positives particularly in the stdlib, and those diagnostics would stay around\n-                    // forever if we emitted them here.\n-                    continue;\n-                }\n-\n                 let uri = file_id_to_url(&self.vfs.read().0, file_id);\n                 let mut diagnostics =\n                     self.diagnostics.diagnostics_for(file_id).cloned().collect::<Vec<_>>();\n@@ -972,10 +961,20 @@ impl GlobalState {\n     }\n \n     fn update_diagnostics(&mut self) {\n+        let db = self.analysis_host.raw_database();\n         let subscriptions = self\n             .mem_docs\n             .iter()\n             .map(|path| self.vfs.read().0.file_id(path).unwrap())\n+            .filter(|&file_id| {\n+                let source_root = db.file_source_root(file_id);\n+                // Only publish diagnostics for files in the workspace, not from crates.io deps\n+                // or the sysroot.\n+                // While theoretically these should never have errors, we have quite a few false\n+                // positives particularly in the stdlib, and those diagnostics would stay around\n+                // forever if we emitted them here.\n+                !db.source_root(source_root).is_library\n+            })\n             .collect::<Vec<_>>();\n \n         tracing::trace!(\"updating notifications for {:?}\", subscriptions);"}]}