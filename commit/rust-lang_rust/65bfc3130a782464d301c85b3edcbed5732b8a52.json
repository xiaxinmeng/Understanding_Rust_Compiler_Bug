{"sha": "65bfc3130a782464d301c85b3edcbed5732b8a52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YmZjMzEzMGE3ODI0NjRkMzAxYzg1YjNlZGNiZWQ1NzMyYjhhNTI=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-08-21T22:09:03Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-08-21T22:09:03Z"}, "message": "Remove the `TryV2` alias\n\nPost-bootstrap-update cleanup.", "tree": {"sha": "7abe7cefbe9b6776c896b64825f0e444943889be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7abe7cefbe9b6776c896b64825f0e444943889be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65bfc3130a782464d301c85b3edcbed5732b8a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65bfc3130a782464d301c85b3edcbed5732b8a52", "html_url": "https://github.com/rust-lang/rust/commit/65bfc3130a782464d301c85b3edcbed5732b8a52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65bfc3130a782464d301c85b3edcbed5732b8a52/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1928aa3b4a8a2df462e408b67ad29737a3f8f31", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1928aa3b4a8a2df462e408b67ad29737a3f8f31", "html_url": "https://github.com/rust-lang/rust/commit/b1928aa3b4a8a2df462e408b67ad29737a3f8f31"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "75987d18fe00ead9a68403cd69333d74a938a362", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bfc3130a782464d301c85b3edcbed5732b8a52/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bfc3130a782464d301c85b3edcbed5732b8a52/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=65bfc3130a782464d301c85b3edcbed5732b8a52", "patch": "@@ -2442,14 +2442,14 @@ pub trait Iterator {\n         R: Try<Output = bool>,\n         // FIXME: This bound is rather strange, but means minimal breakage on nightly.\n         // See #85115 for the issue tracking a holistic solution for this and try_map.\n-        R: crate::ops::TryV2<Residual = Result<crate::convert::Infallible, E>>,\n+        R: Try<Residual = Result<crate::convert::Infallible, E>>,\n     {\n         #[inline]\n         fn check<F, T, R, E>(mut f: F) -> impl FnMut((), T) -> ControlFlow<Result<T, E>>\n         where\n             F: FnMut(&T) -> R,\n             R: Try<Output = bool>,\n-            R: crate::ops::TryV2<Residual = Result<crate::convert::Infallible, E>>,\n+            R: Try<Residual = Result<crate::convert::Infallible, E>>,\n         {\n             move |(), x| match f(&x).branch() {\n                 ControlFlow::Continue(false) => ControlFlow::CONTINUE,"}, {"sha": "cd2d57699c92c95e797b647c68480d0c60905377", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bfc3130a782464d301c85b3edcbed5732b8a52/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bfc3130a782464d301c85b3edcbed5732b8a52/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=65bfc3130a782464d301c85b3edcbed5732b8a52", "patch": "@@ -63,7 +63,7 @@ pub enum ControlFlow<B, C = ()> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<B, C> ops::TryV2 for ControlFlow<B, C> {\n+impl<B, C> ops::Try for ControlFlow<B, C> {\n     type Output = C;\n     type Residual = ControlFlow<B, convert::Infallible>;\n \n@@ -165,7 +165,7 @@ impl<B, C> ControlFlow<B, C> {\n /// These are used only as part of implementing the iterator adapters.\n /// They have mediocre names and non-obvious semantics, so aren't\n /// currently on a path to potential stabilization.\n-impl<R: ops::TryV2> ControlFlow<R, R::Output> {\n+impl<R: ops::Try> ControlFlow<R, R::Output> {\n     /// Create a `ControlFlow` from any type implementing `Try`.\n     #[inline]\n     pub(crate) fn from_try(r: R) -> Self {"}, {"sha": "bd7feb8b183ced5c29727a33299ae357ec72fa47", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65bfc3130a782464d301c85b3edcbed5732b8a52/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bfc3130a782464d301c85b3edcbed5732b8a52/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=65bfc3130a782464d301c85b3edcbed5732b8a52", "patch": "@@ -182,13 +182,7 @@ pub use self::range::{Range, RangeFrom, RangeFull, RangeTo};\n pub use self::range::{Bound, RangeBounds, RangeInclusive, RangeToInclusive};\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-pub use self::try_trait::FromResidual;\n-\n-#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-pub use self::try_trait::Try;\n-\n-#[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]\n-pub(crate) use self::try_trait::Try as TryV2;\n+pub use self::try_trait::{FromResidual, Try};\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n pub use self::generator::{Generator, GeneratorState};"}, {"sha": "47865240f6a6fdaf601cc57ed7082acf9c37c50e", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bfc3130a782464d301c85b3edcbed5732b8a52/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bfc3130a782464d301c85b3edcbed5732b8a52/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=65bfc3130a782464d301c85b3edcbed5732b8a52", "patch": "@@ -2013,7 +2013,7 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T> ops::TryV2 for Option<T> {\n+impl<T> ops::Try for Option<T> {\n     type Output = T;\n     type Residual = Option<convert::Infallible>;\n "}, {"sha": "092e6544342b7f4e2105ce21fd9b81d25d29bede", "filename": "library/core/src/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bfc3130a782464d301c85b3edcbed5732b8a52/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bfc3130a782464d301c85b3edcbed5732b8a52/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=65bfc3130a782464d301c85b3edcbed5732b8a52", "patch": "@@ -1889,7 +1889,7 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T, E> ops::TryV2 for Result<T, E> {\n+impl<T, E> ops::Try for Result<T, E> {\n     type Output = T;\n     type Residual = Result<convert::Infallible, E>;\n "}, {"sha": "250704609963217e62828be3ae43c2a1f7eaca10", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bfc3130a782464d301c85b3edcbed5732b8a52/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bfc3130a782464d301c85b3edcbed5732b8a52/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=65bfc3130a782464d301c85b3edcbed5732b8a52", "patch": "@@ -222,7 +222,7 @@ impl<T> From<T> for Poll<T> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T, E> ops::TryV2 for Poll<Result<T, E>> {\n+impl<T, E> ops::Try for Poll<Result<T, E>> {\n     type Output = Poll<T>;\n     type Residual = Result<convert::Infallible, E>;\n \n@@ -252,7 +252,7 @@ impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Pol\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T, E> ops::TryV2 for Poll<Option<Result<T, E>>> {\n+impl<T, E> ops::Try for Poll<Option<Result<T, E>>> {\n     type Output = Poll<Option<T>>;\n     type Residual = Result<convert::Infallible, E>;\n "}]}