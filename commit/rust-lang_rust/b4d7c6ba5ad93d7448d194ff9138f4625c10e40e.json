{"sha": "b4d7c6ba5ad93d7448d194ff9138f4625c10e40e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZDdjNmJhNWFkOTNkNzQ0OGQxOTRmZjkxMzhmNDYyNWMxMGU0MGU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-11-11T22:46:55Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-11-11T22:51:24Z"}, "message": "make links work", "tree": {"sha": "ef2cfbf03b7769bcc6c97aa73259ce75c035d94f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef2cfbf03b7769bcc6c97aa73259ce75c035d94f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4d7c6ba5ad93d7448d194ff9138f4625c10e40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d7c6ba5ad93d7448d194ff9138f4625c10e40e", "html_url": "https://github.com/rust-lang/rust/commit/b4d7c6ba5ad93d7448d194ff9138f4625c10e40e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4d7c6ba5ad93d7448d194ff9138f4625c10e40e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d0f8b8ac8defa26335b667667bcf3a0efe82d7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0f8b8ac8defa26335b667667bcf3a0efe82d7a", "html_url": "https://github.com/rust-lang/rust/commit/9d0f8b8ac8defa26335b667667bcf3a0efe82d7a"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "1206a4840ca58f42935cef61b5a4df64f29f8ab3", "filename": "Contributing.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4d7c6ba5ad93d7448d194ff9138f4625c10e40e/Contributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/b4d7c6ba5ad93d7448d194ff9138f4625c10e40e/Contributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Contributing.md?ref=b4d7c6ba5ad93d7448d194ff9138f4625c10e40e", "patch": "@@ -85,7 +85,7 @@ Rustfmt is basically a pretty printer - that is, it's mode of operation is to\n take an AST (abstract syntax tree) and print it in a nice way (including staying\n under the maximum permitted width for a line). In order to get that AST, we\n first have to parse the source text, we use the Rust compiler's parser to do\n-that (see [src/lib.rs]). We shy away from doing anything too fancy, such as\n+that (see [src/lib.rs](src/lib.rs)). We shy away from doing anything too fancy, such as\n algebraic approaches to pretty printing, instead relying on an heuristic\n approach, 'manually' crafting a string for each AST node. This results in quite\n a lot of code, but it is relatively simple.\n@@ -125,19 +125,19 @@ At a higher level, Rustfmt has machinery so that we account for text between\n 'top level' items. Then we can reproduce that text pretty much verbatim. We only\n count spans we actually reformat, so if we can't format a span it is not missed\n completely, but is reproduced in the output without being formatted. This is\n-mostly handled in [src/missed_spans.rs]. See also `FmtVisitor::last_pos` in\n-[src/visitor.rs].\n+mostly handled in [src/missed_spans.rs](src/missed_spans.rs). See also `FmtVisitor::last_pos` in\n+[src/visitor.rs](src/visitor.rs).\n \n \n #### Some important elements\n \n At the highest level, Rustfmt uses a `Visitor` implementation called `FmtVisitor`\n-to walk the AST. This is in [src/visitor.rs]. This is really just used to walk\n+to walk the AST. This is in [src/visitor.rs](src/visitor.rs). This is really just used to walk\n items, rather than the bodies of functions. We also cover macros and attributes\n here. Most methods of the visitor call out to `Rewrite` implementations that\n then walk their own children.\n \n-The `Rewrite` trait is defined in [src/rewrite.rs]. It is implemented for many\n+The `Rewrite` trait is defined in [src/rewrite.rs](src/rewrite.rs). It is implemented for many\n things that can be rewritten, mostly AST nodes. It has a single function,\n `rewrite`, which is called to rewrite `self` into an `Option<String>`. The\n arguments are `width` which is the horizontal space we write into, and `offset`\n@@ -191,13 +191,13 @@ Much syntax in Rust is lists: lists of arguments, lists of fields, lists of\n array elements, etc. We have some generic code to handle lists, including how to\n space them in horizontal and vertical space, indentation, comments between\n items, trailing separators, etc. However, since there are so many options, the\n-code is a bit complex. Look in [src/lists.rs]. `write_list` is the key function,\n+code is a bit complex. Look in [src/lists.rs](src/lists.rs). `write_list` is the key function,\n and `ListFormatting` the key structure for configuration. You'll need to make a\n `ListItems` for input, this is usually done using `itemize_list`.\n \n Rustfmt strives to be highly configurable. Often the first part of a patch is\n creating a configuration option for the feature you are implementing. All\n-handling of configuration options is done in [src/config.rs]. Look for the\n+handling of configuration options is done in [src/config.rs](src/config.rs). Look for the\n `create_config!` macro at the end of the file for all the options. The rest of\n the file defines a bunch of enums used for options, and the machinery to produce\n the config struct and parse a config file, etc. Checking an option is done by"}, {"sha": "3361ee62cdf085273ca8395aab7e0e159fc137ce", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4d7c6ba5ad93d7448d194ff9138f4625c10e40e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b4d7c6ba5ad93d7448d194ff9138f4625c10e40e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b4d7c6ba5ad93d7448d194ff9138f4625c10e40e", "patch": "@@ -3,7 +3,7 @@\n A tool for formatting Rust code according to style guidelines.\n \n If you'd like to help out (and you should, it's a fun project!), see\n-[Contributing.md].\n+[Contributing.md](Contributing.md).\n \n \n ## Installation"}]}