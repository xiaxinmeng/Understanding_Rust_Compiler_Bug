{"sha": "11c22180a790b5010140bb9712d47dd7bca7d903", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYzIyMTgwYTc5MGI1MDEwMTQwYmI5NzEyZDQ3ZGQ3YmNhN2Q5MDM=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2015-07-26T22:26:47Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2015-07-26T22:37:25Z"}, "message": "Remove the module-level documentation for thread::scoped\n\nIt's deprecated and unsafe, so we shouldn't be encouraging people to use\nit. Move it to `std::thread::scoped` instead, since it's still useful\ninformation to anyone who is using the API.", "tree": {"sha": "04dc914664bbcd2b8633e519604517372935a679", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04dc914664bbcd2b8633e519604517372935a679"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11c22180a790b5010140bb9712d47dd7bca7d903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11c22180a790b5010140bb9712d47dd7bca7d903", "html_url": "https://github.com/rust-lang/rust/commit/11c22180a790b5010140bb9712d47dd7bca7d903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11c22180a790b5010140bb9712d47dd7bca7d903/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6232f958cd42960f64456566dc56ed15470761f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6232f958cd42960f64456566dc56ed15470761f4", "html_url": "https://github.com/rust-lang/rust/commit/6232f958cd42960f64456566dc56ed15470761f4"}], "stats": {"total": 59, "additions": 25, "deletions": 34}, "files": [{"sha": "3388968c56cc1a72e5146ad1a27a724a3fa2e8de", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 25, "deletions": 34, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/11c22180a790b5010140bb9712d47dd7bca7d903/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c22180a790b5010140bb9712d47dd7bca7d903/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=11c22180a790b5010140bb9712d47dd7bca7d903", "patch": "@@ -85,33 +85,6 @@\n //! value produced by the child thread, or `Err` of the value given to\n //! a call to `panic!` if the child panicked.\n //!\n-//! ## Scoped threads\n-//!\n-//! The `spawn` method does not allow the child and parent threads to\n-//! share any stack data, since that is not safe in general. However,\n-//! `scoped` makes it possible to share the parent's stack by forcing\n-//! a join before any relevant stack frames are popped:\n-//!\n-//! ```rust\n-//! # #![feature(scoped)]\n-//! use std::thread;\n-//!\n-//! let guard = thread::scoped(move || {\n-//!     // some work here\n-//! });\n-//!\n-//! // do some other work in the meantime\n-//! let output = guard.join();\n-//! ```\n-//!\n-//! The `scoped` function doesn't return a `Thread` directly; instead,\n-//! it returns a *join guard*. The join guard is an RAII-style guard\n-//! that will automatically join the child thread (block until it\n-//! terminates) when it is dropped. You can join the child thread in\n-//! advance by calling the `join` method on the guard, which will also\n-//! return the result produced by the thread.  A handle to the thread\n-//! itself is available via the `thread` method of the join guard.\n-//!\n //! ## Configuring threads\n //!\n //! A new thread can be configured before it is spawned via the `Builder` type,\n@@ -288,7 +261,7 @@ impl Builder {\n     /// upon being dropped. Because the child thread may refer to data on the\n     /// current thread's stack (hence the \"scoped\" name), it cannot be detached;\n     /// it *must* be joined before the relevant stack frame is popped. See the\n-    /// module documentation for additional details.\n+    /// documentation on `thread::scoped` for additional details.\n     ///\n     /// # Errors\n     ///\n@@ -388,12 +361,30 @@ pub fn spawn<F, T>(f: F) -> JoinHandle<T> where\n \n /// Spawns a new *scoped* thread, returning a `JoinGuard` for it.\n ///\n-/// The join guard can be used to explicitly join the child thread (via\n-/// `join`), returning `Result<T>`, or it will implicitly join the child\n-/// upon being dropped. Because the child thread may refer to data on the\n-/// current thread's stack (hence the \"scoped\" name), it cannot be detached;\n-/// it *must* be joined before the relevant stack frame is popped. See the\n-/// module documentation for additional details.\n+/// The `spawn` method does not allow the child and parent threads to\n+/// share any stack data, since that is not safe in general. However,\n+/// `scoped` makes it possible to share the parent's stack by forcing\n+/// a join before any relevant stack frames are popped:\n+///\n+/// ```rust\n+/// # #![feature(scoped)]\n+/// use std::thread;\n+///\n+/// let guard = thread::scoped(move || {\n+///     // some work here\n+/// });\n+///\n+/// // do some other work in the meantime\n+/// let output = guard.join();\n+/// ```\n+///\n+/// The `scoped` function doesn't return a `Thread` directly; instead, it\n+/// returns a *join guard*. The join guard can be used to explicitly join\n+/// the child thread (via `join`), returning `Result<T>`, or it will\n+/// implicitly join the child upon being dropped. Because the child thread\n+/// may refer to data on the current thread's stack (hence the \"scoped\"\n+/// name), it cannot be detached; it *must* be joined before the relevant\n+/// stack frame is popped.\n ///\n /// # Panics\n ///"}]}