{"sha": "ebde617c7d33763488c549c18d7b351356a2a456", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZGU2MTdjN2QzMzc2MzQ4OGM1NDljMThkN2IzNTEzNTZhMmE0NTY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-02-25T12:13:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-25T12:13:31Z"}, "message": "Rollup merge of #40022 - wagenet:lib-defaults, r=alexcrichton\n\nBetter handling of lib defaults\n\nr? @alexcrichton", "tree": {"sha": "61df389be71736f5da3dee138de48d9b544eb01b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61df389be71736f5da3dee138de48d9b544eb01b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebde617c7d33763488c549c18d7b351356a2a456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebde617c7d33763488c549c18d7b351356a2a456", "html_url": "https://github.com/rust-lang/rust/commit/ebde617c7d33763488c549c18d7b351356a2a456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebde617c7d33763488c549c18d7b351356a2a456/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ece892490794709c3fd0ff0ced35440d01f5708", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ece892490794709c3fd0ff0ced35440d01f5708", "html_url": "https://github.com/rust-lang/rust/commit/3ece892490794709c3fd0ff0ced35440d01f5708"}, {"sha": "69c5359bf25a277938631502ba8cb785e24c3e23", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c5359bf25a277938631502ba8cb785e24c3e23", "html_url": "https://github.com/rust-lang/rust/commit/69c5359bf25a277938631502ba8cb785e24c3e23"}], "stats": {"total": 111, "additions": 80, "deletions": 31}, "files": [{"sha": "6f91c217d112ecfbf13c3326a1ca08f9b7bf05ca", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ebde617c7d33763488c549c18d7b351356a2a456/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde617c7d33763488c549c18d7b351356a2a456/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ebde617c7d33763488c549c18d7b351356a2a456", "patch": "@@ -288,7 +288,7 @@ top_level_options!(\n         //            much sense: The search path can stay the same while the\n         //            things discovered there might have changed on disk.\n         search_paths: SearchPaths [TRACKED],\n-        libs: Vec<(String, Option<String>, cstore::NativeLibraryKind)> [TRACKED],\n+        libs: Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [TRACKED],\n \n         target_triple: String [TRACKED],\n@@ -1495,18 +1495,18 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         let mut parts = s.splitn(2, '=');\n         let kind = parts.next().unwrap();\n         let (name, kind) = match (parts.next(), kind) {\n-            (None, name) |\n-            (Some(name), \"dylib\") => (name, cstore::NativeUnknown),\n-            (Some(name), \"framework\") => (name, cstore::NativeFramework),\n-            (Some(name), \"static\") => (name, cstore::NativeStatic),\n-            (Some(name), \"static-nobundle\") => (name, cstore::NativeStaticNobundle),\n+            (None, name) => (name, None),\n+            (Some(name), \"dylib\") => (name, Some(cstore::NativeUnknown)),\n+            (Some(name), \"framework\") => (name, Some(cstore::NativeFramework)),\n+            (Some(name), \"static\") => (name, Some(cstore::NativeStatic)),\n+            (Some(name), \"static-nobundle\") => (name, Some(cstore::NativeStaticNobundle)),\n             (_, s) => {\n                 early_error(error_format, &format!(\"unknown library kind `{}`, expected \\\n                                                   one of dylib, framework, or static\",\n                                                  s));\n             }\n         };\n-        if kind == cstore::NativeStaticNobundle && !nightly_options::is_nightly_build() {\n+        if kind == Some(cstore::NativeStaticNobundle) && !nightly_options::is_nightly_build() {\n             early_error(error_format, &format!(\"the library kind 'static-nobundle' is only \\\n                                                 accepted on the nightly compiler\"));\n         }\n@@ -1772,6 +1772,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n+    impl_dep_tracking_hash_via_hash!(Option<cstore::NativeLibraryKind>);\n     impl_dep_tracking_hash_via_hash!(CrateType);\n     impl_dep_tracking_hash_via_hash!(PanicStrategy);\n     impl_dep_tracking_hash_via_hash!(Passes);\n@@ -1788,7 +1789,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!(CrateType);\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, lint::Level));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>,\n-                                                 cstore::NativeLibraryKind));\n+                                                 Option<cstore::NativeLibraryKind>));\n     impl DepTrackingHash for SearchPaths {\n         fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) {\n             let mut elems: Vec<_> = self\n@@ -2232,24 +2233,24 @@ mod tests {\n         let mut v4 = super::basic_options();\n \n         // Reference\n-        v1.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n-                       (String::from(\"b\"), None, cstore::NativeFramework),\n-                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n+        v1.libs = vec![(String::from(\"a\"), None, Some(cstore::NativeStatic)),\n+                       (String::from(\"b\"), None, Some(cstore::NativeFramework)),\n+                       (String::from(\"c\"), None, Some(cstore::NativeUnknown))];\n \n         // Change label\n-        v2.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n-                       (String::from(\"X\"), None, cstore::NativeFramework),\n-                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n+        v2.libs = vec![(String::from(\"a\"), None, Some(cstore::NativeStatic)),\n+                       (String::from(\"X\"), None, Some(cstore::NativeFramework)),\n+                       (String::from(\"c\"), None, Some(cstore::NativeUnknown))];\n \n         // Change kind\n-        v3.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n-                       (String::from(\"b\"), None, cstore::NativeStatic),\n-                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n+        v3.libs = vec![(String::from(\"a\"), None, Some(cstore::NativeStatic)),\n+                       (String::from(\"b\"), None, Some(cstore::NativeStatic)),\n+                       (String::from(\"c\"), None, Some(cstore::NativeUnknown))];\n \n         // Change new-name\n-        v4.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n-                       (String::from(\"b\"), Some(String::from(\"X\")), cstore::NativeFramework),\n-                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n+        v4.libs = vec![(String::from(\"a\"), None, Some(cstore::NativeStatic)),\n+                       (String::from(\"b\"), Some(String::from(\"X\")), Some(cstore::NativeFramework)),\n+                       (String::from(\"c\"), None, Some(cstore::NativeUnknown))];\n \n         assert!(v1.dep_tracking_hash() != v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() != v3.dep_tracking_hash());\n@@ -2269,17 +2270,17 @@ mod tests {\n         let mut v3 = super::basic_options();\n \n         // Reference\n-        v1.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n-                       (String::from(\"b\"), None, cstore::NativeFramework),\n-                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n+        v1.libs = vec![(String::from(\"a\"), None, Some(cstore::NativeStatic)),\n+                       (String::from(\"b\"), None, Some(cstore::NativeFramework)),\n+                       (String::from(\"c\"), None, Some(cstore::NativeUnknown))];\n \n-        v2.libs = vec![(String::from(\"b\"), None, cstore::NativeFramework),\n-                       (String::from(\"a\"), None, cstore::NativeStatic),\n-                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n+        v2.libs = vec![(String::from(\"b\"), None, Some(cstore::NativeFramework)),\n+                       (String::from(\"a\"), None, Some(cstore::NativeStatic)),\n+                       (String::from(\"c\"), None, Some(cstore::NativeUnknown))];\n \n-        v3.libs = vec![(String::from(\"c\"), None, cstore::NativeUnknown),\n-                       (String::from(\"a\"), None, cstore::NativeStatic),\n-                       (String::from(\"b\"), None, cstore::NativeFramework)];\n+        v3.libs = vec![(String::from(\"c\"), None, Some(cstore::NativeUnknown)),\n+                       (String::from(\"a\"), None, Some(cstore::NativeStatic)),\n+                       (String::from(\"b\"), None, Some(cstore::NativeFramework))];\n \n         assert!(v1.dep_tracking_hash() == v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() == v3.dep_tracking_hash());"}, {"sha": "4477488f6cb38bf68b52ef7a345bd107774cf7d6", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebde617c7d33763488c549c18d7b351356a2a456/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde617c7d33763488c549c18d7b351356a2a456/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ebde617c7d33763488c549c18d7b351356a2a456", "patch": "@@ -1077,10 +1077,20 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n             let mut found = false;\n             for lib in self.cstore.get_used_libraries().borrow_mut().iter_mut() {\n                 if lib.name == name as &str {\n-                    lib.kind = kind;\n+                    let mut changed = false;\n+                    if let Some(k) = kind {\n+                        lib.kind = k;\n+                        changed = true;\n+                    }\n                     if let &Some(ref new_name) = new_name {\n                         lib.name = Symbol::intern(new_name);\n+                        changed = true;\n+                    }\n+                    if !changed {\n+                        self.sess.warn(&format!(\"redundant linker flag specified for library `{}`\",\n+                                                name));\n                     }\n+\n                     found = true;\n                 }\n             }\n@@ -1089,7 +1099,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n                 let new_name = new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n                 let lib = NativeLibrary {\n                     name: Symbol::intern(new_name.unwrap_or(name)),\n-                    kind: kind,\n+                    kind: if let Some(k) = kind { k } else { cstore::NativeUnknown },\n                     cfg: None,\n                     foreign_items: Vec::new(),\n                 };"}, {"sha": "7438ba21bfc4a064a7303e047ef553ef72fd28e4", "filename": "src/test/run-pass/auxiliary/clibrary.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ebde617c7d33763488c549c18d7b351356a2a456/src%2Ftest%2Frun-pass%2Fauxiliary%2Fclibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde617c7d33763488c549c18d7b351356a2a456/src%2Ftest%2Frun-pass%2Fauxiliary%2Fclibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fclibrary.rs?ref=ebde617c7d33763488c549c18d7b351356a2a456", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+#![crate_type = \"staticlib\"]\n+\n+#[no_mangle]\n+pub extern \"C\" fn foo(x:i32) -> i32 { x }"}, {"sha": "a38080f8cfe75f6de210ae8ffadc0c1c9f793c35", "filename": "src/test/run-pass/lib-defaults.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ebde617c7d33763488c549c18d7b351356a2a456/src%2Ftest%2Frun-pass%2Flib-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde617c7d33763488c549c18d7b351356a2a456/src%2Ftest%2Frun-pass%2Flib-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-defaults.rs?ref=ebde617c7d33763488c549c18d7b351356a2a456", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:clibrary.rs\n+// compile-flags: -lclibrary\n+\n+#[link(name = \"clibrary\", kind = \"static\")]\n+extern \"C\" {\n+    pub fn foo(x:i32) -> i32;\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo(42);\n+    }\n+}"}]}