{"sha": "6250d56355d72264ece721e8d0dc95b16a6824b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNTBkNTYzNTVkNzIyNjRlY2U3MjFlOGQwZGM5NWIxNmE2ODI0YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-19T04:40:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-19T04:40:21Z"}, "message": "Auto merge of #67758 - ssomers:testing_range, r=Mark-Simulacrum\n\nMore thorough testing of BTreeMap::range\n\nTest more of the paths in the `range_search` function in map.rs", "tree": {"sha": "851185b5154982f1a79eeb4b465742a303ff4bfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/851185b5154982f1a79eeb4b465742a303ff4bfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6250d56355d72264ece721e8d0dc95b16a6824b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6250d56355d72264ece721e8d0dc95b16a6824b1", "html_url": "https://github.com/rust-lang/rust/commit/6250d56355d72264ece721e8d0dc95b16a6824b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6250d56355d72264ece721e8d0dc95b16a6824b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb410add3ab92bfed74cd95a7f26cd6b8fcd389d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb410add3ab92bfed74cd95a7f26cd6b8fcd389d", "html_url": "https://github.com/rust-lang/rust/commit/bb410add3ab92bfed74cd95a7f26cd6b8fcd389d"}, {"sha": "8314b7fd27350681ecbe5d55f840ddc5873d222f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8314b7fd27350681ecbe5d55f840ddc5873d222f", "html_url": "https://github.com/rust-lang/rust/commit/8314b7fd27350681ecbe5d55f840ddc5873d222f"}], "stats": {"total": 181, "additions": 150, "deletions": 31}, "files": [{"sha": "f5be72c39b20c68356cfab215c554ffe29a4bf1a", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 150, "deletions": 31, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/6250d56355d72264ece721e8d0dc95b16a6824b1/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d56355d72264ece721e8d0dc95b16a6824b1/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=6250d56355d72264ece721e8d0dc95b16a6824b1", "patch": "@@ -4,6 +4,7 @@ use std::convert::TryFrom;\n use std::fmt::Debug;\n use std::iter::FromIterator;\n use std::ops::Bound::{self, Excluded, Included, Unbounded};\n+use std::ops::RangeBounds;\n use std::rc::Rc;\n \n use super::DeterministicRng;\n@@ -68,6 +69,11 @@ fn test_basic_small() {\n     assert_eq!(map.last_key_value(), None);\n     assert_eq!(map.keys().count(), 0);\n     assert_eq!(map.values().count(), 0);\n+    assert_eq!(map.range(..).next(), None);\n+    assert_eq!(map.range(..1).next(), None);\n+    assert_eq!(map.range(1..).next(), None);\n+    assert_eq!(map.range(1..=1).next(), None);\n+    assert_eq!(map.range(1..2).next(), None);\n     assert_eq!(map.insert(1, 1), None);\n \n     // 1 key-value pair:\n@@ -118,6 +124,11 @@ fn test_basic_small() {\n     assert_eq!(map.last_key_value(), None);\n     assert_eq!(map.keys().count(), 0);\n     assert_eq!(map.values().count(), 0);\n+    assert_eq!(map.range(..).next(), None);\n+    assert_eq!(map.range(..1).next(), None);\n+    assert_eq!(map.range(1..).next(), None);\n+    assert_eq!(map.range(1..=1).next(), None);\n+    assert_eq!(map.range(1..2).next(), None);\n     assert_eq!(map.remove(&1), None);\n }\n \n@@ -128,7 +139,6 @@ fn test_iter() {\n     #[cfg(miri)]\n     let size = 200;\n \n-    // Forwards\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     fn test<T>(size: usize, mut iter: T)\n@@ -154,7 +164,6 @@ fn test_iter_rev() {\n     #[cfg(miri)]\n     let size = 200;\n \n-    // Forwards\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     fn test<T>(size: usize, mut iter: T)\n@@ -275,7 +284,6 @@ fn test_iter_mixed() {\n     #[cfg(miri)]\n     let size = 200;\n \n-    // Forwards\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     fn test<T>(size: usize, mut iter: T)\n@@ -299,27 +307,147 @@ fn test_iter_mixed() {\n     test(size, map.into_iter());\n }\n \n-#[test]\n-fn test_range_small() {\n-    let size = 5;\n-\n-    // Forwards\n-    let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n-\n-    let mut j = 0;\n-    for ((&k, &v), i) in map.range(2..).zip(2..size) {\n-        assert_eq!(k, i);\n-        assert_eq!(v, i);\n-        j += 1;\n-    }\n-    assert_eq!(j, size - 2);\n+fn range_keys(map: &BTreeMap<i32, i32>, range: impl RangeBounds<i32>) -> Vec<i32> {\n+    map.range(range)\n+        .map(|(&k, &v)| {\n+            assert_eq!(k, v);\n+            k\n+        })\n+        .collect()\n }\n \n #[test]\n-fn test_range_inclusive() {\n-    let size = 500;\n+fn test_range_small() {\n+    let size = 4;\n+\n+    let map: BTreeMap<_, _> = (1..=size).map(|i| (i, i)).collect();\n+    let all: Vec<_> = (1..=size).collect();\n+    let (first, last) = (vec![all[0]], vec![all[size as usize - 1]]);\n+\n+    assert_eq!(range_keys(&map, (Excluded(0), Excluded(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Excluded(0), Included(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Excluded(0), Included(size))), all);\n+    assert_eq!(range_keys(&map, (Excluded(0), Unbounded)), all);\n+    assert_eq!(range_keys(&map, (Included(0), Excluded(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Included(0), Included(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Included(0), Included(size))), all);\n+    assert_eq!(range_keys(&map, (Included(0), Unbounded)), all);\n+    assert_eq!(range_keys(&map, (Included(1), Excluded(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Included(1), Included(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Included(1), Included(size))), all);\n+    assert_eq!(range_keys(&map, (Included(1), Unbounded)), all);\n+    assert_eq!(range_keys(&map, (Unbounded, Excluded(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Unbounded, Included(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Unbounded, Included(size))), all);\n+    assert_eq!(range_keys(&map, ..), all);\n+\n+    assert_eq!(range_keys(&map, (Excluded(0), Excluded(1))), vec![]);\n+    assert_eq!(range_keys(&map, (Excluded(0), Included(0))), vec![]);\n+    assert_eq!(range_keys(&map, (Included(0), Included(0))), vec![]);\n+    assert_eq!(range_keys(&map, (Included(0), Excluded(1))), vec![]);\n+    assert_eq!(range_keys(&map, (Unbounded, Excluded(1))), vec![]);\n+    assert_eq!(range_keys(&map, (Unbounded, Included(0))), vec![]);\n+    assert_eq!(range_keys(&map, (Excluded(0), Excluded(2))), first);\n+    assert_eq!(range_keys(&map, (Excluded(0), Included(1))), first);\n+    assert_eq!(range_keys(&map, (Included(0), Excluded(2))), first);\n+    assert_eq!(range_keys(&map, (Included(0), Included(1))), first);\n+    assert_eq!(range_keys(&map, (Included(1), Excluded(2))), first);\n+    assert_eq!(range_keys(&map, (Included(1), Included(1))), first);\n+    assert_eq!(range_keys(&map, (Unbounded, Excluded(2))), first);\n+    assert_eq!(range_keys(&map, (Unbounded, Included(1))), first);\n+    assert_eq!(range_keys(&map, (Excluded(size - 1), Excluded(size + 1))), last);\n+    assert_eq!(range_keys(&map, (Excluded(size - 1), Included(size + 1))), last);\n+    assert_eq!(range_keys(&map, (Excluded(size - 1), Included(size))), last);\n+    assert_eq!(range_keys(&map, (Excluded(size - 1), Unbounded)), last);\n+    assert_eq!(range_keys(&map, (Included(size), Excluded(size + 1))), last);\n+    assert_eq!(range_keys(&map, (Included(size), Included(size + 1))), last);\n+    assert_eq!(range_keys(&map, (Included(size), Included(size))), last);\n+    assert_eq!(range_keys(&map, (Included(size), Unbounded)), last);\n+    assert_eq!(range_keys(&map, (Excluded(size), Excluded(size + 1))), vec![]);\n+    assert_eq!(range_keys(&map, (Excluded(size), Included(size))), vec![]);\n+    assert_eq!(range_keys(&map, (Excluded(size), Unbounded)), vec![]);\n+    assert_eq!(range_keys(&map, (Included(size + 1), Excluded(size + 1))), vec![]);\n+    assert_eq!(range_keys(&map, (Included(size + 1), Included(size + 1))), vec![]);\n+    assert_eq!(range_keys(&map, (Included(size + 1), Unbounded)), vec![]);\n+\n+    assert_eq!(range_keys(&map, ..3), vec![1, 2]);\n+    assert_eq!(range_keys(&map, 3..), vec![3, 4]);\n+    assert_eq!(range_keys(&map, 2..=3), vec![2, 3]);\n+}\n+\n+#[test]\n+fn test_range_depth_2() {\n+    // Assuming that node.CAPACITY is 11, having 12 pairs implies a depth 2 tree\n+    // with 2 leaves. Depending on details we don't want or need to rely upon,\n+    // the single key at the root will be 6 or 7.\n+\n+    let map: BTreeMap<_, _> = (1..=12).map(|i| (i, i)).collect();\n+    for &root in &[6, 7] {\n+        assert_eq!(range_keys(&map, (Excluded(root), Excluded(root + 1))), vec![]);\n+        assert_eq!(range_keys(&map, (Excluded(root), Included(root + 1))), vec![root + 1]);\n+        assert_eq!(range_keys(&map, (Included(root), Excluded(root + 1))), vec![root]);\n+        assert_eq!(range_keys(&map, (Included(root), Included(root + 1))), vec![root, root + 1]);\n+\n+        assert_eq!(range_keys(&map, (Excluded(root - 1), Excluded(root))), vec![]);\n+        assert_eq!(range_keys(&map, (Included(root - 1), Excluded(root))), vec![root - 1]);\n+        assert_eq!(range_keys(&map, (Excluded(root - 1), Included(root))), vec![root]);\n+        assert_eq!(range_keys(&map, (Included(root - 1), Included(root))), vec![root - 1, root]);\n+    }\n+}\n+\n+#[test]\n+fn test_range_large() {\n+    let size = 200;\n \n-    let map: BTreeMap<_, _> = (0..=size).map(|i| (i, i)).collect();\n+    let map: BTreeMap<_, _> = (1..=size).map(|i| (i, i)).collect();\n+    let all: Vec<_> = (1..=size).collect();\n+    let (first, last) = (vec![all[0]], vec![all[size as usize - 1]]);\n+\n+    assert_eq!(range_keys(&map, (Excluded(0), Excluded(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Excluded(0), Included(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Excluded(0), Included(size))), all);\n+    assert_eq!(range_keys(&map, (Excluded(0), Unbounded)), all);\n+    assert_eq!(range_keys(&map, (Included(0), Excluded(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Included(0), Included(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Included(0), Included(size))), all);\n+    assert_eq!(range_keys(&map, (Included(0), Unbounded)), all);\n+    assert_eq!(range_keys(&map, (Included(1), Excluded(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Included(1), Included(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Included(1), Included(size))), all);\n+    assert_eq!(range_keys(&map, (Included(1), Unbounded)), all);\n+    assert_eq!(range_keys(&map, (Unbounded, Excluded(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Unbounded, Included(size + 1))), all);\n+    assert_eq!(range_keys(&map, (Unbounded, Included(size))), all);\n+    assert_eq!(range_keys(&map, ..), all);\n+\n+    assert_eq!(range_keys(&map, (Excluded(0), Excluded(1))), vec![]);\n+    assert_eq!(range_keys(&map, (Excluded(0), Included(0))), vec![]);\n+    assert_eq!(range_keys(&map, (Included(0), Included(0))), vec![]);\n+    assert_eq!(range_keys(&map, (Included(0), Excluded(1))), vec![]);\n+    assert_eq!(range_keys(&map, (Unbounded, Excluded(1))), vec![]);\n+    assert_eq!(range_keys(&map, (Unbounded, Included(0))), vec![]);\n+    assert_eq!(range_keys(&map, (Excluded(0), Excluded(2))), first);\n+    assert_eq!(range_keys(&map, (Excluded(0), Included(1))), first);\n+    assert_eq!(range_keys(&map, (Included(0), Excluded(2))), first);\n+    assert_eq!(range_keys(&map, (Included(0), Included(1))), first);\n+    assert_eq!(range_keys(&map, (Included(1), Excluded(2))), first);\n+    assert_eq!(range_keys(&map, (Included(1), Included(1))), first);\n+    assert_eq!(range_keys(&map, (Unbounded, Excluded(2))), first);\n+    assert_eq!(range_keys(&map, (Unbounded, Included(1))), first);\n+    assert_eq!(range_keys(&map, (Excluded(size - 1), Excluded(size + 1))), last);\n+    assert_eq!(range_keys(&map, (Excluded(size - 1), Included(size + 1))), last);\n+    assert_eq!(range_keys(&map, (Excluded(size - 1), Included(size))), last);\n+    assert_eq!(range_keys(&map, (Excluded(size - 1), Unbounded)), last);\n+    assert_eq!(range_keys(&map, (Included(size), Excluded(size + 1))), last);\n+    assert_eq!(range_keys(&map, (Included(size), Included(size + 1))), last);\n+    assert_eq!(range_keys(&map, (Included(size), Included(size))), last);\n+    assert_eq!(range_keys(&map, (Included(size), Unbounded)), last);\n+    assert_eq!(range_keys(&map, (Excluded(size), Excluded(size + 1))), vec![]);\n+    assert_eq!(range_keys(&map, (Excluded(size), Included(size))), vec![]);\n+    assert_eq!(range_keys(&map, (Excluded(size), Unbounded)), vec![]);\n+    assert_eq!(range_keys(&map, (Included(size + 1), Excluded(size + 1))), vec![]);\n+    assert_eq!(range_keys(&map, (Included(size + 1), Included(size + 1))), vec![]);\n+    assert_eq!(range_keys(&map, (Included(size + 1), Unbounded)), vec![]);\n \n     fn check<'a, L, R>(lhs: L, rhs: R)\n     where\n@@ -331,18 +459,9 @@ fn test_range_inclusive() {\n         assert_eq!(lhs, rhs);\n     }\n \n-    check(map.range(size + 1..=size + 1), vec![]);\n-    check(map.range(size..=size), vec![(&size, &size)]);\n-    check(map.range(size..=size + 1), vec![(&size, &size)]);\n-    check(map.range(0..=0), vec![(&0, &0)]);\n-    check(map.range(0..=size - 1), map.range(..size));\n-    check(map.range(-1..=-1), vec![]);\n-    check(map.range(-1..=size), map.range(..));\n-    check(map.range(..=size), map.range(..));\n-    check(map.range(..=200), map.range(..201));\n+    check(map.range(..=100), map.range(..101));\n     check(map.range(5..=8), vec![(&5, &5), (&6, &6), (&7, &7), (&8, &8)]);\n-    check(map.range(-1..=0), vec![(&0, &0)]);\n-    check(map.range(-1..=2), vec![(&0, &0), (&1, &1), (&2, &2)]);\n+    check(map.range(-1..=2), vec![(&1, &1), (&2, &2)]);\n }\n \n #[test]"}]}