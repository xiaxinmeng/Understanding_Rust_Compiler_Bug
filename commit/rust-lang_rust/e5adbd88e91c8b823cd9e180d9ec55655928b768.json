{"sha": "e5adbd88e91c8b823cd9e180d9ec55655928b768", "node_id": "C_kwDOAAsO6NoAKGU1YWRiZDg4ZTkxYzhiODIzY2Q5ZTE4MGQ5ZWM1NTY1NTkyOGI3Njg", "commit": {"author": {"name": "Walther", "email": "veeti.haapsamo@gmail.com", "date": "2022-03-17T12:49:22Z"}, "committer": {"name": "Walther", "email": "veeti.haapsamo@gmail.com", "date": "2022-03-17T12:49:22Z"}, "message": "Insert #[must_use] in generate_getter", "tree": {"sha": "5ffbf2de7c3ae6c27df239a037487679799405a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ffbf2de7c3ae6c27df239a037487679799405a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5adbd88e91c8b823cd9e180d9ec55655928b768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5adbd88e91c8b823cd9e180d9ec55655928b768", "html_url": "https://github.com/rust-lang/rust/commit/e5adbd88e91c8b823cd9e180d9ec55655928b768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5adbd88e91c8b823cd9e180d9ec55655928b768/comments", "author": {"login": "Walther", "id": 2943750, "node_id": "MDQ6VXNlcjI5NDM3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2943750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Walther", "html_url": "https://github.com/Walther", "followers_url": "https://api.github.com/users/Walther/followers", "following_url": "https://api.github.com/users/Walther/following{/other_user}", "gists_url": "https://api.github.com/users/Walther/gists{/gist_id}", "starred_url": "https://api.github.com/users/Walther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Walther/subscriptions", "organizations_url": "https://api.github.com/users/Walther/orgs", "repos_url": "https://api.github.com/users/Walther/repos", "events_url": "https://api.github.com/users/Walther/events{/privacy}", "received_events_url": "https://api.github.com/users/Walther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Walther", "id": 2943750, "node_id": "MDQ6VXNlcjI5NDM3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2943750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Walther", "html_url": "https://github.com/Walther", "followers_url": "https://api.github.com/users/Walther/followers", "following_url": "https://api.github.com/users/Walther/following{/other_user}", "gists_url": "https://api.github.com/users/Walther/gists{/gist_id}", "starred_url": "https://api.github.com/users/Walther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Walther/subscriptions", "organizations_url": "https://api.github.com/users/Walther/orgs", "repos_url": "https://api.github.com/users/Walther/repos", "events_url": "https://api.github.com/users/Walther/events{/privacy}", "received_events_url": "https://api.github.com/users/Walther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98143da79924fe2044acae749ffb01923f2f14c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/98143da79924fe2044acae749ffb01923f2f14c6", "html_url": "https://github.com/rust-lang/rust/commit/98143da79924fe2044acae749ffb01923f2f14c6"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "2e81dd13f41b47f0b41c8dd6ab02aabb85a699d2", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5adbd88e91c8b823cd9e180d9ec55655928b768/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5adbd88e91c8b823cd9e180d9ec55655928b768/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=e5adbd88e91c8b823cd9e180d9ec55655928b768", "patch": "@@ -39,6 +39,7 @@ use crate::{\n //\n // impl Person {\n //     /// Get a reference to the person's name.\n+//     #[must_use]\n //     fn $0name(&self) -> &str {\n //         self.name.as_ref()\n //     }\n@@ -65,6 +66,7 @@ pub(crate) fn generate_getter(acc: &mut Assists, ctx: &AssistContext) -> Option<\n //\n // impl Person {\n //     /// Get a mutable reference to the person's name.\n+//     #[must_use]\n //     fn $0name_mut(&mut self) -> &mut String {\n //         &mut self.name\n //     }\n@@ -143,6 +145,7 @@ pub(crate) fn generate_getter_impl(\n             format_to!(\n                 buf,\n                 \"    /// Get {}the {}'s {}.\n+    #[must_use]\n     {}fn {}(&{}self) -> {} {{\n         {}\n     }}\",\n@@ -195,6 +198,7 @@ struct Context {\n \n impl Context {\n     /// Get a reference to the context's data.\n+    #[must_use]\n     fn $0data(&self) -> &Data {\n         &self.data\n     }\n@@ -216,6 +220,7 @@ struct Context {\n \n impl Context {\n     /// Get a mutable reference to the context's data.\n+    #[must_use]\n     fn $0data_mut(&mut self) -> &mut Data {\n         &mut self.data\n     }\n@@ -249,6 +254,7 @@ struct Context {\n }\n \n impl Context {\n+    #[must_use]\n     fn data_mut(&mut self) -> &mut Data {\n         &mut self.data\n     }\n@@ -273,6 +279,7 @@ pub(crate) struct Context {\n \n impl Context {\n     /// Get a reference to the context's data.\n+    #[must_use]\n     pub(crate) fn $0data(&self) -> &Data {\n         &self.data\n     }\n@@ -293,6 +300,7 @@ struct Context {\n \n impl Context {\n     /// Get a reference to the context's data.\n+    #[must_use]\n     fn data(&self) -> &Data {\n         &self.data\n     }\n@@ -306,11 +314,13 @@ struct Context {\n \n impl Context {\n     /// Get a reference to the context's data.\n+    #[must_use]\n     fn data(&self) -> &Data {\n         &self.data\n     }\n \n     /// Get a reference to the context's count.\n+    #[must_use]\n     fn $0count(&self) -> &usize {\n         &self.count\n     }\n@@ -337,6 +347,7 @@ struct S { foo: String }\n \n impl S {\n     /// Get a reference to the s's foo.\n+    #[must_use]\n     fn $0foo(&self) -> &String {\n         &self.foo\n     }\n@@ -361,6 +372,7 @@ struct S { foo: bool }\n \n impl S {\n     /// Get the s's foo.\n+    #[must_use]\n     fn $0foo(&self) -> bool {\n         self.foo\n     }\n@@ -394,6 +406,7 @@ struct S { foo: String }\n \n impl S {\n     /// Get a reference to the s's foo.\n+    #[must_use]\n     fn $0foo(&self) -> &str {\n         self.foo.as_ref()\n     }\n@@ -431,6 +444,7 @@ struct S { foo: Box<Sweets> }\n \n impl S {\n     /// Get a reference to the s's foo.\n+    #[must_use]\n     fn $0foo(&self) -> &Sweets {\n         self.foo.as_ref()\n     }\n@@ -464,6 +478,7 @@ struct S { foo: Vec<()> }\n \n impl S {\n     /// Get a reference to the s's foo.\n+    #[must_use]\n     fn $0foo(&self) -> &[()] {\n         self.foo.as_ref()\n     }\n@@ -487,6 +502,7 @@ struct S { foo: Option<Failure> }\n \n impl S {\n     /// Get a reference to the s's foo.\n+    #[must_use]\n     fn $0foo(&self) -> Option<&Failure> {\n         self.foo.as_ref()\n     }\n@@ -510,6 +526,7 @@ struct Context {\n \n impl Context {\n     /// Get a reference to the context's data.\n+    #[must_use]\n     fn $0data(&self) -> Result<&bool, &i32> {\n         self.data.as_ref()\n     }"}, {"sha": "72aeadd4ac2fa4829f1c23ff056e9e6c3ec154dd", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5adbd88e91c8b823cd9e180d9ec55655928b768/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5adbd88e91c8b823cd9e180d9ec55655928b768/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=e5adbd88e91c8b823cd9e180d9ec55655928b768", "patch": "@@ -1036,6 +1036,7 @@ struct Person {\n \n impl Person {\n     /// Get a reference to the person's name.\n+    #[must_use]\n     fn $0name(&self) -> &str {\n         self.name.as_ref()\n     }\n@@ -1060,6 +1061,7 @@ struct Person {\n \n impl Person {\n     /// Get a mutable reference to the person's name.\n+    #[must_use]\n     fn $0name_mut(&mut self) -> &mut String {\n         &mut self.name\n     }"}]}