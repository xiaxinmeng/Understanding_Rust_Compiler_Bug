{"sha": "c17ea956a26a05341ff24736105b43f2a16a1ad2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxN2VhOTU2YTI2YTA1MzQxZmYyNDczNjEwNWI0M2YyYTE2YTFhZDI=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-05T00:14:11Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-05T00:14:17Z"}, "message": "Add per-platform file-open flags to std.os.  Open buffers as desired in std._io.", "tree": {"sha": "71610381ab804635216eae7212759ebcf560d5f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71610381ab804635216eae7212759ebcf560d5f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c17ea956a26a05341ff24736105b43f2a16a1ad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c17ea956a26a05341ff24736105b43f2a16a1ad2", "html_url": "https://github.com/rust-lang/rust/commit/c17ea956a26a05341ff24736105b43f2a16a1ad2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c17ea956a26a05341ff24736105b43f2a16a1ad2/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbe68d4ccbf65edfcc5ac31902dfd950190ac429", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe68d4ccbf65edfcc5ac31902dfd950190ac429", "html_url": "https://github.com/rust-lang/rust/commit/cbe68d4ccbf65edfcc5ac31902dfd950190ac429"}], "stats": {"total": 79, "additions": 73, "deletions": 6}, "files": [{"sha": "142f808a645b5ffb7ce7c40e85b720d198db0ce0", "filename": "src/lib/_io.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c17ea956a26a05341ff24736105b43f2a16a1ad2/src%2Flib%2F_io.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17ea956a26a05341ff24736105b43f2a16a1ad2/src%2Flib%2F_io.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_io.rs?ref=c17ea956a26a05341ff24736105b43f2a16a1ad2", "patch": "@@ -43,7 +43,11 @@ fn new_buf_reader(str path) -> buf_reader {\n     }\n   }\n \n-  auto fd = os.libc.open(_str.buf(path), 0);\n+  auto fd = os.libc.open(_str.buf(path),\n+                         os.libc_constants.O_RDONLY() |\n+                         os.libc_constants.O_BINARY(),\n+                         0u);\n+\n   if (fd < 0) {\n     log \"error opening file for reading\";\n     log sys.rustrt.last_os_error();\n@@ -52,7 +56,9 @@ fn new_buf_reader(str path) -> buf_reader {\n   ret fd_buf_reader(fd, new_buf());\n }\n \n-fn new_buf_writer(str path) -> buf_writer {\n+type fileflag = tag(append(), create(), truncate());\n+\n+fn new_buf_writer(str path, vec[fileflag] flags) -> buf_writer {\n \n   unsafe obj fd_buf_writer(int fd) {\n \n@@ -77,7 +83,23 @@ fn new_buf_writer(str path) -> buf_writer {\n     }\n   }\n \n-  auto fd = os.libc.open(_str.buf(path), 0);\n+  let int fflags =\n+    os.libc_constants.O_WRONLY() |\n+    os.libc_constants.O_BINARY();\n+\n+  for (fileflag f in flags) {\n+    alt (f) {\n+      case (append())   { fflags |= os.libc_constants.O_APPEND(); }\n+      case (create())   { fflags |= os.libc_constants.O_CREAT(); }\n+      case (truncate()) { fflags |= os.libc_constants.O_TRUNC(); }\n+    }\n+  }\n+\n+  auto fd = os.libc.open(_str.buf(path),\n+                         fflags,\n+                         os.libc_constants.S_IRUSR() |\n+                         os.libc_constants.S_IWUSR());\n+\n   if (fd < 0) {\n     log \"error opening file for writing\";\n     log sys.rustrt.last_os_error();"}, {"sha": "3f096e99def35a5f5efeb7a3022a596d1917355c", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c17ea956a26a05341ff24736105b43f2a16a1ad2/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17ea956a26a05341ff24736105b43f2a16a1ad2/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=c17ea956a26a05341ff24736105b43f2a16a1ad2", "patch": "@@ -3,7 +3,7 @@ import _vec.vbuf;\n \n native mod libc = \"libc.so.6\" {\n \n-  fn open(sbuf s, int flags) -> int;\n+  fn open(sbuf s, int flags, uint mode) -> int;\n   fn read(int fd, vbuf buf, uint count) -> int;\n   fn write(int fd, vbuf buf, uint count) -> int;\n   fn close(int fd) -> int;\n@@ -17,3 +17,18 @@ native mod libc = \"libc.so.6\" {\n   fn setenv(sbuf n, sbuf v, int overwrite) -> int;\n   fn unsetenv(sbuf n) -> int;\n }\n+\n+mod libc_constants {\n+  fn O_RDONLY() -> int { ret 0x0000; }\n+  fn O_WRONLY() -> int { ret 0x0001; }\n+  fn O_RDWR()   -> int { ret 0x0002; }\n+  fn O_APPEND() -> int { ret 0x0400; }\n+  fn O_CREAT()  -> int { ret 0x0040; }\n+  fn O_EXCL()   -> int { ret 0x0080; }\n+  fn O_TRUNC()  -> int { ret 0x0200; }\n+  fn O_TEXT()   -> int { ret 0x0000; } // nonexistent in linux libc\n+  fn O_BINARY() -> int { ret 0x0000; } // nonexistent in linux libc\n+\n+  fn S_IRUSR() -> uint { ret 0x0100u; }\n+  fn S_IWUSR() -> uint { ret 0x0080u; }\n+}"}, {"sha": "2ada5c0781c1a06e9f6053dcbe84db91fcb58102", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c17ea956a26a05341ff24736105b43f2a16a1ad2/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17ea956a26a05341ff24736105b43f2a16a1ad2/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=c17ea956a26a05341ff24736105b43f2a16a1ad2", "patch": "@@ -3,7 +3,7 @@ import _vec.vbuf;\n \n native mod libc = \"libc.dylib\" {\n \n-  fn open(sbuf s, int flags) -> int;\n+  fn open(sbuf s, int flags, uint mode) -> int;\n   fn read(int fd, vbuf buf, uint count) -> int;\n   fn write(int fd, vbuf buf, uint count) -> int;\n   fn close(int fd) -> int;\n@@ -17,3 +17,18 @@ native mod libc = \"libc.dylib\" {\n   fn setenv(sbuf n, sbuf v, int overwrite) -> int;\n   fn unsetenv(sbuf n) -> int;\n }\n+\n+mod libc_constants {\n+  fn O_RDONLY() -> int { ret 0x0000; }\n+  fn O_WRONLY() -> int { ret 0x0001; }\n+  fn O_RDWR()   -> int { ret 0x0002; }\n+  fn O_APPEND() -> int { ret 0x0008; }\n+  fn O_CREAT()  -> int { ret 0x0200; }\n+  fn O_EXCL()   -> int { ret 0x0800; }\n+  fn O_TRUNC()  -> int { ret 0x0400; }\n+  fn O_TEXT()   -> int { ret 0x0000; } // nonexistent in darwin libc\n+  fn O_BINARY() -> int { ret 0x0000; } // nonexistent in darwin libc\n+\n+  fn S_IRUSR() -> uint { ret 0x0400u; }\n+  fn S_IWUSR() -> uint { ret 0x0200u; }\n+}"}, {"sha": "3d8e5f3a4d9b3fb092cc1c8cceb22f43ec35a493", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c17ea956a26a05341ff24736105b43f2a16a1ad2/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17ea956a26a05341ff24736105b43f2a16a1ad2/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=c17ea956a26a05341ff24736105b43f2a16a1ad2", "patch": "@@ -2,8 +2,23 @@ import _str.sbuf;\n import _vec.vbuf;\n \n native mod libc = \"msvcrt.dll\" {\n-  fn open(sbuf s, int flags) -> int = \"_open\";\n+  fn open(sbuf s, int flags, uint mode) -> int = \"_open\";\n   fn read(int fd, vbuf buf, uint count) -> int = \"_read\";\n   fn write(int fd, vbuf buf, uint count) -> int = \"_write\";\n   fn close(int fd) -> int = \"_close\";\n }\n+\n+mod libc_constants {\n+  fn O_RDONLY() -> int { ret 0x0000; }\n+  fn O_WRONLY() -> int { ret 0x0001; }\n+  fn O_RDWR()   -> int { ret 0x0002; }\n+  fn O_APPEND() -> int { ret 0x0400; }\n+  fn O_CREAT()  -> int { ret 0x0040; }\n+  fn O_EXCL()   -> int { ret 0x0080; }\n+  fn O_TRUNC()  -> int { ret 0x0200; }\n+  fn O_TEXT()   -> int { ret 0x4000; }\n+  fn O_BINARY() -> int { ret 0x8000; }\n+\n+  fn S_IRUSR() -> uint { ret 0x0100u; } // really _S_IREAD  in win32\n+  fn S_IWUSR() -> uint { ret 0x0080u; } // really _S_IWRITE in win32\n+}"}]}