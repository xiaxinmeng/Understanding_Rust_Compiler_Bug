{"sha": "6e2a64b57a74f35bef215972adf1b803cff288bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMmE2NGI1N2E3NGYzNWJlZjIxNTk3MmFkZjFiODAzY2ZmMjg4YmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-30T01:07:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-30T01:07:19Z"}, "message": "Auto merge of #29974 - brson:gold, r=alexcrichton\n\nWhen using `cc` for linking rustc will, if gold is available (by looking for `/usr/bin/ld.gold`), pass `-fuse-ld=gold` to `cc`.\n\nIn some scenarios gold links much faster than ld. Servo uses it to considerably speed up linking. gold behaves nearly identically to ld (though I think there are rare corner cases that don't work still). I've run this through crater and everything there continues to link.\n\nTo disable, pass `-C disable-gold`.", "tree": {"sha": "e3bf7cc7c1f9c83df4d63cfd7a28ff7e9d5204b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3bf7cc7c1f9c83df4d63cfd7a28ff7e9d5204b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e2a64b57a74f35bef215972adf1b803cff288bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2a64b57a74f35bef215972adf1b803cff288bd", "html_url": "https://github.com/rust-lang/rust/commit/6e2a64b57a74f35bef215972adf1b803cff288bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e2a64b57a74f35bef215972adf1b803cff288bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1035b3522e251d7639e7052936aa634752c5500", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1035b3522e251d7639e7052936aa634752c5500", "html_url": "https://github.com/rust-lang/rust/commit/c1035b3522e251d7639e7052936aa634752c5500"}, {"sha": "34dc0e0739e19811850f82f1e45b61ba97adc96e", "url": "https://api.github.com/repos/rust-lang/rust/commits/34dc0e0739e19811850f82f1e45b61ba97adc96e", "html_url": "https://github.com/rust-lang/rust/commit/34dc0e0739e19811850f82f1e45b61ba97adc96e"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "745be426676f656aadfda2e53a0f6178055fdfe4", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e2a64b57a74f35bef215972adf1b803cff288bd/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2a64b57a74f35bef215972adf1b803cff288bd/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6e2a64b57a74f35bef215972adf1b803cff288bd", "patch": "@@ -539,6 +539,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"explicitly enable the cfg(debug_assertions) directive\"),\n     inline_threshold: Option<usize> = (None, parse_opt_uint,\n         \"set the inlining threshold for\"),\n+    disable_gold: bool = (false, parse_bool,\n+        \"disable use of the ld.gold linker\"),\n }\n \n "}, {"sha": "1e5bac85ffc068bbf6aaba83915126601de3139e", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e2a64b57a74f35bef215972adf1b803cff288bd/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2a64b57a74f35bef215972adf1b803cff288bd/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=6e2a64b57a74f35bef215972adf1b803cff288bd", "patch": "@@ -1060,6 +1060,10 @@ fn link_args(cmd: &mut Linker,\n         cmd.args(&rpath::get_rpath_flags(&mut rpath_config));\n     }\n \n+    // Use the gold linker if possible instead of ld. It is much\n+    // faster.\n+    cmd.try_gold_linker();\n+\n     // Finally add all the linker arguments provided on the command line along\n     // with any #[link_args] attributes found inside the crate\n     if let Some(ref args) = sess.opts.cg.link_args {"}, {"sha": "90ebf364367a0c66388a8423e70b74fef16e3198", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6e2a64b57a74f35bef215972adf1b803cff288bd/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2a64b57a74f35bef215972adf1b803cff288bd/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=6e2a64b57a74f35bef215972adf1b803cff288bd", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::env;\n use std::ffi::OsString;\n use std::fs::{self, File};\n use std::io::{self, BufWriter};\n@@ -56,6 +57,7 @@ pub trait Linker {\n     fn no_whole_archives(&mut self);\n     fn export_symbols(&mut self, sess: &Session, trans: &CrateTranslation,\n                       tmpdir: &Path);\n+    fn try_gold_linker(&mut self);\n }\n \n pub struct GnuLinker<'a> {\n@@ -199,6 +201,53 @@ impl<'a> Linker for GnuLinker<'a> {\n     fn export_symbols(&mut self, _: &Session, _: &CrateTranslation, _: &Path) {\n         // noop, visibility in object files takes care of this\n     }\n+\n+    fn try_gold_linker(&mut self) {\n+        // Only use gold under specific conditions that we know work\n+\n+        let gold_exists = match env::var_os(\"PATH\") {\n+            Some(ref env_path) => {\n+                env::split_paths(env_path).any(|mut p| {\n+                    p.push(\"ld.gold\");\n+                    p.exists()\n+                })\n+            }\n+            None => false\n+        };\n+        let host_is_linux = cfg!(target_os = \"linux\");\n+        // Defensively prevent trying to use gold for bogus cross-targets.\n+        let target_is_host_compatible = {\n+            let host_os_is_target_os = self.sess.target.target.target_os == env::consts::OS;\n+            let host_arch_is_target_arch = self.sess.target.target.arch == env::consts::ARCH;\n+            // Support x86_64->i686 and reverse\n+            let host_and_target_are_x86ish =\n+                (self.sess.target.target.arch == \"x86\" ||\n+                 self.sess.target.target.arch == \"x86_64\") &&\n+                (env::consts::ARCH == \"x86\" ||\n+                 env::consts::ARCH == \"x86_64\");\n+            host_os_is_target_os && (host_arch_is_target_arch || host_and_target_are_x86ish)\n+        };\n+        // We have strong confidence that x86 works, but not much\n+        // visibility into other architectures.\n+        let target_works_with_gold =\n+            self.sess.target.target.arch == \"x86\" ||\n+            self.sess.target.target.arch == \"x86_64\";\n+        let opt_out = self.sess.opts.cg.disable_gold;\n+\n+        let can_use_gold =\n+            gold_exists &&\n+            host_is_linux &&\n+            target_is_host_compatible &&\n+            target_works_with_gold &&\n+            !opt_out;\n+\n+        if can_use_gold {\n+            info!(\"linking with ld.gold\");\n+            self.cmd.arg(\"-fuse-ld=gold\");\n+        } else {\n+            info!(\"linking with ld\");\n+        }\n+    }\n }\n \n pub struct MsvcLinker<'a> {\n@@ -358,4 +407,6 @@ impl<'a> Linker for MsvcLinker<'a> {\n         arg.push(path);\n         self.cmd.arg(&arg);\n     }\n+\n+    fn try_gold_linker(&mut self) {}\n }"}]}