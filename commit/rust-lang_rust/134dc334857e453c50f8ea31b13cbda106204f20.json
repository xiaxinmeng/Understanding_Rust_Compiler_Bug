{"sha": "134dc334857e453c50f8ea31b13cbda106204f20", "node_id": "C_kwDOAAsO6NoAKDEzNGRjMzM0ODU3ZTQ1M2M1MGY4ZWEzMWIxM2NiZGExMDYyMDRmMjA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-12T14:01:32Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-24T17:31:25Z"}, "message": "Fix testing with unstable features disabled", "tree": {"sha": "4d23df083aae49715e86ddb2ce4ba4b62aa29670", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d23df083aae49715e86ddb2ce4ba4b62aa29670"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/134dc334857e453c50f8ea31b13cbda106204f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/134dc334857e453c50f8ea31b13cbda106204f20", "html_url": "https://github.com/rust-lang/rust/commit/134dc334857e453c50f8ea31b13cbda106204f20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/134dc334857e453c50f8ea31b13cbda106204f20/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e67c862f9d81a54850d78804ee0de6d0e413a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e67c862f9d81a54850d78804ee0de6d0e413a8", "html_url": "https://github.com/rust-lang/rust/commit/72e67c862f9d81a54850d78804ee0de6d0e413a8"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "0110011169dff6b152062a062c3c38973c005339", "filename": "build_system/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/134dc334857e453c50f8ea31b13cbda106204f20/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134dc334857e453c50f8ea31b13cbda106204f20/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=134dc334857e453c50f8ea31b13cbda106204f20", "patch": "@@ -196,6 +196,7 @@ pub(crate) fn main() {\n                 &dirs,\n                 channel,\n                 sysroot_kind,\n+                use_unstable_features,\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n                 rustup_toolchain_name.as_deref(),"}, {"sha": "7efb960697e8c3ec2b7fff0065e8e4e6c41c245e", "filename": "build_system/tests.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/134dc334857e453c50f8ea31b13cbda106204f20/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134dc334857e453c50f8ea31b13cbda106204f20/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=134dc334857e453c50f8ea31b13cbda106204f20", "patch": "@@ -214,6 +214,7 @@ pub(crate) fn run_tests(\n     dirs: &Dirs,\n     channel: &str,\n     sysroot_kind: SysrootKind,\n+    use_unstable_features: bool,\n     cg_clif_dylib: &CodegenBackend,\n     bootstrap_host_compiler: &Compiler,\n     rustup_toolchain_name: Option<&str>,\n@@ -233,6 +234,7 @@ pub(crate) fn run_tests(\n         let runner = TestRunner::new(\n             dirs.clone(),\n             target_compiler,\n+            use_unstable_features,\n             bootstrap_host_compiler.triple == target_triple,\n         );\n \n@@ -262,6 +264,7 @@ pub(crate) fn run_tests(\n         let runner = TestRunner::new(\n             dirs.clone(),\n             target_compiler,\n+            use_unstable_features,\n             bootstrap_host_compiler.triple == target_triple,\n         );\n \n@@ -282,12 +285,18 @@ pub(crate) fn run_tests(\n struct TestRunner {\n     is_native: bool,\n     jit_supported: bool,\n+    use_unstable_features: bool,\n     dirs: Dirs,\n     target_compiler: Compiler,\n }\n \n impl TestRunner {\n-    fn new(dirs: Dirs, mut target_compiler: Compiler, is_native: bool) -> Self {\n+    fn new(\n+        dirs: Dirs,\n+        mut target_compiler: Compiler,\n+        use_unstable_features: bool,\n+        is_native: bool,\n+    ) -> Self {\n         if let Ok(rustflags) = env::var(\"RUSTFLAGS\") {\n             target_compiler.rustflags.push(' ');\n             target_compiler.rustflags.push_str(&rustflags);\n@@ -302,11 +311,12 @@ impl TestRunner {\n             target_compiler.rustflags.push_str(\" -Clink-arg=-undefined -Clink-arg=dynamic_lookup\");\n         }\n \n-        let jit_supported = is_native\n+        let jit_supported = use_unstable_features\n+            && is_native\n             && target_compiler.triple.contains(\"x86_64\")\n             && !target_compiler.triple.contains(\"windows\");\n \n-        Self { is_native, jit_supported, dirs, target_compiler }\n+        Self { is_native, jit_supported, use_unstable_features, dirs, target_compiler }\n     }\n \n     fn run_testsuite(&self, tests: &[TestCase]) {\n@@ -325,10 +335,24 @@ impl TestRunner {\n             match *cmd {\n                 TestCaseCmd::Custom { func } => func(self),\n                 TestCaseCmd::BuildLib { source, crate_types } => {\n-                    self.run_rustc([source, \"--crate-type\", crate_types]);\n+                    if self.use_unstable_features {\n+                        self.run_rustc([source, \"--crate-type\", crate_types]);\n+                    } else {\n+                        self.run_rustc([\n+                            source,\n+                            \"--crate-type\",\n+                            crate_types,\n+                            \"--cfg\",\n+                            \"no_unstable_features\",\n+                        ]);\n+                    }\n                 }\n                 TestCaseCmd::BuildBinAndRun { source, args } => {\n-                    self.run_rustc([source]);\n+                    if self.use_unstable_features {\n+                        self.run_rustc([source]);\n+                    } else {\n+                        self.run_rustc([source, \"--cfg\", \"no_unstable_features\"]);\n+                    }\n                     self.run_out_command(\n                         source.split('/').last().unwrap().split('.').next().unwrap(),\n                         args,"}, {"sha": "e3452520e7bdcfe21dbecf2329ae42419d8fb909", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/134dc334857e453c50f8ea31b13cbda106204f20/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134dc334857e453c50f8ea31b13cbda106204f20/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=134dc334857e453c50f8ea31b13cbda106204f20", "patch": "@@ -322,7 +322,12 @@ fn main() {\n     #[cfg(all(not(jit), not(all(windows, target_env = \"gnu\"))))]\n     test_tls();\n \n-    #[cfg(all(not(jit), target_arch = \"x86_64\", any(target_os = \"linux\", target_os = \"darwin\")))]\n+    #[cfg(all(\n+        not(jit),\n+        not(no_unstable_features),\n+        target_arch = \"x86_64\",\n+        any(target_os = \"linux\", target_os = \"darwin\")\n+    ))]\n     unsafe {\n         global_asm_test();\n     }\n@@ -350,12 +355,17 @@ fn main() {\n     let _a = f.0[0];\n }\n \n-#[cfg(all(not(jit), target_arch = \"x86_64\", any(target_os = \"linux\", target_os = \"darwin\")))]\n+#[cfg(all(\n+    not(jit),\n+    not(no_unstable_features),\n+    target_arch = \"x86_64\",\n+    any(target_os = \"linux\", target_os = \"darwin\")\n+))]\n extern \"C\" {\n     fn global_asm_test();\n }\n \n-#[cfg(all(not(jit), target_arch = \"x86_64\", target_os = \"linux\"))]\n+#[cfg(all(not(jit), not(no_unstable_features), target_arch = \"x86_64\", target_os = \"linux\"))]\n global_asm! {\n     \"\n     .global global_asm_test\n@@ -365,7 +375,7 @@ global_asm! {\n     \"\n }\n \n-#[cfg(all(not(jit), target_arch = \"x86_64\", target_os = \"darwin\"))]\n+#[cfg(all(not(jit), not(no_unstable_features), target_arch = \"x86_64\", target_os = \"darwin\"))]\n global_asm! {\n     \"\n     .global _global_asm_test"}]}