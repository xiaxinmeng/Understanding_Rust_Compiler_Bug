{"sha": "132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMmJkZTdjZjFlZTEwMmI2ZWIzNzA1NjFiZjlhZjljZmJmYjQyMjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-12T18:04:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-17T16:41:43Z"}, "message": "rustc: Make trans collect/partition a query\n\nThis commit moves the `collect_and_partition_translation_items` function into a\nquery on `TyCtxt` instead of a free function in trans, allowing us to track\ndependencies and such of the function.", "tree": {"sha": "a6bb99ad3f4d2191e794a8fbfa9acb51ff2c4385", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6bb99ad3f4d2191e794a8fbfa9acb51ff2c4385"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "html_url": "https://github.com/rust-lang/rust/commit/132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dba3ddd8d4e037db390f54536b4cb77ea988eab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dba3ddd8d4e037db390f54536b4cb77ea988eab1", "html_url": "https://github.com/rust-lang/rust/commit/dba3ddd8d4e037db390f54536b4cb77ea988eab1"}], "stats": {"total": 600, "additions": 352, "deletions": 248}, "files": [{"sha": "afd31306817c055122763513898cacc661aed549", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "patch": "@@ -576,6 +576,7 @@ define_dep_nodes!( <'tcx>\n     [] StabilityIndex,\n     [] AllCrateNums,\n     [] ExportedSymbols,\n+    [] CollectAndPartitionTranslationItems,\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "f7b1d2d92f717fef2739841be82755e6fb9ccbd9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "patch": "@@ -104,6 +104,7 @@ pub mod middle {\n     pub mod recursion_limit;\n     pub mod resolve_lifetime;\n     pub mod stability;\n+    pub mod trans;\n     pub mod weak_lang_items;\n }\n "}, {"sha": "e871a38c4eff012edfdd29435eedbf95044f98f7", "filename": "src/librustc/middle/trans.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans.rs?ref=132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "patch": "@@ -0,0 +1,69 @@\n+use syntax::ast::NodeId;\n+use syntax::symbol::InternedString;\n+use ty::Instance;\n+use util::nodemap::FxHashMap;\n+\n+#[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n+pub enum TransItem<'tcx> {\n+    Fn(Instance<'tcx>),\n+    Static(NodeId),\n+    GlobalAsm(NodeId),\n+}\n+\n+pub struct CodegenUnit<'tcx> {\n+    /// A name for this CGU. Incremental compilation requires that\n+    /// name be unique amongst **all** crates.  Therefore, it should\n+    /// contain something unique to this crate (e.g., a module path)\n+    /// as well as the crate name and disambiguator.\n+    name: InternedString,\n+    items: FxHashMap<TransItem<'tcx>, (Linkage, Visibility)>,\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum Linkage {\n+    External,\n+    AvailableExternally,\n+    LinkOnceAny,\n+    LinkOnceODR,\n+    WeakAny,\n+    WeakODR,\n+    Appending,\n+    Internal,\n+    Private,\n+    ExternalWeak,\n+    Common,\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum Visibility {\n+    Default,\n+    Hidden,\n+    Protected,\n+}\n+\n+impl<'tcx> CodegenUnit<'tcx> {\n+    pub fn new(name: InternedString) -> CodegenUnit<'tcx> {\n+        CodegenUnit {\n+            name: name,\n+            items: FxHashMap(),\n+        }\n+    }\n+\n+    pub fn name(&self) -> &InternedString {\n+        &self.name\n+    }\n+\n+    pub fn set_name(&mut self, name: InternedString) {\n+        self.name = name;\n+    }\n+\n+    pub fn items(&self) -> &FxHashMap<TransItem<'tcx>, (Linkage, Visibility)> {\n+        &self.items\n+    }\n+\n+    pub fn items_mut(&mut self)\n+        -> &mut FxHashMap<TransItem<'tcx>, (Linkage, Visibility)>\n+    {\n+        &mut self.items\n+    }\n+}"}, {"sha": "c6fff0071bfcb140131840e637102e298de841a9", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "patch": "@@ -24,6 +24,7 @@ use middle::resolve_lifetime::{Region, ObjectLifetimeDefault};\n use middle::stability::{self, DeprecationEntry};\n use middle::lang_items::{LanguageItems, LangItem};\n use middle::exported_symbols::ExportedSymbols;\n+use middle::trans::{TransItem, CodegenUnit};\n use mir;\n use mir::transform::{MirSuite, MirPassIndex};\n use session::CompileResult;\n@@ -753,6 +754,12 @@ impl<'tcx> QueryDescription for queries::exported_symbol_set<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::collect_and_partition_translation_items<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"collect_and_partition_translation_items\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1382,6 +1389,9 @@ define_maps! { <'tcx>\n \n     [] fn exported_symbol_set: exported_symbol_set_node(CrateNum)\n         -> Arc<ExportedSymbols>,\n+    [] fn collect_and_partition_translation_items:\n+        collect_and_partition_translation_items_node(CrateNum)\n+        -> (Arc<FxHashSet<TransItem<'tcx>>>, Vec<Arc<CodegenUnit<'tcx>>>),\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n@@ -1499,3 +1509,7 @@ fn all_crate_nums_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n fn exported_symbol_set_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::ExportedSymbols\n }\n+\n+fn collect_and_partition_translation_items_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n+    DepConstructor::CollectAndPartitionTranslationItems\n+}"}, {"sha": "1eb3e86a15b819a355912dd6ccd8f413e77d71f8", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "patch": "@@ -34,11 +34,11 @@ pub struct LinkerInfo {\n }\n \n impl<'a, 'tcx> LinkerInfo {\n-    pub fn new(scx: &SharedCrateContext<'a, 'tcx>,\n-               exports: &ExportedSymbols) -> LinkerInfo {\n+    pub fn new(scx: &SharedCrateContext<'a, 'tcx>) -> LinkerInfo {\n+        let exports = scx.tcx().exported_symbols();\n         LinkerInfo {\n             exports: scx.sess().crate_types.borrow().iter().map(|&c| {\n-                (c, exported_symbols(scx, exports, c))\n+                (c, exported_symbols(scx, &exports, c))\n             }).collect(),\n         }\n     }"}, {"sha": "7d0e7c210746bc8b4935b3e91247174b29055a33", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 82, "deletions": 52, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "patch": "@@ -33,16 +33,18 @@ use back::link;\n use back::linker::LinkerInfo;\n use back::symbol_export;\n use back::write::{self, OngoingCrateTranslation};\n-use llvm::{ContextRef, Linkage, ModuleRef, ValueRef, Vector, get_param};\n+use llvm::{ContextRef, ModuleRef, ValueRef, Vector, get_param};\n use llvm;\n use metadata;\n-use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::middle::lang_items::StartFnLangItem;\n+use rustc::middle::trans::{Linkage, Visibility};\n use rustc::middle::cstore::{EncodedMetadata, EncodedMetadataHashes};\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::maps::Providers;\n use rustc::dep_graph::AssertDepGraphSafe;\n use rustc::middle::cstore::{self, LinkMeta, LinkagePreference};\n-use rustc::middle::exported_symbols::{ExportedSymbols, SymbolExportLevel};\n+use rustc::middle::exported_symbols::ExportedSymbols;\n use rustc::hir::map as hir_map;\n use rustc::util::common::{time, print_time_passes_entry};\n use rustc::session::config::{self, NoDebugInfo, OutputFilenames, OutputType};\n@@ -68,10 +70,10 @@ use machine;\n use meth;\n use mir;\n use monomorphize::{self, Instance};\n-use partitioning::{self, PartitioningStrategy, CodegenUnit};\n+use partitioning::{self, PartitioningStrategy, CodegenUnit, CodegenUnitExt};\n use symbol_names_test;\n use time_graph;\n-use trans_item::{TransItem, DefPathBasedNames};\n+use trans_item::{TransItem, TransItemExt, DefPathBasedNames};\n use type_::Type;\n use type_of;\n use value::Value;\n@@ -615,7 +617,9 @@ pub fn trans_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, instance: Instance\n     mir::trans_mir(ccx, lldecl, &mir, instance, sig);\n }\n \n-pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n+pub fn linkage_by_name(name: &str) -> Option<Linkage> {\n+    use rustc::middle::trans::Linkage::*;\n+\n     // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n     // applicable to variable declarations and may not really make sense for\n     // Rust code in the first place but whitelist them anyway and trust that\n@@ -625,17 +629,17 @@ pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n     // ghost, dllimport, dllexport and linkonce_odr_autohide are not supported\n     // and don't have to be, LLVM treats them as no-ops.\n     match name {\n-        \"appending\" => Some(llvm::Linkage::AppendingLinkage),\n-        \"available_externally\" => Some(llvm::Linkage::AvailableExternallyLinkage),\n-        \"common\" => Some(llvm::Linkage::CommonLinkage),\n-        \"extern_weak\" => Some(llvm::Linkage::ExternalWeakLinkage),\n-        \"external\" => Some(llvm::Linkage::ExternalLinkage),\n-        \"internal\" => Some(llvm::Linkage::InternalLinkage),\n-        \"linkonce\" => Some(llvm::Linkage::LinkOnceAnyLinkage),\n-        \"linkonce_odr\" => Some(llvm::Linkage::LinkOnceODRLinkage),\n-        \"private\" => Some(llvm::Linkage::PrivateLinkage),\n-        \"weak\" => Some(llvm::Linkage::WeakAnyLinkage),\n-        \"weak_odr\" => Some(llvm::Linkage::WeakODRLinkage),\n+        \"appending\" => Some(Appending),\n+        \"available_externally\" => Some(AvailableExternally),\n+        \"common\" => Some(Common),\n+        \"extern_weak\" => Some(ExternalWeak),\n+        \"external\" => Some(External),\n+        \"internal\" => Some(Internal),\n+        \"linkonce\" => Some(LinkOnceAny),\n+        \"linkonce_odr\" => Some(LinkOnceODR),\n+        \"private\" => Some(Private),\n+        \"weak\" => Some(WeakAny),\n+        \"weak_odr\" => Some(WeakODR),\n         _ => None,\n     }\n }\n@@ -974,20 +978,15 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Skip crate items and just output metadata in -Z no-trans mode.\n     if tcx.sess.opts.debugging_opts.no_trans ||\n        !tcx.sess.opts.output_types.should_trans() {\n-        let empty_exported_symbols = ExportedSymbols::new(\n-            SymbolExportLevel::C,\n-            Default::default(),\n-            Default::default(),\n-        );\n-        let linker_info = LinkerInfo::new(&shared_ccx, &empty_exported_symbols);\n+        let linker_info = LinkerInfo::new(&shared_ccx);\n         let ongoing_translation = write::start_async_translation(\n             tcx.sess,\n             output_filenames,\n             time_graph.clone(),\n             tcx.crate_name(LOCAL_CRATE),\n             link_meta,\n             metadata,\n-            Arc::new(empty_exported_symbols),\n+            shared_ccx.tcx().exported_symbols(),\n             no_builtins,\n             None,\n             linker_info,\n@@ -1006,16 +1005,14 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return ongoing_translation;\n     }\n \n-    let exported_symbols = tcx.exported_symbols();\n-\n     // Run the translation item collector and partition the collected items into\n     // codegen units.\n     let (translation_items, codegen_units) =\n-        collect_and_partition_translation_items(shared_ccx.tcx(), &exported_symbols);\n+        shared_ccx.tcx().collect_and_partition_translation_items(LOCAL_CRATE);\n \n     assert!(codegen_units.len() <= 1 || !tcx.sess.lto());\n \n-    let linker_info = LinkerInfo::new(&shared_ccx, &exported_symbols);\n+    let linker_info = LinkerInfo::new(&shared_ccx);\n     let subsystem = attr::first_attr_value_str_by_name(&krate.attrs,\n                                                        \"windows_subsystem\");\n     let windows_subsystem = subsystem.map(|subsystem| {\n@@ -1039,7 +1036,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx.crate_name(LOCAL_CRATE),\n         link_meta,\n         metadata,\n-        exported_symbols.clone(),\n+        tcx.exported_symbols(),\n         no_builtins,\n         windows_subsystem,\n         linker_info,\n@@ -1090,8 +1087,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                              metadata_module,\n                                                              codegen_unit_count == 0);\n \n-    let translation_items = Arc::new(translation_items);\n-\n     let mut all_stats = Stats::default();\n     let mut module_dispositions = tcx.sess.opts.incremental.as_ref().map(|_| Vec::new());\n \n@@ -1124,7 +1119,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         AssertDepGraphSafe(&shared_ccx),\n                                         AssertDepGraphSafe((cgu,\n                                                             translation_items.clone(),\n-                                                            exported_symbols.clone())),\n+                                                            tcx.exported_symbols())),\n                                         module_translation);\n             all_stats.extend(stats);\n \n@@ -1165,7 +1160,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     fn module_translation<'a, 'tcx>(\n         scx: AssertDepGraphSafe<&SharedCrateContext<'a, 'tcx>>,\n-        args: AssertDepGraphSafe<(CodegenUnit<'tcx>,\n+        args: AssertDepGraphSafe<(Arc<CodegenUnit<'tcx>>,\n                                   Arc<FxHashSet<TransItem<'tcx>>>,\n                                   Arc<ExportedSymbols>)>)\n         -> (Stats, ModuleTranslation)\n@@ -1174,7 +1169,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let AssertDepGraphSafe(scx) = scx;\n         let AssertDepGraphSafe((cgu, crate_trans_items, exported_symbols)) = args;\n \n-        let cgu_name = String::from(cgu.name());\n+        let cgu_name = cgu.name().to_string();\n         let cgu_id = cgu.work_product_id();\n         let symbol_name_hash = cgu.compute_symbol_name_hash(scx);\n \n@@ -1398,11 +1393,14 @@ fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>, trans_i\n     }\n }\n \n-fn collect_and_partition_translation_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                     exported_symbols: &ExportedSymbols)\n-                                                     -> (FxHashSet<TransItem<'tcx>>,\n-                                                         Vec<CodegenUnit<'tcx>>) {\n+fn collect_and_partition_translation_items<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    cnum: CrateNum,\n+) -> (Arc<FxHashSet<TransItem<'tcx>>>, Vec<Arc<CodegenUnit<'tcx>>>)\n+{\n+    assert_eq!(cnum, LOCAL_CRATE);\n     let time_passes = tcx.sess.time_passes();\n+    let exported_symbols = tcx.exported_symbols();\n \n     let collection_mode = match tcx.sess.opts.debugging_opts.print_trans_items {\n         Some(ref s) => {\n@@ -1427,7 +1425,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n     let (items, inlining_map) =\n         time(time_passes, \"translation item collection\", || {\n             collector::collect_crate_translation_items(tcx,\n-                                                       exported_symbols,\n+                                                       &exported_symbols,\n                                                        collection_mode)\n     });\n \n@@ -1444,7 +1442,10 @@ fn collect_and_partition_translation_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n                                 items.iter().cloned(),\n                                 strategy,\n                                 &inlining_map,\n-                                exported_symbols)\n+                                &exported_symbols)\n+            .into_iter()\n+            .map(Arc::new)\n+            .collect::<Vec<_>>()\n     });\n \n     assert!(tcx.sess.opts.cg.codegen_units == codegen_units.len() ||\n@@ -1477,17 +1478,17 @@ fn collect_and_partition_translation_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n                     output.push_str(&cgu_name);\n \n                     let linkage_abbrev = match linkage {\n-                        llvm::Linkage::ExternalLinkage => \"External\",\n-                        llvm::Linkage::AvailableExternallyLinkage => \"Available\",\n-                        llvm::Linkage::LinkOnceAnyLinkage => \"OnceAny\",\n-                        llvm::Linkage::LinkOnceODRLinkage => \"OnceODR\",\n-                        llvm::Linkage::WeakAnyLinkage => \"WeakAny\",\n-                        llvm::Linkage::WeakODRLinkage => \"WeakODR\",\n-                        llvm::Linkage::AppendingLinkage => \"Appending\",\n-                        llvm::Linkage::InternalLinkage => \"Internal\",\n-                        llvm::Linkage::PrivateLinkage => \"Private\",\n-                        llvm::Linkage::ExternalWeakLinkage => \"ExternalWeak\",\n-                        llvm::Linkage::CommonLinkage => \"Common\",\n+                        Linkage::External => \"External\",\n+                        Linkage::AvailableExternally => \"Available\",\n+                        Linkage::LinkOnceAny => \"OnceAny\",\n+                        Linkage::LinkOnceODR => \"OnceODR\",\n+                        Linkage::WeakAny => \"WeakAny\",\n+                        Linkage::WeakODR => \"WeakODR\",\n+                        Linkage::Appending => \"Appending\",\n+                        Linkage::Internal => \"Internal\",\n+                        Linkage::Private => \"Private\",\n+                        Linkage::ExternalWeak => \"ExternalWeak\",\n+                        Linkage::Common => \"Common\",\n                     };\n \n                     output.push_str(\"[\");\n@@ -1505,7 +1506,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n         }\n     }\n \n-    (translation_items, codegen_units)\n+    (Arc::new(translation_items), codegen_units)\n }\n \n impl CrateInfo {\n@@ -1550,3 +1551,32 @@ impl CrateInfo {\n         return info\n     }\n }\n+\n+pub fn provide(providers: &mut Providers) {\n+    providers.collect_and_partition_translation_items =\n+        collect_and_partition_translation_items;\n+}\n+\n+pub fn linkage_to_llvm(linkage: Linkage) -> llvm::Linkage {\n+    match linkage {\n+        Linkage::External => llvm::Linkage::ExternalLinkage,\n+        Linkage::AvailableExternally => llvm::Linkage::AvailableExternallyLinkage,\n+        Linkage::LinkOnceAny => llvm::Linkage::LinkOnceAnyLinkage,\n+        Linkage::LinkOnceODR => llvm::Linkage::LinkOnceODRLinkage,\n+        Linkage::WeakAny => llvm::Linkage::WeakAnyLinkage,\n+        Linkage::WeakODR => llvm::Linkage::WeakODRLinkage,\n+        Linkage::Appending => llvm::Linkage::AppendingLinkage,\n+        Linkage::Internal => llvm::Linkage::InternalLinkage,\n+        Linkage::Private => llvm::Linkage::PrivateLinkage,\n+        Linkage::ExternalWeak => llvm::Linkage::ExternalWeakLinkage,\n+        Linkage::Common => llvm::Linkage::CommonLinkage,\n+    }\n+}\n+\n+pub fn visibility_to_llvm(linkage: Visibility) -> llvm::Visibility {\n+    match linkage {\n+        Visibility::Default => llvm::Visibility::Default,\n+        Visibility::Hidden => llvm::Visibility::Hidden,\n+        Visibility::Protected => llvm::Visibility::Protected,\n+    }\n+}"}, {"sha": "a45bcb51ab594fd2970b2affdd01f2921c7f507a", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "patch": "@@ -207,7 +207,7 @@ use common::{def_ty, instance_ty, type_is_sized};\n use monomorphize::{self, Instance};\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n \n-use trans_item::{TransItem, DefPathBasedNames, InstantiationMode};\n+use trans_item::{TransItem, TransItemExt, DefPathBasedNames, InstantiationMode};\n \n use rustc_data_structures::bitvec::BitVector;\n "}, {"sha": "4f78e77fc690cde754ed3749f6081f9354f9a03b", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "patch": "@@ -16,7 +16,7 @@ use rustc::hir::map as hir_map;\n use rustc::middle::const_val::ConstEvalErr;\n use {debuginfo, machine};\n use base;\n-use trans_item::TransItem;\n+use trans_item::{TransItem, TransItemExt};\n use common::{self, CrateContext, val_ty};\n use declare;\n use monomorphize::Instance;\n@@ -150,7 +150,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n                     // extern \"C\" fn() from being non-null, so we can't just declare a\n                     // static and call it a day. Some linkages (like weak) will make it such\n                     // that the static actually has a null value.\n-                    let linkage = match base::llvm_linkage_by_name(&name.as_str()) {\n+                    let linkage = match base::linkage_by_name(&name.as_str()) {\n                         Some(linkage) => linkage,\n                         None => {\n                             ccx.sess().span_fatal(span, \"invalid linkage specified\");\n@@ -165,7 +165,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n                     unsafe {\n                         // Declare a symbol `foo` with the desired linkage.\n                         let g1 = declare::declare_global(ccx, &sym, llty2);\n-                        llvm::LLVMRustSetLinkage(g1, linkage);\n+                        llvm::LLVMRustSetLinkage(g1, base::linkage_to_llvm(linkage));\n \n                         // Declare an internal global `extern_with_linkage_foo` which\n                         // is initialized with the address of `foo`.  If `foo` is"}, {"sha": "7a2db29705d83120b712ed6939b07fb9ce0b3aa1", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "patch": "@@ -93,7 +93,7 @@ pub struct LocalCrateContext<'a, 'tcx: 'a> {\n     llmod: ModuleRef,\n     llcx: ContextRef,\n     stats: Stats,\n-    codegen_unit: CodegenUnit<'tcx>,\n+    codegen_unit: Arc<CodegenUnit<'tcx>>,\n \n     /// The translation items of the whole crate.\n     crate_trans_items: Arc<FxHashSet<TransItem<'tcx>>>,\n@@ -330,7 +330,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         common::type_is_freeze(self.tcx, ty)\n     }\n \n-    pub fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n+    pub fn tcx(&self) -> TyCtxt<'b, 'tcx, 'tcx> {\n         self.tcx\n     }\n \n@@ -353,7 +353,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n \n impl<'a, 'tcx> LocalCrateContext<'a, 'tcx> {\n     pub fn new(shared: &SharedCrateContext<'a, 'tcx>,\n-               codegen_unit: CodegenUnit<'tcx>,\n+               codegen_unit: Arc<CodegenUnit<'tcx>>,\n                crate_trans_items: Arc<FxHashSet<TransItem<'tcx>>>,\n                exported_symbols: Arc<ExportedSymbols>,)\n                -> LocalCrateContext<'a, 'tcx> {\n@@ -465,7 +465,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         self.local_ccx\n     }\n \n-    pub fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n+    pub fn tcx(&self) -> TyCtxt<'b, 'tcx, 'tcx> {\n         self.shared.tcx\n     }\n "}, {"sha": "701c7be8ad6d948f7df2302b4c78e92a275b70dc", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "patch": "@@ -251,6 +251,7 @@ __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }\n \n pub fn provide_local(providers: &mut Providers) {\n     back::symbol_names::provide(providers);\n+    base::provide(providers);\n     providers.exported_symbol_set = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         Arc::new(back::symbol_export::compute(tcx))"}, {"sha": "d4aecb9e56caad7387c5bb11950811d6cdb1e14c", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 65, "deletions": 78, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "patch": "@@ -105,11 +105,11 @@\n use collector::InliningMap;\n use common;\n use context::SharedCrateContext;\n-use llvm;\n use rustc::dep_graph::{DepNode, WorkProductId};\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n use rustc::middle::exported_symbols::ExportedSymbols;\n+use rustc::middle::trans::{Linkage, Visibility};\n use rustc::session::config::NUMBERED_CODEGEN_UNIT_MARKER;\n use rustc::ty::{self, TyCtxt, InstanceDef};\n use rustc::ty::item_path::characteristic_def_id_of_type;\n@@ -119,7 +119,9 @@ use std::collections::hash_map::Entry;\n use std::hash::Hash;\n use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n-use trans_item::{TransItem, InstantiationMode};\n+use trans_item::{TransItem, TransItemExt, InstantiationMode};\n+\n+pub use rustc::middle::trans::CodegenUnit;\n \n pub enum PartitioningStrategy {\n     /// Generate one codegen unit per source-level module.\n@@ -129,53 +131,34 @@ pub enum PartitioningStrategy {\n     FixedUnitCount(usize)\n }\n \n-pub struct CodegenUnit<'tcx> {\n-    /// A name for this CGU. Incremental compilation requires that\n-    /// name be unique amongst **all** crates.  Therefore, it should\n-    /// contain something unique to this crate (e.g., a module path)\n-    /// as well as the crate name and disambiguator.\n-    name: InternedString,\n-\n-    items: FxHashMap<TransItem<'tcx>, (llvm::Linkage, llvm::Visibility)>,\n-}\n-\n-impl<'tcx> CodegenUnit<'tcx> {\n-    pub fn new(name: InternedString,\n-               items: FxHashMap<TransItem<'tcx>, (llvm::Linkage, llvm::Visibility)>)\n-               -> Self {\n-        CodegenUnit {\n-            name,\n-            items,\n-        }\n-    }\n+pub trait CodegenUnitExt<'tcx> {\n+    fn as_codegen_unit(&self) -> &CodegenUnit<'tcx>;\n \n-    pub fn empty(name: InternedString) -> Self {\n-        Self::new(name, FxHashMap())\n+    fn contains_item(&self, item: &TransItem<'tcx>) -> bool {\n+        self.items().contains_key(item)\n     }\n \n-    pub fn contains_item(&self, item: &TransItem<'tcx>) -> bool {\n-        self.items.contains_key(item)\n+    fn name<'a>(&'a self) -> &'a InternedString\n+        where 'tcx: 'a,\n+    {\n+        &self.as_codegen_unit().name()\n     }\n \n-    pub fn name(&self) -> &str {\n-        &self.name\n+    fn items(&self) -> &FxHashMap<TransItem<'tcx>, (Linkage, Visibility)> {\n+        &self.as_codegen_unit().items()\n     }\n \n-    pub fn items(&self) -> &FxHashMap<TransItem<'tcx>, (llvm::Linkage, llvm::Visibility)> {\n-        &self.items\n-    }\n-\n-    pub fn work_product_id(&self) -> WorkProductId {\n+    fn work_product_id(&self) -> WorkProductId {\n         WorkProductId::from_cgu_name(self.name())\n     }\n \n-    pub fn work_product_dep_node(&self) -> DepNode {\n+    fn work_product_dep_node(&self) -> DepNode {\n         self.work_product_id().to_dep_node()\n     }\n \n-    pub fn compute_symbol_name_hash<'a>(&self,\n-                                        scx: &SharedCrateContext<'a, 'tcx>)\n-                                        -> u64 {\n+    fn compute_symbol_name_hash<'a>(&self,\n+                                    scx: &SharedCrateContext<'a, 'tcx>)\n+                                    -> u64 {\n         let mut state = IchHasher::new();\n         let all_items = self.items_in_deterministic_order(scx.tcx());\n         for (item, (linkage, visibility)) in all_items {\n@@ -188,10 +171,10 @@ impl<'tcx> CodegenUnit<'tcx> {\n         state.finish().to_smaller_hash()\n     }\n \n-    pub fn items_in_deterministic_order<'a>(&self,\n-                                            tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                                            -> Vec<(TransItem<'tcx>,\n-                                                   (llvm::Linkage, llvm::Visibility))> {\n+    fn items_in_deterministic_order<'a>(&self,\n+                                        tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+                                        -> Vec<(TransItem<'tcx>,\n+                                               (Linkage, Visibility))> {\n         // The codegen tests rely on items being process in the same order as\n         // they appear in the file, so for local items, we sort by node_id first\n         #[derive(PartialEq, Eq, PartialOrd, Ord)]\n@@ -209,14 +192,19 @@ impl<'tcx> CodegenUnit<'tcx> {\n             }, item.symbol_name(tcx))\n         }\n \n-        let items: Vec<_> = self.items.iter().map(|(&i, &l)| (i, l)).collect();\n+        let items: Vec<_> = self.items().iter().map(|(&i, &l)| (i, l)).collect();\n         let mut items : Vec<_> = items.iter()\n             .map(|il| (il, item_sort_key(tcx, il.0))).collect();\n         items.sort_by(|&(_, ref key1), &(_, ref key2)| key1.cmp(key2));\n         items.into_iter().map(|(&item_linkage, _)| item_linkage).collect()\n     }\n }\n \n+impl<'tcx> CodegenUnitExt<'tcx> for CodegenUnit<'tcx> {\n+    fn as_codegen_unit(&self) -> &CodegenUnit<'tcx> {\n+        self\n+    }\n+}\n \n // Anything we can't find a proper codegen unit for goes into this.\n const FALLBACK_CODEGEN_UNIT: &'static str = \"__rustc_fallback_codegen_unit\";\n@@ -267,7 +255,7 @@ pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     } = post_inlining;\n \n     result.sort_by(|cgu1, cgu2| {\n-        (&cgu1.name[..]).cmp(&cgu2.name[..])\n+        cgu1.name().cmp(cgu2.name())\n     });\n \n     if tcx.sess.opts.enable_dep_node_debug_strs() {\n@@ -329,29 +317,29 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             };\n \n             let make_codegen_unit = || {\n-                CodegenUnit::empty(codegen_unit_name.clone())\n+                CodegenUnit::new(codegen_unit_name.clone())\n             };\n \n             let codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n                                                 .or_insert_with(make_codegen_unit);\n \n             let (linkage, visibility) = match trans_item.explicit_linkage(tcx) {\n-                Some(explicit_linkage) => (explicit_linkage, llvm::Visibility::Default),\n+                Some(explicit_linkage) => (explicit_linkage, Visibility::Default),\n                 None => {\n                     match trans_item {\n                         TransItem::Fn(ref instance) => {\n                             let visibility = match instance.def {\n                                 InstanceDef::Item(def_id) => {\n                                     if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n                                         if exported_symbols.contains(&node_id) {\n-                                            llvm::Visibility::Default\n+                                            Visibility::Default\n                                         } else {\n                                             internalization_candidates.insert(trans_item);\n-                                            llvm::Visibility::Hidden\n+                                            Visibility::Hidden\n                                         }\n                                     } else {\n                                         internalization_candidates.insert(trans_item);\n-                                        llvm::Visibility::Hidden\n+                                        Visibility::Hidden\n                                     }\n                                 }\n                                 InstanceDef::FnPtrShim(..) |\n@@ -365,23 +353,23 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                           trans_item)\n                                 }\n                             };\n-                            (llvm::ExternalLinkage, visibility)\n+                            (Linkage::External, visibility)\n                         }\n                         TransItem::Static(node_id) |\n                         TransItem::GlobalAsm(node_id) => {\n                             let visibility = if exported_symbols.contains(&node_id) {\n-                                llvm::Visibility::Default\n+                                Visibility::Default\n                             } else {\n                                 internalization_candidates.insert(trans_item);\n-                                llvm::Visibility::Hidden\n+                                Visibility::Hidden\n                             };\n-                            (llvm::ExternalLinkage, visibility)\n+                            (Linkage::External, visibility)\n                         }\n                     }\n                 }\n             };\n \n-            codegen_unit.items.insert(trans_item, (linkage, visibility));\n+            codegen_unit.items_mut().insert(trans_item, (linkage, visibility));\n             roots.insert(trans_item);\n         }\n     }\n@@ -391,7 +379,7 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if codegen_units.is_empty() {\n         let codegen_unit_name = Symbol::intern(FALLBACK_CODEGEN_UNIT).as_str();\n         codegen_units.insert(codegen_unit_name.clone(),\n-                             CodegenUnit::empty(codegen_unit_name.clone()));\n+                             CodegenUnit::new(codegen_unit_name.clone()));\n     }\n \n     PreInliningPartitioning {\n@@ -414,26 +402,26 @@ fn merge_codegen_units<'tcx>(initial_partitioning: &mut PreInliningPartitioning<\n     // translation items in a given unit. This could be improved on.\n     while codegen_units.len() > target_cgu_count {\n         // Sort small cgus to the back\n-        codegen_units.sort_by_key(|cgu| -(cgu.items.len() as i64));\n-        let smallest = codegen_units.pop().unwrap();\n+        codegen_units.sort_by_key(|cgu| -(cgu.items().len() as i64));\n+        let mut smallest = codegen_units.pop().unwrap();\n         let second_smallest = codegen_units.last_mut().unwrap();\n \n-        for (k, v) in smallest.items.into_iter() {\n-            second_smallest.items.insert(k, v);\n+        for (k, v) in smallest.items_mut().drain() {\n+            second_smallest.items_mut().insert(k, v);\n         }\n     }\n \n     for (index, cgu) in codegen_units.iter_mut().enumerate() {\n-        cgu.name = numbered_codegen_unit_name(crate_name, index);\n+        cgu.set_name(numbered_codegen_unit_name(crate_name, index));\n     }\n \n     // If the initial partitioning contained less than target_cgu_count to begin\n     // with, we won't have enough codegen units here, so add a empty units until\n     // we reach the target count\n     while codegen_units.len() < target_cgu_count {\n         let index = codegen_units.len();\n-        codegen_units.push(\n-            CodegenUnit::empty(numbered_codegen_unit_name(crate_name, index)));\n+        let name = numbered_codegen_unit_name(crate_name, index);\n+        codegen_units.push(CodegenUnit::new(name));\n     }\n }\n \n@@ -454,29 +442,28 @@ fn place_inlined_translation_items<'tcx>(initial_partitioning: PreInliningPartit\n     for old_codegen_unit in initial_cgus {\n         // Collect all items that need to be available in this codegen unit\n         let mut reachable = FxHashSet();\n-        for root in old_codegen_unit.items.keys() {\n+        for root in old_codegen_unit.items().keys() {\n             follow_inlining(*root, inlining_map, &mut reachable);\n         }\n \n-        let mut new_codegen_unit = CodegenUnit {\n-            name: old_codegen_unit.name,\n-            items: FxHashMap(),\n-        };\n+        let mut new_codegen_unit = CodegenUnit::new(old_codegen_unit.name().clone());\n \n         // Add all translation items that are not already there\n         for trans_item in reachable {\n-            if let Some(linkage) = old_codegen_unit.items.get(&trans_item) {\n+            if let Some(linkage) = old_codegen_unit.items().get(&trans_item) {\n                 // This is a root, just copy it over\n-                new_codegen_unit.items.insert(trans_item, *linkage);\n+                new_codegen_unit.items_mut().insert(trans_item, *linkage);\n             } else {\n                 if roots.contains(&trans_item) {\n                     bug!(\"GloballyShared trans-item inlined into other CGU: \\\n                           {:?}\", trans_item);\n                 }\n \n                 // This is a cgu-private copy\n-                new_codegen_unit.items.insert(trans_item,\n-                                              (llvm::InternalLinkage, llvm::Visibility::Default));\n+                new_codegen_unit.items_mut().insert(\n+                    trans_item,\n+                    (Linkage::Internal, Visibility::Default),\n+                );\n             }\n \n             if !single_codegen_unit {\n@@ -487,15 +474,15 @@ fn place_inlined_translation_items<'tcx>(initial_partitioning: PreInliningPartit\n                         let placement = e.into_mut();\n                         debug_assert!(match *placement {\n                             TransItemPlacement::SingleCgu { ref cgu_name } => {\n-                                *cgu_name != new_codegen_unit.name\n+                                *cgu_name != *new_codegen_unit.name()\n                             }\n                             TransItemPlacement::MultipleCgus => true,\n                         });\n                         *placement = TransItemPlacement::MultipleCgus;\n                     }\n                     Entry::Vacant(e) => {\n                         e.insert(TransItemPlacement::SingleCgu {\n-                            cgu_name: new_codegen_unit.name.clone()\n+                            cgu_name: new_codegen_unit.name().clone()\n                         });\n                     }\n                 }\n@@ -533,8 +520,8 @@ fn internalize_symbols<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // could be accessed from.\n         for cgu in &mut partitioning.codegen_units {\n             for candidate in &partitioning.internalization_candidates {\n-                cgu.items.insert(*candidate, (llvm::InternalLinkage,\n-                                              llvm::Visibility::Default));\n+                cgu.items_mut().insert(*candidate,\n+                                       (Linkage::Internal, Visibility::Default));\n             }\n         }\n \n@@ -558,10 +545,10 @@ fn internalize_symbols<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // accessed from outside its defining codegen unit.\n     for cgu in &mut partitioning.codegen_units {\n         let home_cgu = TransItemPlacement::SingleCgu {\n-            cgu_name: cgu.name.clone()\n+            cgu_name: cgu.name().clone()\n         };\n \n-        for (accessee, linkage_and_visibility) in &mut cgu.items {\n+        for (accessee, linkage_and_visibility) in cgu.items_mut() {\n             if !partitioning.internalization_candidates.contains(accessee) {\n                 // This item is no candidate for internalizing, so skip it.\n                 continue\n@@ -584,7 +571,7 @@ fn internalize_symbols<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             // If we got here, we did not find any accesses from other CGUs,\n             // so it's fine to make this translation item internal.\n-            *linkage_and_visibility = (llvm::InternalLinkage, llvm::Visibility::Default);\n+            *linkage_and_visibility = (Linkage::Internal, Visibility::Default);\n         }\n     }\n }\n@@ -675,9 +662,9 @@ fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if cfg!(debug_assertions) {\n         debug!(\"{}\", label);\n         for cgu in cgus {\n-            debug!(\"CodegenUnit {}:\", cgu.name);\n+            debug!(\"CodegenUnit {}:\", cgu.name());\n \n-            for (trans_item, linkage) in &cgu.items {\n+            for (trans_item, linkage) in cgu.items() {\n                 let symbol_name = trans_item.symbol_name(tcx);\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map(|i| &symbol_name[i ..])"}, {"sha": "526b61303e1533fd5736a8ea93d0de9c4fab1529", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 108, "deletions": 107, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132bde7cf1ee102b6eb370561bf9af9cfbfb4224/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "patch": "@@ -25,23 +25,19 @@ use llvm;\n use monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n+use rustc::middle::trans::{Linkage, Visibility};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::subst::{Subst, Substs};\n-use syntax::ast::{self, NodeId};\n+use syntax::ast;\n use syntax::attr;\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n use type_of;\n-use std::fmt::Write;\n+use std::fmt::{self, Write};\n use std::iter;\n \n-#[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n-pub enum TransItem<'tcx> {\n-    Fn(Instance<'tcx>),\n-    Static(NodeId),\n-    GlobalAsm(NodeId),\n-}\n+pub use rustc::middle::trans::TransItem;\n \n /// Describes how a translation item will be instantiated in object files.\n #[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n@@ -55,15 +51,16 @@ pub enum InstantiationMode {\n     LocalCopy,\n }\n \n-impl<'a, 'tcx> TransItem<'tcx> {\n+pub trait TransItemExt<'a, 'tcx>: fmt::Debug {\n+    fn as_trans_item(&self) -> &TransItem<'tcx>;\n \n-    pub fn define(&self, ccx: &CrateContext<'a, 'tcx>) {\n+    fn define(&self, ccx: &CrateContext<'a, 'tcx>) {\n         debug!(\"BEGIN IMPLEMENTING '{} ({})' in cgu {}\",\n-                  self.to_string(ccx.tcx()),\n-                  self.to_raw_string(),\n-                  ccx.codegen_unit().name());\n+               self.to_string(ccx.tcx()),\n+               self.to_raw_string(),\n+               ccx.codegen_unit().name());\n \n-        match *self {\n+        match *self.as_trans_item() {\n             TransItem::Static(node_id) => {\n                 let tcx = ccx.tcx();\n                 let item = tcx.hir.expect_item(node_id);\n@@ -97,10 +94,10 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                ccx.codegen_unit().name());\n     }\n \n-    pub fn predefine(&self,\n-                     ccx: &CrateContext<'a, 'tcx>,\n-                     linkage: llvm::Linkage,\n-                     visibility: llvm::Visibility) {\n+    fn predefine(&self,\n+                 ccx: &CrateContext<'a, 'tcx>,\n+                 linkage: Linkage,\n+                 visibility: Visibility) {\n         debug!(\"BEGIN PREDEFINING '{} ({})' in cgu {}\",\n                self.to_string(ccx.tcx()),\n                self.to_raw_string(),\n@@ -110,12 +107,12 @@ impl<'a, 'tcx> TransItem<'tcx> {\n \n         debug!(\"symbol {}\", &symbol_name);\n \n-        match *self {\n+        match *self.as_trans_item() {\n             TransItem::Static(node_id) => {\n-                TransItem::predefine_static(ccx, node_id, linkage, visibility, &symbol_name);\n+                predefine_static(ccx, node_id, linkage, visibility, &symbol_name);\n             }\n             TransItem::Fn(instance) => {\n-                TransItem::predefine_fn(ccx, instance, linkage, visibility, &symbol_name);\n+                predefine_fn(ccx, instance, linkage, visibility, &symbol_name);\n             }\n             TransItem::GlobalAsm(..) => {}\n         }\n@@ -126,75 +123,8 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                ccx.codegen_unit().name());\n     }\n \n-    fn predefine_static(ccx: &CrateContext<'a, 'tcx>,\n-                        node_id: ast::NodeId,\n-                        linkage: llvm::Linkage,\n-                        visibility: llvm::Visibility,\n-                        symbol_name: &str) {\n-        let def_id = ccx.tcx().hir.local_def_id(node_id);\n-        let instance = Instance::mono(ccx.tcx(), def_id);\n-        let ty = common::instance_ty(ccx.tcx(), &instance);\n-        let llty = type_of::type_of(ccx, ty);\n-\n-        let g = declare::define_global(ccx, symbol_name, llty).unwrap_or_else(|| {\n-            ccx.sess().span_fatal(ccx.tcx().hir.span(node_id),\n-                &format!(\"symbol `{}` is already defined\", symbol_name))\n-        });\n-\n-        unsafe {\n-            llvm::LLVMRustSetLinkage(g, linkage);\n-            llvm::LLVMRustSetVisibility(g, visibility);\n-        }\n-\n-        ccx.instances().borrow_mut().insert(instance, g);\n-        ccx.statics().borrow_mut().insert(g, def_id);\n-    }\n-\n-    fn predefine_fn(ccx: &CrateContext<'a, 'tcx>,\n-                    instance: Instance<'tcx>,\n-                    linkage: llvm::Linkage,\n-                    visibility: llvm::Visibility,\n-                    symbol_name: &str) {\n-        assert!(!instance.substs.needs_infer() &&\n-                !instance.substs.has_param_types());\n-\n-        let mono_ty = common::instance_ty(ccx.tcx(), &instance);\n-        let attrs = instance.def.attrs(ccx.tcx());\n-        let lldecl = declare::declare_fn(ccx, symbol_name, mono_ty);\n-        unsafe { llvm::LLVMRustSetLinkage(lldecl, linkage) };\n-        base::set_link_section(ccx, lldecl, &attrs);\n-        if linkage == llvm::Linkage::LinkOnceODRLinkage ||\n-            linkage == llvm::Linkage::WeakODRLinkage {\n-            llvm::SetUniqueComdat(ccx.llmod(), lldecl);\n-        }\n-\n-        // If we're compiling the compiler-builtins crate, e.g. the equivalent of\n-        // compiler-rt, then we want to implicitly compile everything with hidden\n-        // visibility as we're going to link this object all over the place but\n-        // don't want the symbols to get exported.\n-        if linkage != llvm::Linkage::InternalLinkage &&\n-           linkage != llvm::Linkage::PrivateLinkage &&\n-           attr::contains_name(ccx.tcx().hir.krate_attrs(), \"compiler_builtins\") {\n-            unsafe {\n-                llvm::LLVMRustSetVisibility(lldecl, llvm::Visibility::Hidden);\n-            }\n-        } else {\n-            unsafe {\n-                llvm::LLVMRustSetVisibility(lldecl, visibility);\n-            }\n-        }\n-\n-        debug!(\"predefine_fn: mono_ty = {:?} instance = {:?}\", mono_ty, instance);\n-        if common::is_inline_instance(ccx.tcx(), &instance) {\n-            attributes::inline(lldecl, attributes::InlineAttr::Hint);\n-        }\n-        attributes::from_fn_attrs(ccx, &attrs, lldecl);\n-\n-        ccx.instances().borrow_mut().insert(instance, lldecl);\n-    }\n-\n-    pub fn symbol_name(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::SymbolName {\n-        match *self {\n+    fn symbol_name(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::SymbolName {\n+        match *self.as_trans_item() {\n             TransItem::Fn(instance) => tcx.symbol_name(instance),\n             TransItem::Static(node_id) => {\n                 let def_id = tcx.hir.local_def_id(node_id);\n@@ -209,8 +139,8 @@ impl<'a, 'tcx> TransItem<'tcx> {\n         }\n     }\n \n-    pub fn local_span(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<Span> {\n-        match *self {\n+    fn local_span(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<Span> {\n+        match *self.as_trans_item() {\n             TransItem::Fn(Instance { def, .. }) => {\n                 tcx.hir.as_local_node_id(def.def_id())\n             }\n@@ -221,10 +151,10 @@ impl<'a, 'tcx> TransItem<'tcx> {\n         }.map(|node_id| tcx.hir.span(node_id))\n     }\n \n-    pub fn instantiation_mode(&self,\n-                              tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                              -> InstantiationMode {\n-        match *self {\n+    fn instantiation_mode(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+                          -> InstantiationMode {\n+        match *self.as_trans_item() {\n             TransItem::Fn(ref instance) => {\n                 if self.explicit_linkage(tcx).is_none() &&\n                     common::requests_inline(tcx, instance)\n@@ -239,8 +169,8 @@ impl<'a, 'tcx> TransItem<'tcx> {\n         }\n     }\n \n-    pub fn is_generic_fn(&self) -> bool {\n-        match *self {\n+    fn is_generic_fn(&self) -> bool {\n+        match *self.as_trans_item() {\n             TransItem::Fn(ref instance) => {\n                 instance.substs.types().next().is_some()\n             }\n@@ -249,16 +179,16 @@ impl<'a, 'tcx> TransItem<'tcx> {\n         }\n     }\n \n-    pub fn explicit_linkage(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<llvm::Linkage> {\n-        let def_id = match *self {\n+    fn explicit_linkage(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<Linkage> {\n+        let def_id = match *self.as_trans_item() {\n             TransItem::Fn(ref instance) => instance.def_id(),\n             TransItem::Static(node_id) => tcx.hir.local_def_id(node_id),\n             TransItem::GlobalAsm(..) => return None,\n         };\n \n         let attributes = tcx.get_attrs(def_id);\n         if let Some(name) = attr::first_attr_value_str_by_name(&attributes, \"linkage\") {\n-            if let Some(linkage) = base::llvm_linkage_by_name(&name.as_str()) {\n+            if let Some(linkage) = base::linkage_by_name(&name.as_str()) {\n                 Some(linkage)\n             } else {\n                 let span = tcx.hir.span_if_local(def_id);\n@@ -298,9 +228,9 @@ impl<'a, 'tcx> TransItem<'tcx> {\n     /// Similarly, if a vtable method has such a signature, and therefore can't\n     /// be used, we can just not emit it and have a placeholder (a null pointer,\n     /// which will never be accessed) in its place.\n-    pub fn is_instantiable(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool {\n+    fn is_instantiable(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool {\n         debug!(\"is_instantiable({:?})\", self);\n-        let (def_id, substs) = match *self {\n+        let (def_id, substs) = match *self.as_trans_item() {\n             TransItem::Fn(ref instance) => (instance.def_id(), instance.substs),\n             TransItem::Static(node_id) => (tcx.hir.local_def_id(node_id), Substs::empty()),\n             // global asm never has predicates\n@@ -311,10 +241,10 @@ impl<'a, 'tcx> TransItem<'tcx> {\n         traits::normalize_and_test_predicates(tcx, predicates)\n     }\n \n-    pub fn to_string(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> String {\n+    fn to_string(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> String {\n         let hir_map = &tcx.hir;\n \n-        return match *self {\n+        return match *self.as_trans_item() {\n             TransItem::Fn(instance) => {\n                 to_string_internal(tcx, \"fn \", instance)\n             },\n@@ -340,8 +270,8 @@ impl<'a, 'tcx> TransItem<'tcx> {\n         }\n     }\n \n-    pub fn to_raw_string(&self) -> String {\n-        match *self {\n+    fn to_raw_string(&self) -> String {\n+        match *self.as_trans_item() {\n             TransItem::Fn(instance) => {\n                 format!(\"Fn({:?}, {})\",\n                          instance.def,\n@@ -357,6 +287,77 @@ impl<'a, 'tcx> TransItem<'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> TransItemExt<'a, 'tcx> for TransItem<'tcx> {\n+    fn as_trans_item(&self) -> &TransItem<'tcx> {\n+        self\n+    }\n+}\n+\n+fn predefine_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+                              node_id: ast::NodeId,\n+                              linkage: Linkage,\n+                              visibility: Visibility,\n+                              symbol_name: &str) {\n+    let def_id = ccx.tcx().hir.local_def_id(node_id);\n+    let instance = Instance::mono(ccx.tcx(), def_id);\n+    let ty = common::instance_ty(ccx.tcx(), &instance);\n+    let llty = type_of::type_of(ccx, ty);\n+\n+    let g = declare::define_global(ccx, symbol_name, llty).unwrap_or_else(|| {\n+        ccx.sess().span_fatal(ccx.tcx().hir.span(node_id),\n+            &format!(\"symbol `{}` is already defined\", symbol_name))\n+    });\n+\n+    unsafe {\n+        llvm::LLVMRustSetLinkage(g, base::linkage_to_llvm(linkage));\n+        llvm::LLVMRustSetVisibility(g, base::visibility_to_llvm(visibility));\n+    }\n+\n+    ccx.instances().borrow_mut().insert(instance, g);\n+    ccx.statics().borrow_mut().insert(g, def_id);\n+}\n+\n+fn predefine_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+                          instance: Instance<'tcx>,\n+                          linkage: Linkage,\n+                          visibility: Visibility,\n+                          symbol_name: &str) {\n+    assert!(!instance.substs.needs_infer() &&\n+            !instance.substs.has_param_types());\n+\n+    let mono_ty = common::instance_ty(ccx.tcx(), &instance);\n+    let attrs = instance.def.attrs(ccx.tcx());\n+    let lldecl = declare::declare_fn(ccx, symbol_name, mono_ty);\n+    unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n+    base::set_link_section(ccx, lldecl, &attrs);\n+    if linkage == Linkage::LinkOnceODR ||\n+        linkage == Linkage::WeakODR {\n+        llvm::SetUniqueComdat(ccx.llmod(), lldecl);\n+    }\n+\n+    // If we're compiling the compiler-builtins crate, e.g. the equivalent of\n+    // compiler-rt, then we want to implicitly compile everything with hidden\n+    // visibility as we're going to link this object all over the place but\n+    // don't want the symbols to get exported.\n+    if linkage != Linkage::Internal && linkage != Linkage::Private &&\n+       attr::contains_name(ccx.tcx().hir.krate_attrs(), \"compiler_builtins\") {\n+        unsafe {\n+            llvm::LLVMRustSetVisibility(lldecl, llvm::Visibility::Hidden);\n+        }\n+    } else {\n+        unsafe {\n+            llvm::LLVMRustSetVisibility(lldecl, base::visibility_to_llvm(visibility));\n+        }\n+    }\n+\n+    debug!(\"predefine_fn: mono_ty = {:?} instance = {:?}\", mono_ty, instance);\n+    if common::is_inline_instance(ccx.tcx(), &instance) {\n+        attributes::inline(lldecl, attributes::InlineAttr::Hint);\n+    }\n+    attributes::from_fn_attrs(ccx, &attrs, lldecl);\n+\n+    ccx.instances().borrow_mut().insert(instance, lldecl);\n+}\n \n //=-----------------------------------------------------------------------------\n // TransItem String Keys"}]}