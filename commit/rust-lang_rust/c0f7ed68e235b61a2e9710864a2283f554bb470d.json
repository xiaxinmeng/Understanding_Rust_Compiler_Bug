{"sha": "c0f7ed68e235b61a2e9710864a2283f554bb470d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZjdlZDY4ZTIzNWI2MWEyZTk3MTA4NjRhMjI4M2Y1NTRiYjQ3MGQ=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-07T00:50:45Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-07T01:27:37Z"}, "message": "Fix log_syntax of unexpanded code.", "tree": {"sha": "d00baa3f90ce0e4b24f747783bf0fe6e20cd842e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00baa3f90ce0e4b24f747783bf0fe6e20cd842e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0f7ed68e235b61a2e9710864a2283f554bb470d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f7ed68e235b61a2e9710864a2283f554bb470d", "html_url": "https://github.com/rust-lang/rust/commit/c0f7ed68e235b61a2e9710864a2283f554bb470d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0f7ed68e235b61a2e9710864a2283f554bb470d/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4cedd9598ec44d4f475adc3a9e62edcd08bc741", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cedd9598ec44d4f475adc3a9e62edcd08bc741", "html_url": "https://github.com/rust-lang/rust/commit/a4cedd9598ec44d4f475adc3a9e62edcd08bc741"}], "stats": {"total": 62, "additions": 44, "deletions": 18}, "files": [{"sha": "79ef81f78c11d2b6ed4d9307128d7c68033eb638", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0f7ed68e235b61a2e9710864a2283f554bb470d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f7ed68e235b61a2e9710864a2283f554bb470d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=c0f7ed68e235b61a2e9710864a2283f554bb470d", "patch": "@@ -68,6 +68,9 @@ enum syntax_extension {\n fn syntax_expander_table() -> hashmap<~str, syntax_extension> {\n     fn builtin(f: syntax_expander_) -> syntax_extension\n         {normal({expander: f, span: none})}\n+    fn builtin_expr_tt(f: syntax_expander_tt_) -> syntax_extension {\n+        expr_tt({expander: f, span: none})\n+    }\n     fn builtin_item_tt(f: syntax_expander_tt_item_) -> syntax_extension {\n         item_tt({expander: f, span: none})\n     }\n@@ -86,7 +89,8 @@ fn syntax_expander_table() -> hashmap<~str, syntax_extension> {\n     syntax_expanders.insert(~\"ident_to_str\",\n                             builtin(ext::ident_to_str::expand_syntax_ext));\n     syntax_expanders.insert(~\"log_syntax\",\n-                            builtin(ext::log_syntax::expand_syntax_ext));\n+                            builtin_expr_tt(\n+                                ext::log_syntax::expand_syntax_ext));\n     syntax_expanders.insert(~\"ast\",\n                             builtin(ext::qquote::expand_ast));\n     syntax_expanders.insert(~\"line\","}, {"sha": "3be74cba2e48017380285011ed6ebfeee5120d91", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0f7ed68e235b61a2e9710864a2283f554bb470d/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f7ed68e235b61a2e9710864a2283f554bb470d/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=c0f7ed68e235b61a2e9710864a2283f554bb470d", "patch": "@@ -1,16 +1,15 @@\n import base::*;\n import io::writer_util;\n \n-fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n-                     _body: ast::mac_body) -> @ast::expr {\n-    let args = get_mac_args_no_max(cx,sp,arg,0u,~\"log_syntax\");\n+fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, tt: ~[ast::token_tree])\n+    -> base::mac_result {\n+\n     cx.print_backtrace();\n     io::stdout().write_line(\n-        str::connect(vec::map(args,\n-                              |&&ex| print::pprust::expr_to_str(ex)), ~\", \")\n-    );\n+        print::pprust::unexpanded_tt_to_str(ast::tt_delim(tt),\n+                                            cx.parse_sess().interner));\n \n     //trivial expression\n-    return @{id: cx.next_id(), callee_id: cx.next_id(),\n-          node: ast::expr_rec(~[], option::none), span: sp};\n+    return mr_expr(@{id: cx.next_id(), callee_id: cx.next_id(),\n+                     node: ast::expr_rec(~[], option::none), span: sp});\n }"}, {"sha": "9d7731e8441bd085020637086791a88d53e265fc", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c0f7ed68e235b61a2e9710864a2283f554bb470d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f7ed68e235b61a2e9710864a2283f554bb470d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c0f7ed68e235b61a2e9710864a2283f554bb470d", "patch": "@@ -11,6 +11,8 @@ import dvec::{dvec, extensions};\n import parse::classify::*;\n import util::interner;\n \n+type ident_interner = @interner::interner<@~str>;\n+\n // The ps is stored here to prevent recursive type.\n enum ann_node {\n     node_block(ps, ast::blk),\n@@ -48,15 +50,27 @@ fn end(s: ps) {\n \n fn rust_printer(writer: io::writer) -> ps {\n     return @{s: pp::mk_printer(writer, default_columns),\n-          cm: none::<codemap>,\n-          intr: @interner::mk::<@~str>(|x| str::hash(*x),\n-                                       |x,y| str::eq(*x, *y)),\n-          comments: none::<~[comments::cmnt]>,\n-          literals: none::<~[comments::lit]>,\n-          mut cur_cmnt: 0u,\n-          mut cur_lit: 0u,\n-          boxes: dvec(),\n-          ann: no_ann()};\n+             cm: none::<codemap>,\n+             intr: @interner::mk::<@~str>(|x| str::hash(*x),\n+                                          |x,y| str::eq(*x, *y)),\n+             comments: none::<~[comments::cmnt]>,\n+             literals: none::<~[comments::lit]>,\n+             mut cur_cmnt: 0u,\n+             mut cur_lit: 0u,\n+             boxes: dvec(),\n+             ann: no_ann()};\n+}\n+\n+fn unexpanded_rust_printer(writer: io::writer, intr: ident_interner) -> ps {\n+    return @{s: pp::mk_printer(writer, default_columns),\n+             cm: none::<codemap>,\n+             intr: intr,\n+             comments: none::<~[comments::cmnt]>,\n+             literals: none::<~[comments::lit]>,\n+             mut cur_cmnt: 0u,\n+             mut cur_lit: 0u,\n+             boxes: dvec(),\n+             ann: no_ann()};\n }\n \n const indent_unit: uint = 4u;\n@@ -101,6 +115,15 @@ fn pat_to_str(pat: @ast::pat) -> ~str { return to_str(pat, print_pat); }\n \n fn expr_to_str(e: @ast::expr) -> ~str { return to_str(e, print_expr); }\n \n+fn unexpanded_tt_to_str(tt: ast::token_tree, intr: ident_interner)\n+    -> ~str {\n+    let buffer = io::mem_buffer();\n+    let s = unexpanded_rust_printer(io::mem_buffer_writer(buffer), intr);\n+    print_tt(s, tt);\n+    eof(s.s);\n+    io::mem_buffer_str(buffer)\n+}\n+\n fn stmt_to_str(s: ast::stmt) -> ~str { return to_str(s, print_stmt); }\n \n fn item_to_str(i: @ast::item) -> ~str { return to_str(i, print_item); }"}]}