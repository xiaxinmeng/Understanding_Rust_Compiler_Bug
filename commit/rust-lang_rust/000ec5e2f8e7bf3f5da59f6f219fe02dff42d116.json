{"sha": "000ec5e2f8e7bf3f5da59f6f219fe02dff42d116", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMGVjNWUyZjhlN2JmM2Y1ZGE1OWY2ZjIxOWZlMDJkZmY0MmQxMTY=", "commit": {"author": {"name": "Ryan Scott", "email": "ryan@ryan-scott.me", "date": "2020-10-14T05:50:00Z"}, "committer": {"name": "Ryan Scott", "email": "rscott@zendesk.com", "date": "2020-10-15T12:21:14Z"}, "message": "Made slice sort documentation consistent between stable and unstable versions", "tree": {"sha": "74cee4b19f98762560e8187f1cf52837699eca3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74cee4b19f98762560e8187f1cf52837699eca3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/000ec5e2f8e7bf3f5da59f6f219fe02dff42d116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/000ec5e2f8e7bf3f5da59f6f219fe02dff42d116", "html_url": "https://github.com/rust-lang/rust/commit/000ec5e2f8e7bf3f5da59f6f219fe02dff42d116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/000ec5e2f8e7bf3f5da59f6f219fe02dff42d116/comments", "author": {"login": "ryan-scott-dev", "id": 1508992, "node_id": "MDQ6VXNlcjE1MDg5OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1508992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryan-scott-dev", "html_url": "https://github.com/ryan-scott-dev", "followers_url": "https://api.github.com/users/ryan-scott-dev/followers", "following_url": "https://api.github.com/users/ryan-scott-dev/following{/other_user}", "gists_url": "https://api.github.com/users/ryan-scott-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryan-scott-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryan-scott-dev/subscriptions", "organizations_url": "https://api.github.com/users/ryan-scott-dev/orgs", "repos_url": "https://api.github.com/users/ryan-scott-dev/repos", "events_url": "https://api.github.com/users/ryan-scott-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/ryan-scott-dev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ryan-scott-dev", "id": 1508992, "node_id": "MDQ6VXNlcjE1MDg5OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1508992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryan-scott-dev", "html_url": "https://github.com/ryan-scott-dev", "followers_url": "https://api.github.com/users/ryan-scott-dev/followers", "following_url": "https://api.github.com/users/ryan-scott-dev/following{/other_user}", "gists_url": "https://api.github.com/users/ryan-scott-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryan-scott-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryan-scott-dev/subscriptions", "organizations_url": "https://api.github.com/users/ryan-scott-dev/orgs", "repos_url": "https://api.github.com/users/ryan-scott-dev/repos", "events_url": "https://api.github.com/users/ryan-scott-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/ryan-scott-dev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fe9b7f3fe5781a0fdf57d89c39048cb960f3040", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040", "html_url": "https://github.com/rust-lang/rust/commit/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "706d563f8fba12303a3cb0de6a8107f68ff9412d", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/000ec5e2f8e7bf3f5da59f6f219fe02dff42d116/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000ec5e2f8e7bf3f5da59f6f219fe02dff42d116/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=000ec5e2f8e7bf3f5da59f6f219fe02dff42d116", "patch": "@@ -169,7 +169,7 @@ mod hack {\n impl<T> [T] {\n     /// Sorts the slice.\n     ///\n-    /// This sort is stable (i.e., does not reorder equal elements) and `O(n * log(n))` worst-case.\n+    /// This sort is stable (i.e., does not reorder equal elements) and *O*(*n* \\* log(*n*)) worst-case.\n     ///\n     /// When applicable, unstable sorting is preferred because it is generally faster than stable\n     /// sorting and it doesn't allocate auxiliary memory.\n@@ -204,7 +204,7 @@ impl<T> [T] {\n \n     /// Sorts the slice with a comparator function.\n     ///\n-    /// This sort is stable (i.e., does not reorder equal elements) and `O(n * log(n))` worst-case.\n+    /// This sort is stable (i.e., does not reorder equal elements) and *O*(*n* \\* log(*n*)) worst-case.\n     ///\n     /// The comparator function must define a total ordering for the elements in the slice. If\n     /// the ordering is not total, the order of the elements is unspecified. An order is a\n@@ -258,8 +258,8 @@ impl<T> [T] {\n \n     /// Sorts the slice with a key extraction function.\n     ///\n-    /// This sort is stable (i.e., does not reorder equal elements) and `O(m * n * log(n))`\n-    /// worst-case, where the key function is `O(m)`.\n+    /// This sort is stable (i.e., does not reorder equal elements) and *O*(*m* \\* *n* \\* log(*n*))\n+    /// worst-case, where the key function is *O*(*m*).\n     ///\n     /// For expensive key functions (e.g. functions that are not simple property accesses or\n     /// basic operations), [`sort_by_cached_key`](#method.sort_by_cached_key) is likely to be\n@@ -301,8 +301,8 @@ impl<T> [T] {\n     ///\n     /// During sorting, the key function is called only once per element.\n     ///\n-    /// This sort is stable (i.e., does not reorder equal elements) and `O(m * n + n * log(n))`\n-    /// worst-case, where the key function is `O(m)`.\n+    /// This sort is stable (i.e., does not reorder equal elements) and *O*(*m* \\* *n* + *n* \\* log(*n*))\n+    /// worst-case, where the key function is *O*(*m*).\n     ///\n     /// For simple key functions (e.g., functions that are property accesses or\n     /// basic operations), [`sort_by_key`](#method.sort_by_key) is likely to be\n@@ -946,7 +946,7 @@ where\n /// 1. for every `i` in `1..runs.len()`: `runs[i - 1].len > runs[i].len`\n /// 2. for every `i` in `2..runs.len()`: `runs[i - 2].len > runs[i - 1].len + runs[i].len`\n ///\n-/// The invariants ensure that the total running time is `O(n * log(n))` worst-case.\n+/// The invariants ensure that the total running time is *O*(*n* \\* log(*n*)) worst-case.\n fn merge_sort<T, F>(v: &mut [T], mut is_less: F)\n where\n     F: FnMut(&T, &T) -> bool,"}, {"sha": "3b428eba131487523df42c6c7ee9eda8b893e327", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/000ec5e2f8e7bf3f5da59f6f219fe02dff42d116/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000ec5e2f8e7bf3f5da59f6f219fe02dff42d116/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=000ec5e2f8e7bf3f5da59f6f219fe02dff42d116", "patch": "@@ -1948,10 +1948,10 @@ impl<T> [T] {\n     ///\n     /// The comparator function must define a total ordering for the elements in the slice. If\n     /// the ordering is not total, the order of the elements is unspecified. An order is a\n-    /// total order if it is (for all a, b and c):\n+    /// total order if it is (for all `a`, `b` and `c`):\n     ///\n-    /// * total and antisymmetric: exactly one of a < b, a == b or a > b is true; and\n-    /// * transitive, a < b and b < c implies a < c. The same must hold for both == and >.\n+    /// * total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true, and\n+    /// * transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n     ///\n     /// For example, while [`f64`] doesn't implement [`Ord`] because `NaN != NaN`, we can use\n     /// `partial_cmp` as our sort function when we know the slice doesn't contain a `NaN`."}]}