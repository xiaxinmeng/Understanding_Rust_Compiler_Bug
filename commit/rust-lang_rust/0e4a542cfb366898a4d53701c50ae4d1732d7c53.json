{"sha": "0e4a542cfb366898a4d53701c50ae4d1732d7c53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNGE1NDJjZmIzNjY4OThhNGQ1MzcwMWM1MGFlNGQxNzMyZDdjNTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-06T08:50:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-06T08:50:32Z"}, "message": "rename", "tree": {"sha": "2daa81772f85bb73c888fa533c377942cac4aa05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2daa81772f85bb73c888fa533c377942cac4aa05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e4a542cfb366898a4d53701c50ae4d1732d7c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4a542cfb366898a4d53701c50ae4d1732d7c53", "html_url": "https://github.com/rust-lang/rust/commit/0e4a542cfb366898a4d53701c50ae4d1732d7c53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e4a542cfb366898a4d53701c50ae4d1732d7c53/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e01c6b4e1bdd52744c278d423e32dbaf82cd6c56", "url": "https://api.github.com/repos/rust-lang/rust/commits/e01c6b4e1bdd52744c278d423e32dbaf82cd6c56", "html_url": "https://github.com/rust-lang/rust/commit/e01c6b4e1bdd52744c278d423e32dbaf82cd6c56"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "c01574fbc8ee261571af36ffe73288bcfcac3e49", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e4a542cfb366898a4d53701c50ae4d1732d7c53/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4a542cfb366898a4d53701c50ae4d1732d7c53/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=0e4a542cfb366898a4d53701c50ae4d1732d7c53", "patch": "@@ -6,7 +6,7 @@ use rustc_hash::FxHashMap;\n \n use ra_db::{CrateGraph, FileId, SourceRootId};\n use ra_ide_api::{AnalysisChange, AnalysisHost};\n-use ra_project_model::{ProjectRoot, ProjectWorkspace};\n+use ra_project_model::{PackageRoot, ProjectWorkspace};\n use ra_vfs::{Vfs, VfsChange};\n use vfs_filter::IncludeRustFiles;\n \n@@ -19,7 +19,7 @@ fn vfs_root_to_id(r: ra_vfs::VfsRoot) -> SourceRootId {\n     SourceRootId(r.0)\n }\n \n-pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId, ProjectRoot>)> {\n+pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId, PackageRoot>)> {\n     let root = std::env::current_dir()?.join(root);\n     let ws = ProjectWorkspace::discover(root.as_ref())?;\n     let project_roots = ws.to_roots();\n@@ -48,7 +48,7 @@ pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId,\n }\n \n pub fn load(\n-    source_roots: &FxHashMap<SourceRootId, ProjectRoot>,\n+    source_roots: &FxHashMap<SourceRootId, PackageRoot>,\n     crate_graph: CrateGraph,\n     vfs: &mut Vfs,\n ) -> AnalysisHost {"}, {"sha": "63bf77704ad9aa689862d748185c09c5bed3afa8", "filename": "crates/ra_batch/src/vfs_filter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e4a542cfb366898a4d53701c50ae4d1732d7c53/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4a542cfb366898a4d53701c50ae4d1732d7c53/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs?ref=0e4a542cfb366898a4d53701c50ae4d1732d7c53", "patch": "@@ -1,32 +1,32 @@\n-use ra_project_model::ProjectRoot;\n+use ra_project_model::PackageRoot;\n use ra_vfs::{Filter, RelativePath, RootEntry};\n use std::path::PathBuf;\n \n /// `IncludeRustFiles` is used to convert\n-/// from `ProjectRoot` to `RootEntry` for VFS\n+/// from `PackageRoot` to `RootEntry` for VFS\n pub struct IncludeRustFiles {\n-    root: ProjectRoot,\n+    root: PackageRoot,\n }\n \n impl IncludeRustFiles {\n     pub fn from_roots<R>(roots: R) -> impl Iterator<Item = RootEntry>\n     where\n-        R: IntoIterator<Item = ProjectRoot>,\n+        R: IntoIterator<Item = PackageRoot>,\n     {\n         roots.into_iter().map(IncludeRustFiles::from_root)\n     }\n \n-    pub fn from_root(root: ProjectRoot) -> RootEntry {\n+    pub fn from_root(root: PackageRoot) -> RootEntry {\n         IncludeRustFiles::from(root).into()\n     }\n \n     #[allow(unused)]\n     pub fn external(path: PathBuf) -> RootEntry {\n-        IncludeRustFiles::from_root(ProjectRoot::new(path, false))\n+        IncludeRustFiles::from_root(PackageRoot::new(path, false))\n     }\n \n     pub fn member(path: PathBuf) -> RootEntry {\n-        IncludeRustFiles::from_root(ProjectRoot::new(path, true))\n+        IncludeRustFiles::from_root(PackageRoot::new(path, true))\n     }\n }\n \n@@ -40,8 +40,8 @@ impl Filter for IncludeRustFiles {\n     }\n }\n \n-impl From<ProjectRoot> for IncludeRustFiles {\n-    fn from(v: ProjectRoot) -> IncludeRustFiles {\n+impl From<PackageRoot> for IncludeRustFiles {\n+    fn from(v: PackageRoot) -> IncludeRustFiles {\n         IncludeRustFiles { root: v }\n     }\n }"}, {"sha": "abdc8dbad2405200ce4af4a8c4c8027e9b44d9d8", "filename": "crates/ra_lsp_server/src/vfs_filter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e4a542cfb366898a4d53701c50ae4d1732d7c53/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4a542cfb366898a4d53701c50ae4d1732d7c53/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs?ref=0e4a542cfb366898a4d53701c50ae4d1732d7c53", "patch": "@@ -1,32 +1,32 @@\n-use ra_project_model::ProjectRoot;\r\n+use ra_project_model::PackageRoot;\r\n use ra_vfs::{Filter, RelativePath, RootEntry};\r\n use std::path::PathBuf;\r\n \r\n /// `IncludeRustFiles` is used to convert\r\n-/// from `ProjectRoot` to `RootEntry` for VFS\r\n+/// from `PackageRoot` to `RootEntry` for VFS\r\n pub struct IncludeRustFiles {\r\n-    root: ProjectRoot,\r\n+    root: PackageRoot,\r\n }\r\n \r\n impl IncludeRustFiles {\r\n     pub fn from_roots<R>(roots: R) -> impl Iterator<Item = RootEntry>\r\n     where\r\n-        R: IntoIterator<Item = ProjectRoot>,\r\n+        R: IntoIterator<Item = PackageRoot>,\r\n     {\r\n         roots.into_iter().map(IncludeRustFiles::from_root)\r\n     }\r\n \r\n-    pub fn from_root(root: ProjectRoot) -> RootEntry {\r\n+    pub fn from_root(root: PackageRoot) -> RootEntry {\r\n         IncludeRustFiles::from(root).into()\r\n     }\r\n \r\n     #[allow(unused)]\r\n     pub fn external(path: PathBuf) -> RootEntry {\r\n-        IncludeRustFiles::from_root(ProjectRoot::new(path, false))\r\n+        IncludeRustFiles::from_root(PackageRoot::new(path, false))\r\n     }\r\n \r\n     pub fn member(path: PathBuf) -> RootEntry {\r\n-        IncludeRustFiles::from_root(ProjectRoot::new(path, true))\r\n+        IncludeRustFiles::from_root(PackageRoot::new(path, true))\r\n     }\r\n }\r\n \r\n@@ -40,8 +40,8 @@ impl Filter for IncludeRustFiles {\n     }\r\n }\r\n \r\n-impl std::convert::From<ProjectRoot> for IncludeRustFiles {\r\n-    fn from(v: ProjectRoot) -> IncludeRustFiles {\r\n+impl std::convert::From<PackageRoot> for IncludeRustFiles {\r\n+    fn from(v: PackageRoot) -> IncludeRustFiles {\r\n         IncludeRustFiles { root: v }\r\n     }\r\n }\r"}, {"sha": "647a1f36585b2bd07cab3daf02476b946e925f97", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e4a542cfb366898a4d53701c50ae4d1732d7c53/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4a542cfb366898a4d53701c50ae4d1732d7c53/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=0e4a542cfb366898a4d53701c50ae4d1732d7c53", "patch": "@@ -34,20 +34,20 @@ pub enum ProjectWorkspace {\n     Json { project: JsonProject },\n }\n \n-/// `ProjectRoot` describes a workspace root folder.\n+/// `PackageRoot` describes a package root folder.\n /// Which may be an external dependency, or a member of\n /// the current workspace.\n #[derive(Clone)]\n-pub struct ProjectRoot {\n+pub struct PackageRoot {\n     /// Path to the root folder\n     path: PathBuf,\n     /// Is a member of the current workspace\n     is_member: bool,\n }\n \n-impl ProjectRoot {\n-    pub fn new(path: PathBuf, is_member: bool) -> ProjectRoot {\n-        ProjectRoot { path, is_member }\n+impl PackageRoot {\n+    pub fn new(path: PathBuf, is_member: bool) -> PackageRoot {\n+        PackageRoot { path, is_member }\n     }\n \n     pub fn path(&self) -> &PathBuf {\n@@ -99,15 +99,15 @@ impl ProjectWorkspace {\n         }\n     }\n \n-    /// Returns the roots for the current ProjectWorkspace\n+    /// Returns the roots for the current `ProjectWorkspace`\n     /// The return type contains the path and whether or not\n     /// the root is a member of the current workspace\n-    pub fn to_roots(&self) -> Vec<ProjectRoot> {\n+    pub fn to_roots(&self) -> Vec<PackageRoot> {\n         match self {\n             ProjectWorkspace::Json { project } => {\n                 let mut roots = Vec::with_capacity(project.roots.len());\n                 for root in &project.roots {\n-                    roots.push(ProjectRoot::new(root.path.clone(), true));\n+                    roots.push(PackageRoot::new(root.path.clone(), true));\n                 }\n                 roots\n             }\n@@ -117,10 +117,10 @@ impl ProjectWorkspace {\n                 for pkg in cargo.packages() {\n                     let root = pkg.root(&cargo).to_path_buf();\n                     let member = pkg.is_member(&cargo);\n-                    roots.push(ProjectRoot::new(root, member));\n+                    roots.push(PackageRoot::new(root, member));\n                 }\n                 for krate in sysroot.crates() {\n-                    roots.push(ProjectRoot::new(krate.root_dir(&sysroot).to_path_buf(), false))\n+                    roots.push(PackageRoot::new(krate.root_dir(&sysroot).to_path_buf(), false))\n                 }\n                 roots\n             }"}]}