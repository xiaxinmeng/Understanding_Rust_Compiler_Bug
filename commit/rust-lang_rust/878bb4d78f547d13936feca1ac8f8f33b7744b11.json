{"sha": "878bb4d78f547d13936feca1ac8f8f33b7744b11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OGJiNGQ3OGY1NDdkMTM5MzZmZWNhMWFjOGY4ZjMzYjc3NDRiMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-04T09:44:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-04T09:44:29Z"}, "message": "Auto merge of #1100 - RalfJung:os_str, r=RalfJung\n\nrename helper methods a bit", "tree": {"sha": "580e0db809578556556702239755456e45127555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/580e0db809578556556702239755456e45127555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/878bb4d78f547d13936feca1ac8f8f33b7744b11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/878bb4d78f547d13936feca1ac8f8f33b7744b11", "html_url": "https://github.com/rust-lang/rust/commit/878bb4d78f547d13936feca1ac8f8f33b7744b11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/878bb4d78f547d13936feca1ac8f8f33b7744b11/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53fcf47e721ef2fa7b204f846c3fa71b72e69fc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/53fcf47e721ef2fa7b204f846c3fa71b72e69fc8", "html_url": "https://github.com/rust-lang/rust/commit/53fcf47e721ef2fa7b204f846c3fa71b72e69fc8"}, {"sha": "94732aaf7bf79fd01a4a48d11155c6586b937514", "url": "https://api.github.com/repos/rust-lang/rust/commits/94732aaf7bf79fd01a4a48d11155c6586b937514", "html_url": "https://github.com/rust-lang/rust/commit/94732aaf7bf79fd01a4a48d11155c6586b937514"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "897d395674947eb083bc37bd75d392eb456c2900", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/878bb4d78f547d13936feca1ac8f8f33b7744b11/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/878bb4d78f547d13936feca1ac8f8f33b7744b11/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=878bb4d78f547d13936feca1ac8f8f33b7744b11", "patch": "@@ -84,7 +84,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             let size = arg.len() as u64 + 1;\n             let arg_type = tcx.mk_array(tcx.types.u8, size);\n             let arg_place = ecx.allocate(ecx.layout_of(arg_type)?, MiriMemoryKind::Env.into());\n-            ecx.write_os_str_to_c_string(OsStr::new(arg), arg_place.ptr, size)?;\n+            ecx.write_os_str_to_c_str(OsStr::new(arg), arg_place.ptr, size)?;\n             argvs.push(arg_place.ptr);\n         }\n         // Make an array with all these pointers, in the Miri memory."}, {"sha": "05a92164f27d82e7dfbc737ff0de9f0ef5d53009", "filename": "src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/878bb4d78f547d13936feca1ac8f8f33b7744b11/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/878bb4d78f547d13936feca1ac8f8f33b7744b11/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=878bb4d78f547d13936feca1ac8f8f33b7744b11", "patch": "@@ -453,7 +453,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     /// Helper function to read an OsString from a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle.\n-    fn read_os_string_from_c_string<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, &'a OsStr>\n+    fn read_os_str_from_c_str<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, &'a OsStr>\n         where 'tcx: 'a, 'mir: 'a\n     {\n         let this = self.eval_context_ref();\n@@ -465,7 +465,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// the Unix APIs usually handle. This function returns `Ok(false)` without trying to write if\n     /// `size` is not large enough to fit the contents of `os_string` plus a null terminator. It\n     /// returns `Ok(true)` if the writing process was successful.\n-    fn write_os_str_to_c_string(\n+    fn write_os_str_to_c_str(\n         &mut self,\n         os_str: &OsStr,\n         scalar: Scalar<Tag>,"}, {"sha": "8c431fd2016d553aa9683cab0d4af5b3bd0e8e52", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/878bb4d78f547d13936feca1ac8f8f33b7744b11/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/878bb4d78f547d13936feca1ac8f8f33b7744b11/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=878bb4d78f547d13936feca1ac8f8f33b7744b11", "patch": "@@ -128,7 +128,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // If we cannot get the current directory, we return null\n         match env::current_dir() {\n             Ok(cwd) => {\n-                if this.write_os_str_to_c_string(&OsString::from(cwd), buf, size)? {\n+                if this.write_os_str_to_c_str(&OsString::from(cwd), buf, size)? {\n                     return Ok(buf);\n                 }\n                 let erange = this.eval_libc(\"ERANGE\")?;\n@@ -144,7 +144,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"chdir\")?;\n \n-        let path = this.read_os_string_from_c_string(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_os_str_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n \n         match env::set_current_dir(path) {\n             Ok(()) => Ok(0),"}, {"sha": "4d10be6264600abc48a1157e8bcf3fd5fa73394b", "filename": "src/shims/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/878bb4d78f547d13936feca1ac8f8f33b7744b11/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/878bb4d78f547d13936feca1ac8f8f33b7744b11/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=878bb4d78f547d13936feca1ac8f8f33b7744b11", "patch": "@@ -96,7 +96,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_unsup_format!(\"unsupported flags {:#x}\", flag & !mirror);\n         }\n \n-        let path = this.read_os_string_from_c_string(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_os_str_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n \n         let fd = options.open(path).map(|file| {\n             let mut fh = &mut this.machine.file_handler;\n@@ -250,7 +250,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"unlink\")?;\n \n-        let path = this.read_os_string_from_c_string(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_os_str_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n \n         let result = remove_file(path).map(|_| 0);\n "}]}