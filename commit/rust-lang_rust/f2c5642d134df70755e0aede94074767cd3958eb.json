{"sha": "f2c5642d134df70755e0aede94074767cd3958eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYzU2NDJkMTM0ZGY3MDc1NWUwYWVkZTk0MDc0NzY3Y2QzOTU4ZWI=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-19T17:54:54Z"}, "committer": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-23T10:46:28Z"}, "message": "Fix get_tydesc() return type\n\nThis fixes part of #3730, but not all.\nAlso changes the TyDesc struct to be equivalent with the generated\ncode, with the hope that the above issue may one day be closed for good,\ni.e. that the TyDesc type can completely be specified in the Rust\nsources and not be generated.", "tree": {"sha": "8265a64251121599a6a4c64f79321074f1843b6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8265a64251121599a6a4c64f79321074f1843b6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2c5642d134df70755e0aede94074767cd3958eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c5642d134df70755e0aede94074767cd3958eb", "html_url": "https://github.com/rust-lang/rust/commit/f2c5642d134df70755e0aede94074767cd3958eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2c5642d134df70755e0aede94074767cd3958eb/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b126e4d6dda1eac3881b8ca19772071997a7992", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b126e4d6dda1eac3881b8ca19772071997a7992", "html_url": "https://github.com/rust-lang/rust/commit/3b126e4d6dda1eac3881b8ca19772071997a7992"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "f19e370625350ec2a332c871b4e8faab90ef3755", "filename": "src/librustc/front/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=f2c5642d134df70755e0aede94074767cd3958eb", "patch": "@@ -20,14 +20,22 @@ pub mod intrinsic {\n     // version in sys is no longer present.\n     pub fn get_tydesc<T>() -> *TyDesc {\n         unsafe {\n-            rusti::get_tydesc::<T>() as *TyDesc\n+            rusti::get_tydesc::<T>()\n         }\n     }\n \n+    pub type GlueFn = extern \"Rust\" fn(**TyDesc, *i8);\n+\n+    // NB: this has to be kept in sync with the Rust ABI.\n     pub struct TyDesc {\n         size: uint,\n-        align: uint\n-        // Remaining fields not listed\n+        align: uint,\n+        take_glue: GlueFn,\n+        drop_glue: GlueFn,\n+        free_glue: GlueFn,\n+        visit_glue: GlueFn,\n+        shape: *i8,\n+        shape_tables: *i8\n     }\n \n     pub enum Opaque { }\n@@ -133,7 +141,7 @@ pub mod intrinsic {\n \n         #[abi = \"rust-intrinsic\"]\n         pub extern \"rust-intrinsic\" {\n-            pub fn get_tydesc<T>() -> *();\n+            pub fn get_tydesc<T>() -> *TyDesc;\n             pub fn visit_tydesc(td: *TyDesc, tv: @TyVisitor);\n         }\n     }"}, {"sha": "855610510bd908582bcfc7d7f8742ff709c16ef8", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=f2c5642d134df70755e0aede94074767cd3958eb", "patch": "@@ -681,9 +681,12 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n             let static_ti = get_tydesc(ccx, tp_ty);\n             glue::lazily_emit_all_tydesc_glue(ccx, static_ti);\n \n-            // FIXME (#3727): change this to ccx.tydesc_ty.ptr_to() when the\n-            // core::sys copy of the get_tydesc interface dies off.\n-            let td = PointerCast(bcx, static_ti.tydesc, Type::nil().ptr_to());\n+            // FIXME (#3730): ideally this shouldn't need a cast,\n+            // but there's a circularity between translating rust types to llvm\n+            // types and having a tydesc type available. So I can't directly access\n+            // the llvm type of intrinsic::TyDesc struct.\n+            let userland_tydesc_ty = type_of::type_of(ccx, output_type);\n+            let td = PointerCast(bcx, static_ti.tydesc, userland_tydesc_ty);\n             Store(bcx, td, fcx.llretptr.get());\n         }\n         \"init\" => {"}, {"sha": "0930d3550353af46d88ba42bdd1c0c3226dcf782", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=f2c5642d134df70755e0aede94074767cd3958eb", "patch": "@@ -789,7 +789,6 @@ pub fn emit_tydescs(ccx: &mut CrateContext) {\n     };\n }\n \n-fn type_of_glue_fn(ccx: &CrateContext) -> Type {\n-    let tydescpp = ccx.tydesc_type.ptr_to().ptr_to();\n-    Type::func([ Type::nil().ptr_to(), tydescpp, Type::i8p() ], &Type::void())\n+pub fn type_of_glue_fn(ccx: &CrateContext) -> Type {\n+    Type::glue_fn(ccx.tydesc_type)\n }"}, {"sha": "764bdb026f474dd01b384cc9c660657c88ed4852", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=f2c5642d134df70755e0aede94074767cd3958eb", "patch": "@@ -189,18 +189,23 @@ impl Type {\n             None => ()\n         }\n \n+        // Bit of a kludge: pick the fn typeref out of the tydesc..\n         let ty = cx.tydesc_type.get_field(abi::tydesc_field_drop_glue);\n         cx.tn.associate_type(\"glue_fn\", &ty);\n \n         return ty;\n     }\n \n+    pub fn glue_fn(tydesc: Type) -> Type {\n+        let tydescpp = tydesc.ptr_to().ptr_to();\n+        Type::func([ Type::nil().ptr_to(), tydescpp, Type::i8p() ],\n+            &Type::void())\n+    }\n+\n     pub fn tydesc(arch: Architecture) -> Type {\n         let mut tydesc = Type::named_struct(\"tydesc\");\n-        let tydescpp = tydesc.ptr_to().ptr_to();\n         let pvoid = Type::i8p();\n-        let glue_fn_ty = Type::func([ Type::nil().ptr_to(), tydescpp, pvoid ],\n-            &Type::void()).ptr_to();\n+        let glue_fn_ty = Type::glue_fn(tydesc).ptr_to();\n \n         let int_ty = Type::int(arch);\n "}, {"sha": "4c074ce197ed0240818836ea4a74c506394660ed", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f2c5642d134df70755e0aede94074767cd3958eb", "patch": "@@ -3506,8 +3506,14 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n             }\n \n             \"get_tydesc\" => {\n-              // FIXME (#3730): return *intrinsic::tydesc, not *()\n-              (1u, ~[], ty::mk_nil_ptr(ccx.tcx))\n+              let tydesc_name = special_idents::tydesc;\n+              assert!(tcx.intrinsic_defs.contains_key(&tydesc_name));\n+              let (_, tydesc_ty) = tcx.intrinsic_defs.get_copy(&tydesc_name);\n+              let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {\n+                  ty: tydesc_ty,\n+                  mutbl: ast::m_imm\n+              });\n+              (1u, ~[], td_ptr)\n             }\n             \"visit_tydesc\" => {\n               let tydesc_name = special_idents::tydesc;"}, {"sha": "08fc90fa908c98678487b62917be1acffeafd609", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=f2c5642d134df70755e0aede94074767cd3958eb", "patch": "@@ -209,6 +209,9 @@ pub extern \"rust-intrinsic\" {\n     pub fn pref_align_of<T>() -> uint;\n \n     /// Get a static pointer to a type descriptor.\n+    #[cfg(not(stage0))]\n+    pub fn get_tydesc<T>() -> *::intrinsic::TyDesc;\n+    #[cfg(stage0)]\n     pub fn get_tydesc<T>() -> *();\n \n     /// Create a value initialized to zero."}]}