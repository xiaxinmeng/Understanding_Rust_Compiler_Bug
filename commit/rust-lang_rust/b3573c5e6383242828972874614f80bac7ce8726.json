{"sha": "b3573c5e6383242828972874614f80bac7ce8726", "node_id": "C_kwDOAAsO6NoAKGIzNTczYzVlNjM4MzI0MjgyODk3Mjg3NDYxNGY4MGJhYzdjZTg3MjY", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2021-12-06T11:00:05Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2021-12-07T12:27:41Z"}, "message": "core::ops::unsize: improve docs for DispatchFromDyn\n\nSigned-off-by: Nick Cameron <nrc@ncameron.org>", "tree": {"sha": "e265c58c826126d5d85d651a04b744e3edcb96e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e265c58c826126d5d85d651a04b744e3edcb96e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3573c5e6383242828972874614f80bac7ce8726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3573c5e6383242828972874614f80bac7ce8726", "html_url": "https://github.com/rust-lang/rust/commit/b3573c5e6383242828972874614f80bac7ce8726", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3573c5e6383242828972874614f80bac7ce8726/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1597728ef5820d3ffcb9d3f0c890ef7802398751", "url": "https://api.github.com/repos/rust-lang/rust/commits/1597728ef5820d3ffcb9d3f0c890ef7802398751", "html_url": "https://github.com/rust-lang/rust/commit/1597728ef5820d3ffcb9d3f0c890ef7802398751"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "a920b9165c18e2dc86bf1af173cb9746d79881a8", "filename": "library/core/src/ops/unsize.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b3573c5e6383242828972874614f80bac7ce8726/library%2Fcore%2Fsrc%2Fops%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3573c5e6383242828972874614f80bac7ce8726/library%2Fcore%2Fsrc%2Fops%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Funsize.rs?ref=b3573c5e6383242828972874614f80bac7ce8726", "patch": "@@ -68,7 +68,38 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *mut T {}\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n \n-/// This is used for object safety, to check that a method's receiver type can be dispatched on.\n+/// `DispatchFromDyn` is used in the implementation of object safety checks (specifically allowing\n+/// arbitrary self types), to guarantee that a method's receiver type can be dispatched on.\n+///\n+/// Note: `DispatchFromDyn` was briefly named `CoerceSized` (and had a slightly different\n+/// interpretation).\n+///\n+/// Imagine we have a trait object `t` with type `&dyn Tr`, where `Tr` is some trait with a method\n+/// `m` defined as `fn m(&self);`. When calling `t.m()`, the receiver `t` is a wide pointer, but an\n+/// implementation of `m` will expect a narrow pointer as `&self` (a reference to the concrete\n+/// type). The compiler must generate an implicit conversion from the trait object/wide pointer to\n+/// the concrete reference/narrow pointer. Implementing `DispatchFromDyn` indicates that that\n+/// conversion is allowed and thus that the type implementing `DispatchFromDyn` is safe to use as\n+/// the self type in an object-safe method. (in the above example, the compiler will require\n+/// `DispatchFromDyn` is implemented for `&'a U`).\n+///\n+/// `DispatchFromDyn` does not specify the conversion from wide pointer to narrow pointer; the\n+/// conversion is hard-wired into the compiler. For the conversion to work, the following\n+/// properties must hold (i.e., it is only safe to implement `DispatchFromDyn` for types which have\n+/// these properties, these are also checked by the compiler):\n+///\n+/// * EITHER `Self` and `T` are either both references or both raw pointers; in either case, with\n+///   the same mutability.\n+/// * OR, all of the following hold\n+///   - `Self` and `T` must have the same type constructor, and only vary in a single type parameter\n+///     formal (the *coerced type*, e.g., `impl DispatchFromDyn<Rc<T>> for Rc<U>` is ok and the\n+///     single type parameter (instantiated with `T` or `U`) is the coerced type,\n+///     `impl DispatchFromDyn<Arc<T>> for Rc<U>` is not ok).\n+///   - The definition for `Self` must be a struct.\n+///   - The definition for `Self` must not be `#[repr(packed)]` or `#[repr(C)]`.\n+///   - Other than one-aligned, zero-sized fields, the definition for `Self` must have exactly one\n+///     field and that field's type must be the coerced type. Furthermore, `Self`'s field type must\n+///     implement `DispatchFromDyn<F>` where `F` is the type of `T`'s field type.\n ///\n /// An example implementation of the trait:\n ///"}]}