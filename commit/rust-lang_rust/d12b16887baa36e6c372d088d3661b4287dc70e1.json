{"sha": "d12b16887baa36e6c372d088d3661b4287dc70e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMmIxNjg4N2JhYTM2ZTZjMzcyZDA4OGQzNjYxYjQyODdkYzcwZTE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-08T16:30:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-08T16:30:33Z"}, "message": "Rollup merge of #86726 - sexxi-goose:use-diagnostic-item-for-rfc2229-migration, r=nikomatsakis\n\nUse diagnostic items instead of lang items for rfc2229 migrations\n\nThis PR removes the `Send`, `UnwindSafe` and `RefUnwindSafe` lang items introduced in https://github.com/rust-lang/rust/pull/84730, and uses diagnostic items instead to check for `Send`, `UnwindSafe` and `RefUnwindSafe` traits for RFC2229 migrations.\n\nr? ```@nikomatsakis```", "tree": {"sha": "f60492cc691f8d5d85f35ea25c0a16f82dd474c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60492cc691f8d5d85f35ea25c0a16f82dd474c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d12b16887baa36e6c372d088d3661b4287dc70e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg5ygpCRBK7hj4Ov3rIwAArX4IADx10hCNr3SDVBped/exOjEw\nSqRFlfIaarz8mIoKskEYRawO6FmZbXos6/jmXWQCedaTYAXP6RgxsE2+M/r9GUNO\nw/XkyUQRMmyskVibAG3UnzOUzcFooPuldfS7N791eCi5ttJMKTKwW8YVqR4AhXxG\n0JiIOvcVKdWJk2+1NPtv97eEj9t8028fKwwh+2A8JoAH2qFBJoDOraqiB1TSMYuU\nvNjwf442MgdqXvk4lxDHFfBiYxFesn18WNjZRj3SQFJYKTP0Ro5ti7CSxXS7EJmS\nwFjByvBQbZtX2+Ttik/LDpKe2jhDNwivzisSzHAKc8Bi9o69SFEYyADnucPJfWQ=\n=PBwg\n-----END PGP SIGNATURE-----\n", "payload": "tree f60492cc691f8d5d85f35ea25c0a16f82dd474c0\nparent d9297aea101473d2dc59c702f96a02e64772c149\nparent cc3af7091caeaf91851f2999dea3225d0d5d39b0\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1625761833 +0200\ncommitter GitHub <noreply@github.com> 1625761833 +0200\n\nRollup merge of #86726 - sexxi-goose:use-diagnostic-item-for-rfc2229-migration, r=nikomatsakis\n\nUse diagnostic items instead of lang items for rfc2229 migrations\n\nThis PR removes the `Send`, `UnwindSafe` and `RefUnwindSafe` lang items introduced in https://github.com/rust-lang/rust/pull/84730, and uses diagnostic items instead to check for `Send`, `UnwindSafe` and `RefUnwindSafe` traits for RFC2229 migrations.\n\nr? ```@nikomatsakis```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d12b16887baa36e6c372d088d3661b4287dc70e1", "html_url": "https://github.com/rust-lang/rust/commit/d12b16887baa36e6c372d088d3661b4287dc70e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d12b16887baa36e6c372d088d3661b4287dc70e1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9297aea101473d2dc59c702f96a02e64772c149", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9297aea101473d2dc59c702f96a02e64772c149", "html_url": "https://github.com/rust-lang/rust/commit/d9297aea101473d2dc59c702f96a02e64772c149"}, {"sha": "cc3af7091caeaf91851f2999dea3225d0d5d39b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc3af7091caeaf91851f2999dea3225d0d5d39b0", "html_url": "https://github.com/rust-lang/rust/commit/cc3af7091caeaf91851f2999dea3225d0d5d39b0"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "28ae08030e63029f34adcc4eccd8153564c7145c", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d12b16887baa36e6c372d088d3661b4287dc70e1/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12b16887baa36e6c372d088d3661b4287dc70e1/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=d12b16887baa36e6c372d088d3661b4287dc70e1", "patch": "@@ -348,7 +348,4 @@ language_item_table! {\n     Range,                   sym::Range,               range_struct,               Target::Struct;\n     RangeToInclusive,        sym::RangeToInclusive,    range_to_inclusive_struct,  Target::Struct;\n     RangeTo,                 sym::RangeTo,             range_to_struct,            Target::Struct;\n-    Send,                    sym::send,                send_trait,                 Target::Trait;\n-    UnwindSafe,              sym::unwind_safe,         unwind_safe_trait,          Target::Trait;\n-    RefUnwindSafe,           sym::ref_unwind_safe,     ref_unwind_safe_trait,      Target::Trait;\n }"}, {"sha": "3a88d1932a80a7460e29c18ffca9461ec3d98051", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d12b16887baa36e6c372d088d3661b4287dc70e1/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12b16887baa36e6c372d088d3661b4287dc70e1/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=d12b16887baa36e6c372d088d3661b4287dc70e1", "patch": "@@ -257,9 +257,6 @@ impl LanguageItemCollector<'tcx> {\n             | LangItem::Unpin\n             | LangItem::Termination\n             | LangItem::Try\n-            | LangItem::Send\n-            | LangItem::UnwindSafe\n-            | LangItem::RefUnwindSafe\n                 => Some(0),\n \n             // Not a trait"}, {"sha": "edb97d70517b0f8b14a1cfb61c3465fcf6401067", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12b16887baa36e6c372d088d3661b4287dc70e1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12b16887baa36e6c372d088d3661b4287dc70e1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=d12b16887baa36e6c372d088d3661b4287dc70e1", "patch": "@@ -947,7 +947,7 @@ symbols! {\n         receiver,\n         recursion_limit,\n         reexport_test_harness_main,\n-        ref_unwind_safe,\n+        ref_unwind_safe_trait,\n         reference,\n         reflect,\n         reg,\n@@ -1073,7 +1073,6 @@ symbols! {\n         self_in_typedefs,\n         self_struct_ctor,\n         semitransparent,\n-        send,\n         send_trait,\n         shl,\n         shl_assign,\n@@ -1299,7 +1298,7 @@ symbols! {\n         unused_qualifications,\n         unwind,\n         unwind_attributes,\n-        unwind_safe,\n+        unwind_safe_trait,\n         unwrap,\n         unwrap_or,\n         use_extern_macros,"}, {"sha": "26a5a65ed360a51873534dd34250691e5022000a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d12b16887baa36e6c372d088d3661b4287dc70e1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12b16887baa36e6c372d088d3661b4287dc70e1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d12b16887baa36e6c372d088d3661b4287dc70e1", "patch": "@@ -688,15 +688,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             return false;\n         }\n \n-        // Blacklist traits for which it would be nonsensical to suggest borrowing.\n+        // List of traits for which it would be nonsensical to suggest borrowing.\n         // For instance, immutable references are always Copy, so suggesting to\n         // borrow would always succeed, but it's probably not what the user wanted.\n-        let blacklist: Vec<_> =\n-            [LangItem::Copy, LangItem::Clone, LangItem::Unpin, LangItem::Sized, LangItem::Send]\n+        let mut never_suggest_borrow: Vec<_> =\n+            [LangItem::Copy, LangItem::Clone, LangItem::Unpin, LangItem::Sized]\n                 .iter()\n                 .filter_map(|lang_item| self.tcx.lang_items().require(*lang_item).ok())\n                 .collect();\n \n+        never_suggest_borrow.push(self.tcx.get_diagnostic_item(sym::send_trait).unwrap());\n+\n         let span = obligation.cause.span;\n         let param_env = obligation.param_env;\n         let trait_ref = trait_ref.skip_binder();\n@@ -798,15 +800,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 ty::TraitRef::new(trait_ref.def_id, imm_substs),\n                 trait_ref,\n                 false,\n-                &blacklist[..],\n+                &never_suggest_borrow[..],\n             ) {\n                 return true;\n             } else {\n                 return try_borrowing(\n                     ty::TraitRef::new(trait_ref.def_id, mut_substs),\n                     trait_ref,\n                     true,\n-                    &blacklist[..],\n+                    &never_suggest_borrow[..],\n                 );\n             }\n         } else {"}, {"sha": "52436816f77f199b48bb17a361194400ceeea954", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d12b16887baa36e6c372d088d3661b4287dc70e1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12b16887baa36e6c372d088d3661b4287dc70e1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=d12b16887baa36e6c372d088d3661b4287dc70e1", "patch": "@@ -670,7 +670,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n-            tcx.lang_items().send_trait(),\n+            tcx.get_diagnostic_item(sym::send_trait),\n         ) {\n             auto_trait_reasons.insert(\"`Send`\");\n         }\n@@ -686,15 +686,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n-            tcx.lang_items().unwind_safe_trait(),\n+            tcx.get_diagnostic_item(sym::unwind_safe_trait),\n         ) {\n             auto_trait_reasons.insert(\"`UnwindSafe`\");\n         }\n \n         if self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n-            tcx.lang_items().ref_unwind_safe_trait(),\n+            tcx.get_diagnostic_item(sym::ref_unwind_safe_trait),\n         ) {\n             auto_trait_reasons.insert(\"`RefUnwindSafe`\");\n         }"}, {"sha": "fb957348bebd3837dbfc60d43efa5c389fb7fb2b", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d12b16887baa36e6c372d088d3661b4287dc70e1/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12b16887baa36e6c372d088d3661b4287dc70e1/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=d12b16887baa36e6c372d088d3661b4287dc70e1", "patch": "@@ -31,7 +31,6 @@ use crate::hash::Hasher;\n /// [ub]: ../../reference/behavior-considered-undefined.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"send_trait\")]\n-#[lang = \"send\"]\n #[rustc_on_unimplemented(\n     message = \"`{Self}` cannot be sent between threads safely\",\n     label = \"`{Self}` cannot be sent between threads safely\""}, {"sha": "7bc987db8814bd620d26d98e11bc6e810f910fc2", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d12b16887baa36e6c372d088d3661b4287dc70e1/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12b16887baa36e6c372d088d3661b4287dc70e1/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=d12b16887baa36e6c372d088d3661b4287dc70e1", "patch": "@@ -133,7 +133,7 @@ pub fn panic_any<M: 'static + Any + Send>(msg: M) -> ! {\n /// [`AssertUnwindSafe`] wrapper struct can be used to force this trait to be\n /// implemented for any closed over variables passed to `catch_unwind`.\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[cfg_attr(not(test), lang = \"unwind_safe\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"unwind_safe_trait\")]\n #[rustc_on_unimplemented(\n     message = \"the type `{Self}` may not be safely transferred across an unwind boundary\",\n     label = \"`{Self}` may not be safely transferred across an unwind boundary\"\n@@ -149,7 +149,7 @@ pub auto trait UnwindSafe {}\n /// This is a \"helper marker trait\" used to provide impl blocks for the\n /// [`UnwindSafe`] trait, for more information see that documentation.\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[cfg_attr(not(test), lang = \"ref_unwind_safe\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"ref_unwind_safe_trait\")]\n #[rustc_on_unimplemented(\n     message = \"the type `{Self}` may contain interior mutability and a reference may not be safely \\\n                transferrable across a catch_unwind boundary\","}]}