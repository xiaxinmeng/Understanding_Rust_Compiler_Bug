{"sha": "a6dd2031a363d0b46caea06ef77209f678327719", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZGQyMDMxYTM2M2QwYjQ2Y2FlYTA2ZWY3NzIwOWY2NzgzMjc3MTk=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-17T16:35:43Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-21T17:58:56Z"}, "message": "StrSearcher: Specialize is_prefix_of/is_suffix_of for &str", "tree": {"sha": "6027ebe17f7444cd0660b17e49aa4de5704499ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6027ebe17f7444cd0660b17e49aa4de5704499ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6dd2031a363d0b46caea06ef77209f678327719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6dd2031a363d0b46caea06ef77209f678327719", "html_url": "https://github.com/rust-lang/rust/commit/a6dd2031a363d0b46caea06ef77209f678327719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6dd2031a363d0b46caea06ef77209f678327719/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b890b7bbc732cd26f13c309573b5a3e45d0748de", "url": "https://api.github.com/repos/rust-lang/rust/commits/b890b7bbc732cd26f13c309573b5a3e45d0748de", "html_url": "https://github.com/rust-lang/rust/commit/b890b7bbc732cd26f13c309573b5a3e45d0748de"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "048bcc0dce53f0a796f0ed42ef5d3cea16511c3a", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a6dd2031a363d0b46caea06ef77209f678327719/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6dd2031a363d0b46caea06ef77209f678327719/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=a6dd2031a363d0b46caea06ef77209f678327719", "patch": "@@ -343,23 +343,6 @@ unsafe impl<'a, C: CharEq> ReverseSearcher<'a> for CharEqSearcher<'a, C> {\n \n impl<'a, C: CharEq> DoubleEndedSearcher<'a> for CharEqSearcher<'a, C> {}\n \n-/////////////////////////////////////////////////////////////////////////////\n-// Impl for &str\n-/////////////////////////////////////////////////////////////////////////////\n-\n-/// Non-allocating substring search.\n-///\n-/// Will handle the pattern `\"\"` as returning empty matches at each character\n-/// boundary.\n-impl<'a, 'b> Pattern<'a> for &'b str {\n-    type Searcher = StrSearcher<'a, 'b>;\n-\n-    #[inline]\n-    fn into_searcher(self, haystack: &'a str) -> StrSearcher<'a, 'b> {\n-        StrSearcher::new(haystack, self)\n-    }\n-}\n-\n /////////////////////////////////////////////////////////////////////////////\n \n macro_rules! pattern_methods {\n@@ -511,6 +494,39 @@ impl<'a, 'b> Pattern<'a> for &'b &'b str {\n     pattern_methods!(StrSearcher<'a, 'b>, |&s| s, |s| s);\n }\n \n+/////////////////////////////////////////////////////////////////////////////\n+// Impl for &str\n+/////////////////////////////////////////////////////////////////////////////\n+\n+/// Non-allocating substring search.\n+///\n+/// Will handle the pattern `\"\"` as returning empty matches at each character\n+/// boundary.\n+impl<'a, 'b> Pattern<'a> for &'b str {\n+    type Searcher = StrSearcher<'a, 'b>;\n+\n+    #[inline]\n+    fn into_searcher(self, haystack: &'a str) -> StrSearcher<'a, 'b> {\n+        StrSearcher::new(haystack, self)\n+    }\n+\n+    /// Checks whether the pattern matches at the front of the haystack\n+    #[inline]\n+    fn is_prefix_of(self, haystack: &'a str) -> bool {\n+        // Use `as_bytes` so that we can slice through a character in the haystack.\n+        // Since self is always valid UTF-8, this can't result in a false positive.\n+        self.len() <= haystack.len() &&\n+            self.as_bytes() == &haystack.as_bytes()[..self.len()]\n+    }\n+\n+    /// Checks whether the pattern matches at the back of the haystack\n+    #[inline]\n+    fn is_suffix_of(self, haystack: &'a str) -> bool {\n+        self.len() <= haystack.len() &&\n+            self.as_bytes() == &haystack.as_bytes()[haystack.len() - self.len()..]\n+    }\n+}\n+\n \n /////////////////////////////////////////////////////////////////////////////\n // Two Way substring searcher"}]}