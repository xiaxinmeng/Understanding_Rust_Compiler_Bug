{"sha": "e484197482698ee0bb83a66987a5f64c46ae306b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ODQxOTc0ODI2OThlZTBiYjgzYTY2OTg3YTVmNjRjNDZhZTMwNmI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-30T02:17:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-30T07:33:13Z"}, "message": "A few small test fixes and such from rollup", "tree": {"sha": "483907141a5dcd2cfc7e4ea91f7234d77bddf83b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/483907141a5dcd2cfc7e4ea91f7234d77bddf83b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e484197482698ee0bb83a66987a5f64c46ae306b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e484197482698ee0bb83a66987a5f64c46ae306b", "html_url": "https://github.com/rust-lang/rust/commit/e484197482698ee0bb83a66987a5f64c46ae306b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e484197482698ee0bb83a66987a5f64c46ae306b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eb459ff5ff845cce0695e3eee3206303f72338b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb459ff5ff845cce0695e3eee3206303f72338b", "html_url": "https://github.com/rust-lang/rust/commit/3eb459ff5ff845cce0695e3eee3206303f72338b"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "dcccf78893521d73871c748117326e4a78770901", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e484197482698ee0bb83a66987a5f64c46ae306b/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e484197482698ee0bb83a66987a5f64c46ae306b/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=e484197482698ee0bb83a66987a5f64c46ae306b", "patch": "@@ -35,16 +35,11 @@ use {Build, Compiler, Mode};\n /// created will also be linked into the sysroot directory.\n pub fn std(build: &Build, target: &str, compiler: &Compiler) {\n     let libdir = build.sysroot_libdir(compiler, target);\n-    let _ = fs::remove_dir_all(&libdir);\n     t!(fs::create_dir_all(&libdir));\n \n     println!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n              compiler.host, target);\n \n-    // Some platforms have startup objects that may be required to produce the\n-    // libstd dynamic library, for example.\n-    build_startup_objects(build, target, &libdir);\n-\n     let out_dir = build.cargo_out(compiler, Mode::Libstd, target);\n     build.clear_if_dirty(&out_dir, &build.compiler_path(compiler));\n     let mut cargo = build.cargo(compiler, Mode::Libstd, target, \"build\");\n@@ -111,20 +106,23 @@ fn copy_musl_third_party_objects(build: &Build, target: &str, into: &Path) {\n /// They don't require any library support as they're just plain old object\n /// files, so we just use the nightly snapshot compiler to always build them (as\n /// no other compilers are guaranteed to be available).\n-fn build_startup_objects(build: &Build, target: &str, into: &Path) {\n+pub fn build_startup_objects(build: &Build, for_compiler: &Compiler, target: &str) {\n     if !target.contains(\"pc-windows-gnu\") {\n         return\n     }\n+\n     let compiler = Compiler::new(0, &build.config.build);\n     let compiler_path = build.compiler_path(&compiler);\n+    let into = build.sysroot_libdir(for_compiler, target);\n+    t!(fs::create_dir_all(&into));\n \n     for file in t!(fs::read_dir(build.src.join(\"src/rtstartup\"))) {\n         let file = t!(file);\n         let mut cmd = Command::new(&compiler_path);\n         build.run(cmd.env(\"RUSTC_BOOTSTRAP\", \"1\")\n                      .arg(\"--target\").arg(target)\n                      .arg(\"--emit=obj\")\n-                     .arg(\"--out-dir\").arg(into)\n+                     .arg(\"--out-dir\").arg(&into)\n                      .arg(file.path()));\n     }\n \n@@ -155,6 +153,12 @@ pub fn test_link(build: &Build,\n                  compiler: &Compiler,\n                  target_compiler: &Compiler,\n                  target: &str) {\n+    println!(\"Copying stage{} test from stage{} ({} -> {} / {})\",\n+             target_compiler.stage,\n+             compiler.stage,\n+             compiler.host,\n+             target_compiler.host,\n+             target);\n     let libdir = build.sysroot_libdir(&target_compiler, target);\n     let out_dir = build.cargo_out(&compiler, Mode::Libtest, target);\n     add_to_sysroot(&out_dir, &libdir);\n@@ -224,6 +228,12 @@ pub fn rustc_link(build: &Build,\n                   compiler: &Compiler,\n                   target_compiler: &Compiler,\n                   target: &str) {\n+    println!(\"Copying stage{} rustc from stage{} ({} -> {} / {})\",\n+             target_compiler.stage,\n+             compiler.stage,\n+             compiler.host,\n+             target_compiler.host,\n+             target);\n     let libdir = build.sysroot_libdir(&target_compiler, target);\n     let out_dir = build.cargo_out(&compiler, Mode::Librustc, target);\n     add_to_sysroot(&out_dir, &libdir);"}, {"sha": "69210c4959b921e2e649bd62be3b40cbf8afaa51", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e484197482698ee0bb83a66987a5f64c46ae306b/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/e484197482698ee0bb83a66987a5f64c46ae306b/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=e484197482698ee0bb83a66987a5f64c46ae306b", "patch": "@@ -51,7 +51,7 @@\n # support. You'll need to write a target specification at least, and most\n # likely, teach rustc about the C ABI of the target. Get in touch with the\n # Rust team and file an issue if you need assistance in porting!\n-#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc\"\n+#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\"\n \n # =============================================================================\n # General build configuration options"}, {"sha": "7bcfb06f210b9466ecdde9223e3e3605f1985313", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e484197482698ee0bb83a66987a5f64c46ae306b/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e484197482698ee0bb83a66987a5f64c46ae306b/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=e484197482698ee0bb83a66987a5f64c46ae306b", "patch": "@@ -248,6 +248,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                \"libstd-link\",\n                \"build-crate-std_shim\",\n                compile::std_link)\n+        .dep(|s| s.name(\"startup-objects\"))\n         .dep(|s| s.name(\"create-sysroot\").target(s.host));\n     crate_rule(build,\n                &mut rules,\n@@ -264,6 +265,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n \n     for (krate, path, _default) in krates(\"std_shim\") {\n         rules.build(&krate.build_step, path)\n+             .dep(|s| s.name(\"startup-objects\"))\n              .dep(move |s| s.name(\"rustc\").host(&build.config.build).target(s.host))\n              .run(move |s| compile::std(build, s.target, &s.compiler()));\n     }\n@@ -279,6 +281,10 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n              .run(move |s| compile::rustc(build, s.target, &s.compiler()));\n     }\n \n+    rules.build(\"startup-objects\", \"src/rtstartup\")\n+         .dep(|s| s.name(\"create-sysroot\").target(s.host))\n+         .run(move |s| compile::build_startup_objects(build, &s.compiler(), s.target));\n+\n     // ========================================================================\n     // Test targets\n     //\n@@ -349,6 +355,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n         let mut suite = |name, path, mode, dir| {\n             rules.test(name, path)\n                  .dep(|s| s.name(\"librustc\"))\n+                 .dep(|s| s.name(\"test-helpers\"))\n                  .dep(|s| s.name(\"tool-compiletest\").target(s.host))\n                  .default(mode != \"pretty\")\n                  .host(true)"}, {"sha": "b4f4d17990536768bf3dc2566b1cd374af00716a", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e484197482698ee0bb83a66987a5f64c46ae306b/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e484197482698ee0bb83a66987a5f64c46ae306b/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=e484197482698ee0bb83a66987a5f64c46ae306b", "patch": "@@ -52,12 +52,6 @@ const TEST_REPOS: &'static [Test] = &[\n         sha: \"999001b223152441198f117a68fb81f57bc086dd\",\n         lock: None,\n     },\n-    Test {\n-        name: \"xsv\",\n-        repo: \"https://github.com/BurntSushi/xsv\",\n-        sha: \"5ec4fff4a3f507eda887049469897f02c6fae036\",\n-        lock: None,\n-    },\n ];\n \n fn main() {"}, {"sha": "dbfe1111846a819ed099ae6ff0070859f899f192", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e484197482698ee0bb83a66987a5f64c46ae306b/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e484197482698ee0bb83a66987a5f64c46ae306b/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=e484197482698ee0bb83a66987a5f64c46ae306b", "patch": "@@ -271,8 +271,7 @@ pub fn run_tests(config: &Config) {\n             Mode::Codegen |\n             Mode::CodegenUnits |\n             Mode::Pretty |\n-            Mode::Rustdoc |\n-            Mode::Incremental => {}\n+            Mode::Rustdoc => {}\n \n             _ => {\n                 env::set_var(\"RUST_TEST_THREADS\", \"1\");"}]}