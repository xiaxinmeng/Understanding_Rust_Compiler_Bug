{"sha": "5b42f79ff088bf3f9136f6f668a481097e22bed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNDJmNzlmZjA4OGJmM2Y5MTM2ZjZmNjY4YTQ4MTA5N2UyMmJlZDk=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-16T21:18:37Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-17T18:18:53Z"}, "message": "Pop the expansion context after expanding a method macro\n\nWe were leaving these on the stack, causing spurious backtraces.\n\nI've confirmed that this test fails without the fix.", "tree": {"sha": "9c4d7112eeb42d948dd4c9f08b8aa00429379de2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c4d7112eeb42d948dd4c9f08b8aa00429379de2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b42f79ff088bf3f9136f6f668a481097e22bed9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b42f79ff088bf3f9136f6f668a481097e22bed9", "html_url": "https://github.com/rust-lang/rust/commit/5b42f79ff088bf3f9136f6f668a481097e22bed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b42f79ff088bf3f9136f6f668a481097e22bed9/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095", "url": "https://api.github.com/repos/rust-lang/rust/commits/f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095", "html_url": "https://github.com/rust-lang/rust/commit/f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "892213e684f145abb4d966ee3c23fcf8b4834e52", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b42f79ff088bf3f9136f6f668a481097e22bed9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b42f79ff088bf3f9136f6f668a481097e22bed9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5b42f79ff088bf3f9136f6f668a481097e22bed9", "patch": "@@ -897,7 +897,10 @@ fn expand_method(m: P<ast::Method>, fld: &mut MacroExpander) -> SmallVector<P<as\n             };\n \n             // expand again if necessary\n-            new_methods.into_iter().flat_map(|m| fld.fold_method(m).into_iter()).collect()\n+            let new_methods = new_methods.move_iter()\n+                                  .flat_map(|m| fld.fold_method(m).into_iter()).collect();\n+            fld.cx.bt_pop();\n+            new_methods\n         }\n     })\n }"}, {"sha": "dc41e2e02a8461a3a382c19aea8d626dd87eead1", "filename": "src/test/compile-fail/method-macro-backtrace.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5b42f79ff088bf3f9136f6f668a481097e22bed9/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b42f79ff088bf3f9136f6f668a481097e22bed9/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs?ref=5b42f79ff088bf3f9136f6f668a481097e22bed9", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// forbid-output: in expansion of\n+\n+#![feature(macro_rules)]\n+\n+macro_rules! make_method ( ($name:ident) => (\n+    fn $name(&self) { }\n+))\n+\n+struct S;\n+\n+impl S {\n+    // We had a bug where these wouldn't clean up macro backtrace frames.\n+    make_method!(foo1)\n+    make_method!(foo2)\n+    make_method!(foo3)\n+    make_method!(foo4)\n+    make_method!(foo5)\n+    make_method!(foo6)\n+    make_method!(foo7)\n+    make_method!(foo8)\n+\n+    // Cause an error. It shouldn't have any macro backtrace frames.\n+    fn bar(&self) { }\n+    fn bar(&self) { } //~ ERROR duplicate definition\n+}\n+\n+fn main() { }"}]}