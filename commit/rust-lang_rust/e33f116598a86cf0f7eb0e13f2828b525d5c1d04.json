{"sha": "e33f116598a86cf0f7eb0e13f2828b525d5c1d04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzM2YxMTY1OThhODZjZjBmN2ViMGUxM2YyODI4YjUyNWQ1YzFkMDQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-20T15:29:09Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-20T15:35:40Z"}, "message": "Remove some obsolete 'copy' operators from trans", "tree": {"sha": "62c49b33c8b39518027b05032ba726436da18af1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62c49b33c8b39518027b05032ba726436da18af1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e33f116598a86cf0f7eb0e13f2828b525d5c1d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e33f116598a86cf0f7eb0e13f2828b525d5c1d04", "html_url": "https://github.com/rust-lang/rust/commit/e33f116598a86cf0f7eb0e13f2828b525d5c1d04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e33f116598a86cf0f7eb0e13f2828b525d5c1d04/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eaddb772eb52722e705be6f414de2e398ba4b82", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eaddb772eb52722e705be6f414de2e398ba4b82", "html_url": "https://github.com/rust-lang/rust/commit/1eaddb772eb52722e705be6f414de2e398ba4b82"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "5c615f134ecfba0fdc29dc44c2e303dfc7ede51d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e33f116598a86cf0f7eb0e13f2828b525d5c1d04/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33f116598a86cf0f7eb0e13f2828b525d5c1d04/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e33f116598a86cf0f7eb0e13f2828b525d5c1d04", "patch": "@@ -1229,22 +1229,22 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n         let cmp_fn_ty = T_ptr(T_cmp_glue_fn(*ccx));\n         let ti = pair.val;\n         let take_glue =\n-            alt copy ti.take_glue {\n+            alt ti.take_glue {\n               none. { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n         let drop_glue =\n-            alt copy ti.drop_glue {\n+            alt ti.drop_glue {\n               none. { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n         let free_glue =\n-            alt copy ti.free_glue {\n+            alt ti.free_glue {\n               none. { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n         let cmp_glue =\n-            alt copy ti.cmp_glue {\n+            alt ti.cmp_glue {\n               none. { ccx.stats.n_null_glues += 1u; C_null(cmp_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n@@ -1745,7 +1745,7 @@ fn lazily_emit_tydesc_glue(cx: @block_ctxt, field: int,\n       none. { }\n       some(ti) {\n         if field == abi::tydesc_field_take_glue {\n-            alt copy ti.take_glue {\n+            alt ti.take_glue {\n               some(_) { }\n               none. {\n                 log #fmt[\"+++ lazily_emit_tydesc_glue TAKE %s\",\n@@ -1763,7 +1763,7 @@ fn lazily_emit_tydesc_glue(cx: @block_ctxt, field: int,\n               }\n             }\n         } else if field == abi::tydesc_field_drop_glue {\n-            alt copy ti.drop_glue {\n+            alt ti.drop_glue {\n               some(_) { }\n               none. {\n                 log #fmt[\"+++ lazily_emit_tydesc_glue DROP %s\",\n@@ -1781,7 +1781,7 @@ fn lazily_emit_tydesc_glue(cx: @block_ctxt, field: int,\n               }\n             }\n         } else if field == abi::tydesc_field_free_glue {\n-            alt copy ti.free_glue {\n+            alt ti.free_glue {\n               some(_) { }\n               none. {\n                 log #fmt[\"+++ lazily_emit_tydesc_glue FREE %s\",\n@@ -1799,7 +1799,7 @@ fn lazily_emit_tydesc_glue(cx: @block_ctxt, field: int,\n               }\n             }\n         } else if field == abi::tydesc_field_cmp_glue {\n-            alt copy ti.cmp_glue {\n+            alt ti.cmp_glue {\n               some(_) { }\n               none. {\n                 log #fmt[\"+++ lazily_emit_tydesc_glue CMP %s\",\n@@ -4456,7 +4456,7 @@ fn trans_put(in_cx: @block_ctxt, e: option::t<@ast::expr>) -> result {\n     Br(in_cx, cx.llbb);\n     let llcallee = C_nil();\n     let llenv = C_nil();\n-    alt copy cx.fcx.lliterbody {\n+    alt cx.fcx.lliterbody {\n       some(lli) {\n         let slot = alloca(cx, val_ty(lli));\n         Store(cx, lli, slot);\n@@ -4531,7 +4531,7 @@ fn trans_break_cont(sp: span, cx: @block_ctxt, to_end: bool) -> result {\n                      C_nil());\n           }\n           _ {\n-            alt copy cleanup_cx.parent {\n+            alt cleanup_cx.parent {\n               parent_some(cx) { cleanup_cx = cx; }\n               parent_none. {\n                 bcx_ccx(cx).sess.span_fatal(sp,\n@@ -4595,7 +4595,7 @@ fn trans_ret(cx: @block_ctxt, e: option::t<@ast::expr>) -> result {\n     let cleanup_cx = cx;\n     while more_cleanups {\n         bcx = trans_block_cleanups(bcx, cleanup_cx);\n-        alt copy cleanup_cx.parent {\n+        alt cleanup_cx.parent {\n           parent_some(b) { cleanup_cx = b; }\n           parent_none. { more_cleanups = false; }\n         }\n@@ -5230,7 +5230,7 @@ fn trans_closure(bcx_maybe: option::t<@block_ctxt>,\n     create_llargs_for_fn_args(fcx, f.proto, ty_self,\n                               ty::ret_ty_of_fn(cx.ccx.tcx, id), f.decl.inputs,\n                               ty_params);\n-    alt copy fcx.llself {\n+    alt fcx.llself {\n       some(llself) { populate_fn_ctxt_from_llself(fcx, llself); }\n       _ { }\n     }"}]}