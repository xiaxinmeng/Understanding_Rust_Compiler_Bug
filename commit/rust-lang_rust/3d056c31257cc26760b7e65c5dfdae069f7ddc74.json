{"sha": "3d056c31257cc26760b7e65c5dfdae069f7ddc74", "node_id": "C_kwDOAAsO6NoAKDNkMDU2YzMxMjU3Y2MyNjc2MGI3ZTY1YzVkZmRhZTA2OWY3ZGRjNzQ", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-21T21:05:32Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-22T15:40:33Z"}, "message": "diagnostics: if AssocFn has self argument, describe as method\n\nDiscussed in\nhttps://rust-lang.zulipchat.com/#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/.22associated.20function.22.20vs.20.22method.22/near/329265515\n\nThis commit also changes the tooltips on rustdoc intra-doc links\ntargeting methods.", "tree": {"sha": "05fe48fc1b2f91afbf0adbea57ca5fe9a674b923", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05fe48fc1b2f91afbf0adbea57ca5fe9a674b923"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d056c31257cc26760b7e65c5dfdae069f7ddc74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d056c31257cc26760b7e65c5dfdae069f7ddc74", "html_url": "https://github.com/rust-lang/rust/commit/3d056c31257cc26760b7e65c5dfdae069f7ddc74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d056c31257cc26760b7e65c5dfdae069f7ddc74/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b4d6e080404560f63599deeb328dfa27fe081a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4d6e080404560f63599deeb328dfa27fe081a6", "html_url": "https://github.com/rust-lang/rust/commit/3b4d6e080404560f63599deeb328dfa27fe081a6"}], "stats": {"total": 149, "additions": 91, "deletions": 58}, "files": [{"sha": "262e093b0fa2a57b4ba64fbabb2dc00f7d43933c", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -2135,7 +2135,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let tcx = self.infcx.tcx;\n \n-        let (_, escapes_from) = tcx.article_and_description(self.mir_def_id().to_def_id());\n+        let escapes_from = tcx.def_descr(self.mir_def_id().to_def_id());\n \n         let mut err =\n             borrowck_errors::borrowed_data_escapes_closure(tcx, escape_span, escapes_from);"}, {"sha": "4baf1b6aa8701286d67aa01eb45bb69ad5c7ef4b", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -660,10 +660,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             errci.outlived_fr,\n         );\n \n-        let (_, escapes_from) = self\n-            .infcx\n-            .tcx\n-            .article_and_description(self.regioncx.universal_regions().defining_ty.def_id());\n+        let escapes_from =\n+            self.infcx.tcx.def_descr(self.regioncx.universal_regions().defining_ty.def_id());\n \n         // Revert to the normal error in these cases.\n         // Assignments aren't \"escapes\" in function items.\n@@ -757,8 +755,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             ..\n         } = errci;\n \n-        let (_, mir_def_name) =\n-            self.infcx.tcx.article_and_description(self.mir_def_id().to_def_id());\n+        let mir_def_name = self.infcx.tcx.def_descr(self.mir_def_id().to_def_id());\n \n         let err = LifetimeOutliveErr { span: *span };\n         let mut diag = self.infcx.tcx.sess.create_err(err);"}, {"sha": "8c58129c800f8cbc113ba06cd75155f33d2b8e3e", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -124,6 +124,11 @@ pub enum DefKind {\n }\n \n impl DefKind {\n+    /// Get an English description for the item's kind.\n+    ///\n+    /// If you have access to `TyCtxt`, use `TyCtxt::def_descr` or\n+    /// `TyCtxt::def_kind_descr` instead, because they give better\n+    /// information for generators and associated functions.\n     pub fn descr(self, def_id: DefId) -> &'static str {\n         match self {\n             DefKind::Fn => \"function\",\n@@ -166,6 +171,10 @@ impl DefKind {\n     }\n \n     /// Gets an English article for the definition.\n+    ///\n+    /// If you have access to `TyCtxt`, use `TyCtxt::def_descr_article` or\n+    /// `TyCtxt::def_kind_descr_article` instead, because they give better\n+    /// information for generators and associated functions.\n     pub fn article(&self) -> &'static str {\n         match *self {\n             DefKind::AssocTy"}, {"sha": "499b51eef7218ffa26264c9dca9dec4d4ce52e42", "filename": "compiler/rustc_hir_analysis/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -304,10 +304,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             if let Some(did) = adt_did {\n                 err.span_label(\n                     tcx.def_span(did),\n-                    format!(\n-                        \"associated item `{name}` not found for this {}\",\n-                        tcx.def_kind(did).descr(did)\n-                    ),\n+                    format!(\"associated item `{name}` not found for this {}\", tcx.def_descr(did)),\n                 );\n             }\n         };"}, {"sha": "c5a5c9b649f1201ba97e0a3ed74ae3746ec61ae7", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -1217,7 +1217,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     | (hir::def::DefKind::AssocConst, ty::TermKind::Const(_)) => (),\n                     (_, _) => {\n                         let got = if let Some(_) = term.ty() { \"type\" } else { \"constant\" };\n-                        let expected = def_kind.descr(assoc_item_def_id);\n+                        let expected = tcx.def_descr(assoc_item_def_id);\n                         let mut err = tcx.sess.struct_span_err(\n                             binding.span,\n                             &format!(\"expected {expected} bound, found {got}\"),\n@@ -1552,7 +1552,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         i.bottom().1,\n                         E0038,\n                         \"the {} `{}` cannot be made into an object\",\n-                        tcx.def_kind(def_id).descr(def_id),\n+                        tcx.def_descr(def_id),\n                         tcx.item_name(def_id),\n                     );\n                     err.note(\n@@ -2174,7 +2174,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             \"`{}` could{} refer to the {} defined here\",\n                             assoc_ident,\n                             also,\n-                            kind.descr(def_id)\n+                            tcx.def_kind_descr(kind, def_id)\n                         );\n                         lint.span_note(tcx.def_span(def_id), &note_msg);\n                     };\n@@ -2350,7 +2350,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let kind = DefKind::AssocTy;\n \n         if !tcx.visibility(item).is_accessible_from(def_scope, tcx) {\n-            let kind = kind.descr(item);\n+            let kind = tcx.def_kind_descr(kind, item);\n             let msg = format!(\"{kind} `{name}` is private\");\n             let def_span = tcx.def_span(item);\n             tcx.sess"}, {"sha": "5717afdc05e3b008ad6a15544d2fd85c43fd19dd", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -1460,7 +1460,7 @@ fn opaque_type_cycle_error(\n                                     span,\n                                     format!(\n                                         \"{} captures itself here\",\n-                                        tcx.def_kind(closure_def_id).descr(closure_def_id)\n+                                        tcx.def_descr(closure_def_id)\n                                     ),\n                                 );\n                             }"}, {"sha": "2bb724138f584a36f2da5a5d1dd43558e7219c0e", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -71,7 +71,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n \n     let drop_impl_span = tcx.def_span(drop_impl_did);\n     let item_span = tcx.def_span(self_type_did);\n-    let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n+    let self_descr = tcx.def_descr(self_type_did);\n     let mut err =\n         struct_span_err!(tcx.sess, drop_impl_span, E0366, \"`Drop` impls cannot be specialized\");\n     match arg {\n@@ -217,7 +217,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n \n         if !assumptions_in_impl_context.iter().copied().any(predicate_matches_closure) {\n             let item_span = tcx.def_span(self_type_did);\n-            let self_descr = tcx.def_kind(self_type_did).descr(self_type_did.to_def_id());\n+            let self_descr = tcx.def_descr(self_type_did.to_def_id());\n             let reported = struct_span_err!(\n                 tcx.sess,\n                 predicate_sp,"}, {"sha": "73bb3adb541c8c756094373d5d26220a42c18b4f", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -531,7 +531,7 @@ fn lint_auto_trait_impl<'tcx>(\n         }),\n         |lint| {\n             let item_span = tcx.def_span(self_type_did);\n-            let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n+            let self_descr = tcx.def_descr(self_type_did);\n             match arg {\n                 ty::util::NotUniqueParam::DuplicateParam(arg) => {\n                     lint.note(&format!(\"`{}` is mentioned multiple times\", arg));"}, {"sha": "2cb0d430ee3407ec0432892aea903b374d459b75", "filename": "compiler/rustc_hir_analysis/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -439,7 +439,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n     fn create_error_message(&self) -> String {\n         let def_path = self.tcx.def_path_str(self.def_id);\n-        let def_kind = self.tcx.def_kind(self.def_id).descr(self.def_id);\n+        let def_kind = self.tcx.def_descr(self.def_id);\n         let (quantifier, bound) = self.get_quantifier_and_bound();\n         let kind = self.kind();\n         let provided_lt_args = self.num_provided_lifetime_args();\n@@ -990,7 +990,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         };\n \n         let msg = {\n-            let def_kind = self.tcx.def_kind(self.def_id).descr(self.def_id);\n+            let def_kind = self.tcx.def_descr(self.def_id);\n             let (quantifier, bound) = self.get_quantifier_and_bound();\n \n             let params = if bound == 0 {"}, {"sha": "02f2baba2bc0f0bb165220fdd3bc0f2b1123db9e", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -671,7 +671,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 && !self.type_is_sized_modulo_regions(self.param_env, output_ty, callee_expr.span)\n             {\n                 let descr = match maybe_def {\n-                    DefIdOrName::DefId(def_id) => self.tcx.def_kind(def_id).descr(def_id),\n+                    DefIdOrName::DefId(def_id) => self.tcx.def_descr(def_id),\n                     DefIdOrName::Name(name) => name,\n                 };\n                 err.span_label("}, {"sha": "5a00e996b3461a887b7341ec77782a75aca21bb5", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -2448,7 +2448,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         return_ty: Option<Ty<'tcx>>,\n     ) {\n         let struct_path = self.tcx().def_path_str(base_did);\n-        let kind_name = self.tcx().def_kind(base_did).descr(base_did);\n+        let kind_name = self.tcx().def_descr(base_did);\n         let mut err = struct_span_err!(\n             self.tcx().sess,\n             field.span,"}, {"sha": "355eeca2b352c0a55ac27c243e6934d60a4c8188", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -1938,8 +1938,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 spans.push_span_label(param.span, \"\");\n             }\n \n-            let def_kind = self.tcx.def_kind(def_id);\n-            err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n+            err.span_note(spans, &format!(\"{} defined here\", self.tcx.def_descr(def_id)));\n         } else if let Some(hir::Node::Expr(e)) = self.tcx.hir().get_if_local(def_id)\n             && let hir::ExprKind::Closure(hir::Closure { body, .. }) = &e.kind\n         {\n@@ -1952,10 +1951,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n             err.span_note(span, &format!(\"{} defined here\", kind));\n         } else {\n-            let def_kind = self.tcx.def_kind(def_id);\n             err.span_note(\n                 self.tcx.def_span(def_id),\n-                &format!(\"{} defined here\", def_kind.descr(def_id)),\n+                &format!(\"{} defined here\", self.tcx.def_descr(def_id)),\n             );\n         }\n     }"}, {"sha": "dc80d717aa199f88bacc16b10205c8fb096330f5", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 DefIdOrName::DefId(def_id) => match self.tcx.def_kind(def_id) {\n                     DefKind::Ctor(CtorOf::Struct, _) => \"construct this tuple struct\".to_string(),\n                     DefKind::Ctor(CtorOf::Variant, _) => \"construct this tuple variant\".to_string(),\n-                    kind => format!(\"call this {}\", kind.descr(def_id)),\n+                    kind => format!(\"call this {}\", self.tcx.def_kind_descr(kind, def_id)),\n                 },\n                 DefIdOrName::Name(name) => format!(\"call this {name}\"),\n             };\n@@ -339,7 +339,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     CtorOf::Variant => \"an enum variant\",\n                 }));\n             } else {\n-                let descr = kind.descr(def_id);\n+                let descr = self.tcx.def_kind_descr(kind, def_id);\n                 err.span_label(sp, format!(\"{descr} `{name}` defined here\"));\n             }\n             return true;"}, {"sha": "2bc506c3b3b84cae8161115c5ddcbb37d2d43e15", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -1366,8 +1366,8 @@ impl<'tcx> Pick<'tcx> {\n             span,\n             format!(\n                 \"{} {} with this name may be added to the standard library in the future\",\n-                def_kind.article(),\n-                def_kind.descr(self.item.def_id),\n+                tcx.def_kind_descr_article(def_kind, self.item.def_id),\n+                tcx.def_kind_descr(def_kind, self.item.def_id),\n             ),\n             |lint| {\n                 match (self.item.kind, self.item.container) {"}, {"sha": "4a88bf4d7929ce8382b3adaf602af9e55bd10e28", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -160,7 +160,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             MethodError::PrivateMatch(kind, def_id, out_of_scope_traits) => {\n-                let kind = kind.descr(def_id);\n+                let kind = self.tcx.def_kind_descr(kind, def_id);\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n                     item_name.span,\n@@ -1062,8 +1062,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         span,\n                         &format!(\n                             \"there is {} {} with a similar name\",\n-                            def_kind.article(),\n-                            def_kind.descr(similar_candidate.def_id),\n+                            self.tcx.def_kind_descr_article(def_kind, similar_candidate.def_id),\n+                            self.tcx.def_kind_descr(def_kind, similar_candidate.def_id)\n                         ),\n                         similar_candidate.name,\n                         Applicability::MaybeIncorrect,\n@@ -1172,7 +1172,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             path,\n                             ty,\n                             item.kind,\n-                            item.def_id,\n+                            self.tcx.def_kind_descr(item.kind.as_def_kind(), item.def_id),\n                             sugg_span,\n                             idx,\n                             self.tcx.sess.source_map(),\n@@ -1208,7 +1208,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             path,\n                             rcvr_ty,\n                             item.kind,\n-                            item.def_id,\n+                            self.tcx.def_kind_descr(item.kind.as_def_kind(), item.def_id),\n                             sugg_span,\n                             idx,\n                             self.tcx.sess.source_map(),\n@@ -2853,7 +2853,7 @@ fn print_disambiguation_help<'tcx>(\n     trait_name: String,\n     rcvr_ty: Ty<'_>,\n     kind: ty::AssocKind,\n-    def_id: DefId,\n+    def_kind_descr: &'static str,\n     span: Span,\n     candidate: Option<usize>,\n     source_map: &source_map::SourceMap,\n@@ -2886,7 +2886,7 @@ fn print_disambiguation_help<'tcx>(\n         span,\n         &format!(\n             \"disambiguate the {} for {}\",\n-            kind.as_def_kind().descr(def_id),\n+            def_kind_descr,\n             if let Some(candidate) = candidate {\n                 format!(\"candidate #{}\", candidate)\n             } else {"}, {"sha": "e242900fd2329cd158ebcc1fbf5f81b37580c8a8", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -122,7 +122,7 @@ impl InferenceDiagnosticsParentData {\n             tcx.def_key(parent_def_id).disambiguated_data.data.get_opt_name()?.to_string();\n \n         Some(InferenceDiagnosticsParentData {\n-            prefix: tcx.def_kind(parent_def_id).descr(parent_def_id),\n+            prefix: tcx.def_descr(parent_def_id),\n             name: parent_name,\n         })\n     }"}, {"sha": "354c84e2209a36c86ce10ce06c93800000e5636a", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -255,7 +255,7 @@ fn late_report_deprecation(\n     let method_span = method_span.unwrap_or(span);\n     tcx.struct_span_lint_hir(lint, hir_id, method_span, message, |diag| {\n         if let hir::Node::Expr(_) = tcx.hir().get(hir_id) {\n-            let kind = tcx.def_kind(def_id).descr(def_id);\n+            let kind = tcx.def_descr(def_id);\n             deprecation_suggestion(diag, kind, suggestion, method_span);\n         }\n         diag\n@@ -392,7 +392,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     let lint = deprecation_lint(is_in_effect);\n                     if self.lint_level_at_node(lint, id).0 != Level::Allow {\n                         let def_path = with_no_trimmed_paths!(self.def_path_str(def_id));\n-                        let def_kind = self.def_kind(def_id).descr(def_id);\n+                        let def_kind = self.def_descr(def_id);\n \n                         late_report_deprecation(\n                             self,"}, {"sha": "f347604a2cdd4516bf73b3bcbd9f9ee7af619275", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -1200,13 +1200,8 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Returns a displayable description and article for the given `def_id` (e.g. `(\"a\", \"struct\")`).\n     pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {\n-        match self.def_kind(def_id) {\n-            DefKind::Generator => match self.generator_kind(def_id).unwrap() {\n-                rustc_hir::GeneratorKind::Async(..) => (\"an\", \"async closure\"),\n-                rustc_hir::GeneratorKind::Gen => (\"a\", \"generator\"),\n-            },\n-            def_kind => (def_kind.article(), def_kind.descr(def_id)),\n-        }\n+        let kind = self.def_kind(def_id);\n+        (self.def_kind_descr_article(kind, def_id), self.def_kind_descr(kind, def_id))\n     }\n \n     pub fn type_length_limit(self) -> Limit {"}, {"sha": "cc2d7f050862da4fd154ba16723cc3023c609166", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -761,6 +761,40 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n         (generator_layout, generator_saved_local_names)\n     }\n+\n+    /// Query and get an English description for the item's kind.\n+    pub fn def_descr(self, def_id: DefId) -> &'static str {\n+        self.def_kind_descr(self.def_kind(def_id), def_id)\n+    }\n+\n+    /// Get an English description for the item's kind.\n+    pub fn def_kind_descr(self, def_kind: DefKind, def_id: DefId) -> &'static str {\n+        match def_kind {\n+            DefKind::AssocFn if self.associated_item(def_id).fn_has_self_parameter => \"method\",\n+            DefKind::Generator => match self.generator_kind(def_id).unwrap() {\n+                rustc_hir::GeneratorKind::Async(..) => \"async closure\",\n+                rustc_hir::GeneratorKind::Gen => \"generator\",\n+            },\n+            _ => def_kind.descr(def_id),\n+        }\n+    }\n+\n+    /// Gets an English article for the [`TyCtxt::def_descr`].\n+    pub fn def_descr_article(self, def_id: DefId) -> &'static str {\n+        self.def_kind_descr_article(self.def_kind(def_id), def_id)\n+    }\n+\n+    /// Gets an English article for the [`TyCtxt::def_kind_descr`].\n+    pub fn def_kind_descr_article(self, def_kind: DefKind, def_id: DefId) -> &'static str {\n+        match def_kind {\n+            DefKind::AssocFn if self.associated_item(def_id).fn_has_self_parameter => \"a\",\n+            DefKind::Generator => match self.generator_kind(def_id).unwrap() {\n+                rustc_hir::GeneratorKind::Async(..) => \"an\",\n+                rustc_hir::GeneratorKind::Gen => \"a\",\n+            },\n+            _ => def_kind.article(),\n+        }\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {"}, {"sha": "945b860d4eceda0577d50646afc3afd7bf922173", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -691,7 +691,7 @@ impl<'tcx> DeadVisitor<'tcx> {\n             })\n             .collect();\n \n-        let descr = tcx.def_kind(first_id).descr(first_id.to_def_id());\n+        let descr = tcx.def_descr(first_id.to_def_id());\n         let num = dead_codes.len();\n         let multiple = num > 6;\n         let name_list = names.into();\n@@ -703,7 +703,7 @@ impl<'tcx> DeadVisitor<'tcx> {\n         };\n \n         let parent_info = if let Some(parent_item) = parent_item {\n-            let parent_descr = tcx.def_kind(parent_item).descr(parent_item.to_def_id());\n+            let parent_descr = tcx.def_descr(parent_item.to_def_id());\n             Some(ParentInfo {\n                 num,\n                 descr,"}, {"sha": "88a55dc8319d4f0cd143778ed27c62d01679044b", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -523,7 +523,7 @@ impl<'tcx> MissingStabilityAnnotations<'tcx> {\n             && stab.is_none()\n             && self.effective_visibilities.is_reachable(def_id)\n         {\n-            let descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n+            let descr = self.tcx.def_descr(def_id.to_def_id());\n             self.tcx.sess.emit_err(errors::MissingStabilityAttr { span, descr });\n         }\n     }\n@@ -551,7 +551,7 @@ impl<'tcx> MissingStabilityAnnotations<'tcx> {\n         let is_reachable = self.effective_visibilities.is_reachable(def_id);\n \n         if is_const && is_stable && missing_const_stability_attribute && is_reachable {\n-            let descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n+            let descr = self.tcx.def_descr(def_id.to_def_id());\n             self.tcx.sess.emit_err(errors::MissingConstStabAttr { span, descr });\n         }\n     }"}, {"sha": "b2ec5b28628edd67797bd068ee6fc8f865595162", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -1329,7 +1329,7 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n                     hir::QPath::Resolved(_, path) => Some(self.tcx.def_path_str(path.res.def_id())),\n                     hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),\n                 };\n-                let kind = kind.descr(def_id);\n+                let kind = self.tcx.def_descr(def_id);\n                 let sess = self.tcx.sess;\n                 let _ = match name {\n                     Some(name) => {"}, {"sha": "82c24710c6a68415833bf0fde2a0d3413a91406a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -189,7 +189,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         let container = match parent.kind {\n-            ModuleKind::Def(kind, _, _) => kind.descr(parent.def_id()),\n+            ModuleKind::Def(kind, _, _) => self.tcx.def_kind_descr(kind, parent.def_id()),\n             ModuleKind::Block => \"block\",\n         };\n \n@@ -1804,7 +1804,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         found(\"module\")\n                     } else {\n                         match binding.res() {\n-                            Res::Def(kind, id) => found(kind.descr(id)),\n+                            Res::Def(kind, id) => found(self.tcx.def_kind_descr(kind, id)),\n                             _ => found(ns_to_try.descr()),\n                         }\n                     }"}, {"sha": "eb2fde09514cfce2e821f152745b1eefb333516a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -927,7 +927,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 DefKind::Ctor(CtorOf::Variant, _) => {\n                     \"use parentheses to construct this tuple variant\".to_string()\n                 }\n-                kind => format!(\"use parentheses to call this {}\", kind.descr(def_id)),\n+                kind => format!(\n+                    \"use parentheses to call this {}\",\n+                    self.tcx.def_kind_descr(kind, def_id)\n+                ),\n             },\n             DefIdOrName::Name(name) => format!(\"use parentheses to call this {name}\"),\n         };\n@@ -2139,7 +2142,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 err.note(&format!(\n                     \"{}s cannot be accessed directly on a `trait`, they can only be \\\n                         accessed through a specific `impl`\",\n-                    assoc_item.kind.as_def_kind().descr(item_def_id)\n+                    self.tcx.def_kind_descr(assoc_item.kind.as_def_kind(), item_def_id)\n                 ));\n                 err.span_suggestion(\n                     span,"}, {"sha": "6bdd9db9bfaf4d3969cb531a93cfabb0dc9cc839", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d056c31257cc26760b7e65c5dfdae069f7ddc74/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d056c31257cc26760b7e65c5dfdae069f7ddc74/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3d056c31257cc26760b7e65c5dfdae069f7ddc74", "patch": "@@ -775,7 +775,7 @@ pub(crate) fn link_tooltip(did: DefId, fragment: &Option<UrlFragment>, cx: &Cont\n     let fqp = fqp.iter().map(|sym| sym.as_str()).join(\"::\");\n     if let &Some(UrlFragment::Item(id)) = fragment {\n         let name = cx.tcx().item_name(id);\n-        let descr = cx.tcx().def_kind(id).descr(id);\n+        let descr = cx.tcx().def_descr(id);\n         format!(\"{descr} {fqp}::{name}\")\n     } else {\n         format!(\"{shortty} {fqp}\")"}]}