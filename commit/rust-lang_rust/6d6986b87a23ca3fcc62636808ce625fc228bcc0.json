{"sha": "6d6986b87a23ca3fcc62636808ce625fc228bcc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNjk4NmI4N2EyM2NhM2ZjYzYyNjM2ODA4Y2U2MjVmYzIyOGJjYzA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-05-12T23:29:07Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-05-13T19:23:41Z"}, "message": "save-analysis: make DefIds prettier", "tree": {"sha": "0c7a11aebf7ccdaa504c718ceadcea8a8ca2510a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c7a11aebf7ccdaa504c718ceadcea8a8ca2510a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d6986b87a23ca3fcc62636808ce625fc228bcc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6986b87a23ca3fcc62636808ce625fc228bcc0", "html_url": "https://github.com/rust-lang/rust/commit/6d6986b87a23ca3fcc62636808ce625fc228bcc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d6986b87a23ca3fcc62636808ce625fc228bcc0/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e14f011eceea613b395619d41307cf8d87be84f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e14f011eceea613b395619d41307cf8d87be84f", "html_url": "https://github.com/rust-lang/rust/commit/3e14f011eceea613b395619d41307cf8d87be84f"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "610a9ac2ad6ca18127d2b4b1aec303b526c33568", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6d6986b87a23ca3fcc62636808ce625fc228bcc0/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6986b87a23ca3fcc62636808ce625fc228bcc0/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=6d6986b87a23ca3fcc62636808ce625fc228bcc0", "patch": "@@ -36,9 +36,9 @@ impl<'b, W: Write> Drop for JsonDumper<'b, W> {\n }\n \n macro_rules! impl_fn {\n-    ($fn_name: ident, $data_type: ident, $bin: ident) => {\n+    ($fn_name: ident, $data_type: ident, $bucket: ident) => {\n         fn $fn_name(&mut self, data: $data_type) {\n-            self.result.$bin.push(From::from(data));\n+            self.result.$bucket.push(From::from(data));\n         }\n     }\n }\n@@ -105,10 +105,27 @@ impl Analysis {\n     }\n }\n \n+// DefId::index is a newtype and so the JSON serialisation is ugly. Therefore\n+// we use our own Id which is the same, but without the newtype.\n+#[derive(Debug, RustcEncodable)]\n+struct Id {\n+    krate: u32,\n+    index: u32,\n+}\n+\n+impl From<DefId> for Id {\n+    fn from(id: DefId) -> Id {\n+        Id {\n+            krate: id.krate,\n+            index: id.index.as_u32(),\n+        }\n+    }\n+}\n+\n #[derive(Debug, RustcEncodable)]\n struct Import {\n     kind: ImportKind,\n-    id: DefId,\n+    id: Id,\n     span: SpanData,\n     name: String,\n     value: String,\n@@ -125,7 +142,7 @@ impl From<ExternCrateData> for Import {\n     fn from(data: ExternCrateData) -> Import {\n         Import {\n             kind: ImportKind::ExternCrate,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             value: String::new(),\n@@ -136,7 +153,7 @@ impl From<UseData> for Import {\n     fn from(data: UseData) -> Import {\n         Import {\n             kind: ImportKind::Use,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             value: String::new(),\n@@ -147,7 +164,7 @@ impl From<UseGlobData> for Import {\n     fn from(data: UseGlobData) -> Import {\n         Import {\n             kind: ImportKind::GlobUse,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: \"*\".to_owned(),\n             value: data.names.join(\", \"),\n@@ -158,7 +175,7 @@ impl From<UseGlobData> for Import {\n #[derive(Debug, RustcEncodable)]\n struct Def {\n     kind: DefKind,\n-    id: DefId,\n+    id: Id,\n     span: SpanData,\n     name: String,\n     qualname: String,\n@@ -191,7 +208,7 @@ impl From<EnumData> for Def {\n     fn from(data: EnumData) -> Def {\n         Def {\n             kind: DefKind::Enum,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n@@ -204,7 +221,7 @@ impl From<TupleVariantData> for Def {\n     fn from(data: TupleVariantData) -> Def {\n         Def {\n             kind: DefKind::Tuple,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n@@ -216,7 +233,7 @@ impl From<StructVariantData> for Def {\n     fn from(data: StructVariantData) -> Def {\n         Def {\n             kind: DefKind::Struct,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n@@ -228,7 +245,7 @@ impl From<StructData> for Def {\n     fn from(data: StructData) -> Def {\n         Def {\n             kind: DefKind::Struct,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n@@ -240,7 +257,7 @@ impl From<TraitData> for Def {\n     fn from(data: TraitData) -> Def {\n         Def {\n             kind: DefKind::Trait,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n@@ -252,7 +269,7 @@ impl From<FunctionData> for Def {\n     fn from(data: FunctionData) -> Def {\n         Def {\n             kind: DefKind::Function,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n@@ -264,7 +281,7 @@ impl From<MethodData> for Def {\n     fn from(data: MethodData) -> Def {\n         Def {\n             kind: DefKind::Function,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n@@ -276,7 +293,7 @@ impl From<MacroData> for Def {\n     fn from(data: MacroData) -> Def {\n         Def {\n             kind: DefKind::Macro,\n-            id: null_def_id(),\n+            id: From::from(null_def_id()),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n@@ -288,7 +305,7 @@ impl From<ModData> for Def {\n     fn from(data:ModData) -> Def {\n         Def {\n             kind: DefKind::Mod,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n@@ -300,7 +317,7 @@ impl From<TypeDefData> for Def {\n     fn from(data: TypeDefData) -> Def {\n         Def {\n             kind: DefKind::Type,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n@@ -312,7 +329,7 @@ impl From<VariableData> for Def {\n     fn from(data: VariableData) -> Def {\n         Def {\n             kind: DefKind::Variable,\n-            id: data.id,\n+            id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n@@ -333,15 +350,15 @@ enum RefKind {\n struct Ref {\n     kind: RefKind,\n     span: SpanData,\n-    ref_id: DefId,\n+    ref_id: Id,\n }\n \n impl From<FunctionRefData> for Ref {\n     fn from(data: FunctionRefData) -> Ref {\n         Ref {\n             kind: RefKind::Function,\n             span: data.span,\n-            ref_id: data.ref_id,\n+            ref_id: From::from(data.ref_id),\n         }\n     }\n }\n@@ -350,7 +367,7 @@ impl From<FunctionCallData> for Ref {\n         Ref {\n             kind: RefKind::Function,\n             span: data.span,\n-            ref_id: data.ref_id,\n+            ref_id: From::from(data.ref_id),\n         }\n     }\n }\n@@ -359,7 +376,7 @@ impl From<MethodCallData> for Ref {\n         Ref {\n             kind: RefKind::Function,\n             span: data.span,\n-            ref_id: data.ref_id.or(data.decl_id).unwrap_or(null_def_id()),\n+            ref_id: From::from(data.ref_id.or(data.decl_id).unwrap_or(null_def_id())),\n         }\n     }\n }\n@@ -368,7 +385,7 @@ impl From<ModRefData> for Ref {\n         Ref {\n             kind: RefKind::Mod,\n             span: data.span,\n-            ref_id: data.ref_id.unwrap_or(null_def_id()),\n+            ref_id: From::from(data.ref_id.unwrap_or(null_def_id())),\n         }\n     }\n }\n@@ -377,7 +394,7 @@ impl From<TypeRefData> for Ref {\n         Ref {\n             kind: RefKind::Type,\n             span: data.span,\n-            ref_id: data.ref_id.unwrap_or(null_def_id()),\n+            ref_id: From::from(data.ref_id.unwrap_or(null_def_id())),\n         }\n     }\n }\n@@ -386,7 +403,7 @@ impl From<VariableRefData> for Ref {\n         Ref {\n             kind: RefKind::Variable,\n             span: data.span,\n-            ref_id: data.ref_id,\n+            ref_id: From::from(data.ref_id),\n         }\n     }\n }"}]}