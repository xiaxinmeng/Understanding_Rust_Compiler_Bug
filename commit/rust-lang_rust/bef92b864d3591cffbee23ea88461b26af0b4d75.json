{"sha": "bef92b864d3591cffbee23ea88461b26af0b4d75", "node_id": "C_kwDOAAsO6NoAKGJlZjkyYjg2NGQzNTkxY2ZmYmVlMjNlYTg4NDYxYjI2YWYwYjRkNzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-02T12:37:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-02T12:37:18Z"}, "message": "Auto merge of #8382 - tamaroning:suggest_iter_instead_of_into_iter, r=giraffate\n\n[explicit_counter_loop] suggests `.into_iter()`, despite that triggering [into_iter_on_ref] in some cases\n\nI have modified `fn make_iterator_snippet` in clippy_lints/src/loops/utils.rs ,so this change has some little influence on another lint [manual_flatten] .\n\nfixes #8155\n\n---\nchangelog: Fix that [`explicit_counter_loop`] suggests `into_iter()` despite that triggering [`into_iter_on_ref`] in some cases", "tree": {"sha": "7f4929c6846b310c056d250c107aa721cb6dcc0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f4929c6846b310c056d250c107aa721cb6dcc0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bef92b864d3591cffbee23ea88461b26af0b4d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bef92b864d3591cffbee23ea88461b26af0b4d75", "html_url": "https://github.com/rust-lang/rust/commit/bef92b864d3591cffbee23ea88461b26af0b4d75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bef92b864d3591cffbee23ea88461b26af0b4d75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf53710744e2a4868f4c6015ea7be15cd8087a45", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf53710744e2a4868f4c6015ea7be15cd8087a45", "html_url": "https://github.com/rust-lang/rust/commit/cf53710744e2a4868f4c6015ea7be15cd8087a45"}, {"sha": "f5fd9ded000d7968b6641d2b17f4eca53a4a8f67", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5fd9ded000d7968b6641d2b17f4eca53a4a8f67", "html_url": "https://github.com/rust-lang/rust/commit/f5fd9ded000d7968b6641d2b17f4eca53a4a8f67"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "b6c746d3e397116fd1e6856a8a646f696076ef53", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bef92b864d3591cffbee23ea88461b26af0b4d75/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef92b864d3591cffbee23ea88461b26af0b4d75/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=bef92b864d3591cffbee23ea88461b26af0b4d75", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::intravisit::{walk_expr, walk_local, walk_pat, walk_stmt, Visitor}\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, HirIdMap, Local, Mutability, Pat, PatKind, Stmt};\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_typeck::hir_ty_to_ty;\n@@ -332,18 +332,21 @@ pub(super) fn make_iterator_snippet(cx: &LateContext<'_>, arg: &Expr<'_>, applic\n     } else {\n         // (&x).into_iter() ==> x.iter()\n         // (&mut x).into_iter() ==> x.iter_mut()\n-        match &arg.kind {\n-            ExprKind::AddrOf(BorrowKind::Ref, mutability, arg_inner)\n-                if has_iter_method(cx, cx.typeck_results().expr_ty(arg_inner)).is_some() =>\n-            {\n-                let meth_name = match mutability {\n+        let arg_ty = cx.typeck_results().expr_ty_adjusted(arg);\n+        match &arg_ty.kind() {\n+            ty::Ref(_, inner_ty, mutbl) if has_iter_method(cx, inner_ty).is_some() => {\n+                let method_name = match mutbl {\n                     Mutability::Mut => \"iter_mut\",\n                     Mutability::Not => \"iter\",\n                 };\n+                let caller = match &arg.kind {\n+                    ExprKind::AddrOf(BorrowKind::Ref, _, arg_inner) => arg_inner,\n+                    _ => arg,\n+                };\n                 format!(\n                     \"{}.{}()\",\n-                    sugg::Sugg::hir_with_applicability(cx, arg_inner, \"_\", applic_ref).maybe_par(),\n-                    meth_name,\n+                    sugg::Sugg::hir_with_applicability(cx, caller, \"_\", applic_ref).maybe_par(),\n+                    method_name,\n                 )\n             },\n             _ => format!("}, {"sha": "f9f8407d57755481de85bad8ad47efe42eba1563", "filename": "tests/ui/explicit_counter_loop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bef92b864d3591cffbee23ea88461b26af0b4d75/tests%2Fui%2Fexplicit_counter_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef92b864d3591cffbee23ea88461b26af0b4d75/tests%2Fui%2Fexplicit_counter_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.stderr?ref=bef92b864d3591cffbee23ea88461b26af0b4d75", "patch": "@@ -46,13 +46,13 @@ error: the variable `idx_usize` is used as a loop counter\n   --> $DIR/explicit_counter_loop.rs:170:9\n    |\n LL |         for _item in slice {\n-   |         ^^^^^^^^^^^^^^^^^^ help: consider using: `for (idx_usize, _item) in slice.into_iter().enumerate()`\n+   |         ^^^^^^^^^^^^^^^^^^ help: consider using: `for (idx_usize, _item) in slice.iter().enumerate()`\n \n error: the variable `idx_u32` is used as a loop counter\n   --> $DIR/explicit_counter_loop.rs:182:9\n    |\n LL |         for _item in slice {\n-   |         ^^^^^^^^^^^^^^^^^^ help: consider using: `for (idx_u32, _item) in (0_u32..).zip(slice.into_iter())`\n+   |         ^^^^^^^^^^^^^^^^^^ help: consider using: `for (idx_u32, _item) in (0_u32..).zip(slice.iter())`\n    |\n    = note: `idx_u32` is of type `u32`, making it ineligible for `Iterator::enumerate`\n "}, {"sha": "6c5232ec5f55b7d0e59dec9373f55b4f91cd0f16", "filename": "tests/ui/manual_flatten.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bef92b864d3591cffbee23ea88461b26af0b4d75/tests%2Fui%2Fmanual_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef92b864d3591cffbee23ea88461b26af0b4d75/tests%2Fui%2Fmanual_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_flatten.rs?ref=bef92b864d3591cffbee23ea88461b26af0b4d75", "patch": "@@ -26,8 +26,6 @@ fn main() {\n     }\n \n     // Test for loop over an implicit reference\n-    // Note: if `clippy::manual_flatten` is made autofixable, this case will\n-    // lead to a follow-up lint `clippy::into_iter_on_ref`\n     let z = &y;\n     for n in z {\n         if let Ok(n) = n {"}, {"sha": "392e1a39393754214ce44a4c04bdc222b85cb6b3", "filename": "tests/ui/manual_flatten.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bef92b864d3591cffbee23ea88461b26af0b4d75/tests%2Fui%2Fmanual_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef92b864d3591cffbee23ea88461b26af0b4d75/tests%2Fui%2Fmanual_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_flatten.stderr?ref=bef92b864d3591cffbee23ea88461b26af0b4d75", "patch": "@@ -63,10 +63,10 @@ LL | |         }\n    | |_________^\n \n error: unnecessary `if let` since only the `Ok` variant of the iterator element is used\n-  --> $DIR/manual_flatten.rs:32:5\n+  --> $DIR/manual_flatten.rs:30:5\n    |\n LL |       for n in z {\n-   |       ^        - help: try: `z.into_iter().flatten()`\n+   |       ^        - help: try: `z.iter().flatten()`\n    |  _____|\n    | |\n LL | |         if let Ok(n) = n {\n@@ -76,15 +76,15 @@ LL | |     }\n    | |_____^\n    |\n help: ...and remove the `if let` statement in the for loop\n-  --> $DIR/manual_flatten.rs:33:9\n+  --> $DIR/manual_flatten.rs:31:9\n    |\n LL | /         if let Ok(n) = n {\n LL | |             println!(\"{}\", n);\n LL | |         }\n    | |_________^\n \n error: unnecessary `if let` since only the `Some` variant of the iterator element is used\n-  --> $DIR/manual_flatten.rs:41:5\n+  --> $DIR/manual_flatten.rs:39:5\n    |\n LL |       for n in z {\n    |       ^        - help: try: `z.flatten()`\n@@ -97,15 +97,15 @@ LL | |     }\n    | |_____^\n    |\n help: ...and remove the `if let` statement in the for loop\n-  --> $DIR/manual_flatten.rs:42:9\n+  --> $DIR/manual_flatten.rs:40:9\n    |\n LL | /         if let Some(m) = n {\n LL | |             println!(\"{}\", m);\n LL | |         }\n    | |_________^\n \n error: unnecessary `if let` since only the `Some` variant of the iterator element is used\n-  --> $DIR/manual_flatten.rs:74:5\n+  --> $DIR/manual_flatten.rs:72:5\n    |\n LL |       for n in &vec_of_ref {\n    |       ^        ----------- help: try: `vec_of_ref.iter().copied().flatten()`\n@@ -118,18 +118,18 @@ LL | |     }\n    | |_____^\n    |\n help: ...and remove the `if let` statement in the for loop\n-  --> $DIR/manual_flatten.rs:75:9\n+  --> $DIR/manual_flatten.rs:73:9\n    |\n LL | /         if let Some(n) = n {\n LL | |             println!(\"{:?}\", n);\n LL | |         }\n    | |_________^\n \n error: unnecessary `if let` since only the `Some` variant of the iterator element is used\n-  --> $DIR/manual_flatten.rs:81:5\n+  --> $DIR/manual_flatten.rs:79:5\n    |\n LL |       for n in vec_of_ref {\n-   |       ^        ---------- help: try: `vec_of_ref.into_iter().copied().flatten()`\n+   |       ^        ---------- help: try: `vec_of_ref.iter().copied().flatten()`\n    |  _____|\n    | |\n LL | |         if let Some(n) = n {\n@@ -139,18 +139,18 @@ LL | |     }\n    | |_____^\n    |\n help: ...and remove the `if let` statement in the for loop\n-  --> $DIR/manual_flatten.rs:82:9\n+  --> $DIR/manual_flatten.rs:80:9\n    |\n LL | /         if let Some(n) = n {\n LL | |             println!(\"{:?}\", n);\n LL | |         }\n    | |_________^\n \n error: unnecessary `if let` since only the `Some` variant of the iterator element is used\n-  --> $DIR/manual_flatten.rs:88:5\n+  --> $DIR/manual_flatten.rs:86:5\n    |\n LL |       for n in slice_of_ref {\n-   |       ^        ------------ help: try: `slice_of_ref.into_iter().copied().flatten()`\n+   |       ^        ------------ help: try: `slice_of_ref.iter().copied().flatten()`\n    |  _____|\n    | |\n LL | |         if let Some(n) = n {\n@@ -160,7 +160,7 @@ LL | |     }\n    | |_____^\n    |\n help: ...and remove the `if let` statement in the for loop\n-  --> $DIR/manual_flatten.rs:89:9\n+  --> $DIR/manual_flatten.rs:87:9\n    |\n LL | /         if let Some(n) = n {\n LL | |             println!(\"{:?}\", n);"}]}