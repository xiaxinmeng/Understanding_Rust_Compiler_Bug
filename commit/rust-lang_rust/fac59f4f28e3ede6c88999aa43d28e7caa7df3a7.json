{"sha": "fac59f4f28e3ede6c88999aa43d28e7caa7df3a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYzU5ZjRmMjhlM2VkZTZjODg5OTlhYTQzZDI4ZTdjYWE3ZGYzYTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-12T15:06:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-12T15:06:45Z"}, "message": "Merge #6195\n\n6195: Shorten iterators in associated params r=matklad a=SomeoneToIgnore\n\nApplies the same iterator-shortening logic to the iterator associated types, recursively.\r\n\r\nBefore: \r\n![image](https://user-images.githubusercontent.com/2690773/95662735-e6ecf200-0b41-11eb-8e54-28493ad4e644.png)\r\n\r\nAfter:\r\n<img width=\"1192\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2690773/95662894-e9038080-0b42-11eb-897d-527571ccac58.png\">\r\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "bbbc1905a320794c381fb7a488e40bcd2cabfbcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbbc1905a320794c381fb7a488e40bcd2cabfbcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fac59f4f28e3ede6c88999aa43d28e7caa7df3a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhHEFCRBK7hj4Ov3rIwAAdHIIAJDUJwRbv+e3hMJMfGnvFb6Y\nIvI7bzi/WCkalcSlNvfXqona1jeaHXCmf1YcqrMVUNL3AzXrL/jRXLd5JUmqVeWu\njwtd6bsCTSP5/rZ8HWBL+mJEHiaoZbOakY7l8zCU5YzFfOgnSXmPyPSsxETTY4Dp\nFH21OkAF2PEZqNf1DOhRq5Ud5osDhPJjphw9lT2gl0/Ny5hmA2Q/jODoLZqtN+8H\nlAQqO8KaOtMZMQRtfnxiEAdMqUlgQdLQcgpu8Q9tB+wdn5PvneMi6MZar0oyCe4A\nHKnNjG6WvXCABa8+bXZBBg0TCnZloangRxv7pnkVNIMAiejVwCPf0PwrJag/eaU=\n=7CH2\n-----END PGP SIGNATURE-----\n", "payload": "tree bbbc1905a320794c381fb7a488e40bcd2cabfbcc\nparent 44df0e2a9febc3caece861f2ddbbc6ff377ccb54\nparent 2bb80a4f0350045503258518d354a4e63e4c68fd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1602515205 +0000\ncommitter GitHub <noreply@github.com> 1602515205 +0000\n\nMerge #6195\n\n6195: Shorten iterators in associated params r=matklad a=SomeoneToIgnore\n\nApplies the same iterator-shortening logic to the iterator associated types, recursively.\r\n\r\nBefore: \r\n![image](https://user-images.githubusercontent.com/2690773/95662735-e6ecf200-0b41-11eb-8e54-28493ad4e644.png)\r\n\r\nAfter:\r\n<img width=\"1192\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2690773/95662894-e9038080-0b42-11eb-897d-527571ccac58.png\">\r\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fac59f4f28e3ede6c88999aa43d28e7caa7df3a7", "html_url": "https://github.com/rust-lang/rust/commit/fac59f4f28e3ede6c88999aa43d28e7caa7df3a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fac59f4f28e3ede6c88999aa43d28e7caa7df3a7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44df0e2a9febc3caece861f2ddbbc6ff377ccb54", "url": "https://api.github.com/repos/rust-lang/rust/commits/44df0e2a9febc3caece861f2ddbbc6ff377ccb54", "html_url": "https://github.com/rust-lang/rust/commit/44df0e2a9febc3caece861f2ddbbc6ff377ccb54"}, {"sha": "2bb80a4f0350045503258518d354a4e63e4c68fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb80a4f0350045503258518d354a4e63e4c68fd", "html_url": "https://github.com/rust-lang/rust/commit/2bb80a4f0350045503258518d354a4e63e4c68fd"}], "stats": {"total": 83, "additions": 53, "deletions": 30}, "files": [{"sha": "a101d724e4616d8794c462bbb48301e0a0cd85af", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fac59f4f28e3ede6c88999aa43d28e7caa7df3a7/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac59f4f28e3ede6c88999aa43d28e7caa7df3a7/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=fac59f4f28e3ede6c88999aa43d28e7caa7df3a7", "patch": "@@ -1389,7 +1389,7 @@ impl Type {\n         r#trait: Trait,\n         args: &[Type],\n         alias: TypeAlias,\n-    ) -> Option<Ty> {\n+    ) -> Option<Type> {\n         let subst = Substs::build_for_def(db, r#trait.id)\n             .push(self.ty.value.clone())\n             .fill(args.iter().map(|t| t.ty.value.clone()))\n@@ -1410,6 +1410,10 @@ impl Type {\n             Solution::Unique(SolutionVariables(subst)) => subst.value.first().cloned(),\n             Solution::Ambig(_) => None,\n         }\n+        .map(|ty| Type {\n+            krate: self.krate,\n+            ty: InEnvironment { value: ty, environment: Arc::clone(&self.ty.environment) },\n+        })\n     }\n \n     pub fn is_copy(&self, db: &dyn HirDatabase) -> bool {"}, {"sha": "2ed84095da1960957402a500cff06bedeb89e07a", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 48, "deletions": 29, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/fac59f4f28e3ede6c88999aa43d28e7caa7df3a7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac59f4f28e3ede6c88999aa43d28e7caa7df3a7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=fac59f4f28e3ede6c88999aa43d28e7caa7df3a7", "patch": "@@ -231,12 +231,17 @@ fn hint_iterator(\n             const LABEL_START: &str = \"impl Iterator<Item = \";\n             const LABEL_END: &str = \">\";\n \n-            let ty_display = ty.display_truncated(\n-                db,\n-                config\n-                    .max_length\n-                    .map(|len| len.saturating_sub(LABEL_START.len() + LABEL_END.len())),\n-            );\n+            let ty_display = hint_iterator(sema, config, &ty)\n+                .map(|assoc_type_impl| assoc_type_impl.to_string())\n+                .unwrap_or_else(|| {\n+                    ty.display_truncated(\n+                        db,\n+                        config\n+                            .max_length\n+                            .map(|len| len.saturating_sub(LABEL_START.len() + LABEL_END.len())),\n+                    )\n+                    .to_string()\n+                });\n             return Some(format!(\"{}{}{}\", LABEL_START, ty_display, LABEL_END).into());\n         }\n     }\n@@ -1002,18 +1007,6 @@ fn main() {\n \n     println!(\"Unit expr\");\n }\n-\n-//- /alloc.rs crate:alloc deps:core\n-mod collections {\n-    struct Vec<T> {}\n-    impl<T> Vec<T> {\n-        fn new() -> Self { Vec {} }\n-        fn push(&mut self, t: T) { }\n-    }\n-    impl<T> IntoIterator for Vec<T> {\n-        type Item=T;\n-    }\n-}\n \"#,\n         );\n     }\n@@ -1043,17 +1036,6 @@ fn main() {\n         //^ &str\n     }\n }\n-//- /alloc.rs crate:alloc deps:core\n-mod collections {\n-    struct Vec<T> {}\n-    impl<T> Vec<T> {\n-        fn new() -> Self { Vec {} }\n-        fn push(&mut self, t: T) { }\n-    }\n-    impl<T> IntoIterator for Vec<T> {\n-        type Item=T;\n-    }\n-}\n \"#,\n         );\n     }\n@@ -1183,4 +1165,41 @@ fn main() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn shorten_iterators_in_associated_params() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: true,\n+                chaining_hints: false,\n+                max_length: None,\n+            },\n+            r#\"\n+use core::iter;\n+\n+pub struct SomeIter<T> {}\n+\n+impl<T> SomeIter<T> {\n+    pub fn new() -> Self { SomeIter {} }\n+    pub fn push(&mut self, t: T) {}\n+}\n+\n+impl<T> Iterator for SomeIter<T> {\n+    type Item = T;\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    let mut some_iter = SomeIter::new();\n+      //^^^^^^^^^^^^^ SomeIter<Take<Repeat<i32>>>\n+      some_iter.push(iter::repeat(2).take(2));\n+    let iter_of_iters = some_iter.take(2);\n+      //^^^^^^^^^^^^^ impl Iterator<Item = impl Iterator<Item = i32>>\n+}\n+\"#,\n+        );\n+    }\n }"}]}