{"sha": "e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MGMyZmJkNWNiZThiZjE3NmYxZWQwMWJhOWE1M2NlYzdlODQyYTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-02T11:23:15Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-02T11:23:15Z"}, "message": "liballoc: elide some lifetimes.", "tree": {"sha": "df0f306048f4d711a4fd090c294a3606e750ae9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df0f306048f4d711a4fd090c294a3606e750ae9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "html_url": "https://github.com/rust-lang/rust/commit/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "748970dfa9c12c1a09da4ff3ec724e4dbf7e796d", "url": "https://api.github.com/repos/rust-lang/rust/commits/748970dfa9c12c1a09da4ff3ec724e4dbf7e796d", "html_url": "https://github.com/rust-lang/rust/commit/748970dfa9c12c1a09da4ff3ec724e4dbf7e796d"}], "stats": {"total": 245, "additions": 119, "deletions": 126}, "files": [{"sha": "816cdbc9ce6734b643def6eaed0df836ac910bc8", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "patch": "@@ -183,9 +183,7 @@ pub enum Cow<'a, B: ?Sized + 'a>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: ?Sized> Clone for Cow<'a, B>\n-    where B: ToOwned\n-{\n+impl<'a, B: ?Sized + ToOwned> Clone for Cow<'a, B> {\n     fn clone(&self) -> Cow<'a, B> {\n         match *self {\n             Borrowed(b) => Borrowed(b),\n@@ -208,9 +206,7 @@ impl<'a, B: ?Sized> Clone for Cow<'a, B>\n     }\n }\n \n-impl<'a, B: ?Sized> Cow<'a, B>\n-    where B: ToOwned\n-{\n+impl<B: ?Sized + ToOwned> Cow<'_, B> {\n     /// Acquires a mutable reference to the owned form of the data.\n     ///\n     /// Clones the data if it is not already owned.\n@@ -286,9 +282,7 @@ impl<'a, B: ?Sized> Cow<'a, B>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: ?Sized> Deref for Cow<'a, B>\n-    where B: ToOwned\n-{\n+impl<B: ?Sized + ToOwned> Deref for Cow<'_, B> {\n     type Target = B;\n \n     fn deref(&self) -> &B {\n@@ -300,7 +294,7 @@ impl<'a, B: ?Sized> Deref for Cow<'a, B>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: ?Sized> Eq for Cow<'a, B> where B: Eq + ToOwned {}\n+impl<B: ?Sized> Eq for Cow<'_, B> where B: Eq + ToOwned {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, B: ?Sized> Ord for Cow<'a, B>\n@@ -334,7 +328,7 @@ impl<'a, B: ?Sized> PartialOrd for Cow<'a, B>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: ?Sized> fmt::Debug for Cow<'a, B>\n+impl<B: ?Sized> fmt::Debug for Cow<'_, B>\n     where B: fmt::Debug + ToOwned,\n           <B as ToOwned>::Owned: fmt::Debug\n {\n@@ -347,7 +341,7 @@ impl<'a, B: ?Sized> fmt::Debug for Cow<'a, B>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: ?Sized> fmt::Display for Cow<'a, B>\n+impl<B: ?Sized> fmt::Display for Cow<'_, B>\n     where B: fmt::Display + ToOwned,\n           <B as ToOwned>::Owned: fmt::Display\n {\n@@ -381,7 +375,7 @@ impl<'a, B: ?Sized> Hash for Cow<'a, B>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized + ToOwned> AsRef<T> for Cow<'a, T> {\n+impl<T: ?Sized + ToOwned> AsRef<T> for Cow<'_, T> {\n     fn as_ref(&self) -> &T {\n         self\n     }"}, {"sha": "6f6fff0a657d0abfd9361c2a1395b3c478a6e8cb", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "patch": "@@ -739,7 +739,7 @@ impl<A, F> FnBox<A> for F\n \n #[unstable(feature = \"fnbox\",\n            reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n-impl<'a, A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + 'a> {\n+impl<A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + '_> {\n     type Output = R;\n \n     extern \"rust-call\" fn call_once(self, args: A) -> R {\n@@ -749,7 +749,7 @@ impl<'a, A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + 'a> {\n \n #[unstable(feature = \"fnbox\",\n            reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n-impl<'a, A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + Send + 'a> {\n+impl<A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + Send + '_> {\n     type Output = R;\n \n     extern \"rust-call\" fn call_once(self, args: A) -> R {"}, {"sha": "43416e57591bcb18e3c0b3f8289f0bca96f4f040", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "patch": "@@ -231,7 +231,7 @@ pub struct PeekMut<'a, T: 'a + Ord> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: Ord + fmt::Debug> fmt::Debug for PeekMut<'a, T> {\n+impl<T: Ord + fmt::Debug> fmt::Debug for PeekMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"PeekMut\")\n          .field(&self.heap.data[0])\n@@ -240,7 +240,7 @@ impl<'a, T: Ord + fmt::Debug> fmt::Debug for PeekMut<'a, T> {\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<'a, T: Ord> Drop for PeekMut<'a, T> {\n+impl<T: Ord> Drop for PeekMut<'_, T> {\n     fn drop(&mut self) {\n         if self.sift {\n             self.heap.sift_down(0);\n@@ -249,15 +249,15 @@ impl<'a, T: Ord> Drop for PeekMut<'a, T> {\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<'a, T: Ord> Deref for PeekMut<'a, T> {\n+impl<T: Ord> Deref for PeekMut<'_, T> {\n     type Target = T;\n     fn deref(&self) -> &T {\n         &self.heap.data[0]\n     }\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<'a, T: Ord> DerefMut for PeekMut<'a, T> {\n+impl<T: Ord> DerefMut for PeekMut<'_, T> {\n     fn deref_mut(&mut self) -> &mut T {\n         &mut self.heap.data[0]\n     }\n@@ -912,7 +912,7 @@ impl<'a, T> Hole<'a, T> {\n     }\n }\n \n-impl<'a, T> Drop for Hole<'a, T> {\n+impl<T> Drop for Hole<'_, T> {\n     #[inline]\n     fn drop(&mut self) {\n         // fill the hole again\n@@ -936,7 +936,7 @@ pub struct Iter<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"Iter\")\n          .field(&self.iter.as_slice())\n@@ -976,14 +976,14 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n+impl<T> ExactSizeIterator for Iter<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.iter.is_empty()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Iter<'a, T> {}\n+impl<T> FusedIterator for Iter<'_, T> {}\n \n /// An owning iterator over the elements of a `BinaryHeap`.\n ///\n@@ -1054,7 +1054,7 @@ pub struct Drain<'a, T: 'a> {\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T: 'a> Iterator for Drain<'a, T> {\n+impl<T> Iterator for Drain<'_, T> {\n     type Item = T;\n \n     #[inline]\n@@ -1069,22 +1069,22 @@ impl<'a, T: 'a> Iterator for Drain<'a, T> {\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n+impl<T> DoubleEndedIterator for Drain<'_, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back()\n     }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {\n+impl<T> ExactSizeIterator for Drain<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.iter.is_empty()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T: 'a> FusedIterator for Drain<'a, T> {}\n+impl<T> FusedIterator for Drain<'_, T> {}\n \n #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n impl<T: Ord> From<Vec<T>> for BinaryHeap<T> {"}, {"sha": "27f162b114736895213bf439730040c8258e6de7", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "patch": "@@ -279,7 +279,7 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Iter<'a, K, V> {\n+impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Iter<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n@@ -337,7 +337,7 @@ pub struct Keys<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, K: 'a + fmt::Debug, V: 'a> fmt::Debug for Keys<'a, K, V> {\n+impl<K: fmt::Debug, V> fmt::Debug for Keys<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n@@ -356,7 +356,7 @@ pub struct Values<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, K: 'a, V: 'a + fmt::Debug> fmt::Debug for Values<'a, K, V> {\n+impl<K, V: fmt::Debug> fmt::Debug for Values<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n@@ -389,7 +389,7 @@ pub struct Range<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Range<'a, K, V> {\n+impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Range<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n@@ -412,7 +412,7 @@ pub struct RangeMut<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for RangeMut<'a, K, V> {\n+impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for RangeMut<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let range = Range {\n             front: self.front.reborrow(),\n@@ -442,7 +442,7 @@ pub enum Entry<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature= \"debug_btree_map\", since = \"1.12.0\")]\n-impl<'a, K: 'a + Debug + Ord, V: 'a + Debug> Debug for Entry<'a, K, V> {\n+impl<K: Debug + Ord, V: Debug> Debug for Entry<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             Vacant(ref v) => f.debug_tuple(\"Entry\")\n@@ -470,7 +470,7 @@ pub struct VacantEntry<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature= \"debug_btree_map\", since = \"1.12.0\")]\n-impl<'a, K: 'a + Debug + Ord, V: 'a> Debug for VacantEntry<'a, K, V> {\n+impl<K: Debug + Ord, V> Debug for VacantEntry<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"VacantEntry\")\n          .field(self.key())\n@@ -493,7 +493,7 @@ pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature= \"debug_btree_map\", since = \"1.12.0\")]\n-impl<'a, K: 'a + Debug + Ord, V: 'a + Debug> Debug for OccupiedEntry<'a, K, V> {\n+impl<K: Debug + Ord, V: Debug> Debug for OccupiedEntry<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"OccupiedEntry\")\n          .field(\"key\", self.key())\n@@ -1202,7 +1202,7 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for Iter<'a, K, V> {}\n+impl<K, V> FusedIterator for Iter<'_, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> DoubleEndedIterator for Iter<'a, K, V> {\n@@ -1217,7 +1217,7 @@ impl<'a, K: 'a, V: 'a> DoubleEndedIterator for Iter<'a, K, V> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K: 'a, V: 'a> ExactSizeIterator for Iter<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Iter<'_, K, V> {\n     fn len(&self) -> usize {\n         self.length\n     }\n@@ -1274,14 +1274,14 @@ impl<'a, K: 'a, V: 'a> DoubleEndedIterator for IterMut<'a, K, V> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K: 'a, V: 'a> ExactSizeIterator for IterMut<'a, K, V> {\n+impl<K, V> ExactSizeIterator for IterMut<'_, K, V> {\n     fn len(&self) -> usize {\n         self.length\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for IterMut<'a, K, V> {}\n+impl<K, V> FusedIterator for IterMut<'_, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> IntoIterator for BTreeMap<K, V> {\n@@ -1437,14 +1437,14 @@ impl<'a, K, V> DoubleEndedIterator for Keys<'a, K, V> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Keys<'_, K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for Keys<'a, K, V> {}\n+impl<K, V> FusedIterator for Keys<'_, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Keys<'a, K, V> {\n@@ -1474,14 +1474,14 @@ impl<'a, K, V> DoubleEndedIterator for Values<'a, K, V> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Values<'_, K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for Values<'a, K, V> {}\n+impl<K, V> FusedIterator for Values<'_, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Values<'a, K, V> {\n@@ -1524,15 +1524,14 @@ impl<'a, K, V> DoubleEndedIterator for ValuesMut<'a, K, V> {\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n-impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> {\n+impl<K, V> ExactSizeIterator for ValuesMut<'_, K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for ValuesMut<'a, K, V> {}\n-\n+impl<K, V> FusedIterator for ValuesMut<'_, K, V> {}\n \n impl<'a, K, V> Range<'a, K, V> {\n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n@@ -1610,7 +1609,7 @@ impl<'a, K, V> Range<'a, K, V> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for Range<'a, K, V> {}\n+impl<K, V> FusedIterator for Range<'_, K, V> {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> Clone for Range<'a, K, V> {\n@@ -1679,7 +1678,7 @@ impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for RangeMut<'a, K, V> {}\n+impl<K, V> FusedIterator for RangeMut<'_, K, V> {}\n \n impl<'a, K, V> RangeMut<'a, K, V> {\n     unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n@@ -1790,7 +1789,7 @@ impl<K: Debug, V: Debug> Debug for BTreeMap<K, V> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K: Ord, Q: ?Sized, V> Index<&'a Q> for BTreeMap<K, V>\n+impl<K: Ord, Q: ?Sized, V> Index<&Q> for BTreeMap<K, V>\n     where K: Borrow<Q>,\n           Q: Ord\n {"}, {"sha": "9c50bd7e91866b5540d6fcdf4de52476bcba61d3", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "patch": "@@ -79,7 +79,7 @@ pub struct Iter<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"Iter\")\n          .field(&self.iter.clone())\n@@ -127,7 +127,7 @@ pub struct Difference<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Difference<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for Difference<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"Difference\")\n          .field(&self.a)\n@@ -150,7 +150,7 @@ pub struct SymmetricDifference<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for SymmetricDifference<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for SymmetricDifference<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"SymmetricDifference\")\n          .field(&self.a)\n@@ -173,7 +173,7 @@ pub struct Intersection<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Intersection<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for Intersection<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"Intersection\")\n          .field(&self.a)\n@@ -196,7 +196,7 @@ pub struct Union<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Union<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for Union<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"Union\")\n          .field(&self.a)\n@@ -812,7 +812,7 @@ impl<T: Ord> Default for BTreeSet<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b, T: Ord + Clone> Sub<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n+impl<T: Ord + Clone> Sub<&BTreeSet<T>> for &BTreeSet<T> {\n     type Output = BTreeSet<T>;\n \n     /// Returns the difference of `self` and `rhs` as a new `BTreeSet<T>`.\n@@ -835,7 +835,7 @@ impl<'a, 'b, T: Ord + Clone> Sub<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b, T: Ord + Clone> BitXor<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n+impl<T: Ord + Clone> BitXor<&BTreeSet<T>> for &BTreeSet<T> {\n     type Output = BTreeSet<T>;\n \n     /// Returns the symmetric difference of `self` and `rhs` as a new `BTreeSet<T>`.\n@@ -858,7 +858,7 @@ impl<'a, 'b, T: Ord + Clone> BitXor<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b, T: Ord + Clone> BitAnd<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n+impl<T: Ord + Clone> BitAnd<&BTreeSet<T>> for &BTreeSet<T> {\n     type Output = BTreeSet<T>;\n \n     /// Returns the intersection of `self` and `rhs` as a new `BTreeSet<T>`.\n@@ -881,7 +881,7 @@ impl<'a, 'b, T: Ord + Clone> BitAnd<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b, T: Ord + Clone> BitOr<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n+impl<T: Ord + Clone> BitOr<&BTreeSet<T>> for &BTreeSet<T> {\n     type Output = BTreeSet<T>;\n \n     /// Returns the union of `self` and `rhs` as a new `BTreeSet<T>`.\n@@ -934,12 +934,12 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n+impl<T> ExactSizeIterator for Iter<'_, T> {\n     fn len(&self) -> usize { self.iter.len() }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Iter<'a, T> {}\n+impl<T> FusedIterator for Iter<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Iterator for IntoIter<T> {\n@@ -990,7 +990,7 @@ impl<'a, T> DoubleEndedIterator for Range<'a, T> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Range<'a, T> {}\n+impl<T> FusedIterator for Range<'_, T> {}\n \n /// Compare `x` and `y`, but return `short` if x is None and `long` if y is None\n fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>, short: Ordering, long: Ordering) -> Ordering {\n@@ -1037,7 +1037,7 @@ impl<'a, T: Ord> Iterator for Difference<'a, T> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T: Ord> FusedIterator for Difference<'a, T> {}\n+impl<T: Ord> FusedIterator for Difference<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for SymmetricDifference<'a, T> {\n@@ -1071,7 +1071,7 @@ impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T: Ord> FusedIterator for SymmetricDifference<'a, T> {}\n+impl<T: Ord> FusedIterator for SymmetricDifference<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Intersection<'a, T> {\n@@ -1109,7 +1109,7 @@ impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T: Ord> FusedIterator for Intersection<'a, T> {}\n+impl<T: Ord> FusedIterator for Intersection<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Union<'a, T> {\n@@ -1143,4 +1143,4 @@ impl<'a, T: Ord> Iterator for Union<'a, T> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T: Ord> FusedIterator for Union<'a, T> {}\n+impl<T: Ord> FusedIterator for Union<'_, T> {}"}, {"sha": "e2da0041b4a8d0a02c1ac73aecb1074cfbfd0b2a", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "patch": "@@ -63,7 +63,7 @@ pub struct Iter<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"Iter\")\n          .field(&self.len)\n@@ -73,7 +73,7 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Iter<'a, T> {\n+impl<T> Clone for Iter<'_, T> {\n     fn clone(&self) -> Self {\n         Iter { ..*self }\n     }\n@@ -95,7 +95,7 @@ pub struct IterMut<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"IterMut\")\n          .field(&self.list)\n@@ -834,10 +834,10 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n+impl<T> ExactSizeIterator for Iter<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Iter<'a, T> {}\n+impl<T> FusedIterator for Iter<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Iterator for IterMut<'a, T> {\n@@ -883,12 +883,12 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n+impl<T> ExactSizeIterator for IterMut<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for IterMut<'a, T> {}\n+impl<T> FusedIterator for IterMut<'_, T> {}\n \n-impl<'a, T> IterMut<'a, T> {\n+impl<T> IterMut<'_, T> {\n     /// Inserts the given element just after the element most recently returned by `.next()`.\n     /// The inserted element does not appear in the iteration.\n     ///\n@@ -984,7 +984,7 @@ pub struct DrainFilter<'a, T: 'a, F: 'a>\n }\n \n #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n-impl<'a, T, F> Iterator for DrainFilter<'a, T, F>\n+impl<T, F> Iterator for DrainFilter<'_, T, F>\n     where F: FnMut(&mut T) -> bool,\n {\n     type Item = T;\n@@ -1011,7 +1011,7 @@ impl<'a, T, F> Iterator for DrainFilter<'a, T, F>\n }\n \n #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n-impl<'a, T, F> Drop for DrainFilter<'a, T, F>\n+impl<T, F> Drop for DrainFilter<'_, T, F>\n     where F: FnMut(&mut T) -> bool,\n {\n     fn drop(&mut self) {\n@@ -1020,7 +1020,7 @@ impl<'a, T, F> Drop for DrainFilter<'a, T, F>\n }\n \n #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n-impl<'a, T: 'a + fmt::Debug, F> fmt::Debug for DrainFilter<'a, T, F>\n+impl<T: fmt::Debug, F> fmt::Debug for DrainFilter<'_, T, F>\n     where F: FnMut(&mut T) -> bool\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "abfb83d4139e15382453dcfb8a6c1653c0f90388", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "patch": "@@ -2086,7 +2086,7 @@ trait RingSlices: Sized {\n     }\n }\n \n-impl<'a, T> RingSlices for &'a [T] {\n+impl<T> RingSlices for &[T] {\n     fn slice(self, from: usize, to: usize) -> Self {\n         &self[from..to]\n     }\n@@ -2095,7 +2095,7 @@ impl<'a, T> RingSlices for &'a [T] {\n     }\n }\n \n-impl<'a, T> RingSlices for &'a mut [T] {\n+impl<T> RingSlices for &mut [T] {\n     fn slice(self, from: usize, to: usize) -> Self {\n         &mut self[from..to]\n     }\n@@ -2126,7 +2126,7 @@ pub struct Iter<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n         f.debug_tuple(\"Iter\")\n@@ -2206,14 +2206,14 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n+impl<T> ExactSizeIterator for Iter<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.head == self.tail\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Iter<'a, T> {}\n+impl<T> FusedIterator for Iter<'_, T> {}\n \n \n /// A mutable iterator over the elements of a `VecDeque`.\n@@ -2231,7 +2231,7 @@ pub struct IterMut<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n+impl<'a, T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let (front, back) = RingSlices::ring_slices(&*self.ring, self.head, self.tail);\n         f.debug_tuple(\"IterMut\")\n@@ -2299,14 +2299,14 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for IterMut<'a, T> {\n+impl<T> ExactSizeIterator for IterMut<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.head == self.tail\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for IterMut<'a, T> {}\n+impl<T> FusedIterator for IterMut<'_, T> {}\n \n /// An owning iterator over the elements of a `VecDeque`.\n ///\n@@ -2380,7 +2380,7 @@ pub struct Drain<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for Drain<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"Drain\")\n          .field(&self.after_tail)\n@@ -2391,12 +2391,12 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n+unsafe impl<T: Sync> Sync for Drain<'_, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-unsafe impl<'a, T: Send> Send for Drain<'a, T> {}\n+unsafe impl<T: Send> Send for Drain<'_, T> {}\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T: 'a> Drop for Drain<'a, T> {\n+impl<T> Drop for Drain<'_, T> {\n     fn drop(&mut self) {\n         self.for_each(drop);\n \n@@ -2443,7 +2443,7 @@ impl<'a, T: 'a> Drop for Drain<'a, T> {\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T: 'a> Iterator for Drain<'a, T> {\n+impl<T> Iterator for Drain<'_, T> {\n     type Item = T;\n \n     #[inline]\n@@ -2458,18 +2458,18 @@ impl<'a, T: 'a> Iterator for Drain<'a, T> {\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n+impl<T> DoubleEndedIterator for Drain<'_, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back().map(|elt| unsafe { ptr::read(elt) })\n     }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n+impl<T> ExactSizeIterator for Drain<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T: 'a> FusedIterator for Drain<'a, T> {}\n+impl<T> FusedIterator for Drain<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: PartialEq> PartialEq for VecDeque<A> {\n@@ -2519,7 +2519,7 @@ macro_rules! __impl_slice_eq1 {\n     };\n     ($Lhs: ty, $Rhs: ty, $Bound: ident) => {\n         #[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]\n-        impl<'a, 'b, A: $Bound, B> PartialEq<$Rhs> for $Lhs where A: PartialEq<B> {\n+        impl<A: $Bound, B> PartialEq<$Rhs> for $Lhs where A: PartialEq<B> {\n             fn eq(&self, other: &$Rhs) -> bool {\n                 if self.len() != other.len() {\n                     return false;\n@@ -2533,15 +2533,15 @@ macro_rules! __impl_slice_eq1 {\n }\n \n __impl_slice_eq1! { VecDeque<A>, Vec<B> }\n-__impl_slice_eq1! { VecDeque<A>, &'b [B] }\n-__impl_slice_eq1! { VecDeque<A>, &'b mut [B] }\n+__impl_slice_eq1! { VecDeque<A>, &[B] }\n+__impl_slice_eq1! { VecDeque<A>, &mut [B] }\n \n macro_rules! array_impls {\n     ($($N: expr)+) => {\n         $(\n             __impl_slice_eq1! { VecDeque<A>, [B; $N] }\n-            __impl_slice_eq1! { VecDeque<A>, &'b [B; $N] }\n-            __impl_slice_eq1! { VecDeque<A>, &'b mut [B; $N] }\n+            __impl_slice_eq1! { VecDeque<A>, &[B; $N] }\n+            __impl_slice_eq1! { VecDeque<A>, &mut [B; $N] }\n         )+\n     }\n }"}, {"sha": "92d3e52d60c73efaf514fe3d8a06eb8114963a07", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "patch": "@@ -1935,7 +1935,7 @@ impl hash::Hash for String {\n /// let c = a.to_string() + b;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Add<&'a str> for String {\n+impl Add<&str> for String {\n     type Output = String;\n \n     #[inline]\n@@ -1949,7 +1949,7 @@ impl<'a> Add<&'a str> for String {\n ///\n /// This has the same behavior as the [`push_str`][String::push_str] method.\n #[stable(feature = \"stringaddassign\", since = \"1.12.0\")]\n-impl<'a> AddAssign<&'a str> for String {\n+impl AddAssign<&str> for String {\n     #[inline]\n     fn add_assign(&mut self, other: &str) {\n         self.push_str(other);\n@@ -2183,7 +2183,7 @@ impl ToString for str {\n }\n \n #[stable(feature = \"cow_str_to_string_specialization\", since = \"1.17.0\")]\n-impl<'a> ToString for Cow<'a, str> {\n+impl ToString for Cow<'_, str> {\n     #[inline]\n     fn to_string(&self) -> String {\n         self[..].to_owned()\n@@ -2373,19 +2373,19 @@ pub struct Drain<'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a> fmt::Debug for Drain<'a> {\n+impl fmt::Debug for Drain<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"Drain { .. }\")\n     }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-unsafe impl<'a> Sync for Drain<'a> {}\n+unsafe impl Sync for Drain<'_> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-unsafe impl<'a> Send for Drain<'a> {}\n+unsafe impl Send for Drain<'_> {}\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a> Drop for Drain<'a> {\n+impl Drop for Drain<'_> {\n     fn drop(&mut self) {\n         unsafe {\n             // Use Vec::drain. \"Reaffirm\" the bounds checks to avoid\n@@ -2399,7 +2399,7 @@ impl<'a> Drop for Drain<'a> {\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a> Iterator for Drain<'a> {\n+impl Iterator for Drain<'_> {\n     type Item = char;\n \n     #[inline]\n@@ -2413,12 +2413,12 @@ impl<'a> Iterator for Drain<'a> {\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a> DoubleEndedIterator for Drain<'a> {\n+impl DoubleEndedIterator for Drain<'_> {\n     #[inline]\n     fn next_back(&mut self) -> Option<char> {\n         self.iter.next_back()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for Drain<'a> {}\n+impl FusedIterator for Drain<'_> {}"}, {"sha": "2512e27e316b753da4c41b32c56a022bcbd06bae", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "patch": "@@ -1605,15 +1605,15 @@ impl<T> From<T> for Arc<T> {\n }\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n-impl<'a, T: Clone> From<&'a [T]> for Arc<[T]> {\n+impl<T: Clone> From<&[T]> for Arc<[T]> {\n     #[inline]\n     fn from(v: &[T]) -> Arc<[T]> {\n         <Self as ArcFromSlice<T>>::from_slice(v)\n     }\n }\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n-impl<'a> From<&'a str> for Arc<str> {\n+impl From<&str> for Arc<str> {\n     #[inline]\n     fn from(v: &str) -> Arc<str> {\n         let arc = Arc::<[u8]>::from(v.as_bytes());"}, {"sha": "e8fea287e1cb48583e11e59df2dd4a13f25f840f", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "patch": "@@ -10,7 +10,7 @@ struct DropCounter<'a> {\n     count: &'a mut u32,\n }\n \n-impl<'a> Drop for DropCounter<'a> {\n+impl Drop for DropCounter<'_> {\n     fn drop(&mut self) {\n         *self.count += 1;\n     }"}, {"sha": "313aa55a2b28eaf251f9d9eda25456402f4580cc", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "patch": "@@ -1003,7 +1003,7 @@ struct DropCounter<'a> {\n     count: &'a mut u32,\n }\n \n-impl<'a> Drop for DropCounter<'a> {\n+impl Drop for DropCounter<'_> {\n     fn drop(&mut self) {\n         *self.count += 1;\n     }"}, {"sha": "b43ba6cb57cad310fe8123655e1cf78ecd742cb1", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=e70c2fbd5cbe8bf176f1ed01ba9a53cec7e842a5", "patch": "@@ -1481,7 +1481,7 @@ impl<'a> SetLenOnDrop<'a> {\n     }\n }\n \n-impl<'a> Drop for SetLenOnDrop<'a> {\n+impl Drop for SetLenOnDrop<'_> {\n     #[inline]\n     fn drop(&mut self) {\n         *self.len = self.local_len;\n@@ -2471,12 +2471,12 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n+unsafe impl<T: Sync> Sync for Drain<'_, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-unsafe impl<'a, T: Send> Send for Drain<'a, T> {}\n+unsafe impl<T: Send> Send for Drain<'_, T> {}\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T> Iterator for Drain<'a, T> {\n+impl<T> Iterator for Drain<'_, T> {\n     type Item = T;\n \n     #[inline]\n@@ -2490,15 +2490,15 @@ impl<'a, T> Iterator for Drain<'a, T> {\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T> DoubleEndedIterator for Drain<'a, T> {\n+impl<T> DoubleEndedIterator for Drain<'_, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back().map(|elt| unsafe { ptr::read(elt as *const _) })\n     }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T> Drop for Drain<'a, T> {\n+impl<T> Drop for Drain<'_, T> {\n     fn drop(&mut self) {\n         // exhaust self first\n         self.for_each(drop);\n@@ -2522,14 +2522,14 @@ impl<'a, T> Drop for Drain<'a, T> {\n \n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T> ExactSizeIterator for Drain<'a, T> {\n+impl<T> ExactSizeIterator for Drain<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.iter.is_empty()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Drain<'a, T> {}\n+impl<T> FusedIterator for Drain<'_, T> {}\n \n /// A splicing iterator for `Vec`.\n ///\n@@ -2546,7 +2546,7 @@ pub struct Splice<'a, I: Iterator + 'a> {\n }\n \n #[stable(feature = \"vec_splice\", since = \"1.21.0\")]\n-impl<'a, I: Iterator> Iterator for Splice<'a, I> {\n+impl<I: Iterator> Iterator for Splice<'_, I> {\n     type Item = I::Item;\n \n     fn next(&mut self) -> Option<Self::Item> {\n@@ -2559,18 +2559,18 @@ impl<'a, I: Iterator> Iterator for Splice<'a, I> {\n }\n \n #[stable(feature = \"vec_splice\", since = \"1.21.0\")]\n-impl<'a, I: Iterator> DoubleEndedIterator for Splice<'a, I> {\n+impl<I: Iterator> DoubleEndedIterator for Splice<'_, I> {\n     fn next_back(&mut self) -> Option<Self::Item> {\n         self.drain.next_back()\n     }\n }\n \n #[stable(feature = \"vec_splice\", since = \"1.21.0\")]\n-impl<'a, I: Iterator> ExactSizeIterator for Splice<'a, I> {}\n+impl<I: Iterator> ExactSizeIterator for Splice<'_, I> {}\n \n \n #[stable(feature = \"vec_splice\", since = \"1.21.0\")]\n-impl<'a, I: Iterator> Drop for Splice<'a, I> {\n+impl<I: Iterator> Drop for Splice<'_, I> {\n     fn drop(&mut self) {\n         self.drain.by_ref().for_each(drop);\n \n@@ -2611,7 +2611,7 @@ impl<'a, I: Iterator> Drop for Splice<'a, I> {\n }\n \n /// Private helper methods for `Splice::drop`\n-impl<'a, T> Drain<'a, T> {\n+impl<T> Drain<'_, T> {\n     /// The range from `self.vec.len` to `self.tail_start` contains elements\n     /// that have been moved out.\n     /// Fill that range as much as possible with new elements from the `replace_with` iterator.\n@@ -2663,7 +2663,7 @@ pub struct DrainFilter<'a, T: 'a, F>\n }\n \n #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n-impl<'a, T, F> Iterator for DrainFilter<'a, T, F>\n+impl<T, F> Iterator for DrainFilter<'_, T, F>\n     where F: FnMut(&mut T) -> bool,\n {\n     type Item = T;\n@@ -2697,7 +2697,7 @@ impl<'a, T, F> Iterator for DrainFilter<'a, T, F>\n }\n \n #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n-impl<'a, T, F> Drop for DrainFilter<'a, T, F>\n+impl<T, F> Drop for DrainFilter<'_, T, F>\n     where F: FnMut(&mut T) -> bool,\n {\n     fn drop(&mut self) {"}]}