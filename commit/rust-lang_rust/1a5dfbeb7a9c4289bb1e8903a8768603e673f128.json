{"sha": "1a5dfbeb7a9c4289bb1e8903a8768603e673f128", "node_id": "C_kwDOAAsO6NoAKDFhNWRmYmViN2E5YzQyODliYjFlODkwM2E4NzY4NjAzZTY3M2YxMjg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-27T02:27:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-27T02:36:45Z"}, "message": "fmt", "tree": {"sha": "8fe6d1ff4a4734501f5351e3743ad22eaf63a3cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fe6d1ff4a4734501f5351e3743ad22eaf63a3cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a5dfbeb7a9c4289bb1e8903a8768603e673f128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5dfbeb7a9c4289bb1e8903a8768603e673f128", "html_url": "https://github.com/rust-lang/rust/commit/1a5dfbeb7a9c4289bb1e8903a8768603e673f128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a5dfbeb7a9c4289bb1e8903a8768603e673f128/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4120425108855824356019cc3e7f6c2bfff157c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4120425108855824356019cc3e7f6c2bfff157c1", "html_url": "https://github.com/rust-lang/rust/commit/4120425108855824356019cc3e7f6c2bfff157c1"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "83739c48efc5808ce2fe096eb9fa5b20c3517eb9", "filename": "src/intptrcast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a5dfbeb7a9c4289bb1e8903a8768603e673f128/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5dfbeb7a9c4289bb1e8903a8768603e673f128/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=1a5dfbeb7a9c4289bb1e8903a8768603e673f128", "patch": "@@ -94,7 +94,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n         if global_state.exposed.contains(&alloc_id) {\n             // FIXME: this catches `InterpError`, which we should not usually do.\n             // We might need a proper fallible API from `memory.rs` to avoid this though.\n-            if let Ok(_) = ecx.get_alloc_size_and_align(alloc_id, AllocCheck::Live) {\n+            if ecx.get_alloc_size_and_align(alloc_id, AllocCheck::Live).is_ok() {\n                 return Some(alloc_id);\n             }\n         }"}, {"sha": "621af171f4a8ee5de807fdd77a579e518f295f70", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a5dfbeb7a9c4289bb1e8903a8768603e673f128/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5dfbeb7a9c4289bb1e8903a8768603e673f128/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1a5dfbeb7a9c4289bb1e8903a8768603e673f128", "patch": "@@ -89,8 +89,8 @@ pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::stacked_borrows::{\n-    CallId, EvalContextExt as StackedBorEvalContextExt, Item, Permission, SbTag, SbTagExtra,\n-    Stack, Stacks,\n+    CallId, EvalContextExt as StackedBorEvalContextExt, Item, Permission, SbTag, SbTagExtra, Stack,\n+    Stacks,\n };\n pub use crate::sync::{CondvarId, EvalContextExt as SyncEvalContextExt, MutexId, RwLockId};\n pub use crate::thread::{"}, {"sha": "ea1132d3e12a429c3537a6c1512c36287e18582c", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a5dfbeb7a9c4289bb1e8903a8768603e673f128/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5dfbeb7a9c4289bb1e8903a8768603e673f128/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=1a5dfbeb7a9c4289bb1e8903a8768603e673f128", "patch": "@@ -403,12 +403,7 @@ impl<'tcx> Stack {\n                             tag, item\n                         ),\n                         None,\n-                        tag.and_then(|tag| {\n-                            alloc_history.get_logs_relevant_to(\n-                                tag,\n-                                Some(item.tag),\n-                            )\n-                        }),\n+                        tag.and_then(|tag| alloc_history.get_logs_relevant_to(tag, Some(item.tag))),\n                     ))?\n                 } else {\n                     Err(err_sb_ub("}, {"sha": "b1ff864bcd5e1cd84003a8deecc4b487710005e8", "filename": "src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a5dfbeb7a9c4289bb1e8903a8768603e673f128/src%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5dfbeb7a9c4289bb1e8903a8768603e673f128/src%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fdiagnostics.rs?ref=1a5dfbeb7a9c4289bb1e8903a8768603e673f128", "patch": "@@ -148,9 +148,7 @@ impl AllocHistory {\n         err_sb_ub(\n             format!(\"{}{}\", action, error_cause(stack, derived_from)),\n             Some(operation_summary(\"a reborrow\", alloc_id, alloc_range)),\n-            derived_from.and_then(|derived_from| {\n-                self.get_logs_relevant_to(derived_from, None)\n-            }),\n+            derived_from.and_then(|derived_from| self.get_logs_relevant_to(derived_from, None)),\n         )\n     }\n "}]}