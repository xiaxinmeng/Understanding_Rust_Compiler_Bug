{"sha": "f5fd66e0c208262fc493175a63f6d2f41130ed8c", "node_id": "C_kwDOAAsO6NoAKGY1ZmQ2NmUwYzIwODI2MmZjNDkzMTc1YTYzZjZkMmY0MTEzMGVkOGM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-09T13:34:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-09T13:44:21Z"}, "message": "Elaborate trait ref to compute object safety.", "tree": {"sha": "5a740a202f3d4517a1ca6913d37b762a2e121241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a740a202f3d4517a1ca6913d37b762a2e121241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5fd66e0c208262fc493175a63f6d2f41130ed8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5fd66e0c208262fc493175a63f6d2f41130ed8c", "html_url": "https://github.com/rust-lang/rust/commit/f5fd66e0c208262fc493175a63f6d2f41130ed8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5fd66e0c208262fc493175a63f6d2f41130ed8c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "url": "https://api.github.com/repos/rust-lang/rust/commits/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "html_url": "https://github.com/rust-lang/rust/commit/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665"}], "stats": {"total": 102, "additions": 73, "deletions": 29}, "files": [{"sha": "1afa04007b8a12cd940bcadec699e869b3fc845a", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 15, "deletions": 29, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f5fd66e0c208262fc493175a63f6d2f41130ed8c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5fd66e0c208262fc493175a63f6d2f41130ed8c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=f5fd66e0c208262fc493175a63f6d2f41130ed8c", "patch": "@@ -8,7 +8,7 @@\n //!   - not reference the erased type `Self` except for in this receiver;\n //!   - not have generic type parameters.\n \n-use super::elaborate_predicates;\n+use super::{elaborate_predicates, elaborate_trait_ref};\n \n use crate::infer::TyCtxtInferExt;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -567,51 +567,37 @@ fn receiver_for_self_ty<'tcx>(\n /// Creates the object type for the current trait. For example,\n /// if the current trait is `Deref`, then this will be\n /// `dyn Deref<Target = Self::Target> + 'static`.\n+#[instrument(level = \"trace\", skip(tcx), ret)]\n fn object_ty_for_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_def_id: DefId,\n     lifetime: ty::Region<'tcx>,\n ) -> Ty<'tcx> {\n-    debug!(\"object_ty_for_trait: trait_def_id={:?}\", trait_def_id);\n-\n     let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n+    debug!(?trait_ref);\n \n     let trait_predicate = trait_ref.map_bound(|trait_ref| {\n         ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref))\n     });\n+    debug!(?trait_predicate);\n \n-    let mut associated_types = traits::supertraits(tcx, trait_ref)\n-        .flat_map(|super_trait_ref| {\n-            tcx.associated_items(super_trait_ref.def_id())\n-                .in_definition_order()\n-                .map(move |item| (super_trait_ref, item))\n-        })\n-        .filter(|(_, item)| item.kind == ty::AssocKind::Type)\n-        .collect::<Vec<_>>();\n-\n-    // existential predicates need to be in a specific order\n-    associated_types.sort_by_cached_key(|(_, item)| tcx.def_path_hash(item.def_id));\n-\n-    let projection_predicates = associated_types.into_iter().map(|(super_trait_ref, item)| {\n-        // We *can* get bound lifetimes here in cases like\n-        // `trait MyTrait: for<'s> OtherTrait<&'s T, Output=bool>`.\n-        super_trait_ref.map_bound(|super_trait_ref| {\n+    let elaborated_predicates = elaborate_trait_ref(tcx, trait_ref).filter_map(|obligation| {\n+        debug!(?obligation);\n+        let pred = obligation.predicate.to_opt_poly_projection_pred()?;\n+        Some(pred.map_bound(|p| {\n             ty::ExistentialPredicate::Projection(ty::ExistentialProjection {\n-                term: tcx.mk_projection(item.def_id, super_trait_ref.substs).into(),\n-                item_def_id: item.def_id,\n-                substs: super_trait_ref.substs,\n+                item_def_id: p.projection_ty.item_def_id,\n+                substs: p.projection_ty.substs,\n+                term: p.term,\n             })\n-        })\n+        }))\n     });\n \n     let existential_predicates = tcx\n-        .mk_poly_existential_predicates(iter::once(trait_predicate).chain(projection_predicates));\n-\n-    let object_ty = tcx.mk_dynamic(existential_predicates, lifetime, ty::Dyn);\n-\n-    debug!(\"object_ty_for_trait: object_ty=`{}`\", object_ty);\n+        .mk_poly_existential_predicates(iter::once(trait_predicate).chain(elaborated_predicates));\n+    debug!(?existential_predicates);\n \n-    object_ty\n+    tcx.mk_dynamic(existential_predicates, lifetime, ty::Dyn)\n }\n \n /// Checks the method's receiver (the `self` argument) can be dispatched on when `Self` is a"}, {"sha": "14e00d2ef321d231c5c5385f1fbde93a25c3bb1f", "filename": "src/test/ui/object-safety/object-safety-supertrait-mentions-GAT.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f5fd66e0c208262fc493175a63f6d2f41130ed8c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5fd66e0c208262fc493175a63f6d2f41130ed8c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.rs?ref=f5fd66e0c208262fc493175a63f6d2f41130ed8c", "patch": "@@ -0,0 +1,15 @@\n+//~ ERROR the parameter type `Self` may not live long enough\n+\n+trait GatTrait {\n+    type Gat<'a>\n+    where\n+        Self: 'a;\n+}\n+\n+trait SuperTrait<T>: for<'a> GatTrait<Gat<'a> = T> {\n+    fn c(&self) -> dyn SuperTrait<T>;\n+    //~^ ERROR associated item referring to unboxed trait object for its own trait\n+    //~| ERROR the trait `SuperTrait` cannot be made into an object\n+}\n+\n+fn main() {}"}, {"sha": "c1aaad31e81255dc6a36dcfd4866579d24f15cff", "filename": "src/test/ui/object-safety/object-safety-supertrait-mentions-GAT.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f5fd66e0c208262fc493175a63f6d2f41130ed8c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5fd66e0c208262fc493175a63f6d2f41130ed8c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr?ref=f5fd66e0c208262fc493175a63f6d2f41130ed8c", "patch": "@@ -0,0 +1,43 @@\n+error[E0311]: the parameter type `Self` may not live long enough\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the type `Self` will meet its required lifetime bounds...\n+note: ...that is required by this bound\n+  --> $DIR/object-safety-supertrait-mentions-GAT.rs:9:39\n+   |\n+LL | trait SuperTrait<T>: for<'a> GatTrait<Gat<'a> = T> {\n+   |                                       ^^^^^^^^^^^\n+\n+error: associated item referring to unboxed trait object for its own trait\n+  --> $DIR/object-safety-supertrait-mentions-GAT.rs:10:20\n+   |\n+LL | trait SuperTrait<T>: for<'a> GatTrait<Gat<'a> = T> {\n+   |       ---------- in this trait\n+LL |     fn c(&self) -> dyn SuperTrait<T>;\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+help: you might have meant to use `Self` to refer to the implementing type\n+   |\n+LL |     fn c(&self) -> Self;\n+   |                    ~~~~\n+\n+error[E0038]: the trait `SuperTrait` cannot be made into an object\n+  --> $DIR/object-safety-supertrait-mentions-GAT.rs:10:20\n+   |\n+LL |     fn c(&self) -> dyn SuperTrait<T>;\n+   |                    ^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-supertrait-mentions-GAT.rs:4:10\n+   |\n+LL |     type Gat<'a>\n+   |          ^^^ ...because it contains the generic associated type `Gat`\n+...\n+LL | trait SuperTrait<T>: for<'a> GatTrait<Gat<'a> = T> {\n+   |       ---------- this trait cannot be made into an object...\n+   = help: consider moving `Gat` to another trait\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0038, E0311.\n+For more information about an error, try `rustc --explain E0038`."}]}