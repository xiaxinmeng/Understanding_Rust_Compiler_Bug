{"sha": "aa4172076ea9b886fefadafda6e479ab6c574bff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNDE3MjA3NmVhOWI4ODZmZWZhZGFmZGE2ZTQ3OWFiNmM1NzRiZmY=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-10-17T22:12:28Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-10-18T13:21:20Z"}, "message": "Handle ranges of float consistently\n\nThis deconfuses the comparison of floats, that currently mixed ranges\nand non-ranges.", "tree": {"sha": "e7a03c45aac80f5c8d0137d43e873cee0777384a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7a03c45aac80f5c8d0137d43e873cee0777384a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa4172076ea9b886fefadafda6e479ab6c574bff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4172076ea9b886fefadafda6e479ab6c574bff", "html_url": "https://github.com/rust-lang/rust/commit/aa4172076ea9b886fefadafda6e479ab6c574bff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa4172076ea9b886fefadafda6e479ab6c574bff/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f504e9a42500db67d3c22b07f90df4d6ebc41758", "url": "https://api.github.com/repos/rust-lang/rust/commits/f504e9a42500db67d3c22b07f90df4d6ebc41758", "html_url": "https://github.com/rust-lang/rust/commit/f504e9a42500db67d3c22b07f90df4d6ebc41758"}], "stats": {"total": 105, "additions": 48, "deletions": 57}, "files": [{"sha": "6a37dd896b6c3648d073f064f7be3024958642c7", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 48, "deletions": 57, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/aa4172076ea9b886fefadafda6e479ab6c574bff/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4172076ea9b886fefadafda6e479ab6c574bff/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=aa4172076ea9b886fefadafda6e479ab6c574bff", "patch": "@@ -834,13 +834,6 @@ enum Constructor<'tcx> {\n }\n \n impl<'tcx> Constructor<'tcx> {\n-    fn is_slice(&self) -> bool {\n-        match self {\n-            Slice(_) => true,\n-            _ => false,\n-        }\n-    }\n-\n     fn variant_index_for_adt<'a>(\n         &self,\n         cx: &MatchCheckCtxt<'a, 'tcx>,\n@@ -2111,7 +2104,10 @@ fn pat_constructor<'tcx>(\n             if let Some(int_range) = IntRange::from_const(tcx, param_env, value, pat.span) {\n                 Some(IntRange(int_range))\n             } else {\n-                Some(ConstantValue(value))\n+                match value.ty.kind() {\n+                    ty::Float(_) => Some(FloatRange(value, value, RangeEnd::Included)),\n+                    _ => Some(ConstantValue(value)),\n+                }\n             }\n         }\n         PatKind::Range(PatRange { lo, hi, end }) => {\n@@ -2443,35 +2439,6 @@ fn lint_overlapping_patterns<'tcx>(\n     }\n }\n \n-fn constructor_covered_by_range<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    ctor: &Constructor<'tcx>,\n-    pat: &Pat<'tcx>,\n-) -> Option<()> {\n-    if let Single = ctor {\n-        return Some(());\n-    }\n-\n-    let (pat_from, pat_to, pat_end, ty) = match *pat.kind {\n-        PatKind::Constant { value } => (value, value, RangeEnd::Included, value.ty),\n-        PatKind::Range(PatRange { lo, hi, end }) => (lo, hi, end, lo.ty),\n-        _ => bug!(\"`constructor_covered_by_range` called with {:?}\", pat),\n-    };\n-    let (ctor_from, ctor_to, ctor_end) = match *ctor {\n-        ConstantValue(value) => (value, value, RangeEnd::Included),\n-        FloatRange(from, to, ctor_end) => (from, to, ctor_end),\n-        _ => bug!(\"`constructor_covered_by_range` called with {:?}\", ctor),\n-    };\n-    trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, pat_from, pat_to, ty);\n-\n-    let to = compare_const_vals(tcx, ctor_to, pat_to, param_env, ty)?;\n-    let from = compare_const_vals(tcx, ctor_from, pat_from, param_env, ty)?;\n-    let intersects = (from == Ordering::Greater || from == Ordering::Equal)\n-        && (to == Ordering::Less || (pat_end == ctor_end && to == Ordering::Equal));\n-    if intersects { Some(()) } else { None }\n-}\n-\n /// This is the main specialization step. It expands the pattern\n /// into `arity` patterns based on the constructor. For most patterns, the step is trivial,\n /// for instance tuple patterns are flattened and box patterns expand into their inner pattern.\n@@ -2516,27 +2483,51 @@ fn specialize_one_pattern<'p, 'tcx>(\n \n         PatKind::Deref { ref subpattern } => Some(Fields::from_single_pattern(subpattern)),\n \n-        PatKind::Constant { value } if constructor.is_slice() => {\n-            span_bug!(pat.span, \"unexpected const-val {:?} with ctor {:?}\", value, constructor)\n-        }\n-\n         PatKind::Constant { .. } | PatKind::Range { .. } => {\n-            // If the constructor is a:\n-            // - Single value: add a row if the pattern contains the constructor.\n-            // - Range: add a row if the constructor intersects the pattern.\n-            if let IntRange(ctor) = constructor {\n-                let pat = IntRange::from_pat(cx.tcx, cx.param_env, pat)?;\n-                ctor.intersection(cx.tcx, &pat)?;\n-                // Constructor splitting should ensure that all intersections we encounter\n-                // are actually inclusions.\n-                assert!(ctor.is_subrange(&pat));\n-            } else {\n-                // Fallback for non-ranges and ranges that involve\n-                // floating-point numbers, which are not conveniently handled\n-                // by `IntRange`. For these cases, the constructor may not be a\n-                // range so intersection actually devolves into being covered\n-                // by the pattern.\n-                constructor_covered_by_range(cx.tcx, cx.param_env, constructor, pat)?;\n+            match constructor {\n+                Single => {}\n+                IntRange(ctor) => {\n+                    let pat = IntRange::from_pat(cx.tcx, cx.param_env, pat)?;\n+                    ctor.intersection(cx.tcx, &pat)?;\n+                    // Constructor splitting should ensure that all intersections we encounter\n+                    // are actually inclusions.\n+                    assert!(ctor.is_subrange(&pat));\n+                }\n+                FloatRange(ctor_from, ctor_to, ctor_end) => {\n+                    let (pat_from, pat_to, pat_end, ty) = match *pat.kind {\n+                        PatKind::Constant { value } => (value, value, RangeEnd::Included, value.ty),\n+                        PatKind::Range(PatRange { lo, hi, end }) => (lo, hi, end, lo.ty),\n+                        _ => unreachable!(), // This is ensured by the branch we're in\n+                    };\n+                    let to = compare_const_vals(cx.tcx, ctor_to, pat_to, cx.param_env, ty)?;\n+                    let from = compare_const_vals(cx.tcx, ctor_from, pat_from, cx.param_env, ty)?;\n+                    let intersects = (from == Ordering::Greater || from == Ordering::Equal)\n+                        && (to == Ordering::Less\n+                            || (pat_end == *ctor_end && to == Ordering::Equal));\n+                    if !intersects {\n+                        return None;\n+                    }\n+                }\n+                ConstantValue(ctor_value) => {\n+                    let pat_value = match *pat.kind {\n+                        PatKind::Constant { value } => value,\n+                        _ => span_bug!(\n+                            pat.span,\n+                            \"unexpected range pattern {:?} for constant value ctor\",\n+                            pat\n+                        ),\n+                    };\n+\n+                    // FIXME: there's probably a more direct way of comparing for equality\n+                    if compare_const_vals(cx.tcx, ctor_value, pat_value, cx.param_env, pat.ty)?\n+                        != Ordering::Equal\n+                    {\n+                        return None;\n+                    }\n+                }\n+                _ => {\n+                    span_bug!(pat.span, \"unexpected pattern {:?} with ctor {:?}\", pat, constructor)\n+                }\n             }\n             Some(Fields::empty())\n         }"}]}