{"sha": "a69c4414bc69d95d1ac1636cf2bc61deec21d936", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OWM0NDE0YmM2OWQ5NWQxYWMxNjM2Y2YyYmM2MWRlZWMyMWQ5MzY=", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2020-12-08T23:42:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-08T23:42:48Z"}, "message": "Use platform intrinsics, not LLVM, for floor & ceil\n\nThis PR removes the direct linkage to LLVM for trunc and round intrinsics, while replacing that link with rustc's platform intrinsics for floor and ceil functions, namely simd_floor and simd_ceil. Tests that are no longer testable are removed. In doing so it resolves the riscv64gc compilation problems.", "tree": {"sha": "e8c0b4790f515f16aa70e2111618f1d991a4c3cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8c0b4790f515f16aa70e2111618f1d991a4c3cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a69c4414bc69d95d1ac1636cf2bc61deec21d936", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf0A94CRBK7hj4Ov3rIwAAdHIIAAQIsyqcGwqgOZl8IICUPICm\n2/7K+iFFdLojpqfP7VWKOEIgt6cxiLYk0+wiQQnHBElgcdAJcp7gyEK/+8gREFlb\nt3ddLHDt1hhIHBvjY9h9OEn7MwOM9k7HKhm0yzkwE5l7Tk6f0wtJIDxRoqqhrROy\nHoBnpmhK263A8vJ48foyb4TpfYJG9tYjXYekoGfFYPV1L6rQn5F7pKZONTkMBZfN\nPjMPlm/kTYDYLOQ/HJbX47MlSKoEM49SRJ1PpMUnAy27bYOngiQzXha2RF3Rgojl\nn4HHGMjvDUc0Lz9CSMjdKDk+FxMJcsr/uafVAjt7oTrZhB9wx91H/lz/xV9D5aM=\n=dxZc\n-----END PGP SIGNATURE-----\n", "payload": "tree e8c0b4790f515f16aa70e2111618f1d991a4c3cb\nparent 3aec4a2d00fab81b0372e3e98ea34d8305233f29\nparent 3d9bbf9b86f9f41d9ea5fe649343f3d763003866\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1607470968 -0800\ncommitter GitHub <noreply@github.com> 1607470968 -0800\n\nUse platform intrinsics, not LLVM, for floor & ceil\n\nThis PR removes the direct linkage to LLVM for trunc and round intrinsics, while replacing that link with rustc's platform intrinsics for floor and ceil functions, namely simd_floor and simd_ceil. Tests that are no longer testable are removed. In doing so it resolves the riscv64gc compilation problems."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a69c4414bc69d95d1ac1636cf2bc61deec21d936", "html_url": "https://github.com/rust-lang/rust/commit/a69c4414bc69d95d1ac1636cf2bc61deec21d936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a69c4414bc69d95d1ac1636cf2bc61deec21d936/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aec4a2d00fab81b0372e3e98ea34d8305233f29", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aec4a2d00fab81b0372e3e98ea34d8305233f29", "html_url": "https://github.com/rust-lang/rust/commit/3aec4a2d00fab81b0372e3e98ea34d8305233f29"}, {"sha": "3d9bbf9b86f9f41d9ea5fe649343f3d763003866", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9bbf9b86f9f41d9ea5fe649343f3d763003866", "html_url": "https://github.com/rust-lang/rust/commit/3d9bbf9b86f9f41d9ea5fe649343f3d763003866"}], "stats": {"total": 130, "additions": 17, "deletions": 113}, "files": [{"sha": "2104c74a4d925b26b9be6106910379bdcc93730d", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a69c4414bc69d95d1ac1636cf2bc61deec21d936/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a69c4414bc69d95d1ac1636cf2bc61deec21d936/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=a69c4414bc69d95d1ac1636cf2bc61deec21d936", "patch": "@@ -121,8 +121,7 @@ jobs:\n           # for NaNs which makes it worth testing on despite that.\n           - mips-unknown-linux-gnu\n           - mips64-unknown-linux-gnuabi64\n-          # TODO: reenable pending https://github.com/rust-lang/rust/issues/77866\n-          # - riscv64gc-unknown-linux-gnu\n+          - riscv64gc-unknown-linux-gnu\n \n     steps:\n       - uses: actions/checkout@v2"}, {"sha": "b2edc3747efc2b8e4819304cd87d7c263d7dbd6b", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=a69c4414bc69d95d1ac1636cf2bc61deec21d936", "patch": "@@ -39,4 +39,10 @@ extern \"platform-intrinsic\" {\n \n     /// fptoui/fptosi/uitofp/sitofp\n     pub(crate) fn simd_cast<T, U>(x: T) -> U;\n+\n+    // floor\n+    pub(crate) fn simd_floor<T>(x: T) -> T;\n+\n+    // ceil\n+    pub(crate) fn simd_ceil<T>(x: T) -> T;\n }"}, {"sha": "0529bbe0080cc0c10ed735ec37ec0dc878a9c310", "filename": "crates/core_simd/src/round.rs", "status": "modified", "additions": 10, "deletions": 75, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=a69c4414bc69d95d1ac1636cf2bc61deec21d936", "patch": "@@ -1,60 +1,23 @@\n macro_rules! implement {\n     {\n         impl $type:ident {\n-            int_type = $int_type:ident,\n-            floor = $floor_intrinsic:literal,\n-            ceil = $ceil_intrinsic:literal,\n-            round = $round_intrinsic:literal,\n-            trunc = $trunc_intrinsic:literal,\n+            int_type = $int_type:ident\n         }\n     } => {\n         mod $type {\n-            #[allow(improper_ctypes)]\n-            extern \"C\" {\n-                #[link_name = $floor_intrinsic]\n-                fn floor_intrinsic(x: crate::$type) -> crate::$type;\n-                #[link_name = $ceil_intrinsic]\n-                fn ceil_intrinsic(x: crate::$type) -> crate::$type;\n-                #[link_name = $round_intrinsic]\n-                fn round_intrinsic(x: crate::$type) -> crate::$type;\n-                #[link_name = $trunc_intrinsic]\n-                fn trunc_intrinsic(x: crate::$type) -> crate::$type;\n-            }\n-\n             impl crate::$type {\n                 /// Returns the largest integer less than or equal to each lane.\n                 #[must_use = \"method returns a new vector and does not mutate the original value\"]\n                 #[inline]\n                 pub fn floor(self) -> Self {\n-                    unsafe { floor_intrinsic(self) }\n+                    unsafe { crate::intrinsics::simd_floor(self) }\n                 }\n \n                 /// Returns the smallest integer greater than or equal to each lane.\n                 #[must_use = \"method returns a new vector and does not mutate the original value\"]\n                 #[inline]\n                 pub fn ceil(self) -> Self {\n-                    unsafe { ceil_intrinsic(self) }\n-                }\n-\n-                /// Returns the nearest integer to each lane. Round half-way cases away from 0.0.\n-                #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-                #[inline]\n-                pub fn round(self) -> Self {\n-                    unsafe { round_intrinsic(self) }\n-                }\n-\n-                /// Returns the integer part of each lane.\n-                #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-                #[inline]\n-                pub fn trunc(self) -> Self {\n-                    unsafe { trunc_intrinsic(self) }\n-                }\n-\n-                /// Returns the fractional part of each lane.\n-                #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-                #[inline]\n-                pub fn fract(self) -> Self {\n-                    self - self.trunc()\n+                    unsafe { crate::intrinsics::simd_ceil(self) }\n                 }\n \n                 /// Rounds toward zero and converts to the same-width integer type, assuming that\n@@ -84,70 +47,42 @@ macro_rules! implement {\n \n implement! {\n     impl f32x2 {\n-        int_type = i32x2,\n-        floor = \"llvm.floor.v2f32\",\n-        ceil = \"llvm.ceil.v2f32\",\n-        round = \"llvm.round.v2f32\",\n-        trunc = \"llvm.trunc.v2f32\",\n+        int_type = i32x2\n     }\n }\n \n implement! {\n     impl f32x4 {\n-        int_type = i32x4,\n-        floor = \"llvm.floor.v4f32\",\n-        ceil = \"llvm.ceil.v4f32\",\n-        round = \"llvm.round.v4f32\",\n-        trunc = \"llvm.trunc.v4f32\",\n+        int_type = i32x4\n     }\n }\n \n implement! {\n     impl f32x8 {\n-        int_type = i32x8,\n-        floor = \"llvm.floor.v8f32\",\n-        ceil = \"llvm.ceil.v8f32\",\n-        round = \"llvm.round.v8f32\",\n-        trunc = \"llvm.trunc.v8f32\",\n+        int_type = i32x8\n     }\n }\n \n implement! {\n     impl f32x16 {\n-        int_type = i32x16,\n-        floor = \"llvm.floor.v16f32\",\n-        ceil = \"llvm.ceil.v16f32\",\n-        round = \"llvm.round.v16f32\",\n-        trunc = \"llvm.trunc.v16f32\",\n+        int_type = i32x16\n     }\n }\n \n implement! {\n     impl f64x2 {\n-        int_type = i64x2,\n-        floor = \"llvm.floor.v2f64\",\n-        ceil = \"llvm.ceil.v2f64\",\n-        round = \"llvm.round.v2f64\",\n-        trunc = \"llvm.trunc.v2f64\",\n+        int_type = i64x2\n     }\n }\n \n implement! {\n     impl f64x4 {\n-        int_type = i64x4,\n-        floor = \"llvm.floor.v4f64\",\n-        ceil = \"llvm.ceil.v4f64\",\n-        round = \"llvm.round.v4f64\",\n-        trunc = \"llvm.trunc.v4f64\",\n+        int_type = i64x4\n     }\n }\n \n implement! {\n     impl f64x8 {\n-        int_type = i64x8,\n-        floor = \"llvm.floor.v8f64\",\n-        ceil = \"llvm.ceil.v8f64\",\n-        round = \"llvm.round.v8f64\",\n-        trunc = \"llvm.trunc.v8f64\",\n+        int_type = i64x8\n     }\n }"}, {"sha": "fe347a5362daf85053e4f2d563390b9a92d15a94", "filename": "crates/core_simd/tests/ops_impl/float_macros.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs?ref=a69c4414bc69d95d1ac1636cf2bc61deec21d936", "patch": "@@ -353,42 +353,6 @@ macro_rules! float_tests {\n                 }\n             }\n \n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn round_odd_floats() {\n-                for v in slice_chunks(&C) {\n-                    let expected = apply_unary_lanewise(v, <$scalar>::round);\n-                    assert_biteq!(v.round(), expected);\n-                }\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn round_mode() {\n-                assert_biteq!(core_simd::$vector::splat(1.5).round(), core_simd::$vector::splat(2.0));\n-                assert_biteq!(core_simd::$vector::splat(2.5).round(), core_simd::$vector::splat(3.0));\n-                assert_biteq!(core_simd::$vector::splat(-1.5).round(), core_simd::$vector::splat(-2.0));\n-                assert_biteq!(core_simd::$vector::splat(-2.5).round(), core_simd::$vector::splat(-3.0));\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn trunc_odd_floats() {\n-                for v in slice_chunks(&C) {\n-                    let expected = apply_unary_lanewise(v, <$scalar>::trunc);\n-                    assert_biteq!(v.trunc(), expected);\n-                }\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn fract_odd_floats() {\n-                for v in slice_chunks(&C) {\n-                    let expected = apply_unary_lanewise(v, <$scalar>::fract);\n-                    assert_biteq!(v.fract(), expected);\n-                }\n-            }\n-\n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn to_int_unchecked() {"}]}