{"sha": "ce173c12e6416b1afa4aa460076d7c807fdcdccf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMTczYzEyZTY0MTZiMWFmYTRhYTQ2MDA3NmQ3YzgwN2ZkY2RjY2Y=", "commit": {"author": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-08-27T21:24:42Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-08-31T07:46:55Z"}, "message": "Add deprecated_name argument to the register lint group functions", "tree": {"sha": "b63444e120d61a7b80fd9725960e4d6db9d644d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b63444e120d61a7b80fd9725960e4d6db9d644d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce173c12e6416b1afa4aa460076d7c807fdcdccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce173c12e6416b1afa4aa460076d7c807fdcdccf", "html_url": "https://github.com/rust-lang/rust/commit/ce173c12e6416b1afa4aa460076d7c807fdcdccf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce173c12e6416b1afa4aa460076d7c807fdcdccf/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9521deecc4992d31f761a3bd7e3b60479837cd1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9521deecc4992d31f761a3bd7e3b60479837cd1d", "html_url": "https://github.com/rust-lang/rust/commit/9521deecc4992d31f761a3bd7e3b60479837cd1d"}], "stats": {"total": 62, "additions": 43, "deletions": 19}, "files": [{"sha": "6529a686af8207240eda061cf8d03f6263c494b6", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ce173c12e6416b1afa4aa460076d7c807fdcdccf/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce173c12e6416b1afa4aa460076d7c807fdcdccf/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=ce173c12e6416b1afa4aa460076d7c807fdcdccf", "patch": "@@ -67,9 +67,10 @@ pub struct LintStore {\n     /// Lints indexed by name.\n     by_name: FxHashMap<String, TargetLint>,\n \n-    /// Map of registered lint groups to what lints they expand to. The bool\n-    /// is true if the lint group was added by a plugin.\n-    lint_groups: FxHashMap<&'static str, (Vec<LintId>, bool)>,\n+    /// Map of registered lint groups to what lints they expand to. The first\n+    /// bool is true if the lint group was added by a plugin. The optional string\n+    /// is used to store the new names of deprecated lint group names.\n+    lint_groups: FxHashMap<&'static str, (Vec<LintId>, bool, Option<&'static str>)>,\n \n     /// Extra info for future incompatibility lints, describing the\n     /// issue or RFC that caused the incompatibility.\n@@ -221,7 +222,7 @@ impl LintStore {\n             let lints = lints.iter().filter(|f| f.edition == Some(*edition)).map(|f| f.id)\n                              .collect::<Vec<_>>();\n             if !lints.is_empty() {\n-                self.register_group(sess, false, edition.lint_name(), lints)\n+                self.register_group(sess, false, edition.lint_name(), None, lints)\n             }\n         }\n \n@@ -231,19 +232,35 @@ impl LintStore {\n             self.future_incompatible.insert(lint.id, lint);\n         }\n \n-        self.register_group(sess, false, \"future_incompatible\", future_incompatible);\n-\n-\n+        self.register_group(\n+            sess,\n+            false,\n+            \"future_incompatible\",\n+            None,\n+            future_incompatible,\n+        );\n     }\n \n     pub fn future_incompatible(&self, id: LintId) -> Option<&FutureIncompatibleInfo> {\n         self.future_incompatible.get(&id)\n     }\n \n-    pub fn register_group(&mut self, sess: Option<&Session>,\n-                          from_plugin: bool, name: &'static str,\n-                          to: Vec<LintId>) {\n-        let new = self.lint_groups.insert(name, (to, from_plugin)).is_none();\n+    pub fn register_group(\n+        &mut self,\n+        sess: Option<&Session>,\n+        from_plugin: bool,\n+        name: &'static str,\n+        deprecated_name: Option<&'static str>,\n+        to: Vec<LintId>,\n+    ) {\n+        let new = self\n+            .lint_groups\n+            .insert(name, (to, from_plugin, None))\n+            .is_none();\n+        if let Some(deprecated) = deprecated_name {\n+            self.lint_groups\n+                .insert(deprecated, (vec![], from_plugin, Some(name)));\n+        }\n \n         if !new {\n             let msg = format!(\"duplicate specification of lint group {}\", name);"}, {"sha": "c6344cb921044fa9d7e8e76687130fb6fda4fa61", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce173c12e6416b1afa4aa460076d7c807fdcdccf/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce173c12e6416b1afa4aa460076d7c807fdcdccf/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ce173c12e6416b1afa4aa460076d7c807fdcdccf", "patch": "@@ -924,8 +924,8 @@ where\n             ls.register_late_pass(Some(sess), true, pass);\n         }\n \n-        for (name, to) in lint_groups {\n-            ls.register_group(Some(sess), true, name, to);\n+        for (name, (to, deprecated_name)) in lint_groups {\n+            ls.register_group(Some(sess), true, name, deprecated_name, to);\n         }\n \n         *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;"}, {"sha": "46c5b0092a271e8d0caba276bc8ed45a4767c36a", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce173c12e6416b1afa4aa460076d7c807fdcdccf/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce173c12e6416b1afa4aa460076d7c807fdcdccf/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=ce173c12e6416b1afa4aa460076d7c807fdcdccf", "patch": "@@ -105,7 +105,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n     macro_rules! add_lint_group {\n         ($sess:ident, $name:expr, $($lint:ident),*) => (\n-            store.register_group($sess, false, $name, vec![$(LintId::of($lint)),*]);\n+            store.register_group($sess, false, $name, None, vec![$(LintId::of($lint)),*]);\n             )\n     }\n "}, {"sha": "6c10ac7ea5ceaf230f7b449f877237a37b9785ca", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce173c12e6416b1afa4aa460076d7c807fdcdccf/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce173c12e6416b1afa4aa460076d7c807fdcdccf/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=ce173c12e6416b1afa4aa460076d7c807fdcdccf", "patch": "@@ -53,7 +53,7 @@ pub struct Registry<'a> {\n     pub late_lint_passes: Vec<LateLintPassObject>,\n \n     #[doc(hidden)]\n-    pub lint_groups: FxHashMap<&'static str, Vec<LintId>>,\n+    pub lint_groups: FxHashMap<&'static str, (Vec<LintId>, Option<&'static str>)>,\n \n     #[doc(hidden)]\n     pub llvm_passes: Vec<String>,\n@@ -170,8 +170,15 @@ impl<'a> Registry<'a> {\n         self.late_lint_passes.push(lint_pass);\n     }\n     /// Register a lint group.\n-    pub fn register_lint_group(&mut self, name: &'static str, to: Vec<&'static Lint>) {\n-        self.lint_groups.insert(name, to.into_iter().map(|x| LintId::of(x)).collect());\n+    pub fn register_lint_group(\n+        &mut self,\n+        name: &'static str,\n+        deprecated_name: Option<&'static str>,\n+        to: Vec<&'static Lint>\n+    ) {\n+        self.lint_groups.insert(name,\n+                                (to.into_iter().map(|x| LintId::of(x)).collect(),\n+                                 deprecated_name));\n     }\n \n     /// Register an LLVM pass."}, {"sha": "082f15a39dd955254c7b94b62ef41ef0eeb9f295", "filename": "src/test/ui-fulldeps/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce173c12e6416b1afa4aa460076d7c807fdcdccf/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce173c12e6416b1afa4aa460076d7c807fdcdccf/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs?ref=ce173c12e6416b1afa4aa460076d7c807fdcdccf", "patch": "@@ -49,5 +49,5 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box Pass);\n-    reg.register_lint_group(\"lint_me\", vec![TEST_LINT, PLEASE_LINT]);\n+    reg.register_lint_group(\"lint_me\", None, vec![TEST_LINT, PLEASE_LINT]);\n }"}, {"sha": "9abf6fca9c7288cb3bb99c0f7627f94b7930ee98", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=ce173c12e6416b1afa4aa460076d7c807fdcdccf", "patch": "@@ -1 +1 @@\n-Subproject commit d99cea0f16633556871a59500c610782b07233b9\n+Subproject commit 9abf6fca9c7288cb3bb99c0f7627f94b7930ee98"}]}