{"sha": "1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34", "node_id": "C_kwDOAAsO6NoAKDFhYzU0NDAxZDFiNzIyNGYxYjg3NDRiMmIxZjEzMGQ0ZDNjZGZlMzQ", "commit": {"author": {"name": "Ibraheem Ahmed", "email": "ibraheem@ibraheem.ca", "date": "2022-05-01T19:12:20Z"}, "committer": {"name": "Ibraheem Ahmed", "email": "ibraheem@ibraheem.ca", "date": "2022-05-01T19:35:45Z"}, "message": "add `{Arc, Rc}::downcast_unchecked`", "tree": {"sha": "ec9a2c2565ed505dfe98d908637b1ea73dfd4f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec9a2c2565ed505dfe98d908637b1ea73dfd4f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34", "html_url": "https://github.com/rust-lang/rust/commit/1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b043faba34ccc053a4d0110634c323f6c03765e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b043faba34ccc053a4d0110634c323f6c03765e", "html_url": "https://github.com/rust-lang/rust/commit/4b043faba34ccc053a4d0110634c323f6c03765e"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "47808d5f86ac78267975e0f1fe1fd9e24623f46f", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34", "patch": "@@ -1241,8 +1241,6 @@ impl<T: Clone> Rc<T> {\n }\n \n impl Rc<dyn Any> {\n-    #[inline]\n-    #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n     /// Attempt to downcast the `Rc<dyn Any>` to a concrete type.\n     ///\n     /// # Examples\n@@ -1261,6 +1259,8 @@ impl Rc<dyn Any> {\n     /// print_if_string(Rc::new(my_string));\n     /// print_if_string(Rc::new(0i8));\n     /// ```\n+    #[inline]\n+    #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n     pub fn downcast<T: Any>(self) -> Result<Rc<T>, Rc<dyn Any>> {\n         if (*self).is::<T>() {\n             unsafe {\n@@ -1272,6 +1272,42 @@ impl Rc<dyn Any> {\n             Err(self)\n         }\n     }\n+\n+    /// Downcasts the `Rc<dyn Any>` to a concrete type.\n+    ///\n+    /// For a safe alternative see [`downcast`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    /// use std::rc::Rc;\n+    ///\n+    /// let x: Rc<dyn Any> = Rc::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n+    /// }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// The contained value must be of type `T`. Calling this method\n+    /// with the incorrect type is *undefined behavior*.\n+    ///\n+    ///\n+    /// [`downcast`]: Self::downcast\n+    #[inline]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n+    pub unsafe fn downcast_unchecked<T: Any>(self) -> Rc<T> {\n+        unsafe {\n+            let ptr = self.ptr.cast::<RcBox<T>>();\n+            mem::forget(self);\n+            Rc::from_inner(ptr)\n+        }\n+    }\n }\n \n impl<T: ?Sized> Rc<T> {"}, {"sha": "2d9c7ff4f6b48915b3fdae02b8c12cd1ff8fc1d9", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34", "patch": "@@ -1691,8 +1691,6 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n }\n \n impl Arc<dyn Any + Send + Sync> {\n-    #[inline]\n-    #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n     /// Attempt to downcast the `Arc<dyn Any + Send + Sync>` to a concrete type.\n     ///\n     /// # Examples\n@@ -1711,9 +1709,11 @@ impl Arc<dyn Any + Send + Sync> {\n     /// print_if_string(Arc::new(my_string));\n     /// print_if_string(Arc::new(0i8));\n     /// ```\n+    #[inline]\n+    #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n     pub fn downcast<T>(self) -> Result<Arc<T>, Self>\n     where\n-        T: Any + Send + Sync + 'static,\n+        T: Any + Send + Sync,\n     {\n         if (*self).is::<T>() {\n             unsafe {\n@@ -1725,6 +1725,45 @@ impl Arc<dyn Any + Send + Sync> {\n             Err(self)\n         }\n     }\n+\n+    /// Downcasts the `Arc<dyn Any + Send + Sync>` to a concrete type.\n+    ///\n+    /// For a safe alternative see [`downcast`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    /// use std::sync::Arc;\n+    ///\n+    /// let x: Arc<dyn Any + Send + Sync> = Arc::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n+    /// }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// The contained value must be of type `T`. Calling this method\n+    /// with the incorrect type is *undefined behavior*.\n+    ///\n+    ///\n+    /// [`downcast`]: Self::downcast\n+    #[inline]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n+    pub unsafe fn downcast_unchecked<T>(self) -> Arc<T>\n+    where\n+        T: Any + Send + Sync,\n+    {\n+        unsafe {\n+            let ptr = self.ptr.cast::<ArcInner<T>>();\n+            mem::forget(self);\n+            Arc::from_inner(ptr)\n+        }\n+    }\n }\n \n impl<T> Weak<T> {"}]}