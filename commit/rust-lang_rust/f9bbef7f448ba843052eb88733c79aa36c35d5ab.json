{"sha": "f9bbef7f448ba843052eb88733c79aa36c35d5ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YmJlZjdmNDQ4YmE4NDMwNTJlYjg4NzMzYzc5YWEzNmMzNWQ1YWI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-22T15:24:39Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-03T11:10:57Z"}, "message": "Avoid fatal errors in astconv; just err and return `ty_err` instead.\n\nThis allows computation to proceed and find further errors.\n\n(However, this is also annoying at times when the subsequent errors\nare just reporting that a ty_err occurred. I have thoughts on ways to\nfix this that I will experiment with separately.)", "tree": {"sha": "c53f314cbc4c22a67eaa0982c9ba459ad42290e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c53f314cbc4c22a67eaa0982c9ba459ad42290e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9bbef7f448ba843052eb88733c79aa36c35d5ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bbef7f448ba843052eb88733c79aa36c35d5ab", "html_url": "https://github.com/rust-lang/rust/commit/f9bbef7f448ba843052eb88733c79aa36c35d5ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9bbef7f448ba843052eb88733c79aa36c35d5ab/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1ea2b3094b1c28e64af30e187e31aa82f5ff004", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ea2b3094b1c28e64af30e187e31aa82f5ff004", "html_url": "https://github.com/rust-lang/rust/commit/f1ea2b3094b1c28e64af30e187e31aa82f5ff004"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "87604f4a4f80e492b86dc244050332041f5febd4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9bbef7f448ba843052eb88733c79aa36c35d5ab/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bbef7f448ba843052eb88733c79aa36c35d5ab/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f9bbef7f448ba843052eb88733c79aa36c35d5ab", "patch": "@@ -1233,17 +1233,18 @@ pub fn finish_resolving_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n             if segments.is_empty() {\n                 opt_self_ty.expect(\"missing T in <T>::a::b::c\")\n             } else {\n-                tcx.sess.span_bug(span,\n-                                  &format!(\"found module name used as a type: {}\",\n-                                           tcx.map.node_to_string(id.node)));\n+                span_err!(tcx.sess, span, E0247, \"found module name used as a type: {}\",\n+                          tcx.map.node_to_string(id.node));\n+                return this.tcx().types.err;\n             }\n         }\n         def::DefPrimTy(prim_ty) => {\n             prim_ty_to_ty(tcx, segments, prim_ty)\n         }\n         _ => {\n-            span_fatal!(tcx.sess, span, E0248,\n-                        \"found value name used as a type: {:?}\", *def);\n+            span_err!(tcx.sess, span, E0248,\n+                      \"found value name used as a type: {:?}\", *def);\n+            return this.tcx().types.err;\n         }\n     };\n \n@@ -1278,10 +1279,11 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n     match ast_ty_to_ty_cache.get(&ast_ty.id) {\n         Some(&ty::atttce_resolved(ty)) => return ty,\n         Some(&ty::atttce_unresolved) => {\n-            span_fatal!(tcx.sess, ast_ty.span, E0246,\n+            span_err!(tcx.sess, ast_ty.span, E0246,\n                                 \"illegal recursive type; insert an enum \\\n                                  or struct in the cycle, if this is \\\n                                  desired\");\n+            return this.tcx().types.err;\n         }\n         None => { /* go on */ }\n     }"}]}