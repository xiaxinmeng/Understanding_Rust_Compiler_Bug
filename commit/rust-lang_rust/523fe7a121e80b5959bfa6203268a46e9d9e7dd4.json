{"sha": "523fe7a121e80b5959bfa6203268a46e9d9e7dd4", "node_id": "C_kwDOAAsO6NoAKDUyM2ZlN2ExMjFlODBiNTk1OWJmYTYyMDMyNjhhNDZlOWQ5ZTdkZDQ", "commit": {"author": {"name": "yanchen4791", "email": "ychen2@futurewei.com", "date": "2022-12-16T22:47:24Z"}, "committer": {"name": "yanchen4791", "email": "ychen2@futurewei.com", "date": "2023-01-06T05:09:27Z"}, "message": "Suggests adding named lifetime when the return contains value borrowed from more than one lifetimes of the function's inputs", "tree": {"sha": "efc15e908cd02719d8c0c82be5e2559fdae3a815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efc15e908cd02719d8c0c82be5e2559fdae3a815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/523fe7a121e80b5959bfa6203268a46e9d9e7dd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/523fe7a121e80b5959bfa6203268a46e9d9e7dd4", "html_url": "https://github.com/rust-lang/rust/commit/523fe7a121e80b5959bfa6203268a46e9d9e7dd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/comments", "author": null, "committer": null, "parents": [{"sha": "388538fc963e07a94e3fc3ac8948627fd2d28d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/388538fc963e07a94e3fc3ac8948627fd2d28d29", "html_url": "https://github.com/rust-lang/rust/commit/388538fc963e07a94e3fc3ac8948627fd2d28d29"}], "stats": {"total": 224, "additions": 184, "deletions": 40}, "files": [{"sha": "cc33ef14756e5fbda6f1254428dcbf2322c3b5d7", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=523fe7a121e80b5959bfa6203268a46e9d9e7dd4", "patch": "@@ -192,6 +192,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         // buffered in the `MirBorrowckCtxt`.\n \n         let mut outlives_suggestion = OutlivesSuggestionBuilder::default();\n+        let mut last_unexpected_hidden_region: Option<(Span, Ty<'_>, ty::OpaqueTypeKey<'tcx>)> =\n+            None;\n \n         for nll_error in nll_errors.into_iter() {\n             match nll_error {\n@@ -234,13 +236,19 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     let named_ty = self.regioncx.name_regions(self.infcx.tcx, hidden_ty);\n                     let named_key = self.regioncx.name_regions(self.infcx.tcx, key);\n                     let named_region = self.regioncx.name_regions(self.infcx.tcx, member_region);\n-                    self.buffer_error(unexpected_hidden_region_diagnostic(\n+                    let mut diag = unexpected_hidden_region_diagnostic(\n                         self.infcx.tcx,\n                         span,\n                         named_ty,\n                         named_region,\n                         named_key,\n-                    ));\n+                    );\n+                    if last_unexpected_hidden_region != Some((span, named_ty, named_key)) {\n+                        self.buffer_error(diag);\n+                        last_unexpected_hidden_region = Some((span, named_ty, named_key));\n+                    } else {\n+                        diag.delay_as_bug();\n+                    }\n                 }\n \n                 RegionErrorKind::BoundUniversalRegionError {\n@@ -730,6 +738,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 Some(arg),\n                 captures,\n                 Some((param.param_ty_span, param.param_ty.to_string())),\n+                self.infcx.tcx.is_suitable_region(f).map(|r| r.def_id),\n             );\n         }\n     }"}, {"sha": "0644c7ada10fb1460e233e9a737299f19f9368b9", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=523fe7a121e80b5959bfa6203268a46e9d9e7dd4", "patch": "@@ -303,6 +303,7 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n                     None,\n                     format!(\"captures `{}`\", hidden_region),\n                     None,\n+                    Some(reg_info.def_id),\n                 )\n             }\n         }"}, {"sha": "94662780c36e927a5a8125a09a54db3092da346a", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 70, "deletions": 7, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=523fe7a121e80b5959bfa6203268a46e9d9e7dd4", "patch": "@@ -8,13 +8,17 @@ use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed, MultiSpan};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, Visitor};\n-use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n+use rustc_hir::{\n+    self as hir, GenericBound, GenericParamKind, Item, ItemKind, Lifetime, LifetimeName, Node,\n+    TyKind,\n+};\n use rustc_middle::ty::{\n     self, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n+use rustc_span::def_id::LocalDefId;\n use std::ops::ControlFlow;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n@@ -268,6 +272,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             Some(arg),\n             captures,\n             Some((param.param_ty_span, param.param_ty.to_string())),\n+            Some(anon_reg_sup.def_id),\n         );\n \n         let reported = err.emit();\n@@ -283,6 +288,7 @@ pub fn suggest_new_region_bound(\n     arg: Option<String>,\n     captures: String,\n     param: Option<(Span, String)>,\n+    scope_def_id: Option<LocalDefId>,\n ) {\n     debug!(\"try_report_static_impl_trait: fn_return={:?}\", fn_returns);\n     // FIXME: account for the need of parens in `&(dyn Trait + '_)`\n@@ -340,12 +346,69 @@ pub fn suggest_new_region_bound(\n                     _ => false,\n                 }) {\n                 } else {\n-                    err.span_suggestion_verbose(\n-                        fn_return.span.shrink_to_hi(),\n-                        &format!(\"{declare} `{ty}` {captures}, {explicit}\",),\n-                        &plus_lt,\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    // get a lifetime name of existing named lifetimes if any\n+                    let existing_lt_name = if let Some(id) = scope_def_id\n+                        && let Some(generics) = tcx.hir().get_generics(id)\n+                        && let named_lifetimes = generics\n+                        .params\n+                        .iter()\n+                        .filter(|p| matches!(p.kind, GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit }))\n+                        .map(|p| { if let hir::ParamName::Plain(name) = p.name {Some(name.to_string())} else {None}})\n+                        .filter(|n| ! matches!(n, None))\n+                        .collect::<Vec<_>>()\n+                        && named_lifetimes.len() > 0 {\n+                        named_lifetimes[0].clone()\n+                    } else {\n+                        None\n+                    };\n+                    let name = if let Some(name) = &existing_lt_name {\n+                        format!(\"{}\", name)\n+                    } else {\n+                        format!(\"'a\")\n+                    };\n+                    // if there are more than one elided lifetimes in inputs, the explicit `'_` lifetime cannot be used.\n+                    // introducing a new lifetime `'a` or making use of one from existing named lifetimes if any\n+                    if let Some(id) = scope_def_id\n+                        && let Some(generics) = tcx.hir().get_generics(id)\n+                        && let mut spans_suggs = generics\n+                            .params\n+                            .iter()\n+                            .filter(|p| p.is_elided_lifetime())\n+                            .map(|p|\n+                                  if p.span.hi() - p.span.lo() == rustc_span::BytePos(1) { // Ampersand (elided without '_)\n+                                      (p.span.shrink_to_hi(),format!(\"{name} \"))\n+                                  } else { // Underscore (elided with '_)\n+                                      (p.span, format!(\"{name}\"))\n+                                  }\n+                            )\n+                            .collect::<Vec<_>>()\n+                        && spans_suggs.len() > 1\n+                    {\n+                        let use_lt =\n+                        if existing_lt_name == None {\n+                            spans_suggs.push((generics.span.shrink_to_hi(), format!(\"<{name}>\")));\n+                            format!(\"you can introduce a named lifetime parameter `{name}`\")\n+                        } else {\n+                            // make use the existing named lifetime\n+                            format!(\"you can use the named lifetime parameter `{name}`\")\n+                        };\n+                        spans_suggs\n+                            .push((fn_return.span.shrink_to_hi(), format!(\" + {name} \")));\n+                        err.multipart_suggestion_verbose(\n+                            &format!(\n+                                \"{declare} `{ty}` {captures}, {use_lt}\",\n+                            ),\n+                            spans_suggs,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    } else {\n+                        err.span_suggestion_verbose(\n+                            fn_return.span.shrink_to_hi(),\n+                            &format!(\"{declare} `{ty}` {captures}, {explicit}\",),\n+                            &plus_lt,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                 }\n             }\n             TyKind::TraitObject(_, lt, _) => {"}, {"sha": "36ef9ea4443456916ed51322da2a7cfd97299f3a", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.rs?ref=523fe7a121e80b5959bfa6203268a46e9d9e7dd4", "patch": "@@ -6,12 +6,10 @@ impl A {\n     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n         self.x.iter().map(|a| a.0)\n         //~^ ERROR: captures lifetime that does not appear in bounds\n-        //~| ERROR: captures lifetime that does not appear in bounds\n     }\n     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n         self.x.iter().map(|a| a.0)\n         //~^ ERROR: captures lifetime that does not appear in bounds\n-        //~| ERROR: captures lifetime that does not appear in bounds\n     }\n }\n "}, {"sha": "c451f8e37c4ec03aebd7ef0a3ab87af40bc96a4b", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=523fe7a121e80b5959bfa6203268a46e9d9e7dd4", "patch": "@@ -12,36 +12,10 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ++++\n \n error[E0700]: hidden type for `impl Iterator<Item = u32>` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:7:9\n-   |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         ----- hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:7:27: 7:30]>` captures the anonymous lifetime defined here\n-LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: to declare that `impl Iterator<Item = u32>` captures `'_`, you can add an explicit `'_` lifetime bound\n-   |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n-   |                                                           ++++\n-\n-error[E0700]: hidden type for `impl Iterator<Item = u32>` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:12:9\n-   |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                    -- hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:12:27: 12:30]>` captures the lifetime `'a` as defined here\n-LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: to declare that `impl Iterator<Item = u32>` captures `'a`, you can add an explicit `'a` lifetime bound\n-   |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n-   |                                                             ++++\n-\n-error[E0700]: hidden type for `impl Iterator<Item = u32>` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:12:9\n+  --> $DIR/static-return-lifetime-infered.rs:11:9\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                    -- hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:12:27: 12:30]>` captures the lifetime `'a` as defined here\n+   |                    -- hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:30]>` captures the lifetime `'a` as defined here\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -50,6 +24,6 @@ help: to declare that `impl Iterator<Item = u32>` captures `'a`, you can add an\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ++++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0700`."}, {"sha": "f6ed9c82e915873d1f462101d6bf5e8945cc69b1", "filename": "src/test/ui/lifetimes/issue-105227.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/src%2Ftest%2Fui%2Flifetimes%2Fissue-105227.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/src%2Ftest%2Fui%2Flifetimes%2Fissue-105227.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-105227.fixed?ref=523fe7a121e80b5959bfa6203268a46e9d9e7dd4", "patch": "@@ -0,0 +1,26 @@\n+// Regression test for issue #105227.\n+\n+// run-rustfix\n+#![allow(warnings)]\n+fn chars0<'a>(v :(&'a  str, &'a str)) -> impl Iterator<Item = char> + 'a  {\n+//~^ HELP to declare that `impl Iterator<Item = char>` captures `'_`, you can introduce a named lifetime parameter `'a`\n+    v.0.chars().chain(v.1.chars())\n+    //~^ ERROR hidden type for `impl Iterator<Item = char>` captures lifetime that does not appear in bounds\n+}\n+\n+fn chars1<'a>(v0 : &'a  str, v1 : &'a str) -> impl Iterator<Item = char> + 'a  {\n+//~^ HELP to declare that `impl Iterator<Item = char>` captures `'_`, you can introduce a named lifetime parameter `'a`\n+    v0.chars().chain(v1.chars())\n+    //~^ ERROR hidden type for `impl Iterator<Item = char>` captures lifetime that does not appear in bound\n+}\n+\n+fn chars2<'b>(v0 : &'b str, v1 : &'b str, v2 : &'b str) ->\n+//~^ HELP to declare that `impl Iterator<Item = char>` captures `'_`, you can use the named lifetime parameter `'b`\n+    (impl Iterator<Item = char> + 'b , &'b str)\n+{\n+    (v0.chars().chain(v1.chars()), v2)\n+    //~^ ERROR hidden type for `impl Iterator<Item = char>` captures lifetime that does not appear in bound\n+}\n+\n+fn main() {\n+}"}, {"sha": "6427a50bb87e27ab578a6c238f130632ae60f4cd", "filename": "src/test/ui/lifetimes/issue-105227.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/src%2Ftest%2Fui%2Flifetimes%2Fissue-105227.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/src%2Ftest%2Fui%2Flifetimes%2Fissue-105227.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-105227.rs?ref=523fe7a121e80b5959bfa6203268a46e9d9e7dd4", "patch": "@@ -0,0 +1,26 @@\n+// Regression test for issue #105227.\n+\n+// run-rustfix\n+#![allow(warnings)]\n+fn chars0(v :(& str, &str)) -> impl Iterator<Item = char> {\n+//~^ HELP to declare that `impl Iterator<Item = char>` captures `'_`, you can introduce a named lifetime parameter `'a`\n+    v.0.chars().chain(v.1.chars())\n+    //~^ ERROR hidden type for `impl Iterator<Item = char>` captures lifetime that does not appear in bounds\n+}\n+\n+fn chars1(v0 : & str, v1 : &str) -> impl Iterator<Item = char> {\n+//~^ HELP to declare that `impl Iterator<Item = char>` captures `'_`, you can introduce a named lifetime parameter `'a`\n+    v0.chars().chain(v1.chars())\n+    //~^ ERROR hidden type for `impl Iterator<Item = char>` captures lifetime that does not appear in bound\n+}\n+\n+fn chars2<'b>(v0 : &str, v1 : &'_ str, v2 : &'b str) ->\n+//~^ HELP to declare that `impl Iterator<Item = char>` captures `'_`, you can use the named lifetime parameter `'b`\n+    (impl Iterator<Item = char>, &'b str)\n+{\n+    (v0.chars().chain(v1.chars()), v2)\n+    //~^ ERROR hidden type for `impl Iterator<Item = char>` captures lifetime that does not appear in bound\n+}\n+\n+fn main() {\n+}"}, {"sha": "d21145937357c3178babbc43fcb1254bac610ec4", "filename": "src/test/ui/lifetimes/issue-105227.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/src%2Ftest%2Fui%2Flifetimes%2Fissue-105227.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/523fe7a121e80b5959bfa6203268a46e9d9e7dd4/src%2Ftest%2Fui%2Flifetimes%2Fissue-105227.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-105227.stderr?ref=523fe7a121e80b5959bfa6203268a46e9d9e7dd4", "patch": "@@ -0,0 +1,47 @@\n+error[E0700]: hidden type for `impl Iterator<Item = char>` captures lifetime that does not appear in bounds\n+  --> $DIR/issue-105227.rs:7:5\n+   |\n+LL | fn chars0(v :(& str, &str)) -> impl Iterator<Item = char> {\n+   |               ----- hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n+LL |\n+LL |     v.0.chars().chain(v.1.chars())\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to declare that `impl Iterator<Item = char>` captures `'_`, you can introduce a named lifetime parameter `'a`\n+   |\n+LL | fn chars0<'a>(v :(&'a  str, &'a str)) -> impl Iterator<Item = char> + 'a  {\n+   |          ++++      ++        ++                                     ++++\n+\n+error[E0700]: hidden type for `impl Iterator<Item = char>` captures lifetime that does not appear in bounds\n+  --> $DIR/issue-105227.rs:13:5\n+   |\n+LL | fn chars1(v0 : & str, v1 : &str) -> impl Iterator<Item = char> {\n+   |                ----- hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n+LL |\n+LL |     v0.chars().chain(v1.chars())\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to declare that `impl Iterator<Item = char>` captures `'_`, you can introduce a named lifetime parameter `'a`\n+   |\n+LL | fn chars1<'a>(v0 : &'a  str, v1 : &'a str) -> impl Iterator<Item = char> + 'a  {\n+   |          ++++       ++             ++                                    ++++\n+\n+error[E0700]: hidden type for `impl Iterator<Item = char>` captures lifetime that does not appear in bounds\n+  --> $DIR/issue-105227.rs:21:5\n+   |\n+LL | fn chars2<'b>(v0 : &str, v1 : &'_ str, v2 : &'b str) ->\n+   |                    ---- hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n+...\n+LL |     (v0.chars().chain(v1.chars()), v2)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to declare that `impl Iterator<Item = char>` captures `'_`, you can use the named lifetime parameter `'b`\n+   |\n+LL ~ fn chars2<'b>(v0 : &'b str, v1 : &'b str, v2 : &'b str) ->\n+LL |\n+LL ~     (impl Iterator<Item = char> + 'b , &'b str)\n+   |\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0700`."}]}