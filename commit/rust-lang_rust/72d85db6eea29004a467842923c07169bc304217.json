{"sha": "72d85db6eea29004a467842923c07169bc304217", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZDg1ZGI2ZWVhMjkwMDRhNDY3ODQyOTIzYzA3MTY5YmMzMDQyMTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T09:49:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T09:49:31Z"}, "message": "expose char::encode_utf8_raw for libstd", "tree": {"sha": "2b12d61570ac4733247e7880af6414a964278ed4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b12d61570ac4733247e7880af6414a964278ed4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72d85db6eea29004a467842923c07169bc304217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72d85db6eea29004a467842923c07169bc304217", "html_url": "https://github.com/rust-lang/rust/commit/72d85db6eea29004a467842923c07169bc304217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72d85db6eea29004a467842923c07169bc304217/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52ed89ae8c264d8885bfda4f79033289db459c02", "url": "https://api.github.com/repos/rust-lang/rust/commits/52ed89ae8c264d8885bfda4f79033289db459c02", "html_url": "https://github.com/rust-lang/rust/commit/52ed89ae8c264d8885bfda4f79033289db459c02"}], "stats": {"total": 103, "additions": 63, "deletions": 40}, "files": [{"sha": "112e7e38e414bf066e80630b05ef79fb9db6f017", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 59, "deletions": 40, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/72d85db6eea29004a467842923c07169bc304217/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d85db6eea29004a467842923c07169bc304217/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=72d85db6eea29004a467842923c07169bc304217", "patch": "@@ -593,16 +593,7 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn len_utf8(self) -> usize {\n-        let code = self as u32;\n-        if code < MAX_ONE_B {\n-            1\n-        } else if code < MAX_TWO_B {\n-            2\n-        } else if code < MAX_THREE_B {\n-            3\n-        } else {\n-            4\n-        }\n+        len_utf8(self as u32)\n     }\n \n     /// Returns the number of 16-bit code units this `char` would need if\n@@ -670,36 +661,7 @@ impl char {\n     #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {\n-        let code = self as u32;\n-        let len = self.len_utf8();\n-        match (len, &mut dst[..]) {\n-            (1, [a, ..]) => {\n-                *a = code as u8;\n-            }\n-            (2, [a, b, ..]) => {\n-                *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n-                *b = (code & 0x3F) as u8 | TAG_CONT;\n-            }\n-            (3, [a, b, c, ..]) => {\n-                *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n-                *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n-                *c = (code & 0x3F) as u8 | TAG_CONT;\n-            }\n-            (4, [a, b, c, d, ..]) => {\n-                *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n-                *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n-                *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n-                *d = (code & 0x3F) as u8 | TAG_CONT;\n-            }\n-            _ => panic!(\n-                \"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n-                len,\n-                code,\n-                dst.len(),\n-            ),\n-        };\n-        // SAFETY: We just wrote UTF-8 content in, so converting to str is fine.\n-        unsafe { from_utf8_unchecked_mut(&mut dst[..len]) }\n+        encode_utf8_raw(self as u32, dst)\n     }\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer,\n@@ -1673,3 +1635,60 @@ impl char {\n         }\n     }\n }\n+\n+#[inline]\n+fn len_utf8(code: u32) -> usize {\n+    if code < MAX_ONE_B {\n+        1\n+    } else if code < MAX_TWO_B {\n+        2\n+    } else if code < MAX_THREE_B {\n+        3\n+    } else {\n+        4\n+    }\n+}\n+\n+/// Encodes a raw u32 value as UTF-8 into the provided byte buffer,\n+/// and then returns the subslice of the buffer that contains the encoded character.\n+///\n+/// Unlike `char::encode_utf8`, this method can be called on codepoints in the surrogate range.\n+///\n+/// # Panics\n+///\n+/// Panics if the buffer is not large enough.\n+/// A buffer of length four is large enough to encode any `char`.\n+#[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n+#[doc(hidden)]\n+#[inline]\n+pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut str {\n+    let len = len_utf8(code);\n+    match (len, &mut dst[..]) {\n+        (1, [a, ..]) => {\n+            *a = code as u8;\n+        }\n+        (2, [a, b, ..]) => {\n+            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n+            *b = (code & 0x3F) as u8 | TAG_CONT;\n+        }\n+        (3, [a, b, c, ..]) => {\n+            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n+            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n+            *c = (code & 0x3F) as u8 | TAG_CONT;\n+        }\n+        (4, [a, b, c, d, ..]) => {\n+            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n+            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n+            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n+            *d = (code & 0x3F) as u8 | TAG_CONT;\n+        }\n+        _ => panic!(\n+            \"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n+            len,\n+            code,\n+            dst.len(),\n+        ),\n+    };\n+    // SAFETY: We just wrote UTF-8 content in, so converting to str is fine.\n+    unsafe { from_utf8_unchecked_mut(&mut dst[..len]) }\n+}"}, {"sha": "40b429b749668735933949daaf013571131ce2d4", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d85db6eea29004a467842923c07169bc304217/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d85db6eea29004a467842923c07169bc304217/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=72d85db6eea29004a467842923c07169bc304217", "patch": "@@ -37,6 +37,10 @@ pub use self::decode::{decode_utf16, DecodeUtf16, DecodeUtf16Error};\n #[stable(feature = \"unicode_version\", since = \"1.45.0\")]\n pub use crate::unicode::UNICODE_VERSION;\n \n+// perma-unstable re-exports\n+#[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n+pub use self::methods::encode_utf8_raw;\n+\n use crate::fmt::{self, Write};\n use crate::iter::FusedIterator;\n "}]}