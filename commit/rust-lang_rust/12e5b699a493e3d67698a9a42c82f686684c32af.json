{"sha": "12e5b699a493e3d67698a9a42c82f686684c32af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZTViNjk5YTQ5M2UzZDY3Njk4YTlhNDJjODJmNjg2Njg0YzMyYWY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-06-06T13:09:21Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-06-06T13:09:21Z"}, "message": "incr.comp.: Make WorkProductId opaque so we don't accidentally rely on being able to reconstruct obj-file names from one.", "tree": {"sha": "74be507b66e60a40619281a67eed0551cd356600", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74be507b66e60a40619281a67eed0551cd356600"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12e5b699a493e3d67698a9a42c82f686684c32af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12e5b699a493e3d67698a9a42c82f686684c32af", "html_url": "https://github.com/rust-lang/rust/commit/12e5b699a493e3d67698a9a42c82f686684c32af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12e5b699a493e3d67698a9a42c82f686684c32af/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fc84907dc39bf36050ec0dfd57f82079f09d993", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc84907dc39bf36050ec0dfd57f82079f09d993", "html_url": "https://github.com/rust-lang/rust/commit/7fc84907dc39bf36050ec0dfd57f82079f09d993"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "1a0f89a1e5361346487bcfa52bc942c305d315a2", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/12e5b699a493e3d67698a9a42c82f686684c32af/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e5b699a493e3d67698a9a42c82f686684c32af/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=12e5b699a493e3d67698a9a42c82f686684c32af", "patch": "@@ -9,8 +9,10 @@\n // except according to those terms.\n \n use hir::def_id::CrateNum;\n+use ich::Fingerprint;\n+use rustc_data_structures::stable_hasher::StableHasher;\n use std::fmt::Debug;\n-use std::sync::Arc;\n+use std::hash::Hash;\n \n macro_rules! try_opt {\n     ($e:expr) => (\n@@ -56,7 +58,7 @@ pub enum DepNode<D: Clone + Debug> {\n \n     /// Represents some artifact that we save to disk. Note that these\n     /// do not have a def-id as part of their identifier.\n-    WorkProduct(Arc<WorkProductId>),\n+    WorkProduct(WorkProductId),\n \n     // Represents different phases in the compiler.\n     RegionMaps(D),\n@@ -318,7 +320,16 @@ impl<D: Clone + Debug> DepNode<D> {\n /// the need to be mapped or unmapped. (This ensures we can serialize\n /// them even in the absence of a tcx.)\n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n-pub struct WorkProductId(pub String);\n+pub struct WorkProductId(pub Fingerprint);\n+\n+impl WorkProductId {\n+    pub fn from_cgu_name(cgu_name: &str) -> WorkProductId {\n+        let mut hasher = StableHasher::new();\n+        cgu_name.len().hash(&mut hasher);\n+        cgu_name.hash(&mut hasher);\n+        WorkProductId(hasher.finish())\n+    }\n+}\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub enum GlobalMetaDataKind {"}, {"sha": "dc482b0d6ac853a2cf731d426857eeb586801416", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/12e5b699a493e3d67698a9a42c82f686684c32af/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e5b699a493e3d67698a9a42c82f686684c32af/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=12e5b699a493e3d67698a9a42c82f686684c32af", "patch": "@@ -13,7 +13,6 @@ use rustc_data_structures::fx::FxHashMap;\n use session::config::OutputType;\n use std::cell::{Ref, RefCell};\n use std::rc::Rc;\n-use std::sync::Arc;\n \n use super::dep_node::{DepNode, WorkProductId};\n use super::query::DepGraphQuery;\n@@ -35,10 +34,10 @@ struct DepGraphData {\n     /// things available to us. If we find that they are not dirty, we\n     /// load the path to the file storing those work-products here into\n     /// this map. We can later look for and extract that data.\n-    previous_work_products: RefCell<FxHashMap<Arc<WorkProductId>, WorkProduct>>,\n+    previous_work_products: RefCell<FxHashMap<WorkProductId, WorkProduct>>,\n \n     /// Work-products that we generate in this run.\n-    work_products: RefCell<FxHashMap<Arc<WorkProductId>, WorkProduct>>,\n+    work_products: RefCell<FxHashMap<WorkProductId, WorkProduct>>,\n }\n \n impl DepGraph {\n@@ -120,7 +119,7 @@ impl DepGraph {\n     /// Indicates that a previous work product exists for `v`. This is\n     /// invoked during initial start-up based on what nodes are clean\n     /// (and what files exist in the incr. directory).\n-    pub fn insert_previous_work_product(&self, v: &Arc<WorkProductId>, data: WorkProduct) {\n+    pub fn insert_previous_work_product(&self, v: &WorkProductId, data: WorkProduct) {\n         debug!(\"insert_previous_work_product({:?}, {:?})\", v, data);\n         self.data.previous_work_products.borrow_mut()\n                                         .insert(v.clone(), data);\n@@ -129,29 +128,29 @@ impl DepGraph {\n     /// Indicates that we created the given work-product in this run\n     /// for `v`. This record will be preserved and loaded in the next\n     /// run.\n-    pub fn insert_work_product(&self, v: &Arc<WorkProductId>, data: WorkProduct) {\n+    pub fn insert_work_product(&self, v: &WorkProductId, data: WorkProduct) {\n         debug!(\"insert_work_product({:?}, {:?})\", v, data);\n         self.data.work_products.borrow_mut()\n                                .insert(v.clone(), data);\n     }\n \n     /// Check whether a previous work product exists for `v` and, if\n     /// so, return the path that leads to it. Used to skip doing work.\n-    pub fn previous_work_product(&self, v: &Arc<WorkProductId>) -> Option<WorkProduct> {\n+    pub fn previous_work_product(&self, v: &WorkProductId) -> Option<WorkProduct> {\n         self.data.previous_work_products.borrow()\n                                         .get(v)\n                                         .cloned()\n     }\n \n     /// Access the map of work-products created during this run. Only\n     /// used during saving of the dep-graph.\n-    pub fn work_products(&self) -> Ref<FxHashMap<Arc<WorkProductId>, WorkProduct>> {\n+    pub fn work_products(&self) -> Ref<FxHashMap<WorkProductId, WorkProduct>> {\n         self.data.work_products.borrow()\n     }\n \n     /// Access the map of work-products created during the cached run. Only\n     /// used during saving of the dep-graph.\n-    pub fn previous_work_products(&self) -> Ref<FxHashMap<Arc<WorkProductId>, WorkProduct>> {\n+    pub fn previous_work_products(&self) -> Ref<FxHashMap<WorkProductId, WorkProduct>> {\n         self.data.previous_work_products.borrow()\n     }\n }"}, {"sha": "4669bb866d41bd3c4aae227f33025dc1cdb427dd", "filename": "src/librustc_incremental/persist/data.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12e5b699a493e3d67698a9a42c82f686684c32af/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e5b699a493e3d67698a9a42c82f686684c32af/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs?ref=12e5b699a493e3d67698a9a42c82f686684c32af", "patch": "@@ -15,7 +15,6 @@ use rustc::hir::def_id::DefIndex;\n use rustc::hir::map::DefPathHash;\n use rustc::ich::Fingerprint;\n use rustc::middle::cstore::EncodedMetadataHash;\n-use std::sync::Arc;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n@@ -98,7 +97,7 @@ pub struct SerializedHash {\n #[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct SerializedWorkProduct {\n     /// node that produced the work-product\n-    pub id: Arc<WorkProductId>,\n+    pub id: WorkProductId,\n \n     /// work-product data itself\n     pub work_product: WorkProduct,"}, {"sha": "f2ecf4c74e78109d53f7d3eccd9f13b9a8515b2f", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/12e5b699a493e3d67698a9a42c82f686684c32af/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e5b699a493e3d67698a9a42c82f686684c32af/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=12e5b699a493e3d67698a9a42c82f686684c32af", "patch": "@@ -22,7 +22,6 @@ use rustc_serialize::Decodable as RustcDecodable;\n use rustc_serialize::opaque::Decoder;\n use std::default::Default;\n use std::path::{Path};\n-use std::sync::Arc;\n \n use IncrementalHashesMap;\n use super::data::*;\n@@ -327,7 +326,7 @@ fn transitive_dirty_nodes(edge_map: &FxHashMap<DepNode<DefPathHash>, Vec<DepNode\n /// otherwise no longer applicable.\n fn reconcile_work_products<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      work_products: Vec<SerializedWorkProduct>,\n-                                     clean_work_products: &FxHashSet<Arc<WorkProductId>>) {\n+                                     clean_work_products: &FxHashSet<WorkProductId>) {\n     debug!(\"reconcile_work_products({:?})\", work_products);\n     for swp in work_products {\n         if !clean_work_products.contains(&swp.id) {\n@@ -424,8 +423,8 @@ fn process_edges<'a, 'tcx, 'edges>(\n     target: &'edges DepNode<DefPathHash>,\n     edges: &'edges FxHashMap<DepNode<DefPathHash>, Vec<DepNode<DefPathHash>>>,\n     dirty_raw_nodes: &DirtyNodes,\n-    clean_work_products: &mut FxHashSet<Arc<WorkProductId>>,\n-    dirty_work_products: &mut FxHashSet<Arc<WorkProductId>>,\n+    clean_work_products: &mut FxHashSet<WorkProductId>,\n+    dirty_work_products: &mut FxHashSet<WorkProductId>,\n     extra_edges: &mut Vec<(&'edges DepNode<DefPathHash>, &'edges DepNode<DefPathHash>)>)\n {\n     // If the target is dirty, skip the edge. If this is an edge"}, {"sha": "16ab10ab4bbbdfd57e9dab211dccb99c1f428d02", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12e5b699a493e3d67698a9a42c82f686684c32af/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e5b699a493e3d67698a9a42c82f686684c32af/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=12e5b699a493e3d67698a9a42c82f686684c32af", "patch": "@@ -16,7 +16,6 @@ use rustc::session::Session;\n use rustc::session::config::OutputType;\n use rustc::util::fs::link_or_copy;\n use std::path::PathBuf;\n-use std::sync::Arc;\n use std::fs as std_fs;\n \n pub fn save_trans_partition(sess: &Session,\n@@ -30,7 +29,7 @@ pub fn save_trans_partition(sess: &Session,\n     if sess.opts.incremental.is_none() {\n         return;\n     }\n-    let work_product_id = Arc::new(WorkProductId(cgu_name.to_string()));\n+    let work_product_id = WorkProductId::from_cgu_name(cgu_name);\n \n     let saved_files: Option<Vec<_>> =\n         files.iter()"}, {"sha": "df8984e6d2479df7060f0ccfe2d6a3e66963e1df", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12e5b699a493e3d67698a9a42c82f686684c32af/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e5b699a493e3d67698a9a42c82f686684c32af/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=12e5b699a493e3d67698a9a42c82f686684c32af", "patch": "@@ -114,7 +114,6 @@ use rustc::ty::{self, TyCtxt};\n use rustc::ty::item_path::characteristic_def_id_of_type;\n use rustc_incremental::IchHasher;\n use std::hash::Hash;\n-use std::sync::Arc;\n use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n use trans_item::{TransItem, InstantiationMode};\n@@ -164,8 +163,8 @@ impl<'tcx> CodegenUnit<'tcx> {\n         &self.items\n     }\n \n-    pub fn work_product_id(&self) -> Arc<WorkProductId> {\n-        Arc::new(WorkProductId(self.name().to_string()))\n+    pub fn work_product_id(&self) -> WorkProductId {\n+        WorkProductId::from_cgu_name(self.name())\n     }\n \n     pub fn work_product_dep_node(&self) -> DepNode<DefId> {"}]}