{"sha": "617b413e18f8a6bbd24853f5bf84e8a4ac319ae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxN2I0MTNlMThmOGE2YmJkMjQ4NTNmNWJmODRlOGE0YWMzMTlhZTE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-19T15:04:24Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-11-26T14:12:43Z"}, "message": "limit packed copy-out to non-generic Copy structs", "tree": {"sha": "1acc1883e0cd5414436f18f7fe6b2b81f94d1a3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1acc1883e0cd5414436f18f7fe6b2b81f94d1a3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1", "html_url": "https://github.com/rust-lang/rust/commit/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dee8a71cd5221536c319ca8c14108e93521092f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee8a71cd5221536c319ca8c14108e93521092f5", "html_url": "https://github.com/rust-lang/rust/commit/dee8a71cd5221536c319ca8c14108e93521092f5"}], "stats": {"total": 138, "additions": 123, "deletions": 15}, "files": [{"sha": "74e180ce6dffc06ca77da540654c7e27573340ca", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=617b413e18f8a6bbd24853f5bf84e8a4ac319ae1", "patch": "@@ -373,6 +373,22 @@ fn report_unused_unsafe(tcx: TyCtxt, used_unsafe: &FxHashSet<ast::NodeId>, id: a\n     db.emit();\n }\n \n+fn builtin_derive_def_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n+    debug!(\"builtin_derive_def_id({:?})\", def_id);\n+    if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n+        if tcx.has_attr(impl_def_id, \"automatically_derived\") {\n+            debug!(\"builtin_derive_def_id({:?}) - is {:?}\", def_id, impl_def_id);\n+            Some(impl_def_id)\n+        } else {\n+            debug!(\"builtin_derive_def_id({:?}) - not automatically derived\", def_id);\n+            None\n+        }\n+    } else {\n+        debug!(\"builtin_derive_def_id({:?}) - not a method\", def_id);\n+        None\n+    }\n+}\n+\n pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     debug!(\"check_unsafety({:?})\", def_id);\n \n@@ -386,6 +402,7 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n         unsafe_blocks\n     } = tcx.unsafety_check_result(def_id);\n \n+    let mut emitted_derive_error = false;\n     for &UnsafetyViolation {\n         source_info, description, kind\n     } in violations.iter() {\n@@ -406,11 +423,29 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                                         block (error E0133)\", description));\n             }\n             UnsafetyViolationKind::BorrowPacked(lint_node_id) => {\n+                if emitted_derive_error {\n+                    continue\n+                }\n+\n+                let message = if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n+                    emitted_derive_error = true;\n+                    // FIXME: when we make this a hard error, this should have its\n+                    // own error code.\n+                    if !tcx.generics_of(impl_def_id).types.is_empty() {\n+                        format!(\"#[derive] can't be used on a #[repr(packed)] struct with \\\n+                                 type parameters (error E0133)\")\n+                    } else {\n+                        format!(\"#[derive] can't be used on a non-Copy #[repr(packed)] struct \\\n+                                (error E0133)\")\n+                    }\n+                } else {\n+                   format!(\"{} requires unsafe function or \\\n+                            block (error E0133)\", description)\n+                };\n                 tcx.lint_node(SAFE_PACKED_BORROWS,\n                               lint_node_id,\n                               source_info.span,\n-                              &format!(\"{} requires unsafe function or \\\n-                                        block (error E0133)\", description));\n+                              &message);\n             }\n         }\n     }"}, {"sha": "c7fa0331c1bd5a9dc55c5f9897edf393212432de", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=617b413e18f8a6bbd24853f5bf84e8a4ac319ae1", "patch": "@@ -74,7 +74,7 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt, span: Span, traits: &[ast::Path]\n             let meta = cx.meta_word(span, Symbol::intern(\"structural_match\"));\n             attrs.push(cx.attribute(span, meta));\n         }\n-        if names.contains(&Symbol::intern(\"Copy\")) && names.contains(&Symbol::intern(\"Clone\")) {\n+        if names.contains(&Symbol::intern(\"Copy\")) {\n             let meta = cx.meta_word(span, Symbol::intern(\"rustc_copy_clone_marker\"));\n             attrs.push(cx.attribute(span, meta));\n         }"}, {"sha": "2b565ca51e9ec92c212d684c624a42a4ece404e3", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=617b413e18f8a6bbd24853f5bf84e8a4ac319ae1", "patch": "@@ -413,7 +413,24 @@ impl<'a> TraitDef<'a> {\n                     attr::find_repr_attrs(&cx.parse_sess.span_diagnostic, attr)\n                         .contains(&attr::ReprPacked)\n                 });\n-                let use_temporaries = is_packed;\n+                let has_no_type_params = match item.node {\n+                    ast::ItemKind::Struct(_, ref generics) |\n+                    ast::ItemKind::Enum(_, ref generics) |\n+                    ast::ItemKind::Union(_, ref generics) => {\n+                        generics.ty_params.is_empty()\n+                    }\n+                    _ => {\n+                        // Non-ADT derive is an error, but it should have been\n+                        // set earlier; see\n+                        // libsyntax/ext/expand.rs:MacroExpander::expand()\n+                        return;\n+                    }\n+                };\n+                let is_always_copy =\n+                    attr::contains_name(&item.attrs, \"rustc_copy_clone_marker\") &&\n+                    has_no_type_params;\n+                let use_temporaries = is_packed && is_always_copy;\n+\n                 let newitem = match item.node {\n                     ast::ItemKind::Struct(ref struct_def, ref generics) => {\n                         self.expand_struct_def(cx, &struct_def, item.ident, generics, from_scratch,\n@@ -440,12 +457,7 @@ impl<'a> TraitDef<'a> {\n                             return;\n                         }\n                     }\n-                    _ => {\n-                        // Non-ADT derive is an error, but it should have been\n-                        // set earlier; see\n-                        // libsyntax/ext/expand.rs:MacroExpander::expand()\n-                        return;\n-                    }\n+                    _ => unreachable!(),\n                 };\n                 // Keep the lint attributes of the previous item to control how the\n                 // generated implementations are linted"}, {"sha": "55dc338020932af9c298efbb664fdccae6d0f5a6", "filename": "src/test/compile-fail/deriving-with-repr-packed-not-copy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Ftest%2Fcompile-fail%2Fderiving-with-repr-packed-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Ftest%2Fcompile-fail%2Fderiving-with-repr-packed-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-with-repr-packed-not-copy.rs?ref=617b413e18f8a6bbd24853f5bf84e8a4ac319ae1", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(safe_packed_borrows)]\n+\n // check that derive on a packed struct with non-Copy fields\n // correctly. This can't be made to work perfectly because\n // we can't just use the field from the struct as it might\n@@ -17,12 +19,10 @@\n struct Y(usize);\n \n #[derive(PartialEq)]\n-//~^ ERROR cannot move out of borrowed\n-//~| ERROR cannot move out of borrowed\n-//~| ERROR cannot move out of borrowed\n-//~| ERROR cannot move out of borrowed\n #[repr(packed)]\n struct X(Y);\n+//~^ ERROR #[derive] can't be used on a non-Copy #[repr(packed)]\n+//~| hard error\n \n fn main() {\n }"}, {"sha": "f5130908c0b21099972f0a342fdb4a957aeca1ab", "filename": "src/test/run-pass/deriving-with-repr-packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Ftest%2Frun-pass%2Fderiving-with-repr-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Ftest%2Frun-pass%2Fderiving-with-repr-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-with-repr-packed.rs?ref=617b413e18f8a6bbd24853f5bf84e8a4ac319ae1", "patch": "@@ -31,7 +31,7 @@ impl PartialEq for Aligned {\n }\n \n #[repr(packed)]\n-#[derive(PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n struct Packed(Aligned, Aligned);\n \n #[derive(PartialEq)]"}, {"sha": "85e0c3ba14eff277df6f9715c781a776166ed165", "filename": "src/test/ui/deriving-with-repr-packed.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Ftest%2Fui%2Fderiving-with-repr-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Ftest%2Fui%2Fderiving-with-repr-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving-with-repr-packed.rs?ref=617b413e18f8a6bbd24853f5bf84e8a4ac319ae1", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(safe_packed_borrows)]\n+\n+// check that deriving a non-Copy packed struct is an error.\n+#[derive(Copy, Clone, PartialEq, Eq)]\n+#[repr(packed)]\n+pub struct Foo<T>(T, T, T);\n+//~^ ERROR #[derive] can't be used\n+//~| hard error\n+//~^^^ ERROR #[derive] can't be used\n+//~| hard error\n+#[derive(PartialEq, Eq)]\n+#[repr(packed)]\n+pub struct Bar(u32, u32, u32);\n+//~^ ERROR #[derive] can't be used\n+//~| hard error\n+\n+fn main() {}"}, {"sha": "24ce8a1e59fd9dd8d6d70c9a01627a2238a8d84f", "filename": "src/test/ui/deriving-with-repr-packed.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/617b413e18f8a6bbd24853f5bf84e8a4ac319ae1/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr?ref=617b413e18f8a6bbd24853f5bf84e8a4ac319ae1", "patch": "@@ -0,0 +1,34 @@\n+error: #[derive] can't be used on a #[repr(packed)] struct with type parameters (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:16:19\n+   |\n+16 | pub struct Foo<T>(T, T, T);\n+   |                   ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/deriving-with-repr-packed.rs:11:9\n+   |\n+11 | #![deny(safe_packed_borrows)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+\n+error: #[derive] can't be used on a #[repr(packed)] struct with type parameters (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:16:19\n+   |\n+16 | pub struct Foo<T>(T, T, T);\n+   |                   ^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+\n+error: #[derive] can't be used on a non-Copy #[repr(packed)] struct (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:23:16\n+   |\n+23 | pub struct Bar(u32, u32, u32);\n+   |                ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+\n+error: aborting due to 5 previous errors\n+"}]}