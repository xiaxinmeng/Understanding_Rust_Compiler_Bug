{"sha": "ffd482e2f5e5b5635922613500b13f0ba6150aaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZDQ4MmUyZjVlNWI1NjM1OTIyNjEzNTAwYjEzZjBiYTYxNTBhYWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-04T03:27:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-04T03:37:38Z"}, "message": "check the assumptions made by the unchecked_ and copy_nonoverlapping intrinsics", "tree": {"sha": "d0638e1a2d363c8b04272e9e00bf1c7922e3728c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0638e1a2d363c8b04272e9e00bf1c7922e3728c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffd482e2f5e5b5635922613500b13f0ba6150aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd482e2f5e5b5635922613500b13f0ba6150aaf", "html_url": "https://github.com/rust-lang/rust/commit/ffd482e2f5e5b5635922613500b13f0ba6150aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffd482e2f5e5b5635922613500b13f0ba6150aaf/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f118ff43e7208338fa44567725e7a2af90b60a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/f118ff43e7208338fa44567725e7a2af90b60a86", "html_url": "https://github.com/rust-lang/rust/commit/f118ff43e7208338fa44567725e7a2af90b60a86"}], "stats": {"total": 91, "additions": 85, "deletions": 6}, "files": [{"sha": "448ac2f708919162733bd37ba30bb557d5ad4848", "filename": "src/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffd482e2f5e5b5635922613500b13f0ba6150aaf/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd482e2f5e5b5635922613500b13f0ba6150aaf/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=ffd482e2f5e5b5635922613500b13f0ba6150aaf", "patch": "@@ -1022,7 +1022,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn copy(&mut self, src: PrimVal, dest: PrimVal, ty: Ty<'tcx>) -> EvalResult<'tcx> {\n         let size = self.type_size(ty)?.expect(\"cannot copy from an unsized type\");\n         let align = self.type_align(ty)?;\n-        self.memory.copy(src, dest, size, align)?;\n+        self.memory.copy(src, dest, size, align, false)?;\n         Ok(())\n     }\n "}, {"sha": "7623a0c4d2e30f5db145e5b379006f9ce059fbe1", "filename": "src/memory.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffd482e2f5e5b5635922613500b13f0ba6150aaf/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd482e2f5e5b5635922613500b13f0ba6150aaf/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=ffd482e2f5e5b5635922613500b13f0ba6150aaf", "patch": "@@ -658,7 +658,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         Ok(())\n     }\n \n-    pub fn copy(&mut self, src: PrimVal, dest: PrimVal, size: u64, align: u64) -> EvalResult<'tcx> {\n+    pub fn copy(&mut self, src: PrimVal, dest: PrimVal, size: u64, align: u64, nonoverlapping: bool) -> EvalResult<'tcx> {\n         if size == 0 {\n             return Ok(());\n         }\n@@ -675,6 +675,12 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         unsafe {\n             assert_eq!(size as usize as u64, size);\n             if src.alloc_id == dest.alloc_id {\n+                if nonoverlapping {\n+                    if (src.offset <= dest.offset && src.offset + size > dest.offset) ||\n+                       (dest.offset <= src.offset && dest.offset + size > src.offset) {\n+                        return Err(EvalError::Intrinsic(format!(\"copy_nonoverlapping called on overlapping ranges\")));\n+                    }\n+                }\n                 ptr::copy(src_bytes, dest_bytes, size as usize);\n             } else {\n                 ptr::copy_nonoverlapping(src_bytes, dest_bytes, size as usize);"}, {"sha": "058936fd0445e5c47c8ee5b0d9fd1beb48880a4c", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ffd482e2f5e5b5635922613500b13f0ba6150aaf/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd482e2f5e5b5635922613500b13f0ba6150aaf/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=ffd482e2f5e5b5635922613500b13f0ba6150aaf", "patch": "@@ -140,15 +140,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             \"copy\" |\n             \"copy_nonoverlapping\" => {\n-                // FIXME: check whether overlapping occurs\n                 let elem_ty = substs.type_at(0);\n                 let elem_size = self.type_size(elem_ty)?.expect(\"cannot copy unsized value\");\n                 if elem_size != 0 {\n                     let elem_align = self.type_align(elem_ty)?;\n                     let src = arg_vals[0].read_ptr(&self.memory)?;\n                     let dest = arg_vals[1].read_ptr(&self.memory)?;\n                     let count = self.value_to_primval(arg_vals[2], usize)?.to_u64()?;\n-                    self.memory.copy(src, dest, count * elem_size, elem_align)?;\n+                    self.memory.copy(src, dest, count * elem_size, elem_align, intrinsic_name.ends_with(\"_nonoverlapping\"))?;\n                 }\n             }\n \n@@ -408,12 +407,20 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"unchecked_shl\" => {\n-                // FIXME Check for too-wide shifts\n+                let bits = self.type_size(dest_ty)?.expect(\"intrinsic can't be called on unsized type\") as u128 * 8;\n+                let rhs = self.value_to_primval(arg_vals[1], substs.type_at(0))?.to_bytes()?;\n+                if rhs >= bits {\n+                    return Err(EvalError::Intrinsic(format!(\"Overflowing shift by {} in unchecked_shl\", rhs)));\n+                }\n                 self.intrinsic_overflowing(mir::BinOp::Shl, &args[0], &args[1], dest, dest_ty)?;\n             }\n \n             \"unchecked_shr\" => {\n-                // FIXME Check for too-wide shifts\n+                let bits = self.type_size(dest_ty)?.expect(\"intrinsic can't be called on unsized type\") as u128 * 8;\n+                let rhs = self.value_to_primval(arg_vals[1], substs.type_at(0))?.to_bytes()?;\n+                if rhs >= bits {\n+                    return Err(EvalError::Intrinsic(format!(\"Overflowing shift by {} in unchecked_shr\", rhs)));\n+                }\n                 self.intrinsic_overflowing(mir::BinOp::Shr, &args[0], &args[1], dest, dest_ty)?;\n             }\n "}, {"sha": "f4acbadfd549d588a01bdec05f9a7acc480da62c", "filename": "tests/compile-fail/copy_nonoverlapping.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ffd482e2f5e5b5635922613500b13f0ba6150aaf/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd482e2f5e5b5635922613500b13f0ba6150aaf/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs?ref=ffd482e2f5e5b5635922613500b13f0ba6150aaf", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::*;\n+\n+//error-pattern: copy_nonoverlapping called on overlapping ranges\n+\n+fn main() {\n+    let mut data = [0u8; 16];\n+    unsafe {\n+        let a = &data[0] as *const _;\n+        let b = &mut data[1] as *mut _;\n+        std::ptr::copy_nonoverlapping(a, b, 2);\n+    }\n+}"}, {"sha": "4ac6214d88abb12c139c63ae6a3f351faef47ea5", "filename": "tests/compile-fail/div-by-zero.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ffd482e2f5e5b5635922613500b13f0ba6150aaf/tests%2Fcompile-fail%2Fdiv-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd482e2f5e5b5635922613500b13f0ba6150aaf/tests%2Fcompile-fail%2Fdiv-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero.rs?ref=ffd482e2f5e5b5635922613500b13f0ba6150aaf", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::*;\n+\n+//error-pattern: Division by 0 in unchecked_div\n+\n+fn main() {\n+    unsafe {\n+        let _n = unchecked_div(1i64, 0);\n+    }\n+}"}, {"sha": "b8291e1300edf0fbd8fe9e7664a4830fcfe6695c", "filename": "tests/compile-fail/overflowing-unchecked-rsh.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ffd482e2f5e5b5635922613500b13f0ba6150aaf/tests%2Fcompile-fail%2Foverflowing-unchecked-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd482e2f5e5b5635922613500b13f0ba6150aaf/tests%2Fcompile-fail%2Foverflowing-unchecked-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-unchecked-rsh.rs?ref=ffd482e2f5e5b5635922613500b13f0ba6150aaf", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::*;\n+\n+//error-pattern: Overflowing shift by 64 in unchecked_shr\n+\n+fn main() {\n+    unsafe {\n+        let _n = unchecked_shr(1i64, 64);\n+    }\n+}"}]}