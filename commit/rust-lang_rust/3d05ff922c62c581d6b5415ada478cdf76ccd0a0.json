{"sha": "3d05ff922c62c581d6b5415ada478cdf76ccd0a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMDVmZjkyMmM2MmM1ODFkNmI1NDE1YWRhNDc4Y2RmNzZjY2QwYTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-23T18:11:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-23T18:41:35Z"}, "message": "Use the linkage and visibility produced by tcx.collect_and_partition_mono_itemscc #209", "tree": {"sha": "009e1369d1808e06a79a8fd10e8ec9573bc25312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/009e1369d1808e06a79a8fd10e8ec9573bc25312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d05ff922c62c581d6b5415ada478cdf76ccd0a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d05ff922c62c581d6b5415ada478cdf76ccd0a0", "html_url": "https://github.com/rust-lang/rust/commit/3d05ff922c62c581d6b5415ada478cdf76ccd0a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d05ff922c62c581d6b5415ada478cdf76ccd0a0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b4ede39e50aab5f8f262ddd5a821ae699cbd179", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4ede39e50aab5f8f262ddd5a821ae699cbd179", "html_url": "https://github.com/rust-lang/rust/commit/0b4ede39e50aab5f8f262ddd5a821ae699cbd179"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "b3c87258a34e9630ae431c9c8c0ba4f05b2ce3a9", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d05ff922c62c581d6b5415ada478cdf76ccd0a0/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d05ff922c62c581d6b5415ada478cdf76ccd0a0/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=3d05ff922c62c581d6b5415ada478cdf76ccd0a0", "patch": "@@ -12,6 +12,7 @@ impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n pub fn trans_mono_item<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n     cx: &mut crate::CodegenCx<'a, 'clif, 'tcx, B>,\n     mono_item: MonoItem<'tcx>,\n+    linkage: Linkage,\n ) {\n     let tcx = cx.tcx;\n     match mono_item {\n@@ -42,7 +43,7 @@ pub fn trans_mono_item<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n                 }\n             });\n \n-            trans_fn(cx, inst);\n+            trans_fn(cx, inst, linkage);\n         }\n         MonoItem::Static(def_id) => {\n             crate::constant::codegen_static(&mut cx.ccx, def_id);\n@@ -56,6 +57,7 @@ pub fn trans_mono_item<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n     cx: &mut crate::CodegenCx<'a, 'clif, 'tcx, B>,\n     instance: Instance<'tcx>,\n+    linkage: Linkage,\n ) {\n     let tcx = cx.tcx;\n \n@@ -65,7 +67,7 @@ fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n     // Step 2. Declare function\n     let (name, sig) = get_function_name_and_sig(tcx, instance);\n     let func_id = cx.module\n-        .declare_function(&name, Linkage::Export, &sig)\n+        .declare_function(&name, linkage, &sig)\n         .unwrap();\n \n     // Step 3. Make FunctionBuilder"}, {"sha": "8cbd597fd59be7dd5f74c6933df425f635e3916e", "filename": "src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d05ff922c62c581d6b5415ada478cdf76ccd0a0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d05ff922c62c581d6b5415ada478cdf76ccd0a0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3d05ff922c62c581d6b5415ada478cdf76ccd0a0", "patch": "@@ -393,9 +393,17 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n ) {\n     let mut cx = CodegenCx::new(tcx, module);\n     time(\"codegen mono items\", move || {\n-        for (mono_item, (_linkage, _vis)) in mono_items {\n+        for (mono_item, (linkage, vis)) in mono_items {\n             unimpl::try_unimpl(tcx, log, || {\n-                base::trans_mono_item(&mut cx, mono_item);\n+                let linkage = match (linkage, vis) {\n+                    (RLinkage::External, Visibility::Default) => Linkage::Export,\n+                    (RLinkage::Internal, Visibility::Default) => Linkage::Local,\n+                    // FIXME this should get external linkage, but hidden visibility,\n+                    // not internal linkage and default visibility\n+                    | (RLinkage::External, Visibility::Hidden) => Linkage::Local,\n+                    _ => panic!(\"{:?} = {:?} {:?}\", mono_item, linkage, vis),\n+                };\n+                base::trans_mono_item(&mut cx, mono_item, linkage);\n             });\n         }\n "}]}