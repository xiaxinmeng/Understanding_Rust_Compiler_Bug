{"sha": "7eaa3e56a01e9a275129c76817232559b0e20f2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYWEzZTU2YTAxZTlhMjc1MTI5Yzc2ODE3MjMyNTU5YjBlMjBmMmI=", "commit": {"author": {"name": "Vladyslav Katasonov", "email": "cpud47@gmail.com", "date": "2021-02-05T02:00:53Z"}, "committer": {"name": "Vladyslav Katasonov", "email": "cpud47@gmail.com", "date": "2021-02-05T02:44:08Z"}, "message": "allow extracted body to be indented(dedent it)", "tree": {"sha": "4fc783439bcc784951763b2922fa2ddf462be760", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fc783439bcc784951763b2922fa2ddf462be760"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eaa3e56a01e9a275129c76817232559b0e20f2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eaa3e56a01e9a275129c76817232559b0e20f2b", "html_url": "https://github.com/rust-lang/rust/commit/7eaa3e56a01e9a275129c76817232559b0e20f2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eaa3e56a01e9a275129c76817232559b0e20f2b/comments", "author": {"login": "cpud36", "id": 4218373, "node_id": "MDQ6VXNlcjQyMTgzNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4218373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpud36", "html_url": "https://github.com/cpud36", "followers_url": "https://api.github.com/users/cpud36/followers", "following_url": "https://api.github.com/users/cpud36/following{/other_user}", "gists_url": "https://api.github.com/users/cpud36/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpud36/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpud36/subscriptions", "organizations_url": "https://api.github.com/users/cpud36/orgs", "repos_url": "https://api.github.com/users/cpud36/repos", "events_url": "https://api.github.com/users/cpud36/events{/privacy}", "received_events_url": "https://api.github.com/users/cpud36/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cpud36", "id": 4218373, "node_id": "MDQ6VXNlcjQyMTgzNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4218373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpud36", "html_url": "https://github.com/cpud36", "followers_url": "https://api.github.com/users/cpud36/followers", "following_url": "https://api.github.com/users/cpud36/following{/other_user}", "gists_url": "https://api.github.com/users/cpud36/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpud36/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpud36/subscriptions", "organizations_url": "https://api.github.com/users/cpud36/orgs", "repos_url": "https://api.github.com/users/cpud36/repos", "events_url": "https://api.github.com/users/cpud36/events{/privacy}", "received_events_url": "https://api.github.com/users/cpud36/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876ca603166dcd2680652b42fb6bdd5358e59aa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/876ca603166dcd2680652b42fb6bdd5358e59aa6", "html_url": "https://github.com/rust-lang/rust/commit/876ca603166dcd2680652b42fb6bdd5358e59aa6"}], "stats": {"total": 114, "additions": 101, "deletions": 13}, "files": [{"sha": "d876eabca9b797a5a602feb83cde3954f2bdf64c", "filename": "crates/assists/src/handlers/extract_function.rs", "status": "modified", "additions": 101, "deletions": 13, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/7eaa3e56a01e9a275129c76817232559b0e20f2b/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eaa3e56a01e9a275129c76817232559b0e20f2b/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=7eaa3e56a01e9a275129c76817232559b0e20f2b", "patch": "@@ -13,7 +13,7 @@ use syntax::{\n         edit::{AstNodeEdit, IndentLevel},\n         AstNode,\n     },\n-    Direction, SyntaxElement,\n+    AstToken, Direction, SyntaxElement,\n     SyntaxKind::{self, BLOCK_EXPR, BREAK_EXPR, COMMENT, PATH_EXPR, RETURN_EXPR},\n     SyntaxNode, SyntaxToken, TextRange, TextSize, TokenAtOffset, T,\n };\n@@ -105,9 +105,10 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n             builder.replace(target_range, format_replacement(ctx, &fun));\n \n-            let indent = IndentLevel::from_node(&insert_after);\n+            let new_indent = IndentLevel::from_node(&insert_after);\n+            let old_indent = fun.body.indent_level();\n \n-            let fn_def = format_function(ctx, module, &fun, indent);\n+            let fn_def = format_function(ctx, module, &fun, old_indent, new_indent);\n             let insert_offset = insert_after.text_range().end();\n             builder.insert(insert_offset, fn_def);\n         },\n@@ -260,6 +261,18 @@ impl FunctionBody {\n         Some(FunctionBody::Span { elements, leading_indent })\n     }\n \n+    fn indent_level(&self) -> IndentLevel {\n+        match &self {\n+            FunctionBody::Expr(expr) => IndentLevel::from_node(expr.syntax()),\n+            FunctionBody::Span { elements, .. } => elements\n+                .iter()\n+                .filter_map(SyntaxElement::as_node)\n+                .map(IndentLevel::from_node)\n+                .min_by_key(|level| level.0)\n+                .expect(\"body must contain at least one node\"),\n+        }\n+    }\n+\n     fn tail_expr(&self) -> Option<ast::Expr> {\n         match &self {\n             FunctionBody::Expr(expr) => Some(expr.clone()),\n@@ -747,16 +760,17 @@ fn format_function(\n     ctx: &AssistContext,\n     module: hir::Module,\n     fun: &Function,\n-    indent: IndentLevel,\n+    old_indent: IndentLevel,\n+    new_indent: IndentLevel,\n ) -> String {\n     let mut fn_def = String::new();\n-    format_to!(fn_def, \"\\n\\n{}fn $0{}(\", indent, fun.name);\n+    format_to!(fn_def, \"\\n\\n{}fn $0{}(\", new_indent, fun.name);\n     format_function_param_list_to(&mut fn_def, ctx, module, fun);\n     fn_def.push(')');\n     format_function_ret_to(&mut fn_def, ctx, module, fun);\n     fn_def.push_str(\" {\");\n-    format_function_body_to(&mut fn_def, ctx, indent, fun);\n-    format_to!(fn_def, \"{}}}\", indent);\n+    format_function_body_to(&mut fn_def, ctx, old_indent, new_indent, fun);\n+    format_to!(fn_def, \"{}}}\", new_indent);\n \n     fn_def\n }\n@@ -818,20 +832,32 @@ fn format_function_ret_to(\n fn format_function_body_to(\n     fn_def: &mut String,\n     ctx: &AssistContext,\n-    indent: IndentLevel,\n+    old_indent: IndentLevel,\n+    new_indent: IndentLevel,\n     fun: &Function,\n ) {\n     match &fun.body {\n         FunctionBody::Expr(expr) => {\n             fn_def.push('\\n');\n-            let expr = expr.indent(indent);\n+            let expr = expr.dedent(old_indent).indent(new_indent + 1);\n             let expr = fix_param_usages(ctx, &fun.params, expr.syntax());\n-            format_to!(fn_def, \"{}{}\", indent + 1, expr);\n+            format_to!(fn_def, \"{}{}\", new_indent + 1, expr);\n             fn_def.push('\\n');\n         }\n         FunctionBody::Span { elements, leading_indent } => {\n             format_to!(fn_def, \"{}\", leading_indent);\n-            for element in elements {\n+            let new_indent_str = format!(\"\\n{}\", new_indent + 1);\n+            for mut element in elements {\n+                let new_ws;\n+                if let Some(ws) = element.as_token().cloned().and_then(ast::Whitespace::cast) {\n+                    let text = ws.syntax().text();\n+                    if text.contains('\\n') {\n+                        let new_text = text.replace(&format!(\"\\n{}\", old_indent), &new_indent_str);\n+                        new_ws = ast::make::tokens::whitespace(&new_text).into();\n+                        element = &new_ws;\n+                    }\n+                }\n+\n                 match element {\n                     syntax::NodeOrToken::Node(node) => {\n                         format_to!(fn_def, \"{}\", fix_param_usages(ctx, &fun.params, node));\n@@ -849,9 +875,9 @@ fn format_function_body_to(\n \n     match fun.vars_defined_in_body_and_outlive.as_slice() {\n         [] => {}\n-        [var] => format_to!(fn_def, \"{}{}\\n\", indent + 1, var.name(ctx.db()).unwrap()),\n+        [var] => format_to!(fn_def, \"{}{}\\n\", new_indent + 1, var.name(ctx.db()).unwrap()),\n         [v0, vs @ ..] => {\n-            format_to!(fn_def, \"{}({}\", indent + 1, v0.name(ctx.db()).unwrap());\n+            format_to!(fn_def, \"{}({}\", new_indent + 1, v0.name(ctx.db()).unwrap());\n             for var in vs {\n                 format_to!(fn_def, \", {}\", var.name(ctx.db()).unwrap());\n             }\n@@ -2065,6 +2091,68 @@ fn foo() {\n \n fn $0fun_name(c: &Counter) {\n     let n = c.0;\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn indented_stmts() {\n+        check_assist(\n+            extract_function,\n+            r\"\n+fn foo() {\n+    if true {\n+        loop {\n+            $0let n = 1;\n+            let m = 2;$0\n+        }\n+    }\n+}\",\n+            r\"\n+fn foo() {\n+    if true {\n+        loop {\n+            fun_name();\n+        }\n+    }\n+}\n+\n+fn $0fun_name() {\n+    let n = 1;\n+    let m = 2;\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn indented_stmts_inside_mod() {\n+        check_assist(\n+            extract_function,\n+            r\"\n+mod bar {\n+    fn foo() {\n+        if true {\n+            loop {\n+                $0let n = 1;\n+                let m = 2;$0\n+            }\n+        }\n+    }\n+}\",\n+            r\"\n+mod bar {\n+    fn foo() {\n+        if true {\n+            loop {\n+                fun_name();\n+            }\n+        }\n+    }\n+\n+    fn $0fun_name() {\n+        let n = 1;\n+        let m = 2;\n+    }\n }\",\n         );\n     }"}]}