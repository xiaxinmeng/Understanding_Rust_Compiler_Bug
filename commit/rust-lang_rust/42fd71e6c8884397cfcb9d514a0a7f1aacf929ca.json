{"sha": "42fd71e6c8884397cfcb9d514a0a7f1aacf929ca", "node_id": "C_kwDOAAsO6NoAKDQyZmQ3MWU2Yzg4ODQzOTdjZmNiOWQ1MTRhMGE3ZjFhYWNmOTI5Y2E", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T11:40:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T11:40:13Z"}, "message": "move tests", "tree": {"sha": "851fa31e265585d3d2100e8db4dedcddb542cb9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/851fa31e265585d3d2100e8db4dedcddb542cb9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42fd71e6c8884397cfcb9d514a0a7f1aacf929ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42fd71e6c8884397cfcb9d514a0a7f1aacf929ca", "html_url": "https://github.com/rust-lang/rust/commit/42fd71e6c8884397cfcb9d514a0a7f1aacf929ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42fd71e6c8884397cfcb9d514a0a7f1aacf929ca/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be73cc8f8354c797fd6159b0d5d61fd56ecdc4a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/be73cc8f8354c797fd6159b0d5d61fd56ecdc4a7", "html_url": "https://github.com/rust-lang/rust/commit/be73cc8f8354c797fd6159b0d5d61fd56ecdc4a7"}], "stats": {"total": 249, "additions": 169, "deletions": 80}, "files": [{"sha": "1da0110fe261afe4e94573914194fb3f372e33b5", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/42fd71e6c8884397cfcb9d514a0a7f1aacf929ca/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fd71e6c8884397cfcb9d514a0a7f1aacf929ca/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=42fd71e6c8884397cfcb9d514a0a7f1aacf929ca", "patch": "@@ -1428,3 +1428,21 @@ macro_rules! foo {\n \"#]],\n     );\n }\n+\n+#[test]\n+fn expr_interpolation() {\n+    check(\n+        r#\"\n+macro_rules! m { ($expr:expr) => { map($expr) } }\n+fn f() {\n+    let _ = m!(x + foo);\n+}\n+\"#,\n+        expect![[r#\"\n+macro_rules! m { ($expr:expr) => { map($expr) } }\n+fn f() {\n+    let _ = map(x+foo);\n+}\n+\"#]],\n+    )\n+}"}, {"sha": "5e23ca88fa9de5d3595f45fa17041c327ea53d4a", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/regression.rs", "status": "modified", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/42fd71e6c8884397cfcb9d514a0a7f1aacf929ca/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fd71e6c8884397cfcb9d514a0a7f1aacf929ca/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs?ref=42fd71e6c8884397cfcb9d514a0a7f1aacf929ca", "patch": "@@ -728,3 +728,154 @@ impl <> Data for & 'amut G where G: Data {}\n \"##]],\n     );\n }\n+\n+#[test]\n+fn test_issue_2520() {\n+    check(\n+        r#\"\n+macro_rules! my_macro {\n+    {\n+        ( $(\n+            $( [] $sname:ident : $stype:ty  )?\n+            $( [$expr:expr] $nname:ident : $ntype:ty  )?\n+        ),* )\n+    } => {ok!(\n+        Test {\n+            $(\n+                $( $sname, )?\n+            )*\n+        }\n+    );};\n+}\n+\n+my_macro! {\n+    ([] p1: u32, [|_| S0K0] s: S0K0, [] k0: i32)\n+}\n+    \"#,\n+        expect![[r#\"\n+macro_rules! my_macro {\n+    {\n+        ( $(\n+            $( [] $sname:ident : $stype:ty  )?\n+            $( [$expr:expr] $nname:ident : $ntype:ty  )?\n+        ),* )\n+    } => {ok!(\n+        Test {\n+            $(\n+                $( $sname, )?\n+            )*\n+        }\n+    );};\n+}\n+\n+ok!(Test {\n+    p1, k0,\n+}\n+);\n+    \"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_repeat_bad_var() {\n+    // FIXME: the second rule of the macro should be removed and an error about\n+    // `$( $c )+` raised\n+    check(\n+        r#\"\n+macro_rules! foo {\n+    ($( $b:ident )+) => { ok!($( $c )+); };\n+    ($( $b:ident )+) => { ok!($( $b )+); }\n+}\n+\n+foo!(b0 b1);\n+\"#,\n+        expect![[r#\"\n+macro_rules! foo {\n+    ($( $b:ident )+) => { ok!($( $c )+); };\n+    ($( $b:ident )+) => { ok!($( $b )+); }\n+}\n+\n+ok!(b0 b1);\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_issue_3861() {\n+    // This is should (and does) produce a parse error. It used to infinite loop\n+    // instead.\n+    check(\n+        r#\"\n+macro_rules! rgb_color {\n+    ($p:expr, $t:ty) => {\n+        pub fn new() {\n+            let _ = 0 as $t << $p;\n+        }\n+    };\n+}\n+// +tree +errors\n+rgb_color!(8 + 8, u32);\n+\"#,\n+        expect![[r#\"\n+macro_rules! rgb_color {\n+    ($p:expr, $t:ty) => {\n+        pub fn new() {\n+            let _ = 0 as $t << $p;\n+        }\n+    };\n+}\n+/* parse error: expected type */\n+/* parse error: expected R_ANGLE */\n+/* parse error: expected COMMA */\n+/* parse error: expected R_ANGLE */\n+/* parse error: expected SEMICOLON */\n+pub fn new() {\n+    let _ = 0as u32<<8+8;\n+}\n+// MACRO_ITEMS@0..29\n+//   FN@0..29\n+//     VISIBILITY@0..3\n+//       PUB_KW@0..3 \"pub\"\n+//     FN_KW@3..5 \"fn\"\n+//     NAME@5..8\n+//       IDENT@5..8 \"new\"\n+//     PARAM_LIST@8..10\n+//       L_PAREN@8..9 \"(\"\n+//       R_PAREN@9..10 \")\"\n+//     BLOCK_EXPR@10..29\n+//       STMT_LIST@10..29\n+//         L_CURLY@10..11 \"{\"\n+//         LET_STMT@11..24\n+//           LET_KW@11..14 \"let\"\n+//           WILDCARD_PAT@14..15\n+//             UNDERSCORE@14..15 \"_\"\n+//           EQ@15..16 \"=\"\n+//           CAST_EXPR@16..24\n+//             LITERAL@16..17\n+//               INT_NUMBER@16..17 \"0\"\n+//             AS_KW@17..19 \"as\"\n+//             PATH_TYPE@19..24\n+//               PATH@19..24\n+//                 PATH_SEGMENT@19..24\n+//                   NAME_REF@19..22\n+//                     IDENT@19..22 \"u32\"\n+//                   GENERIC_ARG_LIST@22..24\n+//                     L_ANGLE@22..23 \"<\"\n+//                     TYPE_ARG@23..24\n+//                       PATH_TYPE@23..24\n+//                         PATH@23..24\n+//                           PATH_SEGMENT@23..24\n+//                             L_ANGLE@23..24 \"<\"\n+//         EXPR_STMT@24..28\n+//           BIN_EXPR@24..27\n+//             LITERAL@24..25\n+//               INT_NUMBER@24..25 \"8\"\n+//             PLUS@25..26 \"+\"\n+//             LITERAL@26..27\n+//               INT_NUMBER@26..27 \"8\"\n+//           SEMICOLON@27..28 \";\"\n+//         R_CURLY@28..29 \"}\"\n+\n+\"#]],\n+    );\n+}"}, {"sha": "ffb24709f223d7c63b58e35b67146d9d55ce7217", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/42fd71e6c8884397cfcb9d514a0a7f1aacf929ca/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fd71e6c8884397cfcb9d514a0a7f1aacf929ca/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=42fd71e6c8884397cfcb9d514a0a7f1aacf929ca", "patch": "@@ -98,86 +98,6 @@ fn test_attr_to_token_tree() {\n     );\n }\n \n-#[test]\n-fn expr_interpolation() {\n-    let expanded = parse_macro(\n-        r#\"\n-        macro_rules! id {\n-            ($expr:expr) => {\n-                map($expr)\n-            }\n-        }\n-        \"#,\n-    )\n-    .expand_expr(\"id!(x + foo);\");\n-\n-    assert_eq!(expanded.to_string(), \"map(x+foo)\");\n-}\n-\n-#[test]\n-fn test_issue_2520() {\n-    let macro_fixture = parse_macro(\n-        r#\"\n-        macro_rules! my_macro {\n-            {\n-                ( $(\n-                    $( [] $sname:ident : $stype:ty  )?\n-                    $( [$expr:expr] $nname:ident : $ntype:ty  )?\n-                ),* )\n-            } => {\n-                Test {\n-                    $(\n-                        $( $sname, )?\n-                    )*\n-                }\n-            };\n-        }\n-    \"#,\n-    );\n-\n-    macro_fixture.assert_expand_items(\n-        r#\"my_macro ! {\n-            ([] p1 : u32 , [|_| S0K0] s : S0K0 , [] k0 : i32)\n-        }\"#,\n-        \"Test {p1 , k0 ,}\",\n-    );\n-}\n-\n-#[test]\n-fn test_issue_3861() {\n-    let macro_fixture = parse_macro(\n-        r#\"\n-        macro_rules! rgb_color {\n-            ($p:expr, $t: ty) => {\n-                pub fn new() {\n-                    let _ = 0 as $t << $p;\n-                }\n-            };\n-        }\n-    \"#,\n-    );\n-\n-    macro_fixture.expand_items(r#\"rgb_color!(8 + 8, u32);\"#);\n-}\n-\n-#[test]\n-fn test_repeat_bad_var() {\n-    // FIXME: the second rule of the macro should be removed and an error about\n-    // `$( $c )+` raised\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($( $b:ident )+) => {\n-                $( $c )+\n-            };\n-            ($( $b:ident )+) => {\n-                $( $b )+\n-            }\n-        }\n-    \"#,\n-    )\n-    .assert_expand_items(\"foo!(b0 b1);\", \"b0 b1\");\n-}\n \n #[test]\n fn test_no_space_after_semi_colon() {"}]}