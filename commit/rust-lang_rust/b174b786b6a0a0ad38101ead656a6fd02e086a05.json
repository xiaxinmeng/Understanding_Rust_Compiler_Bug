{"sha": "b174b786b6a0a0ad38101ead656a6fd02e086a05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzRiNzg2YjZhMGEwYWQzODEwMWVhZDY1NmE2ZmQwMmUwODZhMDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-20T21:03:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-22T03:02:48Z"}, "message": "refactor casting code to more clearly handle pointers", "tree": {"sha": "f1eb83ca93069d5f94e866f23d042008f39defd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1eb83ca93069d5f94e866f23d042008f39defd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b174b786b6a0a0ad38101ead656a6fd02e086a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b174b786b6a0a0ad38101ead656a6fd02e086a05", "html_url": "https://github.com/rust-lang/rust/commit/b174b786b6a0a0ad38101ead656a6fd02e086a05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b174b786b6a0a0ad38101ead656a6fd02e086a05/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f960f4c537f0f8291f57ab765fbeb47a619fdff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f960f4c537f0f8291f57ab765fbeb47a619fdff7", "html_url": "https://github.com/rust-lang/rust/commit/f960f4c537f0f8291f57ab765fbeb47a619fdff7"}], "stats": {"total": 61, "additions": 29, "deletions": 32}, "files": [{"sha": "7db8cb79f5d7dd7c282ccae4cfa943bee9fc515a", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b174b786b6a0a0ad38101ead656a6fd02e086a05/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b174b786b6a0a0ad38101ead656a6fd02e086a05/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=b174b786b6a0a0ad38101ead656a6fd02e086a05", "patch": "@@ -4,6 +4,7 @@ use syntax::ast::{FloatTy, IntTy, UintTy};\n use error::{EvalResult, EvalError};\n use eval_context::EvalContext;\n use value::PrimVal;\n+use memory::MemoryPointer;\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub(super) fn cast_primval(\n@@ -14,36 +15,32 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     ) -> EvalResult<'tcx, PrimVal> {\n         let src_kind = self.ty_to_primval_kind(src_ty)?;\n \n-        use value::PrimValKind::*;\n-        match src_kind {\n-            F32 => self.cast_float(val.to_f32()? as f64, dest_ty),\n-            F64 => self.cast_float(val.to_f64()?, dest_ty),\n-\n-            I8 | I16 | I32 | I64 | I128 => {\n-                if val.is_ptr() {\n-                    self.cast_ptr(val, dest_ty)\n-                } else {\n-                    self.cast_signed_int(val.to_i128()?, dest_ty)\n-                }\n-            },\n-\n-            Bool | Char | U8 | U16 | U32 | U64 | U128 => {\n-                if val.is_ptr() {\n-                    self.cast_ptr(val, dest_ty)\n-                } else {\n-                    self.cast_int(val.to_u128()?, dest_ty, false)\n+        match val {\n+            PrimVal::Undef => Ok(PrimVal::Undef),\n+            PrimVal::Ptr(ptr) => self.cast_from_ptr(ptr, dest_ty),\n+            val @ PrimVal::Bytes(_) => {\n+                use value::PrimValKind::*;\n+                match src_kind {\n+                    F32 => self.cast_from_float(val.to_f32()? as f64, dest_ty),\n+                    F64 => self.cast_from_float(val.to_f64()?, dest_ty),\n+\n+                    I8 | I16 | I32 | I64 | I128 => {\n+                        self.cast_from_signed_int(val.to_i128()?, dest_ty)\n+                    },\n+\n+                    Bool | Char | U8 | U16 | U32 | U64 | U128 | FnPtr | Ptr => {\n+                        self.cast_from_int(val.to_u128()?, dest_ty, false)\n+                    },\n                 }\n-            },\n-\n-            FnPtr | Ptr => self.cast_ptr(val, dest_ty),\n+            }\n         }\n     }\n \n-    fn cast_signed_int(&self, val: i128, ty: ty::Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n-        self.cast_int(val as u128, ty, val < 0)\n+    fn cast_from_signed_int(&self, val: i128, ty: ty::Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n+        self.cast_from_int(val as u128, ty, val < 0)\n     }\n \n-    fn cast_int(&self, v: u128, ty: ty::Ty<'tcx>, negative: bool) -> EvalResult<'tcx, PrimVal> {\n+    fn cast_from_int(&self, v: u128, ty: ty::Ty<'tcx>, negative: bool) -> EvalResult<'tcx, PrimVal> {\n         use rustc::ty::TypeVariants::*;\n         match ty.sty {\n             // Casts to bool are not permitted by rustc, no need to handle them here.\n@@ -63,13 +60,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             TyInt(IntTy::Is) => {\n                 let int_ty = self.tcx.sess.target.int_type;\n                 let ty = self.tcx.mk_mach_int(int_ty);\n-                self.cast_int(v, ty, negative)\n+                self.cast_from_int(v, ty, negative)\n             }\n \n             TyUint(UintTy::Us) => {\n                 let uint_ty = self.tcx.sess.target.uint_type;\n                 let ty = self.tcx.mk_mach_uint(uint_ty);\n-                self.cast_int(v, ty, negative)\n+                self.cast_from_int(v, ty, negative)\n             }\n \n             TyFloat(FloatTy::F64) if negative => Ok(PrimVal::from_f64(v as i128 as f64)),\n@@ -87,27 +84,27 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n-    fn cast_float(&self, val: f64, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n+    fn cast_from_float(&self, val: f64, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n         use rustc::ty::TypeVariants::*;\n         match ty.sty {\n             // Casting negative floats to unsigned integers yields zero.\n-            TyUint(_) if val < 0.0 => self.cast_int(0, ty, false),\n-            TyInt(_)  if val < 0.0 => self.cast_int(val as i128 as u128, ty, true),\n+            TyUint(_) if val < 0.0 => self.cast_from_int(0, ty, false),\n+            TyInt(_)  if val < 0.0 => self.cast_from_int(val as i128 as u128, ty, true),\n \n-            TyInt(_) | ty::TyUint(_) => self.cast_int(val as u128, ty, false),\n+            TyInt(_) | ty::TyUint(_) => self.cast_from_int(val as u128, ty, false),\n \n             TyFloat(FloatTy::F64) => Ok(PrimVal::from_f64(val)),\n             TyFloat(FloatTy::F32) => Ok(PrimVal::from_f32(val as f32)),\n             _ => Err(EvalError::Unimplemented(format!(\"float to {:?} cast\", ty))),\n         }\n     }\n \n-    fn cast_ptr(&self, ptr: PrimVal, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n+    fn cast_from_ptr(&self, ptr: MemoryPointer, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n         use rustc::ty::TypeVariants::*;\n         match ty.sty {\n             // Casting to a reference or fn pointer is not permitted by rustc, no need to support it here.\n             TyRawPtr(_) | TyInt(IntTy::Is) | TyUint(UintTy::Us) =>\n-                Ok(ptr),\n+                Ok(PrimVal::Ptr(ptr)),\n             TyInt(_) | TyUint(_) => Err(EvalError::ReadPointerAsBytes),\n             _ => Err(EvalError::Unimplemented(format!(\"ptr to {:?} cast\", ty))),\n         }"}]}