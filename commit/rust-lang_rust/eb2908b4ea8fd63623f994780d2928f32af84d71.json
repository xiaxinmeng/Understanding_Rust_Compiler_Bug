{"sha": "eb2908b4ea8fd63623f994780d2928f32af84d71", "node_id": "C_kwDOAAsO6NoAKGViMjkwOGI0ZWE4ZmQ2MzYyM2Y5OTQ3ODBkMjkyOGYzMmFmODRkNzE", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-05-31T02:07:49Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-05-31T03:20:04Z"}, "message": "Add lint `almost_complete_letter_range`", "tree": {"sha": "1b0312875c5390a960486ab0906f023ff72327a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b0312875c5390a960486ab0906f023ff72327a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb2908b4ea8fd63623f994780d2928f32af84d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2908b4ea8fd63623f994780d2928f32af84d71", "html_url": "https://github.com/rust-lang/rust/commit/eb2908b4ea8fd63623f994780d2928f32af84d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb2908b4ea8fd63623f994780d2928f32af84d71/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39231b4b503955626c1ccf965b8328ac67c523bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/39231b4b503955626c1ccf965b8328ac67c523bb", "html_url": "https://github.com/rust-lang/rust/commit/39231b4b503955626c1ccf965b8328ac67c523bb"}], "stats": {"total": 362, "additions": 361, "deletions": 1}, "files": [{"sha": "67ca4cf708aeb1b65ff1b817ca1bea74d48e69d9", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb2908b4ea8fd63623f994780d2928f32af84d71/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/eb2908b4ea8fd63623f994780d2928f32af84d71/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=eb2908b4ea8fd63623f994780d2928f32af84d71", "patch": "@@ -3276,6 +3276,7 @@ Released 2018-09-13\n <!-- begin autogenerated links to lint list -->\n [`absurd_extreme_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n [`allow_attributes_without_reason`]: https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\n+[`almost_complete_letter_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_letter_range\n [`almost_swapped`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped\n [`approx_constant`]: https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n [`as_conversions`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions"}, {"sha": "b364a370efab5691f6d458ebe5db811de22de196", "filename": "clippy_lints/src/almost_complete_letter_range.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs?ref=eb2908b4ea8fd63623f994780d2928f32af84d71", "patch": "@@ -0,0 +1,100 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::{trim_span, walk_span_to_context};\n+use clippy_utils::{meets_msrv, msrvs};\n+use rustc_ast::ast::{Expr, ExprKind, LitKind, Pat, PatKind, RangeEnd, RangeLimits};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for ranges which almost include the entire range of letters from 'a' to 'z', but\n+    /// don't because they're a half open range.\n+    ///\n+    /// ### Why is this bad?\n+    /// This (`'a'..'z'`) is almost certainly a typo meant to include all letters.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let _ = 'a'..'z';\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let _ = 'a'..='z';\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub ALMOST_COMPLETE_LETTER_RANGE,\n+    suspicious,\n+    \"almost complete letter range\"\n+}\n+impl_lint_pass!(AlmostCompleteLetterRange => [ALMOST_COMPLETE_LETTER_RANGE]);\n+\n+pub struct AlmostCompleteLetterRange {\n+    msrv: Option<RustcVersion>,\n+}\n+impl AlmostCompleteLetterRange {\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+impl EarlyLintPass for AlmostCompleteLetterRange {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n+        if let ExprKind::Range(Some(start), Some(end), RangeLimits::HalfOpen) = &e.kind {\n+            let ctxt = e.span.ctxt();\n+            let sugg = if let Some(start) = walk_span_to_context(start.span, ctxt)\n+                && let Some(end) = walk_span_to_context(end.span, ctxt)\n+                && meets_msrv(self.msrv, msrvs::RANGE_INCLUSIVE)\n+            {\n+                Some((trim_span(cx.sess().source_map(), start.between(end)), \"..=\"))\n+            } else {\n+                None\n+            };\n+            check_range(cx, e.span, start, end, sugg);\n+        }\n+    }\n+\n+    fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &Pat) {\n+        if let PatKind::Range(Some(start), Some(end), kind) = &p.kind\n+            && matches!(kind.node, RangeEnd::Excluded)\n+        {\n+            let sugg = if meets_msrv(self.msrv, msrvs::RANGE_INCLUSIVE) {\n+                \"..=\"\n+            } else {\n+                \"...\"\n+            };\n+            check_range(cx, p.span, start, end, Some((kind.span, sugg)));\n+        }\n+    }\n+\n+    extract_msrv_attr!(EarlyContext);\n+}\n+\n+fn check_range(cx: &EarlyContext<'_>, span: Span, start: &Expr, end: &Expr, sugg: Option<(Span, &str)>) {\n+    if let ExprKind::Lit(start_lit) = &start.peel_parens().kind\n+        && let ExprKind::Lit(end_lit) = &end.peel_parens().kind\n+        && matches!(\n+            (&start_lit.kind, &end_lit.kind),\n+            (LitKind::Byte(b'a') | LitKind::Char('a'), LitKind::Byte(b'z') | LitKind::Char('z'))\n+            | (LitKind::Byte(b'A') | LitKind::Char('A'), LitKind::Byte(b'Z') | LitKind::Char('Z'))\n+        )\n+    {\n+        span_lint_and_then(\n+            cx,\n+            ALMOST_COMPLETE_LETTER_RANGE,\n+            span,\n+            \"almost complete ascii letter range\",\n+            |diag| {\n+                if let Some((span, sugg)) = sugg {\n+                    diag.span_suggestion(\n+                        span,\n+                        \"use an inclusive range\",\n+                        sugg.to_owned(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+        );\n+    }\n+}"}, {"sha": "d4f8d676c22d0159107008c73be1dda441c1c8bb", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=eb2908b4ea8fd63623f994780d2928f32af84d71", "patch": "@@ -4,6 +4,7 @@\n \n store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n+    LintId::of(almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE),\n     LintId::of(approx_const::APPROX_CONSTANT),\n     LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n     LintId::of(assign_ops::ASSIGN_OP_PATTERN),"}, {"sha": "b76eaae377e32f3dea42b884cfdb884ad4f36499", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=eb2908b4ea8fd63623f994780d2928f32af84d71", "patch": "@@ -34,6 +34,7 @@ store.register_lints(&[\n     #[cfg(feature = \"internal\")]\n     utils::internal_lints::UNNECESSARY_SYMBOL_STR,\n     absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS,\n+    almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE,\n     approx_const::APPROX_CONSTANT,\n     arithmetic::FLOAT_ARITHMETIC,\n     arithmetic::INTEGER_ARITHMETIC,"}, {"sha": "3d6d2d8951c23f30b3ffaa192f623ad2f0561b6a", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=eb2908b4ea8fd63623f994780d2928f32af84d71", "patch": "@@ -3,6 +3,7 @@\n // Manual edits will be overwritten.\n \n store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec![\n+    LintId::of(almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE),\n     LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n     LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE),"}, {"sha": "67ae2053f5ae055d22880388d4091d8530a5d65f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=eb2908b4ea8fd63623f994780d2928f32af84d71", "patch": "@@ -168,6 +168,7 @@ mod renamed_lints;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n mod absurd_extreme_comparisons;\n+mod almost_complete_letter_range;\n mod approx_const;\n mod arithmetic;\n mod as_conversions;\n@@ -911,6 +912,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(duplicate_mod::DuplicateMod::default()));\n     store.register_late_pass(|| Box::new(get_first::GetFirst));\n     store.register_early_pass(|| Box::new(unused_rounding::UnusedRounding));\n+    store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv)));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "b9ec2c19fdd312a98bdfb289e9a41b7c1317ed8b", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=eb2908b4ea8fd63623f994780d2928f32af84d71", "patch": "@@ -30,6 +30,7 @@ msrv_aliases! {\n     1,34,0 { TRY_FROM }\n     1,30,0 { ITERATOR_FIND_MAP, TOOL_ATTRIBUTES }\n     1,28,0 { FROM_BOOL }\n+    1,26,0 { RANGE_INCLUSIVE }\n     1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST, EXPECT_ERR }\n     1,16,0 { STR_REPEAT }\n     1,24,0 { IS_ASCII_DIGIT }"}, {"sha": "f88a92fb11c111146851e4213a6508c0ec26b2ac", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2908b4ea8fd63623f994780d2928f32af84d71/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=eb2908b4ea8fd63623f994780d2928f32af84d71", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_span::hygiene;\n use rustc_span::source_map::SourceMap;\n-use rustc_span::{BytePos, Pos, Span, SyntaxContext};\n+use rustc_span::{BytePos, Pos, Span, SpanData, SyntaxContext};\n use std::borrow::Cow;\n \n /// Checks if the span starts with the given text. This will return false if the span crosses\n@@ -389,6 +389,27 @@ pub fn without_block_comments(lines: Vec<&str>) -> Vec<&str> {\n     without\n }\n \n+/// Trims the whitespace from the start and the end of the span.\n+pub fn trim_span(sm: &SourceMap, span: Span) -> Span {\n+    let data = span.data();\n+    let sf: &_ = &sm.lookup_source_file(data.lo);\n+    let Some(src) = sf.src.as_deref() else {\n+        return span;\n+    };\n+    let Some(snip) = &src.get((data.lo - sf.start_pos).to_usize()..(data.hi - sf.start_pos).to_usize()) else {\n+        return span;\n+    };\n+    let trim_start = snip.len() - snip.trim_start().len();\n+    let trim_end = snip.len() - snip.trim_end().len();\n+    SpanData {\n+        lo: data.lo + BytePos::from_usize(trim_start),\n+        hi: data.hi - BytePos::from_usize(trim_end),\n+        ctxt: data.ctxt,\n+        parent: data.parent,\n+    }\n+    .span()\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{reindent_multiline, without_block_comments};"}, {"sha": "39f8f0c29495bef4f5489c039d609de9193a733b", "filename": "tests/ui/almost_complete_letter_range.fixed", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/eb2908b4ea8fd63623f994780d2928f32af84d71/tests%2Fui%2Falmost_complete_letter_range.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/eb2908b4ea8fd63623f994780d2928f32af84d71/tests%2Fui%2Falmost_complete_letter_range.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.fixed?ref=eb2908b4ea8fd63623f994780d2928f32af84d71", "patch": "@@ -0,0 +1,66 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![feature(custom_inner_attributes)]\n+#![feature(exclusive_range_pattern)]\n+#![feature(stmt_expr_attributes)]\n+#![warn(clippy::almost_complete_letter_range)]\n+#![allow(ellipsis_inclusive_range_patterns)]\n+\n+macro_rules! a {\n+    () => {\n+        'a'\n+    };\n+}\n+\n+fn main() {\n+    #[rustfmt::skip]\n+    {\n+        let _ = ('a') ..='z';\n+        let _ = 'A' ..= ('Z');\n+    }\n+\n+    let _ = 'b'..'z';\n+    let _ = 'B'..'Z';\n+\n+    let _ = (b'a')..=(b'z');\n+    let _ = b'A'..=b'Z';\n+\n+    let _ = b'b'..b'z';\n+    let _ = b'B'..b'Z';\n+\n+    let _ = a!()..='z';\n+\n+    let _ = match 0u8 {\n+        b'a'..=b'z' if true => 1,\n+        b'A'..=b'Z' if true => 2,\n+        b'b'..b'z' => 3,\n+        b'B'..b'Z' => 4,\n+        _ => 5,\n+    };\n+\n+    let _ = match 'x' {\n+        'a'..='z' if true => 1,\n+        'A'..='Z' if true => 2,\n+        'b'..'z' => 3,\n+        'B'..'Z' => 4,\n+        _ => 5,\n+    };\n+}\n+\n+fn _under_msrv() {\n+    #![clippy::msrv = \"1.25\"]\n+    let _ = match 'a' {\n+        'a'...'z' => 1,\n+        _ => 2,\n+    };\n+}\n+\n+fn _meets_msrv() {\n+    #![clippy::msrv = \"1.26\"]\n+    let _ = 'a'..='z';\n+    let _ = match 'a' {\n+        'a'..='z' => 1,\n+        _ => 2,\n+    };\n+}"}, {"sha": "3dc021992576079ec03384cf6a8b1dbfbabeff1d", "filename": "tests/ui/almost_complete_letter_range.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/eb2908b4ea8fd63623f994780d2928f32af84d71/tests%2Fui%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2908b4ea8fd63623f994780d2928f32af84d71/tests%2Fui%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.rs?ref=eb2908b4ea8fd63623f994780d2928f32af84d71", "patch": "@@ -0,0 +1,66 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![feature(custom_inner_attributes)]\n+#![feature(exclusive_range_pattern)]\n+#![feature(stmt_expr_attributes)]\n+#![warn(clippy::almost_complete_letter_range)]\n+#![allow(ellipsis_inclusive_range_patterns)]\n+\n+macro_rules! a {\n+    () => {\n+        'a'\n+    };\n+}\n+\n+fn main() {\n+    #[rustfmt::skip]\n+    {\n+        let _ = ('a') ..'z';\n+        let _ = 'A' .. ('Z');\n+    }\n+\n+    let _ = 'b'..'z';\n+    let _ = 'B'..'Z';\n+\n+    let _ = (b'a')..(b'z');\n+    let _ = b'A'..b'Z';\n+\n+    let _ = b'b'..b'z';\n+    let _ = b'B'..b'Z';\n+\n+    let _ = a!()..'z';\n+\n+    let _ = match 0u8 {\n+        b'a'..b'z' if true => 1,\n+        b'A'..b'Z' if true => 2,\n+        b'b'..b'z' => 3,\n+        b'B'..b'Z' => 4,\n+        _ => 5,\n+    };\n+\n+    let _ = match 'x' {\n+        'a'..'z' if true => 1,\n+        'A'..'Z' if true => 2,\n+        'b'..'z' => 3,\n+        'B'..'Z' => 4,\n+        _ => 5,\n+    };\n+}\n+\n+fn _under_msrv() {\n+    #![clippy::msrv = \"1.25\"]\n+    let _ = match 'a' {\n+        'a'..'z' => 1,\n+        _ => 2,\n+    };\n+}\n+\n+fn _meets_msrv() {\n+    #![clippy::msrv = \"1.26\"]\n+    let _ = 'a'..'z';\n+    let _ = match 'a' {\n+        'a'..'z' => 1,\n+        _ => 2,\n+    };\n+}"}, {"sha": "74980ec1a923fc5d39abd8dd619e93e60f1ab365", "filename": "tests/ui/almost_complete_letter_range.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/eb2908b4ea8fd63623f994780d2928f32af84d71/tests%2Fui%2Falmost_complete_letter_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb2908b4ea8fd63623f994780d2928f32af84d71/tests%2Fui%2Falmost_complete_letter_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.stderr?ref=eb2908b4ea8fd63623f994780d2928f32af84d71", "patch": "@@ -0,0 +1,100 @@\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:19:17\n+   |\n+LL |         let _ = ('a') ..'z';\n+   |                 ^^^^^^--^^^\n+   |                       |\n+   |                       help: use an inclusive range: `..=`\n+   |\n+   = note: `-D clippy::almost-complete-letter-range` implied by `-D warnings`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:20:17\n+   |\n+LL |         let _ = 'A' .. ('Z');\n+   |                 ^^^^--^^^^^^\n+   |                     |\n+   |                     help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:26:13\n+   |\n+LL |     let _ = (b'a')..(b'z');\n+   |             ^^^^^^--^^^^^^\n+   |                   |\n+   |                   help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:27:13\n+   |\n+LL |     let _ = b'A'..b'Z';\n+   |             ^^^^--^^^^\n+   |                 |\n+   |                 help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:32:13\n+   |\n+LL |     let _ = a!()..'z';\n+   |             ^^^^--^^^\n+   |                 |\n+   |                 help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:35:9\n+   |\n+LL |         b'a'..b'z' if true => 1,\n+   |         ^^^^--^^^^\n+   |             |\n+   |             help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:36:9\n+   |\n+LL |         b'A'..b'Z' if true => 2,\n+   |         ^^^^--^^^^\n+   |             |\n+   |             help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:43:9\n+   |\n+LL |         'a'..'z' if true => 1,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:44:9\n+   |\n+LL |         'A'..'Z' if true => 2,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:54:9\n+   |\n+LL |         'a'..'z' => 1,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `...`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:61:13\n+   |\n+LL |     let _ = 'a'..'z';\n+   |             ^^^--^^^\n+   |                |\n+   |                help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:63:9\n+   |\n+LL |         'a'..'z' => 1,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `..=`\n+\n+error: aborting due to 12 previous errors\n+"}]}