{"sha": "1db84a3ec5ba40792f549bd815559f7d0c1ba234", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYjg0YTNlYzViYTQwNzkyZjU0OWJkODE1NTU5ZjdkMGMxYmEyMzQ=", "commit": {"author": {"name": "David Lukes", "email": "dafydd.lukes@gmail.com", "date": "2018-02-26T17:53:46Z"}, "committer": {"name": "David Lukes", "email": "dafydd.lukes@gmail.com", "date": "2018-03-05T12:20:51Z"}, "message": "Wrap license-related errors in enum", "tree": {"sha": "03c8afbdad7afdf1664ae9e93128ac9096e8d3c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03c8afbdad7afdf1664ae9e93128ac9096e8d3c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1db84a3ec5ba40792f549bd815559f7d0c1ba234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1db84a3ec5ba40792f549bd815559f7d0c1ba234", "html_url": "https://github.com/rust-lang/rust/commit/1db84a3ec5ba40792f549bd815559f7d0c1ba234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1db84a3ec5ba40792f549bd815559f7d0c1ba234/comments", "author": {"login": "dlukes", "id": 2734517, "node_id": "MDQ6VXNlcjI3MzQ1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlukes", "html_url": "https://github.com/dlukes", "followers_url": "https://api.github.com/users/dlukes/followers", "following_url": "https://api.github.com/users/dlukes/following{/other_user}", "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions", "organizations_url": "https://api.github.com/users/dlukes/orgs", "repos_url": "https://api.github.com/users/dlukes/repos", "events_url": "https://api.github.com/users/dlukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dlukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dlukes", "id": 2734517, "node_id": "MDQ6VXNlcjI3MzQ1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlukes", "html_url": "https://github.com/dlukes", "followers_url": "https://api.github.com/users/dlukes/followers", "following_url": "https://api.github.com/users/dlukes/following{/other_user}", "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions", "organizations_url": "https://api.github.com/users/dlukes/orgs", "repos_url": "https://api.github.com/users/dlukes/repos", "events_url": "https://api.github.com/users/dlukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dlukes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53347bc22620c226ec5d761376e8c7056c093acf", "url": "https://api.github.com/repos/rust-lang/rust/commits/53347bc22620c226ec5d761376e8c7056c093acf", "html_url": "https://github.com/rust-lang/rust/commit/53347bc22620c226ec5d761376e8c7056c093acf"}], "stats": {"total": 116, "additions": 71, "deletions": 45}, "files": [{"sha": "314a1a26b4e6663e9ad0fa9c8062456abe65f31f", "filename": "src/config/config_type.rs", "status": "modified", "additions": 15, "deletions": 32, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1db84a3ec5ba40792f549bd815559f7d0c1ba234/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db84a3ec5ba40792f549bd815559f7d0c1ba234/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=1db84a3ec5ba40792f549bd815559f7d0c1ba234", "patch": "@@ -392,39 +392,22 @@ macro_rules! create_config {\n             }\n \n             fn set_license_template(&mut self) {\n-                if self.was_set().license_template_path() {\n-                    let lt_path = self.license_template_path();\n-                    let mut lt_file = match File::open(&lt_path) {\n-                        Ok(file) => file,\n-                        Err(e) => {\n-                            eprintln!(\"Warning: unable to open license template file {:?}: {}\",\n-                                      lt_path, e);\n-                            return;\n-                        }\n-                    };\n-                    let mut lt_str = String::new();\n-                    if let Err(e) = lt_file.read_to_string(&mut lt_str) {\n-                        eprintln!(\"Warning: unable to read from license template file {:?}: {}\",\n-                                  lt_path, e);\n-                        return;\n-                    };\n-                    let lt_parsed = match TemplateParser::parse(&lt_str) {\n-                        Ok(string) => string,\n-                        Err(e) => {\n-                            eprintln!(\"Warning: unable to parse license template file {:?}: {}\",\n-                                      lt_path, e);\n-                            return;\n-                        }\n-                    };\n-                    self.license_template = match Regex::new(&lt_parsed) {\n-                        Ok(re) => Some(re),\n-                        Err(e) => {\n-                            eprintln!(\"Warning: regex syntax error in placeholder, unable to compile \\\n-                                       license template from file {:?}: {}\", lt_path, e);\n-                            return;\n-                        }\n-                    }\n+                if !self.was_set().license_template_path() {\n+                    return;\n                 }\n+                let lt_path = self.license_template_path();\n+                let try = || -> Result<Regex, LicenseError> {\n+                    let mut lt_file = File::open(&lt_path)?;\n+                    let mut lt_str = String::new();\n+                    lt_file.read_to_string(&mut lt_str)?;\n+                    let lt_parsed = TemplateParser::parse(&lt_str)?;\n+                    Ok(Regex::new(&lt_parsed)?)\n+                };\n+                match try() {\n+                    Ok(re) => self.license_template = Some(re),\n+                    Err(msg) => eprintln!(\"Warning for license template file {:?}: {}\",\n+                                          lt_path, msg),\n+                };\n             }\n         }\n "}, {"sha": "ce05634b876d948a6af7c73c9c09010a9867121d", "filename": "src/config/license.rs", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1db84a3ec5ba40792f549bd815559f7d0c1ba234/src%2Fconfig%2Flicense.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db84a3ec5ba40792f549bd815559f7d0c1ba234/src%2Fconfig%2Flicense.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Flicense.rs?ref=1db84a3ec5ba40792f549bd815559f7d0c1ba234", "patch": "@@ -1,5 +1,37 @@\n+use std::io;\n+use std::fmt;\n+\n use regex;\n \n+#[derive(Debug)]\n+pub enum LicenseError {\n+    IO(io::Error),\n+    Regex(regex::Error),\n+    Parse(String),\n+}\n+\n+impl fmt::Display for LicenseError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            LicenseError::IO(ref err) => err.fmt(f),\n+            LicenseError::Regex(ref err) => err.fmt(f),\n+            LicenseError::Parse(ref err) => write!(f, \"parsing failed, {}\", err),\n+        }\n+    }\n+}\n+\n+impl From<io::Error> for LicenseError {\n+    fn from(err: io::Error) -> LicenseError {\n+        LicenseError::IO(err)\n+    }\n+}\n+\n+impl From<regex::Error> for LicenseError {\n+    fn from(err: regex::Error) -> LicenseError {\n+        LicenseError::Regex(err)\n+    }\n+}\n+\n // the template is parsed using a state machine\n enum ParsingState {\n     Lit,\n@@ -76,7 +108,7 @@ impl TemplateParser {\n     /// \"\n     /// );\n     /// ```\n-    pub fn parse(template: &str) -> Result<String, String> {\n+    pub fn parse(template: &str) -> Result<String, LicenseError> {\n         let mut parser = Self::new();\n         for chr in template.chars() {\n             if chr == '\\n' {\n@@ -87,19 +119,24 @@ impl TemplateParser {\n                 LitEsc => parser.trans_from_litesc(chr),\n                 Re(brace_nesting) => parser.trans_from_re(chr, brace_nesting),\n                 ReEsc(brace_nesting) => parser.trans_from_reesc(chr, brace_nesting),\n-                Abort(msg) => return Err(msg),\n+                Abort(msg) => return Err(LicenseError::Parse(msg)),\n             };\n         }\n         // check if we've ended parsing in a valid state\n         match parser.state {\n-            Abort(msg) => return Err(msg),\n+            Abort(msg) => return Err(LicenseError::Parse(msg)),\n             Re(_) | ReEsc(_) => {\n-                return Err(format!(\n+                return Err(LicenseError::Parse(format!(\n                     \"escape or balance opening brace on l. {}\",\n                     parser.open_brace_line\n-                ));\n+                )));\n+            }\n+            LitEsc => {\n+                return Err(LicenseError::Parse(format!(\n+                    \"incomplete escape sequence on l. {}\",\n+                    parser.linum\n+                )))\n             }\n-            LitEsc => return Err(format!(\"incomplete escape sequence on l. {}\", parser.linum)),\n             _ => (),\n         }\n         parser.parsed.push_str(&regex::escape(&parser.buffer));\n@@ -198,16 +235,22 @@ mod test {\n             r\"^unbalanced nested braces \\{{3}\"\n         );\n         assert_eq!(\n-            TemplateParser::parse(\"parsing error }\").unwrap_err(),\n-            \"escape or balance closing brace on l. 1\"\n+            &TemplateParser::parse(\"parsing error }\")\n+                .unwrap_err()\n+                .to_string(),\n+            \"parsing failed, escape or balance closing brace on l. 1\"\n         );\n         assert_eq!(\n-            TemplateParser::parse(\"parsing error {\\nsecond line\").unwrap_err(),\n-            \"escape or balance opening brace on l. 1\"\n+            &TemplateParser::parse(\"parsing error {\\nsecond line\")\n+                .unwrap_err()\n+                .to_string(),\n+            \"parsing failed, escape or balance opening brace on l. 1\"\n         );\n         assert_eq!(\n-            TemplateParser::parse(r\"parsing error \\\").unwrap_err(),\n-            \"incomplete escape sequence on l. 1\"\n+            &TemplateParser::parse(r\"parsing error \\\")\n+                .unwrap_err()\n+                .to_string(),\n+            \"parsing failed, incomplete escape sequence on l. 1\"\n         );\n     }\n }"}, {"sha": "8142b5034fb07c3193ffc57a724ddf32659ed453", "filename": "src/config/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1db84a3ec5ba40792f549bd815559f7d0c1ba234/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db84a3ec5ba40792f549bd815559f7d0c1ba234/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=1db84a3ec5ba40792f549bd815559f7d0c1ba234", "patch": "@@ -29,7 +29,7 @@ pub mod license;\n \n use config::config_type::ConfigType;\n use config::file_lines::FileLines;\n-use config::license::TemplateParser;\n+use config::license::{LicenseError, TemplateParser};\n pub use config::lists::*;\n pub use config::options::*;\n use config::summary::Summary;"}]}