{"sha": "51558ccb8e7cea87c6d1c494abad5451e5759979", "node_id": "C_kwDOAAsO6NoAKDUxNTU4Y2NiOGU3Y2VhODdjNmQxYzQ5NGFiYWQ1NDUxZTU3NTk5Nzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-20T21:36:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-20T21:36:57Z"}, "message": "Auto merge of #95148 - matthiaskrgr:rollup-jsb1ld9, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #95114 (Skip a test if symlink creation is not possible)\n - #95131 (Fix docs for default rmeta filename.)\n - #95135 (Fix a not emitted unmatched angle bracket error)\n - #95145 (Fix typo interator->iterator)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e01932f74602a8d254b21977d500120bea4844eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e01932f74602a8d254b21977d500120bea4844eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51558ccb8e7cea87c6d1c494abad5451e5759979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51558ccb8e7cea87c6d1c494abad5451e5759979", "html_url": "https://github.com/rust-lang/rust/commit/51558ccb8e7cea87c6d1c494abad5451e5759979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51558ccb8e7cea87c6d1c494abad5451e5759979/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c84f39e6c08397d4ab9b51b472002a8bfc3b5b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/c84f39e6c08397d4ab9b51b472002a8bfc3b5b59", "html_url": "https://github.com/rust-lang/rust/commit/c84f39e6c08397d4ab9b51b472002a8bfc3b5b59"}, {"sha": "e33a4819df2c65f91bf55fd18f0fdd4169e430cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e33a4819df2c65f91bf55fd18f0fdd4169e430cc", "html_url": "https://github.com/rust-lang/rust/commit/e33a4819df2c65f91bf55fd18f0fdd4169e430cc"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "e55bdb0e5536526dec0aeaeb6bbda25663914776", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51558ccb8e7cea87c6d1c494abad5451e5759979/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51558ccb8e7cea87c6d1c494abad5451e5759979/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=51558ccb8e7cea87c6d1c494abad5451e5759979", "patch": "@@ -1486,7 +1486,7 @@ impl<'a> Parser<'a> {\n                             // `check_trailing_angle_brackets` already emitted a nicer error\n                             // NOTE(eddyb) this was `.cancel()`, but `err`\n                             // gets returned, so we can't fully defuse it.\n-                            err.downgrade_to_delayed_bug();\n+                            err.delay_as_bug();\n                         }\n                     }\n                 }"}, {"sha": "bf7db8221a26f044a9475ef4dcd94519ecb38125", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51558ccb8e7cea87c6d1c494abad5451e5759979/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51558ccb8e7cea87c6d1c494abad5451e5759979/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=51558ccb8e7cea87c6d1c494abad5451e5759979", "patch": "@@ -599,7 +599,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                     // Make sure that, if any traits other than the found ones were involved,\n                     // we don't don't report an unimplemented trait.\n-                    // We don't want to say that `iter::Cloned` is not an interator, just\n+                    // We don't want to say that `iter::Cloned` is not an iterator, just\n                     // because of some non-Clone item being iterated over.\n                     for (predicate, _parent_pred, _cause) in &unsatisfied_predicates {\n                         match predicate.kind().skip_binder() {"}, {"sha": "cd535afb4a338d6551fac02a7cd5871b5114278e", "filename": "library/std/src/sys/windows/process/tests.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/51558ccb8e7cea87c6d1c494abad5451e5759979/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51558ccb8e7cea87c6d1c494abad5451e5759979/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs?ref=51558ccb8e7cea87c6d1c494abad5451e5759979", "patch": "@@ -186,8 +186,15 @@ fn windows_exe_resolver() {\n     let temp = tmpdir();\n     let mut exe_path = temp.path().to_owned();\n     exe_path.push(\"exists.exe\");\n-    symlink(\"<DOES NOT EXIST>\".as_ref(), &exe_path).unwrap();\n \n     // A broken symlink should still be resolved.\n-    assert!(resolve_exe(OsStr::new(\"exists.exe\"), empty_paths, Some(temp.path().as_ref())).is_ok());\n+    // Skip this check if not in CI and creating symlinks isn't possible.\n+    let is_ci = env::var(\"CI\").is_ok();\n+    let result = symlink(\"<DOES NOT EXIST>\".as_ref(), &exe_path);\n+    if is_ci || result.is_ok() {\n+        result.unwrap();\n+        assert!(\n+            resolve_exe(OsStr::new(\"exists.exe\"), empty_paths, Some(temp.path().as_ref())).is_ok()\n+        );\n+    }\n }"}, {"sha": "3759cb632bb3f4f9b3c9eb490bd55d16db6a3043", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51558ccb8e7cea87c6d1c494abad5451e5759979/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/51558ccb8e7cea87c6d1c494abad5451e5759979/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=51558ccb8e7cea87c6d1c494abad5451e5759979", "patch": "@@ -118,7 +118,7 @@ The valid emit kinds are:\n - `llvm-ir` \u2014 Generates a file containing [LLVM IR]. The default output\n   filename is `CRATE_NAME.ll`.\n - `metadata` \u2014 Generates a file containing metadata about the crate. The\n-  default output filename is `CRATE_NAME.rmeta`.\n+  default output filename is `libCRATE_NAME.rmeta`.\n - `mir` \u2014 Generates a file containing rustc's mid-level intermediate\n   representation. The default output filename is `CRATE_NAME.mir`.\n - `obj` \u2014 Generates a native object file. The default output filename is"}, {"sha": "e815c7611c0df9241cc1a8bb8456b878cc49d448", "filename": "src/test/ui/parser/recover-field-extra-angle-brackets-in-struct-with-a-field.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51558ccb8e7cea87c6d1c494abad5451e5759979/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets-in-struct-with-a-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51558ccb8e7cea87c6d1c494abad5451e5759979/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets-in-struct-with-a-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets-in-struct-with-a-field.rs?ref=51558ccb8e7cea87c6d1c494abad5451e5759979", "patch": "@@ -0,0 +1,6 @@\n+struct TypedArenaChunk {\n+    next: Option<String>>\n+    //~^ ERROR unmatched angle bracket\n+}\n+\n+fn main() {}"}, {"sha": "17237c930979f2e7ca79890972d26e3104849c7d", "filename": "src/test/ui/parser/recover-field-extra-angle-brackets-in-struct-with-a-field.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/51558ccb8e7cea87c6d1c494abad5451e5759979/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets-in-struct-with-a-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51558ccb8e7cea87c6d1c494abad5451e5759979/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets-in-struct-with-a-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets-in-struct-with-a-field.stderr?ref=51558ccb8e7cea87c6d1c494abad5451e5759979", "patch": "@@ -0,0 +1,11 @@\n+error: unmatched angle bracket\n+  --> $DIR/recover-field-extra-angle-brackets-in-struct-with-a-field.rs:2:25\n+   |\n+LL |       next: Option<String>>\n+   |  _________________________^\n+LL | |\n+LL | | }\n+   | |_ help: remove extra angle bracket\n+\n+error: aborting due to previous error\n+"}]}