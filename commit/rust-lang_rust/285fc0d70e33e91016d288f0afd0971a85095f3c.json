{"sha": "285fc0d70e33e91016d288f0afd0971a85095f3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NWZjMGQ3MGUzM2U5MTAxNmQyODhmMGFmZDA5NzFhODUwOTVmM2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-05T20:46:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-05T20:46:34Z"}, "message": "Auto merge of #803 - christianpoveda:intptrcast-explicit-casts, r=RalfJung\n\nAdd tests for Intptrcast when doing explicit casts\n\nr? @RalfJung", "tree": {"sha": "43eb0d8d5cd61e790e09a8e033f2b57d328276da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43eb0d8d5cd61e790e09a8e033f2b57d328276da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/285fc0d70e33e91016d288f0afd0971a85095f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/285fc0d70e33e91016d288f0afd0971a85095f3c", "html_url": "https://github.com/rust-lang/rust/commit/285fc0d70e33e91016d288f0afd0971a85095f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/285fc0d70e33e91016d288f0afd0971a85095f3c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16d791bf88760d62d9925efb387beadd93de64f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d791bf88760d62d9925efb387beadd93de64f0", "html_url": "https://github.com/rust-lang/rust/commit/16d791bf88760d62d9925efb387beadd93de64f0"}, {"sha": "89696a4ab90517bddf357b328dd6d3779520d578", "url": "https://api.github.com/repos/rust-lang/rust/commits/89696a4ab90517bddf357b328dd6d3779520d578", "html_url": "https://github.com/rust-lang/rust/commit/89696a4ab90517bddf357b328dd6d3779520d578"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "9e4ddf2acaaa807745f409a78e2507c5a772f02b", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc0d70e33e91016d288f0afd0971a85095f3c/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/285fc0d70e33e91016d288f0afd0971a85095f3c/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=285fc0d70e33e91016d288f0afd0971a85095f3c", "patch": "@@ -1 +1 @@\n-7e08576e4276a97b523c25bfd196d419c39c7b87\n+088b987307b91612ab164026e1dcdd0129fdb62b"}, {"sha": "91a563fa56b9afa1617a1d43a5cb612ae48cc4d1", "filename": "src/eval.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/285fc0d70e33e91016d288f0afd0971a85095f3c/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc0d70e33e91016d288f0afd0971a85095f3c/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=285fc0d70e33e91016d288f0afd0971a85095f3c", "patch": "@@ -35,8 +35,16 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         Evaluator::new(),\n     );\n \n+    // FIXME(https://github.com/rust-lang/miri/pull/803): no validation on Windows.\n+    let target_os = ecx.tcx.tcx.sess.target.target.target_os.to_lowercase();\n+    let validate = if target_os == \"windows\" {\n+        false\n+    } else {\n+        config.validate\n+    };\n+\n     // FIXME: InterpretCx::new should take an initial MemoryExtra\n-    ecx.memory_mut().extra = MemoryExtra::new(config.seed.map(StdRng::seed_from_u64), config.validate);\n+    ecx.memory_mut().extra = MemoryExtra::new(config.seed.map(StdRng::seed_from_u64), validate);\n     \n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);\n     let main_mir = ecx.load_mir(main_instance.def)?;"}, {"sha": "2a3644e45cbf749a1e28cd907ead4cda70ea01ca", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/285fc0d70e33e91016d288f0afd0971a85095f3c/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc0d70e33e91016d288f0afd0971a85095f3c/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=285fc0d70e33e91016d288f0afd0971a85095f3c", "patch": "@@ -50,8 +50,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         if !this.is_null(ptr)? {\n+            let ptr = this.force_ptr(ptr)?;\n             this.memory_mut().deallocate(\n-                ptr.to_ptr()?,\n+                ptr,\n                 None,\n                 MiriMemoryKind::C.into(),\n             )?;\n@@ -78,7 +79,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 Ok(Scalar::Ptr(new_ptr))\n             }\n         } else {\n-            let old_ptr = old_ptr.to_ptr()?;\n+            let old_ptr = this.force_ptr(old_ptr)?;\n             let memory = this.memory_mut();\n             let old_size = Size::from_bytes(memory.get(old_ptr.alloc_id)?.bytes.len() as u64);\n             if new_size == 0 {\n@@ -234,7 +235,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }\n             \"__rust_dealloc\" => {\n-                let ptr = this.read_scalar(args[0])?.to_ptr()?;\n+                let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let old_size = this.read_scalar(args[1])?.to_usize(this)?;\n                 let align = this.read_scalar(args[2])?.to_usize(this)?;\n                 if old_size == 0 {\n@@ -243,6 +244,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 if !align.is_power_of_two() {\n                     return err!(HeapAllocNonPowerOfTwoAlignment(align));\n                 }\n+                let ptr = this.force_ptr(ptr)?;\n                 this.memory_mut().deallocate(\n                     ptr,\n                     Some((Size::from_bytes(old_size), Align::from_bytes(align).unwrap())),"}, {"sha": "a9aba008e9a927407c869110b4992f8e9b383b9d", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/285fc0d70e33e91016d288f0afd0971a85095f3c/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/285fc0d70e33e91016d288f0afd0971a85095f3c/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=285fc0d70e33e91016d288f0afd0971a85095f3c", "patch": "@@ -52,8 +52,9 @@ def test_cargo_miri_run():\n     )\n \n def test_cargo_miri_test():\n+    # FIXME: enable validation again, once that no longer conflicts with intptrcast\n     test(\"cargo miri test\",\n-        cargo_miri(\"test\") + [\"--\", \"-Zmiri-seed=feed\"],\n+        cargo_miri(\"test\") + [\"--\", \"-Zmiri-seed=feed\", \"-Zmiri-disable-validation\"],\n         \"test.stdout.ref\", \"test.stderr.ref\"\n     )\n     test(\"cargo miri test (with filter)\","}, {"sha": "076deca6a318c87e5b3dceaed2a77d5c703dc989", "filename": "tests/compiletest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/285fc0d70e33e91016d288f0afd0971a85095f3c/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc0d70e33e91016d288f0afd0971a85095f3c/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=285fc0d70e33e91016d288f0afd0971a85095f3c", "patch": "@@ -112,7 +112,9 @@ fn run_pass_miri(opt: bool) {\n }\n \n fn compile_fail_miri(opt: bool) {\n-    compile_fail(\"tests/compile-fail\", &get_target(), opt);\n+    if !cfg!(windows) { // FIXME re-enable on Windows\n+        compile_fail(\"tests/compile-fail\", &get_target(), opt);\n+    }\n }\n \n fn test_runner(_tests: &[&()]) {"}, {"sha": "1b5251c91119a074e5d3286837ea5e16e4575bcf", "filename": "tests/run-pass-noseed/intptrcast.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/285fc0d70e33e91016d288f0afd0971a85095f3c/tests%2Frun-pass-noseed%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc0d70e33e91016d288f0afd0971a85095f3c/tests%2Frun-pass-noseed%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-noseed%2Fintptrcast.rs?ref=285fc0d70e33e91016d288f0afd0971a85095f3c", "patch": "@@ -1,8 +1,13 @@\n // compile-flags: -Zmiri-seed=0000000000000000\n \n+// This returns a miri pointer at type usize, if the argument is a proper pointer\n+fn transmute_ptr_to_int<T>(x: *const T) -> usize {\n+    unsafe { std::mem::transmute(x) }\n+}\n+\n fn main() {\n     // Some casting-to-int with arithmetic.\n-    let x = &42 as *const i32 as usize; \n+    let x = &42 as *const i32 as usize;\n     let y = x * 2;\n     assert_eq!(y, x + x);\n     let z = y as u8 as usize;\n@@ -11,4 +16,11 @@ fn main() {\n     // Pointer string formatting! We can't check the output as it changes when libstd changes,\n     // but we can make sure Miri does not error.\n     format!(\"{:?}\", &mut 13 as *mut _);\n+\n+    // Check that intptrcast is triggered for explicit casts and that it is consistent with\n+    // transmuting.\n+    let a: *const i32 = &42;\n+    let b = transmute_ptr_to_int(a) as u8;\n+    let c = a as usize as u8;\n+    assert_eq!(b, c);\n }"}, {"sha": "ebf65ac3fe246fe0770f3c50a47d09117022cb38", "filename": "tests/run-pass-noseed/ptr_int_casts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/285fc0d70e33e91016d288f0afd0971a85095f3c/tests%2Frun-pass-noseed%2Fptr_int_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc0d70e33e91016d288f0afd0971a85095f3c/tests%2Frun-pass-noseed%2Fptr_int_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-noseed%2Fptr_int_casts.rs?ref=285fc0d70e33e91016d288f0afd0971a85095f3c", "patch": "@@ -1,3 +1,4 @@\n+// FIXME move this to run-pass, it should work with intptrcast.\n use std::mem;\n use std::ptr;\n "}, {"sha": "a836e02812da7b8af92b5346d7e9f78aee4b1c66", "filename": "tests/run-pass-noseed/ptr_offset.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc0d70e33e91016d288f0afd0971a85095f3c/tests%2Frun-pass-noseed%2Fptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc0d70e33e91016d288f0afd0971a85095f3c/tests%2Frun-pass-noseed%2Fptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-noseed%2Fptr_offset.rs?ref=285fc0d70e33e91016d288f0afd0971a85095f3c", "patch": "@@ -1,3 +1,5 @@\n+// FIXME move this to run-pass, it should work with intptrcast.\n+\n fn f() -> i32 { 42 }\n \n fn main() {", "previous_filename": "tests/run-pass/ptr_offset.rs"}]}