{"sha": "ff9ab51617bbdbae0234476b633f5d1f9f1dd277", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOWFiNTE2MTdiYmRiYWUwMjM0NDc2YjYzM2Y1ZDFmOWYxZGQyNzc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-03-22T03:26:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-22T03:26:48Z"}, "message": "Merge pull request #2550 from sinkuu/chars_count_index\n\nDon't index a string with chars().count()/position()", "tree": {"sha": "3b6770b0db8945c5c059773f174bea4a262d608b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b6770b0db8945c5c059773f174bea4a262d608b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff9ab51617bbdbae0234476b633f5d1f9f1dd277", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJasyJ4CRBK7hj4Ov3rIwAAdHIIAK8R3FPeBt644eiXscr/zK9b\ncXNqfEfh0mL5ksUH4eMapgtWLM70NHnh5C9OAVsA/2gwWaBud3cdkGCKOOhm4xNs\nOHxbU0jRSf7Bh5ervw9FsT6sKKhM0HJZB57bcEpkhhTpFHrWO0uSybkKwVcYXaZm\nT7xt2sZW+QgZHISpGge/YypT4grFbKjoBmTu0raK+JiBWfx8jiBZN6I0IPZOv4vK\noSD/zpLYIfh1JThjRNgrsFDksbpjQ2G9STJK0cLCVDazDn/yak66/a1ZmMnhbkOt\n5C9PCpI2MbL9V8kETji0ER7YFL2Vdu+VfZsdkZi294UbUx8eoTVepvnNI28d40Y=\n=9IWh\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b6770b0db8945c5c059773f174bea4a262d608b\nparent 0bc0241d2a83beb60ebb6da2242dc818b053e619\nparent 83c8d23cc27fa3ce1597edb78d5ae6f3c99fc4bb\nauthor Nick Cameron <nrc@ncameron.org> 1521689208 +1300\ncommitter GitHub <noreply@github.com> 1521689208 +1300\n\nMerge pull request #2550 from sinkuu/chars_count_index\n\nDon't index a string with chars().count()/position()"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff9ab51617bbdbae0234476b633f5d1f9f1dd277", "html_url": "https://github.com/rust-lang/rust/commit/ff9ab51617bbdbae0234476b633f5d1f9f1dd277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bc0241d2a83beb60ebb6da2242dc818b053e619", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc0241d2a83beb60ebb6da2242dc818b053e619", "html_url": "https://github.com/rust-lang/rust/commit/0bc0241d2a83beb60ebb6da2242dc818b053e619"}, {"sha": "83c8d23cc27fa3ce1597edb78d5ae6f3c99fc4bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c8d23cc27fa3ce1597edb78d5ae6f3c99fc4bb", "html_url": "https://github.com/rust-lang/rust/commit/83c8d23cc27fa3ce1597edb78d5ae6f3c99fc4bb"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "409a61ab544e3c770cbb4db4ff9ee76dd0468347", "filename": "src/attr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=ff9ab51617bbdbae0234476b633f5d1f9f1dd277", "patch": "@@ -167,19 +167,17 @@ impl Rewrite for ast::NestedMetaItem {\n \n fn has_newlines_before_after_comment(comment: &str) -> (&str, &str) {\n     // Look at before and after comment and see if there are any empty lines.\n-    let comment_begin = comment.chars().position(|c| c == '/');\n+    let comment_begin = comment.find('/');\n     let len = comment_begin.unwrap_or_else(|| comment.len());\n     let mlb = count_newlines(&comment[..len]) > 1;\n     let mla = if comment_begin.is_none() {\n         mlb\n     } else {\n-        let comment_end = comment.chars().rev().position(|c| !c.is_whitespace());\n-        let len = comment_end.unwrap();\n         comment\n             .chars()\n             .rev()\n-            .take(len)\n-            .filter(|c| *c == '\\n')\n+            .take_while(|c| c.is_whitespace())\n+            .filter(|&c| c == '\\n')\n             .count() > 1\n     };\n     (if mlb { \"\\n\" } else { \"\" }, if mla { \"\\n\" } else { \"\" })"}, {"sha": "05b423d1898d4a3458459695a81af49595482466", "filename": "src/comment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=ff9ab51617bbdbae0234476b633f5d1f9f1dd277", "patch": "@@ -187,7 +187,7 @@ pub fn combine_strs_with_missing_comments(\n     // expression and the second expression or the missing comment. We will preserve the original\n     // layout whenever possible.\n     let original_snippet = context.snippet(span);\n-    let prefer_same_line = if let Some(pos) = original_snippet.chars().position(|c| c == '/') {\n+    let prefer_same_line = if let Some(pos) = original_snippet.find('/') {\n         !original_snippet[..pos].contains('\\n')\n     } else {\n         !original_snippet.contains('\\n')\n@@ -523,7 +523,7 @@ pub fn recover_missing_comment_in_span(\n         Some(String::new())\n     } else {\n         let missing_snippet = context.snippet(span);\n-        let pos = missing_snippet.chars().position(|c| c == '/').unwrap_or(0);\n+        let pos = missing_snippet.find('/').unwrap_or(0);\n         // 1 = ` `\n         let total_width = missing_comment.len() + used_width + 1;\n         let force_new_line_before_comment ="}, {"sha": "ad7babca118109a3278f94880bf0c98afb64b761", "filename": "src/issues.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=ff9ab51617bbdbae0234476b633f5d1f9f1dd277", "patch": "@@ -227,13 +227,13 @@ fn find_unnumbered_issue() {\n         let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered, ReportTactic::Unnumbered);\n         assert_eq!(\n             Some(failing_pos),\n-            text.chars().position(|c| seeker.inspect(c).is_some())\n+            text.find(|c| seeker.inspect(c).is_some())\n         );\n     }\n \n     fn check_pass(text: &str) {\n         let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered, ReportTactic::Unnumbered);\n-        assert_eq!(None, text.chars().position(|c| seeker.inspect(c).is_some()));\n+        assert_eq!(None, text.find(|c| seeker.inspect(c).is_some()));\n     }\n \n     check_fail(\"TODO\\n\", 4);"}, {"sha": "377d777c4099355c78f7cc7acd708b6c61f30b78", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=ff9ab51617bbdbae0234476b633f5d1f9f1dd277", "patch": "@@ -977,7 +977,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             result.push_str(&where_clause_str);\n         } else {\n             let item_snippet = context.snippet(item.span);\n-            if let Some(lo) = item_snippet.chars().position(|c| c == '/') {\n+            if let Some(lo) = item_snippet.find('/') {\n                 // 1 = `{`\n                 let comment_hi = body_lo - BytePos(1);\n                 let comment_lo = item.span.lo() + BytePos(lo as u32);"}, {"sha": "3f4b96b0b6be55ee18addc00a9b8eb5464b5e31b", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ff9ab51617bbdbae0234476b633f5d1f9f1dd277", "patch": "@@ -154,12 +154,14 @@ impl FormattingError {\n         match self.kind {\n             ErrorKind::LineOverflow(found, max) => (max, found - max),\n             ErrorKind::TrailingWhitespace => {\n-                let trailing_ws_len = self.line_buffer\n-                    .chars()\n-                    .rev()\n-                    .take_while(|c| c.is_whitespace())\n-                    .count();\n-                (self.line_buffer.len() - trailing_ws_len, trailing_ws_len)\n+                let trailing_ws_start = self.line_buffer\n+                    .rfind(|c: char| !c.is_whitespace())\n+                    .map(|pos| pos + 1)\n+                    .unwrap_or(0);\n+                (\n+                    trailing_ws_start,\n+                    self.line_buffer.len() - trailing_ws_start,\n+                )\n             }\n             _ => unreachable!(),\n         }"}, {"sha": "f2202c4dcf22279aa156ddf22f5635e7410aac62", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9ab51617bbdbae0234476b633f5d1f9f1dd277/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=ff9ab51617bbdbae0234476b633f5d1f9f1dd277", "patch": "@@ -251,7 +251,8 @@ pub fn stmt_expr(stmt: &ast::Stmt) -> Option<&ast::Expr> {\n \n #[inline]\n pub fn count_newlines(input: &str) -> usize {\n-    input.chars().filter(|&c| c == '\\n').count()\n+    // Using `as_bytes` to omit UTF-8 decoding\n+    input.as_bytes().iter().filter(|&&c| c == b'\\n').count()\n }\n \n macro_rules! msg {"}]}