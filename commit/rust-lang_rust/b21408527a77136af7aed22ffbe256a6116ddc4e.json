{"sha": "b21408527a77136af7aed22ffbe256a6116ddc4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMTQwODUyN2E3NzEzNmFmN2FlZDIyZmZiZTI1NmE2MTE2ZGRjNGU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-05T06:41:51Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-22T18:33:12Z"}, "message": "review comments", "tree": {"sha": "81394d4baf29b9c09374b43ceca598b95f332f53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81394d4baf29b9c09374b43ceca598b95f332f53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b21408527a77136af7aed22ffbe256a6116ddc4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b21408527a77136af7aed22ffbe256a6116ddc4e", "html_url": "https://github.com/rust-lang/rust/commit/b21408527a77136af7aed22ffbe256a6116ddc4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b21408527a77136af7aed22ffbe256a6116ddc4e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "html_url": "https://github.com/rust-lang/rust/commit/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "92a8c008047333b2394b7b0c232032835669a93d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b21408527a77136af7aed22ffbe256a6116ddc4e/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21408527a77136af7aed22ffbe256a6116ddc4e/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b21408527a77136af7aed22ffbe256a6116ddc4e", "patch": "@@ -2751,9 +2751,8 @@ pub enum Node<'hir> {\n     Crate,\n }\n \n-impl<'hir> Node<'hir> {\n+impl Node<'_> {\n     pub fn ident(&self) -> Option<Ident> {\n-\n         match self {\n             Node::TraitItem(TraitItem { ident, .. }) |\n             Node::ImplItem(ImplItem { ident, .. }) |"}, {"sha": "edea91c717ef76f13a95413c0cc9c5abe1ac3580", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b21408527a77136af7aed22ffbe256a6116ddc4e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21408527a77136af7aed22ffbe256a6116ddc4e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b21408527a77136af7aed22ffbe256a6116ddc4e", "patch": "@@ -4736,25 +4736,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // First, store the \"user substs\" for later.\n         self.write_user_type_annotation_from_substs(hir_id, def_id, substs, user_self_ty);\n \n-        // Add all the obligations that are required, substituting and\n-        // normalized appropriately.\n-        let (bounds, spans) = self.instantiate_bounds(span, def_id, &substs);\n-\n-        for (i, mut obligation) in traits::predicates_for_generics(\n-            traits::ObligationCause::new(\n-                span,\n-                self.body_id,\n-                traits::ItemObligation(def_id),\n-            ),\n-            self.param_env,\n-            &bounds,\n-        ).into_iter().enumerate() {\n-            // This makes the error point at the bound, but we want to point at the argument\n-            if let Some(span) = spans.get(i) {\n-                obligation.cause.code = traits::BindingObligation(def_id, *span);\n-            }\n-            self.register_predicate(obligation);\n-        }\n+        self.add_required_obligations(span, def_id, &substs);\n \n         // Substitute the values for the type parameters into the type of\n         // the referenced item.\n@@ -4791,6 +4773,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         (ty_substituted, res)\n     }\n \n+    /// Add all the obligations that are required, substituting and normalized appropriately.\n+    fn add_required_obligations(&self, span: Span, def_id: DefId, substs: &SubstsRef<'tcx>) {\n+        let (bounds, spans) = self.instantiate_bounds(span, def_id, &substs);\n+\n+        for (i, mut obligation) in traits::predicates_for_generics(\n+            traits::ObligationCause::new(\n+                span,\n+                self.body_id,\n+                traits::ItemObligation(def_id),\n+            ),\n+            self.param_env,\n+            &bounds,\n+        ).into_iter().enumerate() {\n+            // This makes the error point at the bound, but we want to point at the argument\n+            if let Some(span) = spans.get(i) {\n+                obligation.cause.code = traits::BindingObligation(def_id, *span);\n+            }\n+            self.register_predicate(obligation);\n+        }\n+    }\n+\n     fn check_rustc_args_require_const(&self,\n                                       def_id: DefId,\n                                       hir_id: hir::HirId,"}, {"sha": "87839f8c70ee83641254b6e28c4c4ce3c723d72e", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b21408527a77136af7aed22ffbe256a6116ddc4e/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21408527a77136af7aed22ffbe256a6116ddc4e/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=b21408527a77136af7aed22ffbe256a6116ddc4e", "patch": "@@ -197,7 +197,7 @@ impl<'a> Parser<'a> {\n                 let (args, constraints) =\n                     self.parse_generic_args_with_leaning_angle_bracket_recovery(style, lo)?;\n                 self.expect_gt()?;\n-                let span = ident.span.to(self.prev_span);\n+                let span = lo.to(self.prev_span);\n                 AngleBracketedArgs { args, constraints, span }.into()\n             } else {\n                 // `(T, U) -> R`"}, {"sha": "8f32fb0eca106c595b2667726b01cd286511a714", "filename": "src/test/ui/parser/type-parameters-in-field-exprs.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b21408527a77136af7aed22ffbe256a6116ddc4e/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b21408527a77136af7aed22ffbe256a6116ddc4e/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr?ref=b21408527a77136af7aed22ffbe256a6116ddc4e", "patch": "@@ -1,14 +1,14 @@\n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:13:7\n+  --> $DIR/type-parameters-in-field-exprs.rs:13:10\n    |\n LL |     f.x::<isize>;\n-   |       ^^^^^^^^^^\n+   |          ^^^^^^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:15:7\n+  --> $DIR/type-parameters-in-field-exprs.rs:15:10\n    |\n LL |     f.x::<>;\n-   |       ^^^^^\n+   |          ^^\n \n error: field expressions may not have generic arguments\n   --> $DIR/type-parameters-in-field-exprs.rs:17:7"}, {"sha": "39b3edc67033d63ca2f42f1e50d80ae27a75941e", "filename": "src/test/ui/span/macro-ty-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21408527a77136af7aed22ffbe256a6116ddc4e/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b21408527a77136af7aed22ffbe256a6116ddc4e/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr?ref=b21408527a77136af7aed22ffbe256a6116ddc4e", "patch": "@@ -1,14 +1,14 @@\n error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:10:5\n+  --> $DIR/macro-ty-params.rs:10:10\n    |\n LL |     foo::<T>!();\n-   |     ^^^^^^^^\n+   |          ^^^\n \n error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:11:5\n+  --> $DIR/macro-ty-params.rs:11:10\n    |\n LL |     foo::<>!();\n-   |     ^^^^^^^\n+   |          ^^\n \n error: unexpected generic arguments in path\n   --> $DIR/macro-ty-params.rs:12:8\n@@ -17,10 +17,10 @@ LL |     m!(Default<>);\n    |        ^^^^^^^^^\n \n error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:12:8\n+  --> $DIR/macro-ty-params.rs:12:15\n    |\n LL |     m!(Default<>);\n-   |        ^^^^^^^^^\n+   |               ^^\n \n error: aborting due to 4 previous errors\n "}]}