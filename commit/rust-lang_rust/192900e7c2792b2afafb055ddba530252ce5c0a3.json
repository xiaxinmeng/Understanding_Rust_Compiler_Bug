{"sha": "192900e7c2792b2afafb055ddba530252ce5c0a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MjkwMGU3YzI3OTJiMmFmYWZiMDU1ZGRiYTUzMDI1MmNlNWMwYTM=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2018-09-20T07:18:00Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2018-11-01T22:16:22Z"}, "message": "Add CoerceSized impls throughout libstd\n\nThis will make receiver types like `Rc<Self>` and `Pin<&mut Self>`\nobject-safe.", "tree": {"sha": "a2b7e825e5d007171f14f526ff2ee20b3b93cbda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b7e825e5d007171f14f526ff2ee20b3b93cbda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/192900e7c2792b2afafb055ddba530252ce5c0a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/192900e7c2792b2afafb055ddba530252ce5c0a3", "html_url": "https://github.com/rust-lang/rust/commit/192900e7c2792b2afafb055ddba530252ce5c0a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/192900e7c2792b2afafb055ddba530252ce5c0a3/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f59da28648c57d7c4fcac371f9f86adddeb20a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f59da28648c57d7c4fcac371f9f86adddeb20a3", "html_url": "https://github.com/rust-lang/rust/commit/9f59da28648c57d7c4fcac371f9f86adddeb20a3"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "8a4e646f278ecd9b3c5ad3a43aa88e68b90f98bd", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=192900e7c2792b2afafb055ddba530252ce5c0a3", "patch": "@@ -77,7 +77,7 @@ use core::iter::FusedIterator;\n use core::marker::{Unpin, Unsize};\n use core::mem;\n use core::pin::Pin;\n-use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n+use core::ops::{CoerceUnsized, CoerceSized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n use core::task::{LocalWaker, Poll};\n \n@@ -696,6 +696,9 @@ impl<'a, A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + Send + 'a> {\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n \n+#[unstable(feature = \"coerce_sized\", issue = \"0\")]\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceSized<Box<T>> for Box<U> {}\n+\n #[stable(feature = \"box_slice_clone\", since = \"1.3.0\")]\n impl<T: Clone> Clone for Box<[T]> {\n     fn clone(&self) -> Self {"}, {"sha": "93c340a6dbd2dddb3065a3cd15d01c72dd94cab1", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=192900e7c2792b2afafb055ddba530252ce5c0a3", "patch": "@@ -86,6 +86,7 @@\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n+#![feature(coerce_sized)]\n #![feature(core_intrinsics)]\n #![feature(custom_attribute)]\n #![feature(dropck_eyepatch)]"}, {"sha": "c1cc7ac976dedd12c663fa0ca65809fcd4942110", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=192900e7c2792b2afafb055ddba530252ce5c0a3", "patch": "@@ -255,7 +255,7 @@ use core::marker;\n use core::marker::{Unpin, Unsize, PhantomData};\n use core::mem::{self, align_of_val, forget, size_of_val};\n use core::ops::Deref;\n-use core::ops::CoerceUnsized;\n+use core::ops::{CoerceUnsized, CoerceSized};\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n use core::convert::From;\n@@ -297,6 +297,9 @@ impl<T: ?Sized> !marker::Sync for Rc<T> {}\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Rc<U>> for Rc<T> {}\n \n+#[unstable(feature = \"coerce_sized\", issue = \"0\")]\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceSized<Rc<T>> for Rc<U> {}\n+\n impl<T> Rc<T> {\n     /// Constructs a new `Rc<T>`.\n     ///\n@@ -1176,6 +1179,9 @@ impl<T: ?Sized> !marker::Sync for Weak<T> {}\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n \n+#[unstable(feature = \"coerce_sized\", issue = \"0\")]\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceSized<Weak<T>> for Weak<U> {}\n+\n impl<T> Weak<T> {\n     /// Constructs a new `Weak<T>`, without allocating any memory.\n     /// Calling [`upgrade`][Weak::upgrade] on the return value always gives [`None`]."}, {"sha": "358e18bbe1b90e622074dffb1aebb7a416b0ce19", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=192900e7c2792b2afafb055ddba530252ce5c0a3", "patch": "@@ -25,7 +25,7 @@ use core::cmp::Ordering;\n use core::intrinsics::abort;\n use core::mem::{self, align_of_val, size_of_val};\n use core::ops::Deref;\n-use core::ops::CoerceUnsized;\n+use core::ops::{CoerceUnsized, CoerceSized};\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n use core::marker::{Unpin, Unsize, PhantomData};\n@@ -214,6 +214,9 @@ unsafe impl<T: ?Sized + Sync + Send> Sync for Arc<T> {}\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n \n+#[unstable(feature = \"coerce_sized\", issue = \"0\")]\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceSized<Arc<T>> for Arc<U> {}\n+\n /// `Weak` is a version of [`Arc`] that holds a non-owning reference to the\n /// managed value. The value is accessed by calling [`upgrade`] on the `Weak`\n /// pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`.\n@@ -254,6 +257,8 @@ unsafe impl<T: ?Sized + Sync + Send> Sync for Weak<T> {}\n \n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n+#[unstable(feature = \"coerce_sized\", issue = \"0\")]\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceSized<Weak<T>> for Weak<U> {}\n \n #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {"}, {"sha": "2bc6c36171ce33adad1cf3a4ae25928b4145e8c6", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=192900e7c2792b2afafb055ddba530252ce5c0a3", "patch": "@@ -10,7 +10,7 @@\n \n //! Exposes the NonZero lang item which provides optimization hints.\n \n-use ops::CoerceUnsized;\n+use ops::{CoerceUnsized, CoerceSized};\n \n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n@@ -20,3 +20,5 @@ use ops::CoerceUnsized;\n pub(crate) struct NonZero<T>(pub(crate) T);\n \n impl<T: CoerceUnsized<U>, U> CoerceUnsized<NonZero<U>> for NonZero<T> {}\n+\n+impl<T: CoerceUnsized<U>, U: CoerceSized<T>> CoerceSized<NonZero<T>> for NonZero<U> {}"}, {"sha": "87ca193aeee5cd5f0e288e83a618fa10909e3c6f", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=192900e7c2792b2afafb055ddba530252ce5c0a3", "patch": "@@ -91,7 +91,7 @@\n \n use fmt;\n use marker::Sized;\n-use ops::{Deref, DerefMut, CoerceUnsized};\n+use ops::{Deref, DerefMut, CoerceUnsized, CoerceSized};\n \n #[doc(inline)]\n pub use marker::Unpin;\n@@ -324,5 +324,12 @@ where\n     P: CoerceUnsized<U>,\n {}\n \n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, P, U> CoerceSized<Pin<P>> for Pin<U>\n+where\n+    P: CoerceUnsized<U>,\n+    U: CoerceSized<P>,\n+{}\n+\n #[unstable(feature = \"pin\", issue = \"49150\")]\n impl<P> Unpin for Pin<P> {}"}, {"sha": "24ef028b49d5d51684bcec2c4bf29ed243a85a85", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192900e7c2792b2afafb055ddba530252ce5c0a3/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=192900e7c2792b2afafb055ddba530252ce5c0a3", "patch": "@@ -75,7 +75,7 @@\n \n use convert::From;\n use intrinsics;\n-use ops::CoerceUnsized;\n+use ops::{CoerceUnsized, CoerceSized};\n use fmt;\n use hash;\n use marker::{PhantomData, Unsize};\n@@ -2795,6 +2795,9 @@ impl<T: ?Sized> Copy for Unique<T> { }\n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> { }\n \n+#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+impl<T: ?Sized, U: ?Sized> CoerceSized<Unique<T>> for Unique<U> where T: Unsize<U> { }\n+\n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> fmt::Pointer for Unique<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -2951,6 +2954,9 @@ impl<T: ?Sized> Copy for NonNull<T> { }\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<NonNull<U>> for NonNull<T> where T: Unsize<U> { }\n \n+#[unstable(feature = \"coerce_sized\", issue = \"0\")]\n+impl<T: ?Sized, U: ?Sized> CoerceSized<NonNull<T>> for NonNull<U> where T: Unsize<U> { }\n+\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> fmt::Debug for NonNull<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}]}