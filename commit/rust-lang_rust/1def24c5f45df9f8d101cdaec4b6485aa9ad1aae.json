{"sha": "1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZWYyNGM1ZjQ1ZGY5ZjhkMTAxY2RhZWM0YjY0ODVhYTlhZDFhYWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-11T17:40:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-11T17:40:51Z"}, "message": "rustc_target: Normalize vendor from \"\" to \"unknown\" for all targets\n\nMajority of targets use \"unknown\" vendor and changing it from \"unknown\" to omitted doesn't make sense.\nFrom the LLVM docs (https://clang.llvm.org/docs/CrossCompilation.html#target-triple):\n\n>Most of the time it can be omitted (and Unknown) will be assumed, which sets the defaults for the specified architecture.\n>When a parameter is not important, it can be omitted, or you can choose unknown and the defaults will be used. If you choose a parameter that Clang doesn\u2019t know, like blerg, it\u2019ll ignore and assume unknown", "tree": {"sha": "07c137fcadc2e12b2274f3497a7c03ade018a43d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07c137fcadc2e12b2274f3497a7c03ade018a43d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "html_url": "https://github.com/rust-lang/rust/commit/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "443b45fa9fd87cf0939e80a64bead413530e375c", "url": "https://api.github.com/repos/rust-lang/rust/commits/443b45fa9fd87cf0939e80a64bead413530e375c", "html_url": "https://github.com/rust-lang/rust/commit/443b45fa9fd87cf0939e80a64bead413530e375c"}], "stats": {"total": 22, "additions": 3, "deletions": 19}, "files": [{"sha": "c9f622820dea76e69df3de38faf1c9cd167d46fb", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -10,7 +10,6 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,+neon,+fp-armv8\".to_string(),"}, {"sha": "0811871c993aa2cc4810647f019cee536cbfbe8c", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -10,7 +10,6 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,-neon,-fp-armv8\".to_string(),"}, {"sha": "c6586b79b87f832dd920f0510d606604cad076bc", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -12,7 +12,6 @@ pub fn target() -> Target {\n \n         options: TargetOptions {\n             endian: \"big\".to_string(),\n-            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "e3d4397f6123f226a98530e73c49a3f6af064dbe", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -12,7 +12,6 @@ pub fn target() -> Target {\n \n         options: TargetOptions {\n             endian: \"big\".to_string(),\n-            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "74deab0191652355a2ea14d00a23ec56e7d29275", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -10,9 +10,6 @@\n // bare-metal binaries (the `gcc` linker has the advantage that it knows where C\n // libraries and crt*.o are but it's not much of an advantage here); LLD is also\n // faster\n-// - `os` set to `none`. rationale: matches `thumb` targets\n-// - `env` and `vendor` are set to an empty string. rationale: matches `thumb`\n-// targets\n // - `panic_strategy` set to `abort`. rationale: matches `thumb` targets\n // - `relocation-model` set to `static`; also no PIE, no relro and no dynamic\n // linking. rationale: matches `thumb` targets\n@@ -21,7 +18,6 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".to_string(),"}, {"sha": "c5c720f5fbde43f2d05e8901a4aace8ce36b7cd5", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -9,7 +9,6 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".to_string(),"}, {"sha": "3f49bd87869374a453a8b7eae7a16740b6f0b8f2", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -11,7 +11,6 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "9b2e8a8058fe7741f4222487e5f29652ef97caff", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -11,7 +11,6 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "5c39773cbe381743bebe5668a8829807bfab808f", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -21,7 +21,6 @@ pub fn opts() -> TargetOptions {\n \n     TargetOptions {\n         os: \"fuchsia\".to_string(),\n-        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         lld_flavor: LldFlavor::Ld,"}, {"sha": "0f9d3c3de1543b25f67dd421d28d888835769f67", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_none.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -14,7 +14,6 @@ pub fn target() -> Target {\n         arch: \"mips\".to_string(),\n \n         options: TargetOptions {\n-            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float,+noabicalls\".to_string(),"}, {"sha": "129cab6fa44934950417e6a128bb001f01d336f8", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -712,14 +712,14 @@ pub struct TargetOptions {\n     pub endian: String,\n     /// Width of c_int type. Defaults to \"32\".\n     pub c_int_width: String,\n-    /// OS name to use for conditional compilation. Defaults to \"none\".\n+    /// OS name to use for conditional compilation (`target_os`). Defaults to \"none\".\n     /// \"none\" implies a bare metal target without `std` library.\n     /// A couple of targets having `std` also use \"unknown\" as an `os` value,\n     /// but they are exceptions.\n     pub os: String,\n-    /// Environment name to use for conditional compilation. Defaults to \"\".\n+    /// Environment name to use for conditional compilation (`target_env`). Defaults to \"\".\n     pub env: String,\n-    /// Vendor name to use for conditional compilation. Defaults to \"unknown\".\n+    /// Vendor name to use for conditional compilation (`target_vendor`). Defaults to \"unknown\".\n     pub vendor: String,\n     /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n     /// on the command line. Defaults to `LinkerFlavor::Gcc`."}, {"sha": "cc2578aa578e8d54796b5c72d7ec98b30d123708", "filename": "compiler/rustc_target/src/spec/msp430_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -9,7 +9,6 @@ pub fn target() -> Target {\n \n         options: TargetOptions {\n             c_int_width: \"16\".to_string(),\n-            vendor: String::new(),\n             executables: true,\n \n             // The LLVM backend currently can't generate object files. To"}, {"sha": "ec24807fec4ea407e6ef5aed01f7d6fd1d8046cf", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -32,7 +32,6 @@ use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOpti\n pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults\n     TargetOptions {\n-        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         executables: true,\n         // In most cases, LLD is good enough"}, {"sha": "3f44acdc36b2da1adcc9191868c32bf30a4da11e", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1def24c5f45df9f8d101cdaec4b6485aa9ad1aae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=1def24c5f45df9f8d101cdaec4b6485aa9ad1aae", "patch": "@@ -79,7 +79,6 @@ pub fn target() -> Target {\n     let mut options = wasm32_base::options();\n \n     options.os = \"wasi\".to_string();\n-    options.vendor = String::new();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n     options\n         .pre_link_args"}]}