{"sha": "6953f17aec75c83985db6861ddf4d3cfaa10f042", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NTNmMTdhZWM3NWM4Mzk4NWRiNjg2MWRkZjRkM2NmYWExMGYwNDI=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-08-03T19:11:04Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-08-03T19:11:04Z"}, "message": "Test dropping union fields more", "tree": {"sha": "109ff90db853983b112ca05f8433532bdb966955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/109ff90db853983b112ca05f8433532bdb966955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6953f17aec75c83985db6861ddf4d3cfaa10f042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6953f17aec75c83985db6861ddf4d3cfaa10f042", "html_url": "https://github.com/rust-lang/rust/commit/6953f17aec75c83985db6861ddf4d3cfaa10f042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6953f17aec75c83985db6861ddf4d3cfaa10f042/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "html_url": "https://github.com/rust-lang/rust/commit/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271"}], "stats": {"total": 173, "additions": 151, "deletions": 22}, "files": [{"sha": "c3d7d41ca35fbb8b9942bb906dbdcf8026598117", "filename": "src/test/ui/union/union-drop.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6953f17aec75c83985db6861ddf4d3cfaa10f042/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6953f17aec75c83985db6861ddf4d3cfaa10f042/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop.rs?ref=6953f17aec75c83985db6861ddf4d3cfaa10f042", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "9766ae4e435f2fb8822905e00900c92b5c9a7d4a", "filename": "src/test/ui/union/union-drop.thirunsafeck.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/src%2Ftest%2Fui%2Funion%2Funion-drop.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/src%2Ftest%2Fui%2Funion%2Funion-drop.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop.thirunsafeck.stderr?ref=d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "patch": "@@ -1,22 +0,0 @@\n-warning: unnecessary `unsafe` block\n-  --> $DIR/union-drop.rs:27:9\n-   |\n-LL |         unsafe { CHECK += 1; }\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: `#[warn(unused_unsafe)]` on by default\n-\n-warning: unnecessary `unsafe` block\n-  --> $DIR/union-drop.rs:33:9\n-   |\n-LL |         unsafe { CHECK += 1; }\n-   |         ^^^^^^ unnecessary `unsafe` block\n-\n-warning: unnecessary `unsafe` block\n-  --> $DIR/union-drop.rs:40:5\n-   |\n-LL |     unsafe {\n-   |     ^^^^^^ unnecessary `unsafe` block\n-\n-warning: 3 warnings emitted\n-"}, {"sha": "cd338ac9e3a270dbb352a5644ef6aaf0cc6c9683", "filename": "src/test/ui/unsafe/union-assignop.mirunsafeck.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6953f17aec75c83985db6861ddf4d3cfaa10f042/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6953f17aec75c83985db6861ddf4d3cfaa10f042/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.mirunsafeck.stderr?ref=6953f17aec75c83985db6861ddf4d3cfaa10f042", "patch": "@@ -0,0 +1,59 @@\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:20:5\n+   |\n+LL |     foo.a += 5;\n+   |     ^^^^^^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:21:5\n+   |\n+LL |     foo.b += Dropping;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:22:5\n+   |\n+LL |     foo.b = Dropping;\n+   |     ^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:23:5\n+   |\n+LL |     foo.a;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:25:5\n+   |\n+LL |     foo.b;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:27:13\n+   |\n+LL |     foo.b = foo.b;\n+   |             ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:27:5\n+   |\n+LL |     foo.b = foo.b;\n+   |     ^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "c4be20aa567b748f54736e2723db61abd660eee7", "filename": "src/test/ui/unsafe/union-assignop.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6953f17aec75c83985db6861ddf4d3cfaa10f042/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6953f17aec75c83985db6861ddf4d3cfaa10f042/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.rs?ref=6953f17aec75c83985db6861ddf4d3cfaa10f042", "patch": "@@ -0,0 +1,30 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n+#![feature(untagged_unions)]\n+\n+use std::ops::AddAssign;\n+\n+struct Dropping;\n+impl AddAssign for Dropping {\n+    fn add_assign(&mut self, _: Self) {}\n+}\n+\n+union Foo {\n+    a: u8, // non-dropping\n+    b: Dropping, // treated as dropping\n+}\n+\n+fn main() {\n+    let mut foo = Foo { a: 42 };\n+    foo.a += 5; //~ ERROR access to union field is unsafe\n+    foo.b += Dropping; //~ ERROR access to union field is unsafe\n+    foo.b = Dropping; //~ ERROR assignment to union field that might need dropping is unsafe\n+    foo.a; //~ ERROR access to union field is unsafe\n+    let foo = Foo { a: 42 };\n+    foo.b; //~ ERROR access to union field is unsafe\n+    let mut foo = Foo { a: 42 };\n+    foo.b = foo.b;\n+    //~^ ERROR access to union field is unsafe\n+    //~| ERROR assignment to union field that might need dropping\n+}"}, {"sha": "71de421a2553e7dd7e64723e3866c8bc2d4f8329", "filename": "src/test/ui/unsafe/union-assignop.thirunsafeck.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6953f17aec75c83985db6861ddf4d3cfaa10f042/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6953f17aec75c83985db6861ddf4d3cfaa10f042/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.thirunsafeck.stderr?ref=6953f17aec75c83985db6861ddf4d3cfaa10f042", "patch": "@@ -0,0 +1,59 @@\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:20:5\n+   |\n+LL |     foo.a += 5;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:21:5\n+   |\n+LL |     foo.b += Dropping;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:22:5\n+   |\n+LL |     foo.b = Dropping;\n+   |     ^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:23:5\n+   |\n+LL |     foo.a;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:25:5\n+   |\n+LL |     foo.b;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:27:5\n+   |\n+LL |     foo.b = foo.b;\n+   |     ^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:27:13\n+   |\n+LL |     foo.b = foo.b;\n+   |             ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}]}