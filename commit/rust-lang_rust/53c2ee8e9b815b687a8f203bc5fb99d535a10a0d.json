{"sha": "53c2ee8e9b815b687a8f203bc5fb99d535a10a0d", "node_id": "C_kwDOAAsO6NoAKDUzYzJlZThlOWI4MTViNjg3YThmMjAzYmM1ZmI5OWQ1MzVhMTBhMGQ", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-11-16T20:07:51Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-11-19T15:58:02Z"}, "message": "fix assembly test on apple", "tree": {"sha": "5d753f933929e026fd14dfedf66c38ce1c37b9ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d753f933929e026fd14dfedf66c38ce1c37b9ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53c2ee8e9b815b687a8f203bc5fb99d535a10a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53c2ee8e9b815b687a8f203bc5fb99d535a10a0d", "html_url": "https://github.com/rust-lang/rust/commit/53c2ee8e9b815b687a8f203bc5fb99d535a10a0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53c2ee8e9b815b687a8f203bc5fb99d535a10a0d/comments", "author": null, "committer": null, "parents": [{"sha": "e90d15b247bdaf12a6d51f492bf94d2e0064d177", "url": "https://api.github.com/repos/rust-lang/rust/commits/e90d15b247bdaf12a6d51f492bf94d2e0064d177", "html_url": "https://github.com/rust-lang/rust/commit/e90d15b247bdaf12a6d51f492bf94d2e0064d177"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "04b5de83423709c09a5980b1ec645712715956bb", "filename": "src/test/assembly/is_aligned.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53c2ee8e9b815b687a8f203bc5fb99d535a10a0d/src%2Ftest%2Fassembly%2Fis_aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53c2ee8e9b815b687a8f203bc5fb99d535a10a0d/src%2Ftest%2Fassembly%2Fis_aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fis_aligned.rs?ref=53c2ee8e9b815b687a8f203bc5fb99d535a10a0d", "patch": "@@ -13,7 +13,7 @@\n // CHECK: decq\n // CHECK-NEXT: testq\n // CHECK-NEXT: sete\n-// CHECK-NEXT: retq\n+// CHECK: retq\n #[no_mangle]\n pub unsafe fn is_aligned_to_unchecked(ptr: *const u8, align: usize) -> bool {\n     unsafe {\n@@ -24,7 +24,7 @@ pub unsafe fn is_aligned_to_unchecked(ptr: *const u8, align: usize) -> bool {\n \n // CHECK-LABEL: is_aligned_1\n // CHECK: movb $1\n-// CHECK-NEXT: retq\n+// CHECK: retq\n #[no_mangle]\n pub fn is_aligned_1(ptr: *const u8) -> bool {\n     ptr.is_aligned()\n@@ -33,7 +33,7 @@ pub fn is_aligned_1(ptr: *const u8) -> bool {\n // CHECK-LABEL: is_aligned_2\n // CHECK: testb $1\n // CHECK-NEXT: sete\n-// CHECK-NEXT: retq\n+// CHECK: retq\n #[no_mangle]\n pub fn is_aligned_2(ptr: *const u16) -> bool {\n     ptr.is_aligned()\n@@ -42,7 +42,7 @@ pub fn is_aligned_2(ptr: *const u16) -> bool {\n // CHECK-LABEL: is_aligned_4\n // CHECK: testb $3\n // CHECK-NEXT: sete\n-// CHECK-NEXT: retq\n+// CHECK: retq\n #[no_mangle]\n pub fn is_aligned_4(ptr: *const u32) -> bool {\n     ptr.is_aligned()\n@@ -51,7 +51,7 @@ pub fn is_aligned_4(ptr: *const u32) -> bool {\n // CHECK-LABEL: is_aligned_8\n // CHECK: testb $7\n // CHECK-NEXT: sete\n-// CHECK-NEXT: retq\n+// CHECK: retq\n #[no_mangle]\n pub fn is_aligned_8(ptr: *const u64) -> bool {\n     ptr.is_aligned()"}]}