{"sha": "5326361fc00544f7ba77b250e9646cf05cd07c43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMjYzNjFmYzAwNTQ0ZjdiYTc3YjI1MGU5NjQ2Y2YwNWNkMDdjNDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-01T09:24:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-01T09:39:11Z"}, "message": "Remove trivia tokens", "tree": {"sha": "bb731e692def6ea1bb25768ebb58484a5fa90d2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb731e692def6ea1bb25768ebb58484a5fa90d2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5326361fc00544f7ba77b250e9646cf05cd07c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5326361fc00544f7ba77b250e9646cf05cd07c43", "html_url": "https://github.com/rust-lang/rust/commit/5326361fc00544f7ba77b250e9646cf05cd07c43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5326361fc00544f7ba77b250e9646cf05cd07c43/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f24c2ec9d43d3c616652a4040b8c6a1672b18d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f24c2ec9d43d3c616652a4040b8c6a1672b18d8", "html_url": "https://github.com/rust-lang/rust/commit/8f24c2ec9d43d3c616652a4040b8c6a1672b18d8"}], "stats": {"total": 33, "additions": 5, "deletions": 28}, "files": [{"sha": "c6cc890b47f79bebc9e20657bbd98cd89dd2312f", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5326361fc00544f7ba77b250e9646cf05cd07c43/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5326361fc00544f7ba77b250e9646cf05cd07c43/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=5326361fc00544f7ba77b250e9646cf05cd07c43", "patch": "@@ -251,17 +251,6 @@ pub enum TokenKind {\n     /// similarly to symbols in string literal tokens.\n     DocComment(CommentKind, ast::AttrStyle, Symbol),\n \n-    // Junk. These carry no data because we don't really care about the data\n-    // they *would* carry, and don't really want to allocate a new ident for\n-    // them. Instead, users could extract that from the associated span.\n-    /// Whitespace.\n-    Whitespace,\n-    /// A comment.\n-    Comment,\n-    Shebang(Symbol),\n-    /// A completely invalid token which should be skipped.\n-    Unknown(Symbol),\n-\n     Eof,\n }\n \n@@ -331,7 +320,7 @@ impl Token {\n \n     /// Some token that will be thrown away later.\n     pub fn dummy() -> Self {\n-        Token::new(TokenKind::Whitespace, DUMMY_SP)\n+        Token::new(TokenKind::Question, DUMMY_SP)\n     }\n \n     /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.\n@@ -360,7 +349,7 @@ impl Token {\n     pub fn is_op(&self) -> bool {\n         match self.kind {\n             OpenDelim(..) | CloseDelim(..) | Literal(..) | DocComment(..) | Ident(..)\n-            | Lifetime(..) | Interpolated(..) | Whitespace | Comment | Shebang(..) | Eof => false,\n+            | Lifetime(..) | Interpolated(..) | Eof => false,\n             _ => true,\n         }\n     }\n@@ -676,8 +665,7 @@ impl Token {\n             Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot\n             | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar\n             | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)\n-            | Lifetime(..) | Interpolated(..) | DocComment(..) | Whitespace | Comment\n-            | Shebang(..) | Unknown(..) | Eof => return None,\n+            | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,\n         };\n \n         Some(Token::new(kind, self.span.to(joint.span)))"}, {"sha": "aa790878c52187db931af4fb234af4a2a8bf5792", "filename": "compiler/rustc_ast_pretty/src/pprust.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5326361fc00544f7ba77b250e9646cf05cd07c43/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5326361fc00544f7ba77b250e9646cf05cd07c43/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs?ref=5326361fc00544f7ba77b250e9646cf05cd07c43", "patch": "@@ -289,10 +289,6 @@ fn token_kind_to_string_ext(tok: &TokenKind, convert_dollar_crate: Option<Span>)\n             doc_comment_to_string(comment_kind, attr_style, data)\n         }\n         token::Eof => \"<eof>\".to_string(),\n-        token::Whitespace => \" \".to_string(),\n-        token::Comment => \"/* */\".to_string(),\n-        token::Shebang(s) => format!(\"/* shebang: {}*/\", s),\n-        token::Unknown(s) => s.to_string(),\n \n         token::Interpolated(ref nt) => nonterminal_to_string(nt),\n     }"}, {"sha": "39c82f97e0a39ce3503f084269ba7fba98285941", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5326361fc00544f7ba77b250e9646cf05cd07c43/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5326361fc00544f7ba77b250e9646cf05cd07c43/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=5326361fc00544f7ba77b250e9646cf05cd07c43", "patch": "@@ -189,7 +189,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n             }\n \n             OpenDelim(..) | CloseDelim(..) => unreachable!(),\n-            Whitespace | Comment | Shebang(..) | Unknown(..) | Eof => unreachable!(),\n+            Eof => unreachable!(),\n         }\n     }\n }"}, {"sha": "8dc0db01ecb510bb1ee355db412f3e2ecaaa484e", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5326361fc00544f7ba77b250e9646cf05cd07c43/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5326361fc00544f7ba77b250e9646cf05cd07c43/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=5326361fc00544f7ba77b250e9646cf05cd07c43", "patch": "@@ -303,7 +303,7 @@ const UNICODE_ARRAY: &[(char, &str, char)] = &[\n // However, we should first remove compound tokens like `<<` from `rustc_lexer`, and then add\n // fancier error recovery to it, as there will be less overall work to do this way.\n const ASCII_ARRAY: &[(char, &str, Option<token::TokenKind>)] = &[\n-    (' ', \"Space\", Some(token::Whitespace)),\n+    (' ', \"Space\", None),\n     ('_', \"Underscore\", Some(token::Ident(kw::Underscore, false))),\n     ('-', \"Minus/Hyphen\", Some(token::BinOp(token::Minus))),\n     (',', \"Comma\", Some(token::Comma)),"}, {"sha": "462279b0a9e039b3f2892f5a37329df865214cb5", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5326361fc00544f7ba77b250e9646cf05cd07c43/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5326361fc00544f7ba77b250e9646cf05cd07c43/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=5326361fc00544f7ba77b250e9646cf05cd07c43", "patch": "@@ -348,9 +348,6 @@ pub fn tokenstream_probably_equal_for_proc_macro(\n                 | token::CloseDelim(DelimToken::NoDelim)\n                 // The pretty printer collapses many semicolons into one.\n                 | token::Semi\n-                // The pretty printer collapses whitespace arbitrarily and can\n-                // introduce whitespace from `NoDelim`.\n-                | token::Whitespace\n                 // The pretty printer can turn `$crate` into `::crate_name`\n                 | token::ModSep = token.kind {\n                 return false;\n@@ -506,8 +503,6 @@ fn token_probably_equal_for_proc_macro(first: &Token, other: &Token) -> bool {\n         | (&Pound, &Pound)\n         | (&Dollar, &Dollar)\n         | (&Question, &Question)\n-        | (&Whitespace, &Whitespace)\n-        | (&Comment, &Comment)\n         | (&Eof, &Eof) => true,\n \n         (&BinOp(a), &BinOp(b)) | (&BinOpEq(a), &BinOpEq(b)) => a == b,\n@@ -516,8 +511,6 @@ fn token_probably_equal_for_proc_macro(first: &Token, other: &Token) -> bool {\n \n         (&DocComment(a1, a2, a3), &DocComment(b1, b2, b3)) => a1 == b1 && a2 == b2 && a3 == b3,\n \n-        (&Shebang(a), &Shebang(b)) => a == b,\n-\n         (&Literal(a), &Literal(b)) => a == b,\n \n         (&Lifetime(a), &Lifetime(b)) => a == b,"}]}