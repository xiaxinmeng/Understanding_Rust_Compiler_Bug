{"sha": "5a33f531cd87988e95a8e811d71b653a7ff9ffca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMzNmNTMxY2Q4Nzk4OGU5NWE4ZTgxMWQ3MWI2NTNhN2ZmOWZmY2E=", "commit": {"author": {"name": "Austin Bonander", "email": "austin@launchbadge.com", "date": "2021-01-05T21:54:28Z"}, "committer": {"name": "Austin Bonander", "email": "austin@launchbadge.com", "date": "2021-03-01T16:32:15Z"}, "message": "check that first arg to `panic!()` in const is `&str`", "tree": {"sha": "bce9a1aa9f8927c8ef4b716018277c8300191842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce9a1aa9f8927c8ef4b716018277c8300191842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a33f531cd87988e95a8e811d71b653a7ff9ffca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a33f531cd87988e95a8e811d71b653a7ff9ffca", "html_url": "https://github.com/rust-lang/rust/commit/5a33f531cd87988e95a8e811d71b653a7ff9ffca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a33f531cd87988e95a8e811d71b653a7ff9ffca/comments", "author": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "committer": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da305a2b00530aa34dea4e48389204c26fa35dbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/da305a2b00530aa34dea4e48389204c26fa35dbb", "html_url": "https://github.com/rust-lang/rust/commit/da305a2b00530aa34dea4e48389204c26fa35dbb"}], "stats": {"total": 120, "additions": 114, "deletions": 6}, "files": [{"sha": "134b6d6fe075b312de9c6ffbf12b407c64d6fb85", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a33f531cd87988e95a8e811d71b653a7ff9ffca/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a33f531cd87988e95a8e811d71b653a7ff9ffca/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=5a33f531cd87988e95a8e811d71b653a7ff9ffca", "patch": "@@ -360,6 +360,18 @@ impl NonConstOp for Panic {\n     }\n }\n \n+/// A call to a `panic()` lang item where the first argument is _not_ a `&str`.\n+#[derive(Debug)]\n+pub struct PanicNonStr;\n+impl NonConstOp for PanicNonStr {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        ccx.tcx.sess.struct_span_err(\n+            span,\n+            \"argument to `panic!()` in a const context must have type `&str`\",\n+        )\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct RawPtrComparison;\n impl NonConstOp for RawPtrComparison {"}, {"sha": "fea5dd3554fb082aa9e61d89a1f5ba25da94c6fd", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a33f531cd87988e95a8e811d71b653a7ff9ffca/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a33f531cd87988e95a8e811d71b653a7ff9ffca/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=5a33f531cd87988e95a8e811d71b653a7ff9ffca", "patch": "@@ -796,7 +796,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n         self.super_terminator(terminator, location);\n \n         match &terminator.kind {\n-            TerminatorKind::Call { func, .. } => {\n+            TerminatorKind::Call { func, args, .. } => {\n                 let ConstCx { tcx, body, param_env, .. } = *self.ccx;\n                 let caller = self.def_id().to_def_id();\n \n@@ -857,9 +857,17 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 }\n \n                 // At this point, we are calling a function, `callee`, whose `DefId` is known...\n-\n                 if is_lang_panic_fn(tcx, callee) {\n                     self.check_op(ops::Panic);\n+\n+                    // const-eval of the `begin_panic` fn assumes the argument is `&str`\n+                    if Some(callee) == tcx.lang_items().begin_panic_fn() {\n+                        match args[0].ty(&self.ccx.body.local_decls, tcx).kind() {\n+                            ty::Ref(_, ty, _) if ty.is_str() => (),\n+                            _ => self.check_op(ops::PanicNonStr),\n+                        }\n+                    }\n+\n                     return;\n                 }\n "}, {"sha": "718a19067a6ac005fde6755a69d8b542eae08d26", "filename": "src/test/ui/consts/issue-66693-panic-in-array-len.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a33f531cd87988e95a8e811d71b653a7ff9ffca/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a33f531cd87988e95a8e811d71b653a7ff9ffca/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.rs?ref=5a33f531cd87988e95a8e811d71b653a7ff9ffca", "patch": "@@ -0,0 +1,17 @@\n+// This is a separate test from `issue-66693.rs` because array lengths are evaluated\n+// in a separate stage before `const`s and `statics` and so the error below is hit and\n+// the compiler exits before generating errors for the others.\n+\n+#![feature(const_panic)]\n+\n+fn main() {\n+    let _ = [0i32; panic!(2f32)];\n+    //~^ ERROR: argument to `panic!()` in a const context must have type `&str`\n+\n+    // ensure that conforming panics are handled correctly\n+    let _ = [false; panic!()];\n+    //~^ ERROR: evaluation of constant value failed\n+\n+    // typechecking halts before getting to this one\n+    let _ = ['a', panic!(\"panic in array len\")];\n+}"}, {"sha": "e0ca9dfde0bf91dea3abe9ce5f68e2b90f2ec244", "filename": "src/test/ui/consts/issue-66693-panic-in-array-len.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a33f531cd87988e95a8e811d71b653a7ff9ffca/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a33f531cd87988e95a8e811d71b653a7ff9ffca/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr?ref=5a33f531cd87988e95a8e811d71b653a7ff9ffca", "patch": "@@ -0,0 +1,19 @@\n+error: argument to `panic!()` in a const context must have type `&str`\n+  --> $DIR/issue-66693-panic-in-array-len.rs:8:20\n+   |\n+LL |     let _ = [0i32; panic!(2f32)];\n+   |                    ^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-66693-panic-in-array-len.rs:12:21\n+   |\n+LL |     let _ = [false; panic!()];\n+   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-66693-panic-in-array-len.rs:12:21\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "77fe4417d5b10b33932135ba1b03b469985c6490", "filename": "src/test/ui/consts/issue-66693.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5a33f531cd87988e95a8e811d71b653a7ff9ffca/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a33f531cd87988e95a8e811d71b653a7ff9ffca/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs?ref=5a33f531cd87988e95a8e811d71b653a7ff9ffca", "patch": "@@ -0,0 +1,24 @@\n+// Tests that the compiler does not ICE when const-evaluating a `panic!()` invocation with a\n+// non-`&str` argument.\n+\n+#![feature(const_panic)]\n+\n+const _: () = panic!(1);\n+//~^ ERROR: argument to `panic!()` in a const context must have type `&str`\n+\n+static _FOO: () = panic!(true);\n+//~^ ERROR: argument to `panic!()` in a const context must have type `&str`\n+\n+const fn _foo() {\n+    panic!(&1); //~ ERROR: argument to `panic!()` in a const context must have type `&str`\n+}\n+\n+// ensure that conforming panics don't cause an error\n+const _: () = panic!();\n+static _BAR: () = panic!(\"panic in static\");\n+\n+const fn _bar() {\n+    panic!(\"panic in const fn\");\n+}\n+\n+fn main() {}"}, {"sha": "6bbde057ead7f43adc04728d2e63515837f228dc", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5a33f531cd87988e95a8e811d71b653a7ff9ffca/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a33f531cd87988e95a8e811d71b653a7ff9ffca/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=5a33f531cd87988e95a8e811d71b653a7ff9ffca", "patch": "@@ -0,0 +1,26 @@\n+error: argument to `panic!()` in a const context must have type `&str`\n+  --> $DIR/issue-66693.rs:13:5\n+   |\n+LL |     panic!(&1);\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: argument to `panic!()` in a const context must have type `&str`\n+  --> $DIR/issue-66693.rs:6:15\n+   |\n+LL | const _: () = panic!(1);\n+   |               ^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: argument to `panic!()` in a const context must have type `&str`\n+  --> $DIR/issue-66693.rs:9:19\n+   |\n+LL | static _FOO: () = panic!(true);\n+   |                   ^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "d511f75df812976b00efb2663aa4692e7bef8dad", "filename": "src/test/ui/consts/issue-76064.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a33f531cd87988e95a8e811d71b653a7ff9ffca/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a33f531cd87988e95a8e811d71b653a7ff9ffca/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs?ref=5a33f531cd87988e95a8e811d71b653a7ff9ffca", "patch": "@@ -1,3 +1,5 @@\n-struct Bug([u8; panic!(1)]); //~ ERROR panicking in constants is unstable\n+// Note: non-`&str` panic arguments gained a separate error in PR #80734\n+// which is why this doesn't match the issue\n+struct Bug([u8; panic!(\"panic\")]); //~ ERROR panicking in constants is unstable\n \n fn main() {}"}, {"sha": "9bda1b7570d56c122dde437fc9ccd19eccedf08d", "filename": "src/test/ui/consts/issue-76064.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a33f531cd87988e95a8e811d71b653a7ff9ffca/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a33f531cd87988e95a8e811d71b653a7ff9ffca/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr?ref=5a33f531cd87988e95a8e811d71b653a7ff9ffca", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: panicking in constants is unstable\n-  --> $DIR/issue-76064.rs:1:17\n+  --> $DIR/issue-76064.rs:3:17\n    |\n-LL | struct Bug([u8; panic!(1)]);\n-   |                 ^^^^^^^^^\n+LL | struct Bug([u8; panic!(\"panic\")]);\n+   |                 ^^^^^^^^^^^^^^^\n    |\n    = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable"}]}