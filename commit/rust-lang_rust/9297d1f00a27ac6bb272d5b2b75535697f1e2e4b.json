{"sha": "9297d1f00a27ac6bb272d5b2b75535697f1e2e4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyOTdkMWYwMGEyN2FjNmJiMjcyZDViMmI3NTUzNTY5N2YxZTJlNGI=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-25T00:49:03Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-25T01:20:16Z"}, "message": "Minor doc updates.", "tree": {"sha": "bb9e4dc9d5d600b2ed7b55216bca78a0e12afc7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb9e4dc9d5d600b2ed7b55216bca78a0e12afc7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9297d1f00a27ac6bb272d5b2b75535697f1e2e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9297d1f00a27ac6bb272d5b2b75535697f1e2e4b", "html_url": "https://github.com/rust-lang/rust/commit/9297d1f00a27ac6bb272d5b2b75535697f1e2e4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9297d1f00a27ac6bb272d5b2b75535697f1e2e4b/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7669032dd377d6207c4d78e52c9e858e2f2d4180", "url": "https://api.github.com/repos/rust-lang/rust/commits/7669032dd377d6207c4d78e52c9e858e2f2d4180", "html_url": "https://github.com/rust-lang/rust/commit/7669032dd377d6207c4d78e52c9e858e2f2d4180"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "4a8378a6fec5e8622b97d3512dd3cbf1cfcd7a2e", "filename": "doc/rust.md", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9297d1f00a27ac6bb272d5b2b75535697f1e2e4b/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/9297d1f00a27ac6bb272d5b2b75535697f1e2e4b/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=9297d1f00a27ac6bb272d5b2b75535697f1e2e4b", "patch": "@@ -522,7 +522,8 @@ matches, in a structure that mimics the structure of the repetition\n encountered on a successful match. The job of the transcriber is to sort that\n structure out.\n \n-The rules for transcription of these repetitions are called \"Macro By Example\". Essentially, one \"layer\" of repetition is discharged at a time, and all of\n+The rules for transcription of these repetitions are called \"Macro By Example\".\n+Essentially, one \"layer\" of repetition is discharged at a time, and all of\n them must be discharged by the time a name is transcribed. Therefore,\n `( $( $i:ident ),* ) => ( $i )` is an invalid macro, but\n `( $( $i:ident ),* ) => ( $( $i:ident ),*  )` is acceptable (if trivial).\n@@ -537,6 +538,20 @@ transcribes to `( (a,d), (b,e), (c,f) )`.\n \n Nested repetitions are allowed.\n \n+### Parsing limitations\n+\n+The parser used by the macro system is reasonably powerful, but the parsing of\n+Rust syntax is restricted in two ways:\n+\n+1. The parser will always parse as much as possible. If it attempts to match\n+`$i:expr [ , ]` against `8 [ , ]`, it will attempt to parse `i` as an array\n+index operation and fail. Adding a separator can solve this problem.\n+2. The parser must have eliminated all ambiguity by the time it reaches a\n+`$` _name_ `:` _designator_. This most often affects them when they occur in\n+the beginning of, or immediately after, a `$(...)*`; requiring a distinctive\n+token in front can solve the problem.\n+\n+\n ## Syntax extensions useful for the macro author\n \n * `log_syntax!` : print out the arguments at compile time"}, {"sha": "2ecc794b760cd50e9b4aa1aa669645e726f5e5f8", "filename": "doc/tutorial.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9297d1f00a27ac6bb272d5b2b75535697f1e2e4b/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/9297d1f00a27ac6bb272d5b2b75535697f1e2e4b/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=9297d1f00a27ac6bb272d5b2b75535697f1e2e4b", "patch": "@@ -2481,8 +2481,9 @@ Macros, as currently implemented, are not for the faint of heart. Even\n ordinary syntax errors can be more difficult to debug when they occur inside\n a macro, and errors caused by parse problems in generated code can be very\n tricky. Invoking the `log_syntax!` macro can help elucidate intermediate\n-states, and using `--pretty expanded` as an argument to the compiler will\n-show the result of expansion.\n+states, using `trace_macros!(true)` will automatically print those\n+intermediate states out, and using `--pretty expanded` as an argument to the\n+compiler will show the result of expansion.\n \n # Traits\n "}]}