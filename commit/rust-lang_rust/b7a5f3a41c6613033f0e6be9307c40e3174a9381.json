{"sha": "b7a5f3a41c6613033f0e6be9307c40e3174a9381", "node_id": "C_kwDOAAsO6NoAKGI3YTVmM2E0MWM2NjEzMDMzZjBlNmJlOTMwN2M0MGUzMTc0YTkzODE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-07T05:40:55Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-07T05:41:08Z"}, "message": "Instantiate instead of erasing binder when probing param methods", "tree": {"sha": "acd5a0df2cde62e70221aa90d0200ff22b891124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acd5a0df2cde62e70221aa90d0200ff22b891124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7a5f3a41c6613033f0e6be9307c40e3174a9381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a5f3a41c6613033f0e6be9307c40e3174a9381", "html_url": "https://github.com/rust-lang/rust/commit/b7a5f3a41c6613033f0e6be9307c40e3174a9381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7a5f3a41c6613033f0e6be9307c40e3174a9381/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f63ccaf25f74151a5d8ce057904cd944074b01d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f63ccaf25f74151a5d8ce057904cd944074b01d2", "html_url": "https://github.com/rust-lang/rust/commit/f63ccaf25f74151a5d8ce057904cd944074b01d2"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "2c8c9ed69d31c40988b1b920b003203ee35b9b0c", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b7a5f3a41c6613033f0e6be9307c40e3174a9381/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a5f3a41c6613033f0e6be9307c40e3174a9381/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=b7a5f3a41c6613033f0e6be9307c40e3174a9381", "patch": "@@ -792,6 +792,14 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         // a `&self` method will wind up with an argument type like `&dyn Trait`.\n         let trait_ref = principal.with_self_ty(self.tcx, self_ty);\n         self.elaborate_bounds(iter::once(trait_ref), |this, new_trait_ref, item| {\n+            if new_trait_ref.has_non_region_late_bound() {\n+                this.tcx.sess.delay_span_bug(\n+                    this.span,\n+                    \"tried to select method from HRTB with non-lifetime bound vars\",\n+                );\n+                return;\n+            }\n+\n             let new_trait_ref = this.erase_late_bound_regions(new_trait_ref);\n \n             let (xform_self_ty, xform_ret_ty) =\n@@ -842,18 +850,15 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         });\n \n         self.elaborate_bounds(bounds, |this, poly_trait_ref, item| {\n-            let trait_ref = this.erase_late_bound_regions(poly_trait_ref);\n+            let trait_ref = this.instantiate_binder_with_fresh_vars(\n+                this.span,\n+                infer::LateBoundRegionConversionTime::FnCall,\n+                poly_trait_ref,\n+            );\n \n             let (xform_self_ty, xform_ret_ty) =\n                 this.xform_self_ty(item, trait_ref.self_ty(), trait_ref.substs);\n \n-            // Because this trait derives from a where-clause, it\n-            // should not contain any inference variables or other\n-            // artifacts. This means it is safe to put into the\n-            // `WhereClauseCandidate` and (eventually) into the\n-            // `WhereClausePick`.\n-            assert!(!trait_ref.substs.needs_infer());\n-\n             this.push_candidate(\n                 Candidate {\n                     xform_self_ty,\n@@ -963,7 +968,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                             bound_trait_ref.def_id(),\n                         ));\n                     } else {\n-                        let new_trait_ref = self.erase_late_bound_regions(bound_trait_ref);\n+                        let new_trait_ref = self.instantiate_binder_with_fresh_vars(\n+                            self.span,\n+                            infer::LateBoundRegionConversionTime::FnCall,\n+                            bound_trait_ref,\n+                        );\n \n                         let (xform_self_ty, xform_ret_ty) =\n                             self.xform_self_ty(item, new_trait_ref.self_ty(), new_trait_ref.substs);"}, {"sha": "8df240c2082b723e4b1f274fb534a177322ab52d", "filename": "tests/ui/traits/non_lifetime_binders/method-probe.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7a5f3a41c6613033f0e6be9307c40e3174a9381/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmethod-probe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a5f3a41c6613033f0e6be9307c40e3174a9381/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmethod-probe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmethod-probe.rs?ref=b7a5f3a41c6613033f0e6be9307c40e3174a9381", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+trait Foo: for<T> Bar<T> {}\n+\n+trait Bar<T> {\n+    fn method() -> T;\n+}\n+\n+fn x<T: Foo>() {\n+    let _: i32 = T::method();\n+}\n+\n+fn main() {}"}, {"sha": "8f61792e6ce7fe61382d822a2a7ab1d74c1e45c9", "filename": "tests/ui/traits/non_lifetime_binders/method-probe.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7a5f3a41c6613033f0e6be9307c40e3174a9381/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmethod-probe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7a5f3a41c6613033f0e6be9307c40e3174a9381/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmethod-probe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmethod-probe.stderr?ref=b7a5f3a41c6613033f0e6be9307c40e3174a9381", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/method-probe.rs:3:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}