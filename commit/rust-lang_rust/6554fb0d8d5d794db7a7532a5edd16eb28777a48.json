{"sha": "6554fb0d8d5d794db7a7532a5edd16eb28777a48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NTRmYjBkOGQ1ZDc5NGRiN2E3NTMyYTVlZGQxNmViMjg3NzdhNDg=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-10-29T12:29:18Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-10-31T20:12:59Z"}, "message": "add gdb_native_rust config to compiletest", "tree": {"sha": "9daab2ef3ad4d5cb640ffb123cae00e6d6de03ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9daab2ef3ad4d5cb640ffb123cae00e6d6de03ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6554fb0d8d5d794db7a7532a5edd16eb28777a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6554fb0d8d5d794db7a7532a5edd16eb28777a48", "html_url": "https://github.com/rust-lang/rust/commit/6554fb0d8d5d794db7a7532a5edd16eb28777a48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6554fb0d8d5d794db7a7532a5edd16eb28777a48/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9253e1206e91f5bd7fafd18f8488a937b0046959", "url": "https://api.github.com/repos/rust-lang/rust/commits/9253e1206e91f5bd7fafd18f8488a937b0046959", "html_url": "https://github.com/rust-lang/rust/commit/9253e1206e91f5bd7fafd18f8488a937b0046959"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "b6b98d796e241f998a5be3c21b0e04523ad39704", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6554fb0d8d5d794db7a7532a5edd16eb28777a48/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6554fb0d8d5d794db7a7532a5edd16eb28777a48/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=6554fb0d8d5d794db7a7532a5edd16eb28777a48", "patch": "@@ -149,6 +149,9 @@ pub struct Config {\n     // Version of GDB\n     pub gdb_version: Option<String>,\n \n+    // Whether GDB has native rust support\n+    pub gdb_native_rust: bool,\n+\n     // Version of LLDB\n     pub lldb_version: Option<String>,\n "}, {"sha": "c0557d8ff107d7909ce60576f41ef74255d9c0e3", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6554fb0d8d5d794db7a7532a5edd16eb28777a48/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6554fb0d8d5d794db7a7532a5edd16eb28777a48/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=6554fb0d8d5d794db7a7532a5edd16eb28777a48", "patch": "@@ -172,6 +172,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         target: opt_str2(matches.opt_str(\"target\")),\n         host: opt_str2(matches.opt_str(\"host\")),\n         gdb_version: extract_gdb_version(matches.opt_str(\"gdb-version\")),\n+        gdb_native_rust: false,\n         lldb_version: extract_lldb_version(matches.opt_str(\"lldb-version\")),\n         llvm_version: matches.opt_str(\"llvm-version\"),\n         android_cross_path: opt_path(matches, \"android-cross-path\"),"}, {"sha": "f6cd56423fbc7abb02fd10b091bee454846b7c54", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6554fb0d8d5d794db7a7532a5edd16eb28777a48/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6554fb0d8d5d794db7a7532a5edd16eb28777a48/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6554fb0d8d5d794db7a7532a5edd16eb28777a48", "patch": "@@ -430,11 +430,23 @@ actual:\\n\\\n     }\n \n     fn run_debuginfo_gdb_test_no_opt(&self) {\n+        let prefixes = if self.config.gdb_native_rust {\n+            // GDB with Rust\n+            static PREFIXES: &'static [&'static str] = &[\"gdb\", \"gdbr\"];\n+            println!(\"NOTE: compiletest thinks it is using GDB with native rust support\");\n+            PREFIXES\n+        } else {\n+            // Generic GDB\n+            static PREFIXES: &'static [&'static str] = &[\"gdb\", \"gdbg\"];\n+            println!(\"NOTE: compiletest thinks it is using GDB without native rust support\");\n+            PREFIXES\n+        };\n+\n         let DebuggerCommands {\n             commands,\n             check_lines,\n             breakpoint_lines\n-        } = self.parse_debugger_commands(\"gdb\");\n+        } = self.parse_debugger_commands(prefixes);\n         let mut cmds = commands.join(\"\\n\");\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n@@ -731,7 +743,7 @@ actual:\\n\\\n             check_lines,\n             breakpoint_lines,\n             ..\n-        } = self.parse_debugger_commands(\"lldb\");\n+        } = self.parse_debugger_commands(&[\"lldb\"]);\n \n         // Write debugger script:\n         // We don't want to hang when calling `quit` while the process is still running\n@@ -826,9 +838,11 @@ actual:\\n\\\n         }\n     }\n \n-    fn parse_debugger_commands(&self, debugger_prefix: &str) -> DebuggerCommands {\n-        let command_directive = format!(\"{}-command\", debugger_prefix);\n-        let check_directive = format!(\"{}-check\", debugger_prefix);\n+    fn parse_debugger_commands(&self, debugger_prefixes: &[&str]) -> DebuggerCommands {\n+        let directives = debugger_prefixes.iter().map(|prefix| (\n+            format!(\"{}-command\", prefix),\n+            format!(\"{}-check\", prefix),\n+        )).collect::<Vec<_>>();\n \n         let mut breakpoint_lines = vec!();\n         let mut commands = vec!();\n@@ -842,17 +856,19 @@ actual:\\n\\\n                         breakpoint_lines.push(counter);\n                     }\n \n-                    header::parse_name_value_directive(\n-                        &line,\n-                        &command_directive).map(|cmd| {\n-                            commands.push(cmd)\n-                        });\n-\n-                    header::parse_name_value_directive(\n-                        &line,\n-                        &check_directive).map(|cmd| {\n-                            check_lines.push(cmd)\n-                        });\n+                    for &(ref command_directive, ref check_directive) in &directives {\n+                        header::parse_name_value_directive(\n+                            &line,\n+                            &command_directive).map(|cmd| {\n+                                commands.push(cmd)\n+                            });\n+\n+                        header::parse_name_value_directive(\n+                            &line,\n+                            &check_directive).map(|cmd| {\n+                                check_lines.push(cmd)\n+                            });\n+                    }\n                 }\n                 Err(e) => {\n                     self.fatal(&format!(\"Error while parsing debugger commands: {}\", e))"}]}