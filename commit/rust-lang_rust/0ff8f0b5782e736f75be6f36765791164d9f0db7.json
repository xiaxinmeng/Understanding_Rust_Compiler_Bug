{"sha": "0ff8f0b5782e736f75be6f36765791164d9f0db7", "node_id": "C_kwDOAAsO6NoAKDBmZjhmMGI1NzgyZTczNmY3NWJlNmYzNjc2NTc5MTE2NGQ5ZjBkYjc", "commit": {"author": {"name": "Alex", "email": "58638691+Alex-Velez@users.noreply.github.com", "date": "2022-08-15T02:06:01Z"}, "committer": {"name": "Alex", "email": "58638691+Alex-Velez@users.noreply.github.com", "date": "2022-08-16T23:45:44Z"}, "message": "Update src/test/assembly/x86_64-floating-point-clamp.rs\n\nSimple Clamp Function\n\nI thought this was more robust and easier to read. I also allowed this function to return early in order to skip the extra bound check (I'm sure the difference is negligible). I'm not sure if there was a reason for binding `self` to `x`; if so, please correct me.\n\nSimple Clamp Function for f64\n\nI thought this was more robust and easier to read. I also allowed this function to return early in order to skip the extra bound check (I'm sure the difference is negligible). I'm not sure if there was a reason for binding `self` to `x`; if so, please correct me.\n\nFloating point clamp test\n\nf32 clamp using mut self\n\nf64 clamp using mut self\n\nUpdate library/core/src/num/f32.rs\n\nUpdate f64.rs\n\nUpdate x86_64-floating-point-clamp.rs\n\nUpdate src/test/assembly/x86_64-floating-point-clamp.rs\n\nUpdate x86_64-floating-point-clamp.rs\n\nCo-Authored-By: scottmcm <scottmcm@users.noreply.github.com>", "tree": {"sha": "6ff4e0b4a8aa1aa7d5b1a7c19fcd636d73b96b56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ff4e0b4a8aa1aa7d5b1a7c19fcd636d73b96b56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ff8f0b5782e736f75be6f36765791164d9f0db7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff8f0b5782e736f75be6f36765791164d9f0db7", "html_url": "https://github.com/rust-lang/rust/commit/0ff8f0b5782e736f75be6f36765791164d9f0db7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ff8f0b5782e736f75be6f36765791164d9f0db7/comments", "author": {"login": "Alex-Velez", "id": 58638691, "node_id": "MDQ6VXNlcjU4NjM4Njkx", "avatar_url": "https://avatars.githubusercontent.com/u/58638691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alex-Velez", "html_url": "https://github.com/Alex-Velez", "followers_url": "https://api.github.com/users/Alex-Velez/followers", "following_url": "https://api.github.com/users/Alex-Velez/following{/other_user}", "gists_url": "https://api.github.com/users/Alex-Velez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alex-Velez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alex-Velez/subscriptions", "organizations_url": "https://api.github.com/users/Alex-Velez/orgs", "repos_url": "https://api.github.com/users/Alex-Velez/repos", "events_url": "https://api.github.com/users/Alex-Velez/events{/privacy}", "received_events_url": "https://api.github.com/users/Alex-Velez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alex-Velez", "id": 58638691, "node_id": "MDQ6VXNlcjU4NjM4Njkx", "avatar_url": "https://avatars.githubusercontent.com/u/58638691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alex-Velez", "html_url": "https://github.com/Alex-Velez", "followers_url": "https://api.github.com/users/Alex-Velez/followers", "following_url": "https://api.github.com/users/Alex-Velez/following{/other_user}", "gists_url": "https://api.github.com/users/Alex-Velez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alex-Velez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alex-Velez/subscriptions", "organizations_url": "https://api.github.com/users/Alex-Velez/orgs", "repos_url": "https://api.github.com/users/Alex-Velez/repos", "events_url": "https://api.github.com/users/Alex-Velez/events{/privacy}", "received_events_url": "https://api.github.com/users/Alex-Velez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c0a01b2b651416f5e7461209ff1a93a98619e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c0a01b2b651416f5e7461209ff1a93a98619e4", "html_url": "https://github.com/rust-lang/rust/commit/b8c0a01b2b651416f5e7461209ff1a93a98619e4"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "f485e459121365129a5e00786179ac96d7831b0c", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0ff8f0b5782e736f75be6f36765791164d9f0db7/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff8f0b5782e736f75be6f36765791164d9f0db7/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=0ff8f0b5782e736f75be6f36765791164d9f0db7", "patch": "@@ -1282,15 +1282,14 @@ impl f32 {\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"clamp\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn clamp(self, min: f32, max: f32) -> f32 {\n+    pub fn clamp(mut self, min: f32, max: f32) -> f32 {\n         assert!(min <= max);\n-        let mut x = self;\n-        if x < min {\n-            x = min;\n+        if self < min {\n+            self = min;\n         }\n-        if x > max {\n-            x = max;\n+        if self > max {\n+            self = max;\n         }\n-        x\n+        self\n     }\n }"}, {"sha": "3d385e3888a8b7c1c3fd54d53d5b24ff9b949eb1", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0ff8f0b5782e736f75be6f36765791164d9f0db7/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff8f0b5782e736f75be6f36765791164d9f0db7/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=0ff8f0b5782e736f75be6f36765791164d9f0db7", "patch": "@@ -1280,15 +1280,14 @@ impl f64 {\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"clamp\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn clamp(self, min: f64, max: f64) -> f64 {\n+    pub fn clamp(mut self, min: f64, max: f64) -> f64 {\n         assert!(min <= max);\n-        let mut x = self;\n-        if x < min {\n-            x = min;\n+        if self < min {\n+            self = min;\n         }\n-        if x > max {\n-            x = max;\n+        if self > max {\n+            self = max;\n         }\n-        x\n+        self\n     }\n }"}, {"sha": "3388b0e1abd739ebd9c2fe8afc1e5cee31b23453", "filename": "src/test/assembly/x86_64-floating-point-clamp.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0ff8f0b5782e736f75be6f36765791164d9f0db7/src%2Ftest%2Fassembly%2Fx86_64-floating-point-clamp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff8f0b5782e736f75be6f36765791164d9f0db7/src%2Ftest%2Fassembly%2Fx86_64-floating-point-clamp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-floating-point-clamp.rs?ref=0ff8f0b5782e736f75be6f36765791164d9f0db7", "patch": "@@ -0,0 +1,25 @@\n+// Floating-point clamp is designed to be implementable as max+min,\n+// so check to make sure that's what it's actually emitting.\n+\n+// assembly-output: emit-asm\n+// compile-flags: --crate-type=lib -O -C llvm-args=-x86-asm-syntax=intel\n+// only-x86_64\n+\n+// CHECK-LABEL: clamp_demo:\n+#[no_mangle]\n+pub fn clamp_demo(a: f32, x: f32, y: f32) -> f32 {\n+    // CHECK: maxss\n+    // CHECK: minss\n+    a.clamp(x, y)\n+}\n+\n+// CHECK-LABEL: clamp12_demo:\n+#[no_mangle]\n+pub fn clamp12_demo(a: f32) -> f32 {\n+    // CHECK-NEXT: movss   xmm1\n+    // CHECK-NEXT: maxss   xmm1, xmm0\n+    // CHECK-NEXT: movss   xmm0\n+    // CHECK-NEXT: minss   xmm0, xmm1\n+    // CHECK-NEXT: ret\n+    a.clamp(1.0, 2.0)\n+}"}]}