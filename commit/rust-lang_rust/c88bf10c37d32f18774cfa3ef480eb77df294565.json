{"sha": "c88bf10c37d32f18774cfa3ef480eb77df294565", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OGJmMTBjMzdkMzJmMTg3NzRjZmEzZWY0ODBlYjc3ZGYyOTQ1NjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-20T04:54:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-21T16:54:26Z"}, "message": "rustc: Pass optional additional plugins to compile_input\n\nThis provides a way for clients of the rustc library to add\ntheir own features to the pipeline.", "tree": {"sha": "bddfcf7c6d583d0c491a30ef501d79664369954c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bddfcf7c6d583d0c491a30ef501d79664369954c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c88bf10c37d32f18774cfa3ef480eb77df294565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c88bf10c37d32f18774cfa3ef480eb77df294565", "html_url": "https://github.com/rust-lang/rust/commit/c88bf10c37d32f18774cfa3ef480eb77df294565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c88bf10c37d32f18774cfa3ef480eb77df294565/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c3655bed192e31bdf649ed5f4e728201ede17b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3655bed192e31bdf649ed5f4e728201ede17b2", "html_url": "https://github.com/rust-lang/rust/commit/1c3655bed192e31bdf649ed5f4e728201ede17b2"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "311d9fb93a1211e231b2cd294bb4920034be31ef", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c88bf10c37d32f18774cfa3ef480eb77df294565/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88bf10c37d32f18774cfa3ef480eb77df294565/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c88bf10c37d32f18774cfa3ef480eb77df294565", "patch": "@@ -69,7 +69,8 @@ pub fn compile_input(sess: Session,\n                      cfg: ast::CrateConfig,\n                      input: &Input,\n                      outdir: &Option<Path>,\n-                     output: &Option<Path>) {\n+                     output: &Option<Path>,\n+                     addl_plugins: Option<Plugins>) {\n     // We need nested scopes here, because the intermediate results can keep\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n@@ -85,7 +86,8 @@ pub fn compile_input(sess: Session,\n             let id = link::find_crate_name(Some(&sess), krate.attrs.as_slice(),\n                                            input);\n             let (expanded_crate, ast_map)\n-                = match phase_2_configure_and_expand(&sess, krate, id.as_slice()) {\n+                = match phase_2_configure_and_expand(&sess, krate, id.as_slice(),\n+                                                     addl_plugins) {\n                     None => return,\n                     Some(p) => p,\n                 };\n@@ -186,7 +188,8 @@ pub fn phase_1_parse_input(sess: &Session, cfg: ast::CrateConfig, input: &Input)\n /// Returns `None` if we're aborting after handling -W help.\n pub fn phase_2_configure_and_expand(sess: &Session,\n                                     mut krate: ast::Crate,\n-                                    crate_name: &str)\n+                                    crate_name: &str,\n+                                    addl_plugins: Option<Plugins>)\n                                     -> Option<(ast::Crate, syntax::ast_map::Map)> {\n     let time_passes = sess.time_passes();\n \n@@ -212,9 +215,10 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     krate = time(time_passes, \"configuration 1\", krate, |krate|\n                  front::config::strip_unconfigured_items(krate));\n \n+    let mut addl_plugins = Some(addl_plugins);\n     let Plugins { macros, registrars }\n         = time(time_passes, \"plugin loading\", (), |_|\n-               plugin::load::load_plugins(sess, &krate));\n+               plugin::load::load_plugins(sess, &krate, addl_plugins.take_unwrap()));\n \n     let mut registry = Registry::new(&krate);\n \n@@ -697,7 +701,7 @@ pub fn pretty_print_input(sess: Session,\n         PpmExpanded | PpmExpandedIdentified | PpmTyped | PpmFlowGraph(_) => {\n             let (krate, ast_map)\n                 = match phase_2_configure_and_expand(&sess, krate,\n-                                                     id.as_slice()) {\n+                                                     id.as_slice(), None) {\n                     None => return,\n                     Some(p) => p,\n                 };"}, {"sha": "a5df63a9e23fa813400889f76c807bf7a5a19ebe", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88bf10c37d32f18774cfa3ef480eb77df294565/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88bf10c37d32f18774cfa3ef480eb77df294565/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=c88bf10c37d32f18774cfa3ef480eb77df294565", "patch": "@@ -124,7 +124,7 @@ fn run_compiler(args: &[String]) {\n         return;\n     }\n \n-    driver::compile_input(sess, cfg, &input, &odir, &ofile);\n+    driver::compile_input(sess, cfg, &input, &odir, &ofile, None);\n }\n \n /// Prints version information and returns None on success or an error"}, {"sha": "637af96b6321ab23cb2e0521922e89a8e345ff5d", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88bf10c37d32f18774cfa3ef480eb77df294565/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88bf10c37d32f18774cfa3ef480eb77df294565/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=c88bf10c37d32f18774cfa3ef480eb77df294565", "patch": "@@ -117,7 +117,7 @@ fn test_env(_test_name: &str,\n     let input = driver::StrInput(source_string.to_string());\n     let krate = driver::phase_1_parse_input(&sess, krate_config, &input);\n     let (krate, ast_map) =\n-        driver::phase_2_configure_and_expand(&sess, krate, \"test\")\n+        driver::phase_2_configure_and_expand(&sess, krate, \"test\", None)\n             .expect(\"phase 2 aborted\");\n \n     // run just enough stuff to build a tcx:"}, {"sha": "4f38c74893e46630c08420440a49160938272d37", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c88bf10c37d32f18774cfa3ef480eb77df294565/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88bf10c37d32f18774cfa3ef480eb77df294565/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=c88bf10c37d32f18774cfa3ef480eb77df294565", "patch": "@@ -66,10 +66,24 @@ impl<'a> PluginLoader<'a> {\n }\n \n /// Read plugin metadata and dynamically load registrar functions.\n-pub fn load_plugins(sess: &Session, krate: &ast::Crate) -> Plugins {\n+pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n+                    addl_plugins: Option<Plugins>) -> Plugins {\n     let mut loader = PluginLoader::new(sess);\n     visit::walk_crate(&mut loader, krate, ());\n-    loader.plugins\n+\n+    let mut plugins = loader.plugins;\n+\n+    match addl_plugins {\n+        Some(addl_plugins) => {\n+            // Add in the additional plugins requested by the frontend\n+            let Plugins { macros: addl_macros, registrars: addl_registrars } = addl_plugins;\n+            plugins.macros.push_all_move(addl_macros);\n+            plugins.registrars.push_all_move(addl_registrars);\n+        }\n+        None => ()\n+    }\n+\n+    return plugins;\n }\n \n // note that macros aren't expanded yet, and therefore macros can't add plugins."}, {"sha": "b1c715ae5b36a1aba7c49020c38eb41378faad04", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88bf10c37d32f18774cfa3ef480eb77df294565/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88bf10c37d32f18774cfa3ef480eb77df294565/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c88bf10c37d32f18774cfa3ef480eb77df294565", "patch": "@@ -121,7 +121,7 @@ fn get_ast_and_resolve(cpath: &Path, libs: HashSet<Path>, cfgs: Vec<String>)\n                                      &input);\n \n     let (krate, ast_map)\n-        = phase_2_configure_and_expand(&sess, krate, name.as_slice())\n+        = phase_2_configure_and_expand(&sess, krate, name.as_slice(), None)\n             .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n \n     let driver::driver::CrateAnalysis {"}, {"sha": "8fe28d1eab824de877d5732ffe9ebde9c9484c4d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c88bf10c37d32f18774cfa3ef480eb77df294565/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88bf10c37d32f18774cfa3ef480eb77df294565/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c88bf10c37d32f18774cfa3ef480eb77df294565", "patch": "@@ -69,7 +69,7 @@ pub fn run(input: &str,\n     }));\n     let krate = driver::phase_1_parse_input(&sess, cfg, &input);\n     let (krate, _) = driver::phase_2_configure_and_expand(&sess, krate,\n-                                                          \"rustdoc-test\")\n+                                                          \"rustdoc-test\", None)\n         .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n \n     let ctx = box(GC) core::DocContext {\n@@ -166,7 +166,7 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n     let out = Some(outdir.path().clone());\n     let cfg = config::build_configuration(&sess);\n     let libdir = sess.target_filesearch().get_lib_path();\n-    driver::compile_input(sess, cfg, &input, &out, &None);\n+    driver::compile_input(sess, cfg, &input, &out, &None, None);\n \n     if no_run { return }\n "}]}