{"sha": "f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NThlNmMyNDYxNWM0YjFmMWU3N2IwZWUzZDRmMzIzODNmYjM2MTc=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-27T20:36:35Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:29Z"}, "message": "Separate bounds and predicates for associated/opaque types", "tree": {"sha": "d9668ba16b66d59b026e9d936803dd92fdff6fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9668ba16b66d59b026e9d936803dd92fdff6fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "html_url": "https://github.com/rust-lang/rust/commit/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d297147e620431dacfd4bbe90c6f82911b7d72c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d297147e620431dacfd4bbe90c6f82911b7d72c5", "html_url": "https://github.com/rust-lang/rust/commit/d297147e620431dacfd4bbe90c6f82911b7d72c5"}], "stats": {"total": 2062, "additions": 934, "deletions": 1128}, "files": [{"sha": "4676ad5c31fca360b1b3478b5b3a87c1f131c36c", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -432,17 +432,25 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         self.with_catch_scope(body.id, |this| {\n             let mut block = this.lower_block_noalloc(body, true);\n \n-            let try_span = this.mark_span_with_reason(\n-                DesugaringKind::TryBlock,\n-                body.span,\n-                this.allow_try_trait.clone(),\n-            );\n-\n             // Final expression of the block (if present) or `()` with span at the end of block\n-            let tail_expr = block\n-                .expr\n-                .take()\n-                .unwrap_or_else(|| this.expr_unit(this.sess.source_map().end_point(try_span)));\n+            let (try_span, tail_expr) = if let Some(expr) = block.expr.take() {\n+                (\n+                    this.mark_span_with_reason(\n+                        DesugaringKind::TryBlock,\n+                        expr.span,\n+                        this.allow_try_trait.clone(),\n+                    ),\n+                    expr,\n+                )\n+            } else {\n+                let try_span = this.mark_span_with_reason(\n+                    DesugaringKind::TryBlock,\n+                    this.sess.source_map().end_point(body.span),\n+                    this.allow_try_trait.clone(),\n+                );\n+\n+                (try_span, this.expr_unit(try_span))\n+            };\n \n             let ok_wrapped_span =\n                 this.mark_span_with_reason(DesugaringKind::TryBlock, tail_expr.span, None);\n@@ -1553,7 +1561,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir::LangItem::TryFromError,\n                 unstable_span,\n                 from_expr,\n-                try_span,\n+                unstable_span,\n             );\n             let thin_attrs = ThinVec::from(attrs);\n             let catch_scope = self.catch_scopes.last().copied();"}, {"sha": "1b7269706a7583f61b1e880290249c8a62614a33", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -4,7 +4,6 @@ use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::{self, ToPredicate, TyCtxt, WithConstness};\n-use rustc_span::Span;\n \n pub fn anonymize_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -94,7 +93,11 @@ pub fn elaborate_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     predicates: impl Iterator<Item = ty::Predicate<'tcx>>,\n ) -> Elaborator<'tcx> {\n-    let obligations = predicates.map(|predicate| predicate_obligation(predicate, None)).collect();\n+    let obligations = predicates\n+        .map(|predicate| {\n+            predicate_obligation(predicate, ty::ParamEnv::empty(), ObligationCause::dummy())\n+        })\n+        .collect();\n     elaborate_obligations(tcx, obligations)\n }\n \n@@ -109,15 +112,10 @@ pub fn elaborate_obligations<'tcx>(\n \n fn predicate_obligation<'tcx>(\n     predicate: ty::Predicate<'tcx>,\n-    span: Option<Span>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    cause: ObligationCause<'tcx>,\n ) -> PredicateObligation<'tcx> {\n-    let cause = if let Some(span) = span {\n-        ObligationCause::dummy_with_span(span)\n-    } else {\n-        ObligationCause::dummy()\n-    };\n-\n-    Obligation { cause, param_env: ty::ParamEnv::empty(), recursion_depth: 0, predicate }\n+    Obligation { cause, param_env, recursion_depth: 0, predicate }\n }\n \n impl Elaborator<'tcx> {\n@@ -133,10 +131,11 @@ impl Elaborator<'tcx> {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n-                let obligations = predicates.predicates.iter().map(|&(pred, span)| {\n+                let obligations = predicates.predicates.iter().map(|&(pred, _)| {\n                     predicate_obligation(\n                         pred.subst_supertrait(tcx, &ty::Binder::bind(data.trait_ref)),\n-                        Some(span),\n+                        obligation.param_env,\n+                        obligation.cause.clone(),\n                     )\n                 });\n                 debug!(\"super_predicates: data={:?}\", data);\n@@ -233,7 +232,13 @@ impl Elaborator<'tcx> {\n                         })\n                         .map(|predicate_kind| predicate_kind.to_predicate(tcx))\n                         .filter(|&predicate| visited.insert(predicate))\n-                        .map(|predicate| predicate_obligation(predicate, None)),\n+                        .map(|predicate| {\n+                            predicate_obligation(\n+                                predicate,\n+                                obligation.param_env,\n+                                obligation.cause.clone(),\n+                            )\n+                        }),\n                 );\n             }\n             ty::PredicateAtom::TypeWellFormedFromEnv(..) => {"}, {"sha": "3abd9a6325d6ee0e1a061546693efd4a69ed536f", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -200,7 +200,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 ty::Adt(def, _) => check_must_use_def(cx, def.did, span, descr_pre, descr_post),\n                 ty::Opaque(def, _) => {\n                     let mut has_emitted = false;\n-                    for (predicate, _) in cx.tcx.predicates_of(def).predicates {\n+                    for &(predicate, _) in cx.tcx.explicit_item_bounds(def) {\n                         // We only look at the `DefId`, so it is safe to skip the binder here.\n                         if let ty::PredicateAtom::Trait(ref poly_trait_predicate, _) =\n                             predicate.skip_binders()"}, {"sha": "f0911928e81c9cf97e5d1782a8bbc6dc77fb6083", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1266,7 +1266,10 @@ impl EncodeContext<'a, 'tcx> {\n             hir::ItemKind::ForeignMod(_) => EntryKind::ForeignMod,\n             hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,\n             hir::ItemKind::TyAlias(..) => EntryKind::Type,\n-            hir::ItemKind::OpaqueTy(..) => EntryKind::OpaqueTy,\n+            hir::ItemKind::OpaqueTy(..) => {\n+                self.encode_explicit_item_bounds(def_id);\n+                EntryKind::OpaqueTy\n+            }\n             hir::ItemKind::Enum(..) => EntryKind::Enum(self.tcx.adt_def(def_id).repr),\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let adt_def = self.tcx.adt_def(def_id);"}, {"sha": "e1f02d0f70418547704cb820a7613ded670ed572", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -607,12 +607,13 @@ pub trait PrettyPrinter<'tcx>:\n                     }\n                     // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n                     // by looking up the projections associated with the def_id.\n-                    let bounds = self.tcx().item_bounds(def_id).subst(self.tcx(), substs);\n+                    let bounds = self.tcx().explicit_item_bounds(def_id);\n \n                     let mut first = true;\n                     let mut is_sized = false;\n                     p!(\"impl\");\n-                    for predicate in bounds {\n+                    for (predicate, _) in bounds {\n+                        let predicate = predicate.subst(self.tcx(), substs);\n                         // Note: We can't use `to_opt_poly_trait_ref` here as `predicate`\n                         // may contain unbound variables. We therefore do this manually.\n                         //"}, {"sha": "8f93bce6e99237dd344e6a0d572848e9c4df8759", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -194,11 +194,14 @@ where\n                     // The intent is to treat `impl Trait1 + Trait2` identically to\n                     // `dyn Trait1 + Trait2`. Therefore we ignore def-id of the opaque type itself\n                     // (it either has no visibility, or its visibility is insignificant, like\n-                    // visibilities of type aliases) and recurse into predicates instead to go\n+                    // visibilities of type aliases) and recurse into bounds instead to go\n                     // through the trait list (default type visitor doesn't visit those traits).\n                     // All traits in the list are considered the \"primary\" part of the type\n                     // and are visited by shallow visitors.\n-                    if self.visit_predicates(tcx.predicates_of(def_id)) {\n+                    if self.visit_predicates(ty::GenericPredicates {\n+                        parent: None,\n+                        predicates: tcx.explicit_item_bounds(def_id),\n+                    }) {\n                         return true;\n                     }\n                 }\n@@ -1800,6 +1803,14 @@ impl SearchInterfaceForPrivateItemsVisitor<'tcx> {\n         self\n     }\n \n+    fn bounds(&mut self) -> &mut Self {\n+        self.visit_predicates(ty::GenericPredicates {\n+            parent: None,\n+            predicates: self.tcx.explicit_item_bounds(self.item_def_id),\n+        });\n+        self\n+    }\n+\n     fn ty(&mut self) -> &mut Self {\n         self.visit(self.tcx.type_of(self.item_def_id));\n         self\n@@ -1975,7 +1986,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n             hir::ItemKind::OpaqueTy(..) => {\n                 // `ty()` for opaque types is the underlying type,\n                 // it's not a part of interface, so we skip it.\n-                self.check(item.hir_id, item_visibility).generics().predicates();\n+                self.check(item.hir_id, item_visibility).generics().bounds();\n             }\n             hir::ItemKind::Trait(.., trait_item_refs) => {\n                 self.check(item.hir_id, item_visibility).generics().predicates();\n@@ -1987,6 +1998,10 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                         trait_item_ref.defaultness,\n                         item_visibility,\n                     );\n+\n+                    if let AssocItemKind::Type = trait_item_ref.kind {\n+                        self.check(trait_item_ref.id.hir_id, item_visibility).bounds();\n+                    }\n                 }\n             }\n             hir::ItemKind::TraitAlias(..) => {"}, {"sha": "35b1064d2e4ad1dd53d69374bed135e7a4508363", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -73,18 +73,28 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         }\n         let bound_vars = bound_vars_for_item(self.interner.tcx, def_id);\n         let binders = binders_for(&self.interner, bound_vars);\n-        // FIXME(chalk): this really isn't right I don't think. The functions\n-        // for GATs are a bit hard to figure out. Are these supposed to be where\n-        // clauses or bounds?\n+\n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n \n+        let bounds = self\n+            .tcx\n+            .explicit_item_bounds(def_id)\n+            .iter()\n+            .map(|(bound, _)| bound.subst(self.tcx, &bound_vars))\n+            .filter_map(|bound| {\n+                LowerInto::<\n+                        Option<chalk_solve::rust_ir::QuantifiedInlineBound<RustInterner<'tcx>>>,\n+                    >::lower_into(bound, &self.interner)\n+            })\n+            .collect();\n+\n         Arc::new(chalk_solve::rust_ir::AssociatedTyDatum {\n             trait_id: chalk_ir::TraitId(trait_def_id),\n             id: assoc_type_id,\n             name: (),\n             binders: chalk_ir::Binders::new(\n                 binders,\n-                chalk_solve::rust_ir::AssociatedTyDatumBound { bounds: vec![], where_clauses },\n+                chalk_solve::rust_ir::AssociatedTyDatumBound { bounds, where_clauses },\n             ),\n         })\n     }\n@@ -443,10 +453,17 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let binders = binders_for(&self.interner, bound_vars);\n         let where_clauses = self.where_clauses_for(opaque_ty_id.0, bound_vars);\n \n+        let bounds: Vec<_> = predicates\n+            .iter()\n+            .map(|(bound, _)| bound.subst(self.tcx, &bound_vars))\n+            .filter_map(|bound| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(bound, &self.interner))\n+            .collect();\n+\n         let value = chalk_solve::rust_ir::OpaqueTyDatumBound {\n-            bounds: chalk_ir::Binders::new(binders.clone(), vec![]),\n+            bounds: chalk_ir::Binders::new(binders, bounds),\n             where_clauses: chalk_ir::Binders::new(binders, where_clauses),\n         };\n+\n         Arc::new(chalk_solve::rust_ir::OpaqueTyDatum {\n             opaque_ty_id,\n             bound: chalk_ir::Binders::empty(&self.interner, value),"}, {"sha": "0602f5ea4dcc6d2832301c4d9213fcf20e6f2b8d", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -728,6 +728,84 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::FnSig<RustInterner<'tcx>>> for ty::Binder<t\n     }\n }\n \n+// We lower into an Option here since there are some predicates which Chalk\n+// doesn't have a representation for yet (as an `InlineBound`). The `Option` will\n+// eventually be removed.\n+impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<RustInterner<'tcx>>>>\n+    for ty::Predicate<'tcx>\n+{\n+    fn lower_into(\n+        self,\n+        interner: &RustInterner<'tcx>,\n+    ) -> Option<chalk_solve::rust_ir::QuantifiedInlineBound<RustInterner<'tcx>>> {\n+        match &self.kind() {\n+            ty::PredicateKind::Trait(predicate, _) => {\n+                let (predicate, binders, _named_regions) =\n+                    collect_bound_vars(interner, interner.tcx, predicate);\n+\n+                Some(chalk_ir::Binders::new(\n+                    binders,\n+                    chalk_solve::rust_ir::InlineBound::TraitBound(\n+                        predicate.trait_ref.lower_into(interner),\n+                    ),\n+                ))\n+            }\n+            ty::PredicateKind::Projection(predicate) => {\n+                let (predicate, binders, _named_regions) =\n+                    collect_bound_vars(interner, interner.tcx, predicate);\n+\n+                Some(chalk_ir::Binders::new(\n+                    binders,\n+                    chalk_solve::rust_ir::InlineBound::AliasEqBound(predicate.lower_into(interner)),\n+                ))\n+            }\n+            ty::PredicateKind::TypeOutlives(_predicate) => None,\n+            ty::PredicateKind::WellFormed(_ty) => None,\n+\n+            ty::PredicateKind::RegionOutlives(..)\n+            | ty::PredicateKind::ObjectSafe(..)\n+            | ty::PredicateKind::ClosureKind(..)\n+            | ty::PredicateKind::Subtype(..)\n+            | ty::PredicateKind::ConstEvaluatable(..)\n+            | ty::PredicateKind::ConstEquate(..) => bug!(\"unexpected predicate {}\", &self),\n+        }\n+    }\n+}\n+\n+impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::TraitBound<RustInterner<'tcx>>>\n+    for ty::TraitRef<'tcx>\n+{\n+    fn lower_into(\n+        self,\n+        interner: &RustInterner<'tcx>,\n+    ) -> chalk_solve::rust_ir::TraitBound<RustInterner<'tcx>> {\n+        chalk_solve::rust_ir::TraitBound {\n+            trait_id: chalk_ir::TraitId(self.def_id),\n+            args_no_self: self.substs[1..].iter().map(|arg| arg.lower_into(interner)).collect(),\n+        }\n+    }\n+}\n+\n+impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::AliasEqBound<RustInterner<'tcx>>>\n+    for ty::ProjectionPredicate<'tcx>\n+{\n+    fn lower_into(\n+        self,\n+        interner: &RustInterner<'tcx>,\n+    ) -> chalk_solve::rust_ir::AliasEqBound<RustInterner<'tcx>> {\n+        let trait_ref = self.projection_ty.trait_ref(interner.tcx);\n+        chalk_solve::rust_ir::AliasEqBound {\n+            trait_bound: trait_ref.lower_into(interner),\n+            associated_ty_id: chalk_ir::AssocTypeId(self.projection_ty.item_def_id),\n+            parameters: self.projection_ty.substs[trait_ref.substs.len()..]\n+                .iter()\n+                .map(|arg| arg.lower_into(interner))\n+                .collect(),\n+            value: self.ty.lower_into(interner),\n+        }\n+    }\n+}\n+\n /// To collect bound vars, we have to do two passes. In the first pass, we\n /// collect all `BoundRegion`s and `ty::Bound`s. In the second pass, we then\n /// replace `BrNamed` into `BrAnon`. The two separate passes are important,"}, {"sha": "2df9007195fae18baf13ead9a2e2d326d225f7b9", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,4 +1,5 @@\n use super::coercion::CoerceMany;\n+use super::compare_method::check_type_bounds;\n use super::compare_method::{compare_const_impl, compare_impl_method, compare_ty_impl};\n use super::*;\n \n@@ -453,8 +454,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n             ty: None,\n         };\n         let prohibit_opaque = tcx\n-            .predicates_of(def_id)\n-            .predicates\n+            .explicit_item_bounds(def_id)\n             .iter()\n             .any(|(predicate, _)| predicate.visit_with(&mut visitor));\n         debug!(\n@@ -476,7 +476,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n                 span,\n                 E0760,\n                 \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n-             a parent scope\",\n+                 a parent scope\",\n                 if is_async { \"async fn\" } else { \"impl Trait\" },\n             );\n \n@@ -553,9 +553,25 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n \n             for item in items.iter() {\n                 let item = tcx.hir().trait_item(item.id);\n-                if let hir::TraitItemKind::Fn(sig, _) = &item.kind {\n-                    let abi = sig.header.abi;\n-                    fn_maybe_err(tcx, item.ident.span, abi);\n+                match item.kind {\n+                    hir::TraitItemKind::Fn(ref sig, _) => {\n+                        let abi = sig.header.abi;\n+                        fn_maybe_err(tcx, item.ident.span, abi);\n+                    }\n+                    hir::TraitItemKind::Type(.., Some(_default)) => {\n+                        let item_def_id = tcx.hir().local_def_id(item.hir_id).to_def_id();\n+                        let assoc_item = tcx.associated_item(item_def_id);\n+                        let trait_substs =\n+                            InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                        let _: Result<_, rustc_errors::ErrorReported> = check_type_bounds(\n+                            tcx,\n+                            assoc_item,\n+                            assoc_item,\n+                            item.span,\n+                            ty::TraitRef { def_id: def_id.to_def_id(), substs: trait_substs },\n+                        );\n+                    }\n+                    _ => {}\n                 }\n             }\n         }"}, {"sha": "3515fb12e4ca70a862cd705ae26d1f7386362632", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -5,6 +5,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit;\n use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n+use rustc_infer::traits::util;\n use rustc_middle::ty;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n@@ -1170,20 +1171,13 @@ fn compare_type_predicate_entailment<'tcx>(\n /// For default associated types the normalization is not possible (the value\n /// from the impl could be overridden). We also can't normalize generic\n /// associated types (yet) because they contain bound parameters.\n-fn check_type_bounds<'tcx>(\n+pub fn check_type_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ty: &ty::AssocItem,\n     impl_ty: &ty::AssocItem,\n     impl_ty_span: Span,\n     impl_trait_ref: ty::TraitRef<'tcx>,\n ) -> Result<(), ErrorReported> {\n-    let have_gats = tcx.features().generic_associated_types;\n-    if impl_ty.defaultness.is_final() && !have_gats {\n-        // For \"final\", non-generic associate type implementations, we\n-        // don't need this as described above.\n-        return Ok(());\n-    }\n-\n     // Given\n     //\n     // impl<A, B> Foo<u32> for (A, B) {\n@@ -1237,10 +1231,20 @@ fn check_type_bounds<'tcx>(\n             ObligationCauseCode::ItemObligation(trait_ty.def_id),\n         );\n \n-        let predicates = tcx.item_bounds(trait_ty.def_id);\n-        debug!(\"check_type_bounds: item_bounds={:?}\", predicates);\n+        let obligations = tcx\n+            .explicit_item_bounds(trait_ty.def_id)\n+            .iter()\n+            .map(|&(bound, span)| {\n+                let concrete_ty_bound =\n+                    traits::subst_assoc_item_bound(tcx, bound, impl_ty_value, rebased_substs);\n+                debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);\n \n-        for predicate in predicates {\n+                traits::Obligation::new(mk_cause(span), param_env, concrete_ty_bound)\n+            })\n+            .collect();\n+        debug!(\"check_type_bounds: item_bounds={:?}\", obligations);\n+\n+        for obligation in util::elaborate_obligations(tcx, obligations) {\n             let concrete_ty_predicate = predicate.subst(tcx, rebased_substs);\n             debug!(\"compare_projection_bounds: concrete predicate = {:?}\", concrete_ty_predicate);\n \n@@ -1252,12 +1256,7 @@ fn check_type_bounds<'tcx>(\n             );\n             debug!(\"compare_projection_bounds: normalized predicate = {:?}\", normalized_predicate);\n \n-            inh.register_predicates(obligations);\n-            inh.register_predicate(traits::Obligation::new(\n-                cause.clone(),\n-                param_env,\n-                normalized_predicate,\n-            ));\n+            inh.register_predicate(obligation);\n         }\n \n         // Check that all obligations are satisfied by the implementation's"}, {"sha": "f31ba886d526264807d8912c63e08e40dc8d899a", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 19, "deletions": 87, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -420,6 +420,9 @@ fn check_associated_item(\n                 check_method_receiver(fcx, hir_sig, &item, self_ty);\n             }\n             ty::AssocKind::Type => {\n+                if let ty::AssocItemContainer::TraitContainer(_) = item.container {\n+                    check_associated_type_bounds(fcx, item, span)\n+                }\n                 if item.defaultness.has_value() {\n                     let ty = fcx.tcx.type_of(item.def_id);\n                     let ty = fcx.normalize_associated_types_in(span, &ty);\n@@ -571,7 +574,6 @@ fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n \n     for_item(tcx, item).with_fcx(|fcx, _| {\n         check_where_clauses(tcx, fcx, item.span, trait_def_id.to_def_id(), None);\n-        check_associated_type_defaults(fcx, trait_def_id.to_def_id());\n \n         vec![]\n     });\n@@ -581,96 +583,26 @@ fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n ///\n /// Assuming the defaults are used, check that all predicates (bounds on the\n /// assoc type and where clauses on the trait) hold.\n-fn check_associated_type_defaults(fcx: &FnCtxt<'_, '_>, trait_def_id: DefId) {\n+fn check_associated_type_bounds(fcx: &FnCtxt<'_, '_>, item: &ty::AssocItem, span: Span) {\n     let tcx = fcx.tcx;\n-    let substs = InternalSubsts::identity_for_item(tcx, trait_def_id);\n-\n-    // For all assoc. types with defaults, build a map from\n-    // `<Self as Trait<...>>::Assoc` to the default type.\n-    let map = tcx\n-        .associated_items(trait_def_id)\n-        .in_definition_order()\n-        .filter_map(|item| {\n-            if item.kind == ty::AssocKind::Type && item.defaultness.has_value() {\n-                // `<Self as Trait<...>>::Assoc`\n-                let proj = ty::ProjectionTy { substs, item_def_id: item.def_id };\n-                let default_ty = tcx.type_of(item.def_id);\n-                debug!(\"assoc. type default mapping: {} -> {}\", proj, default_ty);\n-                Some((proj, default_ty))\n-            } else {\n-                None\n-            }\n-        })\n-        .collect::<FxHashMap<_, _>>();\n-\n-    /// Replaces projections of associated types with their default types.\n-    ///\n-    /// This does a \"shallow substitution\", meaning that defaults that refer to\n-    /// other defaulted assoc. types will still refer to the projection\n-    /// afterwards, not to the other default. For example:\n-    ///\n-    /// ```compile_fail\n-    /// trait Tr {\n-    ///     type A: Clone = Vec<Self::B>;\n-    ///     type B = u8;\n-    /// }\n-    /// ```\n-    ///\n-    /// This will end up replacing the bound `Self::A: Clone` with\n-    /// `Vec<Self::B>: Clone`, not with `Vec<u8>: Clone`. If we did a deep\n-    /// substitution and ended up with the latter, the trait would be accepted.\n-    /// If an `impl` then replaced `B` with something that isn't `Clone`,\n-    /// suddenly the default for `A` is no longer valid. The shallow\n-    /// substitution forces the trait to add a `B: Clone` bound to be accepted,\n-    /// which means that an `impl` can replace any default without breaking\n-    /// others.\n-    ///\n-    /// Note that this isn't needed for soundness: The defaults would still be\n-    /// checked in any impl that doesn't override them.\n-    struct DefaultNormalizer<'tcx> {\n-        tcx: TyCtxt<'tcx>,\n-        map: FxHashMap<ty::ProjectionTy<'tcx>, Ty<'tcx>>,\n-    }\n \n-    impl<'tcx> ty::fold::TypeFolder<'tcx> for DefaultNormalizer<'tcx> {\n-        fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n-            self.tcx\n-        }\n+    let bounds = tcx.explicit_item_bounds(item.def_id);\n \n-        fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-            match t.kind() {\n-                ty::Projection(proj_ty) => {\n-                    if let Some(default) = self.map.get(&proj_ty) {\n-                        default\n-                    } else {\n-                        t.super_fold_with(self)\n-                    }\n-                }\n-                _ => t.super_fold_with(self),\n-            }\n-        }\n-    }\n-\n-    // Now take all predicates defined on the trait, replace any mention of\n-    // the assoc. types with their default, and prove them.\n-    // We only consider predicates that directly mention the assoc. type.\n-    let mut norm = DefaultNormalizer { tcx, map };\n-    let predicates = fcx.tcx.predicates_of(trait_def_id);\n-    for &(orig_pred, span) in predicates.predicates.iter() {\n-        let pred = orig_pred.fold_with(&mut norm);\n-        if pred != orig_pred {\n-            // Mentions one of the defaulted assoc. types\n-            debug!(\"default suitability check: proving predicate: {} -> {}\", orig_pred, pred);\n-            let pred = fcx.normalize_associated_types_in(span, &pred);\n-            let cause = traits::ObligationCause::new(\n-                span,\n-                fcx.body_id,\n-                traits::ItemObligation(trait_def_id),\n-            );\n-            let obligation = traits::Obligation::new(cause, fcx.param_env, pred);\n+    debug!(\"check_associated_type_bounds: bounds={:?}\", bounds);\n+    let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n+        let normalized_bound = fcx.normalize_associated_types_in(span, &bound);\n+        traits::wf::predicate_obligations(\n+            fcx,\n+            fcx.param_env,\n+            fcx.body_id,\n+            normalized_bound,\n+            bound_span,\n+        )\n+    });\n \n-            fcx.register_predicate(obligation);\n-        }\n+    for obligation in wf_obligations {\n+        debug!(\"next obligation cause: {:?}\", obligation.cause);\n+        fcx.register_predicate(obligation);\n     }\n }\n "}, {"sha": "737bc3a753d754c93ab7900c4526b184bdad7930", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -711,8 +711,10 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n             tcx.ensure().generics_of(def_id);\n             tcx.ensure().type_of(def_id);\n             tcx.ensure().predicates_of(def_id);\n-            if let hir::ItemKind::Fn(..) = it.kind {\n-                tcx.ensure().fn_sig(def_id);\n+            match it.kind {\n+                hir::ItemKind::Fn(..) => tcx.ensure().fn_sig(def_id),\n+                hir::ItemKind::OpaqueTy(..) => tcx.ensure().item_bounds(def_id),\n+                _ => (),\n             }\n         }\n     }\n@@ -733,15 +735,25 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n             tcx.ensure().type_of(def_id);\n         }\n \n-        hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(_, Some(_)) => {\n+        hir::TraitItemKind::Const(..) => {\n             tcx.ensure().type_of(def_id);\n-            // Account for `const C: _;` and `type T = _;`.\n+            // Account for `const C: _;`.\n+            let mut visitor = PlaceholderHirTyCollector::default();\n+            visitor.visit_trait_item(trait_item);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false);\n+        }\n+\n+        hir::TraitItemKind::Type(_, Some(_)) => {\n+            tcx.ensure().item_bounds(def_id);\n+            tcx.ensure().type_of(def_id);\n+            // Account for `type T = _;`.\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n             placeholder_type_error(tcx, None, &[], visitor.0, false);\n         }\n \n         hir::TraitItemKind::Type(_, None) => {\n+            tcx.ensure().item_bounds(def_id);\n             // #74612: Visit and try to find bad placeholders\n             // even if there is no concrete type.\n             let mut visitor = PlaceholderHirTyCollector::default();"}, {"sha": "4c78f17a6a33d6a5592eea5e4f57a7c6bf8efae8", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -23,19 +23,17 @@ trait Case1 {\n                 Debug\n             >\n         > + Sync>;\n+        //~^^^^^^ ERROR `<<Self as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n+        //~^^^^^^ ERROR `<<Self as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n+        //~^^^ ERROR `<<Self as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n }\n \n pub struct S1;\n impl Case1 for S1 {\n-//~^ ERROR `<L1 as Lam<&'a u8>>::App` doesn't implement `Debug` [E0277]\n     type C = Once<Once<L1>>;\n }\n \n fn assume_case1<T: Case1>() {\n-//~^ ERROR `<_ as Lam<&'a u8>>::App` doesn't implement `Debug` [E0277]\n-//~| ERROR `<<T as Case1>::C as Iterator>::Item` is not an iterator [E0277]\n-//~| ERROR `<<T as Case1>::C as Iterator>::Item` cannot be sent between threads safely [E0277]\n-//~| ERROR `<<T as Case1>::C as Iterator>::Item` cannot be shared between threads safely [E0277]\n     fn assert_a<_0, A>() where A: Iterator<Item = _0>, _0: Debug {}\n     assert_a::<_, T::A>();\n "}, {"sha": "20a087a85a6e81fcb27f443333d43b20714448b7", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 36, "deletions": 61, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,79 +1,54 @@\n-error[E0277]: `<L1 as Lam<&'a u8>>::App` doesn't implement `Debug`\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:29:6\n-   |\n-LL | trait Case1 {\n-   |       ----- required by a bound in this\n-...\n-LL |                 Debug\n-   |                 ----- required by this bound in `Case1`\n-...\n-LL | impl Case1 for S1 {\n-   |      ^^^^^ `<L1 as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = help: the trait `for<'a> Debug` is not implemented for `<L1 as Lam<&'a u8>>::App`\n-\n-error[E0277]: `<<T as Case1>::C as Iterator>::Item` is not an iterator\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:34:20\n-   |\n-LL | fn assume_case1<T: Case1>() {\n-   |                    ^^^^^ `<<T as Case1>::C as Iterator>::Item` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `<<T as Case1>::C as Iterator>::Item`\n+error[E0277]: `<<Self as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:22:5\n+   |\n+LL | /     type C: Clone + Iterator<Item:\n+LL | |         Send + Iterator<Item:\n+LL | |             for<'a> Lam<&'a u8, App:\n+LL | |                 Debug\n+LL | |             >\n+LL | |         > + Sync>;\n+   | |__________________^ `<<Self as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `<<Self as Case1>::C as std::iter::Iterator>::Item`\n help: consider further restricting the associated type\n    |\n-LL | fn assume_case1<T: Case1>() where <<T as Case1>::C as Iterator>::Item: Iterator {\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait Case1 where <<Self as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `<<T as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:34:20\n+error[E0277]: `<<Self as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:23:9\n    |\n-LL | trait Case1 {\n-   |       ----- required by a bound in this\n-LL |     type C: Clone + Iterator<Item:\n LL |         Send + Iterator<Item:\n-   |         ---- required by this bound in `Case1`\n-...\n-LL | fn assume_case1<T: Case1>() {\n-   |                    ^^^^^ `<<T as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n+   |         ^^^^ `<<Self as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n    |\n-   = help: the trait `Send` is not implemented for `<<T as Case1>::C as Iterator>::Item`\n+  ::: $SRC_DIR/libcore/marker.rs:LL:COL\n+   |\n+LL | pub unsafe auto trait Send {\n+   | -------------------------- required by this bound in `std::marker::Send`\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `<<Self as Case1>::C as std::iter::Iterator>::Item`\n help: consider further restricting the associated type\n    |\n-LL | fn assume_case1<T: Case1>() where <<T as Case1>::C as Iterator>::Item: Send {\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait Case1 where <<Self as Case1>::C as std::iter::Iterator>::Item: std::marker::Send {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `<<T as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:34:20\n+error[E0277]: `<<Self as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:13\n    |\n-LL | trait Case1 {\n-   |       ----- required by a bound in this\n-...\n LL |         > + Sync>;\n-   |             ---- required by this bound in `Case1`\n-...\n-LL | fn assume_case1<T: Case1>() {\n-   |                    ^^^^^ `<<T as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n+   |             ^^^^ `<<Self as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n    |\n-   = help: the trait `Sync` is not implemented for `<<T as Case1>::C as Iterator>::Item`\n-help: consider further restricting the associated type\n+  ::: $SRC_DIR/libcore/marker.rs:LL:COL\n    |\n-LL | fn assume_case1<T: Case1>() where <<T as Case1>::C as Iterator>::Item: Sync {\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `Debug`\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:34:20\n+LL | pub unsafe auto trait Sync {\n+   | -------------------------- required by this bound in `std::marker::Sync`\n    |\n-LL | trait Case1 {\n-   |       ----- required by a bound in this\n-...\n-LL |                 Debug\n-   |                 ----- required by this bound in `Case1`\n-...\n-LL | fn assume_case1<T: Case1>() {\n-   |                    ^^^^^ `<_ as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   = help: the trait `std::marker::Sync` is not implemented for `<<Self as Case1>::C as std::iter::Iterator>::Item`\n+help: consider further restricting the associated type\n    |\n-   = help: the trait `for<'a> Debug` is not implemented for `<_ as Lam<&'a u8>>::App`\n+LL | trait Case1 where <<Self as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "4025e0fc5e1a6a2d246de36e89eccc532ce16db9", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// ignore-tidy-linelength\n \n #![feature(associated_type_bounds)]\n \n@@ -18,6 +18,7 @@ impl<'a, 'b> Lam<&'a &'b u8> for L2 { type App = u8; }\n \n trait Case1 {\n     type A: Iterator<Item: Debug>;\n+    //~^ ERROR `<<Self as Case1>::A as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n \n     type B: Iterator<Item: 'static>;\n }\n@@ -30,7 +31,11 @@ impl Case1 for S1 {\n \n // Ensure we don't have opaque `impl Trait` desugaring:\n \n+// What is this supposed to mean? Rustc currently lowers `: Default` in the\n+// bounds of `Out`, but trait selection can't find the bound since it applies\n+// to a type other than `Self::Out`.\n pub trait Foo { type Out: Baz<Assoc: Default>; }\n+//~^ ERROR trait bound `<<Self as Foo>::Out as Baz>::Assoc: std::default::Default` is not satisfied\n pub trait Baz { type Assoc; }\n \n #[derive(Default)]"}, {"sha": "2be37285e2991955402979069c308b5bd8311e35", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -0,0 +1,36 @@\n+error[E0277]: `<<Self as Case1>::A as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n+  --> $DIR/bounds-on-assoc-in-trait.rs:20:28\n+   |\n+LL |     type A: Iterator<Item: Debug>;\n+   |                            ^^^^^ `<<Self as Case1>::A as std::iter::Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   | \n+  ::: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+   |\n+LL | pub trait Debug {\n+   | --------------- required by this bound in `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `<<Self as Case1>::A as std::iter::Iterator>::Item`\n+help: consider further restricting the associated type\n+   |\n+LL | trait Case1 where <<Self as Case1>::A as std::iter::Iterator>::Item: std::fmt::Debug {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `<<Self as Foo>::Out as Baz>::Assoc: std::default::Default` is not satisfied\n+  --> $DIR/bounds-on-assoc-in-trait.rs:37:38\n+   |\n+LL | pub trait Foo { type Out: Baz<Assoc: Default>; }\n+   |                                      ^^^^^^^ the trait `std::default::Default` is not implemented for `<<Self as Foo>::Out as Baz>::Assoc`\n+   | \n+  ::: $SRC_DIR/libcore/default.rs:LL:COL\n+   |\n+LL | pub trait Default: Sized {\n+   | ------------------------ required by this bound in `std::default::Default`\n+   |\n+help: consider further restricting the associated type\n+   |\n+LL | pub trait Foo where <<Self as Foo>::Out as Baz>::Assoc: std::default::Default { type Out: Baz<Assoc: Default>; }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b5941fb80c7e7ef1565845babbb62aceec001633", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -512,31 +512,7 @@ LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:145:43\n-   |\n-LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:147:43\n-   |\n-LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:149:46\n-   |\n-LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:152:40\n+  --> $DIR/duplicate.rs:167:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here"}, {"sha": "9d084203e3a8664c3962dedb90c85445bc1d1555", "filename": "src/test/ui/associated-types/associated-types-unconstrained.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,11 +1,14 @@\n-error[E0284]: type annotations needed\n+error[E0283]: type annotations needed\n   --> $DIR/associated-types-unconstrained.rs:14:20\n    |\n+LL |     fn bar() -> isize;\n+   |     ------------------ required by `Foo::bar`\n+...\n LL |     let x: isize = Foo::bar();\n    |                    ^^^^^^^^ cannot infer type\n    |\n-   = note: cannot satisfy `<_ as Foo>::A == _`\n+   = note: cannot satisfy `_: Foo`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0284`.\n+For more information about this error, try `rustc --explain E0283`."}, {"sha": "afb2b3df716ebda7e0b2828b9518dcfcbae60a06", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -6,11 +6,8 @@ trait Tr {\n     type B = Self::A;\n }\n \n-// ...but is an error in any impl that doesn't override at least one of the defaults\n impl Tr for () {}\n-//~^ ERROR overflow evaluating the requirement\n \n-// As soon as at least one is redefined, it works:\n impl Tr for u8 {\n     type A = u8;\n }\n@@ -24,16 +21,14 @@ impl Tr for u32 {\n     type B = u8;\n }\n \n-// ...but only if this actually breaks the cycle\n+// ...but not in an impl that redefines one of the types.\n impl Tr for bool {\n-    //~^ ERROR type mismatch resolving `<bool as Tr>::B == _`\n     type A = Box<Self::B>;\n     //~^ ERROR type mismatch resolving `<bool as Tr>::B == _`\n }\n // (the error is shown twice for some reason)\n \n impl Tr for usize {\n-    //~^ ERROR type mismatch resolving `<usize as Tr>::B == _`\n     type B = &'static Self::A;\n     //~^ ERROR type mismatch resolving `<usize as Tr>::A == _`\n }"}, {"sha": "28decb0934ca70309e95847108ed1d47ed5984cd", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.stderr", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,34 +1,16 @@\n-error[E0275]: overflow evaluating the requirement `<() as Tr>::B == _`\n-  --> $DIR/defaults-cyclic-fail-1.rs:10:6\n-   |\n-LL | impl Tr for () {}\n-   |      ^^\n-\n-error[E0271]: type mismatch resolving `<bool as Tr>::B == _`\n-  --> $DIR/defaults-cyclic-fail-1.rs:28:6\n-   |\n-LL | impl Tr for bool {\n-   |      ^^ cyclic type of infinite size\n-\n-error[E0271]: type mismatch resolving `<usize as Tr>::B == _`\n-  --> $DIR/defaults-cyclic-fail-1.rs:35:6\n-   |\n-LL | impl Tr for usize {\n-   |      ^^ cyclic type of infinite size\n-\n-error[E0271]: type mismatch resolving `<bool as Tr>::B == _`\n-  --> $DIR/defaults-cyclic-fail-1.rs:30:5\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-1.rs:26:5\n    |\n LL |     type A = Box<Self::B>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n \n-error[E0271]: type mismatch resolving `<usize as Tr>::A == _`\n-  --> $DIR/defaults-cyclic-fail-1.rs:37:5\n+error[E0275]: overflow evaluating the requirement `<usize as Tr>::A`\n+  --> $DIR/defaults-cyclic-fail-1.rs:32:5\n    |\n LL |     type B = &'static Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0271, E0275.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "ba4bb0d5a296bbc7fed770e052082ab0d3f4440c", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -8,11 +8,8 @@ trait Tr {\n     type B = Box<Self::A>;\n }\n \n-// ...but is an error in any impl that doesn't override at least one of the defaults\n impl Tr for () {}\n-//~^ ERROR type mismatch resolving `<() as Tr>::B == _`\n \n-// As soon as at least one is redefined, it works:\n impl Tr for u8 {\n     type A = u8;\n }\n@@ -26,16 +23,13 @@ impl Tr for u32 {\n     type B = u8;\n }\n \n-// ...but only if this actually breaks the cycle\n impl Tr for bool {\n-    //~^ ERROR type mismatch resolving `<bool as Tr>::B == _`\n     type A = Box<Self::B>;\n     //~^ ERROR type mismatch resolving `<bool as Tr>::B == _`\n }\n // (the error is shown twice for some reason)\n \n impl Tr for usize {\n-    //~^ ERROR type mismatch resolving `<usize as Tr>::B == _`\n     type B = &'static Self::A;\n     //~^ ERROR type mismatch resolving `<usize as Tr>::A == _`\n }"}, {"sha": "6b6d5348c153be9e2e9c8ccbb4cd67165dc52d6e", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.stderr", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,33 +1,15 @@\n-error[E0271]: type mismatch resolving `<() as Tr>::B == _`\n-  --> $DIR/defaults-cyclic-fail-2.rs:12:6\n-   |\n-LL | impl Tr for () {}\n-   |      ^^ cyclic type of infinite size\n-\n-error[E0271]: type mismatch resolving `<bool as Tr>::B == _`\n-  --> $DIR/defaults-cyclic-fail-2.rs:30:6\n-   |\n-LL | impl Tr for bool {\n-   |      ^^ cyclic type of infinite size\n-\n-error[E0271]: type mismatch resolving `<usize as Tr>::B == _`\n-  --> $DIR/defaults-cyclic-fail-2.rs:37:6\n-   |\n-LL | impl Tr for usize {\n-   |      ^^ cyclic type of infinite size\n-\n-error[E0271]: type mismatch resolving `<bool as Tr>::B == _`\n-  --> $DIR/defaults-cyclic-fail-2.rs:32:5\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-2.rs:27:5\n    |\n LL |     type A = Box<Self::B>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n \n-error[E0271]: type mismatch resolving `<usize as Tr>::A == _`\n-  --> $DIR/defaults-cyclic-fail-2.rs:39:5\n+error[E0275]: overflow evaluating the requirement `<usize as Tr>::A`\n+  --> $DIR/defaults-cyclic-fail-2.rs:33:5\n    |\n LL |     type B = &'static Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0271`."}, {"sha": "69be300b16f37a199e4cc71ca37462eb023ad8a2", "filename": "src/test/ui/associated-types/defaults-suitability.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,10 +1,8 @@\n //! Checks that associated type defaults are properly validated.\n //!\n //! This means:\n-//! * Default types are wfchecked\n //! * Default types are checked against where clauses on the assoc. type\n-//!   (eg. `type Assoc: Clone = NotClone`), and also against where clauses on\n-//!   the trait itself when possible\n+//!   (eg. `type Assoc: Clone = NotClone`)\n \n #![feature(associated_type_defaults)]\n \n@@ -17,15 +15,12 @@ trait Tr {\n }\n \n // Where-clauses defined on the trait must also be considered\n-trait Tr2 where Self::Ty: Clone {\n-    //~^ ERROR the trait bound `NotClone: Clone` is not satisfied\n+trait Tr2\n+where\n+    Self::Ty: Clone,\n+{\n     type Ty = NotClone;\n-}\n-\n-// Independent of where-clauses (there are none here), default types must always be wf\n-trait Tr3 {\n-    type Ty = Vec<[u8]>;\n-    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+    //~^ ERROR the trait bound `NotClone: std::clone::Clone` is not satisfied\n }\n \n // Involved type parameters must fulfill all bounds required by defaults that mention them\n@@ -43,25 +38,24 @@ trait Bar: Sized {\n trait IsU8<T> {}\n impl<T> IsU8<u8> for T {}\n \n-// Test that mentioning the assoc. type inside where clauses works\n+// Test that mentioning the assoc. type inside where clauses is not allowed\n trait C where\n     Vec<Self::Assoc>: Clone,\n     Self::Assoc: IsU8<Self::Assoc>,\n     bool: IsU8<Self::Assoc>,\n {\n     type Assoc = u8;\n+    //~^ ERROR the trait bound `u8: IsU8<<Self as C>::Assoc>` is not satisfied\n }\n \n // Test that we get all expected errors if that default is unsuitable\n trait D where\n     Vec<Self::Assoc>: Clone,\n-    //~^ ERROR the trait bound `NotClone: Clone` is not satisfied\n     Self::Assoc: IsU8<Self::Assoc>,\n-    //~^ ERROR the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n     bool: IsU8<Self::Assoc>,\n-    //~^ ERROR the trait bound `bool: IsU8<NotClone>` is not satisfied\n {\n     type Assoc = NotClone;\n+    //~^ ERROR the trait bound `NotClone: IsU8<<Self as D>::Assoc>` is not satisfied\n }\n \n // Test behavior of the check when defaults refer to other defaults:\n@@ -85,18 +79,20 @@ trait Foo25<T: Clone> {\n \n // Adding the `Baz: Clone` bound isn't enough since the default is type\n // parameter `T`, which also might not be `Clone`.\n-trait Foo3<T> where\n+trait Foo3<T>\n+where\n     Self::Bar: Clone,\n     Self::Baz: Clone,\n-    //~^ ERROR the trait bound `T: Clone` is not satisfied\n {\n     type Bar = Vec<Self::Baz>;\n     type Baz = T;\n+    //~^ ERROR the trait bound `T: std::clone::Clone` is not satisfied\n }\n \n // This one finally works, with `Clone` bounds on all assoc. types and the type\n // parameter.\n-trait Foo4<T> where\n+trait Foo4<T>\n+where\n     T: Clone,\n {\n     type Bar: Clone = Vec<Self::Baz>;"}, {"sha": "4d8e6f1584d1d374a2effb5c646fe4d8c03ba611", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 71, "deletions": 98, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,27 +1,31 @@\n-error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:15:14\n+error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:13:5\n    |\n-LL | trait Tr {\n-   | -------- required by `Tr`\n LL |     type Ty: Clone = NotClone;\n-   |              ^^^^^ the trait `Clone` is not implemented for `NotClone`\n+   |     ^^^^^^^^^-----^^^^^^^^^^^^\n+   |     |        |\n+   |     |        required by this bound in `Tr::Ty`\n+   |     the trait `std::clone::Clone` is not implemented for `NotClone`\n \n-error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:20:27\n+error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:19:5\n    |\n LL | trait Tr2 where Self::Ty: Clone {\n-   | --------------------------^^^^^\n-   | |                         |\n-   | |                         the trait `Clone` is not implemented for `NotClone`\n-   | required by `Tr2`\n+   |                           ----- required by this bound in `Tr2::Ty`\n+LL |     type Ty = NotClone;\n+   |     ^^^^^--^^^^^^^^^^^^\n+   |     |    |\n+   |     |    required by a bound in this\n+   |     the trait `std::clone::Clone` is not implemented for `NotClone`\n \n-error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:33:15\n+error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:25:5\n    |\n-LL | trait Foo<T> {\n-   | ------------ required by `Foo`\n LL |     type Bar: Clone = Vec<T>;\n-   |               ^^^^^ the trait `Clone` is not implemented for `T`\n+   |     ^^^^^^^^^^-----^^^^^^^^^^\n+   |     |         |\n+   |     |         required by this bound in `Foo::Bar`\n+   |     the trait `std::clone::Clone` is not implemented for `T`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<T>`\n help: consider restricting type parameter `T`\n@@ -30,116 +34,85 @@ LL | trait Foo<T: Clone> {\n    |            ^^^^^^^\n \n error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n-  --> $DIR/defaults-suitability.rs:39:17\n+  --> $DIR/defaults-suitability.rs:31:5\n    |\n-LL | trait Bar: Sized {\n-   | ---------------- required by `Bar`\n-LL |     // `(): Foo<Self>` might hold for some possible impls but not all.\n LL |     type Assoc: Foo<Self> = ();\n-   |                 ^^^^^^^^^ the trait `Foo<Self>` is not implemented for `()`\n+   |     ^^^^^^^^^^^^---------^^^^^^\n+   |     |           |\n+   |     |           required by this bound in `Bar::Assoc`\n+   |     the trait `Foo<Self>` is not implemented for `()`\n \n-error[E0277]: the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n-  --> $DIR/defaults-suitability.rs:59:18\n-   |\n-LL | / trait D where\n-LL | |     Vec<Self::Assoc>: Clone,\n-LL | |\n-LL | |     Self::Assoc: IsU8<Self::Assoc>,\n-   | |                  ^^^^^^^^^^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `NotClone`\n-...  |\n-LL | |     type Assoc = NotClone;\n-LL | | }\n-   | |_- required by `D`\n+error[E0277]: the trait bound `u8: IsU8<<Self as C>::Assoc>` is not satisfied\n+  --> $DIR/defaults-suitability.rs:44:5\n+   |\n+LL |     Self::Assoc: IsU8<Self::Assoc>,\n+   |                  ----------------- required by this bound in `C::Assoc`\n+...\n+LL |     type Assoc = u8;\n+   |     ^^^^^-----^^^^^^\n+   |     |    |\n+   |     |    required by a bound in this\n+   |     the trait `IsU8<<Self as C>::Assoc>` is not implemented for `u8`\n \n-error[E0277]: the trait bound `bool: IsU8<NotClone>` is not satisfied\n-  --> $DIR/defaults-suitability.rs:61:11\n-   |\n-LL | / trait D where\n-LL | |     Vec<Self::Assoc>: Clone,\n-LL | |\n-LL | |     Self::Assoc: IsU8<Self::Assoc>,\n-LL | |\n-LL | |     bool: IsU8<Self::Assoc>,\n-   | |           ^^^^^^^^^^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `bool`\n-...  |\n-LL | |     type Assoc = NotClone;\n-LL | | }\n-   | |_- required by `D`\n+error[E0277]: the trait bound `NotClone: IsU8<<Self as D>::Assoc>` is not satisfied\n+  --> $DIR/defaults-suitability.rs:54:5\n+   |\n+LL |     Self::Assoc: IsU8<Self::Assoc>,\n+   |                  ----------------- required by this bound in `D::Assoc`\n+...\n+LL |     type Assoc = NotClone;\n+   |     ^^^^^-----^^^^^^^^^^^^\n+   |     |    |\n+   |     |    required by a bound in this\n+   |     the trait `IsU8<<Self as D>::Assoc>` is not implemented for `NotClone`\n \n-error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:57:23\n-   |\n-LL | / trait D where\n-LL | |     Vec<Self::Assoc>: Clone,\n-   | |                       ^^^^^ the trait `Clone` is not implemented for `NotClone`\n-LL | |\n-LL | |     Self::Assoc: IsU8<Self::Assoc>,\n-...  |\n-LL | |     type Assoc = NotClone;\n-LL | | }\n-   | |_- required by `D`\n-   |\n-   = note: required because of the requirements on the impl of `Clone` for `Vec<NotClone>`\n-\n-error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:72:15\n+error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:63:5\n    |\n-LL | trait Foo2<T> {\n-   | ------------- required by `Foo2`\n LL |     type Bar: Clone = Vec<Self::Baz>;\n-   |               ^^^^^ the trait `Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n+   |     ^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^\n+   |     |         |\n+   |     |         required by this bound in `Foo2::Bar`\n+   |     the trait `std::clone::Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<<Self as Foo2<T>>::Baz>`\n help: consider further restricting the associated type\n    |\n LL | trait Foo2<T> where <Self as Foo2<T>>::Baz: Clone {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:81:15\n+error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:72:5\n    |\n-LL | trait Foo25<T: Clone> {\n-   | --------------------- required by `Foo25`\n LL |     type Bar: Clone = Vec<Self::Baz>;\n-   |               ^^^^^ the trait `Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n+   |     ^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^\n+   |     |         |\n+   |     |         required by this bound in `Foo25::Bar`\n+   |     the trait `std::clone::Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<<Self as Foo25<T>>::Baz>`\n help: consider further restricting the associated type\n    |\n LL | trait Foo25<T: Clone> where <Self as Foo25<T>>::Baz: Clone {\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:90:16\n-   |\n-LL | / trait Foo3<T> where\n-LL | |     Self::Bar: Clone,\n-LL | |     Self::Baz: Clone,\n-   | |                ^^^^^ the trait `Clone` is not implemented for `T`\n-LL | |\n-...  |\n-LL | |     type Baz = T;\n-LL | | }\n-   | |_- required by `Foo3`\n+error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:84:5\n+   |\n+LL |     Self::Baz: Clone,\n+   |                ----- required by this bound in `Foo3::Baz`\n+...\n+LL |     type Baz = T;\n+   |     ^^^^^---^^^^^\n+   |     |    |\n+   |     |    required by a bound in this\n+   |     the trait `std::clone::Clone` is not implemented for `T`\n    |\n help: consider further restricting type parameter `T`\n    |\n LL |     Self::Baz: Clone, T: Clone\n    |                     ^^^^^^^^^^\n \n-error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/defaults-suitability.rs:27:5\n-   |\n-LL |     type Ty = Vec<[u8]>;\n-   |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   | \n-  ::: $SRC_DIR/alloc/src/vec.rs:LL:COL\n-   |\n-LL | pub struct Vec<T> {\n-   |                - required by this bound in `Vec`\n-   |\n-   = help: the trait `Sized` is not implemented for `[u8]`\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "093e32f66be0eaea9c829ce55a22b7b0917b20f8", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -11,22 +11,13 @@\n \n use std::{\n     fmt::Display,\n-    ops::{AddAssign, Deref}\n+    ops::{AddAssign, Deref},\n };\n \n-\n trait UncheckedCopy: Sized {\n     // This Output is said to be Copy. Yet we default to Self\n     // and it's accepted, not knowing if Self ineed is Copy\n-    type Output: Copy\n-    //~^ ERROR the trait bound `Self: Copy` is not satisfied\n-    + Deref<Target = str>\n-    //~^ ERROR the trait bound `Self: Deref` is not satisfied\n-    + AddAssign<&'static str>\n-    //~^ ERROR cannot add-assign `&'static str` to `Self`\n-    + From<Self>\n-    + Display = Self;\n-    //~^ ERROR `Self` doesn't implement `std::fmt::Display`\n+    type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n \n     // We said the Output type was Copy, so we can Copy it freely!\n     fn unchecked_copy(other: &Self::Output) -> Self::Output {\n@@ -39,10 +30,6 @@ trait UncheckedCopy: Sized {\n }\n \n impl<T> UncheckedCopy for T {}\n-//~^ ERROR `T` doesn't implement `std::fmt::Display`\n-//~| ERROR the trait bound `T: Deref` is not satisfied\n-//~| ERROR cannot add-assign `&'static str` to `T`\n-//~| ERROR the trait bound `T: Copy` is not satisfied\n \n fn bug<T: UncheckedCopy>(origin: T) {\n     let origin = T::make_origin(origin);"}, {"sha": "a8584d6dc5c1b5515b8688ae0ea43148e71b0a0f", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 72, "deletions": 110, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,129 +1,91 @@\n-error[E0277]: the trait bound `Self: Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:21:18\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n-...\n-LL |     type Output: Copy\n-   |                  ^^^^ the trait `Copy` is not implemented for `Self`\n-   |\n-help: consider further restricting `Self`\n-   |\n-LL | trait UncheckedCopy: Sized + Copy {\n-   |                            ^^^^^^\n-\n-error[E0277]: cannot add-assign `&'static str` to `Self`\n-  --> $DIR/defaults-unsound-62211-1.rs:25:7\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n-...\n-LL |     + AddAssign<&'static str>\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n-   |\n-help: consider further restricting `Self`\n-   |\n-LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `Self: Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:23:7\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n-...\n-LL |     + Deref<Target = str>\n-   |       ^^^^^^^^^^^^^^^^^^^ the trait `Deref` is not implemented for `Self`\n-   |\n-help: consider further restricting `Self`\n-   |\n-LL | trait UncheckedCopy: Sized + Deref {\n-   |                            ^^^^^^^\n-\n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-1.rs:28:7\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n-...\n-LL |     + Display = Self;\n-   |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n+  --> $DIR/defaults-unsound-62211-1.rs:21:5\n+   |\n+LL |       type Output: Copy\n+   |       ^    ------ required by a bound in this\n+   |  _____|\n+   | |\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |         + From<Self>\n+LL | |         + Display = Self;\n+   | |___________-------_______^ `Self` cannot be formatted with the default formatter\n+   |             |\n+   |             required by this bound in `UncheckedCopy::Output`\n    |\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + std::fmt::Display {\n    |                            ^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `T` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-1.rs:41:9\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   |       ------------- required by a bound in this\n-...\n-LL |     + Display = Self;\n-   |       ------- required by this bound in `UncheckedCopy`\n-...\n-LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n-   |\n-   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-help: consider restricting type parameter `T`\n+error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:21:5\n+   |\n+LL |       type Output: Copy\n+   |       ^    ------ required by a bound in this\n+   |  _____|\n+   | |\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | |         + Deref<Target = str>\n+   | |           ------------------- required by this bound in `UncheckedCopy::Output`\n+LL | |         + AddAssign<&'static str>\n+LL | |         + From<Self>\n+LL | |         + Display = Self;\n+   | |_________________________^ the trait `std::ops::Deref` is not implemented for `Self`\n    |\n-LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n-   |       ^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `T: Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:41:9\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   |       ------------- required by a bound in this\n-...\n-LL |     + Deref<Target = str>\n-   |       ------------------- required by this bound in `UncheckedCopy`\n-...\n-LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ the trait `Deref` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n+help: consider further restricting `Self`\n    |\n-LL | impl<T: Deref> UncheckedCopy for T {}\n-   |       ^^^^^^^\n+LL | trait UncheckedCopy: Sized + Deref {\n+   |                            ^^^^^^^\n \n-error[E0277]: cannot add-assign `&'static str` to `T`\n-  --> $DIR/defaults-unsound-62211-1.rs:41:9\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   |       ------------- required by a bound in this\n-...\n-LL |     + AddAssign<&'static str>\n-   |       ----------------------- required by this bound in `UncheckedCopy`\n-...\n-LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n+error[E0277]: cannot add-assign `&'static str` to `Self`\n+  --> $DIR/defaults-unsound-62211-1.rs:21:5\n+   |\n+LL |       type Output: Copy\n+   |       ^    ------ required by a bound in this\n+   |  _____|\n+   | |\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |         + AddAssign<&'static str>\n+   | |           ----------------------- required by this bound in `UncheckedCopy::Output`\n+LL | |         + From<Self>\n+LL | |         + Display = Self;\n+   | |_________________________^ no implementation for `Self += &'static str`\n    |\n-help: consider restricting type parameter `T`\n+help: consider further restricting `Self`\n    |\n-LL | impl<T: AddAssign<&'static str>> UncheckedCopy for T {}\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait UncheckedCopy: Sized + std::ops::AddAssign<&'static str> {\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:41:9\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   |       ------------- required by a bound in this\n-...\n-LL |     type Output: Copy\n-   |                  ---- required by this bound in `UncheckedCopy`\n-...\n-LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:21:5\n+   |\n+LL |       type Output: Copy\n+   |       ^            ---- required by this bound in `UncheckedCopy::Output`\n+   |  _____|\n+   | |\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |         + From<Self>\n+LL | |         + Display = Self;\n+   | |_________________________^ the trait `std::marker::Copy` is not implemented for `Self`\n    |\n-help: consider restricting type parameter `T`\n+help: consider further restricting `Self`\n    |\n-LL | impl<T: Copy> UncheckedCopy for T {}\n-   |       ^^^^^^\n+LL | trait UncheckedCopy: Sized + std::marker::Copy {\n+   |                            ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "44bbdc9f52b84a7b33594420e1b5ceaaae3da57a", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -11,22 +11,13 @@\n \n use std::{\n     fmt::Display,\n-    ops::{AddAssign, Deref}\n+    ops::{AddAssign, Deref},\n };\n \n-\n trait UncheckedCopy: Sized {\n     // This Output is said to be Copy. Yet we default to Self\n     // and it's accepted, not knowing if Self ineed is Copy\n-    type Output: Copy\n-    //~^ ERROR the trait bound `Self: Copy` is not satisfied\n-    + Deref<Target = str>\n-    //~^ ERROR the trait bound `Self: Deref` is not satisfied\n-    + AddAssign<&'static str>\n-    //~^ ERROR cannot add-assign `&'static str` to `Self`\n-    + From<Self>\n-    + Display = Self;\n-    //~^ ERROR `Self` doesn't implement `std::fmt::Display`\n+    type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n \n     // We said the Output type was Copy, so we can Copy it freely!\n     fn unchecked_copy(other: &Self::Output) -> Self::Output {\n@@ -39,10 +30,6 @@ trait UncheckedCopy: Sized {\n }\n \n impl<T> UncheckedCopy for T {}\n-//~^ ERROR `T` doesn't implement `std::fmt::Display`\n-//~| ERROR the trait bound `T: Deref` is not satisfied\n-//~| ERROR cannot add-assign `&'static str` to `T`\n-//~| ERROR the trait bound `T: Copy` is not satisfied\n \n fn bug<T: UncheckedCopy>(origin: T) {\n     let origin = T::make_origin(origin);"}, {"sha": "6a8e3ff7b626d42e41cdf9ada1b98fa0bf569b1c", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 72, "deletions": 110, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,129 +1,91 @@\n-error[E0277]: the trait bound `Self: Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:21:18\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n-...\n-LL |     type Output: Copy\n-   |                  ^^^^ the trait `Copy` is not implemented for `Self`\n-   |\n-help: consider further restricting `Self`\n-   |\n-LL | trait UncheckedCopy: Sized + Copy {\n-   |                            ^^^^^^\n-\n-error[E0277]: cannot add-assign `&'static str` to `Self`\n-  --> $DIR/defaults-unsound-62211-2.rs:25:7\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n-...\n-LL |     + AddAssign<&'static str>\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n-   |\n-help: consider further restricting `Self`\n-   |\n-LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `Self: Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:23:7\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n-...\n-LL |     + Deref<Target = str>\n-   |       ^^^^^^^^^^^^^^^^^^^ the trait `Deref` is not implemented for `Self`\n-   |\n-help: consider further restricting `Self`\n-   |\n-LL | trait UncheckedCopy: Sized + Deref {\n-   |                            ^^^^^^^\n-\n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-2.rs:28:7\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n-...\n-LL |     + Display = Self;\n-   |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n+  --> $DIR/defaults-unsound-62211-2.rs:21:5\n+   |\n+LL |       type Output: Copy\n+   |       ^    ------ required by a bound in this\n+   |  _____|\n+   | |\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |         + From<Self>\n+LL | |         + Display = Self;\n+   | |___________-------_______^ `Self` cannot be formatted with the default formatter\n+   |             |\n+   |             required by this bound in `UncheckedCopy::Output`\n    |\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + std::fmt::Display {\n    |                            ^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `T` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-2.rs:41:9\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   |       ------------- required by a bound in this\n-...\n-LL |     + Display = Self;\n-   |       ------- required by this bound in `UncheckedCopy`\n-...\n-LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n-   |\n-   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-help: consider restricting type parameter `T`\n+error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:21:5\n+   |\n+LL |       type Output: Copy\n+   |       ^    ------ required by a bound in this\n+   |  _____|\n+   | |\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | |         + Deref<Target = str>\n+   | |           ------------------- required by this bound in `UncheckedCopy::Output`\n+LL | |         + AddAssign<&'static str>\n+LL | |         + From<Self>\n+LL | |         + Display = Self;\n+   | |_________________________^ the trait `std::ops::Deref` is not implemented for `Self`\n    |\n-LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n-   |       ^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `T: Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:41:9\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   |       ------------- required by a bound in this\n-...\n-LL |     + Deref<Target = str>\n-   |       ------------------- required by this bound in `UncheckedCopy`\n-...\n-LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ the trait `Deref` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n+help: consider further restricting `Self`\n    |\n-LL | impl<T: Deref> UncheckedCopy for T {}\n-   |       ^^^^^^^\n+LL | trait UncheckedCopy: Sized + Deref {\n+   |                            ^^^^^^^\n \n-error[E0277]: cannot add-assign `&'static str` to `T`\n-  --> $DIR/defaults-unsound-62211-2.rs:41:9\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   |       ------------- required by a bound in this\n-...\n-LL |     + AddAssign<&'static str>\n-   |       ----------------------- required by this bound in `UncheckedCopy`\n-...\n-LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n+error[E0277]: cannot add-assign `&'static str` to `Self`\n+  --> $DIR/defaults-unsound-62211-2.rs:21:5\n+   |\n+LL |       type Output: Copy\n+   |       ^    ------ required by a bound in this\n+   |  _____|\n+   | |\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |         + AddAssign<&'static str>\n+   | |           ----------------------- required by this bound in `UncheckedCopy::Output`\n+LL | |         + From<Self>\n+LL | |         + Display = Self;\n+   | |_________________________^ no implementation for `Self += &'static str`\n    |\n-help: consider restricting type parameter `T`\n+help: consider further restricting `Self`\n    |\n-LL | impl<T: AddAssign<&'static str>> UncheckedCopy for T {}\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait UncheckedCopy: Sized + std::ops::AddAssign<&'static str> {\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:41:9\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   |       ------------- required by a bound in this\n-...\n-LL |     type Output: Copy\n-   |                  ---- required by this bound in `UncheckedCopy`\n-...\n-LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:21:5\n+   |\n+LL |       type Output: Copy\n+   |       ^            ---- required by this bound in `UncheckedCopy::Output`\n+   |  _____|\n+   | |\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |         + From<Self>\n+LL | |         + Display = Self;\n+   | |_________________________^ the trait `std::marker::Copy` is not implemented for `Self`\n    |\n-help: consider restricting type parameter `T`\n+help: consider further restricting `Self`\n    |\n-LL | impl<T: Copy> UncheckedCopy for T {}\n-   |       ^^^^^^\n+LL | trait UncheckedCopy: Sized + std::marker::Copy {\n+   |                            ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "99b512503346598df58a334ccf7128a3926460bc", "filename": "src/test/ui/associated-types/defaults-wf.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -0,0 +1,11 @@\n+// Check that associated type defaults are wf checked.\n+\n+#![feature(associated_type_defaults)]\n+\n+// Default types must always be wf\n+trait Tr3 {\n+    type Ty = Vec<[u8]>;\n+    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+}\n+\n+fn main() {}"}, {"sha": "aeb7b6cae1906c5324bf3251f6859898d8f08a28", "filename": "src/test/ui/associated-types/defaults-wf.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/defaults-wf.rs:7:5\n+   |\n+LL |     type Ty = Vec<[u8]>;\n+   |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/liballoc/vec.rs:LL:COL\n+   |\n+LL | pub struct Vec<T> {\n+   |                - required by this bound in `std::vec::Vec`\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6a63b3e0936742df7ba2e727c15b1ec2442e463f", "filename": "src/test/ui/associated-types/issue-43924.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -4,12 +4,13 @@\n // type-checked.\n \n trait Foo<T: Default + ToString> {\n-    type Out: Default + ToString + ?Sized = dyn ToString;  //~ error: not satisfied\n+    type Out: Default + ToString + ?Sized = dyn ToString;  //~ ERROR not satisfied\n }\n \n-impl Foo<u32> for () {}  //~ error: not satisfied\n-impl Foo<u64> for () {}  //~ error: not satisfied\n+impl Foo<u32> for () {}\n+impl Foo<u64> for () {}\n \n fn main() {\n     assert_eq!(<() as Foo<u32>>::Out::default().to_string(), \"false\");\n+    //~^ ERROR no function or associated item named `default` found for trait object\n }"}, {"sha": "9bcedb05ed4d0b8a76241e790967e2de52c48d27", "filename": "src/test/ui/associated-types/issue-43924.stderr", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,33 +1,19 @@\n-error[E0277]: the trait bound `(dyn ToString + 'static): Default` is not satisfied\n-  --> $DIR/issue-43924.rs:7:15\n+error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n+  --> $DIR/issue-43924.rs:7:5\n    |\n-LL | trait Foo<T: Default + ToString> {\n-   | -------------------------------- required by `Foo`\n LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n-   |               ^^^^^^^ the trait `Default` is not implemented for `(dyn ToString + 'static)`\n+   |     ^^^^^^^^^^-------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |         |\n+   |     |         required by this bound in `Foo::Out`\n+   |     the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n \n-error[E0277]: the trait bound `(dyn ToString + 'static): Default` is not satisfied\n-  --> $DIR/issue-43924.rs:10:6\n+error[E0599]: no function or associated item named `default` found for trait object `(dyn std::string::ToString + 'static)` in the current scope\n+  --> $DIR/issue-43924.rs:14:39\n    |\n-LL | trait Foo<T: Default + ToString> {\n-   |       --- required by a bound in this\n-LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n-   |               ------- required by this bound in `Foo`\n-...\n-LL | impl Foo<u32> for () {}\n-   |      ^^^^^^^^ the trait `Default` is not implemented for `(dyn ToString + 'static)`\n-\n-error[E0277]: the trait bound `(dyn ToString + 'static): Default` is not satisfied\n-  --> $DIR/issue-43924.rs:11:6\n-   |\n-LL | trait Foo<T: Default + ToString> {\n-   |       --- required by a bound in this\n-LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n-   |               ------- required by this bound in `Foo`\n-...\n-LL | impl Foo<u64> for () {}\n-   |      ^^^^^^^^ the trait `Default` is not implemented for `(dyn ToString + 'static)`\n+LL |     assert_eq!(<() as Foo<u32>>::Out::default().to_string(), \"false\");\n+   |                                       ^^^^^^^ function or associated item not found in `(dyn std::string::ToString + 'static)`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0599.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "16ae07687e2c7f355dbd56a02d022201e08db5b8", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,10 +1,11 @@\n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/issue-63593.rs:9:5\n    |\n-LL | trait MyTrait {\n-   | ------------- required by `MyTrait`\n LL |     type This = Self;\n-   |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |     ^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     doesn't have a size known at compile-time\n+   |     required by this bound in `MyTrait::This`\n    |\n help: consider further restricting `Self`\n    |"}, {"sha": "9345140558b079ba036890db7dea14cf5bdb7b21", "filename": "src/test/ui/associated-types/issue-65774-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -14,7 +14,6 @@ trait MPU {\n struct S;\n \n impl MPU for S { }\n-//~^ ERROR the trait bound `T: MyDisplay` is not satisfied\n \n trait MyWrite {\n     fn my_write(&self, _: &dyn MyDisplay) { }\n@@ -43,6 +42,7 @@ impl ProcessType for Process {\n         // FulfillmentError(Obligation(predicate=Binder(TraitPredicate(<T as MyDisplay>)),\n         // depth=1),Unimplemented)\n         let closure = |config: &mut <S as MPU>::MpuConfig| writer.my_write(&config);\n+        //~^ ERROR the trait bound `T: MyDisplay` is not satisfied\n         closure(valref);\n     }\n }"}, {"sha": "f644eb5a1f47887b8060e5957ca4e674918605cf", "filename": "src/test/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,21 +1,20 @@\n error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n-  --> $DIR/issue-65774-1.rs:10:21\n+  --> $DIR/issue-65774-1.rs:10:5\n    |\n-LL | trait MPU {\n-   | --------- required by `MPU`\n LL |     type MpuConfig: MyDisplay = T;\n-   |                     ^^^^^^^^^ the trait `MyDisplay` is not implemented for `T`\n+   |     ^^^^^^^^^^^^^^^^---------^^^^^\n+   |     |               |\n+   |     |               required by this bound in `MPU::MpuConfig`\n+   |     the trait `MyDisplay` is not implemented for `T`\n \n error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n-  --> $DIR/issue-65774-1.rs:16:6\n+  --> $DIR/issue-65774-1.rs:44:76\n    |\n-LL | trait MPU {\n-   |       --- required by a bound in this\n-LL |     type MpuConfig: MyDisplay = T;\n-   |                     --------- required by this bound in `MPU`\n-...\n-LL | impl MPU for S { }\n-   |      ^^^ the trait `MyDisplay` is not implemented for `T`\n+LL |         let closure = |config: &mut <S as MPU>::MpuConfig| writer.my_write(&config);\n+   |                                                                            ^^^^^^^ the trait `MyDisplay` is not implemented for `T`\n+   |\n+   = note: required because of the requirements on the impl of `MyDisplay` for `&mut T`\n+   = note: required for the cast to the object type `dyn MyDisplay`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "171e0893b4719a570837dd78c84e672595a04154", "filename": "src/test/ui/associated-types/issue-65774-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -14,7 +14,6 @@ trait MPU {\n struct S;\n \n impl MPU for S { }\n-//~^ ERROR the trait bound `T: MyDisplay` is not satisfied\n \n trait MyWrite {\n     fn my_write(&self, _: &dyn MyDisplay) { }\n@@ -38,6 +37,7 @@ impl ProcessType for Process {\n         // // `Unimplemented` selecting `Binder(<T as MyDisplay>)` during codegen\n         //\n         writer.my_write(valref)\n+        //~^ ERROR the trait bound `T: MyDisplay` is not satisfied\n \n         // This one causes the ICE:\n         // FulfillmentError(Obligation(predicate=Binder(TraitPredicate(<T as MyDisplay>)),"}, {"sha": "572a9cf190952116463f1a238d6822e52c5442f9", "filename": "src/test/ui/associated-types/issue-65774-2.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,21 +1,19 @@\n error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n-  --> $DIR/issue-65774-2.rs:10:21\n+  --> $DIR/issue-65774-2.rs:10:5\n    |\n-LL | trait MPU {\n-   | --------- required by `MPU`\n LL |     type MpuConfig: MyDisplay = T;\n-   |                     ^^^^^^^^^ the trait `MyDisplay` is not implemented for `T`\n+   |     ^^^^^^^^^^^^^^^^---------^^^^^\n+   |     |               |\n+   |     |               required by this bound in `MPU::MpuConfig`\n+   |     the trait `MyDisplay` is not implemented for `T`\n \n error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n-  --> $DIR/issue-65774-2.rs:16:6\n+  --> $DIR/issue-65774-2.rs:39:25\n    |\n-LL | trait MPU {\n-   |       --- required by a bound in this\n-LL |     type MpuConfig: MyDisplay = T;\n-   |                     --------- required by this bound in `MPU`\n-...\n-LL | impl MPU for S { }\n-   |      ^^^ the trait `MyDisplay` is not implemented for `T`\n+LL |         writer.my_write(valref)\n+   |                         ^^^^^^ the trait `MyDisplay` is not implemented for `T`\n+   |\n+   = note: required for the cast to the object type `dyn MyDisplay`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "94758250346d12329b81c0674d8115ec555a8d0c", "filename": "src/test/ui/associated-types/issue-72806.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -9,9 +9,10 @@ trait Bar2 {\n struct Foo;\n struct Foo2;\n \n-impl Bar for Foo {  //~ ERROR type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n+impl Bar for Foo {\n     type Ok = ();\n     type Sibling = Foo2;\n+    //~^ ERROR type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n }\n impl Bar2 for Foo2 {\n     type Ok = u32;"}, {"sha": "23fabbee1c5d4ba181d4c8465b7ccb46364f0d2e", "filename": "src/test/ui/associated-types/issue-72806.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,8 +1,11 @@\n error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n-  --> $DIR/issue-72806.rs:12:6\n+  --> $DIR/issue-72806.rs:14:5\n    |\n-LL | impl Bar for Foo {\n-   |      ^^^ expected `u32`, found `char`\n+LL |     type Sibling: Bar2<Ok=char>;\n+   |                        ------- required by this bound in `Bar::Sibling`\n+...\n+LL |     type Sibling = Foo2;\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `char`, found `u32`\n \n error: aborting due to previous error\n "}, {"sha": "4bd3ccab8343ab1dfc2a00927e5c15372d1964e8", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -5,7 +5,9 @@ trait Foo {\n }\n \n impl Foo for () {\n-    type Assoc = bool; //~ ERROR the trait bound `bool: Bar` is not satisfied\n+    // Doesn't error because we abort compilation after the errors below.\n+    // See point-at-type-on-obligation-failure-3.rs\n+    type Assoc = bool;\n }\n \n trait Baz where Self::Assoc: Bar {"}, {"sha": "f4971105499e365a700cc6eb5401cbb115a16a61", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,16 +1,5 @@\n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:8:18\n-   |\n-LL | trait Foo {\n-   |       --- required by a bound in this\n-LL |     type Assoc: Bar;\n-   |                 --- required by this bound in `Foo`\n-...\n-LL |     type Assoc = bool;\n-   |                  ^^^^ the trait `Bar` is not implemented for `bool`\n-\n-error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:16:18\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:18:18\n    |\n LL | trait Baz where Self::Assoc: Bar {\n    |                              --- required by this bound in `Baz`\n@@ -19,14 +8,14 @@ LL |     type Assoc = bool;\n    |                  ^^^^ the trait `Bar` is not implemented for `bool`\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:24:18\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:26:18\n    |\n LL | trait Bat where <Self as Bat>::Assoc: Bar {\n    |                                       --- required by this bound in `Bat`\n ...\n LL |     type Assoc = bool;\n    |                  ^^^^ the trait `Bar` is not implemented for `bool`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "9360d96f05e174a29c7a38389f3f37c7e6e621a8", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-3.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-3.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -0,0 +1,11 @@\n+trait Bar {}\n+\n+trait Foo {\n+    type Assoc: Bar;\n+}\n+\n+impl Foo for () {\n+    type Assoc = bool; //~ ERROR the trait bound `bool: Bar` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "6ab3d94e10248805dbaeb757cfe306a084df09e6", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-3.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-3.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `bool: Bar` is not satisfied\n+  --> $DIR/point-at-type-on-obligation-failure-3.rs:8:5\n+   |\n+LL |     type Assoc: Bar;\n+   |                 --- required by this bound in `Foo::Assoc`\n+...\n+LL |     type Assoc = bool;\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "66666006887e6b2a84b82c54775efc1d3ddd6c11", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -10,8 +10,9 @@ struct Foo;\n struct Foo2;\n \n impl Bar for Foo {\n-    type Ok = ();  //~ ERROR type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n+    type Ok = ();\n     type Sibling = Foo2;\n+    //~^ ERROR type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n }\n impl Bar2 for Foo2 {\n     type Ok = u32;"}, {"sha": "7417a5aa3d43a4adeeb4540891901d532ad22680", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,8 +1,11 @@\n error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n-  --> $DIR/point-at-type-on-obligation-failure.rs:13:15\n+  --> $DIR/point-at-type-on-obligation-failure.rs:14:5\n    |\n-LL |     type Ok = ();\n-   |               ^^ expected `u32`, found `()`\n+LL |     type Sibling: Bar2<Ok=Self::Ok>;\n+   |                        ----------- required by this bound in `Bar::Sibling`\n+...\n+LL |     type Sibling = Foo2;\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `u32`\n \n error: aborting due to previous error\n "}, {"sha": "66f57c2d11009fe1a2d4ea82520b5968b88a326e", "filename": "src/test/ui/chalkify/impl_wf.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -15,19 +15,6 @@ impl Foo for str { }\n // Implicit `T: Sized` bound.\n impl<T> Foo for Option<T> { }\n \n-impl Bar for () {\n-    type Item = i32;\n-}\n-\n-impl<T> Bar for Option<T> {\n-    type Item = Option<T>;\n-}\n-\n-impl Bar for f32 {\n-    type Item = f32;\n-    //~^ ERROR the trait bound `f32: Foo` is not satisfied\n-}\n-\n trait Baz<U: ?Sized> where U: Foo { }\n \n impl Baz<i32> for i32 { }"}, {"sha": "24c7f0d82bdc8b4a3d40553f6b4728967303bb7d", "filename": "src/test/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -10,25 +10,14 @@ LL | impl Foo for str { }\n    = help: the trait `Sized` is not implemented for `str`\n \n error[E0277]: the trait bound `f32: Foo` is not satisfied\n-  --> $DIR/impl_wf.rs:27:17\n-   |\n-LL | trait Bar {\n-   |       --- required by a bound in this\n-LL |     type Item: Foo;\n-   |                --- required by this bound in `Bar`\n-...\n-LL |     type Item = f32;\n-   |                 ^^^ the trait `Foo` is not implemented for `f32`\n-\n-error[E0277]: the trait bound `f32: Foo` is not satisfied\n-  --> $DIR/impl_wf.rs:35:6\n+  --> $DIR/impl_wf.rs:22:6\n    |\n LL | trait Baz<U: ?Sized> where U: Foo { }\n    |                               --- required by this bound in `Baz`\n ...\n LL | impl Baz<f32> for f32 { }\n    |      ^^^^^^^^ the trait `Foo` is not implemented for `f32`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "758a7185e3912aac602c4363de7c6ee4b72c6363", "filename": "src/test/ui/chalkify/impl_wf_2.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -0,0 +1,33 @@\n+// Split out of impl_wf.rs to work around rust aborting compilation early\n+\n+// compile-flags: -Z chalk\n+\n+trait Foo: Sized { }\n+\n+trait Bar {\n+    type Item: Foo;\n+}\n+\n+impl Foo for i32 { }\n+\n+// Implicit `T: Sized` bound.\n+impl<T> Foo for Option<T> { }\n+\n+impl Bar for () {\n+    type Item = i32;\n+}\n+\n+impl<T> Bar for Option<T> {\n+    type Item = Option<T>;\n+}\n+\n+impl Bar for f32 {\n+    type Item = f32;\n+    //~^ ERROR the trait bound `f32: Foo` is not satisfied\n+}\n+\n+trait Baz<U: ?Sized> where U: Foo { }\n+\n+impl Baz<i32> for i32 { }\n+\n+fn main() {}"}, {"sha": "1da2144c0a5d444f16a3f23a316d52f71f4362cc", "filename": "src/test/ui/chalkify/impl_wf_2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `f32: Foo` is not satisfied\n+  --> $DIR/impl_wf_2.rs:25:5\n+   |\n+LL |     type Item: Foo;\n+   |                --- required by this bound in `Bar::Item`\n+...\n+LL |     type Item = f32;\n+   |     ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `f32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c5c8c5c1eca1f079136426a609a3a1f05cbd4ee1", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -14,6 +14,7 @@ impl Tr1 for S1 { type As1 = S2; }\n trait _Tr3 {\n     type A: Iterator<Item: Copy>;\n     //~^ ERROR associated type bounds are unstable\n+    //~| ERROR the trait bound `<<Self as _Tr3>::A as std::iter::Iterator>::Item: std::marker::Copy` is not satisfied\n \n     type B: Iterator<Item: 'static>;\n     //~^ ERROR associated type bounds are unstable"}, {"sha": "db78e287d65e061f84713c2716cc886902f819a8", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -8,7 +8,7 @@ LL |     type A: Iterator<Item: Copy>;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:18:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:19:22\n    |\n LL |     type B: Iterator<Item: 'static>;\n    |                      ^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     type B: Iterator<Item: 'static>;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:22:20\n+  --> $DIR/feature-gate-associated_type_bounds.rs:23:20\n    |\n LL | struct _St1<T: Tr1<As1: Tr2>> {\n    |                    ^^^^^^^^\n@@ -26,7 +26,7 @@ LL | struct _St1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:29:18\n+  --> $DIR/feature-gate-associated_type_bounds.rs:30:18\n    |\n LL | enum _En1<T: Tr1<As1: Tr2>> {\n    |                  ^^^^^^^^\n@@ -35,7 +35,7 @@ LL | enum _En1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:36:19\n+  --> $DIR/feature-gate-associated_type_bounds.rs:37:19\n    |\n LL | union _Un1<T: Tr1<As1: Tr2>> {\n    |                   ^^^^^^^^\n@@ -44,7 +44,7 @@ LL | union _Un1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:43:37\n+  --> $DIR/feature-gate-associated_type_bounds.rs:44:37\n    |\n LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    |                                     ^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:46:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:47:22\n    |\n LL | fn _apit(_: impl Tr1<As1: Copy>) {}\n    |                      ^^^^^^^^^\n@@ -62,7 +62,7 @@ LL | fn _apit(_: impl Tr1<As1: Copy>) {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:48:26\n+  --> $DIR/feature-gate-associated_type_bounds.rs:49:26\n    |\n LL | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n    |                          ^^^^^^^^^\n@@ -71,7 +71,7 @@ LL | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:51:24\n+  --> $DIR/feature-gate-associated_type_bounds.rs:52:24\n    |\n LL | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n    |                        ^^^^^^^^^\n@@ -80,7 +80,7 @@ LL | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:54:31\n+  --> $DIR/feature-gate-associated_type_bounds.rs:55:31\n    |\n LL | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n    |                               ^^^^^^^^^\n@@ -89,7 +89,7 @@ LL | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:57:23\n+  --> $DIR/feature-gate-associated_type_bounds.rs:58:23\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |                       ^^^^^^^^^\n@@ -98,7 +98,7 @@ LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:63:24\n+  --> $DIR/feature-gate-associated_type_bounds.rs:64:24\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |                        ^^^^^^^^^\n@@ -107,7 +107,7 @@ LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:70:21\n+  --> $DIR/feature-gate-associated_type_bounds.rs:71:21\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |                     ^^^^^^^^^\n@@ -116,30 +116,46 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:57:14\n+  --> $DIR/feature-gate-associated_type_bounds.rs:58:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:63:15\n+  --> $DIR/feature-gate-associated_type_bounds.rs:64:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:70:12\n+  --> $DIR/feature-gate-associated_type_bounds.rs:71:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |            ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n-error: aborting due to 16 previous errors\n+error[E0277]: the trait bound `<<Self as _Tr3>::A as std::iter::Iterator>::Item: std::marker::Copy` is not satisfied\n+  --> $DIR/feature-gate-associated_type_bounds.rs:15:28\n+   |\n+LL |     type A: Iterator<Item: Copy>;\n+   |                            ^^^^ the trait `std::marker::Copy` is not implemented for `<<Self as _Tr3>::A as std::iter::Iterator>::Item`\n+   | \n+  ::: $SRC_DIR/libcore/marker.rs:LL:COL\n+   |\n+LL | pub trait Copy: Clone {\n+   | --------------------- required by this bound in `std::marker::Copy`\n+   |\n+help: consider further restricting the associated type\n+   |\n+LL | trait _Tr3 where <<Self as _Tr3>::A as std::iter::Iterator>::Item: std::marker::Copy {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 17 previous errors\n \n-Some errors have detailed explanations: E0562, E0658.\n-For more information about an error, try `rustc --explain E0562`.\n+Some errors have detailed explanations: E0277, E0562, E0658.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "e49dc91ec66ae454d59c7099e117450ea708882c", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -16,6 +16,11 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n    |\n LL |    Pin::new(&mut gen).resume(());\n    |                       ^^^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/libcore/ops/generator.rs:LL:COL\n+   |\n+LL | pub enum GeneratorState<Y, R> {\n+   |                         - required by this bound in `std::ops::GeneratorState`\n    |\n    = help: the trait `Sized` is not implemented for `str`\n "}, {"sha": "b380f0da2ea401846e7449ccb921758c847c7fde", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-68641-check-gat-bounds.rs:15:5\n    |\n LL |     type Item<'a>: Copy;\n-   |     -------------------- required by `UnsafeCopy::Item`\n+   |                    ---- required by this bound in `UnsafeCopy::Item`\n ...\n LL |     type Item<'a> = T;\n    |     ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`"}, {"sha": "61950478c32a8cf08f61c9c9fcdf1a99c72bb158", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -11,7 +11,7 @@ error[E0277]: expected a `Fn<()>` closure, found `T`\n   --> $DIR/issue-68642-broken-llvm-ir.rs:15:5\n    |\n LL |     type F<'a>: Fn() -> u32;\n-   |     ------------------------ required by `Fun::F`\n+   |                 ----------- required by this bound in `Fun::F`\n ...\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`"}, {"sha": "13980618987be8740ce34c39edbb1fa6910e8992", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -11,7 +11,7 @@ error[E0277]: expected a `Fn<()>` closure, found `T`\n   --> $DIR/issue-68643-broken-mir.rs:15:5\n    |\n LL |     type F<'a>: Fn() -> u32;\n-   |     ------------------------ required by `Fun::F`\n+   |                 ----------- required by this bound in `Fun::F`\n ...\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`"}, {"sha": "811242514695914a66f2653f981c29767aace06b", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -11,7 +11,7 @@ error[E0277]: expected a `Fn<()>` closure, found `T`\n   --> $DIR/issue-68644-codegen-selection.rs:15:5\n    |\n LL |     type F<'a>: Fn() -> u32;\n-   |     ------------------------ required by `Fun::F`\n+   |                 ----------- required by this bound in `Fun::F`\n ...\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`"}, {"sha": "22f50b394982831511f3e2a8777d771cd03c193a", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -11,7 +11,7 @@ error[E0277]: expected a `Fn<()>` closure, found `T`\n   --> $DIR/issue-68645-codegen-fulfillment.rs:15:5\n    |\n LL |     type F<'a>: Fn() -> u32;\n-   |     ------------------------ required by `Fun::F`\n+   |                 ----------- required by this bound in `Fun::F`\n ...\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`"}, {"sha": "c4ee2c4e61872c4114d36e3e3069f703a58b87b4", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -11,7 +11,7 @@ error[E0271]: type mismatch resolving `<T as Deref>::Target == T`\n   --> $DIR/issue-68656-unsized-values.rs:16:5\n    |\n LL |     type Item<'a>: std::ops::Deref<Target = T>;\n-   |     ------------------------------------------- required by `UnsafeCopy::Item`\n+   |                                    ---------- required by this bound in `UnsafeCopy::Item`\n ...\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<T> for T {\n    |      - this type parameter"}, {"sha": "d957cae3081017a25dc7d7bcd5830056bb4f211e", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -7,7 +7,7 @@ trait ATy {\n \n impl<'b> ATy for &'b () {\n     type Item<'a> = &'b ();\n-    //~^ ERROR does not fulfill the required lifetime\n+    //~^ ERROR lifetime bound not satisfied\n }\n \n trait StaticTy {\n@@ -16,7 +16,7 @@ trait StaticTy {\n \n impl StaticTy for () {\n     type Item<'a> = &'a ();\n-    //~^ ERROR does not fulfill the required lifetime\n+    //~^ ERROR lifetime bound not satisfied\n }\n \n fn main() {}"}, {"sha": "f8b96ef3b8a032b42e3b04194cb6f19f3e74d215", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,23 +1,33 @@\n-error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n+error[E0478]: lifetime bound not satisfied\n   --> $DIR/unsatisfied-outlives-bound.rs:9:5\n    |\n LL |     type Item<'a> = &'b ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: type must outlive the lifetime `'a` as defined on the associated item at 9:15\n+note: lifetime parameter instantiated with the lifetime `'b` as defined on the impl at 8:6\n+  --> $DIR/unsatisfied-outlives-bound.rs:8:6\n+   |\n+LL | impl<'b> ATy for &'b () {\n+   |      ^^\n+note: but lifetime parameter must outlive the lifetime `'a` as defined on the associated item at 9:15\n   --> $DIR/unsatisfied-outlives-bound.rs:9:15\n    |\n LL |     type Item<'a> = &'b ();\n    |               ^^\n \n-error[E0477]: the type `&'a ()` does not fulfill the required lifetime\n+error[E0478]: lifetime bound not satisfied\n   --> $DIR/unsatisfied-outlives-bound.rs:18:5\n    |\n LL |     type Item<'a> = &'a ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the associated item at 18:15\n+  --> $DIR/unsatisfied-outlives-bound.rs:18:15\n+   |\n+LL |     type Item<'a> = &'a ();\n+   |               ^^\n+   = note: but lifetime parameter must outlive the static lifetime\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0477`.\n+For more information about this error, try `rustc --explain E0478`."}, {"sha": "ec03d18924fea46fa62b3a3688ee7bac9b727929", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -7,13 +7,13 @@ LL | #![feature(impl_trait_in_bindings)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n-error[E0282]: type annotations needed for `impl Future`\n-  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:13:9\n+error[E0282]: type annotations needed for `impl std::future::Future`\n+  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:13:20\n    |\n LL |     let fut = async {\n    |         --- consider giving `fut` the explicit type `impl Future`, with the type parameters specified\n LL |         make_unit()?;\n-   |         ^^^^^^^^^^^^ cannot infer type\n+   |                    ^ cannot infer type\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "92a9045f6db503c5e57ffe4e80f85480e3a56ef7", "filename": "src/test/ui/inference/cannot-infer-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,10 +1,10 @@\n error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-async.rs:11:9\n+  --> $DIR/cannot-infer-async.rs:11:20\n    |\n LL |     let fut = async {\n    |         --- consider giving `fut` a type\n LL |         make_unit()?;\n-   |         ^^^^^^^^^^^^ cannot infer type\n+   |                    ^ cannot infer type\n \n error: aborting due to previous error\n "}, {"sha": "d5366e422dbff9e1d4db97fa1f5acf3240af4269", "filename": "src/test/ui/inference/cannot-infer-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,8 +1,8 @@\n error[E0282]: type annotations needed for the closure `fn((), ()) -> std::result::Result<(), _>`\n-  --> $DIR/cannot-infer-closure.rs:3:9\n+  --> $DIR/cannot-infer-closure.rs:3:15\n    |\n LL |         Err(a)?;\n-   |         ^^^^^^^ cannot infer type\n+   |               ^ cannot infer type\n    |\n help: give this closure an explicit return type without `_` placeholders\n    |"}, {"sha": "25fa575fc6051b0906d34331f174e57abc41d526", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -4,8 +4,9 @@ error[E0277]: the size for values of type `dyn Iterator<Item = &'a mut u8>` cann\n LL |     for item in *things { *item = 0 }\n    |                 ^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `Sized` is not implemented for `dyn Iterator<Item = &'a mut u8>`\n-   = note: required by `into_iter`\n+   = help: the trait `std::marker::Sized` is not implemented for `dyn std::iter::Iterator<Item = &'a mut u8>`\n+   = note: required because of the requirements on the impl of `std::iter::IntoIterator` for `dyn std::iter::Iterator<Item = &'a mut u8>`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n \n error: aborting due to previous error\n "}, {"sha": "20d980763ea9cf65acf345f1c327099f509946fd", "filename": "src/test/ui/issues/issue-20831-debruijn.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -28,9 +28,6 @@ impl<'a> Publisher<'a> for MyStruct<'a> {\n     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n         // Not obvious, but there is an implicit lifetime here -------^\n         //~^^ ERROR cannot infer\n-        //~| ERROR cannot infer\n-        //~| ERROR mismatched types\n-        //~| ERROR mismatched types\n         //\n         // The fact that `Publisher` is using an implicit lifetime is\n         // what was causing the debruijn accounting to be off, so"}, {"sha": "1764dd3cf67a17523910ba220d0cf603652c5419", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 8, "deletions": 77, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,88 +1,20 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n-   |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^ lifetime mismatch\n-   |\n-   = note: expected type `'a`\n-              found type `'_`\n-note: the anonymous lifetime #2 defined on the method body at 28:5...\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 26:6\n-  --> $DIR/issue-20831-debruijn.rs:26:6\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n-   |      ^^\n-\n-error[E0308]: mismatched types\n+note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n LL | |         // Not obvious, but there is an implicit lifetime here -------^\n LL | |\n-LL | |\n+LL | |         //\n ...  |\n LL | |         self.sub = t;\n LL | |     }\n-   | |_____^ lifetime mismatch\n-   |\n-   = note: expected type `'a`\n-              found type `'_`\n-note: the lifetime `'a` as defined on the impl at 26:6...\n-  --> $DIR/issue-20831-debruijn.rs:26:6\n-   |\n-LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n-   |      ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 28:5\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n-   |\n-LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/issue-20831-debruijn.rs:28:33\n-   |\n-LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n-   |\n-LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the impl at 26:6...\n-  --> $DIR/issue-20831-debruijn.rs:26:6\n-   |\n-LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n-   |      ^^\n-note: ...so that the types are compatible\n-  --> $DIR/issue-20831-debruijn.rs:28:33\n-   |\n-LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `Publisher<'_>`\n-              found `Publisher<'_>`\n-\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/issue-20831-debruijn.rs:28:33\n-   |\n-LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n-   |\n-LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |_____^\n note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the impl at 26:6...\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |\n@@ -96,7 +28,6 @@ LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher\n    = note: expected `Publisher<'_>`\n               found `Publisher<'_>`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0308, E0495.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "d0c052cb2fd39fadc69593720402422e887a07fb", "filename": "src/test/ui/issues/issue-21946.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-21946.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-21946.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21946.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -5,7 +5,6 @@ trait Foo {\n struct FooStruct;\n \n impl Foo for FooStruct {\n-    //~^ ERROR overflow evaluating the requirement `<FooStruct as Foo>::A == _`\n     type A = <FooStruct as Foo>::A;\n     //~^ ERROR overflow evaluating the requirement `<FooStruct as Foo>::A == _`\n }"}, {"sha": "8b96e0f3382bb1462a14f1182f88959087611955", "filename": "src/test/ui/issues/issue-21946.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,15 +1,9 @@\n-error[E0275]: overflow evaluating the requirement `<FooStruct as Foo>::A == _`\n-  --> $DIR/issue-21946.rs:7:6\n-   |\n-LL | impl Foo for FooStruct {\n-   |      ^^^\n-\n-error[E0275]: overflow evaluating the requirement `<FooStruct as Foo>::A == _`\n-  --> $DIR/issue-21946.rs:9:5\n+error[E0275]: overflow evaluating the requirement `<FooStruct as Foo>::A`\n+  --> $DIR/issue-21946.rs:8:5\n    |\n LL |     type A = <FooStruct as Foo>::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "0937e029ef45e142299fdc08a9018403a8c535f7", "filename": "src/test/ui/issues/issue-23122-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -5,7 +5,6 @@ trait Next {\n struct GetNext<T: Next> { t: T }\n \n impl<T: Next> Next for GetNext<T> {\n-    //~^ ERROR overflow evaluating the requirement\n     type Next = <GetNext<T> as Next>::Next;\n     //~^ ERROR overflow evaluating the requirement\n }"}, {"sha": "f8374905370673538dafa362efb8e36009c3283e", "filename": "src/test/ui/issues/issue-23122-1.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,15 +1,9 @@\n-error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next == _`\n-  --> $DIR/issue-23122-1.rs:7:15\n-   |\n-LL | impl<T: Next> Next for GetNext<T> {\n-   |               ^^^^\n-\n-error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next == _`\n-  --> $DIR/issue-23122-1.rs:9:5\n+error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next`\n+  --> $DIR/issue-23122-1.rs:8:5\n    |\n LL |     type Next = <GetNext<T> as Next>::Next;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "84abebf6b74a7cc1ba3fa92f87576fc0cdd386cb", "filename": "src/test/ui/issues/issue-23122-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -5,7 +5,6 @@ trait Next {\n struct GetNext<T: Next> { t: T }\n \n impl<T: Next> Next for GetNext<T> {\n-    //~^ ERROR overflow evaluating the requirement\n     type Next = <GetNext<T::Next> as Next>::Next;\n     //~^ ERROR overflow evaluating the requirement\n }"}, {"sha": "0d645bbcea59f8a3ec05249d6f8aafa127ba21ab", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,21 +1,12 @@\n-error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n-  --> $DIR/issue-23122-2.rs:7:15\n-   |\n-LL | impl<T: Next> Next for GetNext<T> {\n-   |               ^^^^\n-   |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_23122_2`)\n-   = note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n-\n-error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n-  --> $DIR/issue-23122-2.rs:9:5\n+error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: std::marker::Sized`\n+  --> $DIR/issue-23122-2.rs:8:5\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_23122_2`)\n    = note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "df72283de233ed60af2b27760d27de88f92ff290", "filename": "src/test/ui/issues/issue-24204.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-24204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-24204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -12,6 +12,6 @@ trait Trait: Sized {\n }\n \n fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n-//~^ ERROR type mismatch resolving\n+//~^ ERROR mismatched types\n \n fn main() {}"}, {"sha": "9d66c9ff0a843aea9b9d2aadb2ac7998b4c5bd2e", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,20 +1,15 @@\n-error[E0271]: type mismatch resolving `<<T as Trait>::A as MultiDispatch<i32>>::O == T`\n-  --> $DIR/issue-24204.rs:14:12\n+error[E0308]: mismatched types\n+  --> $DIR/issue-24204.rs:14:72\n    |\n-LL | trait Trait: Sized {\n-   |       ----- required by a bound in this\n-LL |     type A: MultiDispatch<Self::B, O = Self>;\n-   |                                    -------- required by this bound in `Trait`\n-...\n LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n-   |         -  ^^^^^^^^^^^^ expected type parameter `T`, found associated type\n-   |         |\n-   |         this type parameter\n+   |         -                           -                                  ^^^^^^^^^ expected type parameter `T`, found associated type\n+   |         |                           |\n+   |         this type parameter         expected `T` because of return type\n    |\n    = note: expected type parameter `T`\n              found associated type `<<T as Trait>::A as MultiDispatch<i32>>::O`\n    = note: you might be missing a type parameter or trait bound\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "04075911111ae5d8baec1f8edc0daaf87a29a196", "filename": "src/test/ui/issues/issue-28098.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -13,8 +13,9 @@ error[E0277]: `bool` is not an iterator\n LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n    |\n-   = help: the trait `Iterator` is not implemented for `bool`\n-   = note: required by `into_iter`\n+   = help: the trait `std::iter::Iterator` is not implemented for `bool`\n+   = note: required because of the requirements on the impl of `std::iter::IntoIterator` for `bool`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:9:28"}, {"sha": "81d97bdbf1242ea355558fa07475a97067ea41ea", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -15,7 +15,9 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n    |\n    = note:  expected tuple `(&_, &_)`\n            found reference `&_`\n-   = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n+   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n+   = note: required because of the requirements on the impl of `std::iter::IntoIterator` for `std::iter::Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as Iterator>::Item == &_`\n   --> $DIR/issue-33941.rs:4:14"}, {"sha": "f47fd8d1b0da961242f5b88d794eea329765a977", "filename": "src/test/ui/issues/issue-38091.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the trait bound `(): Valid` is not satisfied\n   --> $DIR/issue-38091.rs:9:5\n    |\n LL |     type Ty: Valid;\n-   |     --------------- required by `Iterate::Ty`\n+   |              ----- required by this bound in `Iterate::Ty`\n ...\n LL |     default type Ty = ();\n    |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Valid` is not implemented for `()`"}, {"sha": "7b656ef8559caf3778f368960c144af56b89b962", "filename": "src/test/ui/issues/issue-43784-associated-type.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,8 +1,11 @@\n-error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-43784-associated-type.rs:14:18\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/issue-43784-associated-type.rs:14:5\n    |\n+LL |     type Assoc: Partial<Self>;\n+   |                 ------------- required by this bound in `Complete::Assoc`\n+...\n LL |     type Assoc = T;\n-   |                  ^ the trait `Copy` is not implemented for `T`\n+   |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "c73536ba97332b3cbc715275a57cddf18ce04d6a", "filename": "src/test/ui/issues/issue-43784-supertrait.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-43784-supertrait.rs:8:9\n    |\n+LL | pub trait Complete: Partial {\n+   |                     ------- required by this bound in `Complete`\n+...\n LL | impl<T> Complete for T {}\n    |         ^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |"}, {"sha": "64cc0bab3f33c147724038ec3232b5c906a89bd7", "filename": "src/test/ui/issues/issue-65673.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,13 +1,11 @@\n error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-65673.rs:9:16\n+  --> $DIR/issue-65673.rs:9:5\n    |\n-LL | trait WithType {\n-   |       -------- required by a bound in this\n LL |     type Ctx;\n-   |     --------- required by this bound in `WithType`\n+   |     --------- required by this bound in `WithType::Ctx`\n ...\n LL |     type Ctx = dyn Alias<T>;\n-   |                ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Trait + 'static)`\n "}, {"sha": "16d93c18900a9f5000db201a8f5aeeb096a0f66d", "filename": "src/test/ui/never_type/issue-51506.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `!` is not an iterator\n   --> $DIR/issue-51506.rs:13:5\n    |\n LL |     type Out: Iterator<Item = u32>;\n-   |     ------------------------------- required by `Trait::Out`\n+   |               -------------------- required by this bound in `Trait::Out`\n ...\n LL |     default type Out = !;\n    |     ^^^^^^^^^^^^^^^^^^^^^ `!` is not an iterator"}, {"sha": "44dcd191d1ba2d7aea1a1e5134858c982d2d219a", "filename": "src/test/ui/nll/relate_tys/impl-fn-ignore-binder-via-bottom.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -32,5 +32,4 @@ fn main() {\n     let _x = <fn(&())>::make_f();\n     //~^ higher-ranked subtype error\n     //~| higher-ranked subtype error\n-    //~| higher-ranked subtype error\n }"}, {"sha": "190b520c6786c61bef25883f1606ecb589d1d1c4", "filename": "src/test/ui/nll/relate_tys/impl-fn-ignore-binder-via-bottom.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -10,11 +10,5 @@ error: higher-ranked subtype error\n LL |     let _x = <fn(&())>::make_f();\n    |              ^^^^^^^^^^^^^^^^^^^\n \n-error: higher-ranked subtype error\n-  --> $DIR/impl-fn-ignore-binder-via-bottom.rs:32:14\n-   |\n-LL |     let _x = <fn(&())>::make_f();\n-   |              ^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "fdf0bc38391126821236b1ff432b87b96b86ec63", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -29,7 +29,11 @@ mod m {\n         //~| WARN this was previously accepted\n         type Alias1: PrivTr;\n         type Alias2: PubTrAux1<Priv> = u8;\n+        //~^ WARN private type `m::Priv` in public interface\n+        //~| WARN this was previously accepted\n         type Alias3: PubTrAux2<A = Priv> = u8;\n+        //~^ WARN private type `m::Priv` in public interface\n+        //~| WARN this was previously accepted\n \n         type Alias4 = Priv;\n         //~^ ERROR private type `Priv` in public interface"}, {"sha": "768dca17e07d28adf2a48015360a0169ef98f2b4", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.stderr", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -10,14 +10,8 @@ LL |         type A = Priv;\n warning: private trait `PrivTr` in public interface (error E0445)\n   --> $DIR/private-in-public-assoc-ty.rs:23:5\n    |\n-LL | /     pub trait PubTr {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |         fn infer_exist() -> Self::Exist;\n-LL | |     }\n-   | |_____^\n+LL |         type Alias1: PrivTr;\n+   |         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(private_in_public)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -26,29 +20,17 @@ LL | |     }\n warning: private type `Priv` in public interface (error E0446)\n   --> $DIR/private-in-public-assoc-ty.rs:23:5\n    |\n-LL | /     pub trait PubTr {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |         fn infer_exist() -> Self::Exist;\n-LL | |     }\n-   | |_____^\n+LL |         type Alias2: PubTrAux1<Priv> = u8;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `Priv` in public interface (error E0446)\n   --> $DIR/private-in-public-assoc-ty.rs:23:5\n    |\n-LL | /     pub trait PubTr {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |         fn infer_exist() -> Self::Exist;\n-LL | |     }\n-   | |_____^\n+LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>"}, {"sha": "1c8706d8ad2e1d5bec3556829a998a4c8b807fa4", "filename": "src/test/ui/privacy/private-in-public-warn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -55,9 +55,9 @@ mod traits {\n     pub trait Tr2<T: PrivTr> {} //~ ERROR private trait `traits::PrivTr` in public interface\n         //~^ WARNING hard error\n     pub trait Tr3 {\n+        type Alias: PrivTr;\n         //~^ ERROR private trait `traits::PrivTr` in public interface\n         //~| WARNING hard error\n-        type Alias: PrivTr;\n         fn f<T: PrivTr>(arg: T) {} //~ ERROR private trait `traits::PrivTr` in public interface\n         //~^ WARNING hard error\n     }"}, {"sha": "f50dc48f8add36dc1c599e9df9f4977d7fcf0c9f", "filename": "src/test/ui/privacy/private-in-public-warn.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -130,16 +130,10 @@ LL |     pub trait Tr2<T: PrivTr> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:57:5\n-   |\n-LL | /     pub trait Tr3 {\n-LL | |\n-LL | |\n-LL | |         type Alias: PrivTr;\n-LL | |         fn f<T: PrivTr>(arg: T) {}\n-LL | |\n-LL | |     }\n-   | |_____^\n+  --> $DIR/private-in-public-warn.rs:58:9\n+   |\n+LL |         type Alias: PrivTr;\n+   |         ^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>"}, {"sha": "5476e35b5f66b39f82a5471aa5c5739effa7e545", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,26 +1,26 @@\n- // aux-crate:priv:priv_dep=priv_dep.rs\n- // aux-build:pub_dep.rs\n+// aux-crate:priv:priv_dep=priv_dep.rs\n+// aux-build:pub_dep.rs\n #![deny(exported_private_dependencies)]\n \n // This crate is a private dependency\n extern crate priv_dep;\n // This crate is a public dependency\n extern crate pub_dep;\n \n-use priv_dep::{OtherType, OtherTrait};\n+use priv_dep::{OtherTrait, OtherType};\n use pub_dep::PubType;\n \n // Type from private dependency used in private\n // type - this is fine\n struct PrivateType {\n-    field: OtherType\n+    field: OtherType,\n }\n \n pub struct PublicType {\n     pub field: OtherType,\n     //~^ ERROR type `OtherType` from private dependency 'priv_dep' in public interface\n-    priv_field: OtherType, // Private field - this is fine\n-    pub other_field: PubType // Type from public dependency - this is fine\n+    priv_field: OtherType,    // Private field - this is fine\n+    pub other_field: PubType, // Type from public dependency - this is fine\n }\n \n impl PublicType {\n@@ -32,14 +32,13 @@ impl PublicType {\n \n pub trait MyPubTrait {\n     type Foo: OtherTrait;\n+    //~^ ERROR trait `priv_dep::OtherTrait` from private dependency 'priv_dep' in public interface\n }\n //~^^^ ERROR trait `OtherTrait` from private dependency 'priv_dep' in public interface\n \n pub struct AllowedPrivType {\n     #[allow(exported_private_dependencies)]\n-    pub allowed: OtherType\n+    pub allowed: OtherType,\n }\n \n-\n-\n fn main() {}"}, {"sha": "e6fd6fc7bb8ce68634e6ddd9c24733cfd890986f", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -19,10 +19,8 @@ LL |     pub fn pub_fn(param: OtherType) {}\n error: trait `OtherTrait` from private dependency 'priv_dep' in public interface\n   --> $DIR/pub-priv1.rs:33:1\n    |\n-LL | / pub trait MyPubTrait {\n-LL | |     type Foo: OtherTrait;\n-LL | | }\n-   | |_^\n+LL |     type Foo: OtherTrait;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a896d5875332108efb8a0dd5910c01756331bb4d", "filename": "src/test/ui/question-mark-type-infer.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,4 +1,4 @@\n-error[E0284]: type annotations needed\n+error[E0283]: type annotations needed\n   --> $DIR/question-mark-type-infer.rs:12:21\n    |\n LL |     l.iter().map(f).collect()?\n@@ -12,4 +12,4 @@ LL |     l.iter().map(f).collect::<B>()?\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0284`.\n+For more information about this error, try `rustc --explain E0283`."}, {"sha": "e380e5b2f91fff75491f68a6fbff047d495b1021", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -17,7 +17,7 @@ error[E0277]: the size for values of type `[{integer}]` cannot be known at compi\n    |\n LL |     let range = *arr..;\n    |                 ^^^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ops/range.rs:LL:COL\n    |\n LL | pub struct RangeFrom<Idx> {"}, {"sha": "0f86e37b7e5cc515709a1eb3abc10d56fae63623", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -12,13 +12,13 @@ impl<'a> Foo<'a> for &'a i16 {\n }\n \n impl<'a> Foo<'static> for &'a i32 {\n-    //~^ ERROR cannot infer\n     type Value = &'a i32;\n+    //~^ ERROR lifetime bound not satisfied\n }\n \n impl<'a,'b> Foo<'b> for &'a i64 {\n-    //~^ ERROR cannot infer\n     type Value = &'a i32;\n+    //~^ ERROR lifetime bound not satisfied\n }\n \n fn main() { }"}, {"sha": "feb9c90bc8f1b8f511f4466a83e9a8cec751893f", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.stderr", "status": "modified", "additions": 13, "deletions": 37, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,57 +1,33 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:14:10\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:15:5\n    |\n-LL | impl<'a> Foo<'static> for &'a i32 {\n-   |          ^^^^^^^^^^^^\n+LL |     type Value = &'a i32;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the impl at 14:6...\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the impl at 14:6\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:14:6\n    |\n LL | impl<'a> Foo<'static> for &'a i32 {\n    |      ^^\n-note: ...so that the types are compatible\n-  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:14:10\n-   |\n-LL | impl<'a> Foo<'static> for &'a i32 {\n-   |          ^^^^^^^^^^^^\n-   = note: expected `Foo<'static>`\n-              found `Foo<'static>`\n-   = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the type `&i32` will meet its required lifetime bounds\n-  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:14:10\n-   |\n-LL | impl<'a> Foo<'static> for &'a i32 {\n-   |          ^^^^^^^^^^^^\n+   = note: but lifetime parameter must outlive the static lifetime\n \n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:13\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:20:5\n    |\n-LL | impl<'a,'b> Foo<'b> for &'a i64 {\n-   |             ^^^^^^^\n+LL |     type Value = &'a i32;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the impl at 19:6...\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the impl at 19:6\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:6\n    |\n LL | impl<'a,'b> Foo<'b> for &'a i64 {\n    |      ^^\n-note: ...so that the types are compatible\n-  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:13\n-   |\n-LL | impl<'a,'b> Foo<'b> for &'a i64 {\n-   |             ^^^^^^^\n-   = note: expected `Foo<'b>`\n-              found `Foo<'_>`\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the impl at 19:9...\n+note: but lifetime parameter must outlive the lifetime `'b` as defined on the impl at 19:9\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:9\n    |\n LL | impl<'a,'b> Foo<'b> for &'a i64 {\n    |         ^^\n-note: ...so that the type `&i32` will meet its required lifetime bounds\n-  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:13\n-   |\n-LL | impl<'a,'b> Foo<'b> for &'a i64 {\n-   |             ^^^^^^^\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0478`."}, {"sha": "65b54b45a0a160ca451df546e4a661c63fb933ff", "filename": "src/test/ui/regions/regions-assoc-type-static-bound-in-trait-not-met.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -7,8 +7,8 @@ trait Foo {\n }\n \n impl<'a> Foo for &'a i32 {\n-    //~^ ERROR cannot infer\n     type Value = &'a i32;\n+    //~^ ERROR lifetime bound not satisfied\n }\n \n impl<'a> Foo for i32 {"}, {"sha": "9b98d14a9781fd5541c131731c69cb94400ca686", "filename": "src/test/ui/regions/regions-assoc-type-static-bound-in-trait-not-met.stderr", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,28 +1,16 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:9:10\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:10:5\n    |\n-LL | impl<'a> Foo for &'a i32 {\n-   |          ^^^\n+LL |     type Value = &'a i32;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the impl at 9:6...\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the impl at 9:6\n   --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:9:6\n    |\n LL | impl<'a> Foo for &'a i32 {\n    |      ^^\n-note: ...so that the types are compatible\n-  --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:9:10\n-   |\n-LL | impl<'a> Foo for &'a i32 {\n-   |          ^^^\n-   = note: expected `Foo`\n-              found `Foo`\n-   = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the type `&i32` will meet its required lifetime bounds\n-  --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:9:10\n-   |\n-LL | impl<'a> Foo for &'a i32 {\n-   |          ^^^\n+   = note: but lifetime parameter must outlive the static lifetime\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0478`."}, {"sha": "4c21f8db8fad864a88cb742ab75d3b61521ab213", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/deafult-associated-type-bound-1.rs:18:5\n    |\n LL |     type U: Clone;\n-   |     -------------- required by `X::U`\n+   |             ----- required by this bound in `X::U`\n ...\n LL |     default type U = str;\n    |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`"}, {"sha": "8c9da81d277efd4b454d86ffdbff2978995ead12", "filename": "src/test/ui/specialization/deafult-associated-type-bound-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -11,7 +11,7 @@ error[E0277]: can't compare `&'static B` with `B`\n   --> $DIR/deafult-associated-type-bound-2.rs:16:5\n    |\n LL |     type U: PartialEq<T>;\n-   |     --------------------- required by `X::U`\n+   |             ------------ required by this bound in `X::U`\n ...\n LL |     default type U = &'static B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `&'static B == B`"}, {"sha": "f14588e6e023c9aba6bad6125b87f4a1a7e6985a", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -6,7 +6,7 @@\n //~^^ WARNING the feature `generic_associated_types` is incomplete\n \n trait X {\n-    type U<'a>: PartialEq<&'a Self>;\n+    type U<'a>: PartialEq<&'a Self> where Self: 'a;\n     fn unsafe_compare<'b>(x: Option<Self::U<'b>>, y: Option<&'b Self>) {\n         match (x, y) {\n             (Some(a), Some(b)) => a == b,"}, {"sha": "f145b90f216ab9df0651e26921cfa2bdd7ff9ed6", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -18,8 +18,8 @@ LL | #![feature(generic_associated_types)]\n error[E0277]: can't compare `T` with `T`\n   --> $DIR/deafult-generic-associated-type-bound.rs:19:5\n    |\n-LL |     type U<'a>: PartialEq<&'a Self>;\n-   |     -------------------------------- required by `X::U`\n+LL |     type U<'a>: PartialEq<&'a Self> where Self: 'a;\n+   |                 ------------------- required by this bound in `X::U`\n ...\n LL |     default type U<'a> = &'a T;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `T == T`"}, {"sha": "3935a4a5f9931b863c1efb910c99f862f1b66bb7", "filename": "src/test/ui/specialization/issue-44861.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `(): CoerceUnsized<*const [u8]>` is not satisfied\n   --> $DIR/issue-44861.rs:21:5\n    |\n LL |     type Data2: CoerceUnsized<*const [u8]>;\n-   |     --------------------------------------- required by `Smartass::Data2`\n+   |                 -------------------------- required by this bound in `Smartass::Data2`\n ...\n LL |     default type Data2 = ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `CoerceUnsized<*const [u8]>` is not implemented for `()`"}, {"sha": "f3f8b022b01e12309f19b125aa03bf9c352bbfcd", "filename": "src/test/ui/specialization/issue-59435.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `MyStruct: Default` is not satisfied\n   --> $DIR/issue-59435.rs:11:5\n    |\n LL |     type MyType: Default;\n-   |     --------------------- required by `MyTrait::MyType`\n+   |                  ------- required by this bound in `MyTrait::MyType`\n ...\n LL |     default type MyType = MyStruct;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `MyStruct`"}, {"sha": "8218fecc3f12d647e9579d1745eea9ba1ec9f2c5", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -15,11 +15,9 @@ impl<A, T> Child<A> for ChildWrapper<T> where T: Child<A> {}\n struct ParentWrapper<T>(T);\n \n impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n-    //~^ ERROR the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n     type Ty = A;\n     type Assoc = ChildWrapper<T::Assoc>;\n     //~^ ERROR the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n-    //~| ERROR the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n }\n \n fn main() {}"}, {"sha": "676e2fb1a51dc7778695fd0f49eb0dc0169893eb", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.stderr", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,55 +1,18 @@\n error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n-  --> $DIR/missing-assoc-type-bound-restriction.rs:17:19\n+  --> $DIR/missing-assoc-type-bound-restriction.rs:19:5\n    |\n-LL | trait Parent {\n-   |       ------ required by a bound in this\n-LL |     type Ty;\n LL |     type Assoc: Child<Self::Ty>;\n-   |                 --------------- required by this bound in `Parent`\n-...\n-LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n-   |                   ^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n-   |\n-help: consider further restricting the associated type\n-   |\n-LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> where <T as Parent>::Assoc: Child<A> {\n-   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n-  --> $DIR/missing-assoc-type-bound-restriction.rs:20:18\n-   |\n-LL | trait Parent {\n-   |       ------ required by a bound in this\n-LL |     type Ty;\n-LL |     type Assoc: Child<Self::Ty>;\n-   |                 --------------- required by this bound in `Parent`\n-...\n-LL |     type Assoc = ChildWrapper<T::Assoc>;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n-   |\n-   = note: required because of the requirements on the impl of `Child<A>` for `ChildWrapper<<T as Parent>::Assoc>`\n-help: consider further restricting the associated type\n-   |\n-LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> where <T as Parent>::Assoc: Child<A> {\n-   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n-  --> $DIR/missing-assoc-type-bound-restriction.rs:20:5\n-   |\n-LL | trait Parent {\n-   |       ------ required by a bound in this\n-LL |     type Ty;\n-LL |     type Assoc: Child<Self::Ty>;\n-   |                 --------------- required by this bound in `Parent`\n+   |                 --------------- required by this bound in `Parent::Assoc`\n ...\n LL |     type Assoc = ChildWrapper<T::Assoc>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n    |\n+   = note: required because of the requirements on the impl of `Child<A>` for `ChildWrapper<<T as Parent>::Assoc>`\n help: consider further restricting the associated type\n    |\n LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> where <T as Parent>::Assoc: Child<A> {\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "62d558fde888e855587877955becdb8090425ed1", "filename": "src/test/ui/traits/cycle-cache-err-60010.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -28,7 +28,9 @@ struct SalsaStorage {\n }\n \n impl Database for RootDatabase {\n-    type Storage = SalsaStorage; //~ ERROR overflow\n+    // This would also be an error if we didn't abort compilation on the error\n+    // above.\n+    type Storage = SalsaStorage;\n }\n impl HasQueryGroup for RootDatabase {}\n impl<DB> Query<DB> for ParseQuery"}, {"sha": "463b55d8581f8512d66b06ff0294f290fd6ac321", "filename": "src/test/ui/traits/traits-inductive-overflow-two-traits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.rs?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -9,6 +9,7 @@ pub trait Magic {\n }\n impl<T: Magic> Magic for T {\n     type X = Self;\n+    //~^ ERROR E0277\n }\n \n fn check<T: Trait>() {}"}, {"sha": "dbe0146cafaa66873ac86092a575a24076832cf6", "filename": "src/test/ui/traits/traits-inductive-overflow-two-traits.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -1,12 +1,27 @@\n+error[E0277]: `T` cannot be shared between threads safely\n+  --> $DIR/traits-inductive-overflow-two-traits.rs:11:5\n+   |\n+LL |     type X: Trait;\n+   |             ----- required by this bound in `Magic::X`\n+...\n+LL |     type X = Self;\n+   |     ^^^^^^^^^^^^^^ `T` cannot be shared between threads safely\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | impl<T: Magic + std::marker::Sync> Magic for T {\n+   |               ^^^^^^^^^^^^^^^^^^^\n+\n error[E0275]: overflow evaluating the requirement `*mut (): Magic`\n-  --> $DIR/traits-inductive-overflow-two-traits.rs:19:5\n+  --> $DIR/traits-inductive-overflow-two-traits.rs:20:5\n    |\n LL | fn wizard<T: Magic>() { check::<<T as Magic>::X>(); }\n    |              ----- required by this bound in `wizard`\n ...\n LL |     wizard::<*mut ()>();\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0275`.\n+Some errors have detailed explanations: E0275, E0277.\n+For more information about an error, try `rustc --explain E0275`."}, {"sha": "dfc1c342a508b0bd4d5312087e0578a020ea557a", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "patch": "@@ -41,7 +41,7 @@ LL |     let res: i32 = try { 5 };\n    |\n    = note: required by `from_ok`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0271, E0277.\n For more information about an error, try `rustc --explain E0271`."}]}