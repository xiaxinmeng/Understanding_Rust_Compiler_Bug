{"sha": "87f9f99f9cdddda1f24fe9aea7dc1326d55b9c08", "node_id": "C_kwDOAAsO6NoAKDg3ZjlmOTlmOWNkZGRkYTFmMjRmZTlhZWE3ZGMxMzI2ZDU1YjljMDg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-06T10:02:33Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-15T14:20:31Z"}, "message": "Update some comments", "tree": {"sha": "ef0c8088bfc3e9dc691f2f45e7d73ec5826648c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef0c8088bfc3e9dc691f2f45e7d73ec5826648c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87f9f99f9cdddda1f24fe9aea7dc1326d55b9c08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87f9f99f9cdddda1f24fe9aea7dc1326d55b9c08", "html_url": "https://github.com/rust-lang/rust/commit/87f9f99f9cdddda1f24fe9aea7dc1326d55b9c08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87f9f99f9cdddda1f24fe9aea7dc1326d55b9c08/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad424e65d8fda3b3f916da15d2bad5f3203714a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad424e65d8fda3b3f916da15d2bad5f3203714a1", "html_url": "https://github.com/rust-lang/rust/commit/ad424e65d8fda3b3f916da15d2bad5f3203714a1"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "b243f1dc8d0df504efe383891715820bfe64678e", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87f9f99f9cdddda1f24fe9aea7dc1326d55b9c08/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f9f99f9cdddda1f24fe9aea7dc1326d55b9c08/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=87f9f99f9cdddda1f24fe9aea7dc1326d55b9c08", "patch": "@@ -385,11 +385,11 @@ impl<'tcx> ConstToPat<'tcx> {\n                     self.behind_reference.set(old);\n                     val\n                 }\n-                // Backwards compatibility hack: support references to non-structural types.\n-                // We'll lower\n-                // this pattern to a `PartialEq::eq` comparison and `PartialEq::eq` takes a\n-                // reference. This makes the rest of the matching logic simpler as it doesn't have\n-                // to figure out how to get a reference again.\n+                // Backwards compatibility hack: support references to non-structural types,\n+                // but hard error if we aren't behind a double reference. We could just use\n+                // the fallback code path below, but that would allow *more* of this fishy\n+                // code to compile, as then it only goes through the future incompat lint\n+                // instead of a hard error.\n                 ty::Adt(_, _) if !self.type_marked_structural(*pointee_ty) => {\n                     if self.behind_reference.get() {\n                         if !self.saw_const_match_error.get()\n@@ -427,10 +427,6 @@ impl<'tcx> ConstToPat<'tcx> {\n                         PatKind::Wild\n                     } else {\n                         let old = self.behind_reference.replace(true);\n-                        // In case there are structural-match violations somewhere in this subpattern,\n-                        // we fall back to a const pattern. If we do not do this, we may end up with\n-                        // a !structural-match constant that is not of reference type, which makes it\n-                        // very hard to invoke `PartialEq::eq` on it as a fallback.\n                         let subpattern = self.recur(tcx.deref_mir_constant(self.param_env.and(cv)), false)?;\n                         self.behind_reference.set(old);\n                         PatKind::Deref { subpattern }"}]}