{"sha": "e156d001c6577593295f6eee417ea8758fbc4a84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNTZkMDAxYzY1Nzc1OTMyOTVmNmVlZTQxN2VhODc1OGZiYzRhODQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-24T05:48:04Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-30T14:06:44Z"}, "message": "rustrt: Allow dropping a brand-new Task\n\nWhen a new task fails to spawn, it triggers a task failure of the spawning task.\nThis ends up causing runtime aborts today because of the destructor bomb in the\nTask structure. The bomb doesn't actually need to go off until *after* the task\nhas run at least once.\n\nThis now prevents a runtime abort when a native thread fails to spawn.", "tree": {"sha": "950f59577dd87a0b723c3ff1ec98c73d632c794e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/950f59577dd87a0b723c3ff1ec98c73d632c794e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e156d001c6577593295f6eee417ea8758fbc4a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e156d001c6577593295f6eee417ea8758fbc4a84", "html_url": "https://github.com/rust-lang/rust/commit/e156d001c6577593295f6eee417ea8758fbc4a84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e156d001c6577593295f6eee417ea8758fbc4a84/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "692077b6431460b96beb0ccf4f38299618d51db2", "url": "https://api.github.com/repos/rust-lang/rust/commits/692077b6431460b96beb0ccf4f38299618d51db2", "html_url": "https://github.com/rust-lang/rust/commit/692077b6431460b96beb0ccf4f38299618d51db2"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "b9144047df5c0b7e3017f3fdeb27bedd594a82d4", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e156d001c6577593295f6eee417ea8758fbc4a84/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e156d001c6577593295f6eee417ea8758fbc4a84/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=e156d001c6577593295f6eee417ea8758fbc4a84", "patch": "@@ -219,7 +219,7 @@ impl Scheduler {\n         let message = stask.sched.get_mut_ref().message_queue.pop();\n         rtassert!(match message { msgq::Empty => true, _ => false });\n \n-        stask.task.get_mut_ref().destroyed = true;\n+        stask.task.take().unwrap().drop();\n     }\n \n     // This does not return a scheduler, as the scheduler is placed"}, {"sha": "e2a5eef0d99e18637ce5ae4e12d479826be21d38", "filename": "src/librustrt/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e156d001c6577593295f6eee417ea8758fbc4a84/src%2Flibrustrt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e156d001c6577593295f6eee417ea8758fbc4a84/src%2Flibrustrt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal.rs?ref=e156d001c6577593295f6eee417ea8758fbc4a84", "patch": "@@ -125,8 +125,8 @@ mod test {\n         }).join();\n     }\n \n-    fn cleanup_task(mut t: Box<Task>) {\n-        t.destroyed = true;\n+    fn cleanup_task(t: Box<Task>) {\n+        t.drop();\n     }\n \n }"}, {"sha": "0f4d72c9b3268a86ec6dd07e7d414f0874d597f4", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e156d001c6577593295f6eee417ea8758fbc4a84/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e156d001c6577593295f6eee417ea8758fbc4a84/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=e156d001c6577593295f6eee417ea8758fbc4a84", "patch": "@@ -100,12 +100,21 @@ pub struct Task {\n     pub storage: LocalStorage,\n     pub unwinder: Unwinder,\n     pub death: Death,\n-    pub destroyed: bool,\n     pub name: Option<SendStr>,\n \n+    state: TaskState,\n     imp: Option<Box<Runtime + Send>>,\n }\n \n+// Once a task has entered the `Armed` state it must be destroyed via `drop`,\n+// and no other method. This state is used to track this transition.\n+#[deriving(PartialEq)]\n+enum TaskState {\n+    New,\n+    Armed,\n+    Destroyed,\n+}\n+\n pub struct TaskOpts {\n     /// Invoke this procedure with the result of the task when it finishes.\n     pub on_exit: Option<proc(Result): Send>,\n@@ -159,7 +168,7 @@ impl Task {\n             storage: LocalStorage(None),\n             unwinder: Unwinder::new(),\n             death: Death::new(),\n-            destroyed: false,\n+            state: New,\n             name: None,\n             imp: None,\n         }\n@@ -203,7 +212,7 @@ impl Task {\n     /// }).destroy();\n     /// # }\n     /// ```\n-    pub fn run(self: Box<Task>, f: ||) -> Box<Task> {\n+    pub fn run(mut self: Box<Task>, f: ||) -> Box<Task> {\n         assert!(!self.is_destroyed(), \"cannot re-use a destroyed task\");\n \n         // First, make sure that no one else is in TLS. This does not allow\n@@ -212,6 +221,7 @@ impl Task {\n         if Local::exists(None::<Task>) {\n             fail!(\"cannot run a task recursively inside another\");\n         }\n+        self.state = Armed;\n         Local::put(self);\n \n         // There are two primary reasons that general try/catch is unsafe. The\n@@ -333,12 +343,12 @@ impl Task {\n         // Now that we're done, we remove the task from TLS and flag it for\n         // destruction.\n         let mut task: Box<Task> = Local::take();\n-        task.destroyed = true;\n+        task.state = Destroyed;\n         return task;\n     }\n \n     /// Queries whether this can be destroyed or not.\n-    pub fn is_destroyed(&self) -> bool { self.destroyed }\n+    pub fn is_destroyed(&self) -> bool { self.state == Destroyed }\n \n     /// Inserts a runtime object into this task, transferring ownership to the\n     /// task. It is illegal to replace a previous runtime object in this task\n@@ -453,12 +463,20 @@ impl Task {\n     pub fn can_block(&self) -> bool {\n         self.imp.get_ref().can_block()\n     }\n+\n+    /// Consume this task, flagging it as a candidate for destruction.\n+    ///\n+    /// This function is required to be invoked to destroy a task. A task\n+    /// destroyed through a normal drop will abort.\n+    pub fn drop(mut self) {\n+        self.state = Destroyed;\n+    }\n }\n \n impl Drop for Task {\n     fn drop(&mut self) {\n         rtdebug!(\"called drop for a task: {}\", self as *mut Task as uint);\n-        rtassert!(self.destroyed);\n+        rtassert!(self.state != Armed);\n     }\n }\n \n@@ -634,12 +652,17 @@ mod test {\n         begin_unwind(\"cause\", file!(), line!())\n     }\n \n+    #[test]\n+    fn drop_new_task_ok() {\n+        drop(Task::new());\n+    }\n+\n     // Task blocking tests\n \n     #[test]\n     fn block_and_wake() {\n         let task = box Task::new();\n         let mut task = BlockedTask::block(task).wake().unwrap();\n-        task.destroyed = true;\n+        task.destroy();\n     }\n }"}]}