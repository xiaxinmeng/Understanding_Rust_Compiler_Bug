{"sha": "22e1c7a112832a18509d400841b3d162228372bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZTFjN2ExMTI4MzJhMTg1MDlkNDAwODQxYjNkMTYyMjI4MzcyYmY=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-24T20:53:41Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-24T20:53:41Z"}, "message": "Add convenience functions to SourceChange for creating single edits", "tree": {"sha": "0d578585dc4d706a910e248d8525e5537b952fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d578585dc4d706a910e248d8525e5537b952fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22e1c7a112832a18509d400841b3d162228372bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22e1c7a112832a18509d400841b3d162228372bf", "html_url": "https://github.com/rust-lang/rust/commit/22e1c7a112832a18509d400841b3d162228372bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22e1c7a112832a18509d400841b3d162228372bf/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "449eea11617e79c90b5d8de0959ef2bbe2a5d730", "url": "https://api.github.com/repos/rust-lang/rust/commits/449eea11617e79c90b5d8de0959ef2bbe2a5d730", "html_url": "https://github.com/rust-lang/rust/commit/449eea11617e79c90b5d8de0959ef2bbe2a5d730"}], "stats": {"total": 107, "additions": 63, "deletions": 44}, "files": [{"sha": "9a8c23a15f11ef573465e4d241907da3e0108bdc", "filename": "crates/ra_ide_api/src/assists.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/22e1c7a112832a18509d400841b3d162228372bf/crates%2Fra_ide_api%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e1c7a112832a18509d400841b3d162228372bf/crates%2Fra_ide_api%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fassists.rs?ref=22e1c7a112832a18509d400841b3d162228372bf", "patch": "@@ -17,14 +17,9 @@ pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<Assist> {\n             let file_id = frange.file_id;\n             let file_edit = SourceFileEdit { file_id, edit: action.edit };\n             let id = label.id;\n-            let change = SourceChange {\n-                label: label.label,\n-                source_file_edits: vec![file_edit],\n-                file_system_edits: vec![],\n-                cursor_position: action\n-                    .cursor_position\n-                    .map(|offset| FilePosition { offset, file_id }),\n-            };\n+            let change = SourceChange::source_edit(label.label, file_edit).with_cursor_opt(\n+                action.cursor_position.map(|offset| FilePosition { offset, file_id }),\n+            );\n             Assist { id, change }\n         })\n         .collect()"}, {"sha": "b0f23773e80e7d81fe38d264b7ae54717f6da360", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/22e1c7a112832a18509d400841b3d162228372bf/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e1c7a112832a18509d400841b3d162228372bf/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=22e1c7a112832a18509d400841b3d162228372bf", "patch": "@@ -71,12 +71,10 @@ fn check_unnecessary_braces_in_use_statement(\n             range,\n             message: format!(\"Unnecessary braces in use statement\"),\n             severity: Severity::WeakWarning,\n-            fix: Some(SourceChange {\n-                label: \"Remove unnecessary braces\".to_string(),\n-                source_file_edits: vec![SourceFileEdit { file_id, edit }],\n-                file_system_edits: Vec::new(),\n-                cursor_position: None,\n-            }),\n+            fix: Some(SourceChange::source_edit(\n+                \"Remove unnecessary braces\",\n+                SourceFileEdit { file_id, edit },\n+            )),\n         });\n     }\n \n@@ -119,12 +117,10 @@ fn check_struct_shorthand_initialization(\n                     range: named_field.syntax().range(),\n                     message: format!(\"Shorthand struct initialization\"),\n                     severity: Severity::WeakWarning,\n-                    fix: Some(SourceChange {\n-                        label: \"use struct shorthand initialization\".to_string(),\n-                        source_file_edits: vec![SourceFileEdit { file_id, edit }],\n-                        file_system_edits: Vec::new(),\n-                        cursor_position: None,\n-                    }),\n+                    fix: Some(SourceChange::source_edit(\n+                        \"use struct shorthand initialization\",\n+                        SourceFileEdit { file_id, edit },\n+                    )),\n                 });\n             }\n         }\n@@ -144,12 +140,7 @@ fn check_module(\n             Problem::UnresolvedModule { candidate } => {\n                 let create_file =\n                     FileSystemEdit::CreateFile { source_root, path: candidate.clone() };\n-                let fix = SourceChange {\n-                    label: \"create module\".to_string(),\n-                    source_file_edits: Vec::new(),\n-                    file_system_edits: vec![create_file],\n-                    cursor_position: None,\n-                };\n+                let fix = SourceChange::system_edit(\"create module\", create_file);\n                 Diagnostic {\n                     range: name_node.range(),\n                     message: \"unresolved module\".to_string(),"}, {"sha": "4e4001750db4e2c313c254b66f4cb513924e8bdf", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/22e1c7a112832a18509d400841b3d162228372bf/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e1c7a112832a18509d400841b3d162228372bf/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=22e1c7a112832a18509d400841b3d162228372bf", "patch": "@@ -97,6 +97,44 @@ pub struct SourceChange {\n     pub cursor_position: Option<FilePosition>,\n }\n \n+impl SourceChange {\n+    pub fn source_edits<L: Into<String>>(label: L, edits: Vec<SourceFileEdit>) -> Self {\n+        SourceChange {\n+            label: label.into(),\n+            source_file_edits: edits,\n+            file_system_edits: vec![],\n+            cursor_position: None,\n+        }\n+    }\n+\n+    pub fn system_edits<L: Into<String>>(label: L, edits: Vec<FileSystemEdit>) -> Self {\n+        SourceChange {\n+            label: label.into(),\n+            source_file_edits: vec![],\n+            file_system_edits: edits,\n+            cursor_position: None,\n+        }\n+    }\n+\n+    pub fn source_edit<L: Into<String>>(label: L, edit: SourceFileEdit) -> Self {\n+        SourceChange::source_edits(label, vec![edit])\n+    }\n+\n+    pub fn system_edit<L: Into<String>>(label: L, edit: FileSystemEdit) -> Self {\n+        SourceChange::system_edits(label, vec![edit])\n+    }\n+\n+    pub fn with_cursor(mut self, cursor_position: FilePosition) -> Self {\n+        self.cursor_position = Some(cursor_position);\n+        self\n+    }\n+\n+    pub fn with_cursor_opt(mut self, cursor_position: Option<FilePosition>) -> Self {\n+        self.cursor_position = cursor_position;\n+        self\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct SourceFileEdit {\n     pub file_id: FileId,\n@@ -285,12 +323,7 @@ impl Analysis {\n             file_id: frange.file_id,\n             edit: join_lines::join_lines(&file, frange.range),\n         };\n-        SourceChange {\n-            label: \"join lines\".to_string(),\n-            source_file_edits: vec![file_edit],\n-            file_system_edits: vec![],\n-            cursor_position: None,\n-        }\n+        SourceChange::source_edit(\"join lines\", file_edit)\n     }\n \n     /// Returns an edit which should be applied when opening a new line, fixing\n@@ -305,12 +338,10 @@ impl Analysis {\n     pub fn on_eq_typed(&self, position: FilePosition) -> Option<SourceChange> {\n         let file = self.db.parse(position.file_id);\n         let edit = typing::on_eq_typed(&file, position.offset)?;\n-        Some(SourceChange {\n-            label: \"add semicolon\".to_string(),\n-            source_file_edits: vec![SourceFileEdit { edit, file_id: position.file_id }],\n-            file_system_edits: vec![],\n-            cursor_position: None,\n-        })\n+        Some(SourceChange::source_edit(\n+            \"add semicolon\",\n+            SourceFileEdit { edit, file_id: position.file_id },\n+        ))\n     }\n \n     /// Returns an edit which should be applied when a dot ('.') is typed on a blank line, indenting the line appropriately."}, {"sha": "42408446818e5829470827252b43c75403009a27", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22e1c7a112832a18509d400841b3d162228372bf/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e1c7a112832a18509d400841b3d162228372bf/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=22e1c7a112832a18509d400841b3d162228372bf", "patch": "@@ -31,12 +31,14 @@ pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<Sour\n     let cursor_position = position.offset + TextUnit::of_str(&inserted);\n     let mut edit = TextEditBuilder::default();\n     edit.insert(position.offset, inserted);\n-    Some(SourceChange {\n-        label: \"on enter\".to_string(),\n-        source_file_edits: vec![SourceFileEdit { edit: edit.finish(), file_id: position.file_id }],\n-        file_system_edits: vec![],\n-        cursor_position: Some(FilePosition { offset: cursor_position, file_id: position.file_id }),\n-    })\n+\n+    Some(\n+        SourceChange::source_edit(\n+            \"on enter\",\n+            SourceFileEdit { edit: edit.finish(), file_id: position.file_id },\n+        )\n+        .with_cursor(FilePosition { offset: cursor_position, file_id: position.file_id }),\n+    )\n }\n \n fn node_indent<'a>(file: &'a SourceFile, node: &SyntaxNode) -> Option<&'a str> {"}]}