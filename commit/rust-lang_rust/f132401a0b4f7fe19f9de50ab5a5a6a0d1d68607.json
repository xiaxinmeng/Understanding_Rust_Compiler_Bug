{"sha": "f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMzI0MDFhMGI0ZjdmZTE5ZjlkZTUwYWI1YTVhNmEwZDFkNjg2MDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-24T15:52:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-24T15:52:36Z"}, "message": "auto merge of #7982 : thestinger/rust/iterator, r=thestinger\n\nf0f4dcc r=huonw\r\n25e9c4c r=graydon\r\na87c2d1 r=brson\r\n16f369d r=cmr\r\n9f05cc8 r=bstrie\r\ne858055 r=huonw\r\n5d80938 r=thestinger\r\n05d03e7 r=cmr\r\n8f86fa3 r=thestinger", "tree": {"sha": "732c07d43b90c2183e98a79cbd34e0bafaea2585", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/732c07d43b90c2183e98a79cbd34e0bafaea2585"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "html_url": "https://github.com/rust-lang/rust/commit/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51028532d790db476b102ebdda40bb9b1a7f8106", "url": "https://api.github.com/repos/rust-lang/rust/commits/51028532d790db476b102ebdda40bb9b1a7f8106", "html_url": "https://github.com/rust-lang/rust/commit/51028532d790db476b102ebdda40bb9b1a7f8106"}, {"sha": "8f86fa3b31ec80020c30b70d1d04987481f89e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f86fa3b31ec80020c30b70d1d04987481f89e4c", "html_url": "https://github.com/rust-lang/rust/commit/8f86fa3b31ec80020c30b70d1d04987481f89e4c"}], "stats": {"total": 961, "additions": 589, "deletions": 372}, "files": [{"sha": "1b195e99979895b05a9d22fe951fa335b2db9565", "filename": "doc/tutorial-container.md", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/doc%2Ftutorial-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/doc%2Ftutorial-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-container.md?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -192,15 +192,15 @@ let mut it = xs.iter().zip(ys.iter());\n \n // print out the pairs of elements up to (&3, &\"baz\")\n for it.advance |(x, y)| {\n-    println(fmt!(\"%d %s\", *x, *y));\n+    printfln!(\"%d %s\", *x, *y);\n \n     if *x == 3 {\n         break;\n     }\n }\n \n // yield and print the last pair from the iterator\n-println(fmt!(\"last: %?\", it.next()));\n+printfln!(\"last: %?\", it.next());\n \n // the iterator is now fully consumed\n assert!(it.next().is_none());\n@@ -294,15 +294,59 @@ another `DoubleEndedIterator` with `next` and `next_back` exchanged.\n ~~~\n let xs = [1, 2, 3, 4, 5, 6];\n let mut it = xs.iter();\n-println(fmt!(\"%?\", it.next())); // prints `Some(&1)`\n-println(fmt!(\"%?\", it.next())); // prints `Some(&2)`\n-println(fmt!(\"%?\", it.next_back())); // prints `Some(&6)`\n+printfln!(\"%?\", it.next()); // prints `Some(&1)`\n+printfln!(\"%?\", it.next()); // prints `Some(&2)`\n+printfln!(\"%?\", it.next_back()); // prints `Some(&6)`\n \n // prints `5`, `4` and `3`\n for it.invert().advance |&x| {\n-    println(fmt!(\"%?\", x))\n+    printfln!(\"%?\", x)\n }\n ~~~\n \n The `rev_iter` and `mut_rev_iter` methods on vectors just return an inverted\n version of the standard immutable and mutable vector iterators.\n+\n+The `chain_`, `transform`, `filter`, `filter_map` and `peek` adaptors are\n+`DoubleEndedIterator` implementations if the underlying iterators are.\n+\n+~~~\n+let xs = [1, 2, 3, 4];\n+let ys = [5, 6, 7, 8];\n+let mut it = xs.iter().chain_(ys.iter()).transform(|&x| x * 2);\n+\n+printfln!(\"%?\", it.next()); // prints `Some(2)`\n+\n+// prints `16`, `14`, `12`, `10`, `8`, `6`, `4`\n+for it.invert().advance |x| {\n+    printfln!(\"%?\", x);\n+}\n+~~~\n+\n+## Random-access iterators\n+\n+The `RandomAccessIterator` trait represents an iterator offering random access\n+to the whole range. The `indexable` method retrieves the number of elements\n+accessible with the `idx` method.\n+\n+The `chain_` adaptor is an implementation of `RandomAccessIterator` if the\n+underlying iterators are.\n+\n+~~~\n+let xs = [1, 2, 3, 4, 5];\n+let ys = ~[7, 9, 11];\n+let mut it = xs.iter().chain_(ys.iter());\n+printfln!(\"%?\", it.idx(0)); // prints `Some(&1)`\n+printfln!(\"%?\", it.idx(5)); // prints `Some(&7)`\n+printfln!(\"%?\", it.idx(7)); // prints `Some(&11)`\n+printfln!(\"%?\", it.idx(8)); // prints `None`\n+\n+// yield two elements from the beginning, and one from the end\n+it.next();\n+it.next();\n+it.next_back();\n+\n+printfln!(\"%?\", it.idx(0)); // prints `Some(&3)`\n+printfln!(\"%?\", it.idx(4)); // prints `Some(&9)`\n+printfln!(\"%?\", it.idx(6)); // prints `None`\n+~~~"}, {"sha": "7cd73c82530815788842bceac46330e1d87e970f", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -292,7 +292,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n             }\n         }\n         if i != num_check_lines {\n-            fatal_ProcRes(fmt!(\"line not found in debugger output: %s\"\n+            fatal_ProcRes(fmt!(\"line not found in debugger output: %s\",\n                                check_lines[i]), &ProcRes);\n         }\n     }"}, {"sha": "37d95d622c0830094888d0f98be02478e4d648ff", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -75,7 +75,7 @@ impl<'self> ToBase64 for &'self [u8] {\n      *\n      * fn main () {\n      *     let str = [52,32].to_base64(standard);\n-     *     println(fmt!(\"%s\", str));\n+     *     printfln!(\"%s\", str);\n      * }\n      * ~~~\n      */\n@@ -164,7 +164,7 @@ impl<'self> ToBase64 for &'self str {\n      *\n      * fn main () {\n      *     let str = \"Hello, World\".to_base64(standard);\n-     *     println(fmt!(\"%s\",str));\n+     *     printfln!(\"%s\", str);\n      * }\n      * ~~~\n      *\n@@ -194,9 +194,9 @@ impl<'self> FromBase64 for &'self [u8] {\n      *\n      * fn main () {\n      *     let str = [52,32].to_base64(standard);\n-     *     println(fmt!(\"%s\", str));\n+     *     printfln!(\"%s\", str);\n      *     let bytes = str.from_base64();\n-     *     println(fmt!(\"%?\",bytes));\n+     *     printfln!(\"%?\", bytes);\n      * }\n      * ~~~\n      */\n@@ -271,11 +271,11 @@ impl<'self> FromBase64 for &'self str {\n      *\n      * fn main () {\n      *     let hello_str = \"Hello, World\".to_base64(standard);\n-     *     println(fmt!(\"%s\",hello_str));\n+     *     printfln!(\"%s\", hello_str);\n      *     let bytes = hello_str.from_base64();\n-     *     println(fmt!(\"%?\",bytes));\n+     *     printfln!(\"%?\", bytes);\n      *     let result_str = str::from_bytes(bytes);\n-     *     println(fmt!(\"%s\",result_str));\n+     *     printfln!(\"%s\", result_str);\n      * }\n      * ~~~\n      */"}, {"sha": "5e37efa647ad695225c7b8315fdc761879e208e1", "filename": "src/libextra/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -19,7 +19,7 @@\n  * # fn make_a_sandwich() {};\n  * let mut delayed_fib = extra::future::spawn (|| fib(5000) );\n  * make_a_sandwich();\n- * println(fmt!(\"fib(5000) = %?\", delayed_fib.get()))\n+ * printfln!(\"fib(5000) = %?\", delayed_fib.get())\n  * ~~~\n  */\n "}, {"sha": "ad452125239de6404b5e2c55a14c3c4f6a4d7d6a", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -44,7 +44,7 @@\n  *    }\n  *\n  *    fn print_usage(program: &str, _opts: &[Opt]) {\n- *        println(fmt!(\"Usage: %s [options]\", program));\n+ *        printfln!(\"Usage: %s [options]\", program);\n  *        println(\"-o\\t\\tOutput\");\n  *        println(\"-h --help\\tUsage\");\n  *    }"}, {"sha": "04d6b8ebca5fe38a8a637d01c504ddbfbd3f6562", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 43, "deletions": 47, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -23,11 +23,17 @@ cycle cannot be created with `Rc<T>` because there is no way to modify it after\n \n \n use std::cast;\n-use std::libc::{c_void, size_t, malloc, free};\n use std::ptr;\n-use std::sys;\n use std::unstable::intrinsics;\n \n+// Convert ~T into *mut T without dropping it\n+#[inline]\n+unsafe fn owned_to_raw<T>(mut box: ~T) -> *mut T {\n+    let ptr = ptr::to_mut_unsafe_ptr(box);\n+    intrinsics::forget(box);\n+    ptr\n+}\n+\n struct RcBox<T> {\n     value: T,\n     count: uint\n@@ -42,21 +48,20 @@ pub struct Rc<T> {\n \n impl<T> Rc<T> {\n     unsafe fn new(value: T) -> Rc<T> {\n-        let ptr = malloc(sys::size_of::<RcBox<T>>() as size_t) as *mut RcBox<T>;\n-        assert!(!ptr::is_null(ptr));\n-        intrinsics::move_val_init(&mut *ptr, RcBox{value: value, count: 1});\n-        Rc{ptr: ptr}\n+        Rc{ptr: owned_to_raw(~RcBox{value: value, count: 1})}\n     }\n }\n \n-// FIXME: #6516: should be a static method\n-pub fn rc_from_owned<T: Send>(value: T) -> Rc<T> {\n-    unsafe { Rc::new(value) }\n+impl<T: Send> Rc<T> {\n+    pub fn from_owned(value: T) -> Rc<T> {\n+        unsafe { Rc::new(value) }\n+    }\n }\n \n-// FIXME: #6516: should be a static method\n-pub fn rc_from_const<T: Freeze>(value: T) -> Rc<T> {\n-    unsafe { Rc::new(value) }\n+impl<T: Freeze> Rc<T> {\n+    pub fn from_const(value: T) -> Rc<T> {\n+        unsafe { Rc::new(value) }\n+    }\n }\n \n impl<T> Rc<T> {\n@@ -73,8 +78,7 @@ impl<T> Drop for Rc<T> {\n             if self.ptr.is_not_null() {\n                 (*self.ptr).count -= 1;\n                 if (*self.ptr).count == 0 {\n-                    ptr::read_ptr(self.ptr);\n-                    free(self.ptr as *c_void)\n+                    let _: ~T = cast::transmute(self.ptr);\n                 }\n             }\n         }\n@@ -107,7 +111,7 @@ mod test_rc {\n \n     #[test]\n     fn test_clone() {\n-        let x = rc_from_owned(Cell::new(5));\n+        let x = Rc::from_owned(Cell::new(5));\n         let y = x.clone();\n         do x.borrow().with_mut_ref |inner| {\n             *inner = 20;\n@@ -117,7 +121,7 @@ mod test_rc {\n \n     #[test]\n     fn test_deep_clone() {\n-        let x = rc_from_owned(Cell::new(5));\n+        let x = Rc::from_owned(Cell::new(5));\n         let y = x.deep_clone();\n         do x.borrow().with_mut_ref |inner| {\n             *inner = 20;\n@@ -127,31 +131,25 @@ mod test_rc {\n \n     #[test]\n     fn test_simple() {\n-        let x = rc_from_const(5);\n+        let x = Rc::from_const(5);\n         assert_eq!(*x.borrow(), 5);\n     }\n \n     #[test]\n     fn test_simple_clone() {\n-        let x = rc_from_const(5);\n+        let x = Rc::from_const(5);\n         let y = x.clone();\n         assert_eq!(*x.borrow(), 5);\n         assert_eq!(*y.borrow(), 5);\n     }\n \n     #[test]\n     fn test_destructor() {\n-        let x = rc_from_owned(~5);\n+        let x = Rc::from_owned(~5);\n         assert_eq!(**x.borrow(), 5);\n     }\n }\n \n-#[abi = \"rust-intrinsic\"]\n-extern \"rust-intrinsic\" {\n-    fn init<T>() -> T;\n-    fn uninit<T>() -> T;\n-}\n-\n #[deriving(Eq)]\n enum Borrow {\n     Mutable,\n@@ -175,21 +173,20 @@ pub struct RcMut<T> {\n \n impl<T> RcMut<T> {\n     unsafe fn new(value: T) -> RcMut<T> {\n-        let ptr = malloc(sys::size_of::<RcMutBox<T>>() as size_t) as *mut RcMutBox<T>;\n-        assert!(!ptr::is_null(ptr));\n-        intrinsics::move_val_init(&mut *ptr, RcMutBox{value: value, count: 1, borrow: Nothing});\n-        RcMut{ptr: ptr}\n+        RcMut{ptr: owned_to_raw(~RcMutBox{value: value, count: 1, borrow: Nothing})}\n     }\n }\n \n-// FIXME: #6516: should be a static method\n-pub fn rc_mut_from_owned<T: Send>(value: T) -> RcMut<T> {\n-    unsafe { RcMut::new(value) }\n+impl<T: Send> RcMut<T> {\n+    pub fn from_owned(value: T) -> RcMut<T> {\n+        unsafe { RcMut::new(value) }\n+    }\n }\n \n-// FIXME: #6516: should be a static method\n-pub fn rc_mut_from_const<T: Freeze>(value: T) -> RcMut<T> {\n-    unsafe { RcMut::new(value) }\n+impl<T: Freeze> RcMut<T> {\n+    pub fn from_const(value: T) -> RcMut<T> {\n+        unsafe { RcMut::new(value) }\n+    }\n }\n \n impl<T> RcMut<T> {\n@@ -226,8 +223,7 @@ impl<T> Drop for RcMut<T> {\n             if self.ptr.is_not_null() {\n                 (*self.ptr).count -= 1;\n                 if (*self.ptr).count == 0 {\n-                    ptr::replace_ptr(self.ptr, uninit());\n-                    free(self.ptr as *c_void)\n+                    let _: ~T = cast::transmute(self.ptr);\n                 }\n             }\n         }\n@@ -262,7 +258,7 @@ mod test_rc_mut {\n \n     #[test]\n     fn test_clone() {\n-        let x = rc_mut_from_owned(5);\n+        let x = RcMut::from_owned(5);\n         let y = x.clone();\n         do x.with_mut_borrow |value| {\n             *value = 20;\n@@ -274,7 +270,7 @@ mod test_rc_mut {\n \n     #[test]\n     fn test_deep_clone() {\n-        let x = rc_mut_from_const(5);\n+        let x = RcMut::from_const(5);\n         let y = x.deep_clone();\n         do x.with_mut_borrow |value| {\n             *value = 20;\n@@ -286,7 +282,7 @@ mod test_rc_mut {\n \n     #[test]\n     fn borrow_many() {\n-        let x = rc_mut_from_owned(5);\n+        let x = RcMut::from_owned(5);\n         let y = x.clone();\n \n         do x.with_borrow |a| {\n@@ -302,7 +298,7 @@ mod test_rc_mut {\n \n     #[test]\n     fn modify() {\n-        let x = rc_mut_from_const(5);\n+        let x = RcMut::from_const(5);\n         let y = x.clone();\n \n         do y.with_mut_borrow |a| {\n@@ -317,22 +313,22 @@ mod test_rc_mut {\n \n     #[test]\n     fn release_immutable() {\n-        let x = rc_mut_from_owned(5);\n+        let x = RcMut::from_owned(5);\n         do x.with_borrow |_| {}\n         do x.with_mut_borrow |_| {}\n     }\n \n     #[test]\n     fn release_mutable() {\n-        let x = rc_mut_from_const(5);\n+        let x = RcMut::from_const(5);\n         do x.with_mut_borrow |_| {}\n         do x.with_borrow |_| {}\n     }\n \n     #[test]\n     #[should_fail]\n     fn frozen() {\n-        let x = rc_mut_from_owned(5);\n+        let x = RcMut::from_owned(5);\n         let y = x.clone();\n \n         do x.with_borrow |_| {\n@@ -344,7 +340,7 @@ mod test_rc_mut {\n     #[test]\n     #[should_fail]\n     fn mutable_dupe() {\n-        let x = rc_mut_from_const(5);\n+        let x = RcMut::from_const(5);\n         let y = x.clone();\n \n         do x.with_mut_borrow |_| {\n@@ -356,7 +352,7 @@ mod test_rc_mut {\n     #[test]\n     #[should_fail]\n     fn mutable_freeze() {\n-        let x = rc_mut_from_owned(5);\n+        let x = RcMut::from_owned(5);\n         let y = x.clone();\n \n         do x.with_mut_borrow |_| {\n@@ -368,7 +364,7 @@ mod test_rc_mut {\n     #[test]\n     #[should_fail]\n     fn restore_freeze() {\n-        let x = rc_mut_from_const(5);\n+        let x = RcMut::from_const(5);\n         let y = x.clone();\n \n         do x.with_borrow |_| {"}, {"sha": "edd16fe88f425196b0ad96201caf98858d90ffc3", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -103,6 +103,6 @@ fn test_task_pool() {\n     };\n     let mut pool = TaskPool::new(4, Some(SingleThreaded), f);\n     for 8.times {\n-        pool.execute(|i| println(fmt!(\"Hello from thread %u!\", *i)));\n+        pool.execute(|i| printfln!(\"Hello from thread %u!\", *i));\n     }\n }"}, {"sha": "303ae6a6d1de147552c936844354f3ac8039e4c9", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -1263,7 +1263,7 @@ mod test_set {\n \n         let mut n = 0;\n         for m.iter().advance |x| {\n-            println(fmt!(\"%?\", x));\n+            printfln!(x);\n             assert_eq!(*x, n);\n             n += 1\n         }"}, {"sha": "c47c573d16fbe3bbae89eef2f3649f9b1a026554", "filename": "src/librust/rust.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -132,13 +132,13 @@ fn cmd_help(args: &[~str]) -> ValidUsage {\n         match find_cmd(command_string) {\n             Some(command) => {\n                 match command.action {\n-                    CallMain(prog, _) => io::println(fmt!(\n+                    CallMain(prog, _) => printfln!(\n                         \"The %s command is an alias for the %s program.\",\n-                        command.cmd, prog)),\n+                        command.cmd, prog),\n                     _       => ()\n                 }\n                 match command.usage_full {\n-                    UsgStr(msg) => io::println(fmt!(\"%s\\n\", msg)),\n+                    UsgStr(msg) => printfln!(\"%s\\n\", msg),\n                     UsgCall(f)  => f(),\n                 }\n                 Valid(0)\n@@ -211,8 +211,7 @@ fn usage() {\n \n     for COMMANDS.iter().advance |command| {\n         let padding = \" \".repeat(INDENT - command.cmd.len());\n-        io::println(fmt!(\"    %s%s%s\",\n-                         command.cmd, padding, command.usage_line));\n+        printfln!(\"    %s%s%s\", command.cmd, padding, command.usage_line);\n     }\n \n     io::print("}, {"sha": "48a685058bbd5ce96e2cce4fbffa725ad87a2770", "filename": "src/librustc/back/passes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fback%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fback%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fpasses.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -191,15 +191,15 @@ pub fn list_passes() {\n \n     io::println(\"\\nAnalysis Passes:\");\n     for analysis_passes.iter().advance |&(name, desc)| {\n-        io::println(fmt!(\"    %-30s -- %s\", name, desc));\n+        printfln!(\"    %-30s -- %s\", name, desc);\n     }\n     io::println(\"\\nTransformation Passes:\");\n     for transform_passes.iter().advance |&(name, desc)| {\n-        io::println(fmt!(\"    %-30s -- %s\", name, desc));\n+        printfln!(\"    %-30s -- %s\", name, desc);\n     }\n     io::println(\"\\nUtility Passes:\");\n     for utility_passes.iter().advance |&(name, desc)| {\n-        io::println(fmt!(\"    %-30s -- %s\", name, desc));\n+        printfln!(\"    %-30s -- %s\", name, desc);\n     }\n }\n \n@@ -344,7 +344,7 @@ fn passes_exist() {\n     if failed.len() > 0 {\n         io::println(\"Some passes don't exist:\");\n         for failed.iter().advance |&n| {\n-            io::println(fmt!(\"    %s\", n));\n+            printfln!(\"    %s\", n);\n         }\n         fail!();\n     }"}, {"sha": "78e1a579d741b1cf28f2cbb0edbb6b763acc9e7e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -1624,16 +1624,16 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         }\n \n         io::println(\"metadata stats:\");\n-        io::println(fmt!(\"    inline bytes: %u\", ecx.stats.inline_bytes));\n-        io::println(fmt!(\" attribute bytes: %u\", ecx.stats.attr_bytes));\n-        io::println(fmt!(\"       dep bytes: %u\", ecx.stats.dep_bytes));\n-        io::println(fmt!(\" lang item bytes: %u\", ecx.stats.lang_item_bytes));\n-        io::println(fmt!(\" link args bytes: %u\", ecx.stats.link_args_bytes));\n-        io::println(fmt!(\"      misc bytes: %u\", ecx.stats.misc_bytes));\n-        io::println(fmt!(\"      item bytes: %u\", ecx.stats.item_bytes));\n-        io::println(fmt!(\"     index bytes: %u\", ecx.stats.index_bytes));\n-        io::println(fmt!(\"      zero bytes: %u\", ecx.stats.zero_bytes));\n-        io::println(fmt!(\"     total bytes: %u\", ecx.stats.total_bytes));\n+        printfln!(\"    inline bytes: %u\", ecx.stats.inline_bytes);\n+        printfln!(\" attribute bytes: %u\", ecx.stats.attr_bytes);\n+        printfln!(\"       dep bytes: %u\", ecx.stats.dep_bytes);\n+        printfln!(\" lang item bytes: %u\", ecx.stats.lang_item_bytes);\n+        printfln!(\" link args bytes: %u\", ecx.stats.link_args_bytes);\n+        printfln!(\"      misc bytes: %u\", ecx.stats.misc_bytes);\n+        printfln!(\"      item bytes: %u\", ecx.stats.item_bytes);\n+        printfln!(\"     index bytes: %u\", ecx.stats.index_bytes);\n+        printfln!(\"      zero bytes: %u\", ecx.stats.zero_bytes);\n+        printfln!(\"     total bytes: %u\", ecx.stats.total_bytes);\n     }\n \n     // Pad this, since something (LLVM, presumably) is cutting off the"}, {"sha": "fc34e873ef95eb2942d177f038ece87d28cbe0a3", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -232,7 +232,7 @@ impl<'self> CheckLoanCtxt<'self> {\n                     self.bccx.span_err(\n                         new_loan.span,\n                         fmt!(\"cannot borrow `%s` as %s because \\\n-                              it is also borrowed as %s\"\n+                              it is also borrowed as %s\",\n                              self.bccx.loan_path_to_str(new_loan.loan_path),\n                              self.bccx.mut_to_str(new_loan.mutbl),\n                              self.bccx.mut_to_str(old_loan.mutbl)));\n@@ -320,7 +320,7 @@ impl<'self> CheckLoanCtxt<'self> {\n         // Otherwise, just a plain error.\n         self.bccx.span_err(\n             expr.span,\n-            fmt!(\"cannot assign to %s %s\"\n+            fmt!(\"cannot assign to %s %s\",\n                  cmt.mutbl.to_user_str(),\n                  self.bccx.cmt_to_str(cmt)));\n         return;"}, {"sha": "bf9b4fcaedfa6665a5da2d94456a5b8438385578", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -93,16 +93,16 @@ pub fn check_crate(\n \n     if tcx.sess.borrowck_stats() {\n         io::println(\"--- borrowck stats ---\");\n-        io::println(fmt!(\"paths requiring guarantees: %u\",\n-                        bccx.stats.guaranteed_paths));\n-        io::println(fmt!(\"paths requiring loans     : %s\",\n-                         make_stat(bccx, bccx.stats.loaned_paths_same)));\n-        io::println(fmt!(\"paths requiring imm loans : %s\",\n-                         make_stat(bccx, bccx.stats.loaned_paths_imm)));\n-        io::println(fmt!(\"stable paths              : %s\",\n-                         make_stat(bccx, bccx.stats.stable_paths)));\n-        io::println(fmt!(\"paths requiring purity    : %s\",\n-                         make_stat(bccx, bccx.stats.req_pure_paths)));\n+        printfln!(\"paths requiring guarantees: %u\",\n+                  bccx.stats.guaranteed_paths);\n+        printfln!(\"paths requiring loans     : %s\",\n+                  make_stat(bccx, bccx.stats.loaned_paths_same));\n+        printfln!(\"paths requiring imm loans : %s\",\n+                  make_stat(bccx, bccx.stats.loaned_paths_imm));\n+        printfln!(\"stable paths              : %s\",\n+                  make_stat(bccx, bccx.stats.stable_paths));\n+        printfln!(\"paths requiring purity    : %s\",\n+                  make_stat(bccx, bccx.stats.req_pure_paths));\n     }\n \n     return (bccx.root_map, bccx.write_guard_map);"}, {"sha": "fba67d57994e4d1b5fae91976dbc3008ce428021", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -3011,32 +3011,30 @@ pub fn trans_crate(sess: session::Session,\n     write_metadata(ccx, crate);\n     if ccx.sess.trans_stats() {\n         io::println(\"--- trans stats ---\");\n-        io::println(fmt!(\"n_static_tydescs: %u\",\n-                         ccx.stats.n_static_tydescs));\n-        io::println(fmt!(\"n_glues_created: %u\",\n-                         ccx.stats.n_glues_created));\n-        io::println(fmt!(\"n_null_glues: %u\", ccx.stats.n_null_glues));\n-        io::println(fmt!(\"n_real_glues: %u\", ccx.stats.n_real_glues));\n-\n-        io::println(fmt!(\"n_fns: %u\", ccx.stats.n_fns));\n-        io::println(fmt!(\"n_monos: %u\", ccx.stats.n_monos));\n-        io::println(fmt!(\"n_inlines: %u\", ccx.stats.n_inlines));\n-        io::println(fmt!(\"n_closures: %u\", ccx.stats.n_closures));\n+        printfln!(\"n_static_tydescs: %u\", ccx.stats.n_static_tydescs);\n+        printfln!(\"n_glues_created: %u\", ccx.stats.n_glues_created);\n+        printfln!(\"n_null_glues: %u\", ccx.stats.n_null_glues);\n+        printfln!(\"n_real_glues: %u\", ccx.stats.n_real_glues);\n+\n+        printfln!(\"n_fns: %u\", ccx.stats.n_fns);\n+        printfln!(\"n_monos: %u\", ccx.stats.n_monos);\n+        printfln!(\"n_inlines: %u\", ccx.stats.n_inlines);\n+        printfln!(\"n_closures: %u\", ccx.stats.n_closures);\n         io::println(\"fn stats:\");\n         do sort::quick_sort(ccx.stats.fn_stats) |&(_, _, insns_a), &(_, _, insns_b)| {\n             insns_a > insns_b\n         }\n         for ccx.stats.fn_stats.iter().advance |tuple| {\n             match *tuple {\n                 (ref name, ms, insns) => {\n-                    io::println(fmt!(\"%u insns, %u ms, %s\", insns, ms, *name));\n+                    printfln!(\"%u insns, %u ms, %s\", insns, ms, *name);\n                 }\n             }\n         }\n     }\n     if ccx.sess.count_llvm_insns() {\n         for ccx.stats.llvm_insns.iter().advance |(k, v)| {\n-            io::println(fmt!(\"%-7u %s\", *v, *k));\n+            printfln!(\"%-7u %s\", *v, *k);\n         }\n     }\n "}, {"sha": "d64615e5dc7b3507909544804eb363dbc0abaa35", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -654,9 +654,9 @@ pub fn trans_call_inner(in_cx: @mut Block,\n \n         // Uncomment this to debug calls.\n         /*\n-        io::println(fmt!(\"calling: %s\", bcx.val_to_str(llfn)));\n+        printfln!(\"calling: %s\", bcx.val_to_str(llfn));\n         for llargs.iter().advance |llarg| {\n-            io::println(fmt!(\"arg: %s\", bcx.val_to_str(*llarg)));\n+            printfln!(\"arg: %s\", bcx.val_to_str(*llarg));\n         }\n         io::println(\"---\");\n         */"}, {"sha": "372d24e664cf87f34beb2a1c0672fecee9306fa8", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -805,6 +805,9 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n                             _ => Ret(bcx, BitCast(bcx, llsrcval, llouttype))\n                         }\n                     }\n+                } else if ty::type_is_immediate(ccx.tcx, out_type) {\n+                    let llsrcptr = PointerCast(bcx, llsrcval, llouttype.ptr_to());\n+                    Ret(bcx, Load(bcx, llsrcptr));\n                 } else {\n                     // NB: Do not use a Load and Store here. This causes massive\n                     // code bloat when `transmute` is used on large structural"}, {"sha": "024ab7af0814def9ef0f708d7960026c88a904e8", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -37,7 +37,6 @@ use util::ppaux::ty_to_short_str;\n \n use middle::trans::type_::Type;\n \n-use std::io;\n use std::libc::c_uint;\n use std::str;\n use syntax::ast;\n@@ -649,8 +648,8 @@ pub fn declare_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n     let llty = type_of(ccx, t);\n \n     if ccx.sess.count_type_sizes() {\n-        io::println(fmt!(\"%u\\t%s\", llsize_of_real(ccx, llty),\n-                         ppaux::ty_to_str(ccx.tcx, t)));\n+        printfln!(\"%u\\t%s\", llsize_of_real(ccx, llty),\n+                  ppaux::ty_to_str(ccx.tcx, t));\n     }\n \n     let llsize = llsize_of(ccx, llty);"}, {"sha": "7eea20175f9fc7e77e666849e76da5deb7cbcf6c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -2712,7 +2712,7 @@ pub fn node_id_to_trait_ref(cx: ctxt, id: ast::node_id) -> @ty::TraitRef {\n }\n \n pub fn node_id_to_type(cx: ctxt, id: ast::node_id) -> t {\n-    //io::println(fmt!(\"%?/%?\", id, cx.node_types.len()));\n+    //printfln!(\"%?/%?\", id, cx.node_types.len());\n     match cx.node_types.find(&(id as uint)) {\n        Some(&t) => t,\n        None => cx.sess.bug("}, {"sha": "8d546366846b406538c08ea98083e8993c681e8e", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -194,7 +194,6 @@ impl<'self> LookupContext<'self> {\n         self.push_inherent_candidates(self_ty);\n         self.push_extension_candidates();\n \n-        let mut enum_dids = ~[];\n         let mut self_ty = self_ty;\n         let mut autoderefs = 0;\n         loop {\n@@ -236,7 +235,7 @@ impl<'self> LookupContext<'self> {\n             }\n \n             // Otherwise, perform autoderef.\n-            match self.deref(self_ty, &mut enum_dids) {\n+            match self.deref(self_ty) {\n                 None => { break; }\n                 Some(ty) => {\n                     self_ty = ty;\n@@ -248,20 +247,8 @@ impl<'self> LookupContext<'self> {\n         self.search_for_autosliced_method(self_ty, autoderefs)\n     }\n \n-    pub fn deref(&self, ty: ty::t, enum_dids: &mut ~[ast::def_id])\n+    pub fn deref(&self, ty: ty::t)\n                  -> Option<ty::t> {\n-        match ty::get(ty).sty {\n-            ty_enum(did, _) => {\n-                // Watch out for newtype'd enums like \"enum t = @T\".\n-                // See discussion in typeck::check::do_autoderef().\n-                if enum_dids.iter().any(|x| x == &did) {\n-                    return None;\n-                }\n-                enum_dids.push(did);\n-            }\n-            _ => {}\n-        }\n-\n         match ty::deref(self.tcx(), ty, false) {\n             None => None,\n             Some(t) => {\n@@ -285,7 +272,6 @@ impl<'self> LookupContext<'self> {\n          * we'll want to find the inherent impls for `C`.\n          */\n \n-        let mut enum_dids = ~[];\n         let mut self_ty = self_ty;\n         loop {\n             match get(self_ty).sty {\n@@ -314,7 +300,7 @@ impl<'self> LookupContext<'self> {\n             // n.b.: Generally speaking, we only loop if we hit the\n             // fallthrough case in the match above.  The exception\n             // would be newtype enums.\n-            self_ty = match self.deref(self_ty, &mut enum_dids) {\n+            self_ty = match self.deref(self_ty) {\n                 None => { return; }\n                 Some(ty) => { ty }\n             }"}, {"sha": "39fbdb92a2feef7fef10a6a9eb87ffdffe2b2f78", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -128,28 +128,28 @@ pub fn version(argv0: &str) {\n     let mut vers = ~\"unknown version\";\n     let env_vers = env!(\"CFG_VERSION\");\n     if env_vers.len() != 0 { vers = env_vers.to_owned(); }\n-    io::println(fmt!(\"%s %s\", argv0, vers));\n-    io::println(fmt!(\"host: %s\", host_triple()));\n+    printfln!(\"%s %s\", argv0, vers);\n+    printfln!(\"host: %s\", host_triple());\n }\n \n pub fn usage(argv0: &str) {\n     let message = fmt!(\"Usage: %s [OPTIONS] INPUT\", argv0);\n-    io::println(fmt!(\"%s\\\n+    printfln!(\"%s\\\n Additional help:\n     -W help             Print 'lint' options and default settings\n     -Z help             Print internal options for debugging rustc\\n\",\n-                     groups::usage(message, optgroups())));\n+              groups::usage(message, optgroups()));\n }\n \n pub fn describe_warnings() {\n     use extra::sort::Sort;\n-    io::println(fmt!(\"\n+    printfln!(\"\n Available lint options:\n     -W <foo>           Warn about <foo>\n     -A <foo>           Allow <foo>\n     -D <foo>           Deny <foo>\n     -F <foo>           Forbid <foo> (deny, and deny all overrides)\n-\"));\n+\");\n \n     let lint_dict = lint::get_lint_dict();\n     let mut lint_dict = lint_dict.consume()\n@@ -164,28 +164,28 @@ Available lint options:\n     fn padded(max: uint, s: &str) -> ~str {\n         str::from_bytes(vec::from_elem(max - s.len(), ' ' as u8)) + s\n     }\n-    io::println(fmt!(\"\\nAvailable lint checks:\\n\"));\n-    io::println(fmt!(\"    %s  %7.7s  %s\",\n-                     padded(max_key, \"name\"), \"default\", \"meaning\"));\n-    io::println(fmt!(\"    %s  %7.7s  %s\\n\",\n-                     padded(max_key, \"----\"), \"-------\", \"-------\"));\n+    printfln!(\"\\nAvailable lint checks:\\n\");\n+    printfln!(\"    %s  %7.7s  %s\",\n+              padded(max_key, \"name\"), \"default\", \"meaning\");\n+    printfln!(\"    %s  %7.7s  %s\\n\",\n+              padded(max_key, \"----\"), \"-------\", \"-------\");\n     for lint_dict.consume_iter().advance |(spec, name)| {\n         let name = name.replace(\"_\", \"-\");\n-        io::println(fmt!(\"    %s  %7.7s  %s\",\n-                         padded(max_key, name),\n-                         lint::level_to_str(spec.default),\n-                         spec.desc));\n+        printfln!(\"    %s  %7.7s  %s\",\n+                  padded(max_key, name),\n+                  lint::level_to_str(spec.default),\n+                  spec.desc);\n     }\n     io::println(\"\");\n }\n \n pub fn describe_debug_flags() {\n-    io::println(fmt!(\"\\nAvailable debug options:\\n\"));\n+    printfln!(\"\\nAvailable debug options:\\n\");\n     let r = session::debugging_opts_map();\n     for r.iter().advance |tuple| {\n         match *tuple {\n             (ref name, ref desc, _) => {\n-                io::println(fmt!(\"    -Z %-20s -- %s\", *name, *desc));\n+                printfln!(\"    -Z %-20s -- %s\", *name, *desc);\n             }\n         }\n     }"}, {"sha": "6d5498898555d0bc96f465ded8522c89bac72373", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -14,15 +14,14 @@ use syntax::codemap::{span};\n use syntax::visit;\n \n use std::hashmap::HashSet;\n-use std::io;\n use extra;\n \n pub fn time<T>(do_it: bool, what: ~str, thunk: &fn() -> T) -> T {\n     if !do_it { return thunk(); }\n     let start = extra::time::precise_time_s();\n     let rv = thunk();\n     let end = extra::time::precise_time_s();\n-    io::println(fmt!(\"time: %3.3f s\\t%s\", end - start, what));\n+    printfln!(\"time: %3.3f s\\t%s\", end - start, what);\n     rv\n }\n "}, {"sha": "de4815ab7a6ede4863e259bd3365c547366baf76", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -74,7 +74,7 @@ pub fn usage() {\n     println(\"Options:\\n\");\n     let r = opts();\n     for r.iter().advance |opt| {\n-        println(fmt!(\"    %s\", opt.second()));\n+        printfln!(\"    %s\", opt.second());\n     }\n     println(\"\");\n }"}, {"sha": "b738f4a958681c4c04140fd90df5e91029b95f87", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -23,7 +23,6 @@ extern mod extra;\n extern mod rustc;\n extern mod syntax;\n \n-use std::io;\n use std::os;\n \n use config::Config;\n@@ -69,7 +68,7 @@ pub fn main() {\n     let config = match config::parse_config(args) {\n       Ok(config) => config,\n       Err(err) => {\n-        io::println(fmt!(\"error: %s\", err));\n+        printfln!(\"error: %s\", err);\n         return;\n       }\n     };"}, {"sha": "38c70f8be0595b44ef67757328a2ac9d450e14dc", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -334,7 +334,7 @@ fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n             None => { },\n         }\n         if (should_compile) {\n-            println(fmt!(\"compiling %s...\", src_filename));\n+            printfln!(\"compiling %s...\", src_filename);\n             driver::compile_upto(sess, cfg, &input, driver::cu_everything,\n                                  Some(outputs));\n             true\n@@ -413,8 +413,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n             if loaded_crates.is_empty() {\n                 println(\"no crates loaded\");\n             } else {\n-                println(fmt!(\"crates loaded: %s\",\n-                                 loaded_crates.connect(\", \")));\n+                printfln!(\"crates loaded: %s\", loaded_crates.connect(\", \"));\n             }\n         }\n         ~\"{\" => {"}, {"sha": "700dbea8182d2e4a0b9fb307232f9779e630e61e", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -400,7 +400,7 @@ pub fn mk_output_path(what: OutputType, where: Target,\n                                Test => \"test\",\n                                Bench => \"bench\",\n                                _     => \"\"\n-                           }\n+                           },\n                            os::EXE_SUFFIX))\n     };\n     if !output_path.is_absolute() {"}, {"sha": "37eb3aa5911ed3a96f27f86f119db6dfd03db7b8", "filename": "src/librustpkg/testsuite/pass/src/fancy-lib/pkg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     }\n \n     if args[2] != ~\"install\" {\n-        io::println(fmt!(\"Warning: I don't know how to %s\", args[2]));\n+        printfln!(\"Warning: I don't know how to %s\", args[2]);\n         return;\n     }\n "}, {"sha": "0c2a7bb7b400ca0a79f517a9c20ba0295f4f553a", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -53,6 +53,16 @@ pub trait DoubleEndedIterator<A>: Iterator<A> {\n     fn next_back(&mut self) -> Option<A>;\n }\n \n+/// An object implementing random access indexing by `uint`\n+pub trait RandomAccessIterator<A> {\n+    /// Return the number of indexable elements. At most `std::uint::max_value`\n+    /// elements are indexable, even if the iterator represents a longer range.\n+    fn indexable(&self) -> uint;\n+\n+    /// Return an element at an index\n+    fn idx(&self, index: uint) -> Option<A>;\n+}\n+\n /// Iterator adaptors provided for every `DoubleEndedIterator` implementation.\n ///\n /// In the future these will be default methods instead of a utility trait.\n@@ -316,7 +326,7 @@ pub trait IteratorUtil<A> {\n     /// use std::iterator::Counter;\n     ///\n     /// for Counter::new(0, 10).advance |i| {\n-    ///     io::println(fmt!(\"%d\", i));\n+    ///     printfln!(\"%d\", i);\n     /// }\n     /// ~~~\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool;\n@@ -836,6 +846,30 @@ for ChainIterator<A, T, U> {\n     }\n }\n \n+impl<A, T: RandomAccessIterator<A>, U: RandomAccessIterator<A>> RandomAccessIterator<A>\n+for ChainIterator<A, T, U> {\n+    #[inline]\n+    fn indexable(&self) -> uint {\n+        let (a, b) = (self.a.indexable(), self.b.indexable());\n+        let total = a + b;\n+        if total < a || total < b {\n+            uint::max_value\n+        } else {\n+            total\n+        }\n+    }\n+\n+    #[inline]\n+    fn idx(&self, index: uint) -> Option<A> {\n+        let len = self.a.indexable();\n+        if index < len {\n+            self.a.idx(index)\n+        } else {\n+            self.b.idx(index - len)\n+        }\n+    }\n+}\n+\n /// An iterator which iterates two other iterators simultaneously\n // FIXME #6967: Dummy A & B parameters to get around type inference bug\n #[deriving(Clone)]\n@@ -1718,4 +1752,23 @@ mod tests {\n         assert_eq!(it.next_back().unwrap(), &7)\n         assert_eq!(it.next_back(), None)\n     }\n+\n+    #[test]\n+    fn test_random_access_chain() {\n+        let xs = [1, 2, 3, 4, 5];\n+        let ys = ~[7, 9, 11];\n+        let mut it = xs.iter().chain_(ys.iter());\n+        assert_eq!(it.idx(0).unwrap(), &1);\n+        assert_eq!(it.idx(5).unwrap(), &7);\n+        assert_eq!(it.idx(7).unwrap(), &11);\n+        assert!(it.idx(8).is_none());\n+\n+        it.next();\n+        it.next();\n+        it.next_back();\n+\n+        assert_eq!(it.idx(0).unwrap(), &3);\n+        assert_eq!(it.idx(4).unwrap(), &9);\n+        assert!(it.idx(6).is_none());\n+    }\n }"}, {"sha": "acf7ea683fb544fd1f98506bffa70a3ad6e5e0e5", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -103,7 +103,7 @@ fn range_step_core(start: $T, stop: $T, step: $T_SIGNED, r: Range, it: &fn($T) -\n /// let nums = [1,2,3,4,5,6,7];\n ///\n /// for uint::range_step(0, nums.len() - 1, 2) |i| {\n-///     println(fmt!(\"%d & %d\", nums[i], nums[i+1]));\n+///     printfln!(\"%d & %d\", nums[i], nums[i+1]);\n /// }\n /// ~~~\n ///"}, {"sha": "6d0613b2e674fe40591080cfcb790b3f6aff792a", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -28,7 +28,7 @@ use std::rand::RngUtil;\n fn main() {\n     let mut rng = rand::rng();\n     if rng.gen() { // bool\n-        println(fmt!(\"int: %d, uint: %u\", rng.gen(), rng.gen()))\n+        printfln!(\"int: %d, uint: %u\", rng.gen(), rng.gen())\n     }\n }\n ~~~\n@@ -38,7 +38,7 @@ use std::rand;\n \n fn main () {\n     let tuple_ptr = rand::random::<~(f64, char)>();\n-    println(fmt!(\"%?\", tuple_ptr))\n+    printfln!(tuple_ptr)\n }\n ~~~\n */\n@@ -301,7 +301,7 @@ pub trait RngUtil {\n      *\n      * fn main() {\n      *     let mut rng = rand::rng();\n-     *     println(fmt!(\"%b\",rng.gen_weighted_bool(3)));\n+     *     printfln!(\"%b\", rng.gen_weighted_bool(3));\n      * }\n      * ~~~\n      */\n@@ -335,7 +335,7 @@ pub trait RngUtil {\n      *\n      * fn main() {\n      *     let mut rng = rand::rng();\n-     *     println(fmt!(\"%?\",rng.gen_bytes(8)));\n+     *     printfln!(rng.gen_bytes(8));\n      * }\n      * ~~~\n      */\n@@ -352,7 +352,7 @@ pub trait RngUtil {\n      *\n      * fn main() {\n      *     let mut rng = rand::rng();\n-     *     println(fmt!(\"%d\",rng.choose([1,2,4,8,16,32])));\n+     *     printfln!(\"%d\", rng.choose([1,2,4,8,16,32]));\n      * }\n      * ~~~\n      */\n@@ -375,7 +375,7 @@ pub trait RngUtil {\n      *     let x = [rand::Weighted {weight: 4, item: 'a'},\n      *              rand::Weighted {weight: 2, item: 'b'},\n      *              rand::Weighted {weight: 2, item: 'c'}];\n-     *     println(fmt!(\"%c\",rng.choose_weighted(x)));\n+     *     printfln!(\"%c\", rng.choose_weighted(x));\n      * }\n      * ~~~\n      */\n@@ -396,7 +396,7 @@ pub trait RngUtil {\n      *     let x = [rand::Weighted {weight: 4, item: 'a'},\n      *              rand::Weighted {weight: 2, item: 'b'},\n      *              rand::Weighted {weight: 2, item: 'c'}];\n-     *     println(fmt!(\"%?\",rng.choose_weighted_option(x)));\n+     *     printfln!(rng.choose_weighted_option(x));\n      * }\n      * ~~~\n      */\n@@ -418,7 +418,7 @@ pub trait RngUtil {\n      *     let x = [rand::Weighted {weight: 4, item: 'a'},\n      *              rand::Weighted {weight: 2, item: 'b'},\n      *              rand::Weighted {weight: 2, item: 'c'}];\n-     *     println(fmt!(\"%?\",rng.weighted_vec(x)));\n+     *     printfln!(rng.weighted_vec(x));\n      * }\n      * ~~~\n      */\n@@ -435,7 +435,7 @@ pub trait RngUtil {\n      *\n      * fn main() {\n      *     let mut rng = rand::rng();\n-     *     println(fmt!(\"%?\",rng.shuffle([1,2,3])));\n+     *     printfln!(rng.shuffle([1,2,3]));\n      * }\n      * ~~~\n      */\n@@ -454,9 +454,9 @@ pub trait RngUtil {\n      *     let mut rng = rand::rng();\n      *     let mut y = [1,2,3];\n      *     rng.shuffle_mut(y);\n-     *     println(fmt!(\"%?\",y));\n+     *     printfln!(y);\n      *     rng.shuffle_mut(y);\n-     *     println(fmt!(\"%?\",y));\n+     *     printfln!(y);\n      * }\n      * ~~~\n      */"}, {"sha": "56eae0428751eef99697c32e05b9d168dcd22ae4", "filename": "src/libstd/rand/distributions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -70,7 +70,7 @@ fn ziggurat<R:Rng>(rng: &mut R,\n ///\n /// fn main() {\n ///     let normal = 2.0 + (*rand::random::<StandardNormal>()) * 3.0;\n-///     println(fmt!(\"%f is from a N(2, 9) distribution\", normal))\n+///     printfln!(\"%f is from a N(2, 9) distribution\", normal)\n /// }\n /// ~~~\n pub struct StandardNormal(f64);\n@@ -124,7 +124,7 @@ impl Rand for StandardNormal {\n ///\n /// fn main() {\n ///     let exp2 = (*rand::random::<Exp1>()) * 0.5;\n-///     println(fmt!(\"%f is from a Exp(2) distribution\", exp2));\n+///     printfln!(\"%f is from a Exp(2) distribution\", exp2);\n /// }\n /// ~~~\n pub struct Exp1(f64);"}, {"sha": "85cdb9fc941374ab6652d16adc2db313173749b1", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 123, "deletions": 68, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -14,112 +14,167 @@\n //! the processes `argc` and `argv` arguments to be stored\n //! in a globally-accessible location for use by the `os` module.\n //!\n+//! Only valid to call on linux. Mac and Windows use syscalls to\n+//! discover the command line arguments.\n+//!\n //! XXX: Would be nice for this to not exist.\n //! XXX: This has a lot of C glue for lack of globals.\n \n-use libc;\n-use option::{Option, Some, None};\n-use str;\n-use uint;\n-use unstable::finally::Finally;\n-use util;\n+use option::Option;\n \n /// One-time global initialization.\n pub unsafe fn init(argc: int, argv: **u8) {\n-    let args = load_argc_and_argv(argc, argv);\n-    put(args);\n+    imp::init(argc, argv)\n }\n \n /// One-time global cleanup.\n pub fn cleanup() {\n-    rtassert!(take().is_some());\n+    imp::cleanup()\n }\n \n /// Take the global arguments from global storage.\n pub fn take() -> Option<~[~str]> {\n-    with_lock(|| unsafe {\n-        let ptr = get_global_ptr();\n-        let val = util::replace(&mut *ptr, None);\n-        val.map(|s: &~~[~str]| (**s).clone())\n-    })\n+    imp::take()\n }\n \n /// Give the global arguments to global storage.\n ///\n /// It is an error if the arguments already exist.\n pub fn put(args: ~[~str]) {\n-    with_lock(|| unsafe {\n-        let ptr = get_global_ptr();\n-        rtassert!((*ptr).is_none());\n-        (*ptr) = Some(~args.clone());\n-    })\n+    imp::put(args)\n }\n \n /// Make a clone of the global arguments.\n pub fn clone() -> Option<~[~str]> {\n-    with_lock(|| unsafe {\n-        let ptr = get_global_ptr();\n-        (*ptr).map(|s: &~~[~str]| (**s).clone())\n-    })\n+    imp::clone()\n }\n \n-fn with_lock<T>(f: &fn() -> T) -> T {\n-    do (|| {\n-        unsafe {\n-            rust_take_global_args_lock();\n-            f()\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"android\")]\n+#[cfg(target_os = \"freebsd\")]\n+mod imp {\n+\n+    use libc;\n+    use option::{Option, Some, None};\n+    use str;\n+    use uint;\n+    use unstable::finally::Finally;\n+    use util;\n+\n+    pub unsafe fn init(argc: int, argv: **u8) {\n+        let args = load_argc_and_argv(argc, argv);\n+        put(args);\n+    }\n+\n+    pub fn cleanup() {\n+        rtassert!(take().is_some());\n+    }\n+\n+    pub fn take() -> Option<~[~str]> {\n+        with_lock(|| unsafe {\n+            let ptr = get_global_ptr();\n+            let val = util::replace(&mut *ptr, None);\n+            val.map(|s: &~~[~str]| (**s).clone())\n+        })\n+    }\n+\n+    pub fn put(args: ~[~str]) {\n+        with_lock(|| unsafe {\n+            let ptr = get_global_ptr();\n+            rtassert!((*ptr).is_none());\n+            (*ptr) = Some(~args.clone());\n+        })\n+    }\n+\n+    pub fn clone() -> Option<~[~str]> {\n+        with_lock(|| unsafe {\n+            let ptr = get_global_ptr();\n+            (*ptr).map(|s: &~~[~str]| (**s).clone())\n+        })\n+    }\n+\n+    fn with_lock<T>(f: &fn() -> T) -> T {\n+        do (|| {\n+            unsafe {\n+                rust_take_global_args_lock();\n+                f()\n+            }\n+        }).finally {\n+            unsafe {\n+                rust_drop_global_args_lock();\n+            }\n         }\n-    }).finally {\n-        unsafe {\n-            rust_drop_global_args_lock();\n+    }\n+\n+    fn get_global_ptr() -> *mut Option<~~[~str]> {\n+        unsafe { rust_get_global_args_ptr() }\n+    }\n+\n+    // Copied from `os`.\n+    unsafe fn load_argc_and_argv(argc: int, argv: **u8) -> ~[~str] {\n+        let mut args = ~[];\n+        for uint::range(0, argc as uint) |i| {\n+            args.push(str::raw::from_c_str(*(argv as **libc::c_char).offset(i)));\n         }\n+        return args;\n     }\n-}\n \n-fn get_global_ptr() -> *mut Option<~~[~str]> {\n-    unsafe { rust_get_global_args_ptr() }\n-}\n+    extern {\n+        fn rust_take_global_args_lock();\n+        fn rust_drop_global_args_lock();\n+        fn rust_get_global_args_ptr() -> *mut Option<~~[~str]>;\n+    }\n \n-// Copied from `os`.\n-unsafe fn load_argc_and_argv(argc: int, argv: **u8) -> ~[~str] {\n-    let mut args = ~[];\n-    for uint::range(0, argc as uint) |i| {\n-        args.push(str::raw::from_c_str(*(argv as **libc::c_char).offset(i)));\n+    #[cfg(test)]\n+    mod tests {\n+        use option::{Some, None};\n+        use super::*;\n+        use unstable::finally::Finally;\n+\n+        #[test]\n+        fn smoke_test() {\n+            // Preserve the actual global state.\n+            let saved_value = take();\n+\n+            let expected = ~[~\"happy\", ~\"today?\"];\n+\n+            put(expected.clone());\n+            assert!(clone() == Some(expected.clone()));\n+            assert!(take() == Some(expected.clone()));\n+            assert!(take() == None);\n+\n+            do (|| {\n+            }).finally {\n+                // Restore the actual global state.\n+                match saved_value {\n+                    Some(ref args) => put(args.clone()),\n+                    None => ()\n+                }\n+            }\n+        }\n     }\n-    return args;\n }\n \n-extern {\n-    fn rust_take_global_args_lock();\n-    fn rust_drop_global_args_lock();\n-    fn rust_get_global_args_ptr() -> *mut Option<~~[~str]>;\n-}\n+#[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"win32\")]\n+mod imp {\n+    use option::Option;\n \n-#[cfg(test)]\n-mod tests {\n-    use option::{Some, None};\n-    use super::*;\n-    use unstable::finally::Finally;\n+    pub unsafe fn init(_argc: int, _argv: **u8) {\n+    }\n \n-    #[test]\n-    fn smoke_test() {\n-        // Preserve the actual global state.\n-        let saved_value = take();\n+    pub fn cleanup() {\n+    }\n \n-        let expected = ~[~\"happy\", ~\"today?\"];\n+    pub fn take() -> Option<~[~str]> {\n+        fail!()\n+    }\n \n-        put(expected.clone());\n-        assert!(clone() == Some(expected.clone()));\n-        assert!(take() == Some(expected.clone()));\n-        assert!(take() == None);\n+    pub fn put(_args: ~[~str]) {\n+        fail!()\n+    }\n \n-        do (|| {\n-        }).finally {\n-            // Restore the actual global state.\n-            match saved_value {\n-                Some(ref args) => put(args.clone()),\n-                None => ()\n-            }\n-        }\n+    pub fn clone() -> Option<~[~str]> {\n+        fail!()\n     }\n }"}, {"sha": "5b83112fe6bc048e72a58c6b801569e24f39146e", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -1727,7 +1727,7 @@ impl<'self> StrSlice<'self> for &'self str {\n      * let i = 0u;\n      * while i < s.len() {\n      *     let CharRange {ch, next} = s.char_range_at(i);\n-     *     std::io::println(fmt!(\"%u: %c\",i,ch));\n+     *     printfln!(\"%u: %c\", i, ch);\n      *     i = next;\n      * }\n      * ~~~"}, {"sha": "50cbd36ced9f9dd1a72302c9cd4d5ac8dc67ab72", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -50,7 +50,7 @@ impl<A:ToStr> ToStr for (A,) {\n     }\n }\n \n-impl<A:ToStr+Hash+Eq, B:ToStr+Hash+Eq> ToStr for HashMap<A, B> {\n+impl<A:ToStr+Hash+Eq, B:ToStr> ToStr for HashMap<A, B> {\n     #[inline]\n     fn to_str(&self) -> ~str {\n         let mut acc = ~\"{\";\n@@ -182,6 +182,8 @@ mod tests {\n     use hashmap::HashMap;\n     use hashmap::HashSet;\n     use container::{MutableSet, MutableMap};\n+    use super::*;\n+\n     #[test]\n     fn test_simple_types() {\n         assert_eq!(1i.to_str(), ~\"1\");\n@@ -212,17 +214,27 @@ mod tests {\n                ~\"[[], [1], [1, 1]]\");\n     }\n \n+    struct StructWithToStrWithoutEqOrHash {\n+        value: int\n+    }\n+\n+    impl ToStr for StructWithToStrWithoutEqOrHash {\n+        fn to_str(&self) -> ~str {\n+            fmt!(\"s%d\", self.value)\n+        }\n+    }\n+\n     #[test]\n     fn test_hashmap() {\n-        let mut table: HashMap<int, int> = HashMap::new();\n-        let empty: HashMap<int, int> = HashMap::new();\n+        let mut table: HashMap<int, StructWithToStrWithoutEqOrHash> = HashMap::new();\n+        let empty: HashMap<int, StructWithToStrWithoutEqOrHash> = HashMap::new();\n \n-        table.insert(3, 4);\n-        table.insert(1, 2);\n+        table.insert(3, StructWithToStrWithoutEqOrHash { value: 4 });\n+        table.insert(1, StructWithToStrWithoutEqOrHash { value: 2 });\n \n         let table_str = table.to_str();\n \n-        assert!(table_str == ~\"{1: 2, 3: 4}\" || table_str == ~\"{3: 4, 1: 2}\");\n+        assert!(table_str == ~\"{1: s2, 3: s4}\" || table_str == ~\"{3: s4, 1: s2}\");\n         assert_eq!(empty.to_str(), ~\"{}\");\n     }\n "}, {"sha": "8432f28a969863b624a9abb1e73dc95a38bd0149", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 66, "deletions": 4, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -833,7 +833,7 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n      * ~~~ {.rust}\n      * let v = &[1,2,3,4];\n      * for v.window_iter().advance |win| {\n-     *     io::println(fmt!(\"%?\", win));\n+     *     printfln!(win);\n      * }\n      * ~~~\n      *\n@@ -862,7 +862,7 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n      * ~~~ {.rust}\n      * let v = &[1,2,3,4,5];\n      * for v.chunk_iter().advance |win| {\n-     *     io::println(fmt!(\"%?\", win));\n+     *     printfln!(win);\n      * }\n      * ~~~\n      *\n@@ -2116,8 +2116,7 @@ macro_rules! iterator {\n \n             #[inline]\n             fn size_hint(&self) -> (uint, Option<uint>) {\n-                let diff = (self.end as uint) - (self.ptr as uint);\n-                let exact = diff / sys::nonzero_size_of::<$elem>();\n+                let exact = self.indexable();\n                 (exact, Some(exact))\n             }\n         }\n@@ -2145,6 +2144,28 @@ macro_rules! double_ended_iterator {\n     }\n }\n \n+macro_rules! random_access_iterator {\n+    (impl $name:ident -> $elem:ty) => {\n+        impl<'self, T> RandomAccessIterator<$elem> for $name<'self, T> {\n+            #[inline]\n+            fn indexable(&self) -> uint {\n+                let diff = (self.end as uint) - (self.ptr as uint);\n+                diff / sys::nonzero_size_of::<T>()\n+            }\n+\n+            fn idx(&self, index: uint) -> Option<$elem> {\n+                unsafe {\n+                    if index < self.indexable() {\n+                        cast::transmute(self.ptr.offset(index))\n+                    } else {\n+                        None\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n //iterator!{struct VecIterator -> *T, &'self T}\n /// An iterator for iterating over a vector.\n pub struct VecIterator<'self, T> {\n@@ -2154,6 +2175,7 @@ pub struct VecIterator<'self, T> {\n }\n iterator!{impl VecIterator -> &'self T}\n double_ended_iterator!{impl VecIterator -> &'self T}\n+random_access_iterator!{impl VecIterator -> &'self T}\n pub type VecRevIterator<'self, T> = InvertIterator<&'self T, VecIterator<'self, T>>;\n \n impl<'self, T> Clone for VecIterator<'self, T> {\n@@ -2169,6 +2191,7 @@ pub struct VecMutIterator<'self, T> {\n }\n iterator!{impl VecMutIterator -> &'self mut T}\n double_ended_iterator!{impl VecMutIterator -> &'self mut T}\n+random_access_iterator!{impl VecMutIterator -> &'self mut T}\n pub type VecMutRevIterator<'self, T> = InvertIterator<&'self mut T, VecMutIterator<'self, T>>;\n \n /// An iterator that moves out of a vector.\n@@ -3108,6 +3131,45 @@ mod tests {\n         assert!(it.next().is_none());\n     }\n \n+    #[test]\n+    fn test_random_access_iterator() {\n+        use iterator::*;\n+        let xs = [1, 2, 5, 10, 11];\n+        let mut it = xs.iter();\n+\n+        assert_eq!(it.indexable(), 5);\n+        assert_eq!(it.idx(0).unwrap(), &1);\n+        assert_eq!(it.idx(2).unwrap(), &5);\n+        assert_eq!(it.idx(4).unwrap(), &11);\n+        assert!(it.idx(5).is_none());\n+\n+        assert_eq!(it.next().unwrap(), &1);\n+        assert_eq!(it.indexable(), 4);\n+        assert_eq!(it.idx(0).unwrap(), &2);\n+        assert_eq!(it.idx(3).unwrap(), &11);\n+        assert!(it.idx(4).is_none());\n+\n+        assert_eq!(it.next().unwrap(), &2);\n+        assert_eq!(it.indexable(), 3);\n+        assert_eq!(it.idx(1).unwrap(), &10);\n+        assert!(it.idx(3).is_none());\n+\n+        assert_eq!(it.next().unwrap(), &5);\n+        assert_eq!(it.indexable(), 2);\n+        assert_eq!(it.idx(1).unwrap(), &11);\n+\n+        assert_eq!(it.next().unwrap(), &10);\n+        assert_eq!(it.indexable(), 1);\n+        assert_eq!(it.idx(0).unwrap(), &11);\n+        assert!(it.idx(1).is_none());\n+\n+        assert_eq!(it.next().unwrap(), &11);\n+        assert_eq!(it.indexable(), 0);\n+        assert!(it.idx(0).is_none());\n+\n+        assert!(it.next().is_none());\n+    }\n+\n     #[test]\n     fn test_iter_size_hints() {\n         use iterator::*;"}, {"sha": "a5c8f2a235ed91a0af5e2789b67975c01cb84997", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -357,15 +357,16 @@ pub fn get_single_str_from_tts(cx: @ExtCtxt,\n     }\n }\n \n-pub fn get_exprs_from_tts(cx: @ExtCtxt, tts: &[ast::token_tree])\n-                       -> ~[@ast::expr] {\n+pub fn get_exprs_from_tts(cx: @ExtCtxt,\n+                          sp: span,\n+                          tts: &[ast::token_tree]) -> ~[@ast::expr] {\n     let p = parse::new_parser_from_tts(cx.parse_sess(),\n                                        cx.cfg(),\n                                        tts.to_owned());\n     let mut es = ~[];\n     while *p.token != token::EOF {\n-        if es.len() != 0 {\n-            p.eat(&token::COMMA);\n+        if es.len() != 0 && !p.eat(&token::COMMA) {\n+            cx.span_fatal(sp, \"expected token: `,`\");\n         }\n         es.push(p.parse_expr());\n     }"}, {"sha": "2092c45074eb638e4cca2edb184a64dedd952ff9", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -18,7 +18,7 @@ use ext::build::AstBuilder;\n \n pub fn expand_syntax_ext(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree]) -> base::MacResult {\n     // Gather all argument expressions\n-    let exprs = get_exprs_from_tts(cx, tts);\n+    let exprs = get_exprs_from_tts(cx, sp, tts);\n     let mut bytes = ~[];\n \n     for exprs.iter().advance |expr| {"}, {"sha": "737127fcae73d9ee2739440122b16713e851c65d", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -26,7 +26,7 @@ use parse::token::{str_to_ident};\n \n pub fn expand_syntax_ext(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n     -> base::MacResult {\n-    let args = get_exprs_from_tts(cx, tts);\n+    let args = get_exprs_from_tts(cx, sp, tts);\n     if args.len() == 0 {\n         cx.span_fatal(sp, \"fmt! takes at least 1 argument.\");\n     }"}, {"sha": "4b3c8498380cc10f9412e37d697e5c4bffff05cd", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -23,8 +23,6 @@ use parse::token::{get_ident_interner, special_idents, gensym_ident, ident_to_st\n use parse::token::{FAT_ARROW, SEMI, nt_matchers, nt_tt};\n use print;\n \n-use std::io;\n-\n pub fn add_new_extension(cx: @ExtCtxt,\n                          sp: span,\n                          name: ident,\n@@ -82,11 +80,11 @@ pub fn add_new_extension(cx: @ExtCtxt,\n     -> MacResult {\n \n         if cx.trace_macros() {\n-            io::println(fmt!(\"%s! { %s }\",\n-                             cx.str_of(name),\n-                             print::pprust::tt_to_str(\n-                                 &ast::tt_delim(@mut arg.to_owned()),\n-                                 get_ident_interner())));\n+            printfln!(\"%s! { %s }\",\n+                      cx.str_of(name),\n+                      print::pprust::tt_to_str(\n+                          &ast::tt_delim(@mut arg.to_owned()),\n+                          get_ident_interner()));\n         }\n \n         // Which arm's failure should we report? (the one furthest along)"}, {"sha": "52b6d4459bf4854199964137b418e2f1162aac10", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -686,7 +686,7 @@ mod test {\n     use std::io;\n     #[test] fn t1() {\n         let a = fresh_name(\"ghi\");\n-        io::println(fmt!(\"interned name: %u,\\ntextual name: %s\\n\",\n-                         a,interner_get(a)));\n+        printfln!(\"interned name: %u,\\ntextual name: %s\\n\",\n+                  a, interner_get(a));\n     }\n }"}, {"sha": "3bd0157c48a568649893d94380fc21211347870e", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -24,7 +24,7 @@ fn timed(label: &str, f: &fn()) {\n     let start = time::precise_time_s();\n     f();\n     let end = time::precise_time_s();\n-    io::println(fmt!(\"  %s: %f\", label, end - start));\n+    printfln!(\"  %s: %f\", label, end - start);\n }\n \n fn ascending<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint) {\n@@ -116,7 +116,7 @@ fn main() {\n         }\n     }\n \n-    io::println(fmt!(\"%? keys\", n_keys));\n+    printfln!(\"%? keys\", n_keys);\n \n     io::println(\"\\nTreeMap:\");\n "}, {"sha": "0d93bdb6f9446347d80912c2487b3d8f9ccc98c2", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -58,7 +58,7 @@ fn maybe_run_test(argv: &[~str], name: ~str, test: &fn()) {\n     test();\n     let stop = precise_time_s();\n \n-    io::println(fmt!(\"%s:\\t\\t%f ms\", name, (stop - start) * 1000f));\n+    printfln!(\"%s:\\t\\t%f ms\", name, (stop - start) * 1000f);\n }\n \n fn shift_push() {"}, {"sha": "0fa641e395eeefdfaa67ed919fa3ba1bd020c609", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -119,8 +119,7 @@ fn main() {\n     let elapsed = (stop - start);\n     let rate = (num_msgs as float) / elapsed;\n \n-    io::println(fmt!(\"Sent %? messages in %? seconds\",\n-                     num_msgs, elapsed));\n-    io::println(fmt!(\"  %? messages / second\", rate));\n-    io::println(fmt!(\"  %? \u03bcs / message\", 1000000. / rate));\n+    printfln!(\"Sent %? messages in %? seconds\", num_msgs, elapsed);\n+    printfln!(\"  %? messages / second\", rate);\n+    printfln!(\"  %? \u03bcs / message\", 1000000. / rate);\n }"}, {"sha": "9eb415e88923374ebd539912f47656d1a5d9f534", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -105,8 +105,7 @@ fn main() {\n     let elapsed = (stop - start);\n     let rate = (num_msgs as float) / elapsed;\n \n-    io::println(fmt!(\"Sent %? messages in %? seconds\",\n-                     num_msgs, elapsed));\n-    io::println(fmt!(\"  %? messages / second\", rate));\n-    io::println(fmt!(\"  %? \u03bcs / message\", 1000000. / rate));\n+    printfln!(\"Sent %? messages in %? seconds\", num_msgs, elapsed);\n+    printfln!(\"  %? messages / second\", rate);\n+    printfln!(\"  %? \u03bcs / message\", 1000000. / rate);\n }"}, {"sha": "09d1c632d0e48f035d71f5f7a422887990903432", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -115,8 +115,7 @@ fn main() {\n     let elapsed = (stop - start);\n     let rate = (num_msgs as float) / elapsed;\n \n-    io::println(fmt!(\"Sent %? messages in %? seconds\",\n-                     num_msgs, elapsed));\n-    io::println(fmt!(\"  %? messages / second\", rate));\n-    io::println(fmt!(\"  %? \u03bcs / message\", 1000000. / rate));\n+    printfln!(\"Sent %? messages in %? seconds\", num_msgs, elapsed);\n+    printfln!(\"  %? messages / second\", rate);\n+    printfln!(\"  %? \u03bcs / message\", 1000000. / rate);\n }"}, {"sha": "b11daeef12f51a48c0ef6998d9af7560fbe736ad", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -198,13 +198,13 @@ fn main() {\n     let bounded = do timeit { bounded(count) };\n     let unbounded = do timeit { unbounded(count) };\n \n-    io::println(fmt!(\"count: %?\\n\", count));\n-    io::println(fmt!(\"bounded:   %? s\\t(%? \u03bcs/message)\",\n-                     bounded, bounded * 1000000. / (count as float)));\n-    io::println(fmt!(\"unbounded: %? s\\t(%? \u03bcs/message)\",\n-                     unbounded, unbounded * 1000000. / (count as float)));\n-\n-    io::println(fmt!(\"\\n\\\n-                      bounded is %?%% faster\",\n-                     (unbounded - bounded) / bounded * 100.));\n+    printfln!(\"count: %?\\n\", count);\n+    printfln!(\"bounded:   %? s\\t(%? \u03bcs/message)\",\n+              bounded, bounded * 1000000. / (count as float));\n+    printfln!(\"unbounded: %? s\\t(%? \u03bcs/message)\",\n+              unbounded, unbounded * 1000000. / (count as float));\n+\n+    printfln!(\"\\n\\\n+               bounded is %?%% faster\",\n+              (unbounded - bounded) / bounded * 100.);\n }"}, {"sha": "e06ff02a0b38f403404e78706b1e9f7046b6d0c5", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -36,5 +36,5 @@ fn main() {\n         args\n     };\n     let n = int::from_str(args[1]).get();\n-    io::println(fmt!(\"Ack(3,%d): %d\\n\", n, ack(3, n)));\n+    printfln!(\"Ack(3,%d): %d\\n\", n, ack(3, n));\n }"}, {"sha": "596a5b5422a5dccbd8e12c81b3db9055bc58c767", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -61,9 +61,9 @@ fn main() {\n     let stretch_depth = max_depth + 1;\n     let stretch_tree = bottom_up_tree(&stretch_arena, 0, stretch_depth);\n \n-    println(fmt!(\"stretch tree of depth %d\\t check: %d\",\n-                          stretch_depth,\n-                          item_check(stretch_tree)));\n+    printfln!(\"stretch tree of depth %d\\t check: %d\",\n+              stretch_depth,\n+              item_check(stretch_tree));\n \n     let long_lived_arena = arena::Arena();\n     let long_lived_tree = bottom_up_tree(&long_lived_arena, 0, max_depth);\n@@ -79,12 +79,11 @@ fn main() {\n             chk += item_check(temp_tree);\n             i += 1;\n         }\n-        println(fmt!(\"%d\\t trees of depth %d\\t check: %d\",\n-                         iterations * 2, depth,\n-                         chk));\n+        printfln!(\"%d\\t trees of depth %d\\t check: %d\",\n+                  iterations * 2, depth, chk);\n         depth += 2;\n     }\n-    println(fmt!(\"long lived tree of depth %d\\t check: %d\",\n-                     max_depth,\n-                     item_check(long_lived_tree)));\n+    printfln!(\"long lived tree of depth %d\\t check: %d\",\n+              max_depth,\n+              item_check(long_lived_tree));\n }"}, {"sha": "97c2cba3b9e3146d2d5d1389c996f62dece1633a", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -93,5 +93,5 @@ fn fannkuch_redux(n: i32) -> i32 {\n #[fixed_stack_segment]\n fn main() {\n     let n: i32 = FromStr::from_str(os::args()[1]).get();\n-    println(fmt!(\"Pfannkuchen(%d) = %d\", n as int, fannkuch_redux(n) as int));\n+    printfln!(\"Pfannkuchen(%d) = %d\", n as int, fannkuch_redux(n) as int);\n }"}, {"sha": "7b8bc31bf1c8326331e70180ac69e178b18cfa11", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -32,5 +32,5 @@ fn main() {\n         args\n     };\n     let n = int::from_str(args[1]).get();\n-    io::println(fmt!(\"%d\\n\", fib(n)));\n+    printfln!(\"%d\\n\", fib(n));\n }"}, {"sha": "a7b784e1a96e875b8f51dcc8a8b8a07ba3e934df", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -82,7 +82,7 @@ struct PrintCallback(&'static str);\n \n impl TableCallback for PrintCallback {\n     fn f(&self, entry: &mut Entry) {\n-        println(fmt!(\"%d\\t%s\", entry.count as int, **self));\n+        printfln!(\"%d\\t%s\", entry.count as int, **self);\n     }\n }\n \n@@ -279,9 +279,9 @@ fn print_frequencies(frequencies: &Table, frame: i32) {\n     }\n \n     for vector.each |&(key, count)| {\n-        println(fmt!(\"%s %.3f\",\n-                     key.unpack(frame),\n-                     (count as float * 100.0) / (total_count as float)));\n+        printfln!(\"%s %.3f\",\n+                  key.unpack(frame),\n+                  (count as float * 100.0) / (total_count as float));\n     }\n }\n "}, {"sha": "594593e2ea343787d8b5c3240e87f858aad86c6a", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -15,7 +15,7 @@ fn main() {\n         let mut byte_acc: i8 = 0;\n         let mut bit_num: i32 = 0;\n \n-        println(fmt!(\"P4\\n%d %d\", w as int, h as int));\n+        printfln!(\"P4\\n%d %d\", w as int, h as int);\n \n         let mode = \"w\";\n         let stdout = fdopen(STDOUT_FILENO as c_int, transmute(&mode[0]));"}, {"sha": "6d04292588d459bc4ca5529234b843d51ca2ec86", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -142,9 +142,9 @@ fn main() {\n     let mut bodies = BODIES;\n \n     offset_momentum(&mut bodies);\n-    println(fmt!(\"%.9f\", energy(&bodies) as float));\n+    printfln!(\"%.9f\", energy(&bodies) as float);\n \n     advance(&mut bodies, 0.01, n);\n \n-    println(fmt!(\"%.9f\", energy(&bodies) as float));\n+    printfln!(\"%.9f\", energy(&bodies) as float);\n }"}, {"sha": "388613482c2cfcd17b96fbdb0806fd69d6770cfa", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -61,5 +61,5 @@ fn main() {\n         mult_AtAv(v, u, tmp);\n     }\n \n-    println(fmt!(\"%.9f\", (dot(u,v) / dot(v,v)).sqrt() as float));\n+    printfln!(\"%.9f\", (dot(u,v) / dot(v,v)).sqrt() as float);\n }"}, {"sha": "203b9c297fa6b402d806f7719f9fa08053bf239f", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -40,7 +40,7 @@ fn roundtrip(id: int, n_tasks: int, p: &Port<int>, ch: &Chan<int>) {\n     while (true) {\n         match p.recv() {\n           1 => {\n-            println(fmt!(\"%d\\n\", id));\n+            printfln!(\"%d\\n\", id);\n             return;\n           }\n           token => {"}, {"sha": "9a82dd3f512ca36b1a16d2ecc3cd0c680f830595", "filename": "src/test/compile-fail/borrowck-auto-mut-ref-to-immut-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -18,7 +18,7 @@ struct Foo {\n \n impl Foo {\n     pub fn printme(&mut self) {\n-        io::println(fmt!(\"%d\", self.x));\n+        printfln!(\"%d\", self.x);\n     }\n }\n "}, {"sha": "e3e12a4a4168bc0114229773d134c5d47dab01d2", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -9,5 +9,5 @@ fn a() -> &int {\n \n fn main() {\n     let fifth = a();\n-    println(fmt!(\"%d\", *fifth));\n+    printfln!(\"%d\", *fifth);\n }"}, {"sha": "04c3a0624264d306c3e625c8f023645208506e4b", "filename": "src/test/compile-fail/issue-3820.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -22,5 +22,5 @@ fn main() {\n     let u = Thing {x: 2};\n     let _v = u.mul(&3); // This is ok\n     let w = u * 3; //~ ERROR binary operation * cannot be applied to type `Thing`\n-    println(fmt!(\"%i\", w.x));\n+    printfln!(\"%i\", w.x);\n }"}, {"sha": "9ec1f5cd441b0e127abb5a02b77c0412136696bc", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -14,5 +14,5 @@ fn f<'r, T>(v: &'r T) -> &'r fn()->T { id::<&'r fn()->T>(|| *v) } //~ ERROR cann\n \n fn main() {\n     let v = &5;\n-    println(fmt!(\"%d\", f(v)()));\n+    printfln!(\"%d\", f(v)());\n }"}, {"sha": "19a3ce4f8384b37e07d00816a16575c9fb2d9911", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -28,7 +28,7 @@ fn innocent_looking_victim() {\n             match x {\n                 Some(ref msg) => {\n                     (f.c)(f, true);\n-                    println(fmt!(\"%?\", msg));\n+                    printfln!(msg);\n                 },\n                 None => fail!(\"oops\"),\n             }"}, {"sha": "c27debdbc7fb99dc7ca3f084bec1bff30b057db3", "filename": "src/test/compile-fail/rcmut-not-const-and-not-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Frcmut-not-const-and-not-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Frcmut-not-const-and-not-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frcmut-not-const-and-not-owned.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -14,7 +14,7 @@ fn o<T: Send>(_: &T) {}\n fn c<T: Freeze>(_: &T) {}\n \n fn main() {\n-    let x = extra::rc::rc_mut_from_owned(0);\n+    let x = extra::rc::RcMut::from_owned(0);\n     o(&x); //~ ERROR instantiating a type parameter with an incompatible type `extra::rc::RcMut<int>`, which does not fulfill `Send`\n     c(&x); //~ ERROR instantiating a type parameter with an incompatible type `extra::rc::RcMut<int>`, which does not fulfill `Freeze`\n }"}, {"sha": "4640957a9a894e0b693f5247f8a3f04a19bf0190", "filename": "src/test/compile-fail/tuple-struct-nonexhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Ftuple-struct-nonexhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Fcompile-fail%2Ftuple-struct-nonexhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-struct-nonexhaustive.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -13,7 +13,7 @@ struct Foo(int, int);\n fn main() {\n     let x = Foo(1, 2);\n     match x {   //~ ERROR non-exhaustive\n-        Foo(1, b) => println(fmt!(\"%d\", b)),\n-        Foo(2, b) => println(fmt!(\"%d\", b))\n+        Foo(1, b) => printfln!(\"%d\", b),\n+        Foo(2, b) => printfln!(\"%d\", b)\n     }\n }"}, {"sha": "8ed3297e7d142d07b964f732e7fec2e776c193c2", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm-slice-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -33,5 +33,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(z.my_mut_slice(), z2.my_slice());\n-    print(fmt!(\"%d\\n\", z[0]));\n+    printfln!(\"%d\", z[0]);\n }"}, {"sha": "d2971ad40ab44894e79a73604c3916200a5a8af3", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -12,5 +12,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(z, z2);\n-    print(fmt!(\"%d\\n\", z[0]));\n+    printfln!(\"%d\", z[0]);\n }"}, {"sha": "df096e8292f827b2b8b987826a6ba79faf41a5aa", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -13,5 +13,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(&mut z[0], &z2[0]);\n-    print(fmt!(\"%d\\n\", z[0]));\n+    printfln!(\"%d\", z[0]);\n }"}, {"sha": "98bb72c93408b5e89513895525ef7effa5b7b1d3", "filename": "src/test/run-fail/borrowck-wg-two-array-indices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -13,5 +13,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(&mut z[0], &mut z2[0]);\n-    print(fmt!(\"%d\\n\", z[0]));\n+    printfln!(\"%d\", z[0]);\n }"}, {"sha": "cc14af45c85cbaa12b751d5c075dc113ff36b120", "filename": "src/test/run-pass/auto-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fauto-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fauto-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -18,7 +18,7 @@ trait Stuff {\n \n impl Stuff for Foo {\n     fn printme(&self) {\n-        println(fmt!(\"%d\", self.x));\n+        printfln!(\"%d\", self.x);\n     }\n }\n "}, {"sha": "306141354ca7679d64346ada76888c1d35d0fc9a", "filename": "src/test/run-pass/borrowck-wg-two-imm-borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -10,5 +10,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(&z[0], &z2[0]);\n-    print(fmt!(\"%d\\n\", z[0]));\n+    printfln!(\"%d\", z[0]);\n }"}, {"sha": "30adaf2dae4a35526705c0bed8b2e5a72b40b051", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     //info!(\"%?\", bt0);\n \n     do 3u.to(10u) |i| {\n-        print(fmt!(\"%u\\n\", i));\n+        printfln!(\"%u\", i);\n \n         //let bt1 = sys::frame_address();\n         //info!(\"%?\", bt1);"}, {"sha": "4db0b1871d078d9d370cc8c0673df9f3e1961a1c", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n     //let bt0 = sys::rusti::frame_address(1u32);\n     //info!(\"%?\", bt0);\n     do cci_iter_lib::iter(~[1, 2, 3]) |i| {\n-        print(fmt!(\"%d\", *i));\n+        printf!(\"%d\", *i);\n         //assert!(bt0 == sys::rusti::frame_address(2u32));\n     }\n }"}, {"sha": "6459239e46959505596b1d9a6f655ab9a77c1487", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n     //let bt0 = sys::frame_address();\n     //info!(\"%?\", bt0);\n     do iter(~[1u, 2u, 3u]) |i| {\n-        print(fmt!(\"%u\\n\", i));\n+        printfln!(\"%u\", i);\n \n         //let bt1 = sys::frame_address();\n         //info!(\"%?\", bt1);"}, {"sha": "6dca5d60f11114b1fc7952fd6eb8976048466999", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -27,9 +27,9 @@ static k : K = K {a: 10, b: 20, c: D {d: 30, e: 40}};\n static m : int = k.c.e;\n \n pub fn main() {\n-    io::println(fmt!(\"%?\", p));\n-    io::println(fmt!(\"%?\", q));\n-    io::println(fmt!(\"%?\", t));\n+    printfln!(p);\n+    printfln!(q);\n+    printfln!(t);\n     assert_eq!(p, 3);\n     assert_eq!(q, 3);\n     assert_eq!(t, 20);"}, {"sha": "5b80988dcdfb00e4e058f2ba2f570eadb7ccea52", "filename": "src/test/run-pass/const-rec-and-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -21,5 +21,5 @@ static y : AnotherPair = AnotherPair{ x: (0xf0f0f0f0_f0f0f0f0,\n pub fn main() {\n     let (p, _) = y.x;\n     assert_eq!(p, - 1085102592571150096);\n-    println(fmt!(\"0x%x\", p as uint));\n+    printfln!(\"0x%x\", p as uint);\n }"}, {"sha": "c2103a40bfea7025d9ea561b033c690f26e91a31", "filename": "src/test/run-pass/const-region-ptrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -17,8 +17,8 @@ static x: &'static int = &10;\n static y: &'static Pair<'static> = &Pair {a: 15, b: x};\n \n pub fn main() {\n-    io::println(fmt!(\"x = %?\", *x));\n-    io::println(fmt!(\"y = {a: %?, b: %?}\", y.a, *(y.b)));\n+    printfln!(\"x = %?\", *x);\n+    printfln!(\"y = {a: %?, b: %?}\", y.a, *(y.b));\n     assert_eq!(*x, 10);\n     assert_eq!(*(y.b), 10);\n }"}, {"sha": "c62fcd8980fad1e5d16598e112cc8bba8e9ffd9c", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -30,6 +30,6 @@ pub fn main() {\n     assert_eq!(x.b, 2);\n     assert_eq!(x, y);\n     assert_eq!(z.b, 22);\n-    io::println(fmt!(\"0x%x\", x.b as uint));\n-    io::println(fmt!(\"0x%x\", z.c as uint));\n+    printfln!(\"0x%x\", x.b as uint);\n+    printfln!(\"0x%x\", z.c as uint);\n }"}, {"sha": "01ef3284e32f9eabdd94fc144449015de1d8ae11", "filename": "src/test/run-pass/const-vecs-and-slices.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -14,8 +14,8 @@ static x : [int, ..4] = [1,2,3,4];\n static y : &'static [int] = &[1,2,3,4];\n \n pub fn main() {\n-    io::println(fmt!(\"%?\", x[1]));\n-    io::println(fmt!(\"%?\", y[1]));\n+    printfln!(x[1]);\n+    printfln!(y[1]);\n     assert_eq!(x[1], 2);\n     assert_eq!(x[3], 4);\n     assert_eq!(x[3], y[3]);"}, {"sha": "0cd9b2adf7ce6f5c8a9e1ee09411dd4d9633f4b7", "filename": "src/test/run-pass/functional-struct-update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -16,5 +16,5 @@ struct Foo {\n pub fn main() {\n     let a = Foo { x: 1, y: 2 };\n     let c = Foo { x: 4, .. a};\n-    println(fmt!(\"%?\", c));\n+    printfln!(c);\n }"}, {"sha": "c84386c722da745774a4a2a999bac04f20a5fe2b", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -80,5 +80,5 @@ pub fn main() {\n         a);\n     let sum = foldl(filt, 0u, |accum, &&n: uint| accum + n );\n \n-    io::println(fmt!(\"%u\", sum));\n+    printfln!(\"%u\", sum);\n }"}, {"sha": "d4cbfa91fb6a4f098b25645ca762a62a7ce17fcf", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -42,7 +42,7 @@ pub fn main() {\n     let bools2 = to_bools(Storage{storage: ~[0b01100100]});\n \n     for uint::range(0, 8) |i| {\n-        io::println(fmt!(\"%u => %u vs %u\", i, bools[i] as uint, bools2[i] as uint));\n+        printfln!(\"%u => %u vs %u\", i, bools[i] as uint, bools2[i] as uint);\n     }\n \n     assert_eq!(bools, bools2);"}, {"sha": "3e3e6d6f99215c4afd9f6f4d2cf7d10ad1549e84", "filename": "src/test/run-pass/issue-3211.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3211.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -4,5 +4,5 @@ pub fn main() {\n         x += 1;\n     }\n     assert_eq!(x, 4096);\n-    println(fmt!(\"x = %u\", x));\n+    printfln!(\"x = %u\", x);\n }"}, {"sha": "e42b70b5a5e0d8a8e0390605e8d86e7826702d3e", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -42,11 +42,11 @@ pub fn main() {\n \n     // the following compiles and works properly\n     let v1: Vec2 = a * 3f;\n-    io::println(fmt!(\"%f %f\", v1.x, v1.y));\n+    printfln!(\"%f %f\", v1.x, v1.y);\n \n     // the following compiles but v2 will not be Vec2 yet and\n     // using it later will cause an error that the type of v2\n     // must be known\n     let v2 = a * 3f;\n-    io::println(fmt!(\"%f %f\", v2.x, v2.y)); // error regarding v2's type\n+    printfln!(\"%f %f\", v2.x, v2.y); // error regarding v2's type\n }"}, {"sha": "12ec501788de81e5d14e9b6eb4b34896d0ade368", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -35,5 +35,5 @@ impl Shape {\n \n pub fn main(){\n     let s = Circle(Point { x: 1f, y: 2f }, 3f);\n-    println(fmt!(\"%f\", s.area(s)));\n+    printfln!(\"%f\", s.area(s));\n }"}, {"sha": "5ec8383dd20b2ab3b881cdf0b335af388fa0f947", "filename": "src/test/run-pass/issue-3794.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3794.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -19,7 +19,7 @@ struct S {\n \n impl T for S {\n     fn print(&self) {\n-        io::println(fmt!(\"%?\", self));\n+        printfln!(self);\n     }\n }\n "}, {"sha": "98b7741461ec4412467c85d9a829bc36e328f71f", "filename": "src/test/run-pass/issue-3904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3904.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -12,7 +12,7 @@\n type ErrPrinter = &fn(&str, &str);\n \n fn example_err(prog: &str, arg: &str) {\n-    io::println(fmt!(\"%s: %s\", prog, arg))\n+    printfln!(\"%s: %s\", prog, arg)\n }\n \n fn exit(+print: ErrPrinter, prog: &str, arg: &str) {"}, {"sha": "857ecb3f9cbcfeb70a300c7b4bd12de7858e9022", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -114,15 +114,15 @@ fn query(cmd: ~[~str], sb: TcpSocketBuf) -> Result {\n   //io::println(cmd);\n   sb.write_str(cmd);\n   let res = parse_response(@sb as @io::Reader);\n-  //io::println(fmt!(\"%?\", res));\n+  //printfln!(res);\n   res\n }\n \n fn query2(cmd: ~[~str]) -> Result {\n   let _cmd = cmd_to_str(cmd);\n     do io::with_str_reader(~\"$3\\r\\nXXX\\r\\n\") |sb| {\n     let res = parse_response(@sb as @io::Reader);\n-    io::println(fmt!(\"%?\", res));\n+    printfln!(res);\n     res\n     }\n }"}, {"sha": "e993d827abb7d7d5fd5321917ab020524c78e6a8", "filename": "src/test/run-pass/issue-4401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4401.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -4,5 +4,5 @@ pub fn main() {\n         count += 1;\n     }\n     assert_eq!(count, 999_999);\n-    println(fmt!(\"%u\", count));\n+    printfln!(\"%u\", count);\n }"}, {"sha": "685a11c79ee32536478c08d8648ef5b358f233ff", "filename": "src/test/run-pass/max-min-classes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -35,5 +35,5 @@ fn Foo(x: int, y: int) -> Foo {\n \n pub fn main() {\n     let foo = Foo(3, 20);\n-    println(fmt!(\"%d %d\", foo.sum(), foo.product()));\n+    printfln!(\"%d %d\", foo.sum(), foo.product());\n }"}, {"sha": "a00bfceab0f4d51305ac0327e302561e9a13a845", "filename": "src/test/run-pass/new-style-constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -13,5 +13,5 @@ use std::io::println;\n static FOO: int = 3;\n \n pub fn main() {\n-    println(fmt!(\"%d\", FOO));\n+    printfln!(\"%d\", FOO);\n }"}, {"sha": "488bd65f5484a19d40d1316867dc365a1cf01983", "filename": "src/test/run-pass/new-style-fixed-length-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -13,5 +13,5 @@ use std::io::println;\n static FOO: [int, ..3] = [1, 2, 3];\n \n pub fn main() {\n-    println(fmt!(\"%d %d %d\", FOO[0], FOO[1], FOO[2]));\n+    printfln!(\"%d %d %d\", FOO[0], FOO[1], FOO[2]);\n }"}, {"sha": "3e2308bfcaf660e7c8a51dd66fc48af73b3ed23b", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -16,6 +16,6 @@ fn compute(i: mytype) -> int { return i.val + 20; }\n \n pub fn main() {\n     let myval = mytype(Mytype{compute: compute, val: 30});\n-    println(fmt!(\"%d\", compute(myval)));\n+    printfln!(\"%d\", compute(myval));\n     assert_eq!((myval.compute)(myval), 50);\n }"}, {"sha": "e40a183243e01d3a6b34174d1e499e9262bde4a9", "filename": "src/test/run-pass/num-range-rev.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -56,13 +56,13 @@ pub fn main() {\n     let primes = [2,3,5,7,11];\n     let mut prod = 1i;\n     for uint_range_rev(5, 0) |i| {\n-        println(fmt!(\"uint 4 downto 0: %u\", i));\n+        printfln!(\"uint 4 downto 0: %u\", i);\n         prod *= int::pow(primes[i], i);\n     }\n     assert_eq!(prod, 11*11*11*11*7*7*7*5*5*3*1);\n     let mut prod = 1i;\n     for int_range_rev(5, 0) |i| {\n-        println(fmt!(\"int 4 downto 0: %d\", i));\n+        printfln!(\"int 4 downto 0: %d\", i);\n         prod *= int::pow(primes[i], i as uint);\n     }\n     assert_eq!(prod, 11*11*11*11*7*7*7*5*5*3*1);"}, {"sha": "d01b22404467a1cc58d1100617f283894413736d", "filename": "src/test/run-pass/num-range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fnum-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fnum-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-range.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -28,7 +28,7 @@ fn uint_range_step(a: uint, b: uint, s: int, it: &fn(uint) -> bool) -> bool {\n }\n \n pub fn main() {\n-    println(fmt!(\"num-range start\"));\n+    println(\"num-range start\");\n     // int and uint have same result for\n     //   Sum{2 <= i < 100} == (Sum{1 <= i <= 99} - 1) == n*(n+1)/2 - 1 for n=99\n     let mut sum = 0u;\n@@ -105,7 +105,7 @@ pub fn main() {\n     let mut saw21 = false;\n     for uint::range_step_inclusive(0, 21, 3) |x| {\n         assert!(x <= 21);\n-        println(fmt!(\"saw: %u\", x));\n+        printfln!(\"saw: %u\", x);\n         if x == 21 { saw21 = true; }\n     }\n     assert!(saw21);"}, {"sha": "9500f83b76b09132b6ea729b5a6758640c0219a6", "filename": "src/test/run-pass/placement-new-arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -17,6 +17,6 @@ pub fn main() {\n     let mut arena = arena::Arena();\n     let p = &mut arena;\n     let x = p.alloc(|| 4u);\n-    print(fmt!(\"%u\", *x));\n+    printf!(\"%u\", *x);\n     assert_eq!(*x, 4u);\n }"}, {"sha": "07a5c10ab1fd1c910f088eeaa2ca63d160538f3e", "filename": "src/test/run-pass/recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Frecursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Frecursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frecursion.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -30,5 +30,5 @@ fn test<T:Dot> (n:int, i:int, first:T, second:T) ->int {\n }\n pub fn main() {\n   let n = test(1, 0, Nil, Nil);\n-  io::println(fmt!(\"%d\", n));\n+  printfln!(\"%d\", n);\n }"}, {"sha": "21d13c722e752aea7e4bdb136f809c8b7c22e5ee", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -667,7 +667,7 @@ pub fn main() {\n \n         let r = u.vals.clone();\n         for r.iter().advance |s| {\n-            println(fmt!(\"val: %s\", *s));\n+            printfln!(\"val: %s\", *s);\n         }\n         error!(\"%?\", u.vals.clone());\n         assert_eq!(u.vals.clone(),"}, {"sha": "dc639bad75efa0e3e20829f0e727d914beef726d", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -171,7 +171,7 @@ pub fn main() {\n     visit_ty::<~[int]>(vv);\n \n     for v.types.iter().advance |s| {\n-        println(fmt!(\"type: %s\", (*s).clone()));\n+        printfln!(\"type: %s\", (*s).clone());\n     }\n     assert_eq!((*v.types).clone(), ~[~\"bool\", ~\"int\", ~\"i8\", ~\"i16\", ~\"[\", ~\"int\", ~\"]\"]);\n }"}, {"sha": "3d8c2b7f56a0d8c24d5dadb41e9b8c6ad304f232", "filename": "src/test/run-pass/struct-pattern-matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -16,6 +16,6 @@ struct Foo {\n pub fn main() {\n     let a = Foo { x: 1, y: 2 };\n     match a {\n-        Foo { x: x, y: y } => println(fmt!(\"yes, %d, %d\", x, y))\n+        Foo { x: x, y: y } => printfln!(\"yes, %d, %d\", x, y)\n     }\n }"}, {"sha": "4003a83e80bb07bde4a496b4ac28a59e7bfc403d", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -99,7 +99,7 @@ impl FloatExt for f64 {}\n impl FloatExt for float {}\n \n \n-fn test_float_ext<T:FloatExt>(n: T) { println(fmt!(\"%?\", n < n)) }\n+fn test_float_ext<T:FloatExt>(n: T) { printfln!(n < n) }\n \n pub fn main() {\n     test_float_ext(1f32);"}, {"sha": "2d6b5e1132536054c3b90022e99bbf6738776d4f", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -16,7 +16,7 @@ pub trait NumExt: Eq + Ord + Num + NumCast {}\n impl NumExt for f32 {}\n \n fn num_eq_one<T:NumExt>(n: T) {\n-    println(fmt!(\"%?\", n == NumCast::from(1)))\n+    printfln!(n == NumCast::from(1))\n }\n \n pub fn main() {"}, {"sha": "2f097bc90a942b01e4ad7c0db0f1f982ffeda4ab", "filename": "src/test/run-pass/transmute-non-immediate-to-immediate.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #7988\n+// Transmuting non-immediate type to immediate type\n+\n+fn main() {\n+    unsafe {\n+        ::std::cast::transmute::<[int,..1],int>([1])\n+    };\n+}"}, {"sha": "9f1b930f16835b9502710ca49651f8ad2fa3757d", "filename": "src/test/run-pass/tuple-struct-construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -12,5 +12,5 @@ struct Foo(int, int);\n \n pub fn main() {\n     let x = Foo(1, 2);\n-    println(fmt!(\"%?\", x));\n+    printfln!(x);\n }"}, {"sha": "a1b1f36dc413124f0744f877ca8b7a431078d83a", "filename": "src/test/run-pass/tuple-struct-destructuring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ftuple-struct-destructuring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ftuple-struct-destructuring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-destructuring.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -13,7 +13,7 @@ struct Foo(int, int);\n pub fn main() {\n     let x = Foo(1, 2);\n     let Foo(y, z) = x;\n-    println(fmt!(\"%d %d\", y, z));\n+    printfln!(\"%d %d\", y, z);\n     assert_eq!(y, 1);\n     assert_eq!(z, 2);\n }"}, {"sha": "36467189bbd9b8f31a321bbf73ecbc81cca7c25d", "filename": "src/test/run-pass/tuple-struct-matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ftuple-struct-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Ftuple-struct-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-matching.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n         Foo(a, b) => {\n             assert_eq!(a, 1);\n             assert_eq!(b, 2);\n-            println(fmt!(\"%d %d\", a, b));\n+            printfln!(\"%d %d\", a, b);\n         }\n     }\n }"}, {"sha": "e4c6bcf6791e291c3fc2bc9842641957e5ce8a31", "filename": "src/test/run-pass/vec-fixed-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let x: [int, ..4] = [1, 2, 3, 4];\n-    println(fmt!(\"%d\", x[0]));\n+    printfln!(\"%d\", x[0]);\n }"}, {"sha": "08b62cce715626d347b84c6e2c4255fe53377e77", "filename": "src/test/run-pass/vec-matching-legal-tail-element-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs?ref=f132401a0b4f7fe19f9de50ab5a5a6a0d1d68607", "patch": "@@ -5,6 +5,6 @@ pub fn main() {\n             [1, ..ref tail] => &tail[0],\n             _ => ::std::util::unreachable()\n         };\n-        println(fmt!(\"%d\", *el));\n+        printfln!(\"%d\", *el);\n     }\n }"}]}