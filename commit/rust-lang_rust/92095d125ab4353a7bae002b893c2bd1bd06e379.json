{"sha": "92095d125ab4353a7bae002b893c2bd1bd06e379", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMDk1ZDEyNWFiNDM1M2E3YmFlMDAyYjg5M2MyYmQxYmQwNmUzNzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-01T04:02:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-07T15:14:54Z"}, "message": "core: Inherit the tuple module", "tree": {"sha": "5df61620221a6f9afd352530ac80ba84eab45255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df61620221a6f9afd352530ac80ba84eab45255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92095d125ab4353a7bae002b893c2bd1bd06e379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92095d125ab4353a7bae002b893c2bd1bd06e379", "html_url": "https://github.com/rust-lang/rust/commit/92095d125ab4353a7bae002b893c2bd1bd06e379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92095d125ab4353a7bae002b893c2bd1bd06e379/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a989d67697fe33e51e7209511e89ba7faaba21d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a989d67697fe33e51e7209511e89ba7faaba21d", "html_url": "https://github.com/rust-lang/rust/commit/1a989d67697fe33e51e7209511e89ba7faaba21d"}], "stats": {"total": 53, "additions": 32, "deletions": 21}, "files": [{"sha": "19f64c6d067d0d394e7c8876e653edfe447ced12", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92095d125ab4353a7bae002b893c2bd1bd06e379/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92095d125ab4353a7bae002b893c2bd1bd06e379/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=92095d125ab4353a7bae002b893c2bd1bd06e379", "patch": "@@ -44,3 +44,4 @@ pub mod any;\n pub mod finally;\n pub mod raw;\n pub mod char;\n+pub mod tuple;"}, {"sha": "84f850ff9074daa95b7dbce3ea27abac63ea1c49", "filename": "src/libcore/tuple.rs", "status": "renamed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/92095d125ab4353a7bae002b893c2bd1bd06e379/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92095d125ab4353a7bae002b893c2bd1bd06e379/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=92095d125ab4353a7bae002b893c2bd1bd06e379", "patch": "@@ -15,8 +15,6 @@\n use clone::Clone;\n #[cfg(not(test))] use cmp::*;\n #[cfg(not(test))] use default::Default;\n-use fmt;\n-use result::{Ok, Err};\n \n // macro for implementing n-ary tuple functions and operations\n macro_rules! tuple_impls {\n@@ -112,12 +110,6 @@ macro_rules! tuple_impls {\n                     ($({ let x: $T = Default::default(); x},)+)\n                 }\n             }\n-\n-            impl<$($T: fmt::Show),+> fmt::Show for ($($T,)+) {\n-                fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                    write_tuple!(f.buf, $(self.$refN()),+)\n-                }\n-            }\n         )+\n     }\n }\n@@ -144,18 +136,6 @@ macro_rules! lexical_cmp {\n     ($a:expr, $b:expr) => { ($a).cmp($b) };\n }\n \n-macro_rules! write_tuple {\n-    ($buf:expr, $x:expr) => (\n-        write!($buf, \"({},)\", *$x)\n-    );\n-    ($buf:expr, $hd:expr, $($tl:expr),+) => ({\n-        try!(write!($buf, \"(\"));\n-        try!(write!($buf, \"{}\", *$hd));\n-        $(try!(write!($buf, \", {}\", *$tl));)+\n-        write!($buf, \")\")\n-    });\n-}\n-\n tuple_impls! {\n     Tuple1 {\n         (val0, ref0, mut0) -> A { (a) => a }", "previous_filename": "src/libstd/tuple.rs"}, {"sha": "2112144920529788be193f1e842ab956fca727fd", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/92095d125ab4353a7bae002b893c2bd1bd06e379/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92095d125ab4353a7bae002b893c2bd1bd06e379/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=92095d125ab4353a7bae002b893c2bd1bd06e379", "patch": "@@ -1242,6 +1242,36 @@ impl<T> Show for *mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result { secret_pointer(self, f) }\n }\n \n+macro_rules! peel(($name:ident, $($other:ident,)*) => (tuple!($($other,)*)))\n+\n+macro_rules! tuple (\n+    () => ();\n+    ( $($name:ident,)+ ) => (\n+        impl<$($name:Show),*> Show for ($($name,)*) {\n+            #[allow(uppercase_variables, dead_assignment)]\n+            fn fmt(&self, f: &mut Formatter) -> Result {\n+                try!(write!(f.buf, \"(\"));\n+                let ($(ref $name,)*) = *self;\n+                let mut n = 0;\n+                $(\n+                    if n > 0 {\n+                        try!(write!(f.buf, \", \"));\n+                    }\n+                    try!(write!(f.buf, \"{}\", *$name));\n+                    n += 1;\n+                )*\n+                if n == 1 {\n+                    try!(write!(f.buf, \",\"));\n+                }\n+                write!(f.buf, \")\")\n+            }\n+        }\n+        peel!($($name,)*)\n+    )\n+)\n+\n+tuple! { T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, }\n+\n impl Show for Box<any::Any> {\n     fn fmt(&self, f: &mut Formatter) -> Result { f.pad(\"Box<Any>\") }\n }"}, {"sha": "ac956b11d27e4506fac86c397c4f49638384e566", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92095d125ab4353a7bae002b893c2bd1bd06e379/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92095d125ab4353a7bae002b893c2bd1bd06e379/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=92095d125ab4353a7bae002b893c2bd1bd06e379", "patch": "@@ -147,6 +147,7 @@ pub use core::intrinsics;\n pub use core::mem;\n pub use core::ptr;\n pub use core::raw;\n+pub use core::tuple;\n \n // Run tests with libgreen instead of libnative.\n //\n@@ -192,7 +193,6 @@ pub mod prelude;\n #[path = \"num/f64.rs\"]   pub mod f64;\n \n pub mod bool;\n-pub mod tuple;\n \n pub mod slice;\n pub mod vec;"}]}