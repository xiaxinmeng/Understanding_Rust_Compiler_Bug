{"sha": "6157f1dc06179fa97d776b5c442307cae77e925d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNTdmMWRjMDYxNzlmYTk3ZDc3NmI1YzQ0MjMwN2NhZTc3ZTkyNWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-08T05:56:46Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-08T05:56:46Z"}, "message": "test: Fix some busted run-pass tests, fallout from the pattern bindings change. rs=bustage", "tree": {"sha": "2065ea289a78dd01959f8ddab3d2e26fb5f227ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2065ea289a78dd01959f8ddab3d2e26fb5f227ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6157f1dc06179fa97d776b5c442307cae77e925d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6157f1dc06179fa97d776b5c442307cae77e925d", "html_url": "https://github.com/rust-lang/rust/commit/6157f1dc06179fa97d776b5c442307cae77e925d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6157f1dc06179fa97d776b5c442307cae77e925d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9e3d02b7dd5d20098ec7f40397563f8c455e975", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e3d02b7dd5d20098ec7f40397563f8c455e975", "html_url": "https://github.com/rust-lang/rust/commit/e9e3d02b7dd5d20098ec7f40397563f8c455e975"}], "stats": {"total": 33, "additions": 7, "deletions": 26}, "files": [{"sha": "c65472ec894f07ef94d55e27785e261d49a85173", "filename": "src/test/run-pass/borrowck-preserve-box-in-discr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6157f1dc06179fa97d776b5c442307cae77e925d/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6157f1dc06179fa97d776b5c442307cae77e925d/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs?ref=6157f1dc06179fa97d776b5c442307cae77e925d", "patch": "@@ -2,8 +2,8 @@\n \n fn main() {\n     let mut x = @{f: ~3};\n-    match *x {\n-      {f: b_x} => {\n+    match x {\n+      @{f: b_x} => {\n         assert *b_x == 3;\n         assert ptr::addr_of(&(*x.f)) == ptr::addr_of(&(*b_x));\n \n@@ -14,4 +14,4 @@ fn main() {\n         assert ptr::addr_of(&(*x.f)) != ptr::addr_of(&(*b_x));\n       }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "af4be894f36e4a3db4b180124c6f79536d4cb80f", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6157f1dc06179fa97d776b5c442307cae77e925d/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6157f1dc06179fa97d776b5c442307cae77e925d/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=6157f1dc06179fa97d776b5c442307cae77e925d", "patch": "@@ -20,7 +20,7 @@ trait option_monad<A> {\n impl<A> Option<A>: option_monad<A> {\n     fn bind<B>(f: fn(A) -> Option<B>) -> Option<B> {\n         match self {\n-          Some(a) => { f(a) }\n+          Some(ref a) => { f(*a) }\n           None => { None }\n         }\n     }"}, {"sha": "b20e6efa85814419544d1aa14c6e7b516d29d475", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6157f1dc06179fa97d776b5c442307cae77e925d/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6157f1dc06179fa97d776b5c442307cae77e925d/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=6157f1dc06179fa97d776b5c442307cae77e925d", "patch": "@@ -6,7 +6,7 @@ enum clam<T> { a(T, int), b, }\n \n fn uhoh<T>(v: ~[clam<T>]) {\n     match v[1] {\n-      a::<T>(t, u) => { debug!(\"incorrect\"); log(debug, u); fail; }\n+      a::<T>(ref t, ref u) => { debug!(\"incorrect\"); log(debug, u); fail; }\n       b::<T> => { debug!(\"correct\"); }\n     }\n }"}, {"sha": "b307c6e7e7eb32271871c8afe5220343598c4d50", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6157f1dc06179fa97d776b5c442307cae77e925d/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6157f1dc06179fa97d776b5c442307cae77e925d/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=6157f1dc06179fa97d776b5c442307cae77e925d", "patch": "@@ -15,7 +15,7 @@ impl <T: to_str> Option<T>: to_str {\n     fn to_str() -> ~str {\n         match self {\n           None => { ~\"none\" }\n-          Some(t) => { ~\"some(\" + t.to_str() + ~\")\" }\n+          Some(ref t) => { ~\"some(\" + t.to_str() + ~\")\" }\n         }\n     }\n }"}, {"sha": "c8d9ea14d54160fb5558351543173a72c8c31323", "filename": "src/test/run-pass/while-prelude-drop.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6157f1dc06179fa97d776b5c442307cae77e925d/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6157f1dc06179fa97d776b5c442307cae77e925d/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs?ref=6157f1dc06179fa97d776b5c442307cae77e925d", "patch": "@@ -1,26 +1,7 @@\n \n+#[deriving_eq]\n enum t { a, b(~str), }\n \n-impl t : cmp::Eq {\n-    pure fn eq(&self, other: &t) -> bool {\n-        match *self {\n-            a => {\n-                match (*other) {\n-                    a => true,\n-                    b(_) => false\n-                }\n-            }\n-            b(s0) => {\n-                match (*other) {\n-                    a => false,\n-                    b(s1) => s0 == s1\n-                }\n-            }\n-        }\n-    }\n-    pure fn ne(&self, other: &t) -> bool { !(*self).eq(other) }\n-}\n-\n fn make(i: int) -> t {\n     if i > 10 { return a; }\n     let mut s = ~\"hello\";"}]}