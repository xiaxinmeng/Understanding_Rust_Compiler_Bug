{"sha": "e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZWY4MmRkNzA3OWJiYmRiOWRiMGMyMmZkZTBjNzUwYjJlNGRlOGM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-13T23:55:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-14T00:15:08Z"}, "message": "Change some uses of static methods to use the trait path", "tree": {"sha": "58118edb33536c8c69df4126b6e5f03ee4c626d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58118edb33536c8c69df4126b6e5f03ee4c626d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c", "html_url": "https://github.com/rust-lang/rust/commit/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "732c39c183bf6a2633095557aa9a3c3c48b84b1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/732c39c183bf6a2633095557aa9a3c3c48b84b1b", "html_url": "https://github.com/rust-lang/rust/commit/732c39c183bf6a2633095557aa9a3c3c48b84b1b"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "2ea9c5925ef71025bf33c95c009df5b73687bfc4", "filename": "src/libcore/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c", "patch": "@@ -36,7 +36,7 @@ pub use f64::{modf, pow, round, sinh, tanh, tgamma, trunc};\n pub use f64::signbit;\n pub use f64::{j0, j1, jn, y0, y1, yn};\n use cmp::{Eq, Ord};\n-use num::from_int;\n+use num::Num::from_int;\n \n pub const NaN: float = 0.0/0.0;\n "}, {"sha": "c61e212637418f8fa33563d0b0f20640e474915e", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c", "patch": "@@ -20,7 +20,7 @@ use T = self::inst::T;\n \n use cmp::{Eq, Ord};\n use from_str::FromStr;\n-use num::from_int;\n+use num::Num::from_int;\n \n pub const bits : uint = inst::bits;\n pub const bytes : uint = (inst::bits / 8);"}, {"sha": "7685fe06ad944f76c66247f222f40bfa1c67d20a", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c", "patch": "@@ -244,7 +244,7 @@ pub pure fn find<A: Copy,IA:BaseIter<A>>(self: &IA,\n #[inline(always)]\n pub pure fn build<A,B: Buildable<A>>(builder: fn(push: pure fn(v: A)))\n     -> B {\n-    build_sized(4, builder)\n+    Buildable::build_sized(4, builder)\n }\n \n /**\n@@ -265,7 +265,7 @@ pub pure fn build_sized_opt<A,B: Buildable<A>>(\n     size: Option<uint>,\n     builder: fn(push: pure fn(v: A))) -> B {\n \n-    build_sized(size.get_default(4), builder)\n+    Buildable::build_sized(size.get_default(4), builder)\n }\n \n // Functions that combine iteration and building\n@@ -288,7 +288,7 @@ pub fn map<T,IT: BaseIter<T>,U,BU: Buildable<U>>(v: &IT, f: fn(&T) -> U)\n  */\n pub pure fn from_fn<T,BT: Buildable<T>>(n_elts: uint,\n                                         op: InitOp<T>) -> BT {\n-    do build_sized(n_elts) |push| {\n+    do Buildable::build_sized(n_elts) |push| {\n         let mut i: uint = 0u;\n         while i < n_elts { push(op(i)); i += 1u; }\n     }\n@@ -302,7 +302,7 @@ pub pure fn from_fn<T,BT: Buildable<T>>(n_elts: uint,\n  */\n pub pure fn from_elem<T: Copy,BT: Buildable<T>>(n_elts: uint,\n                                                 t: T) -> BT {\n-    do build_sized(n_elts) |push| {\n+    do Buildable::build_sized(n_elts) |push| {\n         let mut i: uint = 0;\n         while i < n_elts { push(t); i += 1; }\n     }"}, {"sha": "65ed35159314bd343ca290d6c749061c48ad35e7", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c", "patch": "@@ -29,7 +29,7 @@ pub struct WindowsPath {\n }\n \n pub pure fn WindowsPath(s: &str) -> WindowsPath {\n-    from_str(s)\n+    GenericPath::from_str(s)\n }\n \n #[deriving_eq]\n@@ -39,7 +39,7 @@ pub struct PosixPath {\n }\n \n pub pure fn PosixPath(s: &str) -> PosixPath {\n-    from_str(s)\n+    GenericPath::from_str(s)\n }\n \n pub trait GenericPath {"}, {"sha": "b80838420f00da0859e7b8f174e87bcbef37caa9", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=e7ef82dd7079bbbdb9db0c22fde0c750b2e4de8c", "patch": "@@ -16,8 +16,7 @@ use either::{Right,Left,Either};\n use json;\n use sha1;\n use serialization::{Serializer,Serializable,\n-                    Deserializer,Deserializable,\n-                    deserialize};\n+                    Deserializer,Deserializable};\n \n /**\n *\n@@ -261,7 +260,7 @@ impl Prep {\n \n                     let v : T = do io::with_str_reader(res) |rdr| {\n                         let j = result::unwrap(json::from_reader(rdr));\n-                        deserialize(&json::Deserializer(move j))\n+                        Deserializable::deserialize(&json::Deserializer(move j))\n                     };\n                     return Work::new(self, move Left(move v));\n                 }"}]}