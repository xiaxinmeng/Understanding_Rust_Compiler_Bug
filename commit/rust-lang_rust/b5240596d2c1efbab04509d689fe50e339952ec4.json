{"sha": "b5240596d2c1efbab04509d689fe50e339952ec4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MjQwNTk2ZDJjMWVmYmFiMDQ1MDlkNjg5ZmU1MGUzMzk5NTJlYzQ=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-09-25T01:27:00Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:30:29Z"}, "message": "Inline cache impl into Body, rename predecessor fns, change output of predecessors_for to slice", "tree": {"sha": "01a5b67f80891a21a2d0e68b86b6851c85ed8e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01a5b67f80891a21a2d0e68b86b6851c85ed8e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5240596d2c1efbab04509d689fe50e339952ec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5240596d2c1efbab04509d689fe50e339952ec4", "html_url": "https://github.com/rust-lang/rust/commit/b5240596d2c1efbab04509d689fe50e339952ec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5240596d2c1efbab04509d689fe50e339952ec4/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c16ef6b21de93de3ebf6cf7bbb3484719427a4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7", "html_url": "https://github.com/rust-lang/rust/commit/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7"}], "stats": {"total": 129, "additions": 38, "deletions": 91}, "files": [{"sha": "52848cc435a62fa505d46ef0d93407eca507c58b", "filename": "src/librustc/mir/cache.rs", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=c16ef6b21de93de3ebf6cf7bbb3484719427a4e7", "patch": "@@ -1,75 +0,0 @@\n-use rustc_index::vec::IndexVec;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n-use crate::ich::StableHashingContext;\n-use crate::mir::{Body, BasicBlock};\n-\n-#[derive(Clone, Debug)]\n-pub struct Cache {\n-    predecessors: Option<IndexVec<BasicBlock, Vec<BasicBlock>>>\n-}\n-\n-\n-impl rustc_serialize::Encodable for Cache {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        Encodable::encode(&(), s)\n-    }\n-}\n-\n-impl rustc_serialize::Decodable for Cache {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        Decodable::decode(d).map(|_v: ()| Self::new())\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for Cache {\n-    fn hash_stable(&self, _: &mut StableHashingContext<'a>, _: &mut StableHasher) {\n-        // Do nothing.\n-    }\n-}\n-\n-impl Cache {\n-    pub fn new() -> Self {\n-        Cache {\n-            predecessors: None\n-        }\n-    }\n-\n-    pub fn invalidate(&mut self) {\n-        // FIXME: consider being more fine-grained\n-        self.predecessors = None;\n-    }\n-\n-    pub fn predecessors_ref(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n-        assert!(self.predecessors.is_some());\n-        self.predecessors.as_ref().unwrap()\n-    }\n-\n-    pub fn predecessors_mut(\n-        &mut self,\n-        body: &Body<'_>\n-    ) -> &mut IndexVec<BasicBlock, Vec<BasicBlock>> {\n-        if self.predecessors.is_none() {\n-            self.predecessors = Some(calculate_predecessors(body));\n-        }\n-\n-        self.predecessors.as_mut().unwrap()\n-    }\n-}\n-\n-fn calculate_predecessors(body: &Body<'_>) -> IndexVec<BasicBlock, Vec<BasicBlock>> {\n-    let mut result = IndexVec::from_elem(vec![], body.basic_blocks());\n-    for (bb, data) in body.basic_blocks().iter_enumerated() {\n-        if let Some(ref term) = data.terminator {\n-            for &tgt in term.successors() {\n-                result[tgt].push(bb);\n-            }\n-        }\n-    }\n-\n-    result\n-}\n-\n-CloneTypeFoldableAndLiftImpls! {\n-    Cache,\n-}"}, {"sha": "30958700b1b6a5fddeacfd2defea0e24b99c67cf", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b5240596d2c1efbab04509d689fe50e339952ec4/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5240596d2c1efbab04509d689fe50e339952ec4/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=b5240596d2c1efbab04509d689fe50e339952ec4", "patch": "@@ -40,7 +40,6 @@ use syntax_pos::{Span, DUMMY_SP};\n \n pub use crate::mir::interpret::AssertMessage;\n \n-mod cache;\n pub mod interpret;\n pub mod mono;\n pub mod tcx;\n@@ -155,7 +154,7 @@ pub struct Body<'tcx> {\n     pub span: Span,\n \n     /// A cache for various calculations.\n-    cache: cache::Cache,\n+    predecessors_cache: Option<IndexVec<BasicBlock, Vec<BasicBlock>>>,\n }\n \n impl<'tcx> Body<'tcx> {\n@@ -192,7 +191,7 @@ impl<'tcx> Body<'tcx> {\n             spread_arg: None,\n             var_debug_info,\n             span,\n-            cache: cache::Cache::new(),\n+            predecessors_cache: None,\n             control_flow_destroyed,\n         }\n     }\n@@ -204,32 +203,53 @@ impl<'tcx> Body<'tcx> {\n \n     #[inline]\n     pub fn basic_blocks_mut(&mut self) -> &mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n-        self.cache.invalidate();\n+        self.predecessors_cache = None;\n+//        self.cache.invalidate();\n         &mut self.basic_blocks\n     }\n \n     #[inline]\n     pub fn basic_blocks_and_local_decls_mut(\n         &mut self,\n     ) -> (&mut IndexVec<BasicBlock, BasicBlockData<'tcx>>, &mut LocalDecls<'tcx>) {\n-        self.cache.invalidate();\n+        self.predecessors_cache = None;\n+//        self.cache.invalidate();\n         (&mut self.basic_blocks, &mut self.local_decls)\n     }\n \n     #[inline]\n-    pub fn predecessors_ref(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n-        self.cache.predecessors_ref()\n+    pub fn unwrap_predecessors(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n+        assert!(self.predecessors_cache.is_some());\n+        self.predecessors_cache.as_ref().unwrap()\n     }\n \n     #[inline]\n-    pub fn predecessors_mut(&mut self) -> &mut IndexVec<BasicBlock, Vec<BasicBlock>> {\n+    pub fn predecessors(&mut self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n         // TODO(nashenas88) figure out a way to get rid of this clone\n-        self.cache.predecessors_mut(&self.clone())\n+        if self.predecessors_cache.is_none() {\n+            self.predecessors_cache = Some(self.calculate_predecessors())\n+        }\n+\n+        self.predecessors_cache.as_ref().unwrap()\n+    }\n+\n+    fn calculate_predecessors(&self) -> IndexVec<BasicBlock, Vec<BasicBlock>> {\n+        let mut result = IndexVec::from_elem(vec![], self.basic_blocks());\n+        for (bb, data) in self.basic_blocks().iter_enumerated() {\n+            if let Some(ref term) = data.terminator {\n+                for &tgt in term.successors() {\n+                    result[tgt].push(bb);\n+                }\n+            }\n+        }\n+\n+        result\n     }\n \n     #[inline]\n-    pub fn predecessors_for(&self, bb: BasicBlock) -> &Vec<BasicBlock> {\n-        &self.predecessors_ref()[bb]\n+    pub fn predecessors_for(&self, bb: BasicBlock) -> &[BasicBlock] {\n+        // TODO(nashenas88) could this be predecessors sometimes too?\n+        &self.unwrap_predecessors()[bb]\n     }\n \n     #[inline]\n@@ -1007,6 +1027,8 @@ impl BasicBlock {\n     }\n }\n \n+CloneTypeFoldableAndLiftImpls!{ BasicBlock, }\n+\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlockData and Terminator\n \n@@ -2628,7 +2650,7 @@ impl<'tcx> graph::WithPredecessors for Body<'tcx> {\n         &self,\n         node: Self::Node,\n     ) -> <Self as GraphPredecessors<'_>>::Iter {\n-        self.predecessors_for(node).clone().into_iter()\n+        self.predecessors_for(node).to_vec().into_iter()\n     }\n }\n \n@@ -2688,13 +2710,13 @@ impl Location {\n         }\n \n         // If we're in another block, then we want to check that block is a predecessor of `other`.\n-        let mut queue: Vec<BasicBlock> = body.predecessors_for(other.block).clone();\n+        let mut queue: Vec<BasicBlock> = body.predecessors_for(other.block).to_vec();\n         let mut visited = FxHashSet::default();\n \n         while let Some(block) = queue.pop() {\n             // If we haven't visited this block before, then make sure we visit it's predecessors.\n             if visited.insert(block) {\n-                queue.append(&mut body.predecessors_for(block).clone());\n+                queue.extend(body.predecessors_for(block).iter().cloned());\n             } else {\n                 continue;\n             }"}, {"sha": "bf3df1ae2fd8484ab6fa6919427a61488b20f029", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5240596d2c1efbab04509d689fe50e339952ec4/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5240596d2c1efbab04509d689fe50e339952ec4/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=b5240596d2c1efbab04509d689fe50e339952ec4", "patch": "@@ -39,7 +39,7 @@ impl<'tcx> MirPass<'tcx> for AddCallGuards {\n impl AddCallGuards {\n     pub fn add_call_guards(&self, body: &mut Body<'_>) {\n         let pred_count: IndexVec<_, _> =\n-            body.predecessors_mut().iter().map(|ps| ps.len()).collect();\n+            body.predecessors().iter().map(|ps| ps.len()).collect();\n \n         // We need a place to store the new blocks generated\n         let mut new_blocks = Vec::new();"}, {"sha": "d313cba6bdf1a1dc75fe706f75042ea28fb15451", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5240596d2c1efbab04509d689fe50e339952ec4/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5240596d2c1efbab04509d689fe50e339952ec4/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=b5240596d2c1efbab04509d689fe50e339952ec4", "patch": "@@ -94,7 +94,7 @@ pub fn liveness_of_locals(\n         dirty_queue.insert(bb);\n     }\n \n-    let predecessors = body.predecessors_ref();\n+    let predecessors = body.unwrap_predecessors();\n \n     while let Some(bb) = dirty_queue.pop() {\n         // bits = use \u222a (bits - def)"}]}