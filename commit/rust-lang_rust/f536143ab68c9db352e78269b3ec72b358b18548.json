{"sha": "f536143ab68c9db352e78269b3ec72b358b18548", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MzYxNDNhYjY4YzlkYjM1MmU3ODI2OWIzZWM3MmIzNThiMTg1NDg=", "commit": {"author": {"name": "David Henningsson", "email": "diwic@ubuntu.com", "date": "2017-12-19T00:59:29Z"}, "committer": {"name": "David Henningsson", "email": "diwic@ubuntu.com", "date": "2017-12-21T03:43:35Z"}, "message": "Mir: Abort on nounwind ABIs\n\nGenerate Abort instead of Resume terminators on nounwind ABIs.\n\nhttps://github.com/rust-lang/rust/issues/18510\n\nSigned-off-by: David Henningsson <diwic@ubuntu.com>", "tree": {"sha": "eb0bfe6e281008e676e8aa364831abeacc942b29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb0bfe6e281008e676e8aa364831abeacc942b29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f536143ab68c9db352e78269b3ec72b358b18548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f536143ab68c9db352e78269b3ec72b358b18548", "html_url": "https://github.com/rust-lang/rust/commit/f536143ab68c9db352e78269b3ec72b358b18548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f536143ab68c9db352e78269b3ec72b358b18548/comments", "author": {"login": "diwic", "id": 9721510, "node_id": "MDQ6VXNlcjk3MjE1MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/9721510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diwic", "html_url": "https://github.com/diwic", "followers_url": "https://api.github.com/users/diwic/followers", "following_url": "https://api.github.com/users/diwic/following{/other_user}", "gists_url": "https://api.github.com/users/diwic/gists{/gist_id}", "starred_url": "https://api.github.com/users/diwic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diwic/subscriptions", "organizations_url": "https://api.github.com/users/diwic/orgs", "repos_url": "https://api.github.com/users/diwic/repos", "events_url": "https://api.github.com/users/diwic/events{/privacy}", "received_events_url": "https://api.github.com/users/diwic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "diwic", "id": 9721510, "node_id": "MDQ6VXNlcjk3MjE1MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/9721510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diwic", "html_url": "https://github.com/diwic", "followers_url": "https://api.github.com/users/diwic/followers", "following_url": "https://api.github.com/users/diwic/following{/other_user}", "gists_url": "https://api.github.com/users/diwic/gists{/gist_id}", "starred_url": "https://api.github.com/users/diwic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diwic/subscriptions", "organizations_url": "https://api.github.com/users/diwic/orgs", "repos_url": "https://api.github.com/users/diwic/repos", "events_url": "https://api.github.com/users/diwic/events{/privacy}", "received_events_url": "https://api.github.com/users/diwic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd6127e4af0a0b899c82944b023bf3e7e2949175", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6127e4af0a0b899c82944b023bf3e7e2949175", "html_url": "https://github.com/rust-lang/rust/commit/dd6127e4af0a0b899c82944b023bf3e7e2949175"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "f904bd5bf43e14c06420f79099a608a57cd3b76e", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f536143ab68c9db352e78269b3ec72b358b18548/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f536143ab68c9db352e78269b3ec72b358b18548/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=f536143ab68c9db352e78269b3ec72b358b18548", "patch": "@@ -1919,6 +1919,7 @@ dependencies = [\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n+ \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\","}, {"sha": "ad64244f7c5af1bcd779a0886fab3fa8bc30cae0", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f536143ab68c9db352e78269b3ec72b358b18548/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f536143ab68c9db352e78269b3ec72b358b18548/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=f536143ab68c9db352e78269b3ec72b358b18548", "patch": "@@ -14,6 +14,7 @@ graphviz = { path = \"../libgraphviz\" }\n log = \"0.3\"\n log_settings = \"0.1.1\"\n rustc = { path = \"../librustc\" }\n+rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "4b8ec062a78ddec584ee314e3d9eac3acfdbc6b0", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f536143ab68c9db352e78269b3ec72b358b18548/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f536143ab68c9db352e78269b3ec72b358b18548/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=f536143ab68c9db352e78269b3ec72b358b18548", "patch": "@@ -20,6 +20,7 @@ use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeMap;\n+use rustc_back::PanicStrategy;\n use rustc_const_eval::pattern::{BindingMode, PatternKind};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use shim;\n@@ -353,6 +354,27 @@ macro_rules! unpack {\n     };\n }\n \n+fn needs_abort_block<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                     fn_id: ast::NodeId,\n+                                     abi: Abi)\n+                                     -> bool {\n+\n+    // Not callable from C, so we can safely unwind through these\n+    if abi == Abi::Rust || abi == Abi::RustCall { return false; }\n+\n+    // We never unwind, so it's not relevant to stop an unwind\n+    if tcx.sess.panic_strategy() != PanicStrategy::Unwind { return false; }\n+\n+    // We cannot add landing pads, so don't add one\n+    if tcx.sess.no_landing_pads() { return false; }\n+\n+    // This is a special case: some functions have a C abi but are meant to\n+    // unwind anyway. Don't stop them.\n+    if tcx.has_attr(tcx.hir.local_def_id(fn_id), \"unwind\") { return false; }\n+\n+    return true;\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n /// the main entry point for building MIR for a function\n \n@@ -383,6 +405,11 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let source_info = builder.source_info(span);\n     let call_site_s = (call_site_scope, source_info);\n     unpack!(block = builder.in_scope(call_site_s, LintLevel::Inherited, block, |builder| {\n+\n+        if needs_abort_block(tcx, fn_id, abi) {\n+            builder.schedule_abort();\n+        }\n+\n         let arg_scope_s = (arg_scope, source_info);\n         unpack!(block = builder.in_scope(arg_scope_s, LintLevel::Inherited, block, |builder| {\n             builder.args_and_body(block, &arguments, arg_scope, &body.value)"}, {"sha": "ddb4bf0e36ba758d91675318ac9449873d2d2d1a", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f536143ab68c9db352e78269b3ec72b358b18548/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f536143ab68c9db352e78269b3ec72b358b18548/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=f536143ab68c9db352e78269b3ec72b358b18548", "patch": "@@ -612,6 +612,16 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    // Schedule an abort block - this is used for some ABIs that cannot unwind\n+    pub fn schedule_abort(&mut self) -> BasicBlock {\n+        self.scopes[0].needs_cleanup = true;\n+        let abortblk = self.cfg.start_new_cleanup_block();\n+        let source_info = self.scopes[0].source_info(self.fn_span);\n+        self.cfg.terminate(abortblk, source_info, TerminatorKind::Abort);\n+        self.cached_resume_block = Some(abortblk);\n+        abortblk\n+    }\n+\n     // Scheduling drops\n     // ================\n     /// Indicates that `place` should be dropped on exit from"}, {"sha": "4556a8ecc4bb9dbebae01b50f3e39e1b425377c8", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f536143ab68c9db352e78269b3ec72b358b18548/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f536143ab68c9db352e78269b3ec72b358b18548/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=f536143ab68c9db352e78269b3ec72b358b18548", "patch": "@@ -49,6 +49,7 @@ extern crate rustc_errors;\n #[macro_use]\n extern crate syntax;\n extern crate syntax_pos;\n+extern crate rustc_back;\n extern crate rustc_const_math;\n extern crate rustc_const_eval;\n extern crate core; // for NonZero"}, {"sha": "63fd934b0d0f4b1a3dc4aac3ba7447f361827e90", "filename": "src/test/run-pass/abort-on-c-abi.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f536143ab68c9db352e78269b3ec72b358b18548/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f536143ab68c9db352e78269b3ec72b358b18548/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs?ref=f536143ab68c9db352e78269b3ec72b358b18548", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Since we mark some ABIs as \"nounwind\" to LLVM, we must make sure that\n+// we never unwind through them.\n+\n+// ignore-emscripten no processes\n+\n+use std::{env, panic};\n+use std::io::prelude::*;\n+use std::io;\n+use std::process::{Command, Stdio};\n+\n+extern \"C\" fn panic_in_ffi() {\n+    panic!(\"Test\");\n+}\n+\n+fn test() {\n+    let _ = panic::catch_unwind(|| { panic_in_ffi(); });\n+    // The process should have aborted by now.\n+    io::stdout().write(b\"This should never be printed.\\n\");\n+    let _ = io::stdout().flush();\n+}\n+\n+fn main() {\n+    let args: Vec<String> = env::args().collect();\n+    if args.len() > 1 && args[1] == \"test\" {\n+        return test();\n+    }\n+\n+    let mut p = Command::new(&args[0])\n+                        .stdout(Stdio::piped())\n+                        .stdin(Stdio::piped())\n+                        .arg(\"test\").spawn().unwrap();\n+    assert!(!p.wait().unwrap().success());\n+}"}]}