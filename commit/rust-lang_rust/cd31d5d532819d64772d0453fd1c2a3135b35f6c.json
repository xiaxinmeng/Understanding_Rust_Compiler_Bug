{"sha": "cd31d5d532819d64772d0453fd1c2a3135b35f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMzFkNWQ1MzI4MTlkNjQ3NzJkMDQ1M2ZkMWMyYTMxMzViMzVmNmM=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-05-13T23:35:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-14T00:35:13Z"}, "message": "More anon obj work; whitespace police in middle::fold\n\nPassing args to middle::fold::fold_expr_anon_obj by reference to be\nconsistent with the other folds; adding a dummy fold_expr_anon_obj to\ntypeck to be filled in later.", "tree": {"sha": "04e05707271635d73f3620981c4a71226c05d28b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04e05707271635d73f3620981c4a71226c05d28b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd31d5d532819d64772d0453fd1c2a3135b35f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd31d5d532819d64772d0453fd1c2a3135b35f6c", "html_url": "https://github.com/rust-lang/rust/commit/cd31d5d532819d64772d0453fd1c2a3135b35f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd31d5d532819d64772d0453fd1c2a3135b35f6c/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814b17352c5b5267e29f73a6ddf93f97030ac62c", "url": "https://api.github.com/repos/rust-lang/rust/commits/814b17352c5b5267e29f73a6ddf93f97030ac62c", "html_url": "https://github.com/rust-lang/rust/commit/814b17352c5b5267e29f73a6ddf93f97030ac62c"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "7a9a67ddfcaef36225a733d016c1ab02a1b1ea0c", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/cd31d5d532819d64772d0453fd1c2a3135b35f6c/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd31d5d532819d64772d0453fd1c2a3135b35f6c/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=cd31d5d532819d64772d0453fd1c2a3135b35f6c", "patch": "@@ -39,7 +39,8 @@ type ast_fold[ENV] =\n     @rec\n     (\n      // Path fold:\n-     (fn(&ENV e, &span sp, &ast::path_ p) -> path) fold_path,\n+     (fn(&ENV e, &span sp, &ast::path_ p) \n+      -> path)                                    fold_path,\n \n      // Type folds.\n      (fn(&ENV e, &span sp) -> @ty)                fold_ty_nil,\n@@ -56,10 +57,10 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp, &vec[mt] elts) -> @ty) fold_ty_tup,\n \n      (fn(&ENV e, &span sp,\n-         &vec[ast::ty_field] elts) -> @ty)         fold_ty_rec,\n+         &vec[ast::ty_field] elts) -> @ty)        fold_ty_rec,\n \n      (fn(&ENV e, &span sp,\n-         &vec[ast::ty_method] meths) -> @ty)       fold_ty_obj,\n+         &vec[ast::ty_method] meths) -> @ty)      fold_ty_obj,\n \n      (fn(&ENV e, &span sp,\n          ast::proto proto,\n@@ -78,7 +79,7 @@ type ast_fold[ENV] =\n          &ann a) -> @expr)                        fold_expr_vec,\n \n      (fn(&ENV e, &span sp,\n-         &vec[ast::elt] es, &ann a) -> @expr)      fold_expr_tup,\n+         &vec[ast::elt] es, &ann a) -> @expr)     fold_expr_tup,\n \n      (fn(&ENV e, &span sp,\n          &vec[ast::field] fields,\n@@ -110,7 +111,7 @@ type ast_fold[ENV] =\n          &ann a) -> @expr)                        fold_expr_unary,\n \n      (fn(&ENV e, &span sp,\n-         &@ast::lit, &ann a) -> @expr)             fold_expr_lit,\n+         &@ast::lit, &ann a) -> @expr)            fold_expr_lit,\n \n      (fn(&ENV e, &span sp,\n          &@ast::expr e, &@ast::ty ty,\n@@ -186,10 +187,10 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp, &ann a) -> @expr)      fold_expr_cont,\n \n      (fn(&ENV e, &span sp,\n-         &option::t[@expr] rv, &ann a) -> @expr)   fold_expr_ret,\n+         &option::t[@expr] rv, &ann a) -> @expr)  fold_expr_ret,\n \n      (fn(&ENV e, &span sp,\n-         &option::t[@expr] rv, &ann a) -> @expr)   fold_expr_put,\n+         &option::t[@expr] rv, &ann a) -> @expr)  fold_expr_put,\n \n      (fn(&ENV e, &span sp,\n          &@expr e, &ann a) -> @expr)              fold_expr_be,\n@@ -210,13 +211,14 @@ type ast_fold[ENV] =\n          &@expr e, &ann a) -> @expr)              fold_expr_chan,\n \n      (fn(&ENV e, &span sp,\n-         &ast::anon_obj ob, // TODO: Is the ob arg supposed to be & or not?\n-         vec[ast::ty_param] tps,\n-         ast::obj_def_ids odid, ann a) -> @expr)   fold_expr_anon_obj,\n+         &ast::anon_obj ob,\n+         &vec[ast::ty_param] tps,\n+         &ast::obj_def_ids odid, \n+         &ann a) -> @expr)                        fold_expr_anon_obj,\n \n      // Decl folds.\n      (fn(&ENV e, &span sp,\n-         &@ast::local local) -> @decl)             fold_decl_local,\n+         &@ast::local local) -> @decl)            fold_decl_local,\n \n      (fn(&ENV e, &span sp,\n          &@item item) -> @decl)                   fold_decl_item,\n@@ -227,7 +229,7 @@ type ast_fold[ENV] =\n          &ann a) -> @pat)                         fold_pat_wild,\n \n      (fn(&ENV e, &span sp,\n-         &@ast::lit lit, &ann a) -> @pat)          fold_pat_lit,\n+         &@ast::lit lit, &ann a) -> @pat)         fold_pat_lit,\n \n      (fn(&ENV e, &span sp,\n          &ident i, &def_id did, &ann a) -> @pat)  fold_pat_bind,\n@@ -263,10 +265,11 @@ type ast_fold[ENV] =\n          &def_id id, &ann a) -> @native_item)     fold_native_item_fn,\n \n      (fn(&ENV e, &span sp, &ident ident,\n-         &ast::_mod m, &def_id id) -> @item)       fold_item_mod,\n+         &ast::_mod m, &def_id id) -> @item)      fold_item_mod,\n \n      (fn(&ENV e, &span sp, &ident ident,\n-         &ast::native_mod m, &def_id id) -> @item) fold_item_native_mod,\n+         &ast::native_mod m, &def_id id) \n+      -> @item)                                   fold_item_native_mod,\n \n      (fn(&ENV e, &span sp, &ident ident,\n          &@ty t, &vec[ast::ty_param] ty_params,\n@@ -283,13 +286,14 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp, &ident ident,\n          &ast::_obj ob,\n          &vec[ast::ty_param] ty_params,\n-         &ast::obj_def_ids odid, &ann a) -> @item) fold_item_obj,\n+         &ast::obj_def_ids odid, &ann a) \n+      -> @item)                                   fold_item_obj,\n \n      // View Item folds.\n      (fn(&ENV e, &span sp, &ident ident,\n          &vec[@meta_item] meta_items,\n          &def_id id,\n-         &option::t[int]) -> @view_item)           fold_view_item_use,\n+         &option::t[int]) -> @view_item)          fold_view_item_use,\n \n      (fn(&ENV e, &span sp, &ident i,\n          &vec[ident] idents,\n@@ -305,31 +309,33 @@ type ast_fold[ENV] =\n \n      (fn(&ENV e, &fn_decl decl,\n          ast::proto proto,\n-         &block body) -> ast::_fn)                 fold_fn,\n+         &block body) -> ast::_fn)                fold_fn,\n \n      (fn(&ENV e,\n          &vec[arg] inputs,\n          &@ty output,\n-         &purity p) -> ast::fn_decl)               fold_fn_decl,\n+         &purity p) -> ast::fn_decl)              fold_fn_decl,\n \n-     (fn(&ENV e, &ast::_mod m) -> ast::_mod)        fold_mod,\n+     (fn(&ENV e, &ast::_mod m) -> ast::_mod)      fold_mod,\n \n-     (fn(&ENV e, &ast::native_mod m) -> ast::native_mod) fold_native_mod,\n+     (fn(&ENV e, &ast::native_mod m) \n+      -> ast::native_mod)                         fold_native_mod,\n \n      (fn(&ENV e, &span sp,\n          &vec[@ast::crate_directive] cdirs,\n-         &ast::_mod m) -> @ast::crate)              fold_crate,\n+         &ast::_mod m) -> @ast::crate)            fold_crate,\n \n      (fn(&ENV e,\n          &vec[ast::obj_field] fields,\n          &vec[@ast::method] methods,\n          &option::t[@ast::method] dtor)\n-      -> ast::_obj)                                fold_obj,\n+      -> ast::_obj)                               fold_obj,\n \n      (fn(&ENV e,\n-         option::t[vec[ast::obj_field]] fields,\n-         vec[@ast::method] methods,\n-         option::t[ident] with_obj) -> ast::anon_obj) fold_anon_obj,\n+         &option::t[vec[ast::obj_field]] fields,\n+         &vec[@ast::method] methods,\n+         &option::t[ident] with_obj) \n+      -> ast::anon_obj)                           fold_anon_obj,\n \n      // Env updates.\n      (fn(&ENV e, &@ast::crate c) -> ENV) update_env_for_crate,\n@@ -976,7 +982,7 @@ fn fold_obj[ENV](&ENV env, &ast_fold[ENV] fld, &ast::_obj ob) -> ast::_obj {\n     ret fld.fold_obj(env, fields, meths, dtor);\n }\n \n-fn fold_anon_obj[ENV](&ENV env, ast_fold[ENV] fld, &ast::anon_obj ob) \n+fn fold_anon_obj[ENV](&ENV env, &ast_fold[ENV] fld, &ast::anon_obj ob) \n     -> ast::anon_obj {\n \n     // Fields\n@@ -1468,8 +1474,10 @@ fn identity_fold_expr_chan[ENV](&ENV e, &span sp, &@expr x,\n }\n \n fn identity_fold_expr_anon_obj[ENV](&ENV e, &span sp,\n-                                    &ast::anon_obj ob, vec[ast::ty_param] tps,\n-                                    ast::obj_def_ids odid, ann a) -> @expr {\n+                                    &ast::anon_obj ob, \n+                                    &vec[ast::ty_param] tps,\n+                                    &ast::obj_def_ids odid, \n+                                    &ann a) -> @expr {\n     ret @respan(sp, ast::expr_anon_obj(ob, tps, odid, a));\n }\n \n@@ -1648,9 +1656,9 @@ fn identity_fold_obj[ENV](&ENV e,\n }\n \n fn identity_fold_anon_obj[ENV](&ENV e,\n-                               option::t[vec[ast::obj_field]] fields,\n-                               vec[@ast::method] methods,\n-                               option::t[ident] with_obj) -> ast::anon_obj {\n+                               &option::t[vec[ast::obj_field]] fields,\n+                               &vec[@ast::method] methods,\n+                               &option::t[ident] with_obj) -> ast::anon_obj {\n     ret rec(fields=fields, methods=methods, with_obj=with_obj);\n }\n "}, {"sha": "99b2111e8489096dfe03062e69e58e68d0a933c4", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd31d5d532819d64772d0453fd1c2a3135b35f6c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd31d5d532819d64772d0453fd1c2a3135b35f6c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=cd31d5d532819d64772d0453fd1c2a3135b35f6c", "patch": "@@ -762,7 +762,18 @@ mod Collect {\n             }\n         }\n     }\n+    \n+    // Anonymous objects are expressions, not items, but they're enough like\n+    // items that we're going to include them in this fold.\n+    fn fold_expr_anon_obj(&@env e, &span sp,\n+                          &ast::anon_obj ob, &vec[ast::ty_param] tps,\n+                          &ast::obj_def_ids odid, &ast::ann a) -> @ast::expr {\n \n+        // TODO: Somewhere in here we need to push some stuff onto a vector.\n+\n+        auto expr_anon_obj = ast::expr_anon_obj(ob, tps, odid, a);\n+        ret @fold::respan[ast::expr_](sp, expr_anon_obj);\n+    }\n \n     fn fold_item_obj(&@env e, &span sp, &ast::ident i,\n                     &ast::_obj ob, &vec[ast::ty_param] ty_params,\n@@ -895,7 +906,8 @@ mod Collect {\n                     bind fold_native_item_fn(_,_,_,_,_,_,_,_),\n                  fold_item_obj   = bind fold_item_obj(_,_,_,_,_,_,_),\n                  fold_item_ty    = bind fold_item_ty(_,_,_,_,_,_,_),\n-                 fold_item_tag   = bind fold_item_tag(_,_,_,_,_,_,_)\n+                 fold_item_tag   = bind fold_item_tag(_,_,_,_,_,_,_),\n+                 fold_expr_anon_obj = bind fold_expr_anon_obj(_,_,_,_,_,_)\n                  with *fld_2);\n         auto crate_ = fold::fold_crate[@env](e, fld_2, crate);\n         ret tup(crate_, type_cache, id_to_ty_item, ntt);"}]}