{"sha": "5607178d0a6d1136faf2bad63cc3cc2448752f1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MDcxNzhkMGE2ZDExMzZmYWYyYmFkNjNjYzNjYzI0NDg3NTJmMWI=", "commit": {"author": {"name": "rChaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-06-06T04:06:40Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-06-06T04:06:40Z"}, "message": "fix the bug add unwanted code to impl (#3601) (#3602)", "tree": {"sha": "9ebc3b11efdf2cbe9f90744055ba824a6eca4e5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ebc3b11efdf2cbe9f90744055ba824a6eca4e5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5607178d0a6d1136faf2bad63cc3cc2448752f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5607178d0a6d1136faf2bad63cc3cc2448752f1b", "html_url": "https://github.com/rust-lang/rust/commit/5607178d0a6d1136faf2bad63cc3cc2448752f1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5607178d0a6d1136faf2bad63cc3cc2448752f1b/comments", "author": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0459eb3fecd8b1fe769157e3e9585a08fb10461", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0459eb3fecd8b1fe769157e3e9585a08fb10461", "html_url": "https://github.com/rust-lang/rust/commit/e0459eb3fecd8b1fe769157e3e9585a08fb10461"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "14d386047f06590e14aaaaefb0345ff11622b7ee", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5607178d0a6d1136faf2bad63cc3cc2448752f1b/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5607178d0a6d1136faf2bad63cc3cc2448752f1b/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=5607178d0a6d1136faf2bad63cc3cc2448752f1b", "patch": "@@ -700,8 +700,8 @@ pub(crate) fn format_impl(\n             option.allow_single_line();\n         }\n \n-        let misssing_span = mk_sp(self_ty.span.hi(), item.span.hi());\n-        let where_span_end = context.snippet_provider.opt_span_before(misssing_span, \"{\");\n+        let missing_span = mk_sp(self_ty.span.hi(), item.span.hi());\n+        let where_span_end = context.snippet_provider.opt_span_before(missing_span, \"{\");\n         let where_clause_str = rewrite_where_clause(\n             context,\n             &generics.where_clause,\n@@ -765,15 +765,15 @@ pub(crate) fn format_impl(\n         }\n \n         result.push('{');\n-\n-        let snippet = context.snippet(item.span);\n+        // this is an impl body snippet(impl SampleImple { /* here */ })\n+        let snippet = context.snippet(mk_sp(item.span.hi(), self_ty.span.hi()));\n         let open_pos = snippet.find_uncommented(\"{\")? + 1;\n \n         if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n             let mut visitor = FmtVisitor::from_context(context);\n             let item_indent = offset.block_only().block_indent(context.config);\n             visitor.block_indent = item_indent;\n-            visitor.last_pos = item.span.lo() + BytePos(open_pos as u32);\n+            visitor.last_pos = self_ty.span.hi() + BytePos(open_pos as u32);\n \n             visitor.visit_attrs(&item.attrs, ast::AttrStyle::Inner);\n             visitor.visit_impl_items(items);"}, {"sha": "c86ca24e7075533be93e2fb071a47df34a6d83ca", "filename": "tests/target/issue-3601.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5607178d0a6d1136faf2bad63cc3cc2448752f1b/tests%2Ftarget%2Fissue-3601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5607178d0a6d1136faf2bad63cc3cc2448752f1b/tests%2Ftarget%2Fissue-3601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3601.rs?ref=5607178d0a6d1136faf2bad63cc3cc2448752f1b", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_generics)]\n+\n+trait A {\n+    fn foo(&self);\n+}\n+\n+pub struct B<const N: usize>([usize; N]);\n+\n+impl<const N: usize> A for B<{ N }> {\n+    fn foo(&self) {}\n+}"}]}