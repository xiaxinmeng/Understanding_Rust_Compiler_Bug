{"sha": "bf4aaa4fb0d40987587ce202c3cc743e2a5959ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNGFhYTRmYjBkNDA5ODc1ODdjZTIwMmMzY2M3NDNlMmE1OTU5ZWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-05T17:42:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-05T17:42:41Z"}, "message": "Underengineer `cargo xtask install --client`", "tree": {"sha": "14cb43225c945cf79ca27b36109a78bc75b0846b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14cb43225c945cf79ca27b36109a78bc75b0846b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf4aaa4fb0d40987587ce202c3cc743e2a5959ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf4aaa4fb0d40987587ce202c3cc743e2a5959ee", "html_url": "https://github.com/rust-lang/rust/commit/bf4aaa4fb0d40987587ce202c3cc743e2a5959ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf4aaa4fb0d40987587ce202c3cc743e2a5959ee/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "142f9a03fd4bad366439b18d8de7f2237bed65ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/142f9a03fd4bad366439b18d8de7f2237bed65ab", "html_url": "https://github.com/rust-lang/rust/commit/142f9a03fd4bad366439b18d8de7f2237bed65ab"}], "stats": {"total": 107, "additions": 37, "deletions": 70}, "files": [{"sha": "56eda5b1e56697578468036aebcfbfbdd32166a0", "filename": "xtask/src/flags.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf4aaa4fb0d40987587ce202c3cc743e2a5959ee/xtask%2Fsrc%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4aaa4fb0d40987587ce202c3cc743e2a5959ee/xtask%2Fsrc%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fflags.rs?ref=bf4aaa4fb0d40987587ce202c3cc743e2a5959ee", "patch": "@@ -141,14 +141,6 @@ impl Xtask {\n // generated end\n \n impl Install {\n-    pub(crate) fn validate(&self) -> xflags::Result<()> {\n-        if let Some(code_bin) = &self.code_bin {\n-            if let Err(err) = code_bin.parse::<ClientOpt>() {\n-                return Err(xflags::Error::new(format!(\"failed to parse `--code-bin`: {}\", err)));\n-            }\n-        }\n-        Ok(())\n-    }\n     pub(crate) fn server(&self) -> Option<ServerOpt> {\n         if self.client && !self.server {\n             return None;\n@@ -166,7 +158,6 @@ impl Install {\n         if !self.client && self.server {\n             return None;\n         }\n-        let client_opt = self.code_bin.as_ref().and_then(|it| it.parse().ok()).unwrap_or_default();\n-        Some(client_opt)\n+        Some(ClientOpt { code_bin: self.code_bin.clone() })\n     }\n }"}, {"sha": "177028b082fc454437998b0550e6d8ffce033fc3", "filename": "xtask/src/install.rs", "status": "modified", "additions": 35, "deletions": 56, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/bf4aaa4fb0d40987587ce202c3cc743e2a5959ee/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4aaa4fb0d40987587ce202c3cc743e2a5959ee/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=bf4aaa4fb0d40987587ce202c3cc743e2a5959ee", "patch": "@@ -25,52 +25,12 @@ impl flags::Install {\n     }\n }\n \n-#[derive(Clone, Copy)]\n-pub(crate) enum ClientOpt {\n-    VsCode,\n-    VsCodeExploration,\n-    VsCodeInsiders,\n-    VsCodium,\n-    VsCodeOss,\n-    Any,\n+#[derive(Clone)]\n+pub(crate) struct ClientOpt {\n+    pub(crate) code_bin: Option<String>,\n }\n \n-impl ClientOpt {\n-    pub(crate) const fn as_cmds(&self) -> &'static [&'static str] {\n-        match self {\n-            ClientOpt::VsCode => &[\"code\"],\n-            ClientOpt::VsCodeExploration => &[\"code-exploration\"],\n-            ClientOpt::VsCodeInsiders => &[\"code-insiders\"],\n-            ClientOpt::VsCodium => &[\"codium\"],\n-            ClientOpt::VsCodeOss => &[\"code-oss\"],\n-            ClientOpt::Any => &[\"code\", \"code-exploration\", \"code-insiders\", \"codium\", \"code-oss\"],\n-        }\n-    }\n-}\n-\n-impl Default for ClientOpt {\n-    fn default() -> Self {\n-        ClientOpt::Any\n-    }\n-}\n-\n-impl std::str::FromStr for ClientOpt {\n-    type Err = anyhow::Error;\n-\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        [\n-            ClientOpt::VsCode,\n-            ClientOpt::VsCodeExploration,\n-            ClientOpt::VsCodeInsiders,\n-            ClientOpt::VsCodium,\n-            ClientOpt::VsCodeOss,\n-        ]\n-        .iter()\n-        .copied()\n-        .find(|c| [s] == c.as_cmds())\n-        .ok_or_else(|| anyhow::format_err!(\"no such client\"))\n-    }\n-}\n+const VS_CODES: &[&str] = &[\"code\", \"code-exploration\", \"code-insiders\", \"codium\", \"code-oss\"];\n \n pub(crate) struct ServerOpt {\n     pub(crate) malloc: Malloc,\n@@ -118,30 +78,49 @@ fn fix_path_for_mac() -> Result<()> {\n fn install_client(client_opt: ClientOpt) -> Result<()> {\n     let _dir = pushd(\"./editors/code\");\n \n-    let find_code = |f: fn(&str) -> bool| -> Result<&'static str> {\n-        client_opt.as_cmds().iter().copied().find(|bin| f(bin)).ok_or_else(|| {\n-            format_err!(\"Can't execute `code --version`. Perhaps it is not in $PATH?\")\n-        })\n-    };\n-\n-    let installed_extensions = if cfg!(unix) {\n+    // Package extension.\n+    if cfg!(unix) {\n         cmd!(\"npm --version\").run().context(\"`npm` is required to build the VS Code plugin\")?;\n         cmd!(\"npm ci\").run()?;\n \n         cmd!(\"npm run package --scripts-prepend-node-path\").run()?;\n-\n-        let code = find_code(|bin| cmd!(\"{bin} --version\").read().is_ok())?;\n-        cmd!(\"{code} --install-extension rust-analyzer.vsix --force\").run()?;\n-        cmd!(\"{code} --list-extensions\").read()?\n     } else {\n         cmd!(\"cmd.exe /c npm --version\")\n             .run()\n             .context(\"`npm` is required to build the VS Code plugin\")?;\n         cmd!(\"cmd.exe /c npm ci\").run()?;\n \n         cmd!(\"cmd.exe /c npm run package\").run()?;\n+    };\n+\n+    // Find the appropriate VS Code binary.\n+    let lifetime_extender;\n+    let candidates: &[&str] = match client_opt.code_bin.as_deref() {\n+        Some(it) => {\n+            lifetime_extender = [it];\n+            &lifetime_extender[..]\n+        }\n+        None => VS_CODES,\n+    };\n+    let code = candidates\n+        .iter()\n+        .copied()\n+        .find(|&bin| {\n+            if cfg!(unix) {\n+                cmd!(\"{bin} --version\").read().is_ok()\n+            } else {\n+                cmd!(\"cmd.exe /c {bin}.cmd --version\").read().is_ok()\n+            }\n+        })\n+        .ok_or_else(|| {\n+            format_err!(\"Can't execute `{} --version`. Perhaps it is not in $PATH?\", candidates[0])\n+        })?;\n \n-        let code = find_code(|bin| cmd!(\"cmd.exe /c {bin}.cmd --version\").read().is_ok())?;\n+    // Install & verify.\n+    let installed_extensions = if cfg!(unix) {\n+        cmd!(\"{code} --install-extension rust-analyzer.vsix --force\").run()?;\n+        cmd!(\"{code} --list-extensions\").read()?\n+    } else {\n         cmd!(\"cmd.exe /c {code}.cmd --install-extension rust-analyzer.vsix --force\").run()?;\n         cmd!(\"cmd.exe /c {code}.cmd --list-extensions\").read()?\n     };"}, {"sha": "3c4332f75ce638e88f61cb07f09421668289d962", "filename": "xtask/src/main.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf4aaa4fb0d40987587ce202c3cc743e2a5959ee/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4aaa4fb0d40987587ce202c3cc743e2a5959ee/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=bf4aaa4fb0d40987587ce202c3cc743e2a5959ee", "patch": "@@ -39,10 +39,7 @@ fn main() -> Result<()> {\n             println!(\"{}\", flags::Xtask::HELP);\n             return Ok(());\n         }\n-        flags::XtaskCmd::Install(cmd) => {\n-            cmd.validate()?;\n-            cmd.run()\n-        }\n+        flags::XtaskCmd::Install(cmd) => cmd.run(),\n         flags::XtaskCmd::Codegen(cmd) => cmd.run(),\n         flags::XtaskCmd::Lint(_) => run_clippy(),\n         flags::XtaskCmd::FuzzTests(_) => run_fuzzer(),"}]}