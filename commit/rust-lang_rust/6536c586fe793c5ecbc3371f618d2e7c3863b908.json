{"sha": "6536c586fe793c5ecbc3371f618d2e7c3863b908", "node_id": "C_kwDOAAsO6NoAKDY1MzZjNTg2ZmU3OTNjNWVjYmMzMzcxZjYxOGQyZTdjMzg2M2I5MDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-09T05:33:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-09T05:33:16Z"}, "message": "Auto merge of #90485 - camsteffen:fmt-args-less-bind, r=m-ou-se\n\nDon't destructure args tuple in format_args!\n\nThis allows Clippy to parse the HIR more simply since `arg0` is changed to `_args.0`. (cc rust-lang/rust-clippy#7843). From rustc's perspective, I think this is something between a lateral move and a tiny improvement since there are fewer bindings.\n\nr? `@m-ou-se`", "tree": {"sha": "fd93ced798151b7189e909dd6e74597f3ce53143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd93ced798151b7189e909dd6e74597f3ce53143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6536c586fe793c5ecbc3371f618d2e7c3863b908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6536c586fe793c5ecbc3371f618d2e7c3863b908", "html_url": "https://github.com/rust-lang/rust/commit/6536c586fe793c5ecbc3371f618d2e7c3863b908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6536c586fe793c5ecbc3371f618d2e7c3863b908/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c063203c2bacd015156f353d6de0c2071c9c26bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c063203c2bacd015156f353d6de0c2071c9c26bd", "html_url": "https://github.com/rust-lang/rust/commit/c063203c2bacd015156f353d6de0c2071c9c26bd"}, {"sha": "9a8919d823276629d34c2cc35f257a10783f35ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a8919d823276629d34c2cc35f257a10783f35ea", "html_url": "https://github.com/rust-lang/rust/commit/9a8919d823276629d34c2cc35f257a10783f35ea"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "733cc97c84596546bd0005ab6608749270564f7c", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6536c586fe793c5ecbc3371f618d2e7c3863b908/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6536c586fe793c5ecbc3371f618d2e7c3863b908/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=6536c586fe793c5ecbc3371f618d2e7c3863b908", "patch": "@@ -3,12 +3,12 @@\n #![deny(clippy::missing_docs_in_private_items)]\n \n use crate::ty::is_type_diagnostic_item;\n-use crate::{is_expn_of, last_path_segment, match_def_path, path_to_local_id, paths};\n+use crate::{is_expn_of, last_path_segment, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::{self, LitKind};\n use rustc_hir as hir;\n use rustc_hir::{\n-    Arm, Block, BorrowKind, Expr, ExprKind, HirId, LoopSource, MatchSource, Node, Pat, PatKind, QPath, StmtKind, UnOp,\n+    Arm, Block, BorrowKind, Expr, ExprKind, HirId, LoopSource, MatchSource, Node, Pat, QPath, StmtKind, UnOp,\n };\n use rustc_lint::LateContext;\n use rustc_span::{sym, symbol, ExpnKind, Span, Symbol};\n@@ -513,8 +513,6 @@ pub struct FormatArgsExpn<'tcx> {\n     pub format_string_parts: &'tcx [Expr<'tcx>],\n     /// Symbols corresponding to [`Self::format_string_parts`]\n     pub format_string_symbols: Vec<Symbol>,\n-    /// Match arm patterns, the `arg0`, etc. from the next field `args`\n-    pub arg_names: &'tcx [Pat<'tcx>],\n     /// Expressions like `ArgumentV1::new(arg0, Debug::fmt)`\n     pub args: &'tcx [Expr<'tcx>],\n     /// The final argument passed to `Arguments::new_v1_formatted`, if applicable\n@@ -559,15 +557,13 @@ impl FormatArgsExpn<'tcx> {\n                     _ => None,\n                 })\n                 .collect();\n-            if let PatKind::Tuple(arg_names, None) = arm.pat.kind;\n             if let ExprKind::Array(args) = arm.body.kind;\n             then {\n                 Some(FormatArgsExpn {\n                     format_string_span: strs_ref.span,\n                     value_args,\n                     format_string_parts,\n                     format_string_symbols,\n-                    arg_names,\n                     args,\n                     fmt_expr,\n                 })\n@@ -594,10 +590,8 @@ impl FormatArgsExpn<'tcx> {\n                             if let Ok(i) = usize::try_from(position);\n                             let arg = &self.args[i];\n                             if let ExprKind::Call(_, [arg_name, _]) = arg.kind;\n-                            if let Some(j) = self\n-                                .arg_names\n-                                .iter()\n-                                .position(|pat| path_to_local_id(arg_name, pat.hir_id));\n+                            if let ExprKind::Field(_, j) = arg_name.kind;\n+                            if let Ok(j) = j.name.as_str().parse::<usize>();\n                             then {\n                                 Some(FormatArgsArg { value: self.value_args[j], arg, fmt: Some(fmt) })\n                             } else {"}]}