{"sha": "dbb8a872a3aea4bb9510d109f5f7dbe5273446da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYjhhODcyYTNhZWE0YmI5NTEwZDEwOWY1ZjdkYmU1MjczNDQ2ZGE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-30T23:48:05Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-30T23:48:05Z"}, "message": "Fix ptr-arg false positive for trait impls\n\nFixes #425", "tree": {"sha": "88fc4c2803049b298fdbf84523ab7456e24f9144", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88fc4c2803049b298fdbf84523ab7456e24f9144"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbb8a872a3aea4bb9510d109f5f7dbe5273446da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb8a872a3aea4bb9510d109f5f7dbe5273446da", "html_url": "https://github.com/rust-lang/rust/commit/dbb8a872a3aea4bb9510d109f5f7dbe5273446da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbb8a872a3aea4bb9510d109f5f7dbe5273446da/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "555328cc7b93118ba8e65a29e24f133649fa022b", "url": "https://api.github.com/repos/rust-lang/rust/commits/555328cc7b93118ba8e65a29e24f133649fa022b", "html_url": "https://github.com/rust-lang/rust/commit/555328cc7b93118ba8e65a29e24f133649fa022b"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "78a3c146c0f210eefc929932c25ebc8eb26037a4", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbb8a872a3aea4bb9510d109f5f7dbe5273446da/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb8a872a3aea4bb9510d109f5f7dbe5273446da/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=dbb8a872a3aea4bb9510d109f5f7dbe5273446da", "patch": "@@ -5,6 +5,7 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n use rustc::middle::ty;\n+use rustc::front::map::Node;\n \n use utils::{span_lint, match_type};\n use utils::{STRING_PATH, VEC_PATH};\n@@ -34,6 +35,11 @@ impl LateLintPass for PtrArg {\n \n     fn check_impl_item(&mut self, cx: &LateContext, item: &ImplItem) {\n         if let &MethodImplItem(ref sig, _) = &item.node {\n+            if let Some(Node::NodeItem(it)) = cx.tcx.map.find(cx.tcx.map.get_parent(item.id)) {\n+                if let ItemImpl(_, _, _, Some(_), _, _) = it.node {\n+                    return; // ignore trait impls\n+                }\n+            }\n             check_fn(cx, &sig.decl);\n         }\n     }\n@@ -47,8 +53,8 @@ impl LateLintPass for PtrArg {\n \n fn check_fn(cx: &LateContext, decl: &FnDecl) {\n     for arg in &decl.inputs {\n-        if let Some(pat_ty) = cx.tcx.pat_ty_opt(&arg.pat) {\n-            if let ty::TyRef(_, ty::TypeAndMut { ty, mutbl: MutImmutable }) = pat_ty.sty {\n+        if let Some(ty) = cx.tcx.ast_ty_to_ty_cache.borrow().get(&arg.ty.id) {\n+            if let ty::TyRef(_, ty::TypeAndMut { ty, mutbl: MutImmutable }) = ty.sty {\n                 if match_type(cx, ty, &VEC_PATH) {\n                     span_lint(cx, PTR_ARG, arg.ty.span,\n                               \"writing `&Vec<_>` instead of `&[_]` involves one more reference \\"}, {"sha": "e4971208747a77041916cf0646e80934613fa4e6", "filename": "tests/compile-fail/ptr_arg.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dbb8a872a3aea4bb9510d109f5f7dbe5273446da/tests%2Fcompile-fail%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb8a872a3aea4bb9510d109f5f7dbe5273446da/tests%2Fcompile-fail%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_arg.rs?ref=dbb8a872a3aea4bb9510d109f5f7dbe5273446da", "patch": "@@ -21,3 +21,18 @@ fn do_str_mut(x: &mut String) { // no error here\n \n fn main() {\n }\n+\n+trait Foo {\n+    type Item;\n+    fn do_vec(x: &Vec<i64>); //~ERROR writing `&Vec<_>`\n+    fn do_item(x: &Self::Item);\n+}\n+\n+struct Bar;\n+\n+// no error, in trait impl (#425)\n+impl Foo for Bar {\n+    type Item = Vec<u8>;\n+    fn do_vec(x: &Vec<i64>) {}\n+    fn do_item(x: &Vec<u8>) {}  \n+}"}]}