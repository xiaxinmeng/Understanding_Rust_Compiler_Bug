{"sha": "76d2e085db71370cb34fc12fc544f46e557e743d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZDJlMDg1ZGI3MTM3MGNiMzRmYzEyZmM1NDRmNDZlNTU3ZTc0M2Q=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-30T13:07:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-30T13:07:15Z"}, "message": "Improve abi ir comments a bit", "tree": {"sha": "daa3ab6c1a266873340d1704bd6e4e902d120b9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa3ab6c1a266873340d1704bd6e4e902d120b9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d2e085db71370cb34fc12fc544f46e557e743d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d2e085db71370cb34fc12fc544f46e557e743d", "html_url": "https://github.com/rust-lang/rust/commit/76d2e085db71370cb34fc12fc544f46e557e743d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d2e085db71370cb34fc12fc544f46e557e743d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d731c4a6a7594cdcbe665b40b4690e109c60bdbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d731c4a6a7594cdcbe665b40b4690e109c60bdbf", "html_url": "https://github.com/rust-lang/rust/commit/d731c4a6a7594cdcbe665b40b4690e109c60bdbf"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "b7932e2ba5804580773e25d873ae8da8fdadbb6f", "filename": "src/abi/comments.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/76d2e085db71370cb34fc12fc544f46e557e743d/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d2e085db71370cb34fc12fc544f46e557e743d/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=76d2e085db71370cb34fc12fc544f46e557e743d", "patch": "@@ -5,20 +5,19 @@ use rustc::mir;\n use crate::prelude::*;\n use crate::abi::pass_mode::*;\n \n-pub fn add_local_header_comment(fx: &mut FunctionCx<impl Backend>) {\n+pub fn add_args_header_comment(fx: &mut FunctionCx<impl Backend>) {\n     fx.add_global_comment(format!(\n-        \"msg   loc.idx    param    pass mode                            ssa flags  ty\"\n+        \"kind  loc.idx   param    pass mode                            ty\"\n     ));\n }\n \n pub fn add_arg_comment<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    msg: &str,\n+    kind: &str,\n     local: mir::Local,\n     local_field: Option<usize>,\n     params: EmptySinglePair<Value>,\n     pass_mode: PassMode,\n-    ssa: crate::analyze::Flags,\n     ty: Ty<'tcx>,\n ) {\n     let local_field = if let Some(local_field) = local_field {\n@@ -33,17 +32,23 @@ pub fn add_arg_comment<'tcx>(\n     };\n     let pass_mode = format!(\"{:?}\", pass_mode);\n     fx.add_global_comment(format!(\n-        \"{msg:5}{local:>3}{local_field:<5} {params:10} {pass_mode:36} {ssa:10} {ty:?}\",\n-        msg = msg,\n+        \"{kind:5}{local:>3}{local_field:<5} {params:10} {pass_mode:36} {ty:?}\",\n+        kind = kind,\n         local = format!(\"{:?}\", local),\n         local_field = local_field,\n         params = params,\n         pass_mode = pass_mode,\n-        ssa = format!(\"{:?}\", ssa),\n         ty = ty,\n     ));\n }\n \n+pub fn add_locals_header_comment(fx: &mut FunctionCx<impl Backend>) {\n+    fx.add_global_comment(String::new());\n+    fx.add_global_comment(format!(\n+        \"kind  local ty                   size  align (abi,pref)\"\n+    ));\n+}\n+\n pub fn add_local_place_comments<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     place: CPlace<'tcx>,\n@@ -62,9 +67,9 @@ pub fn add_local_place_comments<'tcx>(\n         CPlaceInner::Var(var) => {\n             assert_eq!(local, var);\n             fx.add_global_comment(format!(\n-                \"ssa   {:?}: {:?} size={} align={}, {}\",\n-                local,\n-                ty,\n+                \"ssa   {:5} {:20} {:4}b {}, {}\",\n+                format!(\"{:?}\", local),\n+                format!(\"{:?}\", ty),\n                 size.bytes(),\n                 align.abi.bytes(),\n                 align.pref.bytes(),\n@@ -82,9 +87,9 @@ pub fn add_local_place_comments<'tcx>(\n             ),\n         ),\n         CPlaceInner::NoPlace => fx.add_global_comment(format!(\n-            \"zst   {:?}: {:?} size={} align={}, {}\",\n-            local,\n-            ty,\n+            \"zst   {:5} {:20} {:4}b {}, {}\",\n+            format!(\"{:?}\", local),\n+            format!(\"{:?}\", ty),\n             size.bytes(),\n             align.abi.bytes(),\n             align.pref.bytes(),"}, {"sha": "eaf25ef48ec0bbbc1696fe0c5f39f7f1eeb317c1", "filename": "src/abi/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/76d2e085db71370cb34fc12fc544f46e557e743d/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d2e085db71370cb34fc12fc544f46e557e743d/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=76d2e085db71370cb34fc12fc544f46e557e743d", "patch": "@@ -220,11 +220,10 @@ pub fn codegen_fn_prelude(\n     let ssa_analyzed = crate::analyze::analyze(fx);\n \n     #[cfg(debug_assertions)]\n-    self::comments::add_local_header_comment(fx);\n+    self::comments::add_args_header_comment(fx);\n \n     self::returning::codegen_return_param(fx, &ssa_analyzed, start_ebb);\n \n-\n     // None means pass_mode == NoPass\n     enum ArgKind<'tcx> {\n         Normal(Option<CValue<'tcx>>),\n@@ -257,22 +256,24 @@ pub fn codegen_fn_prelude(\n                         local,\n                         Some(i),\n                         arg_ty,\n-                        ssa_analyzed[&local],\n                     );\n                     params.push(param);\n                 }\n \n                 (local, ArgKind::Spread(params), arg_ty)\n             } else {\n                 let param =\n-                    cvalue_for_param(fx, start_ebb, local, None, arg_ty, ssa_analyzed[&local]);\n+                    cvalue_for_param(fx, start_ebb, local, None, arg_ty);\n                 (local, ArgKind::Normal(param), arg_ty)\n             }\n         })\n         .collect::<Vec<(Local, ArgKind, Ty)>>();\n \n     fx.bcx.switch_to_block(start_ebb);\n \n+    #[cfg(debug_assertions)]\n+    self::comments::add_locals_header_comment(fx);\n+\n     for (local, arg_kind, ty) in func_params {\n         let layout = fx.layout_of(ty);\n "}, {"sha": "411ca23a1f7896fb0fca566e4454457125e9e704", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76d2e085db71370cb34fc12fc544f46e557e743d/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d2e085db71370cb34fc12fc544f46e557e743d/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=76d2e085db71370cb34fc12fc544f46e557e743d", "patch": "@@ -132,7 +132,6 @@ pub fn cvalue_for_param<'tcx>(\n     local: mir::Local,\n     local_field: Option<usize>,\n     arg_ty: Ty<'tcx>,\n-    ssa_flags: crate::analyze::Flags,\n ) -> Option<CValue<'tcx>> {\n     let layout = fx.layout_of(arg_ty);\n     let pass_mode = get_pass_mode(fx.tcx, fx.layout_of(arg_ty));\n@@ -152,7 +151,6 @@ pub fn cvalue_for_param<'tcx>(\n         local_field,\n         ebb_params,\n         pass_mode,\n-        ssa_flags,\n         arg_ty,\n     );\n "}, {"sha": "3d34dbf06e269b35ad35628981627002e7a5b7f1", "filename": "src/abi/returning.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76d2e085db71370cb34fc12fc544f46e557e743d/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d2e085db71370cb34fc12fc544f46e557e743d/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=76d2e085db71370cb34fc12fc544f46e557e743d", "patch": "@@ -44,7 +44,6 @@ pub fn codegen_return_param(\n         None,\n         ret_param,\n         output_pass_mode,\n-        ssa_analyzed[&RETURN_PLACE],\n         ret_layout.ty,\n     );\n }"}]}