{"sha": "c83e31e7c962ff99baeeb7564bcb0a09e8668960", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4M2UzMWU3Yzk2MmZmOTliYWVlYjc1NjRiY2IwYTA5ZTg2Njg5NjA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-15T05:14:48Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-15T05:16:21Z"}, "message": "Include the `MacroDefinition` rib in the label ribs.", "tree": {"sha": "47e07b86d52761d41e274755537a61ee4d3dc075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47e07b86d52761d41e274755537a61ee4d3dc075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c83e31e7c962ff99baeeb7564bcb0a09e8668960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c83e31e7c962ff99baeeb7564bcb0a09e8668960", "html_url": "https://github.com/rust-lang/rust/commit/c83e31e7c962ff99baeeb7564bcb0a09e8668960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c83e31e7c962ff99baeeb7564bcb0a09e8668960/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56c4ddffae4fe55814cfa525631d09f910c7a2d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/56c4ddffae4fe55814cfa525631d09f910c7a2d2", "html_url": "https://github.com/rust-lang/rust/commit/56c4ddffae4fe55814cfa525631d09f910c7a2d2"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "2535c264ef8f647fc516231ae8a55a2ed93375f5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c83e31e7c962ff99baeeb7564bcb0a09e8668960/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83e31e7c962ff99baeeb7564bcb0a09e8668960/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c83e31e7c962ff99baeeb7564bcb0a09e8668960", "patch": "@@ -1576,12 +1576,21 @@ impl<'a> Resolver<'a> {\n \n     /// Searches the current set of local scopes for labels.\n     /// Stops after meeting a closure.\n-    fn search_label(&self, ident: ast::Ident) -> Option<Def> {\n+    fn search_label(&self, mut ident: ast::Ident) -> Option<Def> {\n         for rib in self.label_ribs.iter().rev() {\n             match rib.kind {\n                 NormalRibKind => {\n                     // Continue\n                 }\n+                MacroDefinition(mac) => {\n+                    // If an invocation of this macro created `ident`, give up on `ident`\n+                    // and switch to `ident`'s source from the macro definition.\n+                    if let Some((source_ident, source_macro)) = mtwt::source(ident) {\n+                        if mac == source_macro {\n+                            ident = source_ident;\n+                        }\n+                    }\n+                }\n                 _ => {\n                     // Do not resolve labels across function boundary\n                     return None;\n@@ -2088,7 +2097,7 @@ impl<'a> Resolver<'a> {\n         let orig_module = self.current_module;\n         let anonymous_module = self.module_map.get(&block.id).cloned(); // clones a reference\n \n-        let mut num_value_ribs = 1;\n+        let mut num_macro_definition_ribs = 0;\n         if let Some(anonymous_module) = anonymous_module {\n             debug!(\"(resolving block) found anonymous module, moving down\");\n             self.value_ribs.push(Rib::new(ModuleRibKind(anonymous_module)));\n@@ -2101,9 +2110,10 @@ impl<'a> Resolver<'a> {\n         // Descend into the block.\n         for stmt in &block.stmts {\n             if let Some(marks) = self.macros_at_scope.remove(&stmt.id) {\n-                num_value_ribs += marks.len() as u32;\n+                num_macro_definition_ribs += marks.len() as u32;\n                 for mark in marks {\n                     self.value_ribs.push(Rib::new(MacroDefinition(mark)));\n+                    self.label_ribs.push(Rib::new(MacroDefinition(mark)));\n                 }\n             }\n \n@@ -2112,9 +2122,11 @@ impl<'a> Resolver<'a> {\n \n         // Move back up.\n         self.current_module = orig_module;\n-        for _ in 0 .. num_value_ribs {\n+        for _ in 0 .. num_macro_definition_ribs {\n             self.value_ribs.pop();\n+            self.label_ribs.pop();\n         }\n+        self.value_ribs.pop();\n         if let Some(_) = anonymous_module {\n             self.type_ribs.pop();\n         }"}]}