{"sha": "e4a0b48027d3d800617f05b228f0f6dfa24f6627", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YTBiNDgwMjdkM2Q4MDA2MTdmMDViMjI4ZjBmNmRmYTI0ZjY2Mjc=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-16T21:57:37Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-16T23:50:40Z"}, "message": "Make note about traits that can be derived\n\nin their API docs\n\nFixes #29711", "tree": {"sha": "be146f9116f936548c6bd245556a871cc0db4453", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be146f9116f936548c6bd245556a871cc0db4453"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4a0b48027d3d800617f05b228f0f6dfa24f6627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a0b48027d3d800617f05b228f0f6dfa24f6627", "html_url": "https://github.com/rust-lang/rust/commit/e4a0b48027d3d800617f05b228f0f6dfa24f6627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4a0b48027d3d800617f05b228f0f6dfa24f6627/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c8a3e8b6a3200bb01d0ea60e4686a1ecfcb907", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c8a3e8b6a3200bb01d0ea60e4686a1ecfcb907", "html_url": "https://github.com/rust-lang/rust/commit/57c8a3e8b6a3200bb01d0ea60e4686a1ecfcb907"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "769faedf46e8ebf4b57b6677add6c55a8ba00abb", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4a0b48027d3d800617f05b228f0f6dfa24f6627/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a0b48027d3d800617f05b228f0f6dfa24f6627/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=e4a0b48027d3d800617f05b228f0f6dfa24f6627", "patch": "@@ -24,6 +24,8 @@\n use marker::Sized;\n \n /// A common trait for cloning an object.\n+///\n+/// This trait can be used with `#[derive]`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Clone : Sized {\n     /// Returns a copy of the value."}, {"sha": "3ac4ffb22364f3a777c5149d1729163ae7906c0c", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4a0b48027d3d800617f05b228f0f6dfa24f6627/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a0b48027d3d800617f05b228f0f6dfa24f6627/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=e4a0b48027d3d800617f05b228f0f6dfa24f6627", "patch": "@@ -43,6 +43,8 @@ use option::Option::{self, Some};\n /// in terms of it by default. Any manual implementation of `ne` *must* respect\n /// the rule that `eq` is a strict inverse of `ne`; that is, `!(a == b)` if and\n /// only if `a != b`.\n+///\n+/// This trait can be used with `#[derive]`.\n #[lang = \"eq\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n@@ -69,6 +71,8 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n ///\n /// This property cannot be checked by the compiler, and therefore `Eq` implies\n /// `PartialEq`, and has no extra methods.\n+///\n+/// This trait can be used with `#[derive]`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Eq: PartialEq<Self> {\n     // FIXME #13101: this method is used solely by #[deriving] to\n@@ -171,6 +175,8 @@ impl Ordering {\n /// - transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n ///\n /// When this trait is `derive`d, it produces a lexicographic ordering.\n+///\n+/// This trait can be used with `#[derive]`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Ord: Eq + PartialOrd<Self> {\n     /// This method returns an `Ordering` between `self` and `other`.\n@@ -227,6 +233,8 @@ impl PartialOrd for Ordering {\n /// However it remains possible to implement the others separately for types which do not have a\n /// total order. For example, for floating point numbers, `NaN < 0 == false` and `NaN >= 0 ==\n /// false` (cf. IEEE 754-2008 section 5.11).\n+///\n+/// This trait can be used with `#[derive]`.\n #[lang = \"ord\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {"}, {"sha": "dfcc5781f0873d8b47b420f1440838abb0e41860", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4a0b48027d3d800617f05b228f0f6dfa24f6627/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a0b48027d3d800617f05b228f0f6dfa24f6627/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e4a0b48027d3d800617f05b228f0f6dfa24f6627", "patch": "@@ -300,6 +300,8 @@ impl<'a> Display for Arguments<'a> {\n ///\n /// [module]: ../../std/fmt/index.html\n ///\n+/// This trait can be used with `#[derive]`.\n+///\n /// # Examples\n ///\n /// Deriving an implementation:"}, {"sha": "ea3a2f78d564ab3033848ae3681582fbfac1670c", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4a0b48027d3d800617f05b228f0f6dfa24f6627/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a0b48027d3d800617f05b228f0f6dfa24f6627/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=e4a0b48027d3d800617f05b228f0f6dfa24f6627", "patch": "@@ -93,6 +93,8 @@ mod sip;\n ///\n /// In other words, if two keys are equal, their hashes should also be equal.\n /// `HashMap` and `HashSet` both rely on this behavior.\n+///\n+/// This trait can be used with `#[derive]`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Hash {\n     /// Feeds this value into the state given, updating the hasher as necessary."}, {"sha": "84a6196cc87aeed306eac04d63022f8fe3372960", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4a0b48027d3d800617f05b228f0f6dfa24f6627/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a0b48027d3d800617f05b228f0f6dfa24f6627/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=e4a0b48027d3d800617f05b228f0f6dfa24f6627", "patch": "@@ -165,6 +165,10 @@ pub trait Unsize<T: ?Sized> {\n /// to consider though: if you think your type may _not_ be able to implement `Copy` in the future,\n /// then it might be prudent to not implement `Copy`. This is because removing `Copy` is a breaking\n /// change: that second example would fail to compile if we made `Foo` non-`Copy`.\n+///\n+/// # Derivable\n+///\n+/// This trait can be used with `#[derive]`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"copy\"]\n pub trait Copy : Clone {"}]}