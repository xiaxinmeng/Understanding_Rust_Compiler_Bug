{"sha": "2293a04b4936a11fc3e09f3df8a8ab591e034f29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyOTNhMDRiNDkzNmExMWZjM2UwOWYzZGY4YThhYjU5MWUwMzRmMjk=", "commit": {"author": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2014-11-17T21:37:59Z"}, "committer": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2014-11-18T03:26:21Z"}, "message": "libsyntax: Add tests for `parse_view_item`", "tree": {"sha": "bb7b2439ddcc50918c09624e73d1b178601c0a4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb7b2439ddcc50918c09624e73d1b178601c0a4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2293a04b4936a11fc3e09f3df8a8ab591e034f29", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2293a04b4936a11fc3e09f3df8a8ab591e034f29", "html_url": "https://github.com/rust-lang/rust/commit/2293a04b4936a11fc3e09f3df8a8ab591e034f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2293a04b4936a11fc3e09f3df8a8ab591e034f29/comments", "author": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ef200774fbb8e5f4961f63a83cf5bbe27cd5f8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ef200774fbb8e5f4961f63a83cf5bbe27cd5f8f", "html_url": "https://github.com/rust-lang/rust/commit/7ef200774fbb8e5f4961f63a83cf5bbe27cd5f8f"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "3ce49b9d7a3ec00e234e492d53e3df4f103ca1b2", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2293a04b4936a11fc3e09f3df8a8ab591e034f29/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2293a04b4936a11fc3e09f3df8a8ab591e034f29/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=2293a04b4936a11fc3e09f3df8a8ab591e034f29", "patch": "@@ -730,10 +730,11 @@ mod test {\n     use attr::AttrMetaMethods;\n     use parse::parser::Parser;\n     use parse::token::{str_to_ident};\n+    use print::pprust::view_item_to_string;\n     use ptr::P;\n     use util::parser_testing::{string_to_tts, string_to_parser};\n     use util::parser_testing::{string_to_expr, string_to_item};\n-    use util::parser_testing::string_to_stmt;\n+    use util::parser_testing::{string_to_stmt, string_to_view_item};\n \n     // produce a codemap::span\n     fn sp(a: u32, b: u32) -> Span {\n@@ -1083,6 +1084,30 @@ mod test {\n                             span: sp(0,21)})));\n     }\n \n+    #[test] fn parse_use() {\n+        let use_s = \"use foo::bar::baz;\";\n+        let vitem = string_to_view_item(use_s.to_string());\n+        let vitem_s = view_item_to_string(&vitem);\n+        assert_eq!(vitem_s.as_slice(), use_s);\n+\n+        let use_s = \"use foo::bar as baz;\";\n+        let vitem = string_to_view_item(use_s.to_string());\n+        let vitem_s = view_item_to_string(&vitem);\n+        assert_eq!(vitem_s.as_slice(), use_s);\n+    }\n+\n+    #[test] fn parse_extern_crate() {\n+        let ex_s = \"extern crate foo;\";\n+        let vitem = string_to_view_item(ex_s.to_string());\n+        let vitem_s = view_item_to_string(&vitem);\n+        assert_eq!(vitem_s.as_slice(), ex_s);\n+\n+        let ex_s = \"extern crate \\\"foo\\\" as bar;\";\n+        let vitem = string_to_view_item(ex_s.to_string());\n+        let vitem_s = view_item_to_string(&vitem);\n+        assert_eq!(vitem_s.as_slice(), ex_s);\n+    }\n+\n     fn get_spans_of_pat_idents(src: &str) -> Vec<Span> {\n         let item = string_to_item(src.to_string()).unwrap();\n "}, {"sha": "c1ea8f60b82010419243bca299fc45605ab6dd62", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2293a04b4936a11fc3e09f3df8a8ab591e034f29/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2293a04b4936a11fc3e09f3df8a8ab591e034f29/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=2293a04b4936a11fc3e09f3df8a8ab591e034f29", "patch": "@@ -67,6 +67,13 @@ pub fn string_to_stmt(source_str : String) -> P<ast::Stmt> {\n     })\n }\n \n+/// Parse a string, return a view item\n+pub fn string_to_view_item (source_str : String) -> ast::ViewItem {\n+    with_error_checking_parse(source_str, |p| {\n+        p.parse_view_item(Vec::new())\n+    })\n+}\n+\n /// Parse a string, return a pat. Uses \"irrefutable\"... which doesn't\n /// (currently) affect parsing.\n pub fn string_to_pat(source_str: String) -> P<ast::Pat> {"}]}