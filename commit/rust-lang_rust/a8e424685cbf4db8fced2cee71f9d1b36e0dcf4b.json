{"sha": "a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZTQyNDY4NWNiZjRkYjhmY2VkMmNlZTcxZjlkMWIzNmUwZGNmNGI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-12-18T08:13:46Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-12-18T14:32:14Z"}, "message": "Rollup merge of #30452 - dotdash:24876_take_2, r=alexcrichton\n\nLLVM doesn't really support reusing the same module to emit more than\none file. One bug this causes is that the IR is invalidated by the stack\ncoloring pass when emitting the first file, and then the IR verifier\ncomplains by the time we try to emit the second file. Also, we get\ndifferent binaries with --emit=asm,link than with just --emit=link. In\nsome cases leading to segfaults.\n\nUnfortunately, it seems that at this point in time, the most sensible\noption to circumvent this problem is to just clone the whole llvm module\nfor the asm output if we need both, asm and obj file output.\n\nFixes #24876\nFixes #26235", "tree": {"sha": "e4e5f3fcf28e4a7ca861ad3576747fb85795f9b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e5f3fcf28e4a7ca861ad3576747fb85795f9b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b", "html_url": "https://github.com/rust-lang/rust/commit/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f8b32c96fd346716d55ceedaac490ff0d7fd463", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8b32c96fd346716d55ceedaac490ff0d7fd463", "html_url": "https://github.com/rust-lang/rust/commit/4f8b32c96fd346716d55ceedaac490ff0d7fd463"}, {"sha": "88ffb26cf50cff64c7ec0f4fc269a377a5b2918a", "url": "https://api.github.com/repos/rust-lang/rust/commits/88ffb26cf50cff64c7ec0f4fc269a377a5b2918a", "html_url": "https://github.com/rust-lang/rust/commit/88ffb26cf50cff64c7ec0f4fc269a377a5b2918a"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "8dcaa4b5064c18095c2ceeb61c48edb37f11b0c3", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b", "patch": "@@ -616,6 +616,7 @@ extern {\n                                              C: ContextRef)\n                                              -> ModuleRef;\n     pub fn LLVMGetModuleContext(M: ModuleRef) -> ContextRef;\n+    pub fn LLVMCloneModule(M: ModuleRef) -> ModuleRef;\n     pub fn LLVMDisposeModule(M: ModuleRef);\n \n     /// Data layout. See Module::getDataLayout."}, {"sha": "67eff1ca19fbc1957764576c1e213aa9245142fa", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b", "patch": "@@ -544,10 +544,22 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n \n         if config.emit_asm {\n             let path = output_names.with_extension(&format!(\"{}.s\", name_extra));\n+\n+            // We can't use the same module for asm and binary output, because that triggers\n+            // various errors like invalid IR or broken binaries, so we might have to clone the\n+            // module to produce the asm output\n+            let llmod = if config.emit_obj {\n+                llvm::LLVMCloneModule(llmod)\n+            } else {\n+                llmod\n+            };\n             with_codegen(tm, llmod, config.no_builtins, |cpm| {\n                 write_output_file(cgcx.handler, tm, cpm, llmod, &path,\n                                   llvm::AssemblyFileType);\n             });\n+            if config.emit_obj {\n+                llvm::LLVMDisposeModule(llmod);\n+            }\n         }\n \n         if config.emit_obj {"}, {"sha": "be34028fe1d013540acee5efe3d0e9c40e87371e", "filename": "src/test/run-make/emit/Makefile", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b/src%2Ftest%2Frun-make%2Femit%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b/src%2Ftest%2Frun-make%2Femit%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit%2FMakefile?ref=a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b", "patch": "@@ -0,0 +1,15 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) -Copt-level=0 --emit=llvm-bc,llvm-ir,asm,obj,link test-24876.rs\n+\t$(RUSTC) -Copt-level=1 --emit=llvm-bc,llvm-ir,asm,obj,link test-24876.rs\n+\t$(RUSTC) -Copt-level=2 --emit=llvm-bc,llvm-ir,asm,obj,link test-24876.rs\n+\t$(RUSTC) -Copt-level=3 --emit=llvm-bc,llvm-ir,asm,obj,link test-24876.rs\n+\t$(RUSTC) -Copt-level=0 --emit=llvm-bc,llvm-ir,asm,obj,link test-26235.rs\n+\t$(call RUN,test-26235) || exit 1\n+\t$(RUSTC) -Copt-level=1 --emit=llvm-bc,llvm-ir,asm,obj,link test-26235.rs\n+\t$(call RUN,test-26235) || exit 1\n+\t$(RUSTC) -Copt-level=2 --emit=llvm-bc,llvm-ir,asm,obj,link test-26235.rs\n+\t$(call RUN,test-26235) || exit 1\n+\t$(RUSTC) -Copt-level=3 --emit=llvm-bc,llvm-ir,asm,obj,link test-26235.rs\n+\t$(call RUN,test-26235) || exit 1"}, {"sha": "ab69decbf007e7f36d58887a49a022f94b2e3f2c", "filename": "src/test/run-make/emit/test-24876.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b/src%2Ftest%2Frun-make%2Femit%2Ftest-24876.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b/src%2Ftest%2Frun-make%2Femit%2Ftest-24876.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit%2Ftest-24876.rs?ref=a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks for issue #24876\n+\n+fn main() {\n+    let mut v = 0;\n+    for i in 0..0 {\n+        v += i;\n+    }\n+    println!(\"{}\", v)\n+}"}, {"sha": "97b58a3671bf3531224cdcec425adcc6eb92f4f5", "filename": "src/test/run-make/emit/test-26235.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b/src%2Ftest%2Frun-make%2Femit%2Ftest-26235.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b/src%2Ftest%2Frun-make%2Femit%2Ftest-26235.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit%2Ftest-26235.rs?ref=a8e424685cbf4db8fced2cee71f9d1b36e0dcf4b", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks for issue #26235\n+\n+fn main() {\n+    use std::thread;\n+\n+    type Key = u32;\n+    const NUM_THREADS: usize = 2;\n+\n+    #[derive(Clone,Copy)]\n+    struct Stats<S> {\n+        upsert: S,\n+        delete: S,\n+        insert: S,\n+        update: S\n+    };\n+\n+    impl<S> Stats<S> where S: Copy {\n+        fn dot<B, F, T>(self, s: Stats<T>, f: F) -> Stats<B> where F: Fn(S, T) -> B {\n+            let Stats { upsert: u1, delete: d1, insert: i1, update: p1 } = self;\n+            let Stats { upsert: u2, delete: d2, insert: i2, update: p2 } = s;\n+            Stats { upsert: f(u1, u2), delete: f(d1, d2), insert: f(i1, i2), update: f(p1, p2) }\n+        }\n+\n+        fn new(init: S) -> Self {\n+            Stats { upsert: init, delete: init, insert: init, update: init }\n+        }\n+    }\n+\n+    fn make_threads() -> Vec<thread::JoinHandle<()>> {\n+        let mut t = Vec::with_capacity(NUM_THREADS);\n+        for _ in 0..NUM_THREADS {\n+            t.push(thread::spawn(move || {}));\n+        }\n+        t\n+    }\n+\n+    let stats = [Stats::new(0); NUM_THREADS];\n+    make_threads();\n+\n+    {\n+        let Stats { ref upsert, ref delete, ref insert, ref update } = stats.iter().fold(\n+            Stats::new(0), |res, &s| res.dot(s, |x: Key, y: Key| x.wrapping_add(y)));\n+        println!(\"upserts: {}, deletes: {}, inserts: {}, updates: {}\",\n+                 upsert, delete, insert, update);\n+    }\n+}"}]}