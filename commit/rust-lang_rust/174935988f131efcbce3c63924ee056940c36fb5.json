{"sha": "174935988f131efcbce3c63924ee056940c36fb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NDkzNTk4OGYxMzFlZmNiY2UzYzYzOTI0ZWUwNTY5NDBjMzZmYjU=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-07T23:05:26Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-07T23:05:26Z"}, "message": "Make assume_init_{ref,mut} const", "tree": {"sha": "4351eb7119ccb93d15767bfde50427b8363e3c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4351eb7119ccb93d15767bfde50427b8363e3c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/174935988f131efcbce3c63924ee056940c36fb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/174935988f131efcbce3c63924ee056940c36fb5", "html_url": "https://github.com/rust-lang/rust/commit/174935988f131efcbce3c63924ee056940c36fb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/174935988f131efcbce3c63924ee056940c36fb5/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69ab0bcabff34b97cd8fe9f0c741748a9ffc8928", "url": "https://api.github.com/repos/rust-lang/rust/commits/69ab0bcabff34b97cd8fe9f0c741748a9ffc8928", "html_url": "https://github.com/rust-lang/rust/commit/69ab0bcabff34b97cd8fe9f0c741748a9ffc8928"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "06195ac6285639759c15b1e738907c29da734462", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/174935988f131efcbce3c63924ee056940c36fb5/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174935988f131efcbce3c63924ee056940c36fb5/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=174935988f131efcbce3c63924ee056940c36fb5", "patch": "@@ -103,6 +103,7 @@\n #![feature(const_likely)]\n #![feature(const_unreachable_unchecked)]\n #![feature(const_maybe_uninit_assume_init)]\n+#![feature(const_maybe_uninit_as_ptr)]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "57ebab331886291af1e5745eb427353d4d2634b5", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/174935988f131efcbce3c63924ee056940c36fb5/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174935988f131efcbce3c63924ee056940c36fb5/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=174935988f131efcbce3c63924ee056940c36fb5", "patch": "@@ -668,13 +668,14 @@ impl<T> MaybeUninit<T> {\n     /// }\n     /// ```\n     #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n-    pub unsafe fn assume_init_ref(&self) -> &T {\n+    pub const unsafe fn assume_init_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n         // This also means that `self` must be a `value` variant.\n         unsafe {\n             intrinsics::assert_inhabited::<T>();\n-            &*self.value\n+            &*self.as_ptr()\n         }\n     }\n \n@@ -790,13 +791,14 @@ impl<T> MaybeUninit<T> {\n     // to uninitialized data (e.g., in `libcore/fmt/float.rs`).  We should make\n     // a final decision about the rules before stabilization.\n     #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n-    pub unsafe fn assume_init_mut(&mut self) -> &mut T {\n+    pub const unsafe fn assume_init_mut(&mut self) -> &mut T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n         // This also means that `self` must be a `value` variant.\n         unsafe {\n             intrinsics::assert_inhabited::<T>();\n-            &mut *self.value\n+            &mut *self.as_mut_ptr()\n         }\n     }\n "}]}