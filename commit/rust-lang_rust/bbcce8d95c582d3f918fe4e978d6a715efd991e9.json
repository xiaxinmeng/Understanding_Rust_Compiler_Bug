{"sha": "bbcce8d95c582d3f918fe4e978d6a715efd991e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiY2NlOGQ5NWM1ODJkM2Y5MThmZTRlOTc4ZDZhNzE1ZWZkOTkxZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-02T05:10:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-02T05:10:45Z"}, "message": "auto merge of #8216 : thestinger/rust/range, r=huonw", "tree": {"sha": "6c0a714130897160fc6ef8a3d17671aed2bc8b90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c0a714130897160fc6ef8a3d17671aed2bc8b90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbcce8d95c582d3f918fe4e978d6a715efd991e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcce8d95c582d3f918fe4e978d6a715efd991e9", "html_url": "https://github.com/rust-lang/rust/commit/bbcce8d95c582d3f918fe4e978d6a715efd991e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbcce8d95c582d3f918fe4e978d6a715efd991e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecefeb03ccecdcb306e5cc3c76b04670073a82fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecefeb03ccecdcb306e5cc3c76b04670073a82fa", "html_url": "https://github.com/rust-lang/rust/commit/ecefeb03ccecdcb306e5cc3c76b04670073a82fa"}, {"sha": "234acad404535868ecd7f5b48c3e120c4ea559c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/234acad404535868ecd7f5b48c3e120c4ea559c9", "html_url": "https://github.com/rust-lang/rust/commit/234acad404535868ecd7f5b48c3e120c4ea559c9"}], "stats": {"total": 778, "additions": 336, "deletions": 442}, "files": [{"sha": "ea4d7ec3fe9ebb24b5b223778b9303348454f387", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -2386,9 +2386,8 @@ foreach e in v.iter() {\n An example of a for loop over a series of integers:\n \n ~~~~\n-# use std::uint;\n # fn bar(b:uint) { }\n-for uint::range(0, 256) |i| {\n+foreach i in range(0u, 256) {\n     bar(i);\n }\n ~~~~"}, {"sha": "4528f3f9e15b2972e0881ed1ca1defb4c4cd1c2c", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -120,9 +120,8 @@ should interleave the output in vaguely random order.\n ~~~\n # use std::io::print;\n # use std::task::spawn;\n-# use std::int;\n \n-for int::range(0, 20) |child_task_number| {\n+foreach child_task_number in range(0, 20) {\n     do spawn {\n        print(fmt!(\"I am child number %d\\n\", child_task_number));\n     }\n@@ -237,12 +236,11 @@ Instead we can use a `SharedChan`, a type that allows a single\n ~~~\n # use std::task::spawn;\n # use std::comm::{stream, SharedChan};\n-# use std::uint;\n \n let (port, chan) = stream();\n let chan = SharedChan::new(chan);\n \n-for uint::range(0, 3) |init_val| {\n+foreach init_val in range(0u, 3) {\n     // Create a new channel handle to distribute to the child task\n     let child_chan = chan.clone();\n     do spawn {\n@@ -314,10 +312,9 @@ Here is another example showing how futures allow you to background computations\n be distributed on the available cores.\n ~~~\n # use std::vec;\n-# use std::uint;\n fn partial_sum(start: uint) -> f64 {\n     let mut local_sum = 0f64;\n-    for uint::range(start*100000, (start+1)*100000) |num| {\n+    foreach num in range(start*100000, (start+1)*100000) {\n         local_sum += (num as f64 + 1.0).pow(&-2.0);\n     }\n     local_sum\n@@ -349,7 +346,6 @@ Here is a small example showing how to use Arcs. We wish to run concurrently sev\n a single large vector of floats. Each task needs the full vector to perform its duty.\n ~~~\n # use std::vec;\n-# use std::uint;\n # use std::rand;\n use extra::arc::Arc;\n \n@@ -363,7 +359,7 @@ fn main() {\n \n     let numbers_arc = Arc::new(numbers);\n \n-    for uint::range(1,10) |num| {\n+    foreach num in range(1u, 10) {\n         let (port, chan)  = stream();\n         chan.send(numbers_arc.clone());\n "}, {"sha": "970178f05fe0823384679c4a6940b1e166e1ae4f", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -23,7 +23,6 @@ use util::logv;\n use std::io;\n use std::os;\n use std::str;\n-use std::uint;\n use std::vec;\n \n use extra::test::MetricMap;\n@@ -414,7 +413,7 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n         }\n     }\n \n-    for uint::range(0u, found_flags.len()) |i| {\n+    foreach i in range(0u, found_flags.len()) {\n         if !found_flags[i] {\n             let ee = &expected_errors[i];\n             fatal_ProcRes(fmt!(\"expected %s on line %u not found: %s\","}, {"sha": "3aa77577fb2e43eba5ebce98e8a700f0f55067d6", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -566,7 +566,6 @@ mod tests {\n     use std::cell::Cell;\n     use std::comm;\n     use std::task;\n-    use std::uint;\n \n     #[test]\n     fn manually_share_arc() {\n@@ -851,7 +850,7 @@ mod tests {\n                 *state = 31337;\n                 // FIXME: #7372: hits type inference bug with iterators\n                 // send to other readers\n-                for uint::range(0, reader_convos.len()) |i| {\n+                foreach i in range(0u, reader_convos.len()) {\n                     match reader_convos[i] {\n                         (ref rc, _) => rc.send(()),\n                     }\n@@ -861,7 +860,7 @@ mod tests {\n             do (&read_mode).read |state| {\n                 // FIXME: #7372: hits type inference bug with iterators\n                 // complete handshake with other readers\n-                for uint::range(0, reader_convos.len()) |i| {\n+                foreach i in range(0u, reader_convos.len()) {\n                     match reader_convos[i] {\n                         (_, ref rp) => rp.recv(),\n                     }"}, {"sha": "0f54a9effa22267a0b1195e228230aa81e35b869", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -277,7 +277,7 @@ impl Arena {\n #[test]\n fn test_arena_destructors() {\n     let arena = Arena();\n-    for uint::range(0, 10) |i| {\n+    foreach i in range(0u, 10) {\n         // Arena allocate something with drop glue to make sure it\n         // doesn't leak.\n         do arena.alloc { @i };\n@@ -293,7 +293,7 @@ fn test_arena_destructors() {\n fn test_arena_destructors_fail() {\n     let arena = Arena();\n     // Put some stuff in the arena.\n-    for uint::range(0, 10) |i| {\n+    foreach i in range(0u, 10) {\n         // Arena allocate something with drop glue to make sure it\n         // doesn't leak.\n         do arena.alloc { @i };"}, {"sha": "834faf96eb6871b40bfd5aa9f229f12c87485d15", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -19,7 +19,6 @@ use std::ops;\n use std::uint;\n use std::vec;\n \n-\n #[deriving(Clone)]\n struct SmallBitv {\n     /// only the lowest nbits of this value are used. the rest is undefined.\n@@ -146,7 +145,7 @@ impl BigBitv {\n         let len = b.storage.len();\n         assert_eq!(self.storage.len(), len);\n         let mut changed = false;\n-        for uint::range(0, len) |i| {\n+        foreach i in range(0, len) {\n             let mask = big_mask(nbits, i);\n             let w0 = self.storage[i] & mask;\n             let w1 = b.storage[i] & mask;\n@@ -161,7 +160,7 @@ impl BigBitv {\n \n     #[inline]\n     pub fn each_storage(&mut self, op: &fn(v: &mut uint) -> bool) -> bool {\n-        uint::range(0, self.storage.len(), |i| op(&mut self.storage[i]))\n+        range(0u, self.storage.len()).advance(|i| op(&mut self.storage[i]))\n     }\n \n     #[inline]\n@@ -511,7 +510,7 @@ impl Bitv {\n     }\n \n     pub fn ones(&self, f: &fn(uint) -> bool) -> bool {\n-        uint::range(0, self.nbits, |i| !self.get(i) || f(i))\n+        range(0u, self.nbits).advance(|i| !self.get(i) || f(i))\n     }\n \n }\n@@ -542,7 +541,7 @@ pub fn from_bools(bools: &[bool]) -> Bitv {\n  */\n pub fn from_fn(len: uint, f: &fn(index: uint) -> bool) -> Bitv {\n     let mut bitv = Bitv::new(len, false);\n-    for uint::range(0, len) |i| {\n+    foreach i in range(0u, len) {\n         bitv.set(i, f(i));\n     }\n     bitv\n@@ -559,7 +558,7 @@ fn iterate_bits(base: uint, bits: uint, f: &fn(uint) -> bool) -> bool {\n     if bits == 0 {\n         return true;\n     }\n-    for uint::range(0, uint::bits) |i| {\n+    foreach i in range(0u, uint::bits) {\n         if bits & (1 << i) != 0 {\n             if !f(base + i) {\n                 return false;\n@@ -674,7 +673,7 @@ impl BitvSet {\n     fn other_op(&mut self, other: &BitvSet, f: &fn(uint, uint) -> uint) {\n         fn nbits(mut w: uint) -> uint {\n             let mut bits = 0;\n-            for uint::range(0, uint::bits) |_| {\n+            foreach _ in range(0u, uint::bits) {\n                 if w == 0 {\n                     break;\n                 }\n@@ -1283,12 +1282,12 @@ mod tests {\n     #[test]\n     fn test_equal_sneaky_big() {\n         let mut a = bitv::Bitv::new(100, false);\n-        for uint::range(0, 100) |i| {\n+        foreach i in range(0u, 100) {\n             a.set(i, true);\n         }\n \n         let mut b = bitv::Bitv::new(100, true);\n-        for uint::range(0, 100) |i| {\n+        foreach i in range(0u, 100) {\n             b.set(i, true);\n         }\n "}, {"sha": "5b2de22ff0702d5a0fe089713b9b29e38504e9c2", "filename": "src/libextra/container.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcontainer.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -41,9 +41,8 @@ pub trait Deque<T> : Mutable {\n \n #[cfg(test)]\n mod bench {\n-\n     use std::container::MutableMap;\n-    use std::{vec,rand,uint};\n+    use std::{vec, rand};\n     use std::rand::RngUtil;\n     use test::BenchHarness;\n \n@@ -54,7 +53,7 @@ mod bench {\n         let mut rng = rand::XorShiftRng::new();\n \n         map.clear();\n-        for uint::range(0,n) |_i| {\n+        foreach _ in range(0, n) {\n             map.insert(rng.gen::<uint>() % n, 1);\n         }\n \n@@ -71,7 +70,7 @@ mod bench {\n                                                  bh: &mut BenchHarness) {\n         // setup\n         map.clear();\n-        for uint::range(0, n) |i| {\n+        foreach i in range(0u, n) {\n             map.insert(i*2, 1);\n         }\n \n@@ -109,7 +108,7 @@ mod bench {\n                                                map: &mut M,\n                                                bh: &mut BenchHarness) {\n         // setup\n-        for uint::range(0, n) |i| {\n+        foreach i in range(0u, n) {\n             map.insert(i, 1);\n         }\n \n@@ -120,4 +119,4 @@ mod bench {\n             i = (i + 1) % n;\n         }\n      }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d713e19297295010947ca18e5527ea220d32185c", "filename": "src/libextra/crypto/sha2.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fcrypto%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fcrypto%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha2.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use std::uint;\n-\n use digest::Digest;\n \n // BitCounter is a specialized structure intended simply for counting the\n@@ -169,7 +166,7 @@ impl Engine512 {\n             ((x << 45) | (x >> 19)) ^ ((x << 3) | (x >> 61)) ^ (x >> 6)\n         }\n \n-        for uint::range(16, 80) |t| {\n+        foreach t in range(16u, 80) {\n             self.W[t] = sigma1(self.W[t - 2]) + self.W[t - 7] + sigma0(self.W[t - 15]) +\n                 self.W[t - 16];\n         }\n@@ -184,7 +181,7 @@ impl Engine512 {\n         let mut h = self.H7;\n \n         let mut t = 0;\n-        for uint::range(0, 10) |_| {\n+        foreach _ in range(0u, 10) {\n             h += sum1(e) + ch(e, f, g) + K64[t] + self.W[t];\n             d += h;\n             h += sum0(a) + maj(a, b, c);\n@@ -254,7 +251,7 @@ impl Engine512 {\n \n         // add length\n         if (self.W_idx > 14) {\n-            for uint::range(self.W_idx, 16) |_| {\n+            foreach _ in range(self.W_idx, 16) {\n                 self.process_word(0);\n             }\n         }\n@@ -452,7 +449,7 @@ impl Engine256 {\n             ((x >> 17) | (x << 15)) ^ ((x >> 19) | (x << 13)) ^ (x >> 10)\n         }\n \n-        for uint::range(16, 64) |t| {\n+        foreach t in range(16u, 64) {\n             self.W[t] = sigma1(self.W[t - 2]) + self.W[t - 7] + sigma0(self.W[t - 15]) +\n                 self.W[t - 16];\n         }\n@@ -467,7 +464,7 @@ impl Engine256 {\n         let mut h = self.H7;\n \n         let mut t = 0;\n-        for uint::range(0, 8) |_| {\n+        foreach _ in range(0u, 8) {\n             h += sum1(e) + ch(e, f, g) + K32[t] + self.W[t];\n             d += h;\n             h += sum0(a) + maj(a, b, c);\n@@ -536,7 +533,7 @@ impl Engine256 {\n \n         // add length\n         if (self.W_idx > 14) {\n-            for uint::range(self.W_idx, 16) |_| {\n+            foreach _ in range(self.W_idx, 16) {\n                 self.process_word(0);\n             }\n         }"}, {"sha": "392eaf28157807f62a3a68b6badade1053de7e0e", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -607,7 +607,6 @@ pub fn check_links<T>(list: &DList<T>) {\n mod tests {\n     use super::*;\n     use std::rand;\n-    use std::int;\n     use extra::test;\n \n     #[test]\n@@ -944,7 +943,7 @@ mod tests {\n     fn fuzz_test(sz: int) {\n         let mut m = DList::new::<int>();\n         let mut v = ~[];\n-        for int::range(0i, sz) |i| {\n+        foreach i in range(0, sz) {\n             check_links(&m);\n             let r: u8 = rand::random();\n             match r % 6 {"}, {"sha": "0de8c239d56e4b78e548fa3f8434266b8d1a84e7", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -596,7 +596,7 @@ mod test {\n         input.next_file(); // skip the rest of 1\n \n         // read all lines from 1 (but don't read any from 2),\n-        for uint::range(1, 4) |i| {\n+        foreach i in range(1u, 4) {\n             assert_eq!(input.read_line(), fmt!(\"1 %u\", i));\n         }\n         // 1 is finished, but 2 hasn't been started yet, so this will"}, {"sha": "9e7294df4b7eb1824a0012ede0f2ed45e083d0f2", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -29,12 +29,12 @@ This example sends boxed integers across tasks using serialization.\n let (port, chan) = serial::pipe_stream();\n \n do task::spawn || {\n-    for int::range(0, 10) |i| {\n+    foreach i in range(0, 10) {\n         chan.send(@i)\n     }\n }\n \n-for int::range(0, 10) |i| {\n+foreach i in range(0, 10) {\n     assert @i == port.recv()\n }\n ~~~\n@@ -641,7 +641,6 @@ mod test {\n     use flatpipes::{BytePort, FlatChan, FlatPort};\n \n     use std::comm;\n-    use std::int;\n     use std::io::BytesWriter;\n     use std::result;\n     use std::task;\n@@ -669,12 +668,12 @@ mod test {\n         let (port, chan) = serial::pipe_stream();\n \n         do task::spawn || {\n-            for int::range(0, 10) |i| {\n+            foreach i in range(0, 10) {\n                 chan.send(i)\n             }\n         }\n \n-        for int::range(0, 10) |i| {\n+        foreach i in range(0, 10) {\n             assert!(i == port.recv())\n         }\n     }\n@@ -685,12 +684,12 @@ mod test {\n         let (port, chan) = serial::pipe_stream();\n \n         do task::spawn || {\n-            for int::range(0, 10) |i| {\n+            foreach i in range(0, 10) {\n                 chan.send(@i)\n             }\n         }\n \n-        for int::range(0, 10) |i| {\n+        foreach i in range(0, 10) {\n             assert!(@i == port.recv())\n         }\n     }\n@@ -716,12 +715,12 @@ mod test {\n         let (port, chan) = pod::pipe_stream();\n \n         do task::spawn || {\n-            for int::range(0, 10) |i| {\n+            foreach i in range(0, 10) {\n                 chan.send(i)\n             }\n         }\n \n-        for int::range(0, 10) |i| {\n+        foreach i in range(0, 10) {\n             assert!(i == port.recv())\n         }\n     }\n@@ -827,7 +826,7 @@ mod test {\n             // TcpSocketBuf is a Writer!\n             let chan = writer_chan(socket_buf);\n \n-            for int::range(0, 10) |i| {\n+            foreach i in range(0, 10) {\n                 debug!(\"sending %?\", i);\n                 chan.send(i)\n             }\n@@ -850,7 +849,7 @@ mod test {\n             // TcpSocketBuf is a Reader!\n             let port = reader_port(socket_buf);\n \n-            for int::range(0, 10) |i| {\n+            foreach i in range(0, 10) {\n                 let j = port.recv();\n                 debug!(\"received %?\", j);\n                 assert_eq!(i, j);"}, {"sha": "6f575926cc69d0e39f2cdaa3048254c8a237b4f5", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -1608,7 +1608,7 @@ mod biguint_tests {\n     fn test_factor() {\n         fn factor(n: uint) -> BigUint {\n             let mut f= One::one::<BigUint>();\n-            for uint::range(2, n + 1) |i| {\n+            foreach i in range(2, n + 1) {\n                 // FIXME(#6102): Assignment operator for BigInt causes ICE\n                 // f *= BigUint::from_uint(i);\n                 f = f * BigUint::from_uint(i);"}, {"sha": "f3f34a3becc0e8abbaa7c68145c6cd053b1493d6", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -14,7 +14,6 @@\n //! extra::container::Deque`.\n \n use std::num;\n-use std::uint;\n use std::vec;\n use std::iterator::{FromIterator, Invert, RandomAccessIterator, Extendable};\n \n@@ -278,7 +277,7 @@ fn grow<T>(nelts: uint, loptr: &mut uint, elts: &mut ~[Option<T>]) {\n     elts.reserve(newlen);\n \n     /* fill with None */\n-    for uint::range(elts.len(), elts.capacity()) |_| {\n+    foreach _ in range(elts.len(), elts.capacity()) {\n         elts.push(None);\n     }\n \n@@ -293,11 +292,11 @@ fn grow<T>(nelts: uint, loptr: &mut uint, elts: &mut ~[Option<T>]) {\n \n     assert!(newlen - nelts/2 >= nelts);\n     if lo <= (nelts - lo) { // A\n-        for uint::range(0, lo) |i| {\n+        foreach i in range(0u, lo) {\n             elts.swap(i, nelts + i);\n         }\n     } else {                // B\n-        for uint::range(lo, nelts) |i| {\n+        foreach i in range(lo, nelts) {\n             elts.swap(i, newlen - nelts + i);\n         }\n         *loptr += newlen - nelts;\n@@ -345,7 +344,6 @@ mod tests {\n     use super::*;\n     use std::clone::Clone;\n     use std::cmp::Eq;\n-    use std::{int, uint};\n     use extra::test;\n \n     #[test]\n@@ -463,21 +461,21 @@ mod tests {\n     #[test]\n     fn test_push_front_grow() {\n         let mut deq = RingBuf::new();\n-        for uint::range(0, 66) |i| {\n+        foreach i in range(0u, 66) {\n             deq.push_front(i);\n         }\n         assert_eq!(deq.len(), 66);\n \n-        for uint::range(0, 66) |i| {\n+        foreach i in range(0u, 66) {\n             assert_eq!(*deq.get(i), 65 - i);\n         }\n \n         let mut deq = RingBuf::new();\n-        for uint::range(0, 66) |i| {\n+        foreach i in range(0u, 66) {\n             deq.push_back(i);\n         }\n \n-        for uint::range(0, 66) |i| {\n+        foreach i in range(0u, 66) {\n             assert_eq!(*deq.get(i), i);\n         }\n     }\n@@ -608,12 +606,12 @@ mod tests {\n         assert_eq!(d.iter().next(), None);\n         assert_eq!(d.iter().size_hint(), (0, Some(0)));\n \n-        for int::range(0,5) |i| {\n+        foreach i in range(0, 5) {\n             d.push_back(i);\n         }\n         assert_eq!(d.iter().collect::<~[&int]>(), ~[&0,&1,&2,&3,&4]);\n \n-        for int::range(6,9) |i| {\n+        foreach i in range(6, 9) {\n             d.push_front(i);\n         }\n         assert_eq!(d.iter().collect::<~[&int]>(), ~[&8,&7,&6,&0,&1,&2,&3,&4]);\n@@ -633,12 +631,12 @@ mod tests {\n         let mut d = RingBuf::new();\n         assert_eq!(d.rev_iter().next(), None);\n \n-        for int::range(0,5) |i| {\n+        foreach i in range(0, 5) {\n             d.push_back(i);\n         }\n         assert_eq!(d.rev_iter().collect::<~[&int]>(), ~[&4,&3,&2,&1,&0]);\n \n-        for int::range(6,9) |i| {\n+        foreach i in range(6, 9) {\n             d.push_front(i);\n         }\n         assert_eq!(d.rev_iter().collect::<~[&int]>(), ~[&4,&3,&2,&1,&0,&6,&7,&8]);\n@@ -649,7 +647,7 @@ mod tests {\n         let mut d = RingBuf::new();\n         assert!(d.mut_iter().next().is_none());\n \n-        for uint::range(0,3) |i| {\n+        foreach i in range(0u, 3) {\n             d.push_front(i);\n         }\n \n@@ -672,7 +670,7 @@ mod tests {\n         let mut d = RingBuf::new();\n         assert!(d.mut_rev_iter().next().is_none());\n \n-        for uint::range(0,3) |i| {\n+        foreach i in range(0u, 3) {\n             d.push_front(i);\n         }\n "}, {"sha": "ad8f9297bfbbad9a9e79080809d778e2d57c947e", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -21,7 +21,6 @@ Core encoding and decoding interfaces.\n use std::at_vec;\n use std::hashmap::{HashMap, HashSet};\n use std::trie::{TrieMap, TrieSet};\n-use std::uint;\n use std::vec;\n use ringbuf::RingBuf;\n use container::Deque;\n@@ -679,7 +678,7 @@ impl<D:Decoder,T:Decodable<D>> Decodable<D> for DList<T> {\n     fn decode(d: &mut D) -> DList<T> {\n         let mut list = DList::new();\n         do d.read_seq |d, len| {\n-            for uint::range(0, len) |i| {\n+            foreach i in range(0u, len) {\n                 list.push_back(d.read_seq_elt(i, |d| Decodable::decode(d)));\n             }\n         }\n@@ -704,7 +703,7 @@ impl<D:Decoder,T:Decodable<D>> Decodable<D> for RingBuf<T> {\n     fn decode(d: &mut D) -> RingBuf<T> {\n         let mut deque = RingBuf::new();\n         do d.read_seq |d, len| {\n-            for uint::range(0, len) |i| {\n+            foreach i in range(0u, len) {\n                 deque.push_back(d.read_seq_elt(i, |d| Decodable::decode(d)));\n             }\n         }\n@@ -737,7 +736,7 @@ impl<\n     fn decode(d: &mut D) -> HashMap<K, V> {\n         do d.read_map |d, len| {\n             let mut map = HashMap::with_capacity(len);\n-            for uint::range(0, len) |i| {\n+            foreach i in range(0u, len) {\n                 let key = d.read_map_elt_key(i, |d| Decodable::decode(d));\n                 let val = d.read_map_elt_val(i, |d| Decodable::decode(d));\n                 map.insert(key, val);\n@@ -769,7 +768,7 @@ impl<\n     fn decode(d: &mut D) -> HashSet<T> {\n         do d.read_seq |d, len| {\n             let mut set = HashSet::with_capacity(len);\n-            for uint::range(0, len) |i| {\n+            foreach i in range(0u, len) {\n                 set.insert(d.read_seq_elt(i, |d| Decodable::decode(d)));\n             }\n             set\n@@ -801,7 +800,7 @@ impl<\n     fn decode(d: &mut D) -> TrieMap<V> {\n         do d.read_map |d, len| {\n             let mut map = TrieMap::new();\n-            for uint::range(0, len) |i| {\n+            foreach i in range(0u, len) {\n                 let key = d.read_map_elt_key(i, |d| Decodable::decode(d));\n                 let val = d.read_map_elt_val(i, |d| Decodable::decode(d));\n                 map.insert(key, val);\n@@ -828,7 +827,7 @@ impl<D: Decoder> Decodable<D> for TrieSet {\n     fn decode(d: &mut D) -> TrieSet {\n         do d.read_seq |d, len| {\n             let mut set = TrieSet::new();\n-            for uint::range(0, len) |i| {\n+            foreach i in range(0u, len) {\n                 set.insert(d.read_seq_elt(i, |d| Decodable::decode(d)));\n             }\n             set\n@@ -861,7 +860,7 @@ impl<\n     fn decode(d: &mut D) -> TreeMap<K, V> {\n         do d.read_map |d, len| {\n             let mut map = TreeMap::new();\n-            for uint::range(0, len) |i| {\n+            foreach i in range(0u, len) {\n                 let key = d.read_map_elt_key(i, |d| Decodable::decode(d));\n                 let val = d.read_map_elt_val(i, |d| Decodable::decode(d));\n                 map.insert(key, val);\n@@ -893,7 +892,7 @@ impl<\n     fn decode(d: &mut D) -> TreeSet<T> {\n         do d.read_seq |d, len| {\n             let mut set = TreeSet::new();\n-            for uint::range(0, len) |i| {\n+            foreach i in range(0u, len) {\n                 set.insert(d.read_seq_elt(i, |d| Decodable::decode(d)));\n             }\n             set"}, {"sha": "e939f42ac90e1c89d29e3c739e6ee91b8e36d9db", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -30,7 +30,7 @@ impl<V> Container for SmallIntMap<V> {\n     /// Return the number of elements in the map\n     fn len(&self) -> uint {\n         let mut sz = 0;\n-        for uint::range(0, self.v.len()) |i| {\n+        foreach i in range(0u, self.v.len()) {\n             match self.v[i] {\n                 Some(_) => sz += 1,\n                 None => {}\n@@ -123,13 +123,13 @@ impl<V> SmallIntMap<V> {\n \n     /// Visit all key-value pairs in order\n     pub fn each<'a>(&'a self, it: &fn(&uint, &'a V) -> bool) -> bool {\n-        for uint::range(0, self.v.len()) |i| {\n+        foreach i in range(0u, self.v.len()) {\n             match self.v[i] {\n               Some(ref elt) => if !it(&i, elt) { return false; },\n               None => ()\n             }\n         }\n-        return true;\n+        true\n     }\n \n     /// Visit all keys in order\n@@ -144,13 +144,13 @@ impl<V> SmallIntMap<V> {\n \n     /// Iterate over the map and mutate the contained values\n     pub fn mutate_values(&mut self, it: &fn(&uint, &mut V) -> bool) -> bool {\n-        for uint::range(0, self.v.len()) |i| {\n+        foreach i in range(0, self.v.len()) {\n             match self.v[i] {\n               Some(ref mut elt) => if !it(&i, elt) { return false; },\n               None => ()\n             }\n         }\n-        return true;\n+        true\n     }\n \n     /// Visit all key-value pairs in reverse order"}, {"sha": "ffcfc500b5e1775a13779d11a7314dac2c75c0ae", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -12,7 +12,6 @@\n \n \n use std::cmp::{Eq, Ord};\n-use std::uint;\n use std::util::swap;\n use std::vec;\n \n@@ -471,7 +470,7 @@ impl<T:Clone + Ord> MergeState<T> {\n         assert!(len1 != 0 && len2 != 0 && base1+len1 == base2);\n \n         let mut tmp = ~[];\n-        for uint::range(base1, base1+len1) |i| {\n+        foreach i in range(base1, base1+len1) {\n             tmp.push(array[i].clone());\n         }\n \n@@ -581,7 +580,7 @@ impl<T:Clone + Ord> MergeState<T> {\n         assert!(len1 != 1 && len2 != 0 && base1 + len1 == base2);\n \n         let mut tmp = ~[];\n-        for uint::range(base2, base2+len2) |i| {\n+        foreach i in range(base2, base2+len2) {\n             tmp.push(array[i].clone());\n         }\n \n@@ -1022,7 +1021,6 @@ mod big_tests {\n \n     use std::rand::RngUtil;\n     use std::rand;\n-    use std::uint;\n     use std::vec;\n \n     #[test]\n@@ -1056,7 +1054,7 @@ mod big_tests {\n \n     fn tabulate_unique(lo: uint, hi: uint) {\n         fn isSorted<T:Ord>(arr: &[T]) {\n-            for uint::range(0, arr.len()-1) |i| {\n+            foreach i in range(0u, arr.len() - 1) {\n                 if arr[i] > arr[i+1] {\n                     fail!(\"Array not sorted\");\n                 }\n@@ -1065,7 +1063,7 @@ mod big_tests {\n \n         let mut rng = rand::rng();\n \n-        for uint::range(lo, hi) |i| {\n+        foreach i in range(lo, hi) {\n             let n = 1 << i;\n             let mut arr: ~[float] = do vec::from_fn(n) |_i| {\n                 rng.gen()\n@@ -1127,7 +1125,7 @@ mod big_tests {\n \n     fn tabulate_managed(lo: uint, hi: uint) {\n         fn isSorted<T:Ord>(arr: &[@T]) {\n-            for uint::range(0, arr.len()-1) |i| {\n+            foreach i in range(0u, arr.len() - 1) {\n                 if arr[i] > arr[i+1] {\n                     fail!(\"Array not sorted\");\n                 }\n@@ -1136,7 +1134,7 @@ mod big_tests {\n \n         let mut rng = rand::rng();\n \n-        for uint::range(lo, hi) |i| {\n+        foreach i in range(lo, hi) {\n             let n = 1 << i;\n             let arr: ~[@float] = do vec::from_fn(n) |_i| {\n                 @rng.gen()"}, {"sha": "79b260036962038df2e4e8c07be2e4e8f99b7f2e", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -14,13 +14,12 @@\n use std::os;\n use std::rand::RngUtil;\n use std::rand;\n-use std::uint;\n \n /// Attempts to make a temporary directory inside of `tmpdir` whose name will\n /// have the suffix `suffix`. If no directory can be created, None is returned.\n pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n     let mut r = rand::rng();\n-    for uint::range(0, 1000) |_| {\n+    foreach _ in range(0u, 1000) {\n         let p = tmpdir.push(r.gen_str(16) + suffix);\n         if os::make_dir(&p, 0x1c0) { // 700\n             return Some(p);"}, {"sha": "869f7d9df2ba66a630c694f5acbbd641b99a3f82", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -13,7 +13,7 @@\n /// ncurses-compatible compiled terminfo format parsing (term(5))\n \n \n-use std::{vec, int, str};\n+use std::{vec, str};\n use std::io::Reader;\n use std::hashmap::HashMap;\n use super::super::TermInfo;\n@@ -222,7 +222,7 @@ pub fn parse(file: @Reader, longnames: bool) -> Result<~TermInfo, ~str> {\n \n     let mut bools_map = HashMap::new();\n     if bools_bytes != 0 {\n-        for int::range(0, bools_bytes) |i| {\n+        foreach i in range(0, bools_bytes) {\n             let b = file.read_byte();\n             if b < 0 {\n                 error!(\"EOF reading bools after %? entries\", i);\n@@ -243,7 +243,7 @@ pub fn parse(file: @Reader, longnames: bool) -> Result<~TermInfo, ~str> {\n \n     let mut numbers_map = HashMap::new();\n     if numbers_count != 0 {\n-        for int::range(0, numbers_count) |i| {\n+        foreach i in range(0, numbers_count) {\n             let n = file.read_le_u16();\n             if n != 0xFFFF {\n                 debug!(\"%s#%?\", nnames[i], n);\n@@ -258,7 +258,7 @@ pub fn parse(file: @Reader, longnames: bool) -> Result<~TermInfo, ~str> {\n \n     if string_offsets_count != 0 {\n         let mut string_offsets = vec::with_capacity(10);\n-        for int::range(0, string_offsets_count) |_i| {\n+        foreach _ in range(0, string_offsets_count) {\n             string_offsets.push(file.read_le_u16());\n         }\n "}, {"sha": "fd5d3fb21b195102236eb49db4bf5d2ed5f32328", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -36,7 +36,6 @@ use std::io;\n use std::result;\n use std::task;\n use std::to_str::ToStr;\n-use std::u64;\n use std::f64;\n use std::os;\n \n@@ -991,7 +990,7 @@ impl BenchHarness {\n     pub fn iter(&mut self, inner:&fn()) {\n         self.ns_start = precise_time_ns();\n         let k = self.iterations;\n-        for u64::range(0, k) |_| {\n+        foreach _ in range(0u64, k) {\n             inner();\n         }\n         self.ns_end = precise_time_ns();"}, {"sha": "82c7bf6caf17d1061bbdfc7971e2f7ca40692126", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -16,7 +16,6 @@\n use std::num;\n use std::util::{swap, replace};\n use std::iterator::{FromIterator, Extendable};\n-use std::uint;\n \n // This is implemented as an AA tree, which is a simplified variation of\n // a red-black tree where red (horizontal) nodes can only be added\n@@ -48,7 +47,7 @@ impl<K: Eq + TotalOrd, V: Eq> Eq for TreeMap<K, V> {\n         } else {\n             let mut x = self.iter();\n             let mut y = other.iter();\n-            for uint::range(0, self.len()) |_| {\n+            foreach _ in range(0u, self.len()) {\n                 if x.next().unwrap() != y.next().unwrap() {\n                     return false\n                 }\n@@ -66,7 +65,7 @@ fn lt<K: Ord + TotalOrd, V: Ord>(a: &TreeMap<K, V>,\n     let mut y = b.iter();\n \n     let (a_len, b_len) = (a.len(), b.len());\n-    for uint::range(0, num::min(a_len, b_len)) |_| {\n+    foreach _ in range(0u, num::min(a_len, b_len)) {\n         let (key_a, value_a) = x.next().unwrap();\n         let (key_b, value_b) = y.next().unwrap();\n         if *key_a < *key_b { return true; }"}, {"sha": "22ef2e2278c4db7933b4f211b4ace835c69e1c01", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -16,7 +16,6 @@ use metadata::filesearch;\n use std::hashmap::HashSet;\n use std::num;\n use std::os;\n-use std::uint;\n use std::util;\n use std::vec;\n \n@@ -150,7 +149,7 @@ pub fn get_relative_to(abs1: &Path, abs2: &Path) -> Path {\n     }\n \n     let mut path = ~[];\n-    for uint::range(start_idx, len1 - 1) |_i| { path.push(~\"..\"); };\n+    foreach _ in range(start_idx, len1 - 1) { path.push(~\"..\"); };\n \n     path.push_all(split2.slice(start_idx, len2 - 1));\n "}, {"sha": "bebfc889a7d86bf5fd8f59143d0450024ac6b940", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -1256,7 +1256,7 @@ fn create_index<T:Clone + Hash + IterBytes + 'static>(\n                 index: ~[entry<T>])\n                 -> ~[@~[entry<T>]] {\n     let mut buckets: ~[@mut ~[entry<T>]] = ~[];\n-    for uint::range(0u, 256u) |_i| { buckets.push(@mut ~[]); };\n+    foreach _ in range(0u, 256u) { buckets.push(@mut ~[]); };\n     foreach elt in index.iter() {\n         let h = elt.val.hash() as uint;\n         buckets[h % 256].push((*elt).clone());"}, {"sha": "310d8ffe0d666d7875cdf14517437fb8330bd0df", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -24,7 +24,6 @@ use middle;\n use util::ppaux::ty_to_str;\n \n use std::at_vec;\n-use std::uint;\n use extra::ebml::reader;\n use extra::ebml;\n use extra::serialize;\n@@ -1055,7 +1054,7 @@ impl ebml_decoder_decoder_helpers for reader::Decoder {\n \n         fn type_string(doc: ebml::Doc) -> ~str {\n             let mut str = ~\"\";\n-            for uint::range(doc.start, doc.end) |i| {\n+            foreach i in range(doc.start, doc.end) {\n                 str.push_char(doc.data[i] as char);\n             }\n             str"}, {"sha": "4291ae2e7de22b7eed9950edd86d4dea8ae40aa4", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -19,7 +19,6 @@\n \n \n use std::hashmap::HashSet;\n-use std::uint;\n use mc = middle::mem_categorization;\n use middle::borrowck::*;\n use middle::moves;\n@@ -158,9 +157,9 @@ impl<'self> CheckLoanCtxt<'self> {\n             }\n         }\n \n-        for uint::range(0, new_loan_indices.len()) |i| {\n+        foreach i in range(0u, new_loan_indices.len()) {\n             let old_loan = &self.all_loans[new_loan_indices[i]];\n-            for uint::range(i+1, new_loan_indices.len()) |j| {\n+            foreach j in range(i+1, new_loan_indices.len()) {\n                 let new_loan = &self.all_loans[new_loan_indices[j]];\n                 self.report_error_if_loans_conflict(old_loan, new_loan);\n             }"}, {"sha": "df59461bda5bc6f5d632943a59ae2dd430388ac3", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -18,8 +18,8 @@ use middle::typeck::method_map;\n use middle::moves;\n use util::ppaux::ty_to_str;\n \n+use std::iterator;\n use std::num;\n-use std::uint;\n use std::vec;\n use extra::sort;\n use syntax::ast::*;\n@@ -261,7 +261,7 @@ pub fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@pat]) -> useful {\n                     _ => max_len\n                   }\n                 };\n-                for uint::range(0, max_len + 1) |n| {\n+                foreach n in iterator::range(0u, max_len + 1) {\n                   match is_useful_specialized(cx, m, v, vec(n), n, left_ty) {\n                     not_useful => (),\n                     ref u => return *u,"}, {"sha": "6c291ae2241c88e1f3417042d291f597eecfe48d", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -269,7 +269,7 @@ impl<O:DataFlowOperator> DataFlowContext<O> {\n         foreach (word_index, &word) in words.iter().enumerate() {\n             if word != 0 {\n                 let base_index = word_index * uint::bits;\n-                for uint::range(0, uint::bits) |offset| {\n+                foreach offset in range(0u, uint::bits) {\n                     let bit = 1 << offset;\n                     if (word & bit) != 0 {\n                         // NB: we round up the total number of bits\n@@ -998,7 +998,7 @@ fn bits_to_str(words: &[uint]) -> ~str {\n \n     foreach &word in words.iter() {\n         let mut v = word;\n-        for uint::range(0, uint::bytes) |_| {\n+        foreach _ in range(0u, uint::bytes) {\n             result.push_char(sep);\n             result.push_str(fmt!(\"%02x\", v & 0xFF));\n             v >>= 8;\n@@ -1025,13 +1025,13 @@ fn bitwise(out_vec: &mut [uint],\n            op: &fn(uint, uint) -> uint) -> bool {\n     assert_eq!(out_vec.len(), in_vec.len());\n     let mut changed = false;\n-    for uint::range(0, out_vec.len()) |i| {\n+    foreach i in range(0u, out_vec.len()) {\n         let old_val = out_vec[i];\n         let new_val = op(old_val, in_vec[i]);\n         out_vec[i] = new_val;\n         changed |= (old_val != new_val);\n     }\n-    return changed;\n+    changed\n }\n \n fn set_bit(words: &mut [uint], bit: uint) -> bool {"}, {"sha": "cf028512e61b6951efcd5c0c7417dcf7563b40eb", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -187,16 +187,12 @@ impl<N,E> Graph<N,E> {\n \n     pub fn each_node(&self, f: &fn(NodeIndex, &Node<N>) -> bool) -> bool {\n         //! Iterates over all edges defined in the graph.\n-\n-        uint::range(0, self.nodes.len(),\n-                    |i| f(NodeIndex(i), &self.nodes[i]))\n+        range(0u, self.nodes.len()).advance(|i| f(NodeIndex(i), &self.nodes[i]))\n     }\n \n     pub fn each_edge(&self, f: &fn(EdgeIndex, &Edge<E>) -> bool) -> bool {\n         //! Iterates over all edges defined in the graph.\n-\n-        uint::range(0, self.nodes.len(),\n-                    |i| f(EdgeIndex(i), &self.edges[i]))\n+        range(0u, self.nodes.len()).advance(|i| f(EdgeIndex(i), &self.edges[i]))\n     }\n \n     pub fn each_outgoing_edge(&self,\n@@ -407,4 +403,4 @@ mod test {\n                             [(\"BD\", \"B\")],\n                             [(\"DE\", \"E\")]);\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3e1d4b3ba8ce554a03c2b5cece2211a36ed3c946", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -710,7 +710,7 @@ impl Liveness {\n \n     pub fn indices(&self, ln: LiveNode, op: &fn(uint)) {\n         let node_base_idx = self.idx(ln, Variable(0));\n-        for uint::range(0, self.ir.num_vars) |var_idx| {\n+        foreach var_idx in range(0u, self.ir.num_vars) {\n             op(node_base_idx + var_idx)\n         }\n     }\n@@ -721,7 +721,7 @@ impl Liveness {\n                     op: &fn(uint, uint)) {\n         let node_base_idx = self.idx(ln, Variable(0u));\n         let succ_base_idx = self.idx(succ_ln, Variable(0u));\n-        for uint::range(0u, self.ir.num_vars) |var_idx| {\n+        foreach var_idx in range(0u, self.ir.num_vars) {\n             op(node_base_idx + var_idx, succ_base_idx + var_idx);\n         }\n     }\n@@ -731,7 +731,7 @@ impl Liveness {\n                       ln: LiveNode,\n                       test: &fn(uint) -> LiveNode) {\n         let node_base_idx = self.idx(ln, Variable(0));\n-        for uint::range(0, self.ir.num_vars) |var_idx| {\n+        foreach var_idx in range(0u, self.ir.num_vars) {\n             let idx = node_base_idx + var_idx;\n             if test(idx).is_valid() {\n                 wr.write_str(\" \");\n@@ -900,7 +900,7 @@ impl Liveness {\n         // hack to skip the loop unless debug! is enabled:\n         debug!(\"^^ liveness computation results for body %d (entry=%s)\",\n                {\n-                   for uint::range(0u, self.ir.num_live_nodes) |ln_idx| {\n+                   foreach ln_idx in range(0u, self.ir.num_live_nodes) {\n                        debug!(\"%s\", self.ln_str(LiveNode(ln_idx)));\n                    }\n                    body.id"}, {"sha": "010ac66b30d5066fde8543e4e095f9356c6e6851", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -52,7 +52,6 @@ use middle::typeck;\n use util::ppaux::{ty_to_str, region_ptr_to_str, Repr};\n use util::common::indenter;\n \n-use std::uint;\n use syntax::ast::{m_imm, m_const, m_mutbl};\n use syntax::ast;\n use syntax::codemap::span;\n@@ -376,7 +375,7 @@ impl mem_categorization_ctxt {\n     pub fn cat_expr_autoderefd(&self, expr: @ast::expr, autoderefs: uint)\n                                -> cmt {\n         let mut cmt = self.cat_expr_unadjusted(expr);\n-        for uint::range(1, autoderefs+1) |deref| {\n+        foreach deref in range(1u, autoderefs + 1) {\n             cmt = self.cat_deref(expr, cmt, deref);\n         }\n         return cmt;"}, {"sha": "7f3922af014c4eb7b722e0b07a679cd223e4865a", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -1769,7 +1769,7 @@ pub fn copy_args_to_allocas(fcx: @mut FunctionContext,\n         _ => {}\n     }\n \n-    for uint::range(0, arg_tys.len()) |arg_n| {\n+    foreach arg_n in range(0u, arg_tys.len()) {\n         let arg_ty = arg_tys[arg_n];\n         let raw_llarg = raw_llargs[arg_n];\n \n@@ -1965,7 +1965,7 @@ fn insert_synthetic_type_entries(bcx: @mut Block,\n      */\n \n     let tcx = bcx.tcx();\n-    for uint::range(0, fn_args.len()) |i| {\n+    foreach i in range(0u, fn_args.len()) {\n         debug!(\"setting type of argument %u (pat node %d) to %s\",\n                i, fn_args[i].pat.id, bcx.ty_to_str(arg_tys[i]));\n "}, {"sha": "7004de57da66a8eaced540e0ea3110bbe14e4a1b", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -21,7 +21,6 @@ use middle::trans::type_::Type;\n use std::num;\n use std::option;\n use std::option::Option;\n-use std::uint;\n use std::vec;\n \n #[deriving(Clone, Eq)]\n@@ -146,7 +145,7 @@ fn classify_ty(ty: Type) -> ~[RegClass] {\n     }\n \n     fn all_mem(cls: &mut [RegClass]) {\n-        for uint::range(0, cls.len()) |i| {\n+        foreach i in range(0u, cls.len()) {\n             cls[i] = Memory;\n         }\n     }"}, {"sha": "5c2b606ba16800625c6cae1e6a66f96b1ef27ad8", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -33,7 +33,6 @@ use middle::ty::FnSig;\n use util::ppaux::ty_to_str;\n \n use std::cell::Cell;\n-use std::uint;\n use std::vec;\n use syntax::codemap::span;\n use syntax::{ast, ast_util};\n@@ -499,7 +498,7 @@ pub fn trans_foreign_mod(ccx: @mut CrateContext,\n             let _icx = push_ctxt(\"foreign::wrap::build_args\");\n             let ccx = bcx.ccx();\n             let n = tys.llsig.llarg_tys.len();\n-            for uint::range(0, n) |i| {\n+            foreach i in range(0u, n) {\n                 let arg_i = bcx.fcx.arg_pos(i);\n                 let mut llargval = get_param(llwrapfn, arg_i);\n \n@@ -544,7 +543,7 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n         assert!(num_args <= 4);\n         let mut args = [0 as ValueRef, ..4];\n         let first_real_arg = bcx.fcx.arg_pos(0u);\n-        for uint::range(0, num_args) |i| {\n+        foreach i in range(0u, num_args) {\n             args[i] = get_param(bcx.fcx.llfn, first_real_arg + i);\n         }\n         let llfn = bcx.ccx().intrinsics.get_copy(&name);"}, {"sha": "799cf7ece80635ce5db4c75478bf07a206657a00", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -34,7 +34,6 @@ use middle::ty;\n use middle::typeck;\n \n use std::option::{Some, None};\n-use std::uint;\n use std::vec;\n use extra::list::{List, Cons, Nil};\n use extra::list;\n@@ -94,7 +93,7 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: def_id, n_tps: uint)\n     // We also mark all of the params as used if it is an extern thing\n     // that we haven't been able to inline yet.\n     if is_default || fn_id_loc.crate != LOCAL_CRATE {\n-        for uint::range(0u, n_tps) |n| { cx.uses[n] |= use_all; }\n+        foreach n in range(0u, n_tps) { cx.uses[n] |= use_all; }\n         return store_type_uses(cx, fn_id);\n     }\n \n@@ -118,13 +117,13 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: def_id, n_tps: uint)\n         // This will be a static trait method. For now, we just assume\n         // it fully depends on all of the type information. (Doing\n         // otherwise would require finding the actual implementation).\n-        for uint::range(0u, n_tps) |n| { cx.uses[n] |= use_all;}\n+        foreach n in range(0u, n_tps) { cx.uses[n] |= use_all;}\n         // We need to return early, before the arguments are processed,\n         // because of difficulties in the handling of Self.\n         return store_type_uses(cx, fn_id);\n       }\n       ast_map::node_variant(_, _, _) => {\n-        for uint::range(0u, n_tps) |n| { cx.uses[n] |= use_repr;}\n+        foreach n in range(0u, n_tps) { cx.uses[n] |= use_repr;}\n       }\n       ast_map::node_foreign_item(i@@foreign_item {\n             node: foreign_item_fn(*),\n@@ -173,13 +172,13 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: def_id, n_tps: uint)\n                     _ => fail!(\"unknown intrinsic in type_use\")\n                 }\n             };\n-            for uint::range(0u, n_tps) |n| { cx.uses[n] |= flags;}\n+            foreach n in range(0u, n_tps) { cx.uses[n] |= flags;}\n         }\n       }\n       ast_map::node_struct_ctor(*) => {\n         // Similarly to node_variant, this monomorphized function just\n         // uses the representations of all of its type parameters.\n-        for uint::range(0, n_tps) |n| { cx.uses[n] |= use_repr; }\n+        foreach n in range(0u, n_tps) { cx.uses[n] |= use_repr; }\n       }\n       _ => {\n         ccx.tcx.sess.bug(fmt!(\"unknown node type in type_use: %s\",\n@@ -210,7 +209,7 @@ pub fn type_needs(cx: &Context, use_: uint, ty: ty::t) {\n         let uses = &*cx.uses;\n         uses.len()\n     };\n-    for uint::range(0, len) |i| {\n+    foreach i in range(0u, len) {\n         if cx.uses[i] & use_ != use_ {\n             type_needs_inner(cx, use_, ty, @Nil);\n             return;"}, {"sha": "2f6dff628669613eea82f19b7dc06a8cfc2ea5ac", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -34,7 +34,6 @@ use std::ops;\n use std::ptr::to_unsafe_ptr;\n use std::to_bytes;\n use std::u32;\n-use std::uint;\n use std::vec;\n use syntax::ast::*;\n use syntax::ast_util::is_local;\n@@ -2962,7 +2961,7 @@ pub fn adjust_ty(cx: ctxt,\n             let mut adjusted_ty = unadjusted_ty;\n \n             if (!ty::type_is_error(adjusted_ty)) {\n-                for uint::range(0, adj.autoderefs) |i| {\n+                foreach i in range(0, adj.autoderefs) {\n                     match ty::deref(cx, adjusted_ty, true) {\n                         Some(mt) => { adjusted_ty = mt.ty; }\n                         None => {"}, {"sha": "ed0503763e844f3b81fbe3c2647e005bb35d738b", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -97,7 +97,6 @@ use util::common::indenter;\n \n use std::hashmap::HashSet;\n use std::result;\n-use std::uint;\n use std::vec;\n use extra::list::Nil;\n use syntax::ast::{def_id, sty_value, sty_region, sty_box};\n@@ -775,7 +774,7 @@ impl<'self> LookupContext<'self> {\n             self.tcx().sess.span_err(\n                 self.expr.span,\n                 \"multiple applicable methods in scope\");\n-            for uint::range(0, relevant_candidates.len()) |idx| {\n+            foreach idx in range(0u, relevant_candidates.len()) {\n                 self.report_candidate(idx, &relevant_candidates[idx].origin);\n             }\n         }"}, {"sha": "8730e22447cac592bfc2ffd5dd1b45dcc644e7ce", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -39,7 +39,6 @@ use middle::typeck::infer;\n use util::ppaux::{ty_to_str, region_to_str};\n use middle::pat_util;\n \n-use std::uint;\n use syntax::ast::{ManagedSigil, OwnedSigil, BorrowedSigil};\n use syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n use syntax::ast;\n@@ -600,7 +599,7 @@ fn constrain_derefs(rcx: @mut Rcx,\n      */\n     let tcx = rcx.fcx.tcx();\n     let r_deref_expr = ty::re_scope(deref_expr.id);\n-    for uint::range(0, derefs) |i| {\n+    foreach i in range(0u, derefs) {\n         debug!(\"constrain_derefs(deref_expr=?, derefd_ty=%s, derefs=%?/%?\",\n                rcx.fcx.infcx().ty_to_str(derefd_ty),\n                i, derefs);\n@@ -810,8 +809,6 @@ pub mod guarantor {\n     use syntax::codemap::span;\n     use util::ppaux::{ty_to_str};\n \n-    use std::uint;\n-\n     pub fn for_addr_of(rcx: @mut Rcx, expr: @ast::expr, base: @ast::expr) {\n         /*!\n          * Computes the guarantor for an expression `&base` and then\n@@ -1132,7 +1129,7 @@ pub mod guarantor {\n             return ct;\n         }\n \n-        for uint::range(0, autoderefs) |_| {\n+        foreach _ in range(0u, autoderefs) {\n             ct.cat.guarantor = guarantor_of_deref(&ct.cat);\n \n             match ty::deref(tcx, ct.ty, true) {"}, {"sha": "f79d7dd3587e32c9638c568bf85ad14f8962bbb8", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -54,7 +54,6 @@ use util::ppaux::ty_to_str;\n \n use std::hashmap::{HashMap, HashSet};\n use std::result::Ok;\n-use std::uint;\n use std::vec;\n \n pub struct UniversalQuantificationResult {\n@@ -551,7 +550,7 @@ impl CoherenceChecker {\n \n         let mut provided_names = HashSet::new();\n         // Implemented methods\n-        for uint::range(0, all_methods.len()) |i| {\n+        foreach i in range(0u, all_methods.len()) {\n             provided_names.insert(all_methods[i].ident);\n         }\n "}, {"sha": "92f053cad89416d232fc53605536fa7c7b9ef367", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -374,7 +374,7 @@ impl RegionVarBindings {\n     pub fn vars_created_since_snapshot(&mut self, snapshot: uint)\n                                        -> ~[RegionVid] {\n         do vec::build |push| {\n-            for uint::range(snapshot, self.undo_log.len()) |i| {\n+            foreach i in range(snapshot, self.undo_log.len()) {\n                 match self.undo_log[i] {\n                     AddVar(vid) => push(vid),\n                     _ => ()\n@@ -962,7 +962,7 @@ impl RegionVarBindings {\n \n         let mut opt_graph = None;\n \n-        for uint::range(0, self.num_vars()) |idx| {\n+        foreach idx in range(0u, self.num_vars()) {\n             match var_data[idx].value {\n                 Value(_) => {\n                     /* Inference successful */\n@@ -1027,7 +1027,7 @@ impl RegionVarBindings {\n         let mut graph = graph::Graph::with_capacity(num_vars + 1,\n                                                     num_edges);\n \n-        for uint::range(0, num_vars) |_| {\n+        foreach _ in range(0u, num_vars) {\n             graph.add_node(());\n         }\n         let dummy_idx = graph.add_node(());"}, {"sha": "ab1dd3d45f17ffdc1c31372054e5075bb1206a7b", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -12,10 +12,9 @@\n \n use clone::Clone;\n use container::Container;\n-use iterator::Iterator;\n+use iterator::{Iterator, range};\n use option::{Option, Some, None};\n use sys;\n-use uint;\n use unstable::raw::Repr;\n use vec::{ImmutableVector, OwnedVector};\n \n@@ -95,7 +94,7 @@ pub fn append<T:Clone>(lhs: @[T], rhs: &[T]) -> @[T] {\n         foreach x in lhs.iter() {\n             push((*x).clone());\n         }\n-        for uint::range(0, rhs.len()) |i| {\n+        foreach i in range(0u, rhs.len()) {\n             push(rhs[i].clone());\n         }\n     }\n@@ -323,14 +322,14 @@ pub mod raw {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use uint;\n+    use prelude::*;\n \n     #[test]\n     fn test() {\n         // Some code that could use that, then:\n         fn seq_range(lo: uint, hi: uint) -> @[uint] {\n             do build |push| {\n-                for uint::range(lo, hi) |i| {\n+                foreach i in range(lo, hi) {\n                     push(i);\n                 }\n             }"}, {"sha": "e7d51106c58aa4a8aa4c578cb89680e65296a4ae", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -19,7 +19,7 @@ use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n use clone::Clone;\n use cmp::{Eq, Equiv};\n use hash::Hash;\n-use iterator::{Iterator, IteratorUtil, FromIterator, Extendable, Chain};\n+use iterator::{Iterator, IteratorUtil, FromIterator, Extendable, Chain, range};\n use num;\n use option::{None, Option, Some};\n use rand::RngUtil;\n@@ -284,7 +284,7 @@ impl<K:Hash + Eq,V> Container for HashMap<K, V> {\n impl<K:Hash + Eq,V> Mutable for HashMap<K, V> {\n     /// Clear the map, removing all key-value pairs.\n     fn clear(&mut self) {\n-        for uint::range(0, self.buckets.len()) |idx| {\n+        foreach idx in range(0u, self.buckets.len()) {\n             self.buckets[idx] = None;\n         }\n         self.size = 0;\n@@ -802,10 +802,8 @@ pub type SetAlgebraIter<'self, T> =\n \n #[cfg(test)]\n mod test_map {\n-    use container::{Container, Map};\n-    use option::{None, Some};\n+    use prelude::*;\n     use super::*;\n-    use uint;\n \n     #[test]\n     fn test_create_capacity_zero() {\n@@ -930,7 +928,7 @@ mod test_map {\n     #[test]\n     fn test_iterate() {\n         let mut m = linear_map_with_capacity(4);\n-        for uint::range(0, 32) |i| {\n+        foreach i in range(0u, 32) {\n             assert!(m.insert(i, i*2));\n         }\n         let mut observed = 0;\n@@ -1023,7 +1021,6 @@ mod test_set {\n     use prelude::*;\n     use container::Container;\n     use vec::ImmutableEqVector;\n-    use uint;\n \n     #[test]\n     fn test_disjoint() {\n@@ -1079,7 +1076,7 @@ mod test_set {\n     #[test]\n     fn test_iterate() {\n         let mut a = HashSet::new();\n-        for uint::range(0, 32) |i| {\n+        foreach i in range(0u, 32) {\n             assert!(a.insert(i));\n         }\n         let mut observed = 0;"}, {"sha": "3b8298414843c1d0724a1e4ca503b19b284ee211", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -47,6 +47,7 @@ pub trait Iterator<A> {\n     /// Return a lower bound and upper bound on the remaining length of the iterator.\n     ///\n     /// The common use case for the estimate is pre-allocating space to store the results.\n+    #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { (0, None) }\n }\n \n@@ -1513,11 +1514,38 @@ impl<A> Counter<A> {\n     }\n }\n \n+/// A range of numbers from [0, N)\n+#[deriving(Clone, DeepClone)]\n+pub struct Range<A> {\n+    priv state: A,\n+    priv stop: A,\n+    priv one: A\n+}\n+\n+/// Return an iterator over the range [start, stop)\n+#[inline]\n+pub fn range<A: Add<A, A> + Ord + Clone + One>(start: A, stop: A) -> Range<A> {\n+    Range{state: start, stop: stop, one: One::one()}\n+}\n+\n+impl<A: Add<A, A> + Ord + Clone + One> Iterator<A> for Range<A> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        if self.state < self.stop {\n+            let result = self.state.clone();\n+            self.state = self.state + self.one;\n+            Some(result)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         let result = self.state.clone();\n-        self.state = self.state.add(&self.step); // FIXME: #6050\n+        self.state = self.state + self.step;\n         Some(result)\n     }\n \n@@ -1703,21 +1731,21 @@ mod tests {\n     #[test]\n     fn test_cycle() {\n         let cycle_len = 3;\n-        let it = Counter::new(0u,1).take_(cycle_len).cycle();\n+        let it = Counter::new(0u, 1).take_(cycle_len).cycle();\n         assert_eq!(it.size_hint(), (uint::max_value, None));\n         foreach (i, x) in it.take_(100).enumerate() {\n             assert_eq!(i % cycle_len, x);\n         }\n \n-        let mut it = Counter::new(0u,1).take_(0).cycle();\n+        let mut it = Counter::new(0u, 1).take_(0).cycle();\n         assert_eq!(it.size_hint(), (0, Some(0)));\n         assert_eq!(it.next(), None);\n     }\n \n     #[test]\n     fn test_iterator_nth() {\n         let v = &[0, 1, 2, 3, 4];\n-        for uint::range(0, v.len()) |i| {\n+        foreach i in range(0u, v.len()) {\n             assert_eq!(v.iter().nth(i).unwrap(), &v[i]);\n         }\n     }"}, {"sha": "9aa79090425f8627c0d128171000a6d767b2b482", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -125,12 +125,6 @@ pub fn range_step_inclusive(start: $T, last: $T, step: $T, it: &fn($T) -> bool)\n }\n \n \n-#[inline]\n-/// Iterate over the range [`lo`..`hi`)\n-pub fn range(lo: $T, hi: $T, it: &fn($T) -> bool) -> bool {\n-    range_step(lo, hi, 1 as $T, it)\n-}\n-\n #[inline]\n /// Iterate over the range (`hi`..`lo`]\n pub fn range_rev(hi: $T, lo: $T, it: &fn($T) -> bool) -> bool {\n@@ -895,9 +889,6 @@ mod tests {\n     fn test_ranges() {\n         let mut l = ~[];\n \n-        for range(0,3) |i| {\n-            l.push(i);\n-        }\n         for range_rev(14,11) |i| {\n             l.push(i);\n         }\n@@ -919,8 +910,7 @@ mod tests {\n         for range_step(min_value + 3, min_value, -2) |i| {\n             l.push(i);\n         }\n-        assert_eq!(l, ~[0,1,2,\n-                        13,12,11,\n+        assert_eq!(l, ~[13,12,11,\n                         20,22,24,\n                         36,34,32,\n                         max_value-2,\n@@ -929,9 +919,6 @@ mod tests {\n                         min_value+3,min_value+1]);\n \n         // None of the `fail`s should execute.\n-        for range(10,0) |_i| {\n-            fail!(~\"unreachable\");\n-        }\n         for range_rev(0,10) |_i| {\n             fail!(~\"unreachable\");\n         }"}, {"sha": "aa01b871b9d4288904efb69a74b9d41d19545285", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -125,12 +125,6 @@ pub fn range_step_inclusive(start: $T, last: $T, step: $T_SIGNED, it: &fn($T) ->\n     range_step_core(start, last, step, Closed, it)\n }\n \n-#[inline]\n-/// Iterate over the range [`lo`..`hi`)\n-pub fn range(lo: $T, hi: $T, it: &fn($T) -> bool) -> bool {\n-    range_step(lo, hi, 1 as $T_SIGNED, it)\n-}\n-\n #[inline]\n /// Iterate over the range (`hi`..`lo`]\n pub fn range_rev(hi: $T, lo: $T, it: &fn($T) -> bool) -> bool {\n@@ -660,9 +654,6 @@ mod tests {\n     pub fn test_ranges() {\n         let mut l = ~[];\n \n-        for range(0,3) |i| {\n-            l.push(i);\n-        }\n         for range_rev(14,11) |i| {\n             l.push(i);\n         }\n@@ -685,8 +676,7 @@ mod tests {\n             l.push(i);\n         }\n \n-        assert_eq!(l, ~[0,1,2,\n-                        13,12,11,\n+        assert_eq!(l, ~[13,12,11,\n                         20,22,24,\n                         36,34,32,\n                         max_value-2,\n@@ -695,9 +685,6 @@ mod tests {\n                         min_value+3,min_value+1]);\n \n         // None of the `fail`s should execute.\n-        for range(0,0) |_i| {\n-            fail!(\"unreachable\");\n-        }\n         for range_rev(0,0) |_i| {\n             fail!(\"unreachable\");\n         }"}, {"sha": "8a1964783ae3f2c9f8f95a658d960c38e46e4634", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -32,7 +32,7 @@ use cast;\n use clone::Clone;\n use container::Container;\n use io;\n-use iterator::IteratorUtil;\n+use iterator::{IteratorUtil, range};\n use libc;\n use libc::{c_char, c_void, c_int, size_t};\n use libc::FILE;\n@@ -43,7 +43,6 @@ use prelude::*;\n use ptr;\n use str;\n use to_str;\n-use uint;\n use unstable::finally::Finally;\n use vec;\n \n@@ -1114,7 +1113,7 @@ pub fn set_exit_status(code: int) {\n \n unsafe fn load_argc_and_argv(argc: c_int, argv: **c_char) -> ~[~str] {\n     let mut args = ~[];\n-    for uint::range(0, argc as uint) |i| {\n+    foreach i in range(0u, argc as uint) {\n         args.push(str::raw::from_c_str(*argv.offset(i as int)));\n     }\n     args\n@@ -1163,7 +1162,7 @@ pub fn real_args() -> ~[~str] {\n     let szArgList = unsafe { CommandLineToArgvW(lpCmdLine, lpArgCount) };\n \n     let mut args = ~[];\n-    for uint::range(0, nArgs as uint) |i| {\n+    foreach i in range(0u, nArgs as uint) {\n         unsafe {\n             // Determine the length of this argument.\n             let ptr = *szArgList.offset(i as int);"}, {"sha": "517bc4a441a68df454edf042fe1209404c434abd", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -40,6 +40,7 @@ pub use result::{Result, Ok, Err};\n \n // Reexported functions\n pub use io::{print, println};\n+pub use iterator::range;\n \n // Reexported types and traits\n pub use clone::{Clone, DeepClone};\n@@ -49,7 +50,7 @@ pub use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n pub use hash::Hash;\n pub use iter::Times;\n pub use iterator::{Iterator, IteratorUtil, DoubleEndedIterator, DoubleEndedIteratorUtil};\n-pub use iterator::OrdIterator;\n+pub use iterator::{ClonableIterator, OrdIterator};\n pub use num::{Num, NumCast};\n pub use num::{Orderable, Signed, Unsigned, Round};\n pub use num::{Algebraic, Trigonometric, Exponential, Hyperbolic};"}, {"sha": "075e208ab82d5450b85948ad7d7e36a1acf20964", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -48,6 +48,7 @@ use clone::Clone;\n use cmp;\n use container::Container;\n use int;\n+use iterator::{Iterator, range};\n use local_data;\n use num;\n use prelude::*;\n@@ -582,7 +583,7 @@ impl<R: Rng> RngUtil for R {\n     fn weighted_vec<T:Clone>(&mut self, v: &[Weighted<T>]) -> ~[T] {\n         let mut r = ~[];\n         foreach item in v.iter() {\n-            for uint::range(0u, item.weight) |_i| {\n+            foreach _ in range(0u, item.weight) {\n                 r.push(item.item.clone());\n             }\n         }"}, {"sha": "e701cb64fb6ffc263c436cf88051256bded4c17a", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -53,11 +53,10 @@ pub fn clone() -> Option<~[~str]> {\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"freebsd\")]\n mod imp {\n-\n     use libc;\n     use option::{Option, Some, None};\n+    use iterator::{Iterator, range};\n     use str;\n-    use uint;\n     use unstable::finally::Finally;\n     use util;\n \n@@ -113,10 +112,10 @@ mod imp {\n     // Copied from `os`.\n     unsafe fn load_argc_and_argv(argc: int, argv: **u8) -> ~[~str] {\n         let mut args = ~[];\n-        for uint::range(0, argc as uint) |i| {\n+        foreach i in range(0u, argc as uint) {\n             args.push(str::raw::from_c_str(*(argv as **libc::c_char).offset(i as int)));\n         }\n-        return args;\n+        args\n     }\n \n     extern {"}, {"sha": "764ef283eb88cb9c263314fe4bd6932f97d1346d", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -143,11 +143,11 @@ impl Listener<TcpStream> for TcpListener {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use int;\n     use cell::Cell;\n     use rt::test::*;\n     use rt::io::net::ip::Ipv4;\n     use rt::io::*;\n+    use prelude::*;\n \n     #[test] #[ignore]\n     fn bind_error() {\n@@ -421,7 +421,7 @@ mod test {\n \n             do spawntask {\n                 let mut listener = TcpListener::bind(addr);\n-                for int::range(0, MAX) |i| {\n+                foreach i in range(0, MAX) {\n                     let stream = Cell::new(listener.accept());\n                     rtdebug!(\"accepted\");\n                     // Start another task to handle the connection\n@@ -460,7 +460,7 @@ mod test {\n \n             do spawntask {\n                 let mut listener = TcpListener::bind(addr);\n-                for int::range(0, MAX) |i| {\n+                foreach i in range(0, MAX) {\n                     let stream = Cell::new(listener.accept());\n                     rtdebug!(\"accepted\");\n                     // Start another task to handle the connection\n@@ -499,7 +499,7 @@ mod test {\n \n             do spawntask {\n                 let mut listener = TcpListener::bind(addr);\n-                for int::range(0, MAX) |_| {\n+                foreach _ in range(0, MAX) {\n                     let stream = Cell::new(listener.accept());\n                     rtdebug!(\"accepted\");\n                     // Start another task to handle the connection\n@@ -537,7 +537,7 @@ mod test {\n \n             do spawntask {\n                 let mut listener = TcpListener::bind(addr);\n-                for int::range(0, MAX) |_| {\n+                foreach _ in range(0, MAX) {\n                     let stream = Cell::new(listener.accept());\n                     rtdebug!(\"accepted\");\n                     // Start another task to handle the connection"}, {"sha": "3f394283bce7b4a0192bfc4bc0dc72b38f416f99", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -723,13 +723,12 @@ impl ClosureConverter for UnsafeTaskReceiver {\n \n #[cfg(test)]\n mod test {\n+    use prelude::*;\n     use rt::test::*;\n     use unstable::run_in_bare_thread;\n     use borrow::to_uint;\n     use rt::local::*;\n     use rt::sched::{Scheduler};\n-    use uint;\n-    use int;\n     use cell::Cell;\n     use rt::thread::Thread;\n     use rt::task::{Task, Sched};\n@@ -752,7 +751,7 @@ mod test {\n         let mut task_run_count = 0;\n         let task_run_count_ptr: *mut uint = &mut task_run_count;\n         do run_in_newsched_task || {\n-            for uint::range(0,total) |_| {\n+            foreach _ in range(0u, total) {\n                 do spawntask || {\n                     unsafe { *task_run_count_ptr = *task_run_count_ptr + 1};\n                 }\n@@ -951,7 +950,7 @@ mod test {\n     #[test]\n     fn test_stress_schedule_task_states() {\n         let n = stress_factor() * 120;\n-        for int::range(0,n as int) |_| {\n+        foreach _ in range(0, n as int) {\n             test_schedule_home_states();\n         }\n     }"}, {"sha": "a5adb25b526a939bdba14960badcfe2c2186785e", "filename": "src/libstd/rt/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fselect.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -111,6 +111,7 @@ mod test {\n     use comm::GenericChan;\n     use task;\n     use cell::Cell;\n+    use iterator::{Iterator, range};\n \n     #[test] #[ignore(cfg(windows))] #[should_fail]\n     fn select_doesnt_get_trolled() {\n@@ -263,7 +264,6 @@ mod test {\n         select_racing_senders_helper(false, ~[7,8,9]);\n \n         fn select_racing_senders_helper(killable: bool, send_on_chans: ~[uint]) {\n-            use uint;\n             use rt::test::spawntask_random;\n \n             do run_in_newsched_task {\n@@ -272,7 +272,7 @@ mod test {\n                     let send_on_chans = send_on_chans.clone();\n                     do task::spawn {\n                         let mut ports = ~[];\n-                        for uint::range(0, NUM_CHANS) |i| {\n+                        foreach i in range(0u, NUM_CHANS) {\n                             let (p,c) = oneshot();\n                             ports.push(p);\n                             if send_on_chans.contains(&i) {"}, {"sha": "1ed0703de4d372b16412ee51b1e8fec8c6864380", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -14,7 +14,7 @@ use option::{Some, None};\n use cell::Cell;\n use clone::Clone;\n use container::Container;\n-use iterator::Iterator;\n+use iterator::{Iterator, range};\n use vec::{OwnedVector, MutableVector};\n use super::io::net::ip::{IpAddr, Ipv4, Ipv6};\n use rt::sched::Scheduler;\n@@ -90,7 +90,7 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n         let mut handles = ~[];\n         let mut scheds = ~[];\n \n-        for uint::range(0, nthreads) |_| {\n+        foreach _ in range(0u, nthreads) {\n             let loop_ = ~UvEventLoop::new();\n             let mut sched = ~Scheduler::new(loop_,\n                                             work_queue.clone(),"}, {"sha": "c014d0abda2a82797ef146fc476240d96a1ee12f", "filename": "src/libstd/rt/tube.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Ftube.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Ftube.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftube.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -88,13 +88,13 @@ impl<T> Clone for Tube<T> {\n \n #[cfg(test)]\n mod test {\n-    use int;\n     use cell::Cell;\n     use rt::test::*;\n     use rt::rtio::EventLoop;\n     use rt::sched::Scheduler;\n     use rt::local::Local;\n     use super::*;\n+    use prelude::*;\n \n     #[test]\n     fn simple_test() {\n@@ -166,7 +166,7 @@ mod test {\n                 sched.enqueue_blocked_task(task);\n             }\n \n-            for int::range(0, MAX) |i| {\n+            foreach i in range(0, MAX) {\n                 let j = tube.recv();\n                 assert!(j == i);\n             }"}, {"sha": "e15e3adb8c9f3db551709af7c47b5d125be6e160", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -31,11 +31,11 @@ use str::StrSlice;\n use unstable::sync::Exclusive;\n \n #[cfg(test)] use container::Container;\n-#[cfg(test)] use uint;\n #[cfg(test)] use unstable::run_in_bare_thread;\n #[cfg(test)] use rt::test::{spawntask,\n                             next_test_ip4,\n                             run_in_newsched_task};\n+#[cfg(test)] use iterator::{Iterator, range};\n \n enum SocketNameKind {\n     TcpPeer,\n@@ -843,7 +843,7 @@ fn test_simple_tcp_server_and_client() {\n                 let mut buf = [0, .. 2048];\n                 let nread = stream.read(buf).unwrap();\n                 assert_eq!(nread, 8);\n-                for uint::range(0, nread) |i| {\n+                foreach i in range(0u, nread) {\n                     rtdebug!(\"%u\", buf[i] as uint);\n                     assert_eq!(buf[i], i as u8);\n                 }\n@@ -873,7 +873,7 @@ fn test_simple_udp_server_and_client() {\n                 let mut buf = [0, .. 2048];\n                 let (nread,src) = server_socket.recvfrom(buf).unwrap();\n                 assert_eq!(nread, 8);\n-                for uint::range(0, nread) |i| {\n+                foreach i in range(0u, nread) {\n                     rtdebug!(\"%u\", buf[i] as uint);\n                     assert_eq!(buf[i], i as u8);\n                 }\n@@ -908,7 +908,7 @@ fn test_read_and_block() {\n \n             while current < expected {\n                 let nread = stream.read(buf).unwrap();\n-                for uint::range(0, nread) |i| {\n+                foreach i in range(0u, nread) {\n                     let val = buf[i] as uint;\n                     assert_eq!(val, current % 8);\n                     current += 1;\n@@ -973,7 +973,7 @@ fn test_read_read_read() {\n                     let nread = stream.read(buf).unwrap();\n                     rtdebug!(\"read %u bytes\", nread as uint);\n                     total_bytes_read += nread;\n-                    for uint::range(0, nread) |i| {\n+                    foreach i in range(0u, nread) {\n                         assert_eq!(buf[i], 1);\n                     }\n                 }\n@@ -1065,7 +1065,7 @@ fn test_udp_many_read() {\n                     let (nread, src) = res.unwrap();\n                     assert_eq!(src, server_out_addr);\n                     total_bytes_recv += nread;\n-                    for uint::range(0, nread) |i| {\n+                    foreach i in range(0u, nread) {\n                         assert_eq!(buf[i], 1);\n                     }\n                 }"}, {"sha": "8af5a6dfac7edbfc29bee14be2cf26f650c780d3", "filename": "src/libstd/run.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -574,9 +574,6 @@ fn zeroed_process_information() -> libc::types::os::arch::extra::PROCESS_INFORMA\n // FIXME: this is only pub so it can be tested (see issue #4536)\n #[cfg(windows)]\n pub fn make_command_line(prog: &str, args: &[~str]) -> ~str {\n-\n-    use uint;\n-\n     let mut cmd = ~\"\";\n     append_arg(&mut cmd, prog);\n     foreach arg in args.iter() {\n@@ -590,7 +587,7 @@ pub fn make_command_line(prog: &str, args: &[~str]) -> ~str {\n         if quote {\n             cmd.push_char('\"');\n         }\n-        for uint::range(0, arg.len()) |i| {\n+        foreach i in range(0u, arg.len()) {\n             append_char_at(cmd, arg, i);\n         }\n         if quote {"}, {"sha": "97e2b3b3c34ea7e67bea68e73368f7f261ed44b8", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -261,7 +261,7 @@ impl<T> TrieNode<T> {\n \n impl<T> TrieNode<T> {\n     fn each<'a>(&'a self, f: &fn(&uint, &'a T) -> bool) -> bool {\n-        for uint::range(0, self.children.len()) |idx| {\n+        foreach idx in range(0u, self.children.len()) {\n             match self.children[idx] {\n                 Internal(ref x) => if !x.each(|i,t| f(i,t)) { return false },\n                 External(k, ref v) => if !f(&k, v) { return false },\n@@ -396,7 +396,7 @@ pub fn check_integrity<T>(trie: &TrieNode<T>) {\n #[cfg(test)]\n mod test_map {\n     use super::*;\n-    use option::{Some, None};\n+    use prelude::*;\n     use uint;\n \n     #[test]\n@@ -429,7 +429,7 @@ mod test_map {\n             check_integrity(&trie.root);\n         }\n \n-        for uint::range(0, n) |x| {\n+        foreach x in range(0u, n) {\n             assert!(trie.contains_key(&x));\n             assert!(!trie.insert(x, x + 1));\n             check_integrity(&trie.root);"}, {"sha": "4b5c72e5a8634136f944b0d2bff3083ea72ae191", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -436,9 +436,9 @@ mod tests {\n     use cell::Cell;\n     use comm;\n     use option::*;\n+    use prelude::*;\n     use super::{Exclusive, UnsafeAtomicRcBox, atomically};\n     use task;\n-    use uint;\n     use util;\n \n     #[test]\n@@ -458,13 +458,13 @@ mod tests {\n \n             let total = Exclusive::new(~0);\n \n-            for uint::range(0, num_tasks) |_i| {\n+            foreach _ in range(0u, num_tasks) {\n                 let total = total.clone();\n                 let (port, chan) = comm::stream();\n                 futures.push(port);\n \n                 do task::spawn || {\n-                    for uint::range(0, count) |_i| {\n+                    foreach _ in range(0u, count) {\n                         do total.with |count| {\n                             **count += 1;\n                         }"}, {"sha": "ad5ded2002a2d95c0d8e608e701228cceaa61a74", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -473,7 +473,7 @@ pub fn each_permutation<T:Clone>(values: &[T], fun: &fn(perm : &[T]) -> bool) ->\n         indices.swap(k, l);\n         indices.mut_slice(k+1, length).reverse();\n         // fixup permutation based on indices\n-        for uint::range(k, length) |i| {\n+        foreach i in range(k, length) {\n             permutation[i] = values[indices[i]].clone();\n         }\n     }\n@@ -1461,7 +1461,7 @@ impl<T> OwnedVector<T> for ~[T] {\n             assert!(newlen <= oldlen);\n             unsafe {\n                 // This loop is optimized out for non-drop types.\n-                for uint::range(newlen, oldlen) |i| {\n+                foreach i in range(newlen, oldlen) {\n                     ptr::read_and_zero_ptr(ptr::mut_offset(p, i as int));\n                 }\n             }\n@@ -1477,7 +1477,7 @@ impl<T> OwnedVector<T> for ~[T] {\n         let len = self.len();\n         let mut deleted: uint = 0;\n \n-        for uint::range(0, len) |i| {\n+        foreach i in range(0u, len) {\n             if !f(&self[i]) {\n                 deleted += 1;\n             } else if deleted > 0 {\n@@ -1561,7 +1561,7 @@ impl<T:Clone> OwnedCopyableVector<T> for ~[T] {\n         let new_len = self.len() + rhs.len();\n         self.reserve(new_len);\n \n-        for uint::range(0u, rhs.len()) |i| {\n+        foreach i in range(0u, rhs.len()) {\n             self.push(unsafe { raw::get(rhs, i) })\n         }\n     }"}, {"sha": "04b9fdce666e81a0bb8ec0e69a93ec80bef0d206", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -22,7 +22,6 @@ source code snippets, etc.\n */\n \n use std::cmp;\n-use std::uint;\n use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub trait Pos {\n@@ -364,7 +363,7 @@ impl CodeMap {\n         let lo = self.lookup_char_pos(sp.lo);\n         let hi = self.lookup_char_pos(sp.hi);\n         let mut lines = ~[];\n-        for uint::range(lo.line - 1u, hi.line as uint) |i| {\n+        foreach i in range(lo.line - 1u, hi.line as uint) {\n             lines.push(i);\n         };\n         return @FileLines {file: lo.file, lines: lines};"}, {"sha": "01f55e8c4f4b8858b0d1545dbe37490b767df5eb", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -12,7 +12,6 @@ use codemap::{Pos, span};\n use codemap;\n \n use std::io;\n-use std::uint;\n use std::local_data;\n use extra::term;\n \n@@ -306,7 +305,7 @@ fn highlight_lines(cm: @codemap::CodeMap,\n             s.push_char(' ');\n         }\n         let orig = fm.get_line(lines.lines[0] as int);\n-        for uint::range(0u,left-skip) |pos| {\n+        foreach pos in range(0u, left-skip) {\n             let curChar = (orig[pos] as char);\n             // Whenever a tab occurs on the previous line, we insert one on\n             // the error-point-squiggly-line as well (instead of a space)."}, {"sha": "77b5bf5bf2ca6cc31922dde33d5cc07d8796366e", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -14,7 +14,6 @@ encodable.rs for more.\n */\n \n use std::vec;\n-use std::uint;\n \n use ast::{MetaItem, item, expr, m_mutbl};\n use codemap::span;\n@@ -84,7 +83,7 @@ fn decodable_substructure(cx: @ExtCtxt, span: span,\n                         cx.expr_ident(span, substr.type_ident)\n                     } else {\n                         let mut fields = vec::with_capacity(n);\n-                        for uint::range(0, n) |i| {\n+                        foreach i in range(0, n) {\n                             fields.push(getarg(fmt!(\"_field%u\", i).to_managed(), i));\n                         }\n                         cx.expr_call_ident(span, substr.type_ident, fields)\n@@ -126,7 +125,7 @@ fn decodable_substructure(cx: @ExtCtxt, span: span,\n                             cx.expr_ident(span, name)\n                         } else {\n                             let mut fields = vec::with_capacity(n);\n-                            for uint::range(0, n) |i| {\n+                            foreach i in range(0u, n) {\n                                 fields.push(getarg(i));\n                             }\n                             cx.expr_call_ident(span, name, fields)"}, {"sha": "715e3013444a440a247c6f698e865c85fb3e2031", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -170,7 +170,6 @@ use ext::build::AstBuilder;\n use codemap::{span,respan};\n use opt_vec;\n \n-use std::uint;\n use std::vec;\n \n pub use self::ty::*;\n@@ -580,13 +579,13 @@ impl<'self> MethodDef<'self> {\n         let mut raw_fields = ~[]; // ~[[fields of self],\n                                  // [fields of next Self arg], [etc]]\n         let mut patterns = ~[];\n-        for uint::range(0, self_args.len()) |i| {\n+        foreach i in range(0u, self_args.len()) {\n             let (pat, ident_expr) = create_struct_pattern(cx, span,\n                                                           type_ident, struct_def,\n                                                           fmt!(\"__self_%u\", i), ast::m_imm);\n             patterns.push(pat);\n             raw_fields.push(ident_expr);\n-        };\n+        }\n \n         // transpose raw_fields\n         let fields = match raw_fields {\n@@ -992,7 +991,7 @@ fn create_enum_variant_pattern(cx: @ExtCtxt,\n \n             let mut paths = ~[];\n             let mut ident_expr = ~[];\n-            for uint::range(0, variant_args.len()) |i| {\n+            foreach i in range(0u, variant_args.len()) {\n                 let path = cx.path_ident(span,\n                                          cx.ident_of(fmt!(\"%s_%u\", prefix, i)));\n "}, {"sha": "982e605af2221835b0f3b057ed2123cd09ccb417", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -21,7 +21,6 @@ use parse::token::{Token, EOF, to_str, nonterminal, get_ident_interner, ident_to\n use parse::token;\n \n use std::hashmap::HashMap;\n-use std::uint;\n use std::vec;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,\n@@ -280,7 +279,7 @@ pub fn parse(\n                         // most of the time.\n \n                         // Only touch the binders we have actually bound\n-                        for uint::range(ei.match_lo, ei.match_hi) |idx| {\n+                        foreach idx in range(ei.match_lo, ei.match_hi) {\n                             let sub = ei.matches[idx].clone();\n                             new_pos.matches[idx]\n                                 .push(@matched_seq(sub,\n@@ -321,7 +320,7 @@ pub fn parse(\n                         let mut new_ei = ei.clone();\n                         new_ei.idx += 1u;\n                         //we specifically matched zero repeats.\n-                        for uint::range(match_idx_lo, match_idx_hi) |idx| {\n+                        foreach idx in range(match_idx_lo, match_idx_hi) {\n                             new_ei.matches[idx].push(@matched_seq(~[], sp));\n                         }\n "}, {"sha": "d24dd86fda10dd3a7230c4681d459106325dfe05", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -29,7 +29,6 @@ use print::pprust;\n \n use std::io;\n use std::u64;\n-use std::uint;\n \n // The @ps is stored here to prevent recursive type.\n pub enum ann_node<'self> {\n@@ -1791,7 +1790,7 @@ pub fn print_generics(s: @ps, generics: &ast::Generics) {\n         }\n \n         let mut ints = ~[];\n-        for uint::range(0, total) |i| {\n+        foreach i in range(0u, total) {\n             ints.push(i);\n         }\n "}, {"sha": "7cdfcf64bb9db17dc4f273bfaf9d5b1dc74ea0d4", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -17,7 +17,7 @@ pub mod kitties {\n     }\n \n     impl cat {\n-        priv fn nap(&self) { for uint::range(1, 10000u) |_i|{}}\n+        priv fn nap(&self) {}\n     }\n \n     pub fn cat(in_x : uint, in_y : int) -> cat {"}, {"sha": "922a518a382641fc7f852fe3492f742eef7ee8f0", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -31,19 +31,19 @@ fn ascending<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint) {\n     io::println(\" Ascending integers:\");\n \n     do timed(\"insert\") {\n-        for uint::range(0, n_keys) |i| {\n+        foreach i in range(0u, n_keys) {\n             map.insert(i, i + 1);\n         }\n     }\n \n     do timed(\"search\") {\n-        for uint::range(0, n_keys) |i| {\n+        foreach i in range(0u, n_keys) {\n             assert_eq!(map.find(&i).unwrap(), &(i + 1));\n         }\n     }\n \n     do timed(\"remove\") {\n-        for uint::range(0, n_keys) |i| {\n+        foreach i in range(0, n_keys) {\n             assert!(map.remove(&i));\n         }\n     }\n@@ -74,19 +74,19 @@ fn descending<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint) {\n fn vector<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint, dist: &[uint]) {\n \n     do timed(\"insert\") {\n-        for uint::range(0, n_keys) |i| {\n+        foreach i in range(0u, n_keys) {\n             map.insert(dist[i], i + 1);\n         }\n     }\n \n     do timed(\"search\") {\n-        for uint::range(0, n_keys) |i| {\n+        foreach i in range(0u, n_keys) {\n             assert_eq!(map.find(&dist[i]).unwrap(), &(i + 1));\n         }\n     }\n \n     do timed(\"remove\") {\n-        for uint::range(0, n_keys) |i| {\n+        foreach i in range(0u, n_keys) {\n             assert!(map.remove(&dist[i]));\n         }\n     }"}, {"sha": "c6234f40cfc13ebc997e5287cdab6462faa3a484", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -46,11 +46,11 @@ impl Results {\n         {\n             let mut set = f();\n             do timed(&mut self.sequential_ints) {\n-                for uint::range(0, num_keys) |i| {\n+                foreach i in range(0u, num_keys) {\n                     set.insert(i);\n                 }\n \n-                for uint::range(0, num_keys) |i| {\n+                foreach i in range(0u, num_keys) {\n                     assert!(set.contains(&i));\n                 }\n             }\n@@ -67,12 +67,12 @@ impl Results {\n \n         {\n             let mut set = f();\n-            for uint::range(0, num_keys) |i| {\n+            foreach i in range(0u, num_keys) {\n                 set.insert(i);\n             }\n \n             do timed(&mut self.delete_ints) {\n-                for uint::range(0, num_keys) |i| {\n+                foreach i in range(0u, num_keys) {\n                     assert!(set.remove(&i));\n                 }\n             }\n@@ -88,12 +88,12 @@ impl Results {\n         {\n             let mut set = f();\n             do timed(&mut self.sequential_strings) {\n-                for uint::range(0, num_keys) |i| {\n+                foreach i in range(0u, num_keys) {\n                     let s = uint::to_str(i);\n                     set.insert(s);\n                 }\n \n-                for uint::range(0, num_keys) |i| {\n+                foreach i in range(0u, num_keys) {\n                     let s = uint::to_str(i);\n                     assert!(set.contains(&s));\n                 }\n@@ -112,11 +112,11 @@ impl Results {\n \n         {\n             let mut set = f();\n-            for uint::range(0, num_keys) |i| {\n+            foreach i in range(0u, num_keys) {\n                 set.insert(uint::to_str(i));\n             }\n             do timed(&mut self.delete_strings) {\n-                for uint::range(0, num_keys) |i| {\n+                foreach i in range(0u, num_keys) {\n                     assert!(set.remove(&uint::to_str(i)));\n                 }\n             }"}, {"sha": "100d9d673faf7302e594f59f552def62f45062a7", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -74,7 +74,7 @@ fn read_line() {\n     let path = Path(env!(\"CFG_SRC_DIR\"))\n         .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n \n-    for int::range(0, 3) |_i| {\n+    foreach _ in range(0, 3) {\n         let reader = io::file_reader(&path).unwrap();\n         while !reader.eof() {\n             reader.read_line();\n@@ -119,7 +119,7 @@ fn vec_push_all() {\n     let mut r = rand::rng();\n \n     let mut v = ~[];\n-    for uint::range(0, 1500) |i| {\n+    foreach i in range(0u, 1500) {\n         let mut rv = vec::from_elem(r.gen_uint_range(0, i + 1), i);\n         if r.gen() {\n             v.push_all(rv);\n@@ -133,7 +133,7 @@ fn vec_push_all() {\n \n fn is_utf8_ascii() {\n     let mut v : ~[u8] = ~[];\n-    for uint::range(0, 20000) |_| {\n+    foreach _ in range(0u, 20000) {\n         v.push('b' as u8);\n         if !str::is_utf8(v) {\n             fail!(\"is_utf8 failed\");\n@@ -144,7 +144,7 @@ fn is_utf8_ascii() {\n fn is_utf8_multibyte() {\n     let s = \"b\u00a2\u20ac\ud852\udf62\";\n     let mut v : ~[u8]= ~[];\n-    for uint::range(0, 5000) |_| {\n+    foreach _ in range(0u, 5000) {\n         v.push_all(s.as_bytes());\n         if !str::is_utf8(v) {\n             fail!(\"is_utf8 failed\");"}, {"sha": "3e975e8f025d79f741c82cf5ff9bc0a891d95168", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -23,7 +23,7 @@ fn main() {\n \n     let n = uint::from_str(args[1]).get();\n \n-    for uint::range(0u, n) |i| {\n+    foreach i in range(0u, n) {\n         let x = uint::to_str(i);\n         info!(x);\n     }"}, {"sha": "77d7dd868da9f3f97d2520ac06455e4e3df29999", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -64,12 +64,12 @@ fn run(args: &[~str]) {\n     let num_bytes = 100;\n     let start = extra::time::precise_time_s();\n     let mut worker_results = ~[];\n-    for uint::range(0, workers) |_i| {\n+    foreach _ in range(0u, workers) {\n         let to_child = to_child.clone();\n         let mut builder = task::task();\n         builder.future_result(|r| worker_results.push(r));\n         do builder.spawn {\n-            for uint::range(0, size / workers) |_i| {\n+            foreach _ in range(0u, size / workers) {\n                 //error!(\"worker %?: sending %? bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }"}, {"sha": "70d94c27375f151d4200329746bc6a813418131b", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -58,12 +58,12 @@ fn run(args: &[~str]) {\n     let num_bytes = 100;\n     let start = extra::time::precise_time_s();\n     let mut worker_results = ~[];\n-    for uint::range(0, workers) |_i| {\n+    foreach _ in range(0u, workers) {\n         let to_child = to_child.clone();\n         let mut builder = task::task();\n         builder.future_result(|r| worker_results.push(r));\n         do builder.spawn {\n-            for uint::range(0, size / workers) |_i| {\n+            foreach _ in range(0u, size / workers) {\n                 //error!(\"worker %?: sending %? bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }"}, {"sha": "626fa25766bdb87536258588941bcb893119ddcd", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -57,7 +57,7 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n     let mut num_chan = Some(num_chan);\n     let mut num_port = Some(num_port);\n     // Send/Receive lots of messages.\n-    for uint::range(0u, count) |j| {\n+    foreach j in range(0u, count) {\n         //error!(\"task %?, iter %?\", i, j);\n         let num_chan2 = num_chan.take_unwrap();\n         let num_port2 = num_port.take_unwrap();\n@@ -90,7 +90,7 @@ fn main() {\n     // create the ring\n     let mut futures = ~[];\n \n-    for uint::range(1u, num_tasks) |i| {\n+    foreach i in range(1u, num_tasks) {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n         let num_chan2 = Cell::new(num_chan.take());"}, {"sha": "1a92b8b2fe86be967e6c97f7e448e406c6b094e4", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -53,7 +53,7 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n     let mut num_chan = Some(num_chan);\n     let mut num_port = Some(num_port);\n     // Send/Receive lots of messages.\n-    for uint::range(0u, count) |j| {\n+    foreach j in range(0u, count) {\n         //error!(\"task %?, iter %?\", i, j);\n         let num_chan2 = num_chan.take_unwrap();\n         let num_port2 = num_port.take_unwrap();\n@@ -86,7 +86,7 @@ fn main() {\n     // create the ring\n     let mut futures = ~[];\n \n-    for uint::range(1u, num_tasks) |i| {\n+    foreach i in range(1u, num_tasks) {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n         let num_chan2 = Cell::new(num_chan.take());"}, {"sha": "6a5f3623d0fac3cbc715715a3bd64aa8fb1f3491", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -38,11 +38,11 @@ impl Noise2DContext {\n     pub fn new() -> Noise2DContext {\n         let mut r = rand::rng();\n         let mut rgradients = [ Vec2 { x: 0.0, y: 0.0 }, ..256 ];\n-        for int::range(0, 256) |i| {\n+        foreach i in range(0, 256) {\n             rgradients[i] = random_gradient(&mut r);\n         }\n         let mut permutations = [ 0, ..256 ];\n-        for int::range(0, 256) |i| {\n+        foreach i in range(0, 256) {\n             permutations[i] = i;\n         }\n         r.shuffle_mut(permutations);\n@@ -106,8 +106,8 @@ fn main() {\n     let mut pixels = [0f32, ..256*256];\n     let n2d = ~Noise2DContext::new();\n     do 100.times {\n-        for int::range(0, 256) |y| {\n-            for int::range(0, 256) |x| {\n+        foreach y in range(0, 256) {\n+            foreach x in range(0, 256) {\n                 let v = n2d.get(\n                     x as f32 * 0.1f32,\n                     y as f32 * 0.1f32\n@@ -117,8 +117,8 @@ fn main() {\n         };\n     };\n \n-    for int::range(0, 256) |y| {\n-        for int::range(0, 256) |x| {\n+    foreach y in range(0, 256) {\n+        foreach x in range(0, 256) {\n             print(symbols[pixels[y*256+x] / 0.2f32 as int]);\n         }\n         println(\"\");"}, {"sha": "d8766fdd643493b8ad621b67db711204aba30c77", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -1,5 +1,4 @@\n use std::from_str::FromStr;\n-use std::i32::range;\n use std::os;\n use std::vec::MutableVector;\n use std::vec;\n@@ -42,7 +41,7 @@ fn fannkuch_redux(n: i32) -> i32 {\n                 }\n \n                 let k2 = (k+1) >> 1;\n-                for range(0, k2) |i| {\n+                foreach i in range(0i32, k2) {\n                     let (perm_i, perm_k_i) = {\n                         (perm.unsafe_get(i as uint),\n                             perm.unsafe_get((k-i) as uint))"}, {"sha": "b5336add4e4c5836af12e47ec384ce66de023c9c", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -2,7 +2,7 @@ use std::cast::transmute;\n use std::from_str::FromStr;\n use std::libc::{FILE, STDOUT_FILENO, c_int, fdopen, fputc, fputs, fwrite, size_t};\n use std::os;\n-use std::uint::{min, range};\n+use std::uint::min;\n use std::vec::bytes::copy_memory;\n use std::vec;\n \n@@ -165,7 +165,7 @@ impl RandomFasta {\n             let mut buf = [0, ..LINE_LEN + 1];\n \n             do lines.times {\n-                for range(0, LINE_LEN) |i| {\n+                foreach i in range(0u, LINE_LEN) {\n                     buf[i] = self.nextc();\n                 }\n                 buf[LINE_LEN] = '\\n' as u8;\n@@ -174,7 +174,7 @@ impl RandomFasta {\n                        1,\n                        self.stdout);\n             }\n-            for range(0, chars_left) |i| {\n+            foreach i in range(0u, chars_left) {\n                 buf[i] = self.nextc();\n             }\n             fwrite(transmute(&buf[0]), chars_left as size_t, 1, self.stdout);"}, {"sha": "6cee2c4e5ffea2c4350b1114120d1def268f8126", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -81,7 +81,7 @@ fn make_random_fasta(wr: @io::Writer,\n         last: rng.next()\n     };\n     let mut op: ~str = ~\"\";\n-    for uint::range(0u, n as uint) |_i| {\n+    foreach _ in range(0u, n as uint) {\n         op.push_char(select_random(myrandom_next(rng, 100u32),\n                                    genelist.clone()));\n         if op.len() >= LINE_LENGTH {\n@@ -96,7 +96,7 @@ fn make_repeat_fasta(wr: @io::Writer, id: ~str, desc: ~str, s: ~str, n: int) {\n     wr.write_line(~\">\" + id + \" \" + desc);\n     let mut op = str::with_capacity( LINE_LENGTH );\n     let sl = s.len();\n-    for uint::range(0u, n as uint) |i| {\n+    foreach i in range(0u, n as uint) {\n         if (op.len() >= LINE_LENGTH) {\n             wr.write_line( op );\n             op = str::with_capacity( LINE_LENGTH );"}, {"sha": "34e979b506bbcfbf415655fb558d591ee1d008bc", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -44,7 +44,7 @@ impl Code {\n \n     fn pack(string: &str) -> Code {\n         let mut code = Code(0u64);\n-        for uint::range(0, string.len()) |i| {\n+        foreach i in range(0u, string.len()) {\n             code = code.push_char(string[i]);\n         }\n         code"}, {"sha": "b46aa4b1dd53d97fc7c509559fdbd7a6069f842f", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -1,6 +1,5 @@\n use std::cast::transmute;\n use std::from_str::FromStr;\n-use std::i32::range;\n use std::libc::{STDOUT_FILENO, c_int, fdopen, fputc};\n use std::os;\n \n@@ -20,17 +19,17 @@ fn main() {\n         let mode = \"w\";\n         let stdout = fdopen(STDOUT_FILENO as c_int, transmute(&mode[0]));\n \n-        for range(0, h) |y| {\n+        foreach y in range(0i32, h) {\n             let y = y as f64;\n-            for range(0, w) |x| {\n+            foreach x in range(0i32, w) {\n                 let mut Zr = 0f64;\n                 let mut Zi = 0f64;\n                 let mut Tr = 0f64;\n                 let mut Ti = 0f64;\n                 let Cr = 2.0 * (x as f64) / (w as f64) - 1.5;\n                 let Ci = 2.0 * (y as f64) / (h as f64) - 1.0;\n \n-                for range(0, ITER as i32) |_| {\n+                foreach _ in range(0i32, ITER as i32) {\n                     if Tr + Ti > LIMIT * LIMIT {\n                         break;\n                     }"}, {"sha": "8011f4bda03771d1d93413ffa420af0c4fb3c541", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -1,6 +1,5 @@\n use std::from_str::FromStr;\n use std::os;\n-use std::uint::range;\n \n static PI: f64 = 3.141592653589793;\n static SOLAR_MASS: f64 = 4.0 * PI * PI;\n@@ -81,8 +80,8 @@ struct Planet {\n fn advance(bodies: &mut [Planet, ..N_BODIES], dt: f64, steps: i32) {\n     let mut d = [ 0.0, ..3 ];\n     do (steps as uint).times {\n-        for range(0, N_BODIES) |i| {\n-            for range(i + 1, N_BODIES) |j| {\n+        foreach i in range(0u, N_BODIES) {\n+            foreach j in range(i + 1, N_BODIES) {\n                 d[0] = bodies[i].x[0] - bodies[j].x[0];\n                 d[1] = bodies[i].x[1] - bodies[j].x[1];\n                 d[2] = bodies[i].x[2] - bodies[j].x[2];\n@@ -113,13 +112,13 @@ fn advance(bodies: &mut [Planet, ..N_BODIES], dt: f64, steps: i32) {\n fn energy(bodies: &[Planet, ..N_BODIES]) -> f64 {\n     let mut e = 0.0;\n     let mut d = [ 0.0, ..3 ];\n-    for range(0, N_BODIES) |i| {\n-        for range(0, 3) |k| {\n+    foreach i in range(0u, N_BODIES) {\n+        foreach k in range(0u, 3) {\n             e += bodies[i].mass * bodies[i].v[k] * bodies[i].v[k] / 2.0;\n         }\n \n-        for range(i + 1, N_BODIES) |j| {\n-            for range(0, 3) |k| {\n+        foreach j in range(i + 1, N_BODIES) {\n+            foreach k in range(0u, 3) {\n                 d[k] = bodies[i].x[k] - bodies[j].x[k];\n             }\n             let dist = (d[0]*d[0] + d[1]*d[1] + d[2]*d[2]).sqrt();\n@@ -130,8 +129,8 @@ fn energy(bodies: &[Planet, ..N_BODIES]) -> f64 {\n }\n \n fn offset_momentum(bodies: &mut [Planet, ..N_BODIES]) {\n-    for range(0, N_BODIES) |i| {\n-        for range(0, 3) |k| {\n+    foreach i in range(0u, N_BODIES) {\n+        foreach k in range(0u, 3) {\n             bodies[0].v[k] -= bodies[i].v[k] * bodies[i].mass / SOLAR_MASS;\n         }\n     }"}, {"sha": "b27b8395470f526e30c500a56e755e282230b3d1", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -23,7 +23,6 @@ extern mod extra;\n \n use extra::{time, getopts};\n use std::comm::*;\n-use std::int::range;\n use std::io::WriterUtil;\n use std::io;\n use std::os;\n@@ -84,7 +83,7 @@ fn stress_task(id: int) {\n \n fn stress(num_tasks: int) {\n     let mut results = ~[];\n-    for range(0, num_tasks) |i| {\n+    foreach i in range(0, num_tasks) {\n         let mut builder = task::task();\n         builder.future_result(|r| results.push(r));\n         do builder.spawn {\n@@ -117,8 +116,8 @@ fn main() {\n \n         let out = io::stdout();\n \n-        for range(1, max + 1) |n| {\n-            for range(0, num_trials) |_i| {\n+        foreach n in range(1, max + 1) {\n+            foreach _ in range(0, num_trials) {\n                 let start = time::precise_time_ns();\n                 let fibn = fib(n);\n                 let stop = time::precise_time_ns();"}, {"sha": "47efd076ef2632178b5ade54bc351cfd7e55885b", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -19,13 +19,13 @@ use std::os;\n use std::uint;\n \n fn append_sequential(min: uint, max: uint, map: &mut SmallIntMap<uint>) {\n-    for uint::range(min, max) |i| {\n+    foreach i in range(min, max) {\n         map.insert(i, i + 22u);\n     }\n }\n \n fn check_sequential(min: uint, max: uint, map: &SmallIntMap<uint>) {\n-    for uint::range(min, max) |i| {\n+    foreach i in range(min, max) {\n         assert_eq!(*map.get(&i), i + 22u);\n     }\n }\n@@ -45,7 +45,7 @@ fn main() {\n     let mut checkf = 0.0;\n     let mut appendf = 0.0;\n \n-    for uint::range(0u, rep) |_r| {\n+    foreach _ in range(0u, rep) {\n         let mut map = SmallIntMap::new();\n         let start = extra::time::precise_time_s();\n         append_sequential(0u, max, &mut map);"}, {"sha": "a14a63cd3a042936a46f620675e101dd8204c2e3", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -56,8 +56,8 @@ impl Sudoku {\n     }\n \n     pub fn equal(&self, other: &Sudoku) -> bool {\n-        for u8::range(0u8, 9u8) |row| {\n-            for u8::range(0u8, 9u8) |col| {\n+        foreach row in range(0u8, 9u8) {\n+            foreach col in range(0u8, 9u8) {\n                 if self.grid[row][col] != other.grid[row][col] {\n                     return false;\n                 }\n@@ -87,9 +87,9 @@ impl Sudoku {\n     }\n \n     pub fn write(&self, writer: @io::Writer) {\n-        for u8::range(0u8, 9u8) |row| {\n+        foreach row in range(0u8, 9u8) {\n             writer.write_str(fmt!(\"%u\", self.grid[row][0] as uint));\n-            for u8::range(1u8, 9u8) |col| {\n+            foreach col in range(1u8, 9u8) {\n                 writer.write_str(fmt!(\" %u\", self.grid[row][col] as uint));\n             }\n             writer.write_char('\\n');\n@@ -99,8 +99,8 @@ impl Sudoku {\n     // solve sudoku grid\n     pub fn solve(&mut self) {\n         let mut work: ~[(u8, u8)] = ~[]; /* queue of uncolored fields */\n-        for u8::range(0u8, 9u8) |row| {\n-            for u8::range(0u8, 9u8) |col| {\n+        foreach row in range(0u8, 9u8) {\n+            foreach col in range(0u8, 9u8) {\n                 let color = self.grid[row][col];\n                 if color == 0u8 {\n                     work.push((row, col));\n@@ -143,16 +143,18 @@ impl Sudoku {\n \n     // find colors available in neighbourhood of (row, col)\n     fn drop_colors(&mut self, avail: &mut Colors, row: u8, col: u8) {\n-        for u8::range(0u8, 9u8) |idx| {\n+        foreach idx in range(0u8, 9u8) {\n             avail.remove(self.grid[idx][col]); /* check same column fields */\n             avail.remove(self.grid[row][idx]); /* check same row fields */\n         }\n \n         // check same block fields\n         let row0 = (row / 3u8) * 3u8;\n         let col0 = (col / 3u8) * 3u8;\n-        for u8::range(row0, row0 + 3u8) |alt_row| {\n-            for u8::range(col0, col0 + 3u8) |alt_col| { avail.remove(self.grid[alt_row][alt_col]); }\n+        foreach alt_row in range(row0, row0 + 3u8) {\n+            foreach alt_col in range(col0, col0 + 3u8) {\n+                avail.remove(self.grid[alt_row][alt_col]);\n+            }\n         }\n     }\n }"}, {"sha": "166f7e048df1cd0db977aa6ea0982bc8f86cac8c", "filename": "src/test/compile-fail/issue-2817-2.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ecefeb03ccecdcb306e5cc3c76b04670073a82fa/src%2Ftest%2Fcompile-fail%2Fissue-2817-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecefeb03ccecdcb306e5cc3c76b04670073a82fa/src%2Ftest%2Fcompile-fail%2Fissue-2817-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2817-2.rs?ref=ecefeb03ccecdcb306e5cc3c76b04670073a82fa", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::uint;\n-\n-fn not_bool(f: &fn(int) -> ~str) -> bool {}\n-\n-fn main() {\n-    for uint::range(0, 100000) |_i| { //~ ERROR A for-loop body must return (), but\n-        false\n-    };\n-    for not_bool |_i| {\n-    //~^ ERROR A `for` loop iterator should expect a closure that returns `bool`\n-        ~\"hi\"\n-    };\n-    for uint::range(0, 100000) |_i| { //~ ERROR A for-loop body must return (), but\n-        ~\"hi\"\n-    };\n-    for not_bool() |_i| {\n-    //~^ ERROR A `for` loop iterator should expect a closure that returns `bool`\n-    };\n-}"}, {"sha": "384b2cc843b0e17a0d5bfc1a9fae705bb988a249", "filename": "src/test/compile-fail/issue-2817.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -17,11 +17,11 @@ fn to_str(u: uint) -> ~str { fail!(); }\n fn uuid_random() -> uint { fail!(); }\n \n fn main() {\n-    do uint::range(0, 100000) |_i| { //~ ERROR Do-block body must return bool, but\n+    do range(0u, 100000).advance |_i| { //~ ERROR Do-block body must return bool, but\n     };\n     // should get a more general message if the callback\n     // doesn't return nil\n-    do uint::range(0, 100000) |_i| { //~ ERROR mismatched types\n+    do range(0u, 100000).advance |_i| { //~ ERROR mismatched types\n         ~\"str\"\n     };\n }"}, {"sha": "ac52f10ba701dc4df5721018ab54a245546cdf2c", "filename": "src/test/compile-fail/moves-based-on-type-move-out-of-closure-env-issue-1965.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -14,7 +14,5 @@ fn test(_x: ~uint) {}\n \n fn main() {\n     let i = ~3;\n-    for uint::range(0, 10) |_x| {\n-        test(i); //~ ERROR cannot move out\n-    }\n+    let _f = || test(i); //~ ERROR cannot move out\n }"}, {"sha": "1cde50cc15e9223e8b47dc8390c91640eba7a743", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -11,16 +11,14 @@\n // error-pattern:method `nap` is private\n \n mod kitties {\n-    use std::uint;\n-\n     pub struct cat {\n         priv meows : uint,\n \n         how_hungry : int,\n     }\n \n     impl cat {\n-        priv fn nap(&self) { uint::range(1u, 10000u, |_i| false); }\n+        priv fn nap(&self) {}\n     }\n \n     pub fn cat(in_x : uint, in_y : int) -> cat {"}, {"sha": "9cedf86f35056aaed7b313a2fe03b9a6575bb651", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -16,10 +16,10 @@ struct dog {\n \n impl dog {\n     pub fn chase_cat(&mut self) {\n-        for uint::range(0u, 10u) |_i| {\n+        let _f = || {\n             let p: &'static mut uint = &mut self.food; //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n             *p = 3u;\n-        }\n+        };\n     }\n }\n "}, {"sha": "5aa8273527a3ad13874bfdfd2bfa1500bffce96b", "filename": "src/test/run-fail/for-each-loop-fail.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -11,6 +11,4 @@\n // error-pattern:moop\n extern mod extra;\n \n-use std::uint;\n-\n-fn main() { for uint::range(0u, 10u) |_i| { fail!(\"moop\"); } }\n+fn main() { foreach _ in range(0u, 10u) { fail!(\"moop\"); } }"}, {"sha": "87791112edf6f7a3b87d005959e83d9b991a01b1", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     let count = @mut 0u;\n     let mut map = std::hashmap::HashMap::new();\n     let mut arr = ~[];\n-    for std::uint::range(0u, 10u) |i| {\n+    foreach i in range(0u, 10u) {\n         arr.push(@~\"key stuff\");\n         map.insert(arr.clone(), arr + &[@~\"value stuff\"]);\n         if arr.len() == 5 {"}, {"sha": "ecd3b0aa529120dd9e18c4a75331c593e1024691", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -23,7 +23,7 @@ fn add_int(x: &mut Ints, v: int) {\n \n fn iter_ints(x: &Ints, f: &fn(x: &int) -> bool) -> bool {\n     let l = x.values.len();\n-    uint::range(0, l, |i| f(&x.values[i]))\n+    range(0u, l).advance(|i| f(&x.values[i]))\n }\n \n pub fn main() {"}, {"sha": "6bfe7a8d7907e0d105ce7149076299c060f269a1", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -83,7 +83,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n \n \n fn annoy_neighbors(critter: @noisy) {\n-  for uint::range(0u, 10u) |i| { critter.speak(); }\n+    foreach i in range(0u, 10) { critter.speak(); }\n }\n \n pub fn main() {"}, {"sha": "8f5fcaba4fb329a81c83e7bacb6659811fb595a5", "filename": "src/test/run-pass/class-impl-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -75,7 +75,7 @@ class cat : map<int, bool> {\n \n pub fn main() {\n   let nyan : cat = cat(0, 2, \"nyan\");\n-  for uint::range(1u, 5u) |_i| { nyan.speak(); }\n+  foreach _ in range(1u, 5u) { nyan.speak(); }\n   // cat returns true if uint input is greater than\n   // the number of meows so far\n   assert!((nyan.get(1)));"}, {"sha": "921b35b74375b0a40a03d31b837991291276b4b4", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -117,11 +117,11 @@ impl<T> cat<T> {\n \n pub fn main() {\n     let mut nyan: cat<~str> = cat::new(0, 2, ~\"nyan\");\n-    for uint::range(1, 5) |_| { nyan.speak(); }\n+    foreach _ in range(1u, 5) { nyan.speak(); }\n     assert!(*nyan.find(&1).unwrap() == ~\"nyan\");\n     assert_eq!(nyan.find(&10), None);\n     let mut spotty: cat<cat_type> = cat::new(2, 57, tuxedo);\n-    for uint::range(0, 6) |_| { spotty.speak(); }\n+    foreach _ in range(0u, 6) { spotty.speak(); }\n     assert_eq!(spotty.len(), 8);\n     assert!((spotty.contains_key(&2)));\n     assert_eq!(spotty.get(&3), &tuxedo);"}, {"sha": "a5cc005b538e45f1077525f91256351378531c38", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -63,6 +63,6 @@ pub fn main() {\n   let mut nyan = cat(0u, 2, ~\"nyan\");\n   nyan.eat();\n   assert!((!nyan.eat()));\n-  for uint::range(1u, 10u) |_i| { nyan.speak(); };\n+  foreach _ in range(1u, 10u) { nyan.speak(); };\n   assert!((nyan.eat()));\n }"}, {"sha": "05084ec9802e7785685ee50b8fb456ffb248e7d8", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -13,7 +13,7 @@\n use std::uint;\n \n trait noisy {\n-  fn speak(&mut self);\n+    fn speak(&mut self);\n }\n \n #[deriving(Clone)]\n@@ -48,7 +48,7 @@ impl cat {\n }\n \n impl noisy for cat {\n-  fn speak(&mut self) { self.meow(); }\n+    fn speak(&mut self) { self.meow(); }\n }\n \n fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n@@ -65,10 +65,10 @@ fn make_speak<C:noisy>(mut c: C) {\n }\n \n pub fn main() {\n-  let mut nyan = cat(0u, 2, ~\"nyan\");\n-  nyan.eat();\n-  assert!((!nyan.eat()));\n-  for uint::range(1u, 10u) |_i| {\n-    make_speak(nyan.clone());\n-  }\n+    let mut nyan = cat(0u, 2, ~\"nyan\");\n+    nyan.eat();\n+    assert!((!nyan.eat()));\n+    foreach _ in range(1u, 10u) {\n+        make_speak(nyan.clone());\n+    }\n }"}, {"sha": "d33f2c26c921663e44429575448a55c4c154c664", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -95,7 +95,7 @@ class cat : noisy, scratchy, bitey {\n }\n \n fn annoy_neighbors<T:noisy>(critter: T) {\n-  for uint::range(0u, 10u) |i| {\n+  foreach i in range(0u, 10u) {\n       let what = critter.speak();\n       info!(\"%u %d\", i, what);\n   }"}, {"sha": "d14bcac5a244e05ad25f205696636d55feda1376", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -19,6 +19,6 @@ pub fn main() {\n     let mut nyan = cat(0u, 2, ~\"nyan\");\n     nyan.eat();\n     assert!((!nyan.eat()));\n-    for uint::range(1u, 10u) |_i| { nyan.speak(); };\n+    foreach _ in range(1u, 10u) { nyan.speak(); };\n     assert!((nyan.eat()));\n }"}, {"sha": "3200b476a726322294637e5607ecb6c143593d29", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::uint;\n-\n struct cat {\n     priv meows : uint,\n \n@@ -54,6 +52,6 @@ pub fn main() {\n   let mut nyan = cat(0u, 2, ~\"nyan\");\n   nyan.eat();\n   assert!((!nyan.eat()));\n-  for uint::range(1u, 10u) |_i| { nyan.speak(); };\n+  foreach _ in range(1u, 10u) { nyan.speak(); };\n   assert!((nyan.eat()));\n }"}, {"sha": "c46641ffbd6648c5c105d6e1870a75763dd253c0", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -11,7 +11,6 @@\n extern mod extra;\n \n use std::io;\n-use std::uint;\n use std::vec;\n \n trait methods {\n@@ -41,7 +40,7 @@ pub fn main() {\n     let bools = ~[false, false, true, false, false, true, true, false];\n     let bools2 = to_bools(Storage{storage: ~[0b01100100]});\n \n-    for uint::range(0, 8) |i| {\n+    foreach i in range(0u, 8) {\n         printfln!(\"%u => %u vs %u\", i, bools[i] as uint, bools2[i] as uint);\n     }\n "}, {"sha": "2819a0471e9ee668c0ea68d26d0c8641263cf30d", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -134,13 +134,13 @@ impl Canvas for AsciiArt {\n \n     fn add_rect(&mut self, shape: Rect) {\n         // Add the top and bottom lines.\n-        for int::range(shape.top_left.x, shape.top_left.x + shape.size.width) |x| {\n+        foreach x in range(shape.top_left.x, shape.top_left.x + shape.size.width) {\n             self.add_pt(x, shape.top_left.y);\n             self.add_pt(x, shape.top_left.y + shape.size.height - 1);\n         }\n \n         // Add the left and right lines.\n-        for int::range(shape.top_left.y, shape.top_left.y + shape.size.height) |y|{\n+        foreach y in range(shape.top_left.y, shape.top_left.y + shape.size.height) {\n             self.add_pt(shape.top_left.x, y);\n             self.add_pt(shape.top_left.x + shape.size.width - 1, y);\n         }"}, {"sha": "65d23e7916d4a6d38c675dbb76e7bbb4b4ecea57", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -2,7 +2,6 @@ extern mod extra;\n \n use std::comm::Chan;\n use std::task;\n-use std::uint;\n \n type RingBuffer = ~[float];\n type SamplesFn = ~fn(samples: &RingBuffer);\n@@ -18,8 +17,9 @@ fn foo(name: ~str, samples_chan: Chan<Msg>) {\n         let callback: SamplesFn =\n             |buffer|\n             {\n-                for uint::range(0, buffer.len())\n-                    |i| {error!(\"%?: %f\", i, buffer[i])}\n+                foreach i in range(0u, buffer.len()) {\n+                    error!(\"%?: %f\", i, buffer[i])\n+                }\n             };\n         samples_chan.send(GetSamples(name.clone(), callback));\n     };"}, {"sha": "edb91a11cfccd84f1cfb2f8aa77994fa6d854455", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -10,14 +10,14 @@\n \n \n \n-fn range(a: int, b: int, it: &fn(int)) {\n+fn range_(a: int, b: int, it: &fn(int)) {\n     assert!((a < b));\n     let mut i: int = a;\n     while i < b { it(i); i += 1; }\n }\n \n pub fn main() {\n     let mut sum: int = 0;\n-    range(0, 100, |x| sum += x );\n+    range_(0, 100, |x| sum += x );\n     info!(sum);\n }"}, {"sha": "9f79ca2f9365be31674a09c4583cdc87a884af84", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -12,7 +12,6 @@\n extern mod extra;\n \n use std::task;\n-use std::uint;\n \n fn die() {\n     fail!();\n@@ -23,7 +22,7 @@ fn iloop() {\n }\n \n pub fn main() {\n-    for uint::range(0u, 100u) |_i| {\n+    foreach _ in range(0u, 100u) {\n         task::spawn_unlinked(|| iloop() );\n     }\n }"}, {"sha": "827c43cbcae20bcf82bf1aeb9e5361b2c6428fe5", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -10,8 +10,6 @@\n \n extern mod extra;\n \n-use std::uint;\n-\n #[deriving(Clone)]\n struct Triple {\n     x: int,\n@@ -28,7 +26,7 @@ fn test(x: bool, foo: ~Triple) -> int {\n \n pub fn main() {\n     let x = ~Triple{x: 1, y: 2, z: 3};\n-    for uint::range(0u, 10000u) |_i| {\n+    foreach _ in range(0u, 10000u) {\n         assert_eq!(test(true, x.clone()), 2);\n     }\n     assert_eq!(test(false, x), 5);"}, {"sha": "a33098ad72306d4288ccd039cf0de5a9218ff641", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -10,8 +10,6 @@\n \n extern mod extra;\n \n-use std::uint;\n-\n struct Triple { x: int, y: int, z: int }\n \n fn test(x: bool, foo: @Triple) -> int {\n@@ -23,7 +21,7 @@ fn test(x: bool, foo: @Triple) -> int {\n \n pub fn main() {\n     let x = @Triple{x: 1, y: 2, z: 3};\n-    for uint::range(0u, 10000u) |i| {\n+    foreach i in range(0u, 10000u) {\n         assert_eq!(test(true, x), 2);\n     }\n     assert_eq!(test(false, x), 5);"}, {"sha": "869888c7dbc22af39c12d217e565c81843e78938", "filename": "src/test/run-pass/num-range-rev.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -12,11 +12,11 @@ use std::int;\n use std::uint;\n \n fn uint_range(lo: uint, hi: uint, it: &fn(uint) -> bool) -> bool {\n-    uint::range(lo, hi, it)\n+    range(lo, hi).advance(it)\n }\n \n fn int_range(lo: int,  hi: int, it: &fn(int) -> bool) -> bool {\n-    int::range(lo, hi, it)\n+    range(lo, hi).advance(it)\n }\n \n fn uint_range_rev(hi: uint, lo: uint, it: &fn(uint) -> bool) -> bool {"}, {"sha": "3960f489c6ad8b02e3b97c04ca7ed9423a46c193", "filename": "src/test/run-pass/num-range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fnum-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fnum-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-range.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -12,11 +12,11 @@ use std::int;\n use std::uint;\n \n fn uint_range(lo: uint, hi: uint, it: &fn(uint) -> bool) -> bool {\n-    uint::range(lo, hi, it)\n+    range(lo, hi).advance(it)\n }\n \n fn int_range(lo: int, hi: int, it: &fn(int) -> bool) -> bool {\n-    int::range(lo, hi, it)\n+    range(lo, hi).advance(it)\n }\n \n fn int_range_step(a: int, b: int, step: int, it: &fn(int) -> bool) -> bool {"}, {"sha": "dd570f85244254fb4fe59b712d48780816d49bf2", "filename": "src/test/run-pass/owned-trait-objects.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fowned-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fowned-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fowned-trait-objects.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::uint::{range};\n-\n trait FooTrait {\n     fn foo(&self) -> uint;\n }\n@@ -31,7 +29,7 @@ pub fn main() {\n         ~BarStruct{ x: 2 } as ~FooTrait\n     ];\n \n-    for range(0, foos.len()) |i| {\n+    foreach i in range(0u, foos.len()) {\n         assert_eq!(i, foos[i].foo());\n     }\n }"}, {"sha": "844a7c732a31315d5800d37d210ee3b818b19cde", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::sys;\n-use std::uint;\n \n #[packed]\n #[deriving(Eq)]\n@@ -23,7 +22,7 @@ fn main() {\n \n     assert_eq!(sys::size_of::<[Foo, .. 10]>(), 90);\n \n-    for uint::range(0, 10) |i| {\n+    foreach i in range(0u, 10) {\n         assert_eq!(foos[i], Foo { bar: 1, baz: 2});\n     }\n "}, {"sha": "2bdb381ee2c560e9f46b6d7bd289f57bba11e247", "filename": "src/test/run-pass/pattern-bound-var-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -12,13 +12,11 @@\n // pattern-bound var is an upvar (when translating\n // the for-each body)\n \n-use std::uint;\n-\n fn foo(src: uint) {\n \n     match Some(src) {\n       Some(src_id) => {\n-        for uint::range(0u, 10u) |i| {\n+        foreach i in range(0u, 10u) {\n             let yyy = src_id;\n             assert_eq!(yyy, 0u);\n         }"}, {"sha": "c218b6ba0136aea29d1de95f644cc0f40c217822", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::uint;\n-\n struct cat {\n     priv meows : uint,\n \n@@ -24,7 +22,7 @@ impl cat {\n }\n \n impl cat {\n-    fn nap(&mut self) { for uint::range(1u, 10u) |_i| { }}\n+    fn nap(&mut self) { foreach _ in range(1u, 10u) { } }\n }\n \n fn cat(in_x : uint, in_y : int) -> cat {"}, {"sha": "a727c28fe83518497ca21fffd3fbc674d1ab65fb", "filename": "src/test/run-pass/regions-infer-borrow-scope-addr-of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::uint;\n use std::util;\n \n pub fn main() {\n     let mut x = 4;\n \n-    for uint::range(0, 3) |i| {\n+    foreach i in range(0u, 3) {\n         // ensure that the borrow in this alt\n         // does not inferfere with the swap\n         // below.  note that it would it you"}, {"sha": "65c5ca0aee7b592a0ef63f3d7640ab6bae0fb0cc", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -13,7 +13,6 @@ extern mod extra;\n \n use std::comm;\n use std::task;\n-use std::uint;\n \n fn die() {\n     fail!();\n@@ -34,7 +33,7 @@ fn iloop() {\n }\n \n pub fn main() {\n-    for uint::range(0u, 16u) |_i| {\n+    foreach _ in range(0u, 16u) {\n         task::spawn_unlinked(|| iloop() );\n     }\n }"}, {"sha": "babf5a2fa9089c89a71f5f01bf6b09ef6544410f", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -26,7 +26,7 @@ pub fn main() {\n         match io::file_writer(&path, [io::Create, io::Truncate]) {\n             Err(ref e) => fail!(e.clone()),\n             Ok(f) => {\n-                for uint::range(0, 1000) |_i| {\n+                foreach _ in range(0u, 1000) {\n                     f.write_u8(0);\n                 }\n             }"}, {"sha": "24e2b95a5df1872f681ea37ef5716a937afd8f6a", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -31,8 +31,8 @@ trait map<T> {\n impl<T> map<T> for ~[T] {\n     fn map<U>(&self, f: &fn(&T) -> U) -> ~[U] {\n         let mut r = ~[];\n-        // FIXME: #7355 generates bad code with Iterator\n-        for std::uint::range(0, self.len()) |i| {\n+        // FIXME: #7355 generates bad code with VecIterator\n+        foreach i in range(0u, self.len()) {\n             r.push(f(&self[i]));\n         }\n         r"}, {"sha": "a0cecb3142775de21c941f8fb62359f0261df36b", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -13,13 +13,13 @@ struct S<T> {\n     b: uint,\n }\n \n-fn range(lo: uint, hi: uint, it: &fn(uint)) {\n+fn range_(lo: uint, hi: uint, it: &fn(uint)) {\n     let mut lo_ = lo;\n     while lo_ < hi { it(lo_); lo_ += 1u; }\n }\n \n fn create_index<T>(index: ~[S<T>], hash_fn: extern fn(T) -> uint) {\n-    range(0u, 256u, |_i| { let bucket: ~[T] = ~[]; } )\n+    range_(0u, 256u, |_i| { let bucket: ~[T] = ~[]; } )\n }\n \n pub fn main() { }"}, {"sha": "60d28d832df23df0220b653e306c42ab42d42b15", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcce8d95c582d3f918fe4e978d6a715efd991e9/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=bbcce8d95c582d3f918fe4e978d6a715efd991e9", "patch": "@@ -10,7 +10,6 @@\n \n use std::comm::*;\n use std::task;\n-use std::uint;\n \n fn child(c: &SharedChan<~uint>, i: uint) {\n     c.send(~i);\n@@ -21,14 +20,14 @@ pub fn main() {\n     let ch = SharedChan::new(ch);\n     let n = 100u;\n     let mut expected = 0u;\n-    for uint::range(0u, n) |i| {\n+    foreach i in range(0u, n) {\n         let ch = ch.clone();\n         task::spawn(|| child(&ch, i) );\n         expected += i;\n     }\n \n     let mut actual = 0u;\n-    for uint::range(0u, n) |_i| {\n+    foreach _ in range(0u, n) {\n         let j = p.recv();\n         actual += *j;\n     }"}]}