{"sha": "98422e8c156d9cf343c93da30f71d9a4cabda25f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NDIyZThjMTU2ZDljZjM0M2M5M2RhMzBmNzFkOWE0Y2FiZGEyNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-05T15:11:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-05T15:11:45Z"}, "message": "Auto merge of #31400 - durka:civilized-deriving, r=alexcrichton\n\nYou can `#[derive(FromPrimitive)]`, but it [fails later in the compile](https://play.rust-lang.org/?gist=82cb8ad2fac49e3fe472&version=stable) due to hardcoding `std::num::FromPrimitive` which [was removed](https://github.com/rust-lang/rust/commit/eeb94886adccb3f13003f92f117115d17846ce1f) (for some reason Github doesn't show `FromPrimitive` in the diff, but `git show` does).\n\nAnyway, this PR removes the code. I didn't mark it as a breaking change, even though [this extremely contrived code using highly unstable features](https://play.rust-lang.org/?gist=1e1b1bbff962837b228a&version=nightly) is broken by it -- should I?", "tree": {"sha": "0c1a6de1d4c536fe8db9ca538b1f4afecefa44ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c1a6de1d4c536fe8db9ca538b1f4afecefa44ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98422e8c156d9cf343c93da30f71d9a4cabda25f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98422e8c156d9cf343c93da30f71d9a4cabda25f", "html_url": "https://github.com/rust-lang/rust/commit/98422e8c156d9cf343c93da30f71d9a4cabda25f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98422e8c156d9cf343c93da30f71d9a4cabda25f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38dfb96b46ab6b9e2bdc384e1d13ac57d1f760d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/38dfb96b46ab6b9e2bdc384e1d13ac57d1f760d9", "html_url": "https://github.com/rust-lang/rust/commit/38dfb96b46ab6b9e2bdc384e1d13ac57d1f760d9"}, {"sha": "45e716e51cd8b7f982645bfefb129e7618e241b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e716e51cd8b7f982645bfefb129e7618e241b3", "html_url": "https://github.com/rust-lang/rust/commit/45e716e51cd8b7f982645bfefb129e7618e241b3"}], "stats": {"total": 172, "additions": 4, "deletions": 168}, "files": [{"sha": "dcaa96446036b6fe19f5a047a75f3c9a97d05119", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98422e8c156d9cf343c93da30f71d9a4cabda25f/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98422e8c156d9cf343c93da30f71d9a4cabda25f/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=98422e8c156d9cf343c93da30f71d9a4cabda25f", "patch": "@@ -63,7 +63,6 @@ pub mod decodable;\n pub mod hash;\n pub mod debug;\n pub mod default;\n-pub mod primitive;\n \n #[path=\"cmp/partial_eq.rs\"]\n pub mod partial_eq;\n@@ -178,8 +177,6 @@ derive_traits! {\n \n     \"Default\" => default::expand_deriving_default,\n \n-    \"FromPrimitive\" => primitive::expand_deriving_from_primitive,\n-\n     \"Send\" => bounds::expand_deriving_unsafe_bound,\n     \"Sync\" => bounds::expand_deriving_unsafe_bound,\n     \"Copy\" => bounds::expand_deriving_copy,"}, {"sha": "121fe01976ef712a8e8415f18876ed18a80c2e88", "filename": "src/libsyntax_ext/deriving/primitive.rs", "status": "removed", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/38dfb96b46ab6b9e2bdc384e1d13ac57d1f760d9/src%2Flibsyntax_ext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38dfb96b46ab6b9e2bdc384e1d13ac57d1f760d9/src%2Flibsyntax_ext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fprimitive.rs?ref=38dfb96b46ab6b9e2bdc384e1d13ac57d1f760d9", "patch": "@@ -1,142 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n-\n-use syntax::ast::{MetaItem, Expr};\n-use syntax::ast;\n-use syntax::codemap::Span;\n-use syntax::ext::base::{ExtCtxt, Annotatable};\n-use syntax::ext::build::AstBuilder;\n-use syntax::parse::token::InternedString;\n-use syntax::ptr::P;\n-\n-pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n-                                      span: Span,\n-                                      mitem: &MetaItem,\n-                                      item: &Annotatable,\n-                                      push: &mut FnMut(Annotatable))\n-{\n-    let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(span, inline));\n-    let trait_def = TraitDef {\n-        span: span,\n-        attributes: Vec::new(),\n-        path: path_std!(cx, core::num::FromPrimitive),\n-        additional_bounds: Vec::new(),\n-        generics: LifetimeBounds::empty(),\n-        is_unsafe: false,\n-        methods: vec!(\n-            MethodDef {\n-                name: \"from_i64\",\n-                generics: LifetimeBounds::empty(),\n-                explicit_self: None,\n-                args: vec!(Literal(path_local!(i64))),\n-                ret_ty: Literal(Path::new_(pathvec_std!(cx, core::option::Option),\n-                                           None,\n-                                           vec!(Box::new(Self_)),\n-                                           true)),\n-                // #[inline] liable to cause code-bloat\n-                attributes: attrs.clone(),\n-                is_unsafe: false,\n-                combine_substructure: combine_substructure(Box::new(|c, s, sub| {\n-                    cs_from(\"i64\", c, s, sub)\n-                })),\n-            },\n-            MethodDef {\n-                name: \"from_u64\",\n-                generics: LifetimeBounds::empty(),\n-                explicit_self: None,\n-                args: vec!(Literal(path_local!(u64))),\n-                ret_ty: Literal(Path::new_(pathvec_std!(cx, core::option::Option),\n-                                           None,\n-                                           vec!(Box::new(Self_)),\n-                                           true)),\n-                // #[inline] liable to cause code-bloat\n-                attributes: attrs,\n-                is_unsafe: false,\n-                combine_substructure: combine_substructure(Box::new(|c, s, sub| {\n-                    cs_from(\"u64\", c, s, sub)\n-                })),\n-            }\n-        ),\n-        associated_types: Vec::new(),\n-    };\n-\n-    trait_def.expand(cx, mitem, item, push)\n-}\n-\n-fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n-    let n = match (substr.nonself_args.len(), substr.nonself_args.get(0)) {\n-        (1, Some(o_f)) => o_f,\n-        _ => cx.span_bug(trait_span, \"incorrect number of arguments in `derive(FromPrimitive)`\")\n-    };\n-\n-    match *substr.fields {\n-        StaticStruct(..) => {\n-            cx.span_err(trait_span, \"`FromPrimitive` cannot be derived for structs\");\n-            return cx.expr_fail(trait_span, InternedString::new(\"\"));\n-        }\n-        StaticEnum(enum_def, _) => {\n-            if enum_def.variants.is_empty() {\n-                cx.span_err(trait_span,\n-                            \"`FromPrimitive` cannot be derived for enums with no variants\");\n-                return cx.expr_fail(trait_span, InternedString::new(\"\"));\n-            }\n-\n-            let mut arms = Vec::new();\n-\n-            for variant in &enum_def.variants {\n-                let def = &variant.node.data;\n-                if !def.is_unit() {\n-                    cx.span_err(trait_span, \"`FromPrimitive` cannot be derived \\\n-                                             for enums with non-unit variants\");\n-                    return cx.expr_fail(trait_span,\n-                                        InternedString::new(\"\"));\n-                }\n-\n-                let span = variant.span;\n-\n-                // expr for `$n == $variant as $name`\n-                let path = cx.path(span, vec![substr.type_ident, variant.node.name]);\n-                let variant = cx.expr_path(path);\n-                let ty = cx.ty_ident(span, cx.ident_of(name));\n-                let cast = cx.expr_cast(span, variant.clone(), ty);\n-                let guard = cx.expr_binary(span, ast::BiEq, n.clone(), cast);\n-\n-                // expr for `Some($variant)`\n-                let body = cx.expr_some(span, variant);\n-\n-                // arm for `_ if $guard => $body`\n-                let arm = ast::Arm {\n-                    attrs: vec!(),\n-                    pats: vec!(cx.pat_wild(span)),\n-                    guard: Some(guard),\n-                    body: body,\n-                };\n-\n-                arms.push(arm);\n-            }\n-\n-            // arm for `_ => None`\n-            let arm = ast::Arm {\n-                attrs: vec!(),\n-                pats: vec!(cx.pat_wild(trait_span)),\n-                guard: None,\n-                body: cx.expr_none(trait_span),\n-            };\n-            arms.push(arm);\n-\n-            cx.expr_match(trait_span, n.clone(), arms)\n-        }\n-        _ => cx.span_bug(trait_span, \"expected StaticEnum in derive(FromPrimitive)\")\n-    }\n-}"}, {"sha": "be822a173ab5821053a21d7b05abb6eb24562f55", "filename": "src/test/compile-fail/deriving-primitive.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/98422e8c156d9cf343c93da30f71d9a4cabda25f/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98422e8c156d9cf343c93da30f71d9a4cabda25f/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs?ref=98422e8c156d9cf343c93da30f71d9a4cabda25f", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,27 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::num::FromPrimitive;\n-use std::isize;\n+#[derive(FromPrimitive)] //~ERROR `#[derive]` for custom traits is not stable\n+enum Foo {}\n \n-#[derive(FromPrimitive)]\n-struct A { x: isize }\n-//~^^ ERROR `FromPrimitive` cannot be derived for structs\n-//~^^^ ERROR `FromPrimitive` cannot be derived for structs\n+fn main() {}\n \n-#[derive(FromPrimitive)]\n-struct B(isize);\n-//~^^ ERROR `FromPrimitive` cannot be derived for structs\n-//~^^^ ERROR `FromPrimitive` cannot be derived for structs\n-\n-#[derive(FromPrimitive)]\n-enum C { Foo(isize), Bar(usize) }\n-//~^^ ERROR `FromPrimitive` cannot be derived for enums with non-unit variants\n-//~^^^ ERROR `FromPrimitive` cannot be derived for enums with non-unit variants\n-\n-#[derive(FromPrimitive)]\n-enum D { Baz { x: isize } }\n-//~^^ ERROR `FromPrimitive` cannot be derived for enums with non-unit variants\n-//~^^^ ERROR `FromPrimitive` cannot be derived for enums with non-unit variants\n-\n-pub fn main() {}"}]}