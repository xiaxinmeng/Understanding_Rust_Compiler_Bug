{"sha": "8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZjI4MzZlYWYwNTFmZTBlZjRkYWVhNmIwN2QwZmVjZGI4MDlkYzM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-07-25T09:22:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-25T09:22:25Z"}, "message": "Merge pull request #2861 from topecongiro/issue-2859\n\nPut lifetimes after trait when they gets orphaned", "tree": {"sha": "6048fa8b07273881392ded30593b41ce0cc0f039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6048fa8b07273881392ded30593b41ce0cc0f039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbWEFRCRBK7hj4Ov3rIwAAdHIIACz/rV2TnloUNk8AlU+kFfbV\nAaHgpzvGNWQ4s++FOty+yYBbYY4/25jzuSnyMt/AoKUSz+NX3xD0uHaxRoEcvQle\nRCnr+YQDRXcIYLUQjDxDdCxjBMMfRrjJmFx/id7AYa+wPIE9X5yEKFh1cDixpcT+\nRgbs9dFQtjmHu/HnhVkKa5MQkPum0tRbzl+zWdSwMLo3jt+oXqzhypPW6QyB7Dcc\naJZxT+j9wUn/fgRPoQBbZM68RJPJ+i+ZmvZcZyqNGp/yZmYB5jsQbWcsKK/c5S2R\nZVVoC7KrSTtz3XUifkz/NVWiGpqCCJhnKt/8h/0V9chyLLtxZYtblFcwzi3IKCQ=\n=/6Zw\n-----END PGP SIGNATURE-----\n", "payload": "tree 6048fa8b07273881392ded30593b41ce0cc0f039\nparent e3fea15ca9b5157f901315595b2c16004d166307\nparent 6cecdd681f13c0800ba1383072725761cc17e57d\nauthor Nick Cameron <nrc@ncameron.org> 1532510545 +1200\ncommitter GitHub <noreply@github.com> 1532510545 +1200\n\nMerge pull request #2861 from topecongiro/issue-2859\n\nPut lifetimes after trait when they gets orphaned"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3", "html_url": "https://github.com/rust-lang/rust/commit/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3fea15ca9b5157f901315595b2c16004d166307", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3fea15ca9b5157f901315595b2c16004d166307", "html_url": "https://github.com/rust-lang/rust/commit/e3fea15ca9b5157f901315595b2c16004d166307"}, {"sha": "6cecdd681f13c0800ba1383072725761cc17e57d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cecdd681f13c0800ba1383072725761cc17e57d", "html_url": "https://github.com/rust-lang/rust/commit/6cecdd681f13c0800ba1383072725761cc17e57d"}], "stats": {"total": 140, "additions": 126, "deletions": 14}, "files": [{"sha": "7da84bfe68f6b2c17ce97a349b698e339658f2ec", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3", "patch": "@@ -1752,11 +1752,10 @@ pub fn rewrite_associated_impl_type(\n     ident: ast::Ident,\n     defaultness: ast::Defaultness,\n     ty_opt: Option<&ptr::P<ast::Ty>>,\n-    generic_bounds_opt: Option<&ast::GenericBounds>,\n     context: &RewriteContext,\n     indent: Indent,\n ) -> Option<String> {\n-    let result = rewrite_associated_type(ident, ty_opt, generic_bounds_opt, context, indent)?;\n+    let result = rewrite_associated_type(ident, ty_opt, None, context, indent)?;\n \n     match defaultness {\n         ast::Defaultness::Default => Some(format!(\"default {}\", result)),"}, {"sha": "a67ba87659119167dad9326ada5ba3b38e25d77a", "filename": "src/types.rs", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3", "patch": "@@ -27,8 +27,8 @@ use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use spanned::Spanned;\n use utils::{\n-    colon_spaces, extra_offset, first_line_width, format_abi, format_mutability, last_line_width,\n-    mk_sp, rewrite_ident,\n+    colon_spaces, extra_offset, first_line_width, format_abi, format_mutability,\n+    last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n };\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n@@ -733,15 +733,28 @@ fn rewrite_bare_fn(\n     Some(result)\n }\n \n-fn join_bounds<T>(\n+fn is_generic_bounds_in_order(generic_bounds: &[ast::GenericBound]) -> bool {\n+    let is_trait = |b: &ast::GenericBound| match b {\n+        ast::GenericBound::Outlives(..) => false,\n+        ast::GenericBound::Trait(..) => true,\n+    };\n+    let is_lifetime = |b: &ast::GenericBound| !is_trait(b);\n+    let last_trait_index = generic_bounds.iter().rposition(is_trait);\n+    let first_lifetime_index = generic_bounds.iter().position(is_lifetime);\n+    match (last_trait_index, first_lifetime_index) {\n+        (Some(last_trait_index), Some(first_lifetime_index)) => {\n+            last_trait_index < first_lifetime_index\n+        }\n+        _ => true,\n+    }\n+}\n+\n+fn join_bounds(\n     context: &RewriteContext,\n     shape: Shape,\n-    items: &[T],\n+    items: &[ast::GenericBound],\n     need_indent: bool,\n-) -> Option<String>\n-where\n-    T: Rewrite,\n-{\n+) -> Option<String> {\n     // Try to join types in a single line\n     let joiner = match context.config.type_punctuation_density() {\n         TypeDensity::Compressed => \"+\",\n@@ -752,7 +765,7 @@ where\n         .map(|item| item.rewrite(context, shape))\n         .collect::<Option<Vec<_>>>()?;\n     let result = type_strs.join(joiner);\n-    if items.len() == 1 || (!result.contains('\\n') && result.len() <= shape.width) {\n+    if items.len() <= 1 || (!result.contains('\\n') && result.len() <= shape.width) {\n         return Some(result);\n     }\n \n@@ -769,8 +782,26 @@ where\n         (type_strs, shape.indent)\n     };\n \n-    let joiner = format!(\"{}+ \", offset.to_string_with_newline(context.config));\n-    Some(type_strs.join(&joiner))\n+    let is_bound_extendable = |s: &str, b: &ast::GenericBound| match b {\n+        ast::GenericBound::Outlives(..) => true,\n+        ast::GenericBound::Trait(..) => last_line_extendable(s),\n+    };\n+    let mut result = String::with_capacity(128);\n+    result.push_str(&type_strs[0]);\n+    let mut can_be_put_on_the_same_line = is_bound_extendable(&result, &items[0]);\n+    let generic_bounds_in_order = is_generic_bounds_in_order(items);\n+    for (bound, bound_str) in items[1..].iter().zip(type_strs[1..].iter()) {\n+        if generic_bounds_in_order && can_be_put_on_the_same_line {\n+            result.push_str(joiner);\n+        } else {\n+            result.push_str(&offset.to_string_with_newline(context.config));\n+            result.push_str(\"+ \");\n+        }\n+        result.push_str(bound_str);\n+        can_be_put_on_the_same_line = is_bound_extendable(bound_str, bound);\n+    }\n+\n+    Some(result)\n }\n \n pub fn can_be_overflowed_type(context: &RewriteContext, ty: &ast::Ty, len: usize) -> bool {"}, {"sha": "fdbc9907f22a1cbb22d8a40e0d670ed88226b53b", "filename": "src/visitor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3", "patch": "@@ -515,7 +515,6 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     ii.ident,\n                     ii.defaultness,\n                     Some(ty),\n-                    None,\n                     &self.get_context(),\n                     self.block_indent,\n                 );"}, {"sha": "8d941fc0ab7fd051f0ab015dc2f6fc350c64ef93", "filename": "tests/source/type.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3/tests%2Fsource%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3/tests%2Fsource%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype.rs?ref=8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3", "patch": "@@ -38,3 +38,47 @@ impl CombineTypes {\n         self.query_callbacks()(&query_id)\n     }\n }\n+\n+// #2859\n+pub fn do_something<'a, T: Trait1 + Trait2 + 'a>(&fooo: u32) -> impl Future<\n+    Item = (\n+        impl Future<Item = (\n+        ), Error =   SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+impl Future<Item = (), Error = SomeError > + 'a,\n+    ),\n+    Error = SomeError,\n+    >\n+    +\n+    'a {\n+}\n+\n+pub fn do_something<'a, T: Trait1 + Trait2 + 'a>(    &fooo: u32,\n+) -> impl Future<\n+    Item = (\n+impl Future<Item = (), Error = SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+    ),\n+    Error = SomeError,\n+    >\n+    + Future<\n+    Item = (\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+impl Future<Item = (), Error = SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+    ),\n+    Error = SomeError,\n+        >\n+    + Future<\n+    Item = (\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+   impl Future<Item = (), Error = SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+    ),\n+    Error = SomeError,\n+        >\n+    +\n+    'a + 'b +\n+    'c {\n+}"}, {"sha": "b3a56d9ed2d7584e617cbfc6508a89bec402a332", "filename": "tests/target/type.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3/tests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3/tests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype.rs?ref=8ff2836eaf051fe0ef4daea6b07d0fecdb809dc3", "patch": "@@ -42,3 +42,42 @@ impl CombineTypes {\n         self.query_callbacks()(&query_id)\n     }\n }\n+\n+// #2859\n+pub fn do_something<'a, T: Trait1 + Trait2 + 'a>(\n+    &fooo: u32,\n+) -> impl Future<\n+    Item = (\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+    ),\n+    Error = SomeError,\n+> + 'a {\n+}\n+\n+pub fn do_something<'a, T: Trait1 + Trait2 + 'a>(\n+    &fooo: u32,\n+) -> impl Future<\n+    Item = (\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+    ),\n+    Error = SomeError,\n+> + Future<\n+    Item = (\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+    ),\n+    Error = SomeError,\n+> + Future<\n+    Item = (\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+        impl Future<Item = (), Error = SomeError> + 'a,\n+    ),\n+    Error = SomeError,\n+> + 'a + 'b + 'c {\n+}"}]}